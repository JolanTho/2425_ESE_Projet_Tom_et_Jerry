
Tom_n_Jerry_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001db68  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017c0  0801dd48  0801dd48  0001ed48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f508  0801f508  0002151c  2**0
                  CONTENTS
  4 .ARM          00000008  0801f508  0801f508  00020508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f510  0801f510  0002151c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f510  0801f510  00020510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801f514  0801f514  00020514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000051c  20000000  0801f518  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007624  2000051c  0801fa34  0002151c  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20007b40  0801fa34  00021b40  2**0
                  ALLOC
 11 .ARM.attributes 00000034  00000000  00000000  0002151c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003e2a2  00000000  00000000  00021550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000937d  00000000  00000000  0005f7f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002f18  00000000  00000000  00068b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000023ed  00000000  00000000  0006ba88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030bb1  00000000  00000000  0006de75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004060c  00000000  00000000  0009ea26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010bdd9  00000000  00000000  000df032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000023e5  00000000  00000000  001eae0b  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  00000228  00000000  00000000  001ed1f0  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000018  00000000  00000000  001ed418  2**2
                  CONTENTS, READONLY
 22 .iar.debug_frame 00000224  00000000  00000000  001ed430  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000ea7c  00000000  00000000  001ed654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000008c  00000000  00000000  001fc0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000051c 	.word	0x2000051c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801dd30 	.word	0x0801dd30

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000520 	.word	0x20000520
 800021c:	0801dd30 	.word	0x0801dd30

08000220 <USBPD_CAD_Init>:
 8000220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000224:	2600      	movs	r6, #0
 8000226:	2803      	cmp	r0, #3
 8000228:	4681      	mov	r9, r0
 800022a:	460c      	mov	r4, r1
 800022c:	4690      	mov	r8, r2
 800022e:	461f      	mov	r7, r3
 8000230:	bf28      	it	cs
 8000232:	2601      	movcs	r6, #1
 8000234:	d219      	bcs.n	800026a <USBPD_CAD_Init+0x4a>
 8000236:	b90c      	cbnz	r4, 800023c <USBPD_CAD_Init+0x1c>
 8000238:	2602      	movs	r6, #2
 800023a:	e016      	b.n	800026a <USBPD_CAD_Init+0x4a>
 800023c:	200c      	movs	r0, #12
 800023e:	f018 faf9 	bl	8018834 <malloc>
 8000242:	0005      	movs	r5, r0
 8000244:	bf08      	it	eq
 8000246:	2603      	moveq	r6, #3
 8000248:	d00f      	beq.n	800026a <USBPD_CAD_Init+0x4a>
 800024a:	210c      	movs	r1, #12
 800024c:	f01a f86b 	bl	801a326 <__aeabi_memclr>
 8000250:	602f      	str	r7, [r5, #0]
 8000252:	722e      	strb	r6, [r5, #8]
 8000254:	606c      	str	r4, [r5, #4]
 8000256:	464a      	mov	r2, r9
 8000258:	4940      	ldr	r1, [pc, #256]	@ (800035c <.text_6>)
 800025a:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
 800025e:	463a      	mov	r2, r7
 8000260:	6863      	ldr	r3, [r4, #4]
 8000262:	4641      	mov	r1, r8
 8000264:	4648      	mov	r0, r9
 8000266:	f011 f94b 	bl	8011500 <CAD_Init>
 800026a:	4630      	mov	r0, r6
 800026c:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

08000270 <USBPD_CAD_PortEnable>:
 8000270:	2803      	cmp	r0, #3
 8000272:	d203      	bcs.n	800027c <USBPD_CAD_PortEnable+0xc>
 8000274:	4a39      	ldr	r2, [pc, #228]	@ (800035c <.text_6>)
 8000276:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800027a:	7201      	strb	r1, [r0, #8]
 800027c:	4770      	bx	lr

0800027e <USBPD_CAD_Process>:
 800027e:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8000280:	2100      	movs	r1, #0
 8000282:	f88d 1000 	strb.w	r1, [sp]
 8000286:	9101      	str	r1, [sp, #4]
 8000288:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800028c:	2600      	movs	r6, #0
 800028e:	4c33      	ldr	r4, [pc, #204]	@ (800035c <.text_6>)
 8000290:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8000294:	2800      	cmp	r0, #0
 8000296:	d05c      	beq.n	8000352 <USBPD_CAD_Process+0xd4>
 8000298:	7a00      	ldrb	r0, [r0, #8]
 800029a:	2801      	cmp	r0, #1
 800029c:	d159      	bne.n	8000352 <USBPD_CAD_Process+0xd4>
 800029e:	aa01      	add	r2, sp, #4
 80002a0:	4669      	mov	r1, sp
 80002a2:	b2f0      	uxtb	r0, r6
 80002a4:	f011 fa72 	bl	801178c <CAD_StateMachine>
 80002a8:	42a8      	cmp	r0, r5
 80002aa:	bf98      	it	ls
 80002ac:	4605      	movls	r5, r0
 80002ae:	f89d 0000 	ldrb.w	r0, [sp]
 80002b2:	2801      	cmp	r0, #1
 80002b4:	d004      	beq.n	80002c0 <USBPD_CAD_Process+0x42>
 80002b6:	2802      	cmp	r0, #2
 80002b8:	bf18      	it	ne
 80002ba:	2804      	cmpne	r0, #4
 80002bc:	d012      	beq.n	80002e4 <USBPD_CAD_Process+0x66>
 80002be:	e031      	b.n	8000324 <USBPD_CAD_Process+0xa6>
 80002c0:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80002c4:	6801      	ldr	r1, [r0, #0]
 80002c6:	680a      	ldr	r2, [r1, #0]
 80002c8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80002cc:	600a      	str	r2, [r1, #0]
 80002ce:	6801      	ldr	r1, [r0, #0]
 80002d0:	680b      	ldr	r3, [r1, #0]
 80002d2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80002d6:	600b      	str	r3, [r1, #0]
 80002d8:	6800      	ldr	r0, [r0, #0]
 80002da:	6801      	ldr	r1, [r0, #0]
 80002dc:	f421 41c0 	bic.w	r1, r1, #24576	@ 0x6000
 80002e0:	6001      	str	r1, [r0, #0]
 80002e2:	e022      	b.n	800032a <USBPD_CAD_Process+0xac>
 80002e4:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80002e8:	6803      	ldr	r3, [r0, #0]
 80002ea:	9901      	ldr	r1, [sp, #4]
 80002ec:	681f      	ldr	r7, [r3, #0]
 80002ee:	f361 1787 	bfi	r7, r1, #6, #2
 80002f2:	601f      	str	r7, [r3, #0]
 80002f4:	6801      	ldr	r1, [r0, #0]
 80002f6:	680a      	ldr	r2, [r1, #0]
 80002f8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80002fc:	600a      	str	r2, [r1, #0]
 80002fe:	6800      	ldr	r0, [r0, #0]
 8000300:	6801      	ldr	r1, [r0, #0]
 8000302:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8000306:	2800      	cmp	r0, #0
 8000308:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 800030c:	6800      	ldr	r0, [r0, #0]
 800030e:	6801      	ldr	r1, [r0, #0]
 8000310:	bf0c      	ite	eq
 8000312:	f021 0108 	biceq.w	r1, r1, #8
 8000316:	f041 0108 	orrne.w	r1, r1, #8
 800031a:	6001      	str	r1, [r0, #0]
 800031c:	b2f0      	uxtb	r0, r6
 800031e:	2168      	movs	r1, #104	@ 0x68
 8000320:	f000 f8af 	bl	8000482 <USBPD_PE_Notification>
 8000324:	f89d 0000 	ldrb.w	r0, [sp]
 8000328:	b198      	cbz	r0, 8000352 <USBPD_CAD_Process+0xd4>
 800032a:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
 800032e:	685f      	ldr	r7, [r3, #4]
 8000330:	9a01      	ldr	r2, [sp, #4]
 8000332:	f89d 1000 	ldrb.w	r1, [sp]
 8000336:	f8d7 c000 	ldr.w	ip, [r7]
 800033a:	b2f0      	uxtb	r0, r6
 800033c:	47e0      	blx	ip
 800033e:	f89d 0000 	ldrb.w	r0, [sp]
 8000342:	2801      	cmp	r0, #1
 8000344:	bf18      	it	ne
 8000346:	2803      	cmpne	r0, #3
 8000348:	d103      	bne.n	8000352 <USBPD_CAD_Process+0xd4>
 800034a:	2169      	movs	r1, #105	@ 0x69
 800034c:	b2f0      	uxtb	r0, r6
 800034e:	f000 f898 	bl	8000482 <USBPD_PE_Notification>
 8000352:	1c76      	adds	r6, r6, #1
 8000354:	2e03      	cmp	r6, #3
 8000356:	d39b      	bcc.n	8000290 <USBPD_CAD_Process+0x12>
 8000358:	4628      	mov	r0, r5
 800035a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800035c <.text_6>:
 800035c:	20000538 	.word	0x20000538

08000360 <USBPD_CAD_AssertRd>:
 8000360:	b510      	push	{r4, lr}
 8000362:	4604      	mov	r4, r0
 8000364:	f012 fd52 	bl	8012e0c <USBPDM1_DeAssertRp>
 8000368:	4620      	mov	r0, r4
 800036a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800036e:	f012 bd59 	b.w	8012e24 <USBPDM1_AssertRd>

08000372 <USBPD_CAD_AssertRp>:
 8000372:	b510      	push	{r4, lr}
 8000374:	4604      	mov	r4, r0
 8000376:	f012 fddb 	bl	8012f30 <USBPDM1_DeAssertRd>
 800037a:	4620      	mov	r0, r4
 800037c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000380:	f012 bcae 	b.w	8012ce0 <USBPDM1_AssertRp>

08000384 <USBPD_CAD_EnterErrorRecovery>:
 8000384:	f011 b99e 	b.w	80116c4 <CAD_Enter_ErrorRecovery>

08000388 <USBPD_CAD_GetMemoryConsumption>:
 8000388:	2024      	movs	r0, #36	@ 0x24
 800038a:	4770      	bx	lr

0800038c <USBPD_PE_Init>:
 800038c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000390:	461f      	mov	r7, r3
 8000392:	4606      	mov	r6, r0
 8000394:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000396:	460d      	mov	r5, r1
 8000398:	4690      	mov	r8, r2
 800039a:	b908      	cbnz	r0, 80003a0 <USBPD_PE_Init+0x14>
 800039c:	2718      	movs	r7, #24
 800039e:	e02d      	b.n	80003fc <USBPD_PE_Init+0x70>
 80003a0:	2e03      	cmp	r6, #3
 80003a2:	bf28      	it	cs
 80003a4:	2717      	movcs	r7, #23
 80003a6:	d229      	bcs.n	80003fc <USBPD_PE_Init+0x70>
 80003a8:	f44f 702a 	mov.w	r0, #680	@ 0x2a8
 80003ac:	f018 fa42 	bl	8018834 <malloc>
 80003b0:	0004      	movs	r4, r0
 80003b2:	bf08      	it	eq
 80003b4:	2716      	moveq	r7, #22
 80003b6:	d021      	beq.n	80003fc <USBPD_PE_Init+0x70>
 80003b8:	f44f 712a 	mov.w	r1, #680	@ 0x2a8
 80003bc:	f019 ffb3 	bl	801a326 <__aeabi_memclr>
 80003c0:	f8df 0930 	ldr.w	r0, [pc, #2352]	@ 8000cf4 <.text_46>
 80003c4:	4631      	mov	r1, r6
 80003c6:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
 80003ca:	6025      	str	r5, [r4, #0]
 80003cc:	f8c4 8004 	str.w	r8, [r4, #4]
 80003d0:	7326      	strb	r6, [r4, #12]
 80003d2:	60a7      	str	r7, [r4, #8]
 80003d4:	f504 7329 	add.w	r3, r4, #676	@ 0x2a4
 80003d8:	f104 029c 	add.w	r2, r4, #156	@ 0x9c
 80003dc:	4629      	mov	r1, r5
 80003de:	4630      	mov	r0, r6
 80003e0:	f001 fb9c 	bl	8001b1c <USBPD_PRL_Init>
 80003e4:	0007      	movs	r7, r0
 80003e6:	d109      	bne.n	80003fc <USBPD_PE_Init+0x70>
 80003e8:	f000 fa23 	bl	8000832 <.text_27>
 80003ec:	2200      	movs	r2, #0
 80003ee:	792b      	ldrb	r3, [r5, #4]
 80003f0:	f003 0303 	and.w	r3, r3, #3
 80003f4:	2100      	movs	r1, #0
 80003f6:	4630      	mov	r0, r6
 80003f8:	f001 fbbb 	bl	8001b72 <USBPD_PRL_SetHeader>
 80003fc:	4638      	mov	r0, r7
 80003fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000402 <USBPD_PE_TimerCounter>:
 8000402:	f8df 18f0 	ldr.w	r1, [pc, #2288]	@ 8000cf4 <.text_46>
 8000406:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800040a:	8b41      	ldrh	r1, [r0, #26]
 800040c:	044a      	lsls	r2, r1, #17
 800040e:	d002      	beq.n	8000416 <USBPD_PE_TimerCounter+0x14>
 8000410:	8b41      	ldrh	r1, [r0, #26]
 8000412:	1e4a      	subs	r2, r1, #1
 8000414:	8342      	strh	r2, [r0, #26]
 8000416:	8b81      	ldrh	r1, [r0, #28]
 8000418:	044a      	lsls	r2, r1, #17
 800041a:	d002      	beq.n	8000422 <USBPD_PE_TimerCounter+0x20>
 800041c:	8b81      	ldrh	r1, [r0, #28]
 800041e:	1e4a      	subs	r2, r1, #1
 8000420:	8382      	strh	r2, [r0, #28]
 8000422:	4770      	bx	lr

08000424 <USBPD_PE_TimerCounteUpdate>:
 8000424:	b538      	push	{r3, r4, r5, lr}
 8000426:	460c      	mov	r4, r1
 8000428:	f8df 18c8 	ldr.w	r1, [pc, #2248]	@ 8000cf4 <.text_46>
 800042c:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
 8000430:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 8000434:	da0f      	bge.n	8000456 <USBPD_PE_TimerCounteUpdate+0x32>
 8000436:	8b68      	ldrh	r0, [r5, #26]
 8000438:	0441      	lsls	r1, r0, #17
 800043a:	d004      	beq.n	8000446 <USBPD_PE_TimerCounteUpdate+0x22>
 800043c:	8b68      	ldrh	r0, [r5, #26]
 800043e:	4621      	mov	r1, r4
 8000440:	f000 fc13 	bl	8000c6a <PE_UpdateTimer>
 8000444:	8368      	strh	r0, [r5, #26]
 8000446:	8ba8      	ldrh	r0, [r5, #28]
 8000448:	0441      	lsls	r1, r0, #17
 800044a:	d004      	beq.n	8000456 <USBPD_PE_TimerCounteUpdate+0x32>
 800044c:	8ba8      	ldrh	r0, [r5, #28]
 800044e:	4621      	mov	r1, r4
 8000450:	f000 fc0b 	bl	8000c6a <PE_UpdateTimer>
 8000454:	83a8      	strh	r0, [r5, #28]
 8000456:	bd31      	pop	{r0, r4, r5, pc}

08000458 <USBPD_PE_IsCableConnected>:
 8000458:	f8df 2898 	ldr.w	r2, [pc, #2200]	@ 8000cf4 <.text_46>
 800045c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000460:	6842      	ldr	r2, [r0, #4]
 8000462:	6813      	ldr	r3, [r2, #0]
 8000464:	f361 330c 	bfi	r3, r1, #12, #1
 8000468:	6013      	str	r3, [r2, #0]
 800046a:	2248      	movs	r2, #72	@ 0x48
 800046c:	7342      	strb	r2, [r0, #13]
 800046e:	4770      	bx	lr

08000470 <USBPD_PE_StateMachine_Reset>:
 8000470:	f8df 2880 	ldr.w	r2, [pc, #2176]	@ 8000cf4 <.text_46>
 8000474:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000478:	2148      	movs	r1, #72	@ 0x48
 800047a:	7341      	strb	r1, [r0, #13]
 800047c:	4770      	bx	lr

0800047e <USBPD_PE_StateMachine_Stop>:
 800047e:	f001 be26 	b.w	80020ce <USBPD_PRL_Stop>

08000482 <USBPD_PE_Notification>:
 8000482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000484:	2803      	cmp	r0, #3
 8000486:	4604      	mov	r4, r0
 8000488:	460d      	mov	r5, r1
 800048a:	d214      	bcs.n	80004b6 <__iar_annotation$$tailcall+0x2>
 800048c:	2600      	movs	r6, #0
 800048e:	9600      	str	r6, [sp, #0]
 8000490:	2300      	movs	r3, #0
 8000492:	f8df 7864 	ldr.w	r7, [pc, #2148]	@ 8000cf8 <.text_47>
 8000496:	683e      	ldr	r6, [r7, #0]
 8000498:	462a      	mov	r2, r5
 800049a:	4621      	mov	r1, r4
 800049c:	2009      	movs	r0, #9
 800049e:	47b0      	blx	r6
 80004a0:	f8df 2850 	ldr.w	r2, [pc, #2128]	@ 8000cf4 <.text_46>
 80004a4:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 80004a8:	689a      	ldr	r2, [r3, #8]
 80004aa:	68d3      	ldr	r3, [r2, #12]
 80004ac:	4629      	mov	r1, r5
 80004ae:	4620      	mov	r0, r4
 80004b0:	e8bd 40f4 	ldmia.w	sp!, {r2, r4, r5, r6, r7, lr}

080004b4 <__iar_annotation$$tailcall>:
 80004b4:	4718      	bx	r3
 80004b6:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

080004b8 <USBPD_PE_Request_HardReset>:
 80004b8:	b580      	push	{r7, lr}
 80004ba:	f8df 1838 	ldr.w	r1, [pc, #2104]	@ 8000cf4 <.text_46>
 80004be:	4602      	mov	r2, r0
 80004c0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80004c4:	230f      	movs	r3, #15
 80004c6:	f881 302a 	strb.w	r3, [r1, #42]	@ 0x2a
 80004ca:	6889      	ldr	r1, [r1, #8]
 80004cc:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80004ce:	4790      	blx	r2
 80004d0:	2000      	movs	r0, #0
 80004d2:	bd02      	pop	{r1, pc}

080004d4 <USBPD_PE_Request_CableReset>:
 80004d4:	2010      	movs	r0, #16
 80004d6:	4770      	bx	lr

080004d8 <USBPD_PE_Request_CtrlMessage>:
 80004d8:	e92d 41f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, lr}
 80004dc:	4680      	mov	r8, r0
 80004de:	460e      	mov	r6, r1
 80004e0:	f8df 0810 	ldr.w	r0, [pc, #2064]	@ 8000cf4 <.text_46>
 80004e4:	b093      	sub	sp, #76	@ 0x4c
 80004e6:	4641      	mov	r1, r8
 80004e8:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 80004ec:	f8df 180c 	ldr.w	r1, [pc, #2060]	@ 8000cfc <.text_48>
 80004f0:	4617      	mov	r7, r2
 80004f2:	4668      	mov	r0, sp
 80004f4:	224c      	movs	r2, #76	@ 0x4c
 80004f6:	f019 ff27 	bl	801a348 <__aeabi_memcpy>
 80004fa:	f105 012a 	add.w	r1, r5, #42	@ 0x2a
 80004fe:	2400      	movs	r4, #0
 8000500:	7808      	ldrb	r0, [r1, #0]
 8000502:	b920      	cbnz	r0, 800050e <USBPD_PE_Request_CtrlMessage+0x36>
 8000504:	6868      	ldr	r0, [r5, #4]
 8000506:	6802      	ldr	r2, [r0, #0]
 8000508:	f3c2 3000 	ubfx	r0, r2, #12, #1
 800050c:	b908      	cbnz	r0, 8000512 <USBPD_PE_Request_CtrlMessage+0x3a>
 800050e:	2403      	movs	r4, #3
 8000510:	e03f      	b.n	8000592 <USBPD_PE_Request_CtrlMessage+0xba>
 8000512:	686a      	ldr	r2, [r5, #4]
 8000514:	6828      	ldr	r0, [r5, #0]
 8000516:	6813      	ldr	r3, [r2, #0]
 8000518:	6840      	ldr	r0, [r0, #4]
 800051a:	f3c3 2202 	ubfx	r2, r3, #8, #3
 800051e:	686b      	ldr	r3, [r5, #4]
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	f003 0303 	and.w	r3, r3, #3
 8000526:	08c0      	lsrs	r0, r0, #3
 8000528:	2a03      	cmp	r2, #3
 800052a:	bf0c      	ite	eq
 800052c:	2208      	moveq	r2, #8
 800052e:	2200      	movne	r2, #0
 8000530:	2b02      	cmp	r3, #2
 8000532:	f000 0001 	and.w	r0, r0, #1
 8000536:	bf0c      	ite	eq
 8000538:	2340      	moveq	r3, #64	@ 0x40
 800053a:	2300      	movne	r3, #0
 800053c:	4310      	orrs	r0, r2
 800053e:	4318      	orrs	r0, r3
 8000540:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8000544:	f040 0012 	orr.w	r0, r0, #18
 8000548:	07c3      	lsls	r3, r0, #31
 800054a:	f81d 3002 	ldrb.w	r3, [sp, r2]
 800054e:	bf48      	it	mi
 8000550:	f040 0020 	orrmi.w	r0, r0, #32
 8000554:	4018      	ands	r0, r3
 8000556:	4298      	cmp	r0, r3
 8000558:	bf18      	it	ne
 800055a:	2402      	movne	r4, #2
 800055c:	d119      	bne.n	8000592 <USBPD_PE_Request_CtrlMessage+0xba>
 800055e:	2e0d      	cmp	r6, #13
 8000560:	704c      	strb	r4, [r1, #1]
 8000562:	f105 0078 	add.w	r0, r5, #120	@ 0x78
 8000566:	d007      	beq.n	8000578 <USBPD_PE_Request_CtrlMessage+0xa0>
 8000568:	2e16      	cmp	r6, #22
 800056a:	d002      	beq.n	8000572 <USBPD_PE_Request_CtrlMessage+0x9a>
 800056c:	2e18      	cmp	r6, #24
 800056e:	d003      	beq.n	8000578 <USBPD_PE_Request_CtrlMessage+0xa0>
 8000570:	e003      	b.n	800057a <USBPD_PE_Request_CtrlMessage+0xa2>
 8000572:	2316      	movs	r3, #22
 8000574:	7003      	strb	r3, [r0, #0]
 8000576:	e000      	b.n	800057a <USBPD_PE_Request_CtrlMessage+0xa2>
 8000578:	704f      	strb	r7, [r1, #1]
 800057a:	eb0d 0302 	add.w	r3, sp, r2
 800057e:	785e      	ldrb	r6, [r3, #1]
 8000580:	7046      	strb	r6, [r0, #1]
 8000582:	eb0d 0002 	add.w	r0, sp, r2
 8000586:	7882      	ldrb	r2, [r0, #2]
 8000588:	700a      	strb	r2, [r1, #0]
 800058a:	4640      	mov	r0, r8
 800058c:	68a9      	ldr	r1, [r5, #8]
 800058e:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8000590:	4790      	blx	r2
 8000592:	4620      	mov	r0, r4
 8000594:	b014      	add	sp, #80	@ 0x50
 8000596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800059a <USBPD_PE_Request_DataMessage>:
 800059a:	b510      	push	{r4, lr}
 800059c:	f8df 2754 	ldr.w	r2, [pc, #1876]	@ 8000cf4 <.text_46>
 80005a0:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 80005a4:	f103 042a 	add.w	r4, r3, #42	@ 0x2a
 80005a8:	2002      	movs	r0, #2
 80005aa:	7822      	ldrb	r2, [r4, #0]
 80005ac:	b922      	cbnz	r2, 80005b8 <USBPD_PE_Request_DataMessage+0x1e>
 80005ae:	685a      	ldr	r2, [r3, #4]
 80005b0:	6813      	ldr	r3, [r2, #0]
 80005b2:	f3c3 3200 	ubfx	r2, r3, #12, #1
 80005b6:	b90a      	cbnz	r2, 80005bc <USBPD_PE_Request_DataMessage+0x22>
 80005b8:	2003      	movs	r0, #3
 80005ba:	bd10      	pop	{r4, pc}
 80005bc:	1f89      	subs	r1, r1, #6
 80005be:	2200      	movs	r2, #0
 80005c0:	2901      	cmp	r1, #1
 80005c2:	7062      	strb	r2, [r4, #1]
 80005c4:	bf88      	it	hi
 80005c6:	2010      	movhi	r0, #16
 80005c8:	bd10      	pop	{r4, pc}

080005ca <USBPD_PE_Send_Request>:
 80005ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005cc:	f8df 3724 	ldr.w	r3, [pc, #1828]	@ 8000cf4 <.text_46>
 80005d0:	4604      	mov	r4, r0
 80005d2:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 80005d6:	f105 062a 	add.w	r6, r5, #42	@ 0x2a
 80005da:	2402      	movs	r4, #2
 80005dc:	7833      	ldrb	r3, [r6, #0]
 80005de:	b923      	cbnz	r3, 80005ea <USBPD_PE_Send_Request+0x20>
 80005e0:	686b      	ldr	r3, [r5, #4]
 80005e2:	681f      	ldr	r7, [r3, #0]
 80005e4:	f3c7 3300 	ubfx	r3, r7, #12, #1
 80005e8:	b90b      	cbnz	r3, 80005ee <USBPD_PE_Send_Request+0x24>
 80005ea:	2403      	movs	r4, #3
 80005ec:	e010      	b.n	8000610 <USBPD_PE_Send_Request+0x46>
 80005ee:	f3c7 2302 	ubfx	r3, r7, #8, #3
 80005f2:	2b03      	cmp	r3, #3
 80005f4:	d10c      	bne.n	8000610 <USBPD_PE_Send_Request+0x46>
 80005f6:	2345      	movs	r3, #69	@ 0x45
 80005f8:	7033      	strb	r3, [r6, #0]
 80005fa:	6169      	str	r1, [r5, #20]
 80005fc:	2400      	movs	r4, #0
 80005fe:	6929      	ldr	r1, [r5, #16]
 8000600:	f362 01c4 	bfi	r1, r2, #3, #2
 8000604:	6129      	str	r1, [r5, #16]
 8000606:	2200      	movs	r2, #0
 8000608:	7072      	strb	r2, [r6, #1]
 800060a:	68a9      	ldr	r1, [r5, #8]
 800060c:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 800060e:	4790      	blx	r2
 8000610:	4620      	mov	r0, r4
 8000612:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08000614 <PE_Send_RESET>:
 8000614:	b538      	push	{r3, r4, r5, lr}
 8000616:	4604      	mov	r4, r0
 8000618:	460d      	mov	r5, r1
 800061a:	2d05      	cmp	r5, #5
 800061c:	7b20      	ldrb	r0, [r4, #12]
 800061e:	bf0c      	ite	eq
 8000620:	211f      	moveq	r1, #31
 8000622:	215e      	movne	r1, #94	@ 0x5e
 8000624:	f7ff ff2d 	bl	8000482 <USBPD_PE_Notification>
 8000628:	7b20      	ldrb	r0, [r4, #12]
 800062a:	4629      	mov	r1, r5
 800062c:	f001 fcf5 	bl	800201a <USBPD_PRL_ResetRequestProcess>
 8000630:	f3ef 8010 	mrs	r0, PRIMASK
 8000634:	b672      	cpsid	i
 8000636:	2100      	movs	r1, #0
 8000638:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
 800063c:	f380 8810 	msr	PRIMASK, r0
 8000640:	bd31      	pop	{r0, r4, r5, pc}

08000642 <PE_Get_SpecRevision>:
 8000642:	f8df 16b0 	ldr.w	r1, [pc, #1712]	@ 8000cf4 <.text_46>
 8000646:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800064a:	6841      	ldr	r1, [r0, #4]
 800064c:	7808      	ldrb	r0, [r1, #0]
 800064e:	f000 0003 	and.w	r0, r0, #3
 8000652:	4770      	bx	lr

08000654 <PE_Get_RxEvent>:
 8000654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000656:	2114      	movs	r1, #20
 8000658:	f3ef 8410 	mrs	r4, PRIMASK
 800065c:	b672      	cpsid	i
 800065e:	f100 0528 	add.w	r5, r0, #40	@ 0x28
 8000662:	7b2a      	ldrb	r2, [r5, #12]
 8000664:	b33a      	cbz	r2, 80006b6 <PE_Get_RxEvent+0x62>
 8000666:	f100 0370 	add.w	r3, r0, #112	@ 0x70
 800066a:	5c9e      	ldrb	r6, [r3, r2]
 800066c:	0677      	lsls	r7, r6, #25
 800066e:	bf58      	it	pl
 8000670:	2103      	movpl	r1, #3
 8000672:	d520      	bpl.n	80006b6 <PE_Get_RxEvent+0x62>
 8000674:	231e      	movs	r3, #30
 8000676:	435a      	muls	r2, r3
 8000678:	4402      	add	r2, r0
 800067a:	f102 0617 	add.w	r6, r2, #23
 800067e:	60ae      	str	r6, [r5, #8]
 8000680:	7833      	ldrb	r3, [r6, #0]
 8000682:	7872      	ldrb	r2, [r6, #1]
 8000684:	eb03 2602 	add.w	r6, r3, r2, lsl #8
 8000688:	7b2a      	ldrb	r2, [r5, #12]
 800068a:	80ae      	strh	r6, [r5, #4]
 800068c:	3070      	adds	r0, #112	@ 0x70
 800068e:	5c83      	ldrb	r3, [r0, r2]
 8000690:	f003 031f 	and.w	r3, r3, #31
 8000694:	2b01      	cmp	r3, #1
 8000696:	d004      	beq.n	80006a2 <PE_Get_RxEvent+0x4e>
 8000698:	2b02      	cmp	r3, #2
 800069a:	d005      	beq.n	80006a8 <PE_Get_RxEvent+0x54>
 800069c:	2b04      	cmp	r3, #4
 800069e:	d007      	beq.n	80006b0 <PE_Get_RxEvent+0x5c>
 80006a0:	e009      	b.n	80006b6 <PE_Get_RxEvent+0x62>
 80006a2:	2111      	movs	r1, #17
 80006a4:	2000      	movs	r0, #0
 80006a6:	e005      	b.n	80006b4 <PE_Get_RxEvent+0x60>
 80006a8:	2201      	movs	r2, #1
 80006aa:	2112      	movs	r1, #18
 80006ac:	702a      	strb	r2, [r5, #0]
 80006ae:	e002      	b.n	80006b6 <PE_Get_RxEvent+0x62>
 80006b0:	2113      	movs	r1, #19
 80006b2:	2002      	movs	r0, #2
 80006b4:	7028      	strb	r0, [r5, #0]
 80006b6:	f384 8810 	msr	PRIMASK, r4
 80006ba:	4608      	mov	r0, r1
 80006bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080006be <PE_Clear_RxEvent>:
 80006be:	b538      	push	{r3, r4, r5, lr}
 80006c0:	4601      	mov	r1, r0
 80006c2:	f3ef 8210 	mrs	r2, PRIMASK
 80006c6:	b672      	cpsid	i
 80006c8:	f891 0034 	ldrb.w	r0, [r1, #52]	@ 0x34
 80006cc:	b1c0      	cbz	r0, 8000700 <PE_Clear_RxEvent+0x42>
 80006ce:	1e40      	subs	r0, r0, #1
 80006d0:	b2c0      	uxtb	r0, r0
 80006d2:	f101 0471 	add.w	r4, r1, #113	@ 0x71
 80006d6:	2300      	movs	r3, #0
 80006d8:	5423      	strb	r3, [r4, r0]
 80006da:	1e40      	subs	r0, r0, #1
 80006dc:	4180      	sbcs	r0, r0
 80006de:	0fc0      	lsrs	r0, r0, #31
 80006e0:	f101 0371 	add.w	r3, r1, #113	@ 0x71
 80006e4:	5c1c      	ldrb	r4, [r3, r0]
 80006e6:	0665      	lsls	r5, r4, #25
 80006e8:	d507      	bpl.n	80006fa <PE_Clear_RxEvent+0x3c>
 80006ea:	1c40      	adds	r0, r0, #1
 80006ec:	f881 0034 	strb.w	r0, [r1, #52]	@ 0x34
 80006f0:	f382 8810 	msr	PRIMASK, r2
 80006f4:	7b08      	ldrb	r0, [r1, #12]
 80006f6:	6889      	ldr	r1, [r1, #8]
 80006f8:	e072      	b.n	80007e0 <.text_24>
 80006fa:	2000      	movs	r0, #0
 80006fc:	f881 0034 	strb.w	r0, [r1, #52]	@ 0x34
 8000700:	f382 8810 	msr	PRIMASK, r2
 8000704:	bd31      	pop	{r0, r4, r5, pc}

08000706 <PE_PRL_Control_RxEvent>:
 8000706:	f8df 15ec 	ldr.w	r1, [pc, #1516]	@ 8000cf4 <.text_46>
 800070a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800070e:	2000      	movs	r0, #0
 8000710:	f3ef 8210 	mrs	r2, PRIMASK
 8000714:	b672      	cpsid	i
 8000716:	f891 1034 	ldrb.w	r1, [r1, #52]	@ 0x34
 800071a:	b101      	cbz	r1, 800071e <PE_PRL_Control_RxEvent+0x18>
 800071c:	2001      	movs	r0, #1
 800071e:	f382 8810 	msr	PRIMASK, r2
 8000722:	4770      	bx	lr

08000724 <PE_Check_AMSConflict>:
 8000724:	b538      	push	{r3, r4, r5, lr}
 8000726:	4604      	mov	r4, r0
 8000728:	f24f 001f 	movw	r0, #61471	@ 0xf01f
 800072c:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800072e:	2500      	movs	r5, #0
 8000730:	4001      	ands	r1, r0
 8000732:	290d      	cmp	r1, #13
 8000734:	d102      	bne.n	800073c <PE_Check_AMSConflict+0x18>
 8000736:	2110      	movs	r1, #16
 8000738:	7361      	strb	r1, [r4, #13]
 800073a:	e02a      	b.n	8000792 <PE_Check_AMSConflict+0x6e>
 800073c:	7e20      	ldrb	r0, [r4, #24]
 800073e:	b188      	cbz	r0, 8000764 <PE_Check_AMSConflict+0x40>
 8000740:	1e40      	subs	r0, r0, #1
 8000742:	2801      	cmp	r0, #1
 8000744:	d914      	bls.n	8000770 <PE_Check_AMSConflict+0x4c>
 8000746:	1e80      	subs	r0, r0, #2
 8000748:	d014      	beq.n	8000774 <PE_Check_AMSConflict+0x50>
 800074a:	1e40      	subs	r0, r0, #1
 800074c:	d021      	beq.n	8000792 <PE_Check_AMSConflict+0x6e>
 800074e:	1e40      	subs	r0, r0, #1
 8000750:	2809      	cmp	r0, #9
 8000752:	bf84      	itt	hi
 8000754:	380b      	subhi	r0, #11
 8000756:	2801      	cmphi	r0, #1
 8000758:	d90a      	bls.n	8000770 <PE_Check_AMSConflict+0x4c>
 800075a:	1e80      	subs	r0, r0, #2
 800075c:	d005      	beq.n	800076a <PE_Check_AMSConflict+0x46>
 800075e:	384d      	subs	r0, #77	@ 0x4d
 8000760:	d006      	beq.n	8000770 <PE_Check_AMSConflict+0x4c>
 8000762:	e00a      	b.n	800077a <PE_Check_AMSConflict+0x56>
 8000764:	2203      	movs	r2, #3
 8000766:	7362      	strb	r2, [r4, #13]
 8000768:	e014      	b.n	8000794 <PE_Check_AMSConflict+0x70>
 800076a:	200f      	movs	r0, #15
 800076c:	7360      	strb	r0, [r4, #13]
 800076e:	e011      	b.n	8000794 <PE_Check_AMSConflict+0x70>
 8000770:	2011      	movs	r0, #17
 8000772:	e000      	b.n	8000776 <PE_Check_AMSConflict+0x52>
 8000774:	200f      	movs	r0, #15
 8000776:	7360      	strb	r0, [r4, #13]
 8000778:	e00b      	b.n	8000792 <PE_Check_AMSConflict+0x6e>
 800077a:	7b20      	ldrb	r0, [r4, #12]
 800077c:	215c      	movs	r1, #92	@ 0x5c
 800077e:	f7ff fe80 	bl	8000482 <USBPD_PE_Notification>
 8000782:	2103      	movs	r1, #3
 8000784:	6860      	ldr	r0, [r4, #4]
 8000786:	7361      	strb	r1, [r4, #13]
 8000788:	6801      	ldr	r1, [r0, #0]
 800078a:	f3c1 2002 	ubfx	r0, r1, #8, #3
 800078e:	2803      	cmp	r0, #3
 8000790:	d000      	beq.n	8000794 <PE_Check_AMSConflict+0x70>
 8000792:	2515      	movs	r5, #21
 8000794:	4628      	mov	r0, r5
 8000796:	bd32      	pop	{r1, r4, r5, pc}

08000798 <PE_PRL_ResetReceived>:
 8000798:	b538      	push	{r3, r4, r5, lr}
 800079a:	4604      	mov	r4, r0
 800079c:	f8df 0554 	ldr.w	r0, [pc, #1364]	@ 8000cf4 <.text_46>
 80007a0:	4622      	mov	r2, r4
 80007a2:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 80007a6:	2905      	cmp	r1, #5
 80007a8:	d114      	bne.n	80007d4 <PE_PRL_ResetReceived+0x3c>
 80007aa:	6868      	ldr	r0, [r5, #4]
 80007ac:	6801      	ldr	r1, [r0, #0]
 80007ae:	f021 0110 	bic.w	r1, r1, #16
 80007b2:	6001      	str	r1, [r0, #0]
 80007b4:	2001      	movs	r0, #1
 80007b6:	6929      	ldr	r1, [r5, #16]
 80007b8:	f360 214a 	bfi	r1, r0, #9, #2
 80007bc:	f105 002a 	add.w	r0, r5, #42	@ 0x2a
 80007c0:	6129      	str	r1, [r5, #16]
 80007c2:	2214      	movs	r2, #20
 80007c4:	2300      	movs	r3, #0
 80007c6:	7002      	strb	r2, [r0, #0]
 80007c8:	7283      	strb	r3, [r0, #10]
 80007ca:	211e      	movs	r1, #30
 80007cc:	7b28      	ldrb	r0, [r5, #12]
 80007ce:	f7ff fe58 	bl	8000482 <USBPD_PE_Notification>
 80007d2:	e003      	b.n	80007dc <PE_PRL_ResetReceived+0x44>
 80007d4:	6928      	ldr	r0, [r5, #16]
 80007d6:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 80007da:	6128      	str	r0, [r5, #16]
 80007dc:	4620      	mov	r0, r4
 80007de:	68a9      	ldr	r1, [r5, #8]

080007e0 <.text_24>:
 80007e0:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80007e2:	e8bd 4032 	ldmia.w	sp!, {r1, r4, r5, lr}

080007e6 <__iar_annotation$$tailcall>:
 80007e6:	4710      	bx	r2

080007e8 <PE_PRL_BistCompleted>:
 80007e8:	4770      	bx	lr

080007ea <PE_Reset_HardReset>:
 80007ea:	b510      	push	{r4, lr}
 80007ec:	4604      	mov	r4, r0
 80007ee:	f894 002a 	ldrb.w	r0, [r4, #42]	@ 0x2a
 80007f2:	b118      	cbz	r0, 80007fc <PE_Reset_HardReset+0x12>
 80007f4:	7b20      	ldrb	r0, [r4, #12]
 80007f6:	215b      	movs	r1, #91	@ 0x5b
 80007f8:	f7ff fe43 	bl	8000482 <USBPD_PE_Notification>
 80007fc:	4620      	mov	r0, r4
 80007fe:	f000 f81e 	bl	800083e <PE_Reset_ZI>
 8000802:	6820      	ldr	r0, [r4, #0]
 8000804:	7903      	ldrb	r3, [r0, #4]
 8000806:	7b20      	ldrb	r0, [r4, #12]
 8000808:	f003 0303 	and.w	r3, r3, #3
 800080c:	2200      	movs	r2, #0
 800080e:	2100      	movs	r1, #0
 8000810:	f001 f9af 	bl	8001b72 <USBPD_PRL_SetHeader>
 8000814:	f000 f80d 	bl	8000832 <.text_27>
 8000818:	0889      	lsrs	r1, r1, #2
 800081a:	6822      	ldr	r2, [r4, #0]
 800081c:	7912      	ldrb	r2, [r2, #4]
 800081e:	f002 0203 	and.w	r2, r2, #3
 8000822:	ea42 0181 	orr.w	r1, r2, r1, lsl #2
 8000826:	6001      	str	r1, [r0, #0]
 8000828:	7b20      	ldrb	r0, [r4, #12]
 800082a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800082e:	f001 bc33 	b.w	8002098 <USBPD_PRL_Reset>

08000832 <.text_27>:
 8000832:	6860      	ldr	r0, [r4, #4]
 8000834:	6801      	ldr	r1, [r0, #0]
 8000836:	f021 0108 	bic.w	r1, r1, #8
 800083a:	6001      	str	r1, [r0, #0]
 800083c:	4770      	bx	lr

0800083e <PE_Reset_ZI>:
 800083e:	b538      	push	{r3, r4, r5, lr}
 8000840:	4604      	mov	r4, r0
 8000842:	2000      	movs	r0, #0
 8000844:	9000      	str	r0, [sp, #0]
 8000846:	2100      	movs	r1, #0
 8000848:	6860      	ldr	r0, [r4, #4]
 800084a:	6802      	ldr	r2, [r0, #0]
 800084c:	f022 0210 	bic.w	r2, r2, #16
 8000850:	6002      	str	r2, [r0, #0]
 8000852:	4620      	mov	r0, r4
 8000854:	f000 fa1b 	bl	8000c8e <PE_SetPowerNegotiation>
 8000858:	216c      	movs	r1, #108	@ 0x6c
 800085a:	f104 0010 	add.w	r0, r4, #16
 800085e:	f019 fd62 	bl	801a326 <__aeabi_memclr>
 8000862:	7b20      	ldrb	r0, [r4, #12]
 8000864:	68a4      	ldr	r4, [r4, #8]
 8000866:	69a5      	ldr	r5, [r4, #24]
 8000868:	2304      	movs	r3, #4
 800086a:	466a      	mov	r2, sp
 800086c:	2102      	movs	r1, #2
 800086e:	47a8      	blx	r5
 8000870:	bd31      	pop	{r0, r4, r5, pc}

08000872 <PE_Reset_Counter>:
 8000872:	2102      	movs	r1, #2
 8000874:	307c      	adds	r0, #124	@ 0x7c
 8000876:	f019 bd56 	b.w	801a326 <__aeabi_memclr>

0800087a <PE_ExtRevisionInteroperability>:
 800087a:	b538      	push	{r3, r4, r5, lr}
 800087c:	f8df 3474 	ldr.w	r3, [pc, #1140]	@ 8000cf4 <.text_46>
 8000880:	4602      	mov	r2, r0
 8000882:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8000886:	6865      	ldr	r5, [r4, #4]
 8000888:	682c      	ldr	r4, [r5, #0]
 800088a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800088e:	f004 0503 	and.w	r5, r4, #3
 8000892:	42a9      	cmp	r1, r5
 8000894:	bfa8      	it	ge
 8000896:	4629      	movge	r1, r5
 8000898:	f361 0401 	bfi	r4, r1, #0, #2
 800089c:	6851      	ldr	r1, [r2, #4]
 800089e:	600c      	str	r4, [r1, #0]
 80008a0:	6851      	ldr	r1, [r2, #4]
 80008a2:	680b      	ldr	r3, [r1, #0]
 80008a4:	f003 0403 	and.w	r4, r3, #3
 80008a8:	2c01      	cmp	r4, #1
 80008aa:	bf0c      	ite	eq
 80008ac:	2400      	moveq	r4, #0
 80008ae:	2420      	movne	r4, #32
 80008b0:	f023 0320 	bic.w	r3, r3, #32
 80008b4:	4323      	orrs	r3, r4
 80008b6:	600b      	str	r3, [r1, #0]
 80008b8:	6852      	ldr	r2, [r2, #4]
 80008ba:	7811      	ldrb	r1, [r2, #0]
 80008bc:	e8bd 4034 	ldmia.w	sp!, {r2, r4, r5, lr}
 80008c0:	f001 0103 	and.w	r1, r1, #3
 80008c4:	f001 b97f 	b.w	8001bc6 <USBPD_PRL_SetHeaderSpecification>

080008c8 <PE_PRL_FastRoleSwapReception>:
 80008c8:	f8df 1428 	ldr.w	r1, [pc, #1064]	@ 8000cf4 <.text_46>
 80008cc:	4602      	mov	r2, r0
 80008ce:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80008d2:	7e0a      	ldrb	r2, [r1, #24]
 80008d4:	2a09      	cmp	r2, #9
 80008d6:	d00b      	beq.n	80008f0 <__iar_annotation$$tailcall+0x2>
 80008d8:	684a      	ldr	r2, [r1, #4]
 80008da:	6813      	ldr	r3, [r2, #0]
 80008dc:	f043 0310 	orr.w	r3, r3, #16
 80008e0:	6013      	str	r3, [r2, #0]
 80008e2:	690a      	ldr	r2, [r1, #16]
 80008e4:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80008e8:	610a      	str	r2, [r1, #16]
 80008ea:	6889      	ldr	r1, [r1, #8]
 80008ec:	6a8a      	ldr	r2, [r1, #40]	@ 0x28

080008ee <__iar_annotation$$tailcall>:
 80008ee:	4710      	bx	r2
 80008f0:	4770      	bx	lr

080008f2 <PE_PRL_PostReceiveEvent>:
 80008f2:	b570      	push	{r4, r5, r6, lr}
 80008f4:	f8df 23fc 	ldr.w	r2, [pc, #1020]	@ 8000cf4 <.text_46>
 80008f8:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 80008fc:	2000      	movs	r0, #0
 80008fe:	2400      	movs	r4, #0
 8000900:	191a      	adds	r2, r3, r4
 8000902:	f892 2071 	ldrb.w	r2, [r2, #113]	@ 0x71
 8000906:	b122      	cbz	r2, 8000912 <PE_PRL_PostReceiveEvent+0x20>
 8000908:	1c64      	adds	r4, r4, #1
 800090a:	b2e4      	uxtb	r4, r4
 800090c:	2c01      	cmp	r4, #1
 800090e:	d9f7      	bls.n	8000900 <PE_PRL_PostReceiveEvent+0xe>
 8000910:	bd70      	pop	{r4, r5, r6, pc}
 8000912:	191a      	adds	r2, r3, r4
 8000914:	2020      	movs	r0, #32
 8000916:	191d      	adds	r5, r3, r4
 8000918:	f882 0071 	strb.w	r0, [r2, #113]	@ 0x71
 800091c:	2001      	movs	r0, #1
 800091e:	f895 6071 	ldrb.w	r6, [r5, #113]	@ 0x71
 8000922:	fa00 f101 	lsl.w	r1, r0, r1
 8000926:	1918      	adds	r0, r3, r4
 8000928:	4331      	orrs	r1, r6
 800092a:	f880 1071 	strb.w	r1, [r0, #113]	@ 0x71
 800092e:	2001      	movs	r0, #1
 8000930:	bd70      	pop	{r4, r5, r6, pc}

08000932 <PE_PRL_PostReceiveEventError>:
 8000932:	f8df 13c0 	ldr.w	r1, [pc, #960]	@ 8000cf4 <.text_46>
 8000936:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800093a:	2100      	movs	r1, #0
 800093c:	b2ca      	uxtb	r2, r1
 800093e:	4402      	add	r2, r0
 8000940:	f892 3071 	ldrb.w	r3, [r2, #113]	@ 0x71
 8000944:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8000948:	2b20      	cmp	r3, #32
 800094a:	d004      	beq.n	8000956 <PE_PRL_PostReceiveEventError+0x24>
 800094c:	1c49      	adds	r1, r1, #1
 800094e:	b2ca      	uxtb	r2, r1
 8000950:	2a02      	cmp	r2, #2
 8000952:	d3f3      	bcc.n	800093c <PE_PRL_PostReceiveEventError+0xa>
 8000954:	4770      	bx	lr
 8000956:	2000      	movs	r0, #0
 8000958:	f882 0071 	strb.w	r0, [r2, #113]	@ 0x71
 800095c:	4770      	bx	lr

0800095e <PE_PRL_PostReceiveEventCopy>:
 800095e:	b510      	push	{r4, lr}
 8000960:	f8df 2390 	ldr.w	r2, [pc, #912]	@ 8000cf4 <.text_46>
 8000964:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000968:	2200      	movs	r2, #0
 800096a:	b2d3      	uxtb	r3, r2
 800096c:	18c4      	adds	r4, r0, r3
 800096e:	f894 4071 	ldrb.w	r4, [r4, #113]	@ 0x71
 8000972:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 8000976:	2c20      	cmp	r4, #32
 8000978:	d004      	beq.n	8000984 <PE_PRL_PostReceiveEventCopy+0x26>
 800097a:	1c52      	adds	r2, r2, #1
 800097c:	b2d3      	uxtb	r3, r2
 800097e:	2b02      	cmp	r3, #2
 8000980:	d3f3      	bcc.n	800096a <PE_PRL_PostReceiveEventCopy+0xc>
 8000982:	bd10      	pop	{r4, pc}
 8000984:	221e      	movs	r2, #30
 8000986:	fb12 f303 	smulbb	r3, r2, r3
 800098a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800098e:	4403      	add	r3, r0
 8000990:	f103 0035 	add.w	r0, r3, #53	@ 0x35
 8000994:	f019 bcd8 	b.w	801a348 <__aeabi_memcpy>

08000998 <PE_PRL_PostReceiveEventComplete>:
 8000998:	b538      	push	{r3, r4, r5, lr}
 800099a:	f8df 1358 	ldr.w	r1, [pc, #856]	@ 8000cf4 <.text_46>
 800099e:	4602      	mov	r2, r0
 80009a0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80009a4:	2100      	movs	r1, #0
 80009a6:	1854      	adds	r4, r2, r1
 80009a8:	1c4b      	adds	r3, r1, #1
 80009aa:	f894 5071 	ldrb.w	r5, [r4, #113]	@ 0x71
 80009ae:	f005 0560 	and.w	r5, r5, #96	@ 0x60
 80009b2:	2d20      	cmp	r5, #32
 80009b4:	d003      	beq.n	80009be <PE_PRL_PostReceiveEventComplete+0x26>
 80009b6:	b2d9      	uxtb	r1, r3
 80009b8:	2902      	cmp	r1, #2
 80009ba:	d3f4      	bcc.n	80009a6 <PE_PRL_PostReceiveEventComplete+0xe>
 80009bc:	bd31      	pop	{r0, r4, r5, pc}
 80009be:	f894 4071 	ldrb.w	r4, [r4, #113]	@ 0x71
 80009c2:	1855      	adds	r5, r2, r1
 80009c4:	f044 0440 	orr.w	r4, r4, #64	@ 0x40
 80009c8:	f885 4071 	strb.w	r4, [r5, #113]	@ 0x71
 80009cc:	f892 1034 	ldrb.w	r1, [r2, #52]	@ 0x34
 80009d0:	b909      	cbnz	r1, 80009d6 <PE_PRL_PostReceiveEventComplete+0x3e>
 80009d2:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
 80009d6:	6891      	ldr	r1, [r2, #8]
 80009d8:	e702      	b.n	80007e0 <.text_24>

080009da <PE_SubStateMachine_Generic>:
 80009da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009de:	b08c      	sub	sp, #48	@ 0x30
 80009e0:	4604      	mov	r4, r0
 80009e2:	2000      	movs	r0, #0
 80009e4:	9003      	str	r0, [sp, #12]
 80009e6:	2502      	movs	r5, #2
 80009e8:	7b60      	ldrb	r0, [r4, #13]
 80009ea:	2801      	cmp	r0, #1
 80009ec:	460e      	mov	r6, r1
 80009ee:	f104 0728 	add.w	r7, r4, #40	@ 0x28
 80009f2:	f248 081b 	movw	r8, #32795	@ 0x801b
 80009f6:	f000 80eb 	beq.w	8000bd0 <PE_SubStateMachine_Generic+0x1f6>
 80009fa:	2818      	cmp	r0, #24
 80009fc:	d01b      	beq.n	8000a36 <PE_SubStateMachine_Generic+0x5c>
 80009fe:	2819      	cmp	r0, #25
 8000a00:	d022      	beq.n	8000a48 <PE_SubStateMachine_Generic+0x6e>
 8000a02:	281d      	cmp	r0, #29
 8000a04:	d05f      	beq.n	8000ac6 <PE_SubStateMachine_Generic+0xec>
 8000a06:	2827      	cmp	r0, #39	@ 0x27
 8000a08:	d079      	beq.n	8000afe <PE_SubStateMachine_Generic+0x124>
 8000a0a:	2828      	cmp	r0, #40	@ 0x28
 8000a0c:	f000 8084 	beq.w	8000b18 <PE_SubStateMachine_Generic+0x13e>
 8000a10:	2829      	cmp	r0, #41	@ 0x29
 8000a12:	f000 808b 	beq.w	8000b2c <PE_SubStateMachine_Generic+0x152>
 8000a16:	284b      	cmp	r0, #75	@ 0x4b
 8000a18:	f000 8090 	beq.w	8000b3c <PE_SubStateMachine_Generic+0x162>
 8000a1c:	2864      	cmp	r0, #100	@ 0x64
 8000a1e:	f000 80de 	beq.w	8000bde <PE_SubStateMachine_Generic+0x204>
 8000a22:	2867      	cmp	r0, #103	@ 0x67
 8000a24:	f000 809d 	beq.w	8000b62 <PE_SubStateMachine_Generic+0x188>
 8000a28:	2868      	cmp	r0, #104	@ 0x68
 8000a2a:	f000 80a8 	beq.w	8000b7e <PE_SubStateMachine_Generic+0x1a4>
 8000a2e:	2874      	cmp	r0, #116	@ 0x74
 8000a30:	f000 80fb 	beq.w	8000c2a <PE_SubStateMachine_Generic+0x250>
 8000a34:	e100      	b.n	8000c38 <PE_SubStateMachine_Generic+0x25e>
 8000a36:	9500      	str	r5, [sp, #0]
 8000a38:	2319      	movs	r3, #25
 8000a3a:	2208      	movs	r2, #8
 8000a3c:	f000 f902 	bl	8000c44 <.text_37>
 8000a40:	2800      	cmp	r0, #0
 8000a42:	d168      	bne.n	8000b16 <PE_SubStateMachine_Generic+0x13c>
 8000a44:	2007      	movs	r0, #7
 8000a46:	e095      	b.n	8000b74 <PE_SubStateMachine_Generic+0x19a>
 8000a48:	7830      	ldrb	r0, [r6, #0]
 8000a4a:	2811      	cmp	r0, #17
 8000a4c:	d137      	bne.n	8000abe <PE_SubStateMachine_Generic+0xe4>
 8000a4e:	88b9      	ldrh	r1, [r7, #4]
 8000a50:	0bc8      	lsrs	r0, r1, #15
 8000a52:	d11e      	bne.n	8000a92 <PE_SubStateMachine_Generic+0xb8>
 8000a54:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8000a58:	b1d8      	cbz	r0, 8000a92 <PE_SubStateMachine_Generic+0xb8>
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	f000 011f 	and.w	r1, r0, #31
 8000a60:	2904      	cmp	r1, #4
 8000a62:	d116      	bne.n	8000a92 <PE_SubStateMachine_Generic+0xb8>
 8000a64:	68a5      	ldr	r5, [r4, #8]
 8000a66:	f8d5 c018 	ldr.w	ip, [r5, #24]
 8000a6a:	f3c0 3302 	ubfx	r3, r0, #12, #3
 8000a6e:	68b8      	ldr	r0, [r7, #8]
 8000a70:	1c82      	adds	r2, r0, #2
 8000a72:	7b20      	ldrb	r0, [r4, #12]
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	2105      	movs	r1, #5
 8000a78:	47e0      	blx	ip
 8000a7a:	7830      	ldrb	r0, [r6, #0]
 8000a7c:	2814      	cmp	r0, #20
 8000a7e:	d001      	beq.n	8000a84 <PE_SubStateMachine_Generic+0xaa>
 8000a80:	f000 f8e8 	bl	8000c54 <.text_39>
 8000a84:	2003      	movs	r0, #3
 8000a86:	7360      	strb	r0, [r4, #13]
 8000a88:	2107      	movs	r1, #7
 8000a8a:	7b20      	ldrb	r0, [r4, #12]
 8000a8c:	f7ff fcf9 	bl	8000482 <USBPD_PE_Notification>
 8000a90:	2500      	movs	r5, #0
 8000a92:	88b8      	ldrh	r0, [r7, #4]
 8000a94:	f410 4f70 	tst.w	r0, #61440	@ 0xf000
 8000a98:	d111      	bne.n	8000abe <PE_SubStateMachine_Generic+0xe4>
 8000a9a:	f000 001f 	and.w	r0, r0, #31
 8000a9e:	2804      	cmp	r0, #4
 8000aa0:	bf18      	it	ne
 8000aa2:	2810      	cmpne	r0, #16
 8000aa4:	d10b      	bne.n	8000abe <PE_SubStateMachine_Generic+0xe4>
 8000aa6:	7830      	ldrb	r0, [r6, #0]
 8000aa8:	2814      	cmp	r0, #20
 8000aaa:	d001      	beq.n	8000ab0 <PE_SubStateMachine_Generic+0xd6>
 8000aac:	f000 f8d2 	bl	8000c54 <.text_39>
 8000ab0:	2003      	movs	r0, #3
 8000ab2:	7360      	strb	r0, [r4, #13]
 8000ab4:	2108      	movs	r1, #8
 8000ab6:	7b20      	ldrb	r0, [r4, #12]
 8000ab8:	f7ff fce3 	bl	8000482 <USBPD_PE_Notification>
 8000abc:	2500      	movs	r5, #0
 8000abe:	f000 f8c5 	bl	8000c4c <.text_38>
 8000ac2:	d128      	bne.n	8000b16 <PE_SubStateMachine_Generic+0x13c>
 8000ac4:	e0b4      	b.n	8000c30 <PE_SubStateMachine_Generic+0x256>
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	9104      	str	r1, [sp, #16]
 8000aca:	ab04      	add	r3, sp, #16
 8000acc:	68a6      	ldr	r6, [r4, #8]
 8000ace:	7b20      	ldrb	r0, [r4, #12]
 8000ad0:	6977      	ldr	r7, [r6, #20]
 8000ad2:	aa05      	add	r2, sp, #20
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	47b8      	blx	r7
 8000ad8:	9804      	ldr	r0, [sp, #16]
 8000ada:	2104      	movs	r1, #4
 8000adc:	f000 f8fa 	bl	8000cd4 <PE_CheckDataSizeFromGetDataInfo>
 8000ae0:	b108      	cbz	r0, 8000ae6 <PE_SubStateMachine_Generic+0x10c>
 8000ae2:	2003      	movs	r0, #3
 8000ae4:	e0a9      	b.n	8000c3a <PE_SubStateMachine_Generic+0x260>
 8000ae6:	9a04      	ldr	r2, [sp, #16]
 8000ae8:	f000 f8b8 	bl	8000c5c <.text_40>
 8000aec:	ab05      	add	r3, sp, #20
 8000aee:	2204      	movs	r2, #4
 8000af0:	4620      	mov	r0, r4
 8000af2:	f000 f95e 	bl	8000db2 <PE_Send_DataMessage>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	d10d      	bne.n	8000b16 <PE_SubStateMachine_Generic+0x13c>
 8000afa:	210a      	movs	r1, #10
 8000afc:	e091      	b.n	8000c22 <PE_SubStateMachine_Generic+0x248>
 8000afe:	2012      	movs	r0, #18
 8000b00:	7620      	strb	r0, [r4, #24]
 8000b02:	2105      	movs	r1, #5
 8000b04:	7b20      	ldrb	r0, [r4, #12]
 8000b06:	f001 faba 	bl	800207e <USBDPD_PRL_BistCarrierEyeMode>
 8000b0a:	2028      	movs	r0, #40	@ 0x28
 8000b0c:	7360      	strb	r0, [r4, #13]
 8000b0e:	f248 012d 	movw	r1, #32813	@ 0x802d
 8000b12:	8361      	strh	r1, [r4, #26]
 8000b14:	252d      	movs	r5, #45	@ 0x2d
 8000b16:	e091      	b.n	8000c3c <PE_SubStateMachine_Generic+0x262>
 8000b18:	f000 f898 	bl	8000c4c <.text_38>
 8000b1c:	d1fb      	bne.n	8000b16 <PE_SubStateMachine_Generic+0x13c>
 8000b1e:	7b20      	ldrb	r0, [r4, #12]
 8000b20:	2105      	movs	r1, #5
 8000b22:	f001 fab2 	bl	800208a <USBDPD_PRL_BistCarrierEyeModeExit>
 8000b26:	2000      	movs	r0, #0
 8000b28:	8360      	strh	r0, [r4, #26]
 8000b2a:	e081      	b.n	8000c30 <PE_SubStateMachine_Generic+0x256>
 8000b2c:	7831      	ldrb	r1, [r6, #0]
 8000b2e:	2914      	cmp	r1, #20
 8000b30:	d003      	beq.n	8000b3a <PE_SubStateMachine_Generic+0x160>
 8000b32:	2014      	movs	r0, #20
 8000b34:	7030      	strb	r0, [r6, #0]
 8000b36:	f000 f88f 	bl	8000c58 <.text_39+0x4>
 8000b3a:	e07f      	b.n	8000c3c <PE_SubStateMachine_Generic+0x262>
 8000b3c:	68a6      	ldr	r6, [r4, #8]
 8000b3e:	7b20      	ldrb	r0, [r4, #12]
 8000b40:	6977      	ldr	r7, [r6, #20]
 8000b42:	ab03      	add	r3, sp, #12
 8000b44:	aa04      	add	r2, sp, #16
 8000b46:	2114      	movs	r1, #20
 8000b48:	47b8      	blx	r7
 8000b4a:	9803      	ldr	r0, [sp, #12]
 8000b4c:	2800      	cmp	r0, #0
 8000b4e:	d073      	beq.n	8000c38 <PE_SubStateMachine_Generic+0x25e>
 8000b50:	9a03      	ldr	r2, [sp, #12]
 8000b52:	f000 f883 	bl	8000c5c <.text_40>
 8000b56:	ab04      	add	r3, sp, #16
 8000b58:	220c      	movs	r2, #12
 8000b5a:	4620      	mov	r0, r4
 8000b5c:	f000 f929 	bl	8000db2 <PE_Send_DataMessage>
 8000b60:	e06c      	b.n	8000c3c <PE_SubStateMachine_Generic+0x262>
 8000b62:	9500      	str	r5, [sp, #0]
 8000b64:	2368      	movs	r3, #104	@ 0x68
 8000b66:	7879      	ldrb	r1, [r7, #1]
 8000b68:	2218      	movs	r2, #24
 8000b6a:	f000 f86c 	bl	8000c46 <.text_37+0x2>
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	d164      	bne.n	8000c3c <PE_SubStateMachine_Generic+0x262>
 8000b72:	200f      	movs	r0, #15
 8000b74:	7620      	strb	r0, [r4, #24]
 8000b76:	f8a4 801a 	strh.w	r8, [r4, #26]
 8000b7a:	251b      	movs	r5, #27
 8000b7c:	e05e      	b.n	8000c3c <PE_SubStateMachine_Generic+0x262>
 8000b7e:	7830      	ldrb	r0, [r6, #0]
 8000b80:	2814      	cmp	r0, #20
 8000b82:	d020      	beq.n	8000bc6 <PE_SubStateMachine_Generic+0x1ec>
 8000b84:	7839      	ldrb	r1, [r7, #0]
 8000b86:	7878      	ldrb	r0, [r7, #1]
 8000b88:	4281      	cmp	r1, r0
 8000b8a:	d11c      	bne.n	8000bc6 <PE_SubStateMachine_Generic+0x1ec>
 8000b8c:	88b9      	ldrh	r1, [r7, #4]
 8000b8e:	0bc8      	lsrs	r0, r1, #15
 8000b90:	d119      	bne.n	8000bc6 <PE_SubStateMachine_Generic+0x1ec>
 8000b92:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8000b96:	b1b0      	cbz	r0, 8000bc6 <PE_SubStateMachine_Generic+0x1ec>
 8000b98:	7938      	ldrb	r0, [r7, #4]
 8000b9a:	f000 001f 	and.w	r0, r0, #31
 8000b9e:	280c      	cmp	r0, #12
 8000ba0:	d111      	bne.n	8000bc6 <PE_SubStateMachine_Generic+0x1ec>
 8000ba2:	68b8      	ldr	r0, [r7, #8]
 8000ba4:	68a5      	ldr	r5, [r4, #8]
 8000ba6:	69af      	ldr	r7, [r5, #24]
 8000ba8:	1c82      	adds	r2, r0, #2
 8000baa:	7b20      	ldrb	r0, [r4, #12]
 8000bac:	2304      	movs	r3, #4
 8000bae:	2114      	movs	r1, #20
 8000bb0:	47b8      	blx	r7
 8000bb2:	2003      	movs	r0, #3
 8000bb4:	7360      	strb	r0, [r4, #13]
 8000bb6:	2500      	movs	r5, #0
 8000bb8:	7831      	ldrb	r1, [r6, #0]
 8000bba:	2914      	cmp	r1, #20
 8000bbc:	d003      	beq.n	8000bc6 <PE_SubStateMachine_Generic+0x1ec>
 8000bbe:	2014      	movs	r0, #20
 8000bc0:	7030      	strb	r0, [r6, #0]
 8000bc2:	f000 f849 	bl	8000c58 <.text_39+0x4>
 8000bc6:	f000 f841 	bl	8000c4c <.text_38>
 8000bca:	d137      	bne.n	8000c3c <PE_SubStateMachine_Generic+0x262>
 8000bcc:	2111      	movs	r1, #17
 8000bce:	e030      	b.n	8000c32 <PE_SubStateMachine_Generic+0x258>
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	9000      	str	r0, [sp, #0]
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	2210      	movs	r2, #16
 8000bd8:	f000 f834 	bl	8000c44 <.text_37>
 8000bdc:	e02e      	b.n	8000c3c <PE_SubStateMachine_Generic+0x262>
 8000bde:	68a6      	ldr	r6, [r4, #8]
 8000be0:	7b20      	ldrb	r0, [r4, #12]
 8000be2:	6977      	ldr	r7, [r6, #20]
 8000be4:	ab03      	add	r3, sp, #12
 8000be6:	f104 0282 	add.w	r2, r4, #130	@ 0x82
 8000bea:	2113      	movs	r1, #19
 8000bec:	47b8      	blx	r7
 8000bee:	9803      	ldr	r0, [sp, #12]
 8000bf0:	2118      	movs	r1, #24
 8000bf2:	f000 f86f 	bl	8000cd4 <PE_CheckDataSizeFromGetDataInfo>
 8000bf6:	b9f8      	cbnz	r0, 8000c38 <PE_SubStateMachine_Generic+0x25e>
 8000bf8:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	7041      	strb	r1, [r0, #1]
 8000c00:	7001      	strb	r1, [r0, #0]
 8000c02:	2000      	movs	r0, #0
 8000c04:	9a03      	ldr	r2, [sp, #12]
 8000c06:	9002      	str	r0, [sp, #8]
 8000c08:	1d12      	adds	r2, r2, #4
 8000c0a:	2103      	movs	r1, #3
 8000c0c:	b292      	uxth	r2, r2
 8000c0e:	9101      	str	r1, [sp, #4]
 8000c10:	9200      	str	r2, [sp, #0]
 8000c12:	f104 037e 	add.w	r3, r4, #126	@ 0x7e
 8000c16:	220f      	movs	r2, #15
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	f000 f960 	bl	8000ee0 <PE_Send_ExtendedMessage>
 8000c20:	2161      	movs	r1, #97	@ 0x61
 8000c22:	7b20      	ldrb	r0, [r4, #12]
 8000c24:	f7ff fc2d 	bl	8000482 <USBPD_PE_Notification>
 8000c28:	e008      	b.n	8000c3c <PE_SubStateMachine_Generic+0x262>
 8000c2a:	f000 f80f 	bl	8000c4c <.text_38>
 8000c2e:	d105      	bne.n	8000c3c <PE_SubStateMachine_Generic+0x262>
 8000c30:	2103      	movs	r1, #3
 8000c32:	7361      	strb	r1, [r4, #13]
 8000c34:	2500      	movs	r5, #0
 8000c36:	e001      	b.n	8000c3c <PE_SubStateMachine_Generic+0x262>
 8000c38:	2001      	movs	r0, #1
 8000c3a:	7360      	strb	r0, [r4, #13]
 8000c3c:	4628      	mov	r0, r5
 8000c3e:	b00c      	add	sp, #48	@ 0x30
 8000c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000c44 <.text_37>:
 8000c44:	2100      	movs	r1, #0
 8000c46:	4620      	mov	r0, r4
 8000c48:	f000 b886 	b.w	8000d58 <PE_Send_CtrlMessage>

08000c4c <.text_38>:
 8000c4c:	8b60      	ldrh	r0, [r4, #26]
 8000c4e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8000c52:	4770      	bx	lr

08000c54 <.text_39>:
 8000c54:	2114      	movs	r1, #20
 8000c56:	7031      	strb	r1, [r6, #0]
 8000c58:	4620      	mov	r0, r4
 8000c5a:	e530      	b.n	80006be <PE_Clear_RxEvent>

08000c5c <.text_40>:
 8000c5c:	2003      	movs	r0, #3
 8000c5e:	0892      	lsrs	r2, r2, #2
 8000c60:	2100      	movs	r1, #0
 8000c62:	9001      	str	r0, [sp, #4]
 8000c64:	9200      	str	r2, [sp, #0]
 8000c66:	9102      	str	r1, [sp, #8]
 8000c68:	4770      	bx	lr

08000c6a <PE_UpdateTimer>:
 8000c6a:	b510      	push	{r4, lr}
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	f3c2 040e 	ubfx	r4, r2, #0, #15
 8000c72:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000c76:	42a1      	cmp	r1, r4
 8000c78:	bfb8      	it	lt
 8000c7a:	1a50      	sublt	r0, r2, r1
 8000c7c:	b280      	uxth	r0, r0
 8000c7e:	bd10      	pop	{r4, pc}

08000c80 <PE_CallHardResetCallback>:
 8000c80:	6883      	ldr	r3, [r0, #8]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	bf1c      	itt	ne
 8000c88:	7b00      	ldrbne	r0, [r0, #12]

08000c8a <__iar_annotation$$tailcall>:
 8000c8a:	4718      	bxne	r3
 8000c8c:	4770      	bx	lr

08000c8e <PE_SetPowerNegotiation>:
 8000c8e:	6842      	ldr	r2, [r0, #4]
 8000c90:	6813      	ldr	r3, [r2, #0]
 8000c92:	f3c3 2202 	ubfx	r2, r3, #8, #3
 8000c96:	4291      	cmp	r1, r2
 8000c98:	d007      	beq.n	8000caa <PE_SetPowerNegotiation+0x1c>
 8000c9a:	6842      	ldr	r2, [r0, #4]
 8000c9c:	f361 230a 	bfi	r3, r1, #8, #3
 8000ca0:	6013      	str	r3, [r2, #0]
 8000ca2:	215a      	movs	r1, #90	@ 0x5a
 8000ca4:	7b00      	ldrb	r0, [r0, #12]
 8000ca6:	f7ff bbec 	b.w	8000482 <USBPD_PE_Notification>
 8000caa:	4770      	bx	lr

08000cac <PE_SetPowerNegociation>:
 8000cac:	b538      	push	{r3, r4, r5, lr}
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	6860      	ldr	r0, [r4, #4]
 8000cb4:	6802      	ldr	r2, [r0, #0]
 8000cb6:	f3c2 2002 	ubfx	r0, r2, #8, #3
 8000cba:	4285      	cmp	r5, r0
 8000cbc:	d003      	beq.n	8000cc6 <PE_SetPowerNegociation+0x1a>
 8000cbe:	7b20      	ldrb	r0, [r4, #12]
 8000cc0:	215a      	movs	r1, #90	@ 0x5a
 8000cc2:	f7ff fbde 	bl	8000482 <USBPD_PE_Notification>
 8000cc6:	6860      	ldr	r0, [r4, #4]
 8000cc8:	6801      	ldr	r1, [r0, #0]
 8000cca:	f365 210a 	bfi	r1, r5, #8, #3
 8000cce:	6001      	str	r1, [r0, #0]
 8000cd0:	bd31      	pop	{r0, r4, r5, pc}
	...

08000cd4 <PE_CheckDataSizeFromGetDataInfo>:
 8000cd4:	b538      	push	{r3, r4, r5, lr}
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	4288      	cmp	r0, r1
 8000cda:	d208      	bcs.n	8000cee <PE_CheckDataSizeFromGetDataInfo+0x1a>
 8000cdc:	2018      	movs	r0, #24
 8000cde:	4c06      	ldr	r4, [pc, #24]	@ (8000cf8 <.text_47>)
 8000ce0:	a307      	add	r3, pc, #28	@ (adr r3, 8000d00 <.text_49>)
 8000ce2:	6825      	ldr	r5, [r4, #0]
 8000ce4:	9000      	str	r0, [sp, #0]
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	2006      	movs	r0, #6
 8000cea:	47a8      	blx	r5
 8000cec:	2202      	movs	r2, #2
 8000cee:	4610      	mov	r0, r2
 8000cf0:	bd32      	pop	{r1, r4, r5, pc}
	...

08000cf4 <.text_46>:
 8000cf4:	20000544 	.word	0x20000544

08000cf8 <.text_47>:
 8000cf8:	20000000 	.word	0x20000000

08000cfc <.text_48>:
 8000cfc:	0801ed58 	.word	0x0801ed58

08000d00 <.text_49>:
 8000d00:	61746144 	.word	0x61746144
 8000d04:	7a695320 	.word	0x7a695320
 8000d08:	73692065 	.word	0x73692065
 8000d0c:	746f6e20 	.word	0x746f6e20
 8000d10:	726f6320 	.word	0x726f6320
 8000d14:	74636572 	.word	0x74636572
 8000d18:	00          	.byte	0x00
 8000d19:	00          	.byte	0x00
	...

08000d1c <USBPD_PE_SetTrace>:
 8000d1c:	0001      	movs	r1, r0
 8000d1e:	4906      	ldr	r1, [pc, #24]	@ (8000d38 <.text_5>)
 8000d20:	bf08      	it	eq
 8000d22:	f20f 0031 	addweq	r0, pc, #49	@ 0x31
 8000d26:	6008      	str	r0, [r1, #0]
 8000d28:	4770      	bx	lr

08000d2a <USBPD_PE_CheckLIB>:
 8000d2a:	4601      	mov	r1, r0
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	4a03      	ldr	r2, [pc, #12]	@ (8000d3c <.text_6>)
 8000d30:	4291      	cmp	r1, r2
 8000d32:	bf08      	it	eq
 8000d34:	2001      	moveq	r0, #1
 8000d36:	4770      	bx	lr

08000d38 <.text_5>:
 8000d38:	20000000 	.word	0x20000000

08000d3c <.text_6>:
 8000d3c:	30410004 	.word	0x30410004

08000d40 <USBPD_PE_GetMemoryConsumption>:
 8000d40:	b510      	push	{r4, lr}
 8000d42:	f000 ff14 	bl	8001b6e <USBPD_PRL_GetMemoryConsumption>
 8000d46:	4604      	mov	r4, r0
 8000d48:	f7ff fb1e 	bl	8000388 <USBPD_CAD_GetMemoryConsumption>
 8000d4c:	1904      	adds	r4, r0, r4
 8000d4e:	f504 60ff 	add.w	r0, r4, #2040	@ 0x7f8
 8000d52:	bd10      	pop	{r4, pc}

08000d54 <PE_Trace_Empty>:
 8000d54:	4770      	bx	lr
	...

08000d58 <PE_Send_CtrlMessage>:
 8000d58:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 8000d5c:	9c08      	ldr	r4, [sp, #32]
 8000d5e:	4606      	mov	r6, r0
 8000d60:	4688      	mov	r8, r1
 8000d62:	4617      	mov	r7, r2
 8000d64:	461d      	mov	r5, r3
 8000d66:	f000 f81f 	bl	8000da8 <.text_3>
 8000d6a:	b190      	cbz	r0, 8000d92 <PE_Send_CtrlMessage+0x3a>
 8000d6c:	9401      	str	r4, [sp, #4]
 8000d6e:	2002      	movs	r0, #2
 8000d70:	9000      	str	r0, [sp, #0]
 8000d72:	f106 037e 	add.w	r3, r6, #126	@ 0x7e
 8000d76:	7b30      	ldrb	r0, [r6, #12]
 8000d78:	463a      	mov	r2, r7
 8000d7a:	4641      	mov	r1, r8
 8000d7c:	f000 ff2c 	bl	8001bd8 <USBPD_PRL_SendMessage>
 8000d80:	2803      	cmp	r0, #3
 8000d82:	d0f0      	beq.n	8000d66 <PE_Send_CtrlMessage+0xe>
 8000d84:	2810      	cmp	r0, #16
 8000d86:	d00d      	beq.n	8000da4 <PE_Send_CtrlMessage+0x4c>
 8000d88:	2f0d      	cmp	r7, #13
 8000d8a:	bf0c      	ite	eq
 8000d8c:	2201      	moveq	r2, #1
 8000d8e:	2200      	movne	r2, #0
 8000d90:	e002      	b.n	8000d98 <PE_Send_CtrlMessage+0x40>
 8000d92:	7370      	strb	r0, [r6, #13]
 8000d94:	2010      	movs	r0, #16
 8000d96:	e005      	b.n	8000da4 <PE_Send_CtrlMessage+0x4c>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	9500      	str	r5, [sp, #0]
 8000d9c:	4641      	mov	r1, r8
 8000d9e:	4630      	mov	r0, r6
 8000da0:	f000 fa6c 	bl	800127c <PE_CheckSendMessageStatus>
 8000da4:	e8bd 81f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, pc}

08000da8 <.text_3>:
 8000da8:	6870      	ldr	r0, [r6, #4]
 8000daa:	6801      	ldr	r1, [r0, #0]
 8000dac:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8000db0:	4770      	bx	lr

08000db2 <PE_Send_DataMessage>:
 8000db2:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8000db4:	4604      	mov	r4, r0
 8000db6:	9f08      	ldr	r7, [sp, #32]
 8000db8:	460d      	mov	r5, r1
 8000dba:	4616      	mov	r6, r2
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	e010      	b.n	8000de2 <PE_Send_DataMessage+0x30>
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 8000dc6:	f8d3 c000 	ldr.w	ip, [r3]
 8000dca:	440a      	add	r2, r1
 8000dcc:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 8000dd0:	1c49      	adds	r1, r1, #1
 8000dd2:	fa2c fc0e 	lsr.w	ip, ip, lr
 8000dd6:	2904      	cmp	r1, #4
 8000dd8:	f882 c080 	strb.w	ip, [r2, #128]	@ 0x80
 8000ddc:	d3f1      	bcc.n	8000dc2 <PE_Send_DataMessage+0x10>
 8000dde:	1d1b      	adds	r3, r3, #4
 8000de0:	1c40      	adds	r0, r0, #1
 8000de2:	42b8      	cmp	r0, r7
 8000de4:	d3ec      	bcc.n	8000dc0 <PE_Send_DataMessage+0xe>
 8000de6:	6860      	ldr	r0, [r4, #4]
 8000de8:	f7ff ffdf 	bl	8000daa <.text_3+0x2>
 8000dec:	b1d8      	cbz	r0, 8000e26 <PE_Send_DataMessage+0x74>
 8000dee:	f89d 0028 	ldrb.w	r0, [sp, #40]	@ 0x28
 8000df2:	9001      	str	r0, [sp, #4]
 8000df4:	f104 037e 	add.w	r3, r4, #126	@ 0x7e
 8000df8:	00b8      	lsls	r0, r7, #2
 8000dfa:	1c80      	adds	r0, r0, #2
 8000dfc:	b280      	uxth	r0, r0
 8000dfe:	9000      	str	r0, [sp, #0]
 8000e00:	4632      	mov	r2, r6
 8000e02:	7b20      	ldrb	r0, [r4, #12]
 8000e04:	4629      	mov	r1, r5
 8000e06:	f000 fee7 	bl	8001bd8 <USBPD_PRL_SendMessage>
 8000e0a:	2803      	cmp	r0, #3
 8000e0c:	d0eb      	beq.n	8000de6 <PE_Send_DataMessage+0x34>
 8000e0e:	2810      	cmp	r0, #16
 8000e10:	d008      	beq.n	8000e24 <PE_Send_DataMessage+0x72>
 8000e12:	f89d 1024 	ldrb.w	r1, [sp, #36]	@ 0x24
 8000e16:	9100      	str	r1, [sp, #0]
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	4629      	mov	r1, r5
 8000e1e:	4620      	mov	r0, r4
 8000e20:	f000 fa2c 	bl	800127c <PE_CheckSendMessageStatus>
 8000e24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000e26:	2010      	movs	r0, #16
 8000e28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08000e2a <PE_Check_ExtendedMessage>:
 8000e2a:	b570      	push	{r4, r5, r6, lr}
 8000e2c:	4604      	mov	r4, r0
 8000e2e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8000e30:	7881      	ldrb	r1, [r0, #2]
 8000e32:	78c0      	ldrb	r0, [r0, #3]
 8000e34:	eb01 2200 	add.w	r2, r1, r0, lsl #8
 8000e38:	f104 0174 	add.w	r1, r4, #116	@ 0x74
 8000e3c:	800a      	strh	r2, [r1, #0]
 8000e3e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8000e42:	f000 001f 	and.w	r0, r0, #31
 8000e46:	7088      	strb	r0, [r1, #2]
 8000e48:	f3c2 20c3 	ubfx	r0, r2, #11, #4
 8000e4c:	2800      	cmp	r0, #0
 8000e4e:	bf1e      	ittt	ne
 8000e50:	f3c2 2080 	ubfxne	r0, r2, #10, #1
 8000e54:	2800      	cmpne	r0, #0
 8000e56:	2034      	movne	r0, #52	@ 0x34
 8000e58:	d13d      	bne.n	8000ed6 <PE_Check_ExtendedMessage+0xac>
 8000e5a:	0410      	lsls	r0, r2, #16
 8000e5c:	0fc0      	lsrs	r0, r0, #31
 8000e5e:	f3c2 0308 	ubfx	r3, r2, #0, #9
 8000e62:	d10d      	bne.n	8000e80 <PE_Check_ExtendedMessage+0x56>
 8000e64:	f8a4 32a4 	strh.w	r3, [r4, #676]	@ 0x2a4
 8000e68:	f8b4 22a4 	ldrh.w	r2, [r4, #676]	@ 0x2a4
 8000e6c:	4290      	cmp	r0, r2
 8000e6e:	d21c      	bcs.n	8000eaa <PE_Check_ExtendedMessage+0x80>
 8000e70:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000e72:	4403      	add	r3, r0
 8000e74:	1825      	adds	r5, r4, r0
 8000e76:	791a      	ldrb	r2, [r3, #4]
 8000e78:	f885 209c 	strb.w	r2, [r5, #156]	@ 0x9c
 8000e7c:	1c40      	adds	r0, r0, #1
 8000e7e:	e7f3      	b.n	8000e68 <PE_Check_ExtendedMessage+0x3e>
 8000e80:	f412 4ff8 	tst.w	r2, #31744	@ 0x7c00
 8000e84:	d106      	bne.n	8000e94 <PE_Check_ExtendedMessage+0x6a>
 8000e86:	8da0      	ldrh	r0, [r4, #44]	@ 0x2c
 8000e88:	f3c0 3002 	ubfx	r0, r0, #12, #3
 8000e8c:	2807      	cmp	r0, #7
 8000e8e:	bf28      	it	cs
 8000e90:	2b1b      	cmpcs	r3, #27
 8000e92:	d30a      	bcc.n	8000eaa <PE_Check_ExtendedMessage+0x80>
 8000e94:	f3c2 2080 	ubfx	r0, r2, #10, #1
 8000e98:	b938      	cbnz	r0, 8000eaa <PE_Check_ExtendedMessage+0x80>
 8000e9a:	f8b4 02a4 	ldrh.w	r0, [r4, #676]	@ 0x2a4
 8000e9e:	4298      	cmp	r0, r3
 8000ea0:	d203      	bcs.n	8000eaa <PE_Check_ExtendedMessage+0x80>
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	8361      	strh	r1, [r4, #26]
 8000ea6:	2037      	movs	r0, #55	@ 0x37
 8000ea8:	e015      	b.n	8000ed6 <PE_Check_ExtendedMessage+0xac>
 8000eaa:	7e20      	ldrb	r0, [r4, #24]
 8000eac:	b1a8      	cbz	r0, 8000eda <PE_Check_ExtendedMessage+0xb0>
 8000eae:	7888      	ldrb	r0, [r1, #2]
 8000eb0:	280f      	cmp	r0, #15
 8000eb2:	d10f      	bne.n	8000ed4 <PE_Check_ExtendedMessage+0xaa>
 8000eb4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8000eb6:	68a5      	ldr	r5, [r4, #8]
 8000eb8:	69ae      	ldr	r6, [r5, #24]
 8000eba:	1d02      	adds	r2, r0, #4
 8000ebc:	7b20      	ldrb	r0, [r4, #12]
 8000ebe:	2318      	movs	r3, #24
 8000ec0:	2113      	movs	r1, #19
 8000ec2:	47b0      	blx	r6
 8000ec4:	2003      	movs	r0, #3
 8000ec6:	7360      	strb	r0, [r4, #13]
 8000ec8:	2162      	movs	r1, #98	@ 0x62
 8000eca:	7b20      	ldrb	r0, [r4, #12]
 8000ecc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000ed0:	f7ff bad7 	b.w	8000482 <USBPD_PE_Notification>
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	7360      	strb	r0, [r4, #13]
 8000ed8:	bd70      	pop	{r4, r5, r6, pc}
 8000eda:	2101      	movs	r1, #1
 8000edc:	7361      	strb	r1, [r4, #13]
 8000ede:	bd70      	pop	{r4, r5, r6, pc}

08000ee0 <PE_Send_ExtendedMessage>:
 8000ee0:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 8000ee4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8000ee6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8000ee8:	4606      	mov	r6, r0
 8000eea:	460f      	mov	r7, r1
 8000eec:	4690      	mov	r8, r2
 8000eee:	4699      	mov	r9, r3
 8000ef0:	f7ff ff5a 	bl	8000da8 <.text_3>
 8000ef4:	b1b8      	cbz	r0, 8000f26 <PE_Send_ExtendedMessage+0x46>
 8000ef6:	9501      	str	r5, [sp, #4]
 8000ef8:	9400      	str	r4, [sp, #0]
 8000efa:	464b      	mov	r3, r9
 8000efc:	7b30      	ldrb	r0, [r6, #12]
 8000efe:	f048 0280 	orr.w	r2, r8, #128	@ 0x80
 8000f02:	4639      	mov	r1, r7
 8000f04:	f000 fe68 	bl	8001bd8 <USBPD_PRL_SendMessage>
 8000f08:	2803      	cmp	r0, #3
 8000f0a:	d0f1      	beq.n	8000ef0 <PE_Send_ExtendedMessage+0x10>
 8000f0c:	2810      	cmp	r0, #16
 8000f0e:	d008      	beq.n	8000f22 <PE_Send_ExtendedMessage+0x42>
 8000f10:	f89d 102c 	ldrb.w	r1, [sp, #44]	@ 0x2c
 8000f14:	9100      	str	r1, [sp, #0]
 8000f16:	4603      	mov	r3, r0
 8000f18:	2200      	movs	r2, #0
 8000f1a:	4639      	mov	r1, r7
 8000f1c:	4630      	mov	r0, r6
 8000f1e:	f000 f9ad 	bl	800127c <PE_CheckSendMessageStatus>
 8000f22:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
 8000f26:	2011      	movs	r0, #17
 8000f28:	7370      	strb	r0, [r6, #13]
 8000f2a:	2010      	movs	r0, #16
 8000f2c:	e7f9      	b.n	8000f22 <PE_Send_ExtendedMessage+0x42>

08000f2e <PE_SubStateMachine_ExtendedMessages>:
 8000f2e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000f32:	2602      	movs	r6, #2
 8000f34:	4604      	mov	r4, r0
 8000f36:	f104 0182 	add.w	r1, r4, #130	@ 0x82
 8000f3a:	7b63      	ldrb	r3, [r4, #13]
 8000f3c:	2b31      	cmp	r3, #49	@ 0x31
 8000f3e:	f504 72d0 	add.w	r2, r4, #416	@ 0x1a0
 8000f42:	f104 0574 	add.w	r5, r4, #116	@ 0x74
 8000f46:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 8000f4a:	f504 7729 	add.w	r7, r4, #676	@ 0x2a4
 8000f4e:	f248 001b 	movw	r0, #32795	@ 0x801b
 8000f52:	d010      	beq.n	8000f76 <PE_SubStateMachine_ExtendedMessages+0x48>
 8000f54:	2b33      	cmp	r3, #51	@ 0x33
 8000f56:	d004      	beq.n	8000f62 <PE_SubStateMachine_ExtendedMessages+0x34>
 8000f58:	2b34      	cmp	r3, #52	@ 0x34
 8000f5a:	d03a      	beq.n	8000fd2 <PE_SubStateMachine_ExtendedMessages+0xa4>
 8000f5c:	2b35      	cmp	r3, #53	@ 0x35
 8000f5e:	d066      	beq.n	800102e <PE_SubStateMachine_ExtendedMessages+0x100>
 8000f60:	2b36      	cmp	r3, #54	@ 0x36
 8000f62:	d07b      	beq.n	800105c <PE_SubStateMachine_ExtendedMessages+0x12e>
 8000f64:	2b37      	cmp	r3, #55	@ 0x37
 8000f66:	d07d      	beq.n	8001064 <PE_SubStateMachine_ExtendedMessages+0x136>
 8000f68:	2b38      	cmp	r3, #56	@ 0x38
 8000f6a:	bf01      	itttt	eq
 8000f6c:	2003      	moveq	r0, #3
 8000f6e:	7360      	strbeq	r0, [r4, #13]
 8000f70:	2600      	moveq	r6, #0
 8000f72:	803e      	strheq	r6, [r7, #0]
 8000f74:	e0a5      	b.n	80010c2 <PE_SubStateMachine_ExtendedMessages+0x194>
 8000f76:	2300      	movs	r3, #0
 8000f78:	803b      	strh	r3, [r7, #0]
 8000f7a:	736b      	strb	r3, [r5, #13]
 8000f7c:	732b      	strb	r3, [r5, #12]
 8000f7e:	8878      	ldrh	r0, [r7, #2]
 8000f80:	281a      	cmp	r0, #26
 8000f82:	4618      	mov	r0, r3
 8000f84:	d906      	bls.n	8000f94 <PE_SubStateMachine_ExtendedMessages+0x66>
 8000f86:	f000 f8a0 	bl	80010ca <.text_8>
 8000f8a:	281a      	cmp	r0, #26
 8000f8c:	d3fb      	bcc.n	8000f86 <PE_SubStateMachine_ExtendedMessages+0x58>
 8000f8e:	e005      	b.n	8000f9c <PE_SubStateMachine_ExtendedMessages+0x6e>
 8000f90:	f000 f89b 	bl	80010ca <.text_8>
 8000f94:	f8b7 c002 	ldrh.w	ip, [r7, #2]
 8000f98:	4560      	cmp	r0, ip
 8000f9a:	d3f9      	bcc.n	8000f90 <PE_SubStateMachine_ExtendedMessages+0x62>
 8000f9c:	6920      	ldr	r0, [r4, #16]
 8000f9e:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8000fa2:	2800      	cmp	r0, #0
 8000fa4:	bf1a      	itte	ne
 8000fa6:	2302      	movne	r3, #2
 8000fa8:	2033      	movne	r0, #51	@ 0x33
 8000faa:	2003      	moveq	r0, #3
 8000fac:	9001      	str	r0, [sp, #4]
 8000fae:	9302      	str	r3, [sp, #8]
 8000fb0:	f104 037e 	add.w	r3, r4, #126	@ 0x7e
 8000fb4:	8878      	ldrh	r0, [r7, #2]
 8000fb6:	1d00      	adds	r0, r0, #4
 8000fb8:	b280      	uxth	r0, r0
 8000fba:	9000      	str	r0, [sp, #0]
 8000fbc:	78ea      	ldrb	r2, [r5, #3]
 8000fbe:	f898 1003 	ldrb.w	r1, [r8, #3]
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	f7ff ff8c 	bl	8000ee0 <PE_Send_ExtendedMessage>
 8000fc8:	2800      	cmp	r0, #0
 8000fca:	d17a      	bne.n	80010c2 <PE_SubStateMachine_ExtendedMessages+0x194>
 8000fcc:	7968      	ldrb	r0, [r5, #5]
 8000fce:	7620      	strb	r0, [r4, #24]
 8000fd0:	e077      	b.n	80010c2 <PE_SubStateMachine_ExtendedMessages+0x194>
 8000fd2:	882b      	ldrh	r3, [r5, #0]
 8000fd4:	887e      	ldrh	r6, [r7, #2]
 8000fd6:	f3c3 23c3 	ubfx	r3, r3, #11, #4
 8000fda:	201a      	movs	r0, #26
 8000fdc:	4343      	muls	r3, r0
 8000fde:	42b3      	cmp	r3, r6
 8000fe0:	da04      	bge.n	8000fec <PE_SubStateMachine_ExtendedMessages+0xbe>
 8000fe2:	8828      	ldrh	r0, [r5, #0]
 8000fe4:	f3c0 20c3 	ubfx	r0, r0, #11, #4
 8000fe8:	280a      	cmp	r0, #10
 8000fea:	d301      	bcc.n	8000ff0 <PE_SubStateMachine_ExtendedMessages+0xc2>
 8000fec:	2003      	movs	r0, #3
 8000fee:	e01b      	b.n	8001028 <PE_SubStateMachine_ExtendedMessages+0xfa>
 8000ff0:	1af0      	subs	r0, r6, r3
 8000ff2:	281a      	cmp	r0, #26
 8000ff4:	bf3a      	itte	cc
 8000ff6:	1af6      	subcc	r6, r6, r3
 8000ff8:	b2f6      	uxtbcc	r6, r6
 8000ffa:	261a      	movcs	r6, #26
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	e006      	b.n	800100e <PE_SubStateMachine_ExtendedMessages+0xe0>
 8001000:	eb00 0803 	add.w	r8, r0, r3
 8001004:	f812 8008 	ldrb.w	r8, [r2, r8]
 8001008:	f801 8000 	strb.w	r8, [r1, r0]
 800100c:	1c40      	adds	r0, r0, #1
 800100e:	42b0      	cmp	r0, r6
 8001010:	d3f6      	bcc.n	8001000 <PE_SubStateMachine_ExtendedMessages+0xd2>
 8001012:	8829      	ldrh	r1, [r5, #0]
 8001014:	887a      	ldrh	r2, [r7, #2]
 8001016:	7b20      	ldrb	r0, [r4, #12]
 8001018:	0ac9      	lsrs	r1, r1, #11
 800101a:	f104 037e 	add.w	r3, r4, #126	@ 0x7e
 800101e:	f001 010f 	and.w	r1, r1, #15
 8001022:	f001 fa44 	bl	80024ae <USBPD_PRL_PrepareExtendedTxChunkSending>
 8001026:	2035      	movs	r0, #53	@ 0x35
 8001028:	7360      	strb	r0, [r4, #13]
 800102a:	2600      	movs	r6, #0
 800102c:	e049      	b.n	80010c2 <PE_SubStateMachine_ExtendedMessages+0x194>
 800102e:	6920      	ldr	r0, [r4, #16]
 8001030:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8001034:	2800      	cmp	r0, #0
 8001036:	bf14      	ite	ne
 8001038:	2036      	movne	r0, #54	@ 0x36
 800103a:	2003      	moveq	r0, #3
 800103c:	2100      	movs	r1, #0
 800103e:	9001      	str	r0, [sp, #4]
 8001040:	9102      	str	r1, [sp, #8]
 8001042:	f104 037e 	add.w	r3, r4, #126	@ 0x7e
 8001046:	8878      	ldrh	r0, [r7, #2]
 8001048:	9000      	str	r0, [sp, #0]
 800104a:	78ea      	ldrb	r2, [r5, #3]
 800104c:	f898 1000 	ldrb.w	r1, [r8]
 8001050:	4620      	mov	r0, r4
 8001052:	f7ff ff45 	bl	8000ee0 <PE_Send_ExtendedMessage>
 8001056:	2000      	movs	r0, #0
 8001058:	8038      	strh	r0, [r7, #0]
 800105a:	e032      	b.n	80010c2 <PE_SubStateMachine_ExtendedMessages+0x194>
 800105c:	8360      	strh	r0, [r4, #26]
 800105e:	261b      	movs	r6, #27
 8001060:	2039      	movs	r0, #57	@ 0x39
 8001062:	e004      	b.n	800106e <PE_SubStateMachine_ExtendedMessages+0x140>
 8001064:	8b61      	ldrh	r1, [r4, #26]
 8001066:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 800106a:	d102      	bne.n	8001072 <PE_SubStateMachine_ExtendedMessages+0x144>
 800106c:	200f      	movs	r0, #15
 800106e:	7360      	strb	r0, [r4, #13]
 8001070:	e027      	b.n	80010c2 <PE_SubStateMachine_ExtendedMessages+0x194>
 8001072:	8360      	strh	r0, [r4, #26]
 8001074:	f104 017e 	add.w	r1, r4, #126	@ 0x7e
 8001078:	7b20      	ldrb	r0, [r4, #12]
 800107a:	f001 fa3c 	bl	80024f6 <USBPD_PRL_PrepareChunkRequest>
 800107e:	261b      	movs	r6, #27
 8001080:	6860      	ldr	r0, [r4, #4]
 8001082:	f7ff fe92 	bl	8000daa <.text_3+0x2>
 8001086:	b188      	cbz	r0, 80010ac <PE_SubStateMachine_ExtendedMessages+0x17e>
 8001088:	2000      	movs	r0, #0
 800108a:	2106      	movs	r1, #6
 800108c:	9001      	str	r0, [sp, #4]
 800108e:	9100      	str	r1, [sp, #0]
 8001090:	f104 037e 	add.w	r3, r4, #126	@ 0x7e
 8001094:	78aa      	ldrb	r2, [r5, #2]
 8001096:	f898 1000 	ldrb.w	r1, [r8]
 800109a:	7b20      	ldrb	r0, [r4, #12]
 800109c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80010a0:	f000 fd9a 	bl	8001bd8 <USBPD_PRL_SendMessage>
 80010a4:	2803      	cmp	r0, #3
 80010a6:	4603      	mov	r3, r0
 80010a8:	d0ea      	beq.n	8001080 <PE_SubStateMachine_ExtendedMessages+0x152>
 80010aa:	e002      	b.n	80010b2 <PE_SubStateMachine_ExtendedMessages+0x184>
 80010ac:	2011      	movs	r0, #17
 80010ae:	7360      	strb	r0, [r4, #13]
 80010b0:	2310      	movs	r3, #16
 80010b2:	2039      	movs	r0, #57	@ 0x39
 80010b4:	9000      	str	r0, [sp, #0]
 80010b6:	2200      	movs	r2, #0
 80010b8:	f898 1000 	ldrb.w	r1, [r8]
 80010bc:	4620      	mov	r0, r4
 80010be:	f000 f8dd 	bl	800127c <PE_CheckSendMessageStatus>
 80010c2:	4630      	mov	r0, r6
 80010c4:	b004      	add	sp, #16
 80010c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080010ca <.text_8>:
 80010ca:	f812 c000 	ldrb.w	ip, [r2, r0]
 80010ce:	f801 c000 	strb.w	ip, [r1, r0]
 80010d2:	1c40      	adds	r0, r0, #1
 80010d4:	4770      	bx	lr

080010d6 <PE_ManageRXEvent>:
 80010d6:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80010da:	780a      	ldrb	r2, [r1, #0]
 80010dc:	704a      	strb	r2, [r1, #1]
 80010de:	888a      	ldrh	r2, [r1, #4]
 80010e0:	0bd1      	lsrs	r1, r2, #15
 80010e2:	bf18      	it	ne
 80010e4:	f7ff bea1 	bne.w	8000e2a <PE_Check_ExtendedMessage>
 80010e8:	f412 4f70 	tst.w	r2, #61440	@ 0xf000
 80010ec:	bf08      	it	eq
 80010ee:	f000 b801 	beq.w	80010f4 <PE_Check_ControlMessage>
 80010f2:	e05d      	b.n	80011b0 <PE_Check_DataMessage>

080010f4 <PE_Check_ControlMessage>:
 80010f4:	b510      	push	{r4, lr}
 80010f6:	4604      	mov	r4, r0
 80010f8:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80010fc:	f000 001f 	and.w	r0, r0, #31
 8001100:	1e40      	subs	r0, r0, #1
 8001102:	2817      	cmp	r0, #23
 8001104:	d84b      	bhi.n	800119e <PE_Check_ControlMessage+0xaa>
 8001106:	e8df f000 	tbb	[pc, r0]
 800110a:	0c52      	.short	0x0c52
 800110c:	481c4848 	.word	0x481c4848
 8001110:	4a4a2c1e 	.word	0x4a4a2c1e
 8001114:	4a14484a 	.word	0x4a14484a
 8001118:	4a4a424a 	.word	0x4a4a424a
 800111c:	384a4a4a 	.word	0x384a4a4a
 8001120:	3e4a      	.short	0x3e4a
 8001122:	2202      	movs	r2, #2
 8001124:	7622      	strb	r2, [r4, #24]
 8001126:	212b      	movs	r1, #43	@ 0x2b
 8001128:	7b20      	ldrb	r0, [r4, #12]
 800112a:	f7ff f9aa 	bl	8000482 <USBPD_PE_Notification>
 800112e:	2198      	movs	r1, #152	@ 0x98
 8001130:	e03c      	b.n	80011ac <PE_Check_ControlMessage+0xb8>
 8001132:	2003      	movs	r0, #3
 8001134:	7620      	strb	r0, [r4, #24]
 8001136:	2132      	movs	r1, #50	@ 0x32
 8001138:	7b20      	ldrb	r0, [r4, #12]
 800113a:	f7ff f9a2 	bl	8000482 <USBPD_PE_Notification>
 800113e:	2010      	movs	r0, #16
 8001140:	e031      	b.n	80011a6 <PE_Check_ControlMessage+0xb2>
 8001142:	2133      	movs	r1, #51	@ 0x33
 8001144:	e024      	b.n	8001190 <PE_Check_ControlMessage+0x9c>
 8001146:	2006      	movs	r0, #6
 8001148:	7620      	strb	r0, [r4, #24]
 800114a:	6820      	ldr	r0, [r4, #0]
 800114c:	6841      	ldr	r1, [r0, #4]
 800114e:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8001152:	2800      	cmp	r0, #0
 8001154:	d023      	beq.n	800119e <PE_Check_ControlMessage+0xaa>
 8001156:	7b20      	ldrb	r0, [r4, #12]
 8001158:	210c      	movs	r1, #12
 800115a:	f7ff f992 	bl	8000482 <USBPD_PE_Notification>
 800115e:	204c      	movs	r0, #76	@ 0x4c
 8001160:	e021      	b.n	80011a6 <PE_Check_ControlMessage+0xb2>
 8001162:	6860      	ldr	r0, [r4, #4]
 8001164:	6801      	ldr	r1, [r0, #0]
 8001166:	f3c1 2002 	ubfx	r0, r1, #8, #3
 800116a:	2803      	cmp	r0, #3
 800116c:	d117      	bne.n	800119e <PE_Check_ControlMessage+0xaa>
 800116e:	211d      	movs	r1, #29
 8001170:	7361      	strb	r1, [r4, #13]
 8001172:	2007      	movs	r0, #7
 8001174:	7620      	strb	r0, [r4, #24]
 8001176:	2106      	movs	r1, #6
 8001178:	e00a      	b.n	8001190 <PE_Check_ControlMessage+0x9c>
 800117a:	2164      	movs	r1, #100	@ 0x64
 800117c:	7361      	strb	r1, [r4, #13]
 800117e:	205f      	movs	r0, #95	@ 0x5f
 8001180:	7620      	strb	r0, [r4, #24]
 8001182:	2160      	movs	r1, #96	@ 0x60
 8001184:	e004      	b.n	8001190 <PE_Check_ControlMessage+0x9c>
 8001186:	200f      	movs	r0, #15
 8001188:	7620      	strb	r0, [r4, #24]
 800118a:	214b      	movs	r1, #75	@ 0x4b
 800118c:	e00e      	b.n	80011ac <PE_Check_ControlMessage+0xb8>
 800118e:	2159      	movs	r1, #89	@ 0x59
 8001190:	7b20      	ldrb	r0, [r4, #12]
 8001192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001196:	f7ff b974 	b.w	8000482 <USBPD_PE_Notification>
 800119a:	2011      	movs	r0, #17
 800119c:	e003      	b.n	80011a6 <PE_Check_ControlMessage+0xb2>
 800119e:	f000 f867 	bl	8001270 <.text_12>
 80011a2:	d102      	bne.n	80011aa <PE_Check_ControlMessage+0xb6>
 80011a4:	2001      	movs	r0, #1
 80011a6:	7360      	strb	r0, [r4, #13]
 80011a8:	bd10      	pop	{r4, pc}
 80011aa:	212a      	movs	r1, #42	@ 0x2a
 80011ac:	7361      	strb	r1, [r4, #13]
 80011ae:	bd10      	pop	{r4, pc}

080011b0 <PE_Check_DataMessage>:
 80011b0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 80011b2:	4604      	mov	r4, r0
 80011b4:	8da0      	ldrh	r0, [r4, #44]	@ 0x2c
 80011b6:	f000 011f 	and.w	r1, r0, #31
 80011ba:	2901      	cmp	r1, #1
 80011bc:	d00a      	beq.n	80011d4 <PE_Check_DataMessage+0x24>
 80011be:	2903      	cmp	r1, #3
 80011c0:	d01a      	beq.n	80011f8 <PE_Check_DataMessage+0x48>
 80011c2:	2906      	cmp	r1, #6
 80011c4:	d04e      	beq.n	8001264 <PE_Check_DataMessage+0xb4>
 80011c6:	2907      	cmp	r1, #7
 80011c8:	d04a      	beq.n	8001260 <PE_Check_DataMessage+0xb0>
 80011ca:	290a      	cmp	r1, #10
 80011cc:	d04a      	beq.n	8001264 <PE_Check_DataMessage+0xb4>
 80011ce:	290f      	cmp	r1, #15
 80011d0:	d043      	beq.n	800125a <PE_Check_DataMessage+0xaa>
 80011d2:	e04a      	b.n	800126a <PE_Check_DataMessage+0xba>
 80011d4:	f3c0 1181 	ubfx	r1, r0, #6, #2
 80011d8:	7b20      	ldrb	r0, [r4, #12]
 80011da:	f7ff fb4e 	bl	800087a <PE_ExtRevisionInteroperability>
 80011de:	68a5      	ldr	r5, [r4, #8]
 80011e0:	8da0      	ldrh	r0, [r4, #44]	@ 0x2c
 80011e2:	69ae      	ldr	r6, [r5, #24]
 80011e4:	f3c0 3302 	ubfx	r3, r0, #12, #3
 80011e8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80011ea:	1c82      	adds	r2, r0, #2
 80011ec:	7b20      	ldrb	r0, [r4, #12]
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	2104      	movs	r1, #4
 80011f2:	47b0      	blx	r6
 80011f4:	2044      	movs	r0, #68	@ 0x44
 80011f6:	e039      	b.n	800126c <PE_Check_DataMessage+0xbc>
 80011f8:	2100      	movs	r1, #0
 80011fa:	9101      	str	r1, [sp, #4]
 80011fc:	9100      	str	r1, [sp, #0]
 80011fe:	466b      	mov	r3, sp
 8001200:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8001202:	7881      	ldrb	r1, [r0, #2]
 8001204:	78c2      	ldrb	r2, [r0, #3]
 8001206:	68a6      	ldr	r6, [r4, #8]
 8001208:	6977      	ldr	r7, [r6, #20]
 800120a:	eb01 2502 	add.w	r5, r1, r2, lsl #8
 800120e:	7901      	ldrb	r1, [r0, #4]
 8001210:	7940      	ldrb	r0, [r0, #5]
 8001212:	eb05 4501 	add.w	r5, r5, r1, lsl #16
 8001216:	eb05 6500 	add.w	r5, r5, r0, lsl #24
 800121a:	7b20      	ldrb	r0, [r4, #12]
 800121c:	aa01      	add	r2, sp, #4
 800121e:	2103      	movs	r1, #3
 8001220:	47b8      	blx	r7
 8001222:	9800      	ldr	r0, [sp, #0]
 8001224:	2104      	movs	r1, #4
 8001226:	f7ff fd55 	bl	8000cd4 <PE_CheckDataSizeFromGetDataInfo>
 800122a:	2800      	cmp	r0, #0
 800122c:	bf01      	itttt	eq
 800122e:	6860      	ldreq	r0, [r4, #4]
 8001230:	6801      	ldreq	r1, [r0, #0]
 8001232:	f3c1 2002 	ubfxeq	r0, r1, #8, #3
 8001236:	2803      	cmpeq	r0, #3
 8001238:	d10d      	bne.n	8001256 <PE_Check_DataMessage+0xa6>
 800123a:	9801      	ldr	r0, [sp, #4]
 800123c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001240:	4288      	cmp	r0, r1
 8001242:	d108      	bne.n	8001256 <PE_Check_DataMessage+0xa6>
 8001244:	0f2d      	lsrs	r5, r5, #28
 8001246:	2d05      	cmp	r5, #5
 8001248:	d003      	beq.n	8001252 <PE_Check_DataMessage+0xa2>
 800124a:	2d08      	cmp	r5, #8
 800124c:	d10f      	bne.n	800126e <PE_Check_DataMessage+0xbe>
 800124e:	2029      	movs	r0, #41	@ 0x29
 8001250:	e00c      	b.n	800126c <PE_Check_DataMessage+0xbc>
 8001252:	2127      	movs	r1, #39	@ 0x27
 8001254:	e007      	b.n	8001266 <PE_Check_DataMessage+0xb6>
 8001256:	2003      	movs	r0, #3
 8001258:	e008      	b.n	800126c <PE_Check_DataMessage+0xbc>
 800125a:	f000 f809 	bl	8001270 <.text_12>
 800125e:	d106      	bne.n	800126e <PE_Check_DataMessage+0xbe>
 8001260:	2001      	movs	r0, #1
 8001262:	e003      	b.n	800126c <PE_Check_DataMessage+0xbc>
 8001264:	2101      	movs	r1, #1
 8001266:	7361      	strb	r1, [r4, #13]
 8001268:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800126a:	2011      	movs	r0, #17
 800126c:	7360      	strb	r0, [r4, #13]
 800126e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08001270 <.text_12>:
 8001270:	6860      	ldr	r0, [r4, #4]
 8001272:	7801      	ldrb	r1, [r0, #0]
 8001274:	f001 0103 	and.w	r1, r1, #3
 8001278:	2902      	cmp	r1, #2
 800127a:	4770      	bx	lr

0800127c <PE_CheckSendMessageStatus>:
 800127c:	b510      	push	{r4, lr}
 800127e:	2110      	movs	r1, #16
 8001280:	2b05      	cmp	r3, #5
 8001282:	d007      	beq.n	8001294 <PE_CheckSendMessageStatus+0x18>
 8001284:	2b06      	cmp	r3, #6
 8001286:	d00d      	beq.n	80012a4 <PE_CheckSendMessageStatus+0x28>
 8001288:	2b07      	cmp	r3, #7
 800128a:	d010      	beq.n	80012ae <PE_CheckSendMessageStatus+0x32>
 800128c:	2b09      	cmp	r3, #9
 800128e:	bf08      	it	eq
 8001290:	2109      	moveq	r1, #9
 8001292:	e021      	b.n	80012d8 <PE_CheckSendMessageStatus+0x5c>
 8001294:	9902      	ldr	r1, [sp, #8]
 8001296:	7341      	strb	r1, [r0, #13]
 8001298:	6901      	ldr	r1, [r0, #16]
 800129a:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 800129e:	6101      	str	r1, [r0, #16]
 80012a0:	2100      	movs	r1, #0
 80012a2:	e019      	b.n	80012d8 <PE_CheckSendMessageStatus+0x5c>
 80012a4:	6902      	ldr	r2, [r0, #16]
 80012a6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80012aa:	6102      	str	r2, [r0, #16]
 80012ac:	e014      	b.n	80012d8 <PE_CheckSendMessageStatus+0x5c>
 80012ae:	6843      	ldr	r3, [r0, #4]
 80012b0:	681c      	ldr	r4, [r3, #0]
 80012b2:	f3c4 2302 	ubfx	r3, r4, #8, #3
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	d003      	beq.n	80012c2 <PE_CheckSendMessageStatus+0x46>
 80012ba:	2a01      	cmp	r2, #1
 80012bc:	d10a      	bne.n	80012d4 <PE_CheckSendMessageStatus+0x58>
 80012be:	220f      	movs	r2, #15
 80012c0:	e009      	b.n	80012d6 <PE_CheckSendMessageStatus+0x5a>
 80012c2:	2a00      	cmp	r2, #0
 80012c4:	d1fb      	bne.n	80012be <PE_CheckSendMessageStatus+0x42>
 80012c6:	6883      	ldr	r3, [r0, #8]
 80012c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012ca:	2a00      	cmp	r2, #0
 80012cc:	d0f7      	beq.n	80012be <PE_CheckSendMessageStatus+0x42>
 80012ce:	2392      	movs	r3, #146	@ 0x92
 80012d0:	7343      	strb	r3, [r0, #13]
 80012d2:	e001      	b.n	80012d8 <PE_CheckSendMessageStatus+0x5c>
 80012d4:	2211      	movs	r2, #17
 80012d6:	7342      	strb	r2, [r0, #13]
 80012d8:	4608      	mov	r0, r1
 80012da:	bd10      	pop	{r4, pc}

080012dc <USBPD_PE_StateMachine_SNK>:
 80012dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012e0:	4604      	mov	r4, r0
 80012e2:	f8df 081c 	ldr.w	r0, [pc, #2076]	@ 8001b00 <.text_15>
 80012e6:	b084      	sub	sp, #16
 80012e8:	4621      	mov	r1, r4
 80012ea:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 80012ee:	7b68      	ldrb	r0, [r5, #13]
 80012f0:	2848      	cmp	r0, #72	@ 0x48
 80012f2:	d12e      	bne.n	8001352 <USBPD_PE_StateMachine_SNK+0x76>
 80012f4:	4628      	mov	r0, r5
 80012f6:	f7ff faa2 	bl	800083e <PE_Reset_ZI>
 80012fa:	4628      	mov	r0, r5
 80012fc:	f7ff fab9 	bl	8000872 <PE_Reset_Counter>
 8001300:	6828      	ldr	r0, [r5, #0]
 8001302:	7903      	ldrb	r3, [r0, #4]
 8001304:	7b28      	ldrb	r0, [r5, #12]
 8001306:	f003 0303 	and.w	r3, r3, #3
 800130a:	2200      	movs	r2, #0
 800130c:	2100      	movs	r1, #0
 800130e:	f000 fc30 	bl	8001b72 <USBPD_PRL_SetHeader>
 8001312:	6868      	ldr	r0, [r5, #4]
 8001314:	6801      	ldr	r1, [r0, #0]
 8001316:	f021 0108 	bic.w	r1, r1, #8
 800131a:	6001      	str	r1, [r0, #0]
 800131c:	6828      	ldr	r0, [r5, #0]
 800131e:	6841      	ldr	r1, [r0, #4]
 8001320:	6868      	ldr	r0, [r5, #4]
 8001322:	6802      	ldr	r2, [r0, #0]
 8001324:	f361 0201 	bfi	r2, r1, #0, #2
 8001328:	6002      	str	r2, [r0, #0]
 800132a:	7b28      	ldrb	r0, [r5, #12]
 800132c:	f000 feb4 	bl	8002098 <USBPD_PRL_Reset>
 8001330:	7ba9      	ldrb	r1, [r5, #14]
 8001332:	203e      	movs	r0, #62	@ 0x3e
 8001334:	293e      	cmp	r1, #62	@ 0x3e
 8001336:	7368      	strb	r0, [r5, #13]
 8001338:	d00b      	beq.n	8001352 <USBPD_PE_StateMachine_SNK+0x76>
 800133a:	73a8      	strb	r0, [r5, #14]
 800133c:	2100      	movs	r1, #0
 800133e:	9100      	str	r1, [sp, #0]
 8001340:	2300      	movs	r3, #0
 8001342:	f8df 67c0 	ldr.w	r6, [pc, #1984]	@ 8001b04 <.text_16>
 8001346:	7b29      	ldrb	r1, [r5, #12]
 8001348:	f8d6 a000 	ldr.w	sl, [r6]
 800134c:	223e      	movs	r2, #62	@ 0x3e
 800134e:	2004      	movs	r0, #4
 8001350:	47d0      	blx	sl
 8001352:	6928      	ldr	r0, [r5, #16]
 8001354:	f3c0 4080 	ubfx	r0, r0, #18, #1
 8001358:	b130      	cbz	r0, 8001368 <USBPD_PE_StateMachine_SNK+0x8c>
 800135a:	6928      	ldr	r0, [r5, #16]
 800135c:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
 8001360:	6128      	str	r0, [r5, #16]
 8001362:	2164      	movs	r1, #100	@ 0x64
 8001364:	f000 fb50 	bl	8001a08 <.text_12>
 8001368:	4628      	mov	r0, r5
 800136a:	f7ff f973 	bl	8000654 <PE_Get_RxEvent>
 800136e:	2803      	cmp	r0, #3
 8001370:	f88d 000c 	strb.w	r0, [sp, #12]
 8001374:	d103      	bne.n	800137e <USBPD_PE_StateMachine_SNK+0xa2>
 8001376:	2001      	movs	r0, #1
 8001378:	b005      	add	sp, #20
 800137a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800137e:	f88d 400d 	strb.w	r4, [sp, #13]
 8001382:	f248 18f4 	movw	r8, #33268	@ 0x81f4
 8001386:	f105 0978 	add.w	r9, r5, #120	@ 0x78
 800138a:	f248 0b1b 	movw	fp, #32795	@ 0x801b
 800138e:	6868      	ldr	r0, [r5, #4]
 8001390:	6801      	ldr	r1, [r0, #0]
 8001392:	2402      	movs	r4, #2
 8001394:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8001398:	2800      	cmp	r0, #0
 800139a:	f000 80ca 	beq.w	8001532 <USBPD_PE_StateMachine_SNK+0x256>
 800139e:	f105 0628 	add.w	r6, r5, #40	@ 0x28
 80013a2:	78b0      	ldrb	r0, [r6, #2]
 80013a4:	280f      	cmp	r0, #15
 80013a6:	bf18      	it	ne
 80013a8:	2814      	cmpne	r0, #20
 80013aa:	d111      	bne.n	80013d0 <USBPD_PE_StateMachine_SNK+0xf4>
 80013ac:	f000 fb0e 	bl	80019cc <.text_6+0x2>
 80013b0:	d001      	beq.n	80013b6 <USBPD_PE_StateMachine_SNK+0xda>
 80013b2:	f000 fb2c 	bl	8001a0e <.text_13>
 80013b6:	78b2      	ldrb	r2, [r6, #2]
 80013b8:	736a      	strb	r2, [r5, #13]
 80013ba:	2000      	movs	r0, #0
 80013bc:	70b0      	strb	r0, [r6, #2]
 80013be:	7ba9      	ldrb	r1, [r5, #14]
 80013c0:	4291      	cmp	r1, r2
 80013c2:	d005      	beq.n	80013d0 <USBPD_PE_StateMachine_SNK+0xf4>
 80013c4:	73aa      	strb	r2, [r5, #14]
 80013c6:	9000      	str	r0, [sp, #0]
 80013c8:	f000 fb04 	bl	80019d4 <.text_7>
 80013cc:	2004      	movs	r0, #4
 80013ce:	47e0      	blx	ip
 80013d0:	f000 faf7 	bl	80019c2 <.text_5>
 80013d4:	d119      	bne.n	800140a <USBPD_PE_StateMachine_SNK+0x12e>
 80013d6:	6868      	ldr	r0, [r5, #4]
 80013d8:	6801      	ldr	r1, [r0, #0]
 80013da:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 80013de:	88b1      	ldrh	r1, [r6, #4]
 80013e0:	f3c1 1140 	ubfx	r1, r1, #5, #1
 80013e4:	4288      	cmp	r0, r1
 80013e6:	d110      	bne.n	800140a <USBPD_PE_StateMachine_SNK+0x12e>
 80013e8:	f000 fae7 	bl	80019ba <.text_4>
 80013ec:	f000 fb12 	bl	8001a14 <.text_13+0x6>
 80013f0:	7ba9      	ldrb	r1, [r5, #14]
 80013f2:	2092      	movs	r0, #146	@ 0x92
 80013f4:	2992      	cmp	r1, #146	@ 0x92
 80013f6:	7368      	strb	r0, [r5, #13]
 80013f8:	d06c      	beq.n	80014d4 <USBPD_PE_StateMachine_SNK+0x1f8>
 80013fa:	73a8      	strb	r0, [r5, #14]
 80013fc:	2100      	movs	r1, #0
 80013fe:	9100      	str	r1, [sp, #0]
 8001400:	f000 fae8 	bl	80019d4 <.text_7>
 8001404:	2292      	movs	r2, #146	@ 0x92
 8001406:	2004      	movs	r0, #4
 8001408:	47e0      	blx	ip
 800140a:	7b68      	ldrb	r0, [r5, #13]
 800140c:	0001      	movs	r1, r0
 800140e:	f44f 7afa 	mov.w	sl, #500	@ 0x1f4
 8001412:	f24f 071f 	movw	r7, #61471	@ 0xf01f
 8001416:	f000 8090 	beq.w	800153a <USBPD_PE_StateMachine_SNK+0x25e>
 800141a:	2801      	cmp	r0, #1
 800141c:	d057      	beq.n	80014ce <USBPD_PE_StateMachine_SNK+0x1f2>
 800141e:	2803      	cmp	r0, #3
 8001420:	bf18      	it	ne
 8001422:	2804      	cmpne	r0, #4
 8001424:	d045      	beq.n	80014b2 <USBPD_PE_StateMachine_SNK+0x1d6>
 8001426:	280f      	cmp	r0, #15
 8001428:	f000 817c 	beq.w	8001724 <USBPD_PE_StateMachine_SNK+0x448>
 800142c:	2810      	cmp	r0, #16
 800142e:	f000 81f2 	beq.w	8001816 <USBPD_PE_StateMachine_SNK+0x53a>
 8001432:	2811      	cmp	r0, #17
 8001434:	f000 81f8 	beq.w	8001828 <USBPD_PE_StateMachine_SNK+0x54c>
 8001438:	2814      	cmp	r0, #20
 800143a:	f000 8197 	beq.w	800176c <USBPD_PE_StateMachine_SNK+0x490>
 800143e:	2818      	cmp	r0, #24
 8001440:	bf18      	it	ne
 8001442:	2819      	cmpne	r0, #25
 8001444:	d043      	beq.n	80014ce <USBPD_PE_StateMachine_SNK+0x1f2>
 8001446:	281a      	cmp	r0, #26
 8001448:	f000 8220 	beq.w	800188c <USBPD_PE_StateMachine_SNK+0x5b0>
 800144c:	281d      	cmp	r0, #29
 800144e:	bf18      	it	ne
 8001450:	2827      	cmpne	r0, #39	@ 0x27
 8001452:	d03c      	beq.n	80014ce <USBPD_PE_StateMachine_SNK+0x1f2>
 8001454:	2828      	cmp	r0, #40	@ 0x28
 8001456:	bf18      	it	ne
 8001458:	2829      	cmpne	r0, #41	@ 0x29
 800145a:	d038      	beq.n	80014ce <USBPD_PE_StateMachine_SNK+0x1f2>
 800145c:	282a      	cmp	r0, #42	@ 0x2a
 800145e:	f000 8236 	beq.w	80018ce <USBPD_PE_StateMachine_SNK+0x5f2>
 8001462:	282e      	cmp	r0, #46	@ 0x2e
 8001464:	f000 8248 	beq.w	80018f8 <USBPD_PE_StateMachine_SNK+0x61c>
 8001468:	2831      	cmp	r0, #49	@ 0x31
 800146a:	bf18      	it	ne
 800146c:	2833      	cmpne	r0, #51	@ 0x33
 800146e:	d007      	beq.n	8001480 <USBPD_PE_StateMachine_SNK+0x1a4>
 8001470:	2834      	cmp	r0, #52	@ 0x34
 8001472:	bf18      	it	ne
 8001474:	2835      	cmpne	r0, #53	@ 0x35
 8001476:	d003      	beq.n	8001480 <USBPD_PE_StateMachine_SNK+0x1a4>
 8001478:	2836      	cmp	r0, #54	@ 0x36
 800147a:	bf1c      	itt	ne
 800147c:	2837      	cmpne	r0, #55	@ 0x37
 800147e:	2838      	cmpne	r0, #56	@ 0x38
 8001480:	f000 826a 	beq.w	8001958 <USBPD_PE_StateMachine_SNK+0x67c>
 8001484:	2839      	cmp	r0, #57	@ 0x39
 8001486:	f000 8246 	beq.w	8001916 <USBPD_PE_StateMachine_SNK+0x63a>
 800148a:	283e      	cmp	r0, #62	@ 0x3e
 800148c:	d066      	beq.n	800155c <USBPD_PE_StateMachine_SNK+0x280>
 800148e:	2840      	cmp	r0, #64	@ 0x40
 8001490:	f000 818e 	beq.w	80017b0 <USBPD_PE_StateMachine_SNK+0x4d4>
 8001494:	2843      	cmp	r0, #67	@ 0x43
 8001496:	d07a      	beq.n	800158e <USBPD_PE_StateMachine_SNK+0x2b2>
 8001498:	2844      	cmp	r0, #68	@ 0x44
 800149a:	f000 80ae 	beq.w	80015fa <USBPD_PE_StateMachine_SNK+0x31e>
 800149e:	2845      	cmp	r0, #69	@ 0x45
 80014a0:	f000 80bb 	beq.w	800161a <USBPD_PE_StateMachine_SNK+0x33e>
 80014a4:	2846      	cmp	r0, #70	@ 0x46
 80014a6:	f000 80d3 	beq.w	8001650 <USBPD_PE_StateMachine_SNK+0x374>
 80014aa:	2847      	cmp	r0, #71	@ 0x47
 80014ac:	f000 8122 	beq.w	80016f4 <USBPD_PE_StateMachine_SNK+0x418>
 80014b0:	2849      	cmp	r0, #73	@ 0x49
 80014b2:	f000 8213 	beq.w	80018dc <USBPD_PE_StateMachine_SNK+0x600>
 80014b6:	284b      	cmp	r0, #75	@ 0x4b
 80014b8:	d009      	beq.n	80014ce <USBPD_PE_StateMachine_SNK+0x1f2>
 80014ba:	2850      	cmp	r0, #80	@ 0x50
 80014bc:	f000 81cc 	beq.w	8001858 <USBPD_PE_StateMachine_SNK+0x57c>
 80014c0:	2864      	cmp	r0, #100	@ 0x64
 80014c2:	bf18      	it	ne
 80014c4:	2867      	cmpne	r0, #103	@ 0x67
 80014c6:	d002      	beq.n	80014ce <USBPD_PE_StateMachine_SNK+0x1f2>
 80014c8:	2868      	cmp	r0, #104	@ 0x68
 80014ca:	bf18      	it	ne
 80014cc:	2874      	cmpne	r0, #116	@ 0x74
 80014ce:	f000 8247 	beq.w	8001960 <USBPD_PE_StateMachine_SNK+0x684>
 80014d2:	2892      	cmp	r0, #146	@ 0x92
 80014d4:	d039      	beq.n	800154a <USBPD_PE_StateMachine_SNK+0x26e>
 80014d6:	2898      	cmp	r0, #152	@ 0x98
 80014d8:	f000 81e6 	beq.w	80018a8 <USBPD_PE_StateMachine_SNK+0x5cc>
 80014dc:	289b      	cmp	r0, #155	@ 0x9b
 80014de:	f000 814d 	beq.w	800177c <USBPD_PE_StateMachine_SNK+0x4a0>
 80014e2:	7b6a      	ldrb	r2, [r5, #13]
 80014e4:	7ba8      	ldrb	r0, [r5, #14]
 80014e6:	f8df 661c 	ldr.w	r6, [pc, #1564]	@ 8001b04 <.text_16>
 80014ea:	4290      	cmp	r0, r2
 80014ec:	d008      	beq.n	8001500 <USBPD_PE_StateMachine_SNK+0x224>
 80014ee:	73aa      	strb	r2, [r5, #14]
 80014f0:	2100      	movs	r1, #0
 80014f2:	9100      	str	r1, [sp, #0]
 80014f4:	2300      	movs	r3, #0
 80014f6:	7b29      	ldrb	r1, [r5, #12]
 80014f8:	f8d6 a000 	ldr.w	sl, [r6]
 80014fc:	2004      	movs	r0, #4
 80014fe:	47d0      	blx	sl
 8001500:	f000 fa64 	bl	80019cc <.text_6+0x2>
 8001504:	f000 8231 	beq.w	800196a <USBPD_PE_StateMachine_SNK+0x68e>
 8001508:	4628      	mov	r0, r5
 800150a:	f7ff f90b 	bl	8000724 <PE_Check_AMSConflict>
 800150e:	2815      	cmp	r0, #21
 8001510:	d104      	bne.n	800151c <USBPD_PE_StateMachine_SNK+0x240>
 8001512:	f000 fa5b 	bl	80019cc <.text_6+0x2>
 8001516:	d001      	beq.n	800151c <USBPD_PE_StateMachine_SNK+0x240>
 8001518:	f000 fa79 	bl	8001a0e <.text_13>
 800151c:	7b6a      	ldrb	r2, [r5, #13]
 800151e:	7ba8      	ldrb	r0, [r5, #14]
 8001520:	4290      	cmp	r0, r2
 8001522:	d004      	beq.n	800152e <USBPD_PE_StateMachine_SNK+0x252>
 8001524:	73aa      	strb	r2, [r5, #14]
 8001526:	f000 fa5b 	bl	80019e0 <.text_8>
 800152a:	2004      	movs	r0, #4
 800152c:	47a0      	blx	r4
 800152e:	2400      	movs	r4, #0
 8001530:	e237      	b.n	80019a2 <USBPD_PE_StateMachine_SNK+0x6c6>
 8001532:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001536:	4620      	mov	r0, r4
 8001538:	e71e      	b.n	8001378 <USBPD_PE_StateMachine_SNK+0x9c>
 800153a:	f000 fa57 	bl	80019ec <.text_9>
 800153e:	215f      	movs	r1, #95	@ 0x5f
 8001540:	f000 fa62 	bl	8001a08 <.text_12>
 8001544:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001548:	e7cb      	b.n	80014e2 <USBPD_PE_StateMachine_SNK+0x206>
 800154a:	f000 fa4f 	bl	80019ec <.text_9>
 800154e:	68a8      	ldr	r0, [r5, #8]
 8001550:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8001552:	2900      	cmp	r1, #0
 8001554:	d0f6      	beq.n	8001544 <USBPD_PE_StateMachine_SNK+0x268>
 8001556:	7b28      	ldrb	r0, [r5, #12]
 8001558:	4788      	blx	r1
 800155a:	e7f3      	b.n	8001544 <USBPD_PE_StateMachine_SNK+0x268>
 800155c:	6868      	ldr	r0, [r5, #4]
 800155e:	6801      	ldr	r1, [r0, #0]
 8001560:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8001564:	2800      	cmp	r0, #0
 8001566:	d0bc      	beq.n	80014e2 <USBPD_PE_StateMachine_SNK+0x206>
 8001568:	f001 0203 	and.w	r2, r1, #3
 800156c:	6868      	ldr	r0, [r5, #4]
 800156e:	2a01      	cmp	r2, #1
 8001570:	bf0c      	ite	eq
 8001572:	2200      	moveq	r2, #0
 8001574:	2220      	movne	r2, #32
 8001576:	f021 0120 	bic.w	r1, r1, #32
 800157a:	4311      	orrs	r1, r2
 800157c:	6001      	str	r1, [r0, #0]
 800157e:	2001      	movs	r0, #1
 8001580:	7628      	strb	r0, [r5, #24]
 8001582:	f8a5 801a 	strh.w	r8, [r5, #26]
 8001586:	4654      	mov	r4, sl
 8001588:	2143      	movs	r1, #67	@ 0x43
 800158a:	7369      	strb	r1, [r5, #13]
 800158c:	e7a9      	b.n	80014e2 <USBPD_PE_StateMachine_SNK+0x206>
 800158e:	f000 fa18 	bl	80019c2 <.text_5>
 8001592:	d131      	bne.n	80015f8 <USBPD_PE_StateMachine_SNK+0x31c>
 8001594:	88b1      	ldrh	r1, [r6, #4]
 8001596:	0bc8      	lsrs	r0, r1, #15
 8001598:	d12a      	bne.n	80015f0 <USBPD_PE_StateMachine_SNK+0x314>
 800159a:	f3c1 3002 	ubfx	r0, r1, #12, #3
 800159e:	b338      	cbz	r0, 80015f0 <USBPD_PE_StateMachine_SNK+0x314>
 80015a0:	4608      	mov	r0, r1
 80015a2:	f000 011f 	and.w	r1, r0, #31
 80015a6:	2901      	cmp	r1, #1
 80015a8:	d122      	bne.n	80015f0 <USBPD_PE_StateMachine_SNK+0x314>
 80015aa:	2200      	movs	r2, #0
 80015ac:	f889 2004 	strb.w	r2, [r9, #4]
 80015b0:	6929      	ldr	r1, [r5, #16]
 80015b2:	f041 0104 	orr.w	r1, r1, #4
 80015b6:	6129      	str	r1, [r5, #16]
 80015b8:	f3c0 1181 	ubfx	r1, r0, #6, #2
 80015bc:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80015c0:	f7ff f95b 	bl	800087a <PE_ExtRevisionInteroperability>
 80015c4:	88b0      	ldrh	r0, [r6, #4]
 80015c6:	f3c0 3302 	ubfx	r3, r0, #12, #3
 80015ca:	68b0      	ldr	r0, [r6, #8]
 80015cc:	68ae      	ldr	r6, [r5, #8]
 80015ce:	f8d6 a018 	ldr.w	sl, [r6, #24]
 80015d2:	1c82      	adds	r2, r0, #2
 80015d4:	7b28      	ldrb	r0, [r5, #12]
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	2104      	movs	r1, #4
 80015da:	47d0      	blx	sl
 80015dc:	2001      	movs	r0, #1
 80015de:	7628      	strb	r0, [r5, #24]
 80015e0:	f000 fa04 	bl	80019ec <.text_9>
 80015e4:	2044      	movs	r0, #68	@ 0x44
 80015e6:	7368      	strb	r0, [r5, #13]
 80015e8:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80015ec:	2914      	cmp	r1, #20
 80015ee:	d003      	beq.n	80015f8 <USBPD_PE_StateMachine_SNK+0x31c>
 80015f0:	f000 f9e3 	bl	80019ba <.text_4>
 80015f4:	f000 fa0e 	bl	8001a14 <.text_13+0x6>
 80015f8:	e090      	b.n	800171c <USBPD_PE_StateMachine_SNK+0x440>
 80015fa:	68ab      	ldr	r3, [r5, #8]
 80015fc:	7b28      	ldrb	r0, [r5, #12]
 80015fe:	6a1c      	ldr	r4, [r3, #32]
 8001600:	466a      	mov	r2, sp
 8001602:	f105 0114 	add.w	r1, r5, #20
 8001606:	47a0      	blx	r4
 8001608:	9800      	ldr	r0, [sp, #0]
 800160a:	6929      	ldr	r1, [r5, #16]
 800160c:	f360 01c4 	bfi	r1, r0, #3, #2
 8001610:	6129      	str	r1, [r5, #16]
 8001612:	2045      	movs	r0, #69	@ 0x45
 8001614:	7368      	strb	r0, [r5, #13]
 8001616:	2400      	movs	r4, #0
 8001618:	e763      	b.n	80014e2 <USBPD_PE_StateMachine_SNK+0x206>
 800161a:	6928      	ldr	r0, [r5, #16]
 800161c:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8001620:	b100      	cbz	r0, 8001624 <USBPD_PE_StateMachine_SNK+0x348>
 8001622:	2002      	movs	r0, #2
 8001624:	9002      	str	r0, [sp, #8]
 8001626:	2101      	movs	r1, #1
 8001628:	2046      	movs	r0, #70	@ 0x46
 800162a:	9001      	str	r0, [sp, #4]
 800162c:	9100      	str	r1, [sp, #0]
 800162e:	f105 0314 	add.w	r3, r5, #20
 8001632:	2202      	movs	r2, #2
 8001634:	2100      	movs	r1, #0
 8001636:	4628      	mov	r0, r5
 8001638:	f7ff fbbb 	bl	8000db2 <PE_Send_DataMessage>
 800163c:	2800      	cmp	r0, #0
 800163e:	d106      	bne.n	800164e <USBPD_PE_StateMachine_SNK+0x372>
 8001640:	6928      	ldr	r0, [r5, #16]
 8001642:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 8001646:	6128      	str	r0, [r5, #16]
 8001648:	f8a5 b01a 	strh.w	fp, [r5, #26]
 800164c:	241b      	movs	r4, #27
 800164e:	e748      	b.n	80014e2 <USBPD_PE_StateMachine_SNK+0x206>
 8001650:	f000 f9b7 	bl	80019c2 <.text_5>
 8001654:	bf04      	itt	eq
 8001656:	88b0      	ldrheq	r0, [r6, #4]
 8001658:	f410 4f70 	tsteq.w	r0, #61440	@ 0xf000
 800165c:	d144      	bne.n	80016e8 <USBPD_PE_StateMachine_SNK+0x40c>
 800165e:	f000 001f 	and.w	r0, r0, #31
 8001662:	2802      	cmp	r0, #2
 8001664:	bf18      	it	ne
 8001666:	2803      	cmpne	r0, #3
 8001668:	d019      	beq.n	800169e <USBPD_PE_StateMachine_SNK+0x3c2>
 800166a:	2804      	cmp	r0, #4
 800166c:	bf18      	it	ne
 800166e:	280c      	cmpne	r0, #12
 8001670:	d126      	bne.n	80016c0 <USBPD_PE_StateMachine_SNK+0x3e4>
 8001672:	6868      	ldr	r0, [r5, #4]
 8001674:	6801      	ldr	r1, [r0, #0]
 8001676:	f3c1 2002 	ubfx	r0, r1, #8, #3
 800167a:	2803      	cmp	r0, #3
 800167c:	d005      	beq.n	800168a <USBPD_PE_StateMachine_SNK+0x3ae>
 800167e:	2043      	movs	r0, #67	@ 0x43
 8001680:	7368      	strb	r0, [r5, #13]
 8001682:	f8a5 801a 	strh.w	r8, [r5, #26]
 8001686:	4654      	mov	r4, sl
 8001688:	e016      	b.n	80016b8 <USBPD_PE_StateMachine_SNK+0x3dc>
 800168a:	7930      	ldrb	r0, [r6, #4]
 800168c:	f000 001f 	and.w	r0, r0, #31
 8001690:	280c      	cmp	r0, #12
 8001692:	bf0c      	ite	eq
 8001694:	2049      	moveq	r0, #73	@ 0x49
 8001696:	2003      	movne	r0, #3
 8001698:	7368      	strb	r0, [r5, #13]
 800169a:	2400      	movs	r4, #0
 800169c:	e00c      	b.n	80016b8 <USBPD_PE_StateMachine_SNK+0x3dc>
 800169e:	f8a5 801a 	strh.w	r8, [r5, #26]
 80016a2:	2104      	movs	r1, #4
 80016a4:	4628      	mov	r0, r5
 80016a6:	f7ff faf2 	bl	8000c8e <PE_SetPowerNegotiation>
 80016aa:	2047      	movs	r0, #71	@ 0x47
 80016ac:	7368      	strb	r0, [r5, #13]
 80016ae:	4654      	mov	r4, sl
 80016b0:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80016b4:	2914      	cmp	r1, #20
 80016b6:	d003      	beq.n	80016c0 <USBPD_PE_StateMachine_SNK+0x3e4>
 80016b8:	f000 f97f 	bl	80019ba <.text_4>
 80016bc:	f000 f9aa 	bl	8001a14 <.text_13+0x6>
 80016c0:	7930      	ldrb	r0, [r6, #4]
 80016c2:	f000 001f 	and.w	r0, r0, #31
 80016c6:	2802      	cmp	r0, #2
 80016c8:	d009      	beq.n	80016de <USBPD_PE_StateMachine_SNK+0x402>
 80016ca:	2803      	cmp	r0, #3
 80016cc:	d009      	beq.n	80016e2 <USBPD_PE_StateMachine_SNK+0x406>
 80016ce:	2804      	cmp	r0, #4
 80016d0:	d003      	beq.n	80016da <USBPD_PE_StateMachine_SNK+0x3fe>
 80016d2:	280c      	cmp	r0, #12
 80016d4:	d108      	bne.n	80016e8 <USBPD_PE_StateMachine_SNK+0x40c>
 80016d6:	2103      	movs	r1, #3
 80016d8:	e004      	b.n	80016e4 <USBPD_PE_StateMachine_SNK+0x408>
 80016da:	2102      	movs	r1, #2
 80016dc:	e002      	b.n	80016e4 <USBPD_PE_StateMachine_SNK+0x408>
 80016de:	2104      	movs	r1, #4
 80016e0:	e000      	b.n	80016e4 <USBPD_PE_StateMachine_SNK+0x408>
 80016e2:	2101      	movs	r1, #1
 80016e4:	f000 f990 	bl	8001a08 <.text_12>
 80016e8:	f000 f963 	bl	80019b2 <.text_3>
 80016ec:	d1af      	bne.n	800164e <USBPD_PE_StateMachine_SNK+0x372>
 80016ee:	210f      	movs	r1, #15
 80016f0:	7369      	strb	r1, [r5, #13]
 80016f2:	e790      	b.n	8001616 <USBPD_PE_StateMachine_SNK+0x33a>
 80016f4:	f000 f965 	bl	80019c2 <.text_5>
 80016f8:	bf02      	ittt	eq
 80016fa:	88b0      	ldrheq	r0, [r6, #4]
 80016fc:	4007      	andeq	r7, r0
 80016fe:	2f06      	cmpeq	r7, #6
 8001700:	d10c      	bne.n	800171c <USBPD_PE_StateMachine_SNK+0x440>
 8001702:	f000 f984 	bl	8001a0e <.text_13>
 8001706:	2103      	movs	r1, #3
 8001708:	4628      	mov	r0, r5
 800170a:	f7ff fac0 	bl	8000c8e <PE_SetPowerNegotiation>
 800170e:	7b28      	ldrb	r0, [r5, #12]
 8001710:	2110      	movs	r1, #16
 8001712:	f7fe feb6 	bl	8000482 <USBPD_PE_Notification>
 8001716:	2003      	movs	r0, #3
 8001718:	7368      	strb	r0, [r5, #13]
 800171a:	2400      	movs	r4, #0
 800171c:	f000 f949 	bl	80019b2 <.text_3>
 8001720:	d195      	bne.n	800164e <USBPD_PE_StateMachine_SNK+0x372>
 8001722:	e7e4      	b.n	80016ee <USBPD_PE_StateMachine_SNK+0x412>
 8001724:	f000 f962 	bl	80019ec <.text_9>
 8001728:	4628      	mov	r0, r5
 800172a:	2101      	movs	r1, #1
 800172c:	f7ff faaf 	bl	8000c8e <PE_SetPowerNegotiation>
 8001730:	f899 0004 	ldrb.w	r0, [r9, #4]
 8001734:	2803      	cmp	r0, #3
 8001736:	d30a      	bcc.n	800174e <USBPD_PE_StateMachine_SNK+0x472>
 8001738:	6928      	ldr	r0, [r5, #16]
 800173a:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800173e:	2800      	cmp	r0, #0
 8001740:	bf1e      	ittt	ne
 8001742:	68a9      	ldrne	r1, [r5, #8]
 8001744:	6b48      	ldrne	r0, [r1, #52]	@ 0x34
 8001746:	2800      	cmpne	r0, #0
 8001748:	d15f      	bne.n	800180a <USBPD_PE_StateMachine_SNK+0x52e>
 800174a:	2100      	movs	r1, #0
 800174c:	e71d      	b.n	800158a <USBPD_PE_StateMachine_SNK+0x2ae>
 800174e:	1c40      	adds	r0, r0, #1
 8001750:	f889 0004 	strb.w	r0, [r9, #4]
 8001754:	2105      	movs	r1, #5
 8001756:	4628      	mov	r0, r5
 8001758:	f7fe ff5c 	bl	8000614 <PE_Send_RESET>
 800175c:	f248 30e8 	movw	r0, #33768	@ 0x83e8
 8001760:	8368      	strh	r0, [r5, #26]
 8001762:	2201      	movs	r2, #1
 8001764:	f000 f948 	bl	80019f8 <.text_10>
 8001768:	209b      	movs	r0, #155	@ 0x9b
 800176a:	e753      	b.n	8001614 <USBPD_PE_StateMachine_SNK+0x338>
 800176c:	2200      	movs	r2, #0
 800176e:	f000 f943 	bl	80019f8 <.text_10>
 8001772:	f248 30e8 	movw	r0, #33768	@ 0x83e8
 8001776:	8368      	strh	r0, [r5, #26]
 8001778:	219b      	movs	r1, #155	@ 0x9b
 800177a:	e7b9      	b.n	80016f0 <USBPD_PE_StateMachine_SNK+0x414>
 800177c:	68aa      	ldr	r2, [r5, #8]
 800177e:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8001782:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8001784:	2100      	movs	r1, #0
 8001786:	4798      	blx	r3
 8001788:	2801      	cmp	r0, #1
 800178a:	d10d      	bne.n	80017a8 <USBPD_PE_StateMachine_SNK+0x4cc>
 800178c:	f648 00e3 	movw	r0, #35043	@ 0x88e3
 8001790:	8368      	strh	r0, [r5, #26]
 8001792:	2169      	movs	r1, #105	@ 0x69
 8001794:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8001798:	f7fe fe73 	bl	8000482 <USBPD_PE_Notification>
 800179c:	2040      	movs	r0, #64	@ 0x40
 800179e:	7368      	strb	r0, [r5, #13]
 80017a0:	2113      	movs	r1, #19
 80017a2:	f000 f931 	bl	8001a08 <.text_12>
 80017a6:	2400      	movs	r4, #0
 80017a8:	f000 f903 	bl	80019b2 <.text_3>
 80017ac:	d132      	bne.n	8001814 <USBPD_PE_StateMachine_SNK+0x538>
 80017ae:	e01b      	b.n	80017e8 <USBPD_PE_StateMachine_SNK+0x50c>
 80017b0:	68aa      	ldr	r2, [r5, #8]
 80017b2:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80017b6:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80017b8:	2101      	movs	r1, #1
 80017ba:	4798      	blx	r3
 80017bc:	2801      	cmp	r0, #1
 80017be:	d110      	bne.n	80017e2 <USBPD_PE_StateMachine_SNK+0x506>
 80017c0:	4628      	mov	r0, r5
 80017c2:	f7ff f812 	bl	80007ea <PE_Reset_HardReset>
 80017c6:	2205      	movs	r2, #5
 80017c8:	2100      	movs	r1, #0
 80017ca:	f000 f916 	bl	80019fa <.text_10+0x2>
 80017ce:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80017d2:	2168      	movs	r1, #104	@ 0x68
 80017d4:	f7fe fe55 	bl	8000482 <USBPD_PE_Notification>
 80017d8:	f8a5 801a 	strh.w	r8, [r5, #26]
 80017dc:	2043      	movs	r0, #67	@ 0x43
 80017de:	4654      	mov	r4, sl
 80017e0:	7368      	strb	r0, [r5, #13]
 80017e2:	f000 f8e6 	bl	80019b2 <.text_3>
 80017e6:	d115      	bne.n	8001814 <USBPD_PE_StateMachine_SNK+0x538>
 80017e8:	2206      	movs	r2, #6
 80017ea:	2100      	movs	r1, #0
 80017ec:	f000 f905 	bl	80019fa <.text_10+0x2>
 80017f0:	f899 0004 	ldrb.w	r0, [r9, #4]
 80017f4:	2803      	cmp	r0, #3
 80017f6:	d348      	bcc.n	800188a <USBPD_PE_StateMachine_SNK+0x5ae>
 80017f8:	6928      	ldr	r0, [r5, #16]
 80017fa:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80017fe:	2800      	cmp	r0, #0
 8001800:	bf1e      	ittt	ne
 8001802:	68a9      	ldrne	r1, [r5, #8]
 8001804:	6b48      	ldrne	r0, [r1, #52]	@ 0x34
 8001806:	2800      	cmpne	r0, #0
 8001808:	d001      	beq.n	800180e <USBPD_PE_StateMachine_SNK+0x532>
 800180a:	2192      	movs	r1, #146	@ 0x92
 800180c:	e770      	b.n	80016f0 <USBPD_PE_StateMachine_SNK+0x414>
 800180e:	2000      	movs	r0, #0
 8001810:	7368      	strb	r0, [r5, #13]
 8001812:	4604      	mov	r4, r0
 8001814:	e665      	b.n	80014e2 <USBPD_PE_StateMachine_SNK+0x206>
 8001816:	2000      	movs	r0, #0
 8001818:	9000      	str	r0, [sp, #0]
 800181a:	2303      	movs	r3, #3
 800181c:	2203      	movs	r2, #3
 800181e:	f000 f8ef 	bl	8001a00 <.text_11>
 8001822:	2800      	cmp	r0, #0
 8001824:	d1f6      	bne.n	8001814 <USBPD_PE_StateMachine_SNK+0x538>
 8001826:	e6aa      	b.n	800157e <USBPD_PE_StateMachine_SNK+0x2a2>
 8001828:	6868      	ldr	r0, [r5, #4]
 800182a:	6801      	ldr	r1, [r0, #0]
 800182c:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8001830:	2804      	cmp	r0, #4
 8001832:	d02a      	beq.n	800188a <USBPD_PE_StateMachine_SNK+0x5ae>
 8001834:	2000      	movs	r0, #0
 8001836:	9000      	str	r0, [sp, #0]
 8001838:	2350      	movs	r3, #80	@ 0x50
 800183a:	7871      	ldrb	r1, [r6, #1]
 800183c:	220d      	movs	r2, #13
 800183e:	f000 f8e0 	bl	8001a02 <.text_11+0x2>
 8001842:	2800      	cmp	r0, #0
 8001844:	d107      	bne.n	8001856 <USBPD_PE_StateMachine_SNK+0x57a>
 8001846:	2003      	movs	r0, #3
 8001848:	7628      	strb	r0, [r5, #24]
 800184a:	f8a5 b01a 	strh.w	fp, [r5, #26]
 800184e:	241b      	movs	r4, #27
 8001850:	2130      	movs	r1, #48	@ 0x30
 8001852:	f000 f8d9 	bl	8001a08 <.text_12>
 8001856:	e644      	b.n	80014e2 <USBPD_PE_StateMachine_SNK+0x206>
 8001858:	f000 f8b8 	bl	80019cc <.text_6+0x2>
 800185c:	d012      	beq.n	8001884 <USBPD_PE_StateMachine_SNK+0x5a8>
 800185e:	7831      	ldrb	r1, [r6, #0]
 8001860:	7870      	ldrb	r0, [r6, #1]
 8001862:	4281      	cmp	r1, r0
 8001864:	bf02      	ittt	eq
 8001866:	88b1      	ldrheq	r1, [r6, #4]
 8001868:	400f      	andeq	r7, r1
 800186a:	2f03      	cmpeq	r7, #3
 800186c:	d10a      	bne.n	8001884 <USBPD_PE_StateMachine_SNK+0x5a8>
 800186e:	2001      	movs	r0, #1
 8001870:	7628      	strb	r0, [r5, #24]
 8001872:	f8a5 801a 	strh.w	r8, [r5, #26]
 8001876:	2143      	movs	r1, #67	@ 0x43
 8001878:	7369      	strb	r1, [r5, #13]
 800187a:	f000 f89e 	bl	80019ba <.text_4>
 800187e:	4654      	mov	r4, sl
 8001880:	f000 f8c8 	bl	8001a14 <.text_13+0x6>
 8001884:	f000 f895 	bl	80019b2 <.text_3>
 8001888:	d1e5      	bne.n	8001856 <USBPD_PE_StateMachine_SNK+0x57a>
 800188a:	e730      	b.n	80016ee <USBPD_PE_StateMachine_SNK+0x412>
 800188c:	9400      	str	r4, [sp, #0]
 800188e:	2343      	movs	r3, #67	@ 0x43
 8001890:	2207      	movs	r2, #7
 8001892:	f000 f8b5 	bl	8001a00 <.text_11>
 8001896:	2800      	cmp	r0, #0
 8001898:	d118      	bne.n	80018cc <USBPD_PE_StateMachine_SNK+0x5f0>
 800189a:	2006      	movs	r0, #6
 800189c:	7628      	strb	r0, [r5, #24]
 800189e:	f8a5 b01a 	strh.w	fp, [r5, #26]
 80018a2:	241b      	movs	r4, #27
 80018a4:	210b      	movs	r1, #11
 80018a6:	e7d4      	b.n	8001852 <USBPD_PE_StateMachine_SNK+0x576>
 80018a8:	f000 f88b 	bl	80019c2 <.text_5>
 80018ac:	bf02      	ittt	eq
 80018ae:	88b0      	ldrheq	r0, [r6, #4]
 80018b0:	4007      	andeq	r7, r0
 80018b2:	2f06      	cmpeq	r7, #6
 80018b4:	d10a      	bne.n	80018cc <USBPD_PE_StateMachine_SNK+0x5f0>
 80018b6:	7b28      	ldrb	r0, [r5, #12]
 80018b8:	212c      	movs	r1, #44	@ 0x2c
 80018ba:	f7fe fde2 	bl	8000482 <USBPD_PE_Notification>
 80018be:	2003      	movs	r0, #3
 80018c0:	7368      	strb	r0, [r5, #13]
 80018c2:	f000 f882 	bl	80019ca <.text_6>
 80018c6:	d001      	beq.n	80018cc <USBPD_PE_StateMachine_SNK+0x5f0>
 80018c8:	f000 f8a1 	bl	8001a0e <.text_13>
 80018cc:	e609      	b.n	80014e2 <USBPD_PE_StateMachine_SNK+0x206>
 80018ce:	2000      	movs	r0, #0
 80018d0:	9000      	str	r0, [sp, #0]
 80018d2:	2303      	movs	r3, #3
 80018d4:	2204      	movs	r2, #4
 80018d6:	f000 f893 	bl	8001a00 <.text_11>
 80018da:	e602      	b.n	80014e2 <USBPD_PE_StateMachine_SNK+0x206>
 80018dc:	2804      	cmp	r0, #4
 80018de:	d006      	beq.n	80018ee <USBPD_PE_StateMachine_SNK+0x612>
 80018e0:	2000      	movs	r0, #0
 80018e2:	7628      	strb	r0, [r5, #24]
 80018e4:	2104      	movs	r1, #4
 80018e6:	7369      	strb	r1, [r5, #13]
 80018e8:	2120      	movs	r1, #32
 80018ea:	f000 f88d 	bl	8001a08 <.text_12>
 80018ee:	a903      	add	r1, sp, #12
 80018f0:	4628      	mov	r0, r5
 80018f2:	f000 f892 	bl	8001a1a <PE_StateMachine_SNK_ReadyWait>
 80018f6:	e78c      	b.n	8001812 <USBPD_PE_StateMachine_SNK+0x536>
 80018f8:	9400      	str	r4, [sp, #0]
 80018fa:	2339      	movs	r3, #57	@ 0x39
 80018fc:	f899 2000 	ldrb.w	r2, [r9]
 8001900:	f000 f87e 	bl	8001a00 <.text_11>
 8001904:	2800      	cmp	r0, #0
 8001906:	d1e8      	bne.n	80018da <USBPD_PE_StateMachine_SNK+0x5fe>
 8001908:	f899 0001 	ldrb.w	r0, [r9, #1]
 800190c:	7628      	strb	r0, [r5, #24]
 800190e:	2144      	movs	r1, #68	@ 0x44
 8001910:	f000 f87a 	bl	8001a08 <.text_12>
 8001914:	e698      	b.n	8001648 <USBPD_PE_StateMachine_SNK+0x36c>
 8001916:	f000 f859 	bl	80019cc <.text_6+0x2>
 800191a:	d018      	beq.n	800194e <USBPD_PE_StateMachine_SNK+0x672>
 800191c:	88b0      	ldrh	r0, [r6, #4]
 800191e:	0bc0      	lsrs	r0, r0, #15
 8001920:	d009      	beq.n	8001936 <USBPD_PE_StateMachine_SNK+0x65a>
 8001922:	4628      	mov	r0, r5
 8001924:	f7ff fa81 	bl	8000e2a <PE_Check_ExtendedMessage>
 8001928:	f000 f850 	bl	80019cc <.text_6+0x2>
 800192c:	d001      	beq.n	8001932 <USBPD_PE_StateMachine_SNK+0x656>
 800192e:	f000 f86e 	bl	8001a0e <.text_13>
 8001932:	2000      	movs	r0, #0
 8001934:	8368      	strh	r0, [r5, #26]
 8001936:	88b0      	ldrh	r0, [r6, #4]
 8001938:	4007      	ands	r7, r0
 800193a:	2f10      	cmp	r7, #16
 800193c:	d107      	bne.n	800194e <USBPD_PE_StateMachine_SNK+0x672>
 800193e:	2103      	movs	r1, #3
 8001940:	7369      	strb	r1, [r5, #13]
 8001942:	f000 f842 	bl	80019ca <.text_6>
 8001946:	d001      	beq.n	800194c <USBPD_PE_StateMachine_SNK+0x670>
 8001948:	f000 f861 	bl	8001a0e <.text_13>
 800194c:	836c      	strh	r4, [r5, #26]
 800194e:	f000 f830 	bl	80019b2 <.text_3>
 8001952:	d1c2      	bne.n	80018da <USBPD_PE_StateMachine_SNK+0x5fe>
 8001954:	2103      	movs	r1, #3
 8001956:	e6cb      	b.n	80016f0 <USBPD_PE_StateMachine_SNK+0x414>
 8001958:	4628      	mov	r0, r5
 800195a:	f7ff fae8 	bl	8000f2e <PE_SubStateMachine_ExtendedMessages>
 800195e:	e758      	b.n	8001812 <USBPD_PE_StateMachine_SNK+0x536>
 8001960:	a903      	add	r1, sp, #12
 8001962:	4628      	mov	r0, r5
 8001964:	f7ff f839 	bl	80009da <PE_SubStateMachine_Generic>
 8001968:	e753      	b.n	8001812 <USBPD_PE_StateMachine_SNK+0x536>
 800196a:	6928      	ldr	r0, [r5, #16]
 800196c:	f3c0 3040 	ubfx	r0, r0, #13, #1
 8001970:	b1b8      	cbz	r0, 80019a2 <USBPD_PE_StateMachine_SNK+0x6c6>
 8001972:	6928      	ldr	r0, [r5, #16]
 8001974:	f3c0 3080 	ubfx	r0, r0, #14, #1
 8001978:	b138      	cbz	r0, 800198a <USBPD_PE_StateMachine_SNK+0x6ae>
 800197a:	7b28      	ldrb	r0, [r5, #12]
 800197c:	215b      	movs	r1, #91	@ 0x5b
 800197e:	f7fe fd80 	bl	8000482 <USBPD_PE_Notification>
 8001982:	6928      	ldr	r0, [r5, #16]
 8001984:	f420 4080 	bic.w	r0, r0, #16384	@ 0x4000
 8001988:	6128      	str	r0, [r5, #16]
 800198a:	2003      	movs	r0, #3
 800198c:	7ba9      	ldrb	r1, [r5, #14]
 800198e:	7368      	strb	r0, [r5, #13]
 8001990:	2903      	cmp	r1, #3
 8001992:	d005      	beq.n	80019a0 <USBPD_PE_StateMachine_SNK+0x6c4>
 8001994:	73a8      	strb	r0, [r5, #14]
 8001996:	f000 f823 	bl	80019e0 <.text_8>
 800199a:	2203      	movs	r2, #3
 800199c:	2004      	movs	r0, #4
 800199e:	47a0      	blx	r4
 80019a0:	2401      	movs	r4, #1
 80019a2:	6928      	ldr	r0, [r5, #16]
 80019a4:	f420 5000 	bic.w	r0, r0, #8192	@ 0x2000
 80019a8:	2c00      	cmp	r4, #0
 80019aa:	6128      	str	r0, [r5, #16]
 80019ac:	f43f acef 	beq.w	800138e <USBPD_PE_StateMachine_SNK+0xb2>
 80019b0:	e5c1      	b.n	8001536 <USBPD_PE_StateMachine_SNK+0x25a>

080019b2 <.text_3>:
 80019b2:	8b68      	ldrh	r0, [r5, #26]
 80019b4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80019b8:	4770      	bx	lr

080019ba <.text_4>:
 80019ba:	2014      	movs	r0, #20
 80019bc:	f88d 000c 	strb.w	r0, [sp, #12]
 80019c0:	4770      	bx	lr

080019c2 <.text_5>:
 80019c2:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80019c6:	2811      	cmp	r0, #17
 80019c8:	4770      	bx	lr

080019ca <.text_6>:
 80019ca:	2400      	movs	r4, #0
 80019cc:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80019d0:	2814      	cmp	r0, #20
 80019d2:	4770      	bx	lr

080019d4 <.text_7>:
 80019d4:	2300      	movs	r3, #0
 80019d6:	4f4b      	ldr	r7, [pc, #300]	@ (8001b04 <.text_16>)
 80019d8:	7b29      	ldrb	r1, [r5, #12]
 80019da:	f8d7 c000 	ldr.w	ip, [r7]
 80019de:	4770      	bx	lr

080019e0 <.text_8>:
 80019e0:	2100      	movs	r1, #0
 80019e2:	9100      	str	r1, [sp, #0]
 80019e4:	2300      	movs	r3, #0
 80019e6:	7b29      	ldrb	r1, [r5, #12]
 80019e8:	6834      	ldr	r4, [r6, #0]
 80019ea:	4770      	bx	lr

080019ec <.text_9>:
 80019ec:	6868      	ldr	r0, [r5, #4]
 80019ee:	6801      	ldr	r1, [r0, #0]
 80019f0:	f021 0110 	bic.w	r1, r1, #16
 80019f4:	6001      	str	r1, [r0, #0]
 80019f6:	4770      	bx	lr

080019f8 <.text_10>:
 80019f8:	2101      	movs	r1, #1
 80019fa:	4628      	mov	r0, r5
 80019fc:	f7ff b940 	b.w	8000c80 <PE_CallHardResetCallback>

08001a00 <.text_11>:
 8001a00:	2100      	movs	r1, #0
 8001a02:	4628      	mov	r0, r5
 8001a04:	f7ff b9a8 	b.w	8000d58 <PE_Send_CtrlMessage>

08001a08 <.text_12>:
 8001a08:	7b28      	ldrb	r0, [r5, #12]
 8001a0a:	f7fe bd3a 	b.w	8000482 <USBPD_PE_Notification>

08001a0e <.text_13>:
 8001a0e:	2114      	movs	r1, #20
 8001a10:	f88d 100c 	strb.w	r1, [sp, #12]
 8001a14:	4628      	mov	r0, r5
 8001a16:	f7fe be52 	b.w	80006be <PE_Clear_RxEvent>

08001a1a <PE_StateMachine_SNK_ReadyWait>:
 8001a1a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8001a1c:	460e      	mov	r6, r1
 8001a1e:	4604      	mov	r4, r0
 8001a20:	7830      	ldrb	r0, [r6, #0]
 8001a22:	2502      	movs	r5, #2
 8001a24:	2814      	cmp	r0, #20
 8001a26:	d00b      	beq.n	8001a40 <PE_StateMachine_SNK_ReadyWait+0x26>
 8001a28:	4620      	mov	r0, r4
 8001a2a:	f7ff fb54 	bl	80010d6 <PE_ManageRXEvent>
 8001a2e:	7830      	ldrb	r0, [r6, #0]
 8001a30:	2814      	cmp	r0, #20
 8001a32:	d062      	beq.n	8001afa <PE_StateMachine_SNK_ReadyWait+0xe0>
 8001a34:	2114      	movs	r1, #20
 8001a36:	7031      	strb	r1, [r6, #0]
 8001a38:	4620      	mov	r0, r4
 8001a3a:	f7fe fe40 	bl	80006be <PE_Clear_RxEvent>
 8001a3e:	e05c      	b.n	8001afa <PE_StateMachine_SNK_ReadyWait+0xe0>
 8001a40:	6920      	ldr	r0, [r4, #16]
 8001a42:	0cc0      	lsrs	r0, r0, #19
 8001a44:	d029      	beq.n	8001a9a <PE_StateMachine_SNK_ReadyWait+0x80>
 8001a46:	8ba0      	ldrh	r0, [r4, #28]
 8001a48:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8001a4c:	d110      	bne.n	8001a70 <PE_StateMachine_SNK_ReadyWait+0x56>
 8001a4e:	210f      	movs	r1, #15
 8001a50:	7361      	strb	r1, [r4, #13]
 8001a52:	2000      	movs	r0, #0
 8001a54:	4d2b      	ldr	r5, [pc, #172]	@ (8001b04 <.text_16>)
 8001a56:	682e      	ldr	r6, [r5, #0]
 8001a58:	9000      	str	r0, [sp, #0]
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	7b21      	ldrb	r1, [r4, #12]
 8001a5e:	2270      	movs	r2, #112	@ 0x70
 8001a60:	2009      	movs	r0, #9
 8001a62:	47b0      	blx	r6
 8001a64:	f894 007c 	ldrb.w	r0, [r4, #124]	@ 0x7c
 8001a68:	1c40      	adds	r0, r0, #1
 8001a6a:	f884 007c 	strb.w	r0, [r4, #124]	@ 0x7c
 8001a6e:	e03f      	b.n	8001af0 <PE_StateMachine_SNK_ReadyWait+0xd6>
 8001a70:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8001a72:	6922      	ldr	r2, [r4, #16]
 8001a74:	f3c1 2142 	ubfx	r1, r1, #9, #3
 8001a78:	2033      	movs	r0, #51	@ 0x33
 8001a7a:	eb01 41d2 	add.w	r1, r1, r2, lsr #19
 8001a7e:	fb11 f100 	smulbb	r1, r1, r0
 8001a82:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8001a86:	83a1      	strh	r1, [r4, #28]
 8001a88:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8001a8a:	6922      	ldr	r2, [r4, #16]
 8001a8c:	f3c1 2142 	ubfx	r1, r1, #9, #3
 8001a90:	eb01 45d2 	add.w	r5, r1, r2, lsr #19
 8001a94:	4345      	muls	r5, r0
 8001a96:	b2ad      	uxth	r5, r5
 8001a98:	e02f      	b.n	8001afa <PE_StateMachine_SNK_ReadyWait+0xe0>
 8001a9a:	7b20      	ldrb	r0, [r4, #12]
 8001a9c:	f7fe fe33 	bl	8000706 <PE_PRL_Control_RxEvent>
 8001aa0:	f104 0629 	add.w	r6, r4, #41	@ 0x29
 8001aa4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8001aa8:	bb20      	cbnz	r0, 8001af4 <PE_StateMachine_SNK_ReadyWait+0xda>
 8001aaa:	7870      	ldrb	r0, [r6, #1]
 8001aac:	b328      	cbz	r0, 8001afa <PE_StateMachine_SNK_ReadyWait+0xe0>
 8001aae:	6860      	ldr	r0, [r4, #4]
 8001ab0:	6800      	ldr	r0, [r0, #0]
 8001ab2:	f000 0103 	and.w	r1, r0, #3
 8001ab6:	2901      	cmp	r1, #1
 8001ab8:	d008      	beq.n	8001acc <PE_StateMachine_SNK_ReadyWait+0xb2>
 8001aba:	f000 0003 	and.w	r0, r0, #3
 8001abe:	2802      	cmp	r0, #2
 8001ac0:	d118      	bne.n	8001af4 <PE_StateMachine_SNK_ReadyWait+0xda>
 8001ac2:	7b20      	ldrb	r0, [r4, #12]
 8001ac4:	f000 f886 	bl	8001bd4 <USBPD_PRL_IsResistor_SinkTxOK>
 8001ac8:	2801      	cmp	r0, #1
 8001aca:	d113      	bne.n	8001af4 <PE_StateMachine_SNK_ReadyWait+0xda>
 8001acc:	78b0      	ldrb	r0, [r6, #2]
 8001ace:	7030      	strb	r0, [r6, #0]
 8001ad0:	7870      	ldrb	r0, [r6, #1]
 8001ad2:	7360      	strb	r0, [r4, #13]
 8001ad4:	2845      	cmp	r0, #69	@ 0x45
 8001ad6:	d103      	bne.n	8001ae0 <PE_StateMachine_SNK_ReadyWait+0xc6>
 8001ad8:	6920      	ldr	r0, [r4, #16]
 8001ada:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8001ade:	6120      	str	r0, [r4, #16]
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	7070      	strb	r0, [r6, #1]
 8001ae4:	6920      	ldr	r0, [r4, #16]
 8001ae6:	6a21      	ldr	r1, [r4, #32]
 8001ae8:	6261      	str	r1, [r4, #36]	@ 0x24
 8001aea:	f440 4080 	orr.w	r0, r0, #16384	@ 0x4000
 8001aee:	6120      	str	r0, [r4, #16]
 8001af0:	2500      	movs	r5, #0
 8001af2:	e002      	b.n	8001afa <PE_StateMachine_SNK_ReadyWait+0xe0>
 8001af4:	7870      	ldrb	r0, [r6, #1]
 8001af6:	b100      	cbz	r0, 8001afa <PE_StateMachine_SNK_ReadyWait+0xe0>
 8001af8:	2502      	movs	r5, #2
 8001afa:	4628      	mov	r0, r5
 8001afc:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
	...

08001b00 <.text_15>:
 8001b00:	20000544 	.word	0x20000544

08001b04 <.text_16>:
 8001b04:	20000000 	.word	0x20000000

08001b08 <USBPD_PRL_TimerCounter>:
 8001b08:	f8df 1a40 	ldr.w	r1, [pc, #2624]	@ 800254c <.text_37>
 8001b0c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8001b10:	78c8      	ldrb	r0, [r1, #3]
 8001b12:	b110      	cbz	r0, 8001b1a <USBPD_PRL_TimerCounter+0x12>
 8001b14:	78c8      	ldrb	r0, [r1, #3]
 8001b16:	1e42      	subs	r2, r0, #1
 8001b18:	70ca      	strb	r2, [r1, #3]
 8001b1a:	4770      	bx	lr

08001b1c <USBPD_PRL_Init>:
 8001b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b20:	4680      	mov	r8, r0
 8001b22:	460e      	mov	r6, r1
 8001b24:	4617      	mov	r7, r2
 8001b26:	461d      	mov	r5, r3
 8001b28:	2048      	movs	r0, #72	@ 0x48
 8001b2a:	f016 fe83 	bl	8018834 <malloc>
 8001b2e:	0004      	movs	r4, r0
 8001b30:	f04f 0916 	mov.w	r9, #22
 8001b34:	d018      	beq.n	8001b68 <USBPD_PRL_Init+0x4c>
 8001b36:	2148      	movs	r1, #72	@ 0x48
 8001b38:	f018 fbf5 	bl	801a326 <__aeabi_memclr>
 8001b3c:	f000 fa9a 	bl	8002074 <.text_17>
 8001b40:	f8df 0a08 	ldr.w	r0, [pc, #2568]	@ 800254c <.text_37>
 8001b44:	4641      	mov	r1, r8
 8001b46:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
 8001b4a:	6227      	str	r7, [r4, #32]
 8001b4c:	6265      	str	r5, [r4, #36]	@ 0x24
 8001b4e:	2001      	movs	r0, #1
 8001b50:	9000      	str	r0, [sp, #0]
 8001b52:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 8001b56:	6870      	ldr	r0, [r6, #4]
 8001b58:	f60f 2110 	addw	r1, pc, #2576	@ 0xa10
 8001b5c:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8001b60:	4640      	mov	r0, r8
 8001b62:	f010 fbe3 	bl	801232c <USBPD_PHY_Init>
 8001b66:	4681      	mov	r9, r0
 8001b68:	4648      	mov	r0, r9
 8001b6a:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

08001b6e <USBPD_PRL_GetMemoryConsumption>:
 8001b6e:	20d8      	movs	r0, #216	@ 0xd8
 8001b70:	4770      	bx	lr

08001b72 <USBPD_PRL_SetHeader>:
 8001b72:	b530      	push	{r4, r5, lr}
 8001b74:	f8df 49d4 	ldr.w	r4, [pc, #2516]	@ 800254c <.text_37>
 8001b78:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
 8001b7c:	8a2d      	ldrh	r5, [r5, #16]
 8001b7e:	f361 2508 	bfi	r5, r1, #8, #1
 8001b82:	f854 1020 	ldr.w	r1, [r4, r0, lsl #2]
 8001b86:	820d      	strh	r5, [r1, #16]
 8001b88:	f362 1545 	bfi	r5, r2, #5, #1
 8001b8c:	f854 1020 	ldr.w	r1, [r4, r0, lsl #2]
 8001b90:	820d      	strh	r5, [r1, #16]
 8001b92:	f363 1587 	bfi	r5, r3, #6, #2
 8001b96:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8001b9a:	8205      	strh	r5, [r0, #16]
 8001b9c:	bd30      	pop	{r4, r5, pc}

08001b9e <USBPD_PRL_SetHeaderPowerRole>:
 8001b9e:	b510      	push	{r4, lr}
 8001ba0:	f000 f80b 	bl	8001bba <.text_9>
 8001ba4:	f361 2408 	bfi	r4, r1, #8, #1
 8001ba8:	821c      	strh	r4, [r3, #16]
 8001baa:	bd10      	pop	{r4, pc}

08001bac <USBPD_PRL_SetHeaderDataRole>:
 8001bac:	b510      	push	{r4, lr}
 8001bae:	f000 f804 	bl	8001bba <.text_9>
 8001bb2:	f361 1445 	bfi	r4, r1, #5, #1
 8001bb6:	821c      	strh	r4, [r3, #16]
 8001bb8:	bd10      	pop	{r4, pc}

08001bba <.text_9>:
 8001bba:	f8df 2990 	ldr.w	r2, [pc, #2448]	@ 800254c <.text_37>
 8001bbe:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8001bc2:	8a1c      	ldrh	r4, [r3, #16]
 8001bc4:	4770      	bx	lr

08001bc6 <USBPD_PRL_SetHeaderSpecification>:
 8001bc6:	b510      	push	{r4, lr}
 8001bc8:	f7ff fff7 	bl	8001bba <.text_9>
 8001bcc:	f361 1487 	bfi	r4, r1, #6, #2
 8001bd0:	821c      	strh	r4, [r3, #16]
 8001bd2:	bd10      	pop	{r4, pc}

08001bd4 <USBPD_PRL_IsResistor_SinkTxOK>:
 8001bd4:	f010 bc85 	b.w	80124e2 <USBPD_PHY_IsResistor_SinkTxOk>

08001bd8 <USBPD_PRL_SendMessage>:
 8001bd8:	e92d 4ff5 	stmdb	sp!, {r0, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bdc:	f8df a96c 	ldr.w	sl, [pc, #2412]	@ 800254c <.text_37>
 8001be0:	b083      	sub	sp, #12
 8001be2:	4680      	mov	r8, r0
 8001be4:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 8001be8:	4694      	mov	ip, r2
 8001bea:	f10c 0701 	add.w	r7, ip, #1
 8001bee:	2403      	movs	r4, #3
 8001bf0:	78f8      	ldrb	r0, [r7, #3]
 8001bf2:	b118      	cbz	r0, 8001bfc <USBPD_PRL_SendMessage+0x24>
 8001bf4:	79f8      	ldrb	r0, [r7, #7]
 8001bf6:	b908      	cbnz	r0, 8001bfc <USBPD_PRL_SendMessage+0x24>
 8001bf8:	200f      	movs	r0, #15
 8001bfa:	7110      	strb	r0, [r2, #4]
 8001bfc:	ea4f 0048 	mov.w	r0, r8, lsl #1
 8001c00:	1c40      	adds	r0, r0, #1
 8001c02:	f88d 0005 	strb.w	r0, [sp, #5]
 8001c06:	f88d 1004 	strb.w	r1, [sp, #4]
 8001c0a:	9302      	str	r3, [sp, #8]
 8001c0c:	eb0c 0601 	add.w	r6, ip, r1
 8001c10:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8001c12:	f8dd e038 	ldr.w	lr, [sp, #56]	@ 0x38
 8001c16:	f897 b003 	ldrb.w	fp, [r7, #3]
 8001c1a:	f1bb 0f10 	cmp.w	fp, #16
 8001c1e:	f10c 050c 	add.w	r5, ip, #12
 8001c22:	46f1      	mov	r9, lr
 8001c24:	f200 81e0 	bhi.w	8001fe8 <USBPD_PRL_SendMessage+0x410>
 8001c28:	e8df f01b 	tbh	[pc, fp, lsl #1]
 8001c2c:	01de0011 	.word	0x01de0011
 8001c30:	01de01de 	.word	0x01de01de
 8001c34:	00490028 	.word	0x00490028
 8001c38:	00ac0038 	.word	0x00ac0038
 8001c3c:	01de01de 	.word	0x01de01de
 8001c40:	017f016a 	.word	0x017f016a
 8001c44:	01a70196 	.word	0x01a70196
 8001c48:	01da01de 	.word	0x01da01de
 8001c4c:	01c2      	.short	0x01c2
 8001c4e:	f3ef 8510 	mrs	r5, PRIMASK
 8001c52:	b672      	cpsid	i
 8001c54:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8001c58:	f7fe fd55 	bl	8000706 <PE_PRL_Control_RxEvent>
 8001c5c:	2800      	cmp	r0, #0
 8001c5e:	bf04      	itt	eq
 8001c60:	7a38      	ldrbeq	r0, [r7, #8]
 8001c62:	2800      	cmpeq	r0, #0
 8001c64:	bf07      	ittee	eq
 8001c66:	21ff      	moveq	r1, #255	@ 0xff
 8001c68:	71f9      	strbeq	r1, [r7, #7]
 8001c6a:	2000      	movne	r0, #0
 8001c6c:	71f8      	strbne	r0, [r7, #7]
 8001c6e:	f385 8810 	msr	PRIMASK, r5
 8001c72:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8001c76:	2106      	movs	r1, #6
 8001c78:	7101      	strb	r1, [r0, #4]
 8001c7a:	e1b8      	b.n	8001fee <USBPD_PRL_SendMessage+0x416>
 8001c7c:	2802      	cmp	r0, #2
 8001c7e:	d10b      	bne.n	8001c98 <USBPD_PRL_SendMessage+0xc0>
 8001c80:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8001c84:	f010 fc2d 	bl	80124e2 <USBPD_PHY_IsResistor_SinkTxOk>
 8001c88:	2801      	cmp	r0, #1
 8001c8a:	d103      	bne.n	8001c94 <USBPD_PRL_SendMessage+0xbc>
 8001c8c:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 8001c90:	2005      	movs	r0, #5
 8001c92:	e185      	b.n	8001fa0 <USBPD_PRL_SendMessage+0x3c8>
 8001c94:	2409      	movs	r4, #9
 8001c96:	e1aa      	b.n	8001fee <USBPD_PRL_SendMessage+0x416>
 8001c98:	2006      	movs	r0, #6
 8001c9a:	e15b      	b.n	8001f54 <USBPD_PRL_SendMessage+0x37c>
 8001c9c:	f10c 0210 	add.w	r2, ip, #16
 8001ca0:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001ca4:	f3c1 1181 	ubfx	r1, r1, #6, #2
 8001ca8:	2902      	cmp	r1, #2
 8001caa:	bf08      	it	eq
 8001cac:	2802      	cmpeq	r0, #2
 8001cae:	bf19      	ittee	ne
 8001cb0:	2005      	movne	r0, #5
 8001cb2:	f85a 1028 	ldrne.w	r1, [sl, r8, lsl #2]
 8001cb6:	2004      	moveq	r0, #4
 8001cb8:	f85a 1028 	ldreq.w	r1, [sl, r8, lsl #2]
 8001cbc:	e170      	b.n	8001fa0 <USBPD_PRL_SendMessage+0x3c8>
 8001cbe:	f10c 0010 	add.w	r0, ip, #16
 8001cc2:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8001cc6:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8001cca:	f10c 0310 	add.w	r3, ip, #16
 8001cce:	f362 0004 	bfi	r0, r2, #0, #5
 8001cd2:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 8001cd6:	ea4f 1bd2 	mov.w	fp, r2, lsr #7
 8001cda:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8001cde:	ea40 30cb 	orr.w	r0, r0, fp, lsl #15
 8001ce2:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	7038      	strb	r0, [r7, #0]
 8001cea:	f10c 0710 	add.w	r7, ip, #16
 8001cee:	f837 3011 	ldrh.w	r3, [r7, r1, lsl #1]
 8001cf2:	0bd8      	lsrs	r0, r3, #15
 8001cf4:	d026      	beq.n	8001d44 <USBPD_PRL_SendMessage+0x16c>
 8001cf6:	9802      	ldr	r0, [sp, #8]
 8001cf8:	7883      	ldrb	r3, [r0, #2]
 8001cfa:	78c7      	ldrb	r7, [r0, #3]
 8001cfc:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8001d00:	816b      	strh	r3, [r5, #10]
 8001d02:	8968      	ldrh	r0, [r5, #10]
 8001d04:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8001d08:	b970      	cbnz	r0, 8001d28 <USBPD_PRL_SendMessage+0x150>
 8001d0a:	8968      	ldrh	r0, [r5, #10]
 8001d0c:	f3c0 20c3 	ubfx	r0, r0, #11, #4
 8001d10:	bb18      	cbnz	r0, 8001d5a <USBPD_PRL_SendMessage+0x182>
 8001d12:	f1ae 0004 	sub.w	r0, lr, #4
 8001d16:	8228      	strh	r0, [r5, #16]
 8001d18:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8001d1c:	896b      	ldrh	r3, [r5, #10]
 8001d1e:	f403 437e 	and.w	r3, r3, #65024	@ 0xfe00
 8001d22:	4318      	orrs	r0, r3
 8001d24:	8168      	strh	r0, [r5, #10]
 8001d26:	e018      	b.n	8001d5a <USBPD_PRL_SendMessage+0x182>
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f10c 0310 	add.w	r3, ip, #16
 8001d2e:	8228      	strh	r0, [r5, #16]
 8001d30:	2001      	movs	r0, #1
 8001d32:	f833 7011 	ldrh.w	r7, [r3, r1, lsl #1]
 8001d36:	f360 370e 	bfi	r7, r0, #12, #3
 8001d3a:	f10c 0010 	add.w	r0, ip, #16
 8001d3e:	f820 7011 	strh.w	r7, [r0, r1, lsl #1]
 8001d42:	e00a      	b.n	8001d5a <USBPD_PRL_SendMessage+0x182>
 8001d44:	f1a9 0002 	sub.w	r0, r9, #2
 8001d48:	0880      	lsrs	r0, r0, #2
 8001d4a:	f360 330e 	bfi	r3, r0, #12, #3
 8001d4e:	f10c 0010 	add.w	r0, ip, #16
 8001d52:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8001d56:	2300      	movs	r3, #0
 8001d58:	822b      	strh	r3, [r5, #16]
 8001d5a:	2a0d      	cmp	r2, #13
 8001d5c:	bf02      	ittt	eq
 8001d5e:	f10c 0010 	addeq.w	r0, ip, #16
 8001d62:	f830 1011 	ldrheq.w	r1, [r0, r1, lsl #1]
 8001d66:	f411 4f70 	tsteq.w	r1, #61440	@ 0xf000
 8001d6a:	d107      	bne.n	8001d7c <USBPD_PRL_SendMessage+0x1a4>
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	72b0      	strb	r0, [r6, #10]
 8001d70:	220f      	movs	r2, #15
 8001d72:	2103      	movs	r1, #3
 8001d74:	f10c 0005 	add.w	r0, ip, #5
 8001d78:	f000 fc05 	bl	8002586 <__aeabi_memset>
 8001d7c:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 8001d80:	2007      	movs	r0, #7
 8001d82:	e10d      	b.n	8001fa0 <USBPD_PRL_SendMessage+0x3c8>
 8001d84:	f102 0310 	add.w	r3, r2, #16
 8001d88:	4677      	mov	r7, lr
 8001d8a:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8001d8e:	0bc0      	lsrs	r0, r0, #15
 8001d90:	f000 8080 	beq.w	8001e94 <USBPD_PRL_SendMessage+0x2bc>
 8001d94:	8ad0      	ldrh	r0, [r2, #22]
 8001d96:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8001d9a:	82d0      	strh	r0, [r2, #22]
 8001d9c:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8001da0:	2800      	cmp	r0, #0
 8001da2:	d16c      	bne.n	8001e7e <USBPD_PRL_SendMessage+0x2a6>
 8001da4:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 8001da8:	8b95      	ldrh	r5, [r2, #28]
 8001daa:	8ad3      	ldrh	r3, [r2, #22]
 8001dac:	2d1b      	cmp	r5, #27
 8001dae:	d30f      	bcc.n	8001dd0 <USBPD_PRL_SendMessage+0x1f8>
 8001db0:	0bd8      	lsrs	r0, r3, #15
 8001db2:	d00d      	beq.n	8001dd0 <USBPD_PRL_SendMessage+0x1f8>
 8001db4:	f102 0310 	add.w	r3, r2, #16
 8001db8:	271e      	movs	r7, #30
 8001dba:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8001dbe:	f440 40e0 	orr.w	r0, r0, #28672	@ 0x7000
 8001dc2:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 8001dc6:	8b90      	ldrh	r0, [r2, #28]
 8001dc8:	f1a0 031a 	sub.w	r3, r0, #26
 8001dcc:	8393      	strh	r3, [r2, #28]
 8001dce:	e056      	b.n	8001e7e <USBPD_PRL_SendMessage+0x2a6>
 8001dd0:	f3c3 20c3 	ubfx	r0, r3, #11, #4
 8001dd4:	b918      	cbnz	r0, 8001dde <USBPD_PRL_SendMessage+0x206>
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f365 0008 	bfi	r0, r5, #0, #9
 8001ddc:	82d0      	strh	r0, [r2, #22]
 8001dde:	f648 70ff 	movw	r0, #36863	@ 0x8fff
 8001de2:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 8001de6:	f102 0310 	add.w	r3, r2, #16
 8001dea:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001dee:	4003      	ands	r3, r0
 8001df0:	f102 0010 	add.w	r0, r2, #16
 8001df4:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8001df8:	8ad0      	ldrh	r0, [r2, #22]
 8001dfa:	0bc0      	lsrs	r0, r0, #15
 8001dfc:	d03b      	beq.n	8001e76 <USBPD_PRL_SendMessage+0x29e>
 8001dfe:	8b90      	ldrh	r0, [r2, #28]
 8001e00:	1c80      	adds	r0, r0, #2
 8001e02:	0880      	lsrs	r0, r0, #2
 8001e04:	0307      	lsls	r7, r0, #12
 8001e06:	f407 47e0 	and.w	r7, r7, #28672	@ 0x7000
 8001e0a:	f102 0010 	add.w	r0, r2, #16
 8001e0e:	433b      	orrs	r3, r7
 8001e10:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8001e14:	8b92      	ldrh	r2, [r2, #28]
 8001e16:	1c92      	adds	r2, r2, #2
 8001e18:	f012 0203 	ands.w	r2, r2, #3
 8001e1c:	d021      	beq.n	8001e62 <USBPD_PRL_SendMessage+0x28a>
 8001e1e:	9802      	ldr	r0, [sp, #8]
 8001e20:	2700      	movs	r7, #0
 8001e22:	e005      	b.n	8001e30 <USBPD_PRL_SendMessage+0x258>
 8001e24:	8b9b      	ldrh	r3, [r3, #28]
 8001e26:	1d05      	adds	r5, r0, #4
 8001e28:	4433      	add	r3, r6
 8001e2a:	2600      	movs	r6, #0
 8001e2c:	54ee      	strb	r6, [r5, r3]
 8001e2e:	1c7f      	adds	r7, r7, #1
 8001e30:	b2fe      	uxtb	r6, r7
 8001e32:	f1c2 0e04 	rsb	lr, r2, #4
 8001e36:	f85a 3028 	ldr.w	r3, [sl, r8, lsl #2]
 8001e3a:	4576      	cmp	r6, lr
 8001e3c:	d3f2      	bcc.n	8001e24 <USBPD_PRL_SendMessage+0x24c>
 8001e3e:	9002      	str	r0, [sp, #8]
 8001e40:	f648 72ff 	movw	r2, #36863	@ 0x8fff
 8001e44:	f103 0010 	add.w	r0, r3, #16
 8001e48:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8001e4c:	4002      	ands	r2, r0
 8001e4e:	0b00      	lsrs	r0, r0, #12
 8001e50:	1c40      	adds	r0, r0, #1
 8001e52:	0300      	lsls	r0, r0, #12
 8001e54:	f400 40e0 	and.w	r0, r0, #28672	@ 0x7000
 8001e58:	4310      	orrs	r0, r2
 8001e5a:	f103 0210 	add.w	r2, r3, #16
 8001e5e:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
 8001e62:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8001e66:	f100 0210 	add.w	r2, r0, #16
 8001e6a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 8001e6e:	f3c3 3702 	ubfx	r7, r3, #12, #3
 8001e72:	00bf      	lsls	r7, r7, #2
 8001e74:	1cbf      	adds	r7, r7, #2
 8001e76:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	8390      	strh	r0, [r2, #28]
 8001e7e:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8001e82:	8ac2      	ldrh	r2, [r0, #22]
 8001e84:	9802      	ldr	r0, [sp, #8]
 8001e86:	7082      	strb	r2, [r0, #2]
 8001e88:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 8001e8c:	8ad0      	ldrh	r0, [r2, #22]
 8001e8e:	9a02      	ldr	r2, [sp, #8]
 8001e90:	0a00      	lsrs	r0, r0, #8
 8001e92:	70d0      	strb	r0, [r2, #3]
 8001e94:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8001e98:	f8df 56b4 	ldr.w	r5, [pc, #1716]	@ 8002550 <.text_38>
 8001e9c:	f100 020a 	add.w	r2, r0, #10
 8001ea0:	3010      	adds	r0, #16
 8001ea2:	5c53      	ldrb	r3, [r2, r1]
 8001ea4:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8001ea8:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 8001eac:	f363 204b 	bfi	r0, r3, #9, #3
 8001eb0:	f102 0310 	add.w	r3, r2, #16
 8001eb4:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 8001eb8:	9a02      	ldr	r2, [sp, #8]
 8001eba:	7010      	strb	r0, [r2, #0]
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8001ec2:	f100 0310 	add.w	r3, r0, #16
 8001ec6:	9802      	ldr	r0, [sp, #8]
 8001ec8:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8001ecc:	0a09      	lsrs	r1, r1, #8
 8001ece:	7041      	strb	r1, [r0, #1]
 8001ed0:	210a      	movs	r1, #10
 8001ed2:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8001ed6:	8187      	strh	r7, [r0, #12]
 8001ed8:	7101      	strb	r1, [r0, #4]
 8001eda:	7382      	strb	r2, [r0, #14]
 8001edc:	b2b8      	uxth	r0, r7
 8001ede:	9000      	str	r0, [sp, #0]
 8001ee0:	f000 f893 	bl	800200a <.text_15>
 8001ee4:	2002      	movs	r0, #2
 8001ee6:	47d0      	blx	sl
 8001ee8:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8001eec:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001ef0:	f011 fd4e 	bl	8013990 <USBPD_TIM_Start>
 8001ef4:	f000 f883 	bl	8001ffe <.text_14>
 8001ef8:	b2bb      	uxth	r3, r7
 8001efa:	f010 faba 	bl	8012472 <USBPD_PHY_SendMessage>
 8001efe:	e076      	b.n	8001fee <USBPD_PRL_SendMessage+0x416>
 8001f00:	f3ef 8710 	mrs	r7, PRIMASK
 8001f04:	b672      	cpsid	i
 8001f06:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8001f0a:	7901      	ldrb	r1, [r0, #4]
 8001f0c:	290a      	cmp	r1, #10
 8001f0e:	d109      	bne.n	8001f24 <USBPD_PRL_SendMessage+0x34c>
 8001f10:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8001f14:	f011 fdae 	bl	8013a74 <USBPD_TIM_IsExpired>
 8001f18:	2801      	cmp	r0, #1
 8001f1a:	d103      	bne.n	8001f24 <USBPD_PRL_SendMessage+0x34c>
 8001f1c:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 8001f20:	200d      	movs	r0, #13
 8001f22:	7108      	strb	r0, [r1, #4]
 8001f24:	f387 8810 	msr	PRIMASK, r7
 8001f28:	e061      	b.n	8001fee <USBPD_PRL_SendMessage+0x416>
 8001f2a:	8928      	ldrh	r0, [r5, #8]
 8001f2c:	7ab1      	ldrb	r1, [r6, #10]
 8001f2e:	0a43      	lsrs	r3, r0, #9
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	4299      	cmp	r1, r3
 8001f36:	bf04      	itt	eq
 8001f38:	f000 001f 	andeq.w	r0, r0, #31
 8001f3c:	2801      	cmpeq	r0, #1
 8001f3e:	d108      	bne.n	8001f52 <USBPD_PRL_SendMessage+0x37a>
 8001f40:	1c49      	adds	r1, r1, #1
 8001f42:	f001 0107 	and.w	r1, r1, #7
 8001f46:	72b1      	strb	r1, [r6, #10]
 8001f48:	2000      	movs	r0, #0
 8001f4a:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 8001f4e:	7108      	strb	r0, [r1, #4]
 8001f50:	e011      	b.n	8001f76 <USBPD_PRL_SendMessage+0x39e>
 8001f52:	200d      	movs	r0, #13
 8001f54:	7110      	strb	r0, [r2, #4]
 8001f56:	e04a      	b.n	8001fee <USBPD_PRL_SendMessage+0x416>
 8001f58:	f000 f84b 	bl	8001ff2 <.text_13>
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 8001f62:	7108      	strb	r0, [r1, #4]
 8001f64:	f248 71ff 	movw	r1, #34815	@ 0x87ff
 8001f68:	896a      	ldrh	r2, [r5, #10]
 8001f6a:	400a      	ands	r2, r1
 8001f6c:	816a      	strh	r2, [r5, #10]
 8001f6e:	f64f 30ff 	movw	r0, #64511	@ 0xfbff
 8001f72:	4002      	ands	r2, r0
 8001f74:	816a      	strh	r2, [r5, #10]
 8001f76:	2405      	movs	r4, #5
 8001f78:	e039      	b.n	8001fee <USBPD_PRL_SendMessage+0x416>
 8001f7a:	7838      	ldrb	r0, [r7, #0]
 8001f7c:	1c40      	adds	r0, r0, #1
 8001f7e:	7038      	strb	r0, [r7, #0]
 8001f80:	f10c 0010 	add.w	r0, ip, #16
 8001f84:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8001f88:	783a      	ldrb	r2, [r7, #0]
 8001f8a:	f3c1 1081 	ubfx	r0, r1, #6, #2
 8001f8e:	2801      	cmp	r0, #1
 8001f90:	bf0c      	ite	eq
 8001f92:	2003      	moveq	r0, #3
 8001f94:	2002      	movne	r0, #2
 8001f96:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 8001f9a:	4290      	cmp	r0, r2
 8001f9c:	d302      	bcc.n	8001fa4 <USBPD_PRL_SendMessage+0x3cc>
 8001f9e:	2010      	movs	r0, #16
 8001fa0:	7108      	strb	r0, [r1, #4]
 8001fa2:	e024      	b.n	8001fee <USBPD_PRL_SendMessage+0x416>
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	710a      	strb	r2, [r1, #4]
 8001fa8:	2407      	movs	r4, #7
 8001faa:	f000 f822 	bl	8001ff2 <.text_13>
 8001fae:	e01e      	b.n	8001fee <USBPD_PRL_SendMessage+0x416>
 8001fb0:	200a      	movs	r0, #10
 8001fb2:	7110      	strb	r0, [r2, #4]
 8001fb4:	2102      	movs	r1, #2
 8001fb6:	70a9      	strb	r1, [r5, #2]
 8001fb8:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001fbc:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8001fc0:	f011 fce6 	bl	8013990 <USBPD_TIM_Start>
 8001fc4:	882b      	ldrh	r3, [r5, #0]
 8001fc6:	f000 f81a 	bl	8001ffe <.text_14>
 8001fca:	f8df 5584 	ldr.w	r5, [pc, #1412]	@ 8002550 <.text_38>
 8001fce:	f010 fa50 	bl	8012472 <USBPD_PHY_SendMessage>
 8001fd2:	f000 f81a 	bl	800200a <.text_15>
 8001fd6:	f8cd 9000 	str.w	r9, [sp]
 8001fda:	2002      	movs	r0, #2
 8001fdc:	47d0      	blx	sl
 8001fde:	e006      	b.n	8001fee <USBPD_PRL_SendMessage+0x416>
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	7110      	strb	r0, [r2, #4]
 8001fe4:	2406      	movs	r4, #6
 8001fe6:	e002      	b.n	8001fee <USBPD_PRL_SendMessage+0x416>
 8001fe8:	2000      	movs	r0, #0
 8001fea:	7110      	strb	r0, [r2, #4]
 8001fec:	2410      	movs	r4, #16
 8001fee:	4620      	mov	r0, r4
 8001ff0:	e1f0      	b.n	80023d4 <.text_25>

08001ff2 <.text_13>:
 8001ff2:	7ab0      	ldrb	r0, [r6, #10]
 8001ff4:	1c40      	adds	r0, r0, #1
 8001ff6:	f000 0007 	and.w	r0, r0, #7
 8001ffa:	72b0      	strb	r0, [r6, #10]
 8001ffc:	4770      	bx	lr

08001ffe <.text_14>:
 8001ffe:	9a02      	ldr	r2, [sp, #8]
 8002000:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8002004:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002008:	4770      	bx	lr

0800200a <.text_15>:
 800200a:	9b02      	ldr	r3, [sp, #8]
 800200c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002010:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8002014:	f8d5 a000 	ldr.w	sl, [r5]
 8002018:	4770      	bx	lr

0800201a <USBPD_PRL_ResetRequestProcess>:
 800201a:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 800201e:	4605      	mov	r5, r0
 8002020:	f8df 8528 	ldr.w	r8, [pc, #1320]	@ 800254c <.text_37>
 8002024:	462f      	mov	r7, r5
 8002026:	f858 4027 	ldr.w	r4, [r8, r7, lsl #2]
 800202a:	2000      	movs	r0, #0
 800202c:	70a0      	strb	r0, [r4, #2]
 800202e:	72a0      	strb	r0, [r4, #10]
 8002030:	460e      	mov	r6, r1
 8002032:	f000 f81f 	bl	8002074 <.text_17>
 8002036:	f858 0027 	ldr.w	r0, [r8, r7, lsl #2]
 800203a:	f8df 7514 	ldr.w	r7, [pc, #1300]	@ 8002550 <.text_38>
 800203e:	2200      	movs	r2, #0
 8002040:	7102      	strb	r2, [r0, #4]
 8002042:	9200      	str	r2, [sp, #0]
 8002044:	2300      	movs	r3, #0
 8002046:	f8d7 c000 	ldr.w	ip, [r7]
 800204a:	4632      	mov	r2, r6
 800204c:	4629      	mov	r1, r5
 800204e:	2002      	movs	r0, #2
 8002050:	47e0      	blx	ip
 8002052:	4628      	mov	r0, r5
 8002054:	f000 f83e 	bl	80020d4 <PRL_DisableRX>
 8002058:	4631      	mov	r1, r6
 800205a:	4628      	mov	r0, r5
 800205c:	f010 f9f6 	bl	801244c <USBPD_PHY_ResetRequest>
 8002060:	2005      	movs	r0, #5
 8002062:	70e0      	strb	r0, [r4, #3]
 8002064:	78a0      	ldrb	r0, [r4, #2]
 8002066:	2801      	cmp	r0, #1
 8002068:	bf1c      	itt	ne
 800206a:	78e0      	ldrbne	r0, [r4, #3]
 800206c:	2800      	cmpne	r0, #0
 800206e:	d1f9      	bne.n	8002064 <USBPD_PRL_ResetRequestProcess+0x4a>
 8002070:	e8bd 81f3 	ldmia.w	sp!, {r0, r1, r4, r5, r6, r7, r8, pc}

08002074 <.text_17>:
 8002074:	220f      	movs	r2, #15
 8002076:	2103      	movs	r1, #3
 8002078:	1d60      	adds	r0, r4, #5
 800207a:	f000 ba84 	b.w	8002586 <__aeabi_memset>

0800207e <USBDPD_PRL_BistCarrierEyeMode>:
 800207e:	2905      	cmp	r1, #5
 8002080:	bf08      	it	eq
 8002082:	f010 ba0c 	beq.w	801249e <USBPD_PHY_Send_BIST_Pattern>
 8002086:	2010      	movs	r0, #16
 8002088:	4770      	bx	lr

0800208a <USBDPD_PRL_BistCarrierEyeModeExit>:
 800208a:	2905      	cmp	r1, #5
 800208c:	bf04      	itt	eq
 800208e:	2107      	moveq	r1, #7
 8002090:	f010 ba13 	beq.w	80124ba <USBPD_PHY_ExitTransmit>
 8002094:	2010      	movs	r0, #16
 8002096:	4770      	bx	lr

08002098 <USBPD_PRL_Reset>:
 8002098:	b538      	push	{r3, r4, r5, lr}
 800209a:	4604      	mov	r4, r0
 800209c:	f8df 04ac 	ldr.w	r0, [pc, #1196]	@ 800254c <.text_37>
 80020a0:	4621      	mov	r1, r4
 80020a2:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 80020a6:	2200      	movs	r2, #0
 80020a8:	712a      	strb	r2, [r5, #4]
 80020aa:	702a      	strb	r2, [r5, #0]
 80020ac:	70ea      	strb	r2, [r5, #3]
 80020ae:	72aa      	strb	r2, [r5, #10]
 80020b0:	2103      	movs	r1, #3
 80020b2:	220f      	movs	r2, #15
 80020b4:	1d68      	adds	r0, r5, #5
 80020b6:	f000 fa66 	bl	8002586 <__aeabi_memset>
 80020ba:	2200      	movs	r2, #0
 80020bc:	77ea      	strb	r2, [r5, #31]
 80020be:	4620      	mov	r0, r4
 80020c0:	f010 f9b9 	bl	8012436 <USBPD_PHY_Reset>
 80020c4:	4620      	mov	r0, r4
 80020c6:	e8bd 4032 	ldmia.w	sp!, {r1, r4, r5, lr}
 80020ca:	f010 ba18 	b.w	80124fe <USBPD_PHY_EnableRX>

080020ce <USBPD_PRL_Stop>:
 80020ce:	f010 ba23 	b.w	8012518 <USBPD_PHY_DisableRX>

080020d2 <USBPD_PRL_DeInit>:
 80020d2:	4770      	bx	lr

080020d4 <PRL_DisableRX>:
 80020d4:	f010 ba20 	b.w	8012518 <USBPD_PHY_DisableRX>

080020d8 <PRL_Received>:
 80020d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020dc:	4680      	mov	r8, r0
 80020de:	f8df b46c 	ldr.w	fp, [pc, #1132]	@ 800254c <.text_37>
 80020e2:	b084      	sub	sp, #16
 80020e4:	4645      	mov	r5, r8
 80020e6:	f85b 6025 	ldr.w	r6, [fp, r5, lsl #2]
 80020ea:	f8df 9464 	ldr.w	r9, [pc, #1124]	@ 8002550 <.text_38>
 80020ee:	468a      	mov	sl, r1
 80020f0:	f010 f995 	bl	801241e <USBPD_PHY_GetMinGOODCRCTimerValue>
 80020f4:	4601      	mov	r1, r0
 80020f6:	ea4f 0048 	mov.w	r0, r8, lsl #1
 80020fa:	b2c0      	uxtb	r0, r0
 80020fc:	f011 fc48 	bl	8013990 <USBPD_TIM_Start>
 8002100:	f106 0728 	add.w	r7, r6, #40	@ 0x28
 8002104:	7838      	ldrb	r0, [r7, #0]
 8002106:	7879      	ldrb	r1, [r7, #1]
 8002108:	eb00 2401 	add.w	r4, r0, r1, lsl #8
 800210c:	f24f 001f 	movw	r0, #61471	@ 0xf01f
 8002110:	4020      	ands	r0, r4
 8002112:	2801      	cmp	r0, #1
 8002114:	d112      	bne.n	800213c <PRL_Received+0x64>
 8002116:	0069      	lsls	r1, r5, #1
 8002118:	1c49      	adds	r1, r1, #1
 800211a:	b2c8      	uxtb	r0, r1
 800211c:	f011 fcaa 	bl	8013a74 <USBPD_TIM_IsExpired>
 8002120:	2801      	cmp	r0, #1
 8002122:	d03f      	beq.n	80021a4 <PRL_Received+0xcc>
 8002124:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 8002128:	200b      	movs	r0, #11
 800212a:	7108      	strb	r0, [r1, #4]
 800212c:	82b4      	strh	r4, [r6, #20]
 800212e:	f000 f966 	bl	80023fe <.text_29>
 8002132:	463b      	mov	r3, r7
 8002134:	4652      	mov	r2, sl
 8002136:	4641      	mov	r1, r8
 8002138:	2001      	movs	r0, #1
 800213a:	e148      	b.n	80023ce <PRL_Received+0x2f6>
 800213c:	f20f 4044 	addw	r0, pc, #1092	@ 0x444
 8002140:	8805      	ldrh	r5, [r0, #0]
 8002142:	f24f 001f 	movw	r0, #61471	@ 0xf01f
 8002146:	2101      	movs	r1, #1
 8002148:	4020      	ands	r0, r4
 800214a:	7271      	strb	r1, [r6, #9]
 800214c:	eb06 020a 	add.w	r2, r6, sl
 8002150:	280d      	cmp	r0, #13
 8002152:	9202      	str	r2, [sp, #8]
 8002154:	d103      	bne.n	800215e <PRL_Received+0x86>
 8002156:	2100      	movs	r1, #0
 8002158:	7291      	strb	r1, [r2, #10]
 800215a:	f000 f97c 	bl	8002456 <.text_31>
 800215e:	ea5f 000a 	movs.w	r0, sl
 8002162:	d10c      	bne.n	800217e <PRL_Received+0xa6>
 8002164:	8a30      	ldrh	r0, [r6, #16]
 8002166:	f3c0 1140 	ubfx	r1, r0, #5, #1
 800216a:	f3c0 2200 	ubfx	r2, r0, #8, #1
 800216e:	f64f 60df 	movw	r0, #65247	@ 0xfedf
 8002172:	4005      	ands	r5, r0
 8002174:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
 8002178:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 800217c:	e002      	b.n	8002184 <PRL_Received+0xac>
 800217e:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8002182:	4015      	ands	r5, r2
 8002184:	f24f 113f 	movw	r1, #61759	@ 0xf13f
 8002188:	400d      	ands	r5, r1
 800218a:	f404 6060 	and.w	r0, r4, #3584	@ 0xe00
 800218e:	4305      	orrs	r5, r0
 8002190:	f045 0540 	orr.w	r5, r5, #64	@ 0x40
 8002194:	74b5      	strb	r5, [r6, #18]
 8002196:	4651      	mov	r1, sl
 8002198:	0a2d      	lsrs	r5, r5, #8
 800219a:	74f5      	strb	r5, [r6, #19]
 800219c:	4640      	mov	r0, r8
 800219e:	f7fe fba8 	bl	80008f2 <PE_PRL_PostReceiveEvent>
 80021a2:	2800      	cmp	r0, #0
 80021a4:	f000 8116 	beq.w	80023d4 <.text_25>
 80021a8:	2001      	movs	r0, #1
 80021aa:	73b0      	strb	r0, [r6, #14]
 80021ac:	ea4f 0048 	mov.w	r0, r8, lsl #1
 80021b0:	b2c0      	uxtb	r0, r0
 80021b2:	f011 fc5f 	bl	8013a74 <USBPD_TIM_IsExpired>
 80021b6:	2800      	cmp	r0, #0
 80021b8:	d0f8      	beq.n	80021ac <PRL_Received+0xd4>
 80021ba:	2302      	movs	r3, #2
 80021bc:	f106 0212 	add.w	r2, r6, #18
 80021c0:	4651      	mov	r1, sl
 80021c2:	4640      	mov	r0, r8
 80021c4:	f010 f955 	bl	8012472 <USBPD_PHY_SendMessage>
 80021c8:	9003      	str	r0, [sp, #12]
 80021ca:	f886 a008 	strb.w	sl, [r6, #8]
 80021ce:	4639      	mov	r1, r7
 80021d0:	4640      	mov	r0, r8
 80021d2:	f7fe fbc4 	bl	800095e <PE_PRL_PostReceiveEventCopy>
 80021d6:	78b8      	ldrb	r0, [r7, #2]
 80021d8:	78f9      	ldrb	r1, [r7, #3]
 80021da:	eb00 2201 	add.w	r2, r0, r1, lsl #8
 80021de:	f8ad 2004 	strh.w	r2, [sp, #4]
 80021e2:	0420      	lsls	r0, r4, #16
 80021e4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80021e8:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 80021ec:	0bc9      	lsrs	r1, r1, #15
 80021ee:	0fc0      	lsrs	r0, r0, #31
 80021f0:	f3c5 0508 	ubfx	r5, r5, #0, #9
 80021f4:	f8ad 1006 	strh.w	r1, [sp, #6]
 80021f8:	d004      	beq.n	8002204 <PRL_Received+0x12c>
 80021fa:	0008      	movs	r0, r1
 80021fc:	d102      	bne.n	8002204 <PRL_Received+0x12c>
 80021fe:	1d29      	adds	r1, r5, #4
 8002200:	9100      	str	r1, [sp, #0]
 8002202:	e019      	b.n	8002238 <PRL_Received+0x160>
 8002204:	7830      	ldrb	r0, [r6, #0]
 8002206:	b9a8      	cbnz	r0, 8002234 <PRL_Received+0x15c>
 8002208:	f3c4 3002 	ubfx	r0, r4, #12, #3
 800220c:	b190      	cbz	r0, 8002234 <PRL_Received+0x15c>
 800220e:	f004 001f 	and.w	r0, r4, #31
 8002212:	2803      	cmp	r0, #3
 8002214:	d10e      	bne.n	8002234 <PRL_Received+0x15c>
 8002216:	78b8      	ldrb	r0, [r7, #2]
 8002218:	78f9      	ldrb	r1, [r7, #3]
 800221a:	eb00 2201 	add.w	r2, r0, r1, lsl #8
 800221e:	7938      	ldrb	r0, [r7, #4]
 8002220:	7979      	ldrb	r1, [r7, #5]
 8002222:	eb02 4200 	add.w	r2, r2, r0, lsl #16
 8002226:	eb02 6201 	add.w	r2, r2, r1, lsl #24
 800222a:	0f12      	lsrs	r2, r2, #28
 800222c:	2a08      	cmp	r2, #8
 800222e:	bf04      	itt	eq
 8002230:	2001      	moveq	r0, #1
 8002232:	7030      	strbeq	r0, [r6, #0]
 8002234:	f000 f8e3 	bl	80023fe <.text_29>
 8002238:	463b      	mov	r3, r7
 800223a:	f8d9 7000 	ldr.w	r7, [r9]
 800223e:	4652      	mov	r2, sl
 8002240:	4641      	mov	r1, r8
 8002242:	2001      	movs	r0, #1
 8002244:	47b8      	blx	r7
 8002246:	9803      	ldr	r0, [sp, #12]
 8002248:	b948      	cbnz	r0, 800225e <PRL_Received+0x186>
 800224a:	2102      	movs	r1, #2
 800224c:	9100      	str	r1, [sp, #0]
 800224e:	f106 0312 	add.w	r3, r6, #18
 8002252:	f8d9 7000 	ldr.w	r7, [r9]
 8002256:	4652      	mov	r2, sl
 8002258:	4641      	mov	r1, r8
 800225a:	2002      	movs	r0, #2
 800225c:	47b8      	blx	r7
 800225e:	9802      	ldr	r0, [sp, #8]
 8002260:	7941      	ldrb	r1, [r0, #5]
 8002262:	f3c4 2042 	ubfx	r0, r4, #9, #3
 8002266:	4281      	cmp	r1, r0
 8002268:	bf04      	itt	eq
 800226a:	9803      	ldreq	r0, [sp, #12]
 800226c:	2800      	cmpeq	r0, #0
 800226e:	f000 809e 	beq.w	80023ae <PRL_Received+0x2d6>
 8002272:	0421      	lsls	r1, r4, #16
 8002274:	9a02      	ldr	r2, [sp, #8]
 8002276:	0e49      	lsrs	r1, r1, #25
 8002278:	f001 0107 	and.w	r1, r1, #7
 800227c:	7151      	strb	r1, [r2, #5]
 800227e:	0420      	lsls	r0, r4, #16
 8002280:	8374      	strh	r4, [r6, #26]
 8002282:	0fc0      	lsrs	r0, r0, #31
 8002284:	bf1c      	itt	ne
 8002286:	f8bd 0006 	ldrhne.w	r0, [sp, #6]
 800228a:	2800      	cmpne	r0, #0
 800228c:	d06b      	beq.n	8002366 <PRL_Received+0x28e>
 800228e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002292:	8330      	strh	r0, [r6, #24]
 8002294:	201a      	movs	r0, #26
 8002296:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800229a:	f411 4ff8 	tst.w	r1, #31744	@ 0x7c00
 800229e:	d139      	bne.n	8002314 <PRL_Received+0x23c>
 80022a0:	f3c4 3102 	ubfx	r1, r4, #12, #3
 80022a4:	2907      	cmp	r1, #7
 80022a6:	d301      	bcc.n	80022ac <PRL_Received+0x1d4>
 80022a8:	2d1a      	cmp	r5, #26
 80022aa:	d81e      	bhi.n	80022ea <PRL_Received+0x212>
 80022ac:	2100      	movs	r1, #0
 80022ae:	f106 072c 	add.w	r7, r6, #44	@ 0x2c
 80022b2:	e009      	b.n	80022c8 <PRL_Received+0x1f0>
 80022b4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80022b8:	6a32      	ldr	r2, [r6, #32]
 80022ba:	f817 c001 	ldrb.w	ip, [r7, r1]
 80022be:	f000 f898 	bl	80023f2 <.text_28>
 80022c2:	f802 c003 	strb.w	ip, [r2, r3]
 80022c6:	b289      	uxth	r1, r1
 80022c8:	f000 f88d 	bl	80023e6 <.text_27>
 80022cc:	d3f2      	bcc.n	80022b4 <PRL_Received+0x1dc>
 80022ce:	f3c4 3002 	ubfx	r0, r4, #12, #3
 80022d2:	0080      	lsls	r0, r0, #2
 80022d4:	1e80      	subs	r0, r0, #2
 80022d6:	42a8      	cmp	r0, r5
 80022d8:	d204      	bcs.n	80022e4 <PRL_Received+0x20c>
 80022da:	f3c4 3002 	ubfx	r0, r4, #12, #3
 80022de:	0080      	lsls	r0, r0, #2
 80022e0:	1e80      	subs	r0, r0, #2
 80022e2:	e00e      	b.n	8002302 <PRL_Received+0x22a>
 80022e4:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80022e6:	8005      	strh	r5, [r0, #0]
 80022e8:	e00d      	b.n	8002306 <PRL_Received+0x22e>
 80022ea:	2101      	movs	r1, #1
 80022ec:	77f1      	strb	r1, [r6, #31]
 80022ee:	2000      	movs	r0, #0
 80022f0:	f106 012c 	add.w	r1, r6, #44	@ 0x2c
 80022f4:	6a33      	ldr	r3, [r6, #32]
 80022f6:	5c0a      	ldrb	r2, [r1, r0]
 80022f8:	541a      	strb	r2, [r3, r0]
 80022fa:	1c40      	adds	r0, r0, #1
 80022fc:	281a      	cmp	r0, #26
 80022fe:	d3f9      	bcc.n	80022f4 <PRL_Received+0x21c>
 8002300:	201a      	movs	r0, #26
 8002302:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 8002304:	8008      	strh	r0, [r1, #0]
 8002306:	4651      	mov	r1, sl
 8002308:	4640      	mov	r0, r8
 800230a:	b005      	add	sp, #20
 800230c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002310:	f7fe baef 	b.w	80008f2 <PE_PRL_PostReceiveEvent>
 8002314:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 8002316:	8809      	ldrh	r1, [r1, #0]
 8002318:	f240 1205 	movw	r2, #261	@ 0x105
 800231c:	f101 031a 	add.w	r3, r1, #26
 8002320:	4293      	cmp	r3, r2
 8002322:	bf3f      	itttt	cc
 8002324:	f3c4 3302 	ubfxcc	r3, r4, #12, #3
 8002328:	eb01 0183 	addcc.w	r1, r1, r3, lsl #2
 800232c:	1e89      	subcc	r1, r1, #2
 800232e:	42a9      	cmpcc	r1, r5
 8002330:	d21a      	bcs.n	8002368 <PRL_Received+0x290>
 8002332:	2101      	movs	r1, #1
 8002334:	77f1      	strb	r1, [r6, #31]
 8002336:	f106 052c 	add.w	r5, r6, #44	@ 0x2c
 800233a:	2100      	movs	r1, #0
 800233c:	e007      	b.n	800234e <PRL_Received+0x276>
 800233e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8002342:	6a32      	ldr	r2, [r6, #32]
 8002344:	5c6f      	ldrb	r7, [r5, r1]
 8002346:	f000 f854 	bl	80023f2 <.text_28>
 800234a:	54d7      	strb	r7, [r2, r3]
 800234c:	b289      	uxth	r1, r1
 800234e:	f000 f84a 	bl	80023e6 <.text_27>
 8002352:	d3f4      	bcc.n	800233e <PRL_Received+0x266>
 8002354:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 8002356:	880a      	ldrh	r2, [r1, #0]
 8002358:	0424      	lsls	r4, r4, #16
 800235a:	0ea4      	lsrs	r4, r4, #26
 800235c:	f004 041c 	and.w	r4, r4, #28
 8002360:	1ea0      	subs	r0, r4, #2
 8002362:	1882      	adds	r2, r0, r2
 8002364:	800a      	strh	r2, [r1, #0]
 8002366:	e035      	b.n	80023d4 <.text_25>
 8002368:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 800236a:	880b      	ldrh	r3, [r1, #0]
 800236c:	f000 f835 	bl	80023da <.text_26>
 8002370:	4291      	cmp	r1, r2
 8002372:	d219      	bcs.n	80023a8 <PRL_Received+0x2d0>
 8002374:	f000 f831 	bl	80023da <.text_26>
 8002378:	42a9      	cmp	r1, r5
 800237a:	d315      	bcc.n	80023a8 <PRL_Received+0x2d0>
 800237c:	2201      	movs	r2, #1
 800237e:	77f2      	strb	r2, [r6, #31]
 8002380:	2100      	movs	r1, #0
 8002382:	f106 072c 	add.w	r7, r6, #44	@ 0x2c
 8002386:	e009      	b.n	800239c <PRL_Received+0x2c4>
 8002388:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800238c:	6a32      	ldr	r2, [r6, #32]
 800238e:	f817 a001 	ldrb.w	sl, [r7, r1]
 8002392:	f000 f82e 	bl	80023f2 <.text_28>
 8002396:	f802 a003 	strb.w	sl, [r2, r3]
 800239a:	b289      	uxth	r1, r1
 800239c:	f000 f823 	bl	80023e6 <.text_27>
 80023a0:	d3f2      	bcc.n	8002388 <PRL_Received+0x2b0>
 80023a2:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80023a4:	8005      	strh	r5, [r0, #0]
 80023a6:	e015      	b.n	80023d4 <.text_25>
 80023a8:	2100      	movs	r1, #0
 80023aa:	77f1      	strb	r1, [r6, #31]
 80023ac:	e012      	b.n	80023d4 <.text_25>
 80023ae:	20ff      	movs	r0, #255	@ 0xff
 80023b0:	7230      	strb	r0, [r6, #8]
 80023b2:	2100      	movs	r1, #0
 80023b4:	73b1      	strb	r1, [r6, #14]
 80023b6:	4640      	mov	r0, r8
 80023b8:	f7fe fabb 	bl	8000932 <PE_PRL_PostReceiveEventError>
 80023bc:	2000      	movs	r0, #0
 80023be:	7270      	strb	r0, [r6, #9]
 80023c0:	2117      	movs	r1, #23
 80023c2:	9100      	str	r1, [sp, #0]
 80023c4:	f05f 0200 	movs.w	r2, #0
 80023c8:	a362      	add	r3, pc, #392	@ (adr r3, 8002554 <.text_39>)
 80023ca:	4641      	mov	r1, r8
 80023cc:	2006      	movs	r0, #6
 80023ce:	f8d9 8000 	ldr.w	r8, [r9]
 80023d2:	47c0      	blx	r8

080023d4 <.text_25>:
 80023d4:	b005      	add	sp, #20
 80023d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080023da <.text_26>:
 80023da:	f3c4 3102 	ubfx	r1, r4, #12, #3
 80023de:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80023e2:	1e89      	subs	r1, r1, #2
 80023e4:	4770      	bx	lr

080023e6 <.text_27>:
 80023e6:	f3c4 3202 	ubfx	r2, r4, #12, #3
 80023ea:	0092      	lsls	r2, r2, #2
 80023ec:	1e92      	subs	r2, r2, #2
 80023ee:	4291      	cmp	r1, r2
 80023f0:	4770      	bx	lr

080023f2 <.text_28>:
 80023f2:	f3c3 23c3 	ubfx	r3, r3, #11, #4
 80023f6:	fb10 1303 	smlabb	r3, r0, r3, r1
 80023fa:	1c49      	adds	r1, r1, #1
 80023fc:	4770      	bx	lr

080023fe <.text_29>:
 80023fe:	f3c4 3002 	ubfx	r0, r4, #12, #3
 8002402:	0080      	lsls	r0, r0, #2
 8002404:	1c80      	adds	r0, r0, #2
 8002406:	9000      	str	r0, [sp, #0]
 8002408:	4770      	bx	lr

0800240a <PRL_ResetIndicate>:
 800240a:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 800240e:	460d      	mov	r5, r1
 8002410:	2d05      	cmp	r5, #5
 8002412:	4604      	mov	r4, r0
 8002414:	d110      	bne.n	8002438 <PRL_ResetIndicate+0x2e>
 8002416:	f8df 8134 	ldr.w	r8, [pc, #308]	@ 800254c <.text_37>
 800241a:	4627      	mov	r7, r4
 800241c:	f858 6027 	ldr.w	r6, [r8, r7, lsl #2]
 8002420:	2000      	movs	r0, #0
 8002422:	72b0      	strb	r0, [r6, #10]
 8002424:	f000 f817 	bl	8002456 <.text_31>
 8002428:	f858 0027 	ldr.w	r0, [r8, r7, lsl #2]
 800242c:	2200      	movs	r2, #0
 800242e:	7102      	strb	r2, [r0, #4]
 8002430:	7032      	strb	r2, [r6, #0]
 8002432:	4620      	mov	r0, r4
 8002434:	f7ff fe4e 	bl	80020d4 <PRL_DisableRX>
 8002438:	2000      	movs	r0, #0
 800243a:	4e45      	ldr	r6, [pc, #276]	@ (8002550 <.text_38>)
 800243c:	6837      	ldr	r7, [r6, #0]
 800243e:	9000      	str	r0, [sp, #0]
 8002440:	2300      	movs	r3, #0
 8002442:	462a      	mov	r2, r5
 8002444:	4621      	mov	r1, r4
 8002446:	2001      	movs	r0, #1
 8002448:	47b8      	blx	r7
 800244a:	4629      	mov	r1, r5
 800244c:	4620      	mov	r0, r4
 800244e:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 8002452:	f7fe b9a1 	b.w	8000798 <PE_PRL_ResetReceived>

08002456 <.text_31>:
 8002456:	220f      	movs	r2, #15
 8002458:	2103      	movs	r1, #3
 800245a:	1d70      	adds	r0, r6, #5
 800245c:	f000 b893 	b.w	8002586 <__aeabi_memset>

08002460 <PRL_ResetCompleted>:
 8002460:	4a3a      	ldr	r2, [pc, #232]	@ (800254c <.text_37>)
 8002462:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8002466:	2101      	movs	r1, #1
 8002468:	7081      	strb	r1, [r0, #2]
 800246a:	4770      	bx	lr

0800246c <PRL_BistCompleted>:
 800246c:	f7fe b9bc 	b.w	80007e8 <PE_PRL_BistCompleted>

08002470 <PRL_TxCompleted>:
 8002470:	b538      	push	{r3, r4, r5, lr}
 8002472:	4a36      	ldr	r2, [pc, #216]	@ (800254c <.text_37>)
 8002474:	4604      	mov	r4, r0
 8002476:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
 800247a:	7baa      	ldrb	r2, [r5, #14]
 800247c:	2a01      	cmp	r2, #1
 800247e:	d002      	beq.n	8002486 <PRL_TxCompleted+0x16>
 8002480:	2a02      	cmp	r2, #2
 8002482:	d009      	beq.n	8002498 <PRL_TxCompleted+0x28>
 8002484:	e010      	b.n	80024a8 <PRL_TxCompleted+0x38>
 8002486:	b911      	cbnz	r1, 800248e <PRL_TxCompleted+0x1e>
 8002488:	f7fe fa86 	bl	8000998 <PE_PRL_PostReceiveEventComplete>
 800248c:	e001      	b.n	8002492 <PRL_TxCompleted+0x22>
 800248e:	f7fe fa50 	bl	8000932 <PE_PRL_PostReceiveEventError>
 8002492:	2000      	movs	r0, #0
 8002494:	7268      	strb	r0, [r5, #9]
 8002496:	e007      	b.n	80024a8 <PRL_TxCompleted+0x38>
 8002498:	f00f ffb4 	bl	8012404 <USBPD_PHY_GetRetryTimerValue>
 800249c:	0064      	lsls	r4, r4, #1
 800249e:	4601      	mov	r1, r0
 80024a0:	1c64      	adds	r4, r4, #1
 80024a2:	b2e0      	uxtb	r0, r4
 80024a4:	f011 fa74 	bl	8013990 <USBPD_TIM_Start>
 80024a8:	2000      	movs	r0, #0
 80024aa:	73a8      	strb	r0, [r5, #14]
 80024ac:	bd31      	pop	{r0, r4, r5, pc}

080024ae <USBPD_PRL_PrepareExtendedTxChunkSending>:
 80024ae:	b530      	push	{r4, r5, lr}
 80024b0:	4c26      	ldr	r4, [pc, #152]	@ (800254c <.text_37>)
 80024b2:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 80024b6:	8ae5      	ldrh	r5, [r4, #22]
 80024b8:	f248 30ff 	movw	r0, #33791	@ 0x83ff
 80024bc:	4005      	ands	r5, r0
 80024be:	8a20      	ldrh	r0, [r4, #16]
 80024c0:	ea45 25c1 	orr.w	r5, r5, r1, lsl #11
 80024c4:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 80024c8:	f405 457e 	and.w	r5, r5, #65024	@ 0xfe00
 80024cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024d0:	8220      	strh	r0, [r4, #16]
 80024d2:	432a      	orrs	r2, r5
 80024d4:	8b61      	ldrh	r1, [r4, #26]
 80024d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024da:	f361 0004 	bfi	r0, r1, #0, #5
 80024de:	82e2      	strh	r2, [r4, #22]
 80024e0:	8220      	strh	r0, [r4, #16]
 80024e2:	7018      	strb	r0, [r3, #0]
 80024e4:	8a20      	ldrh	r0, [r4, #16]
 80024e6:	0a00      	lsrs	r0, r0, #8
 80024e8:	7058      	strb	r0, [r3, #1]
 80024ea:	8ae0      	ldrh	r0, [r4, #22]
 80024ec:	7098      	strb	r0, [r3, #2]
 80024ee:	8ae1      	ldrh	r1, [r4, #22]
 80024f0:	0a09      	lsrs	r1, r1, #8
 80024f2:	70d9      	strb	r1, [r3, #3]
 80024f4:	bd30      	pop	{r4, r5, pc}

080024f6 <USBPD_PRL_PrepareChunkRequest>:
 80024f6:	b530      	push	{r4, r5, lr}
 80024f8:	4a14      	ldr	r2, [pc, #80]	@ (800254c <.text_37>)
 80024fa:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 80024fe:	8adc      	ldrh	r4, [r3, #22]
 8002500:	8b1d      	ldrh	r5, [r3, #24]
 8002502:	f444 4404 	orr.w	r4, r4, #33792	@ 0x8400
 8002506:	0aed      	lsrs	r5, r5, #11
 8002508:	82dc      	strh	r4, [r3, #22]
 800250a:	1c6d      	adds	r5, r5, #1
 800250c:	02ed      	lsls	r5, r5, #11
 800250e:	f404 4406 	and.w	r4, r4, #34304	@ 0x8600
 8002512:	f405 45f0 	and.w	r5, r5, #30720	@ 0x7800
 8002516:	432c      	orrs	r4, r5
 8002518:	82dc      	strh	r4, [r3, #22]
 800251a:	8a1c      	ldrh	r4, [r3, #16]
 800251c:	8b5d      	ldrh	r5, [r3, #26]
 800251e:	f444 4400 	orr.w	r4, r4, #32768	@ 0x8000
 8002522:	821c      	strh	r4, [r3, #16]
 8002524:	f365 0404 	bfi	r4, r5, #0, #5
 8002528:	821c      	strh	r4, [r3, #16]
 800252a:	2400      	movs	r4, #0
 800252c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8002530:	7104      	strb	r4, [r0, #4]
 8002532:	8a1a      	ldrh	r2, [r3, #16]
 8002534:	700a      	strb	r2, [r1, #0]
 8002536:	8a18      	ldrh	r0, [r3, #16]
 8002538:	0a00      	lsrs	r0, r0, #8
 800253a:	7048      	strb	r0, [r1, #1]
 800253c:	8ad8      	ldrh	r0, [r3, #22]
 800253e:	7088      	strb	r0, [r1, #2]
 8002540:	8ada      	ldrh	r2, [r3, #22]
 8002542:	710c      	strb	r4, [r1, #4]
 8002544:	0a12      	lsrs	r2, r2, #8
 8002546:	714c      	strb	r4, [r1, #5]
 8002548:	70ca      	strb	r2, [r1, #3]
 800254a:	bd30      	pop	{r4, r5, pc}

0800254c <.text_37>:
 800254c:	20000550 	.word	0x20000550

08002550 <.text_38>:
 8002550:	20000000 	.word	0x20000000

08002554 <.text_39>:
 8002554:	5f4c5250 	.word	0x5f4c5250
 8002558:	4e455645 	.word	0x4e455645
 800255c:	58525f54 	.word	0x58525f54
 8002560:	5349445f 	.word	0x5349445f
 8002564:	44524143 	.word	0x44524143
 8002568:	00004445 	.word	0x00004445

0800256c <USBPD_PRL_Init::PRL_PhyCallbacks>:
 800256c:	080020d9 0800240b 08002461 0800246d     . ...$..a$..m$..
 800257c:	08002471 00000000                       q$......

08002584 <.text_41>:
 8002584:	0001      	.short	0x0001

08002586 <__aeabi_memset>:
 8002586:	b470      	push	{r4, r5, r6}
 8002588:	0784      	lsls	r4, r0, #30
 800258a:	d046      	beq.n	800261a <__aeabi_memset+0x94>
 800258c:	1e4c      	subs	r4, r1, #1
 800258e:	2900      	cmp	r1, #0
 8002590:	d041      	beq.n	8002616 <__aeabi_memset+0x90>
 8002592:	b2d5      	uxtb	r5, r2
 8002594:	4603      	mov	r3, r0
 8002596:	e002      	b.n	800259e <__aeabi_memset+0x18>
 8002598:	1e61      	subs	r1, r4, #1
 800259a:	b3e4      	cbz	r4, 8002616 <__aeabi_memset+0x90>
 800259c:	460c      	mov	r4, r1
 800259e:	f803 5b01 	strb.w	r5, [r3], #1
 80025a2:	0799      	lsls	r1, r3, #30
 80025a4:	d1f8      	bne.n	8002598 <__aeabi_memset+0x12>
 80025a6:	2c03      	cmp	r4, #3
 80025a8:	d92e      	bls.n	8002608 <__aeabi_memset+0x82>
 80025aa:	b2d5      	uxtb	r5, r2
 80025ac:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80025b0:	2c0f      	cmp	r4, #15
 80025b2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80025b6:	d919      	bls.n	80025ec <__aeabi_memset+0x66>
 80025b8:	4626      	mov	r6, r4
 80025ba:	f103 0110 	add.w	r1, r3, #16
 80025be:	3e10      	subs	r6, #16
 80025c0:	2e0f      	cmp	r6, #15
 80025c2:	f841 5c10 	str.w	r5, [r1, #-16]
 80025c6:	f841 5c0c 	str.w	r5, [r1, #-12]
 80025ca:	f841 5c08 	str.w	r5, [r1, #-8]
 80025ce:	f841 5c04 	str.w	r5, [r1, #-4]
 80025d2:	f101 0110 	add.w	r1, r1, #16
 80025d6:	d8f2      	bhi.n	80025be <__aeabi_memset+0x38>
 80025d8:	f1a4 0110 	sub.w	r1, r4, #16
 80025dc:	f021 010f 	bic.w	r1, r1, #15
 80025e0:	f004 040f 	and.w	r4, r4, #15
 80025e4:	3110      	adds	r1, #16
 80025e6:	2c03      	cmp	r4, #3
 80025e8:	440b      	add	r3, r1
 80025ea:	d90d      	bls.n	8002608 <__aeabi_memset+0x82>
 80025ec:	461e      	mov	r6, r3
 80025ee:	4621      	mov	r1, r4
 80025f0:	3904      	subs	r1, #4
 80025f2:	2903      	cmp	r1, #3
 80025f4:	f846 5b04 	str.w	r5, [r6], #4
 80025f8:	d8fa      	bhi.n	80025f0 <__aeabi_memset+0x6a>
 80025fa:	1f21      	subs	r1, r4, #4
 80025fc:	f021 0103 	bic.w	r1, r1, #3
 8002600:	3104      	adds	r1, #4
 8002602:	440b      	add	r3, r1
 8002604:	f004 0403 	and.w	r4, r4, #3
 8002608:	b12c      	cbz	r4, 8002616 <__aeabi_memset+0x90>
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	441c      	add	r4, r3
 800260e:	f803 2b01 	strb.w	r2, [r3], #1
 8002612:	42a3      	cmp	r3, r4
 8002614:	d1fb      	bne.n	800260e <__aeabi_memset+0x88>
 8002616:	bc70      	pop	{r4, r5, r6}
 8002618:	4770      	bx	lr
 800261a:	460c      	mov	r4, r1
 800261c:	4603      	mov	r3, r0
 800261e:	e7c2      	b.n	80025a6 <__aeabi_memset+0x20>

08002620 <memchr>:
 8002620:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8002624:	2a10      	cmp	r2, #16
 8002626:	db2b      	blt.n	8002680 <memchr+0x60>
 8002628:	f010 0f07 	tst.w	r0, #7
 800262c:	d008      	beq.n	8002640 <memchr+0x20>
 800262e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002632:	3a01      	subs	r2, #1
 8002634:	428b      	cmp	r3, r1
 8002636:	d02d      	beq.n	8002694 <memchr+0x74>
 8002638:	f010 0f07 	tst.w	r0, #7
 800263c:	b342      	cbz	r2, 8002690 <memchr+0x70>
 800263e:	d1f6      	bne.n	800262e <memchr+0xe>
 8002640:	b4f0      	push	{r4, r5, r6, r7}
 8002642:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8002646:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800264a:	f022 0407 	bic.w	r4, r2, #7
 800264e:	f07f 0700 	mvns.w	r7, #0
 8002652:	2300      	movs	r3, #0
 8002654:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8002658:	3c08      	subs	r4, #8
 800265a:	ea85 0501 	eor.w	r5, r5, r1
 800265e:	ea86 0601 	eor.w	r6, r6, r1
 8002662:	fa85 f547 	uadd8	r5, r5, r7
 8002666:	faa3 f587 	sel	r5, r3, r7
 800266a:	fa86 f647 	uadd8	r6, r6, r7
 800266e:	faa5 f687 	sel	r6, r5, r7
 8002672:	b98e      	cbnz	r6, 8002698 <memchr+0x78>
 8002674:	d1ee      	bne.n	8002654 <memchr+0x34>
 8002676:	bcf0      	pop	{r4, r5, r6, r7}
 8002678:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800267c:	f002 0207 	and.w	r2, r2, #7
 8002680:	b132      	cbz	r2, 8002690 <memchr+0x70>
 8002682:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002686:	3a01      	subs	r2, #1
 8002688:	ea83 0301 	eor.w	r3, r3, r1
 800268c:	b113      	cbz	r3, 8002694 <memchr+0x74>
 800268e:	d1f8      	bne.n	8002682 <memchr+0x62>
 8002690:	2000      	movs	r0, #0
 8002692:	4770      	bx	lr
 8002694:	3801      	subs	r0, #1
 8002696:	4770      	bx	lr
 8002698:	2d00      	cmp	r5, #0
 800269a:	bf06      	itte	eq
 800269c:	4635      	moveq	r5, r6
 800269e:	3803      	subeq	r0, #3
 80026a0:	3807      	subne	r0, #7
 80026a2:	f015 0f01 	tst.w	r5, #1
 80026a6:	d107      	bne.n	80026b8 <memchr+0x98>
 80026a8:	3001      	adds	r0, #1
 80026aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80026ae:	bf02      	ittt	eq
 80026b0:	3001      	addeq	r0, #1
 80026b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80026b6:	3001      	addeq	r0, #1
 80026b8:	bcf0      	pop	{r4, r5, r6, r7}
 80026ba:	3801      	subs	r0, #1
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop

080026c0 <strlen>:
 80026c0:	4603      	mov	r3, r0
 80026c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80026c6:	2a00      	cmp	r2, #0
 80026c8:	d1fb      	bne.n	80026c2 <strlen+0x2>
 80026ca:	1a18      	subs	r0, r3, r0
 80026cc:	3801      	subs	r0, #1
 80026ce:	4770      	bx	lr

080026d0 <strcmp>:
 80026d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80026d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80026d8:	2a01      	cmp	r2, #1
 80026da:	bf28      	it	cs
 80026dc:	429a      	cmpcs	r2, r3
 80026de:	d0f7      	beq.n	80026d0 <strcmp>
 80026e0:	1ad0      	subs	r0, r2, r3
 80026e2:	4770      	bx	lr

080026e4 <__aeabi_drsub>:
 80026e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80026e8:	e002      	b.n	80026f0 <__adddf3>
 80026ea:	bf00      	nop

080026ec <__aeabi_dsub>:
 80026ec:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080026f0 <__adddf3>:
 80026f0:	b530      	push	{r4, r5, lr}
 80026f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80026f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80026fa:	ea94 0f05 	teq	r4, r5
 80026fe:	bf08      	it	eq
 8002700:	ea90 0f02 	teqeq	r0, r2
 8002704:	bf1f      	itttt	ne
 8002706:	ea54 0c00 	orrsne.w	ip, r4, r0
 800270a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800270e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8002712:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8002716:	f000 80e2 	beq.w	80028de <__adddf3+0x1ee>
 800271a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800271e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8002722:	bfb8      	it	lt
 8002724:	426d      	neglt	r5, r5
 8002726:	dd0c      	ble.n	8002742 <__adddf3+0x52>
 8002728:	442c      	add	r4, r5
 800272a:	ea80 0202 	eor.w	r2, r0, r2
 800272e:	ea81 0303 	eor.w	r3, r1, r3
 8002732:	ea82 0000 	eor.w	r0, r2, r0
 8002736:	ea83 0101 	eor.w	r1, r3, r1
 800273a:	ea80 0202 	eor.w	r2, r0, r2
 800273e:	ea81 0303 	eor.w	r3, r1, r3
 8002742:	2d36      	cmp	r5, #54	@ 0x36
 8002744:	bf88      	it	hi
 8002746:	bd30      	pophi	{r4, r5, pc}
 8002748:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800274c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8002750:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8002754:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8002758:	d002      	beq.n	8002760 <__adddf3+0x70>
 800275a:	4240      	negs	r0, r0
 800275c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002760:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8002764:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002768:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800276c:	d002      	beq.n	8002774 <__adddf3+0x84>
 800276e:	4252      	negs	r2, r2
 8002770:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002774:	ea94 0f05 	teq	r4, r5
 8002778:	f000 80a7 	beq.w	80028ca <__adddf3+0x1da>
 800277c:	f1a4 0401 	sub.w	r4, r4, #1
 8002780:	f1d5 0e20 	rsbs	lr, r5, #32
 8002784:	db0d      	blt.n	80027a2 <__adddf3+0xb2>
 8002786:	fa02 fc0e 	lsl.w	ip, r2, lr
 800278a:	fa22 f205 	lsr.w	r2, r2, r5
 800278e:	1880      	adds	r0, r0, r2
 8002790:	f141 0100 	adc.w	r1, r1, #0
 8002794:	fa03 f20e 	lsl.w	r2, r3, lr
 8002798:	1880      	adds	r0, r0, r2
 800279a:	fa43 f305 	asr.w	r3, r3, r5
 800279e:	4159      	adcs	r1, r3
 80027a0:	e00e      	b.n	80027c0 <__adddf3+0xd0>
 80027a2:	f1a5 0520 	sub.w	r5, r5, #32
 80027a6:	f10e 0e20 	add.w	lr, lr, #32
 80027aa:	2a01      	cmp	r2, #1
 80027ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80027b0:	bf28      	it	cs
 80027b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80027b6:	fa43 f305 	asr.w	r3, r3, r5
 80027ba:	18c0      	adds	r0, r0, r3
 80027bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80027c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80027c4:	d507      	bpl.n	80027d6 <__adddf3+0xe6>
 80027c6:	f04f 0e00 	mov.w	lr, #0
 80027ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80027ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80027d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80027d6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80027da:	d31b      	bcc.n	8002814 <__adddf3+0x124>
 80027dc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80027e0:	d30c      	bcc.n	80027fc <__adddf3+0x10c>
 80027e2:	0849      	lsrs	r1, r1, #1
 80027e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80027e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80027ec:	f104 0401 	add.w	r4, r4, #1
 80027f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80027f4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80027f8:	f080 809a 	bcs.w	8002930 <__adddf3+0x240>
 80027fc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8002800:	bf08      	it	eq
 8002802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8002806:	f150 0000 	adcs.w	r0, r0, #0
 800280a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800280e:	ea41 0105 	orr.w	r1, r1, r5
 8002812:	bd30      	pop	{r4, r5, pc}
 8002814:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8002818:	4140      	adcs	r0, r0
 800281a:	eb41 0101 	adc.w	r1, r1, r1
 800281e:	3c01      	subs	r4, #1
 8002820:	bf28      	it	cs
 8002822:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8002826:	d2e9      	bcs.n	80027fc <__adddf3+0x10c>
 8002828:	f091 0f00 	teq	r1, #0
 800282c:	bf04      	itt	eq
 800282e:	4601      	moveq	r1, r0
 8002830:	2000      	moveq	r0, #0
 8002832:	fab1 f381 	clz	r3, r1
 8002836:	bf08      	it	eq
 8002838:	3320      	addeq	r3, #32
 800283a:	f1a3 030b 	sub.w	r3, r3, #11
 800283e:	f1b3 0220 	subs.w	r2, r3, #32
 8002842:	da0c      	bge.n	800285e <__adddf3+0x16e>
 8002844:	320c      	adds	r2, #12
 8002846:	dd08      	ble.n	800285a <__adddf3+0x16a>
 8002848:	f102 0c14 	add.w	ip, r2, #20
 800284c:	f1c2 020c 	rsb	r2, r2, #12
 8002850:	fa01 f00c 	lsl.w	r0, r1, ip
 8002854:	fa21 f102 	lsr.w	r1, r1, r2
 8002858:	e00c      	b.n	8002874 <__adddf3+0x184>
 800285a:	f102 0214 	add.w	r2, r2, #20
 800285e:	bfd8      	it	le
 8002860:	f1c2 0c20 	rsble	ip, r2, #32
 8002864:	fa01 f102 	lsl.w	r1, r1, r2
 8002868:	fa20 fc0c 	lsr.w	ip, r0, ip
 800286c:	bfdc      	itt	le
 800286e:	ea41 010c 	orrle.w	r1, r1, ip
 8002872:	4090      	lslle	r0, r2
 8002874:	1ae4      	subs	r4, r4, r3
 8002876:	bfa2      	ittt	ge
 8002878:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800287c:	4329      	orrge	r1, r5
 800287e:	bd30      	popge	{r4, r5, pc}
 8002880:	ea6f 0404 	mvn.w	r4, r4
 8002884:	3c1f      	subs	r4, #31
 8002886:	da1c      	bge.n	80028c2 <__adddf3+0x1d2>
 8002888:	340c      	adds	r4, #12
 800288a:	dc0e      	bgt.n	80028aa <__adddf3+0x1ba>
 800288c:	f104 0414 	add.w	r4, r4, #20
 8002890:	f1c4 0220 	rsb	r2, r4, #32
 8002894:	fa20 f004 	lsr.w	r0, r0, r4
 8002898:	fa01 f302 	lsl.w	r3, r1, r2
 800289c:	ea40 0003 	orr.w	r0, r0, r3
 80028a0:	fa21 f304 	lsr.w	r3, r1, r4
 80028a4:	ea45 0103 	orr.w	r1, r5, r3
 80028a8:	bd30      	pop	{r4, r5, pc}
 80028aa:	f1c4 040c 	rsb	r4, r4, #12
 80028ae:	f1c4 0220 	rsb	r2, r4, #32
 80028b2:	fa20 f002 	lsr.w	r0, r0, r2
 80028b6:	fa01 f304 	lsl.w	r3, r1, r4
 80028ba:	ea40 0003 	orr.w	r0, r0, r3
 80028be:	4629      	mov	r1, r5
 80028c0:	bd30      	pop	{r4, r5, pc}
 80028c2:	fa21 f004 	lsr.w	r0, r1, r4
 80028c6:	4629      	mov	r1, r5
 80028c8:	bd30      	pop	{r4, r5, pc}
 80028ca:	f094 0f00 	teq	r4, #0
 80028ce:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80028d2:	bf06      	itte	eq
 80028d4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80028d8:	3401      	addeq	r4, #1
 80028da:	3d01      	subne	r5, #1
 80028dc:	e74e      	b.n	800277c <__adddf3+0x8c>
 80028de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80028e2:	bf18      	it	ne
 80028e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80028e8:	d029      	beq.n	800293e <__adddf3+0x24e>
 80028ea:	ea94 0f05 	teq	r4, r5
 80028ee:	bf08      	it	eq
 80028f0:	ea90 0f02 	teqeq	r0, r2
 80028f4:	d005      	beq.n	8002902 <__adddf3+0x212>
 80028f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80028fa:	bf04      	itt	eq
 80028fc:	4619      	moveq	r1, r3
 80028fe:	4610      	moveq	r0, r2
 8002900:	bd30      	pop	{r4, r5, pc}
 8002902:	ea91 0f03 	teq	r1, r3
 8002906:	bf1e      	ittt	ne
 8002908:	2100      	movne	r1, #0
 800290a:	2000      	movne	r0, #0
 800290c:	bd30      	popne	{r4, r5, pc}
 800290e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8002912:	d105      	bne.n	8002920 <__adddf3+0x230>
 8002914:	0040      	lsls	r0, r0, #1
 8002916:	4149      	adcs	r1, r1
 8002918:	bf28      	it	cs
 800291a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800291e:	bd30      	pop	{r4, r5, pc}
 8002920:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8002924:	bf3c      	itt	cc
 8002926:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800292a:	bd30      	popcc	{r4, r5, pc}
 800292c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8002930:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8002934:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002938:	f04f 0000 	mov.w	r0, #0
 800293c:	bd30      	pop	{r4, r5, pc}
 800293e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8002942:	bf1a      	itte	ne
 8002944:	4619      	movne	r1, r3
 8002946:	4610      	movne	r0, r2
 8002948:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800294c:	bf1c      	itt	ne
 800294e:	460b      	movne	r3, r1
 8002950:	4602      	movne	r2, r0
 8002952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8002956:	bf06      	itte	eq
 8002958:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800295c:	ea91 0f03 	teqeq	r1, r3
 8002960:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8002964:	bd30      	pop	{r4, r5, pc}
 8002966:	bf00      	nop

08002968 <__aeabi_ui2d>:
 8002968:	f090 0f00 	teq	r0, #0
 800296c:	bf04      	itt	eq
 800296e:	2100      	moveq	r1, #0
 8002970:	4770      	bxeq	lr
 8002972:	b530      	push	{r4, r5, lr}
 8002974:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8002978:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800297c:	f04f 0500 	mov.w	r5, #0
 8002980:	f04f 0100 	mov.w	r1, #0
 8002984:	e750      	b.n	8002828 <__adddf3+0x138>
 8002986:	bf00      	nop

08002988 <__aeabi_i2d>:
 8002988:	f090 0f00 	teq	r0, #0
 800298c:	bf04      	itt	eq
 800298e:	2100      	moveq	r1, #0
 8002990:	4770      	bxeq	lr
 8002992:	b530      	push	{r4, r5, lr}
 8002994:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8002998:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800299c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80029a0:	bf48      	it	mi
 80029a2:	4240      	negmi	r0, r0
 80029a4:	f04f 0100 	mov.w	r1, #0
 80029a8:	e73e      	b.n	8002828 <__adddf3+0x138>
 80029aa:	bf00      	nop

080029ac <__aeabi_f2d>:
 80029ac:	0042      	lsls	r2, r0, #1
 80029ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80029b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80029b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80029ba:	bf1f      	itttt	ne
 80029bc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80029c0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80029c4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80029c8:	4770      	bxne	lr
 80029ca:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80029ce:	bf08      	it	eq
 80029d0:	4770      	bxeq	lr
 80029d2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80029d6:	bf04      	itt	eq
 80029d8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80029dc:	4770      	bxeq	lr
 80029de:	b530      	push	{r4, r5, lr}
 80029e0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80029e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80029e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80029ec:	e71c      	b.n	8002828 <__adddf3+0x138>
 80029ee:	bf00      	nop

080029f0 <__aeabi_ul2d>:
 80029f0:	ea50 0201 	orrs.w	r2, r0, r1
 80029f4:	bf08      	it	eq
 80029f6:	4770      	bxeq	lr
 80029f8:	b530      	push	{r4, r5, lr}
 80029fa:	f04f 0500 	mov.w	r5, #0
 80029fe:	e00a      	b.n	8002a16 <__aeabi_l2d+0x16>

08002a00 <__aeabi_l2d>:
 8002a00:	ea50 0201 	orrs.w	r2, r0, r1
 8002a04:	bf08      	it	eq
 8002a06:	4770      	bxeq	lr
 8002a08:	b530      	push	{r4, r5, lr}
 8002a0a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8002a0e:	d502      	bpl.n	8002a16 <__aeabi_l2d+0x16>
 8002a10:	4240      	negs	r0, r0
 8002a12:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002a16:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8002a1a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8002a1e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8002a22:	f43f aed8 	beq.w	80027d6 <__adddf3+0xe6>
 8002a26:	f04f 0203 	mov.w	r2, #3
 8002a2a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8002a2e:	bf18      	it	ne
 8002a30:	3203      	addne	r2, #3
 8002a32:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8002a36:	bf18      	it	ne
 8002a38:	3203      	addne	r2, #3
 8002a3a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8002a3e:	f1c2 0320 	rsb	r3, r2, #32
 8002a42:	fa00 fc03 	lsl.w	ip, r0, r3
 8002a46:	fa20 f002 	lsr.w	r0, r0, r2
 8002a4a:	fa01 fe03 	lsl.w	lr, r1, r3
 8002a4e:	ea40 000e 	orr.w	r0, r0, lr
 8002a52:	fa21 f102 	lsr.w	r1, r1, r2
 8002a56:	4414      	add	r4, r2
 8002a58:	e6bd      	b.n	80027d6 <__adddf3+0xe6>
 8002a5a:	bf00      	nop

08002a5c <__aeabi_dmul>:
 8002a5c:	b570      	push	{r4, r5, r6, lr}
 8002a5e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8002a62:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8002a66:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8002a6a:	bf1d      	ittte	ne
 8002a6c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002a70:	ea94 0f0c 	teqne	r4, ip
 8002a74:	ea95 0f0c 	teqne	r5, ip
 8002a78:	f000 f8de 	bleq	8002c38 <__aeabi_dmul+0x1dc>
 8002a7c:	442c      	add	r4, r5
 8002a7e:	ea81 0603 	eor.w	r6, r1, r3
 8002a82:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8002a86:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8002a8a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8002a8e:	bf18      	it	ne
 8002a90:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8002a94:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8002a98:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a9c:	d038      	beq.n	8002b10 <__aeabi_dmul+0xb4>
 8002a9e:	fba0 ce02 	umull	ip, lr, r0, r2
 8002aa2:	f04f 0500 	mov.w	r5, #0
 8002aa6:	fbe1 e502 	umlal	lr, r5, r1, r2
 8002aaa:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8002aae:	fbe0 e503 	umlal	lr, r5, r0, r3
 8002ab2:	f04f 0600 	mov.w	r6, #0
 8002ab6:	fbe1 5603 	umlal	r5, r6, r1, r3
 8002aba:	f09c 0f00 	teq	ip, #0
 8002abe:	bf18      	it	ne
 8002ac0:	f04e 0e01 	orrne.w	lr, lr, #1
 8002ac4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8002ac8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8002acc:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8002ad0:	d204      	bcs.n	8002adc <__aeabi_dmul+0x80>
 8002ad2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8002ad6:	416d      	adcs	r5, r5
 8002ad8:	eb46 0606 	adc.w	r6, r6, r6
 8002adc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8002ae0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8002ae4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8002ae8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8002aec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8002af0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8002af4:	bf88      	it	hi
 8002af6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8002afa:	d81e      	bhi.n	8002b3a <__aeabi_dmul+0xde>
 8002afc:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8002b00:	bf08      	it	eq
 8002b02:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8002b06:	f150 0000 	adcs.w	r0, r0, #0
 8002b0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002b0e:	bd70      	pop	{r4, r5, r6, pc}
 8002b10:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8002b14:	ea46 0101 	orr.w	r1, r6, r1
 8002b18:	ea40 0002 	orr.w	r0, r0, r2
 8002b1c:	ea81 0103 	eor.w	r1, r1, r3
 8002b20:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8002b24:	bfc2      	ittt	gt
 8002b26:	ebd4 050c 	rsbsgt	r5, r4, ip
 8002b2a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8002b2e:	bd70      	popgt	{r4, r5, r6, pc}
 8002b30:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8002b34:	f04f 0e00 	mov.w	lr, #0
 8002b38:	3c01      	subs	r4, #1
 8002b3a:	f300 80ab 	bgt.w	8002c94 <__aeabi_dmul+0x238>
 8002b3e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8002b42:	bfde      	ittt	le
 8002b44:	2000      	movle	r0, #0
 8002b46:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8002b4a:	bd70      	pople	{r4, r5, r6, pc}
 8002b4c:	f1c4 0400 	rsb	r4, r4, #0
 8002b50:	3c20      	subs	r4, #32
 8002b52:	da35      	bge.n	8002bc0 <__aeabi_dmul+0x164>
 8002b54:	340c      	adds	r4, #12
 8002b56:	dc1b      	bgt.n	8002b90 <__aeabi_dmul+0x134>
 8002b58:	f104 0414 	add.w	r4, r4, #20
 8002b5c:	f1c4 0520 	rsb	r5, r4, #32
 8002b60:	fa00 f305 	lsl.w	r3, r0, r5
 8002b64:	fa20 f004 	lsr.w	r0, r0, r4
 8002b68:	fa01 f205 	lsl.w	r2, r1, r5
 8002b6c:	ea40 0002 	orr.w	r0, r0, r2
 8002b70:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8002b74:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8002b78:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002b7c:	fa21 f604 	lsr.w	r6, r1, r4
 8002b80:	eb42 0106 	adc.w	r1, r2, r6
 8002b84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002b88:	bf08      	it	eq
 8002b8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002b8e:	bd70      	pop	{r4, r5, r6, pc}
 8002b90:	f1c4 040c 	rsb	r4, r4, #12
 8002b94:	f1c4 0520 	rsb	r5, r4, #32
 8002b98:	fa00 f304 	lsl.w	r3, r0, r4
 8002b9c:	fa20 f005 	lsr.w	r0, r0, r5
 8002ba0:	fa01 f204 	lsl.w	r2, r1, r4
 8002ba4:	ea40 0002 	orr.w	r0, r0, r2
 8002ba8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8002bac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002bb0:	f141 0100 	adc.w	r1, r1, #0
 8002bb4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002bb8:	bf08      	it	eq
 8002bba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002bbe:	bd70      	pop	{r4, r5, r6, pc}
 8002bc0:	f1c4 0520 	rsb	r5, r4, #32
 8002bc4:	fa00 f205 	lsl.w	r2, r0, r5
 8002bc8:	ea4e 0e02 	orr.w	lr, lr, r2
 8002bcc:	fa20 f304 	lsr.w	r3, r0, r4
 8002bd0:	fa01 f205 	lsl.w	r2, r1, r5
 8002bd4:	ea43 0302 	orr.w	r3, r3, r2
 8002bd8:	fa21 f004 	lsr.w	r0, r1, r4
 8002bdc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8002be0:	fa21 f204 	lsr.w	r2, r1, r4
 8002be4:	ea20 0002 	bic.w	r0, r0, r2
 8002be8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8002bec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002bf0:	bf08      	it	eq
 8002bf2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002bf6:	bd70      	pop	{r4, r5, r6, pc}
 8002bf8:	f094 0f00 	teq	r4, #0
 8002bfc:	d10f      	bne.n	8002c1e <__aeabi_dmul+0x1c2>
 8002bfe:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8002c02:	0040      	lsls	r0, r0, #1
 8002c04:	eb41 0101 	adc.w	r1, r1, r1
 8002c08:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8002c0c:	bf08      	it	eq
 8002c0e:	3c01      	subeq	r4, #1
 8002c10:	d0f7      	beq.n	8002c02 <__aeabi_dmul+0x1a6>
 8002c12:	ea41 0106 	orr.w	r1, r1, r6
 8002c16:	f095 0f00 	teq	r5, #0
 8002c1a:	bf18      	it	ne
 8002c1c:	4770      	bxne	lr
 8002c1e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8002c22:	0052      	lsls	r2, r2, #1
 8002c24:	eb43 0303 	adc.w	r3, r3, r3
 8002c28:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8002c2c:	bf08      	it	eq
 8002c2e:	3d01      	subeq	r5, #1
 8002c30:	d0f7      	beq.n	8002c22 <__aeabi_dmul+0x1c6>
 8002c32:	ea43 0306 	orr.w	r3, r3, r6
 8002c36:	4770      	bx	lr
 8002c38:	ea94 0f0c 	teq	r4, ip
 8002c3c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8002c40:	bf18      	it	ne
 8002c42:	ea95 0f0c 	teqne	r5, ip
 8002c46:	d00c      	beq.n	8002c62 <__aeabi_dmul+0x206>
 8002c48:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002c4c:	bf18      	it	ne
 8002c4e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002c52:	d1d1      	bne.n	8002bf8 <__aeabi_dmul+0x19c>
 8002c54:	ea81 0103 	eor.w	r1, r1, r3
 8002c58:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8002c5c:	f04f 0000 	mov.w	r0, #0
 8002c60:	bd70      	pop	{r4, r5, r6, pc}
 8002c62:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002c66:	bf06      	itte	eq
 8002c68:	4610      	moveq	r0, r2
 8002c6a:	4619      	moveq	r1, r3
 8002c6c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002c70:	d019      	beq.n	8002ca6 <__aeabi_dmul+0x24a>
 8002c72:	ea94 0f0c 	teq	r4, ip
 8002c76:	d102      	bne.n	8002c7e <__aeabi_dmul+0x222>
 8002c78:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8002c7c:	d113      	bne.n	8002ca6 <__aeabi_dmul+0x24a>
 8002c7e:	ea95 0f0c 	teq	r5, ip
 8002c82:	d105      	bne.n	8002c90 <__aeabi_dmul+0x234>
 8002c84:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8002c88:	bf1c      	itt	ne
 8002c8a:	4610      	movne	r0, r2
 8002c8c:	4619      	movne	r1, r3
 8002c8e:	d10a      	bne.n	8002ca6 <__aeabi_dmul+0x24a>
 8002c90:	ea81 0103 	eor.w	r1, r1, r3
 8002c94:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8002c98:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8002c9c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002ca0:	f04f 0000 	mov.w	r0, #0
 8002ca4:	bd70      	pop	{r4, r5, r6, pc}
 8002ca6:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8002caa:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8002cae:	bd70      	pop	{r4, r5, r6, pc}

08002cb0 <__aeabi_ddiv>:
 8002cb0:	b570      	push	{r4, r5, r6, lr}
 8002cb2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8002cb6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8002cba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8002cbe:	bf1d      	ittte	ne
 8002cc0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002cc4:	ea94 0f0c 	teqne	r4, ip
 8002cc8:	ea95 0f0c 	teqne	r5, ip
 8002ccc:	f000 f8a7 	bleq	8002e1e <__aeabi_ddiv+0x16e>
 8002cd0:	eba4 0405 	sub.w	r4, r4, r5
 8002cd4:	ea81 0e03 	eor.w	lr, r1, r3
 8002cd8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8002cdc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8002ce0:	f000 8088 	beq.w	8002df4 <__aeabi_ddiv+0x144>
 8002ce4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002ce8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8002cec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8002cf0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8002cf4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8002cf8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8002cfc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8002d00:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8002d04:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8002d08:	429d      	cmp	r5, r3
 8002d0a:	bf08      	it	eq
 8002d0c:	4296      	cmpeq	r6, r2
 8002d0e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8002d12:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8002d16:	d202      	bcs.n	8002d1e <__aeabi_ddiv+0x6e>
 8002d18:	085b      	lsrs	r3, r3, #1
 8002d1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8002d1e:	1ab6      	subs	r6, r6, r2
 8002d20:	eb65 0503 	sbc.w	r5, r5, r3
 8002d24:	085b      	lsrs	r3, r3, #1
 8002d26:	ea4f 0232 	mov.w	r2, r2, rrx
 8002d2a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8002d2e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8002d32:	ebb6 0e02 	subs.w	lr, r6, r2
 8002d36:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002d3a:	bf22      	ittt	cs
 8002d3c:	1ab6      	subcs	r6, r6, r2
 8002d3e:	4675      	movcs	r5, lr
 8002d40:	ea40 000c 	orrcs.w	r0, r0, ip
 8002d44:	085b      	lsrs	r3, r3, #1
 8002d46:	ea4f 0232 	mov.w	r2, r2, rrx
 8002d4a:	ebb6 0e02 	subs.w	lr, r6, r2
 8002d4e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002d52:	bf22      	ittt	cs
 8002d54:	1ab6      	subcs	r6, r6, r2
 8002d56:	4675      	movcs	r5, lr
 8002d58:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8002d5c:	085b      	lsrs	r3, r3, #1
 8002d5e:	ea4f 0232 	mov.w	r2, r2, rrx
 8002d62:	ebb6 0e02 	subs.w	lr, r6, r2
 8002d66:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002d6a:	bf22      	ittt	cs
 8002d6c:	1ab6      	subcs	r6, r6, r2
 8002d6e:	4675      	movcs	r5, lr
 8002d70:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8002d74:	085b      	lsrs	r3, r3, #1
 8002d76:	ea4f 0232 	mov.w	r2, r2, rrx
 8002d7a:	ebb6 0e02 	subs.w	lr, r6, r2
 8002d7e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002d82:	bf22      	ittt	cs
 8002d84:	1ab6      	subcs	r6, r6, r2
 8002d86:	4675      	movcs	r5, lr
 8002d88:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8002d8c:	ea55 0e06 	orrs.w	lr, r5, r6
 8002d90:	d018      	beq.n	8002dc4 <__aeabi_ddiv+0x114>
 8002d92:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8002d96:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8002d9a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8002d9e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8002da2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8002da6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8002daa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8002dae:	d1c0      	bne.n	8002d32 <__aeabi_ddiv+0x82>
 8002db0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8002db4:	d10b      	bne.n	8002dce <__aeabi_ddiv+0x11e>
 8002db6:	ea41 0100 	orr.w	r1, r1, r0
 8002dba:	f04f 0000 	mov.w	r0, #0
 8002dbe:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8002dc2:	e7b6      	b.n	8002d32 <__aeabi_ddiv+0x82>
 8002dc4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8002dc8:	bf04      	itt	eq
 8002dca:	4301      	orreq	r1, r0
 8002dcc:	2000      	moveq	r0, #0
 8002dce:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8002dd2:	bf88      	it	hi
 8002dd4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8002dd8:	f63f aeaf 	bhi.w	8002b3a <__aeabi_dmul+0xde>
 8002ddc:	ebb5 0c03 	subs.w	ip, r5, r3
 8002de0:	bf04      	itt	eq
 8002de2:	ebb6 0c02 	subseq.w	ip, r6, r2
 8002de6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8002dea:	f150 0000 	adcs.w	r0, r0, #0
 8002dee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002df2:	bd70      	pop	{r4, r5, r6, pc}
 8002df4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8002df8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8002dfc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8002e00:	bfc2      	ittt	gt
 8002e02:	ebd4 050c 	rsbsgt	r5, r4, ip
 8002e06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8002e0a:	bd70      	popgt	{r4, r5, r6, pc}
 8002e0c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8002e10:	f04f 0e00 	mov.w	lr, #0
 8002e14:	3c01      	subs	r4, #1
 8002e16:	e690      	b.n	8002b3a <__aeabi_dmul+0xde>
 8002e18:	ea45 0e06 	orr.w	lr, r5, r6
 8002e1c:	e68d      	b.n	8002b3a <__aeabi_dmul+0xde>
 8002e1e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8002e22:	ea94 0f0c 	teq	r4, ip
 8002e26:	bf08      	it	eq
 8002e28:	ea95 0f0c 	teqeq	r5, ip
 8002e2c:	f43f af3b 	beq.w	8002ca6 <__aeabi_dmul+0x24a>
 8002e30:	ea94 0f0c 	teq	r4, ip
 8002e34:	d10a      	bne.n	8002e4c <__aeabi_ddiv+0x19c>
 8002e36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8002e3a:	f47f af34 	bne.w	8002ca6 <__aeabi_dmul+0x24a>
 8002e3e:	ea95 0f0c 	teq	r5, ip
 8002e42:	f47f af25 	bne.w	8002c90 <__aeabi_dmul+0x234>
 8002e46:	4610      	mov	r0, r2
 8002e48:	4619      	mov	r1, r3
 8002e4a:	e72c      	b.n	8002ca6 <__aeabi_dmul+0x24a>
 8002e4c:	ea95 0f0c 	teq	r5, ip
 8002e50:	d106      	bne.n	8002e60 <__aeabi_ddiv+0x1b0>
 8002e52:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8002e56:	f43f aefd 	beq.w	8002c54 <__aeabi_dmul+0x1f8>
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	e722      	b.n	8002ca6 <__aeabi_dmul+0x24a>
 8002e60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002e64:	bf18      	it	ne
 8002e66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002e6a:	f47f aec5 	bne.w	8002bf8 <__aeabi_dmul+0x19c>
 8002e6e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8002e72:	f47f af0d 	bne.w	8002c90 <__aeabi_dmul+0x234>
 8002e76:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8002e7a:	f47f aeeb 	bne.w	8002c54 <__aeabi_dmul+0x1f8>
 8002e7e:	e712      	b.n	8002ca6 <__aeabi_dmul+0x24a>

08002e80 <__gedf2>:
 8002e80:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8002e84:	e006      	b.n	8002e94 <__cmpdf2+0x4>
 8002e86:	bf00      	nop

08002e88 <__ledf2>:
 8002e88:	f04f 0c01 	mov.w	ip, #1
 8002e8c:	e002      	b.n	8002e94 <__cmpdf2+0x4>
 8002e8e:	bf00      	nop

08002e90 <__cmpdf2>:
 8002e90:	f04f 0c01 	mov.w	ip, #1
 8002e94:	f84d cd04 	str.w	ip, [sp, #-4]!
 8002e98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002e9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002ea0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002ea4:	bf18      	it	ne
 8002ea6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8002eaa:	d01b      	beq.n	8002ee4 <__cmpdf2+0x54>
 8002eac:	b001      	add	sp, #4
 8002eae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8002eb2:	bf0c      	ite	eq
 8002eb4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8002eb8:	ea91 0f03 	teqne	r1, r3
 8002ebc:	bf02      	ittt	eq
 8002ebe:	ea90 0f02 	teqeq	r0, r2
 8002ec2:	2000      	moveq	r0, #0
 8002ec4:	4770      	bxeq	lr
 8002ec6:	f110 0f00 	cmn.w	r0, #0
 8002eca:	ea91 0f03 	teq	r1, r3
 8002ece:	bf58      	it	pl
 8002ed0:	4299      	cmppl	r1, r3
 8002ed2:	bf08      	it	eq
 8002ed4:	4290      	cmpeq	r0, r2
 8002ed6:	bf2c      	ite	cs
 8002ed8:	17d8      	asrcs	r0, r3, #31
 8002eda:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8002ede:	f040 0001 	orr.w	r0, r0, #1
 8002ee2:	4770      	bx	lr
 8002ee4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002ee8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002eec:	d102      	bne.n	8002ef4 <__cmpdf2+0x64>
 8002eee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8002ef2:	d107      	bne.n	8002f04 <__cmpdf2+0x74>
 8002ef4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002ef8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002efc:	d1d6      	bne.n	8002eac <__cmpdf2+0x1c>
 8002efe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8002f02:	d0d3      	beq.n	8002eac <__cmpdf2+0x1c>
 8002f04:	f85d 0b04 	ldr.w	r0, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop

08002f0c <__aeabi_cdrcmple>:
 8002f0c:	4684      	mov	ip, r0
 8002f0e:	4610      	mov	r0, r2
 8002f10:	4662      	mov	r2, ip
 8002f12:	468c      	mov	ip, r1
 8002f14:	4619      	mov	r1, r3
 8002f16:	4663      	mov	r3, ip
 8002f18:	e000      	b.n	8002f1c <__aeabi_cdcmpeq>
 8002f1a:	bf00      	nop

08002f1c <__aeabi_cdcmpeq>:
 8002f1c:	b501      	push	{r0, lr}
 8002f1e:	f7ff ffb7 	bl	8002e90 <__cmpdf2>
 8002f22:	2800      	cmp	r0, #0
 8002f24:	bf48      	it	mi
 8002f26:	f110 0f00 	cmnmi.w	r0, #0
 8002f2a:	bd01      	pop	{r0, pc}

08002f2c <__aeabi_dcmpeq>:
 8002f2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002f30:	f7ff fff4 	bl	8002f1c <__aeabi_cdcmpeq>
 8002f34:	bf0c      	ite	eq
 8002f36:	2001      	moveq	r0, #1
 8002f38:	2000      	movne	r0, #0
 8002f3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8002f3e:	bf00      	nop

08002f40 <__aeabi_dcmplt>:
 8002f40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002f44:	f7ff ffea 	bl	8002f1c <__aeabi_cdcmpeq>
 8002f48:	bf34      	ite	cc
 8002f4a:	2001      	movcc	r0, #1
 8002f4c:	2000      	movcs	r0, #0
 8002f4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8002f52:	bf00      	nop

08002f54 <__aeabi_dcmple>:
 8002f54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002f58:	f7ff ffe0 	bl	8002f1c <__aeabi_cdcmpeq>
 8002f5c:	bf94      	ite	ls
 8002f5e:	2001      	movls	r0, #1
 8002f60:	2000      	movhi	r0, #0
 8002f62:	f85d fb08 	ldr.w	pc, [sp], #8
 8002f66:	bf00      	nop

08002f68 <__aeabi_dcmpge>:
 8002f68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002f6c:	f7ff ffce 	bl	8002f0c <__aeabi_cdrcmple>
 8002f70:	bf94      	ite	ls
 8002f72:	2001      	movls	r0, #1
 8002f74:	2000      	movhi	r0, #0
 8002f76:	f85d fb08 	ldr.w	pc, [sp], #8
 8002f7a:	bf00      	nop

08002f7c <__aeabi_dcmpgt>:
 8002f7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002f80:	f7ff ffc4 	bl	8002f0c <__aeabi_cdrcmple>
 8002f84:	bf34      	ite	cc
 8002f86:	2001      	movcc	r0, #1
 8002f88:	2000      	movcs	r0, #0
 8002f8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8002f8e:	bf00      	nop

08002f90 <__aeabi_dcmpun>:
 8002f90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002f94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002f98:	d102      	bne.n	8002fa0 <__aeabi_dcmpun+0x10>
 8002f9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8002f9e:	d10a      	bne.n	8002fb6 <__aeabi_dcmpun+0x26>
 8002fa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002fa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002fa8:	d102      	bne.n	8002fb0 <__aeabi_dcmpun+0x20>
 8002faa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8002fae:	d102      	bne.n	8002fb6 <__aeabi_dcmpun+0x26>
 8002fb0:	f04f 0000 	mov.w	r0, #0
 8002fb4:	4770      	bx	lr
 8002fb6:	f04f 0001 	mov.w	r0, #1
 8002fba:	4770      	bx	lr

08002fbc <__aeabi_d2iz>:
 8002fbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8002fc0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8002fc4:	d215      	bcs.n	8002ff2 <__aeabi_d2iz+0x36>
 8002fc6:	d511      	bpl.n	8002fec <__aeabi_d2iz+0x30>
 8002fc8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8002fcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8002fd0:	d912      	bls.n	8002ff8 <__aeabi_d2iz+0x3c>
 8002fd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8002fd6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002fda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8002fde:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8002fe2:	fa23 f002 	lsr.w	r0, r3, r2
 8002fe6:	bf18      	it	ne
 8002fe8:	4240      	negne	r0, r0
 8002fea:	4770      	bx	lr
 8002fec:	f04f 0000 	mov.w	r0, #0
 8002ff0:	4770      	bx	lr
 8002ff2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8002ff6:	d105      	bne.n	8003004 <__aeabi_d2iz+0x48>
 8002ff8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8002ffc:	bf08      	it	eq
 8002ffe:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8003002:	4770      	bx	lr
 8003004:	f04f 0000 	mov.w	r0, #0
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop

0800300c <__aeabi_d2uiz>:
 800300c:	004a      	lsls	r2, r1, #1
 800300e:	d211      	bcs.n	8003034 <__aeabi_d2uiz+0x28>
 8003010:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8003014:	d211      	bcs.n	800303a <__aeabi_d2uiz+0x2e>
 8003016:	d50d      	bpl.n	8003034 <__aeabi_d2uiz+0x28>
 8003018:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800301c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8003020:	d40e      	bmi.n	8003040 <__aeabi_d2uiz+0x34>
 8003022:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8003026:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800302a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800302e:	fa23 f002 	lsr.w	r0, r3, r2
 8003032:	4770      	bx	lr
 8003034:	f04f 0000 	mov.w	r0, #0
 8003038:	4770      	bx	lr
 800303a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800303e:	d102      	bne.n	8003046 <__aeabi_d2uiz+0x3a>
 8003040:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003044:	4770      	bx	lr
 8003046:	f04f 0000 	mov.w	r0, #0
 800304a:	4770      	bx	lr

0800304c <__aeabi_d2f>:
 800304c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8003050:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8003054:	bf24      	itt	cs
 8003056:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800305a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800305e:	d90d      	bls.n	800307c <__aeabi_d2f+0x30>
 8003060:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8003064:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8003068:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800306c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8003070:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8003074:	bf08      	it	eq
 8003076:	f020 0001 	biceq.w	r0, r0, #1
 800307a:	4770      	bx	lr
 800307c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8003080:	d121      	bne.n	80030c6 <__aeabi_d2f+0x7a>
 8003082:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8003086:	bfbc      	itt	lt
 8003088:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800308c:	4770      	bxlt	lr
 800308e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8003092:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8003096:	f1c2 0218 	rsb	r2, r2, #24
 800309a:	f1c2 0c20 	rsb	ip, r2, #32
 800309e:	fa10 f30c 	lsls.w	r3, r0, ip
 80030a2:	fa20 f002 	lsr.w	r0, r0, r2
 80030a6:	bf18      	it	ne
 80030a8:	f040 0001 	orrne.w	r0, r0, #1
 80030ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80030b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80030b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80030b8:	ea40 000c 	orr.w	r0, r0, ip
 80030bc:	fa23 f302 	lsr.w	r3, r3, r2
 80030c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80030c4:	e7cc      	b.n	8003060 <__aeabi_d2f+0x14>
 80030c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80030ca:	d107      	bne.n	80030dc <__aeabi_d2f+0x90>
 80030cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80030d0:	bf1e      	ittt	ne
 80030d2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80030d6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80030da:	4770      	bxne	lr
 80030dc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80030e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80030e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop

080030ec <__aeabi_uldivmod>:
 80030ec:	b953      	cbnz	r3, 8003104 <__aeabi_uldivmod+0x18>
 80030ee:	b94a      	cbnz	r2, 8003104 <__aeabi_uldivmod+0x18>
 80030f0:	2900      	cmp	r1, #0
 80030f2:	bf08      	it	eq
 80030f4:	2800      	cmpeq	r0, #0
 80030f6:	bf1c      	itt	ne
 80030f8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80030fc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8003100:	f000 b9a0 	b.w	8003444 <__aeabi_idiv0>
 8003104:	f1ad 0c08 	sub.w	ip, sp, #8
 8003108:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800310c:	f000 f83c 	bl	8003188 <__udivmoddi4>
 8003110:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003114:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003118:	b004      	add	sp, #16
 800311a:	4770      	bx	lr

0800311c <__aeabi_d2lz>:
 800311c:	b538      	push	{r3, r4, r5, lr}
 800311e:	2200      	movs	r2, #0
 8003120:	2300      	movs	r3, #0
 8003122:	4604      	mov	r4, r0
 8003124:	460d      	mov	r5, r1
 8003126:	f7ff ff0b 	bl	8002f40 <__aeabi_dcmplt>
 800312a:	b928      	cbnz	r0, 8003138 <__aeabi_d2lz+0x1c>
 800312c:	4620      	mov	r0, r4
 800312e:	4629      	mov	r1, r5
 8003130:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003134:	f000 b80a 	b.w	800314c <__aeabi_d2ulz>
 8003138:	4620      	mov	r0, r4
 800313a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800313e:	f000 f805 	bl	800314c <__aeabi_d2ulz>
 8003142:	4240      	negs	r0, r0
 8003144:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003148:	bd38      	pop	{r3, r4, r5, pc}
 800314a:	bf00      	nop

0800314c <__aeabi_d2ulz>:
 800314c:	b5d0      	push	{r4, r6, r7, lr}
 800314e:	4b0c      	ldr	r3, [pc, #48]	@ (8003180 <__aeabi_d2ulz+0x34>)
 8003150:	2200      	movs	r2, #0
 8003152:	4606      	mov	r6, r0
 8003154:	460f      	mov	r7, r1
 8003156:	f7ff fc81 	bl	8002a5c <__aeabi_dmul>
 800315a:	f7ff ff57 	bl	800300c <__aeabi_d2uiz>
 800315e:	4604      	mov	r4, r0
 8003160:	f7ff fc02 	bl	8002968 <__aeabi_ui2d>
 8003164:	4b07      	ldr	r3, [pc, #28]	@ (8003184 <__aeabi_d2ulz+0x38>)
 8003166:	2200      	movs	r2, #0
 8003168:	f7ff fc78 	bl	8002a5c <__aeabi_dmul>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	4630      	mov	r0, r6
 8003172:	4639      	mov	r1, r7
 8003174:	f7ff faba 	bl	80026ec <__aeabi_dsub>
 8003178:	f7ff ff48 	bl	800300c <__aeabi_d2uiz>
 800317c:	4621      	mov	r1, r4
 800317e:	bdd0      	pop	{r4, r6, r7, pc}
 8003180:	3df00000 	.word	0x3df00000
 8003184:	41f00000 	.word	0x41f00000

08003188 <__udivmoddi4>:
 8003188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800318c:	9d08      	ldr	r5, [sp, #32]
 800318e:	460c      	mov	r4, r1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d14e      	bne.n	8003232 <__udivmoddi4+0xaa>
 8003194:	4694      	mov	ip, r2
 8003196:	458c      	cmp	ip, r1
 8003198:	4686      	mov	lr, r0
 800319a:	fab2 f282 	clz	r2, r2
 800319e:	d962      	bls.n	8003266 <__udivmoddi4+0xde>
 80031a0:	b14a      	cbz	r2, 80031b6 <__udivmoddi4+0x2e>
 80031a2:	f1c2 0320 	rsb	r3, r2, #32
 80031a6:	4091      	lsls	r1, r2
 80031a8:	fa20 f303 	lsr.w	r3, r0, r3
 80031ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80031b0:	4319      	orrs	r1, r3
 80031b2:	fa00 fe02 	lsl.w	lr, r0, r2
 80031b6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80031ba:	fa1f f68c 	uxth.w	r6, ip
 80031be:	fbb1 f4f7 	udiv	r4, r1, r7
 80031c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80031c6:	fb07 1114 	mls	r1, r7, r4, r1
 80031ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80031ce:	fb04 f106 	mul.w	r1, r4, r6
 80031d2:	4299      	cmp	r1, r3
 80031d4:	d90a      	bls.n	80031ec <__udivmoddi4+0x64>
 80031d6:	eb1c 0303 	adds.w	r3, ip, r3
 80031da:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80031de:	f080 8112 	bcs.w	8003406 <__udivmoddi4+0x27e>
 80031e2:	4299      	cmp	r1, r3
 80031e4:	f240 810f 	bls.w	8003406 <__udivmoddi4+0x27e>
 80031e8:	3c02      	subs	r4, #2
 80031ea:	4463      	add	r3, ip
 80031ec:	1a59      	subs	r1, r3, r1
 80031ee:	fa1f f38e 	uxth.w	r3, lr
 80031f2:	fbb1 f0f7 	udiv	r0, r1, r7
 80031f6:	fb07 1110 	mls	r1, r7, r0, r1
 80031fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80031fe:	fb00 f606 	mul.w	r6, r0, r6
 8003202:	429e      	cmp	r6, r3
 8003204:	d90a      	bls.n	800321c <__udivmoddi4+0x94>
 8003206:	eb1c 0303 	adds.w	r3, ip, r3
 800320a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800320e:	f080 80fc 	bcs.w	800340a <__udivmoddi4+0x282>
 8003212:	429e      	cmp	r6, r3
 8003214:	f240 80f9 	bls.w	800340a <__udivmoddi4+0x282>
 8003218:	4463      	add	r3, ip
 800321a:	3802      	subs	r0, #2
 800321c:	1b9b      	subs	r3, r3, r6
 800321e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8003222:	2100      	movs	r1, #0
 8003224:	b11d      	cbz	r5, 800322e <__udivmoddi4+0xa6>
 8003226:	40d3      	lsrs	r3, r2
 8003228:	2200      	movs	r2, #0
 800322a:	e9c5 3200 	strd	r3, r2, [r5]
 800322e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003232:	428b      	cmp	r3, r1
 8003234:	d905      	bls.n	8003242 <__udivmoddi4+0xba>
 8003236:	b10d      	cbz	r5, 800323c <__udivmoddi4+0xb4>
 8003238:	e9c5 0100 	strd	r0, r1, [r5]
 800323c:	2100      	movs	r1, #0
 800323e:	4608      	mov	r0, r1
 8003240:	e7f5      	b.n	800322e <__udivmoddi4+0xa6>
 8003242:	fab3 f183 	clz	r1, r3
 8003246:	2900      	cmp	r1, #0
 8003248:	d146      	bne.n	80032d8 <__udivmoddi4+0x150>
 800324a:	42a3      	cmp	r3, r4
 800324c:	d302      	bcc.n	8003254 <__udivmoddi4+0xcc>
 800324e:	4290      	cmp	r0, r2
 8003250:	f0c0 80f0 	bcc.w	8003434 <__udivmoddi4+0x2ac>
 8003254:	1a86      	subs	r6, r0, r2
 8003256:	eb64 0303 	sbc.w	r3, r4, r3
 800325a:	2001      	movs	r0, #1
 800325c:	2d00      	cmp	r5, #0
 800325e:	d0e6      	beq.n	800322e <__udivmoddi4+0xa6>
 8003260:	e9c5 6300 	strd	r6, r3, [r5]
 8003264:	e7e3      	b.n	800322e <__udivmoddi4+0xa6>
 8003266:	2a00      	cmp	r2, #0
 8003268:	f040 8090 	bne.w	800338c <__udivmoddi4+0x204>
 800326c:	eba1 040c 	sub.w	r4, r1, ip
 8003270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8003274:	fa1f f78c 	uxth.w	r7, ip
 8003278:	2101      	movs	r1, #1
 800327a:	fbb4 f6f8 	udiv	r6, r4, r8
 800327e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8003282:	fb08 4416 	mls	r4, r8, r6, r4
 8003286:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800328a:	fb07 f006 	mul.w	r0, r7, r6
 800328e:	4298      	cmp	r0, r3
 8003290:	d908      	bls.n	80032a4 <__udivmoddi4+0x11c>
 8003292:	eb1c 0303 	adds.w	r3, ip, r3
 8003296:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800329a:	d202      	bcs.n	80032a2 <__udivmoddi4+0x11a>
 800329c:	4298      	cmp	r0, r3
 800329e:	f200 80cd 	bhi.w	800343c <__udivmoddi4+0x2b4>
 80032a2:	4626      	mov	r6, r4
 80032a4:	1a1c      	subs	r4, r3, r0
 80032a6:	fa1f f38e 	uxth.w	r3, lr
 80032aa:	fbb4 f0f8 	udiv	r0, r4, r8
 80032ae:	fb08 4410 	mls	r4, r8, r0, r4
 80032b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80032b6:	fb00 f707 	mul.w	r7, r0, r7
 80032ba:	429f      	cmp	r7, r3
 80032bc:	d908      	bls.n	80032d0 <__udivmoddi4+0x148>
 80032be:	eb1c 0303 	adds.w	r3, ip, r3
 80032c2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80032c6:	d202      	bcs.n	80032ce <__udivmoddi4+0x146>
 80032c8:	429f      	cmp	r7, r3
 80032ca:	f200 80b0 	bhi.w	800342e <__udivmoddi4+0x2a6>
 80032ce:	4620      	mov	r0, r4
 80032d0:	1bdb      	subs	r3, r3, r7
 80032d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80032d6:	e7a5      	b.n	8003224 <__udivmoddi4+0x9c>
 80032d8:	f1c1 0620 	rsb	r6, r1, #32
 80032dc:	408b      	lsls	r3, r1
 80032de:	fa22 f706 	lsr.w	r7, r2, r6
 80032e2:	431f      	orrs	r7, r3
 80032e4:	fa20 fc06 	lsr.w	ip, r0, r6
 80032e8:	fa04 f301 	lsl.w	r3, r4, r1
 80032ec:	ea43 030c 	orr.w	r3, r3, ip
 80032f0:	40f4      	lsrs	r4, r6
 80032f2:	fa00 f801 	lsl.w	r8, r0, r1
 80032f6:	0c38      	lsrs	r0, r7, #16
 80032f8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80032fc:	fbb4 fef0 	udiv	lr, r4, r0
 8003300:	fa1f fc87 	uxth.w	ip, r7
 8003304:	fb00 441e 	mls	r4, r0, lr, r4
 8003308:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800330c:	fb0e f90c 	mul.w	r9, lr, ip
 8003310:	45a1      	cmp	r9, r4
 8003312:	fa02 f201 	lsl.w	r2, r2, r1
 8003316:	d90a      	bls.n	800332e <__udivmoddi4+0x1a6>
 8003318:	193c      	adds	r4, r7, r4
 800331a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800331e:	f080 8084 	bcs.w	800342a <__udivmoddi4+0x2a2>
 8003322:	45a1      	cmp	r9, r4
 8003324:	f240 8081 	bls.w	800342a <__udivmoddi4+0x2a2>
 8003328:	f1ae 0e02 	sub.w	lr, lr, #2
 800332c:	443c      	add	r4, r7
 800332e:	eba4 0409 	sub.w	r4, r4, r9
 8003332:	fa1f f983 	uxth.w	r9, r3
 8003336:	fbb4 f3f0 	udiv	r3, r4, r0
 800333a:	fb00 4413 	mls	r4, r0, r3, r4
 800333e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8003342:	fb03 fc0c 	mul.w	ip, r3, ip
 8003346:	45a4      	cmp	ip, r4
 8003348:	d907      	bls.n	800335a <__udivmoddi4+0x1d2>
 800334a:	193c      	adds	r4, r7, r4
 800334c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8003350:	d267      	bcs.n	8003422 <__udivmoddi4+0x29a>
 8003352:	45a4      	cmp	ip, r4
 8003354:	d965      	bls.n	8003422 <__udivmoddi4+0x29a>
 8003356:	3b02      	subs	r3, #2
 8003358:	443c      	add	r4, r7
 800335a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800335e:	fba0 9302 	umull	r9, r3, r0, r2
 8003362:	eba4 040c 	sub.w	r4, r4, ip
 8003366:	429c      	cmp	r4, r3
 8003368:	46ce      	mov	lr, r9
 800336a:	469c      	mov	ip, r3
 800336c:	d351      	bcc.n	8003412 <__udivmoddi4+0x28a>
 800336e:	d04e      	beq.n	800340e <__udivmoddi4+0x286>
 8003370:	b155      	cbz	r5, 8003388 <__udivmoddi4+0x200>
 8003372:	ebb8 030e 	subs.w	r3, r8, lr
 8003376:	eb64 040c 	sbc.w	r4, r4, ip
 800337a:	fa04 f606 	lsl.w	r6, r4, r6
 800337e:	40cb      	lsrs	r3, r1
 8003380:	431e      	orrs	r6, r3
 8003382:	40cc      	lsrs	r4, r1
 8003384:	e9c5 6400 	strd	r6, r4, [r5]
 8003388:	2100      	movs	r1, #0
 800338a:	e750      	b.n	800322e <__udivmoddi4+0xa6>
 800338c:	f1c2 0320 	rsb	r3, r2, #32
 8003390:	fa20 f103 	lsr.w	r1, r0, r3
 8003394:	fa0c fc02 	lsl.w	ip, ip, r2
 8003398:	fa24 f303 	lsr.w	r3, r4, r3
 800339c:	4094      	lsls	r4, r2
 800339e:	430c      	orrs	r4, r1
 80033a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80033a4:	fa00 fe02 	lsl.w	lr, r0, r2
 80033a8:	fa1f f78c 	uxth.w	r7, ip
 80033ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80033b0:	fb08 3110 	mls	r1, r8, r0, r3
 80033b4:	0c23      	lsrs	r3, r4, #16
 80033b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80033ba:	fb00 f107 	mul.w	r1, r0, r7
 80033be:	4299      	cmp	r1, r3
 80033c0:	d908      	bls.n	80033d4 <__udivmoddi4+0x24c>
 80033c2:	eb1c 0303 	adds.w	r3, ip, r3
 80033c6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80033ca:	d22c      	bcs.n	8003426 <__udivmoddi4+0x29e>
 80033cc:	4299      	cmp	r1, r3
 80033ce:	d92a      	bls.n	8003426 <__udivmoddi4+0x29e>
 80033d0:	3802      	subs	r0, #2
 80033d2:	4463      	add	r3, ip
 80033d4:	1a5b      	subs	r3, r3, r1
 80033d6:	b2a4      	uxth	r4, r4
 80033d8:	fbb3 f1f8 	udiv	r1, r3, r8
 80033dc:	fb08 3311 	mls	r3, r8, r1, r3
 80033e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80033e4:	fb01 f307 	mul.w	r3, r1, r7
 80033e8:	42a3      	cmp	r3, r4
 80033ea:	d908      	bls.n	80033fe <__udivmoddi4+0x276>
 80033ec:	eb1c 0404 	adds.w	r4, ip, r4
 80033f0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80033f4:	d213      	bcs.n	800341e <__udivmoddi4+0x296>
 80033f6:	42a3      	cmp	r3, r4
 80033f8:	d911      	bls.n	800341e <__udivmoddi4+0x296>
 80033fa:	3902      	subs	r1, #2
 80033fc:	4464      	add	r4, ip
 80033fe:	1ae4      	subs	r4, r4, r3
 8003400:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8003404:	e739      	b.n	800327a <__udivmoddi4+0xf2>
 8003406:	4604      	mov	r4, r0
 8003408:	e6f0      	b.n	80031ec <__udivmoddi4+0x64>
 800340a:	4608      	mov	r0, r1
 800340c:	e706      	b.n	800321c <__udivmoddi4+0x94>
 800340e:	45c8      	cmp	r8, r9
 8003410:	d2ae      	bcs.n	8003370 <__udivmoddi4+0x1e8>
 8003412:	ebb9 0e02 	subs.w	lr, r9, r2
 8003416:	eb63 0c07 	sbc.w	ip, r3, r7
 800341a:	3801      	subs	r0, #1
 800341c:	e7a8      	b.n	8003370 <__udivmoddi4+0x1e8>
 800341e:	4631      	mov	r1, r6
 8003420:	e7ed      	b.n	80033fe <__udivmoddi4+0x276>
 8003422:	4603      	mov	r3, r0
 8003424:	e799      	b.n	800335a <__udivmoddi4+0x1d2>
 8003426:	4630      	mov	r0, r6
 8003428:	e7d4      	b.n	80033d4 <__udivmoddi4+0x24c>
 800342a:	46d6      	mov	lr, sl
 800342c:	e77f      	b.n	800332e <__udivmoddi4+0x1a6>
 800342e:	4463      	add	r3, ip
 8003430:	3802      	subs	r0, #2
 8003432:	e74d      	b.n	80032d0 <__udivmoddi4+0x148>
 8003434:	4606      	mov	r6, r0
 8003436:	4623      	mov	r3, r4
 8003438:	4608      	mov	r0, r1
 800343a:	e70f      	b.n	800325c <__udivmoddi4+0xd4>
 800343c:	3e02      	subs	r6, #2
 800343e:	4463      	add	r3, ip
 8003440:	e730      	b.n	80032a4 <__udivmoddi4+0x11c>
 8003442:	bf00      	nop

08003444 <__aeabi_idiv0>:
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop

08003448 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b088      	sub	sp, #32
 800344c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800344e:	463b      	mov	r3, r7
 8003450:	2220      	movs	r2, #32
 8003452:	2100      	movs	r1, #0
 8003454:	4618      	mov	r0, r3
 8003456:	f016 fec7 	bl	801a1e8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800345a:	4b33      	ldr	r3, [pc, #204]	@ (8003528 <MX_ADC2_Init+0xe0>)
 800345c:	4a33      	ldr	r2, [pc, #204]	@ (800352c <MX_ADC2_Init+0xe4>)
 800345e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003460:	4b31      	ldr	r3, [pc, #196]	@ (8003528 <MX_ADC2_Init+0xe0>)
 8003462:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003466:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003468:	4b2f      	ldr	r3, [pc, #188]	@ (8003528 <MX_ADC2_Init+0xe0>)
 800346a:	2200      	movs	r2, #0
 800346c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800346e:	4b2e      	ldr	r3, [pc, #184]	@ (8003528 <MX_ADC2_Init+0xe0>)
 8003470:	2200      	movs	r2, #0
 8003472:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8003474:	4b2c      	ldr	r3, [pc, #176]	@ (8003528 <MX_ADC2_Init+0xe0>)
 8003476:	2200      	movs	r2, #0
 8003478:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800347a:	4b2b      	ldr	r3, [pc, #172]	@ (8003528 <MX_ADC2_Init+0xe0>)
 800347c:	2201      	movs	r2, #1
 800347e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003480:	4b29      	ldr	r3, [pc, #164]	@ (8003528 <MX_ADC2_Init+0xe0>)
 8003482:	2208      	movs	r2, #8
 8003484:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003486:	4b28      	ldr	r3, [pc, #160]	@ (8003528 <MX_ADC2_Init+0xe0>)
 8003488:	2200      	movs	r2, #0
 800348a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800348c:	4b26      	ldr	r3, [pc, #152]	@ (8003528 <MX_ADC2_Init+0xe0>)
 800348e:	2200      	movs	r2, #0
 8003490:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8003492:	4b25      	ldr	r3, [pc, #148]	@ (8003528 <MX_ADC2_Init+0xe0>)
 8003494:	2202      	movs	r2, #2
 8003496:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003498:	4b23      	ldr	r3, [pc, #140]	@ (8003528 <MX_ADC2_Init+0xe0>)
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 80034a0:	4b21      	ldr	r3, [pc, #132]	@ (8003528 <MX_ADC2_Init+0xe0>)
 80034a2:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 80034a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80034a8:	4b1f      	ldr	r3, [pc, #124]	@ (8003528 <MX_ADC2_Init+0xe0>)
 80034aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80034b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003528 <MX_ADC2_Init+0xe0>)
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80034b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003528 <MX_ADC2_Init+0xe0>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80034be:	4b1a      	ldr	r3, [pc, #104]	@ (8003528 <MX_ADC2_Init+0xe0>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80034c6:	4818      	ldr	r0, [pc, #96]	@ (8003528 <MX_ADC2_Init+0xe0>)
 80034c8:	f003 fc26 	bl	8006d18 <HAL_ADC_Init>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80034d2:	f000 fd87 	bl	8003fe4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80034d6:	4b16      	ldr	r3, [pc, #88]	@ (8003530 <MX_ADC2_Init+0xe8>)
 80034d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80034da:	2306      	movs	r3, #6
 80034dc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 80034de:	2303      	movs	r3, #3
 80034e0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80034e2:	237f      	movs	r3, #127	@ 0x7f
 80034e4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80034e6:	2304      	movs	r3, #4
 80034e8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80034ea:	2300      	movs	r3, #0
 80034ec:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80034ee:	463b      	mov	r3, r7
 80034f0:	4619      	mov	r1, r3
 80034f2:	480d      	ldr	r0, [pc, #52]	@ (8003528 <MX_ADC2_Init+0xe0>)
 80034f4:	f004 f8e2 	bl	80076bc <HAL_ADC_ConfigChannel>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80034fe:	f000 fd71 	bl	8003fe4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003502:	4b0c      	ldr	r3, [pc, #48]	@ (8003534 <MX_ADC2_Init+0xec>)
 8003504:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003506:	230c      	movs	r3, #12
 8003508:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800350a:	463b      	mov	r3, r7
 800350c:	4619      	mov	r1, r3
 800350e:	4806      	ldr	r0, [pc, #24]	@ (8003528 <MX_ADC2_Init+0xe0>)
 8003510:	f004 f8d4 	bl	80076bc <HAL_ADC_ConfigChannel>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 800351a:	f000 fd63 	bl	8003fe4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800351e:	bf00      	nop
 8003520:	3720      	adds	r7, #32
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	2000055c 	.word	0x2000055c
 800352c:	50000100 	.word	0x50000100
 8003530:	0c900008 	.word	0x0c900008
 8003534:	10c00010 	.word	0x10c00010

08003538 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b09a      	sub	sp, #104	@ 0x68
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003540:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	605a      	str	r2, [r3, #4]
 800354a:	609a      	str	r2, [r3, #8]
 800354c:	60da      	str	r2, [r3, #12]
 800354e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003550:	f107 0310 	add.w	r3, r7, #16
 8003554:	2244      	movs	r2, #68	@ 0x44
 8003556:	2100      	movs	r1, #0
 8003558:	4618      	mov	r0, r3
 800355a:	f016 fe45 	bl	801a1e8 <memset>
  if(adcHandle->Instance==ADC2)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a37      	ldr	r2, [pc, #220]	@ (8003640 <HAL_ADC_MspInit+0x108>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d167      	bne.n	8003638 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003568:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800356c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800356e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003572:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003574:	f107 0310 	add.w	r3, r7, #16
 8003578:	4618      	mov	r0, r3
 800357a:	f007 fd27 	bl	800afcc <HAL_RCCEx_PeriphCLKConfig>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003584:	f000 fd2e 	bl	8003fe4 <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003588:	4b2e      	ldr	r3, [pc, #184]	@ (8003644 <HAL_ADC_MspInit+0x10c>)
 800358a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800358c:	4a2d      	ldr	r2, [pc, #180]	@ (8003644 <HAL_ADC_MspInit+0x10c>)
 800358e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003592:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003594:	4b2b      	ldr	r3, [pc, #172]	@ (8003644 <HAL_ADC_MspInit+0x10c>)
 8003596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003598:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800359c:	60fb      	str	r3, [r7, #12]
 800359e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035a0:	4b28      	ldr	r3, [pc, #160]	@ (8003644 <HAL_ADC_MspInit+0x10c>)
 80035a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035a4:	4a27      	ldr	r2, [pc, #156]	@ (8003644 <HAL_ADC_MspInit+0x10c>)
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035ac:	4b25      	ldr	r3, [pc, #148]	@ (8003644 <HAL_ADC_MspInit+0x10c>)
 80035ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	60bb      	str	r3, [r7, #8]
 80035b6:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = ASSERV_I1_Pin|ASSERV_I2_Pin;
 80035b8:	23c0      	movs	r3, #192	@ 0xc0
 80035ba:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035bc:	2303      	movs	r3, #3
 80035be:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c0:	2300      	movs	r3, #0
 80035c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035c4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80035c8:	4619      	mov	r1, r3
 80035ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035ce:	f005 ff23 	bl	8009418 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel3;
 80035d2:	4b1d      	ldr	r3, [pc, #116]	@ (8003648 <HAL_ADC_MspInit+0x110>)
 80035d4:	4a1d      	ldr	r2, [pc, #116]	@ (800364c <HAL_ADC_MspInit+0x114>)
 80035d6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80035d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003648 <HAL_ADC_MspInit+0x110>)
 80035da:	2224      	movs	r2, #36	@ 0x24
 80035dc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035de:	4b1a      	ldr	r3, [pc, #104]	@ (8003648 <HAL_ADC_MspInit+0x110>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80035e4:	4b18      	ldr	r3, [pc, #96]	@ (8003648 <HAL_ADC_MspInit+0x110>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80035ea:	4b17      	ldr	r3, [pc, #92]	@ (8003648 <HAL_ADC_MspInit+0x110>)
 80035ec:	2280      	movs	r2, #128	@ 0x80
 80035ee:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80035f0:	4b15      	ldr	r3, [pc, #84]	@ (8003648 <HAL_ADC_MspInit+0x110>)
 80035f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80035f6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80035f8:	4b13      	ldr	r3, [pc, #76]	@ (8003648 <HAL_ADC_MspInit+0x110>)
 80035fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035fe:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003600:	4b11      	ldr	r3, [pc, #68]	@ (8003648 <HAL_ADC_MspInit+0x110>)
 8003602:	2220      	movs	r2, #32
 8003604:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003606:	4b10      	ldr	r3, [pc, #64]	@ (8003648 <HAL_ADC_MspInit+0x110>)
 8003608:	2200      	movs	r2, #0
 800360a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800360c:	480e      	ldr	r0, [pc, #56]	@ (8003648 <HAL_ADC_MspInit+0x110>)
 800360e:	f005 fbd1 	bl	8008db4 <HAL_DMA_Init>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8003618:	f000 fce4 	bl	8003fe4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a0a      	ldr	r2, [pc, #40]	@ (8003648 <HAL_ADC_MspInit+0x110>)
 8003620:	655a      	str	r2, [r3, #84]	@ 0x54
 8003622:	4a09      	ldr	r2, [pc, #36]	@ (8003648 <HAL_ADC_MspInit+0x110>)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8003628:	2200      	movs	r2, #0
 800362a:	2105      	movs	r1, #5
 800362c:	2012      	movs	r0, #18
 800362e:	f004 ffe3 	bl	80085f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003632:	2012      	movs	r0, #18
 8003634:	f004 fffa 	bl	800862c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8003638:	bf00      	nop
 800363a:	3768      	adds	r7, #104	@ 0x68
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	50000100 	.word	0x50000100
 8003644:	40021000 	.word	0x40021000
 8003648:	200005c8 	.word	0x200005c8
 800364c:	40020030 	.word	0x40020030

08003650 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0

}
 8003654:	bf00      	nop
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800365e:	b480      	push	{r7}
 8003660:	af00      	add	r7, sp, #0
return 0;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
	...

08003670 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003670:	b5b0      	push	{r4, r5, r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 64);
 8003676:	4b09      	ldr	r3, [pc, #36]	@ (800369c <MX_FREERTOS_Init+0x2c>)
 8003678:	1d3c      	adds	r4, r7, #4
 800367a:	461d      	mov	r5, r3
 800367c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800367e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003680:	682b      	ldr	r3, [r5, #0]
 8003682:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003684:	1d3b      	adds	r3, r7, #4
 8003686:	2100      	movs	r1, #0
 8003688:	4618      	mov	r0, r3
 800368a:	f010 fa56 	bl	8013b3a <osThreadCreate>
 800368e:	4603      	mov	r3, r0
 8003690:	4a03      	ldr	r2, [pc, #12]	@ (80036a0 <MX_FREERTOS_Init+0x30>)
 8003692:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8003694:	bf00      	nop
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bdb0      	pop	{r4, r5, r7, pc}
 800369c:	0801dd54 	.word	0x0801dd54
 80036a0:	20000628 	.word	0x20000628

080036a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
__weak void StartDefaultTask(void const * argument)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
	for(;;)
  {
    osDelay(1);
 80036ac:	2001      	movs	r0, #1
 80036ae:	f010 fa77 	bl	8013ba0 <osDelay>
 80036b2:	e7fb      	b.n	80036ac <StartDefaultTask+0x8>

080036b4 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08c      	sub	sp, #48	@ 0x30
 80036b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80036ba:	463b      	mov	r3, r7
 80036bc:	2230      	movs	r2, #48	@ 0x30
 80036be:	2100      	movs	r1, #0
 80036c0:	4618      	mov	r0, r3
 80036c2:	f016 fd91 	bl	801a1e8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80036c6:	4b16      	ldr	r3, [pc, #88]	@ (8003720 <MX_DAC1_Init+0x6c>)
 80036c8:	4a16      	ldr	r2, [pc, #88]	@ (8003724 <MX_DAC1_Init+0x70>)
 80036ca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80036cc:	4814      	ldr	r0, [pc, #80]	@ (8003720 <MX_DAC1_Init+0x6c>)
 80036ce:	f004 ffbb 	bl	8008648 <HAL_DAC_Init>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80036d8:	f000 fc84 	bl	8003fe4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80036dc:	2302      	movs	r3, #2
 80036de:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80036e0:	2300      	movs	r3, #0
 80036e2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = ENABLE;
 80036e4:	2301      	movs	r3, #1
 80036e6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80036e8:	2300      	movs	r3, #0
 80036ea:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80036ec:	231e      	movs	r3, #30
 80036ee:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80036f0:	2300      	movs	r3, #0
 80036f2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80036f4:	2300      	movs	r3, #0
 80036f6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80036f8:	2301      	movs	r3, #1
 80036fa:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80036fc:	2300      	movs	r3, #0
 80036fe:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003700:	463b      	mov	r3, r7
 8003702:	2200      	movs	r2, #0
 8003704:	4619      	mov	r1, r3
 8003706:	4806      	ldr	r0, [pc, #24]	@ (8003720 <MX_DAC1_Init+0x6c>)
 8003708:	f005 f912 	bl	8008930 <HAL_DAC_ConfigChannel>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8003712:	f000 fc67 	bl	8003fe4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8003716:	bf00      	nop
 8003718:	3730      	adds	r7, #48	@ 0x30
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	2000062c 	.word	0x2000062c
 8003724:	50000800 	.word	0x50000800

08003728 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b08a      	sub	sp, #40	@ 0x28
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003730:	f107 0314 	add.w	r3, r7, #20
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	605a      	str	r2, [r3, #4]
 800373a:	609a      	str	r2, [r3, #8]
 800373c:	60da      	str	r2, [r3, #12]
 800373e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a2e      	ldr	r2, [pc, #184]	@ (8003800 <HAL_DAC_MspInit+0xd8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d155      	bne.n	80037f6 <HAL_DAC_MspInit+0xce>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800374a:	4b2e      	ldr	r3, [pc, #184]	@ (8003804 <HAL_DAC_MspInit+0xdc>)
 800374c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800374e:	4a2d      	ldr	r2, [pc, #180]	@ (8003804 <HAL_DAC_MspInit+0xdc>)
 8003750:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003754:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003756:	4b2b      	ldr	r3, [pc, #172]	@ (8003804 <HAL_DAC_MspInit+0xdc>)
 8003758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800375a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800375e:	613b      	str	r3, [r7, #16]
 8003760:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003762:	4b28      	ldr	r3, [pc, #160]	@ (8003804 <HAL_DAC_MspInit+0xdc>)
 8003764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003766:	4a27      	ldr	r2, [pc, #156]	@ (8003804 <HAL_DAC_MspInit+0xdc>)
 8003768:	f043 0301 	orr.w	r3, r3, #1
 800376c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800376e:	4b25      	ldr	r3, [pc, #148]	@ (8003804 <HAL_DAC_MspInit+0xdc>)
 8003770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = DAC__Pin;
 800377a:	2310      	movs	r3, #16
 800377c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800377e:	2303      	movs	r3, #3
 8003780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003782:	2300      	movs	r3, #0
 8003784:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC__GPIO_Port, &GPIO_InitStruct);
 8003786:	f107 0314 	add.w	r3, r7, #20
 800378a:	4619      	mov	r1, r3
 800378c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003790:	f005 fe42 	bl	8009418 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel5;
 8003794:	4b1c      	ldr	r3, [pc, #112]	@ (8003808 <HAL_DAC_MspInit+0xe0>)
 8003796:	4a1d      	ldr	r2, [pc, #116]	@ (800380c <HAL_DAC_MspInit+0xe4>)
 8003798:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 800379a:	4b1b      	ldr	r3, [pc, #108]	@ (8003808 <HAL_DAC_MspInit+0xe0>)
 800379c:	2206      	movs	r2, #6
 800379e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037a0:	4b19      	ldr	r3, [pc, #100]	@ (8003808 <HAL_DAC_MspInit+0xe0>)
 80037a2:	2210      	movs	r2, #16
 80037a4:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80037a6:	4b18      	ldr	r3, [pc, #96]	@ (8003808 <HAL_DAC_MspInit+0xe0>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80037ac:	4b16      	ldr	r3, [pc, #88]	@ (8003808 <HAL_DAC_MspInit+0xe0>)
 80037ae:	2280      	movs	r2, #128	@ 0x80
 80037b0:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037b2:	4b15      	ldr	r3, [pc, #84]	@ (8003808 <HAL_DAC_MspInit+0xe0>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037b8:	4b13      	ldr	r3, [pc, #76]	@ (8003808 <HAL_DAC_MspInit+0xe0>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 80037be:	4b12      	ldr	r3, [pc, #72]	@ (8003808 <HAL_DAC_MspInit+0xe0>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80037c4:	4b10      	ldr	r3, [pc, #64]	@ (8003808 <HAL_DAC_MspInit+0xe0>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80037ca:	480f      	ldr	r0, [pc, #60]	@ (8003808 <HAL_DAC_MspInit+0xe0>)
 80037cc:	f005 faf2 	bl	8008db4 <HAL_DMA_Init>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 80037d6:	f000 fc05 	bl	8003fe4 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003808 <HAL_DAC_MspInit+0xe0>)
 80037de:	609a      	str	r2, [r3, #8]
 80037e0:	4a09      	ldr	r2, [pc, #36]	@ (8003808 <HAL_DAC_MspInit+0xe0>)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80037e6:	2200      	movs	r2, #0
 80037e8:	2105      	movs	r1, #5
 80037ea:	2036      	movs	r0, #54	@ 0x36
 80037ec:	f004 ff04 	bl	80085f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80037f0:	2036      	movs	r0, #54	@ 0x36
 80037f2:	f004 ff1b 	bl	800862c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80037f6:	bf00      	nop
 80037f8:	3728      	adds	r7, #40	@ 0x28
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	50000800 	.word	0x50000800
 8003804:	40021000 	.word	0x40021000
 8003808:	20000640 	.word	0x20000640
 800380c:	40020058 	.word	0x40020058

08003810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003814:	4b04      	ldr	r3, [pc, #16]	@ (8003828 <__NVIC_GetPriorityGrouping+0x18>)
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	0a1b      	lsrs	r3, r3, #8
 800381a:	f003 0307 	and.w	r3, r3, #7
}
 800381e:	4618      	mov	r0, r3
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr
 8003828:	e000ed00 	.word	0xe000ed00

0800382c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	4603      	mov	r3, r0
 8003834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383a:	2b00      	cmp	r3, #0
 800383c:	db0b      	blt.n	8003856 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800383e:	79fb      	ldrb	r3, [r7, #7]
 8003840:	f003 021f 	and.w	r2, r3, #31
 8003844:	4907      	ldr	r1, [pc, #28]	@ (8003864 <__NVIC_EnableIRQ+0x38>)
 8003846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384a:	095b      	lsrs	r3, r3, #5
 800384c:	2001      	movs	r0, #1
 800384e:	fa00 f202 	lsl.w	r2, r0, r2
 8003852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	e000e100 	.word	0xe000e100

08003868 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	4603      	mov	r3, r0
 8003870:	6039      	str	r1, [r7, #0]
 8003872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003878:	2b00      	cmp	r3, #0
 800387a:	db0a      	blt.n	8003892 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	b2da      	uxtb	r2, r3
 8003880:	490c      	ldr	r1, [pc, #48]	@ (80038b4 <__NVIC_SetPriority+0x4c>)
 8003882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003886:	0112      	lsls	r2, r2, #4
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	440b      	add	r3, r1
 800388c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003890:	e00a      	b.n	80038a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	b2da      	uxtb	r2, r3
 8003896:	4908      	ldr	r1, [pc, #32]	@ (80038b8 <__NVIC_SetPriority+0x50>)
 8003898:	79fb      	ldrb	r3, [r7, #7]
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	3b04      	subs	r3, #4
 80038a0:	0112      	lsls	r2, r2, #4
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	440b      	add	r3, r1
 80038a6:	761a      	strb	r2, [r3, #24]
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	e000e100 	.word	0xe000e100
 80038b8:	e000ed00 	.word	0xe000ed00

080038bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038bc:	b480      	push	{r7}
 80038be:	b089      	sub	sp, #36	@ 0x24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	f1c3 0307 	rsb	r3, r3, #7
 80038d6:	2b04      	cmp	r3, #4
 80038d8:	bf28      	it	cs
 80038da:	2304      	movcs	r3, #4
 80038dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	3304      	adds	r3, #4
 80038e2:	2b06      	cmp	r3, #6
 80038e4:	d902      	bls.n	80038ec <NVIC_EncodePriority+0x30>
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	3b03      	subs	r3, #3
 80038ea:	e000      	b.n	80038ee <NVIC_EncodePriority+0x32>
 80038ec:	2300      	movs	r3, #0
 80038ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	fa02 f303 	lsl.w	r3, r2, r3
 80038fa:	43da      	mvns	r2, r3
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	401a      	ands	r2, r3
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003904:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	fa01 f303 	lsl.w	r3, r1, r3
 800390e:	43d9      	mvns	r1, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003914:	4313      	orrs	r3, r2
         );
}
 8003916:	4618      	mov	r0, r3
 8003918:	3724      	adds	r7, #36	@ 0x24
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
	...

08003924 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800392a:	4b2a      	ldr	r3, [pc, #168]	@ (80039d4 <MX_DMA_Init+0xb0>)
 800392c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800392e:	4a29      	ldr	r2, [pc, #164]	@ (80039d4 <MX_DMA_Init+0xb0>)
 8003930:	f043 0304 	orr.w	r3, r3, #4
 8003934:	6493      	str	r3, [r2, #72]	@ 0x48
 8003936:	4b27      	ldr	r3, [pc, #156]	@ (80039d4 <MX_DMA_Init+0xb0>)
 8003938:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800393a:	f003 0304 	and.w	r3, r3, #4
 800393e:	607b      	str	r3, [r7, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003942:	4b24      	ldr	r3, [pc, #144]	@ (80039d4 <MX_DMA_Init+0xb0>)
 8003944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003946:	4a23      	ldr	r2, [pc, #140]	@ (80039d4 <MX_DMA_Init+0xb0>)
 8003948:	f043 0301 	orr.w	r3, r3, #1
 800394c:	6493      	str	r3, [r2, #72]	@ 0x48
 800394e:	4b21      	ldr	r3, [pc, #132]	@ (80039d4 <MX_DMA_Init+0xb0>)
 8003950:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	603b      	str	r3, [r7, #0]
 8003958:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800395a:	f7ff ff59 	bl	8003810 <__NVIC_GetPriorityGrouping>
 800395e:	4603      	mov	r3, r0
 8003960:	2200      	movs	r2, #0
 8003962:	2105      	movs	r1, #5
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff ffa9 	bl	80038bc <NVIC_EncodePriority>
 800396a:	4603      	mov	r3, r0
 800396c:	4619      	mov	r1, r3
 800396e:	200b      	movs	r0, #11
 8003970:	f7ff ff7a 	bl	8003868 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003974:	200b      	movs	r0, #11
 8003976:	f7ff ff59 	bl	800382c <__NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800397a:	f7ff ff49 	bl	8003810 <__NVIC_GetPriorityGrouping>
 800397e:	4603      	mov	r3, r0
 8003980:	2200      	movs	r2, #0
 8003982:	2105      	movs	r1, #5
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff ff99 	bl	80038bc <NVIC_EncodePriority>
 800398a:	4603      	mov	r3, r0
 800398c:	4619      	mov	r1, r3
 800398e:	200c      	movs	r0, #12
 8003990:	f7ff ff6a 	bl	8003868 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003994:	200c      	movs	r0, #12
 8003996:	f7ff ff49 	bl	800382c <__NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800399a:	2200      	movs	r2, #0
 800399c:	2105      	movs	r1, #5
 800399e:	200d      	movs	r0, #13
 80039a0:	f004 fe2a 	bl	80085f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80039a4:	200d      	movs	r0, #13
 80039a6:	f004 fe41 	bl	800862c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80039aa:	2200      	movs	r2, #0
 80039ac:	2105      	movs	r1, #5
 80039ae:	200e      	movs	r0, #14
 80039b0:	f004 fe22 	bl	80085f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80039b4:	200e      	movs	r0, #14
 80039b6:	f004 fe39 	bl	800862c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80039ba:	2200      	movs	r2, #0
 80039bc:	2105      	movs	r1, #5
 80039be:	200f      	movs	r0, #15
 80039c0:	f004 fe1a 	bl	80085f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80039c4:	200f      	movs	r0, #15
 80039c6:	f004 fe31 	bl	800862c <HAL_NVIC_EnableIRQ>

}
 80039ca:	bf00      	nop
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40021000 	.word	0x40021000

080039d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b08a      	sub	sp, #40	@ 0x28
 80039dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039de:	f107 0314 	add.w	r3, r7, #20
 80039e2:	2200      	movs	r2, #0
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	605a      	str	r2, [r3, #4]
 80039e8:	609a      	str	r2, [r3, #8]
 80039ea:	60da      	str	r2, [r3, #12]
 80039ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80039ee:	4b3e      	ldr	r3, [pc, #248]	@ (8003ae8 <MX_GPIO_Init+0x110>)
 80039f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039f2:	4a3d      	ldr	r2, [pc, #244]	@ (8003ae8 <MX_GPIO_Init+0x110>)
 80039f4:	f043 0320 	orr.w	r3, r3, #32
 80039f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039fa:	4b3b      	ldr	r3, [pc, #236]	@ (8003ae8 <MX_GPIO_Init+0x110>)
 80039fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039fe:	f003 0320 	and.w	r3, r3, #32
 8003a02:	613b      	str	r3, [r7, #16]
 8003a04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a06:	4b38      	ldr	r3, [pc, #224]	@ (8003ae8 <MX_GPIO_Init+0x110>)
 8003a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a0a:	4a37      	ldr	r2, [pc, #220]	@ (8003ae8 <MX_GPIO_Init+0x110>)
 8003a0c:	f043 0301 	orr.w	r3, r3, #1
 8003a10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a12:	4b35      	ldr	r3, [pc, #212]	@ (8003ae8 <MX_GPIO_Init+0x110>)
 8003a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a1e:	4b32      	ldr	r3, [pc, #200]	@ (8003ae8 <MX_GPIO_Init+0x110>)
 8003a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a22:	4a31      	ldr	r2, [pc, #196]	@ (8003ae8 <MX_GPIO_Init+0x110>)
 8003a24:	f043 0304 	orr.w	r3, r3, #4
 8003a28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a2a:	4b2f      	ldr	r3, [pc, #188]	@ (8003ae8 <MX_GPIO_Init+0x110>)
 8003a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a2e:	f003 0304 	and.w	r3, r3, #4
 8003a32:	60bb      	str	r3, [r7, #8]
 8003a34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a36:	4b2c      	ldr	r3, [pc, #176]	@ (8003ae8 <MX_GPIO_Init+0x110>)
 8003a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a3a:	4a2b      	ldr	r2, [pc, #172]	@ (8003ae8 <MX_GPIO_Init+0x110>)
 8003a3c:	f043 0302 	orr.w	r3, r3, #2
 8003a40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a42:	4b29      	ldr	r3, [pc, #164]	@ (8003ae8 <MX_GPIO_Init+0x110>)
 8003a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	607b      	str	r3, [r7, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIDAR_M_CTR_GPIO_Port, LIDAR_M_CTR_Pin, GPIO_PIN_SET);
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003a54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a58:	f005 fe78 	bl	800974c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MOUSTACHE_3_Pin|MOUSTACHE_1_Pin;
 8003a5c:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8003a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a62:	2300      	movs	r3, #0
 8003a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a66:	2300      	movs	r3, #0
 8003a68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a6a:	f107 0314 	add.w	r3, r7, #20
 8003a6e:	4619      	mov	r1, r3
 8003a70:	481e      	ldr	r0, [pc, #120]	@ (8003aec <MX_GPIO_Init+0x114>)
 8003a72:	f005 fcd1 	bl	8009418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = START_Pin;
 8003a76:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a7c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a82:	2300      	movs	r3, #0
 8003a84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(START_GPIO_Port, &GPIO_InitStruct);
 8003a86:	f107 0314 	add.w	r3, r7, #20
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	4817      	ldr	r0, [pc, #92]	@ (8003aec <MX_GPIO_Init+0x114>)
 8003a8e:	f005 fcc3 	bl	8009418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LIDAR_M_CTR_Pin;
 8003a92:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LIDAR_M_CTR_GPIO_Port, &GPIO_InitStruct);
 8003aa4:	f107 0314 	add.w	r3, r7, #20
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003aae:	f005 fcb3 	bl	8009418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GE_EXTI_Pin;
 8003ab2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ab8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003abc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GE_EXTI_GPIO_Port, &GPIO_InitStruct);
 8003ac2:	f107 0314 	add.w	r3, r7, #20
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003acc:	f005 fca4 	bl	8009418 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2105      	movs	r1, #5
 8003ad4:	2028      	movs	r0, #40	@ 0x28
 8003ad6:	f004 fd8f 	bl	80085f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003ada:	2028      	movs	r0, #40	@ 0x28
 8003adc:	f004 fda6 	bl	800862c <HAL_NVIC_EnableIRQ>

}
 8003ae0:	bf00      	nop
 8003ae2:	3728      	adds	r7, #40	@ 0x28
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	48000400 	.word	0x48000400

08003af0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003af4:	4b1b      	ldr	r3, [pc, #108]	@ (8003b64 <MX_I2C1_Init+0x74>)
 8003af6:	4a1c      	ldr	r2, [pc, #112]	@ (8003b68 <MX_I2C1_Init+0x78>)
 8003af8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8003afa:	4b1a      	ldr	r3, [pc, #104]	@ (8003b64 <MX_I2C1_Init+0x74>)
 8003afc:	4a1b      	ldr	r2, [pc, #108]	@ (8003b6c <MX_I2C1_Init+0x7c>)
 8003afe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003b00:	4b18      	ldr	r3, [pc, #96]	@ (8003b64 <MX_I2C1_Init+0x74>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b06:	4b17      	ldr	r3, [pc, #92]	@ (8003b64 <MX_I2C1_Init+0x74>)
 8003b08:	2201      	movs	r2, #1
 8003b0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b0c:	4b15      	ldr	r3, [pc, #84]	@ (8003b64 <MX_I2C1_Init+0x74>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003b12:	4b14      	ldr	r3, [pc, #80]	@ (8003b64 <MX_I2C1_Init+0x74>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003b18:	4b12      	ldr	r3, [pc, #72]	@ (8003b64 <MX_I2C1_Init+0x74>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b1e:	4b11      	ldr	r3, [pc, #68]	@ (8003b64 <MX_I2C1_Init+0x74>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b24:	4b0f      	ldr	r3, [pc, #60]	@ (8003b64 <MX_I2C1_Init+0x74>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003b2a:	480e      	ldr	r0, [pc, #56]	@ (8003b64 <MX_I2C1_Init+0x74>)
 8003b2c:	f005 fe63 	bl	80097f6 <HAL_I2C_Init>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003b36:	f000 fa55 	bl	8003fe4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	4809      	ldr	r0, [pc, #36]	@ (8003b64 <MX_I2C1_Init+0x74>)
 8003b3e:	f006 fba9 	bl	800a294 <HAL_I2CEx_ConfigAnalogFilter>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003b48:	f000 fa4c 	bl	8003fe4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	4805      	ldr	r0, [pc, #20]	@ (8003b64 <MX_I2C1_Init+0x74>)
 8003b50:	f006 fbeb 	bl	800a32a <HAL_I2CEx_ConfigDigitalFilter>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003b5a:	f000 fa43 	bl	8003fe4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003b5e:	bf00      	nop
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	200006a0 	.word	0x200006a0
 8003b68:	40005400 	.word	0x40005400
 8003b6c:	00503d58 	.word	0x00503d58

08003b70 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003b74:	4b1b      	ldr	r3, [pc, #108]	@ (8003be4 <MX_I2C3_Init+0x74>)
 8003b76:	4a1c      	ldr	r2, [pc, #112]	@ (8003be8 <MX_I2C3_Init+0x78>)
 8003b78:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00503D58;
 8003b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8003be4 <MX_I2C3_Init+0x74>)
 8003b7c:	4a1b      	ldr	r2, [pc, #108]	@ (8003bec <MX_I2C3_Init+0x7c>)
 8003b7e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8003b80:	4b18      	ldr	r3, [pc, #96]	@ (8003be4 <MX_I2C3_Init+0x74>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b86:	4b17      	ldr	r3, [pc, #92]	@ (8003be4 <MX_I2C3_Init+0x74>)
 8003b88:	2201      	movs	r2, #1
 8003b8a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b8c:	4b15      	ldr	r3, [pc, #84]	@ (8003be4 <MX_I2C3_Init+0x74>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8003b92:	4b14      	ldr	r3, [pc, #80]	@ (8003be4 <MX_I2C3_Init+0x74>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003b98:	4b12      	ldr	r3, [pc, #72]	@ (8003be4 <MX_I2C3_Init+0x74>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b9e:	4b11      	ldr	r3, [pc, #68]	@ (8003be4 <MX_I2C3_Init+0x74>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8003be4 <MX_I2C3_Init+0x74>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003baa:	480e      	ldr	r0, [pc, #56]	@ (8003be4 <MX_I2C3_Init+0x74>)
 8003bac:	f005 fe23 	bl	80097f6 <HAL_I2C_Init>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8003bb6:	f000 fa15 	bl	8003fe4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003bba:	2100      	movs	r1, #0
 8003bbc:	4809      	ldr	r0, [pc, #36]	@ (8003be4 <MX_I2C3_Init+0x74>)
 8003bbe:	f006 fb69 	bl	800a294 <HAL_I2CEx_ConfigAnalogFilter>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8003bc8:	f000 fa0c 	bl	8003fe4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003bcc:	2100      	movs	r1, #0
 8003bce:	4805      	ldr	r0, [pc, #20]	@ (8003be4 <MX_I2C3_Init+0x74>)
 8003bd0:	f006 fbab 	bl	800a32a <HAL_I2CEx_ConfigDigitalFilter>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8003bda:	f000 fa03 	bl	8003fe4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003bde:	bf00      	nop
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	200006f4 	.word	0x200006f4
 8003be8:	40007800 	.word	0x40007800
 8003bec:	00503d58 	.word	0x00503d58

08003bf0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b09e      	sub	sp, #120	@ 0x78
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	605a      	str	r2, [r3, #4]
 8003c02:	609a      	str	r2, [r3, #8]
 8003c04:	60da      	str	r2, [r3, #12]
 8003c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c08:	f107 0320 	add.w	r3, r7, #32
 8003c0c:	2244      	movs	r2, #68	@ 0x44
 8003c0e:	2100      	movs	r1, #0
 8003c10:	4618      	mov	r0, r3
 8003c12:	f016 fae9 	bl	801a1e8 <memset>
  if(i2cHandle->Instance==I2C1)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a5c      	ldr	r2, [pc, #368]	@ (8003d8c <HAL_I2C_MspInit+0x19c>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d155      	bne.n	8003ccc <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003c20:	2340      	movs	r3, #64	@ 0x40
 8003c22:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003c24:	2300      	movs	r3, #0
 8003c26:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c28:	f107 0320 	add.w	r3, r7, #32
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f007 f9cd 	bl	800afcc <HAL_RCCEx_PeriphCLKConfig>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003c38:	f000 f9d4 	bl	8003fe4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c3c:	4b54      	ldr	r3, [pc, #336]	@ (8003d90 <HAL_I2C_MspInit+0x1a0>)
 8003c3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c40:	4a53      	ldr	r2, [pc, #332]	@ (8003d90 <HAL_I2C_MspInit+0x1a0>)
 8003c42:	f043 0301 	orr.w	r3, r3, #1
 8003c46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c48:	4b51      	ldr	r3, [pc, #324]	@ (8003d90 <HAL_I2C_MspInit+0x1a0>)
 8003c4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	61fb      	str	r3, [r7, #28]
 8003c52:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c54:	4b4e      	ldr	r3, [pc, #312]	@ (8003d90 <HAL_I2C_MspInit+0x1a0>)
 8003c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c58:	4a4d      	ldr	r2, [pc, #308]	@ (8003d90 <HAL_I2C_MspInit+0x1a0>)
 8003c5a:	f043 0302 	orr.w	r3, r3, #2
 8003c5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c60:	4b4b      	ldr	r3, [pc, #300]	@ (8003d90 <HAL_I2C_MspInit+0x1a0>)
 8003c62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	61bb      	str	r3, [r7, #24]
 8003c6a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_IMU_SCL_Pin;
 8003c6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c70:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c72:	2312      	movs	r3, #18
 8003c74:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c76:	2300      	movs	r3, #0
 8003c78:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c7e:	2304      	movs	r3, #4
 8003c80:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(I2C_IMU_SCL_GPIO_Port, &GPIO_InitStruct);
 8003c82:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003c86:	4619      	mov	r1, r3
 8003c88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c8c:	f005 fbc4 	bl	8009418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C_IMU_SDA_Pin;
 8003c90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c94:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c96:	2312      	movs	r3, #18
 8003c98:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003ca2:	2304      	movs	r3, #4
 8003ca4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(I2C_IMU_SDA_GPIO_Port, &GPIO_InitStruct);
 8003ca6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003caa:	4619      	mov	r1, r3
 8003cac:	4839      	ldr	r0, [pc, #228]	@ (8003d94 <HAL_I2C_MspInit+0x1a4>)
 8003cae:	f005 fbb3 	bl	8009418 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003cb2:	4b37      	ldr	r3, [pc, #220]	@ (8003d90 <HAL_I2C_MspInit+0x1a0>)
 8003cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cb6:	4a36      	ldr	r2, [pc, #216]	@ (8003d90 <HAL_I2C_MspInit+0x1a0>)
 8003cb8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003cbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cbe:	4b34      	ldr	r3, [pc, #208]	@ (8003d90 <HAL_I2C_MspInit+0x1a0>)
 8003cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cc6:	617b      	str	r3, [r7, #20]
 8003cc8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003cca:	e05a      	b.n	8003d82 <HAL_I2C_MspInit+0x192>
  else if(i2cHandle->Instance==I2C3)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a31      	ldr	r2, [pc, #196]	@ (8003d98 <HAL_I2C_MspInit+0x1a8>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d155      	bne.n	8003d82 <HAL_I2C_MspInit+0x192>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003cd6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003cda:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ce0:	f107 0320 	add.w	r3, r7, #32
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f007 f971 	bl	800afcc <HAL_RCCEx_PeriphCLKConfig>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <HAL_I2C_MspInit+0x104>
      Error_Handler();
 8003cf0:	f000 f978 	bl	8003fe4 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cf4:	4b26      	ldr	r3, [pc, #152]	@ (8003d90 <HAL_I2C_MspInit+0x1a0>)
 8003cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cf8:	4a25      	ldr	r2, [pc, #148]	@ (8003d90 <HAL_I2C_MspInit+0x1a0>)
 8003cfa:	f043 0301 	orr.w	r3, r3, #1
 8003cfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d00:	4b23      	ldr	r3, [pc, #140]	@ (8003d90 <HAL_I2C_MspInit+0x1a0>)
 8003d02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	613b      	str	r3, [r7, #16]
 8003d0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d0c:	4b20      	ldr	r3, [pc, #128]	@ (8003d90 <HAL_I2C_MspInit+0x1a0>)
 8003d0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d10:	4a1f      	ldr	r2, [pc, #124]	@ (8003d90 <HAL_I2C_MspInit+0x1a0>)
 8003d12:	f043 0304 	orr.w	r3, r3, #4
 8003d16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d18:	4b1d      	ldr	r3, [pc, #116]	@ (8003d90 <HAL_I2C_MspInit+0x1a0>)
 8003d1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C_MAIN_SCL_Pin;
 8003d24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d28:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d2a:	2312      	movs	r3, #18
 8003d2c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d32:	2300      	movs	r3, #0
 8003d34:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8003d36:	2302      	movs	r3, #2
 8003d38:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(I2C_MAIN_SCL_GPIO_Port, &GPIO_InitStruct);
 8003d3a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003d3e:	4619      	mov	r1, r3
 8003d40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d44:	f005 fb68 	bl	8009418 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C_MAIN_SDA_Pin;
 8003d48:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003d4c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d4e:	2312      	movs	r3, #18
 8003d50:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d52:	2300      	movs	r3, #0
 8003d54:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d56:	2300      	movs	r3, #0
 8003d58:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8003d5a:	2308      	movs	r3, #8
 8003d5c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(I2C_MAIN_SDA_GPIO_Port, &GPIO_InitStruct);
 8003d5e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003d62:	4619      	mov	r1, r3
 8003d64:	480d      	ldr	r0, [pc, #52]	@ (8003d9c <HAL_I2C_MspInit+0x1ac>)
 8003d66:	f005 fb57 	bl	8009418 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003d6a:	4b09      	ldr	r3, [pc, #36]	@ (8003d90 <HAL_I2C_MspInit+0x1a0>)
 8003d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d6e:	4a08      	ldr	r2, [pc, #32]	@ (8003d90 <HAL_I2C_MspInit+0x1a0>)
 8003d70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003d74:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d76:	4b06      	ldr	r3, [pc, #24]	@ (8003d90 <HAL_I2C_MspInit+0x1a0>)
 8003d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d7a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003d7e:	60bb      	str	r3, [r7, #8]
 8003d80:	68bb      	ldr	r3, [r7, #8]
}
 8003d82:	bf00      	nop
 8003d84:	3778      	adds	r7, #120	@ 0x78
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	40005400 	.word	0x40005400
 8003d90:	40021000 	.word	0x40021000
 8003d94:	48000400 	.word	0x48000400
 8003d98:	40007800 	.word	0x40007800
 8003d9c:	48000800 	.word	0x48000800

08003da0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003da6:	f002 fcd0 	bl	800674a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003daa:	f000 f8c7 	bl	8003f3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003dae:	f7ff fe13 	bl	80039d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003db2:	f7ff fdb7 	bl	8003924 <MX_DMA_Init>
  MX_ADC2_Init();
 8003db6:	f7ff fb47 	bl	8003448 <MX_ADC2_Init>
  MX_DAC1_Init();
 8003dba:	f7ff fc7b 	bl	80036b4 <MX_DAC1_Init>
  MX_I2C1_Init();
 8003dbe:	f7ff fe97 	bl	8003af0 <MX_I2C1_Init>
  MX_I2C3_Init();
 8003dc2:	f7ff fed5 	bl	8003b70 <MX_I2C3_Init>
  MX_TIM2_Init();
 8003dc6:	f000 fb5f 	bl	8004488 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003dca:	f000 fbdf 	bl	800458c <MX_TIM3_Init>
  MX_TIM4_Init();
 8003dce:	f000 fc5f 	bl	8004690 <MX_TIM4_Init>
  MX_UCPD1_Init();
 8003dd2:	f001 f887 	bl	8004ee4 <MX_UCPD1_Init>
  MX_USART1_UART_Init();
 8003dd6:	f001 f915 	bl	8005004 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003dda:	f001 f963 	bl	80050a4 <MX_USART2_UART_Init>
  MX_TIM15_Init();
 8003dde:	f000 fd13 	bl	8004808 <MX_TIM15_Init>
  MX_TIM16_Init();
 8003de2:	f000 fd63 	bl	80048ac <MX_TIM16_Init>
  MX_TIM6_Init();
 8003de6:	f000 fca1 	bl	800472c <MX_TIM6_Init>
  MX_TIM7_Init();
 8003dea:	f000 fcd7 	bl	800479c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

	semb_cpltCllbck = xSemaphoreCreateBinary();
 8003dee:	2203      	movs	r2, #3
 8003df0:	2100      	movs	r1, #0
 8003df2:	2001      	movs	r0, #1
 8003df4:	f010 f8cc 	bl	8013f90 <xQueueGenericCreate>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	4a3e      	ldr	r2, [pc, #248]	@ (8003ef4 <main+0x154>)
 8003dfc:	6013      	str	r3, [r2, #0]
	semb_halfCllbck = xSemaphoreCreateBinary();
 8003dfe:	2203      	movs	r2, #3
 8003e00:	2100      	movs	r1, #0
 8003e02:	2001      	movs	r0, #1
 8003e04:	f010 f8c4 	bl	8013f90 <xQueueGenericCreate>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	4a3b      	ldr	r2, [pc, #236]	@ (8003ef8 <main+0x158>)
 8003e0c:	6013      	str	r3, [r2, #0]

	shell_init();
 8003e0e:	f013 fd2f 	bl	8017870 <shell_init>
	lidar_init();
 8003e12:	f00d f967 	bl	80110e4 <lidar_init>
	changement_mode_init();
 8003e16:	f013 fc11 	bl	801763c <changement_mode_init>

	vPortGetHeapStats(&heapStats);
 8003e1a:	4838      	ldr	r0, [pc, #224]	@ (8003efc <main+0x15c>)
 8003e1c:	f012 fd44 	bl	80168a8 <vPortGetHeapStats>
	//xTaskCreate(init_run , 				"Initalisation",TASK_STACK_DEPTH_CHANGEMODE, NULL, 1, &h_task_init) != pdPASS ? Error_Handler():(void)0;
	vPortGetHeapStats(&heapStats);
 8003e20:	4836      	ldr	r0, [pc, #216]	@ (8003efc <main+0x15c>)
 8003e22:	f012 fd41 	bl	80168a8 <vPortGetHeapStats>
	xTaskCreate(changeMode_run,			"Changement MODE", TASK_STACK_DEPTH_CHANGEMODE, NULL, TASK_PRIORITY_CHANGEMODE, &h_task_changemenMode) != pdPASS ? Error_Handler():(void)0;
 8003e26:	4b36      	ldr	r3, [pc, #216]	@ (8003f00 <main+0x160>)
 8003e28:	9301      	str	r3, [sp, #4]
 8003e2a:	230a      	movs	r3, #10
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	2300      	movs	r3, #0
 8003e30:	2240      	movs	r2, #64	@ 0x40
 8003e32:	4934      	ldr	r1, [pc, #208]	@ (8003f04 <main+0x164>)
 8003e34:	4834      	ldr	r0, [pc, #208]	@ (8003f08 <main+0x168>)
 8003e36:	f010 ff03 	bl	8014c40 <xTaskCreate>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d001      	beq.n	8003e44 <main+0xa4>
 8003e40:	f000 f8d0 	bl	8003fe4 <Error_Handler>
	//vPortGetHeapStats(&heapStats);
	xTaskCreate(asserv_courant_run, 	"Asserv Courant", TASK_STACK_DEPTH_ASSERV_I, NULL, TASK_PRIORITY_ASSERV_I, &h_task_asserv_I) != pdPASS ? Error_Handler():(void)0;
 8003e44:	4b31      	ldr	r3, [pc, #196]	@ (8003f0c <main+0x16c>)
 8003e46:	9301      	str	r3, [sp, #4]
 8003e48:	2302      	movs	r3, #2
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	2240      	movs	r2, #64	@ 0x40
 8003e50:	492f      	ldr	r1, [pc, #188]	@ (8003f10 <main+0x170>)
 8003e52:	4830      	ldr	r0, [pc, #192]	@ (8003f14 <main+0x174>)
 8003e54:	f010 fef4 	bl	8014c40 <xTaskCreate>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d001      	beq.n	8003e62 <main+0xc2>
 8003e5e:	f000 f8c1 	bl	8003fe4 <Error_Handler>
	vPortGetHeapStats(&heapStats);
 8003e62:	4826      	ldr	r0, [pc, #152]	@ (8003efc <main+0x15c>)
 8003e64:	f012 fd20 	bl	80168a8 <vPortGetHeapStats>
	//xTaskCreate(asserv_position_run, 	"Asserv Position", TASK_STACK_DEPTH_ASSERV_XYZ, NULL, TASK_PRIORITY_ASSERV_XYZ, &h_task_asserv_XYZ) != pdPASS ? Error_Handler():(void)0;
	vPortGetHeapStats(&heapStats);
 8003e68:	4824      	ldr	r0, [pc, #144]	@ (8003efc <main+0x15c>)
 8003e6a:	f012 fd1d 	bl	80168a8 <vPortGetHeapStats>

	xTaskCreate(lidarprocess,			"LIDAR_Process", TASK_STACK_DEPTH_LIDAR, NULL, TASK_PRIORITY_LIDAR, &h_task_LIDAR_Process) != pdPASS ? Error_Handler():(void)0;
 8003e6e:	4b2a      	ldr	r3, [pc, #168]	@ (8003f18 <main+0x178>)
 8003e70:	9301      	str	r3, [sp, #4]
 8003e72:	2305      	movs	r3, #5
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	2300      	movs	r3, #0
 8003e78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e7c:	4927      	ldr	r1, [pc, #156]	@ (8003f1c <main+0x17c>)
 8003e7e:	4828      	ldr	r0, [pc, #160]	@ (8003f20 <main+0x180>)
 8003e80:	f010 fede 	bl	8014c40 <xTaskCreate>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d001      	beq.n	8003e8e <main+0xee>
 8003e8a:	f000 f8ab 	bl	8003fe4 <Error_Handler>
	vPortGetHeapStats(&heapStats);
 8003e8e:	481b      	ldr	r0, [pc, #108]	@ (8003efc <main+0x15c>)
 8003e90:	f012 fd0a 	bl	80168a8 <vPortGetHeapStats>
	xTaskCreate(lidarTake,				"LIDAR_Take", TASK_STACK_DEPTH_LIDAR, NULL, TASK_PRIORITY_LIDAR+1, &h_task_LIDAR_Take) != pdPASS ? Error_Handler():(void)0;
 8003e94:	4b23      	ldr	r3, [pc, #140]	@ (8003f24 <main+0x184>)
 8003e96:	9301      	str	r3, [sp, #4]
 8003e98:	2306      	movs	r3, #6
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ea2:	4921      	ldr	r1, [pc, #132]	@ (8003f28 <main+0x188>)
 8003ea4:	4821      	ldr	r0, [pc, #132]	@ (8003f2c <main+0x18c>)
 8003ea6:	f010 fecb 	bl	8014c40 <xTaskCreate>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d001      	beq.n	8003eb4 <main+0x114>
 8003eb0:	f000 f898 	bl	8003fe4 <Error_Handler>
	vPortGetHeapStats(&heapStats);
 8003eb4:	4811      	ldr	r0, [pc, #68]	@ (8003efc <main+0x15c>)
 8003eb6:	f012 fcf7 	bl	80168a8 <vPortGetHeapStats>
	xTaskCreate(shell_run,				"Shell", TASK_STACK_DEPTH_SHELL, NULL, TASK_PRIORITY_SHELL, &h_task_shell) != pdPASS ? Error_Handler():(void)0;
 8003eba:	4b1d      	ldr	r3, [pc, #116]	@ (8003f30 <main+0x190>)
 8003ebc:	9301      	str	r3, [sp, #4]
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ec8:	491a      	ldr	r1, [pc, #104]	@ (8003f34 <main+0x194>)
 8003eca:	481b      	ldr	r0, [pc, #108]	@ (8003f38 <main+0x198>)
 8003ecc:	f010 feb8 	bl	8014c40 <xTaskCreate>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d001      	beq.n	8003eda <main+0x13a>
 8003ed6:	f000 f885 	bl	8003fe4 <Error_Handler>
	vPortGetHeapStats(&heapStats);
 8003eda:	4808      	ldr	r0, [pc, #32]	@ (8003efc <main+0x15c>)
 8003edc:	f012 fce4 	bl	80168a8 <vPortGetHeapStats>
	osKernelStart();
 8003ee0:	f00f fe24 	bl	8013b2c <osKernelStart>
  /* USER CODE END 2 */

  /* USBPD initialisation ---------------------------------*/
  MX_USBPD_Init();
 8003ee4:	f012 fd3e 	bl	8016964 <MX_USBPD_Init>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8003ee8:	f7ff fbc2 	bl	8003670 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003eec:	f00f fe1e 	bl	8013b2c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8003ef0:	bf00      	nop
 8003ef2:	e7fd      	b.n	8003ef0 <main+0x150>
 8003ef4:	2000077c 	.word	0x2000077c
 8003ef8:	20000778 	.word	0x20000778
 8003efc:	20000748 	.word	0x20000748
 8003f00:	2000076c 	.word	0x2000076c
 8003f04:	0801dd68 	.word	0x0801dd68
 8003f08:	0801764d 	.word	0x0801764d
 8003f0c:	20000768 	.word	0x20000768
 8003f10:	0801dd78 	.word	0x0801dd78
 8003f14:	080170b1 	.word	0x080170b1
 8003f18:	20000774 	.word	0x20000774
 8003f1c:	0801dd88 	.word	0x0801dd88
 8003f20:	080111f9 	.word	0x080111f9
 8003f24:	20000770 	.word	0x20000770
 8003f28:	0801dd98 	.word	0x0801dd98
 8003f2c:	08011151 	.word	0x08011151
 8003f30:	20000764 	.word	0x20000764
 8003f34:	0801dda4 	.word	0x0801dda4
 8003f38:	08017925 	.word	0x08017925

08003f3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b094      	sub	sp, #80	@ 0x50
 8003f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f42:	f107 0318 	add.w	r3, r7, #24
 8003f46:	2238      	movs	r2, #56	@ 0x38
 8003f48:	2100      	movs	r1, #0
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f016 f94c 	bl	801a1e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f50:	1d3b      	adds	r3, r7, #4
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	605a      	str	r2, [r3, #4]
 8003f58:	609a      	str	r2, [r3, #8]
 8003f5a:	60da      	str	r2, [r3, #12]
 8003f5c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f5e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003f62:	f006 fa2f 	bl	800a3c4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003f66:	2302      	movs	r3, #2
 8003f68:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003f6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f6e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003f70:	2340      	movs	r3, #64	@ 0x40
 8003f72:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003f74:	2300      	movs	r3, #0
 8003f76:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f78:	f107 0318 	add.w	r3, r7, #24
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f006 fac5 	bl	800a50c <HAL_RCC_OscConfig>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8003f88:	f000 f82c 	bl	8003fe4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f8c:	230f      	movs	r3, #15
 8003f8e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003f90:	2301      	movs	r3, #1
 8003f92:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f94:	2300      	movs	r3, #0
 8003f96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003fa0:	1d3b      	adds	r3, r7, #4
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f006 fdc3 	bl	800ab30 <HAL_RCC_ClockConfig>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d001      	beq.n	8003fb4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8003fb0:	f000 f818 	bl	8003fe4 <Error_Handler>
  }
}
 8003fb4:	bf00      	nop
 8003fb6:	3750      	adds	r7, #80	@ 0x50
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	CUSTOM_TIM_PeriodElapsedCallback(htim);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f013 f8bf 	bl	8017148 <CUSTOM_TIM_PeriodElapsedCallback>
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a04      	ldr	r2, [pc, #16]	@ (8003fe0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d101      	bne.n	8003fd8 <HAL_TIM_PeriodElapsedCallback+0x1c>
    HAL_IncTick();
 8003fd4:	f002 fbd2 	bl	800677c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003fd8:	bf00      	nop
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	40014800 	.word	0x40014800

08003fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003fe8:	b672      	cpsid	i
}
 8003fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003fec:	bf00      	nop
 8003fee:	e7fd      	b.n	8003fec <Error_Handler+0x8>

08003ff0 <__io_putchar>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */
PUTCHAR_PROTOTYPE
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART2 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8003ff8:	1d39      	adds	r1, r7, #4
 8003ffa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ffe:	2201      	movs	r2, #1
 8004000:	4803      	ldr	r0, [pc, #12]	@ (8004010 <__io_putchar+0x20>)
 8004002:	f009 f85d 	bl	800d0c0 <HAL_UART_Transmit>
	return ch;
 8004006:	687b      	ldr	r3, [r7, #4]
}
 8004008:	4618      	mov	r0, r3
 800400a:	3708      	adds	r7, #8
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	20000de4 	.word	0x20000de4

08004014 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800401a:	4b11      	ldr	r3, [pc, #68]	@ (8004060 <HAL_MspInit+0x4c>)
 800401c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800401e:	4a10      	ldr	r2, [pc, #64]	@ (8004060 <HAL_MspInit+0x4c>)
 8004020:	f043 0301 	orr.w	r3, r3, #1
 8004024:	6613      	str	r3, [r2, #96]	@ 0x60
 8004026:	4b0e      	ldr	r3, [pc, #56]	@ (8004060 <HAL_MspInit+0x4c>)
 8004028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	607b      	str	r3, [r7, #4]
 8004030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004032:	4b0b      	ldr	r3, [pc, #44]	@ (8004060 <HAL_MspInit+0x4c>)
 8004034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004036:	4a0a      	ldr	r2, [pc, #40]	@ (8004060 <HAL_MspInit+0x4c>)
 8004038:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800403c:	6593      	str	r3, [r2, #88]	@ 0x58
 800403e:	4b08      	ldr	r3, [pc, #32]	@ (8004060 <HAL_MspInit+0x4c>)
 8004040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004046:	603b      	str	r3, [r7, #0]
 8004048:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800404a:	2200      	movs	r2, #0
 800404c:	210f      	movs	r1, #15
 800404e:	f06f 0001 	mvn.w	r0, #1
 8004052:	f004 fad1 	bl	80085f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004056:	bf00      	nop
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40021000 	.word	0x40021000

08004064 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b08c      	sub	sp, #48	@ 0x30
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800406c:	2300      	movs	r3, #0
 800406e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8004070:	2300      	movs	r3, #0
 8004072:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8004074:	4b2f      	ldr	r3, [pc, #188]	@ (8004134 <HAL_InitTick+0xd0>)
 8004076:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004078:	4a2e      	ldr	r2, [pc, #184]	@ (8004134 <HAL_InitTick+0xd0>)
 800407a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800407e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004080:	4b2c      	ldr	r3, [pc, #176]	@ (8004134 <HAL_InitTick+0xd0>)
 8004082:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004084:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004088:	60bb      	str	r3, [r7, #8]
 800408a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800408c:	f107 020c 	add.w	r2, r7, #12
 8004090:	f107 0310 	add.w	r3, r7, #16
 8004094:	4611      	mov	r1, r2
 8004096:	4618      	mov	r0, r3
 8004098:	f006 ff20 	bl	800aedc <HAL_RCC_GetClockConfig>
  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800409c:	f006 ff08 	bl	800aeb0 <HAL_RCC_GetPCLK2Freq>
 80040a0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80040a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a4:	4a24      	ldr	r2, [pc, #144]	@ (8004138 <HAL_InitTick+0xd4>)
 80040a6:	fba2 2303 	umull	r2, r3, r2, r3
 80040aa:	0c9b      	lsrs	r3, r3, #18
 80040ac:	3b01      	subs	r3, #1
 80040ae:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80040b0:	4b22      	ldr	r3, [pc, #136]	@ (800413c <HAL_InitTick+0xd8>)
 80040b2:	4a23      	ldr	r2, [pc, #140]	@ (8004140 <HAL_InitTick+0xdc>)
 80040b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80040b6:	4b21      	ldr	r3, [pc, #132]	@ (800413c <HAL_InitTick+0xd8>)
 80040b8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80040bc:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80040be:	4a1f      	ldr	r2, [pc, #124]	@ (800413c <HAL_InitTick+0xd8>)
 80040c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c2:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80040c4:	4b1d      	ldr	r3, [pc, #116]	@ (800413c <HAL_InitTick+0xd8>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040ca:	4b1c      	ldr	r3, [pc, #112]	@ (800413c <HAL_InitTick+0xd8>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 80040d0:	481a      	ldr	r0, [pc, #104]	@ (800413c <HAL_InitTick+0xd8>)
 80040d2:	f007 f96b 	bl	800b3ac <HAL_TIM_Base_Init>
 80040d6:	4603      	mov	r3, r0
 80040d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80040dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d11b      	bne.n	800411c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 80040e4:	4815      	ldr	r0, [pc, #84]	@ (800413c <HAL_InitTick+0xd8>)
 80040e6:	f007 fa4f 	bl	800b588 <HAL_TIM_Base_Start_IT>
 80040ea:	4603      	mov	r3, r0
 80040ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80040f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d111      	bne.n	800411c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80040f8:	201a      	movs	r0, #26
 80040fa:	f004 fa97 	bl	800862c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b0f      	cmp	r3, #15
 8004102:	d808      	bhi.n	8004116 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 8004104:	2200      	movs	r2, #0
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	201a      	movs	r0, #26
 800410a:	f004 fa75 	bl	80085f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800410e:	4a0d      	ldr	r2, [pc, #52]	@ (8004144 <HAL_InitTick+0xe0>)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6013      	str	r3, [r2, #0]
 8004114:	e002      	b.n	800411c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

  HAL_TIM_RegisterCallback(&htim17, HAL_TIM_PERIOD_ELAPSED_CB_ID, TimeBase_TIM_PeriodElapsedCallback);
 800411c:	4a0a      	ldr	r2, [pc, #40]	@ (8004148 <HAL_InitTick+0xe4>)
 800411e:	210e      	movs	r1, #14
 8004120:	4806      	ldr	r0, [pc, #24]	@ (800413c <HAL_InitTick+0xd8>)
 8004122:	f008 f881 	bl	800c228 <HAL_TIM_RegisterCallback>

 /* Return function status */
  return status;
 8004126:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800412a:	4618      	mov	r0, r3
 800412c:	3730      	adds	r7, #48	@ 0x30
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	40021000 	.word	0x40021000
 8004138:	431bde83 	.word	0x431bde83
 800413c:	20000780 	.word	0x20000780
 8004140:	40014800 	.word	0x40014800
 8004144:	2000013c 	.word	0x2000013c
 8004148:	0800414d 	.word	0x0800414d

0800414c <TimeBase_TIM_PeriodElapsedCallback>:
  * @param  htim TIM handle
  * @retval None
  */

void TimeBase_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 8004154:	f002 fb12 	bl	800677c <HAL_IncTick>
}
 8004158:	bf00      	nop
 800415a:	3708      	adds	r7, #8
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004164:	f3bf 8f4f 	dsb	sy
}
 8004168:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800416a:	4b06      	ldr	r3, [pc, #24]	@ (8004184 <__NVIC_SystemReset+0x24>)
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004172:	4904      	ldr	r1, [pc, #16]	@ (8004184 <__NVIC_SystemReset+0x24>)
 8004174:	4b04      	ldr	r3, [pc, #16]	@ (8004188 <__NVIC_SystemReset+0x28>)
 8004176:	4313      	orrs	r3, r2
 8004178:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800417a:	f3bf 8f4f 	dsb	sy
}
 800417e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004180:	bf00      	nop
 8004182:	e7fd      	b.n	8004180 <__NVIC_SystemReset+0x20>
 8004184:	e000ed00 	.word	0xe000ed00
 8004188:	05fa0004 	.word	0x05fa0004

0800418c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8004190:	bf00      	nop
 8004192:	e7fd      	b.n	8004190 <NMI_Handler+0x4>

08004194 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
    NVIC_SystemReset(); // Demande un reset système via le NVIC
 8004198:	f7ff ffe2 	bl	8004160 <__NVIC_SystemReset>

0800419c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041a0:	bf00      	nop
 80041a2:	e7fd      	b.n	80041a0 <MemManage_Handler+0x4>

080041a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041a8:	bf00      	nop
 80041aa:	e7fd      	b.n	80041a8 <BusFault_Handler+0x4>

080041ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041b0:	bf00      	nop
 80041b2:	e7fd      	b.n	80041b0 <UsageFault_Handler+0x4>

080041b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041b8:	bf00      	nop
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80041c2:	b480      	push	{r7}
 80041c4:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80041c6:	bf00      	nop
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel2_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80041d4:	bf00      	nop
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
	...

080041e0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80041e4:	4802      	ldr	r0, [pc, #8]	@ (80041f0 <DMA1_Channel3_IRQHandler+0x10>)
 80041e6:	f004 ffc8 	bl	800917a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80041ea:	bf00      	nop
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	200005c8 	.word	0x200005c8

080041f4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80041f8:	4802      	ldr	r0, [pc, #8]	@ (8004204 <DMA1_Channel4_IRQHandler+0x10>)
 80041fa:	f004 ffbe 	bl	800917a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80041fe:	bf00      	nop
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	20000f0c 	.word	0x20000f0c

08004208 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800420c:	4802      	ldr	r0, [pc, #8]	@ (8004218 <DMA1_Channel5_IRQHandler+0x10>)
 800420e:	f004 ffb4 	bl	800917a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8004212:	bf00      	nop
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	20000640 	.word	0x20000640

0800421c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8004220:	4802      	ldr	r0, [pc, #8]	@ (800422c <ADC1_2_IRQHandler+0x10>)
 8004222:	f003 f813 	bl	800724c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8004226:	bf00      	nop
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	2000055c 	.word	0x2000055c

08004230 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8004234:	4802      	ldr	r0, [pc, #8]	@ (8004240 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8004236:	f007 fc15 	bl	800ba64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800423a:	bf00      	nop
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	20000c4c 	.word	0x20000c4c

08004244 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004248:	4802      	ldr	r0, [pc, #8]	@ (8004254 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800424a:	f007 fc0b 	bl	800ba64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800424e:	bf00      	nop
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	20000d18 	.word	0x20000d18

08004258 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800425c:	4802      	ldr	r0, [pc, #8]	@ (8004268 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800425e:	f007 fc01 	bl	800ba64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8004262:	bf00      	nop
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	20000780 	.word	0x20000780

0800426c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004270:	4802      	ldr	r0, [pc, #8]	@ (800427c <USART1_IRQHandler+0x10>)
 8004272:	f009 fa27 	bl	800d6c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004276:	bf00      	nop
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	20000de4 	.word	0x20000de4

08004280 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004284:	4802      	ldr	r0, [pc, #8]	@ (8004290 <USART2_IRQHandler+0x10>)
 8004286:	f009 fa1d 	bl	800d6c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800428a:	bf00      	nop
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	20000e78 	.word	0x20000e78

08004294 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	CUSTOM_EXTI_IRQHandler();
 8004298:	f013 f8ec 	bl	8017474 <CUSTOM_EXTI_IRQHandler>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GE_EXTI_Pin);
 800429c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80042a0:	f005 fa86 	bl	80097b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(START_Pin);
 80042a4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80042a8:	f005 fa82 	bl	80097b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80042ac:	bf00      	nop
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80042b4:	4803      	ldr	r0, [pc, #12]	@ (80042c4 <TIM6_DAC_IRQHandler+0x14>)
 80042b6:	f007 fbd5 	bl	800ba64 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 80042ba:	4803      	ldr	r0, [pc, #12]	@ (80042c8 <TIM6_DAC_IRQHandler+0x18>)
 80042bc:	f004 faba 	bl	8008834 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80042c0:	bf00      	nop
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	20000ab4 	.word	0x20000ab4
 80042c8:	2000062c 	.word	0x2000062c

080042cc <UCPD1_IRQHandler>:

/**
  * @brief This function handles UCPD1 interrupt / UCPD1 wake-up interrupt through EXTI line 43.
  */
void UCPD1_IRQHandler(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UCPD1_IRQn 0 */

  /* USER CODE END UCPD1_IRQn 0 */
  USBPD_PORT0_IRQHandler();
 80042d0:	f00d fe3b 	bl	8011f4a <USBPD_PORT0_IRQHandler>

  /* USER CODE BEGIN UCPD1_IRQn 1 */

  /* USER CODE END UCPD1_IRQn 1 */
}
 80042d4:	bf00      	nop
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
  return 1;
 80042dc:	2301      	movs	r3, #1
}
 80042de:	4618      	mov	r0, r3
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <_kill>:

int _kill(int pid, int sig)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80042f2:	f015 ffeb 	bl	801a2cc <__errno>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2216      	movs	r2, #22
 80042fa:	601a      	str	r2, [r3, #0]
  return -1;
 80042fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004300:	4618      	mov	r0, r3
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <_exit>:

void _exit (int status)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004310:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f7ff ffe7 	bl	80042e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800431a:	bf00      	nop
 800431c:	e7fd      	b.n	800431a <_exit+0x12>

0800431e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b086      	sub	sp, #24
 8004322:	af00      	add	r7, sp, #0
 8004324:	60f8      	str	r0, [r7, #12]
 8004326:	60b9      	str	r1, [r7, #8]
 8004328:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800432a:	2300      	movs	r3, #0
 800432c:	617b      	str	r3, [r7, #20]
 800432e:	e00a      	b.n	8004346 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004330:	f3af 8000 	nop.w
 8004334:	4601      	mov	r1, r0
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	1c5a      	adds	r2, r3, #1
 800433a:	60ba      	str	r2, [r7, #8]
 800433c:	b2ca      	uxtb	r2, r1
 800433e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	3301      	adds	r3, #1
 8004344:	617b      	str	r3, [r7, #20]
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	429a      	cmp	r2, r3
 800434c:	dbf0      	blt.n	8004330 <_read+0x12>
  }

  return len;
 800434e:	687b      	ldr	r3, [r7, #4]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3718      	adds	r7, #24
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004364:	2300      	movs	r3, #0
 8004366:	617b      	str	r3, [r7, #20]
 8004368:	e009      	b.n	800437e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	1c5a      	adds	r2, r3, #1
 800436e:	60ba      	str	r2, [r7, #8]
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	4618      	mov	r0, r3
 8004374:	f7ff fe3c 	bl	8003ff0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	3301      	adds	r3, #1
 800437c:	617b      	str	r3, [r7, #20]
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	429a      	cmp	r2, r3
 8004384:	dbf1      	blt.n	800436a <_write+0x12>
  }
  return len;
 8004386:	687b      	ldr	r3, [r7, #4]
}
 8004388:	4618      	mov	r0, r3
 800438a:	3718      	adds	r7, #24
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <_close>:

int _close(int file)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004398:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800439c:	4618      	mov	r0, r3
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80043b8:	605a      	str	r2, [r3, #4]
  return 0;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <_isatty>:

int _isatty(int file)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80043d0:	2301      	movs	r3, #1
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80043de:	b480      	push	{r7}
 80043e0:	b085      	sub	sp, #20
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	60f8      	str	r0, [r7, #12]
 80043e6:	60b9      	str	r1, [r7, #8]
 80043e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3714      	adds	r7, #20
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004400:	4a14      	ldr	r2, [pc, #80]	@ (8004454 <_sbrk+0x5c>)
 8004402:	4b15      	ldr	r3, [pc, #84]	@ (8004458 <_sbrk+0x60>)
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800440c:	4b13      	ldr	r3, [pc, #76]	@ (800445c <_sbrk+0x64>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d102      	bne.n	800441a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004414:	4b11      	ldr	r3, [pc, #68]	@ (800445c <_sbrk+0x64>)
 8004416:	4a12      	ldr	r2, [pc, #72]	@ (8004460 <_sbrk+0x68>)
 8004418:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800441a:	4b10      	ldr	r3, [pc, #64]	@ (800445c <_sbrk+0x64>)
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4413      	add	r3, r2
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	429a      	cmp	r2, r3
 8004426:	d207      	bcs.n	8004438 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004428:	f015 ff50 	bl	801a2cc <__errno>
 800442c:	4603      	mov	r3, r0
 800442e:	220c      	movs	r2, #12
 8004430:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004432:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004436:	e009      	b.n	800444c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004438:	4b08      	ldr	r3, [pc, #32]	@ (800445c <_sbrk+0x64>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800443e:	4b07      	ldr	r3, [pc, #28]	@ (800445c <_sbrk+0x64>)
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4413      	add	r3, r2
 8004446:	4a05      	ldr	r2, [pc, #20]	@ (800445c <_sbrk+0x64>)
 8004448:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800444a:	68fb      	ldr	r3, [r7, #12]
}
 800444c:	4618      	mov	r0, r3
 800444e:	3718      	adds	r7, #24
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	20008000 	.word	0x20008000
 8004458:	00000400 	.word	0x00000400
 800445c:	2000084c 	.word	0x2000084c
 8004460:	20007b40 	.word	0x20007b40

08004464 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004468:	4b06      	ldr	r3, [pc, #24]	@ (8004484 <SystemInit+0x20>)
 800446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800446e:	4a05      	ldr	r2, [pc, #20]	@ (8004484 <SystemInit+0x20>)
 8004470:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004474:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004478:	bf00      	nop
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	e000ed00 	.word	0xe000ed00

08004488 <MX_TIM2_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b08e      	sub	sp, #56	@ 0x38
 800448c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800448e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	605a      	str	r2, [r3, #4]
 8004498:	609a      	str	r2, [r3, #8]
 800449a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800449c:	f107 031c 	add.w	r3, r7, #28
 80044a0:	2200      	movs	r2, #0
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	605a      	str	r2, [r3, #4]
 80044a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80044a8:	463b      	mov	r3, r7
 80044aa:	2200      	movs	r2, #0
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	605a      	str	r2, [r3, #4]
 80044b0:	609a      	str	r2, [r3, #8]
 80044b2:	60da      	str	r2, [r3, #12]
 80044b4:	611a      	str	r2, [r3, #16]
 80044b6:	615a      	str	r2, [r3, #20]
 80044b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80044ba:	4b33      	ldr	r3, [pc, #204]	@ (8004588 <MX_TIM2_Init+0x100>)
 80044bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80044c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80044c2:	4b31      	ldr	r3, [pc, #196]	@ (8004588 <MX_TIM2_Init+0x100>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044c8:	4b2f      	ldr	r3, [pc, #188]	@ (8004588 <MX_TIM2_Init+0x100>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 639;
 80044ce:	4b2e      	ldr	r3, [pc, #184]	@ (8004588 <MX_TIM2_Init+0x100>)
 80044d0:	f240 227f 	movw	r2, #639	@ 0x27f
 80044d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044d6:	4b2c      	ldr	r3, [pc, #176]	@ (8004588 <MX_TIM2_Init+0x100>)
 80044d8:	2200      	movs	r2, #0
 80044da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044dc:	4b2a      	ldr	r3, [pc, #168]	@ (8004588 <MX_TIM2_Init+0x100>)
 80044de:	2200      	movs	r2, #0
 80044e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80044e2:	4829      	ldr	r0, [pc, #164]	@ (8004588 <MX_TIM2_Init+0x100>)
 80044e4:	f006 ff62 	bl	800b3ac <HAL_TIM_Base_Init>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80044ee:	f7ff fd79 	bl	8003fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80044f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80044f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80044fc:	4619      	mov	r1, r3
 80044fe:	4822      	ldr	r0, [pc, #136]	@ (8004588 <MX_TIM2_Init+0x100>)
 8004500:	f007 fd3e 	bl	800bf80 <HAL_TIM_ConfigClockSource>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800450a:	f7ff fd6b 	bl	8003fe4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800450e:	481e      	ldr	r0, [pc, #120]	@ (8004588 <MX_TIM2_Init+0x100>)
 8004510:	f007 f8a4 	bl	800b65c <HAL_TIM_PWM_Init>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800451a:	f7ff fd63 	bl	8003fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800451e:	2300      	movs	r3, #0
 8004520:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004522:	2300      	movs	r3, #0
 8004524:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004526:	f107 031c 	add.w	r3, r7, #28
 800452a:	4619      	mov	r1, r3
 800452c:	4816      	ldr	r0, [pc, #88]	@ (8004588 <MX_TIM2_Init+0x100>)
 800452e:	f008 fca5 	bl	800ce7c <HAL_TIMEx_MasterConfigSynchronization>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d001      	beq.n	800453c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004538:	f7ff fd54 	bl	8003fe4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800453c:	2360      	movs	r3, #96	@ 0x60
 800453e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004540:	2300      	movs	r3, #0
 8004542:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004544:	2300      	movs	r3, #0
 8004546:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004548:	2300      	movs	r3, #0
 800454a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800454c:	463b      	mov	r3, r7
 800454e:	2208      	movs	r2, #8
 8004550:	4619      	mov	r1, r3
 8004552:	480d      	ldr	r0, [pc, #52]	@ (8004588 <MX_TIM2_Init+0x100>)
 8004554:	f007 fc00 	bl	800bd58 <HAL_TIM_PWM_ConfigChannel>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800455e:	f7ff fd41 	bl	8003fe4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004562:	463b      	mov	r3, r7
 8004564:	220c      	movs	r2, #12
 8004566:	4619      	mov	r1, r3
 8004568:	4807      	ldr	r0, [pc, #28]	@ (8004588 <MX_TIM2_Init+0x100>)
 800456a:	f007 fbf5 	bl	800bd58 <HAL_TIM_PWM_ConfigChannel>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8004574:	f7ff fd36 	bl	8003fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004578:	4803      	ldr	r0, [pc, #12]	@ (8004588 <MX_TIM2_Init+0x100>)
 800457a:	f000 fa69 	bl	8004a50 <HAL_TIM_MspPostInit>

}
 800457e:	bf00      	nop
 8004580:	3738      	adds	r7, #56	@ 0x38
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	20000850 	.word	0x20000850

0800458c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b08e      	sub	sp, #56	@ 0x38
 8004590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004592:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004596:	2200      	movs	r2, #0
 8004598:	601a      	str	r2, [r3, #0]
 800459a:	605a      	str	r2, [r3, #4]
 800459c:	609a      	str	r2, [r3, #8]
 800459e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045a0:	f107 031c 	add.w	r3, r7, #28
 80045a4:	2200      	movs	r2, #0
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	605a      	str	r2, [r3, #4]
 80045aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80045ac:	463b      	mov	r3, r7
 80045ae:	2200      	movs	r2, #0
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	605a      	str	r2, [r3, #4]
 80045b4:	609a      	str	r2, [r3, #8]
 80045b6:	60da      	str	r2, [r3, #12]
 80045b8:	611a      	str	r2, [r3, #16]
 80045ba:	615a      	str	r2, [r3, #20]
 80045bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80045be:	4b32      	ldr	r3, [pc, #200]	@ (8004688 <MX_TIM3_Init+0xfc>)
 80045c0:	4a32      	ldr	r2, [pc, #200]	@ (800468c <MX_TIM3_Init+0x100>)
 80045c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80045c4:	4b30      	ldr	r3, [pc, #192]	@ (8004688 <MX_TIM3_Init+0xfc>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045ca:	4b2f      	ldr	r3, [pc, #188]	@ (8004688 <MX_TIM3_Init+0xfc>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 639;
 80045d0:	4b2d      	ldr	r3, [pc, #180]	@ (8004688 <MX_TIM3_Init+0xfc>)
 80045d2:	f240 227f 	movw	r2, #639	@ 0x27f
 80045d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045d8:	4b2b      	ldr	r3, [pc, #172]	@ (8004688 <MX_TIM3_Init+0xfc>)
 80045da:	2200      	movs	r2, #0
 80045dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045de:	4b2a      	ldr	r3, [pc, #168]	@ (8004688 <MX_TIM3_Init+0xfc>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80045e4:	4828      	ldr	r0, [pc, #160]	@ (8004688 <MX_TIM3_Init+0xfc>)
 80045e6:	f006 fee1 	bl	800b3ac <HAL_TIM_Base_Init>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d001      	beq.n	80045f4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80045f0:	f7ff fcf8 	bl	8003fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80045f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80045fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80045fe:	4619      	mov	r1, r3
 8004600:	4821      	ldr	r0, [pc, #132]	@ (8004688 <MX_TIM3_Init+0xfc>)
 8004602:	f007 fcbd 	bl	800bf80 <HAL_TIM_ConfigClockSource>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800460c:	f7ff fcea 	bl	8003fe4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004610:	481d      	ldr	r0, [pc, #116]	@ (8004688 <MX_TIM3_Init+0xfc>)
 8004612:	f007 f823 	bl	800b65c <HAL_TIM_PWM_Init>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800461c:	f7ff fce2 	bl	8003fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004620:	2300      	movs	r3, #0
 8004622:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004624:	2300      	movs	r3, #0
 8004626:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004628:	f107 031c 	add.w	r3, r7, #28
 800462c:	4619      	mov	r1, r3
 800462e:	4816      	ldr	r0, [pc, #88]	@ (8004688 <MX_TIM3_Init+0xfc>)
 8004630:	f008 fc24 	bl	800ce7c <HAL_TIMEx_MasterConfigSynchronization>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800463a:	f7ff fcd3 	bl	8003fe4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800463e:	2360      	movs	r3, #96	@ 0x60
 8004640:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004642:	2300      	movs	r3, #0
 8004644:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004646:	2300      	movs	r3, #0
 8004648:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800464a:	2300      	movs	r3, #0
 800464c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800464e:	463b      	mov	r3, r7
 8004650:	2208      	movs	r2, #8
 8004652:	4619      	mov	r1, r3
 8004654:	480c      	ldr	r0, [pc, #48]	@ (8004688 <MX_TIM3_Init+0xfc>)
 8004656:	f007 fb7f 	bl	800bd58 <HAL_TIM_PWM_ConfigChannel>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d001      	beq.n	8004664 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8004660:	f7ff fcc0 	bl	8003fe4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004664:	463b      	mov	r3, r7
 8004666:	220c      	movs	r2, #12
 8004668:	4619      	mov	r1, r3
 800466a:	4807      	ldr	r0, [pc, #28]	@ (8004688 <MX_TIM3_Init+0xfc>)
 800466c:	f007 fb74 	bl	800bd58 <HAL_TIM_PWM_ConfigChannel>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8004676:	f7ff fcb5 	bl	8003fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800467a:	4803      	ldr	r0, [pc, #12]	@ (8004688 <MX_TIM3_Init+0xfc>)
 800467c:	f000 f9e8 	bl	8004a50 <HAL_TIM_MspPostInit>

}
 8004680:	bf00      	nop
 8004682:	3738      	adds	r7, #56	@ 0x38
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	2000091c 	.word	0x2000091c
 800468c:	40000400 	.word	0x40000400

08004690 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b088      	sub	sp, #32
 8004694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004696:	f107 0310 	add.w	r3, r7, #16
 800469a:	2200      	movs	r2, #0
 800469c:	601a      	str	r2, [r3, #0]
 800469e:	605a      	str	r2, [r3, #4]
 80046a0:	609a      	str	r2, [r3, #8]
 80046a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046a4:	1d3b      	adds	r3, r7, #4
 80046a6:	2200      	movs	r2, #0
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	605a      	str	r2, [r3, #4]
 80046ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80046ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004724 <MX_TIM4_Init+0x94>)
 80046b0:	4a1d      	ldr	r2, [pc, #116]	@ (8004728 <MX_TIM4_Init+0x98>)
 80046b2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80046b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004724 <MX_TIM4_Init+0x94>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046ba:	4b1a      	ldr	r3, [pc, #104]	@ (8004724 <MX_TIM4_Init+0x94>)
 80046bc:	2200      	movs	r2, #0
 80046be:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80046c0:	4b18      	ldr	r3, [pc, #96]	@ (8004724 <MX_TIM4_Init+0x94>)
 80046c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80046c6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046c8:	4b16      	ldr	r3, [pc, #88]	@ (8004724 <MX_TIM4_Init+0x94>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046ce:	4b15      	ldr	r3, [pc, #84]	@ (8004724 <MX_TIM4_Init+0x94>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80046d4:	4813      	ldr	r0, [pc, #76]	@ (8004724 <MX_TIM4_Init+0x94>)
 80046d6:	f006 fe69 	bl	800b3ac <HAL_TIM_Base_Init>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d001      	beq.n	80046e4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80046e0:	f7ff fc80 	bl	8003fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80046e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80046ea:	f107 0310 	add.w	r3, r7, #16
 80046ee:	4619      	mov	r1, r3
 80046f0:	480c      	ldr	r0, [pc, #48]	@ (8004724 <MX_TIM4_Init+0x94>)
 80046f2:	f007 fc45 	bl	800bf80 <HAL_TIM_ConfigClockSource>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d001      	beq.n	8004700 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80046fc:	f7ff fc72 	bl	8003fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004700:	2300      	movs	r3, #0
 8004702:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004704:	2300      	movs	r3, #0
 8004706:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004708:	1d3b      	adds	r3, r7, #4
 800470a:	4619      	mov	r1, r3
 800470c:	4805      	ldr	r0, [pc, #20]	@ (8004724 <MX_TIM4_Init+0x94>)
 800470e:	f008 fbb5 	bl	800ce7c <HAL_TIMEx_MasterConfigSynchronization>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8004718:	f7ff fc64 	bl	8003fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800471c:	bf00      	nop
 800471e:	3720      	adds	r7, #32
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	200009e8 	.word	0x200009e8
 8004728:	40000800 	.word	0x40000800

0800472c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004732:	1d3b      	adds	r3, r7, #4
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	605a      	str	r2, [r3, #4]
 800473a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800473c:	4b15      	ldr	r3, [pc, #84]	@ (8004794 <MX_TIM6_Init+0x68>)
 800473e:	4a16      	ldr	r2, [pc, #88]	@ (8004798 <MX_TIM6_Init+0x6c>)
 8004740:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2000;
 8004742:	4b14      	ldr	r3, [pc, #80]	@ (8004794 <MX_TIM6_Init+0x68>)
 8004744:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004748:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800474a:	4b12      	ldr	r3, [pc, #72]	@ (8004794 <MX_TIM6_Init+0x68>)
 800474c:	2200      	movs	r2, #0
 800474e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8004750:	4b10      	ldr	r3, [pc, #64]	@ (8004794 <MX_TIM6_Init+0x68>)
 8004752:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004756:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004758:	4b0e      	ldr	r3, [pc, #56]	@ (8004794 <MX_TIM6_Init+0x68>)
 800475a:	2200      	movs	r2, #0
 800475c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800475e:	480d      	ldr	r0, [pc, #52]	@ (8004794 <MX_TIM6_Init+0x68>)
 8004760:	f006 fe24 	bl	800b3ac <HAL_TIM_Base_Init>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800476a:	f7ff fc3b 	bl	8003fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800476e:	2320      	movs	r3, #32
 8004770:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004772:	2300      	movs	r3, #0
 8004774:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004776:	1d3b      	adds	r3, r7, #4
 8004778:	4619      	mov	r1, r3
 800477a:	4806      	ldr	r0, [pc, #24]	@ (8004794 <MX_TIM6_Init+0x68>)
 800477c:	f008 fb7e 	bl	800ce7c <HAL_TIMEx_MasterConfigSynchronization>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8004786:	f7ff fc2d 	bl	8003fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800478a:	bf00      	nop
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	20000ab4 	.word	0x20000ab4
 8004798:	40001000 	.word	0x40001000

0800479c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047a2:	1d3b      	adds	r3, r7, #4
 80047a4:	2200      	movs	r2, #0
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	605a      	str	r2, [r3, #4]
 80047aa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80047ac:	4b14      	ldr	r3, [pc, #80]	@ (8004800 <MX_TIM7_Init+0x64>)
 80047ae:	4a15      	ldr	r2, [pc, #84]	@ (8004804 <MX_TIM7_Init+0x68>)
 80047b0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80047b2:	4b13      	ldr	r3, [pc, #76]	@ (8004800 <MX_TIM7_Init+0x64>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047b8:	4b11      	ldr	r3, [pc, #68]	@ (8004800 <MX_TIM7_Init+0x64>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 15999;
 80047be:	4b10      	ldr	r3, [pc, #64]	@ (8004800 <MX_TIM7_Init+0x64>)
 80047c0:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80047c4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047c6:	4b0e      	ldr	r3, [pc, #56]	@ (8004800 <MX_TIM7_Init+0x64>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80047cc:	480c      	ldr	r0, [pc, #48]	@ (8004800 <MX_TIM7_Init+0x64>)
 80047ce:	f006 fded 	bl	800b3ac <HAL_TIM_Base_Init>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80047d8:	f7ff fc04 	bl	8003fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047dc:	2300      	movs	r3, #0
 80047de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047e0:	2300      	movs	r3, #0
 80047e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80047e4:	1d3b      	adds	r3, r7, #4
 80047e6:	4619      	mov	r1, r3
 80047e8:	4805      	ldr	r0, [pc, #20]	@ (8004800 <MX_TIM7_Init+0x64>)
 80047ea:	f008 fb47 	bl	800ce7c <HAL_TIMEx_MasterConfigSynchronization>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80047f4:	f7ff fbf6 	bl	8003fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80047f8:	bf00      	nop
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	20000b80 	.word	0x20000b80
 8004804:	40001400 	.word	0x40001400

08004808 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b088      	sub	sp, #32
 800480c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800480e:	f107 0310 	add.w	r3, r7, #16
 8004812:	2200      	movs	r2, #0
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	605a      	str	r2, [r3, #4]
 8004818:	609a      	str	r2, [r3, #8]
 800481a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800481c:	1d3b      	adds	r3, r7, #4
 800481e:	2200      	movs	r2, #0
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	605a      	str	r2, [r3, #4]
 8004824:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8004826:	4b1f      	ldr	r3, [pc, #124]	@ (80048a4 <MX_TIM15_Init+0x9c>)
 8004828:	4a1f      	ldr	r2, [pc, #124]	@ (80048a8 <MX_TIM15_Init+0xa0>)
 800482a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 999;
 800482c:	4b1d      	ldr	r3, [pc, #116]	@ (80048a4 <MX_TIM15_Init+0x9c>)
 800482e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004832:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004834:	4b1b      	ldr	r3, [pc, #108]	@ (80048a4 <MX_TIM15_Init+0x9c>)
 8004836:	2200      	movs	r2, #0
 8004838:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 15999;
 800483a:	4b1a      	ldr	r3, [pc, #104]	@ (80048a4 <MX_TIM15_Init+0x9c>)
 800483c:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8004840:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004842:	4b18      	ldr	r3, [pc, #96]	@ (80048a4 <MX_TIM15_Init+0x9c>)
 8004844:	2200      	movs	r2, #0
 8004846:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8004848:	4b16      	ldr	r3, [pc, #88]	@ (80048a4 <MX_TIM15_Init+0x9c>)
 800484a:	2200      	movs	r2, #0
 800484c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800484e:	4b15      	ldr	r3, [pc, #84]	@ (80048a4 <MX_TIM15_Init+0x9c>)
 8004850:	2280      	movs	r2, #128	@ 0x80
 8004852:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8004854:	4813      	ldr	r0, [pc, #76]	@ (80048a4 <MX_TIM15_Init+0x9c>)
 8004856:	f006 fda9 	bl	800b3ac <HAL_TIM_Base_Init>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d001      	beq.n	8004864 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8004860:	f7ff fbc0 	bl	8003fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004864:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004868:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800486a:	f107 0310 	add.w	r3, r7, #16
 800486e:	4619      	mov	r1, r3
 8004870:	480c      	ldr	r0, [pc, #48]	@ (80048a4 <MX_TIM15_Init+0x9c>)
 8004872:	f007 fb85 	bl	800bf80 <HAL_TIM_ConfigClockSource>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d001      	beq.n	8004880 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 800487c:	f7ff fbb2 	bl	8003fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004880:	2320      	movs	r3, #32
 8004882:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004884:	2300      	movs	r3, #0
 8004886:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004888:	1d3b      	adds	r3, r7, #4
 800488a:	4619      	mov	r1, r3
 800488c:	4805      	ldr	r0, [pc, #20]	@ (80048a4 <MX_TIM15_Init+0x9c>)
 800488e:	f008 faf5 	bl	800ce7c <HAL_TIMEx_MasterConfigSynchronization>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d001      	beq.n	800489c <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8004898:	f7ff fba4 	bl	8003fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800489c:	bf00      	nop
 800489e:	3720      	adds	r7, #32
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	20000c4c 	.word	0x20000c4c
 80048a8:	40014000 	.word	0x40014000

080048ac <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80048b0:	4b0f      	ldr	r3, [pc, #60]	@ (80048f0 <MX_TIM16_Init+0x44>)
 80048b2:	4a10      	ldr	r2, [pc, #64]	@ (80048f4 <MX_TIM16_Init+0x48>)
 80048b4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4;
 80048b6:	4b0e      	ldr	r3, [pc, #56]	@ (80048f0 <MX_TIM16_Init+0x44>)
 80048b8:	2204      	movs	r2, #4
 80048ba:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048bc:	4b0c      	ldr	r3, [pc, #48]	@ (80048f0 <MX_TIM16_Init+0x44>)
 80048be:	2200      	movs	r2, #0
 80048c0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 15999;
 80048c2:	4b0b      	ldr	r3, [pc, #44]	@ (80048f0 <MX_TIM16_Init+0x44>)
 80048c4:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80048c8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048ca:	4b09      	ldr	r3, [pc, #36]	@ (80048f0 <MX_TIM16_Init+0x44>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80048d0:	4b07      	ldr	r3, [pc, #28]	@ (80048f0 <MX_TIM16_Init+0x44>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048d6:	4b06      	ldr	r3, [pc, #24]	@ (80048f0 <MX_TIM16_Init+0x44>)
 80048d8:	2200      	movs	r2, #0
 80048da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80048dc:	4804      	ldr	r0, [pc, #16]	@ (80048f0 <MX_TIM16_Init+0x44>)
 80048de:	f006 fd65 	bl	800b3ac <HAL_TIM_Base_Init>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80048e8:	f7ff fb7c 	bl	8003fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80048ec:	bf00      	nop
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	20000d18 	.word	0x20000d18
 80048f4:	40014400 	.word	0x40014400

080048f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b08a      	sub	sp, #40	@ 0x28
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004908:	d10c      	bne.n	8004924 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800490a:	4b4a      	ldr	r3, [pc, #296]	@ (8004a34 <HAL_TIM_Base_MspInit+0x13c>)
 800490c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800490e:	4a49      	ldr	r2, [pc, #292]	@ (8004a34 <HAL_TIM_Base_MspInit+0x13c>)
 8004910:	f043 0301 	orr.w	r3, r3, #1
 8004914:	6593      	str	r3, [r2, #88]	@ 0x58
 8004916:	4b47      	ldr	r3, [pc, #284]	@ (8004a34 <HAL_TIM_Base_MspInit+0x13c>)
 8004918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8004922:	e082      	b.n	8004a2a <HAL_TIM_Base_MspInit+0x132>
  else if(tim_baseHandle->Instance==TIM3)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a43      	ldr	r2, [pc, #268]	@ (8004a38 <HAL_TIM_Base_MspInit+0x140>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d10c      	bne.n	8004948 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800492e:	4b41      	ldr	r3, [pc, #260]	@ (8004a34 <HAL_TIM_Base_MspInit+0x13c>)
 8004930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004932:	4a40      	ldr	r2, [pc, #256]	@ (8004a34 <HAL_TIM_Base_MspInit+0x13c>)
 8004934:	f043 0302 	orr.w	r3, r3, #2
 8004938:	6593      	str	r3, [r2, #88]	@ 0x58
 800493a:	4b3e      	ldr	r3, [pc, #248]	@ (8004a34 <HAL_TIM_Base_MspInit+0x13c>)
 800493c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	623b      	str	r3, [r7, #32]
 8004944:	6a3b      	ldr	r3, [r7, #32]
}
 8004946:	e070      	b.n	8004a2a <HAL_TIM_Base_MspInit+0x132>
  else if(tim_baseHandle->Instance==TIM4)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a3b      	ldr	r2, [pc, #236]	@ (8004a3c <HAL_TIM_Base_MspInit+0x144>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d10c      	bne.n	800496c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004952:	4b38      	ldr	r3, [pc, #224]	@ (8004a34 <HAL_TIM_Base_MspInit+0x13c>)
 8004954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004956:	4a37      	ldr	r2, [pc, #220]	@ (8004a34 <HAL_TIM_Base_MspInit+0x13c>)
 8004958:	f043 0304 	orr.w	r3, r3, #4
 800495c:	6593      	str	r3, [r2, #88]	@ 0x58
 800495e:	4b35      	ldr	r3, [pc, #212]	@ (8004a34 <HAL_TIM_Base_MspInit+0x13c>)
 8004960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004962:	f003 0304 	and.w	r3, r3, #4
 8004966:	61fb      	str	r3, [r7, #28]
 8004968:	69fb      	ldr	r3, [r7, #28]
}
 800496a:	e05e      	b.n	8004a2a <HAL_TIM_Base_MspInit+0x132>
  else if(tim_baseHandle->Instance==TIM6)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a33      	ldr	r2, [pc, #204]	@ (8004a40 <HAL_TIM_Base_MspInit+0x148>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d114      	bne.n	80049a0 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004976:	4b2f      	ldr	r3, [pc, #188]	@ (8004a34 <HAL_TIM_Base_MspInit+0x13c>)
 8004978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800497a:	4a2e      	ldr	r2, [pc, #184]	@ (8004a34 <HAL_TIM_Base_MspInit+0x13c>)
 800497c:	f043 0310 	orr.w	r3, r3, #16
 8004980:	6593      	str	r3, [r2, #88]	@ 0x58
 8004982:	4b2c      	ldr	r3, [pc, #176]	@ (8004a34 <HAL_TIM_Base_MspInit+0x13c>)
 8004984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004986:	f003 0310 	and.w	r3, r3, #16
 800498a:	61bb      	str	r3, [r7, #24]
 800498c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800498e:	2200      	movs	r2, #0
 8004990:	2105      	movs	r1, #5
 8004992:	2036      	movs	r0, #54	@ 0x36
 8004994:	f003 fe30 	bl	80085f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004998:	2036      	movs	r0, #54	@ 0x36
 800499a:	f003 fe47 	bl	800862c <HAL_NVIC_EnableIRQ>
}
 800499e:	e044      	b.n	8004a2a <HAL_TIM_Base_MspInit+0x132>
  else if(tim_baseHandle->Instance==TIM7)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a27      	ldr	r2, [pc, #156]	@ (8004a44 <HAL_TIM_Base_MspInit+0x14c>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d10c      	bne.n	80049c4 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80049aa:	4b22      	ldr	r3, [pc, #136]	@ (8004a34 <HAL_TIM_Base_MspInit+0x13c>)
 80049ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ae:	4a21      	ldr	r2, [pc, #132]	@ (8004a34 <HAL_TIM_Base_MspInit+0x13c>)
 80049b0:	f043 0320 	orr.w	r3, r3, #32
 80049b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80049b6:	4b1f      	ldr	r3, [pc, #124]	@ (8004a34 <HAL_TIM_Base_MspInit+0x13c>)
 80049b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ba:	f003 0320 	and.w	r3, r3, #32
 80049be:	617b      	str	r3, [r7, #20]
 80049c0:	697b      	ldr	r3, [r7, #20]
}
 80049c2:	e032      	b.n	8004a2a <HAL_TIM_Base_MspInit+0x132>
  else if(tim_baseHandle->Instance==TIM15)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a1f      	ldr	r2, [pc, #124]	@ (8004a48 <HAL_TIM_Base_MspInit+0x150>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d114      	bne.n	80049f8 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80049ce:	4b19      	ldr	r3, [pc, #100]	@ (8004a34 <HAL_TIM_Base_MspInit+0x13c>)
 80049d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049d2:	4a18      	ldr	r2, [pc, #96]	@ (8004a34 <HAL_TIM_Base_MspInit+0x13c>)
 80049d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80049da:	4b16      	ldr	r3, [pc, #88]	@ (8004a34 <HAL_TIM_Base_MspInit+0x13c>)
 80049dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049e2:	613b      	str	r3, [r7, #16]
 80049e4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 80049e6:	2200      	movs	r2, #0
 80049e8:	2105      	movs	r1, #5
 80049ea:	2018      	movs	r0, #24
 80049ec:	f003 fe04 	bl	80085f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80049f0:	2018      	movs	r0, #24
 80049f2:	f003 fe1b 	bl	800862c <HAL_NVIC_EnableIRQ>
}
 80049f6:	e018      	b.n	8004a2a <HAL_TIM_Base_MspInit+0x132>
  else if(tim_baseHandle->Instance==TIM16)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a13      	ldr	r2, [pc, #76]	@ (8004a4c <HAL_TIM_Base_MspInit+0x154>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d113      	bne.n	8004a2a <HAL_TIM_Base_MspInit+0x132>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004a02:	4b0c      	ldr	r3, [pc, #48]	@ (8004a34 <HAL_TIM_Base_MspInit+0x13c>)
 8004a04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a06:	4a0b      	ldr	r2, [pc, #44]	@ (8004a34 <HAL_TIM_Base_MspInit+0x13c>)
 8004a08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a0c:	6613      	str	r3, [r2, #96]	@ 0x60
 8004a0e:	4b09      	ldr	r3, [pc, #36]	@ (8004a34 <HAL_TIM_Base_MspInit+0x13c>)
 8004a10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a16:	60fb      	str	r3, [r7, #12]
 8004a18:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	2105      	movs	r1, #5
 8004a1e:	2019      	movs	r0, #25
 8004a20:	f003 fdea 	bl	80085f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004a24:	2019      	movs	r0, #25
 8004a26:	f003 fe01 	bl	800862c <HAL_NVIC_EnableIRQ>
}
 8004a2a:	bf00      	nop
 8004a2c:	3728      	adds	r7, #40	@ 0x28
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	40021000 	.word	0x40021000
 8004a38:	40000400 	.word	0x40000400
 8004a3c:	40000800 	.word	0x40000800
 8004a40:	40001000 	.word	0x40001000
 8004a44:	40001400 	.word	0x40001400
 8004a48:	40014000 	.word	0x40014000
 8004a4c:	40014400 	.word	0x40014400

08004a50 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b08a      	sub	sp, #40	@ 0x28
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a58:	f107 0314 	add.w	r3, r7, #20
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	605a      	str	r2, [r3, #4]
 8004a62:	609a      	str	r2, [r3, #8]
 8004a64:	60da      	str	r2, [r3, #12]
 8004a66:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a70:	d11d      	bne.n	8004aae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a72:	4b21      	ldr	r3, [pc, #132]	@ (8004af8 <HAL_TIM_MspPostInit+0xa8>)
 8004a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a76:	4a20      	ldr	r2, [pc, #128]	@ (8004af8 <HAL_TIM_MspPostInit+0xa8>)
 8004a78:	f043 0302 	orr.w	r3, r3, #2
 8004a7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8004af8 <HAL_TIM_MspPostInit+0xa8>)
 8004a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	613b      	str	r3, [r7, #16]
 8004a88:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = DRIVER_REV1_Pin|DRIVER_FWD1_Pin;
 8004a8a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a90:	2302      	movs	r3, #2
 8004a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a94:	2300      	movs	r3, #0
 8004a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aa0:	f107 0314 	add.w	r3, r7, #20
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	4815      	ldr	r0, [pc, #84]	@ (8004afc <HAL_TIM_MspPostInit+0xac>)
 8004aa8:	f004 fcb6 	bl	8009418 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004aac:	e020      	b.n	8004af0 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM3)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a13      	ldr	r2, [pc, #76]	@ (8004b00 <HAL_TIM_MspPostInit+0xb0>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d11b      	bne.n	8004af0 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8004af8 <HAL_TIM_MspPostInit+0xa8>)
 8004aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004abc:	4a0e      	ldr	r2, [pc, #56]	@ (8004af8 <HAL_TIM_MspPostInit+0xa8>)
 8004abe:	f043 0302 	orr.w	r3, r3, #2
 8004ac2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8004af8 <HAL_TIM_MspPostInit+0xa8>)
 8004ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DRIVER_FWD2_Pin|DRIVER_REV2_Pin;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004adc:	2300      	movs	r3, #0
 8004ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ae4:	f107 0314 	add.w	r3, r7, #20
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4804      	ldr	r0, [pc, #16]	@ (8004afc <HAL_TIM_MspPostInit+0xac>)
 8004aec:	f004 fc94 	bl	8009418 <HAL_GPIO_Init>
}
 8004af0:	bf00      	nop
 8004af2:	3728      	adds	r7, #40	@ 0x28
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	40021000 	.word	0x40021000
 8004afc:	48000400 	.word	0x48000400
 8004b00:	40000400 	.word	0x40000400

08004b04 <__NVIC_GetPriorityGrouping>:
{
 8004b04:	b480      	push	{r7}
 8004b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b08:	4b04      	ldr	r3, [pc, #16]	@ (8004b1c <__NVIC_GetPriorityGrouping+0x18>)
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	0a1b      	lsrs	r3, r3, #8
 8004b0e:	f003 0307 	and.w	r3, r3, #7
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	e000ed00 	.word	0xe000ed00

08004b20 <__NVIC_EnableIRQ>:
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	4603      	mov	r3, r0
 8004b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	db0b      	blt.n	8004b4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b32:	79fb      	ldrb	r3, [r7, #7]
 8004b34:	f003 021f 	and.w	r2, r3, #31
 8004b38:	4907      	ldr	r1, [pc, #28]	@ (8004b58 <__NVIC_EnableIRQ+0x38>)
 8004b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b3e:	095b      	lsrs	r3, r3, #5
 8004b40:	2001      	movs	r0, #1
 8004b42:	fa00 f202 	lsl.w	r2, r0, r2
 8004b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004b4a:	bf00      	nop
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	e000e100 	.word	0xe000e100

08004b5c <__NVIC_SetPriority>:
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	4603      	mov	r3, r0
 8004b64:	6039      	str	r1, [r7, #0]
 8004b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	db0a      	blt.n	8004b86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	b2da      	uxtb	r2, r3
 8004b74:	490c      	ldr	r1, [pc, #48]	@ (8004ba8 <__NVIC_SetPriority+0x4c>)
 8004b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b7a:	0112      	lsls	r2, r2, #4
 8004b7c:	b2d2      	uxtb	r2, r2
 8004b7e:	440b      	add	r3, r1
 8004b80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004b84:	e00a      	b.n	8004b9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	4908      	ldr	r1, [pc, #32]	@ (8004bac <__NVIC_SetPriority+0x50>)
 8004b8c:	79fb      	ldrb	r3, [r7, #7]
 8004b8e:	f003 030f 	and.w	r3, r3, #15
 8004b92:	3b04      	subs	r3, #4
 8004b94:	0112      	lsls	r2, r2, #4
 8004b96:	b2d2      	uxtb	r2, r2
 8004b98:	440b      	add	r3, r1
 8004b9a:	761a      	strb	r2, [r3, #24]
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	e000e100 	.word	0xe000e100
 8004bac:	e000ed00 	.word	0xe000ed00

08004bb0 <NVIC_EncodePriority>:
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b089      	sub	sp, #36	@ 0x24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f003 0307 	and.w	r3, r3, #7
 8004bc2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	f1c3 0307 	rsb	r3, r3, #7
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	bf28      	it	cs
 8004bce:	2304      	movcs	r3, #4
 8004bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	3304      	adds	r3, #4
 8004bd6:	2b06      	cmp	r3, #6
 8004bd8:	d902      	bls.n	8004be0 <NVIC_EncodePriority+0x30>
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	3b03      	subs	r3, #3
 8004bde:	e000      	b.n	8004be2 <NVIC_EncodePriority+0x32>
 8004be0:	2300      	movs	r3, #0
 8004be2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004be4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	fa02 f303 	lsl.w	r3, r2, r3
 8004bee:	43da      	mvns	r2, r3
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	401a      	ands	r2, r3
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bf8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8004c02:	43d9      	mvns	r1, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c08:	4313      	orrs	r3, r2
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3724      	adds	r7, #36	@ 0x24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
	...

08004c18 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004c20:	4b08      	ldr	r3, [pc, #32]	@ (8004c44 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004c22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004c24:	4907      	ldr	r1, [pc, #28]	@ (8004c44 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004c2c:	4b05      	ldr	r3, [pc, #20]	@ (8004c44 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004c2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4013      	ands	r3, r2
 8004c34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004c36:	68fb      	ldr	r3, [r7, #12]
}
 8004c38:	bf00      	nop
 8004c3a:	3714      	adds	r7, #20
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr
 8004c44:	40021000 	.word	0x40021000

08004c48 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8004c50:	4b08      	ldr	r3, [pc, #32]	@ (8004c74 <LL_APB1_GRP2_EnableClock+0x2c>)
 8004c52:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004c54:	4907      	ldr	r1, [pc, #28]	@ (8004c74 <LL_APB1_GRP2_EnableClock+0x2c>)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8004c5c:	4b05      	ldr	r3, [pc, #20]	@ (8004c74 <LL_APB1_GRP2_EnableClock+0x2c>)
 8004c5e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4013      	ands	r3, r2
 8004c64:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004c66:	68fb      	ldr	r3, [r7, #12]
}
 8004c68:	bf00      	nop
 8004c6a:	3714      	adds	r7, #20
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr
 8004c74:	40021000 	.word	0x40021000

08004c78 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b087      	sub	sp, #28
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8004c88:	4a0e      	ldr	r2, [pc, #56]	@ (8004cc4 <LL_DMA_SetDataTransferDirection+0x4c>)
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	461a      	mov	r2, r3
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	4413      	add	r3, r2
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c9c:	f023 0310 	bic.w	r3, r3, #16
 8004ca0:	4908      	ldr	r1, [pc, #32]	@ (8004cc4 <LL_DMA_SetDataTransferDirection+0x4c>)
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	440a      	add	r2, r1
 8004ca6:	7812      	ldrb	r2, [r2, #0]
 8004ca8:	4611      	mov	r1, r2
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	440a      	add	r2, r1
 8004cae:	4611      	mov	r1, r2
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8004cb6:	bf00      	nop
 8004cb8:	371c      	adds	r7, #28
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	0801edbc 	.word	0x0801edbc

08004cc8 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 8004cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8004d10 <LL_DMA_SetMode+0x48>)
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	4413      	add	r3, r2
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f023 0220 	bic.w	r2, r3, #32
 8004cec:	4908      	ldr	r1, [pc, #32]	@ (8004d10 <LL_DMA_SetMode+0x48>)
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	440b      	add	r3, r1
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	440b      	add	r3, r1
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	600b      	str	r3, [r1, #0]
             Mode);
}
 8004d02:	bf00      	nop
 8004d04:	371c      	adds	r7, #28
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	0801edbc 	.word	0x0801edbc

08004d14 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b087      	sub	sp, #28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 8004d24:	4a0d      	ldr	r2, [pc, #52]	@ (8004d5c <LL_DMA_SetPeriphIncMode+0x48>)
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	4413      	add	r3, r2
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	4413      	add	r3, r2
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004d38:	4908      	ldr	r1, [pc, #32]	@ (8004d5c <LL_DMA_SetPeriphIncMode+0x48>)
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	440b      	add	r3, r1
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	4619      	mov	r1, r3
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	440b      	add	r3, r1
 8004d46:	4619      	mov	r1, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8004d4e:	bf00      	nop
 8004d50:	371c      	adds	r7, #28
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	0801edbc 	.word	0x0801edbc

08004d60 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b087      	sub	sp, #28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8004d70:	4a0d      	ldr	r2, [pc, #52]	@ (8004da8 <LL_DMA_SetMemoryIncMode+0x48>)
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	4413      	add	r3, r2
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	461a      	mov	r2, r3
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d84:	4908      	ldr	r1, [pc, #32]	@ (8004da8 <LL_DMA_SetMemoryIncMode+0x48>)
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	440b      	add	r3, r1
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	440b      	add	r3, r1
 8004d92:	4619      	mov	r1, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8004d9a:	bf00      	nop
 8004d9c:	371c      	adds	r7, #28
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	0801edbc 	.word	0x0801edbc

08004dac <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b087      	sub	sp, #28
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 8004dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8004df4 <LL_DMA_SetPeriphSize+0x48>)
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	4413      	add	r3, r2
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004dd0:	4908      	ldr	r1, [pc, #32]	@ (8004df4 <LL_DMA_SetPeriphSize+0x48>)
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	440b      	add	r3, r1
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	4619      	mov	r1, r3
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	440b      	add	r3, r1
 8004dde:	4619      	mov	r1, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8004de6:	bf00      	nop
 8004de8:	371c      	adds	r7, #28
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	0801edbc 	.word	0x0801edbc

08004df8 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b087      	sub	sp, #28
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 8004e08:	4a0d      	ldr	r2, [pc, #52]	@ (8004e40 <LL_DMA_SetMemorySize+0x48>)
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	461a      	mov	r2, r3
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	4413      	add	r3, r2
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e1c:	4908      	ldr	r1, [pc, #32]	@ (8004e40 <LL_DMA_SetMemorySize+0x48>)
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	440b      	add	r3, r1
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	4619      	mov	r1, r3
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	440b      	add	r3, r1
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8004e32:	bf00      	nop
 8004e34:	371c      	adds	r7, #28
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	0801edbc 	.word	0x0801edbc

08004e44 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 8004e54:	4a0d      	ldr	r2, [pc, #52]	@ (8004e8c <LL_DMA_SetChannelPriorityLevel+0x48>)
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	4413      	add	r3, r2
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	4413      	add	r3, r2
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004e68:	4908      	ldr	r1, [pc, #32]	@ (8004e8c <LL_DMA_SetChannelPriorityLevel+0x48>)
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	440b      	add	r3, r1
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	4619      	mov	r1, r3
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	440b      	add	r3, r1
 8004e76:	4619      	mov	r1, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	600b      	str	r3, [r1, #0]
             Priority);
}
 8004e7e:	bf00      	nop
 8004e80:	371c      	adds	r7, #28
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	0801edbc 	.word	0x0801edbc

08004e90 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD1_TX
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	0a9b      	lsrs	r3, r3, #10
 8004ea0:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8004ea4:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
 8004ea8:	00db      	lsls	r3, r3, #3
 8004eaa:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004eb8:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004ece:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	601a      	str	r2, [r3, #0]
}
 8004ed8:	bf00      	nop
 8004eda:	371c      	adds	r7, #28
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004eea:	463b      	mov	r3, r7
 8004eec:	2200      	movs	r2, #0
 8004eee:	601a      	str	r2, [r3, #0]
 8004ef0:	605a      	str	r2, [r3, #4]
 8004ef2:	609a      	str	r2, [r3, #8]
 8004ef4:	60da      	str	r2, [r3, #12]
 8004ef6:	611a      	str	r2, [r3, #16]
 8004ef8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8004efa:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004efe:	f7ff fea3 	bl	8004c48 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8004f02:	2002      	movs	r0, #2
 8004f04:	f7ff fe88 	bl	8004c18 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB4   ------> UCPD1_CC2
  PB6   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8004f08:	2310      	movs	r3, #16
 8004f0a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004f10:	2300      	movs	r3, #0
 8004f12:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f14:	463b      	mov	r3, r7
 8004f16:	4619      	mov	r1, r3
 8004f18:	4838      	ldr	r0, [pc, #224]	@ (8004ffc <MX_UCPD1_Init+0x118>)
 8004f1a:	f00b fa0b 	bl	8010334 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8004f1e:	2340      	movs	r3, #64	@ 0x40
 8004f20:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004f22:	2303      	movs	r3, #3
 8004f24:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004f26:	2300      	movs	r3, #0
 8004f28:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f2a:	463b      	mov	r3, r7
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	4833      	ldr	r0, [pc, #204]	@ (8004ffc <MX_UCPD1_Init+0x118>)
 8004f30:	f00b fa00 	bl	8010334 <LL_GPIO_Init>

  /* UCPD1 DMA Init */

  /* UCPD1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_UCPD1_RX);
 8004f34:	2272      	movs	r2, #114	@ 0x72
 8004f36:	2100      	movs	r1, #0
 8004f38:	4831      	ldr	r0, [pc, #196]	@ (8005000 <MX_UCPD1_Init+0x11c>)
 8004f3a:	f7ff ffa9 	bl	8004e90 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8004f3e:	2200      	movs	r2, #0
 8004f40:	2100      	movs	r1, #0
 8004f42:	482f      	ldr	r0, [pc, #188]	@ (8005000 <MX_UCPD1_Init+0x11c>)
 8004f44:	f7ff fe98 	bl	8004c78 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8004f48:	2200      	movs	r2, #0
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	482c      	ldr	r0, [pc, #176]	@ (8005000 <MX_UCPD1_Init+0x11c>)
 8004f4e:	f7ff ff79 	bl	8004e44 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 8004f52:	2200      	movs	r2, #0
 8004f54:	2100      	movs	r1, #0
 8004f56:	482a      	ldr	r0, [pc, #168]	@ (8005000 <MX_UCPD1_Init+0x11c>)
 8004f58:	f7ff feb6 	bl	8004cc8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	2100      	movs	r1, #0
 8004f60:	4827      	ldr	r0, [pc, #156]	@ (8005000 <MX_UCPD1_Init+0x11c>)
 8004f62:	f7ff fed7 	bl	8004d14 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8004f66:	2280      	movs	r2, #128	@ 0x80
 8004f68:	2100      	movs	r1, #0
 8004f6a:	4825      	ldr	r0, [pc, #148]	@ (8005000 <MX_UCPD1_Init+0x11c>)
 8004f6c:	f7ff fef8 	bl	8004d60 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 8004f70:	2200      	movs	r2, #0
 8004f72:	2100      	movs	r1, #0
 8004f74:	4822      	ldr	r0, [pc, #136]	@ (8005000 <MX_UCPD1_Init+0x11c>)
 8004f76:	f7ff ff19 	bl	8004dac <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	4820      	ldr	r0, [pc, #128]	@ (8005000 <MX_UCPD1_Init+0x11c>)
 8004f80:	f7ff ff3a 	bl	8004df8 <LL_DMA_SetMemorySize>

  /* UCPD1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_UCPD1_TX);
 8004f84:	2273      	movs	r2, #115	@ 0x73
 8004f86:	2101      	movs	r1, #1
 8004f88:	481d      	ldr	r0, [pc, #116]	@ (8005000 <MX_UCPD1_Init+0x11c>)
 8004f8a:	f7ff ff81 	bl	8004e90 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8004f8e:	2210      	movs	r2, #16
 8004f90:	2101      	movs	r1, #1
 8004f92:	481b      	ldr	r0, [pc, #108]	@ (8005000 <MX_UCPD1_Init+0x11c>)
 8004f94:	f7ff fe70 	bl	8004c78 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 8004f98:	2200      	movs	r2, #0
 8004f9a:	2101      	movs	r1, #1
 8004f9c:	4818      	ldr	r0, [pc, #96]	@ (8005000 <MX_UCPD1_Init+0x11c>)
 8004f9e:	f7ff ff51 	bl	8004e44 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	2101      	movs	r1, #1
 8004fa6:	4816      	ldr	r0, [pc, #88]	@ (8005000 <MX_UCPD1_Init+0x11c>)
 8004fa8:	f7ff fe8e 	bl	8004cc8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 8004fac:	2200      	movs	r2, #0
 8004fae:	2101      	movs	r1, #1
 8004fb0:	4813      	ldr	r0, [pc, #76]	@ (8005000 <MX_UCPD1_Init+0x11c>)
 8004fb2:	f7ff feaf 	bl	8004d14 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 8004fb6:	2280      	movs	r2, #128	@ 0x80
 8004fb8:	2101      	movs	r1, #1
 8004fba:	4811      	ldr	r0, [pc, #68]	@ (8005000 <MX_UCPD1_Init+0x11c>)
 8004fbc:	f7ff fed0 	bl	8004d60 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	2101      	movs	r1, #1
 8004fc4:	480e      	ldr	r0, [pc, #56]	@ (8005000 <MX_UCPD1_Init+0x11c>)
 8004fc6:	f7ff fef1 	bl	8004dac <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 8004fca:	2200      	movs	r2, #0
 8004fcc:	2101      	movs	r1, #1
 8004fce:	480c      	ldr	r0, [pc, #48]	@ (8005000 <MX_UCPD1_Init+0x11c>)
 8004fd0:	f7ff ff12 	bl	8004df8 <LL_DMA_SetMemorySize>

  /* UCPD1 interrupt Init */
  NVIC_SetPriority(UCPD1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8004fd4:	f7ff fd96 	bl	8004b04 <__NVIC_GetPriorityGrouping>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2200      	movs	r2, #0
 8004fdc:	2105      	movs	r1, #5
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7ff fde6 	bl	8004bb0 <NVIC_EncodePriority>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	203f      	movs	r0, #63	@ 0x3f
 8004fea:	f7ff fdb7 	bl	8004b5c <__NVIC_SetPriority>
  NVIC_EnableIRQ(UCPD1_IRQn);
 8004fee:	203f      	movs	r0, #63	@ 0x3f
 8004ff0:	f7ff fd96 	bl	8004b20 <__NVIC_EnableIRQ>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8004ff4:	bf00      	nop
 8004ff6:	3718      	adds	r7, #24
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	48000400 	.word	0x48000400
 8005000:	40020000 	.word	0x40020000

08005004 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005008:	4b24      	ldr	r3, [pc, #144]	@ (800509c <MX_USART1_UART_Init+0x98>)
 800500a:	4a25      	ldr	r2, [pc, #148]	@ (80050a0 <MX_USART1_UART_Init+0x9c>)
 800500c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800500e:	4b23      	ldr	r3, [pc, #140]	@ (800509c <MX_USART1_UART_Init+0x98>)
 8005010:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005014:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005016:	4b21      	ldr	r3, [pc, #132]	@ (800509c <MX_USART1_UART_Init+0x98>)
 8005018:	2200      	movs	r2, #0
 800501a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800501c:	4b1f      	ldr	r3, [pc, #124]	@ (800509c <MX_USART1_UART_Init+0x98>)
 800501e:	2200      	movs	r2, #0
 8005020:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005022:	4b1e      	ldr	r3, [pc, #120]	@ (800509c <MX_USART1_UART_Init+0x98>)
 8005024:	2200      	movs	r2, #0
 8005026:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005028:	4b1c      	ldr	r3, [pc, #112]	@ (800509c <MX_USART1_UART_Init+0x98>)
 800502a:	220c      	movs	r2, #12
 800502c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800502e:	4b1b      	ldr	r3, [pc, #108]	@ (800509c <MX_USART1_UART_Init+0x98>)
 8005030:	2200      	movs	r2, #0
 8005032:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005034:	4b19      	ldr	r3, [pc, #100]	@ (800509c <MX_USART1_UART_Init+0x98>)
 8005036:	2200      	movs	r2, #0
 8005038:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800503a:	4b18      	ldr	r3, [pc, #96]	@ (800509c <MX_USART1_UART_Init+0x98>)
 800503c:	2200      	movs	r2, #0
 800503e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005040:	4b16      	ldr	r3, [pc, #88]	@ (800509c <MX_USART1_UART_Init+0x98>)
 8005042:	2200      	movs	r2, #0
 8005044:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8005046:	4b15      	ldr	r3, [pc, #84]	@ (800509c <MX_USART1_UART_Init+0x98>)
 8005048:	2208      	movs	r2, #8
 800504a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800504c:	4b13      	ldr	r3, [pc, #76]	@ (800509c <MX_USART1_UART_Init+0x98>)
 800504e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005052:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005054:	4811      	ldr	r0, [pc, #68]	@ (800509c <MX_USART1_UART_Init+0x98>)
 8005056:	f007 ffe3 	bl	800d020 <HAL_UART_Init>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d001      	beq.n	8005064 <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 8005060:	f7fe ffc0 	bl	8003fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005064:	2100      	movs	r1, #0
 8005066:	480d      	ldr	r0, [pc, #52]	@ (800509c <MX_USART1_UART_Init+0x98>)
 8005068:	f00a fe37 	bl	800fcda <HAL_UARTEx_SetTxFifoThreshold>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <MX_USART1_UART_Init+0x72>
  {
    Error_Handler();
 8005072:	f7fe ffb7 	bl	8003fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005076:	2100      	movs	r1, #0
 8005078:	4808      	ldr	r0, [pc, #32]	@ (800509c <MX_USART1_UART_Init+0x98>)
 800507a:	f00a fe6c 	bl	800fd56 <HAL_UARTEx_SetRxFifoThreshold>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d001      	beq.n	8005088 <MX_USART1_UART_Init+0x84>
  {
    Error_Handler();
 8005084:	f7fe ffae 	bl	8003fe4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005088:	4804      	ldr	r0, [pc, #16]	@ (800509c <MX_USART1_UART_Init+0x98>)
 800508a:	f00a fded 	bl	800fc68 <HAL_UARTEx_DisableFifoMode>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <MX_USART1_UART_Init+0x94>
  {
    Error_Handler();
 8005094:	f7fe ffa6 	bl	8003fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005098:	bf00      	nop
 800509a:	bd80      	pop	{r7, pc}
 800509c:	20000de4 	.word	0x20000de4
 80050a0:	40013800 	.word	0x40013800

080050a4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80050a8:	4b22      	ldr	r3, [pc, #136]	@ (8005134 <MX_USART2_UART_Init+0x90>)
 80050aa:	4a23      	ldr	r2, [pc, #140]	@ (8005138 <MX_USART2_UART_Init+0x94>)
 80050ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 128000;
 80050ae:	4b21      	ldr	r3, [pc, #132]	@ (8005134 <MX_USART2_UART_Init+0x90>)
 80050b0:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 80050b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80050b6:	4b1f      	ldr	r3, [pc, #124]	@ (8005134 <MX_USART2_UART_Init+0x90>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80050bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005134 <MX_USART2_UART_Init+0x90>)
 80050be:	2200      	movs	r2, #0
 80050c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80050c2:	4b1c      	ldr	r3, [pc, #112]	@ (8005134 <MX_USART2_UART_Init+0x90>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80050c8:	4b1a      	ldr	r3, [pc, #104]	@ (8005134 <MX_USART2_UART_Init+0x90>)
 80050ca:	220c      	movs	r2, #12
 80050cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80050ce:	4b19      	ldr	r3, [pc, #100]	@ (8005134 <MX_USART2_UART_Init+0x90>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80050d4:	4b17      	ldr	r3, [pc, #92]	@ (8005134 <MX_USART2_UART_Init+0x90>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80050da:	4b16      	ldr	r3, [pc, #88]	@ (8005134 <MX_USART2_UART_Init+0x90>)
 80050dc:	2200      	movs	r2, #0
 80050de:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80050e0:	4b14      	ldr	r3, [pc, #80]	@ (8005134 <MX_USART2_UART_Init+0x90>)
 80050e2:	2200      	movs	r2, #0
 80050e4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80050e6:	4b13      	ldr	r3, [pc, #76]	@ (8005134 <MX_USART2_UART_Init+0x90>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80050ec:	4811      	ldr	r0, [pc, #68]	@ (8005134 <MX_USART2_UART_Init+0x90>)
 80050ee:	f007 ff97 	bl	800d020 <HAL_UART_Init>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d001      	beq.n	80050fc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80050f8:	f7fe ff74 	bl	8003fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80050fc:	2100      	movs	r1, #0
 80050fe:	480d      	ldr	r0, [pc, #52]	@ (8005134 <MX_USART2_UART_Init+0x90>)
 8005100:	f00a fdeb 	bl	800fcda <HAL_UARTEx_SetTxFifoThreshold>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800510a:	f7fe ff6b 	bl	8003fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800510e:	2100      	movs	r1, #0
 8005110:	4808      	ldr	r0, [pc, #32]	@ (8005134 <MX_USART2_UART_Init+0x90>)
 8005112:	f00a fe20 	bl	800fd56 <HAL_UARTEx_SetRxFifoThreshold>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d001      	beq.n	8005120 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800511c:	f7fe ff62 	bl	8003fe4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005120:	4804      	ldr	r0, [pc, #16]	@ (8005134 <MX_USART2_UART_Init+0x90>)
 8005122:	f00a fda1 	bl	800fc68 <HAL_UARTEx_DisableFifoMode>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d001      	beq.n	8005130 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800512c:	f7fe ff5a 	bl	8003fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005130:	bf00      	nop
 8005132:	bd80      	pop	{r7, pc}
 8005134:	20000e78 	.word	0x20000e78
 8005138:	40004400 	.word	0x40004400

0800513c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b09e      	sub	sp, #120	@ 0x78
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005144:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005148:	2200      	movs	r2, #0
 800514a:	601a      	str	r2, [r3, #0]
 800514c:	605a      	str	r2, [r3, #4]
 800514e:	609a      	str	r2, [r3, #8]
 8005150:	60da      	str	r2, [r3, #12]
 8005152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005154:	f107 0320 	add.w	r3, r7, #32
 8005158:	2244      	movs	r2, #68	@ 0x44
 800515a:	2100      	movs	r1, #0
 800515c:	4618      	mov	r0, r3
 800515e:	f015 f843 	bl	801a1e8 <memset>
  if(uartHandle->Instance==USART1)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a68      	ldr	r2, [pc, #416]	@ (8005308 <HAL_UART_MspInit+0x1cc>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d15a      	bne.n	8005222 <HAL_UART_MspInit+0xe6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800516c:	2301      	movs	r3, #1
 800516e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005170:	2300      	movs	r3, #0
 8005172:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005174:	f107 0320 	add.w	r3, r7, #32
 8005178:	4618      	mov	r0, r3
 800517a:	f005 ff27 	bl	800afcc <HAL_RCCEx_PeriphCLKConfig>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005184:	f7fe ff2e 	bl	8003fe4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005188:	4b60      	ldr	r3, [pc, #384]	@ (800530c <HAL_UART_MspInit+0x1d0>)
 800518a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800518c:	4a5f      	ldr	r2, [pc, #380]	@ (800530c <HAL_UART_MspInit+0x1d0>)
 800518e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005192:	6613      	str	r3, [r2, #96]	@ 0x60
 8005194:	4b5d      	ldr	r3, [pc, #372]	@ (800530c <HAL_UART_MspInit+0x1d0>)
 8005196:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005198:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800519c:	61fb      	str	r3, [r7, #28]
 800519e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051a0:	4b5a      	ldr	r3, [pc, #360]	@ (800530c <HAL_UART_MspInit+0x1d0>)
 80051a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051a4:	4a59      	ldr	r2, [pc, #356]	@ (800530c <HAL_UART_MspInit+0x1d0>)
 80051a6:	f043 0304 	orr.w	r3, r3, #4
 80051aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80051ac:	4b57      	ldr	r3, [pc, #348]	@ (800530c <HAL_UART_MspInit+0x1d0>)
 80051ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051b0:	f003 0304 	and.w	r3, r3, #4
 80051b4:	61bb      	str	r3, [r7, #24]
 80051b6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051b8:	4b54      	ldr	r3, [pc, #336]	@ (800530c <HAL_UART_MspInit+0x1d0>)
 80051ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051bc:	4a53      	ldr	r2, [pc, #332]	@ (800530c <HAL_UART_MspInit+0x1d0>)
 80051be:	f043 0302 	orr.w	r3, r3, #2
 80051c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80051c4:	4b51      	ldr	r3, [pc, #324]	@ (800530c <HAL_UART_MspInit+0x1d0>)
 80051c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051c8:	f003 0302 	and.w	r3, r3, #2
 80051cc:	617b      	str	r3, [r7, #20]
 80051ce:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80051d0:	2310      	movs	r3, #16
 80051d2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051d4:	2302      	movs	r3, #2
 80051d6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d8:	2300      	movs	r3, #0
 80051da:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051dc:	2300      	movs	r3, #0
 80051de:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80051e0:	2307      	movs	r3, #7
 80051e2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80051e4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80051e8:	4619      	mov	r1, r3
 80051ea:	4849      	ldr	r0, [pc, #292]	@ (8005310 <HAL_UART_MspInit+0x1d4>)
 80051ec:	f004 f914 	bl	8009418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80051f0:	2380      	movs	r3, #128	@ 0x80
 80051f2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051f4:	2302      	movs	r3, #2
 80051f6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051f8:	2300      	movs	r3, #0
 80051fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051fc:	2300      	movs	r3, #0
 80051fe:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005200:	2307      	movs	r3, #7
 8005202:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8005204:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005208:	4619      	mov	r1, r3
 800520a:	4842      	ldr	r0, [pc, #264]	@ (8005314 <HAL_UART_MspInit+0x1d8>)
 800520c:	f004 f904 	bl	8009418 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005210:	2200      	movs	r2, #0
 8005212:	2105      	movs	r1, #5
 8005214:	2025      	movs	r0, #37	@ 0x25
 8005216:	f003 f9ef 	bl	80085f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800521a:	2025      	movs	r0, #37	@ 0x25
 800521c:	f003 fa06 	bl	800862c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005220:	e06e      	b.n	8005300 <HAL_UART_MspInit+0x1c4>
  else if(uartHandle->Instance==USART2)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a3c      	ldr	r2, [pc, #240]	@ (8005318 <HAL_UART_MspInit+0x1dc>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d169      	bne.n	8005300 <HAL_UART_MspInit+0x1c4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800522c:	2302      	movs	r3, #2
 800522e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005230:	2300      	movs	r3, #0
 8005232:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005234:	f107 0320 	add.w	r3, r7, #32
 8005238:	4618      	mov	r0, r3
 800523a:	f005 fec7 	bl	800afcc <HAL_RCCEx_PeriphCLKConfig>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d001      	beq.n	8005248 <HAL_UART_MspInit+0x10c>
      Error_Handler();
 8005244:	f7fe fece 	bl	8003fe4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005248:	4b30      	ldr	r3, [pc, #192]	@ (800530c <HAL_UART_MspInit+0x1d0>)
 800524a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800524c:	4a2f      	ldr	r2, [pc, #188]	@ (800530c <HAL_UART_MspInit+0x1d0>)
 800524e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005252:	6593      	str	r3, [r2, #88]	@ 0x58
 8005254:	4b2d      	ldr	r3, [pc, #180]	@ (800530c <HAL_UART_MspInit+0x1d0>)
 8005256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005258:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800525c:	613b      	str	r3, [r7, #16]
 800525e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005260:	4b2a      	ldr	r3, [pc, #168]	@ (800530c <HAL_UART_MspInit+0x1d0>)
 8005262:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005264:	4a29      	ldr	r2, [pc, #164]	@ (800530c <HAL_UART_MspInit+0x1d0>)
 8005266:	f043 0301 	orr.w	r3, r3, #1
 800526a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800526c:	4b27      	ldr	r3, [pc, #156]	@ (800530c <HAL_UART_MspInit+0x1d0>)
 800526e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005270:	f003 0301 	and.w	r3, r3, #1
 8005274:	60fb      	str	r3, [r7, #12]
 8005276:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LIDAR_RXnTX_STM_Pin|LIDAR_TXnRX_STM_Pin;
 8005278:	230c      	movs	r3, #12
 800527a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800527c:	2302      	movs	r3, #2
 800527e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005280:	2300      	movs	r3, #0
 8005282:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005284:	2300      	movs	r3, #0
 8005286:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005288:	2307      	movs	r3, #7
 800528a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800528c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005290:	4619      	mov	r1, r3
 8005292:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005296:	f004 f8bf 	bl	8009418 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel4;
 800529a:	4b20      	ldr	r3, [pc, #128]	@ (800531c <HAL_UART_MspInit+0x1e0>)
 800529c:	4a20      	ldr	r2, [pc, #128]	@ (8005320 <HAL_UART_MspInit+0x1e4>)
 800529e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80052a0:	4b1e      	ldr	r3, [pc, #120]	@ (800531c <HAL_UART_MspInit+0x1e0>)
 80052a2:	221a      	movs	r2, #26
 80052a4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80052a6:	4b1d      	ldr	r3, [pc, #116]	@ (800531c <HAL_UART_MspInit+0x1e0>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80052ac:	4b1b      	ldr	r3, [pc, #108]	@ (800531c <HAL_UART_MspInit+0x1e0>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80052b2:	4b1a      	ldr	r3, [pc, #104]	@ (800531c <HAL_UART_MspInit+0x1e0>)
 80052b4:	2280      	movs	r2, #128	@ 0x80
 80052b6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80052b8:	4b18      	ldr	r3, [pc, #96]	@ (800531c <HAL_UART_MspInit+0x1e0>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80052be:	4b17      	ldr	r3, [pc, #92]	@ (800531c <HAL_UART_MspInit+0x1e0>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80052c4:	4b15      	ldr	r3, [pc, #84]	@ (800531c <HAL_UART_MspInit+0x1e0>)
 80052c6:	2220      	movs	r2, #32
 80052c8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80052ca:	4b14      	ldr	r3, [pc, #80]	@ (800531c <HAL_UART_MspInit+0x1e0>)
 80052cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80052d0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80052d2:	4812      	ldr	r0, [pc, #72]	@ (800531c <HAL_UART_MspInit+0x1e0>)
 80052d4:	f003 fd6e 	bl	8008db4 <HAL_DMA_Init>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 80052de:	f7fe fe81 	bl	8003fe4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a0d      	ldr	r2, [pc, #52]	@ (800531c <HAL_UART_MspInit+0x1e0>)
 80052e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80052ea:	4a0c      	ldr	r2, [pc, #48]	@ (800531c <HAL_UART_MspInit+0x1e0>)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80052f0:	2200      	movs	r2, #0
 80052f2:	2105      	movs	r1, #5
 80052f4:	2026      	movs	r0, #38	@ 0x26
 80052f6:	f003 f97f 	bl	80085f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80052fa:	2026      	movs	r0, #38	@ 0x26
 80052fc:	f003 f996 	bl	800862c <HAL_NVIC_EnableIRQ>
}
 8005300:	bf00      	nop
 8005302:	3778      	adds	r7, #120	@ 0x78
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	40013800 	.word	0x40013800
 800530c:	40021000 	.word	0x40021000
 8005310:	48000800 	.word	0x48000800
 8005314:	48000400 	.word	0x48000400
 8005318:	40004400 	.word	0x40004400
 800531c:	20000f0c 	.word	0x20000f0c
 8005320:	40020044 	.word	0x40020044
 8005324:	00000000 	.word	0x00000000

08005328 <ADXL343_init>:
		{"FIFO_CTL",	0x38},
		{"FIFO_SATUS",	0x39}
};


void ADXL343_init(void){
 8005328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800532c:	b08c      	sub	sp, #48	@ 0x30
 800532e:	af00      	add	r7, sp, #0
	debug(INFORMATION,"ADXL343 - INIT");
 8005330:	49aa      	ldr	r1, [pc, #680]	@ (80055dc <ADXL343_init+0x2b4>)
 8005332:	48ab      	ldr	r0, [pc, #684]	@ (80055e0 <ADXL343_init+0x2b8>)
 8005334:	f012 ffa0 	bl	8018278 <debug>
	uint8_t ret=0;
 8005338:	2300      	movs	r3, #0
 800533a:	743b      	strb	r3, [r7, #16]
	ADXL343_ReadRegister(0x00, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 800533c:	f107 0310 	add.w	r3, r7, #16
 8005340:	2201      	movs	r2, #1
 8005342:	4619      	mov	r1, r3
 8005344:	2000      	movs	r0, #0
 8005346:	f000 fb1d 	bl	8005984 <ADXL343_ReadRegister>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d003      	beq.n	8005358 <ADXL343_init+0x30>
 8005350:	49a4      	ldr	r1, [pc, #656]	@ (80055e4 <ADXL343_init+0x2bc>)
 8005352:	48a5      	ldr	r0, [pc, #660]	@ (80055e8 <ADXL343_init+0x2c0>)
 8005354:	f012 ff90 	bl	8018278 <debug>
	printf("READ - deviceID: 0x%02X\r\n",ret);
 8005358:	7c3b      	ldrb	r3, [r7, #16]
 800535a:	4619      	mov	r1, r3
 800535c:	48a3      	ldr	r0, [pc, #652]	@ (80055ec <ADXL343_init+0x2c4>)
 800535e:	f014 fe65 	bl	801a02c <iprintf>

	uint8_t startReg = 0x1D;
 8005362:	231d      	movs	r3, #29
 8005364:	76fb      	strb	r3, [r7, #27]
	uint8_t endReg = 0x39;
 8005366:	2339      	movs	r3, #57	@ 0x39
 8005368:	76bb      	strb	r3, [r7, #26]
	for (int i = 1; i <= endReg-startReg+1; i++) {
 800536a:	2301      	movs	r3, #1
 800536c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800536e:	e01d      	b.n	80053ac <ADXL343_init+0x84>
		uint8_t ret=0;
 8005370:	2300      	movs	r3, #0
 8005372:	73fb      	strb	r3, [r7, #15]
		ADXL343_ReadRegister(IMURegister[i].reg, &ret,1);
 8005374:	4a9e      	ldr	r2, [pc, #632]	@ (80055f0 <ADXL343_init+0x2c8>)
 8005376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005378:	00db      	lsls	r3, r3, #3
 800537a:	4413      	add	r3, r2
 800537c:	791b      	ldrb	r3, [r3, #4]
 800537e:	f107 010f 	add.w	r1, r7, #15
 8005382:	2201      	movs	r2, #1
 8005384:	4618      	mov	r0, r3
 8005386:	f000 fafd 	bl	8005984 <ADXL343_ReadRegister>
		printf("READ - 0x%02X (%s): 0x%02X\r\n", IMURegister[i].reg,IMURegister[i].name, ret);
 800538a:	4a99      	ldr	r2, [pc, #612]	@ (80055f0 <ADXL343_init+0x2c8>)
 800538c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	4413      	add	r3, r2
 8005392:	791b      	ldrb	r3, [r3, #4]
 8005394:	4619      	mov	r1, r3
 8005396:	4a96      	ldr	r2, [pc, #600]	@ (80055f0 <ADXL343_init+0x2c8>)
 8005398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800539a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800539e:	7bfb      	ldrb	r3, [r7, #15]
 80053a0:	4894      	ldr	r0, [pc, #592]	@ (80055f4 <ADXL343_init+0x2cc>)
 80053a2:	f014 fe43 	bl	801a02c <iprintf>
	for (int i = 1; i <= endReg-startReg+1; i++) {
 80053a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053a8:	3301      	adds	r3, #1
 80053aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053ac:	7eba      	ldrb	r2, [r7, #26]
 80053ae:	7efb      	ldrb	r3, [r7, #27]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	3301      	adds	r3, #1
 80053b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053b6:	429a      	cmp	r2, r3
 80053b8:	ddda      	ble.n	8005370 <ADXL343_init+0x48>
	}

	/*	0x1D-TRESHS_TAP		|	62.5 mg/LSB
	 *	0x0D= 800mg | 0x10=1000mg
	 */
	ADXL343_WriteRegister(0x1D, 0x0D)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 80053ba:	210d      	movs	r1, #13
 80053bc:	201d      	movs	r0, #29
 80053be:	f000 fac3 	bl	8005948 <ADXL343_WriteRegister>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d003      	beq.n	80053d0 <ADXL343_init+0xa8>
 80053c8:	498b      	ldr	r1, [pc, #556]	@ (80055f8 <ADXL343_init+0x2d0>)
 80053ca:	4887      	ldr	r0, [pc, #540]	@ (80055e8 <ADXL343_init+0x2c0>)
 80053cc:	f012 ff54 	bl	8018278 <debug>
	ADXL343_ReadRegister(0x1D, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 80053d0:	f107 0310 	add.w	r3, r7, #16
 80053d4:	2201      	movs	r2, #1
 80053d6:	4619      	mov	r1, r3
 80053d8:	201d      	movs	r0, #29
 80053da:	f000 fad3 	bl	8005984 <ADXL343_ReadRegister>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d003      	beq.n	80053ec <ADXL343_init+0xc4>
 80053e4:	497f      	ldr	r1, [pc, #508]	@ (80055e4 <ADXL343_init+0x2bc>)
 80053e6:	4880      	ldr	r0, [pc, #512]	@ (80055e8 <ADXL343_init+0x2c0>)
 80053e8:	f012 ff46 	bl	8018278 <debug>
	//printf("WRITE/READ - TRESHS_TAP: 0x%02X\r\n",ret);
	/* 	0x21-DUR	|	625 µs/LSB
	 *	0xa0 : 100ms
	 */
	ADXL343_WriteRegister(0x21, 0xFF)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 80053ec:	21ff      	movs	r1, #255	@ 0xff
 80053ee:	2021      	movs	r0, #33	@ 0x21
 80053f0:	f000 faaa 	bl	8005948 <ADXL343_WriteRegister>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d003      	beq.n	8005402 <ADXL343_init+0xda>
 80053fa:	497f      	ldr	r1, [pc, #508]	@ (80055f8 <ADXL343_init+0x2d0>)
 80053fc:	487a      	ldr	r0, [pc, #488]	@ (80055e8 <ADXL343_init+0x2c0>)
 80053fe:	f012 ff3b 	bl	8018278 <debug>
	ADXL343_ReadRegister(0x21, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 8005402:	f107 0310 	add.w	r3, r7, #16
 8005406:	2201      	movs	r2, #1
 8005408:	4619      	mov	r1, r3
 800540a:	2021      	movs	r0, #33	@ 0x21
 800540c:	f000 faba 	bl	8005984 <ADXL343_ReadRegister>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <ADXL343_init+0xf6>
 8005416:	4973      	ldr	r1, [pc, #460]	@ (80055e4 <ADXL343_init+0x2bc>)
 8005418:	4873      	ldr	r0, [pc, #460]	@ (80055e8 <ADXL343_init+0x2c0>)
 800541a:	f012 ff2d 	bl	8018278 <debug>
	//printf("WRITE/READ - DUR: 0x%02X\r\n",ret);
	/* 	0x22 - LATENT	|	 1.25 ms/LSB
	 *	0xFF : 378.75ms
	 */
	ADXL343_WriteRegister(0x22, 0xFF)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 800541e:	21ff      	movs	r1, #255	@ 0xff
 8005420:	2022      	movs	r0, #34	@ 0x22
 8005422:	f000 fa91 	bl	8005948 <ADXL343_WriteRegister>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d003      	beq.n	8005434 <ADXL343_init+0x10c>
 800542c:	4972      	ldr	r1, [pc, #456]	@ (80055f8 <ADXL343_init+0x2d0>)
 800542e:	486e      	ldr	r0, [pc, #440]	@ (80055e8 <ADXL343_init+0x2c0>)
 8005430:	f012 ff22 	bl	8018278 <debug>
	ADXL343_ReadRegister(0x22, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 8005434:	f107 0310 	add.w	r3, r7, #16
 8005438:	2201      	movs	r2, #1
 800543a:	4619      	mov	r1, r3
 800543c:	2022      	movs	r0, #34	@ 0x22
 800543e:	f000 faa1 	bl	8005984 <ADXL343_ReadRegister>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d003      	beq.n	8005450 <ADXL343_init+0x128>
 8005448:	4966      	ldr	r1, [pc, #408]	@ (80055e4 <ADXL343_init+0x2bc>)
 800544a:	4867      	ldr	r0, [pc, #412]	@ (80055e8 <ADXL343_init+0x2c0>)
 800544c:	f012 ff14 	bl	8018278 <debug>
	 *	D3		|SUPRESS
	 * 	D2		|TAP_X
	 * 	D1		|TAP_Y
	 * 	D0		|TAP_Z
	 */
	ADXL343_WriteRegister(0x2A, 0b110)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 8005450:	2106      	movs	r1, #6
 8005452:	202a      	movs	r0, #42	@ 0x2a
 8005454:	f000 fa78 	bl	8005948 <ADXL343_WriteRegister>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d003      	beq.n	8005466 <ADXL343_init+0x13e>
 800545e:	4966      	ldr	r1, [pc, #408]	@ (80055f8 <ADXL343_init+0x2d0>)
 8005460:	4861      	ldr	r0, [pc, #388]	@ (80055e8 <ADXL343_init+0x2c0>)
 8005462:	f012 ff09 	bl	8018278 <debug>
	ADXL343_ReadRegister(0x2A, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 8005466:	f107 0310 	add.w	r3, r7, #16
 800546a:	2201      	movs	r2, #1
 800546c:	4619      	mov	r1, r3
 800546e:	202a      	movs	r0, #42	@ 0x2a
 8005470:	f000 fa88 	bl	8005984 <ADXL343_ReadRegister>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <ADXL343_init+0x15a>
 800547a:	495a      	ldr	r1, [pc, #360]	@ (80055e4 <ADXL343_init+0x2bc>)
 800547c:	485a      	ldr	r0, [pc, #360]	@ (80055e8 <ADXL343_init+0x2c0>)
 800547e:	f012 fefb 	bl	8018278 <debug>
	//printf("WRITE/READ - TAP_AXES: 0x%02X\r\n",ret);
	/*	0x2E-INT_ENABLE
	 * 	D6 		| SINGLE_TAP
	 */
	ADXL343_WriteRegister(0x2E, 0b1<<6)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 8005482:	2140      	movs	r1, #64	@ 0x40
 8005484:	202e      	movs	r0, #46	@ 0x2e
 8005486:	f000 fa5f 	bl	8005948 <ADXL343_WriteRegister>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d003      	beq.n	8005498 <ADXL343_init+0x170>
 8005490:	4959      	ldr	r1, [pc, #356]	@ (80055f8 <ADXL343_init+0x2d0>)
 8005492:	4855      	ldr	r0, [pc, #340]	@ (80055e8 <ADXL343_init+0x2c0>)
 8005494:	f012 fef0 	bl	8018278 <debug>
	ADXL343_ReadRegister(0x2E, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 8005498:	f107 0310 	add.w	r3, r7, #16
 800549c:	2201      	movs	r2, #1
 800549e:	4619      	mov	r1, r3
 80054a0:	202e      	movs	r0, #46	@ 0x2e
 80054a2:	f000 fa6f 	bl	8005984 <ADXL343_ReadRegister>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d003      	beq.n	80054b4 <ADXL343_init+0x18c>
 80054ac:	494d      	ldr	r1, [pc, #308]	@ (80055e4 <ADXL343_init+0x2bc>)
 80054ae:	484e      	ldr	r0, [pc, #312]	@ (80055e8 <ADXL343_init+0x2c0>)
 80054b0:	f012 fee2 	bl	8018278 <debug>
	//printf("WRITE/READ - INT_ENABLE: 0x%02X\r\n",ret);
	/*	0x2F-INT_MAP
	 * 	D6 		| SINGLE_TAP =1 : vers INT2
	 */
	ADXL343_WriteRegister(0x2F, 0b1<<6)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 80054b4:	2140      	movs	r1, #64	@ 0x40
 80054b6:	202f      	movs	r0, #47	@ 0x2f
 80054b8:	f000 fa46 	bl	8005948 <ADXL343_WriteRegister>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <ADXL343_init+0x1a2>
 80054c2:	494d      	ldr	r1, [pc, #308]	@ (80055f8 <ADXL343_init+0x2d0>)
 80054c4:	4848      	ldr	r0, [pc, #288]	@ (80055e8 <ADXL343_init+0x2c0>)
 80054c6:	f012 fed7 	bl	8018278 <debug>
	ADXL343_ReadRegister(0x2F, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 80054ca:	f107 0310 	add.w	r3, r7, #16
 80054ce:	2201      	movs	r2, #1
 80054d0:	4619      	mov	r1, r3
 80054d2:	202f      	movs	r0, #47	@ 0x2f
 80054d4:	f000 fa56 	bl	8005984 <ADXL343_ReadRegister>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <ADXL343_init+0x1be>
 80054de:	4941      	ldr	r1, [pc, #260]	@ (80055e4 <ADXL343_init+0x2bc>)
 80054e0:	4841      	ldr	r0, [pc, #260]	@ (80055e8 <ADXL343_init+0x2c0>)
 80054e2:	f012 fec9 	bl	8018278 <debug>
	 * 	D3		| INACT ac/dc
	 * 	D2		| INACT_X enable
	 * 	D1		| INACT_Y enable
	 * 	D0		| INACT_Z enable
	 */
	ADXL343_WriteRegister(0x27, 0b11100000)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 80054e6:	21e0      	movs	r1, #224	@ 0xe0
 80054e8:	2027      	movs	r0, #39	@ 0x27
 80054ea:	f000 fa2d 	bl	8005948 <ADXL343_WriteRegister>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d003      	beq.n	80054fc <ADXL343_init+0x1d4>
 80054f4:	4940      	ldr	r1, [pc, #256]	@ (80055f8 <ADXL343_init+0x2d0>)
 80054f6:	483c      	ldr	r0, [pc, #240]	@ (80055e8 <ADXL343_init+0x2c0>)
 80054f8:	f012 febe 	bl	8018278 <debug>
	ADXL343_ReadRegister(0x27, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 80054fc:	f107 0310 	add.w	r3, r7, #16
 8005500:	2201      	movs	r2, #1
 8005502:	4619      	mov	r1, r3
 8005504:	2027      	movs	r0, #39	@ 0x27
 8005506:	f000 fa3d 	bl	8005984 <ADXL343_ReadRegister>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d003      	beq.n	8005518 <ADXL343_init+0x1f0>
 8005510:	4934      	ldr	r1, [pc, #208]	@ (80055e4 <ADXL343_init+0x2bc>)
 8005512:	4835      	ldr	r0, [pc, #212]	@ (80055e8 <ADXL343_init+0x2c0>)
 8005514:	f012 feb0 	bl	8018278 <debug>
	//printf("WRITE/READ - ACT_INACT_CTL: 0x%02X\r\n",ret);

	/*	0x2D—POWER_CTL
	 * 	D3		| MEASURE = 1
	 */
	ADXL343_WriteRegister(0x2D, 1<<3)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 8005518:	2108      	movs	r1, #8
 800551a:	202d      	movs	r0, #45	@ 0x2d
 800551c:	f000 fa14 	bl	8005948 <ADXL343_WriteRegister>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d003      	beq.n	800552e <ADXL343_init+0x206>
 8005526:	4934      	ldr	r1, [pc, #208]	@ (80055f8 <ADXL343_init+0x2d0>)
 8005528:	482f      	ldr	r0, [pc, #188]	@ (80055e8 <ADXL343_init+0x2c0>)
 800552a:	f012 fea5 	bl	8018278 <debug>
	ADXL343_ReadRegister(0x2D, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 800552e:	f107 0310 	add.w	r3, r7, #16
 8005532:	2201      	movs	r2, #1
 8005534:	4619      	mov	r1, r3
 8005536:	202d      	movs	r0, #45	@ 0x2d
 8005538:	f000 fa24 	bl	8005984 <ADXL343_ReadRegister>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d003      	beq.n	800554a <ADXL343_init+0x222>
 8005542:	4928      	ldr	r1, [pc, #160]	@ (80055e4 <ADXL343_init+0x2bc>)
 8005544:	4828      	ldr	r0, [pc, #160]	@ (80055e8 <ADXL343_init+0x2c0>)
 8005546:	f012 fe97 	bl	8018278 <debug>
	 * 	D5 		| INT_INVERT = 0 => Inverse le high and low des INT
	 * 	D3 		| FULL_RES = 1 => Max resolution
	 * 	D2 		| JUSTIFY = 0 => LSB
	 * 	D1-D0 	| RANGE = 00 =>  ±2g
	 */
	ADXL343_WriteRegister(0x31, 0<<7|1<<6|1<<3|0b00)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 800554a:	2148      	movs	r1, #72	@ 0x48
 800554c:	2031      	movs	r0, #49	@ 0x31
 800554e:	f000 f9fb 	bl	8005948 <ADXL343_WriteRegister>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d003      	beq.n	8005560 <ADXL343_init+0x238>
 8005558:	4927      	ldr	r1, [pc, #156]	@ (80055f8 <ADXL343_init+0x2d0>)
 800555a:	4823      	ldr	r0, [pc, #140]	@ (80055e8 <ADXL343_init+0x2c0>)
 800555c:	f012 fe8c 	bl	8018278 <debug>
	ADXL343_ReadRegister(0x31, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 8005560:	f107 0310 	add.w	r3, r7, #16
 8005564:	2201      	movs	r2, #1
 8005566:	4619      	mov	r1, r3
 8005568:	2031      	movs	r0, #49	@ 0x31
 800556a:	f000 fa0b 	bl	8005984 <ADXL343_ReadRegister>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d003      	beq.n	800557c <ADXL343_init+0x254>
 8005574:	491b      	ldr	r1, [pc, #108]	@ (80055e4 <ADXL343_init+0x2bc>)
 8005576:	481c      	ldr	r0, [pc, #112]	@ (80055e8 <ADXL343_init+0x2c0>)
 8005578:	f012 fe7e 	bl	8018278 <debug>
	/* 	0x38—FIFO_CTL
	 * 	D7-D6	| FIFO_MODE = 10 => STREAM
	 * 	D5		| TRIGGER BIT = 1 => Redirige ExINT vers INT2
	 * 	D4-D0	| SAMPLE BITS = 0b10000(16) => Nécessite 16 samples avant de trigger le INT
	 */
	ADXL343_WriteRegister(0x38, ((0b10<<6)| 0b10000))!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 800557c:	2190      	movs	r1, #144	@ 0x90
 800557e:	2038      	movs	r0, #56	@ 0x38
 8005580:	f000 f9e2 	bl	8005948 <ADXL343_WriteRegister>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <ADXL343_init+0x26a>
 800558a:	491b      	ldr	r1, [pc, #108]	@ (80055f8 <ADXL343_init+0x2d0>)
 800558c:	4816      	ldr	r0, [pc, #88]	@ (80055e8 <ADXL343_init+0x2c0>)
 800558e:	f012 fe73 	bl	8018278 <debug>
	ADXL343_ReadRegister(0x38, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 8005592:	f107 0310 	add.w	r3, r7, #16
 8005596:	2201      	movs	r2, #1
 8005598:	4619      	mov	r1, r3
 800559a:	2038      	movs	r0, #56	@ 0x38
 800559c:	f000 f9f2 	bl	8005984 <ADXL343_ReadRegister>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <ADXL343_init+0x286>
 80055a6:	490f      	ldr	r1, [pc, #60]	@ (80055e4 <ADXL343_init+0x2bc>)
 80055a8:	480f      	ldr	r0, [pc, #60]	@ (80055e8 <ADXL343_init+0x2c0>)
 80055aa:	f012 fe65 	bl	8018278 <debug>


 /*On reinitialise en prevention les registres de sortie
  *
  */
	ADXL343_ReadRegister(0x30,&ret,1); //Permet de reinitialiser le registre de l'adxl
 80055ae:	f107 0310 	add.w	r3, r7, #16
 80055b2:	2201      	movs	r2, #1
 80055b4:	4619      	mov	r1, r3
 80055b6:	2030      	movs	r0, #48	@ 0x30
 80055b8:	f000 f9e4 	bl	8005984 <ADXL343_ReadRegister>
	ADXL343_ReadRegister(0x31,&ret,1);
 80055bc:	f107 0310 	add.w	r3, r7, #16
 80055c0:	2201      	movs	r2, #1
 80055c2:	4619      	mov	r1, r3
 80055c4:	2031      	movs	r0, #49	@ 0x31
 80055c6:	f000 f9dd 	bl	8005984 <ADXL343_ReadRegister>
	/*
	 ************$	ETALONNAGE	$************
	 */
	int32_t sumX = 0, sumY = 0, sumZ = 0;
 80055ca:	2300      	movs	r3, #0
 80055cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055ce:	2300      	movs	r3, #0
 80055d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80055d2:	2300      	movs	r3, #0
 80055d4:	623b      	str	r3, [r7, #32]
	for (int i=0;i<IMU_SAMPLE_0G;i++){
 80055d6:	2300      	movs	r3, #0
 80055d8:	61fb      	str	r3, [r7, #28]
 80055da:	e04a      	b.n	8005672 <ADXL343_init+0x34a>
 80055dc:	0801dee0 	.word	0x0801dee0
 80055e0:	0801def0 	.word	0x0801def0
 80055e4:	0801df04 	.word	0x0801df04
 80055e8:	0801df18 	.word	0x0801df18
 80055ec:	0801df24 	.word	0x0801df24
 80055f0:	20000008 	.word	0x20000008
 80055f4:	0801df40 	.word	0x0801df40
 80055f8:	0801df60 	.word	0x0801df60
		XYZ_t accXYZ_0G = ADXL343_getAcc();
 80055fc:	f000 f8f6 	bl	80057ec <ADXL343_getAcc>
 8005600:	eef0 6a40 	vmov.f32	s13, s0
 8005604:	eeb0 7a60 	vmov.f32	s14, s1
 8005608:	eef0 7a41 	vmov.f32	s15, s2
 800560c:	edc7 6a00 	vstr	s13, [r7]
 8005610:	ed87 7a01 	vstr	s14, [r7, #4]
 8005614:	edc7 7a02 	vstr	s15, [r7, #8]
		sumX += accXYZ_0G.X;
 8005618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800561a:	ee07 3a90 	vmov	s15, r3
 800561e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005622:	edd7 7a00 	vldr	s15, [r7]
 8005626:	ee77 7a27 	vadd.f32	s15, s14, s15
 800562a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800562e:	ee17 3a90 	vmov	r3, s15
 8005632:	62bb      	str	r3, [r7, #40]	@ 0x28
		sumY += accXYZ_0G.Y;
 8005634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005636:	ee07 3a90 	vmov	s15, r3
 800563a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800563e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005642:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005646:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800564a:	ee17 3a90 	vmov	r3, s15
 800564e:	627b      	str	r3, [r7, #36]	@ 0x24
		sumZ += accXYZ_0G.Z;
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	ee07 3a90 	vmov	s15, r3
 8005656:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800565a:	edd7 7a02 	vldr	s15, [r7, #8]
 800565e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005662:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005666:	ee17 3a90 	vmov	r3, s15
 800566a:	623b      	str	r3, [r7, #32]
	for (int i=0;i<IMU_SAMPLE_0G;i++){
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	3301      	adds	r3, #1
 8005670:	61fb      	str	r3, [r7, #28]
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	2b09      	cmp	r3, #9
 8005676:	ddc1      	ble.n	80055fc <ADXL343_init+0x2d4>
	}
	// Average
	int16_t avgX = sumX / IMU_SAMPLE_0G;
 8005678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800567a:	4a59      	ldr	r2, [pc, #356]	@ (80057e0 <ADXL343_init+0x4b8>)
 800567c:	fb82 1203 	smull	r1, r2, r2, r3
 8005680:	1092      	asrs	r2, r2, #2
 8005682:	17db      	asrs	r3, r3, #31
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	833b      	strh	r3, [r7, #24]
	int16_t avgY = sumY / IMU_SAMPLE_0G;
 8005688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568a:	4a55      	ldr	r2, [pc, #340]	@ (80057e0 <ADXL343_init+0x4b8>)
 800568c:	fb82 1203 	smull	r1, r2, r2, r3
 8005690:	1092      	asrs	r2, r2, #2
 8005692:	17db      	asrs	r3, r3, #31
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	82fb      	strh	r3, [r7, #22]
	int16_t avgZ = (sumZ / IMU_SAMPLE_0G);//-10;
 8005698:	6a3b      	ldr	r3, [r7, #32]
 800569a:	4a51      	ldr	r2, [pc, #324]	@ (80057e0 <ADXL343_init+0x4b8>)
 800569c:	fb82 1203 	smull	r1, r2, r2, r3
 80056a0:	1092      	asrs	r2, r2, #2
 80056a2:	17db      	asrs	r3, r3, #31
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	82bb      	strh	r3, [r7, #20]

	//!\\  Each LSB of output in full-resolution is 3.9 mg or one-quarter of an LSB of the offset register
	uint8_t offsetX = -round((float)avgX / (SENSITIVITY_FULL_RES / SCALE_FACTOR_OFFSET_REG));
 80056a8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80056ac:	ee07 3a90 	vmov	s15, r3
 80056b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056b4:	ee17 0a90 	vmov	r0, s15
 80056b8:	f7fd f978 	bl	80029ac <__aeabi_f2d>
 80056bc:	a346      	add	r3, pc, #280	@ (adr r3, 80057d8 <ADXL343_init+0x4b0>)
 80056be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c2:	f7fd faf5 	bl	8002cb0 <__aeabi_ddiv>
 80056c6:	4602      	mov	r2, r0
 80056c8:	460b      	mov	r3, r1
 80056ca:	ec43 2b17 	vmov	d7, r2, r3
 80056ce:	eeb0 0a47 	vmov.f32	s0, s14
 80056d2:	eef0 0a67 	vmov.f32	s1, s15
 80056d6:	f017 fb07 	bl	801cce8 <round>
 80056da:	ec53 2b10 	vmov	r2, r3, d0
 80056de:	4692      	mov	sl, r2
 80056e0:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 80056e4:	4650      	mov	r0, sl
 80056e6:	4659      	mov	r1, fp
 80056e8:	f7fd fc90 	bl	800300c <__aeabi_d2uiz>
 80056ec:	4603      	mov	r3, r0
 80056ee:	74fb      	strb	r3, [r7, #19]
	uint8_t offsetY = -round((float)avgY / (SENSITIVITY_FULL_RES / SCALE_FACTOR_OFFSET_REG));
 80056f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80056f4:	ee07 3a90 	vmov	s15, r3
 80056f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056fc:	ee17 0a90 	vmov	r0, s15
 8005700:	f7fd f954 	bl	80029ac <__aeabi_f2d>
 8005704:	a334      	add	r3, pc, #208	@ (adr r3, 80057d8 <ADXL343_init+0x4b0>)
 8005706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570a:	f7fd fad1 	bl	8002cb0 <__aeabi_ddiv>
 800570e:	4602      	mov	r2, r0
 8005710:	460b      	mov	r3, r1
 8005712:	ec43 2b17 	vmov	d7, r2, r3
 8005716:	eeb0 0a47 	vmov.f32	s0, s14
 800571a:	eef0 0a67 	vmov.f32	s1, s15
 800571e:	f017 fae3 	bl	801cce8 <round>
 8005722:	ec53 2b10 	vmov	r2, r3, d0
 8005726:	4690      	mov	r8, r2
 8005728:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 800572c:	4640      	mov	r0, r8
 800572e:	4649      	mov	r1, r9
 8005730:	f7fd fc6c 	bl	800300c <__aeabi_d2uiz>
 8005734:	4603      	mov	r3, r0
 8005736:	74bb      	strb	r3, [r7, #18]
	uint8_t offsetZ = -round((float)(avgZ - SENSITIVITY_FULL_RES) / (SENSITIVITY_FULL_RES / SCALE_FACTOR_OFFSET_REG));
 8005738:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800573c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8005740:	ee07 3a90 	vmov	s15, r3
 8005744:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005748:	ee17 0a90 	vmov	r0, s15
 800574c:	f7fd f92e 	bl	80029ac <__aeabi_f2d>
 8005750:	a321      	add	r3, pc, #132	@ (adr r3, 80057d8 <ADXL343_init+0x4b0>)
 8005752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005756:	f7fd faab 	bl	8002cb0 <__aeabi_ddiv>
 800575a:	4602      	mov	r2, r0
 800575c:	460b      	mov	r3, r1
 800575e:	ec43 2b17 	vmov	d7, r2, r3
 8005762:	eeb0 0a47 	vmov.f32	s0, s14
 8005766:	eef0 0a67 	vmov.f32	s1, s15
 800576a:	f017 fabd 	bl	801cce8 <round>
 800576e:	ec53 2b10 	vmov	r2, r3, d0
 8005772:	4614      	mov	r4, r2
 8005774:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8005778:	4620      	mov	r0, r4
 800577a:	4629      	mov	r1, r5
 800577c:	f7fd fc46 	bl	800300c <__aeabi_d2uiz>
 8005780:	4603      	mov	r3, r0
 8005782:	747b      	strb	r3, [r7, #17]

	ADXL343_WriteRegister(0x1E, offsetX)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 8005784:	7cfb      	ldrb	r3, [r7, #19]
 8005786:	4619      	mov	r1, r3
 8005788:	201e      	movs	r0, #30
 800578a:	f000 f8dd 	bl	8005948 <ADXL343_WriteRegister>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d003      	beq.n	800579c <ADXL343_init+0x474>
 8005794:	4913      	ldr	r1, [pc, #76]	@ (80057e4 <ADXL343_init+0x4bc>)
 8005796:	4814      	ldr	r0, [pc, #80]	@ (80057e8 <ADXL343_init+0x4c0>)
 8005798:	f012 fd6e 	bl	8018278 <debug>
	ADXL343_WriteRegister(0x1F, offsetY)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 800579c:	7cbb      	ldrb	r3, [r7, #18]
 800579e:	4619      	mov	r1, r3
 80057a0:	201f      	movs	r0, #31
 80057a2:	f000 f8d1 	bl	8005948 <ADXL343_WriteRegister>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <ADXL343_init+0x48c>
 80057ac:	490d      	ldr	r1, [pc, #52]	@ (80057e4 <ADXL343_init+0x4bc>)
 80057ae:	480e      	ldr	r0, [pc, #56]	@ (80057e8 <ADXL343_init+0x4c0>)
 80057b0:	f012 fd62 	bl	8018278 <debug>
	ADXL343_WriteRegister(0x20, offsetZ)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 80057b4:	7c7b      	ldrb	r3, [r7, #17]
 80057b6:	4619      	mov	r1, r3
 80057b8:	2020      	movs	r0, #32
 80057ba:	f000 f8c5 	bl	8005948 <ADXL343_WriteRegister>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d003      	beq.n	80057cc <ADXL343_init+0x4a4>
 80057c4:	4907      	ldr	r1, [pc, #28]	@ (80057e4 <ADXL343_init+0x4bc>)
 80057c6:	4808      	ldr	r0, [pc, #32]	@ (80057e8 <ADXL343_init+0x4c0>)
 80057c8:	f012 fd56 	bl	8018278 <debug>
}
 80057cc:	bf00      	nop
 80057ce:	3730      	adds	r7, #48	@ 0x30
 80057d0:	46bd      	mov	sp, r7
 80057d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057d6:	bf00      	nop
 80057d8:	90690691 	.word	0x90690691
 80057dc:	40306906 	.word	0x40306906
 80057e0:	66666667 	.word	0x66666667
 80057e4:	0801df04 	.word	0x0801df04
 80057e8:	0801df18 	.word	0x0801df18

080057ec <ADXL343_getAcc>:
//Resort la valeur en mm/s2
XYZ_t ADXL343_getAcc(void){
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b08e      	sub	sp, #56	@ 0x38
 80057f0:	af00      	add	r7, sp, #0
	XYZ_t accXYZ;
	int8_t a_x[2]={0,0};
 80057f2:	2300      	movs	r3, #0
 80057f4:	83bb      	strh	r3, [r7, #28]
	int8_t a_y[2]={0,0};
 80057f6:	2300      	movs	r3, #0
 80057f8:	833b      	strh	r3, [r7, #24]
	int8_t a_z[2]={0,0};
 80057fa:	2300      	movs	r3, #0
 80057fc:	82bb      	strh	r3, [r7, #20]

	ADXL343_ReadRegister(0x32, (uint8_t*)a_x, 2)!=HAL_OK ? debug(D_ERROR,"I2C RECEIVE in ReadREGISTER"):(void)0;
 80057fe:	f107 031c 	add.w	r3, r7, #28
 8005802:	2202      	movs	r2, #2
 8005804:	4619      	mov	r1, r3
 8005806:	2032      	movs	r0, #50	@ 0x32
 8005808:	f000 f8bc 	bl	8005984 <ADXL343_ReadRegister>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d003      	beq.n	800581a <ADXL343_getAcc+0x2e>
 8005812:	494b      	ldr	r1, [pc, #300]	@ (8005940 <ADXL343_getAcc+0x154>)
 8005814:	484b      	ldr	r0, [pc, #300]	@ (8005944 <ADXL343_getAcc+0x158>)
 8005816:	f012 fd2f 	bl	8018278 <debug>
	ADXL343_ReadRegister(0x34, (uint8_t*)a_y, 2)!=HAL_OK ? debug(D_ERROR,"I2C RECEIVE in ReadREGISTER"):(void)0;
 800581a:	f107 0318 	add.w	r3, r7, #24
 800581e:	2202      	movs	r2, #2
 8005820:	4619      	mov	r1, r3
 8005822:	2034      	movs	r0, #52	@ 0x34
 8005824:	f000 f8ae 	bl	8005984 <ADXL343_ReadRegister>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d003      	beq.n	8005836 <ADXL343_getAcc+0x4a>
 800582e:	4944      	ldr	r1, [pc, #272]	@ (8005940 <ADXL343_getAcc+0x154>)
 8005830:	4844      	ldr	r0, [pc, #272]	@ (8005944 <ADXL343_getAcc+0x158>)
 8005832:	f012 fd21 	bl	8018278 <debug>
	ADXL343_ReadRegister(0x36, (uint8_t*)a_z, 2)!=HAL_OK ? debug(D_ERROR,"I2C RECEIVE in ReadREGISTER"):(void)0;
 8005836:	f107 0314 	add.w	r3, r7, #20
 800583a:	2202      	movs	r2, #2
 800583c:	4619      	mov	r1, r3
 800583e:	2036      	movs	r0, #54	@ 0x36
 8005840:	f000 f8a0 	bl	8005984 <ADXL343_ReadRegister>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d003      	beq.n	8005852 <ADXL343_getAcc+0x66>
 800584a:	493d      	ldr	r1, [pc, #244]	@ (8005940 <ADXL343_getAcc+0x154>)
 800584c:	483d      	ldr	r0, [pc, #244]	@ (8005944 <ADXL343_getAcc+0x158>)
 800584e:	f012 fd13 	bl	8018278 <debug>
	accXYZ.X = (int16_t)(	a_x[1] << 8 | a_x[0]	)*ADXL_SENSIBILITY; //g.e-3 ie mm.s-2
 8005852:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8005856:	021b      	lsls	r3, r3, #8
 8005858:	b21b      	sxth	r3, r3
 800585a:	f997 201c 	ldrsb.w	r2, [r7, #28]
 800585e:	4313      	orrs	r3, r2
 8005860:	b21b      	sxth	r3, r3
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	ee07 3a90 	vmov	s15, r3
 8005868:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800586c:	edc7 7a08 	vstr	s15, [r7, #32]
	accXYZ.Y = (int16_t)(	a_y[1] << 8 | a_y[0]	)*ADXL_SENSIBILITY;
 8005870:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8005874:	021b      	lsls	r3, r3, #8
 8005876:	b21b      	sxth	r3, r3
 8005878:	f997 2018 	ldrsb.w	r2, [r7, #24]
 800587c:	4313      	orrs	r3, r2
 800587e:	b21b      	sxth	r3, r3
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	ee07 3a90 	vmov	s15, r3
 8005886:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800588a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	accXYZ.Z = (int16_t)(	a_z[1] << 8 | a_z[0]	)*ADXL_SENSIBILITY;
 800588e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8005892:	021b      	lsls	r3, r3, #8
 8005894:	b21b      	sxth	r3, r3
 8005896:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800589a:	4313      	orrs	r3, r2
 800589c:	b21b      	sxth	r3, r3
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	ee07 3a90 	vmov	s15, r3
 80058a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058a8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	/** FILTRAGE **/
	accXYZ.X = abs(accXYZ.X)>=MM_S2_SEUIL ? accXYZ.X:0;
 80058ac:	edd7 7a08 	vldr	s15, [r7, #32]
 80058b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058b4:	ee17 3a90 	vmov	r3, s15
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	bfb8      	it	lt
 80058bc:	425b      	neglt	r3, r3
 80058be:	2b27      	cmp	r3, #39	@ 0x27
 80058c0:	dd01      	ble.n	80058c6 <ADXL343_getAcc+0xda>
 80058c2:	6a3b      	ldr	r3, [r7, #32]
 80058c4:	e001      	b.n	80058ca <ADXL343_getAcc+0xde>
 80058c6:	f04f 0300 	mov.w	r3, #0
 80058ca:	623b      	str	r3, [r7, #32]
	accXYZ.Y = abs(accXYZ.Y)>=MM_S2_SEUIL ? accXYZ.Y:0;
 80058cc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80058d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058d4:	ee17 3a90 	vmov	r3, s15
 80058d8:	2b00      	cmp	r3, #0
 80058da:	bfb8      	it	lt
 80058dc:	425b      	neglt	r3, r3
 80058de:	2b27      	cmp	r3, #39	@ 0x27
 80058e0:	dd01      	ble.n	80058e6 <ADXL343_getAcc+0xfa>
 80058e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e4:	e001      	b.n	80058ea <ADXL343_getAcc+0xfe>
 80058e6:	f04f 0300 	mov.w	r3, #0
 80058ea:	627b      	str	r3, [r7, #36]	@ 0x24
	accXYZ.Z = abs(accXYZ.Z)>=MM_S2_SEUIL ? accXYZ.Z:0;
 80058ec:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80058f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058f4:	ee17 3a90 	vmov	r3, s15
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	bfb8      	it	lt
 80058fc:	425b      	neglt	r3, r3
 80058fe:	2b27      	cmp	r3, #39	@ 0x27
 8005900:	dd01      	ble.n	8005906 <ADXL343_getAcc+0x11a>
 8005902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005904:	e001      	b.n	800590a <ADXL343_getAcc+0x11e>
 8005906:	f04f 0300 	mov.w	r3, #0
 800590a:	62bb      	str	r3, [r7, #40]	@ 0x28

	return accXYZ;
 800590c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005910:	f107 0220 	add.w	r2, r7, #32
 8005914:	ca07      	ldmia	r2, {r0, r1, r2}
 8005916:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800591a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800591c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800591e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005920:	ee06 1a90 	vmov	s13, r1
 8005924:	ee07 2a10 	vmov	s14, r2
 8005928:	ee07 3a90 	vmov	s15, r3
	/*
	 * Pour obtenir vitesse et position : CallBack dans fichier .IT
	 */
}
 800592c:	eeb0 0a66 	vmov.f32	s0, s13
 8005930:	eef0 0a47 	vmov.f32	s1, s14
 8005934:	eeb0 1a67 	vmov.f32	s2, s15
 8005938:	3738      	adds	r7, #56	@ 0x38
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	0801df78 	.word	0x0801df78
 8005944:	0801df18 	.word	0x0801df18

08005948 <ADXL343_WriteRegister>:

HAL_StatusTypeDef ADXL343_WriteRegister(uint8_t reg, uint8_t data){
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af02      	add	r7, sp, #8
 800594e:	4603      	mov	r3, r0
 8005950:	460a      	mov	r2, r1
 8005952:	71fb      	strb	r3, [r7, #7]
 8005954:	4613      	mov	r3, r2
 8005956:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer[2]={reg,data};
 8005958:	79fb      	ldrb	r3, [r7, #7]
 800595a:	733b      	strb	r3, [r7, #12]
 800595c:	79bb      	ldrb	r3, [r7, #6]
 800595e:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(&I2C_IMU, (uint16_t)(ADXL_ADRR<<1), buffer, 2 ,HAL_MAX_DELAY);
 8005960:	f107 020c 	add.w	r2, r7, #12
 8005964:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005968:	9300      	str	r3, [sp, #0]
 800596a:	2302      	movs	r3, #2
 800596c:	21a6      	movs	r1, #166	@ 0xa6
 800596e:	4804      	ldr	r0, [pc, #16]	@ (8005980 <ADXL343_WriteRegister+0x38>)
 8005970:	f003 ffdc 	bl	800992c <HAL_I2C_Master_Transmit>
 8005974:	4603      	mov	r3, r0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	200006a0 	.word	0x200006a0

08005984 <ADXL343_ReadRegister>:

HAL_StatusTypeDef ADXL343_ReadRegister(uint8_t reg, uint8_t* recptData, uint8_t lenData){
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af02      	add	r7, sp, #8
 800598a:	4603      	mov	r3, r0
 800598c:	6039      	str	r1, [r7, #0]
 800598e:	71fb      	strb	r3, [r7, #7]
 8005990:	4613      	mov	r3, r2
 8005992:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&I2C_IMU, (uint16_t)(ADXL_ADRR<<1), &reg, 1 ,HAL_MAX_DELAY)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in ReadREGISTER"):(void)0;
 8005994:	1dfa      	adds	r2, r7, #7
 8005996:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800599a:	9300      	str	r3, [sp, #0]
 800599c:	2301      	movs	r3, #1
 800599e:	21a6      	movs	r1, #166	@ 0xa6
 80059a0:	480c      	ldr	r0, [pc, #48]	@ (80059d4 <ADXL343_ReadRegister+0x50>)
 80059a2:	f003 ffc3 	bl	800992c <HAL_I2C_Master_Transmit>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d003      	beq.n	80059b4 <ADXL343_ReadRegister+0x30>
 80059ac:	490a      	ldr	r1, [pc, #40]	@ (80059d8 <ADXL343_ReadRegister+0x54>)
 80059ae:	480b      	ldr	r0, [pc, #44]	@ (80059dc <ADXL343_ReadRegister+0x58>)
 80059b0:	f012 fc62 	bl	8018278 <debug>
	return HAL_I2C_Master_Receive(&I2C_IMU, (uint16_t)(ADXL_ADRR<<1), recptData, lenData ,HAL_MAX_DELAY);
 80059b4:	79bb      	ldrb	r3, [r7, #6]
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80059bc:	9200      	str	r2, [sp, #0]
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	21a6      	movs	r1, #166	@ 0xa6
 80059c2:	4804      	ldr	r0, [pc, #16]	@ (80059d4 <ADXL343_ReadRegister+0x50>)
 80059c4:	f004 f8ca 	bl	8009b5c <HAL_I2C_Master_Receive>
 80059c8:	4603      	mov	r3, r0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	200006a0 	.word	0x200006a0
 80059d8:	0801df94 	.word	0x0801df94
 80059dc:	0801df18 	.word	0x0801df18

080059e0 <LP5812_Init>:
#define I2C_MAIN hi2c3

LED_t LED;

// Fonctions de configuration du LP5812
void LP5812_Init(void) {
 80059e0:	b590      	push	{r4, r7, lr}
 80059e2:	b087      	sub	sp, #28
 80059e4:	af00      	add	r7, sp, #0
	debug(INFORMATION,"LP5812 - INIT");
 80059e6:	498d      	ldr	r1, [pc, #564]	@ (8005c1c <LP5812_Init+0x23c>)
 80059e8:	488d      	ldr	r0, [pc, #564]	@ (8005c20 <LP5812_Init+0x240>)
 80059ea:	f012 fc45 	bl	8018278 <debug>
	// Activer les LEDs en écrivant dans le registre ENABLE
	/*
	 * Set chip_en = 1 to enable the device
	 */
	LP5812_WriteRegister(0x000,0x01)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 80059ee:	2101      	movs	r1, #1
 80059f0:	2000      	movs	r0, #0
 80059f2:	f000 f91f 	bl	8005c34 <LP5812_WriteRegister>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d003      	beq.n	8005a04 <LP5812_Init+0x24>
 80059fc:	4989      	ldr	r1, [pc, #548]	@ (8005c24 <LP5812_Init+0x244>)
 80059fe:	488a      	ldr	r0, [pc, #552]	@ (8005c28 <LP5812_Init+0x248>)
 8005a00:	f012 fc3a 	bl	8018278 <debug>
	/*
	 * Set led_mode = 4h to configure the LED drive mode as direct drive mode.
	 */
	LP5812_WriteRegister(0x002,0x40)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 8005a04:	2140      	movs	r1, #64	@ 0x40
 8005a06:	2002      	movs	r0, #2
 8005a08:	f000 f914 	bl	8005c34 <LP5812_WriteRegister>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d003      	beq.n	8005a1a <LP5812_Init+0x3a>
 8005a12:	4984      	ldr	r1, [pc, #528]	@ (8005c24 <LP5812_Init+0x244>)
 8005a14:	4884      	ldr	r0, [pc, #528]	@ (8005c28 <LP5812_Init+0x248>)
 8005a16:	f012 fc2f 	bl	8018278 <debug>
	/*
	 * Send update command to complete configuration settings
	 */
	LP5812_WriteRegister(0x010,0x55)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 8005a1a:	2155      	movs	r1, #85	@ 0x55
 8005a1c:	2010      	movs	r0, #16
 8005a1e:	f000 f909 	bl	8005c34 <LP5812_WriteRegister>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d003      	beq.n	8005a30 <LP5812_Init+0x50>
 8005a28:	497e      	ldr	r1, [pc, #504]	@ (8005c24 <LP5812_Init+0x244>)
 8005a2a:	487f      	ldr	r0, [pc, #508]	@ (8005c28 <LP5812_Init+0x248>)
 8005a2c:	f012 fc24 	bl	8018278 <debug>
	//Lire le registre 300h pou être certain que la configuration est bonne

	/*
	 * Enable all 12 LEDs (Write F0h to register 020h and FFh to register 021h)
	 */
	LP5812_WriteRegister(0x020,0xF0)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 8005a30:	21f0      	movs	r1, #240	@ 0xf0
 8005a32:	2020      	movs	r0, #32
 8005a34:	f000 f8fe 	bl	8005c34 <LP5812_WriteRegister>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <LP5812_Init+0x66>
 8005a3e:	4979      	ldr	r1, [pc, #484]	@ (8005c24 <LP5812_Init+0x244>)
 8005a40:	4879      	ldr	r0, [pc, #484]	@ (8005c28 <LP5812_Init+0x248>)
 8005a42:	f012 fc19 	bl	8018278 <debug>
	LP5812_WriteRegister(0x021,0xFF)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 8005a46:	21ff      	movs	r1, #255	@ 0xff
 8005a48:	2021      	movs	r0, #33	@ 0x21
 8005a4a:	f000 f8f3 	bl	8005c34 <LP5812_WriteRegister>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d003      	beq.n	8005a5c <LP5812_Init+0x7c>
 8005a54:	4973      	ldr	r1, [pc, #460]	@ (8005c24 <LP5812_Init+0x244>)
 8005a56:	4874      	ldr	r0, [pc, #464]	@ (8005c28 <LP5812_Init+0x248>)
 8005a58:	f012 fc0e 	bl	8018278 <debug>
	/*
	 * 	Set 51mA peak current for red LEDs (Write FFh to registers 035h, 038h, 03Bh, 03Eh) , and 40mA peak
	 *	current for green and blue LEDs (Write CCh to registers 034h, 036h, 037h, 039h, 03Ah, 03Ch, 03Dh,
		03Fh)
	 */
	LP5812_WriteRegister(0x035,0xFF)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 8005a5c:	21ff      	movs	r1, #255	@ 0xff
 8005a5e:	2035      	movs	r0, #53	@ 0x35
 8005a60:	f000 f8e8 	bl	8005c34 <LP5812_WriteRegister>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <LP5812_Init+0x92>
 8005a6a:	496e      	ldr	r1, [pc, #440]	@ (8005c24 <LP5812_Init+0x244>)
 8005a6c:	486e      	ldr	r0, [pc, #440]	@ (8005c28 <LP5812_Init+0x248>)
 8005a6e:	f012 fc03 	bl	8018278 <debug>
	LP5812_WriteRegister(0x038,0xFF)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 8005a72:	21ff      	movs	r1, #255	@ 0xff
 8005a74:	2038      	movs	r0, #56	@ 0x38
 8005a76:	f000 f8dd 	bl	8005c34 <LP5812_WriteRegister>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d003      	beq.n	8005a88 <LP5812_Init+0xa8>
 8005a80:	4968      	ldr	r1, [pc, #416]	@ (8005c24 <LP5812_Init+0x244>)
 8005a82:	4869      	ldr	r0, [pc, #420]	@ (8005c28 <LP5812_Init+0x248>)
 8005a84:	f012 fbf8 	bl	8018278 <debug>
	LP5812_WriteRegister(0x03B,0xFF)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 8005a88:	21ff      	movs	r1, #255	@ 0xff
 8005a8a:	203b      	movs	r0, #59	@ 0x3b
 8005a8c:	f000 f8d2 	bl	8005c34 <LP5812_WriteRegister>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <LP5812_Init+0xbe>
 8005a96:	4963      	ldr	r1, [pc, #396]	@ (8005c24 <LP5812_Init+0x244>)
 8005a98:	4863      	ldr	r0, [pc, #396]	@ (8005c28 <LP5812_Init+0x248>)
 8005a9a:	f012 fbed 	bl	8018278 <debug>
	LP5812_WriteRegister(0x03E,0xFF)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 8005a9e:	21ff      	movs	r1, #255	@ 0xff
 8005aa0:	203e      	movs	r0, #62	@ 0x3e
 8005aa2:	f000 f8c7 	bl	8005c34 <LP5812_WriteRegister>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d003      	beq.n	8005ab4 <LP5812_Init+0xd4>
 8005aac:	495d      	ldr	r1, [pc, #372]	@ (8005c24 <LP5812_Init+0x244>)
 8005aae:	485e      	ldr	r0, [pc, #376]	@ (8005c28 <LP5812_Init+0x248>)
 8005ab0:	f012 fbe2 	bl	8018278 <debug>
	/*	RED - BLUE And GREEN	*/
	LP5812_WriteRegister(0x034,0xCC)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 8005ab4:	21cc      	movs	r1, #204	@ 0xcc
 8005ab6:	2034      	movs	r0, #52	@ 0x34
 8005ab8:	f000 f8bc 	bl	8005c34 <LP5812_WriteRegister>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d003      	beq.n	8005aca <LP5812_Init+0xea>
 8005ac2:	4958      	ldr	r1, [pc, #352]	@ (8005c24 <LP5812_Init+0x244>)
 8005ac4:	4858      	ldr	r0, [pc, #352]	@ (8005c28 <LP5812_Init+0x248>)
 8005ac6:	f012 fbd7 	bl	8018278 <debug>
	LP5812_WriteRegister(0x036,0xCC)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 8005aca:	21cc      	movs	r1, #204	@ 0xcc
 8005acc:	2036      	movs	r0, #54	@ 0x36
 8005ace:	f000 f8b1 	bl	8005c34 <LP5812_WriteRegister>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d003      	beq.n	8005ae0 <LP5812_Init+0x100>
 8005ad8:	4952      	ldr	r1, [pc, #328]	@ (8005c24 <LP5812_Init+0x244>)
 8005ada:	4853      	ldr	r0, [pc, #332]	@ (8005c28 <LP5812_Init+0x248>)
 8005adc:	f012 fbcc 	bl	8018278 <debug>
	LP5812_WriteRegister(0x037,0xCC)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 8005ae0:	21cc      	movs	r1, #204	@ 0xcc
 8005ae2:	2037      	movs	r0, #55	@ 0x37
 8005ae4:	f000 f8a6 	bl	8005c34 <LP5812_WriteRegister>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <LP5812_Init+0x116>
 8005aee:	494d      	ldr	r1, [pc, #308]	@ (8005c24 <LP5812_Init+0x244>)
 8005af0:	484d      	ldr	r0, [pc, #308]	@ (8005c28 <LP5812_Init+0x248>)
 8005af2:	f012 fbc1 	bl	8018278 <debug>
	LP5812_WriteRegister(0x039,0xCC)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 8005af6:	21cc      	movs	r1, #204	@ 0xcc
 8005af8:	2039      	movs	r0, #57	@ 0x39
 8005afa:	f000 f89b 	bl	8005c34 <LP5812_WriteRegister>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d003      	beq.n	8005b0c <LP5812_Init+0x12c>
 8005b04:	4947      	ldr	r1, [pc, #284]	@ (8005c24 <LP5812_Init+0x244>)
 8005b06:	4848      	ldr	r0, [pc, #288]	@ (8005c28 <LP5812_Init+0x248>)
 8005b08:	f012 fbb6 	bl	8018278 <debug>
	LP5812_WriteRegister(0x03A,0xCC)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 8005b0c:	21cc      	movs	r1, #204	@ 0xcc
 8005b0e:	203a      	movs	r0, #58	@ 0x3a
 8005b10:	f000 f890 	bl	8005c34 <LP5812_WriteRegister>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <LP5812_Init+0x142>
 8005b1a:	4942      	ldr	r1, [pc, #264]	@ (8005c24 <LP5812_Init+0x244>)
 8005b1c:	4842      	ldr	r0, [pc, #264]	@ (8005c28 <LP5812_Init+0x248>)
 8005b1e:	f012 fbab 	bl	8018278 <debug>
	LP5812_WriteRegister(0x03C,0xCC)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 8005b22:	21cc      	movs	r1, #204	@ 0xcc
 8005b24:	203c      	movs	r0, #60	@ 0x3c
 8005b26:	f000 f885 	bl	8005c34 <LP5812_WriteRegister>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d003      	beq.n	8005b38 <LP5812_Init+0x158>
 8005b30:	493c      	ldr	r1, [pc, #240]	@ (8005c24 <LP5812_Init+0x244>)
 8005b32:	483d      	ldr	r0, [pc, #244]	@ (8005c28 <LP5812_Init+0x248>)
 8005b34:	f012 fba0 	bl	8018278 <debug>
	LP5812_WriteRegister(0x03D,0xCC)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 8005b38:	21cc      	movs	r1, #204	@ 0xcc
 8005b3a:	203d      	movs	r0, #61	@ 0x3d
 8005b3c:	f000 f87a 	bl	8005c34 <LP5812_WriteRegister>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d003      	beq.n	8005b4e <LP5812_Init+0x16e>
 8005b46:	4937      	ldr	r1, [pc, #220]	@ (8005c24 <LP5812_Init+0x244>)
 8005b48:	4837      	ldr	r0, [pc, #220]	@ (8005c28 <LP5812_Init+0x248>)
 8005b4a:	f012 fb95 	bl	8018278 <debug>
	LP5812_WriteRegister(0x03F,0xCC)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 8005b4e:	21cc      	movs	r1, #204	@ 0xcc
 8005b50:	203f      	movs	r0, #63	@ 0x3f
 8005b52:	f000 f86f 	bl	8005c34 <LP5812_WriteRegister>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d003      	beq.n	8005b64 <LP5812_Init+0x184>
 8005b5c:	4931      	ldr	r1, [pc, #196]	@ (8005c24 <LP5812_Init+0x244>)
 8005b5e:	4832      	ldr	r0, [pc, #200]	@ (8005c28 <LP5812_Init+0x248>)
 8005b60:	f012 fb8a 	bl	8018278 <debug>

	LED.L2.B=0x4A;
 8005b64:	4b31      	ldr	r3, [pc, #196]	@ (8005c2c <LP5812_Init+0x24c>)
 8005b66:	224a      	movs	r2, #74	@ 0x4a
 8005b68:	815a      	strh	r2, [r3, #10]
	LED.L1.B=0x44;
 8005b6a:	4b30      	ldr	r3, [pc, #192]	@ (8005c2c <LP5812_Init+0x24c>)
 8005b6c:	2244      	movs	r2, #68	@ 0x44
 8005b6e:	809a      	strh	r2, [r3, #4]
	LED.L4.B=0x4D;
 8005b70:	4b2e      	ldr	r3, [pc, #184]	@ (8005c2c <LP5812_Init+0x24c>)
 8005b72:	224d      	movs	r2, #77	@ 0x4d
 8005b74:	82da      	strh	r2, [r3, #22]
	LED.L3.B=0x47;
 8005b76:	4b2d      	ldr	r3, [pc, #180]	@ (8005c2c <LP5812_Init+0x24c>)
 8005b78:	2247      	movs	r2, #71	@ 0x47
 8005b7a:	821a      	strh	r2, [r3, #16]


	LED.L3.G=0x45;
 8005b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8005c2c <LP5812_Init+0x24c>)
 8005b7e:	2245      	movs	r2, #69	@ 0x45
 8005b80:	81da      	strh	r2, [r3, #14]
	LED.L2.G=0x48;
 8005b82:	4b2a      	ldr	r3, [pc, #168]	@ (8005c2c <LP5812_Init+0x24c>)
 8005b84:	2248      	movs	r2, #72	@ 0x48
 8005b86:	811a      	strh	r2, [r3, #8]
	LED.L1.G=0x4E;
 8005b88:	4b28      	ldr	r3, [pc, #160]	@ (8005c2c <LP5812_Init+0x24c>)
 8005b8a:	224e      	movs	r2, #78	@ 0x4e
 8005b8c:	805a      	strh	r2, [r3, #2]
	LED.L4.G=0x4B;
 8005b8e:	4b27      	ldr	r3, [pc, #156]	@ (8005c2c <LP5812_Init+0x24c>)
 8005b90:	224b      	movs	r2, #75	@ 0x4b
 8005b92:	829a      	strh	r2, [r3, #20]


	LED.L2.R=0x46;
 8005b94:	4b25      	ldr	r3, [pc, #148]	@ (8005c2c <LP5812_Init+0x24c>)
 8005b96:	2246      	movs	r2, #70	@ 0x46
 8005b98:	80da      	strh	r2, [r3, #6]
	LED.L4.R=0x49;
 8005b9a:	4b24      	ldr	r3, [pc, #144]	@ (8005c2c <LP5812_Init+0x24c>)
 8005b9c:	2249      	movs	r2, #73	@ 0x49
 8005b9e:	825a      	strh	r2, [r3, #18]
	LED.L3.R=0x4F;
 8005ba0:	4b22      	ldr	r3, [pc, #136]	@ (8005c2c <LP5812_Init+0x24c>)
 8005ba2:	224f      	movs	r2, #79	@ 0x4f
 8005ba4:	819a      	strh	r2, [r3, #12]
	LED.L1.R=0x4C;
 8005ba6:	4b21      	ldr	r3, [pc, #132]	@ (8005c2c <LP5812_Init+0x24c>)
 8005ba8:	224c      	movs	r2, #76	@ 0x4c
 8005baa:	801a      	strh	r2, [r3, #0]
    ConfigLED_t* LEDs[] = {&LED.L1, &LED.L2, &LED.L3, &LED.L4};
 8005bac:	4b20      	ldr	r3, [pc, #128]	@ (8005c30 <LP5812_Init+0x250>)
 8005bae:	463c      	mov	r4, r7
 8005bb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005bb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    size_t numLEDs = sizeof(LEDs) / sizeof(LEDs[0]);
 8005bb6:	2304      	movs	r3, #4
 8005bb8:	613b      	str	r3, [r7, #16]

    for (size_t j = 0; j < numLEDs; ++j) {
 8005bba:	2300      	movs	r3, #0
 8005bbc:	617b      	str	r3, [r7, #20]
 8005bbe:	e023      	b.n	8005c08 <LP5812_Init+0x228>
            LED_update(LEDs[j]->R, 0);
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	3318      	adds	r3, #24
 8005bc6:	443b      	add	r3, r7
 8005bc8:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8005bcc:	881b      	ldrh	r3, [r3, #0]
 8005bce:	2100      	movs	r1, #0
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f000 f85b 	bl	8005c8c <LED_update>
            LED_update(LEDs[j]->G, 0);
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	3318      	adds	r3, #24
 8005bdc:	443b      	add	r3, r7
 8005bde:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8005be2:	885b      	ldrh	r3, [r3, #2]
 8005be4:	2100      	movs	r1, #0
 8005be6:	4618      	mov	r0, r3
 8005be8:	f000 f850 	bl	8005c8c <LED_update>
            LED_update(LEDs[j]->B, 0);
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	3318      	adds	r3, #24
 8005bf2:	443b      	add	r3, r7
 8005bf4:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8005bf8:	889b      	ldrh	r3, [r3, #4]
 8005bfa:	2100      	movs	r1, #0
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f000 f845 	bl	8005c8c <LED_update>
    for (size_t j = 0; j < numLEDs; ++j) {
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	3301      	adds	r3, #1
 8005c06:	617b      	str	r3, [r7, #20]
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d3d7      	bcc.n	8005bc0 <LP5812_Init+0x1e0>

	/*//!\\Attention : L'adresse du composant est sur 2 bytes :
	 *				1er bytes est composé de R/W +  2dernier bytes du registres ciblé + Broadcast/Speci
	 *				2eme byte composé du reste du registre cible
	 */
}
 8005c10:	bf00      	nop
 8005c12:	bf00      	nop
 8005c14:	371c      	adds	r7, #28
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd90      	pop	{r4, r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	0801dfb4 	.word	0x0801dfb4
 8005c20:	0801dfc4 	.word	0x0801dfc4
 8005c24:	0801dfd8 	.word	0x0801dfd8
 8005c28:	0801dfe4 	.word	0x0801dfe4
 8005c2c:	20000f6c 	.word	0x20000f6c
 8005c30:	0801dff0 	.word	0x0801dff0

08005c34 <LP5812_WriteRegister>:

// Fonction pour écrire dans un registre 16 bits du LP5812
HAL_StatusTypeDef LP5812_WriteRegister(uint16_t reg, uint8_t data) {
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af02      	add	r7, sp, #8
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	460a      	mov	r2, r1
 8005c3e:	80fb      	strh	r3, [r7, #6]
 8005c40:	4613      	mov	r3, r2
 8005c42:	717b      	strb	r3, [r7, #5]
	uint8_t addr_byte1, addr_byte2;
	uint8_t buffer[3];

	// Configuration des Address Byte 1 et Address Byte 2
	addr_byte1 = (LP5812_I2C_BASE_ADDR << 3) | ((reg >> 8) & 0x03);  // 5 bits d'adresse et 2 bits supérieurs du registre
 8005c44:	88fb      	ldrh	r3, [r7, #6]
 8005c46:	0a1b      	lsrs	r3, r3, #8
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	b25b      	sxtb	r3, r3
 8005c4c:	f003 0303 	and.w	r3, r3, #3
 8005c50:	b25b      	sxtb	r3, r3
 8005c52:	f063 0327 	orn	r3, r3, #39	@ 0x27
 8005c56:	b25b      	sxtb	r3, r3
 8005c58:	73fb      	strb	r3, [r7, #15]
	addr_byte2 = (uint8_t)(reg & 0xFF);                               // 8 bits inférieurs du registre
 8005c5a:	88fb      	ldrh	r3, [r7, #6]
 8005c5c:	73bb      	strb	r3, [r7, #14]

	// Préparer les données à envoyer : Address Byte 2 et Data
	buffer[0] = addr_byte2;
 8005c5e:	7bbb      	ldrb	r3, [r7, #14]
 8005c60:	723b      	strb	r3, [r7, #8]
	buffer[1] = data;
 8005c62:	797b      	ldrb	r3, [r7, #5]
 8005c64:	727b      	strb	r3, [r7, #9]

	// Envoyer Address Byte 1, puis buffer
	return HAL_I2C_Master_Transmit(&hi2c3, addr_byte1, buffer, 2, HAL_MAX_DELAY);
 8005c66:	7bfb      	ldrb	r3, [r7, #15]
 8005c68:	b299      	uxth	r1, r3
 8005c6a:	f107 0208 	add.w	r2, r7, #8
 8005c6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005c72:	9300      	str	r3, [sp, #0]
 8005c74:	2302      	movs	r3, #2
 8005c76:	4804      	ldr	r0, [pc, #16]	@ (8005c88 <LP5812_WriteRegister+0x54>)
 8005c78:	f003 fe58 	bl	800992c <HAL_I2C_Master_Transmit>
 8005c7c:	4603      	mov	r3, r0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	200006f4 	.word	0x200006f4

08005c8c <LED_update>:
	HAL_I2C_Master_Transmit(&I2C_MAIN, addr_byte1_w, &addr_byte2, 1, HAL_MAX_DELAY) !=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in ReadREGISTER"):(void)0;
	return HAL_I2C_Master_Receive(&I2C_MAIN, (addr_byte1_r << 1) | 0x01, pData, 1, HAL_MAX_DELAY);
}


void LED_update(uint16_t regRGB, uint8_t RGB){
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	4603      	mov	r3, r0
 8005c94:	460a      	mov	r2, r1
 8005c96:	80fb      	strh	r3, [r7, #6]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	717b      	strb	r3, [r7, #5]
	LP5812_WriteRegister(regRGB,RGB);
 8005c9c:	797a      	ldrb	r2, [r7, #5]
 8005c9e:	88fb      	ldrh	r3, [r7, #6]
 8005ca0:	4611      	mov	r1, r2
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7ff ffc6 	bl	8005c34 <LP5812_WriteRegister>
}
 8005ca8:	bf00      	nop
 8005caa:	3708      	adds	r7, #8
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <chenillard_RGB>:


void chenillard_RGB(void) {
 8005cb0:	b590      	push	{r4, r7, lr}
 8005cb2:	b08d      	sub	sp, #52	@ 0x34
 8005cb4:	af00      	add	r7, sp, #0
    ConfigLED_t* LEDs[] = {&LED.L1, &LED.L2, &LED.L3, &LED.L4};
 8005cb6:	4b70      	ldr	r3, [pc, #448]	@ (8005e78 <chenillard_RGB+0x1c8>)
 8005cb8:	f107 0408 	add.w	r4, r7, #8
 8005cbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005cbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    size_t numLEDs = sizeof(LEDs) / sizeof(LEDs[0]);
 8005cc2:	2304      	movs	r3, #4
 8005cc4:	61bb      	str	r3, [r7, #24]

    uint8_t RGB_values[3] = {255, 0, 0}; // Rouge de départ (R, G, B)
 8005cc6:	4a6d      	ldr	r2, [pc, #436]	@ (8005e7c <chenillard_RGB+0x1cc>)
 8005cc8:	1d3b      	adds	r3, r7, #4
 8005cca:	6812      	ldr	r2, [r2, #0]
 8005ccc:	4611      	mov	r1, r2
 8005cce:	8019      	strh	r1, [r3, #0]
 8005cd0:	3302      	adds	r3, #2
 8005cd2:	0c12      	lsrs	r2, r2, #16
 8005cd4:	701a      	strb	r2, [r3, #0]
    size_t activeColor = 0;              // Couleur active (R=0, G=1, B=2)
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (size_t j = 0; j<3; j++) {
 8005cda:	2300      	movs	r3, #0
 8005cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cde:	e096      	b.n	8005e0e <chenillard_RGB+0x15e>
        for (size_t i = 0; i < numLEDs; ++i) {
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ce4:	e067      	b.n	8005db6 <chenillard_RGB+0x106>
            // Mise à jour de la LED active
            LED_update(LEDs[i]->R, (activeColor == 0) ? RGB_values[0] : 0); // Rouge
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	3330      	adds	r3, #48	@ 0x30
 8005cec:	443b      	add	r3, r7
 8005cee:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8005cf2:	881a      	ldrh	r2, [r3, #0]
 8005cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d101      	bne.n	8005cfe <chenillard_RGB+0x4e>
 8005cfa:	793b      	ldrb	r3, [r7, #4]
 8005cfc:	e000      	b.n	8005d00 <chenillard_RGB+0x50>
 8005cfe:	2300      	movs	r3, #0
 8005d00:	4619      	mov	r1, r3
 8005d02:	4610      	mov	r0, r2
 8005d04:	f7ff ffc2 	bl	8005c8c <LED_update>
            LED_update(LEDs[i]->G, (activeColor == 1) ? RGB_values[1] : 0); // Vert
 8005d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	3330      	adds	r3, #48	@ 0x30
 8005d0e:	443b      	add	r3, r7
 8005d10:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8005d14:	885a      	ldrh	r2, [r3, #2]
 8005d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d101      	bne.n	8005d20 <chenillard_RGB+0x70>
 8005d1c:	797b      	ldrb	r3, [r7, #5]
 8005d1e:	e000      	b.n	8005d22 <chenillard_RGB+0x72>
 8005d20:	2300      	movs	r3, #0
 8005d22:	4619      	mov	r1, r3
 8005d24:	4610      	mov	r0, r2
 8005d26:	f7ff ffb1 	bl	8005c8c <LED_update>
            LED_update(LEDs[i]->B, (activeColor == 2) ? RGB_values[2] : 0); // Bleu
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	3330      	adds	r3, #48	@ 0x30
 8005d30:	443b      	add	r3, r7
 8005d32:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8005d36:	889a      	ldrh	r2, [r3, #4]
 8005d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d101      	bne.n	8005d42 <chenillard_RGB+0x92>
 8005d3e:	79bb      	ldrb	r3, [r7, #6]
 8005d40:	e000      	b.n	8005d44 <chenillard_RGB+0x94>
 8005d42:	2300      	movs	r3, #0
 8005d44:	4619      	mov	r1, r3
 8005d46:	4610      	mov	r0, r2
 8005d48:	f7ff ffa0 	bl	8005c8c <LED_update>

            // Éteindre les autres LEDs
            for (size_t j = 0; j < numLEDs; ++j) {
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	623b      	str	r3, [r7, #32]
 8005d50:	e027      	b.n	8005da2 <chenillard_RGB+0xf2>
                if (j != i) {
 8005d52:	6a3a      	ldr	r2, [r7, #32]
 8005d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d020      	beq.n	8005d9c <chenillard_RGB+0xec>
                    LED_update(LEDs[j]->R, 0);
 8005d5a:	6a3b      	ldr	r3, [r7, #32]
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	3330      	adds	r3, #48	@ 0x30
 8005d60:	443b      	add	r3, r7
 8005d62:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8005d66:	881b      	ldrh	r3, [r3, #0]
 8005d68:	2100      	movs	r1, #0
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7ff ff8e 	bl	8005c8c <LED_update>
                    LED_update(LEDs[j]->G, 0);
 8005d70:	6a3b      	ldr	r3, [r7, #32]
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	3330      	adds	r3, #48	@ 0x30
 8005d76:	443b      	add	r3, r7
 8005d78:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8005d7c:	885b      	ldrh	r3, [r3, #2]
 8005d7e:	2100      	movs	r1, #0
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7ff ff83 	bl	8005c8c <LED_update>
                    LED_update(LEDs[j]->B, 0);
 8005d86:	6a3b      	ldr	r3, [r7, #32]
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	3330      	adds	r3, #48	@ 0x30
 8005d8c:	443b      	add	r3, r7
 8005d8e:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8005d92:	889b      	ldrh	r3, [r3, #4]
 8005d94:	2100      	movs	r1, #0
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7ff ff78 	bl	8005c8c <LED_update>
            for (size_t j = 0; j < numLEDs; ++j) {
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	623b      	str	r3, [r7, #32]
 8005da2:	6a3a      	ldr	r2, [r7, #32]
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d3d3      	bcc.n	8005d52 <chenillard_RGB+0xa2>
                }
            }
            // Pause pour voir le chenillard
            osDelay(200);
 8005daa:	20c8      	movs	r0, #200	@ 0xc8
 8005dac:	f00d fef8 	bl	8013ba0 <osDelay>
        for (size_t i = 0; i < numLEDs; ++i) {
 8005db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db2:	3301      	adds	r3, #1
 8005db4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005db6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d393      	bcc.n	8005ce6 <chenillard_RGB+0x36>
        }

        // Passer à la couleur suivante (rouge -> vert -> bleu)
        activeColor = (activeColor + 1) % 3;
 8005dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dc0:	1c5a      	adds	r2, r3, #1
 8005dc2:	4b2f      	ldr	r3, [pc, #188]	@ (8005e80 <chenillard_RGB+0x1d0>)
 8005dc4:	fba3 1302 	umull	r1, r3, r3, r2
 8005dc8:	0859      	lsrs	r1, r3, #1
 8005dca:	460b      	mov	r3, r1
 8005dcc:	005b      	lsls	r3, r3, #1
 8005dce:	440b      	add	r3, r1
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (activeColor == 0) {
 8005dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d106      	bne.n	8005de8 <chenillard_RGB+0x138>
            RGB_values[0] = 255; // Retour à rouge
 8005dda:	23ff      	movs	r3, #255	@ 0xff
 8005ddc:	713b      	strb	r3, [r7, #4]
            RGB_values[1] = 0;
 8005dde:	2300      	movs	r3, #0
 8005de0:	717b      	strb	r3, [r7, #5]
            RGB_values[2] = 0;
 8005de2:	2300      	movs	r3, #0
 8005de4:	71bb      	strb	r3, [r7, #6]
 8005de6:	e00f      	b.n	8005e08 <chenillard_RGB+0x158>
        } else if (activeColor == 1) {
 8005de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d106      	bne.n	8005dfc <chenillard_RGB+0x14c>
            RGB_values[0] = 0;
 8005dee:	2300      	movs	r3, #0
 8005df0:	713b      	strb	r3, [r7, #4]
            RGB_values[1] = 255; // Vert
 8005df2:	23ff      	movs	r3, #255	@ 0xff
 8005df4:	717b      	strb	r3, [r7, #5]
            RGB_values[2] = 0;
 8005df6:	2300      	movs	r3, #0
 8005df8:	71bb      	strb	r3, [r7, #6]
 8005dfa:	e005      	b.n	8005e08 <chenillard_RGB+0x158>
        } else {
            RGB_values[0] = 0;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	713b      	strb	r3, [r7, #4]
            RGB_values[1] = 0;
 8005e00:	2300      	movs	r3, #0
 8005e02:	717b      	strb	r3, [r7, #5]
            RGB_values[2] = 255; // Bleu
 8005e04:	23ff      	movs	r3, #255	@ 0xff
 8005e06:	71bb      	strb	r3, [r7, #6]
    for (size_t j = 0; j<3; j++) {
 8005e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	f67f af65 	bls.w	8005ce0 <chenillard_RGB+0x30>
        }
    }
    for (size_t j = 0; j < numLEDs; ++j) {
 8005e16:	2300      	movs	r3, #0
 8005e18:	61fb      	str	r3, [r7, #28]
 8005e1a:	e023      	b.n	8005e64 <chenillard_RGB+0x1b4>
            LED_update(LEDs[j]->R, 0);
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	3330      	adds	r3, #48	@ 0x30
 8005e22:	443b      	add	r3, r7
 8005e24:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8005e28:	881b      	ldrh	r3, [r3, #0]
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7ff ff2d 	bl	8005c8c <LED_update>
            LED_update(LEDs[j]->G, 0);
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	3330      	adds	r3, #48	@ 0x30
 8005e38:	443b      	add	r3, r7
 8005e3a:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8005e3e:	885b      	ldrh	r3, [r3, #2]
 8005e40:	2100      	movs	r1, #0
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7ff ff22 	bl	8005c8c <LED_update>
            LED_update(LEDs[j]->B, 0);
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	3330      	adds	r3, #48	@ 0x30
 8005e4e:	443b      	add	r3, r7
 8005e50:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8005e54:	889b      	ldrh	r3, [r3, #4]
 8005e56:	2100      	movs	r1, #0
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7ff ff17 	bl	8005c8c <LED_update>
    for (size_t j = 0; j < numLEDs; ++j) {
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	3301      	adds	r3, #1
 8005e62:	61fb      	str	r3, [r7, #28]
 8005e64:	69fa      	ldr	r2, [r7, #28]
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d3d7      	bcc.n	8005e1c <chenillard_RGB+0x16c>

    }
}
 8005e6c:	bf00      	nop
 8005e6e:	bf00      	nop
 8005e70:	3734      	adds	r7, #52	@ 0x34
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd90      	pop	{r4, r7, pc}
 8005e76:	bf00      	nop
 8005e78:	0801dff0 	.word	0x0801dff0
 8005e7c:	0801e020 	.word	0x0801e020
 8005e80:	aaaaaaab 	.word	0xaaaaaaab

08005e84 <TCA9555_init>:
		{"POLARITY INVERSION PORT 0",	0x04},
		{"POLARITY INVERSION PORT 1",	0x05},
		{"CONFIGURATION PORT 0",	0x06},
		{"CONFIGURATION PORT 1",	0x07},
};
void TCA9555_init(void){
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
	debug(INFORMATION,"TCA9555 - INIT");
 8005e8a:	492a      	ldr	r1, [pc, #168]	@ (8005f34 <TCA9555_init+0xb0>)
 8005e8c:	482a      	ldr	r0, [pc, #168]	@ (8005f38 <TCA9555_init+0xb4>)
 8005e8e:	f012 f9f3 	bl	8018278 <debug>

	TCA9555_WriteRegister(0x06, 0b11111111)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in WriteREGISTER"):(void)0;
 8005e92:	21ff      	movs	r1, #255	@ 0xff
 8005e94:	2006      	movs	r0, #6
 8005e96:	f000 f859 	bl	8005f4c <TCA9555_WriteRegister>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d003      	beq.n	8005ea8 <TCA9555_init+0x24>
 8005ea0:	4926      	ldr	r1, [pc, #152]	@ (8005f3c <TCA9555_init+0xb8>)
 8005ea2:	4827      	ldr	r0, [pc, #156]	@ (8005f40 <TCA9555_init+0xbc>)
 8005ea4:	f012 f9e8 	bl	8018278 <debug>
	TCA9555_WriteRegister(0x07, 0b11001111)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in WriteREGISTER"):(void)0;
 8005ea8:	21cf      	movs	r1, #207	@ 0xcf
 8005eaa:	2007      	movs	r0, #7
 8005eac:	f000 f84e 	bl	8005f4c <TCA9555_WriteRegister>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d003      	beq.n	8005ebe <TCA9555_init+0x3a>
 8005eb6:	4921      	ldr	r1, [pc, #132]	@ (8005f3c <TCA9555_init+0xb8>)
 8005eb8:	4821      	ldr	r0, [pc, #132]	@ (8005f40 <TCA9555_init+0xbc>)
 8005eba:	f012 f9dd 	bl	8018278 <debug>
	TCA9555_WriteRegister(0x05, 0b11001111)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in WriteREGISTER"):(void)0;
 8005ebe:	21cf      	movs	r1, #207	@ 0xcf
 8005ec0:	2005      	movs	r0, #5
 8005ec2:	f000 f843 	bl	8005f4c <TCA9555_WriteRegister>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d003      	beq.n	8005ed4 <TCA9555_init+0x50>
 8005ecc:	491b      	ldr	r1, [pc, #108]	@ (8005f3c <TCA9555_init+0xb8>)
 8005ece:	481c      	ldr	r0, [pc, #112]	@ (8005f40 <TCA9555_init+0xbc>)
 8005ed0:	f012 f9d2 	bl	8018278 <debug>

	uint8_t startReg = 0x00;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	70fb      	strb	r3, [r7, #3]
	uint8_t endReg = 0x07;
 8005ed8:	2307      	movs	r3, #7
 8005eda:	70bb      	strb	r3, [r7, #2]
	for (int i = 0; i <= endReg-startReg; i++) {
 8005edc:	2300      	movs	r3, #0
 8005ede:	607b      	str	r3, [r7, #4]
 8005ee0:	e01c      	b.n	8005f1c <TCA9555_init+0x98>
		uint8_t ret=0;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	707b      	strb	r3, [r7, #1]
		TCA9555_ReadRegister(GPIOExpRegister[i].reg, &ret,1);
 8005ee6:	4a17      	ldr	r2, [pc, #92]	@ (8005f44 <TCA9555_init+0xc0>)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	00db      	lsls	r3, r3, #3
 8005eec:	4413      	add	r3, r2
 8005eee:	791b      	ldrb	r3, [r3, #4]
 8005ef0:	1c79      	adds	r1, r7, #1
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f000 f847 	bl	8005f88 <TCA9555_ReadRegister>
		printf("READ - 0x%02X (%s): 0x%02X\r\n", GPIOExpRegister[i].reg,GPIOExpRegister[i].name, ret);
 8005efa:	4a12      	ldr	r2, [pc, #72]	@ (8005f44 <TCA9555_init+0xc0>)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	00db      	lsls	r3, r3, #3
 8005f00:	4413      	add	r3, r2
 8005f02:	791b      	ldrb	r3, [r3, #4]
 8005f04:	4619      	mov	r1, r3
 8005f06:	4a0f      	ldr	r2, [pc, #60]	@ (8005f44 <TCA9555_init+0xc0>)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8005f0e:	787b      	ldrb	r3, [r7, #1]
 8005f10:	480d      	ldr	r0, [pc, #52]	@ (8005f48 <TCA9555_init+0xc4>)
 8005f12:	f014 f88b 	bl	801a02c <iprintf>
	for (int i = 0; i <= endReg-startReg; i++) {
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	607b      	str	r3, [r7, #4]
 8005f1c:	78ba      	ldrb	r2, [r7, #2]
 8005f1e:	78fb      	ldrb	r3, [r7, #3]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	dddc      	ble.n	8005ee2 <TCA9555_init+0x5e>
	}
}
 8005f28:	bf00      	nop
 8005f2a:	bf00      	nop
 8005f2c:	3708      	adds	r7, #8
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	0801e0cc 	.word	0x0801e0cc
 8005f38:	0801e0dc 	.word	0x0801e0dc
 8005f3c:	0801e0f0 	.word	0x0801e0f0
 8005f40:	0801e110 	.word	0x0801e110
 8005f44:	200000f8 	.word	0x200000f8
 8005f48:	0801e11c 	.word	0x0801e11c

08005f4c <TCA9555_WriteRegister>:

HAL_StatusTypeDef TCA9555_WriteRegister(uint8_t reg, uint8_t data){
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b086      	sub	sp, #24
 8005f50:	af02      	add	r7, sp, #8
 8005f52:	4603      	mov	r3, r0
 8005f54:	460a      	mov	r2, r1
 8005f56:	71fb      	strb	r3, [r7, #7]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer[2]={reg,data};
 8005f5c:	79fb      	ldrb	r3, [r7, #7]
 8005f5e:	733b      	strb	r3, [r7, #12]
 8005f60:	79bb      	ldrb	r3, [r7, #6]
 8005f62:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(&I2C_MAIN, (uint16_t)(TCA9555_ADRR<<1), buffer, 2 ,HAL_MAX_DELAY);
 8005f64:	f107 020c 	add.w	r2, r7, #12
 8005f68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f6c:	9300      	str	r3, [sp, #0]
 8005f6e:	2302      	movs	r3, #2
 8005f70:	2140      	movs	r1, #64	@ 0x40
 8005f72:	4804      	ldr	r0, [pc, #16]	@ (8005f84 <TCA9555_WriteRegister+0x38>)
 8005f74:	f003 fcda 	bl	800992c <HAL_I2C_Master_Transmit>
 8005f78:	4603      	mov	r3, r0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	200006f4 	.word	0x200006f4

08005f88 <TCA9555_ReadRegister>:
HAL_StatusTypeDef TCA9555_ReadRegister(uint8_t reg, uint8_t* recptData, uint8_t lenData){
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af02      	add	r7, sp, #8
 8005f8e:	4603      	mov	r3, r0
 8005f90:	6039      	str	r1, [r7, #0]
 8005f92:	71fb      	strb	r3, [r7, #7]
 8005f94:	4613      	mov	r3, r2
 8005f96:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&I2C_MAIN, (uint16_t)(TCA9555_ADRR<<1), &reg, 1 ,HAL_MAX_DELAY) !=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in ReadREGISTER"):(void)0;
 8005f98:	1dfa      	adds	r2, r7, #7
 8005f9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	2140      	movs	r1, #64	@ 0x40
 8005fa4:	480c      	ldr	r0, [pc, #48]	@ (8005fd8 <TCA9555_ReadRegister+0x50>)
 8005fa6:	f003 fcc1 	bl	800992c <HAL_I2C_Master_Transmit>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d003      	beq.n	8005fb8 <TCA9555_ReadRegister+0x30>
 8005fb0:	490a      	ldr	r1, [pc, #40]	@ (8005fdc <TCA9555_ReadRegister+0x54>)
 8005fb2:	480b      	ldr	r0, [pc, #44]	@ (8005fe0 <TCA9555_ReadRegister+0x58>)
 8005fb4:	f012 f960 	bl	8018278 <debug>
	return HAL_I2C_Master_Receive(&I2C_MAIN, (uint16_t)(TCA9555_ADRR<<1), recptData, lenData ,HAL_MAX_DELAY);
 8005fb8:	79bb      	ldrb	r3, [r7, #6]
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005fc0:	9200      	str	r2, [sp, #0]
 8005fc2:	683a      	ldr	r2, [r7, #0]
 8005fc4:	2140      	movs	r1, #64	@ 0x40
 8005fc6:	4804      	ldr	r0, [pc, #16]	@ (8005fd8 <TCA9555_ReadRegister+0x50>)
 8005fc8:	f003 fdc8 	bl	8009b5c <HAL_I2C_Master_Receive>
 8005fcc:	4603      	mov	r3, r0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	200006f4 	.word	0x200006f4
 8005fdc:	0801e13c 	.word	0x0801e13c
 8005fe0:	0801e110 	.word	0x0801e110

08005fe4 <ZXB5210_init>:
int isSpeedInit = 0;
int ANGLE_GLOBAL = -1;
extern int workMode;
extern int isSpeedActualisationIsBlocked;

void ZXB5210_init(void){
 8005fe4:	b590      	push	{r4, r7, lr}
 8005fe6:	b099      	sub	sp, #100	@ 0x64
 8005fe8:	af00      	add	r7, sp, #0
	debug(INFORMATION,"ZXB5210 - INIT");
 8005fea:	4946      	ldr	r1, [pc, #280]	@ (8006104 <ZXB5210_init+0x120>)
 8005fec:	4846      	ldr	r0, [pc, #280]	@ (8006108 <ZXB5210_init+0x124>)
 8005fee:	f012 f943 	bl	8018278 <debug>
	MDriver1_FWD_Config = (MDriver_Config_t){.Tim_Channel = TIM_CHANNEL_3,.CCR_Channel = &htim2.Instance->CCR3,.pulseGoal = 0, .offset=0}; //28 Surement inutlie si l'asservissement en vitesse fonctionne un jour
 8005ff2:	4b46      	ldr	r3, [pc, #280]	@ (800610c <ZXB5210_init+0x128>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	333c      	adds	r3, #60	@ 0x3c
 8005ff8:	4a45      	ldr	r2, [pc, #276]	@ (8006110 <ZXB5210_init+0x12c>)
 8005ffa:	2108      	movs	r1, #8
 8005ffc:	6011      	str	r1, [r2, #0]
 8005ffe:	4a44      	ldr	r2, [pc, #272]	@ (8006110 <ZXB5210_init+0x12c>)
 8006000:	6053      	str	r3, [r2, #4]
 8006002:	4b43      	ldr	r3, [pc, #268]	@ (8006110 <ZXB5210_init+0x12c>)
 8006004:	2200      	movs	r2, #0
 8006006:	609a      	str	r2, [r3, #8]
 8006008:	4b41      	ldr	r3, [pc, #260]	@ (8006110 <ZXB5210_init+0x12c>)
 800600a:	2200      	movs	r2, #0
 800600c:	60da      	str	r2, [r3, #12]
	MDriver1_REV_Config = (MDriver_Config_t){.Tim_Channel = TIM_CHANNEL_4,.CCR_Channel = &htim2.Instance->CCR4,.pulseGoal = 0, .offset=0}; //36
 800600e:	4b3f      	ldr	r3, [pc, #252]	@ (800610c <ZXB5210_init+0x128>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	3340      	adds	r3, #64	@ 0x40
 8006014:	4a3f      	ldr	r2, [pc, #252]	@ (8006114 <ZXB5210_init+0x130>)
 8006016:	210c      	movs	r1, #12
 8006018:	6011      	str	r1, [r2, #0]
 800601a:	4a3e      	ldr	r2, [pc, #248]	@ (8006114 <ZXB5210_init+0x130>)
 800601c:	6053      	str	r3, [r2, #4]
 800601e:	4b3d      	ldr	r3, [pc, #244]	@ (8006114 <ZXB5210_init+0x130>)
 8006020:	2200      	movs	r2, #0
 8006022:	609a      	str	r2, [r3, #8]
 8006024:	4b3b      	ldr	r3, [pc, #236]	@ (8006114 <ZXB5210_init+0x130>)
 8006026:	2200      	movs	r2, #0
 8006028:	60da      	str	r2, [r3, #12]
	MDriver2_FWD_Config = (MDriver_Config_t){.Tim_Channel = TIM_CHANNEL_3,.CCR_Channel = &htim3.Instance->CCR3,.pulseGoal = 0, .offset=0};
 800602a:	4b3b      	ldr	r3, [pc, #236]	@ (8006118 <ZXB5210_init+0x134>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	333c      	adds	r3, #60	@ 0x3c
 8006030:	4a3a      	ldr	r2, [pc, #232]	@ (800611c <ZXB5210_init+0x138>)
 8006032:	2108      	movs	r1, #8
 8006034:	6011      	str	r1, [r2, #0]
 8006036:	4a39      	ldr	r2, [pc, #228]	@ (800611c <ZXB5210_init+0x138>)
 8006038:	6053      	str	r3, [r2, #4]
 800603a:	4b38      	ldr	r3, [pc, #224]	@ (800611c <ZXB5210_init+0x138>)
 800603c:	2200      	movs	r2, #0
 800603e:	609a      	str	r2, [r3, #8]
 8006040:	4b36      	ldr	r3, [pc, #216]	@ (800611c <ZXB5210_init+0x138>)
 8006042:	2200      	movs	r2, #0
 8006044:	60da      	str	r2, [r3, #12]
	MDriver2_REV_Config = (MDriver_Config_t){.Tim_Channel = TIM_CHANNEL_4,.CCR_Channel = &htim3.Instance->CCR4,.pulseGoal = 0, .offset=0};
 8006046:	4b34      	ldr	r3, [pc, #208]	@ (8006118 <ZXB5210_init+0x134>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	3340      	adds	r3, #64	@ 0x40
 800604c:	4a34      	ldr	r2, [pc, #208]	@ (8006120 <ZXB5210_init+0x13c>)
 800604e:	210c      	movs	r1, #12
 8006050:	6011      	str	r1, [r2, #0]
 8006052:	4a33      	ldr	r2, [pc, #204]	@ (8006120 <ZXB5210_init+0x13c>)
 8006054:	6053      	str	r3, [r2, #4]
 8006056:	4b32      	ldr	r3, [pc, #200]	@ (8006120 <ZXB5210_init+0x13c>)
 8006058:	2200      	movs	r2, #0
 800605a:	609a      	str	r2, [r3, #8]
 800605c:	4b30      	ldr	r3, [pc, #192]	@ (8006120 <ZXB5210_init+0x13c>)
 800605e:	2200      	movs	r2, #0
 8006060:	60da      	str	r2, [r3, #12]

	MDriver1 = (MDriver_t){
 8006062:	4a30      	ldr	r2, [pc, #192]	@ (8006124 <ZXB5210_init+0x140>)
 8006064:	4b30      	ldr	r3, [pc, #192]	@ (8006128 <ZXB5210_init+0x144>)
 8006066:	4614      	mov	r4, r2
 8006068:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800606a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.htim = &htim2,
				.FWD = &MDriver1_FWD_Config,
				.REV = &MDriver1_REV_Config,
				.ACTIVE = NULL,
	};
	MDriver2 = (MDriver_t){
 800606e:	4a2f      	ldr	r2, [pc, #188]	@ (800612c <ZXB5210_init+0x148>)
 8006070:	4b2f      	ldr	r3, [pc, #188]	@ (8006130 <ZXB5210_init+0x14c>)
 8006072:	4614      	mov	r4, r2
 8006074:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006076:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.htim = &htim3,
				.FWD = &MDriver2_FWD_Config,
				.REV = &MDriver2_REV_Config,
				.ACTIVE = NULL,
	};
	HAL_TIM_PWM_Start(MDriver1.htim,MDriver1.FWD->Tim_Channel) == HAL_OK ? debug(START,"DRIVER1 - PWM CHANNEL FWD"):(void)0;
 800607a:	4b2a      	ldr	r3, [pc, #168]	@ (8006124 <ZXB5210_init+0x140>)
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	4b29      	ldr	r3, [pc, #164]	@ (8006124 <ZXB5210_init+0x140>)
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4619      	mov	r1, r3
 8006086:	4610      	mov	r0, r2
 8006088:	f005 fb56 	bl	800b738 <HAL_TIM_PWM_Start>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d103      	bne.n	800609a <ZXB5210_init+0xb6>
 8006092:	4928      	ldr	r1, [pc, #160]	@ (8006134 <ZXB5210_init+0x150>)
 8006094:	4828      	ldr	r0, [pc, #160]	@ (8006138 <ZXB5210_init+0x154>)
 8006096:	f012 f8ef 	bl	8018278 <debug>
	HAL_TIM_PWM_Start(MDriver1.htim,MDriver1.REV->Tim_Channel) == HAL_OK ? debug(START,"DRIVER1 - PWM CHANNEL REV"):(void)0;
 800609a:	4b22      	ldr	r3, [pc, #136]	@ (8006124 <ZXB5210_init+0x140>)
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	4b21      	ldr	r3, [pc, #132]	@ (8006124 <ZXB5210_init+0x140>)
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4619      	mov	r1, r3
 80060a6:	4610      	mov	r0, r2
 80060a8:	f005 fb46 	bl	800b738 <HAL_TIM_PWM_Start>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d103      	bne.n	80060ba <ZXB5210_init+0xd6>
 80060b2:	4922      	ldr	r1, [pc, #136]	@ (800613c <ZXB5210_init+0x158>)
 80060b4:	4820      	ldr	r0, [pc, #128]	@ (8006138 <ZXB5210_init+0x154>)
 80060b6:	f012 f8df 	bl	8018278 <debug>

	HAL_TIM_PWM_Start(MDriver2.htim,MDriver2.FWD->Tim_Channel) == HAL_OK ? debug(START,"DRIVER2 - PWM CHANNEL FWD"):(void)0;
 80060ba:	4b1c      	ldr	r3, [pc, #112]	@ (800612c <ZXB5210_init+0x148>)
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	4b1b      	ldr	r3, [pc, #108]	@ (800612c <ZXB5210_init+0x148>)
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4619      	mov	r1, r3
 80060c6:	4610      	mov	r0, r2
 80060c8:	f005 fb36 	bl	800b738 <HAL_TIM_PWM_Start>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d103      	bne.n	80060da <ZXB5210_init+0xf6>
 80060d2:	491b      	ldr	r1, [pc, #108]	@ (8006140 <ZXB5210_init+0x15c>)
 80060d4:	4818      	ldr	r0, [pc, #96]	@ (8006138 <ZXB5210_init+0x154>)
 80060d6:	f012 f8cf 	bl	8018278 <debug>
	HAL_TIM_PWM_Start(MDriver2.htim,MDriver2.REV->Tim_Channel) == HAL_OK ? debug(START,"DRIVER2 - PWM CHANNEL REV"):(void)0;
 80060da:	4b14      	ldr	r3, [pc, #80]	@ (800612c <ZXB5210_init+0x148>)
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	4b13      	ldr	r3, [pc, #76]	@ (800612c <ZXB5210_init+0x148>)
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4619      	mov	r1, r3
 80060e6:	4610      	mov	r0, r2
 80060e8:	f005 fb26 	bl	800b738 <HAL_TIM_PWM_Start>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d103      	bne.n	80060fa <ZXB5210_init+0x116>
 80060f2:	4914      	ldr	r1, [pc, #80]	@ (8006144 <ZXB5210_init+0x160>)
 80060f4:	4810      	ldr	r0, [pc, #64]	@ (8006138 <ZXB5210_init+0x154>)
 80060f6:	f012 f8bf 	bl	8018278 <debug>

}
 80060fa:	bf00      	nop
 80060fc:	3764      	adds	r7, #100	@ 0x64
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd90      	pop	{r4, r7, pc}
 8006102:	bf00      	nop
 8006104:	0801e15c 	.word	0x0801e15c
 8006108:	0801e16c 	.word	0x0801e16c
 800610c:	20000850 	.word	0x20000850
 8006110:	20000fa4 	.word	0x20000fa4
 8006114:	20000fb4 	.word	0x20000fb4
 8006118:	2000091c 	.word	0x2000091c
 800611c:	20000fc4 	.word	0x20000fc4
 8006120:	20000fd4 	.word	0x20000fd4
 8006124:	20000f84 	.word	0x20000f84
 8006128:	0801e1fc 	.word	0x0801e1fc
 800612c:	20000f94 	.word	0x20000f94
 8006130:	0801e20c 	.word	0x0801e20c
 8006134:	0801e180 	.word	0x0801e180
 8006138:	0801e19c 	.word	0x0801e19c
 800613c:	0801e1a8 	.word	0x0801e1a8
 8006140:	0801e1c4 	.word	0x0801e1c4
 8006144:	0801e1e0 	.word	0x0801e1e0

08006148 <ZXB5210_deinit>:
// Tout les channels ne sont pas cabler pareil

void ZXB5210_deinit(void){
 8006148:	b580      	push	{r7, lr}
 800614a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(MDriver1.htim,MDriver1.FWD->Tim_Channel) == HAL_OK ? debug(STOP,"DRIVER1 - PWM CHANNEL FWD"):(void)0;
 800614c:	4b20      	ldr	r3, [pc, #128]	@ (80061d0 <ZXB5210_deinit+0x88>)
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	4b1f      	ldr	r3, [pc, #124]	@ (80061d0 <ZXB5210_deinit+0x88>)
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4619      	mov	r1, r3
 8006158:	4610      	mov	r0, r2
 800615a:	f005 fbed 	bl	800b938 <HAL_TIM_PWM_Stop>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d103      	bne.n	800616c <ZXB5210_deinit+0x24>
 8006164:	491b      	ldr	r1, [pc, #108]	@ (80061d4 <ZXB5210_deinit+0x8c>)
 8006166:	481c      	ldr	r0, [pc, #112]	@ (80061d8 <ZXB5210_deinit+0x90>)
 8006168:	f012 f886 	bl	8018278 <debug>
	HAL_TIM_PWM_Stop(MDriver1.htim,MDriver1.REV->Tim_Channel) == HAL_OK ? debug(STOP,"DRIVER1 - PWM CHANNEL REV"):(void)0;
 800616c:	4b18      	ldr	r3, [pc, #96]	@ (80061d0 <ZXB5210_deinit+0x88>)
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	4b17      	ldr	r3, [pc, #92]	@ (80061d0 <ZXB5210_deinit+0x88>)
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4619      	mov	r1, r3
 8006178:	4610      	mov	r0, r2
 800617a:	f005 fbdd 	bl	800b938 <HAL_TIM_PWM_Stop>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d103      	bne.n	800618c <ZXB5210_deinit+0x44>
 8006184:	4915      	ldr	r1, [pc, #84]	@ (80061dc <ZXB5210_deinit+0x94>)
 8006186:	4814      	ldr	r0, [pc, #80]	@ (80061d8 <ZXB5210_deinit+0x90>)
 8006188:	f012 f876 	bl	8018278 <debug>

	HAL_TIM_PWM_Stop(MDriver2.htim,MDriver2.FWD->Tim_Channel) == HAL_OK ? debug(STOP,"DRIVER2 - PWM CHANNEL FWD"):(void)0;
 800618c:	4b14      	ldr	r3, [pc, #80]	@ (80061e0 <ZXB5210_deinit+0x98>)
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	4b13      	ldr	r3, [pc, #76]	@ (80061e0 <ZXB5210_deinit+0x98>)
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4619      	mov	r1, r3
 8006198:	4610      	mov	r0, r2
 800619a:	f005 fbcd 	bl	800b938 <HAL_TIM_PWM_Stop>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d103      	bne.n	80061ac <ZXB5210_deinit+0x64>
 80061a4:	490f      	ldr	r1, [pc, #60]	@ (80061e4 <ZXB5210_deinit+0x9c>)
 80061a6:	480c      	ldr	r0, [pc, #48]	@ (80061d8 <ZXB5210_deinit+0x90>)
 80061a8:	f012 f866 	bl	8018278 <debug>
	HAL_TIM_PWM_Stop(MDriver2.htim,MDriver2.REV->Tim_Channel) == HAL_OK ? debug(STOP,"DRIVER2 - PWM CHANNEL REV"):(void)0;
 80061ac:	4b0c      	ldr	r3, [pc, #48]	@ (80061e0 <ZXB5210_deinit+0x98>)
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	4b0b      	ldr	r3, [pc, #44]	@ (80061e0 <ZXB5210_deinit+0x98>)
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4619      	mov	r1, r3
 80061b8:	4610      	mov	r0, r2
 80061ba:	f005 fbbd 	bl	800b938 <HAL_TIM_PWM_Stop>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d103      	bne.n	80061cc <ZXB5210_deinit+0x84>
 80061c4:	4908      	ldr	r1, [pc, #32]	@ (80061e8 <ZXB5210_deinit+0xa0>)
 80061c6:	4804      	ldr	r0, [pc, #16]	@ (80061d8 <ZXB5210_deinit+0x90>)
 80061c8:	f012 f856 	bl	8018278 <debug>
}
 80061cc:	bf00      	nop
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	20000f84 	.word	0x20000f84
 80061d4:	0801e180 	.word	0x0801e180
 80061d8:	0801e21c 	.word	0x0801e21c
 80061dc:	0801e1a8 	.word	0x0801e1a8
 80061e0:	20000f94 	.word	0x20000f94
 80061e4:	0801e1c4 	.word	0x0801e1c4
 80061e8:	0801e1e0 	.word	0x0801e1e0

080061ec <ZXB5210_speed_FWD>:

void ZXB5210_speed_FWD(MDriver_t* MDriver ,uint8_t alpha){
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	460b      	mov	r3, r1
 80061f6:	70fb      	strb	r3, [r7, #3]
	MDriver->FWD->pulseGoal=(MDriver->htim->Instance->ARR * alpha)/100;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006200:	78fa      	ldrb	r2, [r7, #3]
 8006202:	fb03 f202 	mul.w	r2, r3, r2
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	4927      	ldr	r1, [pc, #156]	@ (80062a8 <ZXB5210_speed_FWD+0xbc>)
 800620c:	fba1 1202 	umull	r1, r2, r1, r2
 8006210:	0952      	lsrs	r2, r2, #5
 8006212:	609a      	str	r2, [r3, #8]
	MDriver->ACTIVE = MDriver->FWD;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	60da      	str	r2, [r3, #12]

	__HAL_TIM_SET_COMPARE(MDriver->htim,MDriver->REV->Tim_Channel,0);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d105      	bne.n	8006232 <ZXB5210_speed_FWD+0x46>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2200      	movs	r2, #0
 800622e:	635a      	str	r2, [r3, #52]	@ 0x34
 8006230:	e030      	b.n	8006294 <ZXB5210_speed_FWD+0xa8>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2b04      	cmp	r3, #4
 800623a:	d105      	bne.n	8006248 <ZXB5210_speed_FWD+0x5c>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	2300      	movs	r3, #0
 8006244:	6393      	str	r3, [r2, #56]	@ 0x38
 8006246:	e025      	b.n	8006294 <ZXB5210_speed_FWD+0xa8>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2b08      	cmp	r3, #8
 8006250:	d105      	bne.n	800625e <ZXB5210_speed_FWD+0x72>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	2300      	movs	r3, #0
 800625a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800625c:	e01a      	b.n	8006294 <ZXB5210_speed_FWD+0xa8>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2b0c      	cmp	r3, #12
 8006266:	d105      	bne.n	8006274 <ZXB5210_speed_FWD+0x88>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	2300      	movs	r3, #0
 8006270:	6413      	str	r3, [r2, #64]	@ 0x40
 8006272:	e00f      	b.n	8006294 <ZXB5210_speed_FWD+0xa8>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2b10      	cmp	r3, #16
 800627c:	d105      	bne.n	800628a <ZXB5210_speed_FWD+0x9e>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	2300      	movs	r3, #0
 8006286:	6493      	str	r3, [r2, #72]	@ 0x48
 8006288:	e004      	b.n	8006294 <ZXB5210_speed_FWD+0xa8>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	2300      	movs	r3, #0
 8006292:	64d3      	str	r3, [r2, #76]	@ 0x4c
	MDriver->REV->pulseGoal = 0;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	2200      	movs	r2, #0
 800629a:	609a      	str	r2, [r3, #8]
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr
 80062a8:	51eb851f 	.word	0x51eb851f

080062ac <ZXB5210_speed_REV>:
void ZXB5210_speed_REV(MDriver_t *MDriver ,uint8_t alpha)
{	//ZXB5210_calc_speed(MDriver->REV,(MDriver->htim->Instance->ARR * alpha)/100);
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	460b      	mov	r3, r1
 80062b6:	70fb      	strb	r3, [r7, #3]
	MDriver->REV->pulseGoal=(MDriver->htim->Instance->ARR * alpha)/100;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c0:	78fa      	ldrb	r2, [r7, #3]
 80062c2:	fb03 f202 	mul.w	r2, r3, r2
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	4927      	ldr	r1, [pc, #156]	@ (8006368 <ZXB5210_speed_REV+0xbc>)
 80062cc:	fba1 1202 	umull	r1, r2, r1, r2
 80062d0:	0952      	lsrs	r2, r2, #5
 80062d2:	609a      	str	r2, [r3, #8]
	MDriver->ACTIVE = MDriver->REV;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	689a      	ldr	r2, [r3, #8]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	60da      	str	r2, [r3, #12]

	__HAL_TIM_SET_COMPARE(MDriver->htim,MDriver->FWD->Tim_Channel,0);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d105      	bne.n	80062f2 <ZXB5210_speed_REV+0x46>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2200      	movs	r2, #0
 80062ee:	635a      	str	r2, [r3, #52]	@ 0x34
 80062f0:	e030      	b.n	8006354 <ZXB5210_speed_REV+0xa8>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2b04      	cmp	r3, #4
 80062fa:	d105      	bne.n	8006308 <ZXB5210_speed_REV+0x5c>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	2300      	movs	r3, #0
 8006304:	6393      	str	r3, [r2, #56]	@ 0x38
 8006306:	e025      	b.n	8006354 <ZXB5210_speed_REV+0xa8>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2b08      	cmp	r3, #8
 8006310:	d105      	bne.n	800631e <ZXB5210_speed_REV+0x72>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	2300      	movs	r3, #0
 800631a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800631c:	e01a      	b.n	8006354 <ZXB5210_speed_REV+0xa8>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2b0c      	cmp	r3, #12
 8006326:	d105      	bne.n	8006334 <ZXB5210_speed_REV+0x88>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	2300      	movs	r3, #0
 8006330:	6413      	str	r3, [r2, #64]	@ 0x40
 8006332:	e00f      	b.n	8006354 <ZXB5210_speed_REV+0xa8>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2b10      	cmp	r3, #16
 800633c:	d105      	bne.n	800634a <ZXB5210_speed_REV+0x9e>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	2300      	movs	r3, #0
 8006346:	6493      	str	r3, [r2, #72]	@ 0x48
 8006348:	e004      	b.n	8006354 <ZXB5210_speed_REV+0xa8>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	2300      	movs	r3, #0
 8006352:	64d3      	str	r3, [r2, #76]	@ 0x4c
	MDriver->FWD->pulseGoal = 0;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	609a      	str	r2, [r3, #8]
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr
 8006368:	51eb851f 	.word	0x51eb851f

0800636c <IT_ZXB5210_speed_UPDATE>:

void IT_ZXB5210_speed_UPDATE(MDriver_t* MDriver, MDriver_Config_t* SENS){
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
	uint32_t pulse = *(SENS->CCR_Channel);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	60fb      	str	r3, [r7, #12]
	pulse < SENS->pulseGoal ? // Si le pulse est trop petit
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	689b      	ldr	r3, [r3, #8]
			pulse ++ :
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	429a      	cmp	r2, r3
 8006386:	d203      	bcs.n	8006390 <IT_ZXB5210_speed_UPDATE+0x24>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	3301      	adds	r3, #1
 800638c:	60fb      	str	r3, [r7, #12]
 800638e:	e002      	b.n	8006396 <IT_ZXB5210_speed_UPDATE+0x2a>
			pulse --;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	3b01      	subs	r3, #1
 8006394:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(MDriver->htim,SENS->Tim_Channel,pulse);
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d105      	bne.n	80063aa <IT_ZXB5210_speed_UPDATE+0x3e>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	635a      	str	r2, [r3, #52]	@ 0x34
 80063a8:	e02c      	b.n	8006404 <IT_ZXB5210_speed_UPDATE+0x98>
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2b04      	cmp	r3, #4
 80063b0:	d105      	bne.n	80063be <IT_ZXB5210_speed_UPDATE+0x52>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6393      	str	r3, [r2, #56]	@ 0x38
 80063bc:	e022      	b.n	8006404 <IT_ZXB5210_speed_UPDATE+0x98>
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2b08      	cmp	r3, #8
 80063c4:	d105      	bne.n	80063d2 <IT_ZXB5210_speed_UPDATE+0x66>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80063d0:	e018      	b.n	8006404 <IT_ZXB5210_speed_UPDATE+0x98>
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b0c      	cmp	r3, #12
 80063d8:	d105      	bne.n	80063e6 <IT_ZXB5210_speed_UPDATE+0x7a>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80063e4:	e00e      	b.n	8006404 <IT_ZXB5210_speed_UPDATE+0x98>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2b10      	cmp	r3, #16
 80063ec:	d105      	bne.n	80063fa <IT_ZXB5210_speed_UPDATE+0x8e>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6493      	str	r3, [r2, #72]	@ 0x48
 80063f8:	e004      	b.n	8006404 <IT_ZXB5210_speed_UPDATE+0x98>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	64d3      	str	r3, [r2, #76]	@ 0x4c
	if (SENS->pulseGoal == pulse){ // Si on a atteint l'objectif de pulse
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	429a      	cmp	r2, r3
 800640c:	d102      	bne.n	8006414 <IT_ZXB5210_speed_UPDATE+0xa8>
		MDriver->ACTIVE = NULL;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	60da      	str	r2, [r3, #12]
	}
}
 8006414:	bf00      	nop
 8006416:	3714      	adds	r7, #20
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <ZXB5210_angle>:
void ZXB5210_calc_speed(MDriver_Config_t* MDriver_Config,uint32_t initial_Pulse){
	uint32_t pulseActu = initial_Pulse - MDriver_Config->offset;
	MDriver_Config->pulseGoal =  pulseActu >= 100 ? pulseActu : 100;
}

void ZXB5210_angle(int angle){
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
	uint8_t alpha_1;
	uint8_t alpha_2;
	if(angle <0){return;}
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	f2c0 8149 	blt.w	80066c2 <ZXB5210_angle+0x2a2>
	if(!workMode){
 8006430:	4ba9      	ldr	r3, [pc, #676]	@ (80066d8 <ZXB5210_angle+0x2b8>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d11c      	bne.n	8006472 <ZXB5210_angle+0x52>
		angle = ((angle + 180) % 360 + 360) % 360;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	33b4      	adds	r3, #180	@ 0xb4
 800643c:	4aa7      	ldr	r2, [pc, #668]	@ (80066dc <ZXB5210_angle+0x2bc>)
 800643e:	fb82 1203 	smull	r1, r2, r2, r3
 8006442:	441a      	add	r2, r3
 8006444:	1211      	asrs	r1, r2, #8
 8006446:	17da      	asrs	r2, r3, #31
 8006448:	1a8a      	subs	r2, r1, r2
 800644a:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 800644e:	fb01 f202 	mul.w	r2, r1, r2
 8006452:	1a9a      	subs	r2, r3, r2
 8006454:	f502 73b4 	add.w	r3, r2, #360	@ 0x168
 8006458:	4aa0      	ldr	r2, [pc, #640]	@ (80066dc <ZXB5210_angle+0x2bc>)
 800645a:	fb82 1203 	smull	r1, r2, r2, r3
 800645e:	441a      	add	r2, r3
 8006460:	1211      	asrs	r1, r2, #8
 8006462:	17da      	asrs	r2, r3, #31
 8006464:	1a8a      	subs	r2, r1, r2
 8006466:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 800646a:	fb01 f202 	mul.w	r2, r1, r2
 800646e:	1a9b      	subs	r3, r3, r2
 8006470:	607b      	str	r3, [r7, #4]
	}
	ANGLE_GLOBAL = angle;
 8006472:	4a9b      	ldr	r2, [pc, #620]	@ (80066e0 <ZXB5210_angle+0x2c0>)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6013      	str	r3, [r2, #0]
#ifdef V2
	if (!isSpeedActualisationIsBlocked){
 8006478:	4b9a      	ldr	r3, [pc, #616]	@ (80066e4 <ZXB5210_angle+0x2c4>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	f040 8121 	bne.w	80066c4 <ZXB5210_angle+0x2a4>
		if(angle <=90){
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2b5a      	cmp	r3, #90	@ 0x5a
 8006486:	dc5e      	bgt.n	8006546 <ZXB5210_angle+0x126>
			alpha_1 =  MAX_ALPHA_SPEED/2 - MAX_ALPHA_SPEED/180.0 * angle ;
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f7fc fa7d 	bl	8002988 <__aeabi_i2d>
 800648e:	a390      	add	r3, pc, #576	@ (adr r3, 80066d0 <ZXB5210_angle+0x2b0>)
 8006490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006494:	f7fc fae2 	bl	8002a5c <__aeabi_dmul>
 8006498:	4602      	mov	r2, r0
 800649a:	460b      	mov	r3, r1
 800649c:	f04f 0000 	mov.w	r0, #0
 80064a0:	4991      	ldr	r1, [pc, #580]	@ (80066e8 <ZXB5210_angle+0x2c8>)
 80064a2:	f7fc f923 	bl	80026ec <__aeabi_dsub>
 80064a6:	4602      	mov	r2, r0
 80064a8:	460b      	mov	r3, r1
 80064aa:	4610      	mov	r0, r2
 80064ac:	4619      	mov	r1, r3
 80064ae:	f7fc fdad 	bl	800300c <__aeabi_d2uiz>
 80064b2:	4603      	mov	r3, r0
 80064b4:	73bb      	strb	r3, [r7, #14]
			alpha_2 = MAX_ALPHA_SPEED/2 + MAX_ALPHA_SPEED/180.0 * angle;
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f7fc fa66 	bl	8002988 <__aeabi_i2d>
 80064bc:	a384      	add	r3, pc, #528	@ (adr r3, 80066d0 <ZXB5210_angle+0x2b0>)
 80064be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c2:	f7fc facb 	bl	8002a5c <__aeabi_dmul>
 80064c6:	4602      	mov	r2, r0
 80064c8:	460b      	mov	r3, r1
 80064ca:	4610      	mov	r0, r2
 80064cc:	4619      	mov	r1, r3
 80064ce:	f04f 0200 	mov.w	r2, #0
 80064d2:	4b85      	ldr	r3, [pc, #532]	@ (80066e8 <ZXB5210_angle+0x2c8>)
 80064d4:	f7fc f90c 	bl	80026f0 <__adddf3>
 80064d8:	4602      	mov	r2, r0
 80064da:	460b      	mov	r3, r1
 80064dc:	4610      	mov	r0, r2
 80064de:	4619      	mov	r1, r3
 80064e0:	f7fc fd94 	bl	800300c <__aeabi_d2uiz>
 80064e4:	4603      	mov	r3, r0
 80064e6:	73fb      	strb	r3, [r7, #15]

			alpha_1 = alpha_1 > MAX_ALPHA_SPEED ? MAX_ALPHA_SPEED : alpha_1;
 80064e8:	7bbb      	ldrb	r3, [r7, #14]
 80064ea:	2b1e      	cmp	r3, #30
 80064ec:	d80c      	bhi.n	8006508 <ZXB5210_angle+0xe8>
 80064ee:	7bbb      	ldrb	r3, [r7, #14]
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7fc fa49 	bl	8002988 <__aeabi_i2d>
 80064f6:	4602      	mov	r2, r0
 80064f8:	460b      	mov	r3, r1
 80064fa:	4610      	mov	r0, r2
 80064fc:	4619      	mov	r1, r3
 80064fe:	f7fc fd85 	bl	800300c <__aeabi_d2uiz>
 8006502:	4603      	mov	r3, r0
 8006504:	b2db      	uxtb	r3, r3
 8006506:	e000      	b.n	800650a <ZXB5210_angle+0xea>
 8006508:	231e      	movs	r3, #30
 800650a:	73bb      	strb	r3, [r7, #14]
			alpha_2 = alpha_2 > MAX_ALPHA_SPEED ? MAX_ALPHA_SPEED : alpha_2 ;
 800650c:	7bfb      	ldrb	r3, [r7, #15]
 800650e:	2b1e      	cmp	r3, #30
 8006510:	d80c      	bhi.n	800652c <ZXB5210_angle+0x10c>
 8006512:	7bfb      	ldrb	r3, [r7, #15]
 8006514:	4618      	mov	r0, r3
 8006516:	f7fc fa37 	bl	8002988 <__aeabi_i2d>
 800651a:	4602      	mov	r2, r0
 800651c:	460b      	mov	r3, r1
 800651e:	4610      	mov	r0, r2
 8006520:	4619      	mov	r1, r3
 8006522:	f7fc fd73 	bl	800300c <__aeabi_d2uiz>
 8006526:	4603      	mov	r3, r0
 8006528:	b2db      	uxtb	r3, r3
 800652a:	e000      	b.n	800652e <ZXB5210_angle+0x10e>
 800652c:	231e      	movs	r3, #30
 800652e:	73fb      	strb	r3, [r7, #15]
			ZXB5210_speed_FWD(&MDriver1 , alpha_1);
 8006530:	7bbb      	ldrb	r3, [r7, #14]
 8006532:	4619      	mov	r1, r3
 8006534:	486d      	ldr	r0, [pc, #436]	@ (80066ec <ZXB5210_angle+0x2cc>)
 8006536:	f7ff fe59 	bl	80061ec <ZXB5210_speed_FWD>
			ZXB5210_speed_FWD(&MDriver2 , alpha_2);
 800653a:	7bfb      	ldrb	r3, [r7, #15]
 800653c:	4619      	mov	r1, r3
 800653e:	486c      	ldr	r0, [pc, #432]	@ (80066f0 <ZXB5210_angle+0x2d0>)
 8006540:	f7ff fe54 	bl	80061ec <ZXB5210_speed_FWD>
 8006544:	e0be      	b.n	80066c4 <ZXB5210_angle+0x2a4>
		}
		else if(angle <=270){
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800654c:	dc59      	bgt.n	8006602 <ZXB5210_angle+0x1e2>
			alpha_1 =  MAX_ALPHA_SPEED/180.0 * (angle -90) ;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	3b5a      	subs	r3, #90	@ 0x5a
 8006552:	4618      	mov	r0, r3
 8006554:	f7fc fa18 	bl	8002988 <__aeabi_i2d>
 8006558:	a35d      	add	r3, pc, #372	@ (adr r3, 80066d0 <ZXB5210_angle+0x2b0>)
 800655a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655e:	f7fc fa7d 	bl	8002a5c <__aeabi_dmul>
 8006562:	4602      	mov	r2, r0
 8006564:	460b      	mov	r3, r1
 8006566:	4610      	mov	r0, r2
 8006568:	4619      	mov	r1, r3
 800656a:	f7fc fd4f 	bl	800300c <__aeabi_d2uiz>
 800656e:	4603      	mov	r3, r0
 8006570:	73bb      	strb	r3, [r7, #14]
			alpha_2 = MAX_ALPHA_SPEED -  MAX_ALPHA_SPEED/180.0 * (angle - 90);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	3b5a      	subs	r3, #90	@ 0x5a
 8006576:	4618      	mov	r0, r3
 8006578:	f7fc fa06 	bl	8002988 <__aeabi_i2d>
 800657c:	a354      	add	r3, pc, #336	@ (adr r3, 80066d0 <ZXB5210_angle+0x2b0>)
 800657e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006582:	f7fc fa6b 	bl	8002a5c <__aeabi_dmul>
 8006586:	4602      	mov	r2, r0
 8006588:	460b      	mov	r3, r1
 800658a:	f04f 0000 	mov.w	r0, #0
 800658e:	4959      	ldr	r1, [pc, #356]	@ (80066f4 <ZXB5210_angle+0x2d4>)
 8006590:	f7fc f8ac 	bl	80026ec <__aeabi_dsub>
 8006594:	4602      	mov	r2, r0
 8006596:	460b      	mov	r3, r1
 8006598:	4610      	mov	r0, r2
 800659a:	4619      	mov	r1, r3
 800659c:	f7fc fd36 	bl	800300c <__aeabi_d2uiz>
 80065a0:	4603      	mov	r3, r0
 80065a2:	73fb      	strb	r3, [r7, #15]

			alpha_1 = alpha_1 > MAX_ALPHA_SPEED ? MAX_ALPHA_SPEED : alpha_1;
 80065a4:	7bbb      	ldrb	r3, [r7, #14]
 80065a6:	2b1e      	cmp	r3, #30
 80065a8:	d80c      	bhi.n	80065c4 <ZXB5210_angle+0x1a4>
 80065aa:	7bbb      	ldrb	r3, [r7, #14]
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7fc f9eb 	bl	8002988 <__aeabi_i2d>
 80065b2:	4602      	mov	r2, r0
 80065b4:	460b      	mov	r3, r1
 80065b6:	4610      	mov	r0, r2
 80065b8:	4619      	mov	r1, r3
 80065ba:	f7fc fd27 	bl	800300c <__aeabi_d2uiz>
 80065be:	4603      	mov	r3, r0
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	e000      	b.n	80065c6 <ZXB5210_angle+0x1a6>
 80065c4:	231e      	movs	r3, #30
 80065c6:	73bb      	strb	r3, [r7, #14]
			alpha_2 = alpha_2 > MAX_ALPHA_SPEED ? MAX_ALPHA_SPEED : alpha_2 ;
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
 80065ca:	2b1e      	cmp	r3, #30
 80065cc:	d80c      	bhi.n	80065e8 <ZXB5210_angle+0x1c8>
 80065ce:	7bfb      	ldrb	r3, [r7, #15]
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7fc f9d9 	bl	8002988 <__aeabi_i2d>
 80065d6:	4602      	mov	r2, r0
 80065d8:	460b      	mov	r3, r1
 80065da:	4610      	mov	r0, r2
 80065dc:	4619      	mov	r1, r3
 80065de:	f7fc fd15 	bl	800300c <__aeabi_d2uiz>
 80065e2:	4603      	mov	r3, r0
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	e000      	b.n	80065ea <ZXB5210_angle+0x1ca>
 80065e8:	231e      	movs	r3, #30
 80065ea:	73fb      	strb	r3, [r7, #15]
			ZXB5210_speed_REV(&MDriver1 , alpha_1);
 80065ec:	7bbb      	ldrb	r3, [r7, #14]
 80065ee:	4619      	mov	r1, r3
 80065f0:	483e      	ldr	r0, [pc, #248]	@ (80066ec <ZXB5210_angle+0x2cc>)
 80065f2:	f7ff fe5b 	bl	80062ac <ZXB5210_speed_REV>
			ZXB5210_speed_REV(&MDriver2 , alpha_2);
 80065f6:	7bfb      	ldrb	r3, [r7, #15]
 80065f8:	4619      	mov	r1, r3
 80065fa:	483d      	ldr	r0, [pc, #244]	@ (80066f0 <ZXB5210_angle+0x2d0>)
 80065fc:	f7ff fe56 	bl	80062ac <ZXB5210_speed_REV>
 8006600:	e060      	b.n	80066c4 <ZXB5210_angle+0x2a4>
		}
		else if(angle <=360){
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8006608:	dc5c      	bgt.n	80066c4 <ZXB5210_angle+0x2a4>
			alpha_2 = MAX_ALPHA_SPEED/180.0 * (angle-270);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8006610:	4618      	mov	r0, r3
 8006612:	f7fc f9b9 	bl	8002988 <__aeabi_i2d>
 8006616:	a32e      	add	r3, pc, #184	@ (adr r3, 80066d0 <ZXB5210_angle+0x2b0>)
 8006618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661c:	f7fc fa1e 	bl	8002a5c <__aeabi_dmul>
 8006620:	4602      	mov	r2, r0
 8006622:	460b      	mov	r3, r1
 8006624:	4610      	mov	r0, r2
 8006626:	4619      	mov	r1, r3
 8006628:	f7fc fcf0 	bl	800300c <__aeabi_d2uiz>
 800662c:	4603      	mov	r3, r0
 800662e:	73fb      	strb	r3, [r7, #15]
			alpha_1 = MAX_ALPHA_SPEED -  MAX_ALPHA_SPEED/180.0 * (angle - 270);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8006636:	4618      	mov	r0, r3
 8006638:	f7fc f9a6 	bl	8002988 <__aeabi_i2d>
 800663c:	a324      	add	r3, pc, #144	@ (adr r3, 80066d0 <ZXB5210_angle+0x2b0>)
 800663e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006642:	f7fc fa0b 	bl	8002a5c <__aeabi_dmul>
 8006646:	4602      	mov	r2, r0
 8006648:	460b      	mov	r3, r1
 800664a:	f04f 0000 	mov.w	r0, #0
 800664e:	4929      	ldr	r1, [pc, #164]	@ (80066f4 <ZXB5210_angle+0x2d4>)
 8006650:	f7fc f84c 	bl	80026ec <__aeabi_dsub>
 8006654:	4602      	mov	r2, r0
 8006656:	460b      	mov	r3, r1
 8006658:	4610      	mov	r0, r2
 800665a:	4619      	mov	r1, r3
 800665c:	f7fc fcd6 	bl	800300c <__aeabi_d2uiz>
 8006660:	4603      	mov	r3, r0
 8006662:	73bb      	strb	r3, [r7, #14]

			alpha_1 = alpha_1 > MAX_ALPHA_SPEED ? MAX_ALPHA_SPEED : alpha_1;
 8006664:	7bbb      	ldrb	r3, [r7, #14]
 8006666:	2b1e      	cmp	r3, #30
 8006668:	d80c      	bhi.n	8006684 <ZXB5210_angle+0x264>
 800666a:	7bbb      	ldrb	r3, [r7, #14]
 800666c:	4618      	mov	r0, r3
 800666e:	f7fc f98b 	bl	8002988 <__aeabi_i2d>
 8006672:	4602      	mov	r2, r0
 8006674:	460b      	mov	r3, r1
 8006676:	4610      	mov	r0, r2
 8006678:	4619      	mov	r1, r3
 800667a:	f7fc fcc7 	bl	800300c <__aeabi_d2uiz>
 800667e:	4603      	mov	r3, r0
 8006680:	b2db      	uxtb	r3, r3
 8006682:	e000      	b.n	8006686 <ZXB5210_angle+0x266>
 8006684:	231e      	movs	r3, #30
 8006686:	73bb      	strb	r3, [r7, #14]
			alpha_2 = alpha_2 > MAX_ALPHA_SPEED ? MAX_ALPHA_SPEED : alpha_2 ;
 8006688:	7bfb      	ldrb	r3, [r7, #15]
 800668a:	2b1e      	cmp	r3, #30
 800668c:	d80c      	bhi.n	80066a8 <ZXB5210_angle+0x288>
 800668e:	7bfb      	ldrb	r3, [r7, #15]
 8006690:	4618      	mov	r0, r3
 8006692:	f7fc f979 	bl	8002988 <__aeabi_i2d>
 8006696:	4602      	mov	r2, r0
 8006698:	460b      	mov	r3, r1
 800669a:	4610      	mov	r0, r2
 800669c:	4619      	mov	r1, r3
 800669e:	f7fc fcb5 	bl	800300c <__aeabi_d2uiz>
 80066a2:	4603      	mov	r3, r0
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	e000      	b.n	80066aa <ZXB5210_angle+0x28a>
 80066a8:	231e      	movs	r3, #30
 80066aa:	73fb      	strb	r3, [r7, #15]
			ZXB5210_speed_FWD(&MDriver1 , alpha_1);
 80066ac:	7bbb      	ldrb	r3, [r7, #14]
 80066ae:	4619      	mov	r1, r3
 80066b0:	480e      	ldr	r0, [pc, #56]	@ (80066ec <ZXB5210_angle+0x2cc>)
 80066b2:	f7ff fd9b 	bl	80061ec <ZXB5210_speed_FWD>
			ZXB5210_speed_FWD(&MDriver2 , alpha_2);
 80066b6:	7bfb      	ldrb	r3, [r7, #15]
 80066b8:	4619      	mov	r1, r3
 80066ba:	480d      	ldr	r0, [pc, #52]	@ (80066f0 <ZXB5210_angle+0x2d0>)
 80066bc:	f7ff fd96 	bl	80061ec <ZXB5210_speed_FWD>
 80066c0:	e000      	b.n	80066c4 <ZXB5210_angle+0x2a4>
	if(angle <0){return;}
 80066c2:	bf00      	nop
		}
	}
#endif
}
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	f3af 8000 	nop.w
 80066d0:	55555555 	.word	0x55555555
 80066d4:	3fc55555 	.word	0x3fc55555
 80066d8:	200001b0 	.word	0x200001b0
 80066dc:	b60b60b7 	.word	0xb60b60b7
 80066e0:	20000138 	.word	0x20000138
 80066e4:	2000782c 	.word	0x2000782c
 80066e8:	402e0000 	.word	0x402e0000
 80066ec:	20000f84 	.word	0x20000f84
 80066f0:	20000f94 	.word	0x20000f94
 80066f4:	403e0000 	.word	0x403e0000

080066f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80066f8:	480d      	ldr	r0, [pc, #52]	@ (8006730 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80066fa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80066fc:	f7fd feb2 	bl	8004464 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006700:	480c      	ldr	r0, [pc, #48]	@ (8006734 <LoopForever+0x6>)
  ldr r1, =_edata
 8006702:	490d      	ldr	r1, [pc, #52]	@ (8006738 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006704:	4a0d      	ldr	r2, [pc, #52]	@ (800673c <LoopForever+0xe>)
  movs r3, #0
 8006706:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8006708:	e002      	b.n	8006710 <LoopCopyDataInit>

0800670a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800670a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800670c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800670e:	3304      	adds	r3, #4

08006710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006714:	d3f9      	bcc.n	800670a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006716:	4a0a      	ldr	r2, [pc, #40]	@ (8006740 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006718:	4c0a      	ldr	r4, [pc, #40]	@ (8006744 <LoopForever+0x16>)
  movs r3, #0
 800671a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800671c:	e001      	b.n	8006722 <LoopFillZerobss>

0800671e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800671e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006720:	3204      	adds	r2, #4

08006722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006724:	d3fb      	bcc.n	800671e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8006726:	f013 fdd7 	bl	801a2d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800672a:	f7fd fb39 	bl	8003da0 <main>

0800672e <LoopForever>:

LoopForever:
    b LoopForever
 800672e:	e7fe      	b.n	800672e <LoopForever>
  ldr   r0, =_estack
 8006730:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8006734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006738:	2000051c 	.word	0x2000051c
  ldr r2, =_sidata
 800673c:	0801f518 	.word	0x0801f518
  ldr r2, =_sbss
 8006740:	2000051c 	.word	0x2000051c
  ldr r4, =_ebss
 8006744:	20007b40 	.word	0x20007b40

08006748 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006748:	e7fe      	b.n	8006748 <COMP1_2_3_IRQHandler>

0800674a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b082      	sub	sp, #8
 800674e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006750:	2300      	movs	r3, #0
 8006752:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006754:	2003      	movs	r0, #3
 8006756:	f001 ff44 	bl	80085e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800675a:	200f      	movs	r0, #15
 800675c:	f7fd fc82 	bl	8004064 <HAL_InitTick>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d002      	beq.n	800676c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	71fb      	strb	r3, [r7, #7]
 800676a:	e001      	b.n	8006770 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800676c:	f7fd fc52 	bl	8004014 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006770:	79fb      	ldrb	r3, [r7, #7]

}
 8006772:	4618      	mov	r0, r3
 8006774:	3708      	adds	r7, #8
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
	...

0800677c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800677c:	b480      	push	{r7}
 800677e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006780:	4b05      	ldr	r3, [pc, #20]	@ (8006798 <HAL_IncTick+0x1c>)
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	4b05      	ldr	r3, [pc, #20]	@ (800679c <HAL_IncTick+0x20>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4413      	add	r3, r2
 800678a:	4a03      	ldr	r2, [pc, #12]	@ (8006798 <HAL_IncTick+0x1c>)
 800678c:	6013      	str	r3, [r2, #0]
}
 800678e:	bf00      	nop
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr
 8006798:	20000fe8 	.word	0x20000fe8
 800679c:	20000140 	.word	0x20000140

080067a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80067a0:	b480      	push	{r7}
 80067a2:	af00      	add	r7, sp, #0
  return uwTick;
 80067a4:	4b03      	ldr	r3, [pc, #12]	@ (80067b4 <HAL_GetTick+0x14>)
 80067a6:	681b      	ldr	r3, [r3, #0]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	20000fe8 	.word	0x20000fe8

080067b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80067c0:	f7ff ffee 	bl	80067a0 <HAL_GetTick>
 80067c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80067d0:	d004      	beq.n	80067dc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80067d2:	4b09      	ldr	r3, [pc, #36]	@ (80067f8 <HAL_Delay+0x40>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	4413      	add	r3, r2
 80067da:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80067dc:	bf00      	nop
 80067de:	f7ff ffdf 	bl	80067a0 <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d8f7      	bhi.n	80067de <HAL_Delay+0x26>
  {
  }
}
 80067ee:	bf00      	nop
 80067f0:	bf00      	nop
 80067f2:	3710      	adds	r7, #16
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	20000140 	.word	0x20000140

080067fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	431a      	orrs	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	609a      	str	r2, [r3, #8]
}
 8006816:	bf00      	nop
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr

08006822 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006822:	b480      	push	{r7}
 8006824:	b083      	sub	sp, #12
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
 800682a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	431a      	orrs	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	609a      	str	r2, [r3, #8]
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8006858:	4618      	mov	r0, r3
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006864:	b480      	push	{r7}
 8006866:	b087      	sub	sp, #28
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
 8006870:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	3360      	adds	r3, #96	@ 0x60
 8006876:	461a      	mov	r2, r3
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	4b08      	ldr	r3, [pc, #32]	@ (80068a8 <LL_ADC_SetOffset+0x44>)
 8006886:	4013      	ands	r3, r2
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800688e:	683a      	ldr	r2, [r7, #0]
 8006890:	430a      	orrs	r2, r1
 8006892:	4313      	orrs	r3, r2
 8006894:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800689c:	bf00      	nop
 800689e:	371c      	adds	r7, #28
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr
 80068a8:	03fff000 	.word	0x03fff000

080068ac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b085      	sub	sp, #20
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	3360      	adds	r3, #96	@ 0x60
 80068ba:	461a      	mov	r2, r3
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4413      	add	r3, r2
 80068c2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3714      	adds	r7, #20
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80068d8:	b480      	push	{r7}
 80068da:	b087      	sub	sp, #28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	3360      	adds	r3, #96	@ 0x60
 80068e8:	461a      	mov	r2, r3
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4413      	add	r3, r2
 80068f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	431a      	orrs	r2, r3
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006902:	bf00      	nop
 8006904:	371c      	adds	r7, #28
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr

0800690e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800690e:	b480      	push	{r7}
 8006910:	b087      	sub	sp, #28
 8006912:	af00      	add	r7, sp, #0
 8006914:	60f8      	str	r0, [r7, #12]
 8006916:	60b9      	str	r1, [r7, #8]
 8006918:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	3360      	adds	r3, #96	@ 0x60
 800691e:	461a      	mov	r2, r3
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	4413      	add	r3, r2
 8006926:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	431a      	orrs	r2, r3
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8006938:	bf00      	nop
 800693a:	371c      	adds	r7, #28
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8006944:	b480      	push	{r7}
 8006946:	b087      	sub	sp, #28
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	3360      	adds	r3, #96	@ 0x60
 8006954:	461a      	mov	r2, r3
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4413      	add	r3, r2
 800695c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	431a      	orrs	r2, r3
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800696e:	bf00      	nop
 8006970:	371c      	adds	r7, #28
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr

0800697a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800697a:	b480      	push	{r7}
 800697c:	b083      	sub	sp, #12
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
 8006982:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	695b      	ldr	r3, [r3, #20]
 8006988:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	431a      	orrs	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	615a      	str	r2, [r3, #20]
}
 8006994:	bf00      	nop
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d101      	bne.n	80069b8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80069b4:	2301      	movs	r3, #1
 80069b6:	e000      	b.n	80069ba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	370c      	adds	r7, #12
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80069c6:	b480      	push	{r7}
 80069c8:	b087      	sub	sp, #28
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	60f8      	str	r0, [r7, #12]
 80069ce:	60b9      	str	r1, [r7, #8]
 80069d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	3330      	adds	r3, #48	@ 0x30
 80069d6:	461a      	mov	r2, r3
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	0a1b      	lsrs	r3, r3, #8
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	f003 030c 	and.w	r3, r3, #12
 80069e2:	4413      	add	r3, r2
 80069e4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	f003 031f 	and.w	r3, r3, #31
 80069f0:	211f      	movs	r1, #31
 80069f2:	fa01 f303 	lsl.w	r3, r1, r3
 80069f6:	43db      	mvns	r3, r3
 80069f8:	401a      	ands	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	0e9b      	lsrs	r3, r3, #26
 80069fe:	f003 011f 	and.w	r1, r3, #31
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	f003 031f 	and.w	r3, r3, #31
 8006a08:	fa01 f303 	lsl.w	r3, r1, r3
 8006a0c:	431a      	orrs	r2, r3
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006a12:	bf00      	nop
 8006a14:	371c      	adds	r7, #28
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr

08006a1e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006a1e:	b480      	push	{r7}
 8006a20:	b083      	sub	sp, #12
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a2a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d101      	bne.n	8006a36 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8006a32:	2301      	movs	r3, #1
 8006a34:	e000      	b.n	8006a38 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b087      	sub	sp, #28
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	3314      	adds	r3, #20
 8006a54:	461a      	mov	r2, r3
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	0e5b      	lsrs	r3, r3, #25
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	f003 0304 	and.w	r3, r3, #4
 8006a60:	4413      	add	r3, r2
 8006a62:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	0d1b      	lsrs	r3, r3, #20
 8006a6c:	f003 031f 	and.w	r3, r3, #31
 8006a70:	2107      	movs	r1, #7
 8006a72:	fa01 f303 	lsl.w	r3, r1, r3
 8006a76:	43db      	mvns	r3, r3
 8006a78:	401a      	ands	r2, r3
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	0d1b      	lsrs	r3, r3, #20
 8006a7e:	f003 031f 	and.w	r3, r3, #31
 8006a82:	6879      	ldr	r1, [r7, #4]
 8006a84:	fa01 f303 	lsl.w	r3, r1, r3
 8006a88:	431a      	orrs	r2, r3
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006a8e:	bf00      	nop
 8006a90:	371c      	adds	r7, #28
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
	...

08006a9c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ab4:	43db      	mvns	r3, r3
 8006ab6:	401a      	ands	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f003 0318 	and.w	r3, r3, #24
 8006abe:	4908      	ldr	r1, [pc, #32]	@ (8006ae0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006ac0:	40d9      	lsrs	r1, r3
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	400b      	ands	r3, r1
 8006ac6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006aca:	431a      	orrs	r2, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006ad2:	bf00      	nop
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	0007ffff 	.word	0x0007ffff

08006ae4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f003 031f 	and.w	r3, r3, #31
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8006b2c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	6093      	str	r3, [r2, #8]
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b54:	d101      	bne.n	8006b5a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006b56:	2301      	movs	r3, #1
 8006b58:	e000      	b.n	8006b5c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8006b78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006b7c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006b84:	bf00      	nop
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ba0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ba4:	d101      	bne.n	8006baa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e000      	b.n	8006bac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006bc8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006bcc:	f043 0201 	orr.w	r2, r3, #1
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006bd4:	bf00      	nop
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006bf0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006bf4:	f043 0202 	orr.w	r2, r3, #2
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006bfc:	bf00      	nop
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	f003 0301 	and.w	r3, r3, #1
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d101      	bne.n	8006c20 <LL_ADC_IsEnabled+0x18>
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e000      	b.n	8006c22 <LL_ADC_IsEnabled+0x1a>
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	370c      	adds	r7, #12
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b083      	sub	sp, #12
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	f003 0302 	and.w	r3, r3, #2
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d101      	bne.n	8006c46 <LL_ADC_IsDisableOngoing+0x18>
 8006c42:	2301      	movs	r3, #1
 8006c44:	e000      	b.n	8006c48 <LL_ADC_IsDisableOngoing+0x1a>
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c64:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006c68:	f043 0204 	orr.w	r2, r3, #4
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006c90:	f043 0210 	orr.w	r2, r3, #16
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f003 0304 	and.w	r3, r3, #4
 8006cb4:	2b04      	cmp	r3, #4
 8006cb6:	d101      	bne.n	8006cbc <LL_ADC_REG_IsConversionOngoing+0x18>
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e000      	b.n	8006cbe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	370c      	adds	r7, #12
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8006cca:	b480      	push	{r7}
 8006ccc:	b083      	sub	sp, #12
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006cda:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006cde:	f043 0220 	orr.w	r2, r3, #32
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8006ce6:	bf00      	nop
 8006ce8:	370c      	adds	r7, #12
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b083      	sub	sp, #12
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f003 0308 	and.w	r3, r3, #8
 8006d02:	2b08      	cmp	r3, #8
 8006d04:	d101      	bne.n	8006d0a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006d06:	2301      	movs	r3, #1
 8006d08:	e000      	b.n	8006d0c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006d18:	b590      	push	{r4, r7, lr}
 8006d1a:	b089      	sub	sp, #36	@ 0x24
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006d20:	2300      	movs	r3, #0
 8006d22:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8006d24:	2300      	movs	r3, #0
 8006d26:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d101      	bne.n	8006d32 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e167      	b.n	8007002 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d109      	bne.n	8006d54 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f7fc fbf9 	bl	8003538 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7ff fef1 	bl	8006b40 <LL_ADC_IsDeepPowerDownEnabled>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d004      	beq.n	8006d6e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7ff fed7 	bl	8006b1c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7ff ff0c 	bl	8006b90 <LL_ADC_IsInternalRegulatorEnabled>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d115      	bne.n	8006daa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7ff fef0 	bl	8006b68 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006d88:	4ba0      	ldr	r3, [pc, #640]	@ (800700c <HAL_ADC_Init+0x2f4>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	099b      	lsrs	r3, r3, #6
 8006d8e:	4aa0      	ldr	r2, [pc, #640]	@ (8007010 <HAL_ADC_Init+0x2f8>)
 8006d90:	fba2 2303 	umull	r2, r3, r2, r3
 8006d94:	099b      	lsrs	r3, r3, #6
 8006d96:	3301      	adds	r3, #1
 8006d98:	005b      	lsls	r3, r3, #1
 8006d9a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006d9c:	e002      	b.n	8006da4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	3b01      	subs	r3, #1
 8006da2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1f9      	bne.n	8006d9e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7ff feee 	bl	8006b90 <LL_ADC_IsInternalRegulatorEnabled>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d10d      	bne.n	8006dd6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dbe:	f043 0210 	orr.w	r2, r3, #16
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dca:	f043 0201 	orr.w	r2, r3, #1
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7ff ff62 	bl	8006ca4 <LL_ADC_REG_IsConversionOngoing>
 8006de0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006de6:	f003 0310 	and.w	r3, r3, #16
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f040 8100 	bne.w	8006ff0 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f040 80fc 	bne.w	8006ff0 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dfc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8006e00:	f043 0202 	orr.w	r2, r3, #2
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7ff fefb 	bl	8006c08 <LL_ADC_IsEnabled>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d111      	bne.n	8006e3c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006e18:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006e1c:	f7ff fef4 	bl	8006c08 <LL_ADC_IsEnabled>
 8006e20:	4604      	mov	r4, r0
 8006e22:	487c      	ldr	r0, [pc, #496]	@ (8007014 <HAL_ADC_Init+0x2fc>)
 8006e24:	f7ff fef0 	bl	8006c08 <LL_ADC_IsEnabled>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	4323      	orrs	r3, r4
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d105      	bne.n	8006e3c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	4619      	mov	r1, r3
 8006e36:	4878      	ldr	r0, [pc, #480]	@ (8007018 <HAL_ADC_Init+0x300>)
 8006e38:	f7ff fce0 	bl	80067fc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	7f5b      	ldrb	r3, [r3, #29]
 8006e40:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006e46:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8006e4c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8006e52:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006e5a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d106      	bne.n	8006e78 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	045b      	lsls	r3, r3, #17
 8006e72:	69ba      	ldr	r2, [r7, #24]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d009      	beq.n	8006e94 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e84:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e8c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006e8e:	69ba      	ldr	r2, [r7, #24]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68da      	ldr	r2, [r3, #12]
 8006e9a:	4b60      	ldr	r3, [pc, #384]	@ (800701c <HAL_ADC_Init+0x304>)
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	6812      	ldr	r2, [r2, #0]
 8006ea2:	69b9      	ldr	r1, [r7, #24]
 8006ea4:	430b      	orrs	r3, r1
 8006ea6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7ff ff15 	bl	8006cf2 <LL_ADC_INJ_IsConversionOngoing>
 8006ec8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d16d      	bne.n	8006fac <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d16a      	bne.n	8006fac <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006eda:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006ee2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ef2:	f023 0302 	bic.w	r3, r3, #2
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	6812      	ldr	r2, [r2, #0]
 8006efa:	69b9      	ldr	r1, [r7, #24]
 8006efc:	430b      	orrs	r3, r1
 8006efe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d017      	beq.n	8006f38 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	691a      	ldr	r2, [r3, #16]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006f16:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006f20:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006f24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	6911      	ldr	r1, [r2, #16]
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	6812      	ldr	r2, [r2, #0]
 8006f30:	430b      	orrs	r3, r1
 8006f32:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8006f36:	e013      	b.n	8006f60 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	691a      	ldr	r2, [r3, #16]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006f46:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	6812      	ldr	r2, [r2, #0]
 8006f54:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006f58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006f5c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d118      	bne.n	8006f9c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006f74:	f023 0304 	bic.w	r3, r3, #4
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006f80:	4311      	orrs	r1, r2
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006f86:	4311      	orrs	r1, r2
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006f8c:	430a      	orrs	r2, r1
 8006f8e:	431a      	orrs	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f042 0201 	orr.w	r2, r2, #1
 8006f98:	611a      	str	r2, [r3, #16]
 8006f9a:	e007      	b.n	8006fac <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	691a      	ldr	r2, [r3, #16]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f022 0201 	bic.w	r2, r2, #1
 8006faa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	695b      	ldr	r3, [r3, #20]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d10c      	bne.n	8006fce <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fba:	f023 010f 	bic.w	r1, r3, #15
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a1b      	ldr	r3, [r3, #32]
 8006fc2:	1e5a      	subs	r2, r3, #1
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	430a      	orrs	r2, r1
 8006fca:	631a      	str	r2, [r3, #48]	@ 0x30
 8006fcc:	e007      	b.n	8006fde <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f022 020f 	bic.w	r2, r2, #15
 8006fdc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fe2:	f023 0303 	bic.w	r3, r3, #3
 8006fe6:	f043 0201 	orr.w	r2, r3, #1
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006fee:	e007      	b.n	8007000 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ff4:	f043 0210 	orr.w	r2, r3, #16
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007000:	7ffb      	ldrb	r3, [r7, #31]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3724      	adds	r7, #36	@ 0x24
 8007006:	46bd      	mov	sp, r7
 8007008:	bd90      	pop	{r4, r7, pc}
 800700a:	bf00      	nop
 800700c:	20000004 	.word	0x20000004
 8007010:	053e2d63 	.word	0x053e2d63
 8007014:	50000100 	.word	0x50000100
 8007018:	50000300 	.word	0x50000300
 800701c:	fff04007 	.word	0xfff04007

08007020 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b086      	sub	sp, #24
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800702c:	4851      	ldr	r0, [pc, #324]	@ (8007174 <HAL_ADC_Start_DMA+0x154>)
 800702e:	f7ff fd59 	bl	8006ae4 <LL_ADC_GetMultimode>
 8007032:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4618      	mov	r0, r3
 800703a:	f7ff fe33 	bl	8006ca4 <LL_ADC_REG_IsConversionOngoing>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	f040 808f 	bne.w	8007164 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800704c:	2b01      	cmp	r3, #1
 800704e:	d101      	bne.n	8007054 <HAL_ADC_Start_DMA+0x34>
 8007050:	2302      	movs	r3, #2
 8007052:	e08a      	b.n	800716a <HAL_ADC_Start_DMA+0x14a>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d005      	beq.n	800706e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	2b05      	cmp	r3, #5
 8007066:	d002      	beq.n	800706e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	2b09      	cmp	r3, #9
 800706c:	d173      	bne.n	8007156 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f000 ffd0 	bl	8008014 <ADC_Enable>
 8007074:	4603      	mov	r3, r0
 8007076:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8007078:	7dfb      	ldrb	r3, [r7, #23]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d166      	bne.n	800714c <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007082:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007086:	f023 0301 	bic.w	r3, r3, #1
 800708a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a38      	ldr	r2, [pc, #224]	@ (8007178 <HAL_ADC_Start_DMA+0x158>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d002      	beq.n	80070a2 <HAL_ADC_Start_DMA+0x82>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	e001      	b.n	80070a6 <HAL_ADC_Start_DMA+0x86>
 80070a2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80070a6:	68fa      	ldr	r2, [r7, #12]
 80070a8:	6812      	ldr	r2, [r2, #0]
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d002      	beq.n	80070b4 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d105      	bne.n	80070c0 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070b8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d006      	beq.n	80070da <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070d0:	f023 0206 	bic.w	r2, r3, #6
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	661a      	str	r2, [r3, #96]	@ 0x60
 80070d8:	e002      	b.n	80070e0 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070e4:	4a25      	ldr	r2, [pc, #148]	@ (800717c <HAL_ADC_Start_DMA+0x15c>)
 80070e6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070ec:	4a24      	ldr	r2, [pc, #144]	@ (8007180 <HAL_ADC_Start_DMA+0x160>)
 80070ee:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070f4:	4a23      	ldr	r2, [pc, #140]	@ (8007184 <HAL_ADC_Start_DMA+0x164>)
 80070f6:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	221c      	movs	r2, #28
 80070fe:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2200      	movs	r2, #0
 8007104:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	685a      	ldr	r2, [r3, #4]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f042 0210 	orr.w	r2, r2, #16
 8007116:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68da      	ldr	r2, [r3, #12]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f042 0201 	orr.w	r2, r2, #1
 8007126:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	3340      	adds	r3, #64	@ 0x40
 8007132:	4619      	mov	r1, r3
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f001 fee4 	bl	8008f04 <HAL_DMA_Start_IT>
 800713c:	4603      	mov	r3, r0
 800713e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4618      	mov	r0, r3
 8007146:	f7ff fd85 	bl	8006c54 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800714a:	e00d      	b.n	8007168 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8007154:	e008      	b.n	8007168 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8007162:	e001      	b.n	8007168 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007164:	2302      	movs	r3, #2
 8007166:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007168:	7dfb      	ldrb	r3, [r7, #23]
}
 800716a:	4618      	mov	r0, r3
 800716c:	3718      	adds	r7, #24
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	50000300 	.word	0x50000300
 8007178:	50000100 	.word	0x50000100
 800717c:	080081df 	.word	0x080081df
 8007180:	080082b7 	.word	0x080082b7
 8007184:	080082d3 	.word	0x080082d3

08007188 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007196:	2b01      	cmp	r3, #1
 8007198:	d101      	bne.n	800719e <HAL_ADC_Stop_DMA+0x16>
 800719a:	2302      	movs	r3, #2
 800719c:	e051      	b.n	8007242 <HAL_ADC_Stop_DMA+0xba>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80071a6:	2103      	movs	r1, #3
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 fe77 	bl	8007e9c <ADC_ConversionStop>
 80071ae:	4603      	mov	r3, r0
 80071b0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80071b2:	7bfb      	ldrb	r3, [r7, #15]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d13f      	bne.n	8007238 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68da      	ldr	r2, [r3, #12]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f022 0201 	bic.w	r2, r2, #1
 80071c6:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071cc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d10f      	bne.n	80071f6 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071da:	4618      	mov	r0, r3
 80071dc:	f001 ff0d 	bl	8008ffa <HAL_DMA_Abort>
 80071e0:	4603      	mov	r3, r0
 80071e2:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80071e4:	7bfb      	ldrb	r3, [r7, #15]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d005      	beq.n	80071f6 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	685a      	ldr	r2, [r3, #4]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f022 0210 	bic.w	r2, r2, #16
 8007204:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8007206:	7bfb      	ldrb	r3, [r7, #15]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d105      	bne.n	8007218 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 ff87 	bl	8008120 <ADC_Disable>
 8007212:	4603      	mov	r3, r0
 8007214:	73fb      	strb	r3, [r7, #15]
 8007216:	e002      	b.n	800721e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 ff81 	bl	8008120 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800721e:	7bfb      	ldrb	r3, [r7, #15]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d109      	bne.n	8007238 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007228:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800722c:	f023 0301 	bic.w	r3, r3, #1
 8007230:	f043 0201 	orr.w	r2, r3, #1
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8007240:	7bfb      	ldrb	r3, [r7, #15]
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
	...

0800724c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b08a      	sub	sp, #40	@ 0x28
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8007254:	2300      	movs	r3, #0
 8007256:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007268:	4883      	ldr	r0, [pc, #524]	@ (8007478 <HAL_ADC_IRQHandler+0x22c>)
 800726a:	f7ff fc3b 	bl	8006ae4 <LL_ADC_GetMultimode>
 800726e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	f003 0302 	and.w	r3, r3, #2
 8007276:	2b00      	cmp	r3, #0
 8007278:	d017      	beq.n	80072aa <HAL_ADC_IRQHandler+0x5e>
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	f003 0302 	and.w	r3, r3, #2
 8007280:	2b00      	cmp	r3, #0
 8007282:	d012      	beq.n	80072aa <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007288:	f003 0310 	and.w	r3, r3, #16
 800728c:	2b00      	cmp	r3, #0
 800728e:	d105      	bne.n	800729c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007294:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f001 f8e9 	bl	8008474 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2202      	movs	r2, #2
 80072a8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	f003 0304 	and.w	r3, r3, #4
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d004      	beq.n	80072be <HAL_ADC_IRQHandler+0x72>
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	f003 0304 	and.w	r3, r3, #4
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10a      	bne.n	80072d4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f000 8085 	beq.w	80073d4 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	f003 0308 	and.w	r3, r3, #8
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d07f      	beq.n	80073d4 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072d8:	f003 0310 	and.w	r3, r3, #16
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d105      	bne.n	80072ec <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072e4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7ff fb55 	bl	80069a0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d064      	beq.n	80073c6 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a5e      	ldr	r2, [pc, #376]	@ (800747c <HAL_ADC_IRQHandler+0x230>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d002      	beq.n	800730c <HAL_ADC_IRQHandler+0xc0>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	e001      	b.n	8007310 <HAL_ADC_IRQHandler+0xc4>
 800730c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	6812      	ldr	r2, [r2, #0]
 8007314:	4293      	cmp	r3, r2
 8007316:	d008      	beq.n	800732a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d005      	beq.n	800732a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	2b05      	cmp	r3, #5
 8007322:	d002      	beq.n	800732a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	2b09      	cmp	r3, #9
 8007328:	d104      	bne.n	8007334 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	623b      	str	r3, [r7, #32]
 8007332:	e00d      	b.n	8007350 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a50      	ldr	r2, [pc, #320]	@ (800747c <HAL_ADC_IRQHandler+0x230>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d002      	beq.n	8007344 <HAL_ADC_IRQHandler+0xf8>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	e001      	b.n	8007348 <HAL_ADC_IRQHandler+0xfc>
 8007344:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8007348:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8007350:	6a3b      	ldr	r3, [r7, #32]
 8007352:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007356:	2b00      	cmp	r3, #0
 8007358:	d135      	bne.n	80073c6 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 0308 	and.w	r3, r3, #8
 8007364:	2b08      	cmp	r3, #8
 8007366:	d12e      	bne.n	80073c6 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4618      	mov	r0, r3
 800736e:	f7ff fc99 	bl	8006ca4 <LL_ADC_REG_IsConversionOngoing>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d11a      	bne.n	80073ae <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	685a      	ldr	r2, [r3, #4]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f022 020c 	bic.w	r2, r2, #12
 8007386:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800738c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007398:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d112      	bne.n	80073c6 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073a4:	f043 0201 	orr.w	r2, r3, #1
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80073ac:	e00b      	b.n	80073c6 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073b2:	f043 0210 	orr.w	r2, r3, #16
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073be:	f043 0201 	orr.w	r2, r3, #1
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f010 f8fa 	bl	80175c0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	220c      	movs	r2, #12
 80073d2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	f003 0320 	and.w	r3, r3, #32
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d004      	beq.n	80073e8 <HAL_ADC_IRQHandler+0x19c>
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	f003 0320 	and.w	r3, r3, #32
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d10b      	bne.n	8007400 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	f000 809e 	beq.w	8007530 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f000 8098 	beq.w	8007530 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007404:	f003 0310 	and.w	r3, r3, #16
 8007408:	2b00      	cmp	r3, #0
 800740a:	d105      	bne.n	8007418 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007410:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4618      	mov	r0, r3
 800741e:	f7ff fafe 	bl	8006a1e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8007422:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4618      	mov	r0, r3
 800742a:	f7ff fab9 	bl	80069a0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800742e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a11      	ldr	r2, [pc, #68]	@ (800747c <HAL_ADC_IRQHandler+0x230>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d002      	beq.n	8007440 <HAL_ADC_IRQHandler+0x1f4>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	e001      	b.n	8007444 <HAL_ADC_IRQHandler+0x1f8>
 8007440:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	6812      	ldr	r2, [r2, #0]
 8007448:	4293      	cmp	r3, r2
 800744a:	d008      	beq.n	800745e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d005      	beq.n	800745e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	2b06      	cmp	r3, #6
 8007456:	d002      	beq.n	800745e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	2b07      	cmp	r3, #7
 800745c:	d104      	bne.n	8007468 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	623b      	str	r3, [r7, #32]
 8007466:	e011      	b.n	800748c <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a03      	ldr	r2, [pc, #12]	@ (800747c <HAL_ADC_IRQHandler+0x230>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d006      	beq.n	8007480 <HAL_ADC_IRQHandler+0x234>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	e005      	b.n	8007484 <HAL_ADC_IRQHandler+0x238>
 8007478:	50000300 	.word	0x50000300
 800747c:	50000100 	.word	0x50000100
 8007480:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8007484:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d047      	beq.n	8007522 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8007492:	6a3b      	ldr	r3, [r7, #32]
 8007494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d007      	beq.n	80074ac <HAL_ADC_IRQHandler+0x260>
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d03f      	beq.n	8007522 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80074a2:	6a3b      	ldr	r3, [r7, #32]
 80074a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d13a      	bne.n	8007522 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074b6:	2b40      	cmp	r3, #64	@ 0x40
 80074b8:	d133      	bne.n	8007522 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80074ba:	6a3b      	ldr	r3, [r7, #32]
 80074bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d12e      	bne.n	8007522 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4618      	mov	r0, r3
 80074ca:	f7ff fc12 	bl	8006cf2 <LL_ADC_INJ_IsConversionOngoing>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d11a      	bne.n	800750a <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	685a      	ldr	r2, [r3, #4]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80074e2:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d112      	bne.n	8007522 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007500:	f043 0201 	orr.w	r2, r3, #1
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007508:	e00b      	b.n	8007522 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800750e:	f043 0210 	orr.w	r2, r3, #16
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800751a:	f043 0201 	orr.w	r2, r3, #1
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 ff7e 	bl	8008424 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2260      	movs	r2, #96	@ 0x60
 800752e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007536:	2b00      	cmp	r3, #0
 8007538:	d011      	beq.n	800755e <HAL_ADC_IRQHandler+0x312>
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007540:	2b00      	cmp	r3, #0
 8007542:	d00c      	beq.n	800755e <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007548:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 f89f 	bl	8007694 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2280      	movs	r2, #128	@ 0x80
 800755c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007564:	2b00      	cmp	r3, #0
 8007566:	d012      	beq.n	800758e <HAL_ADC_IRQHandler+0x342>
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800756e:	2b00      	cmp	r3, #0
 8007570:	d00d      	beq.n	800758e <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007576:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 ff64 	bl	800844c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800758c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007594:	2b00      	cmp	r3, #0
 8007596:	d012      	beq.n	80075be <HAL_ADC_IRQHandler+0x372>
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00d      	beq.n	80075be <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075a6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 ff56 	bl	8008460 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80075bc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	f003 0310 	and.w	r3, r3, #16
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d036      	beq.n	8007636 <HAL_ADC_IRQHandler+0x3ea>
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	f003 0310 	and.w	r3, r3, #16
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d031      	beq.n	8007636 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d102      	bne.n	80075e0 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80075da:	2301      	movs	r3, #1
 80075dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80075de:	e014      	b.n	800760a <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d008      	beq.n	80075f8 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80075e6:	4825      	ldr	r0, [pc, #148]	@ (800767c <HAL_ADC_IRQHandler+0x430>)
 80075e8:	f7ff fa8a 	bl	8006b00 <LL_ADC_GetMultiDMATransfer>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00b      	beq.n	800760a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80075f2:	2301      	movs	r3, #1
 80075f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80075f6:	e008      	b.n	800760a <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	f003 0301 	and.w	r3, r3, #1
 8007602:	2b00      	cmp	r3, #0
 8007604:	d001      	beq.n	800760a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8007606:	2301      	movs	r3, #1
 8007608:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800760a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760c:	2b01      	cmp	r3, #1
 800760e:	d10e      	bne.n	800762e <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007614:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007620:	f043 0202 	orr.w	r2, r3, #2
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 f83d 	bl	80076a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2210      	movs	r2, #16
 8007634:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800763c:	2b00      	cmp	r3, #0
 800763e:	d018      	beq.n	8007672 <HAL_ADC_IRQHandler+0x426>
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007646:	2b00      	cmp	r3, #0
 8007648:	d013      	beq.n	8007672 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800764e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800765a:	f043 0208 	orr.w	r2, r3, #8
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800766a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 fee3 	bl	8008438 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8007672:	bf00      	nop
 8007674:	3728      	adds	r7, #40	@ 0x28
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	50000300 	.word	0x50000300

08007680 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007688:	bf00      	nop
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800769c:	bf00      	nop
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80076b0:	bf00      	nop
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b0b6      	sub	sp, #216	@ 0xd8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80076c6:	2300      	movs	r3, #0
 80076c8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80076cc:	2300      	movs	r3, #0
 80076ce:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d101      	bne.n	80076de <HAL_ADC_ConfigChannel+0x22>
 80076da:	2302      	movs	r3, #2
 80076dc:	e3c8      	b.n	8007e70 <HAL_ADC_ConfigChannel+0x7b4>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7ff fada 	bl	8006ca4 <LL_ADC_REG_IsConversionOngoing>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	f040 83ad 	bne.w	8007e52 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6818      	ldr	r0, [r3, #0]
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	6859      	ldr	r1, [r3, #4]
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	461a      	mov	r2, r3
 8007706:	f7ff f95e 	bl	80069c6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4618      	mov	r0, r3
 8007710:	f7ff fac8 	bl	8006ca4 <LL_ADC_REG_IsConversionOngoing>
 8007714:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4618      	mov	r0, r3
 800771e:	f7ff fae8 	bl	8006cf2 <LL_ADC_INJ_IsConversionOngoing>
 8007722:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007726:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800772a:	2b00      	cmp	r3, #0
 800772c:	f040 81d9 	bne.w	8007ae2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007730:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007734:	2b00      	cmp	r3, #0
 8007736:	f040 81d4 	bne.w	8007ae2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007742:	d10f      	bne.n	8007764 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6818      	ldr	r0, [r3, #0]
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2200      	movs	r2, #0
 800774e:	4619      	mov	r1, r3
 8007750:	f7ff f978 	bl	8006a44 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800775c:	4618      	mov	r0, r3
 800775e:	f7ff f90c 	bl	800697a <LL_ADC_SetSamplingTimeCommonConfig>
 8007762:	e00e      	b.n	8007782 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6818      	ldr	r0, [r3, #0]
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	6819      	ldr	r1, [r3, #0]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	461a      	mov	r2, r3
 8007772:	f7ff f967 	bl	8006a44 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2100      	movs	r1, #0
 800777c:	4618      	mov	r0, r3
 800777e:	f7ff f8fc 	bl	800697a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	695a      	ldr	r2, [r3, #20]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	08db      	lsrs	r3, r3, #3
 800778e:	f003 0303 	and.w	r3, r3, #3
 8007792:	005b      	lsls	r3, r3, #1
 8007794:	fa02 f303 	lsl.w	r3, r2, r3
 8007798:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	2b04      	cmp	r3, #4
 80077a2:	d022      	beq.n	80077ea <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6818      	ldr	r0, [r3, #0]
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	6919      	ldr	r1, [r3, #16]
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80077b4:	f7ff f856 	bl	8006864 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6818      	ldr	r0, [r3, #0]
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	6919      	ldr	r1, [r3, #16]
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	699b      	ldr	r3, [r3, #24]
 80077c4:	461a      	mov	r2, r3
 80077c6:	f7ff f8a2 	bl	800690e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6818      	ldr	r0, [r3, #0]
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d102      	bne.n	80077e0 <HAL_ADC_ConfigChannel+0x124>
 80077da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80077de:	e000      	b.n	80077e2 <HAL_ADC_ConfigChannel+0x126>
 80077e0:	2300      	movs	r3, #0
 80077e2:	461a      	mov	r2, r3
 80077e4:	f7ff f8ae 	bl	8006944 <LL_ADC_SetOffsetSaturation>
 80077e8:	e17b      	b.n	8007ae2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	2100      	movs	r1, #0
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7ff f85b 	bl	80068ac <LL_ADC_GetOffsetChannel>
 80077f6:	4603      	mov	r3, r0
 80077f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10a      	bne.n	8007816 <HAL_ADC_ConfigChannel+0x15a>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2100      	movs	r1, #0
 8007806:	4618      	mov	r0, r3
 8007808:	f7ff f850 	bl	80068ac <LL_ADC_GetOffsetChannel>
 800780c:	4603      	mov	r3, r0
 800780e:	0e9b      	lsrs	r3, r3, #26
 8007810:	f003 021f 	and.w	r2, r3, #31
 8007814:	e01e      	b.n	8007854 <HAL_ADC_ConfigChannel+0x198>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2100      	movs	r1, #0
 800781c:	4618      	mov	r0, r3
 800781e:	f7ff f845 	bl	80068ac <LL_ADC_GetOffsetChannel>
 8007822:	4603      	mov	r3, r0
 8007824:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007828:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800782c:	fa93 f3a3 	rbit	r3, r3
 8007830:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007834:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007838:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800783c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d101      	bne.n	8007848 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8007844:	2320      	movs	r3, #32
 8007846:	e004      	b.n	8007852 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8007848:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800784c:	fab3 f383 	clz	r3, r3
 8007850:	b2db      	uxtb	r3, r3
 8007852:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800785c:	2b00      	cmp	r3, #0
 800785e:	d105      	bne.n	800786c <HAL_ADC_ConfigChannel+0x1b0>
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	0e9b      	lsrs	r3, r3, #26
 8007866:	f003 031f 	and.w	r3, r3, #31
 800786a:	e018      	b.n	800789e <HAL_ADC_ConfigChannel+0x1e2>
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007874:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007878:	fa93 f3a3 	rbit	r3, r3
 800787c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8007880:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007884:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8007888:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800788c:	2b00      	cmp	r3, #0
 800788e:	d101      	bne.n	8007894 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8007890:	2320      	movs	r3, #32
 8007892:	e004      	b.n	800789e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8007894:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007898:	fab3 f383 	clz	r3, r3
 800789c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800789e:	429a      	cmp	r2, r3
 80078a0:	d106      	bne.n	80078b0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2200      	movs	r2, #0
 80078a8:	2100      	movs	r1, #0
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7ff f814 	bl	80068d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2101      	movs	r1, #1
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7fe fff8 	bl	80068ac <LL_ADC_GetOffsetChannel>
 80078bc:	4603      	mov	r3, r0
 80078be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d10a      	bne.n	80078dc <HAL_ADC_ConfigChannel+0x220>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2101      	movs	r1, #1
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7fe ffed 	bl	80068ac <LL_ADC_GetOffsetChannel>
 80078d2:	4603      	mov	r3, r0
 80078d4:	0e9b      	lsrs	r3, r3, #26
 80078d6:	f003 021f 	and.w	r2, r3, #31
 80078da:	e01e      	b.n	800791a <HAL_ADC_ConfigChannel+0x25e>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2101      	movs	r1, #1
 80078e2:	4618      	mov	r0, r3
 80078e4:	f7fe ffe2 	bl	80068ac <LL_ADC_GetOffsetChannel>
 80078e8:	4603      	mov	r3, r0
 80078ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80078f2:	fa93 f3a3 	rbit	r3, r3
 80078f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80078fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80078fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8007902:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007906:	2b00      	cmp	r3, #0
 8007908:	d101      	bne.n	800790e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800790a:	2320      	movs	r3, #32
 800790c:	e004      	b.n	8007918 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800790e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007912:	fab3 f383 	clz	r3, r3
 8007916:	b2db      	uxtb	r3, r3
 8007918:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007922:	2b00      	cmp	r3, #0
 8007924:	d105      	bne.n	8007932 <HAL_ADC_ConfigChannel+0x276>
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	0e9b      	lsrs	r3, r3, #26
 800792c:	f003 031f 	and.w	r3, r3, #31
 8007930:	e018      	b.n	8007964 <HAL_ADC_ConfigChannel+0x2a8>
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800793a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800793e:	fa93 f3a3 	rbit	r3, r3
 8007942:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8007946:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800794a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800794e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007952:	2b00      	cmp	r3, #0
 8007954:	d101      	bne.n	800795a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8007956:	2320      	movs	r3, #32
 8007958:	e004      	b.n	8007964 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800795a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800795e:	fab3 f383 	clz	r3, r3
 8007962:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007964:	429a      	cmp	r2, r3
 8007966:	d106      	bne.n	8007976 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2200      	movs	r2, #0
 800796e:	2101      	movs	r1, #1
 8007970:	4618      	mov	r0, r3
 8007972:	f7fe ffb1 	bl	80068d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2102      	movs	r1, #2
 800797c:	4618      	mov	r0, r3
 800797e:	f7fe ff95 	bl	80068ac <LL_ADC_GetOffsetChannel>
 8007982:	4603      	mov	r3, r0
 8007984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007988:	2b00      	cmp	r3, #0
 800798a:	d10a      	bne.n	80079a2 <HAL_ADC_ConfigChannel+0x2e6>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2102      	movs	r1, #2
 8007992:	4618      	mov	r0, r3
 8007994:	f7fe ff8a 	bl	80068ac <LL_ADC_GetOffsetChannel>
 8007998:	4603      	mov	r3, r0
 800799a:	0e9b      	lsrs	r3, r3, #26
 800799c:	f003 021f 	and.w	r2, r3, #31
 80079a0:	e01e      	b.n	80079e0 <HAL_ADC_ConfigChannel+0x324>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2102      	movs	r1, #2
 80079a8:	4618      	mov	r0, r3
 80079aa:	f7fe ff7f 	bl	80068ac <LL_ADC_GetOffsetChannel>
 80079ae:	4603      	mov	r3, r0
 80079b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80079b8:	fa93 f3a3 	rbit	r3, r3
 80079bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80079c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80079c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80079c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d101      	bne.n	80079d4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80079d0:	2320      	movs	r3, #32
 80079d2:	e004      	b.n	80079de <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80079d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80079d8:	fab3 f383 	clz	r3, r3
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d105      	bne.n	80079f8 <HAL_ADC_ConfigChannel+0x33c>
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	0e9b      	lsrs	r3, r3, #26
 80079f2:	f003 031f 	and.w	r3, r3, #31
 80079f6:	e016      	b.n	8007a26 <HAL_ADC_ConfigChannel+0x36a>
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a00:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007a04:	fa93 f3a3 	rbit	r3, r3
 8007a08:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8007a0a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007a0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8007a10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d101      	bne.n	8007a1c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8007a18:	2320      	movs	r3, #32
 8007a1a:	e004      	b.n	8007a26 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8007a1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a20:	fab3 f383 	clz	r3, r3
 8007a24:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d106      	bne.n	8007a38 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	2102      	movs	r1, #2
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7fe ff50 	bl	80068d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2103      	movs	r1, #3
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fe ff34 	bl	80068ac <LL_ADC_GetOffsetChannel>
 8007a44:	4603      	mov	r3, r0
 8007a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d10a      	bne.n	8007a64 <HAL_ADC_ConfigChannel+0x3a8>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2103      	movs	r1, #3
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7fe ff29 	bl	80068ac <LL_ADC_GetOffsetChannel>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	0e9b      	lsrs	r3, r3, #26
 8007a5e:	f003 021f 	and.w	r2, r3, #31
 8007a62:	e017      	b.n	8007a94 <HAL_ADC_ConfigChannel+0x3d8>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2103      	movs	r1, #3
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7fe ff1e 	bl	80068ac <LL_ADC_GetOffsetChannel>
 8007a70:	4603      	mov	r3, r0
 8007a72:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a76:	fa93 f3a3 	rbit	r3, r3
 8007a7a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8007a7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a7e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8007a80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d101      	bne.n	8007a8a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8007a86:	2320      	movs	r3, #32
 8007a88:	e003      	b.n	8007a92 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8007a8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a8c:	fab3 f383 	clz	r3, r3
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d105      	bne.n	8007aac <HAL_ADC_ConfigChannel+0x3f0>
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	0e9b      	lsrs	r3, r3, #26
 8007aa6:	f003 031f 	and.w	r3, r3, #31
 8007aaa:	e011      	b.n	8007ad0 <HAL_ADC_ConfigChannel+0x414>
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ab2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007ab4:	fa93 f3a3 	rbit	r3, r3
 8007ab8:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8007aba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007abc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8007abe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d101      	bne.n	8007ac8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8007ac4:	2320      	movs	r3, #32
 8007ac6:	e003      	b.n	8007ad0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8007ac8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007aca:	fab3 f383 	clz	r3, r3
 8007ace:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d106      	bne.n	8007ae2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	2103      	movs	r1, #3
 8007adc:	4618      	mov	r0, r3
 8007ade:	f7fe fefb 	bl	80068d8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7ff f88e 	bl	8006c08 <LL_ADC_IsEnabled>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	f040 8140 	bne.w	8007d74 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6818      	ldr	r0, [r3, #0]
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	6819      	ldr	r1, [r3, #0]
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	461a      	mov	r2, r3
 8007b02:	f7fe ffcb 	bl	8006a9c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	4a8f      	ldr	r2, [pc, #572]	@ (8007d48 <HAL_ADC_ConfigChannel+0x68c>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	f040 8131 	bne.w	8007d74 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d10b      	bne.n	8007b3a <HAL_ADC_ConfigChannel+0x47e>
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	0e9b      	lsrs	r3, r3, #26
 8007b28:	3301      	adds	r3, #1
 8007b2a:	f003 031f 	and.w	r3, r3, #31
 8007b2e:	2b09      	cmp	r3, #9
 8007b30:	bf94      	ite	ls
 8007b32:	2301      	movls	r3, #1
 8007b34:	2300      	movhi	r3, #0
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	e019      	b.n	8007b6e <HAL_ADC_ConfigChannel+0x4b2>
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b42:	fa93 f3a3 	rbit	r3, r3
 8007b46:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8007b48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b4a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8007b4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d101      	bne.n	8007b56 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8007b52:	2320      	movs	r3, #32
 8007b54:	e003      	b.n	8007b5e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8007b56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b58:	fab3 f383 	clz	r3, r3
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	3301      	adds	r3, #1
 8007b60:	f003 031f 	and.w	r3, r3, #31
 8007b64:	2b09      	cmp	r3, #9
 8007b66:	bf94      	ite	ls
 8007b68:	2301      	movls	r3, #1
 8007b6a:	2300      	movhi	r3, #0
 8007b6c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d079      	beq.n	8007c66 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d107      	bne.n	8007b8e <HAL_ADC_ConfigChannel+0x4d2>
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	0e9b      	lsrs	r3, r3, #26
 8007b84:	3301      	adds	r3, #1
 8007b86:	069b      	lsls	r3, r3, #26
 8007b88:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007b8c:	e015      	b.n	8007bba <HAL_ADC_ConfigChannel+0x4fe>
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b96:	fa93 f3a3 	rbit	r3, r3
 8007b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8007b9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b9e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8007ba0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d101      	bne.n	8007baa <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8007ba6:	2320      	movs	r3, #32
 8007ba8:	e003      	b.n	8007bb2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8007baa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bac:	fab3 f383 	clz	r3, r3
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	069b      	lsls	r3, r3, #26
 8007bb6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d109      	bne.n	8007bda <HAL_ADC_ConfigChannel+0x51e>
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	0e9b      	lsrs	r3, r3, #26
 8007bcc:	3301      	adds	r3, #1
 8007bce:	f003 031f 	and.w	r3, r3, #31
 8007bd2:	2101      	movs	r1, #1
 8007bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8007bd8:	e017      	b.n	8007c0a <HAL_ADC_ConfigChannel+0x54e>
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007be0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007be2:	fa93 f3a3 	rbit	r3, r3
 8007be6:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8007be8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bea:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8007bec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d101      	bne.n	8007bf6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8007bf2:	2320      	movs	r3, #32
 8007bf4:	e003      	b.n	8007bfe <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8007bf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bf8:	fab3 f383 	clz	r3, r3
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	3301      	adds	r3, #1
 8007c00:	f003 031f 	and.w	r3, r3, #31
 8007c04:	2101      	movs	r1, #1
 8007c06:	fa01 f303 	lsl.w	r3, r1, r3
 8007c0a:	ea42 0103 	orr.w	r1, r2, r3
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d10a      	bne.n	8007c30 <HAL_ADC_ConfigChannel+0x574>
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	0e9b      	lsrs	r3, r3, #26
 8007c20:	3301      	adds	r3, #1
 8007c22:	f003 021f 	and.w	r2, r3, #31
 8007c26:	4613      	mov	r3, r2
 8007c28:	005b      	lsls	r3, r3, #1
 8007c2a:	4413      	add	r3, r2
 8007c2c:	051b      	lsls	r3, r3, #20
 8007c2e:	e018      	b.n	8007c62 <HAL_ADC_ConfigChannel+0x5a6>
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c38:	fa93 f3a3 	rbit	r3, r3
 8007c3c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8007c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8007c42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d101      	bne.n	8007c4c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8007c48:	2320      	movs	r3, #32
 8007c4a:	e003      	b.n	8007c54 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8007c4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c4e:	fab3 f383 	clz	r3, r3
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	3301      	adds	r3, #1
 8007c56:	f003 021f 	and.w	r2, r3, #31
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	005b      	lsls	r3, r3, #1
 8007c5e:	4413      	add	r3, r2
 8007c60:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007c62:	430b      	orrs	r3, r1
 8007c64:	e081      	b.n	8007d6a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d107      	bne.n	8007c82 <HAL_ADC_ConfigChannel+0x5c6>
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	0e9b      	lsrs	r3, r3, #26
 8007c78:	3301      	adds	r3, #1
 8007c7a:	069b      	lsls	r3, r3, #26
 8007c7c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007c80:	e015      	b.n	8007cae <HAL_ADC_ConfigChannel+0x5f2>
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c8a:	fa93 f3a3 	rbit	r3, r3
 8007c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8007c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c92:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8007c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d101      	bne.n	8007c9e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8007c9a:	2320      	movs	r3, #32
 8007c9c:	e003      	b.n	8007ca6 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8007c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca0:	fab3 f383 	clz	r3, r3
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	069b      	lsls	r3, r3, #26
 8007caa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d109      	bne.n	8007cce <HAL_ADC_ConfigChannel+0x612>
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	0e9b      	lsrs	r3, r3, #26
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	f003 031f 	and.w	r3, r3, #31
 8007cc6:	2101      	movs	r1, #1
 8007cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8007ccc:	e017      	b.n	8007cfe <HAL_ADC_ConfigChannel+0x642>
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cd4:	6a3b      	ldr	r3, [r7, #32]
 8007cd6:	fa93 f3a3 	rbit	r3, r3
 8007cda:	61fb      	str	r3, [r7, #28]
  return result;
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d101      	bne.n	8007cea <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8007ce6:	2320      	movs	r3, #32
 8007ce8:	e003      	b.n	8007cf2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8007cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cec:	fab3 f383 	clz	r3, r3
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	f003 031f 	and.w	r3, r3, #31
 8007cf8:	2101      	movs	r1, #1
 8007cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8007cfe:	ea42 0103 	orr.w	r1, r2, r3
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d10d      	bne.n	8007d2a <HAL_ADC_ConfigChannel+0x66e>
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	0e9b      	lsrs	r3, r3, #26
 8007d14:	3301      	adds	r3, #1
 8007d16:	f003 021f 	and.w	r2, r3, #31
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	005b      	lsls	r3, r3, #1
 8007d1e:	4413      	add	r3, r2
 8007d20:	3b1e      	subs	r3, #30
 8007d22:	051b      	lsls	r3, r3, #20
 8007d24:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007d28:	e01e      	b.n	8007d68 <HAL_ADC_ConfigChannel+0x6ac>
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	fa93 f3a3 	rbit	r3, r3
 8007d36:	613b      	str	r3, [r7, #16]
  return result;
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007d3c:	69bb      	ldr	r3, [r7, #24]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d104      	bne.n	8007d4c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8007d42:	2320      	movs	r3, #32
 8007d44:	e006      	b.n	8007d54 <HAL_ADC_ConfigChannel+0x698>
 8007d46:	bf00      	nop
 8007d48:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	fab3 f383 	clz	r3, r3
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	3301      	adds	r3, #1
 8007d56:	f003 021f 	and.w	r2, r3, #31
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	005b      	lsls	r3, r3, #1
 8007d5e:	4413      	add	r3, r2
 8007d60:	3b1e      	subs	r3, #30
 8007d62:	051b      	lsls	r3, r3, #20
 8007d64:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007d68:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8007d6a:	683a      	ldr	r2, [r7, #0]
 8007d6c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007d6e:	4619      	mov	r1, r3
 8007d70:	f7fe fe68 	bl	8006a44 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	4b3f      	ldr	r3, [pc, #252]	@ (8007e78 <HAL_ADC_ConfigChannel+0x7bc>)
 8007d7a:	4013      	ands	r3, r2
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d071      	beq.n	8007e64 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007d80:	483e      	ldr	r0, [pc, #248]	@ (8007e7c <HAL_ADC_ConfigChannel+0x7c0>)
 8007d82:	f7fe fd61 	bl	8006848 <LL_ADC_GetCommonPathInternalCh>
 8007d86:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a3c      	ldr	r2, [pc, #240]	@ (8007e80 <HAL_ADC_ConfigChannel+0x7c4>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d004      	beq.n	8007d9e <HAL_ADC_ConfigChannel+0x6e2>
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a3a      	ldr	r2, [pc, #232]	@ (8007e84 <HAL_ADC_ConfigChannel+0x7c8>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d127      	bne.n	8007dee <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007d9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007da2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d121      	bne.n	8007dee <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007db2:	d157      	bne.n	8007e64 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007db4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007db8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	482f      	ldr	r0, [pc, #188]	@ (8007e7c <HAL_ADC_ConfigChannel+0x7c0>)
 8007dc0:	f7fe fd2f 	bl	8006822 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007dc4:	4b30      	ldr	r3, [pc, #192]	@ (8007e88 <HAL_ADC_ConfigChannel+0x7cc>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	099b      	lsrs	r3, r3, #6
 8007dca:	4a30      	ldr	r2, [pc, #192]	@ (8007e8c <HAL_ADC_ConfigChannel+0x7d0>)
 8007dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8007dd0:	099b      	lsrs	r3, r3, #6
 8007dd2:	1c5a      	adds	r2, r3, #1
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	005b      	lsls	r3, r3, #1
 8007dd8:	4413      	add	r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007dde:	e002      	b.n	8007de6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	3b01      	subs	r3, #1
 8007de4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d1f9      	bne.n	8007de0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007dec:	e03a      	b.n	8007e64 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a27      	ldr	r2, [pc, #156]	@ (8007e90 <HAL_ADC_ConfigChannel+0x7d4>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d113      	bne.n	8007e20 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007df8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007dfc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d10d      	bne.n	8007e20 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a22      	ldr	r2, [pc, #136]	@ (8007e94 <HAL_ADC_ConfigChannel+0x7d8>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d02a      	beq.n	8007e64 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007e0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007e12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007e16:	4619      	mov	r1, r3
 8007e18:	4818      	ldr	r0, [pc, #96]	@ (8007e7c <HAL_ADC_ConfigChannel+0x7c0>)
 8007e1a:	f7fe fd02 	bl	8006822 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007e1e:	e021      	b.n	8007e64 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a1c      	ldr	r2, [pc, #112]	@ (8007e98 <HAL_ADC_ConfigChannel+0x7dc>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d11c      	bne.n	8007e64 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007e2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007e2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d116      	bne.n	8007e64 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a16      	ldr	r2, [pc, #88]	@ (8007e94 <HAL_ADC_ConfigChannel+0x7d8>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d011      	beq.n	8007e64 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007e40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007e44:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007e48:	4619      	mov	r1, r3
 8007e4a:	480c      	ldr	r0, [pc, #48]	@ (8007e7c <HAL_ADC_ConfigChannel+0x7c0>)
 8007e4c:	f7fe fce9 	bl	8006822 <LL_ADC_SetCommonPathInternalCh>
 8007e50:	e008      	b.n	8007e64 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e56:	f043 0220 	orr.w	r2, r3, #32
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8007e6c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	37d8      	adds	r7, #216	@ 0xd8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	80080000 	.word	0x80080000
 8007e7c:	50000300 	.word	0x50000300
 8007e80:	c3210000 	.word	0xc3210000
 8007e84:	90c00010 	.word	0x90c00010
 8007e88:	20000004 	.word	0x20000004
 8007e8c:	053e2d63 	.word	0x053e2d63
 8007e90:	c7520000 	.word	0xc7520000
 8007e94:	50000100 	.word	0x50000100
 8007e98:	cb840000 	.word	0xcb840000

08007e9c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b088      	sub	sp, #32
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7fe fef6 	bl	8006ca4 <LL_ADC_REG_IsConversionOngoing>
 8007eb8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7fe ff17 	bl	8006cf2 <LL_ADC_INJ_IsConversionOngoing>
 8007ec4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d103      	bne.n	8007ed4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f000 8098 	beq.w	8008004 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d02a      	beq.n	8007f38 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	7f5b      	ldrb	r3, [r3, #29]
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d126      	bne.n	8007f38 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	7f1b      	ldrb	r3, [r3, #28]
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d122      	bne.n	8007f38 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8007ef6:	e014      	b.n	8007f22 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	4a45      	ldr	r2, [pc, #276]	@ (8008010 <ADC_ConversionStop+0x174>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d90d      	bls.n	8007f1c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f04:	f043 0210 	orr.w	r2, r3, #16
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f10:	f043 0201 	orr.w	r2, r3, #1
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e074      	b.n	8008006 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f2c:	2b40      	cmp	r3, #64	@ 0x40
 8007f2e:	d1e3      	bne.n	8007ef8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2240      	movs	r2, #64	@ 0x40
 8007f36:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d014      	beq.n	8007f68 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7fe feae 	bl	8006ca4 <LL_ADC_REG_IsConversionOngoing>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00c      	beq.n	8007f68 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7fe fe6b 	bl	8006c2e <LL_ADC_IsDisableOngoing>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d104      	bne.n	8007f68 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7fe fe8a 	bl	8006c7c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d014      	beq.n	8007f98 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7fe febd 	bl	8006cf2 <LL_ADC_INJ_IsConversionOngoing>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00c      	beq.n	8007f98 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7fe fe53 	bl	8006c2e <LL_ADC_IsDisableOngoing>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d104      	bne.n	8007f98 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7fe fe99 	bl	8006cca <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	2b02      	cmp	r3, #2
 8007f9c:	d005      	beq.n	8007faa <ADC_ConversionStop+0x10e>
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	2b03      	cmp	r3, #3
 8007fa2:	d105      	bne.n	8007fb0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8007fa4:	230c      	movs	r3, #12
 8007fa6:	617b      	str	r3, [r7, #20]
        break;
 8007fa8:	e005      	b.n	8007fb6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8007faa:	2308      	movs	r3, #8
 8007fac:	617b      	str	r3, [r7, #20]
        break;
 8007fae:	e002      	b.n	8007fb6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8007fb0:	2304      	movs	r3, #4
 8007fb2:	617b      	str	r3, [r7, #20]
        break;
 8007fb4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8007fb6:	f7fe fbf3 	bl	80067a0 <HAL_GetTick>
 8007fba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007fbc:	e01b      	b.n	8007ff6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8007fbe:	f7fe fbef 	bl	80067a0 <HAL_GetTick>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	1ad3      	subs	r3, r2, r3
 8007fc8:	2b05      	cmp	r3, #5
 8007fca:	d914      	bls.n	8007ff6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	689a      	ldr	r2, [r3, #8]
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00d      	beq.n	8007ff6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fde:	f043 0210 	orr.w	r2, r3, #16
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fea:	f043 0201 	orr.w	r2, r3, #1
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e007      	b.n	8008006 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	689a      	ldr	r2, [r3, #8]
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	4013      	ands	r3, r2
 8008000:	2b00      	cmp	r3, #0
 8008002:	d1dc      	bne.n	8007fbe <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3720      	adds	r7, #32
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	a33fffff 	.word	0xa33fffff

08008014 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800801c:	2300      	movs	r3, #0
 800801e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4618      	mov	r0, r3
 8008026:	f7fe fdef 	bl	8006c08 <LL_ADC_IsEnabled>
 800802a:	4603      	mov	r3, r0
 800802c:	2b00      	cmp	r3, #0
 800802e:	d169      	bne.n	8008104 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	689a      	ldr	r2, [r3, #8]
 8008036:	4b36      	ldr	r3, [pc, #216]	@ (8008110 <ADC_Enable+0xfc>)
 8008038:	4013      	ands	r3, r2
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00d      	beq.n	800805a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008042:	f043 0210 	orr.w	r2, r3, #16
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800804e:	f043 0201 	orr.w	r2, r3, #1
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	e055      	b.n	8008106 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4618      	mov	r0, r3
 8008060:	f7fe fdaa 	bl	8006bb8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8008064:	482b      	ldr	r0, [pc, #172]	@ (8008114 <ADC_Enable+0x100>)
 8008066:	f7fe fbef 	bl	8006848 <LL_ADC_GetCommonPathInternalCh>
 800806a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800806c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8008070:	2b00      	cmp	r3, #0
 8008072:	d013      	beq.n	800809c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008074:	4b28      	ldr	r3, [pc, #160]	@ (8008118 <ADC_Enable+0x104>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	099b      	lsrs	r3, r3, #6
 800807a:	4a28      	ldr	r2, [pc, #160]	@ (800811c <ADC_Enable+0x108>)
 800807c:	fba2 2303 	umull	r2, r3, r2, r3
 8008080:	099b      	lsrs	r3, r3, #6
 8008082:	1c5a      	adds	r2, r3, #1
 8008084:	4613      	mov	r3, r2
 8008086:	005b      	lsls	r3, r3, #1
 8008088:	4413      	add	r3, r2
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800808e:	e002      	b.n	8008096 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	3b01      	subs	r3, #1
 8008094:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d1f9      	bne.n	8008090 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800809c:	f7fe fb80 	bl	80067a0 <HAL_GetTick>
 80080a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80080a2:	e028      	b.n	80080f6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7fe fdad 	bl	8006c08 <LL_ADC_IsEnabled>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d104      	bne.n	80080be <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4618      	mov	r0, r3
 80080ba:	f7fe fd7d 	bl	8006bb8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80080be:	f7fe fb6f 	bl	80067a0 <HAL_GetTick>
 80080c2:	4602      	mov	r2, r0
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	1ad3      	subs	r3, r2, r3
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d914      	bls.n	80080f6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f003 0301 	and.w	r3, r3, #1
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d00d      	beq.n	80080f6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080de:	f043 0210 	orr.w	r2, r3, #16
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080ea:	f043 0201 	orr.w	r2, r3, #1
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	e007      	b.n	8008106 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f003 0301 	and.w	r3, r3, #1
 8008100:	2b01      	cmp	r3, #1
 8008102:	d1cf      	bne.n	80080a4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	8000003f 	.word	0x8000003f
 8008114:	50000300 	.word	0x50000300
 8008118:	20000004 	.word	0x20000004
 800811c:	053e2d63 	.word	0x053e2d63

08008120 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4618      	mov	r0, r3
 800812e:	f7fe fd7e 	bl	8006c2e <LL_ADC_IsDisableOngoing>
 8008132:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4618      	mov	r0, r3
 800813a:	f7fe fd65 	bl	8006c08 <LL_ADC_IsEnabled>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d047      	beq.n	80081d4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d144      	bne.n	80081d4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	f003 030d 	and.w	r3, r3, #13
 8008154:	2b01      	cmp	r3, #1
 8008156:	d10c      	bne.n	8008172 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4618      	mov	r0, r3
 800815e:	f7fe fd3f 	bl	8006be0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2203      	movs	r2, #3
 8008168:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800816a:	f7fe fb19 	bl	80067a0 <HAL_GetTick>
 800816e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008170:	e029      	b.n	80081c6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008176:	f043 0210 	orr.w	r2, r3, #16
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008182:	f043 0201 	orr.w	r2, r3, #1
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	e023      	b.n	80081d6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800818e:	f7fe fb07 	bl	80067a0 <HAL_GetTick>
 8008192:	4602      	mov	r2, r0
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	1ad3      	subs	r3, r2, r3
 8008198:	2b02      	cmp	r3, #2
 800819a:	d914      	bls.n	80081c6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	f003 0301 	and.w	r3, r3, #1
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00d      	beq.n	80081c6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081ae:	f043 0210 	orr.w	r2, r3, #16
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081ba:	f043 0201 	orr.w	r2, r3, #1
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	e007      	b.n	80081d6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	f003 0301 	and.w	r3, r3, #1
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d1dc      	bne.n	800818e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3710      	adds	r7, #16
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b084      	sub	sp, #16
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ea:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081f0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d14b      	bne.n	8008290 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081fc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 0308 	and.w	r3, r3, #8
 800820e:	2b00      	cmp	r3, #0
 8008210:	d021      	beq.n	8008256 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4618      	mov	r0, r3
 8008218:	f7fe fbc2 	bl	80069a0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d032      	beq.n	8008288 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800822c:	2b00      	cmp	r3, #0
 800822e:	d12b      	bne.n	8008288 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008234:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008240:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008244:	2b00      	cmp	r3, #0
 8008246:	d11f      	bne.n	8008288 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800824c:	f043 0201 	orr.w	r2, r3, #1
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008254:	e018      	b.n	8008288 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	68db      	ldr	r3, [r3, #12]
 800825c:	f003 0302 	and.w	r3, r3, #2
 8008260:	2b00      	cmp	r3, #0
 8008262:	d111      	bne.n	8008288 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008268:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008274:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008278:	2b00      	cmp	r3, #0
 800827a:	d105      	bne.n	8008288 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008280:	f043 0201 	orr.w	r2, r3, #1
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008288:	68f8      	ldr	r0, [r7, #12]
 800828a:	f00f f999 	bl	80175c0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800828e:	e00e      	b.n	80082ae <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008294:	f003 0310 	and.w	r3, r3, #16
 8008298:	2b00      	cmp	r3, #0
 800829a:	d003      	beq.n	80082a4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800829c:	68f8      	ldr	r0, [r7, #12]
 800829e:	f7ff fa03 	bl	80076a8 <HAL_ADC_ErrorCallback>
}
 80082a2:	e004      	b.n	80082ae <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	4798      	blx	r3
}
 80082ae:	bf00      	nop
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b084      	sub	sp, #16
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082c2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80082c4:	68f8      	ldr	r0, [r7, #12]
 80082c6:	f7ff f9db 	bl	8007680 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80082ca:	bf00      	nop
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b084      	sub	sp, #16
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082de:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082e4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082f0:	f043 0204 	orr.w	r2, r3, #4
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	f7ff f9d5 	bl	80076a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80082fe:	bf00      	nop
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <LL_ADC_StartCalibration>:
{
 8008306:	b480      	push	{r7}
 8008308:	b083      	sub	sp, #12
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
 800830e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8008318:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800831c:	683a      	ldr	r2, [r7, #0]
 800831e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8008322:	4313      	orrs	r3, r2
 8008324:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	609a      	str	r2, [r3, #8]
}
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <LL_ADC_IsCalibrationOnGoing>:
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008348:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800834c:	d101      	bne.n	8008352 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800834e:	2301      	movs	r3, #1
 8008350:	e000      	b.n	8008354 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800836a:	2300      	movs	r3, #0
 800836c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8008374:	2b01      	cmp	r3, #1
 8008376:	d101      	bne.n	800837c <HAL_ADCEx_Calibration_Start+0x1c>
 8008378:	2302      	movs	r3, #2
 800837a:	e04d      	b.n	8008418 <HAL_ADCEx_Calibration_Start+0xb8>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f7ff fecb 	bl	8008120 <ADC_Disable>
 800838a:	4603      	mov	r3, r0
 800838c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800838e:	7bfb      	ldrb	r3, [r7, #15]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d136      	bne.n	8008402 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008398:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800839c:	f023 0302 	bic.w	r3, r3, #2
 80083a0:	f043 0202 	orr.w	r2, r3, #2
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6839      	ldr	r1, [r7, #0]
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7ff ffa9 	bl	8008306 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80083b4:	e014      	b.n	80083e0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	3301      	adds	r3, #1
 80083ba:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	4a18      	ldr	r2, [pc, #96]	@ (8008420 <HAL_ADCEx_Calibration_Start+0xc0>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d90d      	bls.n	80083e0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083c8:	f023 0312 	bic.w	r3, r3, #18
 80083cc:	f043 0210 	orr.w	r2, r3, #16
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	e01b      	b.n	8008418 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7ff ffa7 	bl	8008338 <LL_ADC_IsCalibrationOnGoing>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d1e2      	bne.n	80083b6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083f4:	f023 0303 	bic.w	r3, r3, #3
 80083f8:	f043 0201 	orr.w	r2, r3, #1
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008400:	e005      	b.n	800840e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008406:	f043 0210 	orr.w	r2, r3, #16
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8008416:	7bfb      	ldrb	r3, [r7, #15]
}
 8008418:	4618      	mov	r0, r3
 800841a:	3710      	adds	r7, #16
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}
 8008420:	0004de01 	.word	0x0004de01

08008424 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800842c:	bf00      	nop
 800842e:	370c      	adds	r7, #12
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8008440:	bf00      	nop
 8008442:	370c      	adds	r7, #12
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800844c:	b480      	push	{r7}
 800844e:	b083      	sub	sp, #12
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8008454:	bf00      	nop
 8008456:	370c      	adds	r7, #12
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8008468:	bf00      	nop
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800847c:	bf00      	nop
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <__NVIC_SetPriorityGrouping>:
{
 8008488:	b480      	push	{r7}
 800848a:	b085      	sub	sp, #20
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f003 0307 	and.w	r3, r3, #7
 8008496:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008498:	4b0c      	ldr	r3, [pc, #48]	@ (80084cc <__NVIC_SetPriorityGrouping+0x44>)
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800849e:	68ba      	ldr	r2, [r7, #8]
 80084a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80084a4:	4013      	ands	r3, r2
 80084a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80084b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80084b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80084ba:	4a04      	ldr	r2, [pc, #16]	@ (80084cc <__NVIC_SetPriorityGrouping+0x44>)
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	60d3      	str	r3, [r2, #12]
}
 80084c0:	bf00      	nop
 80084c2:	3714      	adds	r7, #20
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr
 80084cc:	e000ed00 	.word	0xe000ed00

080084d0 <__NVIC_GetPriorityGrouping>:
{
 80084d0:	b480      	push	{r7}
 80084d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80084d4:	4b04      	ldr	r3, [pc, #16]	@ (80084e8 <__NVIC_GetPriorityGrouping+0x18>)
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	0a1b      	lsrs	r3, r3, #8
 80084da:	f003 0307 	and.w	r3, r3, #7
}
 80084de:	4618      	mov	r0, r3
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr
 80084e8:	e000ed00 	.word	0xe000ed00

080084ec <__NVIC_EnableIRQ>:
{
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	4603      	mov	r3, r0
 80084f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80084f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	db0b      	blt.n	8008516 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80084fe:	79fb      	ldrb	r3, [r7, #7]
 8008500:	f003 021f 	and.w	r2, r3, #31
 8008504:	4907      	ldr	r1, [pc, #28]	@ (8008524 <__NVIC_EnableIRQ+0x38>)
 8008506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800850a:	095b      	lsrs	r3, r3, #5
 800850c:	2001      	movs	r0, #1
 800850e:	fa00 f202 	lsl.w	r2, r0, r2
 8008512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008516:	bf00      	nop
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr
 8008522:	bf00      	nop
 8008524:	e000e100 	.word	0xe000e100

08008528 <__NVIC_SetPriority>:
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	4603      	mov	r3, r0
 8008530:	6039      	str	r1, [r7, #0]
 8008532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008538:	2b00      	cmp	r3, #0
 800853a:	db0a      	blt.n	8008552 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	b2da      	uxtb	r2, r3
 8008540:	490c      	ldr	r1, [pc, #48]	@ (8008574 <__NVIC_SetPriority+0x4c>)
 8008542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008546:	0112      	lsls	r2, r2, #4
 8008548:	b2d2      	uxtb	r2, r2
 800854a:	440b      	add	r3, r1
 800854c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008550:	e00a      	b.n	8008568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	b2da      	uxtb	r2, r3
 8008556:	4908      	ldr	r1, [pc, #32]	@ (8008578 <__NVIC_SetPriority+0x50>)
 8008558:	79fb      	ldrb	r3, [r7, #7]
 800855a:	f003 030f 	and.w	r3, r3, #15
 800855e:	3b04      	subs	r3, #4
 8008560:	0112      	lsls	r2, r2, #4
 8008562:	b2d2      	uxtb	r2, r2
 8008564:	440b      	add	r3, r1
 8008566:	761a      	strb	r2, [r3, #24]
}
 8008568:	bf00      	nop
 800856a:	370c      	adds	r7, #12
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr
 8008574:	e000e100 	.word	0xe000e100
 8008578:	e000ed00 	.word	0xe000ed00

0800857c <NVIC_EncodePriority>:
{
 800857c:	b480      	push	{r7}
 800857e:	b089      	sub	sp, #36	@ 0x24
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f003 0307 	and.w	r3, r3, #7
 800858e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	f1c3 0307 	rsb	r3, r3, #7
 8008596:	2b04      	cmp	r3, #4
 8008598:	bf28      	it	cs
 800859a:	2304      	movcs	r3, #4
 800859c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	3304      	adds	r3, #4
 80085a2:	2b06      	cmp	r3, #6
 80085a4:	d902      	bls.n	80085ac <NVIC_EncodePriority+0x30>
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	3b03      	subs	r3, #3
 80085aa:	e000      	b.n	80085ae <NVIC_EncodePriority+0x32>
 80085ac:	2300      	movs	r3, #0
 80085ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80085b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80085b4:	69bb      	ldr	r3, [r7, #24]
 80085b6:	fa02 f303 	lsl.w	r3, r2, r3
 80085ba:	43da      	mvns	r2, r3
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	401a      	ands	r2, r3
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80085c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	fa01 f303 	lsl.w	r3, r1, r3
 80085ce:	43d9      	mvns	r1, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80085d4:	4313      	orrs	r3, r2
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3724      	adds	r7, #36	@ 0x24
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr

080085e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80085e2:	b580      	push	{r7, lr}
 80085e4:	b082      	sub	sp, #8
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f7ff ff4c 	bl	8008488 <__NVIC_SetPriorityGrouping>
}
 80085f0:	bf00      	nop
 80085f2:	3708      	adds	r7, #8
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b086      	sub	sp, #24
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	4603      	mov	r3, r0
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	607a      	str	r2, [r7, #4]
 8008604:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008606:	f7ff ff63 	bl	80084d0 <__NVIC_GetPriorityGrouping>
 800860a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	68b9      	ldr	r1, [r7, #8]
 8008610:	6978      	ldr	r0, [r7, #20]
 8008612:	f7ff ffb3 	bl	800857c <NVIC_EncodePriority>
 8008616:	4602      	mov	r2, r0
 8008618:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800861c:	4611      	mov	r1, r2
 800861e:	4618      	mov	r0, r3
 8008620:	f7ff ff82 	bl	8008528 <__NVIC_SetPriority>
}
 8008624:	bf00      	nop
 8008626:	3718      	adds	r7, #24
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	4603      	mov	r3, r0
 8008634:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800863a:	4618      	mov	r0, r3
 800863c:	f7ff ff56 	bl	80084ec <__NVIC_EnableIRQ>
}
 8008640:	bf00      	nop
 8008642:	3708      	adds	r7, #8
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d101      	bne.n	800865a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	e014      	b.n	8008684 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	791b      	ldrb	r3, [r3, #4]
 800865e:	b2db      	uxtb	r3, r3
 8008660:	2b00      	cmp	r3, #0
 8008662:	d105      	bne.n	8008670 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f7fb f85c 	bl	8003728 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2202      	movs	r2, #2
 8008674:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8008682:	2300      	movs	r3, #0
}
 8008684:	4618      	mov	r0, r3
 8008686:	3708      	adds	r7, #8
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b088      	sub	sp, #32
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	607a      	str	r2, [r7, #4]
 8008698:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d101      	bne.n	80086a4 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	e0b2      	b.n	800880a <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	795b      	ldrb	r3, [r3, #5]
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d101      	bne.n	80086b0 <HAL_DAC_Start_DMA+0x24>
 80086ac:	2302      	movs	r3, #2
 80086ae:	e0ac      	b.n	800880a <HAL_DAC_Start_DMA+0x17e>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2201      	movs	r2, #1
 80086b4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2202      	movs	r2, #2
 80086ba:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d129      	bne.n	8008716 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	4a53      	ldr	r2, [pc, #332]	@ (8008814 <HAL_DAC_Start_DMA+0x188>)
 80086c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	4a52      	ldr	r2, [pc, #328]	@ (8008818 <HAL_DAC_Start_DMA+0x18c>)
 80086d0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	4a51      	ldr	r2, [pc, #324]	@ (800881c <HAL_DAC_Start_DMA+0x190>)
 80086d8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80086e8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80086ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d003      	beq.n	80086f8 <HAL_DAC_Start_DMA+0x6c>
 80086f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f2:	2b04      	cmp	r3, #4
 80086f4:	d005      	beq.n	8008702 <HAL_DAC_Start_DMA+0x76>
 80086f6:	e009      	b.n	800870c <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	3308      	adds	r3, #8
 80086fe:	61bb      	str	r3, [r7, #24]
        break;
 8008700:	e033      	b.n	800876a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	330c      	adds	r3, #12
 8008708:	61bb      	str	r3, [r7, #24]
        break;
 800870a:	e02e      	b.n	800876a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	3310      	adds	r3, #16
 8008712:	61bb      	str	r3, [r7, #24]
        break;
 8008714:	e029      	b.n	800876a <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	4a41      	ldr	r2, [pc, #260]	@ (8008820 <HAL_DAC_Start_DMA+0x194>)
 800871c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	4a40      	ldr	r2, [pc, #256]	@ (8008824 <HAL_DAC_Start_DMA+0x198>)
 8008724:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	4a3f      	ldr	r2, [pc, #252]	@ (8008828 <HAL_DAC_Start_DMA+0x19c>)
 800872c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800873c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800873e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008740:	2b00      	cmp	r3, #0
 8008742:	d003      	beq.n	800874c <HAL_DAC_Start_DMA+0xc0>
 8008744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008746:	2b04      	cmp	r3, #4
 8008748:	d005      	beq.n	8008756 <HAL_DAC_Start_DMA+0xca>
 800874a:	e009      	b.n	8008760 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	3314      	adds	r3, #20
 8008752:	61bb      	str	r3, [r7, #24]
        break;
 8008754:	e009      	b.n	800876a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	3318      	adds	r3, #24
 800875c:	61bb      	str	r3, [r7, #24]
        break;
 800875e:	e004      	b.n	800876a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	331c      	adds	r3, #28
 8008766:	61bb      	str	r3, [r7, #24]
        break;
 8008768:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d111      	bne.n	8008794 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800877e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6898      	ldr	r0, [r3, #8]
 8008784:	6879      	ldr	r1, [r7, #4]
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	69ba      	ldr	r2, [r7, #24]
 800878a:	f000 fbbb 	bl	8008f04 <HAL_DMA_Start_IT>
 800878e:	4603      	mov	r3, r0
 8008790:	77fb      	strb	r3, [r7, #31]
 8008792:	e010      	b.n	80087b6 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80087a2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	68d8      	ldr	r0, [r3, #12]
 80087a8:	6879      	ldr	r1, [r7, #4]
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	69ba      	ldr	r2, [r7, #24]
 80087ae:	f000 fba9 	bl	8008f04 <HAL_DMA_Start_IT>
 80087b2:	4603      	mov	r3, r0
 80087b4:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2200      	movs	r2, #0
 80087ba:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80087bc:	7ffb      	ldrb	r3, [r7, #31]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d11c      	bne.n	80087fc <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	6819      	ldr	r1, [r3, #0]
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	f003 0310 	and.w	r3, r3, #16
 80087ce:	2201      	movs	r2, #1
 80087d0:	409a      	lsls	r2, r3
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	430a      	orrs	r2, r1
 80087d8:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80087da:	4b14      	ldr	r3, [pc, #80]	@ (800882c <HAL_DAC_Start_DMA+0x1a0>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	099b      	lsrs	r3, r3, #6
 80087e0:	4a13      	ldr	r2, [pc, #76]	@ (8008830 <HAL_DAC_Start_DMA+0x1a4>)
 80087e2:	fba2 2303 	umull	r2, r3, r2, r3
 80087e6:	099b      	lsrs	r3, r3, #6
 80087e8:	3301      	adds	r3, #1
 80087ea:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 80087ec:	e002      	b.n	80087f4 <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	3b01      	subs	r3, #1
 80087f2:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d1f9      	bne.n	80087ee <HAL_DAC_Start_DMA+0x162>
 80087fa:	e005      	b.n	8008808 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	691b      	ldr	r3, [r3, #16]
 8008800:	f043 0204 	orr.w	r2, r3, #4
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8008808:	7ffb      	ldrb	r3, [r7, #31]
}
 800880a:	4618      	mov	r0, r3
 800880c:	3720      	adds	r7, #32
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	08008ca1 	.word	0x08008ca1
 8008818:	08008cc3 	.word	0x08008cc3
 800881c:	08008cdf 	.word	0x08008cdf
 8008820:	08008d49 	.word	0x08008d49
 8008824:	08008d6b 	.word	0x08008d6b
 8008828:	08008d87 	.word	0x08008d87
 800882c:	20000004 	.word	0x20000004
 8008830:	053e2d63 	.word	0x053e2d63

08008834 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800884a:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008852:	2b00      	cmp	r3, #0
 8008854:	d01d      	beq.n	8008892 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800885c:	2b00      	cmp	r3, #0
 800885e:	d018      	beq.n	8008892 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2204      	movs	r2, #4
 8008864:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	f043 0201 	orr.w	r2, r3, #1
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800887a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800888a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 f845 	bl	800891c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008898:	2b00      	cmp	r3, #0
 800889a:	d01d      	beq.n	80088d8 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d018      	beq.n	80088d8 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2204      	movs	r2, #4
 80088aa:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	691b      	ldr	r3, [r3, #16]
 80088b0:	f043 0202 	orr.w	r2, r3, #2
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80088c0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80088d0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 fa2e 	bl	8008d34 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80088d8:	bf00      	nop
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80088e8:	bf00      	nop
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80088fc:	bf00      	nop
 80088fe:	370c      	adds	r7, #12
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr

08008908 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8008908:	b480      	push	{r7}
 800890a:	b083      	sub	sp, #12
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8008910:	bf00      	nop
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8008924:	bf00      	nop
 8008926:	370c      	adds	r7, #12
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr

08008930 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b08a      	sub	sp, #40	@ 0x28
 8008934:	af00      	add	r7, sp, #0
 8008936:	60f8      	str	r0, [r7, #12]
 8008938:	60b9      	str	r1, [r7, #8]
 800893a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800893c:	2300      	movs	r3, #0
 800893e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d002      	beq.n	800894c <HAL_DAC_ConfigChannel+0x1c>
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d101      	bne.n	8008950 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800894c:	2301      	movs	r3, #1
 800894e:	e19e      	b.n	8008c8e <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	795b      	ldrb	r3, [r3, #5]
 8008954:	2b01      	cmp	r3, #1
 8008956:	d101      	bne.n	800895c <HAL_DAC_ConfigChannel+0x2c>
 8008958:	2302      	movs	r3, #2
 800895a:	e198      	b.n	8008c8e <HAL_DAC_ConfigChannel+0x35e>
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2201      	movs	r2, #1
 8008960:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2202      	movs	r2, #2
 8008966:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	2b04      	cmp	r3, #4
 800896e:	d17a      	bne.n	8008a66 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8008970:	f7fd ff16 	bl	80067a0 <HAL_GetTick>
 8008974:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d13d      	bne.n	80089f8 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800897c:	e018      	b.n	80089b0 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800897e:	f7fd ff0f 	bl	80067a0 <HAL_GetTick>
 8008982:	4602      	mov	r2, r0
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	1ad3      	subs	r3, r2, r3
 8008988:	2b01      	cmp	r3, #1
 800898a:	d911      	bls.n	80089b0 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008992:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008996:	2b00      	cmp	r3, #0
 8008998:	d00a      	beq.n	80089b0 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	f043 0208 	orr.w	r2, r3, #8
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2203      	movs	r2, #3
 80089aa:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80089ac:	2303      	movs	r3, #3
 80089ae:	e16e      	b.n	8008c8e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d1df      	bne.n	800897e <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	68ba      	ldr	r2, [r7, #8]
 80089c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80089c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80089c8:	e020      	b.n	8008a0c <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80089ca:	f7fd fee9 	bl	80067a0 <HAL_GetTick>
 80089ce:	4602      	mov	r2, r0
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d90f      	bls.n	80089f8 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089de:	2b00      	cmp	r3, #0
 80089e0:	da0a      	bge.n	80089f8 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	691b      	ldr	r3, [r3, #16]
 80089e6:	f043 0208 	orr.w	r2, r3, #8
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2203      	movs	r2, #3
 80089f2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80089f4:	2303      	movs	r3, #3
 80089f6:	e14a      	b.n	8008c8e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	dbe3      	blt.n	80089ca <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68ba      	ldr	r2, [r7, #8]
 8008a08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008a0a:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f003 0310 	and.w	r3, r3, #16
 8008a18:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8008a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8008a20:	43db      	mvns	r3, r3
 8008a22:	ea02 0103 	and.w	r1, r2, r3
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f003 0310 	and.w	r3, r3, #16
 8008a30:	409a      	lsls	r2, r3
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	430a      	orrs	r2, r1
 8008a38:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f003 0310 	and.w	r3, r3, #16
 8008a46:	21ff      	movs	r1, #255	@ 0xff
 8008a48:	fa01 f303 	lsl.w	r3, r1, r3
 8008a4c:	43db      	mvns	r3, r3
 8008a4e:	ea02 0103 	and.w	r1, r2, r3
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f003 0310 	and.w	r3, r3, #16
 8008a5c:	409a      	lsls	r2, r3
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	430a      	orrs	r2, r1
 8008a64:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	69db      	ldr	r3, [r3, #28]
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d11d      	bne.n	8008aaa <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a74:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f003 0310 	and.w	r3, r3, #16
 8008a7c:	221f      	movs	r2, #31
 8008a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a82:	43db      	mvns	r3, r3
 8008a84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a86:	4013      	ands	r3, r2
 8008a88:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	6a1b      	ldr	r3, [r3, #32]
 8008a8e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f003 0310 	and.w	r3, r3, #16
 8008a96:	697a      	ldr	r2, [r7, #20]
 8008a98:	fa02 f303 	lsl.w	r3, r2, r3
 8008a9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008aa8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f003 0310 	and.w	r3, r3, #16
 8008ab8:	2207      	movs	r2, #7
 8008aba:	fa02 f303 	lsl.w	r3, r2, r3
 8008abe:	43db      	mvns	r3, r3
 8008ac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ac2:	4013      	ands	r3, r2
 8008ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	699b      	ldr	r3, [r3, #24]
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d102      	bne.n	8008ad4 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	623b      	str	r3, [r7, #32]
 8008ad2:	e00f      	b.n	8008af4 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	699b      	ldr	r3, [r3, #24]
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d102      	bne.n	8008ae2 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8008adc:	2301      	movs	r3, #1
 8008ade:	623b      	str	r3, [r7, #32]
 8008ae0:	e008      	b.n	8008af4 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	695b      	ldr	r3, [r3, #20]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d102      	bne.n	8008af0 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8008aea:	2301      	movs	r3, #1
 8008aec:	623b      	str	r3, [r7, #32]
 8008aee:	e001      	b.n	8008af4 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8008af0:	2300      	movs	r3, #0
 8008af2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	689a      	ldr	r2, [r3, #8]
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	695b      	ldr	r3, [r3, #20]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	6a3a      	ldr	r2, [r7, #32]
 8008b00:	4313      	orrs	r3, r2
 8008b02:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f003 0310 	and.w	r3, r3, #16
 8008b0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b12:	43db      	mvns	r3, r3
 8008b14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b16:	4013      	ands	r3, r2
 8008b18:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	791b      	ldrb	r3, [r3, #4]
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d102      	bne.n	8008b28 <HAL_DAC_ConfigChannel+0x1f8>
 8008b22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008b26:	e000      	b.n	8008b2a <HAL_DAC_ConfigChannel+0x1fa>
 8008b28:	2300      	movs	r3, #0
 8008b2a:	697a      	ldr	r2, [r7, #20]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f003 0310 	and.w	r3, r3, #16
 8008b36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b3e:	43db      	mvns	r3, r3
 8008b40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b42:	4013      	ands	r3, r2
 8008b44:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	795b      	ldrb	r3, [r3, #5]
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d102      	bne.n	8008b54 <HAL_DAC_ConfigChannel+0x224>
 8008b4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008b52:	e000      	b.n	8008b56 <HAL_DAC_ConfigChannel+0x226>
 8008b54:	2300      	movs	r3, #0
 8008b56:	697a      	ldr	r2, [r7, #20]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8008b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b5e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8008b62:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2b02      	cmp	r3, #2
 8008b6a:	d114      	bne.n	8008b96 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8008b6c:	f002 f97e 	bl	800ae6c <HAL_RCC_GetHCLKFreq>
 8008b70:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	4a48      	ldr	r2, [pc, #288]	@ (8008c98 <HAL_DAC_ConfigChannel+0x368>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d904      	bls.n	8008b84 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8008b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b80:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b82:	e00f      	b.n	8008ba4 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	4a45      	ldr	r2, [pc, #276]	@ (8008c9c <HAL_DAC_ConfigChannel+0x36c>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d90a      	bls.n	8008ba2 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8008b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008b92:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b94:	e006      	b.n	8008ba4 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ba0:	e000      	b.n	8008ba4 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8008ba2:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f003 0310 	and.w	r3, r3, #16
 8008baa:	697a      	ldr	r2, [r7, #20]
 8008bac:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bbc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	6819      	ldr	r1, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f003 0310 	and.w	r3, r3, #16
 8008bca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8008bce:	fa02 f303 	lsl.w	r3, r2, r3
 8008bd2:	43da      	mvns	r2, r3
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	400a      	ands	r2, r1
 8008bda:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f003 0310 	and.w	r3, r3, #16
 8008bea:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8008bee:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf2:	43db      	mvns	r3, r3
 8008bf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bf6:	4013      	ands	r3, r2
 8008bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	68db      	ldr	r3, [r3, #12]
 8008bfe:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f003 0310 	and.w	r3, r3, #16
 8008c06:	697a      	ldr	r2, [r7, #20]
 8008c08:	fa02 f303 	lsl.w	r3, r2, r3
 8008c0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c18:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	6819      	ldr	r1, [r3, #0]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f003 0310 	and.w	r3, r3, #16
 8008c26:	22c0      	movs	r2, #192	@ 0xc0
 8008c28:	fa02 f303 	lsl.w	r3, r2, r3
 8008c2c:	43da      	mvns	r2, r3
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	400a      	ands	r2, r1
 8008c34:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	089b      	lsrs	r3, r3, #2
 8008c3c:	f003 030f 	and.w	r3, r3, #15
 8008c40:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	089b      	lsrs	r3, r3, #2
 8008c48:	021b      	lsls	r3, r3, #8
 8008c4a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008c4e:	697a      	ldr	r2, [r7, #20]
 8008c50:	4313      	orrs	r3, r2
 8008c52:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f003 0310 	and.w	r3, r3, #16
 8008c60:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8008c64:	fa01 f303 	lsl.w	r3, r1, r3
 8008c68:	43db      	mvns	r3, r3
 8008c6a:	ea02 0103 	and.w	r1, r2, r3
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f003 0310 	and.w	r3, r3, #16
 8008c74:	697a      	ldr	r2, [r7, #20]
 8008c76:	409a      	lsls	r2, r3
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	430a      	orrs	r2, r1
 8008c7e:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2201      	movs	r2, #1
 8008c84:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8008c8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3728      	adds	r7, #40	@ 0x28
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	09896800 	.word	0x09896800
 8008c9c:	04c4b400 	.word	0x04c4b400

08008ca0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cac:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8008cae:	68f8      	ldr	r0, [r7, #12]
 8008cb0:	f7ff fe16 	bl	80088e0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	711a      	strb	r2, [r3, #4]
}
 8008cba:	bf00      	nop
 8008cbc:	3710      	adds	r7, #16
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b084      	sub	sp, #16
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cce:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8008cd0:	68f8      	ldr	r0, [r7, #12]
 8008cd2:	f7ff fe0f 	bl	80088f4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008cd6:	bf00      	nop
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}

08008cde <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	b084      	sub	sp, #16
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cea:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	691b      	ldr	r3, [r3, #16]
 8008cf0:	f043 0204 	orr.w	r2, r3, #4
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8008cf8:	68f8      	ldr	r0, [r7, #12]
 8008cfa:	f7ff fe05 	bl	8008908 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2201      	movs	r2, #1
 8008d02:	711a      	strb	r2, [r3, #4]
}
 8008d04:	bf00      	nop
 8008d06:	3710      	adds	r7, #16
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8008d14:	bf00      	nop
 8008d16:	370c      	adds	r7, #12
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8008d28:	bf00      	nop
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8008d3c:	bf00      	nop
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d54:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8008d56:	68f8      	ldr	r0, [r7, #12]
 8008d58:	f00e fc5c 	bl	8017614 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	711a      	strb	r2, [r3, #4]
}
 8008d62:	bf00      	nop
 8008d64:	3710      	adds	r7, #16
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b084      	sub	sp, #16
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d76:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8008d78:	68f8      	ldr	r0, [r7, #12]
 8008d7a:	f7ff ffc7 	bl	8008d0c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008d7e:	bf00      	nop
 8008d80:	3710      	adds	r7, #16
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b084      	sub	sp, #16
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d92:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	691b      	ldr	r3, [r3, #16]
 8008d98:	f043 0204 	orr.w	r2, r3, #4
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8008da0:	68f8      	ldr	r0, [r7, #12]
 8008da2:	f7ff ffbd 	bl	8008d20 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2201      	movs	r2, #1
 8008daa:	711a      	strb	r2, [r3, #4]
}
 8008dac:	bf00      	nop
 8008dae:	3710      	adds	r7, #16
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d101      	bne.n	8008dc6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e08d      	b.n	8008ee2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	461a      	mov	r2, r3
 8008dcc:	4b47      	ldr	r3, [pc, #284]	@ (8008eec <HAL_DMA_Init+0x138>)
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d80f      	bhi.n	8008df2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	4b45      	ldr	r3, [pc, #276]	@ (8008ef0 <HAL_DMA_Init+0x13c>)
 8008dda:	4413      	add	r3, r2
 8008ddc:	4a45      	ldr	r2, [pc, #276]	@ (8008ef4 <HAL_DMA_Init+0x140>)
 8008dde:	fba2 2303 	umull	r2, r3, r2, r3
 8008de2:	091b      	lsrs	r3, r3, #4
 8008de4:	009a      	lsls	r2, r3, #2
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4a42      	ldr	r2, [pc, #264]	@ (8008ef8 <HAL_DMA_Init+0x144>)
 8008dee:	641a      	str	r2, [r3, #64]	@ 0x40
 8008df0:	e00e      	b.n	8008e10 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	461a      	mov	r2, r3
 8008df8:	4b40      	ldr	r3, [pc, #256]	@ (8008efc <HAL_DMA_Init+0x148>)
 8008dfa:	4413      	add	r3, r2
 8008dfc:	4a3d      	ldr	r2, [pc, #244]	@ (8008ef4 <HAL_DMA_Init+0x140>)
 8008dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8008e02:	091b      	lsrs	r3, r3, #4
 8008e04:	009a      	lsls	r2, r3, #2
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4a3c      	ldr	r2, [pc, #240]	@ (8008f00 <HAL_DMA_Init+0x14c>)
 8008e0e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2202      	movs	r2, #2
 8008e14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8008e26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e2a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008e34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008e40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	699b      	ldr	r3, [r3, #24]
 8008e46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008e4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6a1b      	ldr	r3, [r3, #32]
 8008e52:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008e54:	68fa      	ldr	r2, [r7, #12]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	68fa      	ldr	r2, [r7, #12]
 8008e60:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 fa76 	bl	8009354 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008e70:	d102      	bne.n	8008e78 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	685a      	ldr	r2, [r3, #4]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e80:	b2d2      	uxtb	r2, r2
 8008e82:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008e8c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d010      	beq.n	8008eb8 <HAL_DMA_Init+0x104>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	2b04      	cmp	r3, #4
 8008e9c:	d80c      	bhi.n	8008eb8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 fa96 	bl	80093d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008eb4:	605a      	str	r2, [r3, #4]
 8008eb6:	e008      	b.n	8008eca <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008ee0:	2300      	movs	r3, #0
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3710      	adds	r7, #16
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	bf00      	nop
 8008eec:	40020407 	.word	0x40020407
 8008ef0:	bffdfff8 	.word	0xbffdfff8
 8008ef4:	cccccccd 	.word	0xcccccccd
 8008ef8:	40020000 	.word	0x40020000
 8008efc:	bffdfbf8 	.word	0xbffdfbf8
 8008f00:	40020400 	.word	0x40020400

08008f04 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b086      	sub	sp, #24
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	60b9      	str	r1, [r7, #8]
 8008f0e:	607a      	str	r2, [r7, #4]
 8008f10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f12:	2300      	movs	r3, #0
 8008f14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d101      	bne.n	8008f24 <HAL_DMA_Start_IT+0x20>
 8008f20:	2302      	movs	r3, #2
 8008f22:	e066      	b.n	8008ff2 <HAL_DMA_Start_IT+0xee>
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2201      	movs	r2, #1
 8008f28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d155      	bne.n	8008fe4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2202      	movs	r2, #2
 8008f3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2200      	movs	r2, #0
 8008f44:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f022 0201 	bic.w	r2, r2, #1
 8008f54:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	68b9      	ldr	r1, [r7, #8]
 8008f5c:	68f8      	ldr	r0, [r7, #12]
 8008f5e:	f000 f9bb 	bl	80092d8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d008      	beq.n	8008f7c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f042 020e 	orr.w	r2, r2, #14
 8008f78:	601a      	str	r2, [r3, #0]
 8008f7a:	e00f      	b.n	8008f9c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f022 0204 	bic.w	r2, r2, #4
 8008f8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f042 020a 	orr.w	r2, r2, #10
 8008f9a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d007      	beq.n	8008fba <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008fb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008fb8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d007      	beq.n	8008fd2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008fd0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	681a      	ldr	r2, [r3, #0]
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f042 0201 	orr.w	r2, r2, #1
 8008fe0:	601a      	str	r2, [r3, #0]
 8008fe2:	e005      	b.n	8008ff0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008fec:	2302      	movs	r3, #2
 8008fee:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3718      	adds	r7, #24
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008ffa:	b480      	push	{r7}
 8008ffc:	b085      	sub	sp, #20
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009002:	2300      	movs	r3, #0
 8009004:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800900c:	b2db      	uxtb	r3, r3
 800900e:	2b02      	cmp	r3, #2
 8009010:	d005      	beq.n	800901e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2204      	movs	r2, #4
 8009016:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8009018:	2301      	movs	r3, #1
 800901a:	73fb      	strb	r3, [r7, #15]
 800901c:	e037      	b.n	800908e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f022 020e 	bic.w	r2, r2, #14
 800902c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009032:	681a      	ldr	r2, [r3, #0]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009038:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800903c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f022 0201 	bic.w	r2, r2, #1
 800904c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009052:	f003 021f 	and.w	r2, r3, #31
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800905a:	2101      	movs	r1, #1
 800905c:	fa01 f202 	lsl.w	r2, r1, r2
 8009060:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800906a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009070:	2b00      	cmp	r3, #0
 8009072:	d00c      	beq.n	800908e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800907e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009082:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800908c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2201      	movs	r2, #1
 8009092:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800909e:	7bfb      	ldrb	r3, [r7, #15]
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3714      	adds	r7, #20
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090b4:	2300      	movs	r3, #0
 80090b6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	2b02      	cmp	r3, #2
 80090c2:	d00d      	beq.n	80090e0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2204      	movs	r2, #4
 80090c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2201      	movs	r2, #1
 80090ce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80090da:	2301      	movs	r3, #1
 80090dc:	73fb      	strb	r3, [r7, #15]
 80090de:	e047      	b.n	8009170 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f022 020e 	bic.w	r2, r2, #14
 80090ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f022 0201 	bic.w	r2, r2, #1
 80090fe:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800910a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800910e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009114:	f003 021f 	and.w	r2, r3, #31
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800911c:	2101      	movs	r1, #1
 800911e:	fa01 f202 	lsl.w	r2, r1, r2
 8009122:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800912c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009132:	2b00      	cmp	r3, #0
 8009134:	d00c      	beq.n	8009150 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009140:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009144:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800914a:	687a      	ldr	r2, [r7, #4]
 800914c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800914e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009164:	2b00      	cmp	r3, #0
 8009166:	d003      	beq.n	8009170 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	4798      	blx	r3
    }
  }
  return status;
 8009170:	7bfb      	ldrb	r3, [r7, #15]
}
 8009172:	4618      	mov	r0, r3
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}

0800917a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800917a:	b580      	push	{r7, lr}
 800917c:	b084      	sub	sp, #16
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009196:	f003 031f 	and.w	r3, r3, #31
 800919a:	2204      	movs	r2, #4
 800919c:	409a      	lsls	r2, r3
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	4013      	ands	r3, r2
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d026      	beq.n	80091f4 <HAL_DMA_IRQHandler+0x7a>
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	f003 0304 	and.w	r3, r3, #4
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d021      	beq.n	80091f4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f003 0320 	and.w	r3, r3, #32
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d107      	bne.n	80091ce <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f022 0204 	bic.w	r2, r2, #4
 80091cc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091d2:	f003 021f 	and.w	r2, r3, #31
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091da:	2104      	movs	r1, #4
 80091dc:	fa01 f202 	lsl.w	r2, r1, r2
 80091e0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d071      	beq.n	80092ce <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80091f2:	e06c      	b.n	80092ce <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091f8:	f003 031f 	and.w	r3, r3, #31
 80091fc:	2202      	movs	r2, #2
 80091fe:	409a      	lsls	r2, r3
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	4013      	ands	r3, r2
 8009204:	2b00      	cmp	r3, #0
 8009206:	d02e      	beq.n	8009266 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	f003 0302 	and.w	r3, r3, #2
 800920e:	2b00      	cmp	r3, #0
 8009210:	d029      	beq.n	8009266 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 0320 	and.w	r3, r3, #32
 800921c:	2b00      	cmp	r3, #0
 800921e:	d10b      	bne.n	8009238 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f022 020a 	bic.w	r2, r2, #10
 800922e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2201      	movs	r2, #1
 8009234:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800923c:	f003 021f 	and.w	r2, r3, #31
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009244:	2102      	movs	r1, #2
 8009246:	fa01 f202 	lsl.w	r2, r1, r2
 800924a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009258:	2b00      	cmp	r3, #0
 800925a:	d038      	beq.n	80092ce <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8009264:	e033      	b.n	80092ce <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800926a:	f003 031f 	and.w	r3, r3, #31
 800926e:	2208      	movs	r2, #8
 8009270:	409a      	lsls	r2, r3
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	4013      	ands	r3, r2
 8009276:	2b00      	cmp	r3, #0
 8009278:	d02a      	beq.n	80092d0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	f003 0308 	and.w	r3, r3, #8
 8009280:	2b00      	cmp	r3, #0
 8009282:	d025      	beq.n	80092d0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f022 020e 	bic.w	r2, r2, #14
 8009292:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009298:	f003 021f 	and.w	r2, r3, #31
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092a0:	2101      	movs	r1, #1
 80092a2:	fa01 f202 	lsl.w	r2, r1, r2
 80092a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2201      	movs	r2, #1
 80092b2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2200      	movs	r2, #0
 80092ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d004      	beq.n	80092d0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80092ce:	bf00      	nop
 80092d0:	bf00      	nop
}
 80092d2:	3710      	adds	r7, #16
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80092d8:	b480      	push	{r7}
 80092da:	b085      	sub	sp, #20
 80092dc:	af00      	add	r7, sp, #0
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	60b9      	str	r1, [r7, #8]
 80092e2:	607a      	str	r2, [r7, #4]
 80092e4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092ea:	68fa      	ldr	r2, [r7, #12]
 80092ec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80092ee:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d004      	beq.n	8009302 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092fc:	68fa      	ldr	r2, [r7, #12]
 80092fe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8009300:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009306:	f003 021f 	and.w	r2, r3, #31
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800930e:	2101      	movs	r1, #1
 8009310:	fa01 f202 	lsl.w	r2, r1, r2
 8009314:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	683a      	ldr	r2, [r7, #0]
 800931c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	2b10      	cmp	r3, #16
 8009324:	d108      	bne.n	8009338 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009336:	e007      	b.n	8009348 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	68ba      	ldr	r2, [r7, #8]
 800933e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	60da      	str	r2, [r3, #12]
}
 8009348:	bf00      	nop
 800934a:	3714      	adds	r7, #20
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr

08009354 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009354:	b480      	push	{r7}
 8009356:	b087      	sub	sp, #28
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	461a      	mov	r2, r3
 8009362:	4b16      	ldr	r3, [pc, #88]	@ (80093bc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8009364:	429a      	cmp	r2, r3
 8009366:	d802      	bhi.n	800936e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8009368:	4b15      	ldr	r3, [pc, #84]	@ (80093c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800936a:	617b      	str	r3, [r7, #20]
 800936c:	e001      	b.n	8009372 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800936e:	4b15      	ldr	r3, [pc, #84]	@ (80093c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8009370:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	b2db      	uxtb	r3, r3
 800937c:	3b08      	subs	r3, #8
 800937e:	4a12      	ldr	r2, [pc, #72]	@ (80093c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8009380:	fba2 2303 	umull	r2, r3, r2, r3
 8009384:	091b      	lsrs	r3, r3, #4
 8009386:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800938c:	089b      	lsrs	r3, r3, #2
 800938e:	009a      	lsls	r2, r3, #2
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	4413      	add	r3, r2
 8009394:	461a      	mov	r2, r3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	4a0b      	ldr	r2, [pc, #44]	@ (80093cc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800939e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f003 031f 	and.w	r3, r3, #31
 80093a6:	2201      	movs	r2, #1
 80093a8:	409a      	lsls	r2, r3
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80093ae:	bf00      	nop
 80093b0:	371c      	adds	r7, #28
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr
 80093ba:	bf00      	nop
 80093bc:	40020407 	.word	0x40020407
 80093c0:	40020800 	.word	0x40020800
 80093c4:	40020820 	.word	0x40020820
 80093c8:	cccccccd 	.word	0xcccccccd
 80093cc:	40020880 	.word	0x40020880

080093d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b085      	sub	sp, #20
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80093e0:	68fa      	ldr	r2, [r7, #12]
 80093e2:	4b0b      	ldr	r3, [pc, #44]	@ (8009410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80093e4:	4413      	add	r3, r2
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	461a      	mov	r2, r3
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4a08      	ldr	r2, [pc, #32]	@ (8009414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80093f2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	3b01      	subs	r3, #1
 80093f8:	f003 031f 	and.w	r3, r3, #31
 80093fc:	2201      	movs	r2, #1
 80093fe:	409a      	lsls	r2, r3
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8009404:	bf00      	nop
 8009406:	3714      	adds	r7, #20
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr
 8009410:	1000823f 	.word	0x1000823f
 8009414:	40020940 	.word	0x40020940

08009418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009418:	b480      	push	{r7}
 800941a:	b087      	sub	sp, #28
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009422:	2300      	movs	r3, #0
 8009424:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009426:	e15a      	b.n	80096de <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	2101      	movs	r1, #1
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	fa01 f303 	lsl.w	r3, r1, r3
 8009434:	4013      	ands	r3, r2
 8009436:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2b00      	cmp	r3, #0
 800943c:	f000 814c 	beq.w	80096d8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	f003 0303 	and.w	r3, r3, #3
 8009448:	2b01      	cmp	r3, #1
 800944a:	d005      	beq.n	8009458 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009454:	2b02      	cmp	r3, #2
 8009456:	d130      	bne.n	80094ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	005b      	lsls	r3, r3, #1
 8009462:	2203      	movs	r2, #3
 8009464:	fa02 f303 	lsl.w	r3, r2, r3
 8009468:	43db      	mvns	r3, r3
 800946a:	693a      	ldr	r2, [r7, #16]
 800946c:	4013      	ands	r3, r2
 800946e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	68da      	ldr	r2, [r3, #12]
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	005b      	lsls	r3, r3, #1
 8009478:	fa02 f303 	lsl.w	r3, r2, r3
 800947c:	693a      	ldr	r2, [r7, #16]
 800947e:	4313      	orrs	r3, r2
 8009480:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	693a      	ldr	r2, [r7, #16]
 8009486:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800948e:	2201      	movs	r2, #1
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	fa02 f303 	lsl.w	r3, r2, r3
 8009496:	43db      	mvns	r3, r3
 8009498:	693a      	ldr	r2, [r7, #16]
 800949a:	4013      	ands	r3, r2
 800949c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	091b      	lsrs	r3, r3, #4
 80094a4:	f003 0201 	and.w	r2, r3, #1
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	fa02 f303 	lsl.w	r3, r2, r3
 80094ae:	693a      	ldr	r2, [r7, #16]
 80094b0:	4313      	orrs	r3, r2
 80094b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	693a      	ldr	r2, [r7, #16]
 80094b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	f003 0303 	and.w	r3, r3, #3
 80094c2:	2b03      	cmp	r3, #3
 80094c4:	d017      	beq.n	80094f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	68db      	ldr	r3, [r3, #12]
 80094ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	005b      	lsls	r3, r3, #1
 80094d0:	2203      	movs	r2, #3
 80094d2:	fa02 f303 	lsl.w	r3, r2, r3
 80094d6:	43db      	mvns	r3, r3
 80094d8:	693a      	ldr	r2, [r7, #16]
 80094da:	4013      	ands	r3, r2
 80094dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	689a      	ldr	r2, [r3, #8]
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	005b      	lsls	r3, r3, #1
 80094e6:	fa02 f303 	lsl.w	r3, r2, r3
 80094ea:	693a      	ldr	r2, [r7, #16]
 80094ec:	4313      	orrs	r3, r2
 80094ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	693a      	ldr	r2, [r7, #16]
 80094f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	f003 0303 	and.w	r3, r3, #3
 80094fe:	2b02      	cmp	r3, #2
 8009500:	d123      	bne.n	800954a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	08da      	lsrs	r2, r3, #3
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	3208      	adds	r2, #8
 800950a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800950e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	f003 0307 	and.w	r3, r3, #7
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	220f      	movs	r2, #15
 800951a:	fa02 f303 	lsl.w	r3, r2, r3
 800951e:	43db      	mvns	r3, r3
 8009520:	693a      	ldr	r2, [r7, #16]
 8009522:	4013      	ands	r3, r2
 8009524:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	691a      	ldr	r2, [r3, #16]
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	f003 0307 	and.w	r3, r3, #7
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	fa02 f303 	lsl.w	r3, r2, r3
 8009536:	693a      	ldr	r2, [r7, #16]
 8009538:	4313      	orrs	r3, r2
 800953a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	08da      	lsrs	r2, r3, #3
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	3208      	adds	r2, #8
 8009544:	6939      	ldr	r1, [r7, #16]
 8009546:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	005b      	lsls	r3, r3, #1
 8009554:	2203      	movs	r2, #3
 8009556:	fa02 f303 	lsl.w	r3, r2, r3
 800955a:	43db      	mvns	r3, r3
 800955c:	693a      	ldr	r2, [r7, #16]
 800955e:	4013      	ands	r3, r2
 8009560:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	f003 0203 	and.w	r2, r3, #3
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	005b      	lsls	r3, r3, #1
 800956e:	fa02 f303 	lsl.w	r3, r2, r3
 8009572:	693a      	ldr	r2, [r7, #16]
 8009574:	4313      	orrs	r3, r2
 8009576:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	693a      	ldr	r2, [r7, #16]
 800957c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009586:	2b00      	cmp	r3, #0
 8009588:	f000 80a6 	beq.w	80096d8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800958c:	4b5b      	ldr	r3, [pc, #364]	@ (80096fc <HAL_GPIO_Init+0x2e4>)
 800958e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009590:	4a5a      	ldr	r2, [pc, #360]	@ (80096fc <HAL_GPIO_Init+0x2e4>)
 8009592:	f043 0301 	orr.w	r3, r3, #1
 8009596:	6613      	str	r3, [r2, #96]	@ 0x60
 8009598:	4b58      	ldr	r3, [pc, #352]	@ (80096fc <HAL_GPIO_Init+0x2e4>)
 800959a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800959c:	f003 0301 	and.w	r3, r3, #1
 80095a0:	60bb      	str	r3, [r7, #8]
 80095a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80095a4:	4a56      	ldr	r2, [pc, #344]	@ (8009700 <HAL_GPIO_Init+0x2e8>)
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	089b      	lsrs	r3, r3, #2
 80095aa:	3302      	adds	r3, #2
 80095ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	f003 0303 	and.w	r3, r3, #3
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	220f      	movs	r2, #15
 80095bc:	fa02 f303 	lsl.w	r3, r2, r3
 80095c0:	43db      	mvns	r3, r3
 80095c2:	693a      	ldr	r2, [r7, #16]
 80095c4:	4013      	ands	r3, r2
 80095c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80095ce:	d01f      	beq.n	8009610 <HAL_GPIO_Init+0x1f8>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	4a4c      	ldr	r2, [pc, #304]	@ (8009704 <HAL_GPIO_Init+0x2ec>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d019      	beq.n	800960c <HAL_GPIO_Init+0x1f4>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	4a4b      	ldr	r2, [pc, #300]	@ (8009708 <HAL_GPIO_Init+0x2f0>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d013      	beq.n	8009608 <HAL_GPIO_Init+0x1f0>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	4a4a      	ldr	r2, [pc, #296]	@ (800970c <HAL_GPIO_Init+0x2f4>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d00d      	beq.n	8009604 <HAL_GPIO_Init+0x1ec>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	4a49      	ldr	r2, [pc, #292]	@ (8009710 <HAL_GPIO_Init+0x2f8>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d007      	beq.n	8009600 <HAL_GPIO_Init+0x1e8>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	4a48      	ldr	r2, [pc, #288]	@ (8009714 <HAL_GPIO_Init+0x2fc>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d101      	bne.n	80095fc <HAL_GPIO_Init+0x1e4>
 80095f8:	2305      	movs	r3, #5
 80095fa:	e00a      	b.n	8009612 <HAL_GPIO_Init+0x1fa>
 80095fc:	2306      	movs	r3, #6
 80095fe:	e008      	b.n	8009612 <HAL_GPIO_Init+0x1fa>
 8009600:	2304      	movs	r3, #4
 8009602:	e006      	b.n	8009612 <HAL_GPIO_Init+0x1fa>
 8009604:	2303      	movs	r3, #3
 8009606:	e004      	b.n	8009612 <HAL_GPIO_Init+0x1fa>
 8009608:	2302      	movs	r3, #2
 800960a:	e002      	b.n	8009612 <HAL_GPIO_Init+0x1fa>
 800960c:	2301      	movs	r3, #1
 800960e:	e000      	b.n	8009612 <HAL_GPIO_Init+0x1fa>
 8009610:	2300      	movs	r3, #0
 8009612:	697a      	ldr	r2, [r7, #20]
 8009614:	f002 0203 	and.w	r2, r2, #3
 8009618:	0092      	lsls	r2, r2, #2
 800961a:	4093      	lsls	r3, r2
 800961c:	693a      	ldr	r2, [r7, #16]
 800961e:	4313      	orrs	r3, r2
 8009620:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009622:	4937      	ldr	r1, [pc, #220]	@ (8009700 <HAL_GPIO_Init+0x2e8>)
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	089b      	lsrs	r3, r3, #2
 8009628:	3302      	adds	r3, #2
 800962a:	693a      	ldr	r2, [r7, #16]
 800962c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009630:	4b39      	ldr	r3, [pc, #228]	@ (8009718 <HAL_GPIO_Init+0x300>)
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	43db      	mvns	r3, r3
 800963a:	693a      	ldr	r2, [r7, #16]
 800963c:	4013      	ands	r3, r2
 800963e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009648:	2b00      	cmp	r3, #0
 800964a:	d003      	beq.n	8009654 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800964c:	693a      	ldr	r2, [r7, #16]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	4313      	orrs	r3, r2
 8009652:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009654:	4a30      	ldr	r2, [pc, #192]	@ (8009718 <HAL_GPIO_Init+0x300>)
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800965a:	4b2f      	ldr	r3, [pc, #188]	@ (8009718 <HAL_GPIO_Init+0x300>)
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	43db      	mvns	r3, r3
 8009664:	693a      	ldr	r2, [r7, #16]
 8009666:	4013      	ands	r3, r2
 8009668:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009672:	2b00      	cmp	r3, #0
 8009674:	d003      	beq.n	800967e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8009676:	693a      	ldr	r2, [r7, #16]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	4313      	orrs	r3, r2
 800967c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800967e:	4a26      	ldr	r2, [pc, #152]	@ (8009718 <HAL_GPIO_Init+0x300>)
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8009684:	4b24      	ldr	r3, [pc, #144]	@ (8009718 <HAL_GPIO_Init+0x300>)
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	43db      	mvns	r3, r3
 800968e:	693a      	ldr	r2, [r7, #16]
 8009690:	4013      	ands	r3, r2
 8009692:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800969c:	2b00      	cmp	r3, #0
 800969e:	d003      	beq.n	80096a8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80096a0:	693a      	ldr	r2, [r7, #16]
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	4313      	orrs	r3, r2
 80096a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80096a8:	4a1b      	ldr	r2, [pc, #108]	@ (8009718 <HAL_GPIO_Init+0x300>)
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80096ae:	4b1a      	ldr	r3, [pc, #104]	@ (8009718 <HAL_GPIO_Init+0x300>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	43db      	mvns	r3, r3
 80096b8:	693a      	ldr	r2, [r7, #16]
 80096ba:	4013      	ands	r3, r2
 80096bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d003      	beq.n	80096d2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80096ca:	693a      	ldr	r2, [r7, #16]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	4313      	orrs	r3, r2
 80096d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80096d2:	4a11      	ldr	r2, [pc, #68]	@ (8009718 <HAL_GPIO_Init+0x300>)
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	3301      	adds	r3, #1
 80096dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	fa22 f303 	lsr.w	r3, r2, r3
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	f47f ae9d 	bne.w	8009428 <HAL_GPIO_Init+0x10>
  }
}
 80096ee:	bf00      	nop
 80096f0:	bf00      	nop
 80096f2:	371c      	adds	r7, #28
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr
 80096fc:	40021000 	.word	0x40021000
 8009700:	40010000 	.word	0x40010000
 8009704:	48000400 	.word	0x48000400
 8009708:	48000800 	.word	0x48000800
 800970c:	48000c00 	.word	0x48000c00
 8009710:	48001000 	.word	0x48001000
 8009714:	48001400 	.word	0x48001400
 8009718:	40010400 	.word	0x40010400

0800971c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800971c:	b480      	push	{r7}
 800971e:	b085      	sub	sp, #20
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	460b      	mov	r3, r1
 8009726:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	691a      	ldr	r2, [r3, #16]
 800972c:	887b      	ldrh	r3, [r7, #2]
 800972e:	4013      	ands	r3, r2
 8009730:	2b00      	cmp	r3, #0
 8009732:	d002      	beq.n	800973a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009734:	2301      	movs	r3, #1
 8009736:	73fb      	strb	r3, [r7, #15]
 8009738:	e001      	b.n	800973e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800973a:	2300      	movs	r3, #0
 800973c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800973e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009740:	4618      	mov	r0, r3
 8009742:	3714      	adds	r7, #20
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	460b      	mov	r3, r1
 8009756:	807b      	strh	r3, [r7, #2]
 8009758:	4613      	mov	r3, r2
 800975a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800975c:	787b      	ldrb	r3, [r7, #1]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d003      	beq.n	800976a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009762:	887a      	ldrh	r2, [r7, #2]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009768:	e002      	b.n	8009770 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800976a:	887a      	ldrh	r2, [r7, #2]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8009770:	bf00      	nop
 8009772:	370c      	adds	r7, #12
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800977c:	b480      	push	{r7}
 800977e:	b085      	sub	sp, #20
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	460b      	mov	r3, r1
 8009786:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	695b      	ldr	r3, [r3, #20]
 800978c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800978e:	887a      	ldrh	r2, [r7, #2]
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	4013      	ands	r3, r2
 8009794:	041a      	lsls	r2, r3, #16
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	43d9      	mvns	r1, r3
 800979a:	887b      	ldrh	r3, [r7, #2]
 800979c:	400b      	ands	r3, r1
 800979e:	431a      	orrs	r2, r3
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	619a      	str	r2, [r3, #24]
}
 80097a4:	bf00      	nop
 80097a6:	3714      	adds	r7, #20
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	4603      	mov	r3, r0
 80097b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80097ba:	4b08      	ldr	r3, [pc, #32]	@ (80097dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80097bc:	695a      	ldr	r2, [r3, #20]
 80097be:	88fb      	ldrh	r3, [r7, #6]
 80097c0:	4013      	ands	r3, r2
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d006      	beq.n	80097d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80097c6:	4a05      	ldr	r2, [pc, #20]	@ (80097dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80097c8:	88fb      	ldrh	r3, [r7, #6]
 80097ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80097cc:	88fb      	ldrh	r3, [r7, #6]
 80097ce:	4618      	mov	r0, r3
 80097d0:	f000 f806 	bl	80097e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80097d4:	bf00      	nop
 80097d6:	3708      	adds	r7, #8
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}
 80097dc:	40010400 	.word	0x40010400

080097e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	4603      	mov	r3, r0
 80097e8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80097ea:	bf00      	nop
 80097ec:	370c      	adds	r7, #12
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr

080097f6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b082      	sub	sp, #8
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d101      	bne.n	8009808 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009804:	2301      	movs	r3, #1
 8009806:	e08d      	b.n	8009924 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800980e:	b2db      	uxtb	r3, r3
 8009810:	2b00      	cmp	r3, #0
 8009812:	d106      	bne.n	8009822 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f7fa f9e7 	bl	8003bf0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2224      	movs	r2, #36	@ 0x24
 8009826:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f022 0201 	bic.w	r2, r2, #1
 8009838:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	685a      	ldr	r2, [r3, #4]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009846:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	689a      	ldr	r2, [r3, #8]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009856:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	68db      	ldr	r3, [r3, #12]
 800985c:	2b01      	cmp	r3, #1
 800985e:	d107      	bne.n	8009870 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	689a      	ldr	r2, [r3, #8]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800986c:	609a      	str	r2, [r3, #8]
 800986e:	e006      	b.n	800987e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	689a      	ldr	r2, [r3, #8]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800987c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	2b02      	cmp	r3, #2
 8009884:	d108      	bne.n	8009898 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	685a      	ldr	r2, [r3, #4]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009894:	605a      	str	r2, [r3, #4]
 8009896:	e007      	b.n	80098a8 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	685a      	ldr	r2, [r3, #4]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80098a6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	6812      	ldr	r2, [r2, #0]
 80098b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80098b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80098ba:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	68da      	ldr	r2, [r3, #12]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80098ca:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	691a      	ldr	r2, [r3, #16]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	695b      	ldr	r3, [r3, #20]
 80098d4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	699b      	ldr	r3, [r3, #24]
 80098dc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	430a      	orrs	r2, r1
 80098e4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	69d9      	ldr	r1, [r3, #28]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6a1a      	ldr	r2, [r3, #32]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	430a      	orrs	r2, r1
 80098f4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f042 0201 	orr.w	r2, r2, #1
 8009904:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2200      	movs	r2, #0
 800990a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2220      	movs	r2, #32
 8009910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009922:	2300      	movs	r3, #0
}
 8009924:	4618      	mov	r0, r3
 8009926:	3708      	adds	r7, #8
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b088      	sub	sp, #32
 8009930:	af02      	add	r7, sp, #8
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	607a      	str	r2, [r7, #4]
 8009936:	461a      	mov	r2, r3
 8009938:	460b      	mov	r3, r1
 800993a:	817b      	strh	r3, [r7, #10]
 800993c:	4613      	mov	r3, r2
 800993e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009946:	b2db      	uxtb	r3, r3
 8009948:	2b20      	cmp	r3, #32
 800994a:	f040 80fd 	bne.w	8009b48 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009954:	2b01      	cmp	r3, #1
 8009956:	d101      	bne.n	800995c <HAL_I2C_Master_Transmit+0x30>
 8009958:	2302      	movs	r3, #2
 800995a:	e0f6      	b.n	8009b4a <HAL_I2C_Master_Transmit+0x21e>
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2201      	movs	r2, #1
 8009960:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009964:	f7fc ff1c 	bl	80067a0 <HAL_GetTick>
 8009968:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	9300      	str	r3, [sp, #0]
 800996e:	2319      	movs	r3, #25
 8009970:	2201      	movs	r2, #1
 8009972:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009976:	68f8      	ldr	r0, [r7, #12]
 8009978:	f000 fa0a 	bl	8009d90 <I2C_WaitOnFlagUntilTimeout>
 800997c:	4603      	mov	r3, r0
 800997e:	2b00      	cmp	r3, #0
 8009980:	d001      	beq.n	8009986 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8009982:	2301      	movs	r3, #1
 8009984:	e0e1      	b.n	8009b4a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2221      	movs	r2, #33	@ 0x21
 800998a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2210      	movs	r2, #16
 8009992:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	2200      	movs	r2, #0
 800999a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	893a      	ldrh	r2, [r7, #8]
 80099a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2200      	movs	r2, #0
 80099ac:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	2bff      	cmp	r3, #255	@ 0xff
 80099b6:	d906      	bls.n	80099c6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	22ff      	movs	r2, #255	@ 0xff
 80099bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80099be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80099c2:	617b      	str	r3, [r7, #20]
 80099c4:	e007      	b.n	80099d6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80099ca:	b29a      	uxth	r2, r3
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80099d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80099d4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d024      	beq.n	8009a28 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099e2:	781a      	ldrb	r2, [r3, #0]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ee:	1c5a      	adds	r2, r3, #1
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	3b01      	subs	r3, #1
 80099fc:	b29a      	uxth	r2, r3
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a06:	3b01      	subs	r3, #1
 8009a08:	b29a      	uxth	r2, r3
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	3301      	adds	r3, #1
 8009a16:	b2da      	uxtb	r2, r3
 8009a18:	8979      	ldrh	r1, [r7, #10]
 8009a1a:	4b4e      	ldr	r3, [pc, #312]	@ (8009b54 <HAL_I2C_Master_Transmit+0x228>)
 8009a1c:	9300      	str	r3, [sp, #0]
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	68f8      	ldr	r0, [r7, #12]
 8009a22:	f000 fc05 	bl	800a230 <I2C_TransferConfig>
 8009a26:	e066      	b.n	8009af6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a2c:	b2da      	uxtb	r2, r3
 8009a2e:	8979      	ldrh	r1, [r7, #10]
 8009a30:	4b48      	ldr	r3, [pc, #288]	@ (8009b54 <HAL_I2C_Master_Transmit+0x228>)
 8009a32:	9300      	str	r3, [sp, #0]
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	68f8      	ldr	r0, [r7, #12]
 8009a38:	f000 fbfa 	bl	800a230 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8009a3c:	e05b      	b.n	8009af6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a3e:	693a      	ldr	r2, [r7, #16]
 8009a40:	6a39      	ldr	r1, [r7, #32]
 8009a42:	68f8      	ldr	r0, [r7, #12]
 8009a44:	f000 f9fd 	bl	8009e42 <I2C_WaitOnTXISFlagUntilTimeout>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d001      	beq.n	8009a52 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8009a4e:	2301      	movs	r3, #1
 8009a50:	e07b      	b.n	8009b4a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a56:	781a      	ldrb	r2, [r3, #0]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a62:	1c5a      	adds	r2, r3, #1
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	b29a      	uxth	r2, r3
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a7a:	3b01      	subs	r3, #1
 8009a7c:	b29a      	uxth	r2, r3
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a86:	b29b      	uxth	r3, r3
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d034      	beq.n	8009af6 <HAL_I2C_Master_Transmit+0x1ca>
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d130      	bne.n	8009af6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	9300      	str	r3, [sp, #0]
 8009a98:	6a3b      	ldr	r3, [r7, #32]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	2180      	movs	r1, #128	@ 0x80
 8009a9e:	68f8      	ldr	r0, [r7, #12]
 8009aa0:	f000 f976 	bl	8009d90 <I2C_WaitOnFlagUntilTimeout>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d001      	beq.n	8009aae <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	e04d      	b.n	8009b4a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	2bff      	cmp	r3, #255	@ 0xff
 8009ab6:	d90e      	bls.n	8009ad6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	22ff      	movs	r2, #255	@ 0xff
 8009abc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ac2:	b2da      	uxtb	r2, r3
 8009ac4:	8979      	ldrh	r1, [r7, #10]
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	9300      	str	r3, [sp, #0]
 8009aca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009ace:	68f8      	ldr	r0, [r7, #12]
 8009ad0:	f000 fbae 	bl	800a230 <I2C_TransferConfig>
 8009ad4:	e00f      	b.n	8009af6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ada:	b29a      	uxth	r2, r3
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ae4:	b2da      	uxtb	r2, r3
 8009ae6:	8979      	ldrh	r1, [r7, #10]
 8009ae8:	2300      	movs	r3, #0
 8009aea:	9300      	str	r3, [sp, #0]
 8009aec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009af0:	68f8      	ldr	r0, [r7, #12]
 8009af2:	f000 fb9d 	bl	800a230 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d19e      	bne.n	8009a3e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b00:	693a      	ldr	r2, [r7, #16]
 8009b02:	6a39      	ldr	r1, [r7, #32]
 8009b04:	68f8      	ldr	r0, [r7, #12]
 8009b06:	f000 f9e3 	bl	8009ed0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d001      	beq.n	8009b14 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8009b10:	2301      	movs	r3, #1
 8009b12:	e01a      	b.n	8009b4a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	2220      	movs	r2, #32
 8009b1a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	6859      	ldr	r1, [r3, #4]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681a      	ldr	r2, [r3, #0]
 8009b26:	4b0c      	ldr	r3, [pc, #48]	@ (8009b58 <HAL_I2C_Master_Transmit+0x22c>)
 8009b28:	400b      	ands	r3, r1
 8009b2a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2220      	movs	r2, #32
 8009b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2200      	movs	r2, #0
 8009b38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009b44:	2300      	movs	r3, #0
 8009b46:	e000      	b.n	8009b4a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8009b48:	2302      	movs	r3, #2
  }
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3718      	adds	r7, #24
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop
 8009b54:	80002000 	.word	0x80002000
 8009b58:	fe00e800 	.word	0xfe00e800

08009b5c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b088      	sub	sp, #32
 8009b60:	af02      	add	r7, sp, #8
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	607a      	str	r2, [r7, #4]
 8009b66:	461a      	mov	r2, r3
 8009b68:	460b      	mov	r3, r1
 8009b6a:	817b      	strh	r3, [r7, #10]
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	2b20      	cmp	r3, #32
 8009b7a:	f040 80db 	bne.w	8009d34 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d101      	bne.n	8009b8c <HAL_I2C_Master_Receive+0x30>
 8009b88:	2302      	movs	r3, #2
 8009b8a:	e0d4      	b.n	8009d36 <HAL_I2C_Master_Receive+0x1da>
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009b94:	f7fc fe04 	bl	80067a0 <HAL_GetTick>
 8009b98:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	9300      	str	r3, [sp, #0]
 8009b9e:	2319      	movs	r3, #25
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009ba6:	68f8      	ldr	r0, [r7, #12]
 8009ba8:	f000 f8f2 	bl	8009d90 <I2C_WaitOnFlagUntilTimeout>
 8009bac:	4603      	mov	r3, r0
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d001      	beq.n	8009bb6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e0bf      	b.n	8009d36 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2222      	movs	r2, #34	@ 0x22
 8009bba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2210      	movs	r2, #16
 8009bc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	893a      	ldrh	r2, [r7, #8]
 8009bd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	2bff      	cmp	r3, #255	@ 0xff
 8009be6:	d90e      	bls.n	8009c06 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	22ff      	movs	r2, #255	@ 0xff
 8009bec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009bf2:	b2da      	uxtb	r2, r3
 8009bf4:	8979      	ldrh	r1, [r7, #10]
 8009bf6:	4b52      	ldr	r3, [pc, #328]	@ (8009d40 <HAL_I2C_Master_Receive+0x1e4>)
 8009bf8:	9300      	str	r3, [sp, #0]
 8009bfa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009bfe:	68f8      	ldr	r0, [r7, #12]
 8009c00:	f000 fb16 	bl	800a230 <I2C_TransferConfig>
 8009c04:	e06d      	b.n	8009ce2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c0a:	b29a      	uxth	r2, r3
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c14:	b2da      	uxtb	r2, r3
 8009c16:	8979      	ldrh	r1, [r7, #10]
 8009c18:	4b49      	ldr	r3, [pc, #292]	@ (8009d40 <HAL_I2C_Master_Receive+0x1e4>)
 8009c1a:	9300      	str	r3, [sp, #0]
 8009c1c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009c20:	68f8      	ldr	r0, [r7, #12]
 8009c22:	f000 fb05 	bl	800a230 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8009c26:	e05c      	b.n	8009ce2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c28:	697a      	ldr	r2, [r7, #20]
 8009c2a:	6a39      	ldr	r1, [r7, #32]
 8009c2c:	68f8      	ldr	r0, [r7, #12]
 8009c2e:	f000 f993 	bl	8009f58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009c32:	4603      	mov	r3, r0
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d001      	beq.n	8009c3c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	e07c      	b.n	8009d36 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c46:	b2d2      	uxtb	r2, r2
 8009c48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c4e:	1c5a      	adds	r2, r3, #1
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c58:	3b01      	subs	r3, #1
 8009c5a:	b29a      	uxth	r2, r3
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	3b01      	subs	r3, #1
 8009c68:	b29a      	uxth	r2, r3
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d034      	beq.n	8009ce2 <HAL_I2C_Master_Receive+0x186>
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d130      	bne.n	8009ce2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	9300      	str	r3, [sp, #0]
 8009c84:	6a3b      	ldr	r3, [r7, #32]
 8009c86:	2200      	movs	r2, #0
 8009c88:	2180      	movs	r1, #128	@ 0x80
 8009c8a:	68f8      	ldr	r0, [r7, #12]
 8009c8c:	f000 f880 	bl	8009d90 <I2C_WaitOnFlagUntilTimeout>
 8009c90:	4603      	mov	r3, r0
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d001      	beq.n	8009c9a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8009c96:	2301      	movs	r3, #1
 8009c98:	e04d      	b.n	8009d36 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c9e:	b29b      	uxth	r3, r3
 8009ca0:	2bff      	cmp	r3, #255	@ 0xff
 8009ca2:	d90e      	bls.n	8009cc2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	22ff      	movs	r2, #255	@ 0xff
 8009ca8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009cae:	b2da      	uxtb	r2, r3
 8009cb0:	8979      	ldrh	r1, [r7, #10]
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	9300      	str	r3, [sp, #0]
 8009cb6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009cba:	68f8      	ldr	r0, [r7, #12]
 8009cbc:	f000 fab8 	bl	800a230 <I2C_TransferConfig>
 8009cc0:	e00f      	b.n	8009ce2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009cc6:	b29a      	uxth	r2, r3
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009cd0:	b2da      	uxtb	r2, r3
 8009cd2:	8979      	ldrh	r1, [r7, #10]
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	9300      	str	r3, [sp, #0]
 8009cd8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009cdc:	68f8      	ldr	r0, [r7, #12]
 8009cde:	f000 faa7 	bl	800a230 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d19d      	bne.n	8009c28 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009cec:	697a      	ldr	r2, [r7, #20]
 8009cee:	6a39      	ldr	r1, [r7, #32]
 8009cf0:	68f8      	ldr	r0, [r7, #12]
 8009cf2:	f000 f8ed 	bl	8009ed0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d001      	beq.n	8009d00 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	e01a      	b.n	8009d36 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2220      	movs	r2, #32
 8009d06:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	6859      	ldr	r1, [r3, #4]
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	4b0c      	ldr	r3, [pc, #48]	@ (8009d44 <HAL_I2C_Master_Receive+0x1e8>)
 8009d14:	400b      	ands	r3, r1
 8009d16:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2220      	movs	r2, #32
 8009d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2200      	movs	r2, #0
 8009d24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009d30:	2300      	movs	r3, #0
 8009d32:	e000      	b.n	8009d36 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009d34:	2302      	movs	r3, #2
  }
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3718      	adds	r7, #24
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	80002400 	.word	0x80002400
 8009d44:	fe00e800 	.word	0xfe00e800

08009d48 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	699b      	ldr	r3, [r3, #24]
 8009d56:	f003 0302 	and.w	r3, r3, #2
 8009d5a:	2b02      	cmp	r3, #2
 8009d5c:	d103      	bne.n	8009d66 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2200      	movs	r2, #0
 8009d64:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	699b      	ldr	r3, [r3, #24]
 8009d6c:	f003 0301 	and.w	r3, r3, #1
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d007      	beq.n	8009d84 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	699a      	ldr	r2, [r3, #24]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f042 0201 	orr.w	r2, r2, #1
 8009d82:	619a      	str	r2, [r3, #24]
  }
}
 8009d84:	bf00      	nop
 8009d86:	370c      	adds	r7, #12
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr

08009d90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b084      	sub	sp, #16
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	60f8      	str	r0, [r7, #12]
 8009d98:	60b9      	str	r1, [r7, #8]
 8009d9a:	603b      	str	r3, [r7, #0]
 8009d9c:	4613      	mov	r3, r2
 8009d9e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009da0:	e03b      	b.n	8009e1a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009da2:	69ba      	ldr	r2, [r7, #24]
 8009da4:	6839      	ldr	r1, [r7, #0]
 8009da6:	68f8      	ldr	r0, [r7, #12]
 8009da8:	f000 f962 	bl	800a070 <I2C_IsErrorOccurred>
 8009dac:	4603      	mov	r3, r0
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d001      	beq.n	8009db6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009db2:	2301      	movs	r3, #1
 8009db4:	e041      	b.n	8009e3a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009dbc:	d02d      	beq.n	8009e1a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009dbe:	f7fc fcef 	bl	80067a0 <HAL_GetTick>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	69bb      	ldr	r3, [r7, #24]
 8009dc6:	1ad3      	subs	r3, r2, r3
 8009dc8:	683a      	ldr	r2, [r7, #0]
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d302      	bcc.n	8009dd4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d122      	bne.n	8009e1a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	699a      	ldr	r2, [r3, #24]
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	4013      	ands	r3, r2
 8009dde:	68ba      	ldr	r2, [r7, #8]
 8009de0:	429a      	cmp	r2, r3
 8009de2:	bf0c      	ite	eq
 8009de4:	2301      	moveq	r3, #1
 8009de6:	2300      	movne	r3, #0
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	461a      	mov	r2, r3
 8009dec:	79fb      	ldrb	r3, [r7, #7]
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d113      	bne.n	8009e1a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009df6:	f043 0220 	orr.w	r2, r3, #32
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2220      	movs	r2, #32
 8009e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2200      	movs	r2, #0
 8009e12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8009e16:	2301      	movs	r3, #1
 8009e18:	e00f      	b.n	8009e3a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	699a      	ldr	r2, [r3, #24]
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	4013      	ands	r3, r2
 8009e24:	68ba      	ldr	r2, [r7, #8]
 8009e26:	429a      	cmp	r2, r3
 8009e28:	bf0c      	ite	eq
 8009e2a:	2301      	moveq	r3, #1
 8009e2c:	2300      	movne	r3, #0
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	461a      	mov	r2, r3
 8009e32:	79fb      	ldrb	r3, [r7, #7]
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d0b4      	beq.n	8009da2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e38:	2300      	movs	r3, #0
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3710      	adds	r7, #16
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}

08009e42 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009e42:	b580      	push	{r7, lr}
 8009e44:	b084      	sub	sp, #16
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	60f8      	str	r0, [r7, #12]
 8009e4a:	60b9      	str	r1, [r7, #8]
 8009e4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009e4e:	e033      	b.n	8009eb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	68b9      	ldr	r1, [r7, #8]
 8009e54:	68f8      	ldr	r0, [r7, #12]
 8009e56:	f000 f90b 	bl	800a070 <I2C_IsErrorOccurred>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d001      	beq.n	8009e64 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009e60:	2301      	movs	r3, #1
 8009e62:	e031      	b.n	8009ec8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009e6a:	d025      	beq.n	8009eb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e6c:	f7fc fc98 	bl	80067a0 <HAL_GetTick>
 8009e70:	4602      	mov	r2, r0
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	1ad3      	subs	r3, r2, r3
 8009e76:	68ba      	ldr	r2, [r7, #8]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d302      	bcc.n	8009e82 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d11a      	bne.n	8009eb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	699b      	ldr	r3, [r3, #24]
 8009e88:	f003 0302 	and.w	r3, r3, #2
 8009e8c:	2b02      	cmp	r3, #2
 8009e8e:	d013      	beq.n	8009eb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e94:	f043 0220 	orr.w	r2, r3, #32
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2220      	movs	r2, #32
 8009ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	e007      	b.n	8009ec8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	699b      	ldr	r3, [r3, #24]
 8009ebe:	f003 0302 	and.w	r3, r3, #2
 8009ec2:	2b02      	cmp	r3, #2
 8009ec4:	d1c4      	bne.n	8009e50 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009ec6:	2300      	movs	r3, #0
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3710      	adds	r7, #16
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b084      	sub	sp, #16
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	60f8      	str	r0, [r7, #12]
 8009ed8:	60b9      	str	r1, [r7, #8]
 8009eda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009edc:	e02f      	b.n	8009f3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	68b9      	ldr	r1, [r7, #8]
 8009ee2:	68f8      	ldr	r0, [r7, #12]
 8009ee4:	f000 f8c4 	bl	800a070 <I2C_IsErrorOccurred>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d001      	beq.n	8009ef2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e02d      	b.n	8009f4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ef2:	f7fc fc55 	bl	80067a0 <HAL_GetTick>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	1ad3      	subs	r3, r2, r3
 8009efc:	68ba      	ldr	r2, [r7, #8]
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d302      	bcc.n	8009f08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d11a      	bne.n	8009f3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	699b      	ldr	r3, [r3, #24]
 8009f0e:	f003 0320 	and.w	r3, r3, #32
 8009f12:	2b20      	cmp	r3, #32
 8009f14:	d013      	beq.n	8009f3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f1a:	f043 0220 	orr.w	r2, r3, #32
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2220      	movs	r2, #32
 8009f26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2200      	movs	r2, #0
 8009f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	e007      	b.n	8009f4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	699b      	ldr	r3, [r3, #24]
 8009f44:	f003 0320 	and.w	r3, r3, #32
 8009f48:	2b20      	cmp	r3, #32
 8009f4a:	d1c8      	bne.n	8009ede <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009f4c:	2300      	movs	r3, #0
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3710      	adds	r7, #16
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
	...

08009f58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b086      	sub	sp, #24
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	60f8      	str	r0, [r7, #12]
 8009f60:	60b9      	str	r1, [r7, #8]
 8009f62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f64:	2300      	movs	r3, #0
 8009f66:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009f68:	e071      	b.n	800a04e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	68b9      	ldr	r1, [r7, #8]
 8009f6e:	68f8      	ldr	r0, [r7, #12]
 8009f70:	f000 f87e 	bl	800a070 <I2C_IsErrorOccurred>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d001      	beq.n	8009f7e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	699b      	ldr	r3, [r3, #24]
 8009f84:	f003 0320 	and.w	r3, r3, #32
 8009f88:	2b20      	cmp	r3, #32
 8009f8a:	d13b      	bne.n	800a004 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009f8c:	7dfb      	ldrb	r3, [r7, #23]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d138      	bne.n	800a004 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	699b      	ldr	r3, [r3, #24]
 8009f98:	f003 0304 	and.w	r3, r3, #4
 8009f9c:	2b04      	cmp	r3, #4
 8009f9e:	d105      	bne.n	8009fac <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d001      	beq.n	8009fac <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	699b      	ldr	r3, [r3, #24]
 8009fb2:	f003 0310 	and.w	r3, r3, #16
 8009fb6:	2b10      	cmp	r3, #16
 8009fb8:	d121      	bne.n	8009ffe <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	2210      	movs	r2, #16
 8009fc0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2204      	movs	r2, #4
 8009fc6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2220      	movs	r2, #32
 8009fce:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	6859      	ldr	r1, [r3, #4]
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	4b24      	ldr	r3, [pc, #144]	@ (800a06c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009fdc:	400b      	ands	r3, r1
 8009fde:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2220      	movs	r2, #32
 8009fe4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2200      	movs	r2, #0
 8009fec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	75fb      	strb	r3, [r7, #23]
 8009ffc:	e002      	b.n	800a004 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2200      	movs	r2, #0
 800a002:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800a004:	f7fc fbcc 	bl	80067a0 <HAL_GetTick>
 800a008:	4602      	mov	r2, r0
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	1ad3      	subs	r3, r2, r3
 800a00e:	68ba      	ldr	r2, [r7, #8]
 800a010:	429a      	cmp	r2, r3
 800a012:	d302      	bcc.n	800a01a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d119      	bne.n	800a04e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800a01a:	7dfb      	ldrb	r3, [r7, #23]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d116      	bne.n	800a04e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	699b      	ldr	r3, [r3, #24]
 800a026:	f003 0304 	and.w	r3, r3, #4
 800a02a:	2b04      	cmp	r3, #4
 800a02c:	d00f      	beq.n	800a04e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a032:	f043 0220 	orr.w	r2, r3, #32
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2220      	movs	r2, #32
 800a03e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2200      	movs	r2, #0
 800a046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800a04a:	2301      	movs	r3, #1
 800a04c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	699b      	ldr	r3, [r3, #24]
 800a054:	f003 0304 	and.w	r3, r3, #4
 800a058:	2b04      	cmp	r3, #4
 800a05a:	d002      	beq.n	800a062 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800a05c:	7dfb      	ldrb	r3, [r7, #23]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d083      	beq.n	8009f6a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800a062:	7dfb      	ldrb	r3, [r7, #23]
}
 800a064:	4618      	mov	r0, r3
 800a066:	3718      	adds	r7, #24
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	fe00e800 	.word	0xfe00e800

0800a070 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b08a      	sub	sp, #40	@ 0x28
 800a074:	af00      	add	r7, sp, #0
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	60b9      	str	r1, [r7, #8]
 800a07a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a07c:	2300      	movs	r3, #0
 800a07e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	699b      	ldr	r3, [r3, #24]
 800a088:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a08a:	2300      	movs	r3, #0
 800a08c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a092:	69bb      	ldr	r3, [r7, #24]
 800a094:	f003 0310 	and.w	r3, r3, #16
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d068      	beq.n	800a16e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2210      	movs	r2, #16
 800a0a2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a0a4:	e049      	b.n	800a13a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a0ac:	d045      	beq.n	800a13a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a0ae:	f7fc fb77 	bl	80067a0 <HAL_GetTick>
 800a0b2:	4602      	mov	r2, r0
 800a0b4:	69fb      	ldr	r3, [r7, #28]
 800a0b6:	1ad3      	subs	r3, r2, r3
 800a0b8:	68ba      	ldr	r2, [r7, #8]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d302      	bcc.n	800a0c4 <I2C_IsErrorOccurred+0x54>
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d13a      	bne.n	800a13a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a0ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a0d6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	699b      	ldr	r3, [r3, #24]
 800a0de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a0e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a0e6:	d121      	bne.n	800a12c <I2C_IsErrorOccurred+0xbc>
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a0ee:	d01d      	beq.n	800a12c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800a0f0:	7cfb      	ldrb	r3, [r7, #19]
 800a0f2:	2b20      	cmp	r3, #32
 800a0f4:	d01a      	beq.n	800a12c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	685a      	ldr	r2, [r3, #4]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a104:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a106:	f7fc fb4b 	bl	80067a0 <HAL_GetTick>
 800a10a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a10c:	e00e      	b.n	800a12c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a10e:	f7fc fb47 	bl	80067a0 <HAL_GetTick>
 800a112:	4602      	mov	r2, r0
 800a114:	69fb      	ldr	r3, [r7, #28]
 800a116:	1ad3      	subs	r3, r2, r3
 800a118:	2b19      	cmp	r3, #25
 800a11a:	d907      	bls.n	800a12c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800a11c:	6a3b      	ldr	r3, [r7, #32]
 800a11e:	f043 0320 	orr.w	r3, r3, #32
 800a122:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a124:	2301      	movs	r3, #1
 800a126:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800a12a:	e006      	b.n	800a13a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	699b      	ldr	r3, [r3, #24]
 800a132:	f003 0320 	and.w	r3, r3, #32
 800a136:	2b20      	cmp	r3, #32
 800a138:	d1e9      	bne.n	800a10e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	699b      	ldr	r3, [r3, #24]
 800a140:	f003 0320 	and.w	r3, r3, #32
 800a144:	2b20      	cmp	r3, #32
 800a146:	d003      	beq.n	800a150 <I2C_IsErrorOccurred+0xe0>
 800a148:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d0aa      	beq.n	800a0a6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a150:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a154:	2b00      	cmp	r3, #0
 800a156:	d103      	bne.n	800a160 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	2220      	movs	r2, #32
 800a15e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a160:	6a3b      	ldr	r3, [r7, #32]
 800a162:	f043 0304 	orr.w	r3, r3, #4
 800a166:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a168:	2301      	movs	r3, #1
 800a16a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	699b      	ldr	r3, [r3, #24]
 800a174:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a176:	69bb      	ldr	r3, [r7, #24]
 800a178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d00b      	beq.n	800a198 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a180:	6a3b      	ldr	r3, [r7, #32]
 800a182:	f043 0301 	orr.w	r3, r3, #1
 800a186:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a190:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a192:	2301      	movs	r3, #1
 800a194:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a198:	69bb      	ldr	r3, [r7, #24]
 800a19a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d00b      	beq.n	800a1ba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a1a2:	6a3b      	ldr	r3, [r7, #32]
 800a1a4:	f043 0308 	orr.w	r3, r3, #8
 800a1a8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a1b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a1ba:	69bb      	ldr	r3, [r7, #24]
 800a1bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d00b      	beq.n	800a1dc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a1c4:	6a3b      	ldr	r3, [r7, #32]
 800a1c6:	f043 0302 	orr.w	r3, r3, #2
 800a1ca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a1d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800a1dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d01c      	beq.n	800a21e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a1e4:	68f8      	ldr	r0, [r7, #12]
 800a1e6:	f7ff fdaf 	bl	8009d48 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	6859      	ldr	r1, [r3, #4]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	4b0d      	ldr	r3, [pc, #52]	@ (800a22c <I2C_IsErrorOccurred+0x1bc>)
 800a1f6:	400b      	ands	r3, r1
 800a1f8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a1fe:	6a3b      	ldr	r3, [r7, #32]
 800a200:	431a      	orrs	r2, r3
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2220      	movs	r2, #32
 800a20a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2200      	movs	r2, #0
 800a212:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2200      	movs	r2, #0
 800a21a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800a21e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a222:	4618      	mov	r0, r3
 800a224:	3728      	adds	r7, #40	@ 0x28
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop
 800a22c:	fe00e800 	.word	0xfe00e800

0800a230 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a230:	b480      	push	{r7}
 800a232:	b087      	sub	sp, #28
 800a234:	af00      	add	r7, sp, #0
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	607b      	str	r3, [r7, #4]
 800a23a:	460b      	mov	r3, r1
 800a23c:	817b      	strh	r3, [r7, #10]
 800a23e:	4613      	mov	r3, r2
 800a240:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a242:	897b      	ldrh	r3, [r7, #10]
 800a244:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a248:	7a7b      	ldrb	r3, [r7, #9]
 800a24a:	041b      	lsls	r3, r3, #16
 800a24c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a250:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a256:	6a3b      	ldr	r3, [r7, #32]
 800a258:	4313      	orrs	r3, r2
 800a25a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a25e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	685a      	ldr	r2, [r3, #4]
 800a266:	6a3b      	ldr	r3, [r7, #32]
 800a268:	0d5b      	lsrs	r3, r3, #21
 800a26a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800a26e:	4b08      	ldr	r3, [pc, #32]	@ (800a290 <I2C_TransferConfig+0x60>)
 800a270:	430b      	orrs	r3, r1
 800a272:	43db      	mvns	r3, r3
 800a274:	ea02 0103 	and.w	r1, r2, r3
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	697a      	ldr	r2, [r7, #20]
 800a27e:	430a      	orrs	r2, r1
 800a280:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a282:	bf00      	nop
 800a284:	371c      	adds	r7, #28
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr
 800a28e:	bf00      	nop
 800a290:	03ff63ff 	.word	0x03ff63ff

0800a294 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a294:	b480      	push	{r7}
 800a296:	b083      	sub	sp, #12
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a2a4:	b2db      	uxtb	r3, r3
 800a2a6:	2b20      	cmp	r3, #32
 800a2a8:	d138      	bne.n	800a31c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d101      	bne.n	800a2b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a2b4:	2302      	movs	r3, #2
 800a2b6:	e032      	b.n	800a31e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2224      	movs	r2, #36	@ 0x24
 800a2c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f022 0201 	bic.w	r2, r2, #1
 800a2d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	681a      	ldr	r2, [r3, #0]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a2e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	6819      	ldr	r1, [r3, #0]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	683a      	ldr	r2, [r7, #0]
 800a2f4:	430a      	orrs	r2, r1
 800a2f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	681a      	ldr	r2, [r3, #0]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f042 0201 	orr.w	r2, r2, #1
 800a306:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2220      	movs	r2, #32
 800a30c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2200      	movs	r2, #0
 800a314:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a318:	2300      	movs	r3, #0
 800a31a:	e000      	b.n	800a31e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a31c:	2302      	movs	r3, #2
  }
}
 800a31e:	4618      	mov	r0, r3
 800a320:	370c      	adds	r7, #12
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr

0800a32a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a32a:	b480      	push	{r7}
 800a32c:	b085      	sub	sp, #20
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
 800a332:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	2b20      	cmp	r3, #32
 800a33e:	d139      	bne.n	800a3b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a346:	2b01      	cmp	r3, #1
 800a348:	d101      	bne.n	800a34e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a34a:	2302      	movs	r3, #2
 800a34c:	e033      	b.n	800a3b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2201      	movs	r2, #1
 800a352:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2224      	movs	r2, #36	@ 0x24
 800a35a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f022 0201 	bic.w	r2, r2, #1
 800a36c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a37c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	021b      	lsls	r3, r3, #8
 800a382:	68fa      	ldr	r2, [r7, #12]
 800a384:	4313      	orrs	r3, r2
 800a386:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	68fa      	ldr	r2, [r7, #12]
 800a38e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f042 0201 	orr.w	r2, r2, #1
 800a39e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2220      	movs	r2, #32
 800a3a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	e000      	b.n	800a3b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a3b4:	2302      	movs	r3, #2
  }
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3714      	adds	r7, #20
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c0:	4770      	bx	lr
	...

0800a3c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b085      	sub	sp, #20
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d141      	bne.n	800a456 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a3d2:	4b4b      	ldr	r3, [pc, #300]	@ (800a500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a3da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3de:	d131      	bne.n	800a444 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a3e0:	4b47      	ldr	r3, [pc, #284]	@ (800a500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a3e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3e6:	4a46      	ldr	r2, [pc, #280]	@ (800a500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a3e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a3ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a3f0:	4b43      	ldr	r3, [pc, #268]	@ (800a500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800a3f8:	4a41      	ldr	r2, [pc, #260]	@ (800a500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a3fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a3fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a400:	4b40      	ldr	r3, [pc, #256]	@ (800a504 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	2232      	movs	r2, #50	@ 0x32
 800a406:	fb02 f303 	mul.w	r3, r2, r3
 800a40a:	4a3f      	ldr	r2, [pc, #252]	@ (800a508 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a40c:	fba2 2303 	umull	r2, r3, r2, r3
 800a410:	0c9b      	lsrs	r3, r3, #18
 800a412:	3301      	adds	r3, #1
 800a414:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a416:	e002      	b.n	800a41e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	3b01      	subs	r3, #1
 800a41c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a41e:	4b38      	ldr	r3, [pc, #224]	@ (800a500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a420:	695b      	ldr	r3, [r3, #20]
 800a422:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a426:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a42a:	d102      	bne.n	800a432 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d1f2      	bne.n	800a418 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a432:	4b33      	ldr	r3, [pc, #204]	@ (800a500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a434:	695b      	ldr	r3, [r3, #20]
 800a436:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a43a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a43e:	d158      	bne.n	800a4f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a440:	2303      	movs	r3, #3
 800a442:	e057      	b.n	800a4f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a444:	4b2e      	ldr	r3, [pc, #184]	@ (800a500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a446:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a44a:	4a2d      	ldr	r2, [pc, #180]	@ (800a500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a44c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a450:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800a454:	e04d      	b.n	800a4f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a45c:	d141      	bne.n	800a4e2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a45e:	4b28      	ldr	r3, [pc, #160]	@ (800a500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a466:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a46a:	d131      	bne.n	800a4d0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a46c:	4b24      	ldr	r3, [pc, #144]	@ (800a500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a46e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a472:	4a23      	ldr	r2, [pc, #140]	@ (800a500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a474:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a478:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a47c:	4b20      	ldr	r3, [pc, #128]	@ (800a500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800a484:	4a1e      	ldr	r2, [pc, #120]	@ (800a500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a486:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a48a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a48c:	4b1d      	ldr	r3, [pc, #116]	@ (800a504 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	2232      	movs	r2, #50	@ 0x32
 800a492:	fb02 f303 	mul.w	r3, r2, r3
 800a496:	4a1c      	ldr	r2, [pc, #112]	@ (800a508 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a498:	fba2 2303 	umull	r2, r3, r2, r3
 800a49c:	0c9b      	lsrs	r3, r3, #18
 800a49e:	3301      	adds	r3, #1
 800a4a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a4a2:	e002      	b.n	800a4aa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	3b01      	subs	r3, #1
 800a4a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a4aa:	4b15      	ldr	r3, [pc, #84]	@ (800a500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a4ac:	695b      	ldr	r3, [r3, #20]
 800a4ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a4b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a4b6:	d102      	bne.n	800a4be <HAL_PWREx_ControlVoltageScaling+0xfa>
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d1f2      	bne.n	800a4a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a4be:	4b10      	ldr	r3, [pc, #64]	@ (800a500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a4c0:	695b      	ldr	r3, [r3, #20]
 800a4c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a4c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a4ca:	d112      	bne.n	800a4f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a4cc:	2303      	movs	r3, #3
 800a4ce:	e011      	b.n	800a4f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a4d0:	4b0b      	ldr	r3, [pc, #44]	@ (800a500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a4d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a4d6:	4a0a      	ldr	r2, [pc, #40]	@ (800a500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a4d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a4dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800a4e0:	e007      	b.n	800a4f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a4e2:	4b07      	ldr	r3, [pc, #28]	@ (800a500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800a4ea:	4a05      	ldr	r2, [pc, #20]	@ (800a500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a4ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a4f0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800a4f2:	2300      	movs	r3, #0
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3714      	adds	r7, #20
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr
 800a500:	40007000 	.word	0x40007000
 800a504:	20000004 	.word	0x20000004
 800a508:	431bde83 	.word	0x431bde83

0800a50c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b088      	sub	sp, #32
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d101      	bne.n	800a51e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a51a:	2301      	movs	r3, #1
 800a51c:	e2fe      	b.n	800ab1c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f003 0301 	and.w	r3, r3, #1
 800a526:	2b00      	cmp	r3, #0
 800a528:	d075      	beq.n	800a616 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a52a:	4b97      	ldr	r3, [pc, #604]	@ (800a788 <HAL_RCC_OscConfig+0x27c>)
 800a52c:	689b      	ldr	r3, [r3, #8]
 800a52e:	f003 030c 	and.w	r3, r3, #12
 800a532:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a534:	4b94      	ldr	r3, [pc, #592]	@ (800a788 <HAL_RCC_OscConfig+0x27c>)
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	f003 0303 	and.w	r3, r3, #3
 800a53c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	2b0c      	cmp	r3, #12
 800a542:	d102      	bne.n	800a54a <HAL_RCC_OscConfig+0x3e>
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	2b03      	cmp	r3, #3
 800a548:	d002      	beq.n	800a550 <HAL_RCC_OscConfig+0x44>
 800a54a:	69bb      	ldr	r3, [r7, #24]
 800a54c:	2b08      	cmp	r3, #8
 800a54e:	d10b      	bne.n	800a568 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a550:	4b8d      	ldr	r3, [pc, #564]	@ (800a788 <HAL_RCC_OscConfig+0x27c>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d05b      	beq.n	800a614 <HAL_RCC_OscConfig+0x108>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d157      	bne.n	800a614 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a564:	2301      	movs	r3, #1
 800a566:	e2d9      	b.n	800ab1c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a570:	d106      	bne.n	800a580 <HAL_RCC_OscConfig+0x74>
 800a572:	4b85      	ldr	r3, [pc, #532]	@ (800a788 <HAL_RCC_OscConfig+0x27c>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4a84      	ldr	r2, [pc, #528]	@ (800a788 <HAL_RCC_OscConfig+0x27c>)
 800a578:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a57c:	6013      	str	r3, [r2, #0]
 800a57e:	e01d      	b.n	800a5bc <HAL_RCC_OscConfig+0xb0>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a588:	d10c      	bne.n	800a5a4 <HAL_RCC_OscConfig+0x98>
 800a58a:	4b7f      	ldr	r3, [pc, #508]	@ (800a788 <HAL_RCC_OscConfig+0x27c>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4a7e      	ldr	r2, [pc, #504]	@ (800a788 <HAL_RCC_OscConfig+0x27c>)
 800a590:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a594:	6013      	str	r3, [r2, #0]
 800a596:	4b7c      	ldr	r3, [pc, #496]	@ (800a788 <HAL_RCC_OscConfig+0x27c>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	4a7b      	ldr	r2, [pc, #492]	@ (800a788 <HAL_RCC_OscConfig+0x27c>)
 800a59c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a5a0:	6013      	str	r3, [r2, #0]
 800a5a2:	e00b      	b.n	800a5bc <HAL_RCC_OscConfig+0xb0>
 800a5a4:	4b78      	ldr	r3, [pc, #480]	@ (800a788 <HAL_RCC_OscConfig+0x27c>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	4a77      	ldr	r2, [pc, #476]	@ (800a788 <HAL_RCC_OscConfig+0x27c>)
 800a5aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a5ae:	6013      	str	r3, [r2, #0]
 800a5b0:	4b75      	ldr	r3, [pc, #468]	@ (800a788 <HAL_RCC_OscConfig+0x27c>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a74      	ldr	r2, [pc, #464]	@ (800a788 <HAL_RCC_OscConfig+0x27c>)
 800a5b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a5ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d013      	beq.n	800a5ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5c4:	f7fc f8ec 	bl	80067a0 <HAL_GetTick>
 800a5c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a5ca:	e008      	b.n	800a5de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a5cc:	f7fc f8e8 	bl	80067a0 <HAL_GetTick>
 800a5d0:	4602      	mov	r2, r0
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	1ad3      	subs	r3, r2, r3
 800a5d6:	2b64      	cmp	r3, #100	@ 0x64
 800a5d8:	d901      	bls.n	800a5de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a5da:	2303      	movs	r3, #3
 800a5dc:	e29e      	b.n	800ab1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a5de:	4b6a      	ldr	r3, [pc, #424]	@ (800a788 <HAL_RCC_OscConfig+0x27c>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d0f0      	beq.n	800a5cc <HAL_RCC_OscConfig+0xc0>
 800a5ea:	e014      	b.n	800a616 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5ec:	f7fc f8d8 	bl	80067a0 <HAL_GetTick>
 800a5f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a5f2:	e008      	b.n	800a606 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a5f4:	f7fc f8d4 	bl	80067a0 <HAL_GetTick>
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	1ad3      	subs	r3, r2, r3
 800a5fe:	2b64      	cmp	r3, #100	@ 0x64
 800a600:	d901      	bls.n	800a606 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a602:	2303      	movs	r3, #3
 800a604:	e28a      	b.n	800ab1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a606:	4b60      	ldr	r3, [pc, #384]	@ (800a788 <HAL_RCC_OscConfig+0x27c>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d1f0      	bne.n	800a5f4 <HAL_RCC_OscConfig+0xe8>
 800a612:	e000      	b.n	800a616 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f003 0302 	and.w	r3, r3, #2
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d075      	beq.n	800a70e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a622:	4b59      	ldr	r3, [pc, #356]	@ (800a788 <HAL_RCC_OscConfig+0x27c>)
 800a624:	689b      	ldr	r3, [r3, #8]
 800a626:	f003 030c 	and.w	r3, r3, #12
 800a62a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a62c:	4b56      	ldr	r3, [pc, #344]	@ (800a788 <HAL_RCC_OscConfig+0x27c>)
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	f003 0303 	and.w	r3, r3, #3
 800a634:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800a636:	69bb      	ldr	r3, [r7, #24]
 800a638:	2b0c      	cmp	r3, #12
 800a63a:	d102      	bne.n	800a642 <HAL_RCC_OscConfig+0x136>
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	2b02      	cmp	r3, #2
 800a640:	d002      	beq.n	800a648 <HAL_RCC_OscConfig+0x13c>
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	2b04      	cmp	r3, #4
 800a646:	d11f      	bne.n	800a688 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a648:	4b4f      	ldr	r3, [pc, #316]	@ (800a788 <HAL_RCC_OscConfig+0x27c>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a650:	2b00      	cmp	r3, #0
 800a652:	d005      	beq.n	800a660 <HAL_RCC_OscConfig+0x154>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	68db      	ldr	r3, [r3, #12]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d101      	bne.n	800a660 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800a65c:	2301      	movs	r3, #1
 800a65e:	e25d      	b.n	800ab1c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a660:	4b49      	ldr	r3, [pc, #292]	@ (800a788 <HAL_RCC_OscConfig+0x27c>)
 800a662:	685b      	ldr	r3, [r3, #4]
 800a664:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	691b      	ldr	r3, [r3, #16]
 800a66c:	061b      	lsls	r3, r3, #24
 800a66e:	4946      	ldr	r1, [pc, #280]	@ (800a788 <HAL_RCC_OscConfig+0x27c>)
 800a670:	4313      	orrs	r3, r2
 800a672:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a674:	4b45      	ldr	r3, [pc, #276]	@ (800a78c <HAL_RCC_OscConfig+0x280>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4618      	mov	r0, r3
 800a67a:	f7f9 fcf3 	bl	8004064 <HAL_InitTick>
 800a67e:	4603      	mov	r3, r0
 800a680:	2b00      	cmp	r3, #0
 800a682:	d043      	beq.n	800a70c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800a684:	2301      	movs	r3, #1
 800a686:	e249      	b.n	800ab1c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	68db      	ldr	r3, [r3, #12]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d023      	beq.n	800a6d8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a690:	4b3d      	ldr	r3, [pc, #244]	@ (800a788 <HAL_RCC_OscConfig+0x27c>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4a3c      	ldr	r2, [pc, #240]	@ (800a788 <HAL_RCC_OscConfig+0x27c>)
 800a696:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a69a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a69c:	f7fc f880 	bl	80067a0 <HAL_GetTick>
 800a6a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a6a2:	e008      	b.n	800a6b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a6a4:	f7fc f87c 	bl	80067a0 <HAL_GetTick>
 800a6a8:	4602      	mov	r2, r0
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	1ad3      	subs	r3, r2, r3
 800a6ae:	2b02      	cmp	r3, #2
 800a6b0:	d901      	bls.n	800a6b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a6b2:	2303      	movs	r3, #3
 800a6b4:	e232      	b.n	800ab1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a6b6:	4b34      	ldr	r3, [pc, #208]	@ (800a788 <HAL_RCC_OscConfig+0x27c>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d0f0      	beq.n	800a6a4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a6c2:	4b31      	ldr	r3, [pc, #196]	@ (800a788 <HAL_RCC_OscConfig+0x27c>)
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	691b      	ldr	r3, [r3, #16]
 800a6ce:	061b      	lsls	r3, r3, #24
 800a6d0:	492d      	ldr	r1, [pc, #180]	@ (800a788 <HAL_RCC_OscConfig+0x27c>)
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	604b      	str	r3, [r1, #4]
 800a6d6:	e01a      	b.n	800a70e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a6d8:	4b2b      	ldr	r3, [pc, #172]	@ (800a788 <HAL_RCC_OscConfig+0x27c>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a2a      	ldr	r2, [pc, #168]	@ (800a788 <HAL_RCC_OscConfig+0x27c>)
 800a6de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a6e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6e4:	f7fc f85c 	bl	80067a0 <HAL_GetTick>
 800a6e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a6ea:	e008      	b.n	800a6fe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a6ec:	f7fc f858 	bl	80067a0 <HAL_GetTick>
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	1ad3      	subs	r3, r2, r3
 800a6f6:	2b02      	cmp	r3, #2
 800a6f8:	d901      	bls.n	800a6fe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800a6fa:	2303      	movs	r3, #3
 800a6fc:	e20e      	b.n	800ab1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a6fe:	4b22      	ldr	r3, [pc, #136]	@ (800a788 <HAL_RCC_OscConfig+0x27c>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a706:	2b00      	cmp	r3, #0
 800a708:	d1f0      	bne.n	800a6ec <HAL_RCC_OscConfig+0x1e0>
 800a70a:	e000      	b.n	800a70e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a70c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f003 0308 	and.w	r3, r3, #8
 800a716:	2b00      	cmp	r3, #0
 800a718:	d041      	beq.n	800a79e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	695b      	ldr	r3, [r3, #20]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d01c      	beq.n	800a75c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a722:	4b19      	ldr	r3, [pc, #100]	@ (800a788 <HAL_RCC_OscConfig+0x27c>)
 800a724:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a728:	4a17      	ldr	r2, [pc, #92]	@ (800a788 <HAL_RCC_OscConfig+0x27c>)
 800a72a:	f043 0301 	orr.w	r3, r3, #1
 800a72e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a732:	f7fc f835 	bl	80067a0 <HAL_GetTick>
 800a736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a738:	e008      	b.n	800a74c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a73a:	f7fc f831 	bl	80067a0 <HAL_GetTick>
 800a73e:	4602      	mov	r2, r0
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	1ad3      	subs	r3, r2, r3
 800a744:	2b02      	cmp	r3, #2
 800a746:	d901      	bls.n	800a74c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a748:	2303      	movs	r3, #3
 800a74a:	e1e7      	b.n	800ab1c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a74c:	4b0e      	ldr	r3, [pc, #56]	@ (800a788 <HAL_RCC_OscConfig+0x27c>)
 800a74e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a752:	f003 0302 	and.w	r3, r3, #2
 800a756:	2b00      	cmp	r3, #0
 800a758:	d0ef      	beq.n	800a73a <HAL_RCC_OscConfig+0x22e>
 800a75a:	e020      	b.n	800a79e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a75c:	4b0a      	ldr	r3, [pc, #40]	@ (800a788 <HAL_RCC_OscConfig+0x27c>)
 800a75e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a762:	4a09      	ldr	r2, [pc, #36]	@ (800a788 <HAL_RCC_OscConfig+0x27c>)
 800a764:	f023 0301 	bic.w	r3, r3, #1
 800a768:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a76c:	f7fc f818 	bl	80067a0 <HAL_GetTick>
 800a770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a772:	e00d      	b.n	800a790 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a774:	f7fc f814 	bl	80067a0 <HAL_GetTick>
 800a778:	4602      	mov	r2, r0
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	1ad3      	subs	r3, r2, r3
 800a77e:	2b02      	cmp	r3, #2
 800a780:	d906      	bls.n	800a790 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a782:	2303      	movs	r3, #3
 800a784:	e1ca      	b.n	800ab1c <HAL_RCC_OscConfig+0x610>
 800a786:	bf00      	nop
 800a788:	40021000 	.word	0x40021000
 800a78c:	2000013c 	.word	0x2000013c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a790:	4b8c      	ldr	r3, [pc, #560]	@ (800a9c4 <HAL_RCC_OscConfig+0x4b8>)
 800a792:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a796:	f003 0302 	and.w	r3, r3, #2
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d1ea      	bne.n	800a774 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f003 0304 	and.w	r3, r3, #4
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	f000 80a6 	beq.w	800a8f8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a7b0:	4b84      	ldr	r3, [pc, #528]	@ (800a9c4 <HAL_RCC_OscConfig+0x4b8>)
 800a7b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d101      	bne.n	800a7c0 <HAL_RCC_OscConfig+0x2b4>
 800a7bc:	2301      	movs	r3, #1
 800a7be:	e000      	b.n	800a7c2 <HAL_RCC_OscConfig+0x2b6>
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d00d      	beq.n	800a7e2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a7c6:	4b7f      	ldr	r3, [pc, #508]	@ (800a9c4 <HAL_RCC_OscConfig+0x4b8>)
 800a7c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7ca:	4a7e      	ldr	r2, [pc, #504]	@ (800a9c4 <HAL_RCC_OscConfig+0x4b8>)
 800a7cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a7d0:	6593      	str	r3, [r2, #88]	@ 0x58
 800a7d2:	4b7c      	ldr	r3, [pc, #496]	@ (800a9c4 <HAL_RCC_OscConfig+0x4b8>)
 800a7d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a7da:	60fb      	str	r3, [r7, #12]
 800a7dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a7e2:	4b79      	ldr	r3, [pc, #484]	@ (800a9c8 <HAL_RCC_OscConfig+0x4bc>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d118      	bne.n	800a820 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a7ee:	4b76      	ldr	r3, [pc, #472]	@ (800a9c8 <HAL_RCC_OscConfig+0x4bc>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4a75      	ldr	r2, [pc, #468]	@ (800a9c8 <HAL_RCC_OscConfig+0x4bc>)
 800a7f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a7f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a7fa:	f7fb ffd1 	bl	80067a0 <HAL_GetTick>
 800a7fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a800:	e008      	b.n	800a814 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a802:	f7fb ffcd 	bl	80067a0 <HAL_GetTick>
 800a806:	4602      	mov	r2, r0
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	1ad3      	subs	r3, r2, r3
 800a80c:	2b02      	cmp	r3, #2
 800a80e:	d901      	bls.n	800a814 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800a810:	2303      	movs	r3, #3
 800a812:	e183      	b.n	800ab1c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a814:	4b6c      	ldr	r3, [pc, #432]	@ (800a9c8 <HAL_RCC_OscConfig+0x4bc>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d0f0      	beq.n	800a802 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	689b      	ldr	r3, [r3, #8]
 800a824:	2b01      	cmp	r3, #1
 800a826:	d108      	bne.n	800a83a <HAL_RCC_OscConfig+0x32e>
 800a828:	4b66      	ldr	r3, [pc, #408]	@ (800a9c4 <HAL_RCC_OscConfig+0x4b8>)
 800a82a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a82e:	4a65      	ldr	r2, [pc, #404]	@ (800a9c4 <HAL_RCC_OscConfig+0x4b8>)
 800a830:	f043 0301 	orr.w	r3, r3, #1
 800a834:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a838:	e024      	b.n	800a884 <HAL_RCC_OscConfig+0x378>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	689b      	ldr	r3, [r3, #8]
 800a83e:	2b05      	cmp	r3, #5
 800a840:	d110      	bne.n	800a864 <HAL_RCC_OscConfig+0x358>
 800a842:	4b60      	ldr	r3, [pc, #384]	@ (800a9c4 <HAL_RCC_OscConfig+0x4b8>)
 800a844:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a848:	4a5e      	ldr	r2, [pc, #376]	@ (800a9c4 <HAL_RCC_OscConfig+0x4b8>)
 800a84a:	f043 0304 	orr.w	r3, r3, #4
 800a84e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a852:	4b5c      	ldr	r3, [pc, #368]	@ (800a9c4 <HAL_RCC_OscConfig+0x4b8>)
 800a854:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a858:	4a5a      	ldr	r2, [pc, #360]	@ (800a9c4 <HAL_RCC_OscConfig+0x4b8>)
 800a85a:	f043 0301 	orr.w	r3, r3, #1
 800a85e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a862:	e00f      	b.n	800a884 <HAL_RCC_OscConfig+0x378>
 800a864:	4b57      	ldr	r3, [pc, #348]	@ (800a9c4 <HAL_RCC_OscConfig+0x4b8>)
 800a866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a86a:	4a56      	ldr	r2, [pc, #344]	@ (800a9c4 <HAL_RCC_OscConfig+0x4b8>)
 800a86c:	f023 0301 	bic.w	r3, r3, #1
 800a870:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a874:	4b53      	ldr	r3, [pc, #332]	@ (800a9c4 <HAL_RCC_OscConfig+0x4b8>)
 800a876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a87a:	4a52      	ldr	r2, [pc, #328]	@ (800a9c4 <HAL_RCC_OscConfig+0x4b8>)
 800a87c:	f023 0304 	bic.w	r3, r3, #4
 800a880:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	689b      	ldr	r3, [r3, #8]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d016      	beq.n	800a8ba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a88c:	f7fb ff88 	bl	80067a0 <HAL_GetTick>
 800a890:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a892:	e00a      	b.n	800a8aa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a894:	f7fb ff84 	bl	80067a0 <HAL_GetTick>
 800a898:	4602      	mov	r2, r0
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	1ad3      	subs	r3, r2, r3
 800a89e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d901      	bls.n	800a8aa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800a8a6:	2303      	movs	r3, #3
 800a8a8:	e138      	b.n	800ab1c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a8aa:	4b46      	ldr	r3, [pc, #280]	@ (800a9c4 <HAL_RCC_OscConfig+0x4b8>)
 800a8ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8b0:	f003 0302 	and.w	r3, r3, #2
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d0ed      	beq.n	800a894 <HAL_RCC_OscConfig+0x388>
 800a8b8:	e015      	b.n	800a8e6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8ba:	f7fb ff71 	bl	80067a0 <HAL_GetTick>
 800a8be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a8c0:	e00a      	b.n	800a8d8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a8c2:	f7fb ff6d 	bl	80067a0 <HAL_GetTick>
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	1ad3      	subs	r3, r2, r3
 800a8cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d901      	bls.n	800a8d8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800a8d4:	2303      	movs	r3, #3
 800a8d6:	e121      	b.n	800ab1c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a8d8:	4b3a      	ldr	r3, [pc, #232]	@ (800a9c4 <HAL_RCC_OscConfig+0x4b8>)
 800a8da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8de:	f003 0302 	and.w	r3, r3, #2
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d1ed      	bne.n	800a8c2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a8e6:	7ffb      	ldrb	r3, [r7, #31]
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d105      	bne.n	800a8f8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a8ec:	4b35      	ldr	r3, [pc, #212]	@ (800a9c4 <HAL_RCC_OscConfig+0x4b8>)
 800a8ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8f0:	4a34      	ldr	r2, [pc, #208]	@ (800a9c4 <HAL_RCC_OscConfig+0x4b8>)
 800a8f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a8f6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f003 0320 	and.w	r3, r3, #32
 800a900:	2b00      	cmp	r3, #0
 800a902:	d03c      	beq.n	800a97e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	699b      	ldr	r3, [r3, #24]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d01c      	beq.n	800a946 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a90c:	4b2d      	ldr	r3, [pc, #180]	@ (800a9c4 <HAL_RCC_OscConfig+0x4b8>)
 800a90e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a912:	4a2c      	ldr	r2, [pc, #176]	@ (800a9c4 <HAL_RCC_OscConfig+0x4b8>)
 800a914:	f043 0301 	orr.w	r3, r3, #1
 800a918:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a91c:	f7fb ff40 	bl	80067a0 <HAL_GetTick>
 800a920:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a922:	e008      	b.n	800a936 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a924:	f7fb ff3c 	bl	80067a0 <HAL_GetTick>
 800a928:	4602      	mov	r2, r0
 800a92a:	693b      	ldr	r3, [r7, #16]
 800a92c:	1ad3      	subs	r3, r2, r3
 800a92e:	2b02      	cmp	r3, #2
 800a930:	d901      	bls.n	800a936 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800a932:	2303      	movs	r3, #3
 800a934:	e0f2      	b.n	800ab1c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a936:	4b23      	ldr	r3, [pc, #140]	@ (800a9c4 <HAL_RCC_OscConfig+0x4b8>)
 800a938:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a93c:	f003 0302 	and.w	r3, r3, #2
 800a940:	2b00      	cmp	r3, #0
 800a942:	d0ef      	beq.n	800a924 <HAL_RCC_OscConfig+0x418>
 800a944:	e01b      	b.n	800a97e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a946:	4b1f      	ldr	r3, [pc, #124]	@ (800a9c4 <HAL_RCC_OscConfig+0x4b8>)
 800a948:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a94c:	4a1d      	ldr	r2, [pc, #116]	@ (800a9c4 <HAL_RCC_OscConfig+0x4b8>)
 800a94e:	f023 0301 	bic.w	r3, r3, #1
 800a952:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a956:	f7fb ff23 	bl	80067a0 <HAL_GetTick>
 800a95a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a95c:	e008      	b.n	800a970 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a95e:	f7fb ff1f 	bl	80067a0 <HAL_GetTick>
 800a962:	4602      	mov	r2, r0
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	1ad3      	subs	r3, r2, r3
 800a968:	2b02      	cmp	r3, #2
 800a96a:	d901      	bls.n	800a970 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800a96c:	2303      	movs	r3, #3
 800a96e:	e0d5      	b.n	800ab1c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a970:	4b14      	ldr	r3, [pc, #80]	@ (800a9c4 <HAL_RCC_OscConfig+0x4b8>)
 800a972:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a976:	f003 0302 	and.w	r3, r3, #2
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d1ef      	bne.n	800a95e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	69db      	ldr	r3, [r3, #28]
 800a982:	2b00      	cmp	r3, #0
 800a984:	f000 80c9 	beq.w	800ab1a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a988:	4b0e      	ldr	r3, [pc, #56]	@ (800a9c4 <HAL_RCC_OscConfig+0x4b8>)
 800a98a:	689b      	ldr	r3, [r3, #8]
 800a98c:	f003 030c 	and.w	r3, r3, #12
 800a990:	2b0c      	cmp	r3, #12
 800a992:	f000 8083 	beq.w	800aa9c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	69db      	ldr	r3, [r3, #28]
 800a99a:	2b02      	cmp	r3, #2
 800a99c:	d15e      	bne.n	800aa5c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a99e:	4b09      	ldr	r3, [pc, #36]	@ (800a9c4 <HAL_RCC_OscConfig+0x4b8>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	4a08      	ldr	r2, [pc, #32]	@ (800a9c4 <HAL_RCC_OscConfig+0x4b8>)
 800a9a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a9a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9aa:	f7fb fef9 	bl	80067a0 <HAL_GetTick>
 800a9ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a9b0:	e00c      	b.n	800a9cc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a9b2:	f7fb fef5 	bl	80067a0 <HAL_GetTick>
 800a9b6:	4602      	mov	r2, r0
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	1ad3      	subs	r3, r2, r3
 800a9bc:	2b02      	cmp	r3, #2
 800a9be:	d905      	bls.n	800a9cc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800a9c0:	2303      	movs	r3, #3
 800a9c2:	e0ab      	b.n	800ab1c <HAL_RCC_OscConfig+0x610>
 800a9c4:	40021000 	.word	0x40021000
 800a9c8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a9cc:	4b55      	ldr	r3, [pc, #340]	@ (800ab24 <HAL_RCC_OscConfig+0x618>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d1ec      	bne.n	800a9b2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a9d8:	4b52      	ldr	r3, [pc, #328]	@ (800ab24 <HAL_RCC_OscConfig+0x618>)
 800a9da:	68da      	ldr	r2, [r3, #12]
 800a9dc:	4b52      	ldr	r3, [pc, #328]	@ (800ab28 <HAL_RCC_OscConfig+0x61c>)
 800a9de:	4013      	ands	r3, r2
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	6a11      	ldr	r1, [r2, #32]
 800a9e4:	687a      	ldr	r2, [r7, #4]
 800a9e6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a9e8:	3a01      	subs	r2, #1
 800a9ea:	0112      	lsls	r2, r2, #4
 800a9ec:	4311      	orrs	r1, r2
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800a9f2:	0212      	lsls	r2, r2, #8
 800a9f4:	4311      	orrs	r1, r2
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a9fa:	0852      	lsrs	r2, r2, #1
 800a9fc:	3a01      	subs	r2, #1
 800a9fe:	0552      	lsls	r2, r2, #21
 800aa00:	4311      	orrs	r1, r2
 800aa02:	687a      	ldr	r2, [r7, #4]
 800aa04:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800aa06:	0852      	lsrs	r2, r2, #1
 800aa08:	3a01      	subs	r2, #1
 800aa0a:	0652      	lsls	r2, r2, #25
 800aa0c:	4311      	orrs	r1, r2
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800aa12:	06d2      	lsls	r2, r2, #27
 800aa14:	430a      	orrs	r2, r1
 800aa16:	4943      	ldr	r1, [pc, #268]	@ (800ab24 <HAL_RCC_OscConfig+0x618>)
 800aa18:	4313      	orrs	r3, r2
 800aa1a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aa1c:	4b41      	ldr	r3, [pc, #260]	@ (800ab24 <HAL_RCC_OscConfig+0x618>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4a40      	ldr	r2, [pc, #256]	@ (800ab24 <HAL_RCC_OscConfig+0x618>)
 800aa22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aa26:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800aa28:	4b3e      	ldr	r3, [pc, #248]	@ (800ab24 <HAL_RCC_OscConfig+0x618>)
 800aa2a:	68db      	ldr	r3, [r3, #12]
 800aa2c:	4a3d      	ldr	r2, [pc, #244]	@ (800ab24 <HAL_RCC_OscConfig+0x618>)
 800aa2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aa32:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa34:	f7fb feb4 	bl	80067a0 <HAL_GetTick>
 800aa38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aa3a:	e008      	b.n	800aa4e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa3c:	f7fb feb0 	bl	80067a0 <HAL_GetTick>
 800aa40:	4602      	mov	r2, r0
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	1ad3      	subs	r3, r2, r3
 800aa46:	2b02      	cmp	r3, #2
 800aa48:	d901      	bls.n	800aa4e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800aa4a:	2303      	movs	r3, #3
 800aa4c:	e066      	b.n	800ab1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aa4e:	4b35      	ldr	r3, [pc, #212]	@ (800ab24 <HAL_RCC_OscConfig+0x618>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d0f0      	beq.n	800aa3c <HAL_RCC_OscConfig+0x530>
 800aa5a:	e05e      	b.n	800ab1a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa5c:	4b31      	ldr	r3, [pc, #196]	@ (800ab24 <HAL_RCC_OscConfig+0x618>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4a30      	ldr	r2, [pc, #192]	@ (800ab24 <HAL_RCC_OscConfig+0x618>)
 800aa62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aa66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa68:	f7fb fe9a 	bl	80067a0 <HAL_GetTick>
 800aa6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800aa6e:	e008      	b.n	800aa82 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa70:	f7fb fe96 	bl	80067a0 <HAL_GetTick>
 800aa74:	4602      	mov	r2, r0
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	1ad3      	subs	r3, r2, r3
 800aa7a:	2b02      	cmp	r3, #2
 800aa7c:	d901      	bls.n	800aa82 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800aa7e:	2303      	movs	r3, #3
 800aa80:	e04c      	b.n	800ab1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800aa82:	4b28      	ldr	r3, [pc, #160]	@ (800ab24 <HAL_RCC_OscConfig+0x618>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d1f0      	bne.n	800aa70 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800aa8e:	4b25      	ldr	r3, [pc, #148]	@ (800ab24 <HAL_RCC_OscConfig+0x618>)
 800aa90:	68da      	ldr	r2, [r3, #12]
 800aa92:	4924      	ldr	r1, [pc, #144]	@ (800ab24 <HAL_RCC_OscConfig+0x618>)
 800aa94:	4b25      	ldr	r3, [pc, #148]	@ (800ab2c <HAL_RCC_OscConfig+0x620>)
 800aa96:	4013      	ands	r3, r2
 800aa98:	60cb      	str	r3, [r1, #12]
 800aa9a:	e03e      	b.n	800ab1a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	69db      	ldr	r3, [r3, #28]
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	d101      	bne.n	800aaa8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	e039      	b.n	800ab1c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800aaa8:	4b1e      	ldr	r3, [pc, #120]	@ (800ab24 <HAL_RCC_OscConfig+0x618>)
 800aaaa:	68db      	ldr	r3, [r3, #12]
 800aaac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	f003 0203 	and.w	r2, r3, #3
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6a1b      	ldr	r3, [r3, #32]
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d12c      	bne.n	800ab16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aac6:	3b01      	subs	r3, #1
 800aac8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d123      	bne.n	800ab16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aad8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800aada:	429a      	cmp	r2, r3
 800aadc:	d11b      	bne.n	800ab16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aae8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d113      	bne.n	800ab16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aaf8:	085b      	lsrs	r3, r3, #1
 800aafa:	3b01      	subs	r3, #1
 800aafc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d109      	bne.n	800ab16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab0c:	085b      	lsrs	r3, r3, #1
 800ab0e:	3b01      	subs	r3, #1
 800ab10:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d001      	beq.n	800ab1a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800ab16:	2301      	movs	r3, #1
 800ab18:	e000      	b.n	800ab1c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800ab1a:	2300      	movs	r3, #0
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3720      	adds	r7, #32
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}
 800ab24:	40021000 	.word	0x40021000
 800ab28:	019f800c 	.word	0x019f800c
 800ab2c:	feeefffc 	.word	0xfeeefffc

0800ab30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b086      	sub	sp, #24
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d101      	bne.n	800ab48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800ab44:	2301      	movs	r3, #1
 800ab46:	e11e      	b.n	800ad86 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ab48:	4b91      	ldr	r3, [pc, #580]	@ (800ad90 <HAL_RCC_ClockConfig+0x260>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f003 030f 	and.w	r3, r3, #15
 800ab50:	683a      	ldr	r2, [r7, #0]
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d910      	bls.n	800ab78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab56:	4b8e      	ldr	r3, [pc, #568]	@ (800ad90 <HAL_RCC_ClockConfig+0x260>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f023 020f 	bic.w	r2, r3, #15
 800ab5e:	498c      	ldr	r1, [pc, #560]	@ (800ad90 <HAL_RCC_ClockConfig+0x260>)
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	4313      	orrs	r3, r2
 800ab64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab66:	4b8a      	ldr	r3, [pc, #552]	@ (800ad90 <HAL_RCC_ClockConfig+0x260>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f003 030f 	and.w	r3, r3, #15
 800ab6e:	683a      	ldr	r2, [r7, #0]
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d001      	beq.n	800ab78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800ab74:	2301      	movs	r3, #1
 800ab76:	e106      	b.n	800ad86 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f003 0301 	and.w	r3, r3, #1
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d073      	beq.n	800ac6c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	2b03      	cmp	r3, #3
 800ab8a:	d129      	bne.n	800abe0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ab8c:	4b81      	ldr	r3, [pc, #516]	@ (800ad94 <HAL_RCC_ClockConfig+0x264>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d101      	bne.n	800ab9c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800ab98:	2301      	movs	r3, #1
 800ab9a:	e0f4      	b.n	800ad86 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800ab9c:	f000 f9d0 	bl	800af40 <RCC_GetSysClockFreqFromPLLSource>
 800aba0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	4a7c      	ldr	r2, [pc, #496]	@ (800ad98 <HAL_RCC_ClockConfig+0x268>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d93f      	bls.n	800ac2a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800abaa:	4b7a      	ldr	r3, [pc, #488]	@ (800ad94 <HAL_RCC_ClockConfig+0x264>)
 800abac:	689b      	ldr	r3, [r3, #8]
 800abae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d009      	beq.n	800abca <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d033      	beq.n	800ac2a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d12f      	bne.n	800ac2a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800abca:	4b72      	ldr	r3, [pc, #456]	@ (800ad94 <HAL_RCC_ClockConfig+0x264>)
 800abcc:	689b      	ldr	r3, [r3, #8]
 800abce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800abd2:	4a70      	ldr	r2, [pc, #448]	@ (800ad94 <HAL_RCC_ClockConfig+0x264>)
 800abd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abd8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800abda:	2380      	movs	r3, #128	@ 0x80
 800abdc:	617b      	str	r3, [r7, #20]
 800abde:	e024      	b.n	800ac2a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	2b02      	cmp	r3, #2
 800abe6:	d107      	bne.n	800abf8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800abe8:	4b6a      	ldr	r3, [pc, #424]	@ (800ad94 <HAL_RCC_ClockConfig+0x264>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d109      	bne.n	800ac08 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800abf4:	2301      	movs	r3, #1
 800abf6:	e0c6      	b.n	800ad86 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800abf8:	4b66      	ldr	r3, [pc, #408]	@ (800ad94 <HAL_RCC_ClockConfig+0x264>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d101      	bne.n	800ac08 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800ac04:	2301      	movs	r3, #1
 800ac06:	e0be      	b.n	800ad86 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800ac08:	f000 f8ce 	bl	800ada8 <HAL_RCC_GetSysClockFreq>
 800ac0c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	4a61      	ldr	r2, [pc, #388]	@ (800ad98 <HAL_RCC_ClockConfig+0x268>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d909      	bls.n	800ac2a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ac16:	4b5f      	ldr	r3, [pc, #380]	@ (800ad94 <HAL_RCC_ClockConfig+0x264>)
 800ac18:	689b      	ldr	r3, [r3, #8]
 800ac1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ac1e:	4a5d      	ldr	r2, [pc, #372]	@ (800ad94 <HAL_RCC_ClockConfig+0x264>)
 800ac20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac24:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800ac26:	2380      	movs	r3, #128	@ 0x80
 800ac28:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ac2a:	4b5a      	ldr	r3, [pc, #360]	@ (800ad94 <HAL_RCC_ClockConfig+0x264>)
 800ac2c:	689b      	ldr	r3, [r3, #8]
 800ac2e:	f023 0203 	bic.w	r2, r3, #3
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	4957      	ldr	r1, [pc, #348]	@ (800ad94 <HAL_RCC_ClockConfig+0x264>)
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac3c:	f7fb fdb0 	bl	80067a0 <HAL_GetTick>
 800ac40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac42:	e00a      	b.n	800ac5a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ac44:	f7fb fdac 	bl	80067a0 <HAL_GetTick>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	1ad3      	subs	r3, r2, r3
 800ac4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d901      	bls.n	800ac5a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800ac56:	2303      	movs	r3, #3
 800ac58:	e095      	b.n	800ad86 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac5a:	4b4e      	ldr	r3, [pc, #312]	@ (800ad94 <HAL_RCC_ClockConfig+0x264>)
 800ac5c:	689b      	ldr	r3, [r3, #8]
 800ac5e:	f003 020c 	and.w	r2, r3, #12
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	009b      	lsls	r3, r3, #2
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d1eb      	bne.n	800ac44 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f003 0302 	and.w	r3, r3, #2
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d023      	beq.n	800acc0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f003 0304 	and.w	r3, r3, #4
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d005      	beq.n	800ac90 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ac84:	4b43      	ldr	r3, [pc, #268]	@ (800ad94 <HAL_RCC_ClockConfig+0x264>)
 800ac86:	689b      	ldr	r3, [r3, #8]
 800ac88:	4a42      	ldr	r2, [pc, #264]	@ (800ad94 <HAL_RCC_ClockConfig+0x264>)
 800ac8a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800ac8e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f003 0308 	and.w	r3, r3, #8
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d007      	beq.n	800acac <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800ac9c:	4b3d      	ldr	r3, [pc, #244]	@ (800ad94 <HAL_RCC_ClockConfig+0x264>)
 800ac9e:	689b      	ldr	r3, [r3, #8]
 800aca0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800aca4:	4a3b      	ldr	r2, [pc, #236]	@ (800ad94 <HAL_RCC_ClockConfig+0x264>)
 800aca6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800acaa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800acac:	4b39      	ldr	r3, [pc, #228]	@ (800ad94 <HAL_RCC_ClockConfig+0x264>)
 800acae:	689b      	ldr	r3, [r3, #8]
 800acb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	689b      	ldr	r3, [r3, #8]
 800acb8:	4936      	ldr	r1, [pc, #216]	@ (800ad94 <HAL_RCC_ClockConfig+0x264>)
 800acba:	4313      	orrs	r3, r2
 800acbc:	608b      	str	r3, [r1, #8]
 800acbe:	e008      	b.n	800acd2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	2b80      	cmp	r3, #128	@ 0x80
 800acc4:	d105      	bne.n	800acd2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800acc6:	4b33      	ldr	r3, [pc, #204]	@ (800ad94 <HAL_RCC_ClockConfig+0x264>)
 800acc8:	689b      	ldr	r3, [r3, #8]
 800acca:	4a32      	ldr	r2, [pc, #200]	@ (800ad94 <HAL_RCC_ClockConfig+0x264>)
 800accc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800acd0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800acd2:	4b2f      	ldr	r3, [pc, #188]	@ (800ad90 <HAL_RCC_ClockConfig+0x260>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f003 030f 	and.w	r3, r3, #15
 800acda:	683a      	ldr	r2, [r7, #0]
 800acdc:	429a      	cmp	r2, r3
 800acde:	d21d      	bcs.n	800ad1c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ace0:	4b2b      	ldr	r3, [pc, #172]	@ (800ad90 <HAL_RCC_ClockConfig+0x260>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f023 020f 	bic.w	r2, r3, #15
 800ace8:	4929      	ldr	r1, [pc, #164]	@ (800ad90 <HAL_RCC_ClockConfig+0x260>)
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	4313      	orrs	r3, r2
 800acee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800acf0:	f7fb fd56 	bl	80067a0 <HAL_GetTick>
 800acf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800acf6:	e00a      	b.n	800ad0e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800acf8:	f7fb fd52 	bl	80067a0 <HAL_GetTick>
 800acfc:	4602      	mov	r2, r0
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	1ad3      	subs	r3, r2, r3
 800ad02:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d901      	bls.n	800ad0e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800ad0a:	2303      	movs	r3, #3
 800ad0c:	e03b      	b.n	800ad86 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad0e:	4b20      	ldr	r3, [pc, #128]	@ (800ad90 <HAL_RCC_ClockConfig+0x260>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f003 030f 	and.w	r3, r3, #15
 800ad16:	683a      	ldr	r2, [r7, #0]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d1ed      	bne.n	800acf8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f003 0304 	and.w	r3, r3, #4
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d008      	beq.n	800ad3a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ad28:	4b1a      	ldr	r3, [pc, #104]	@ (800ad94 <HAL_RCC_ClockConfig+0x264>)
 800ad2a:	689b      	ldr	r3, [r3, #8]
 800ad2c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	4917      	ldr	r1, [pc, #92]	@ (800ad94 <HAL_RCC_ClockConfig+0x264>)
 800ad36:	4313      	orrs	r3, r2
 800ad38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f003 0308 	and.w	r3, r3, #8
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d009      	beq.n	800ad5a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ad46:	4b13      	ldr	r3, [pc, #76]	@ (800ad94 <HAL_RCC_ClockConfig+0x264>)
 800ad48:	689b      	ldr	r3, [r3, #8]
 800ad4a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	691b      	ldr	r3, [r3, #16]
 800ad52:	00db      	lsls	r3, r3, #3
 800ad54:	490f      	ldr	r1, [pc, #60]	@ (800ad94 <HAL_RCC_ClockConfig+0x264>)
 800ad56:	4313      	orrs	r3, r2
 800ad58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ad5a:	f000 f825 	bl	800ada8 <HAL_RCC_GetSysClockFreq>
 800ad5e:	4602      	mov	r2, r0
 800ad60:	4b0c      	ldr	r3, [pc, #48]	@ (800ad94 <HAL_RCC_ClockConfig+0x264>)
 800ad62:	689b      	ldr	r3, [r3, #8]
 800ad64:	091b      	lsrs	r3, r3, #4
 800ad66:	f003 030f 	and.w	r3, r3, #15
 800ad6a:	490c      	ldr	r1, [pc, #48]	@ (800ad9c <HAL_RCC_ClockConfig+0x26c>)
 800ad6c:	5ccb      	ldrb	r3, [r1, r3]
 800ad6e:	f003 031f 	and.w	r3, r3, #31
 800ad72:	fa22 f303 	lsr.w	r3, r2, r3
 800ad76:	4a0a      	ldr	r2, [pc, #40]	@ (800ada0 <HAL_RCC_ClockConfig+0x270>)
 800ad78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800ad7a:	4b0a      	ldr	r3, [pc, #40]	@ (800ada4 <HAL_RCC_ClockConfig+0x274>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f7f9 f970 	bl	8004064 <HAL_InitTick>
 800ad84:	4603      	mov	r3, r0
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3718      	adds	r7, #24
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
 800ad8e:	bf00      	nop
 800ad90:	40022000 	.word	0x40022000
 800ad94:	40021000 	.word	0x40021000
 800ad98:	04c4b400 	.word	0x04c4b400
 800ad9c:	0801eda4 	.word	0x0801eda4
 800ada0:	20000004 	.word	0x20000004
 800ada4:	2000013c 	.word	0x2000013c

0800ada8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b087      	sub	sp, #28
 800adac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800adae:	4b2c      	ldr	r3, [pc, #176]	@ (800ae60 <HAL_RCC_GetSysClockFreq+0xb8>)
 800adb0:	689b      	ldr	r3, [r3, #8]
 800adb2:	f003 030c 	and.w	r3, r3, #12
 800adb6:	2b04      	cmp	r3, #4
 800adb8:	d102      	bne.n	800adc0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800adba:	4b2a      	ldr	r3, [pc, #168]	@ (800ae64 <HAL_RCC_GetSysClockFreq+0xbc>)
 800adbc:	613b      	str	r3, [r7, #16]
 800adbe:	e047      	b.n	800ae50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800adc0:	4b27      	ldr	r3, [pc, #156]	@ (800ae60 <HAL_RCC_GetSysClockFreq+0xb8>)
 800adc2:	689b      	ldr	r3, [r3, #8]
 800adc4:	f003 030c 	and.w	r3, r3, #12
 800adc8:	2b08      	cmp	r3, #8
 800adca:	d102      	bne.n	800add2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800adcc:	4b26      	ldr	r3, [pc, #152]	@ (800ae68 <HAL_RCC_GetSysClockFreq+0xc0>)
 800adce:	613b      	str	r3, [r7, #16]
 800add0:	e03e      	b.n	800ae50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800add2:	4b23      	ldr	r3, [pc, #140]	@ (800ae60 <HAL_RCC_GetSysClockFreq+0xb8>)
 800add4:	689b      	ldr	r3, [r3, #8]
 800add6:	f003 030c 	and.w	r3, r3, #12
 800adda:	2b0c      	cmp	r3, #12
 800addc:	d136      	bne.n	800ae4c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800adde:	4b20      	ldr	r3, [pc, #128]	@ (800ae60 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ade0:	68db      	ldr	r3, [r3, #12]
 800ade2:	f003 0303 	and.w	r3, r3, #3
 800ade6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ade8:	4b1d      	ldr	r3, [pc, #116]	@ (800ae60 <HAL_RCC_GetSysClockFreq+0xb8>)
 800adea:	68db      	ldr	r3, [r3, #12]
 800adec:	091b      	lsrs	r3, r3, #4
 800adee:	f003 030f 	and.w	r3, r3, #15
 800adf2:	3301      	adds	r3, #1
 800adf4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2b03      	cmp	r3, #3
 800adfa:	d10c      	bne.n	800ae16 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800adfc:	4a1a      	ldr	r2, [pc, #104]	@ (800ae68 <HAL_RCC_GetSysClockFreq+0xc0>)
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae04:	4a16      	ldr	r2, [pc, #88]	@ (800ae60 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ae06:	68d2      	ldr	r2, [r2, #12]
 800ae08:	0a12      	lsrs	r2, r2, #8
 800ae0a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ae0e:	fb02 f303 	mul.w	r3, r2, r3
 800ae12:	617b      	str	r3, [r7, #20]
      break;
 800ae14:	e00c      	b.n	800ae30 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ae16:	4a13      	ldr	r2, [pc, #76]	@ (800ae64 <HAL_RCC_GetSysClockFreq+0xbc>)
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae1e:	4a10      	ldr	r2, [pc, #64]	@ (800ae60 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ae20:	68d2      	ldr	r2, [r2, #12]
 800ae22:	0a12      	lsrs	r2, r2, #8
 800ae24:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ae28:	fb02 f303 	mul.w	r3, r2, r3
 800ae2c:	617b      	str	r3, [r7, #20]
      break;
 800ae2e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ae30:	4b0b      	ldr	r3, [pc, #44]	@ (800ae60 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ae32:	68db      	ldr	r3, [r3, #12]
 800ae34:	0e5b      	lsrs	r3, r3, #25
 800ae36:	f003 0303 	and.w	r3, r3, #3
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	005b      	lsls	r3, r3, #1
 800ae3e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800ae40:	697a      	ldr	r2, [r7, #20]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae48:	613b      	str	r3, [r7, #16]
 800ae4a:	e001      	b.n	800ae50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800ae50:	693b      	ldr	r3, [r7, #16]
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	371c      	adds	r7, #28
 800ae56:	46bd      	mov	sp, r7
 800ae58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5c:	4770      	bx	lr
 800ae5e:	bf00      	nop
 800ae60:	40021000 	.word	0x40021000
 800ae64:	00f42400 	.word	0x00f42400
 800ae68:	007a1200 	.word	0x007a1200

0800ae6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ae70:	4b03      	ldr	r3, [pc, #12]	@ (800ae80 <HAL_RCC_GetHCLKFreq+0x14>)
 800ae72:	681b      	ldr	r3, [r3, #0]
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	46bd      	mov	sp, r7
 800ae78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7c:	4770      	bx	lr
 800ae7e:	bf00      	nop
 800ae80:	20000004 	.word	0x20000004

0800ae84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800ae88:	f7ff fff0 	bl	800ae6c <HAL_RCC_GetHCLKFreq>
 800ae8c:	4602      	mov	r2, r0
 800ae8e:	4b06      	ldr	r3, [pc, #24]	@ (800aea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ae90:	689b      	ldr	r3, [r3, #8]
 800ae92:	0a1b      	lsrs	r3, r3, #8
 800ae94:	f003 0307 	and.w	r3, r3, #7
 800ae98:	4904      	ldr	r1, [pc, #16]	@ (800aeac <HAL_RCC_GetPCLK1Freq+0x28>)
 800ae9a:	5ccb      	ldrb	r3, [r1, r3]
 800ae9c:	f003 031f 	and.w	r3, r3, #31
 800aea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	bd80      	pop	{r7, pc}
 800aea8:	40021000 	.word	0x40021000
 800aeac:	0801edb4 	.word	0x0801edb4

0800aeb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800aeb4:	f7ff ffda 	bl	800ae6c <HAL_RCC_GetHCLKFreq>
 800aeb8:	4602      	mov	r2, r0
 800aeba:	4b06      	ldr	r3, [pc, #24]	@ (800aed4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aebc:	689b      	ldr	r3, [r3, #8]
 800aebe:	0adb      	lsrs	r3, r3, #11
 800aec0:	f003 0307 	and.w	r3, r3, #7
 800aec4:	4904      	ldr	r1, [pc, #16]	@ (800aed8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800aec6:	5ccb      	ldrb	r3, [r1, r3]
 800aec8:	f003 031f 	and.w	r3, r3, #31
 800aecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	40021000 	.word	0x40021000
 800aed8:	0801edb4 	.word	0x0801edb4

0800aedc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800aedc:	b480      	push	{r7}
 800aede:	b083      	sub	sp, #12
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	220f      	movs	r2, #15
 800aeea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800aeec:	4b12      	ldr	r3, [pc, #72]	@ (800af38 <HAL_RCC_GetClockConfig+0x5c>)
 800aeee:	689b      	ldr	r3, [r3, #8]
 800aef0:	f003 0203 	and.w	r2, r3, #3
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800aef8:	4b0f      	ldr	r3, [pc, #60]	@ (800af38 <HAL_RCC_GetClockConfig+0x5c>)
 800aefa:	689b      	ldr	r3, [r3, #8]
 800aefc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800af04:	4b0c      	ldr	r3, [pc, #48]	@ (800af38 <HAL_RCC_GetClockConfig+0x5c>)
 800af06:	689b      	ldr	r3, [r3, #8]
 800af08:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800af10:	4b09      	ldr	r3, [pc, #36]	@ (800af38 <HAL_RCC_GetClockConfig+0x5c>)
 800af12:	689b      	ldr	r3, [r3, #8]
 800af14:	08db      	lsrs	r3, r3, #3
 800af16:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800af1e:	4b07      	ldr	r3, [pc, #28]	@ (800af3c <HAL_RCC_GetClockConfig+0x60>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f003 020f 	and.w	r2, r3, #15
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	601a      	str	r2, [r3, #0]
}
 800af2a:	bf00      	nop
 800af2c:	370c      	adds	r7, #12
 800af2e:	46bd      	mov	sp, r7
 800af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af34:	4770      	bx	lr
 800af36:	bf00      	nop
 800af38:	40021000 	.word	0x40021000
 800af3c:	40022000 	.word	0x40022000

0800af40 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800af40:	b480      	push	{r7}
 800af42:	b087      	sub	sp, #28
 800af44:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800af46:	4b1e      	ldr	r3, [pc, #120]	@ (800afc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800af48:	68db      	ldr	r3, [r3, #12]
 800af4a:	f003 0303 	and.w	r3, r3, #3
 800af4e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800af50:	4b1b      	ldr	r3, [pc, #108]	@ (800afc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800af52:	68db      	ldr	r3, [r3, #12]
 800af54:	091b      	lsrs	r3, r3, #4
 800af56:	f003 030f 	and.w	r3, r3, #15
 800af5a:	3301      	adds	r3, #1
 800af5c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	2b03      	cmp	r3, #3
 800af62:	d10c      	bne.n	800af7e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800af64:	4a17      	ldr	r2, [pc, #92]	@ (800afc4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	fbb2 f3f3 	udiv	r3, r2, r3
 800af6c:	4a14      	ldr	r2, [pc, #80]	@ (800afc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800af6e:	68d2      	ldr	r2, [r2, #12]
 800af70:	0a12      	lsrs	r2, r2, #8
 800af72:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800af76:	fb02 f303 	mul.w	r3, r2, r3
 800af7a:	617b      	str	r3, [r7, #20]
    break;
 800af7c:	e00c      	b.n	800af98 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800af7e:	4a12      	ldr	r2, [pc, #72]	@ (800afc8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	fbb2 f3f3 	udiv	r3, r2, r3
 800af86:	4a0e      	ldr	r2, [pc, #56]	@ (800afc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800af88:	68d2      	ldr	r2, [r2, #12]
 800af8a:	0a12      	lsrs	r2, r2, #8
 800af8c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800af90:	fb02 f303 	mul.w	r3, r2, r3
 800af94:	617b      	str	r3, [r7, #20]
    break;
 800af96:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800af98:	4b09      	ldr	r3, [pc, #36]	@ (800afc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800af9a:	68db      	ldr	r3, [r3, #12]
 800af9c:	0e5b      	lsrs	r3, r3, #25
 800af9e:	f003 0303 	and.w	r3, r3, #3
 800afa2:	3301      	adds	r3, #1
 800afa4:	005b      	lsls	r3, r3, #1
 800afa6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800afa8:	697a      	ldr	r2, [r7, #20]
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	fbb2 f3f3 	udiv	r3, r2, r3
 800afb0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800afb2:	687b      	ldr	r3, [r7, #4]
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	371c      	adds	r7, #28
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr
 800afc0:	40021000 	.word	0x40021000
 800afc4:	007a1200 	.word	0x007a1200
 800afc8:	00f42400 	.word	0x00f42400

0800afcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b086      	sub	sp, #24
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800afd4:	2300      	movs	r3, #0
 800afd6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800afd8:	2300      	movs	r3, #0
 800afda:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	f000 8098 	beq.w	800b11a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800afea:	2300      	movs	r3, #0
 800afec:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800afee:	4b43      	ldr	r3, [pc, #268]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d10d      	bne.n	800b016 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800affa:	4b40      	ldr	r3, [pc, #256]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800affc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800affe:	4a3f      	ldr	r2, [pc, #252]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b000:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b004:	6593      	str	r3, [r2, #88]	@ 0x58
 800b006:	4b3d      	ldr	r3, [pc, #244]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b00a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b00e:	60bb      	str	r3, [r7, #8]
 800b010:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b012:	2301      	movs	r3, #1
 800b014:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b016:	4b3a      	ldr	r3, [pc, #232]	@ (800b100 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	4a39      	ldr	r2, [pc, #228]	@ (800b100 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b01c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b020:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b022:	f7fb fbbd 	bl	80067a0 <HAL_GetTick>
 800b026:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b028:	e009      	b.n	800b03e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b02a:	f7fb fbb9 	bl	80067a0 <HAL_GetTick>
 800b02e:	4602      	mov	r2, r0
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	1ad3      	subs	r3, r2, r3
 800b034:	2b02      	cmp	r3, #2
 800b036:	d902      	bls.n	800b03e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800b038:	2303      	movs	r3, #3
 800b03a:	74fb      	strb	r3, [r7, #19]
        break;
 800b03c:	e005      	b.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b03e:	4b30      	ldr	r3, [pc, #192]	@ (800b100 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b046:	2b00      	cmp	r3, #0
 800b048:	d0ef      	beq.n	800b02a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800b04a:	7cfb      	ldrb	r3, [r7, #19]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d159      	bne.n	800b104 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b050:	4b2a      	ldr	r3, [pc, #168]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b056:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b05a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d01e      	beq.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b066:	697a      	ldr	r2, [r7, #20]
 800b068:	429a      	cmp	r2, r3
 800b06a:	d019      	beq.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b06c:	4b23      	ldr	r3, [pc, #140]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b06e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b072:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b076:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b078:	4b20      	ldr	r3, [pc, #128]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b07a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b07e:	4a1f      	ldr	r2, [pc, #124]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b080:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b084:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b088:	4b1c      	ldr	r3, [pc, #112]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b08a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b08e:	4a1b      	ldr	r2, [pc, #108]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b090:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b094:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b098:	4a18      	ldr	r2, [pc, #96]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	f003 0301 	and.w	r3, r3, #1
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d016      	beq.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0aa:	f7fb fb79 	bl	80067a0 <HAL_GetTick>
 800b0ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b0b0:	e00b      	b.n	800b0ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b0b2:	f7fb fb75 	bl	80067a0 <HAL_GetTick>
 800b0b6:	4602      	mov	r2, r0
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	1ad3      	subs	r3, r2, r3
 800b0bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d902      	bls.n	800b0ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800b0c4:	2303      	movs	r3, #3
 800b0c6:	74fb      	strb	r3, [r7, #19]
            break;
 800b0c8:	e006      	b.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b0ca:	4b0c      	ldr	r3, [pc, #48]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b0cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0d0:	f003 0302 	and.w	r3, r3, #2
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d0ec      	beq.n	800b0b2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800b0d8:	7cfb      	ldrb	r3, [r7, #19]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d10b      	bne.n	800b0f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b0de:	4b07      	ldr	r3, [pc, #28]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b0e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0ec:	4903      	ldr	r1, [pc, #12]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800b0f4:	e008      	b.n	800b108 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b0f6:	7cfb      	ldrb	r3, [r7, #19]
 800b0f8:	74bb      	strb	r3, [r7, #18]
 800b0fa:	e005      	b.n	800b108 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800b0fc:	40021000 	.word	0x40021000
 800b100:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b104:	7cfb      	ldrb	r3, [r7, #19]
 800b106:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b108:	7c7b      	ldrb	r3, [r7, #17]
 800b10a:	2b01      	cmp	r3, #1
 800b10c:	d105      	bne.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b10e:	4ba6      	ldr	r3, [pc, #664]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b112:	4aa5      	ldr	r2, [pc, #660]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b114:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b118:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f003 0301 	and.w	r3, r3, #1
 800b122:	2b00      	cmp	r3, #0
 800b124:	d00a      	beq.n	800b13c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b126:	4ba0      	ldr	r3, [pc, #640]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b12c:	f023 0203 	bic.w	r2, r3, #3
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	499c      	ldr	r1, [pc, #624]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b136:	4313      	orrs	r3, r2
 800b138:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f003 0302 	and.w	r3, r3, #2
 800b144:	2b00      	cmp	r3, #0
 800b146:	d00a      	beq.n	800b15e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b148:	4b97      	ldr	r3, [pc, #604]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b14a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b14e:	f023 020c 	bic.w	r2, r3, #12
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	689b      	ldr	r3, [r3, #8]
 800b156:	4994      	ldr	r1, [pc, #592]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b158:	4313      	orrs	r3, r2
 800b15a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f003 0304 	and.w	r3, r3, #4
 800b166:	2b00      	cmp	r3, #0
 800b168:	d00a      	beq.n	800b180 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b16a:	4b8f      	ldr	r3, [pc, #572]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b16c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b170:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	68db      	ldr	r3, [r3, #12]
 800b178:	498b      	ldr	r1, [pc, #556]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b17a:	4313      	orrs	r3, r2
 800b17c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f003 0308 	and.w	r3, r3, #8
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d00a      	beq.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b18c:	4b86      	ldr	r3, [pc, #536]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b18e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b192:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	691b      	ldr	r3, [r3, #16]
 800b19a:	4983      	ldr	r1, [pc, #524]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b19c:	4313      	orrs	r3, r2
 800b19e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f003 0320 	and.w	r3, r3, #32
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d00a      	beq.n	800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b1ae:	4b7e      	ldr	r3, [pc, #504]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b1b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1b4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	695b      	ldr	r3, [r3, #20]
 800b1bc:	497a      	ldr	r1, [pc, #488]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d00a      	beq.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b1d0:	4b75      	ldr	r3, [pc, #468]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b1d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1d6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	699b      	ldr	r3, [r3, #24]
 800b1de:	4972      	ldr	r1, [pc, #456]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d00a      	beq.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b1f2:	4b6d      	ldr	r3, [pc, #436]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b1f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1f8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	69db      	ldr	r3, [r3, #28]
 800b200:	4969      	ldr	r1, [pc, #420]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b202:	4313      	orrs	r3, r2
 800b204:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b210:	2b00      	cmp	r3, #0
 800b212:	d00a      	beq.n	800b22a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b214:	4b64      	ldr	r3, [pc, #400]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b21a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6a1b      	ldr	r3, [r3, #32]
 800b222:	4961      	ldr	r1, [pc, #388]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b224:	4313      	orrs	r3, r2
 800b226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b232:	2b00      	cmp	r3, #0
 800b234:	d00a      	beq.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b236:	4b5c      	ldr	r3, [pc, #368]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b23c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b244:	4958      	ldr	r1, [pc, #352]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b246:	4313      	orrs	r3, r2
 800b248:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b254:	2b00      	cmp	r3, #0
 800b256:	d015      	beq.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b258:	4b53      	ldr	r3, [pc, #332]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b25a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b25e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b266:	4950      	ldr	r1, [pc, #320]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b268:	4313      	orrs	r3, r2
 800b26a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b272:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b276:	d105      	bne.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b278:	4b4b      	ldr	r3, [pc, #300]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b27a:	68db      	ldr	r3, [r3, #12]
 800b27c:	4a4a      	ldr	r2, [pc, #296]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b27e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b282:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d015      	beq.n	800b2bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b290:	4b45      	ldr	r3, [pc, #276]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b296:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b29e:	4942      	ldr	r1, [pc, #264]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b2ae:	d105      	bne.n	800b2bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b2b0:	4b3d      	ldr	r3, [pc, #244]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b2b2:	68db      	ldr	r3, [r3, #12]
 800b2b4:	4a3c      	ldr	r2, [pc, #240]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b2b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b2ba:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d015      	beq.n	800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b2c8:	4b37      	ldr	r3, [pc, #220]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b2ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2ce:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2d6:	4934      	ldr	r1, [pc, #208]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b2d8:	4313      	orrs	r3, r2
 800b2da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b2e6:	d105      	bne.n	800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b2e8:	4b2f      	ldr	r3, [pc, #188]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b2ea:	68db      	ldr	r3, [r3, #12]
 800b2ec:	4a2e      	ldr	r2, [pc, #184]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b2ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b2f2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d015      	beq.n	800b32c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b300:	4b29      	ldr	r3, [pc, #164]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b306:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b30e:	4926      	ldr	r1, [pc, #152]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b310:	4313      	orrs	r3, r2
 800b312:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b31a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b31e:	d105      	bne.n	800b32c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b320:	4b21      	ldr	r3, [pc, #132]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b322:	68db      	ldr	r3, [r3, #12]
 800b324:	4a20      	ldr	r2, [pc, #128]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b326:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b32a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b334:	2b00      	cmp	r3, #0
 800b336:	d015      	beq.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b338:	4b1b      	ldr	r3, [pc, #108]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b33a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b33e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b346:	4918      	ldr	r1, [pc, #96]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b348:	4313      	orrs	r3, r2
 800b34a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b352:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b356:	d105      	bne.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b358:	4b13      	ldr	r3, [pc, #76]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b35a:	68db      	ldr	r3, [r3, #12]
 800b35c:	4a12      	ldr	r2, [pc, #72]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b35e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b362:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d015      	beq.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800b370:	4b0d      	ldr	r3, [pc, #52]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b376:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b37e:	490a      	ldr	r1, [pc, #40]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b380:	4313      	orrs	r3, r2
 800b382:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b38a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b38e:	d105      	bne.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b390:	4b05      	ldr	r3, [pc, #20]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b392:	68db      	ldr	r3, [r3, #12]
 800b394:	4a04      	ldr	r2, [pc, #16]	@ (800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b396:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b39a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800b39c:	7cbb      	ldrb	r3, [r7, #18]
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3718      	adds	r7, #24
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	40021000 	.word	0x40021000

0800b3ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b082      	sub	sp, #8
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d101      	bne.n	800b3be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	e054      	b.n	800b468 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b3c4:	b2db      	uxtb	r3, r3
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d111      	bne.n	800b3ee <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f001 fcdc 	bl	800cd90 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d102      	bne.n	800b3e6 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	4a23      	ldr	r2, [pc, #140]	@ (800b470 <HAL_TIM_Base_Init+0xc4>)
 800b3e4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2202      	movs	r2, #2
 800b3f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681a      	ldr	r2, [r3, #0]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	3304      	adds	r3, #4
 800b3fe:	4619      	mov	r1, r3
 800b400:	4610      	mov	r0, r2
 800b402:	f001 f871 	bl	800c4e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2201      	movs	r2, #1
 800b40a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2201      	movs	r2, #1
 800b412:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2201      	movs	r2, #1
 800b41a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2201      	movs	r2, #1
 800b422:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2201      	movs	r2, #1
 800b42a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2201      	movs	r2, #1
 800b432:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2201      	movs	r2, #1
 800b43a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2201      	movs	r2, #1
 800b442:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2201      	movs	r2, #1
 800b44a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2201      	movs	r2, #1
 800b452:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2201      	movs	r2, #1
 800b45a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2201      	movs	r2, #1
 800b462:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b466:	2300      	movs	r3, #0
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3708      	adds	r7, #8
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}
 800b470:	080048f9 	.word	0x080048f9

0800b474 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b474:	b480      	push	{r7}
 800b476:	b085      	sub	sp, #20
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b482:	b2db      	uxtb	r3, r3
 800b484:	2b01      	cmp	r3, #1
 800b486:	d001      	beq.n	800b48c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b488:	2301      	movs	r3, #1
 800b48a:	e042      	b.n	800b512 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2202      	movs	r2, #2
 800b490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	4a21      	ldr	r2, [pc, #132]	@ (800b520 <HAL_TIM_Base_Start+0xac>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d018      	beq.n	800b4d0 <HAL_TIM_Base_Start+0x5c>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4a6:	d013      	beq.n	800b4d0 <HAL_TIM_Base_Start+0x5c>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	4a1d      	ldr	r2, [pc, #116]	@ (800b524 <HAL_TIM_Base_Start+0xb0>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d00e      	beq.n	800b4d0 <HAL_TIM_Base_Start+0x5c>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	4a1c      	ldr	r2, [pc, #112]	@ (800b528 <HAL_TIM_Base_Start+0xb4>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d009      	beq.n	800b4d0 <HAL_TIM_Base_Start+0x5c>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4a1a      	ldr	r2, [pc, #104]	@ (800b52c <HAL_TIM_Base_Start+0xb8>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d004      	beq.n	800b4d0 <HAL_TIM_Base_Start+0x5c>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4a19      	ldr	r2, [pc, #100]	@ (800b530 <HAL_TIM_Base_Start+0xbc>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d115      	bne.n	800b4fc <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	689a      	ldr	r2, [r3, #8]
 800b4d6:	4b17      	ldr	r3, [pc, #92]	@ (800b534 <HAL_TIM_Base_Start+0xc0>)
 800b4d8:	4013      	ands	r3, r2
 800b4da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2b06      	cmp	r3, #6
 800b4e0:	d015      	beq.n	800b50e <HAL_TIM_Base_Start+0x9a>
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b4e8:	d011      	beq.n	800b50e <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	681a      	ldr	r2, [r3, #0]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f042 0201 	orr.w	r2, r2, #1
 800b4f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4fa:	e008      	b.n	800b50e <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	681a      	ldr	r2, [r3, #0]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f042 0201 	orr.w	r2, r2, #1
 800b50a:	601a      	str	r2, [r3, #0]
 800b50c:	e000      	b.n	800b510 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b50e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b510:	2300      	movs	r3, #0
}
 800b512:	4618      	mov	r0, r3
 800b514:	3714      	adds	r7, #20
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr
 800b51e:	bf00      	nop
 800b520:	40012c00 	.word	0x40012c00
 800b524:	40000400 	.word	0x40000400
 800b528:	40000800 	.word	0x40000800
 800b52c:	40013400 	.word	0x40013400
 800b530:	40014000 	.word	0x40014000
 800b534:	00010007 	.word	0x00010007

0800b538 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800b538:	b480      	push	{r7}
 800b53a:	b083      	sub	sp, #12
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	6a1a      	ldr	r2, [r3, #32]
 800b546:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b54a:	4013      	ands	r3, r2
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d10f      	bne.n	800b570 <HAL_TIM_Base_Stop+0x38>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	6a1a      	ldr	r2, [r3, #32]
 800b556:	f244 4344 	movw	r3, #17476	@ 0x4444
 800b55a:	4013      	ands	r3, r2
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d107      	bne.n	800b570 <HAL_TIM_Base_Stop+0x38>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	681a      	ldr	r2, [r3, #0]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f022 0201 	bic.w	r2, r2, #1
 800b56e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2201      	movs	r2, #1
 800b574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800b578:	2300      	movs	r3, #0
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	370c      	adds	r7, #12
 800b57e:	46bd      	mov	sp, r7
 800b580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b584:	4770      	bx	lr
	...

0800b588 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b588:	b480      	push	{r7}
 800b58a:	b085      	sub	sp, #20
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b596:	b2db      	uxtb	r3, r3
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d001      	beq.n	800b5a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b59c:	2301      	movs	r3, #1
 800b59e:	e04a      	b.n	800b636 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2202      	movs	r2, #2
 800b5a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	68da      	ldr	r2, [r3, #12]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f042 0201 	orr.w	r2, r2, #1
 800b5b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a21      	ldr	r2, [pc, #132]	@ (800b644 <HAL_TIM_Base_Start_IT+0xbc>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d018      	beq.n	800b5f4 <HAL_TIM_Base_Start_IT+0x6c>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5ca:	d013      	beq.n	800b5f4 <HAL_TIM_Base_Start_IT+0x6c>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4a1d      	ldr	r2, [pc, #116]	@ (800b648 <HAL_TIM_Base_Start_IT+0xc0>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d00e      	beq.n	800b5f4 <HAL_TIM_Base_Start_IT+0x6c>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	4a1c      	ldr	r2, [pc, #112]	@ (800b64c <HAL_TIM_Base_Start_IT+0xc4>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d009      	beq.n	800b5f4 <HAL_TIM_Base_Start_IT+0x6c>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	4a1a      	ldr	r2, [pc, #104]	@ (800b650 <HAL_TIM_Base_Start_IT+0xc8>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d004      	beq.n	800b5f4 <HAL_TIM_Base_Start_IT+0x6c>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	4a19      	ldr	r2, [pc, #100]	@ (800b654 <HAL_TIM_Base_Start_IT+0xcc>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d115      	bne.n	800b620 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	689a      	ldr	r2, [r3, #8]
 800b5fa:	4b17      	ldr	r3, [pc, #92]	@ (800b658 <HAL_TIM_Base_Start_IT+0xd0>)
 800b5fc:	4013      	ands	r3, r2
 800b5fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	2b06      	cmp	r3, #6
 800b604:	d015      	beq.n	800b632 <HAL_TIM_Base_Start_IT+0xaa>
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b60c:	d011      	beq.n	800b632 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	681a      	ldr	r2, [r3, #0]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f042 0201 	orr.w	r2, r2, #1
 800b61c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b61e:	e008      	b.n	800b632 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	681a      	ldr	r2, [r3, #0]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f042 0201 	orr.w	r2, r2, #1
 800b62e:	601a      	str	r2, [r3, #0]
 800b630:	e000      	b.n	800b634 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b632:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b634:	2300      	movs	r3, #0
}
 800b636:	4618      	mov	r0, r3
 800b638:	3714      	adds	r7, #20
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr
 800b642:	bf00      	nop
 800b644:	40012c00 	.word	0x40012c00
 800b648:	40000400 	.word	0x40000400
 800b64c:	40000800 	.word	0x40000800
 800b650:	40013400 	.word	0x40013400
 800b654:	40014000 	.word	0x40014000
 800b658:	00010007 	.word	0x00010007

0800b65c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b082      	sub	sp, #8
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d101      	bne.n	800b66e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b66a:	2301      	movs	r3, #1
 800b66c:	e054      	b.n	800b718 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b674:	b2db      	uxtb	r3, r3
 800b676:	2b00      	cmp	r3, #0
 800b678:	d111      	bne.n	800b69e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2200      	movs	r2, #0
 800b67e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f001 fb84 	bl	800cd90 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d102      	bne.n	800b696 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	4a23      	ldr	r2, [pc, #140]	@ (800b720 <HAL_TIM_PWM_Init+0xc4>)
 800b694:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2202      	movs	r2, #2
 800b6a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681a      	ldr	r2, [r3, #0]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	3304      	adds	r3, #4
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	4610      	mov	r0, r2
 800b6b2:	f000 ff19 	bl	800c4e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2201      	movs	r2, #1
 800b6ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2201      	movs	r2, #1
 800b6c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2201      	movs	r2, #1
 800b6ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2201      	movs	r2, #1
 800b6d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2201      	movs	r2, #1
 800b6da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2201      	movs	r2, #1
 800b6ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2201      	movs	r2, #1
 800b6fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2201      	movs	r2, #1
 800b702:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2201      	movs	r2, #1
 800b70a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2201      	movs	r2, #1
 800b712:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b716:	2300      	movs	r3, #0
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3708      	adds	r7, #8
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	0800b725 	.word	0x0800b725

0800b724 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b724:	b480      	push	{r7}
 800b726:	b083      	sub	sp, #12
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b72c:	bf00      	nop
 800b72e:	370c      	adds	r7, #12
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr

0800b738 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b084      	sub	sp, #16
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
 800b740:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d109      	bne.n	800b75c <HAL_TIM_PWM_Start+0x24>
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b74e:	b2db      	uxtb	r3, r3
 800b750:	2b01      	cmp	r3, #1
 800b752:	bf14      	ite	ne
 800b754:	2301      	movne	r3, #1
 800b756:	2300      	moveq	r3, #0
 800b758:	b2db      	uxtb	r3, r3
 800b75a:	e03c      	b.n	800b7d6 <HAL_TIM_PWM_Start+0x9e>
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	2b04      	cmp	r3, #4
 800b760:	d109      	bne.n	800b776 <HAL_TIM_PWM_Start+0x3e>
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b768:	b2db      	uxtb	r3, r3
 800b76a:	2b01      	cmp	r3, #1
 800b76c:	bf14      	ite	ne
 800b76e:	2301      	movne	r3, #1
 800b770:	2300      	moveq	r3, #0
 800b772:	b2db      	uxtb	r3, r3
 800b774:	e02f      	b.n	800b7d6 <HAL_TIM_PWM_Start+0x9e>
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	2b08      	cmp	r3, #8
 800b77a:	d109      	bne.n	800b790 <HAL_TIM_PWM_Start+0x58>
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b782:	b2db      	uxtb	r3, r3
 800b784:	2b01      	cmp	r3, #1
 800b786:	bf14      	ite	ne
 800b788:	2301      	movne	r3, #1
 800b78a:	2300      	moveq	r3, #0
 800b78c:	b2db      	uxtb	r3, r3
 800b78e:	e022      	b.n	800b7d6 <HAL_TIM_PWM_Start+0x9e>
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	2b0c      	cmp	r3, #12
 800b794:	d109      	bne.n	800b7aa <HAL_TIM_PWM_Start+0x72>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b79c:	b2db      	uxtb	r3, r3
 800b79e:	2b01      	cmp	r3, #1
 800b7a0:	bf14      	ite	ne
 800b7a2:	2301      	movne	r3, #1
 800b7a4:	2300      	moveq	r3, #0
 800b7a6:	b2db      	uxtb	r3, r3
 800b7a8:	e015      	b.n	800b7d6 <HAL_TIM_PWM_Start+0x9e>
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	2b10      	cmp	r3, #16
 800b7ae:	d109      	bne.n	800b7c4 <HAL_TIM_PWM_Start+0x8c>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b7b6:	b2db      	uxtb	r3, r3
 800b7b8:	2b01      	cmp	r3, #1
 800b7ba:	bf14      	ite	ne
 800b7bc:	2301      	movne	r3, #1
 800b7be:	2300      	moveq	r3, #0
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	e008      	b.n	800b7d6 <HAL_TIM_PWM_Start+0x9e>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b7ca:	b2db      	uxtb	r3, r3
 800b7cc:	2b01      	cmp	r3, #1
 800b7ce:	bf14      	ite	ne
 800b7d0:	2301      	movne	r3, #1
 800b7d2:	2300      	moveq	r3, #0
 800b7d4:	b2db      	uxtb	r3, r3
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d001      	beq.n	800b7de <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b7da:	2301      	movs	r3, #1
 800b7dc:	e097      	b.n	800b90e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d104      	bne.n	800b7ee <HAL_TIM_PWM_Start+0xb6>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2202      	movs	r2, #2
 800b7e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b7ec:	e023      	b.n	800b836 <HAL_TIM_PWM_Start+0xfe>
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	2b04      	cmp	r3, #4
 800b7f2:	d104      	bne.n	800b7fe <HAL_TIM_PWM_Start+0xc6>
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2202      	movs	r2, #2
 800b7f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b7fc:	e01b      	b.n	800b836 <HAL_TIM_PWM_Start+0xfe>
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	2b08      	cmp	r3, #8
 800b802:	d104      	bne.n	800b80e <HAL_TIM_PWM_Start+0xd6>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2202      	movs	r2, #2
 800b808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b80c:	e013      	b.n	800b836 <HAL_TIM_PWM_Start+0xfe>
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	2b0c      	cmp	r3, #12
 800b812:	d104      	bne.n	800b81e <HAL_TIM_PWM_Start+0xe6>
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2202      	movs	r2, #2
 800b818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b81c:	e00b      	b.n	800b836 <HAL_TIM_PWM_Start+0xfe>
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	2b10      	cmp	r3, #16
 800b822:	d104      	bne.n	800b82e <HAL_TIM_PWM_Start+0xf6>
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2202      	movs	r2, #2
 800b828:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b82c:	e003      	b.n	800b836 <HAL_TIM_PWM_Start+0xfe>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2202      	movs	r2, #2
 800b832:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	2201      	movs	r2, #1
 800b83c:	6839      	ldr	r1, [r7, #0]
 800b83e:	4618      	mov	r0, r3
 800b840:	f001 fa80 	bl	800cd44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	4a33      	ldr	r2, [pc, #204]	@ (800b918 <HAL_TIM_PWM_Start+0x1e0>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d013      	beq.n	800b876 <HAL_TIM_PWM_Start+0x13e>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	4a32      	ldr	r2, [pc, #200]	@ (800b91c <HAL_TIM_PWM_Start+0x1e4>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d00e      	beq.n	800b876 <HAL_TIM_PWM_Start+0x13e>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	4a30      	ldr	r2, [pc, #192]	@ (800b920 <HAL_TIM_PWM_Start+0x1e8>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d009      	beq.n	800b876 <HAL_TIM_PWM_Start+0x13e>
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4a2f      	ldr	r2, [pc, #188]	@ (800b924 <HAL_TIM_PWM_Start+0x1ec>)
 800b868:	4293      	cmp	r3, r2
 800b86a:	d004      	beq.n	800b876 <HAL_TIM_PWM_Start+0x13e>
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a2d      	ldr	r2, [pc, #180]	@ (800b928 <HAL_TIM_PWM_Start+0x1f0>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d101      	bne.n	800b87a <HAL_TIM_PWM_Start+0x142>
 800b876:	2301      	movs	r3, #1
 800b878:	e000      	b.n	800b87c <HAL_TIM_PWM_Start+0x144>
 800b87a:	2300      	movs	r3, #0
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d007      	beq.n	800b890 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b88e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4a20      	ldr	r2, [pc, #128]	@ (800b918 <HAL_TIM_PWM_Start+0x1e0>)
 800b896:	4293      	cmp	r3, r2
 800b898:	d018      	beq.n	800b8cc <HAL_TIM_PWM_Start+0x194>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8a2:	d013      	beq.n	800b8cc <HAL_TIM_PWM_Start+0x194>
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	4a20      	ldr	r2, [pc, #128]	@ (800b92c <HAL_TIM_PWM_Start+0x1f4>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d00e      	beq.n	800b8cc <HAL_TIM_PWM_Start+0x194>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	4a1f      	ldr	r2, [pc, #124]	@ (800b930 <HAL_TIM_PWM_Start+0x1f8>)
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	d009      	beq.n	800b8cc <HAL_TIM_PWM_Start+0x194>
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	4a17      	ldr	r2, [pc, #92]	@ (800b91c <HAL_TIM_PWM_Start+0x1e4>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d004      	beq.n	800b8cc <HAL_TIM_PWM_Start+0x194>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	4a16      	ldr	r2, [pc, #88]	@ (800b920 <HAL_TIM_PWM_Start+0x1e8>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d115      	bne.n	800b8f8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	689a      	ldr	r2, [r3, #8]
 800b8d2:	4b18      	ldr	r3, [pc, #96]	@ (800b934 <HAL_TIM_PWM_Start+0x1fc>)
 800b8d4:	4013      	ands	r3, r2
 800b8d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	2b06      	cmp	r3, #6
 800b8dc:	d015      	beq.n	800b90a <HAL_TIM_PWM_Start+0x1d2>
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8e4:	d011      	beq.n	800b90a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	681a      	ldr	r2, [r3, #0]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f042 0201 	orr.w	r2, r2, #1
 800b8f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8f6:	e008      	b.n	800b90a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	681a      	ldr	r2, [r3, #0]
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f042 0201 	orr.w	r2, r2, #1
 800b906:	601a      	str	r2, [r3, #0]
 800b908:	e000      	b.n	800b90c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b90a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b90c:	2300      	movs	r3, #0
}
 800b90e:	4618      	mov	r0, r3
 800b910:	3710      	adds	r7, #16
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}
 800b916:	bf00      	nop
 800b918:	40012c00 	.word	0x40012c00
 800b91c:	40013400 	.word	0x40013400
 800b920:	40014000 	.word	0x40014000
 800b924:	40014400 	.word	0x40014400
 800b928:	40014800 	.word	0x40014800
 800b92c:	40000400 	.word	0x40000400
 800b930:	40000800 	.word	0x40000800
 800b934:	00010007 	.word	0x00010007

0800b938 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b082      	sub	sp, #8
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	2200      	movs	r2, #0
 800b948:	6839      	ldr	r1, [r7, #0]
 800b94a:	4618      	mov	r0, r3
 800b94c:	f001 f9fa 	bl	800cd44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	4a3e      	ldr	r2, [pc, #248]	@ (800ba50 <HAL_TIM_PWM_Stop+0x118>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d013      	beq.n	800b982 <HAL_TIM_PWM_Stop+0x4a>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	4a3d      	ldr	r2, [pc, #244]	@ (800ba54 <HAL_TIM_PWM_Stop+0x11c>)
 800b960:	4293      	cmp	r3, r2
 800b962:	d00e      	beq.n	800b982 <HAL_TIM_PWM_Stop+0x4a>
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	4a3b      	ldr	r2, [pc, #236]	@ (800ba58 <HAL_TIM_PWM_Stop+0x120>)
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d009      	beq.n	800b982 <HAL_TIM_PWM_Stop+0x4a>
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	4a3a      	ldr	r2, [pc, #232]	@ (800ba5c <HAL_TIM_PWM_Stop+0x124>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d004      	beq.n	800b982 <HAL_TIM_PWM_Stop+0x4a>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	4a38      	ldr	r2, [pc, #224]	@ (800ba60 <HAL_TIM_PWM_Stop+0x128>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d101      	bne.n	800b986 <HAL_TIM_PWM_Stop+0x4e>
 800b982:	2301      	movs	r3, #1
 800b984:	e000      	b.n	800b988 <HAL_TIM_PWM_Stop+0x50>
 800b986:	2300      	movs	r3, #0
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d017      	beq.n	800b9bc <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	6a1a      	ldr	r2, [r3, #32]
 800b992:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b996:	4013      	ands	r3, r2
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d10f      	bne.n	800b9bc <HAL_TIM_PWM_Stop+0x84>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	6a1a      	ldr	r2, [r3, #32]
 800b9a2:	f244 4344 	movw	r3, #17476	@ 0x4444
 800b9a6:	4013      	ands	r3, r2
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d107      	bne.n	800b9bc <HAL_TIM_PWM_Stop+0x84>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b9ba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	6a1a      	ldr	r2, [r3, #32]
 800b9c2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b9c6:	4013      	ands	r3, r2
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d10f      	bne.n	800b9ec <HAL_TIM_PWM_Stop+0xb4>
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	6a1a      	ldr	r2, [r3, #32]
 800b9d2:	f244 4344 	movw	r3, #17476	@ 0x4444
 800b9d6:	4013      	ands	r3, r2
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d107      	bne.n	800b9ec <HAL_TIM_PWM_Stop+0xb4>
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	681a      	ldr	r2, [r3, #0]
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f022 0201 	bic.w	r2, r2, #1
 800b9ea:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d104      	bne.n	800b9fc <HAL_TIM_PWM_Stop+0xc4>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2201      	movs	r2, #1
 800b9f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b9fa:	e023      	b.n	800ba44 <HAL_TIM_PWM_Stop+0x10c>
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	2b04      	cmp	r3, #4
 800ba00:	d104      	bne.n	800ba0c <HAL_TIM_PWM_Stop+0xd4>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2201      	movs	r2, #1
 800ba06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ba0a:	e01b      	b.n	800ba44 <HAL_TIM_PWM_Stop+0x10c>
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	2b08      	cmp	r3, #8
 800ba10:	d104      	bne.n	800ba1c <HAL_TIM_PWM_Stop+0xe4>
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2201      	movs	r2, #1
 800ba16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ba1a:	e013      	b.n	800ba44 <HAL_TIM_PWM_Stop+0x10c>
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	2b0c      	cmp	r3, #12
 800ba20:	d104      	bne.n	800ba2c <HAL_TIM_PWM_Stop+0xf4>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2201      	movs	r2, #1
 800ba26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ba2a:	e00b      	b.n	800ba44 <HAL_TIM_PWM_Stop+0x10c>
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	2b10      	cmp	r3, #16
 800ba30:	d104      	bne.n	800ba3c <HAL_TIM_PWM_Stop+0x104>
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2201      	movs	r2, #1
 800ba36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ba3a:	e003      	b.n	800ba44 <HAL_TIM_PWM_Stop+0x10c>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2201      	movs	r2, #1
 800ba40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800ba44:	2300      	movs	r3, #0
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3708      	adds	r7, #8
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	40012c00 	.word	0x40012c00
 800ba54:	40013400 	.word	0x40013400
 800ba58:	40014000 	.word	0x40014000
 800ba5c:	40014400 	.word	0x40014400
 800ba60:	40014800 	.word	0x40014800

0800ba64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b084      	sub	sp, #16
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	68db      	ldr	r3, [r3, #12]
 800ba72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	691b      	ldr	r3, [r3, #16]
 800ba7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	f003 0302 	and.w	r3, r3, #2
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d026      	beq.n	800bad4 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	f003 0302 	and.w	r3, r3, #2
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d021      	beq.n	800bad4 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f06f 0202 	mvn.w	r2, #2
 800ba98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	699b      	ldr	r3, [r3, #24]
 800baa6:	f003 0303 	and.w	r3, r3, #3
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d005      	beq.n	800baba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	4798      	blx	r3
 800bab8:	e009      	b.n	800bace <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2200      	movs	r2, #0
 800bad2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	f003 0304 	and.w	r3, r3, #4
 800bada:	2b00      	cmp	r3, #0
 800badc:	d026      	beq.n	800bb2c <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	f003 0304 	and.w	r3, r3, #4
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d021      	beq.n	800bb2c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f06f 0204 	mvn.w	r2, #4
 800baf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2202      	movs	r2, #2
 800baf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	699b      	ldr	r3, [r3, #24]
 800bafe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d005      	beq.n	800bb12 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	4798      	blx	r3
 800bb10:	e009      	b.n	800bb26 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2200      	movs	r2, #0
 800bb2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	f003 0308 	and.w	r3, r3, #8
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d026      	beq.n	800bb84 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	f003 0308 	and.w	r3, r3, #8
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d021      	beq.n	800bb84 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f06f 0208 	mvn.w	r2, #8
 800bb48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2204      	movs	r2, #4
 800bb4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	69db      	ldr	r3, [r3, #28]
 800bb56:	f003 0303 	and.w	r3, r3, #3
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d005      	beq.n	800bb6a <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	4798      	blx	r3
 800bb68:	e009      	b.n	800bb7e <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2200      	movs	r2, #0
 800bb82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	f003 0310 	and.w	r3, r3, #16
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d026      	beq.n	800bbdc <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	f003 0310 	and.w	r3, r3, #16
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d021      	beq.n	800bbdc <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f06f 0210 	mvn.w	r2, #16
 800bba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2208      	movs	r2, #8
 800bba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	69db      	ldr	r3, [r3, #28]
 800bbae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d005      	beq.n	800bbc2 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	4798      	blx	r3
 800bbc0:	e009      	b.n	800bbd6 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	f003 0301 	and.w	r3, r3, #1
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d00e      	beq.n	800bc04 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	f003 0301 	and.w	r3, r3, #1
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d009      	beq.n	800bc04 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f06f 0201 	mvn.w	r2, #1
 800bbf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d104      	bne.n	800bc18 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d00e      	beq.n	800bc36 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d009      	beq.n	800bc36 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800bc2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d00e      	beq.n	800bc5e <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d009      	beq.n	800bc5e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bc52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d00e      	beq.n	800bc86 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d009      	beq.n	800bc86 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bc7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	f003 0320 	and.w	r3, r3, #32
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d00e      	beq.n	800bcae <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	f003 0320 	and.w	r3, r3, #32
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d009      	beq.n	800bcae <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f06f 0220 	mvn.w	r2, #32
 800bca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d00e      	beq.n	800bcd6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d009      	beq.n	800bcd6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800bcca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d00e      	beq.n	800bcfe <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d009      	beq.n	800bcfe <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800bcf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d00e      	beq.n	800bd26 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d009      	beq.n	800bd26 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800bd1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d00e      	beq.n	800bd4e <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d009      	beq.n	800bd4e <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800bd42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bd4e:	bf00      	nop
 800bd50:	3710      	adds	r7, #16
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}
	...

0800bd58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b086      	sub	sp, #24
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	60f8      	str	r0, [r7, #12]
 800bd60:	60b9      	str	r1, [r7, #8]
 800bd62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bd64:	2300      	movs	r3, #0
 800bd66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bd6e:	2b01      	cmp	r3, #1
 800bd70:	d101      	bne.n	800bd76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bd72:	2302      	movs	r3, #2
 800bd74:	e0ff      	b.n	800bf76 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	2201      	movs	r2, #1
 800bd7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2b14      	cmp	r3, #20
 800bd82:	f200 80f0 	bhi.w	800bf66 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bd86:	a201      	add	r2, pc, #4	@ (adr r2, 800bd8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bd88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd8c:	0800bde1 	.word	0x0800bde1
 800bd90:	0800bf67 	.word	0x0800bf67
 800bd94:	0800bf67 	.word	0x0800bf67
 800bd98:	0800bf67 	.word	0x0800bf67
 800bd9c:	0800be21 	.word	0x0800be21
 800bda0:	0800bf67 	.word	0x0800bf67
 800bda4:	0800bf67 	.word	0x0800bf67
 800bda8:	0800bf67 	.word	0x0800bf67
 800bdac:	0800be63 	.word	0x0800be63
 800bdb0:	0800bf67 	.word	0x0800bf67
 800bdb4:	0800bf67 	.word	0x0800bf67
 800bdb8:	0800bf67 	.word	0x0800bf67
 800bdbc:	0800bea3 	.word	0x0800bea3
 800bdc0:	0800bf67 	.word	0x0800bf67
 800bdc4:	0800bf67 	.word	0x0800bf67
 800bdc8:	0800bf67 	.word	0x0800bf67
 800bdcc:	0800bee5 	.word	0x0800bee5
 800bdd0:	0800bf67 	.word	0x0800bf67
 800bdd4:	0800bf67 	.word	0x0800bf67
 800bdd8:	0800bf67 	.word	0x0800bf67
 800bddc:	0800bf25 	.word	0x0800bf25
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	68b9      	ldr	r1, [r7, #8]
 800bde6:	4618      	mov	r0, r3
 800bde8:	f000 fc1a 	bl	800c620 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	699a      	ldr	r2, [r3, #24]
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f042 0208 	orr.w	r2, r2, #8
 800bdfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	699a      	ldr	r2, [r3, #24]
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f022 0204 	bic.w	r2, r2, #4
 800be0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	6999      	ldr	r1, [r3, #24]
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	691a      	ldr	r2, [r3, #16]
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	430a      	orrs	r2, r1
 800be1c:	619a      	str	r2, [r3, #24]
      break;
 800be1e:	e0a5      	b.n	800bf6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	68b9      	ldr	r1, [r7, #8]
 800be26:	4618      	mov	r0, r3
 800be28:	f000 fc8a 	bl	800c740 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	699a      	ldr	r2, [r3, #24]
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800be3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	699a      	ldr	r2, [r3, #24]
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800be4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	6999      	ldr	r1, [r3, #24]
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	691b      	ldr	r3, [r3, #16]
 800be56:	021a      	lsls	r2, r3, #8
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	430a      	orrs	r2, r1
 800be5e:	619a      	str	r2, [r3, #24]
      break;
 800be60:	e084      	b.n	800bf6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	68b9      	ldr	r1, [r7, #8]
 800be68:	4618      	mov	r0, r3
 800be6a:	f000 fcf3 	bl	800c854 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	69da      	ldr	r2, [r3, #28]
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f042 0208 	orr.w	r2, r2, #8
 800be7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	69da      	ldr	r2, [r3, #28]
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	f022 0204 	bic.w	r2, r2, #4
 800be8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	69d9      	ldr	r1, [r3, #28]
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	691a      	ldr	r2, [r3, #16]
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	430a      	orrs	r2, r1
 800be9e:	61da      	str	r2, [r3, #28]
      break;
 800bea0:	e064      	b.n	800bf6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	68b9      	ldr	r1, [r7, #8]
 800bea8:	4618      	mov	r0, r3
 800beaa:	f000 fd5b 	bl	800c964 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	69da      	ldr	r2, [r3, #28]
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bebc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	69da      	ldr	r2, [r3, #28]
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800becc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	69d9      	ldr	r1, [r3, #28]
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	691b      	ldr	r3, [r3, #16]
 800bed8:	021a      	lsls	r2, r3, #8
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	430a      	orrs	r2, r1
 800bee0:	61da      	str	r2, [r3, #28]
      break;
 800bee2:	e043      	b.n	800bf6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	68b9      	ldr	r1, [r7, #8]
 800beea:	4618      	mov	r0, r3
 800beec:	f000 fdc4 	bl	800ca78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	f042 0208 	orr.w	r2, r2, #8
 800befe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f022 0204 	bic.w	r2, r2, #4
 800bf0e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	691a      	ldr	r2, [r3, #16]
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	430a      	orrs	r2, r1
 800bf20:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800bf22:	e023      	b.n	800bf6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	68b9      	ldr	r1, [r7, #8]
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f000 fe08 	bl	800cb40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bf3e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bf4e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	691b      	ldr	r3, [r3, #16]
 800bf5a:	021a      	lsls	r2, r3, #8
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	430a      	orrs	r2, r1
 800bf62:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800bf64:	e002      	b.n	800bf6c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bf66:	2301      	movs	r3, #1
 800bf68:	75fb      	strb	r3, [r7, #23]
      break;
 800bf6a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bf74:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3718      	adds	r7, #24
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
 800bf7e:	bf00      	nop

0800bf80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b084      	sub	sp, #16
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bf94:	2b01      	cmp	r3, #1
 800bf96:	d101      	bne.n	800bf9c <HAL_TIM_ConfigClockSource+0x1c>
 800bf98:	2302      	movs	r3, #2
 800bf9a:	e0de      	b.n	800c15a <HAL_TIM_ConfigClockSource+0x1da>
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2202      	movs	r2, #2
 800bfa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	689b      	ldr	r3, [r3, #8]
 800bfb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800bfba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800bfbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bfc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	68ba      	ldr	r2, [r7, #8]
 800bfce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	4a63      	ldr	r2, [pc, #396]	@ (800c164 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	f000 80a9 	beq.w	800c12e <HAL_TIM_ConfigClockSource+0x1ae>
 800bfdc:	4a61      	ldr	r2, [pc, #388]	@ (800c164 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	f200 80ae 	bhi.w	800c140 <HAL_TIM_ConfigClockSource+0x1c0>
 800bfe4:	4a60      	ldr	r2, [pc, #384]	@ (800c168 <HAL_TIM_ConfigClockSource+0x1e8>)
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	f000 80a1 	beq.w	800c12e <HAL_TIM_ConfigClockSource+0x1ae>
 800bfec:	4a5e      	ldr	r2, [pc, #376]	@ (800c168 <HAL_TIM_ConfigClockSource+0x1e8>)
 800bfee:	4293      	cmp	r3, r2
 800bff0:	f200 80a6 	bhi.w	800c140 <HAL_TIM_ConfigClockSource+0x1c0>
 800bff4:	4a5d      	ldr	r2, [pc, #372]	@ (800c16c <HAL_TIM_ConfigClockSource+0x1ec>)
 800bff6:	4293      	cmp	r3, r2
 800bff8:	f000 8099 	beq.w	800c12e <HAL_TIM_ConfigClockSource+0x1ae>
 800bffc:	4a5b      	ldr	r2, [pc, #364]	@ (800c16c <HAL_TIM_ConfigClockSource+0x1ec>)
 800bffe:	4293      	cmp	r3, r2
 800c000:	f200 809e 	bhi.w	800c140 <HAL_TIM_ConfigClockSource+0x1c0>
 800c004:	4a5a      	ldr	r2, [pc, #360]	@ (800c170 <HAL_TIM_ConfigClockSource+0x1f0>)
 800c006:	4293      	cmp	r3, r2
 800c008:	f000 8091 	beq.w	800c12e <HAL_TIM_ConfigClockSource+0x1ae>
 800c00c:	4a58      	ldr	r2, [pc, #352]	@ (800c170 <HAL_TIM_ConfigClockSource+0x1f0>)
 800c00e:	4293      	cmp	r3, r2
 800c010:	f200 8096 	bhi.w	800c140 <HAL_TIM_ConfigClockSource+0x1c0>
 800c014:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c018:	f000 8089 	beq.w	800c12e <HAL_TIM_ConfigClockSource+0x1ae>
 800c01c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c020:	f200 808e 	bhi.w	800c140 <HAL_TIM_ConfigClockSource+0x1c0>
 800c024:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c028:	d03e      	beq.n	800c0a8 <HAL_TIM_ConfigClockSource+0x128>
 800c02a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c02e:	f200 8087 	bhi.w	800c140 <HAL_TIM_ConfigClockSource+0x1c0>
 800c032:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c036:	f000 8086 	beq.w	800c146 <HAL_TIM_ConfigClockSource+0x1c6>
 800c03a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c03e:	d87f      	bhi.n	800c140 <HAL_TIM_ConfigClockSource+0x1c0>
 800c040:	2b70      	cmp	r3, #112	@ 0x70
 800c042:	d01a      	beq.n	800c07a <HAL_TIM_ConfigClockSource+0xfa>
 800c044:	2b70      	cmp	r3, #112	@ 0x70
 800c046:	d87b      	bhi.n	800c140 <HAL_TIM_ConfigClockSource+0x1c0>
 800c048:	2b60      	cmp	r3, #96	@ 0x60
 800c04a:	d050      	beq.n	800c0ee <HAL_TIM_ConfigClockSource+0x16e>
 800c04c:	2b60      	cmp	r3, #96	@ 0x60
 800c04e:	d877      	bhi.n	800c140 <HAL_TIM_ConfigClockSource+0x1c0>
 800c050:	2b50      	cmp	r3, #80	@ 0x50
 800c052:	d03c      	beq.n	800c0ce <HAL_TIM_ConfigClockSource+0x14e>
 800c054:	2b50      	cmp	r3, #80	@ 0x50
 800c056:	d873      	bhi.n	800c140 <HAL_TIM_ConfigClockSource+0x1c0>
 800c058:	2b40      	cmp	r3, #64	@ 0x40
 800c05a:	d058      	beq.n	800c10e <HAL_TIM_ConfigClockSource+0x18e>
 800c05c:	2b40      	cmp	r3, #64	@ 0x40
 800c05e:	d86f      	bhi.n	800c140 <HAL_TIM_ConfigClockSource+0x1c0>
 800c060:	2b30      	cmp	r3, #48	@ 0x30
 800c062:	d064      	beq.n	800c12e <HAL_TIM_ConfigClockSource+0x1ae>
 800c064:	2b30      	cmp	r3, #48	@ 0x30
 800c066:	d86b      	bhi.n	800c140 <HAL_TIM_ConfigClockSource+0x1c0>
 800c068:	2b20      	cmp	r3, #32
 800c06a:	d060      	beq.n	800c12e <HAL_TIM_ConfigClockSource+0x1ae>
 800c06c:	2b20      	cmp	r3, #32
 800c06e:	d867      	bhi.n	800c140 <HAL_TIM_ConfigClockSource+0x1c0>
 800c070:	2b00      	cmp	r3, #0
 800c072:	d05c      	beq.n	800c12e <HAL_TIM_ConfigClockSource+0x1ae>
 800c074:	2b10      	cmp	r3, #16
 800c076:	d05a      	beq.n	800c12e <HAL_TIM_ConfigClockSource+0x1ae>
 800c078:	e062      	b.n	800c140 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c08a:	f000 fe3b 	bl	800cd04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	689b      	ldr	r3, [r3, #8]
 800c094:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c09c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	68ba      	ldr	r2, [r7, #8]
 800c0a4:	609a      	str	r2, [r3, #8]
      break;
 800c0a6:	e04f      	b.n	800c148 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c0b8:	f000 fe24 	bl	800cd04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	689a      	ldr	r2, [r3, #8]
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c0ca:	609a      	str	r2, [r3, #8]
      break;
 800c0cc:	e03c      	b.n	800c148 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0da:	461a      	mov	r2, r3
 800c0dc:	f000 fd96 	bl	800cc0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	2150      	movs	r1, #80	@ 0x50
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f000 fdef 	bl	800ccca <TIM_ITRx_SetConfig>
      break;
 800c0ec:	e02c      	b.n	800c148 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c0fa:	461a      	mov	r2, r3
 800c0fc:	f000 fdb5 	bl	800cc6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	2160      	movs	r1, #96	@ 0x60
 800c106:	4618      	mov	r0, r3
 800c108:	f000 fddf 	bl	800ccca <TIM_ITRx_SetConfig>
      break;
 800c10c:	e01c      	b.n	800c148 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c11a:	461a      	mov	r2, r3
 800c11c:	f000 fd76 	bl	800cc0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	2140      	movs	r1, #64	@ 0x40
 800c126:	4618      	mov	r0, r3
 800c128:	f000 fdcf 	bl	800ccca <TIM_ITRx_SetConfig>
      break;
 800c12c:	e00c      	b.n	800c148 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681a      	ldr	r2, [r3, #0]
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	4619      	mov	r1, r3
 800c138:	4610      	mov	r0, r2
 800c13a:	f000 fdc6 	bl	800ccca <TIM_ITRx_SetConfig>
      break;
 800c13e:	e003      	b.n	800c148 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800c140:	2301      	movs	r3, #1
 800c142:	73fb      	strb	r3, [r7, #15]
      break;
 800c144:	e000      	b.n	800c148 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800c146:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2201      	movs	r2, #1
 800c14c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2200      	movs	r2, #0
 800c154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c158:	7bfb      	ldrb	r3, [r7, #15]
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	3710      	adds	r7, #16
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}
 800c162:	bf00      	nop
 800c164:	00100070 	.word	0x00100070
 800c168:	00100040 	.word	0x00100040
 800c16c:	00100030 	.word	0x00100030
 800c170:	00100020 	.word	0x00100020

0800c174 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c174:	b480      	push	{r7}
 800c176:	b083      	sub	sp, #12
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800c17c:	bf00      	nop
 800c17e:	370c      	adds	r7, #12
 800c180:	46bd      	mov	sp, r7
 800c182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c186:	4770      	bx	lr

0800c188 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c188:	b480      	push	{r7}
 800c18a:	b083      	sub	sp, #12
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c190:	bf00      	nop
 800c192:	370c      	adds	r7, #12
 800c194:	46bd      	mov	sp, r7
 800c196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19a:	4770      	bx	lr

0800c19c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c19c:	b480      	push	{r7}
 800c19e:	b083      	sub	sp, #12
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c1a4:	bf00      	nop
 800c1a6:	370c      	adds	r7, #12
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ae:	4770      	bx	lr

0800c1b0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b083      	sub	sp, #12
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800c1b8:	bf00      	nop
 800c1ba:	370c      	adds	r7, #12
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr

0800c1c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b083      	sub	sp, #12
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c1cc:	bf00      	nop
 800c1ce:	370c      	adds	r7, #12
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d6:	4770      	bx	lr

0800c1d8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b083      	sub	sp, #12
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800c1e0:	bf00      	nop
 800c1e2:	370c      	adds	r7, #12
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ea:	4770      	bx	lr

0800c1ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b083      	sub	sp, #12
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c1f4:	bf00      	nop
 800c1f6:	370c      	adds	r7, #12
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fe:	4770      	bx	lr

0800c200 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c200:	b480      	push	{r7}
 800c202:	b083      	sub	sp, #12
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800c208:	bf00      	nop
 800c20a:	370c      	adds	r7, #12
 800c20c:	46bd      	mov	sp, r7
 800c20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c212:	4770      	bx	lr

0800c214 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800c214:	b480      	push	{r7}
 800c216:	b083      	sub	sp, #12
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800c21c:	bf00      	nop
 800c21e:	370c      	adds	r7, #12
 800c220:	46bd      	mov	sp, r7
 800c222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c226:	4770      	bx	lr

0800c228 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800c228:	b480      	push	{r7}
 800c22a:	b087      	sub	sp, #28
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	60f8      	str	r0, [r7, #12]
 800c230:	460b      	mov	r3, r1
 800c232:	607a      	str	r2, [r7, #4]
 800c234:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800c236:	2300      	movs	r3, #0
 800c238:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d101      	bne.n	800c244 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800c240:	2301      	movs	r3, #1
 800c242:	e14a      	b.n	800c4da <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c24a:	b2db      	uxtb	r3, r3
 800c24c:	2b01      	cmp	r3, #1
 800c24e:	f040 80dd 	bne.w	800c40c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800c252:	7afb      	ldrb	r3, [r7, #11]
 800c254:	2b1f      	cmp	r3, #31
 800c256:	f200 80d6 	bhi.w	800c406 <HAL_TIM_RegisterCallback+0x1de>
 800c25a:	a201      	add	r2, pc, #4	@ (adr r2, 800c260 <HAL_TIM_RegisterCallback+0x38>)
 800c25c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c260:	0800c2e1 	.word	0x0800c2e1
 800c264:	0800c2e9 	.word	0x0800c2e9
 800c268:	0800c2f1 	.word	0x0800c2f1
 800c26c:	0800c2f9 	.word	0x0800c2f9
 800c270:	0800c301 	.word	0x0800c301
 800c274:	0800c309 	.word	0x0800c309
 800c278:	0800c311 	.word	0x0800c311
 800c27c:	0800c319 	.word	0x0800c319
 800c280:	0800c321 	.word	0x0800c321
 800c284:	0800c329 	.word	0x0800c329
 800c288:	0800c331 	.word	0x0800c331
 800c28c:	0800c339 	.word	0x0800c339
 800c290:	0800c341 	.word	0x0800c341
 800c294:	0800c349 	.word	0x0800c349
 800c298:	0800c353 	.word	0x0800c353
 800c29c:	0800c35d 	.word	0x0800c35d
 800c2a0:	0800c367 	.word	0x0800c367
 800c2a4:	0800c371 	.word	0x0800c371
 800c2a8:	0800c37b 	.word	0x0800c37b
 800c2ac:	0800c385 	.word	0x0800c385
 800c2b0:	0800c38f 	.word	0x0800c38f
 800c2b4:	0800c399 	.word	0x0800c399
 800c2b8:	0800c3a3 	.word	0x0800c3a3
 800c2bc:	0800c3ad 	.word	0x0800c3ad
 800c2c0:	0800c3b7 	.word	0x0800c3b7
 800c2c4:	0800c3c1 	.word	0x0800c3c1
 800c2c8:	0800c3cb 	.word	0x0800c3cb
 800c2cc:	0800c3d5 	.word	0x0800c3d5
 800c2d0:	0800c3df 	.word	0x0800c3df
 800c2d4:	0800c3e9 	.word	0x0800c3e9
 800c2d8:	0800c3f3 	.word	0x0800c3f3
 800c2dc:	0800c3fd 	.word	0x0800c3fd
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	687a      	ldr	r2, [r7, #4]
 800c2e4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800c2e6:	e0f7      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	687a      	ldr	r2, [r7, #4]
 800c2ec:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800c2ee:	e0f3      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	687a      	ldr	r2, [r7, #4]
 800c2f4:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800c2f6:	e0ef      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	687a      	ldr	r2, [r7, #4]
 800c2fc:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800c2fe:	e0eb      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800c306:	e0e7      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	687a      	ldr	r2, [r7, #4]
 800c30c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800c30e:	e0e3      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	687a      	ldr	r2, [r7, #4]
 800c314:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800c316:	e0df      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	687a      	ldr	r2, [r7, #4]
 800c31c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800c31e:	e0db      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	687a      	ldr	r2, [r7, #4]
 800c324:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800c326:	e0d7      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	687a      	ldr	r2, [r7, #4]
 800c32c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800c32e:	e0d3      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	687a      	ldr	r2, [r7, #4]
 800c334:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800c336:	e0cf      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	687a      	ldr	r2, [r7, #4]
 800c33c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800c33e:	e0cb      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	687a      	ldr	r2, [r7, #4]
 800c344:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800c346:	e0c7      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	687a      	ldr	r2, [r7, #4]
 800c34c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800c350:	e0c2      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	687a      	ldr	r2, [r7, #4]
 800c356:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800c35a:	e0bd      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	687a      	ldr	r2, [r7, #4]
 800c360:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800c364:	e0b8      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	687a      	ldr	r2, [r7, #4]
 800c36a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800c36e:	e0b3      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	687a      	ldr	r2, [r7, #4]
 800c374:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800c378:	e0ae      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	687a      	ldr	r2, [r7, #4]
 800c37e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800c382:	e0a9      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	687a      	ldr	r2, [r7, #4]
 800c388:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800c38c:	e0a4      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	687a      	ldr	r2, [r7, #4]
 800c392:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800c396:	e09f      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	687a      	ldr	r2, [r7, #4]
 800c39c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800c3a0:	e09a      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	687a      	ldr	r2, [r7, #4]
 800c3a6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800c3aa:	e095      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	687a      	ldr	r2, [r7, #4]
 800c3b0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800c3b4:	e090      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	687a      	ldr	r2, [r7, #4]
 800c3ba:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800c3be:	e08b      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800c3c8:	e086      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	687a      	ldr	r2, [r7, #4]
 800c3ce:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800c3d2:	e081      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	687a      	ldr	r2, [r7, #4]
 800c3d8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800c3dc:	e07c      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	687a      	ldr	r2, [r7, #4]
 800c3e2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800c3e6:	e077      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	687a      	ldr	r2, [r7, #4]
 800c3ec:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800c3f0:	e072      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800c3fa:	e06d      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	687a      	ldr	r2, [r7, #4]
 800c400:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800c404:	e068      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800c406:	2301      	movs	r3, #1
 800c408:	75fb      	strb	r3, [r7, #23]
        break;
 800c40a:	e065      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c412:	b2db      	uxtb	r3, r3
 800c414:	2b00      	cmp	r3, #0
 800c416:	d15d      	bne.n	800c4d4 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800c418:	7afb      	ldrb	r3, [r7, #11]
 800c41a:	2b0d      	cmp	r3, #13
 800c41c:	d857      	bhi.n	800c4ce <HAL_TIM_RegisterCallback+0x2a6>
 800c41e:	a201      	add	r2, pc, #4	@ (adr r2, 800c424 <HAL_TIM_RegisterCallback+0x1fc>)
 800c420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c424:	0800c45d 	.word	0x0800c45d
 800c428:	0800c465 	.word	0x0800c465
 800c42c:	0800c46d 	.word	0x0800c46d
 800c430:	0800c475 	.word	0x0800c475
 800c434:	0800c47d 	.word	0x0800c47d
 800c438:	0800c485 	.word	0x0800c485
 800c43c:	0800c48d 	.word	0x0800c48d
 800c440:	0800c495 	.word	0x0800c495
 800c444:	0800c49d 	.word	0x0800c49d
 800c448:	0800c4a5 	.word	0x0800c4a5
 800c44c:	0800c4ad 	.word	0x0800c4ad
 800c450:	0800c4b5 	.word	0x0800c4b5
 800c454:	0800c4bd 	.word	0x0800c4bd
 800c458:	0800c4c5 	.word	0x0800c4c5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	687a      	ldr	r2, [r7, #4]
 800c460:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800c462:	e039      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	687a      	ldr	r2, [r7, #4]
 800c468:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800c46a:	e035      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	687a      	ldr	r2, [r7, #4]
 800c470:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800c472:	e031      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	687a      	ldr	r2, [r7, #4]
 800c478:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800c47a:	e02d      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	687a      	ldr	r2, [r7, #4]
 800c480:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800c482:	e029      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	687a      	ldr	r2, [r7, #4]
 800c488:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800c48a:	e025      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	687a      	ldr	r2, [r7, #4]
 800c490:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800c492:	e021      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	687a      	ldr	r2, [r7, #4]
 800c498:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800c49a:	e01d      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	687a      	ldr	r2, [r7, #4]
 800c4a0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800c4a2:	e019      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	687a      	ldr	r2, [r7, #4]
 800c4a8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800c4aa:	e015      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	687a      	ldr	r2, [r7, #4]
 800c4b0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800c4b2:	e011      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	687a      	ldr	r2, [r7, #4]
 800c4b8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800c4ba:	e00d      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	687a      	ldr	r2, [r7, #4]
 800c4c0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800c4c2:	e009      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	687a      	ldr	r2, [r7, #4]
 800c4c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800c4cc:	e004      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	75fb      	strb	r3, [r7, #23]
        break;
 800c4d2:	e001      	b.n	800c4d8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800c4d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	371c      	adds	r7, #28
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e4:	4770      	bx	lr
 800c4e6:	bf00      	nop

0800c4e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b085      	sub	sp, #20
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
 800c4f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	4a42      	ldr	r2, [pc, #264]	@ (800c604 <TIM_Base_SetConfig+0x11c>)
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	d00f      	beq.n	800c520 <TIM_Base_SetConfig+0x38>
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c506:	d00b      	beq.n	800c520 <TIM_Base_SetConfig+0x38>
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	4a3f      	ldr	r2, [pc, #252]	@ (800c608 <TIM_Base_SetConfig+0x120>)
 800c50c:	4293      	cmp	r3, r2
 800c50e:	d007      	beq.n	800c520 <TIM_Base_SetConfig+0x38>
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	4a3e      	ldr	r2, [pc, #248]	@ (800c60c <TIM_Base_SetConfig+0x124>)
 800c514:	4293      	cmp	r3, r2
 800c516:	d003      	beq.n	800c520 <TIM_Base_SetConfig+0x38>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	4a3d      	ldr	r2, [pc, #244]	@ (800c610 <TIM_Base_SetConfig+0x128>)
 800c51c:	4293      	cmp	r3, r2
 800c51e:	d108      	bne.n	800c532 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	685b      	ldr	r3, [r3, #4]
 800c52c:	68fa      	ldr	r2, [r7, #12]
 800c52e:	4313      	orrs	r3, r2
 800c530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	4a33      	ldr	r2, [pc, #204]	@ (800c604 <TIM_Base_SetConfig+0x11c>)
 800c536:	4293      	cmp	r3, r2
 800c538:	d01b      	beq.n	800c572 <TIM_Base_SetConfig+0x8a>
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c540:	d017      	beq.n	800c572 <TIM_Base_SetConfig+0x8a>
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	4a30      	ldr	r2, [pc, #192]	@ (800c608 <TIM_Base_SetConfig+0x120>)
 800c546:	4293      	cmp	r3, r2
 800c548:	d013      	beq.n	800c572 <TIM_Base_SetConfig+0x8a>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	4a2f      	ldr	r2, [pc, #188]	@ (800c60c <TIM_Base_SetConfig+0x124>)
 800c54e:	4293      	cmp	r3, r2
 800c550:	d00f      	beq.n	800c572 <TIM_Base_SetConfig+0x8a>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	4a2e      	ldr	r2, [pc, #184]	@ (800c610 <TIM_Base_SetConfig+0x128>)
 800c556:	4293      	cmp	r3, r2
 800c558:	d00b      	beq.n	800c572 <TIM_Base_SetConfig+0x8a>
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	4a2d      	ldr	r2, [pc, #180]	@ (800c614 <TIM_Base_SetConfig+0x12c>)
 800c55e:	4293      	cmp	r3, r2
 800c560:	d007      	beq.n	800c572 <TIM_Base_SetConfig+0x8a>
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	4a2c      	ldr	r2, [pc, #176]	@ (800c618 <TIM_Base_SetConfig+0x130>)
 800c566:	4293      	cmp	r3, r2
 800c568:	d003      	beq.n	800c572 <TIM_Base_SetConfig+0x8a>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	4a2b      	ldr	r2, [pc, #172]	@ (800c61c <TIM_Base_SetConfig+0x134>)
 800c56e:	4293      	cmp	r3, r2
 800c570:	d108      	bne.n	800c584 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c578:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	68db      	ldr	r3, [r3, #12]
 800c57e:	68fa      	ldr	r2, [r7, #12]
 800c580:	4313      	orrs	r3, r2
 800c582:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	695b      	ldr	r3, [r3, #20]
 800c58e:	4313      	orrs	r3, r2
 800c590:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	68fa      	ldr	r2, [r7, #12]
 800c596:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	689a      	ldr	r2, [r3, #8]
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	681a      	ldr	r2, [r3, #0]
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	4a16      	ldr	r2, [pc, #88]	@ (800c604 <TIM_Base_SetConfig+0x11c>)
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	d00f      	beq.n	800c5d0 <TIM_Base_SetConfig+0xe8>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	4a17      	ldr	r2, [pc, #92]	@ (800c610 <TIM_Base_SetConfig+0x128>)
 800c5b4:	4293      	cmp	r3, r2
 800c5b6:	d00b      	beq.n	800c5d0 <TIM_Base_SetConfig+0xe8>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	4a16      	ldr	r2, [pc, #88]	@ (800c614 <TIM_Base_SetConfig+0x12c>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d007      	beq.n	800c5d0 <TIM_Base_SetConfig+0xe8>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	4a15      	ldr	r2, [pc, #84]	@ (800c618 <TIM_Base_SetConfig+0x130>)
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d003      	beq.n	800c5d0 <TIM_Base_SetConfig+0xe8>
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	4a14      	ldr	r2, [pc, #80]	@ (800c61c <TIM_Base_SetConfig+0x134>)
 800c5cc:	4293      	cmp	r3, r2
 800c5ce:	d103      	bne.n	800c5d8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	691a      	ldr	r2, [r3, #16]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2201      	movs	r2, #1
 800c5dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	691b      	ldr	r3, [r3, #16]
 800c5e2:	f003 0301 	and.w	r3, r3, #1
 800c5e6:	2b01      	cmp	r3, #1
 800c5e8:	d105      	bne.n	800c5f6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	691b      	ldr	r3, [r3, #16]
 800c5ee:	f023 0201 	bic.w	r2, r3, #1
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	611a      	str	r2, [r3, #16]
  }
}
 800c5f6:	bf00      	nop
 800c5f8:	3714      	adds	r7, #20
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c600:	4770      	bx	lr
 800c602:	bf00      	nop
 800c604:	40012c00 	.word	0x40012c00
 800c608:	40000400 	.word	0x40000400
 800c60c:	40000800 	.word	0x40000800
 800c610:	40013400 	.word	0x40013400
 800c614:	40014000 	.word	0x40014000
 800c618:	40014400 	.word	0x40014400
 800c61c:	40014800 	.word	0x40014800

0800c620 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c620:	b480      	push	{r7}
 800c622:	b087      	sub	sp, #28
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	6a1b      	ldr	r3, [r3, #32]
 800c62e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	6a1b      	ldr	r3, [r3, #32]
 800c634:	f023 0201 	bic.w	r2, r3, #1
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	685b      	ldr	r3, [r3, #4]
 800c640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	699b      	ldr	r3, [r3, #24]
 800c646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c64e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	f023 0303 	bic.w	r3, r3, #3
 800c65a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	68fa      	ldr	r2, [r7, #12]
 800c662:	4313      	orrs	r3, r2
 800c664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	f023 0302 	bic.w	r3, r3, #2
 800c66c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	689b      	ldr	r3, [r3, #8]
 800c672:	697a      	ldr	r2, [r7, #20]
 800c674:	4313      	orrs	r3, r2
 800c676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	4a2c      	ldr	r2, [pc, #176]	@ (800c72c <TIM_OC1_SetConfig+0x10c>)
 800c67c:	4293      	cmp	r3, r2
 800c67e:	d00f      	beq.n	800c6a0 <TIM_OC1_SetConfig+0x80>
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	4a2b      	ldr	r2, [pc, #172]	@ (800c730 <TIM_OC1_SetConfig+0x110>)
 800c684:	4293      	cmp	r3, r2
 800c686:	d00b      	beq.n	800c6a0 <TIM_OC1_SetConfig+0x80>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	4a2a      	ldr	r2, [pc, #168]	@ (800c734 <TIM_OC1_SetConfig+0x114>)
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d007      	beq.n	800c6a0 <TIM_OC1_SetConfig+0x80>
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	4a29      	ldr	r2, [pc, #164]	@ (800c738 <TIM_OC1_SetConfig+0x118>)
 800c694:	4293      	cmp	r3, r2
 800c696:	d003      	beq.n	800c6a0 <TIM_OC1_SetConfig+0x80>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	4a28      	ldr	r2, [pc, #160]	@ (800c73c <TIM_OC1_SetConfig+0x11c>)
 800c69c:	4293      	cmp	r3, r2
 800c69e:	d10c      	bne.n	800c6ba <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	f023 0308 	bic.w	r3, r3, #8
 800c6a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	68db      	ldr	r3, [r3, #12]
 800c6ac:	697a      	ldr	r2, [r7, #20]
 800c6ae:	4313      	orrs	r3, r2
 800c6b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	f023 0304 	bic.w	r3, r3, #4
 800c6b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	4a1b      	ldr	r2, [pc, #108]	@ (800c72c <TIM_OC1_SetConfig+0x10c>)
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	d00f      	beq.n	800c6e2 <TIM_OC1_SetConfig+0xc2>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	4a1a      	ldr	r2, [pc, #104]	@ (800c730 <TIM_OC1_SetConfig+0x110>)
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	d00b      	beq.n	800c6e2 <TIM_OC1_SetConfig+0xc2>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	4a19      	ldr	r2, [pc, #100]	@ (800c734 <TIM_OC1_SetConfig+0x114>)
 800c6ce:	4293      	cmp	r3, r2
 800c6d0:	d007      	beq.n	800c6e2 <TIM_OC1_SetConfig+0xc2>
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	4a18      	ldr	r2, [pc, #96]	@ (800c738 <TIM_OC1_SetConfig+0x118>)
 800c6d6:	4293      	cmp	r3, r2
 800c6d8:	d003      	beq.n	800c6e2 <TIM_OC1_SetConfig+0xc2>
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	4a17      	ldr	r2, [pc, #92]	@ (800c73c <TIM_OC1_SetConfig+0x11c>)
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	d111      	bne.n	800c706 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c6e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c6ea:	693b      	ldr	r3, [r7, #16]
 800c6ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c6f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	695b      	ldr	r3, [r3, #20]
 800c6f6:	693a      	ldr	r2, [r7, #16]
 800c6f8:	4313      	orrs	r3, r2
 800c6fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	699b      	ldr	r3, [r3, #24]
 800c700:	693a      	ldr	r2, [r7, #16]
 800c702:	4313      	orrs	r3, r2
 800c704:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	693a      	ldr	r2, [r7, #16]
 800c70a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	68fa      	ldr	r2, [r7, #12]
 800c710:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	685a      	ldr	r2, [r3, #4]
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	697a      	ldr	r2, [r7, #20]
 800c71e:	621a      	str	r2, [r3, #32]
}
 800c720:	bf00      	nop
 800c722:	371c      	adds	r7, #28
 800c724:	46bd      	mov	sp, r7
 800c726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72a:	4770      	bx	lr
 800c72c:	40012c00 	.word	0x40012c00
 800c730:	40013400 	.word	0x40013400
 800c734:	40014000 	.word	0x40014000
 800c738:	40014400 	.word	0x40014400
 800c73c:	40014800 	.word	0x40014800

0800c740 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c740:	b480      	push	{r7}
 800c742:	b087      	sub	sp, #28
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
 800c748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6a1b      	ldr	r3, [r3, #32]
 800c74e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6a1b      	ldr	r3, [r3, #32]
 800c754:	f023 0210 	bic.w	r2, r3, #16
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	685b      	ldr	r3, [r3, #4]
 800c760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	699b      	ldr	r3, [r3, #24]
 800c766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c76e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c77a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	021b      	lsls	r3, r3, #8
 800c782:	68fa      	ldr	r2, [r7, #12]
 800c784:	4313      	orrs	r3, r2
 800c786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	f023 0320 	bic.w	r3, r3, #32
 800c78e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	689b      	ldr	r3, [r3, #8]
 800c794:	011b      	lsls	r3, r3, #4
 800c796:	697a      	ldr	r2, [r7, #20]
 800c798:	4313      	orrs	r3, r2
 800c79a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	4a28      	ldr	r2, [pc, #160]	@ (800c840 <TIM_OC2_SetConfig+0x100>)
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	d003      	beq.n	800c7ac <TIM_OC2_SetConfig+0x6c>
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	4a27      	ldr	r2, [pc, #156]	@ (800c844 <TIM_OC2_SetConfig+0x104>)
 800c7a8:	4293      	cmp	r3, r2
 800c7aa:	d10d      	bne.n	800c7c8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c7b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	68db      	ldr	r3, [r3, #12]
 800c7b8:	011b      	lsls	r3, r3, #4
 800c7ba:	697a      	ldr	r2, [r7, #20]
 800c7bc:	4313      	orrs	r3, r2
 800c7be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c7c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	4a1d      	ldr	r2, [pc, #116]	@ (800c840 <TIM_OC2_SetConfig+0x100>)
 800c7cc:	4293      	cmp	r3, r2
 800c7ce:	d00f      	beq.n	800c7f0 <TIM_OC2_SetConfig+0xb0>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	4a1c      	ldr	r2, [pc, #112]	@ (800c844 <TIM_OC2_SetConfig+0x104>)
 800c7d4:	4293      	cmp	r3, r2
 800c7d6:	d00b      	beq.n	800c7f0 <TIM_OC2_SetConfig+0xb0>
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	4a1b      	ldr	r2, [pc, #108]	@ (800c848 <TIM_OC2_SetConfig+0x108>)
 800c7dc:	4293      	cmp	r3, r2
 800c7de:	d007      	beq.n	800c7f0 <TIM_OC2_SetConfig+0xb0>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	4a1a      	ldr	r2, [pc, #104]	@ (800c84c <TIM_OC2_SetConfig+0x10c>)
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	d003      	beq.n	800c7f0 <TIM_OC2_SetConfig+0xb0>
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	4a19      	ldr	r2, [pc, #100]	@ (800c850 <TIM_OC2_SetConfig+0x110>)
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d113      	bne.n	800c818 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c7f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c7f8:	693b      	ldr	r3, [r7, #16]
 800c7fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c7fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	695b      	ldr	r3, [r3, #20]
 800c804:	009b      	lsls	r3, r3, #2
 800c806:	693a      	ldr	r2, [r7, #16]
 800c808:	4313      	orrs	r3, r2
 800c80a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	699b      	ldr	r3, [r3, #24]
 800c810:	009b      	lsls	r3, r3, #2
 800c812:	693a      	ldr	r2, [r7, #16]
 800c814:	4313      	orrs	r3, r2
 800c816:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	693a      	ldr	r2, [r7, #16]
 800c81c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	68fa      	ldr	r2, [r7, #12]
 800c822:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	685a      	ldr	r2, [r3, #4]
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	697a      	ldr	r2, [r7, #20]
 800c830:	621a      	str	r2, [r3, #32]
}
 800c832:	bf00      	nop
 800c834:	371c      	adds	r7, #28
 800c836:	46bd      	mov	sp, r7
 800c838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83c:	4770      	bx	lr
 800c83e:	bf00      	nop
 800c840:	40012c00 	.word	0x40012c00
 800c844:	40013400 	.word	0x40013400
 800c848:	40014000 	.word	0x40014000
 800c84c:	40014400 	.word	0x40014400
 800c850:	40014800 	.word	0x40014800

0800c854 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c854:	b480      	push	{r7}
 800c856:	b087      	sub	sp, #28
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6a1b      	ldr	r3, [r3, #32]
 800c862:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6a1b      	ldr	r3, [r3, #32]
 800c868:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	685b      	ldr	r3, [r3, #4]
 800c874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	69db      	ldr	r3, [r3, #28]
 800c87a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	f023 0303 	bic.w	r3, r3, #3
 800c88e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	68fa      	ldr	r2, [r7, #12]
 800c896:	4313      	orrs	r3, r2
 800c898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c8a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	689b      	ldr	r3, [r3, #8]
 800c8a6:	021b      	lsls	r3, r3, #8
 800c8a8:	697a      	ldr	r2, [r7, #20]
 800c8aa:	4313      	orrs	r3, r2
 800c8ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	4a27      	ldr	r2, [pc, #156]	@ (800c950 <TIM_OC3_SetConfig+0xfc>)
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	d003      	beq.n	800c8be <TIM_OC3_SetConfig+0x6a>
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	4a26      	ldr	r2, [pc, #152]	@ (800c954 <TIM_OC3_SetConfig+0x100>)
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	d10d      	bne.n	800c8da <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c8c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	68db      	ldr	r3, [r3, #12]
 800c8ca:	021b      	lsls	r3, r3, #8
 800c8cc:	697a      	ldr	r2, [r7, #20]
 800c8ce:	4313      	orrs	r3, r2
 800c8d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c8d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	4a1c      	ldr	r2, [pc, #112]	@ (800c950 <TIM_OC3_SetConfig+0xfc>)
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d00f      	beq.n	800c902 <TIM_OC3_SetConfig+0xae>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	4a1b      	ldr	r2, [pc, #108]	@ (800c954 <TIM_OC3_SetConfig+0x100>)
 800c8e6:	4293      	cmp	r3, r2
 800c8e8:	d00b      	beq.n	800c902 <TIM_OC3_SetConfig+0xae>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	4a1a      	ldr	r2, [pc, #104]	@ (800c958 <TIM_OC3_SetConfig+0x104>)
 800c8ee:	4293      	cmp	r3, r2
 800c8f0:	d007      	beq.n	800c902 <TIM_OC3_SetConfig+0xae>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	4a19      	ldr	r2, [pc, #100]	@ (800c95c <TIM_OC3_SetConfig+0x108>)
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d003      	beq.n	800c902 <TIM_OC3_SetConfig+0xae>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	4a18      	ldr	r2, [pc, #96]	@ (800c960 <TIM_OC3_SetConfig+0x10c>)
 800c8fe:	4293      	cmp	r3, r2
 800c900:	d113      	bne.n	800c92a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c902:	693b      	ldr	r3, [r7, #16]
 800c904:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	695b      	ldr	r3, [r3, #20]
 800c916:	011b      	lsls	r3, r3, #4
 800c918:	693a      	ldr	r2, [r7, #16]
 800c91a:	4313      	orrs	r3, r2
 800c91c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	699b      	ldr	r3, [r3, #24]
 800c922:	011b      	lsls	r3, r3, #4
 800c924:	693a      	ldr	r2, [r7, #16]
 800c926:	4313      	orrs	r3, r2
 800c928:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	693a      	ldr	r2, [r7, #16]
 800c92e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	68fa      	ldr	r2, [r7, #12]
 800c934:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	685a      	ldr	r2, [r3, #4]
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	697a      	ldr	r2, [r7, #20]
 800c942:	621a      	str	r2, [r3, #32]
}
 800c944:	bf00      	nop
 800c946:	371c      	adds	r7, #28
 800c948:	46bd      	mov	sp, r7
 800c94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94e:	4770      	bx	lr
 800c950:	40012c00 	.word	0x40012c00
 800c954:	40013400 	.word	0x40013400
 800c958:	40014000 	.word	0x40014000
 800c95c:	40014400 	.word	0x40014400
 800c960:	40014800 	.word	0x40014800

0800c964 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c964:	b480      	push	{r7}
 800c966:	b087      	sub	sp, #28
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6a1b      	ldr	r3, [r3, #32]
 800c972:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	6a1b      	ldr	r3, [r3, #32]
 800c978:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	685b      	ldr	r3, [r3, #4]
 800c984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	69db      	ldr	r3, [r3, #28]
 800c98a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c992:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c99e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	021b      	lsls	r3, r3, #8
 800c9a6:	68fa      	ldr	r2, [r7, #12]
 800c9a8:	4313      	orrs	r3, r2
 800c9aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c9b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	689b      	ldr	r3, [r3, #8]
 800c9b8:	031b      	lsls	r3, r3, #12
 800c9ba:	697a      	ldr	r2, [r7, #20]
 800c9bc:	4313      	orrs	r3, r2
 800c9be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	4a28      	ldr	r2, [pc, #160]	@ (800ca64 <TIM_OC4_SetConfig+0x100>)
 800c9c4:	4293      	cmp	r3, r2
 800c9c6:	d003      	beq.n	800c9d0 <TIM_OC4_SetConfig+0x6c>
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	4a27      	ldr	r2, [pc, #156]	@ (800ca68 <TIM_OC4_SetConfig+0x104>)
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	d10d      	bne.n	800c9ec <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c9d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	68db      	ldr	r3, [r3, #12]
 800c9dc:	031b      	lsls	r3, r3, #12
 800c9de:	697a      	ldr	r2, [r7, #20]
 800c9e0:	4313      	orrs	r3, r2
 800c9e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c9ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	4a1d      	ldr	r2, [pc, #116]	@ (800ca64 <TIM_OC4_SetConfig+0x100>)
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	d00f      	beq.n	800ca14 <TIM_OC4_SetConfig+0xb0>
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	4a1c      	ldr	r2, [pc, #112]	@ (800ca68 <TIM_OC4_SetConfig+0x104>)
 800c9f8:	4293      	cmp	r3, r2
 800c9fa:	d00b      	beq.n	800ca14 <TIM_OC4_SetConfig+0xb0>
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	4a1b      	ldr	r2, [pc, #108]	@ (800ca6c <TIM_OC4_SetConfig+0x108>)
 800ca00:	4293      	cmp	r3, r2
 800ca02:	d007      	beq.n	800ca14 <TIM_OC4_SetConfig+0xb0>
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	4a1a      	ldr	r2, [pc, #104]	@ (800ca70 <TIM_OC4_SetConfig+0x10c>)
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d003      	beq.n	800ca14 <TIM_OC4_SetConfig+0xb0>
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	4a19      	ldr	r2, [pc, #100]	@ (800ca74 <TIM_OC4_SetConfig+0x110>)
 800ca10:	4293      	cmp	r3, r2
 800ca12:	d113      	bne.n	800ca3c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ca14:	693b      	ldr	r3, [r7, #16]
 800ca16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ca1a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ca22:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	695b      	ldr	r3, [r3, #20]
 800ca28:	019b      	lsls	r3, r3, #6
 800ca2a:	693a      	ldr	r2, [r7, #16]
 800ca2c:	4313      	orrs	r3, r2
 800ca2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	699b      	ldr	r3, [r3, #24]
 800ca34:	019b      	lsls	r3, r3, #6
 800ca36:	693a      	ldr	r2, [r7, #16]
 800ca38:	4313      	orrs	r3, r2
 800ca3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	693a      	ldr	r2, [r7, #16]
 800ca40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	68fa      	ldr	r2, [r7, #12]
 800ca46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	685a      	ldr	r2, [r3, #4]
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	697a      	ldr	r2, [r7, #20]
 800ca54:	621a      	str	r2, [r3, #32]
}
 800ca56:	bf00      	nop
 800ca58:	371c      	adds	r7, #28
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca60:	4770      	bx	lr
 800ca62:	bf00      	nop
 800ca64:	40012c00 	.word	0x40012c00
 800ca68:	40013400 	.word	0x40013400
 800ca6c:	40014000 	.word	0x40014000
 800ca70:	40014400 	.word	0x40014400
 800ca74:	40014800 	.word	0x40014800

0800ca78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b087      	sub	sp, #28
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6a1b      	ldr	r3, [r3, #32]
 800ca86:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	6a1b      	ldr	r3, [r3, #32]
 800ca8c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	685b      	ldr	r3, [r3, #4]
 800ca98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800caa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800caaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	68fa      	ldr	r2, [r7, #12]
 800cab2:	4313      	orrs	r3, r2
 800cab4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cab6:	693b      	ldr	r3, [r7, #16]
 800cab8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800cabc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	689b      	ldr	r3, [r3, #8]
 800cac2:	041b      	lsls	r3, r3, #16
 800cac4:	693a      	ldr	r2, [r7, #16]
 800cac6:	4313      	orrs	r3, r2
 800cac8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	4a17      	ldr	r2, [pc, #92]	@ (800cb2c <TIM_OC5_SetConfig+0xb4>)
 800cace:	4293      	cmp	r3, r2
 800cad0:	d00f      	beq.n	800caf2 <TIM_OC5_SetConfig+0x7a>
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	4a16      	ldr	r2, [pc, #88]	@ (800cb30 <TIM_OC5_SetConfig+0xb8>)
 800cad6:	4293      	cmp	r3, r2
 800cad8:	d00b      	beq.n	800caf2 <TIM_OC5_SetConfig+0x7a>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	4a15      	ldr	r2, [pc, #84]	@ (800cb34 <TIM_OC5_SetConfig+0xbc>)
 800cade:	4293      	cmp	r3, r2
 800cae0:	d007      	beq.n	800caf2 <TIM_OC5_SetConfig+0x7a>
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	4a14      	ldr	r2, [pc, #80]	@ (800cb38 <TIM_OC5_SetConfig+0xc0>)
 800cae6:	4293      	cmp	r3, r2
 800cae8:	d003      	beq.n	800caf2 <TIM_OC5_SetConfig+0x7a>
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	4a13      	ldr	r2, [pc, #76]	@ (800cb3c <TIM_OC5_SetConfig+0xc4>)
 800caee:	4293      	cmp	r3, r2
 800caf0:	d109      	bne.n	800cb06 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800caf8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	695b      	ldr	r3, [r3, #20]
 800cafe:	021b      	lsls	r3, r3, #8
 800cb00:	697a      	ldr	r2, [r7, #20]
 800cb02:	4313      	orrs	r3, r2
 800cb04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	697a      	ldr	r2, [r7, #20]
 800cb0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	68fa      	ldr	r2, [r7, #12]
 800cb10:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	685a      	ldr	r2, [r3, #4]
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	693a      	ldr	r2, [r7, #16]
 800cb1e:	621a      	str	r2, [r3, #32]
}
 800cb20:	bf00      	nop
 800cb22:	371c      	adds	r7, #28
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr
 800cb2c:	40012c00 	.word	0x40012c00
 800cb30:	40013400 	.word	0x40013400
 800cb34:	40014000 	.word	0x40014000
 800cb38:	40014400 	.word	0x40014400
 800cb3c:	40014800 	.word	0x40014800

0800cb40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cb40:	b480      	push	{r7}
 800cb42:	b087      	sub	sp, #28
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
 800cb48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6a1b      	ldr	r3, [r3, #32]
 800cb4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	6a1b      	ldr	r3, [r3, #32]
 800cb54:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	685b      	ldr	r3, [r3, #4]
 800cb60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cb6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	021b      	lsls	r3, r3, #8
 800cb7a:	68fa      	ldr	r2, [r7, #12]
 800cb7c:	4313      	orrs	r3, r2
 800cb7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cb86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	689b      	ldr	r3, [r3, #8]
 800cb8c:	051b      	lsls	r3, r3, #20
 800cb8e:	693a      	ldr	r2, [r7, #16]
 800cb90:	4313      	orrs	r3, r2
 800cb92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	4a18      	ldr	r2, [pc, #96]	@ (800cbf8 <TIM_OC6_SetConfig+0xb8>)
 800cb98:	4293      	cmp	r3, r2
 800cb9a:	d00f      	beq.n	800cbbc <TIM_OC6_SetConfig+0x7c>
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	4a17      	ldr	r2, [pc, #92]	@ (800cbfc <TIM_OC6_SetConfig+0xbc>)
 800cba0:	4293      	cmp	r3, r2
 800cba2:	d00b      	beq.n	800cbbc <TIM_OC6_SetConfig+0x7c>
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	4a16      	ldr	r2, [pc, #88]	@ (800cc00 <TIM_OC6_SetConfig+0xc0>)
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	d007      	beq.n	800cbbc <TIM_OC6_SetConfig+0x7c>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	4a15      	ldr	r2, [pc, #84]	@ (800cc04 <TIM_OC6_SetConfig+0xc4>)
 800cbb0:	4293      	cmp	r3, r2
 800cbb2:	d003      	beq.n	800cbbc <TIM_OC6_SetConfig+0x7c>
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	4a14      	ldr	r2, [pc, #80]	@ (800cc08 <TIM_OC6_SetConfig+0xc8>)
 800cbb8:	4293      	cmp	r3, r2
 800cbba:	d109      	bne.n	800cbd0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cbbc:	697b      	ldr	r3, [r7, #20]
 800cbbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cbc2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	695b      	ldr	r3, [r3, #20]
 800cbc8:	029b      	lsls	r3, r3, #10
 800cbca:	697a      	ldr	r2, [r7, #20]
 800cbcc:	4313      	orrs	r3, r2
 800cbce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	697a      	ldr	r2, [r7, #20]
 800cbd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	68fa      	ldr	r2, [r7, #12]
 800cbda:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	685a      	ldr	r2, [r3, #4]
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	693a      	ldr	r2, [r7, #16]
 800cbe8:	621a      	str	r2, [r3, #32]
}
 800cbea:	bf00      	nop
 800cbec:	371c      	adds	r7, #28
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf4:	4770      	bx	lr
 800cbf6:	bf00      	nop
 800cbf8:	40012c00 	.word	0x40012c00
 800cbfc:	40013400 	.word	0x40013400
 800cc00:	40014000 	.word	0x40014000
 800cc04:	40014400 	.word	0x40014400
 800cc08:	40014800 	.word	0x40014800

0800cc0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b087      	sub	sp, #28
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	60f8      	str	r0, [r7, #12]
 800cc14:	60b9      	str	r1, [r7, #8]
 800cc16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	6a1b      	ldr	r3, [r3, #32]
 800cc1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	6a1b      	ldr	r3, [r3, #32]
 800cc22:	f023 0201 	bic.w	r2, r3, #1
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	699b      	ldr	r3, [r3, #24]
 800cc2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cc36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	011b      	lsls	r3, r3, #4
 800cc3c:	693a      	ldr	r2, [r7, #16]
 800cc3e:	4313      	orrs	r3, r2
 800cc40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	f023 030a 	bic.w	r3, r3, #10
 800cc48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cc4a:	697a      	ldr	r2, [r7, #20]
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	4313      	orrs	r3, r2
 800cc50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	693a      	ldr	r2, [r7, #16]
 800cc56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	697a      	ldr	r2, [r7, #20]
 800cc5c:	621a      	str	r2, [r3, #32]
}
 800cc5e:	bf00      	nop
 800cc60:	371c      	adds	r7, #28
 800cc62:	46bd      	mov	sp, r7
 800cc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc68:	4770      	bx	lr

0800cc6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc6a:	b480      	push	{r7}
 800cc6c:	b087      	sub	sp, #28
 800cc6e:	af00      	add	r7, sp, #0
 800cc70:	60f8      	str	r0, [r7, #12]
 800cc72:	60b9      	str	r1, [r7, #8]
 800cc74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	6a1b      	ldr	r3, [r3, #32]
 800cc7a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	6a1b      	ldr	r3, [r3, #32]
 800cc80:	f023 0210 	bic.w	r2, r3, #16
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	699b      	ldr	r3, [r3, #24]
 800cc8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cc8e:	693b      	ldr	r3, [r7, #16]
 800cc90:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cc94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	031b      	lsls	r3, r3, #12
 800cc9a:	693a      	ldr	r2, [r7, #16]
 800cc9c:	4313      	orrs	r3, r2
 800cc9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cca0:	697b      	ldr	r3, [r7, #20]
 800cca2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800cca6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	011b      	lsls	r3, r3, #4
 800ccac:	697a      	ldr	r2, [r7, #20]
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	693a      	ldr	r2, [r7, #16]
 800ccb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	697a      	ldr	r2, [r7, #20]
 800ccbc:	621a      	str	r2, [r3, #32]
}
 800ccbe:	bf00      	nop
 800ccc0:	371c      	adds	r7, #28
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc8:	4770      	bx	lr

0800ccca <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ccca:	b480      	push	{r7}
 800cccc:	b085      	sub	sp, #20
 800ccce:	af00      	add	r7, sp, #0
 800ccd0:	6078      	str	r0, [r7, #4]
 800ccd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	689b      	ldr	r3, [r3, #8]
 800ccd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800cce0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cce4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cce6:	683a      	ldr	r2, [r7, #0]
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	4313      	orrs	r3, r2
 800ccec:	f043 0307 	orr.w	r3, r3, #7
 800ccf0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	68fa      	ldr	r2, [r7, #12]
 800ccf6:	609a      	str	r2, [r3, #8]
}
 800ccf8:	bf00      	nop
 800ccfa:	3714      	adds	r7, #20
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd02:	4770      	bx	lr

0800cd04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cd04:	b480      	push	{r7}
 800cd06:	b087      	sub	sp, #28
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	60f8      	str	r0, [r7, #12]
 800cd0c:	60b9      	str	r1, [r7, #8]
 800cd0e:	607a      	str	r2, [r7, #4]
 800cd10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	689b      	ldr	r3, [r3, #8]
 800cd16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cd1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	021a      	lsls	r2, r3, #8
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	431a      	orrs	r2, r3
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	4313      	orrs	r3, r2
 800cd2c:	697a      	ldr	r2, [r7, #20]
 800cd2e:	4313      	orrs	r3, r2
 800cd30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	697a      	ldr	r2, [r7, #20]
 800cd36:	609a      	str	r2, [r3, #8]
}
 800cd38:	bf00      	nop
 800cd3a:	371c      	adds	r7, #28
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd42:	4770      	bx	lr

0800cd44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cd44:	b480      	push	{r7}
 800cd46:	b087      	sub	sp, #28
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	60f8      	str	r0, [r7, #12]
 800cd4c:	60b9      	str	r1, [r7, #8]
 800cd4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	f003 031f 	and.w	r3, r3, #31
 800cd56:	2201      	movs	r2, #1
 800cd58:	fa02 f303 	lsl.w	r3, r2, r3
 800cd5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	6a1a      	ldr	r2, [r3, #32]
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	43db      	mvns	r3, r3
 800cd66:	401a      	ands	r2, r3
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	6a1a      	ldr	r2, [r3, #32]
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	f003 031f 	and.w	r3, r3, #31
 800cd76:	6879      	ldr	r1, [r7, #4]
 800cd78:	fa01 f303 	lsl.w	r3, r1, r3
 800cd7c:	431a      	orrs	r2, r3
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	621a      	str	r2, [r3, #32]
}
 800cd82:	bf00      	nop
 800cd84:	371c      	adds	r7, #28
 800cd86:	46bd      	mov	sp, r7
 800cd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8c:	4770      	bx	lr
	...

0800cd90 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800cd90:	b480      	push	{r7}
 800cd92:	b083      	sub	sp, #12
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	4a26      	ldr	r2, [pc, #152]	@ (800ce34 <TIM_ResetCallback+0xa4>)
 800cd9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	4a25      	ldr	r2, [pc, #148]	@ (800ce38 <TIM_ResetCallback+0xa8>)
 800cda4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	4a24      	ldr	r2, [pc, #144]	@ (800ce3c <TIM_ResetCallback+0xac>)
 800cdac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	4a23      	ldr	r2, [pc, #140]	@ (800ce40 <TIM_ResetCallback+0xb0>)
 800cdb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	4a22      	ldr	r2, [pc, #136]	@ (800ce44 <TIM_ResetCallback+0xb4>)
 800cdbc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	4a21      	ldr	r2, [pc, #132]	@ (800ce48 <TIM_ResetCallback+0xb8>)
 800cdc4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	4a20      	ldr	r2, [pc, #128]	@ (800ce4c <TIM_ResetCallback+0xbc>)
 800cdcc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	4a1f      	ldr	r2, [pc, #124]	@ (800ce50 <TIM_ResetCallback+0xc0>)
 800cdd4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	4a1e      	ldr	r2, [pc, #120]	@ (800ce54 <TIM_ResetCallback+0xc4>)
 800cddc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	4a1d      	ldr	r2, [pc, #116]	@ (800ce58 <TIM_ResetCallback+0xc8>)
 800cde4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	4a1c      	ldr	r2, [pc, #112]	@ (800ce5c <TIM_ResetCallback+0xcc>)
 800cdec:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	4a1b      	ldr	r2, [pc, #108]	@ (800ce60 <TIM_ResetCallback+0xd0>)
 800cdf4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	4a1a      	ldr	r2, [pc, #104]	@ (800ce64 <TIM_ResetCallback+0xd4>)
 800cdfc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	4a19      	ldr	r2, [pc, #100]	@ (800ce68 <TIM_ResetCallback+0xd8>)
 800ce04:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	4a18      	ldr	r2, [pc, #96]	@ (800ce6c <TIM_ResetCallback+0xdc>)
 800ce0c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	4a17      	ldr	r2, [pc, #92]	@ (800ce70 <TIM_ResetCallback+0xe0>)
 800ce14:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	4a16      	ldr	r2, [pc, #88]	@ (800ce74 <TIM_ResetCallback+0xe4>)
 800ce1c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	4a15      	ldr	r2, [pc, #84]	@ (800ce78 <TIM_ResetCallback+0xe8>)
 800ce24:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800ce28:	bf00      	nop
 800ce2a:	370c      	adds	r7, #12
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce32:	4770      	bx	lr
 800ce34:	08003fbd 	.word	0x08003fbd
 800ce38:	0800c175 	.word	0x0800c175
 800ce3c:	0800c1ed 	.word	0x0800c1ed
 800ce40:	0800c201 	.word	0x0800c201
 800ce44:	0800c19d 	.word	0x0800c19d
 800ce48:	0800c1b1 	.word	0x0800c1b1
 800ce4c:	0800c189 	.word	0x0800c189
 800ce50:	0800c1c5 	.word	0x0800c1c5
 800ce54:	0800c1d9 	.word	0x0800c1d9
 800ce58:	0800c215 	.word	0x0800c215
 800ce5c:	0800cf81 	.word	0x0800cf81
 800ce60:	0800cf95 	.word	0x0800cf95
 800ce64:	0800cfa9 	.word	0x0800cfa9
 800ce68:	0800cfbd 	.word	0x0800cfbd
 800ce6c:	0800cfd1 	.word	0x0800cfd1
 800ce70:	0800cfe5 	.word	0x0800cfe5
 800ce74:	0800cff9 	.word	0x0800cff9
 800ce78:	0800d00d 	.word	0x0800d00d

0800ce7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b085      	sub	sp, #20
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
 800ce84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ce8c:	2b01      	cmp	r3, #1
 800ce8e:	d101      	bne.n	800ce94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ce90:	2302      	movs	r3, #2
 800ce92:	e065      	b.n	800cf60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2201      	movs	r2, #1
 800ce98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2202      	movs	r2, #2
 800cea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	685b      	ldr	r3, [r3, #4]
 800ceaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	689b      	ldr	r3, [r3, #8]
 800ceb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	4a2c      	ldr	r2, [pc, #176]	@ (800cf6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ceba:	4293      	cmp	r3, r2
 800cebc:	d004      	beq.n	800cec8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	4a2b      	ldr	r2, [pc, #172]	@ (800cf70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800cec4:	4293      	cmp	r3, r2
 800cec6:	d108      	bne.n	800ceda <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800cece:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	685b      	ldr	r3, [r3, #4]
 800ced4:	68fa      	ldr	r2, [r7, #12]
 800ced6:	4313      	orrs	r3, r2
 800ced8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800cee0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cee4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	68fa      	ldr	r2, [r7, #12]
 800ceec:	4313      	orrs	r3, r2
 800ceee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	68fa      	ldr	r2, [r7, #12]
 800cef6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	4a1b      	ldr	r2, [pc, #108]	@ (800cf6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800cefe:	4293      	cmp	r3, r2
 800cf00:	d018      	beq.n	800cf34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf0a:	d013      	beq.n	800cf34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	4a18      	ldr	r2, [pc, #96]	@ (800cf74 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d00e      	beq.n	800cf34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	4a17      	ldr	r2, [pc, #92]	@ (800cf78 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	d009      	beq.n	800cf34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	4a12      	ldr	r2, [pc, #72]	@ (800cf70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800cf26:	4293      	cmp	r3, r2
 800cf28:	d004      	beq.n	800cf34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	4a13      	ldr	r2, [pc, #76]	@ (800cf7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cf30:	4293      	cmp	r3, r2
 800cf32:	d10c      	bne.n	800cf4e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cf3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	689b      	ldr	r3, [r3, #8]
 800cf40:	68ba      	ldr	r2, [r7, #8]
 800cf42:	4313      	orrs	r3, r2
 800cf44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	68ba      	ldr	r2, [r7, #8]
 800cf4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2201      	movs	r2, #1
 800cf52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cf5e:	2300      	movs	r3, #0
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3714      	adds	r7, #20
 800cf64:	46bd      	mov	sp, r7
 800cf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6a:	4770      	bx	lr
 800cf6c:	40012c00 	.word	0x40012c00
 800cf70:	40013400 	.word	0x40013400
 800cf74:	40000400 	.word	0x40000400
 800cf78:	40000800 	.word	0x40000800
 800cf7c:	40014000 	.word	0x40014000

0800cf80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cf80:	b480      	push	{r7}
 800cf82:	b083      	sub	sp, #12
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cf88:	bf00      	nop
 800cf8a:	370c      	adds	r7, #12
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf92:	4770      	bx	lr

0800cf94 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800cf94:	b480      	push	{r7}
 800cf96:	b083      	sub	sp, #12
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800cf9c:	bf00      	nop
 800cf9e:	370c      	adds	r7, #12
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa6:	4770      	bx	lr

0800cfa8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b083      	sub	sp, #12
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cfb0:	bf00      	nop
 800cfb2:	370c      	adds	r7, #12
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfba:	4770      	bx	lr

0800cfbc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b083      	sub	sp, #12
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cfc4:	bf00      	nop
 800cfc6:	370c      	adds	r7, #12
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfce:	4770      	bx	lr

0800cfd0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b083      	sub	sp, #12
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800cfd8:	bf00      	nop
 800cfda:	370c      	adds	r7, #12
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe2:	4770      	bx	lr

0800cfe4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b083      	sub	sp, #12
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800cfec:	bf00      	nop
 800cfee:	370c      	adds	r7, #12
 800cff0:	46bd      	mov	sp, r7
 800cff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff6:	4770      	bx	lr

0800cff8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800cff8:	b480      	push	{r7}
 800cffa:	b083      	sub	sp, #12
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800d000:	bf00      	nop
 800d002:	370c      	adds	r7, #12
 800d004:	46bd      	mov	sp, r7
 800d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00a:	4770      	bx	lr

0800d00c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800d00c:	b480      	push	{r7}
 800d00e:	b083      	sub	sp, #12
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800d014:	bf00      	nop
 800d016:	370c      	adds	r7, #12
 800d018:	46bd      	mov	sp, r7
 800d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01e:	4770      	bx	lr

0800d020 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b082      	sub	sp, #8
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d101      	bne.n	800d032 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d02e:	2301      	movs	r3, #1
 800d030:	e042      	b.n	800d0b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d106      	bne.n	800d04a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2200      	movs	r2, #0
 800d040:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f7f8 f879 	bl	800513c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2224      	movs	r2, #36	@ 0x24
 800d04e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	681a      	ldr	r2, [r3, #0]
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	f022 0201 	bic.w	r2, r2, #1
 800d060:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d066:	2b00      	cmp	r3, #0
 800d068:	d002      	beq.n	800d070 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f001 f962 	bl	800e334 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f000 fe93 	bl	800dd9c <UART_SetConfig>
 800d076:	4603      	mov	r3, r0
 800d078:	2b01      	cmp	r3, #1
 800d07a:	d101      	bne.n	800d080 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d07c:	2301      	movs	r3, #1
 800d07e:	e01b      	b.n	800d0b8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	685a      	ldr	r2, [r3, #4]
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d08e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	689a      	ldr	r2, [r3, #8]
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d09e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	681a      	ldr	r2, [r3, #0]
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	f042 0201 	orr.w	r2, r2, #1
 800d0ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f001 f9e1 	bl	800e478 <UART_CheckIdleState>
 800d0b6:	4603      	mov	r3, r0
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3708      	adds	r7, #8
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}

0800d0c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b08a      	sub	sp, #40	@ 0x28
 800d0c4:	af02      	add	r7, sp, #8
 800d0c6:	60f8      	str	r0, [r7, #12]
 800d0c8:	60b9      	str	r1, [r7, #8]
 800d0ca:	603b      	str	r3, [r7, #0]
 800d0cc:	4613      	mov	r3, r2
 800d0ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d0d6:	2b20      	cmp	r3, #32
 800d0d8:	d17b      	bne.n	800d1d2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d002      	beq.n	800d0e6 <HAL_UART_Transmit+0x26>
 800d0e0:	88fb      	ldrh	r3, [r7, #6]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d101      	bne.n	800d0ea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	e074      	b.n	800d1d4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	2221      	movs	r2, #33	@ 0x21
 800d0f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d0fa:	f7f9 fb51 	bl	80067a0 <HAL_GetTick>
 800d0fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	88fa      	ldrh	r2, [r7, #6]
 800d104:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	88fa      	ldrh	r2, [r7, #6]
 800d10c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	689b      	ldr	r3, [r3, #8]
 800d114:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d118:	d108      	bne.n	800d12c <HAL_UART_Transmit+0x6c>
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	691b      	ldr	r3, [r3, #16]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d104      	bne.n	800d12c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d122:	2300      	movs	r3, #0
 800d124:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	61bb      	str	r3, [r7, #24]
 800d12a:	e003      	b.n	800d134 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d12c:	68bb      	ldr	r3, [r7, #8]
 800d12e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d130:	2300      	movs	r3, #0
 800d132:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d134:	e030      	b.n	800d198 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	9300      	str	r3, [sp, #0]
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	2200      	movs	r2, #0
 800d13e:	2180      	movs	r1, #128	@ 0x80
 800d140:	68f8      	ldr	r0, [r7, #12]
 800d142:	f001 fa43 	bl	800e5cc <UART_WaitOnFlagUntilTimeout>
 800d146:	4603      	mov	r3, r0
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d005      	beq.n	800d158 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	2220      	movs	r2, #32
 800d150:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800d154:	2303      	movs	r3, #3
 800d156:	e03d      	b.n	800d1d4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d158:	69fb      	ldr	r3, [r7, #28]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d10b      	bne.n	800d176 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d15e:	69bb      	ldr	r3, [r7, #24]
 800d160:	881b      	ldrh	r3, [r3, #0]
 800d162:	461a      	mov	r2, r3
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d16c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800d16e:	69bb      	ldr	r3, [r7, #24]
 800d170:	3302      	adds	r3, #2
 800d172:	61bb      	str	r3, [r7, #24]
 800d174:	e007      	b.n	800d186 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d176:	69fb      	ldr	r3, [r7, #28]
 800d178:	781a      	ldrb	r2, [r3, #0]
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800d180:	69fb      	ldr	r3, [r7, #28]
 800d182:	3301      	adds	r3, #1
 800d184:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d18c:	b29b      	uxth	r3, r3
 800d18e:	3b01      	subs	r3, #1
 800d190:	b29a      	uxth	r2, r3
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d19e:	b29b      	uxth	r3, r3
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d1c8      	bne.n	800d136 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	9300      	str	r3, [sp, #0]
 800d1a8:	697b      	ldr	r3, [r7, #20]
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	2140      	movs	r1, #64	@ 0x40
 800d1ae:	68f8      	ldr	r0, [r7, #12]
 800d1b0:	f001 fa0c 	bl	800e5cc <UART_WaitOnFlagUntilTimeout>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d005      	beq.n	800d1c6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	2220      	movs	r2, #32
 800d1be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800d1c2:	2303      	movs	r3, #3
 800d1c4:	e006      	b.n	800d1d4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	2220      	movs	r2, #32
 800d1ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	e000      	b.n	800d1d4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d1d2:	2302      	movs	r3, #2
  }
}
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	3720      	adds	r7, #32
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}

0800d1dc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b08a      	sub	sp, #40	@ 0x28
 800d1e0:	af02      	add	r7, sp, #8
 800d1e2:	60f8      	str	r0, [r7, #12]
 800d1e4:	60b9      	str	r1, [r7, #8]
 800d1e6:	603b      	str	r3, [r7, #0]
 800d1e8:	4613      	mov	r3, r2
 800d1ea:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d1f2:	2b20      	cmp	r3, #32
 800d1f4:	f040 80b5 	bne.w	800d362 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d002      	beq.n	800d204 <HAL_UART_Receive+0x28>
 800d1fe:	88fb      	ldrh	r3, [r7, #6]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d101      	bne.n	800d208 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800d204:	2301      	movs	r3, #1
 800d206:	e0ad      	b.n	800d364 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	2200      	movs	r2, #0
 800d20c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	2222      	movs	r2, #34	@ 0x22
 800d214:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	2200      	movs	r2, #0
 800d21c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d21e:	f7f9 fabf 	bl	80067a0 <HAL_GetTick>
 800d222:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	88fa      	ldrh	r2, [r7, #6]
 800d228:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	88fa      	ldrh	r2, [r7, #6]
 800d230:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	689b      	ldr	r3, [r3, #8]
 800d238:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d23c:	d10e      	bne.n	800d25c <HAL_UART_Receive+0x80>
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	691b      	ldr	r3, [r3, #16]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d105      	bne.n	800d252 <HAL_UART_Receive+0x76>
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800d24c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d250:	e02d      	b.n	800d2ae <HAL_UART_Receive+0xd2>
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	22ff      	movs	r2, #255	@ 0xff
 800d256:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d25a:	e028      	b.n	800d2ae <HAL_UART_Receive+0xd2>
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	689b      	ldr	r3, [r3, #8]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d10d      	bne.n	800d280 <HAL_UART_Receive+0xa4>
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	691b      	ldr	r3, [r3, #16]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d104      	bne.n	800d276 <HAL_UART_Receive+0x9a>
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	22ff      	movs	r2, #255	@ 0xff
 800d270:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d274:	e01b      	b.n	800d2ae <HAL_UART_Receive+0xd2>
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	227f      	movs	r2, #127	@ 0x7f
 800d27a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d27e:	e016      	b.n	800d2ae <HAL_UART_Receive+0xd2>
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	689b      	ldr	r3, [r3, #8]
 800d284:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d288:	d10d      	bne.n	800d2a6 <HAL_UART_Receive+0xca>
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	691b      	ldr	r3, [r3, #16]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d104      	bne.n	800d29c <HAL_UART_Receive+0xc0>
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	227f      	movs	r2, #127	@ 0x7f
 800d296:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d29a:	e008      	b.n	800d2ae <HAL_UART_Receive+0xd2>
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	223f      	movs	r2, #63	@ 0x3f
 800d2a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d2a4:	e003      	b.n	800d2ae <HAL_UART_Receive+0xd2>
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d2b4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	689b      	ldr	r3, [r3, #8]
 800d2ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d2be:	d108      	bne.n	800d2d2 <HAL_UART_Receive+0xf6>
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	691b      	ldr	r3, [r3, #16]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d104      	bne.n	800d2d2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	61bb      	str	r3, [r7, #24]
 800d2d0:	e003      	b.n	800d2da <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800d2da:	e036      	b.n	800d34a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	9300      	str	r3, [sp, #0]
 800d2e0:	697b      	ldr	r3, [r7, #20]
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	2120      	movs	r1, #32
 800d2e6:	68f8      	ldr	r0, [r7, #12]
 800d2e8:	f001 f970 	bl	800e5cc <UART_WaitOnFlagUntilTimeout>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d005      	beq.n	800d2fe <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	2220      	movs	r2, #32
 800d2f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800d2fa:	2303      	movs	r3, #3
 800d2fc:	e032      	b.n	800d364 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800d2fe:	69fb      	ldr	r3, [r7, #28]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d10c      	bne.n	800d31e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d30a:	b29a      	uxth	r2, r3
 800d30c:	8a7b      	ldrh	r3, [r7, #18]
 800d30e:	4013      	ands	r3, r2
 800d310:	b29a      	uxth	r2, r3
 800d312:	69bb      	ldr	r3, [r7, #24]
 800d314:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d316:	69bb      	ldr	r3, [r7, #24]
 800d318:	3302      	adds	r3, #2
 800d31a:	61bb      	str	r3, [r7, #24]
 800d31c:	e00c      	b.n	800d338 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d324:	b2da      	uxtb	r2, r3
 800d326:	8a7b      	ldrh	r3, [r7, #18]
 800d328:	b2db      	uxtb	r3, r3
 800d32a:	4013      	ands	r3, r2
 800d32c:	b2da      	uxtb	r2, r3
 800d32e:	69fb      	ldr	r3, [r7, #28]
 800d330:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800d332:	69fb      	ldr	r3, [r7, #28]
 800d334:	3301      	adds	r3, #1
 800d336:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d33e:	b29b      	uxth	r3, r3
 800d340:	3b01      	subs	r3, #1
 800d342:	b29a      	uxth	r2, r3
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d350:	b29b      	uxth	r3, r3
 800d352:	2b00      	cmp	r3, #0
 800d354:	d1c2      	bne.n	800d2dc <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	2220      	movs	r2, #32
 800d35a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800d35e:	2300      	movs	r3, #0
 800d360:	e000      	b.n	800d364 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800d362:	2302      	movs	r3, #2
  }
}
 800d364:	4618      	mov	r0, r3
 800d366:	3720      	adds	r7, #32
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}

0800d36c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d36c:	b480      	push	{r7}
 800d36e:	b091      	sub	sp, #68	@ 0x44
 800d370:	af00      	add	r7, sp, #0
 800d372:	60f8      	str	r0, [r7, #12]
 800d374:	60b9      	str	r1, [r7, #8]
 800d376:	4613      	mov	r3, r2
 800d378:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d380:	2b20      	cmp	r3, #32
 800d382:	d178      	bne.n	800d476 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d002      	beq.n	800d390 <HAL_UART_Transmit_IT+0x24>
 800d38a:	88fb      	ldrh	r3, [r7, #6]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d101      	bne.n	800d394 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800d390:	2301      	movs	r3, #1
 800d392:	e071      	b.n	800d478 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	68ba      	ldr	r2, [r7, #8]
 800d398:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	88fa      	ldrh	r2, [r7, #6]
 800d39e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	88fa      	ldrh	r2, [r7, #6]
 800d3a6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	2221      	movs	r2, #33	@ 0x21
 800d3bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d3c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d3c8:	d12a      	bne.n	800d420 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	689b      	ldr	r3, [r3, #8]
 800d3ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d3d2:	d107      	bne.n	800d3e4 <HAL_UART_Transmit_IT+0x78>
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	691b      	ldr	r3, [r3, #16]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d103      	bne.n	800d3e4 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	4a29      	ldr	r2, [pc, #164]	@ (800d484 <HAL_UART_Transmit_IT+0x118>)
 800d3e0:	679a      	str	r2, [r3, #120]	@ 0x78
 800d3e2:	e002      	b.n	800d3ea <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	4a28      	ldr	r2, [pc, #160]	@ (800d488 <HAL_UART_Transmit_IT+0x11c>)
 800d3e8:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	3308      	adds	r3, #8
 800d3f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3f4:	e853 3f00 	ldrex	r3, [r3]
 800d3f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d400:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	3308      	adds	r3, #8
 800d408:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d40a:	637a      	str	r2, [r7, #52]	@ 0x34
 800d40c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d40e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d410:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d412:	e841 2300 	strex	r3, r2, [r1]
 800d416:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d1e5      	bne.n	800d3ea <HAL_UART_Transmit_IT+0x7e>
 800d41e:	e028      	b.n	800d472 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	689b      	ldr	r3, [r3, #8]
 800d424:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d428:	d107      	bne.n	800d43a <HAL_UART_Transmit_IT+0xce>
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	691b      	ldr	r3, [r3, #16]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d103      	bne.n	800d43a <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	4a15      	ldr	r2, [pc, #84]	@ (800d48c <HAL_UART_Transmit_IT+0x120>)
 800d436:	679a      	str	r2, [r3, #120]	@ 0x78
 800d438:	e002      	b.n	800d440 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	4a14      	ldr	r2, [pc, #80]	@ (800d490 <HAL_UART_Transmit_IT+0x124>)
 800d43e:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d446:	697b      	ldr	r3, [r7, #20]
 800d448:	e853 3f00 	ldrex	r3, [r3]
 800d44c:	613b      	str	r3, [r7, #16]
   return(result);
 800d44e:	693b      	ldr	r3, [r7, #16]
 800d450:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d454:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	461a      	mov	r2, r3
 800d45c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d45e:	623b      	str	r3, [r7, #32]
 800d460:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d462:	69f9      	ldr	r1, [r7, #28]
 800d464:	6a3a      	ldr	r2, [r7, #32]
 800d466:	e841 2300 	strex	r3, r2, [r1]
 800d46a:	61bb      	str	r3, [r7, #24]
   return(result);
 800d46c:	69bb      	ldr	r3, [r7, #24]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d1e6      	bne.n	800d440 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800d472:	2300      	movs	r3, #0
 800d474:	e000      	b.n	800d478 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800d476:	2302      	movs	r3, #2
  }
}
 800d478:	4618      	mov	r0, r3
 800d47a:	3744      	adds	r7, #68	@ 0x44
 800d47c:	46bd      	mov	sp, r7
 800d47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d482:	4770      	bx	lr
 800d484:	0800f0ad 	.word	0x0800f0ad
 800d488:	0800efcd 	.word	0x0800efcd
 800d48c:	0800ef0b 	.word	0x0800ef0b
 800d490:	0800ee53 	.word	0x0800ee53

0800d494 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b08a      	sub	sp, #40	@ 0x28
 800d498:	af00      	add	r7, sp, #0
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	60b9      	str	r1, [r7, #8]
 800d49e:	4613      	mov	r3, r2
 800d4a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d4a8:	2b20      	cmp	r3, #32
 800d4aa:	d137      	bne.n	800d51c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800d4ac:	68bb      	ldr	r3, [r7, #8]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d002      	beq.n	800d4b8 <HAL_UART_Receive_IT+0x24>
 800d4b2:	88fb      	ldrh	r3, [r7, #6]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d101      	bne.n	800d4bc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	e030      	b.n	800d51e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	2200      	movs	r2, #0
 800d4c0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	4a18      	ldr	r2, [pc, #96]	@ (800d528 <HAL_UART_Receive_IT+0x94>)
 800d4c8:	4293      	cmp	r3, r2
 800d4ca:	d01f      	beq.n	800d50c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	685b      	ldr	r3, [r3, #4]
 800d4d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d018      	beq.n	800d50c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	e853 3f00 	ldrex	r3, [r3]
 800d4e6:	613b      	str	r3, [r7, #16]
   return(result);
 800d4e8:	693b      	ldr	r3, [r7, #16]
 800d4ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d4ee:	627b      	str	r3, [r7, #36]	@ 0x24
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	461a      	mov	r2, r3
 800d4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4f8:	623b      	str	r3, [r7, #32]
 800d4fa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4fc:	69f9      	ldr	r1, [r7, #28]
 800d4fe:	6a3a      	ldr	r2, [r7, #32]
 800d500:	e841 2300 	strex	r3, r2, [r1]
 800d504:	61bb      	str	r3, [r7, #24]
   return(result);
 800d506:	69bb      	ldr	r3, [r7, #24]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d1e6      	bne.n	800d4da <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d50c:	88fb      	ldrh	r3, [r7, #6]
 800d50e:	461a      	mov	r2, r3
 800d510:	68b9      	ldr	r1, [r7, #8]
 800d512:	68f8      	ldr	r0, [r7, #12]
 800d514:	f001 f8c8 	bl	800e6a8 <UART_Start_Receive_IT>
 800d518:	4603      	mov	r3, r0
 800d51a:	e000      	b.n	800d51e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d51c:	2302      	movs	r3, #2
  }
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3728      	adds	r7, #40	@ 0x28
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}
 800d526:	bf00      	nop
 800d528:	40008000 	.word	0x40008000

0800d52c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b08a      	sub	sp, #40	@ 0x28
 800d530:	af00      	add	r7, sp, #0
 800d532:	60f8      	str	r0, [r7, #12]
 800d534:	60b9      	str	r1, [r7, #8]
 800d536:	4613      	mov	r3, r2
 800d538:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d540:	2b20      	cmp	r3, #32
 800d542:	d167      	bne.n	800d614 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d002      	beq.n	800d550 <HAL_UART_Transmit_DMA+0x24>
 800d54a:	88fb      	ldrh	r3, [r7, #6]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d101      	bne.n	800d554 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800d550:	2301      	movs	r3, #1
 800d552:	e060      	b.n	800d616 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	68ba      	ldr	r2, [r7, #8]
 800d558:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	88fa      	ldrh	r2, [r7, #6]
 800d55e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	88fa      	ldrh	r2, [r7, #6]
 800d566:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	2200      	movs	r2, #0
 800d56e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	2221      	movs	r2, #33	@ 0x21
 800d576:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d028      	beq.n	800d5d4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d586:	4a26      	ldr	r2, [pc, #152]	@ (800d620 <HAL_UART_Transmit_DMA+0xf4>)
 800d588:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d58e:	4a25      	ldr	r2, [pc, #148]	@ (800d624 <HAL_UART_Transmit_DMA+0xf8>)
 800d590:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d596:	4a24      	ldr	r2, [pc, #144]	@ (800d628 <HAL_UART_Transmit_DMA+0xfc>)
 800d598:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d59e:	2200      	movs	r2, #0
 800d5a0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d5aa:	4619      	mov	r1, r3
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	3328      	adds	r3, #40	@ 0x28
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	88fb      	ldrh	r3, [r7, #6]
 800d5b6:	f7fb fca5 	bl	8008f04 <HAL_DMA_Start_IT>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d009      	beq.n	800d5d4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	2210      	movs	r2, #16
 800d5c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	2220      	movs	r2, #32
 800d5cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	e020      	b.n	800d616 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	2240      	movs	r2, #64	@ 0x40
 800d5da:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	3308      	adds	r3, #8
 800d5e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5e4:	697b      	ldr	r3, [r7, #20]
 800d5e6:	e853 3f00 	ldrex	r3, [r3]
 800d5ea:	613b      	str	r3, [r7, #16]
   return(result);
 800d5ec:	693b      	ldr	r3, [r7, #16]
 800d5ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d5f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	3308      	adds	r3, #8
 800d5fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d5fc:	623a      	str	r2, [r7, #32]
 800d5fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d600:	69f9      	ldr	r1, [r7, #28]
 800d602:	6a3a      	ldr	r2, [r7, #32]
 800d604:	e841 2300 	strex	r3, r2, [r1]
 800d608:	61bb      	str	r3, [r7, #24]
   return(result);
 800d60a:	69bb      	ldr	r3, [r7, #24]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d1e5      	bne.n	800d5dc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800d610:	2300      	movs	r3, #0
 800d612:	e000      	b.n	800d616 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800d614:	2302      	movs	r3, #2
  }
}
 800d616:	4618      	mov	r0, r3
 800d618:	3728      	adds	r7, #40	@ 0x28
 800d61a:	46bd      	mov	sp, r7
 800d61c:	bd80      	pop	{r7, pc}
 800d61e:	bf00      	nop
 800d620:	0800eb87 	.word	0x0800eb87
 800d624:	0800ec21 	.word	0x0800ec21
 800d628:	0800eda7 	.word	0x0800eda7

0800d62c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b08a      	sub	sp, #40	@ 0x28
 800d630:	af00      	add	r7, sp, #0
 800d632:	60f8      	str	r0, [r7, #12]
 800d634:	60b9      	str	r1, [r7, #8]
 800d636:	4613      	mov	r3, r2
 800d638:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d640:	2b20      	cmp	r3, #32
 800d642:	d137      	bne.n	800d6b4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d002      	beq.n	800d650 <HAL_UART_Receive_DMA+0x24>
 800d64a:	88fb      	ldrh	r3, [r7, #6]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d101      	bne.n	800d654 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800d650:	2301      	movs	r3, #1
 800d652:	e030      	b.n	800d6b6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	2200      	movs	r2, #0
 800d658:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	4a18      	ldr	r2, [pc, #96]	@ (800d6c0 <HAL_UART_Receive_DMA+0x94>)
 800d660:	4293      	cmp	r3, r2
 800d662:	d01f      	beq.n	800d6a4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	685b      	ldr	r3, [r3, #4]
 800d66a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d018      	beq.n	800d6a4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d678:	697b      	ldr	r3, [r7, #20]
 800d67a:	e853 3f00 	ldrex	r3, [r3]
 800d67e:	613b      	str	r3, [r7, #16]
   return(result);
 800d680:	693b      	ldr	r3, [r7, #16]
 800d682:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d686:	627b      	str	r3, [r7, #36]	@ 0x24
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	461a      	mov	r2, r3
 800d68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d690:	623b      	str	r3, [r7, #32]
 800d692:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d694:	69f9      	ldr	r1, [r7, #28]
 800d696:	6a3a      	ldr	r2, [r7, #32]
 800d698:	e841 2300 	strex	r3, r2, [r1]
 800d69c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d69e:	69bb      	ldr	r3, [r7, #24]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d1e6      	bne.n	800d672 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d6a4:	88fb      	ldrh	r3, [r7, #6]
 800d6a6:	461a      	mov	r2, r3
 800d6a8:	68b9      	ldr	r1, [r7, #8]
 800d6aa:	68f8      	ldr	r0, [r7, #12]
 800d6ac:	f001 f91e 	bl	800e8ec <UART_Start_Receive_DMA>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	e000      	b.n	800d6b6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d6b4:	2302      	movs	r3, #2
  }
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	3728      	adds	r7, #40	@ 0x28
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}
 800d6be:	bf00      	nop
 800d6c0:	40008000 	.word	0x40008000

0800d6c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b0ba      	sub	sp, #232	@ 0xe8
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	69db      	ldr	r3, [r3, #28]
 800d6d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	689b      	ldr	r3, [r3, #8]
 800d6e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d6ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800d6ee:	f640 030f 	movw	r3, #2063	@ 0x80f
 800d6f2:	4013      	ands	r3, r2
 800d6f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800d6f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d11b      	bne.n	800d738 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d704:	f003 0320 	and.w	r3, r3, #32
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d015      	beq.n	800d738 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d70c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d710:	f003 0320 	and.w	r3, r3, #32
 800d714:	2b00      	cmp	r3, #0
 800d716:	d105      	bne.n	800d724 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d718:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d71c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d720:	2b00      	cmp	r3, #0
 800d722:	d009      	beq.n	800d738 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d728:	2b00      	cmp	r3, #0
 800d72a:	f000 8300 	beq.w	800dd2e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	4798      	blx	r3
      }
      return;
 800d736:	e2fa      	b.n	800dd2e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d738:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	f000 8123 	beq.w	800d988 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d742:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d746:	4b8d      	ldr	r3, [pc, #564]	@ (800d97c <HAL_UART_IRQHandler+0x2b8>)
 800d748:	4013      	ands	r3, r2
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d106      	bne.n	800d75c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d74e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800d752:	4b8b      	ldr	r3, [pc, #556]	@ (800d980 <HAL_UART_IRQHandler+0x2bc>)
 800d754:	4013      	ands	r3, r2
 800d756:	2b00      	cmp	r3, #0
 800d758:	f000 8116 	beq.w	800d988 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d75c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d760:	f003 0301 	and.w	r3, r3, #1
 800d764:	2b00      	cmp	r3, #0
 800d766:	d011      	beq.n	800d78c <HAL_UART_IRQHandler+0xc8>
 800d768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d76c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d770:	2b00      	cmp	r3, #0
 800d772:	d00b      	beq.n	800d78c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	2201      	movs	r2, #1
 800d77a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d782:	f043 0201 	orr.w	r2, r3, #1
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d78c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d790:	f003 0302 	and.w	r3, r3, #2
 800d794:	2b00      	cmp	r3, #0
 800d796:	d011      	beq.n	800d7bc <HAL_UART_IRQHandler+0xf8>
 800d798:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d79c:	f003 0301 	and.w	r3, r3, #1
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d00b      	beq.n	800d7bc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	2202      	movs	r2, #2
 800d7aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d7b2:	f043 0204 	orr.w	r2, r3, #4
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d7bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d7c0:	f003 0304 	and.w	r3, r3, #4
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d011      	beq.n	800d7ec <HAL_UART_IRQHandler+0x128>
 800d7c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d7cc:	f003 0301 	and.w	r3, r3, #1
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d00b      	beq.n	800d7ec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	2204      	movs	r2, #4
 800d7da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d7e2:	f043 0202 	orr.w	r2, r3, #2
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d7ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d7f0:	f003 0308 	and.w	r3, r3, #8
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d017      	beq.n	800d828 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d7f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d7fc:	f003 0320 	and.w	r3, r3, #32
 800d800:	2b00      	cmp	r3, #0
 800d802:	d105      	bne.n	800d810 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d804:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d808:	4b5c      	ldr	r3, [pc, #368]	@ (800d97c <HAL_UART_IRQHandler+0x2b8>)
 800d80a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d00b      	beq.n	800d828 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	2208      	movs	r2, #8
 800d816:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d81e:	f043 0208 	orr.w	r2, r3, #8
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d82c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d830:	2b00      	cmp	r3, #0
 800d832:	d012      	beq.n	800d85a <HAL_UART_IRQHandler+0x196>
 800d834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d838:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d00c      	beq.n	800d85a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d848:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d850:	f043 0220 	orr.w	r2, r3, #32
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d860:	2b00      	cmp	r3, #0
 800d862:	f000 8266 	beq.w	800dd32 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d86a:	f003 0320 	and.w	r3, r3, #32
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d013      	beq.n	800d89a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d876:	f003 0320 	and.w	r3, r3, #32
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d105      	bne.n	800d88a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d87e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d886:	2b00      	cmp	r3, #0
 800d888:	d007      	beq.n	800d89a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d003      	beq.n	800d89a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d8a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	689b      	ldr	r3, [r3, #8]
 800d8aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d8ae:	2b40      	cmp	r3, #64	@ 0x40
 800d8b0:	d005      	beq.n	800d8be <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d8b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d8b6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d054      	beq.n	800d968 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d8be:	6878      	ldr	r0, [r7, #4]
 800d8c0:	f001 f8fb 	bl	800eaba <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	689b      	ldr	r3, [r3, #8]
 800d8ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d8ce:	2b40      	cmp	r3, #64	@ 0x40
 800d8d0:	d146      	bne.n	800d960 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	3308      	adds	r3, #8
 800d8d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d8e0:	e853 3f00 	ldrex	r3, [r3]
 800d8e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d8e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d8ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d8f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	3308      	adds	r3, #8
 800d8fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d8fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d902:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d906:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d90a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d90e:	e841 2300 	strex	r3, r2, [r1]
 800d912:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d916:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d1d9      	bne.n	800d8d2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d924:	2b00      	cmp	r3, #0
 800d926:	d017      	beq.n	800d958 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d92e:	4a15      	ldr	r2, [pc, #84]	@ (800d984 <HAL_UART_IRQHandler+0x2c0>)
 800d930:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d938:	4618      	mov	r0, r3
 800d93a:	f7fb fbb7 	bl	80090ac <HAL_DMA_Abort_IT>
 800d93e:	4603      	mov	r3, r0
 800d940:	2b00      	cmp	r3, #0
 800d942:	d019      	beq.n	800d978 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d94a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d94c:	687a      	ldr	r2, [r7, #4]
 800d94e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800d952:	4610      	mov	r0, r2
 800d954:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d956:	e00f      	b.n	800d978 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f000 fa09 	bl	800dd70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d95e:	e00b      	b.n	800d978 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	f000 fa05 	bl	800dd70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d966:	e007      	b.n	800d978 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f000 fa01 	bl	800dd70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2200      	movs	r2, #0
 800d972:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800d976:	e1dc      	b.n	800dd32 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d978:	bf00      	nop
    return;
 800d97a:	e1da      	b.n	800dd32 <HAL_UART_IRQHandler+0x66e>
 800d97c:	10000001 	.word	0x10000001
 800d980:	04000120 	.word	0x04000120
 800d984:	0800ee27 	.word	0x0800ee27

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d98c:	2b01      	cmp	r3, #1
 800d98e:	f040 8170 	bne.w	800dc72 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d996:	f003 0310 	and.w	r3, r3, #16
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	f000 8169 	beq.w	800dc72 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d9a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d9a4:	f003 0310 	and.w	r3, r3, #16
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	f000 8162 	beq.w	800dc72 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	2210      	movs	r2, #16
 800d9b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	689b      	ldr	r3, [r3, #8]
 800d9bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9c0:	2b40      	cmp	r3, #64	@ 0x40
 800d9c2:	f040 80d8 	bne.w	800db76 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	685b      	ldr	r3, [r3, #4]
 800d9d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d9d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	f000 80af 	beq.w	800db3c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d9e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d9e8:	429a      	cmp	r2, r3
 800d9ea:	f080 80a7 	bcs.w	800db3c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d9f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	f003 0320 	and.w	r3, r3, #32
 800da06:	2b00      	cmp	r3, #0
 800da08:	f040 8087 	bne.w	800db1a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800da18:	e853 3f00 	ldrex	r3, [r3]
 800da1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800da20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800da24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800da28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	461a      	mov	r2, r3
 800da32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800da36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800da3a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800da42:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800da46:	e841 2300 	strex	r3, r2, [r1]
 800da4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800da4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800da52:	2b00      	cmp	r3, #0
 800da54:	d1da      	bne.n	800da0c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	3308      	adds	r3, #8
 800da5c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800da60:	e853 3f00 	ldrex	r3, [r3]
 800da64:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800da66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800da68:	f023 0301 	bic.w	r3, r3, #1
 800da6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	3308      	adds	r3, #8
 800da76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800da7a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800da7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da80:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800da82:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800da86:	e841 2300 	strex	r3, r2, [r1]
 800da8a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800da8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d1e1      	bne.n	800da56 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	3308      	adds	r3, #8
 800da98:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800da9c:	e853 3f00 	ldrex	r3, [r3]
 800daa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800daa2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800daa4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800daa8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	3308      	adds	r3, #8
 800dab2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800dab6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800dab8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800dabc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800dabe:	e841 2300 	strex	r3, r2, [r1]
 800dac2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800dac4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d1e3      	bne.n	800da92 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2220      	movs	r2, #32
 800dace:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2200      	movs	r2, #0
 800dad6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dade:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dae0:	e853 3f00 	ldrex	r3, [r3]
 800dae4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800dae6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dae8:	f023 0310 	bic.w	r3, r3, #16
 800daec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	461a      	mov	r2, r3
 800daf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dafa:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dafc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dafe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800db00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800db02:	e841 2300 	strex	r3, r2, [r1]
 800db06:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800db08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d1e4      	bne.n	800dad8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800db14:	4618      	mov	r0, r3
 800db16:	f7fb fa70 	bl	8008ffa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2202      	movs	r2, #2
 800db1e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800db2c:	b29b      	uxth	r3, r3
 800db2e:	1ad3      	subs	r3, r2, r3
 800db30:	b29b      	uxth	r3, r3
 800db32:	4619      	mov	r1, r3
 800db34:	6878      	ldr	r0, [r7, #4]
 800db36:	f000 f925 	bl	800dd84 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800db3a:	e0fc      	b.n	800dd36 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800db42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800db46:	429a      	cmp	r2, r3
 800db48:	f040 80f5 	bne.w	800dd36 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	f003 0320 	and.w	r3, r3, #32
 800db5a:	2b20      	cmp	r3, #32
 800db5c:	f040 80eb 	bne.w	800dd36 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2202      	movs	r2, #2
 800db64:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800db6c:	4619      	mov	r1, r3
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f000 f908 	bl	800dd84 <HAL_UARTEx_RxEventCallback>
      return;
 800db74:	e0df      	b.n	800dd36 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800db82:	b29b      	uxth	r3, r3
 800db84:	1ad3      	subs	r3, r2, r3
 800db86:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800db90:	b29b      	uxth	r3, r3
 800db92:	2b00      	cmp	r3, #0
 800db94:	f000 80d1 	beq.w	800dd3a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800db98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	f000 80cc 	beq.w	800dd3a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbaa:	e853 3f00 	ldrex	r3, [r3]
 800dbae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800dbb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbb2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dbb6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	461a      	mov	r2, r3
 800dbc0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dbc4:	647b      	str	r3, [r7, #68]	@ 0x44
 800dbc6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbc8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dbca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dbcc:	e841 2300 	strex	r3, r2, [r1]
 800dbd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dbd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d1e4      	bne.n	800dba2 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	3308      	adds	r3, #8
 800dbde:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbe2:	e853 3f00 	ldrex	r3, [r3]
 800dbe6:	623b      	str	r3, [r7, #32]
   return(result);
 800dbe8:	6a3b      	ldr	r3, [r7, #32]
 800dbea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dbee:	f023 0301 	bic.w	r3, r3, #1
 800dbf2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	3308      	adds	r3, #8
 800dbfc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800dc00:	633a      	str	r2, [r7, #48]	@ 0x30
 800dc02:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dc06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc08:	e841 2300 	strex	r3, r2, [r1]
 800dc0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dc0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d1e1      	bne.n	800dbd8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2220      	movs	r2, #32
 800dc18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	2200      	movs	r2, #0
 800dc20:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	2200      	movs	r2, #0
 800dc26:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc2e:	693b      	ldr	r3, [r7, #16]
 800dc30:	e853 3f00 	ldrex	r3, [r3]
 800dc34:	60fb      	str	r3, [r7, #12]
   return(result);
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	f023 0310 	bic.w	r3, r3, #16
 800dc3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	461a      	mov	r2, r3
 800dc46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800dc4a:	61fb      	str	r3, [r7, #28]
 800dc4c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc4e:	69b9      	ldr	r1, [r7, #24]
 800dc50:	69fa      	ldr	r2, [r7, #28]
 800dc52:	e841 2300 	strex	r3, r2, [r1]
 800dc56:	617b      	str	r3, [r7, #20]
   return(result);
 800dc58:	697b      	ldr	r3, [r7, #20]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d1e4      	bne.n	800dc28 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	2202      	movs	r2, #2
 800dc62:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dc64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800dc68:	4619      	mov	r1, r3
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f000 f88a 	bl	800dd84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dc70:	e063      	b.n	800dd3a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800dc72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dc76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d00e      	beq.n	800dc9c <HAL_UART_IRQHandler+0x5d8>
 800dc7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dc82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d008      	beq.n	800dc9c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800dc92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	f001 ffc9 	bl	800fc2c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dc9a:	e051      	b.n	800dd40 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800dc9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dca0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d014      	beq.n	800dcd2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800dca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dcac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d105      	bne.n	800dcc0 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800dcb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dcb8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d008      	beq.n	800dcd2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d03a      	beq.n	800dd3e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	4798      	blx	r3
    }
    return;
 800dcd0:	e035      	b.n	800dd3e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800dcd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dcd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d009      	beq.n	800dcf2 <HAL_UART_IRQHandler+0x62e>
 800dcde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d003      	beq.n	800dcf2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f001 fa53 	bl	800f196 <UART_EndTransmit_IT>
    return;
 800dcf0:	e026      	b.n	800dd40 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800dcf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dcf6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d009      	beq.n	800dd12 <HAL_UART_IRQHandler+0x64e>
 800dcfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dd02:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d003      	beq.n	800dd12 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f001 ffa2 	bl	800fc54 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dd10:	e016      	b.n	800dd40 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800dd12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dd16:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d010      	beq.n	800dd40 <HAL_UART_IRQHandler+0x67c>
 800dd1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	da0c      	bge.n	800dd40 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f001 ff8a 	bl	800fc40 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dd2c:	e008      	b.n	800dd40 <HAL_UART_IRQHandler+0x67c>
      return;
 800dd2e:	bf00      	nop
 800dd30:	e006      	b.n	800dd40 <HAL_UART_IRQHandler+0x67c>
    return;
 800dd32:	bf00      	nop
 800dd34:	e004      	b.n	800dd40 <HAL_UART_IRQHandler+0x67c>
      return;
 800dd36:	bf00      	nop
 800dd38:	e002      	b.n	800dd40 <HAL_UART_IRQHandler+0x67c>
      return;
 800dd3a:	bf00      	nop
 800dd3c:	e000      	b.n	800dd40 <HAL_UART_IRQHandler+0x67c>
    return;
 800dd3e:	bf00      	nop
  }
}
 800dd40:	37e8      	adds	r7, #232	@ 0xe8
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}
 800dd46:	bf00      	nop

0800dd48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800dd48:	b480      	push	{r7}
 800dd4a:	b083      	sub	sp, #12
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800dd50:	bf00      	nop
 800dd52:	370c      	adds	r7, #12
 800dd54:	46bd      	mov	sp, r7
 800dd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5a:	4770      	bx	lr

0800dd5c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800dd5c:	b480      	push	{r7}
 800dd5e:	b083      	sub	sp, #12
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800dd64:	bf00      	nop
 800dd66:	370c      	adds	r7, #12
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6e:	4770      	bx	lr

0800dd70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dd70:	b480      	push	{r7}
 800dd72:	b083      	sub	sp, #12
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800dd78:	bf00      	nop
 800dd7a:	370c      	adds	r7, #12
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd82:	4770      	bx	lr

0800dd84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800dd84:	b480      	push	{r7}
 800dd86:	b083      	sub	sp, #12
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
 800dd8c:	460b      	mov	r3, r1
 800dd8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800dd90:	bf00      	nop
 800dd92:	370c      	adds	r7, #12
 800dd94:	46bd      	mov	sp, r7
 800dd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9a:	4770      	bx	lr

0800dd9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dd9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dda0:	b08c      	sub	sp, #48	@ 0x30
 800dda2:	af00      	add	r7, sp, #0
 800dda4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dda6:	2300      	movs	r3, #0
 800dda8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ddac:	697b      	ldr	r3, [r7, #20]
 800ddae:	689a      	ldr	r2, [r3, #8]
 800ddb0:	697b      	ldr	r3, [r7, #20]
 800ddb2:	691b      	ldr	r3, [r3, #16]
 800ddb4:	431a      	orrs	r2, r3
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	695b      	ldr	r3, [r3, #20]
 800ddba:	431a      	orrs	r2, r3
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	69db      	ldr	r3, [r3, #28]
 800ddc0:	4313      	orrs	r3, r2
 800ddc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ddc4:	697b      	ldr	r3, [r7, #20]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	681a      	ldr	r2, [r3, #0]
 800ddca:	4bab      	ldr	r3, [pc, #684]	@ (800e078 <UART_SetConfig+0x2dc>)
 800ddcc:	4013      	ands	r3, r2
 800ddce:	697a      	ldr	r2, [r7, #20]
 800ddd0:	6812      	ldr	r2, [r2, #0]
 800ddd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ddd4:	430b      	orrs	r3, r1
 800ddd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ddd8:	697b      	ldr	r3, [r7, #20]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	685b      	ldr	r3, [r3, #4]
 800ddde:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	68da      	ldr	r2, [r3, #12]
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	430a      	orrs	r2, r1
 800ddec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ddee:	697b      	ldr	r3, [r7, #20]
 800ddf0:	699b      	ldr	r3, [r3, #24]
 800ddf2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	4aa0      	ldr	r2, [pc, #640]	@ (800e07c <UART_SetConfig+0x2e0>)
 800ddfa:	4293      	cmp	r3, r2
 800ddfc:	d004      	beq.n	800de08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ddfe:	697b      	ldr	r3, [r7, #20]
 800de00:	6a1b      	ldr	r3, [r3, #32]
 800de02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800de04:	4313      	orrs	r3, r2
 800de06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800de08:	697b      	ldr	r3, [r7, #20]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	689b      	ldr	r3, [r3, #8]
 800de0e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800de12:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800de16:	697a      	ldr	r2, [r7, #20]
 800de18:	6812      	ldr	r2, [r2, #0]
 800de1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800de1c:	430b      	orrs	r3, r1
 800de1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800de20:	697b      	ldr	r3, [r7, #20]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de26:	f023 010f 	bic.w	r1, r3, #15
 800de2a:	697b      	ldr	r3, [r7, #20]
 800de2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800de2e:	697b      	ldr	r3, [r7, #20]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	430a      	orrs	r2, r1
 800de34:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	4a91      	ldr	r2, [pc, #580]	@ (800e080 <UART_SetConfig+0x2e4>)
 800de3c:	4293      	cmp	r3, r2
 800de3e:	d125      	bne.n	800de8c <UART_SetConfig+0xf0>
 800de40:	4b90      	ldr	r3, [pc, #576]	@ (800e084 <UART_SetConfig+0x2e8>)
 800de42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800de46:	f003 0303 	and.w	r3, r3, #3
 800de4a:	2b03      	cmp	r3, #3
 800de4c:	d81a      	bhi.n	800de84 <UART_SetConfig+0xe8>
 800de4e:	a201      	add	r2, pc, #4	@ (adr r2, 800de54 <UART_SetConfig+0xb8>)
 800de50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de54:	0800de65 	.word	0x0800de65
 800de58:	0800de75 	.word	0x0800de75
 800de5c:	0800de6d 	.word	0x0800de6d
 800de60:	0800de7d 	.word	0x0800de7d
 800de64:	2301      	movs	r3, #1
 800de66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800de6a:	e0d6      	b.n	800e01a <UART_SetConfig+0x27e>
 800de6c:	2302      	movs	r3, #2
 800de6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800de72:	e0d2      	b.n	800e01a <UART_SetConfig+0x27e>
 800de74:	2304      	movs	r3, #4
 800de76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800de7a:	e0ce      	b.n	800e01a <UART_SetConfig+0x27e>
 800de7c:	2308      	movs	r3, #8
 800de7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800de82:	e0ca      	b.n	800e01a <UART_SetConfig+0x27e>
 800de84:	2310      	movs	r3, #16
 800de86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800de8a:	e0c6      	b.n	800e01a <UART_SetConfig+0x27e>
 800de8c:	697b      	ldr	r3, [r7, #20]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	4a7d      	ldr	r2, [pc, #500]	@ (800e088 <UART_SetConfig+0x2ec>)
 800de92:	4293      	cmp	r3, r2
 800de94:	d138      	bne.n	800df08 <UART_SetConfig+0x16c>
 800de96:	4b7b      	ldr	r3, [pc, #492]	@ (800e084 <UART_SetConfig+0x2e8>)
 800de98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800de9c:	f003 030c 	and.w	r3, r3, #12
 800dea0:	2b0c      	cmp	r3, #12
 800dea2:	d82d      	bhi.n	800df00 <UART_SetConfig+0x164>
 800dea4:	a201      	add	r2, pc, #4	@ (adr r2, 800deac <UART_SetConfig+0x110>)
 800dea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deaa:	bf00      	nop
 800deac:	0800dee1 	.word	0x0800dee1
 800deb0:	0800df01 	.word	0x0800df01
 800deb4:	0800df01 	.word	0x0800df01
 800deb8:	0800df01 	.word	0x0800df01
 800debc:	0800def1 	.word	0x0800def1
 800dec0:	0800df01 	.word	0x0800df01
 800dec4:	0800df01 	.word	0x0800df01
 800dec8:	0800df01 	.word	0x0800df01
 800decc:	0800dee9 	.word	0x0800dee9
 800ded0:	0800df01 	.word	0x0800df01
 800ded4:	0800df01 	.word	0x0800df01
 800ded8:	0800df01 	.word	0x0800df01
 800dedc:	0800def9 	.word	0x0800def9
 800dee0:	2300      	movs	r3, #0
 800dee2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dee6:	e098      	b.n	800e01a <UART_SetConfig+0x27e>
 800dee8:	2302      	movs	r3, #2
 800deea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800deee:	e094      	b.n	800e01a <UART_SetConfig+0x27e>
 800def0:	2304      	movs	r3, #4
 800def2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800def6:	e090      	b.n	800e01a <UART_SetConfig+0x27e>
 800def8:	2308      	movs	r3, #8
 800defa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800defe:	e08c      	b.n	800e01a <UART_SetConfig+0x27e>
 800df00:	2310      	movs	r3, #16
 800df02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800df06:	e088      	b.n	800e01a <UART_SetConfig+0x27e>
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	4a5f      	ldr	r2, [pc, #380]	@ (800e08c <UART_SetConfig+0x2f0>)
 800df0e:	4293      	cmp	r3, r2
 800df10:	d125      	bne.n	800df5e <UART_SetConfig+0x1c2>
 800df12:	4b5c      	ldr	r3, [pc, #368]	@ (800e084 <UART_SetConfig+0x2e8>)
 800df14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800df18:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800df1c:	2b30      	cmp	r3, #48	@ 0x30
 800df1e:	d016      	beq.n	800df4e <UART_SetConfig+0x1b2>
 800df20:	2b30      	cmp	r3, #48	@ 0x30
 800df22:	d818      	bhi.n	800df56 <UART_SetConfig+0x1ba>
 800df24:	2b20      	cmp	r3, #32
 800df26:	d00a      	beq.n	800df3e <UART_SetConfig+0x1a2>
 800df28:	2b20      	cmp	r3, #32
 800df2a:	d814      	bhi.n	800df56 <UART_SetConfig+0x1ba>
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d002      	beq.n	800df36 <UART_SetConfig+0x19a>
 800df30:	2b10      	cmp	r3, #16
 800df32:	d008      	beq.n	800df46 <UART_SetConfig+0x1aa>
 800df34:	e00f      	b.n	800df56 <UART_SetConfig+0x1ba>
 800df36:	2300      	movs	r3, #0
 800df38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800df3c:	e06d      	b.n	800e01a <UART_SetConfig+0x27e>
 800df3e:	2302      	movs	r3, #2
 800df40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800df44:	e069      	b.n	800e01a <UART_SetConfig+0x27e>
 800df46:	2304      	movs	r3, #4
 800df48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800df4c:	e065      	b.n	800e01a <UART_SetConfig+0x27e>
 800df4e:	2308      	movs	r3, #8
 800df50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800df54:	e061      	b.n	800e01a <UART_SetConfig+0x27e>
 800df56:	2310      	movs	r3, #16
 800df58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800df5c:	e05d      	b.n	800e01a <UART_SetConfig+0x27e>
 800df5e:	697b      	ldr	r3, [r7, #20]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	4a4b      	ldr	r2, [pc, #300]	@ (800e090 <UART_SetConfig+0x2f4>)
 800df64:	4293      	cmp	r3, r2
 800df66:	d125      	bne.n	800dfb4 <UART_SetConfig+0x218>
 800df68:	4b46      	ldr	r3, [pc, #280]	@ (800e084 <UART_SetConfig+0x2e8>)
 800df6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800df6e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800df72:	2bc0      	cmp	r3, #192	@ 0xc0
 800df74:	d016      	beq.n	800dfa4 <UART_SetConfig+0x208>
 800df76:	2bc0      	cmp	r3, #192	@ 0xc0
 800df78:	d818      	bhi.n	800dfac <UART_SetConfig+0x210>
 800df7a:	2b80      	cmp	r3, #128	@ 0x80
 800df7c:	d00a      	beq.n	800df94 <UART_SetConfig+0x1f8>
 800df7e:	2b80      	cmp	r3, #128	@ 0x80
 800df80:	d814      	bhi.n	800dfac <UART_SetConfig+0x210>
 800df82:	2b00      	cmp	r3, #0
 800df84:	d002      	beq.n	800df8c <UART_SetConfig+0x1f0>
 800df86:	2b40      	cmp	r3, #64	@ 0x40
 800df88:	d008      	beq.n	800df9c <UART_SetConfig+0x200>
 800df8a:	e00f      	b.n	800dfac <UART_SetConfig+0x210>
 800df8c:	2300      	movs	r3, #0
 800df8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800df92:	e042      	b.n	800e01a <UART_SetConfig+0x27e>
 800df94:	2302      	movs	r3, #2
 800df96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800df9a:	e03e      	b.n	800e01a <UART_SetConfig+0x27e>
 800df9c:	2304      	movs	r3, #4
 800df9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dfa2:	e03a      	b.n	800e01a <UART_SetConfig+0x27e>
 800dfa4:	2308      	movs	r3, #8
 800dfa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dfaa:	e036      	b.n	800e01a <UART_SetConfig+0x27e>
 800dfac:	2310      	movs	r3, #16
 800dfae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dfb2:	e032      	b.n	800e01a <UART_SetConfig+0x27e>
 800dfb4:	697b      	ldr	r3, [r7, #20]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	4a30      	ldr	r2, [pc, #192]	@ (800e07c <UART_SetConfig+0x2e0>)
 800dfba:	4293      	cmp	r3, r2
 800dfbc:	d12a      	bne.n	800e014 <UART_SetConfig+0x278>
 800dfbe:	4b31      	ldr	r3, [pc, #196]	@ (800e084 <UART_SetConfig+0x2e8>)
 800dfc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dfc4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800dfc8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800dfcc:	d01a      	beq.n	800e004 <UART_SetConfig+0x268>
 800dfce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800dfd2:	d81b      	bhi.n	800e00c <UART_SetConfig+0x270>
 800dfd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dfd8:	d00c      	beq.n	800dff4 <UART_SetConfig+0x258>
 800dfda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dfde:	d815      	bhi.n	800e00c <UART_SetConfig+0x270>
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d003      	beq.n	800dfec <UART_SetConfig+0x250>
 800dfe4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dfe8:	d008      	beq.n	800dffc <UART_SetConfig+0x260>
 800dfea:	e00f      	b.n	800e00c <UART_SetConfig+0x270>
 800dfec:	2300      	movs	r3, #0
 800dfee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dff2:	e012      	b.n	800e01a <UART_SetConfig+0x27e>
 800dff4:	2302      	movs	r3, #2
 800dff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dffa:	e00e      	b.n	800e01a <UART_SetConfig+0x27e>
 800dffc:	2304      	movs	r3, #4
 800dffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e002:	e00a      	b.n	800e01a <UART_SetConfig+0x27e>
 800e004:	2308      	movs	r3, #8
 800e006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e00a:	e006      	b.n	800e01a <UART_SetConfig+0x27e>
 800e00c:	2310      	movs	r3, #16
 800e00e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e012:	e002      	b.n	800e01a <UART_SetConfig+0x27e>
 800e014:	2310      	movs	r3, #16
 800e016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e01a:	697b      	ldr	r3, [r7, #20]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	4a17      	ldr	r2, [pc, #92]	@ (800e07c <UART_SetConfig+0x2e0>)
 800e020:	4293      	cmp	r3, r2
 800e022:	f040 80a8 	bne.w	800e176 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e026:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e02a:	2b08      	cmp	r3, #8
 800e02c:	d834      	bhi.n	800e098 <UART_SetConfig+0x2fc>
 800e02e:	a201      	add	r2, pc, #4	@ (adr r2, 800e034 <UART_SetConfig+0x298>)
 800e030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e034:	0800e059 	.word	0x0800e059
 800e038:	0800e099 	.word	0x0800e099
 800e03c:	0800e061 	.word	0x0800e061
 800e040:	0800e099 	.word	0x0800e099
 800e044:	0800e067 	.word	0x0800e067
 800e048:	0800e099 	.word	0x0800e099
 800e04c:	0800e099 	.word	0x0800e099
 800e050:	0800e099 	.word	0x0800e099
 800e054:	0800e06f 	.word	0x0800e06f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e058:	f7fc ff14 	bl	800ae84 <HAL_RCC_GetPCLK1Freq>
 800e05c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800e05e:	e021      	b.n	800e0a4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e060:	4b0c      	ldr	r3, [pc, #48]	@ (800e094 <UART_SetConfig+0x2f8>)
 800e062:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800e064:	e01e      	b.n	800e0a4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e066:	f7fc fe9f 	bl	800ada8 <HAL_RCC_GetSysClockFreq>
 800e06a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800e06c:	e01a      	b.n	800e0a4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e06e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e072:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800e074:	e016      	b.n	800e0a4 <UART_SetConfig+0x308>
 800e076:	bf00      	nop
 800e078:	cfff69f3 	.word	0xcfff69f3
 800e07c:	40008000 	.word	0x40008000
 800e080:	40013800 	.word	0x40013800
 800e084:	40021000 	.word	0x40021000
 800e088:	40004400 	.word	0x40004400
 800e08c:	40004800 	.word	0x40004800
 800e090:	40004c00 	.word	0x40004c00
 800e094:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800e098:	2300      	movs	r3, #0
 800e09a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800e09c:	2301      	movs	r3, #1
 800e09e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800e0a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e0a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	f000 812a 	beq.w	800e300 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e0ac:	697b      	ldr	r3, [r7, #20]
 800e0ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0b0:	4a9e      	ldr	r2, [pc, #632]	@ (800e32c <UART_SetConfig+0x590>)
 800e0b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e0b6:	461a      	mov	r2, r3
 800e0b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800e0be:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e0c0:	697b      	ldr	r3, [r7, #20]
 800e0c2:	685a      	ldr	r2, [r3, #4]
 800e0c4:	4613      	mov	r3, r2
 800e0c6:	005b      	lsls	r3, r3, #1
 800e0c8:	4413      	add	r3, r2
 800e0ca:	69ba      	ldr	r2, [r7, #24]
 800e0cc:	429a      	cmp	r2, r3
 800e0ce:	d305      	bcc.n	800e0dc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e0d0:	697b      	ldr	r3, [r7, #20]
 800e0d2:	685b      	ldr	r3, [r3, #4]
 800e0d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e0d6:	69ba      	ldr	r2, [r7, #24]
 800e0d8:	429a      	cmp	r2, r3
 800e0da:	d903      	bls.n	800e0e4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800e0dc:	2301      	movs	r3, #1
 800e0de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800e0e2:	e10d      	b.n	800e300 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e0e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	60bb      	str	r3, [r7, #8]
 800e0ea:	60fa      	str	r2, [r7, #12]
 800e0ec:	697b      	ldr	r3, [r7, #20]
 800e0ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0f0:	4a8e      	ldr	r2, [pc, #568]	@ (800e32c <UART_SetConfig+0x590>)
 800e0f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e0f6:	b29b      	uxth	r3, r3
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	603b      	str	r3, [r7, #0]
 800e0fc:	607a      	str	r2, [r7, #4]
 800e0fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e102:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e106:	f7f4 fff1 	bl	80030ec <__aeabi_uldivmod>
 800e10a:	4602      	mov	r2, r0
 800e10c:	460b      	mov	r3, r1
 800e10e:	4610      	mov	r0, r2
 800e110:	4619      	mov	r1, r3
 800e112:	f04f 0200 	mov.w	r2, #0
 800e116:	f04f 0300 	mov.w	r3, #0
 800e11a:	020b      	lsls	r3, r1, #8
 800e11c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e120:	0202      	lsls	r2, r0, #8
 800e122:	6979      	ldr	r1, [r7, #20]
 800e124:	6849      	ldr	r1, [r1, #4]
 800e126:	0849      	lsrs	r1, r1, #1
 800e128:	2000      	movs	r0, #0
 800e12a:	460c      	mov	r4, r1
 800e12c:	4605      	mov	r5, r0
 800e12e:	eb12 0804 	adds.w	r8, r2, r4
 800e132:	eb43 0905 	adc.w	r9, r3, r5
 800e136:	697b      	ldr	r3, [r7, #20]
 800e138:	685b      	ldr	r3, [r3, #4]
 800e13a:	2200      	movs	r2, #0
 800e13c:	469a      	mov	sl, r3
 800e13e:	4693      	mov	fp, r2
 800e140:	4652      	mov	r2, sl
 800e142:	465b      	mov	r3, fp
 800e144:	4640      	mov	r0, r8
 800e146:	4649      	mov	r1, r9
 800e148:	f7f4 ffd0 	bl	80030ec <__aeabi_uldivmod>
 800e14c:	4602      	mov	r2, r0
 800e14e:	460b      	mov	r3, r1
 800e150:	4613      	mov	r3, r2
 800e152:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e154:	6a3b      	ldr	r3, [r7, #32]
 800e156:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e15a:	d308      	bcc.n	800e16e <UART_SetConfig+0x3d2>
 800e15c:	6a3b      	ldr	r3, [r7, #32]
 800e15e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e162:	d204      	bcs.n	800e16e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800e164:	697b      	ldr	r3, [r7, #20]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	6a3a      	ldr	r2, [r7, #32]
 800e16a:	60da      	str	r2, [r3, #12]
 800e16c:	e0c8      	b.n	800e300 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800e16e:	2301      	movs	r3, #1
 800e170:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800e174:	e0c4      	b.n	800e300 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e176:	697b      	ldr	r3, [r7, #20]
 800e178:	69db      	ldr	r3, [r3, #28]
 800e17a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e17e:	d167      	bne.n	800e250 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800e180:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e184:	2b08      	cmp	r3, #8
 800e186:	d828      	bhi.n	800e1da <UART_SetConfig+0x43e>
 800e188:	a201      	add	r2, pc, #4	@ (adr r2, 800e190 <UART_SetConfig+0x3f4>)
 800e18a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e18e:	bf00      	nop
 800e190:	0800e1b5 	.word	0x0800e1b5
 800e194:	0800e1bd 	.word	0x0800e1bd
 800e198:	0800e1c5 	.word	0x0800e1c5
 800e19c:	0800e1db 	.word	0x0800e1db
 800e1a0:	0800e1cb 	.word	0x0800e1cb
 800e1a4:	0800e1db 	.word	0x0800e1db
 800e1a8:	0800e1db 	.word	0x0800e1db
 800e1ac:	0800e1db 	.word	0x0800e1db
 800e1b0:	0800e1d3 	.word	0x0800e1d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e1b4:	f7fc fe66 	bl	800ae84 <HAL_RCC_GetPCLK1Freq>
 800e1b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800e1ba:	e014      	b.n	800e1e6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e1bc:	f7fc fe78 	bl	800aeb0 <HAL_RCC_GetPCLK2Freq>
 800e1c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800e1c2:	e010      	b.n	800e1e6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e1c4:	4b5a      	ldr	r3, [pc, #360]	@ (800e330 <UART_SetConfig+0x594>)
 800e1c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800e1c8:	e00d      	b.n	800e1e6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e1ca:	f7fc fded 	bl	800ada8 <HAL_RCC_GetSysClockFreq>
 800e1ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800e1d0:	e009      	b.n	800e1e6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e1d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e1d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800e1d8:	e005      	b.n	800e1e6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800e1da:	2300      	movs	r3, #0
 800e1dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800e1de:	2301      	movs	r3, #1
 800e1e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800e1e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	f000 8089 	beq.w	800e300 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1f2:	4a4e      	ldr	r2, [pc, #312]	@ (800e32c <UART_SetConfig+0x590>)
 800e1f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e1f8:	461a      	mov	r2, r3
 800e1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800e200:	005a      	lsls	r2, r3, #1
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	685b      	ldr	r3, [r3, #4]
 800e206:	085b      	lsrs	r3, r3, #1
 800e208:	441a      	add	r2, r3
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	685b      	ldr	r3, [r3, #4]
 800e20e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e212:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e214:	6a3b      	ldr	r3, [r7, #32]
 800e216:	2b0f      	cmp	r3, #15
 800e218:	d916      	bls.n	800e248 <UART_SetConfig+0x4ac>
 800e21a:	6a3b      	ldr	r3, [r7, #32]
 800e21c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e220:	d212      	bcs.n	800e248 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e222:	6a3b      	ldr	r3, [r7, #32]
 800e224:	b29b      	uxth	r3, r3
 800e226:	f023 030f 	bic.w	r3, r3, #15
 800e22a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e22c:	6a3b      	ldr	r3, [r7, #32]
 800e22e:	085b      	lsrs	r3, r3, #1
 800e230:	b29b      	uxth	r3, r3
 800e232:	f003 0307 	and.w	r3, r3, #7
 800e236:	b29a      	uxth	r2, r3
 800e238:	8bfb      	ldrh	r3, [r7, #30]
 800e23a:	4313      	orrs	r3, r2
 800e23c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	8bfa      	ldrh	r2, [r7, #30]
 800e244:	60da      	str	r2, [r3, #12]
 800e246:	e05b      	b.n	800e300 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800e248:	2301      	movs	r3, #1
 800e24a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800e24e:	e057      	b.n	800e300 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e250:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e254:	2b08      	cmp	r3, #8
 800e256:	d828      	bhi.n	800e2aa <UART_SetConfig+0x50e>
 800e258:	a201      	add	r2, pc, #4	@ (adr r2, 800e260 <UART_SetConfig+0x4c4>)
 800e25a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e25e:	bf00      	nop
 800e260:	0800e285 	.word	0x0800e285
 800e264:	0800e28d 	.word	0x0800e28d
 800e268:	0800e295 	.word	0x0800e295
 800e26c:	0800e2ab 	.word	0x0800e2ab
 800e270:	0800e29b 	.word	0x0800e29b
 800e274:	0800e2ab 	.word	0x0800e2ab
 800e278:	0800e2ab 	.word	0x0800e2ab
 800e27c:	0800e2ab 	.word	0x0800e2ab
 800e280:	0800e2a3 	.word	0x0800e2a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e284:	f7fc fdfe 	bl	800ae84 <HAL_RCC_GetPCLK1Freq>
 800e288:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800e28a:	e014      	b.n	800e2b6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e28c:	f7fc fe10 	bl	800aeb0 <HAL_RCC_GetPCLK2Freq>
 800e290:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800e292:	e010      	b.n	800e2b6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e294:	4b26      	ldr	r3, [pc, #152]	@ (800e330 <UART_SetConfig+0x594>)
 800e296:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800e298:	e00d      	b.n	800e2b6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e29a:	f7fc fd85 	bl	800ada8 <HAL_RCC_GetSysClockFreq>
 800e29e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800e2a0:	e009      	b.n	800e2b6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e2a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e2a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800e2a8:	e005      	b.n	800e2b6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800e2ae:	2301      	movs	r3, #1
 800e2b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800e2b4:	bf00      	nop
    }

    if (pclk != 0U)
 800e2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d021      	beq.n	800e300 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e2bc:	697b      	ldr	r3, [r7, #20]
 800e2be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2c0:	4a1a      	ldr	r2, [pc, #104]	@ (800e32c <UART_SetConfig+0x590>)
 800e2c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e2c6:	461a      	mov	r2, r3
 800e2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2ca:	fbb3 f2f2 	udiv	r2, r3, r2
 800e2ce:	697b      	ldr	r3, [r7, #20]
 800e2d0:	685b      	ldr	r3, [r3, #4]
 800e2d2:	085b      	lsrs	r3, r3, #1
 800e2d4:	441a      	add	r2, r3
 800e2d6:	697b      	ldr	r3, [r7, #20]
 800e2d8:	685b      	ldr	r3, [r3, #4]
 800e2da:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e2e0:	6a3b      	ldr	r3, [r7, #32]
 800e2e2:	2b0f      	cmp	r3, #15
 800e2e4:	d909      	bls.n	800e2fa <UART_SetConfig+0x55e>
 800e2e6:	6a3b      	ldr	r3, [r7, #32]
 800e2e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e2ec:	d205      	bcs.n	800e2fa <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e2ee:	6a3b      	ldr	r3, [r7, #32]
 800e2f0:	b29a      	uxth	r2, r3
 800e2f2:	697b      	ldr	r3, [r7, #20]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	60da      	str	r2, [r3, #12]
 800e2f8:	e002      	b.n	800e300 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800e2fa:	2301      	movs	r3, #1
 800e2fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e300:	697b      	ldr	r3, [r7, #20]
 800e302:	2201      	movs	r2, #1
 800e304:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e308:	697b      	ldr	r3, [r7, #20]
 800e30a:	2201      	movs	r2, #1
 800e30c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e310:	697b      	ldr	r3, [r7, #20]
 800e312:	2200      	movs	r2, #0
 800e314:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e316:	697b      	ldr	r3, [r7, #20]
 800e318:	2200      	movs	r2, #0
 800e31a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e31c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800e320:	4618      	mov	r0, r3
 800e322:	3730      	adds	r7, #48	@ 0x30
 800e324:	46bd      	mov	sp, r7
 800e326:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e32a:	bf00      	nop
 800e32c:	0801edc4 	.word	0x0801edc4
 800e330:	00f42400 	.word	0x00f42400

0800e334 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e334:	b480      	push	{r7}
 800e336:	b083      	sub	sp, #12
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e340:	f003 0308 	and.w	r3, r3, #8
 800e344:	2b00      	cmp	r3, #0
 800e346:	d00a      	beq.n	800e35e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	685b      	ldr	r3, [r3, #4]
 800e34e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	430a      	orrs	r2, r1
 800e35c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e362:	f003 0301 	and.w	r3, r3, #1
 800e366:	2b00      	cmp	r3, #0
 800e368:	d00a      	beq.n	800e380 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	685b      	ldr	r3, [r3, #4]
 800e370:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	430a      	orrs	r2, r1
 800e37e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e384:	f003 0302 	and.w	r3, r3, #2
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d00a      	beq.n	800e3a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	685b      	ldr	r3, [r3, #4]
 800e392:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	430a      	orrs	r2, r1
 800e3a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3a6:	f003 0304 	and.w	r3, r3, #4
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d00a      	beq.n	800e3c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	685b      	ldr	r3, [r3, #4]
 800e3b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	430a      	orrs	r2, r1
 800e3c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3c8:	f003 0310 	and.w	r3, r3, #16
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d00a      	beq.n	800e3e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	689b      	ldr	r3, [r3, #8]
 800e3d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	430a      	orrs	r2, r1
 800e3e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3ea:	f003 0320 	and.w	r3, r3, #32
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d00a      	beq.n	800e408 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	689b      	ldr	r3, [r3, #8]
 800e3f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	430a      	orrs	r2, r1
 800e406:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e40c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e410:	2b00      	cmp	r3, #0
 800e412:	d01a      	beq.n	800e44a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	685b      	ldr	r3, [r3, #4]
 800e41a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	430a      	orrs	r2, r1
 800e428:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e42e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e432:	d10a      	bne.n	800e44a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	685b      	ldr	r3, [r3, #4]
 800e43a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	430a      	orrs	r2, r1
 800e448:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e44e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e452:	2b00      	cmp	r3, #0
 800e454:	d00a      	beq.n	800e46c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	685b      	ldr	r3, [r3, #4]
 800e45c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	430a      	orrs	r2, r1
 800e46a:	605a      	str	r2, [r3, #4]
  }
}
 800e46c:	bf00      	nop
 800e46e:	370c      	adds	r7, #12
 800e470:	46bd      	mov	sp, r7
 800e472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e476:	4770      	bx	lr

0800e478 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b098      	sub	sp, #96	@ 0x60
 800e47c:	af02      	add	r7, sp, #8
 800e47e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	2200      	movs	r2, #0
 800e484:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e488:	f7f8 f98a 	bl	80067a0 <HAL_GetTick>
 800e48c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	f003 0308 	and.w	r3, r3, #8
 800e498:	2b08      	cmp	r3, #8
 800e49a:	d12f      	bne.n	800e4fc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e49c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e4a0:	9300      	str	r3, [sp, #0]
 800e4a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f000 f88e 	bl	800e5cc <UART_WaitOnFlagUntilTimeout>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d022      	beq.n	800e4fc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4be:	e853 3f00 	ldrex	r3, [r3]
 800e4c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e4c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e4ca:	653b      	str	r3, [r7, #80]	@ 0x50
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	461a      	mov	r2, r3
 800e4d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e4d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800e4d6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e4da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e4dc:	e841 2300 	strex	r3, r2, [r1]
 800e4e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e4e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d1e6      	bne.n	800e4b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2220      	movs	r2, #32
 800e4ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e4f8:	2303      	movs	r3, #3
 800e4fa:	e063      	b.n	800e5c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	f003 0304 	and.w	r3, r3, #4
 800e506:	2b04      	cmp	r3, #4
 800e508:	d149      	bne.n	800e59e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e50a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e50e:	9300      	str	r3, [sp, #0]
 800e510:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e512:	2200      	movs	r2, #0
 800e514:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f000 f857 	bl	800e5cc <UART_WaitOnFlagUntilTimeout>
 800e51e:	4603      	mov	r3, r0
 800e520:	2b00      	cmp	r3, #0
 800e522:	d03c      	beq.n	800e59e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e52a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e52c:	e853 3f00 	ldrex	r3, [r3]
 800e530:	623b      	str	r3, [r7, #32]
   return(result);
 800e532:	6a3b      	ldr	r3, [r7, #32]
 800e534:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e538:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	461a      	mov	r2, r3
 800e540:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e542:	633b      	str	r3, [r7, #48]	@ 0x30
 800e544:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e546:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e548:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e54a:	e841 2300 	strex	r3, r2, [r1]
 800e54e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e552:	2b00      	cmp	r3, #0
 800e554:	d1e6      	bne.n	800e524 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	3308      	adds	r3, #8
 800e55c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e55e:	693b      	ldr	r3, [r7, #16]
 800e560:	e853 3f00 	ldrex	r3, [r3]
 800e564:	60fb      	str	r3, [r7, #12]
   return(result);
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	f023 0301 	bic.w	r3, r3, #1
 800e56c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	3308      	adds	r3, #8
 800e574:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e576:	61fa      	str	r2, [r7, #28]
 800e578:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e57a:	69b9      	ldr	r1, [r7, #24]
 800e57c:	69fa      	ldr	r2, [r7, #28]
 800e57e:	e841 2300 	strex	r3, r2, [r1]
 800e582:	617b      	str	r3, [r7, #20]
   return(result);
 800e584:	697b      	ldr	r3, [r7, #20]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d1e5      	bne.n	800e556 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	2220      	movs	r2, #32
 800e58e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2200      	movs	r2, #0
 800e596:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e59a:	2303      	movs	r3, #3
 800e59c:	e012      	b.n	800e5c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	2220      	movs	r2, #32
 800e5a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	2220      	movs	r2, #32
 800e5aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	2200      	movs	r2, #0
 800e5be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e5c2:	2300      	movs	r3, #0
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3758      	adds	r7, #88	@ 0x58
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}

0800e5cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b084      	sub	sp, #16
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	60f8      	str	r0, [r7, #12]
 800e5d4:	60b9      	str	r1, [r7, #8]
 800e5d6:	603b      	str	r3, [r7, #0]
 800e5d8:	4613      	mov	r3, r2
 800e5da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e5dc:	e04f      	b.n	800e67e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e5de:	69bb      	ldr	r3, [r7, #24]
 800e5e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e5e4:	d04b      	beq.n	800e67e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e5e6:	f7f8 f8db 	bl	80067a0 <HAL_GetTick>
 800e5ea:	4602      	mov	r2, r0
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	1ad3      	subs	r3, r2, r3
 800e5f0:	69ba      	ldr	r2, [r7, #24]
 800e5f2:	429a      	cmp	r2, r3
 800e5f4:	d302      	bcc.n	800e5fc <UART_WaitOnFlagUntilTimeout+0x30>
 800e5f6:	69bb      	ldr	r3, [r7, #24]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d101      	bne.n	800e600 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e5fc:	2303      	movs	r3, #3
 800e5fe:	e04e      	b.n	800e69e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	f003 0304 	and.w	r3, r3, #4
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d037      	beq.n	800e67e <UART_WaitOnFlagUntilTimeout+0xb2>
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	2b80      	cmp	r3, #128	@ 0x80
 800e612:	d034      	beq.n	800e67e <UART_WaitOnFlagUntilTimeout+0xb2>
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	2b40      	cmp	r3, #64	@ 0x40
 800e618:	d031      	beq.n	800e67e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	69db      	ldr	r3, [r3, #28]
 800e620:	f003 0308 	and.w	r3, r3, #8
 800e624:	2b08      	cmp	r3, #8
 800e626:	d110      	bne.n	800e64a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	2208      	movs	r2, #8
 800e62e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e630:	68f8      	ldr	r0, [r7, #12]
 800e632:	f000 fa42 	bl	800eaba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	2208      	movs	r2, #8
 800e63a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	2200      	movs	r2, #0
 800e642:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e646:	2301      	movs	r3, #1
 800e648:	e029      	b.n	800e69e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	69db      	ldr	r3, [r3, #28]
 800e650:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e654:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e658:	d111      	bne.n	800e67e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e662:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e664:	68f8      	ldr	r0, [r7, #12]
 800e666:	f000 fa28 	bl	800eaba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	2220      	movs	r2, #32
 800e66e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	2200      	movs	r2, #0
 800e676:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e67a:	2303      	movs	r3, #3
 800e67c:	e00f      	b.n	800e69e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	69da      	ldr	r2, [r3, #28]
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	4013      	ands	r3, r2
 800e688:	68ba      	ldr	r2, [r7, #8]
 800e68a:	429a      	cmp	r2, r3
 800e68c:	bf0c      	ite	eq
 800e68e:	2301      	moveq	r3, #1
 800e690:	2300      	movne	r3, #0
 800e692:	b2db      	uxtb	r3, r3
 800e694:	461a      	mov	r2, r3
 800e696:	79fb      	ldrb	r3, [r7, #7]
 800e698:	429a      	cmp	r2, r3
 800e69a:	d0a0      	beq.n	800e5de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e69c:	2300      	movs	r3, #0
}
 800e69e:	4618      	mov	r0, r3
 800e6a0:	3710      	adds	r7, #16
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}
	...

0800e6a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	b0a3      	sub	sp, #140	@ 0x8c
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	60f8      	str	r0, [r7, #12]
 800e6b0:	60b9      	str	r1, [r7, #8]
 800e6b2:	4613      	mov	r3, r2
 800e6b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	68ba      	ldr	r2, [r7, #8]
 800e6ba:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	88fa      	ldrh	r2, [r7, #6]
 800e6c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	88fa      	ldrh	r2, [r7, #6]
 800e6c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	689b      	ldr	r3, [r3, #8]
 800e6d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e6da:	d10e      	bne.n	800e6fa <UART_Start_Receive_IT+0x52>
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	691b      	ldr	r3, [r3, #16]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d105      	bne.n	800e6f0 <UART_Start_Receive_IT+0x48>
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800e6ea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e6ee:	e02d      	b.n	800e74c <UART_Start_Receive_IT+0xa4>
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	22ff      	movs	r2, #255	@ 0xff
 800e6f4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e6f8:	e028      	b.n	800e74c <UART_Start_Receive_IT+0xa4>
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	689b      	ldr	r3, [r3, #8]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d10d      	bne.n	800e71e <UART_Start_Receive_IT+0x76>
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	691b      	ldr	r3, [r3, #16]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d104      	bne.n	800e714 <UART_Start_Receive_IT+0x6c>
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	22ff      	movs	r2, #255	@ 0xff
 800e70e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e712:	e01b      	b.n	800e74c <UART_Start_Receive_IT+0xa4>
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	227f      	movs	r2, #127	@ 0x7f
 800e718:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e71c:	e016      	b.n	800e74c <UART_Start_Receive_IT+0xa4>
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	689b      	ldr	r3, [r3, #8]
 800e722:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e726:	d10d      	bne.n	800e744 <UART_Start_Receive_IT+0x9c>
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	691b      	ldr	r3, [r3, #16]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d104      	bne.n	800e73a <UART_Start_Receive_IT+0x92>
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	227f      	movs	r2, #127	@ 0x7f
 800e734:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e738:	e008      	b.n	800e74c <UART_Start_Receive_IT+0xa4>
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	223f      	movs	r2, #63	@ 0x3f
 800e73e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e742:	e003      	b.n	800e74c <UART_Start_Receive_IT+0xa4>
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	2200      	movs	r2, #0
 800e748:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	2200      	movs	r2, #0
 800e750:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	2222      	movs	r2, #34	@ 0x22
 800e758:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	3308      	adds	r3, #8
 800e762:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e764:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e766:	e853 3f00 	ldrex	r3, [r3]
 800e76a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800e76c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e76e:	f043 0301 	orr.w	r3, r3, #1
 800e772:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	3308      	adds	r3, #8
 800e77c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e780:	673a      	str	r2, [r7, #112]	@ 0x70
 800e782:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e784:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800e786:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800e788:	e841 2300 	strex	r3, r2, [r1]
 800e78c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800e78e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e790:	2b00      	cmp	r3, #0
 800e792:	d1e3      	bne.n	800e75c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e798:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e79c:	d14f      	bne.n	800e83e <UART_Start_Receive_IT+0x196>
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e7a4:	88fa      	ldrh	r2, [r7, #6]
 800e7a6:	429a      	cmp	r2, r3
 800e7a8:	d349      	bcc.n	800e83e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	689b      	ldr	r3, [r3, #8]
 800e7ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e7b2:	d107      	bne.n	800e7c4 <UART_Start_Receive_IT+0x11c>
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	691b      	ldr	r3, [r3, #16]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d103      	bne.n	800e7c4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	4a47      	ldr	r2, [pc, #284]	@ (800e8dc <UART_Start_Receive_IT+0x234>)
 800e7c0:	675a      	str	r2, [r3, #116]	@ 0x74
 800e7c2:	e002      	b.n	800e7ca <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	4a46      	ldr	r2, [pc, #280]	@ (800e8e0 <UART_Start_Receive_IT+0x238>)
 800e7c8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	691b      	ldr	r3, [r3, #16]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d01a      	beq.n	800e808 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e7da:	e853 3f00 	ldrex	r3, [r3]
 800e7de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e7e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e7e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e7e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	461a      	mov	r2, r3
 800e7f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e7f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e7f6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7f8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e7fa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e7fc:	e841 2300 	strex	r3, r2, [r1]
 800e800:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800e802:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e804:	2b00      	cmp	r3, #0
 800e806:	d1e4      	bne.n	800e7d2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	3308      	adds	r3, #8
 800e80e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e810:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e812:	e853 3f00 	ldrex	r3, [r3]
 800e816:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e81a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e81e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	3308      	adds	r3, #8
 800e826:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e828:	64ba      	str	r2, [r7, #72]	@ 0x48
 800e82a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e82c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e82e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e830:	e841 2300 	strex	r3, r2, [r1]
 800e834:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800e836:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d1e5      	bne.n	800e808 <UART_Start_Receive_IT+0x160>
 800e83c:	e046      	b.n	800e8cc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	689b      	ldr	r3, [r3, #8]
 800e842:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e846:	d107      	bne.n	800e858 <UART_Start_Receive_IT+0x1b0>
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	691b      	ldr	r3, [r3, #16]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d103      	bne.n	800e858 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	4a24      	ldr	r2, [pc, #144]	@ (800e8e4 <UART_Start_Receive_IT+0x23c>)
 800e854:	675a      	str	r2, [r3, #116]	@ 0x74
 800e856:	e002      	b.n	800e85e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	4a23      	ldr	r2, [pc, #140]	@ (800e8e8 <UART_Start_Receive_IT+0x240>)
 800e85c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	691b      	ldr	r3, [r3, #16]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d019      	beq.n	800e89a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e86c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e86e:	e853 3f00 	ldrex	r3, [r3]
 800e872:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e876:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800e87a:	677b      	str	r3, [r7, #116]	@ 0x74
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	461a      	mov	r2, r3
 800e882:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e884:	637b      	str	r3, [r7, #52]	@ 0x34
 800e886:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e888:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e88a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e88c:	e841 2300 	strex	r3, r2, [r1]
 800e890:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e894:	2b00      	cmp	r3, #0
 800e896:	d1e6      	bne.n	800e866 <UART_Start_Receive_IT+0x1be>
 800e898:	e018      	b.n	800e8cc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8a0:	697b      	ldr	r3, [r7, #20]
 800e8a2:	e853 3f00 	ldrex	r3, [r3]
 800e8a6:	613b      	str	r3, [r7, #16]
   return(result);
 800e8a8:	693b      	ldr	r3, [r7, #16]
 800e8aa:	f043 0320 	orr.w	r3, r3, #32
 800e8ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	461a      	mov	r2, r3
 800e8b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e8b8:	623b      	str	r3, [r7, #32]
 800e8ba:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8bc:	69f9      	ldr	r1, [r7, #28]
 800e8be:	6a3a      	ldr	r2, [r7, #32]
 800e8c0:	e841 2300 	strex	r3, r2, [r1]
 800e8c4:	61bb      	str	r3, [r7, #24]
   return(result);
 800e8c6:	69bb      	ldr	r3, [r7, #24]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d1e6      	bne.n	800e89a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800e8cc:	2300      	movs	r3, #0
}
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	378c      	adds	r7, #140	@ 0x8c
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d8:	4770      	bx	lr
 800e8da:	bf00      	nop
 800e8dc:	0800f8c1 	.word	0x0800f8c1
 800e8e0:	0800f55d 	.word	0x0800f55d
 800e8e4:	0800f3a5 	.word	0x0800f3a5
 800e8e8:	0800f1ed 	.word	0x0800f1ed

0800e8ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b096      	sub	sp, #88	@ 0x58
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	60f8      	str	r0, [r7, #12]
 800e8f4:	60b9      	str	r1, [r7, #8]
 800e8f6:	4613      	mov	r3, r2
 800e8f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	68ba      	ldr	r2, [r7, #8]
 800e8fe:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	88fa      	ldrh	r2, [r7, #6]
 800e904:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	2200      	movs	r2, #0
 800e90c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	2222      	movs	r2, #34	@ 0x22
 800e914:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d02d      	beq.n	800e97e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e928:	4a40      	ldr	r2, [pc, #256]	@ (800ea2c <UART_Start_Receive_DMA+0x140>)
 800e92a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e932:	4a3f      	ldr	r2, [pc, #252]	@ (800ea30 <UART_Start_Receive_DMA+0x144>)
 800e934:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e93c:	4a3d      	ldr	r2, [pc, #244]	@ (800ea34 <UART_Start_Receive_DMA+0x148>)
 800e93e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e946:	2200      	movs	r2, #0
 800e948:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	3324      	adds	r3, #36	@ 0x24
 800e956:	4619      	mov	r1, r3
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e95c:	461a      	mov	r2, r3
 800e95e:	88fb      	ldrh	r3, [r7, #6]
 800e960:	f7fa fad0 	bl	8008f04 <HAL_DMA_Start_IT>
 800e964:	4603      	mov	r3, r0
 800e966:	2b00      	cmp	r3, #0
 800e968:	d009      	beq.n	800e97e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	2210      	movs	r2, #16
 800e96e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	2220      	movs	r2, #32
 800e976:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800e97a:	2301      	movs	r3, #1
 800e97c:	e051      	b.n	800ea22 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	691b      	ldr	r3, [r3, #16]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d018      	beq.n	800e9b8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e98c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e98e:	e853 3f00 	ldrex	r3, [r3]
 800e992:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e996:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e99a:	657b      	str	r3, [r7, #84]	@ 0x54
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	461a      	mov	r2, r3
 800e9a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e9a6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9a8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e9aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e9ac:	e841 2300 	strex	r3, r2, [r1]
 800e9b0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800e9b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d1e6      	bne.n	800e986 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	3308      	adds	r3, #8
 800e9be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9c2:	e853 3f00 	ldrex	r3, [r3]
 800e9c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9ca:	f043 0301 	orr.w	r3, r3, #1
 800e9ce:	653b      	str	r3, [r7, #80]	@ 0x50
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	3308      	adds	r3, #8
 800e9d6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e9d8:	637a      	str	r2, [r7, #52]	@ 0x34
 800e9da:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e9de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e9e0:	e841 2300 	strex	r3, r2, [r1]
 800e9e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e9e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d1e5      	bne.n	800e9b8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	3308      	adds	r3, #8
 800e9f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9f4:	697b      	ldr	r3, [r7, #20]
 800e9f6:	e853 3f00 	ldrex	r3, [r3]
 800e9fa:	613b      	str	r3, [r7, #16]
   return(result);
 800e9fc:	693b      	ldr	r3, [r7, #16]
 800e9fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	3308      	adds	r3, #8
 800ea0a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ea0c:	623a      	str	r2, [r7, #32]
 800ea0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea10:	69f9      	ldr	r1, [r7, #28]
 800ea12:	6a3a      	ldr	r2, [r7, #32]
 800ea14:	e841 2300 	strex	r3, r2, [r1]
 800ea18:	61bb      	str	r3, [r7, #24]
   return(result);
 800ea1a:	69bb      	ldr	r3, [r7, #24]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d1e5      	bne.n	800e9ec <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800ea20:	2300      	movs	r3, #0
}
 800ea22:	4618      	mov	r0, r3
 800ea24:	3758      	adds	r7, #88	@ 0x58
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}
 800ea2a:	bf00      	nop
 800ea2c:	0800ec3d 	.word	0x0800ec3d
 800ea30:	0800ed69 	.word	0x0800ed69
 800ea34:	0800eda7 	.word	0x0800eda7

0800ea38 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ea38:	b480      	push	{r7}
 800ea3a:	b08f      	sub	sp, #60	@ 0x3c
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea46:	6a3b      	ldr	r3, [r7, #32]
 800ea48:	e853 3f00 	ldrex	r3, [r3]
 800ea4c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ea4e:	69fb      	ldr	r3, [r7, #28]
 800ea50:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ea54:	637b      	str	r3, [r7, #52]	@ 0x34
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	461a      	mov	r2, r3
 800ea5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ea60:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ea64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ea66:	e841 2300 	strex	r3, r2, [r1]
 800ea6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ea6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d1e6      	bne.n	800ea40 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	3308      	adds	r3, #8
 800ea78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	e853 3f00 	ldrex	r3, [r3]
 800ea80:	60bb      	str	r3, [r7, #8]
   return(result);
 800ea82:	68bb      	ldr	r3, [r7, #8]
 800ea84:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ea88:	633b      	str	r3, [r7, #48]	@ 0x30
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	3308      	adds	r3, #8
 800ea90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea92:	61ba      	str	r2, [r7, #24]
 800ea94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea96:	6979      	ldr	r1, [r7, #20]
 800ea98:	69ba      	ldr	r2, [r7, #24]
 800ea9a:	e841 2300 	strex	r3, r2, [r1]
 800ea9e:	613b      	str	r3, [r7, #16]
   return(result);
 800eaa0:	693b      	ldr	r3, [r7, #16]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d1e5      	bne.n	800ea72 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	2220      	movs	r2, #32
 800eaaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800eaae:	bf00      	nop
 800eab0:	373c      	adds	r7, #60	@ 0x3c
 800eab2:	46bd      	mov	sp, r7
 800eab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab8:	4770      	bx	lr

0800eaba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800eaba:	b480      	push	{r7}
 800eabc:	b095      	sub	sp, #84	@ 0x54
 800eabe:	af00      	add	r7, sp, #0
 800eac0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eaca:	e853 3f00 	ldrex	r3, [r3]
 800eace:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ead0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ead2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ead6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	461a      	mov	r2, r3
 800eade:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eae0:	643b      	str	r3, [r7, #64]	@ 0x40
 800eae2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eae4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800eae6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800eae8:	e841 2300 	strex	r3, r2, [r1]
 800eaec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800eaee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d1e6      	bne.n	800eac2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	3308      	adds	r3, #8
 800eafa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eafc:	6a3b      	ldr	r3, [r7, #32]
 800eafe:	e853 3f00 	ldrex	r3, [r3]
 800eb02:	61fb      	str	r3, [r7, #28]
   return(result);
 800eb04:	69fb      	ldr	r3, [r7, #28]
 800eb06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800eb0a:	f023 0301 	bic.w	r3, r3, #1
 800eb0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	3308      	adds	r3, #8
 800eb16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800eb18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800eb1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eb1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eb20:	e841 2300 	strex	r3, r2, [r1]
 800eb24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800eb26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d1e3      	bne.n	800eaf4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb30:	2b01      	cmp	r3, #1
 800eb32:	d118      	bne.n	800eb66 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	e853 3f00 	ldrex	r3, [r3]
 800eb40:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	f023 0310 	bic.w	r3, r3, #16
 800eb48:	647b      	str	r3, [r7, #68]	@ 0x44
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	461a      	mov	r2, r3
 800eb50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb52:	61bb      	str	r3, [r7, #24]
 800eb54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb56:	6979      	ldr	r1, [r7, #20]
 800eb58:	69ba      	ldr	r2, [r7, #24]
 800eb5a:	e841 2300 	strex	r3, r2, [r1]
 800eb5e:	613b      	str	r3, [r7, #16]
   return(result);
 800eb60:	693b      	ldr	r3, [r7, #16]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d1e6      	bne.n	800eb34 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	2220      	movs	r2, #32
 800eb6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2200      	movs	r2, #0
 800eb72:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2200      	movs	r2, #0
 800eb78:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800eb7a:	bf00      	nop
 800eb7c:	3754      	adds	r7, #84	@ 0x54
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb84:	4770      	bx	lr

0800eb86 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800eb86:	b580      	push	{r7, lr}
 800eb88:	b090      	sub	sp, #64	@ 0x40
 800eb8a:	af00      	add	r7, sp, #0
 800eb8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb92:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	f003 0320 	and.w	r3, r3, #32
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d137      	bne.n	800ec12 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800eba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eba4:	2200      	movs	r2, #0
 800eba6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ebaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	3308      	adds	r3, #8
 800ebb0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebb4:	e853 3f00 	ldrex	r3, [r3]
 800ebb8:	623b      	str	r3, [r7, #32]
   return(result);
 800ebba:	6a3b      	ldr	r3, [r7, #32]
 800ebbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ebc0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ebc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	3308      	adds	r3, #8
 800ebc8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ebca:	633a      	str	r2, [r7, #48]	@ 0x30
 800ebcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ebd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ebd2:	e841 2300 	strex	r3, r2, [r1]
 800ebd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ebd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d1e5      	bne.n	800ebaa <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ebde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebe4:	693b      	ldr	r3, [r7, #16]
 800ebe6:	e853 3f00 	ldrex	r3, [r3]
 800ebea:	60fb      	str	r3, [r7, #12]
   return(result);
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ebf2:	637b      	str	r3, [r7, #52]	@ 0x34
 800ebf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	461a      	mov	r2, r3
 800ebfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ebfc:	61fb      	str	r3, [r7, #28]
 800ebfe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec00:	69b9      	ldr	r1, [r7, #24]
 800ec02:	69fa      	ldr	r2, [r7, #28]
 800ec04:	e841 2300 	strex	r3, r2, [r1]
 800ec08:	617b      	str	r3, [r7, #20]
   return(result);
 800ec0a:	697b      	ldr	r3, [r7, #20]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d1e6      	bne.n	800ebde <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ec10:	e002      	b.n	800ec18 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800ec12:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ec14:	f7ff f898 	bl	800dd48 <HAL_UART_TxCpltCallback>
}
 800ec18:	bf00      	nop
 800ec1a:	3740      	adds	r7, #64	@ 0x40
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	bd80      	pop	{r7, pc}

0800ec20 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b084      	sub	sp, #16
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec2c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ec2e:	68f8      	ldr	r0, [r7, #12]
 800ec30:	f7ff f894 	bl	800dd5c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ec34:	bf00      	nop
 800ec36:	3710      	adds	r7, #16
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	bd80      	pop	{r7, pc}

0800ec3c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b09c      	sub	sp, #112	@ 0x70
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec48:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	f003 0320 	and.w	r3, r3, #32
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d171      	bne.n	800ed3c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800ec58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ec60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ec68:	e853 3f00 	ldrex	r3, [r3]
 800ec6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ec6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ec70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ec74:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ec76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	461a      	mov	r2, r3
 800ec7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ec7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ec80:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec82:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ec84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ec86:	e841 2300 	strex	r3, r2, [r1]
 800ec8a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ec8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d1e6      	bne.n	800ec60 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	3308      	adds	r3, #8
 800ec98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec9c:	e853 3f00 	ldrex	r3, [r3]
 800eca0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800eca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eca4:	f023 0301 	bic.w	r3, r3, #1
 800eca8:	667b      	str	r3, [r7, #100]	@ 0x64
 800ecaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	3308      	adds	r3, #8
 800ecb0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ecb2:	647a      	str	r2, [r7, #68]	@ 0x44
 800ecb4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecb6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ecb8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ecba:	e841 2300 	strex	r3, r2, [r1]
 800ecbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ecc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d1e5      	bne.n	800ec92 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ecc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	3308      	adds	r3, #8
 800eccc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecd0:	e853 3f00 	ldrex	r3, [r3]
 800ecd4:	623b      	str	r3, [r7, #32]
   return(result);
 800ecd6:	6a3b      	ldr	r3, [r7, #32]
 800ecd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ecdc:	663b      	str	r3, [r7, #96]	@ 0x60
 800ecde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	3308      	adds	r3, #8
 800ece4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ece6:	633a      	str	r2, [r7, #48]	@ 0x30
 800ece8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ecec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ecee:	e841 2300 	strex	r3, r2, [r1]
 800ecf2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ecf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d1e5      	bne.n	800ecc6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ecfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ecfc:	2220      	movs	r2, #32
 800ecfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ed04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ed06:	2b01      	cmp	r3, #1
 800ed08:	d118      	bne.n	800ed3c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed10:	693b      	ldr	r3, [r7, #16]
 800ed12:	e853 3f00 	ldrex	r3, [r3]
 800ed16:	60fb      	str	r3, [r7, #12]
   return(result);
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	f023 0310 	bic.w	r3, r3, #16
 800ed1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ed20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	461a      	mov	r2, r3
 800ed26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ed28:	61fb      	str	r3, [r7, #28]
 800ed2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed2c:	69b9      	ldr	r1, [r7, #24]
 800ed2e:	69fa      	ldr	r2, [r7, #28]
 800ed30:	e841 2300 	strex	r3, r2, [r1]
 800ed34:	617b      	str	r3, [r7, #20]
   return(result);
 800ed36:	697b      	ldr	r3, [r7, #20]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d1e6      	bne.n	800ed0a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ed3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ed3e:	2200      	movs	r2, #0
 800ed40:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ed44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ed46:	2b01      	cmp	r3, #1
 800ed48:	d107      	bne.n	800ed5a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ed4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ed4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ed50:	4619      	mov	r1, r3
 800ed52:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ed54:	f7ff f816 	bl	800dd84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ed58:	e002      	b.n	800ed60 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800ed5a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ed5c:	f008 fbea 	bl	8017534 <HAL_UART_RxCpltCallback>
}
 800ed60:	bf00      	nop
 800ed62:	3770      	adds	r7, #112	@ 0x70
 800ed64:	46bd      	mov	sp, r7
 800ed66:	bd80      	pop	{r7, pc}

0800ed68 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b084      	sub	sp, #16
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed74:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	2201      	movs	r2, #1
 800ed7a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ed80:	2b01      	cmp	r3, #1
 800ed82:	d109      	bne.n	800ed98 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ed8a:	085b      	lsrs	r3, r3, #1
 800ed8c:	b29b      	uxth	r3, r3
 800ed8e:	4619      	mov	r1, r3
 800ed90:	68f8      	ldr	r0, [r7, #12]
 800ed92:	f7fe fff7 	bl	800dd84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ed96:	e002      	b.n	800ed9e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800ed98:	68f8      	ldr	r0, [r7, #12]
 800ed9a:	f008 fba3 	bl	80174e4 <HAL_UART_RxHalfCpltCallback>
}
 800ed9e:	bf00      	nop
 800eda0:	3710      	adds	r7, #16
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}

0800eda6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800eda6:	b580      	push	{r7, lr}
 800eda8:	b086      	sub	sp, #24
 800edaa:	af00      	add	r7, sp, #0
 800edac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800edb2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800edba:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800edbc:	697b      	ldr	r3, [r7, #20]
 800edbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800edc2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800edc4:	697b      	ldr	r3, [r7, #20]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	689b      	ldr	r3, [r3, #8]
 800edca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800edce:	2b80      	cmp	r3, #128	@ 0x80
 800edd0:	d109      	bne.n	800ede6 <UART_DMAError+0x40>
 800edd2:	693b      	ldr	r3, [r7, #16]
 800edd4:	2b21      	cmp	r3, #33	@ 0x21
 800edd6:	d106      	bne.n	800ede6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800edd8:	697b      	ldr	r3, [r7, #20]
 800edda:	2200      	movs	r2, #0
 800eddc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800ede0:	6978      	ldr	r0, [r7, #20]
 800ede2:	f7ff fe29 	bl	800ea38 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ede6:	697b      	ldr	r3, [r7, #20]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	689b      	ldr	r3, [r3, #8]
 800edec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800edf0:	2b40      	cmp	r3, #64	@ 0x40
 800edf2:	d109      	bne.n	800ee08 <UART_DMAError+0x62>
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	2b22      	cmp	r3, #34	@ 0x22
 800edf8:	d106      	bne.n	800ee08 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800edfa:	697b      	ldr	r3, [r7, #20]
 800edfc:	2200      	movs	r2, #0
 800edfe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ee02:	6978      	ldr	r0, [r7, #20]
 800ee04:	f7ff fe59 	bl	800eaba <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ee08:	697b      	ldr	r3, [r7, #20]
 800ee0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee0e:	f043 0210 	orr.w	r2, r3, #16
 800ee12:	697b      	ldr	r3, [r7, #20]
 800ee14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ee18:	6978      	ldr	r0, [r7, #20]
 800ee1a:	f7fe ffa9 	bl	800dd70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ee1e:	bf00      	nop
 800ee20:	3718      	adds	r7, #24
 800ee22:	46bd      	mov	sp, r7
 800ee24:	bd80      	pop	{r7, pc}

0800ee26 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ee26:	b580      	push	{r7, lr}
 800ee28:	b084      	sub	sp, #16
 800ee2a:	af00      	add	r7, sp, #0
 800ee2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	2200      	movs	r2, #0
 800ee38:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	2200      	movs	r2, #0
 800ee40:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ee44:	68f8      	ldr	r0, [r7, #12]
 800ee46:	f7fe ff93 	bl	800dd70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ee4a:	bf00      	nop
 800ee4c:	3710      	adds	r7, #16
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}

0800ee52 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ee52:	b480      	push	{r7}
 800ee54:	b08f      	sub	sp, #60	@ 0x3c
 800ee56:	af00      	add	r7, sp, #0
 800ee58:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ee60:	2b21      	cmp	r3, #33	@ 0x21
 800ee62:	d14c      	bne.n	800eefe <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ee6a:	b29b      	uxth	r3, r3
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d132      	bne.n	800eed6 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee76:	6a3b      	ldr	r3, [r7, #32]
 800ee78:	e853 3f00 	ldrex	r3, [r3]
 800ee7c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ee7e:	69fb      	ldr	r3, [r7, #28]
 800ee80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ee84:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	461a      	mov	r2, r3
 800ee8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ee90:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ee94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee96:	e841 2300 	strex	r3, r2, [r1]
 800ee9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ee9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d1e6      	bne.n	800ee70 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	e853 3f00 	ldrex	r3, [r3]
 800eeae:	60bb      	str	r3, [r7, #8]
   return(result);
 800eeb0:	68bb      	ldr	r3, [r7, #8]
 800eeb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eeb6:	633b      	str	r3, [r7, #48]	@ 0x30
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	461a      	mov	r2, r3
 800eebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eec0:	61bb      	str	r3, [r7, #24]
 800eec2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eec4:	6979      	ldr	r1, [r7, #20]
 800eec6:	69ba      	ldr	r2, [r7, #24]
 800eec8:	e841 2300 	strex	r3, r2, [r1]
 800eecc:	613b      	str	r3, [r7, #16]
   return(result);
 800eece:	693b      	ldr	r3, [r7, #16]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d1e6      	bne.n	800eea2 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800eed4:	e013      	b.n	800eefe <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eeda:	781a      	ldrb	r2, [r3, #0]
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eee6:	1c5a      	adds	r2, r3, #1
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800eef2:	b29b      	uxth	r3, r3
 800eef4:	3b01      	subs	r3, #1
 800eef6:	b29a      	uxth	r2, r3
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800eefe:	bf00      	nop
 800ef00:	373c      	adds	r7, #60	@ 0x3c
 800ef02:	46bd      	mov	sp, r7
 800ef04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef08:	4770      	bx	lr

0800ef0a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ef0a:	b480      	push	{r7}
 800ef0c:	b091      	sub	sp, #68	@ 0x44
 800ef0e:	af00      	add	r7, sp, #0
 800ef10:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ef18:	2b21      	cmp	r3, #33	@ 0x21
 800ef1a:	d151      	bne.n	800efc0 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ef22:	b29b      	uxth	r3, r3
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d132      	bne.n	800ef8e <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef30:	e853 3f00 	ldrex	r3, [r3]
 800ef34:	623b      	str	r3, [r7, #32]
   return(result);
 800ef36:	6a3b      	ldr	r3, [r7, #32]
 800ef38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ef3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	461a      	mov	r2, r3
 800ef44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef46:	633b      	str	r3, [r7, #48]	@ 0x30
 800ef48:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ef4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef4e:	e841 2300 	strex	r3, r2, [r1]
 800ef52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ef54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d1e6      	bne.n	800ef28 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef60:	693b      	ldr	r3, [r7, #16]
 800ef62:	e853 3f00 	ldrex	r3, [r3]
 800ef66:	60fb      	str	r3, [r7, #12]
   return(result);
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef6e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	461a      	mov	r2, r3
 800ef76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef78:	61fb      	str	r3, [r7, #28]
 800ef7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef7c:	69b9      	ldr	r1, [r7, #24]
 800ef7e:	69fa      	ldr	r2, [r7, #28]
 800ef80:	e841 2300 	strex	r3, r2, [r1]
 800ef84:	617b      	str	r3, [r7, #20]
   return(result);
 800ef86:	697b      	ldr	r3, [r7, #20]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d1e6      	bne.n	800ef5a <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800ef8c:	e018      	b.n	800efc0 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ef92:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800ef94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef96:	881b      	ldrh	r3, [r3, #0]
 800ef98:	461a      	mov	r2, r3
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800efa2:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800efa8:	1c9a      	adds	r2, r3, #2
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800efb4:	b29b      	uxth	r3, r3
 800efb6:	3b01      	subs	r3, #1
 800efb8:	b29a      	uxth	r2, r3
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800efc0:	bf00      	nop
 800efc2:	3744      	adds	r7, #68	@ 0x44
 800efc4:	46bd      	mov	sp, r7
 800efc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efca:	4770      	bx	lr

0800efcc <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800efcc:	b480      	push	{r7}
 800efce:	b091      	sub	sp, #68	@ 0x44
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800efda:	2b21      	cmp	r3, #33	@ 0x21
 800efdc:	d160      	bne.n	800f0a0 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800efe4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800efe6:	e057      	b.n	800f098 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800efee:	b29b      	uxth	r3, r3
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d133      	bne.n	800f05c <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	3308      	adds	r3, #8
 800effa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800effc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800effe:	e853 3f00 	ldrex	r3, [r3]
 800f002:	623b      	str	r3, [r7, #32]
   return(result);
 800f004:	6a3b      	ldr	r3, [r7, #32]
 800f006:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800f00a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	3308      	adds	r3, #8
 800f012:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f014:	633a      	str	r2, [r7, #48]	@ 0x30
 800f016:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f018:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f01a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f01c:	e841 2300 	strex	r3, r2, [r1]
 800f020:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f024:	2b00      	cmp	r3, #0
 800f026:	d1e5      	bne.n	800eff4 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f02e:	693b      	ldr	r3, [r7, #16]
 800f030:	e853 3f00 	ldrex	r3, [r3]
 800f034:	60fb      	str	r3, [r7, #12]
   return(result);
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f03c:	637b      	str	r3, [r7, #52]	@ 0x34
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	461a      	mov	r2, r3
 800f044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f046:	61fb      	str	r3, [r7, #28]
 800f048:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f04a:	69b9      	ldr	r1, [r7, #24]
 800f04c:	69fa      	ldr	r2, [r7, #28]
 800f04e:	e841 2300 	strex	r3, r2, [r1]
 800f052:	617b      	str	r3, [r7, #20]
   return(result);
 800f054:	697b      	ldr	r3, [r7, #20]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d1e6      	bne.n	800f028 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800f05a:	e021      	b.n	800f0a0 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	69db      	ldr	r3, [r3, #28]
 800f062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f066:	2b00      	cmp	r3, #0
 800f068:	d013      	beq.n	800f092 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f06e:	781a      	ldrb	r2, [r3, #0]
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f07a:	1c5a      	adds	r2, r3, #1
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f086:	b29b      	uxth	r3, r3
 800f088:	3b01      	subs	r3, #1
 800f08a:	b29a      	uxth	r2, r3
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800f092:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800f094:	3b01      	subs	r3, #1
 800f096:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800f098:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d1a4      	bne.n	800efe8 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800f09e:	e7ff      	b.n	800f0a0 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800f0a0:	bf00      	nop
 800f0a2:	3744      	adds	r7, #68	@ 0x44
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0aa:	4770      	bx	lr

0800f0ac <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f0ac:	b480      	push	{r7}
 800f0ae:	b091      	sub	sp, #68	@ 0x44
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f0ba:	2b21      	cmp	r3, #33	@ 0x21
 800f0bc:	d165      	bne.n	800f18a <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f0c4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800f0c6:	e05c      	b.n	800f182 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f0ce:	b29b      	uxth	r3, r3
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d133      	bne.n	800f13c <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	3308      	adds	r3, #8
 800f0da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0dc:	6a3b      	ldr	r3, [r7, #32]
 800f0de:	e853 3f00 	ldrex	r3, [r3]
 800f0e2:	61fb      	str	r3, [r7, #28]
   return(result);
 800f0e4:	69fb      	ldr	r3, [r7, #28]
 800f0e6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800f0ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	3308      	adds	r3, #8
 800f0f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f0f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f0f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f0fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f0fc:	e841 2300 	strex	r3, r2, [r1]
 800f100:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f104:	2b00      	cmp	r3, #0
 800f106:	d1e5      	bne.n	800f0d4 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	e853 3f00 	ldrex	r3, [r3]
 800f114:	60bb      	str	r3, [r7, #8]
   return(result);
 800f116:	68bb      	ldr	r3, [r7, #8]
 800f118:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f11c:	633b      	str	r3, [r7, #48]	@ 0x30
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	461a      	mov	r2, r3
 800f124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f126:	61bb      	str	r3, [r7, #24]
 800f128:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f12a:	6979      	ldr	r1, [r7, #20]
 800f12c:	69ba      	ldr	r2, [r7, #24]
 800f12e:	e841 2300 	strex	r3, r2, [r1]
 800f132:	613b      	str	r3, [r7, #16]
   return(result);
 800f134:	693b      	ldr	r3, [r7, #16]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d1e6      	bne.n	800f108 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800f13a:	e026      	b.n	800f18a <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	69db      	ldr	r3, [r3, #28]
 800f142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f146:	2b00      	cmp	r3, #0
 800f148:	d018      	beq.n	800f17c <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f14e:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800f150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f152:	881b      	ldrh	r3, [r3, #0]
 800f154:	461a      	mov	r2, r3
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f15e:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f164:	1c9a      	adds	r2, r3, #2
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f170:	b29b      	uxth	r3, r3
 800f172:	3b01      	subs	r3, #1
 800f174:	b29a      	uxth	r2, r3
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800f17c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800f17e:	3b01      	subs	r3, #1
 800f180:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800f182:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800f184:	2b00      	cmp	r3, #0
 800f186:	d19f      	bne.n	800f0c8 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800f188:	e7ff      	b.n	800f18a <UART_TxISR_16BIT_FIFOEN+0xde>
 800f18a:	bf00      	nop
 800f18c:	3744      	adds	r7, #68	@ 0x44
 800f18e:	46bd      	mov	sp, r7
 800f190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f194:	4770      	bx	lr

0800f196 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f196:	b580      	push	{r7, lr}
 800f198:	b088      	sub	sp, #32
 800f19a:	af00      	add	r7, sp, #0
 800f19c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	e853 3f00 	ldrex	r3, [r3]
 800f1aa:	60bb      	str	r3, [r7, #8]
   return(result);
 800f1ac:	68bb      	ldr	r3, [r7, #8]
 800f1ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f1b2:	61fb      	str	r3, [r7, #28]
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	461a      	mov	r2, r3
 800f1ba:	69fb      	ldr	r3, [r7, #28]
 800f1bc:	61bb      	str	r3, [r7, #24]
 800f1be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1c0:	6979      	ldr	r1, [r7, #20]
 800f1c2:	69ba      	ldr	r2, [r7, #24]
 800f1c4:	e841 2300 	strex	r3, r2, [r1]
 800f1c8:	613b      	str	r3, [r7, #16]
   return(result);
 800f1ca:	693b      	ldr	r3, [r7, #16]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d1e6      	bne.n	800f19e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	2220      	movs	r2, #32
 800f1d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2200      	movs	r2, #0
 800f1dc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f1de:	6878      	ldr	r0, [r7, #4]
 800f1e0:	f7fe fdb2 	bl	800dd48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f1e4:	bf00      	nop
 800f1e6:	3720      	adds	r7, #32
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	bd80      	pop	{r7, pc}

0800f1ec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b09c      	sub	sp, #112	@ 0x70
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f1fa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f204:	2b22      	cmp	r3, #34	@ 0x22
 800f206:	f040 80be 	bne.w	800f386 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f210:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f214:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800f218:	b2d9      	uxtb	r1, r3
 800f21a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800f21e:	b2da      	uxtb	r2, r3
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f224:	400a      	ands	r2, r1
 800f226:	b2d2      	uxtb	r2, r2
 800f228:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f22e:	1c5a      	adds	r2, r3, #1
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f23a:	b29b      	uxth	r3, r3
 800f23c:	3b01      	subs	r3, #1
 800f23e:	b29a      	uxth	r2, r3
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f24c:	b29b      	uxth	r3, r3
 800f24e:	2b00      	cmp	r3, #0
 800f250:	f040 80a1 	bne.w	800f396 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f25a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f25c:	e853 3f00 	ldrex	r3, [r3]
 800f260:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f262:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f264:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f268:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	461a      	mov	r2, r3
 800f270:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f272:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f274:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f276:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f278:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f27a:	e841 2300 	strex	r3, r2, [r1]
 800f27e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f280:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f282:	2b00      	cmp	r3, #0
 800f284:	d1e6      	bne.n	800f254 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	3308      	adds	r3, #8
 800f28c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f28e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f290:	e853 3f00 	ldrex	r3, [r3]
 800f294:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f298:	f023 0301 	bic.w	r3, r3, #1
 800f29c:	667b      	str	r3, [r7, #100]	@ 0x64
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	3308      	adds	r3, #8
 800f2a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f2a6:	647a      	str	r2, [r7, #68]	@ 0x44
 800f2a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f2ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f2ae:	e841 2300 	strex	r3, r2, [r1]
 800f2b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f2b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d1e5      	bne.n	800f286 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	2220      	movs	r2, #32
 800f2be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	4a33      	ldr	r2, [pc, #204]	@ (800f3a0 <UART_RxISR_8BIT+0x1b4>)
 800f2d4:	4293      	cmp	r3, r2
 800f2d6:	d01f      	beq.n	800f318 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	685b      	ldr	r3, [r3, #4]
 800f2de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d018      	beq.n	800f318 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2ee:	e853 3f00 	ldrex	r3, [r3]
 800f2f2:	623b      	str	r3, [r7, #32]
   return(result);
 800f2f4:	6a3b      	ldr	r3, [r7, #32]
 800f2f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f2fa:	663b      	str	r3, [r7, #96]	@ 0x60
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	461a      	mov	r2, r3
 800f302:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f304:	633b      	str	r3, [r7, #48]	@ 0x30
 800f306:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f308:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f30a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f30c:	e841 2300 	strex	r3, r2, [r1]
 800f310:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f314:	2b00      	cmp	r3, #0
 800f316:	d1e6      	bne.n	800f2e6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f31c:	2b01      	cmp	r3, #1
 800f31e:	d12e      	bne.n	800f37e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2200      	movs	r2, #0
 800f324:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f32c:	693b      	ldr	r3, [r7, #16]
 800f32e:	e853 3f00 	ldrex	r3, [r3]
 800f332:	60fb      	str	r3, [r7, #12]
   return(result);
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	f023 0310 	bic.w	r3, r3, #16
 800f33a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	461a      	mov	r2, r3
 800f342:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f344:	61fb      	str	r3, [r7, #28]
 800f346:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f348:	69b9      	ldr	r1, [r7, #24]
 800f34a:	69fa      	ldr	r2, [r7, #28]
 800f34c:	e841 2300 	strex	r3, r2, [r1]
 800f350:	617b      	str	r3, [r7, #20]
   return(result);
 800f352:	697b      	ldr	r3, [r7, #20]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d1e6      	bne.n	800f326 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	69db      	ldr	r3, [r3, #28]
 800f35e:	f003 0310 	and.w	r3, r3, #16
 800f362:	2b10      	cmp	r3, #16
 800f364:	d103      	bne.n	800f36e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	2210      	movs	r2, #16
 800f36c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f374:	4619      	mov	r1, r3
 800f376:	6878      	ldr	r0, [r7, #4]
 800f378:	f7fe fd04 	bl	800dd84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f37c:	e00b      	b.n	800f396 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800f37e:	6878      	ldr	r0, [r7, #4]
 800f380:	f008 f8d8 	bl	8017534 <HAL_UART_RxCpltCallback>
}
 800f384:	e007      	b.n	800f396 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	699a      	ldr	r2, [r3, #24]
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	f042 0208 	orr.w	r2, r2, #8
 800f394:	619a      	str	r2, [r3, #24]
}
 800f396:	bf00      	nop
 800f398:	3770      	adds	r7, #112	@ 0x70
 800f39a:	46bd      	mov	sp, r7
 800f39c:	bd80      	pop	{r7, pc}
 800f39e:	bf00      	nop
 800f3a0:	40008000 	.word	0x40008000

0800f3a4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b09c      	sub	sp, #112	@ 0x70
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f3b2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f3bc:	2b22      	cmp	r3, #34	@ 0x22
 800f3be:	f040 80be 	bne.w	800f53e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3c8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f3d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800f3d2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800f3d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800f3da:	4013      	ands	r3, r2
 800f3dc:	b29a      	uxth	r2, r3
 800f3de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f3e0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f3e6:	1c9a      	adds	r2, r3, #2
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f3f2:	b29b      	uxth	r3, r3
 800f3f4:	3b01      	subs	r3, #1
 800f3f6:	b29a      	uxth	r2, r3
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f404:	b29b      	uxth	r3, r3
 800f406:	2b00      	cmp	r3, #0
 800f408:	f040 80a1 	bne.w	800f54e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f412:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f414:	e853 3f00 	ldrex	r3, [r3]
 800f418:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f41a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f41c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f420:	667b      	str	r3, [r7, #100]	@ 0x64
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	461a      	mov	r2, r3
 800f428:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f42a:	657b      	str	r3, [r7, #84]	@ 0x54
 800f42c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f42e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f430:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f432:	e841 2300 	strex	r3, r2, [r1]
 800f436:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f438:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d1e6      	bne.n	800f40c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	3308      	adds	r3, #8
 800f444:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f448:	e853 3f00 	ldrex	r3, [r3]
 800f44c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f44e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f450:	f023 0301 	bic.w	r3, r3, #1
 800f454:	663b      	str	r3, [r7, #96]	@ 0x60
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	3308      	adds	r3, #8
 800f45c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f45e:	643a      	str	r2, [r7, #64]	@ 0x40
 800f460:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f462:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f464:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f466:	e841 2300 	strex	r3, r2, [r1]
 800f46a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f46c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d1e5      	bne.n	800f43e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	2220      	movs	r2, #32
 800f476:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	2200      	movs	r2, #0
 800f47e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2200      	movs	r2, #0
 800f484:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	4a33      	ldr	r2, [pc, #204]	@ (800f558 <UART_RxISR_16BIT+0x1b4>)
 800f48c:	4293      	cmp	r3, r2
 800f48e:	d01f      	beq.n	800f4d0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	685b      	ldr	r3, [r3, #4]
 800f496:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d018      	beq.n	800f4d0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4a4:	6a3b      	ldr	r3, [r7, #32]
 800f4a6:	e853 3f00 	ldrex	r3, [r3]
 800f4aa:	61fb      	str	r3, [r7, #28]
   return(result);
 800f4ac:	69fb      	ldr	r3, [r7, #28]
 800f4ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f4b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	461a      	mov	r2, r3
 800f4ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f4bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f4be:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f4c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f4c4:	e841 2300 	strex	r3, r2, [r1]
 800f4c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d1e6      	bne.n	800f49e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f4d4:	2b01      	cmp	r3, #1
 800f4d6:	d12e      	bne.n	800f536 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2200      	movs	r2, #0
 800f4dc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	e853 3f00 	ldrex	r3, [r3]
 800f4ea:	60bb      	str	r3, [r7, #8]
   return(result);
 800f4ec:	68bb      	ldr	r3, [r7, #8]
 800f4ee:	f023 0310 	bic.w	r3, r3, #16
 800f4f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	461a      	mov	r2, r3
 800f4fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f4fc:	61bb      	str	r3, [r7, #24]
 800f4fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f500:	6979      	ldr	r1, [r7, #20]
 800f502:	69ba      	ldr	r2, [r7, #24]
 800f504:	e841 2300 	strex	r3, r2, [r1]
 800f508:	613b      	str	r3, [r7, #16]
   return(result);
 800f50a:	693b      	ldr	r3, [r7, #16]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d1e6      	bne.n	800f4de <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	69db      	ldr	r3, [r3, #28]
 800f516:	f003 0310 	and.w	r3, r3, #16
 800f51a:	2b10      	cmp	r3, #16
 800f51c:	d103      	bne.n	800f526 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	2210      	movs	r2, #16
 800f524:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f52c:	4619      	mov	r1, r3
 800f52e:	6878      	ldr	r0, [r7, #4]
 800f530:	f7fe fc28 	bl	800dd84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f534:	e00b      	b.n	800f54e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800f536:	6878      	ldr	r0, [r7, #4]
 800f538:	f007 fffc 	bl	8017534 <HAL_UART_RxCpltCallback>
}
 800f53c:	e007      	b.n	800f54e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	699a      	ldr	r2, [r3, #24]
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	f042 0208 	orr.w	r2, r2, #8
 800f54c:	619a      	str	r2, [r3, #24]
}
 800f54e:	bf00      	nop
 800f550:	3770      	adds	r7, #112	@ 0x70
 800f552:	46bd      	mov	sp, r7
 800f554:	bd80      	pop	{r7, pc}
 800f556:	bf00      	nop
 800f558:	40008000 	.word	0x40008000

0800f55c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b0ac      	sub	sp, #176	@ 0xb0
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f56a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	69db      	ldr	r3, [r3, #28]
 800f574:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	689b      	ldr	r3, [r3, #8]
 800f588:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f592:	2b22      	cmp	r3, #34	@ 0x22
 800f594:	f040 8183 	bne.w	800f89e <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f59e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f5a2:	e126      	b.n	800f7f2 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5aa:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f5ae:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800f5b2:	b2d9      	uxtb	r1, r3
 800f5b4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800f5b8:	b2da      	uxtb	r2, r3
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f5be:	400a      	ands	r2, r1
 800f5c0:	b2d2      	uxtb	r2, r2
 800f5c2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f5c8:	1c5a      	adds	r2, r3, #1
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f5d4:	b29b      	uxth	r3, r3
 800f5d6:	3b01      	subs	r3, #1
 800f5d8:	b29a      	uxth	r2, r3
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	69db      	ldr	r3, [r3, #28]
 800f5e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f5ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f5ee:	f003 0307 	and.w	r3, r3, #7
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d053      	beq.n	800f69e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f5f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f5fa:	f003 0301 	and.w	r3, r3, #1
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d011      	beq.n	800f626 <UART_RxISR_8BIT_FIFOEN+0xca>
 800f602:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f606:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d00b      	beq.n	800f626 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	2201      	movs	r2, #1
 800f614:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f61c:	f043 0201 	orr.w	r2, r3, #1
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f626:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f62a:	f003 0302 	and.w	r3, r3, #2
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d011      	beq.n	800f656 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f632:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f636:	f003 0301 	and.w	r3, r3, #1
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d00b      	beq.n	800f656 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	2202      	movs	r2, #2
 800f644:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f64c:	f043 0204 	orr.w	r2, r3, #4
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f656:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f65a:	f003 0304 	and.w	r3, r3, #4
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d011      	beq.n	800f686 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f662:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f666:	f003 0301 	and.w	r3, r3, #1
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d00b      	beq.n	800f686 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	2204      	movs	r2, #4
 800f674:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f67c:	f043 0202 	orr.w	r2, r3, #2
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d006      	beq.n	800f69e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f690:	6878      	ldr	r0, [r7, #4]
 800f692:	f7fe fb6d 	bl	800dd70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2200      	movs	r2, #0
 800f69a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f6a4:	b29b      	uxth	r3, r3
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	f040 80a3 	bne.w	800f7f2 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f6b4:	e853 3f00 	ldrex	r3, [r3]
 800f6b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800f6ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f6bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f6c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	461a      	mov	r2, r3
 800f6ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f6ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f6d0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6d2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800f6d4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800f6d6:	e841 2300 	strex	r3, r2, [r1]
 800f6da:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800f6dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d1e4      	bne.n	800f6ac <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	3308      	adds	r3, #8
 800f6e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f6ec:	e853 3f00 	ldrex	r3, [r3]
 800f6f0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800f6f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f6f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f6f8:	f023 0301 	bic.w	r3, r3, #1
 800f6fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	3308      	adds	r3, #8
 800f706:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f70a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800f70c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f70e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800f710:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f712:	e841 2300 	strex	r3, r2, [r1]
 800f716:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800f718:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d1e1      	bne.n	800f6e2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	2220      	movs	r2, #32
 800f722:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	2200      	movs	r2, #0
 800f72a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	2200      	movs	r2, #0
 800f730:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	4a60      	ldr	r2, [pc, #384]	@ (800f8b8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800f738:	4293      	cmp	r3, r2
 800f73a:	d021      	beq.n	800f780 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	685b      	ldr	r3, [r3, #4]
 800f742:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f746:	2b00      	cmp	r3, #0
 800f748:	d01a      	beq.n	800f780 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f750:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f752:	e853 3f00 	ldrex	r3, [r3]
 800f756:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f758:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f75a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f75e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	461a      	mov	r2, r3
 800f768:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f76c:	657b      	str	r3, [r7, #84]	@ 0x54
 800f76e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f770:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f772:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f774:	e841 2300 	strex	r3, r2, [r1]
 800f778:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f77a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d1e4      	bne.n	800f74a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f784:	2b01      	cmp	r3, #1
 800f786:	d130      	bne.n	800f7ea <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	2200      	movs	r2, #0
 800f78c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f796:	e853 3f00 	ldrex	r3, [r3]
 800f79a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f79c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f79e:	f023 0310 	bic.w	r3, r3, #16
 800f7a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	461a      	mov	r2, r3
 800f7ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f7b0:	643b      	str	r3, [r7, #64]	@ 0x40
 800f7b2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f7b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f7b8:	e841 2300 	strex	r3, r2, [r1]
 800f7bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f7be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d1e4      	bne.n	800f78e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	69db      	ldr	r3, [r3, #28]
 800f7ca:	f003 0310 	and.w	r3, r3, #16
 800f7ce:	2b10      	cmp	r3, #16
 800f7d0:	d103      	bne.n	800f7da <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	2210      	movs	r2, #16
 800f7d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f7e0:	4619      	mov	r1, r3
 800f7e2:	6878      	ldr	r0, [r7, #4]
 800f7e4:	f7fe face 	bl	800dd84 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800f7e8:	e00e      	b.n	800f808 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800f7ea:	6878      	ldr	r0, [r7, #4]
 800f7ec:	f007 fea2 	bl	8017534 <HAL_UART_RxCpltCallback>
        break;
 800f7f0:	e00a      	b.n	800f808 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f7f2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d006      	beq.n	800f808 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800f7fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f7fe:	f003 0320 	and.w	r3, r3, #32
 800f802:	2b00      	cmp	r3, #0
 800f804:	f47f aece 	bne.w	800f5a4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f80e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f812:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f816:	2b00      	cmp	r3, #0
 800f818:	d049      	beq.n	800f8ae <UART_RxISR_8BIT_FIFOEN+0x352>
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f820:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800f824:	429a      	cmp	r2, r3
 800f826:	d242      	bcs.n	800f8ae <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	3308      	adds	r3, #8
 800f82e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f830:	6a3b      	ldr	r3, [r7, #32]
 800f832:	e853 3f00 	ldrex	r3, [r3]
 800f836:	61fb      	str	r3, [r7, #28]
   return(result);
 800f838:	69fb      	ldr	r3, [r7, #28]
 800f83a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f83e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	3308      	adds	r3, #8
 800f848:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800f84c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f84e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f850:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f852:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f854:	e841 2300 	strex	r3, r2, [r1]
 800f858:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d1e3      	bne.n	800f828 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	4a16      	ldr	r2, [pc, #88]	@ (800f8bc <UART_RxISR_8BIT_FIFOEN+0x360>)
 800f864:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	e853 3f00 	ldrex	r3, [r3]
 800f872:	60bb      	str	r3, [r7, #8]
   return(result);
 800f874:	68bb      	ldr	r3, [r7, #8]
 800f876:	f043 0320 	orr.w	r3, r3, #32
 800f87a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	461a      	mov	r2, r3
 800f884:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f888:	61bb      	str	r3, [r7, #24]
 800f88a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f88c:	6979      	ldr	r1, [r7, #20]
 800f88e:	69ba      	ldr	r2, [r7, #24]
 800f890:	e841 2300 	strex	r3, r2, [r1]
 800f894:	613b      	str	r3, [r7, #16]
   return(result);
 800f896:	693b      	ldr	r3, [r7, #16]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d1e4      	bne.n	800f866 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f89c:	e007      	b.n	800f8ae <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	699a      	ldr	r2, [r3, #24]
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	f042 0208 	orr.w	r2, r2, #8
 800f8ac:	619a      	str	r2, [r3, #24]
}
 800f8ae:	bf00      	nop
 800f8b0:	37b0      	adds	r7, #176	@ 0xb0
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	bd80      	pop	{r7, pc}
 800f8b6:	bf00      	nop
 800f8b8:	40008000 	.word	0x40008000
 800f8bc:	0800f1ed 	.word	0x0800f1ed

0800f8c0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b0ae      	sub	sp, #184	@ 0xb8
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f8ce:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	69db      	ldr	r3, [r3, #28]
 800f8d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	689b      	ldr	r3, [r3, #8]
 800f8ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f8f6:	2b22      	cmp	r3, #34	@ 0x22
 800f8f8:	f040 8187 	bne.w	800fc0a <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f902:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f906:	e12a      	b.n	800fb5e <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f90e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f916:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800f91a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800f91e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800f922:	4013      	ands	r3, r2
 800f924:	b29a      	uxth	r2, r3
 800f926:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f92a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f930:	1c9a      	adds	r2, r3, #2
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f93c:	b29b      	uxth	r3, r3
 800f93e:	3b01      	subs	r3, #1
 800f940:	b29a      	uxth	r2, r3
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	69db      	ldr	r3, [r3, #28]
 800f94e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f952:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f956:	f003 0307 	and.w	r3, r3, #7
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d053      	beq.n	800fa06 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f95e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f962:	f003 0301 	and.w	r3, r3, #1
 800f966:	2b00      	cmp	r3, #0
 800f968:	d011      	beq.n	800f98e <UART_RxISR_16BIT_FIFOEN+0xce>
 800f96a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f96e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f972:	2b00      	cmp	r3, #0
 800f974:	d00b      	beq.n	800f98e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	2201      	movs	r2, #1
 800f97c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f984:	f043 0201 	orr.w	r2, r3, #1
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f98e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f992:	f003 0302 	and.w	r3, r3, #2
 800f996:	2b00      	cmp	r3, #0
 800f998:	d011      	beq.n	800f9be <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f99a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f99e:	f003 0301 	and.w	r3, r3, #1
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d00b      	beq.n	800f9be <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	2202      	movs	r2, #2
 800f9ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f9b4:	f043 0204 	orr.w	r2, r3, #4
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f9be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f9c2:	f003 0304 	and.w	r3, r3, #4
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d011      	beq.n	800f9ee <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f9ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f9ce:	f003 0301 	and.w	r3, r3, #1
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d00b      	beq.n	800f9ee <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	2204      	movs	r2, #4
 800f9dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f9e4:	f043 0202 	orr.w	r2, r3, #2
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d006      	beq.n	800fa06 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f9f8:	6878      	ldr	r0, [r7, #4]
 800f9fa:	f7fe f9b9 	bl	800dd70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	2200      	movs	r2, #0
 800fa02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fa0c:	b29b      	uxth	r3, r3
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	f040 80a5 	bne.w	800fb5e <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800fa1c:	e853 3f00 	ldrex	r3, [r3]
 800fa20:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800fa22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fa24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fa28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	461a      	mov	r2, r3
 800fa32:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fa36:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800fa3a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa3c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800fa3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800fa42:	e841 2300 	strex	r3, r2, [r1]
 800fa46:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800fa48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d1e2      	bne.n	800fa14 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	3308      	adds	r3, #8
 800fa54:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fa58:	e853 3f00 	ldrex	r3, [r3]
 800fa5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800fa5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fa60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fa64:	f023 0301 	bic.w	r3, r3, #1
 800fa68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	3308      	adds	r3, #8
 800fa72:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800fa76:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800fa78:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa7a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800fa7c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fa7e:	e841 2300 	strex	r3, r2, [r1]
 800fa82:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800fa84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d1e1      	bne.n	800fa4e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	2220      	movs	r2, #32
 800fa8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	2200      	movs	r2, #0
 800fa96:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	4a60      	ldr	r2, [pc, #384]	@ (800fc24 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800faa4:	4293      	cmp	r3, r2
 800faa6:	d021      	beq.n	800faec <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	685b      	ldr	r3, [r3, #4]
 800faae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d01a      	beq.n	800faec <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fabc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fabe:	e853 3f00 	ldrex	r3, [r3]
 800fac2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fac4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fac6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800faca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	461a      	mov	r2, r3
 800fad4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fad8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fada:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fadc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fade:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fae0:	e841 2300 	strex	r3, r2, [r1]
 800fae4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fae6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d1e4      	bne.n	800fab6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800faf0:	2b01      	cmp	r3, #1
 800faf2:	d130      	bne.n	800fb56 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2200      	movs	r2, #0
 800faf8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb02:	e853 3f00 	ldrex	r3, [r3]
 800fb06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fb08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb0a:	f023 0310 	bic.w	r3, r3, #16
 800fb0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	461a      	mov	r2, r3
 800fb18:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800fb1c:	647b      	str	r3, [r7, #68]	@ 0x44
 800fb1e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fb22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fb24:	e841 2300 	strex	r3, r2, [r1]
 800fb28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fb2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d1e4      	bne.n	800fafa <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	69db      	ldr	r3, [r3, #28]
 800fb36:	f003 0310 	and.w	r3, r3, #16
 800fb3a:	2b10      	cmp	r3, #16
 800fb3c:	d103      	bne.n	800fb46 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	2210      	movs	r2, #16
 800fb44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800fb4c:	4619      	mov	r1, r3
 800fb4e:	6878      	ldr	r0, [r7, #4]
 800fb50:	f7fe f918 	bl	800dd84 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800fb54:	e00e      	b.n	800fb74 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800fb56:	6878      	ldr	r0, [r7, #4]
 800fb58:	f007 fcec 	bl	8017534 <HAL_UART_RxCpltCallback>
        break;
 800fb5c:	e00a      	b.n	800fb74 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fb5e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d006      	beq.n	800fb74 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800fb66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800fb6a:	f003 0320 	and.w	r3, r3, #32
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	f47f aeca 	bne.w	800f908 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fb7a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800fb7e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d049      	beq.n	800fc1a <UART_RxISR_16BIT_FIFOEN+0x35a>
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800fb8c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800fb90:	429a      	cmp	r2, r3
 800fb92:	d242      	bcs.n	800fc1a <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	3308      	adds	r3, #8
 800fb9a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb9e:	e853 3f00 	ldrex	r3, [r3]
 800fba2:	623b      	str	r3, [r7, #32]
   return(result);
 800fba4:	6a3b      	ldr	r3, [r7, #32]
 800fba6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fbaa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	3308      	adds	r3, #8
 800fbb4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800fbb8:	633a      	str	r2, [r7, #48]	@ 0x30
 800fbba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbbc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fbbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fbc0:	e841 2300 	strex	r3, r2, [r1]
 800fbc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fbc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d1e3      	bne.n	800fb94 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	4a16      	ldr	r2, [pc, #88]	@ (800fc28 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800fbd0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbd8:	693b      	ldr	r3, [r7, #16]
 800fbda:	e853 3f00 	ldrex	r3, [r3]
 800fbde:	60fb      	str	r3, [r7, #12]
   return(result);
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	f043 0320 	orr.w	r3, r3, #32
 800fbe6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	461a      	mov	r2, r3
 800fbf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fbf4:	61fb      	str	r3, [r7, #28]
 800fbf6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbf8:	69b9      	ldr	r1, [r7, #24]
 800fbfa:	69fa      	ldr	r2, [r7, #28]
 800fbfc:	e841 2300 	strex	r3, r2, [r1]
 800fc00:	617b      	str	r3, [r7, #20]
   return(result);
 800fc02:	697b      	ldr	r3, [r7, #20]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d1e4      	bne.n	800fbd2 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fc08:	e007      	b.n	800fc1a <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	699a      	ldr	r2, [r3, #24]
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	f042 0208 	orr.w	r2, r2, #8
 800fc18:	619a      	str	r2, [r3, #24]
}
 800fc1a:	bf00      	nop
 800fc1c:	37b8      	adds	r7, #184	@ 0xb8
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd80      	pop	{r7, pc}
 800fc22:	bf00      	nop
 800fc24:	40008000 	.word	0x40008000
 800fc28:	0800f3a5 	.word	0x0800f3a5

0800fc2c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fc2c:	b480      	push	{r7}
 800fc2e:	b083      	sub	sp, #12
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fc34:	bf00      	nop
 800fc36:	370c      	adds	r7, #12
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3e:	4770      	bx	lr

0800fc40 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fc40:	b480      	push	{r7}
 800fc42:	b083      	sub	sp, #12
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fc48:	bf00      	nop
 800fc4a:	370c      	adds	r7, #12
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc52:	4770      	bx	lr

0800fc54 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fc54:	b480      	push	{r7}
 800fc56:	b083      	sub	sp, #12
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fc5c:	bf00      	nop
 800fc5e:	370c      	adds	r7, #12
 800fc60:	46bd      	mov	sp, r7
 800fc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc66:	4770      	bx	lr

0800fc68 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fc68:	b480      	push	{r7}
 800fc6a:	b085      	sub	sp, #20
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fc76:	2b01      	cmp	r3, #1
 800fc78:	d101      	bne.n	800fc7e <HAL_UARTEx_DisableFifoMode+0x16>
 800fc7a:	2302      	movs	r3, #2
 800fc7c:	e027      	b.n	800fcce <HAL_UARTEx_DisableFifoMode+0x66>
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	2201      	movs	r2, #1
 800fc82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	2224      	movs	r2, #36	@ 0x24
 800fc8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	681a      	ldr	r2, [r3, #0]
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	f022 0201 	bic.w	r2, r2, #1
 800fca4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800fcac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	68fa      	ldr	r2, [r7, #12]
 800fcba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	2220      	movs	r2, #32
 800fcc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fccc:	2300      	movs	r3, #0
}
 800fcce:	4618      	mov	r0, r3
 800fcd0:	3714      	adds	r7, #20
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd8:	4770      	bx	lr

0800fcda <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fcda:	b580      	push	{r7, lr}
 800fcdc:	b084      	sub	sp, #16
 800fcde:	af00      	add	r7, sp, #0
 800fce0:	6078      	str	r0, [r7, #4]
 800fce2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fcea:	2b01      	cmp	r3, #1
 800fcec:	d101      	bne.n	800fcf2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fcee:	2302      	movs	r3, #2
 800fcf0:	e02d      	b.n	800fd4e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	2201      	movs	r2, #1
 800fcf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	2224      	movs	r2, #36	@ 0x24
 800fcfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	681a      	ldr	r2, [r3, #0]
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	f022 0201 	bic.w	r2, r2, #1
 800fd18:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	689b      	ldr	r3, [r3, #8]
 800fd20:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	683a      	ldr	r2, [r7, #0]
 800fd2a:	430a      	orrs	r2, r1
 800fd2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fd2e:	6878      	ldr	r0, [r7, #4]
 800fd30:	f000 f850 	bl	800fdd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	68fa      	ldr	r2, [r7, #12]
 800fd3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	2220      	movs	r2, #32
 800fd40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	2200      	movs	r2, #0
 800fd48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fd4c:	2300      	movs	r3, #0
}
 800fd4e:	4618      	mov	r0, r3
 800fd50:	3710      	adds	r7, #16
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}

0800fd56 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fd56:	b580      	push	{r7, lr}
 800fd58:	b084      	sub	sp, #16
 800fd5a:	af00      	add	r7, sp, #0
 800fd5c:	6078      	str	r0, [r7, #4]
 800fd5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fd66:	2b01      	cmp	r3, #1
 800fd68:	d101      	bne.n	800fd6e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fd6a:	2302      	movs	r3, #2
 800fd6c:	e02d      	b.n	800fdca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	2201      	movs	r2, #1
 800fd72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	2224      	movs	r2, #36	@ 0x24
 800fd7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	681a      	ldr	r2, [r3, #0]
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	f022 0201 	bic.w	r2, r2, #1
 800fd94:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	689b      	ldr	r3, [r3, #8]
 800fd9c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	683a      	ldr	r2, [r7, #0]
 800fda6:	430a      	orrs	r2, r1
 800fda8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fdaa:	6878      	ldr	r0, [r7, #4]
 800fdac:	f000 f812 	bl	800fdd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	68fa      	ldr	r2, [r7, #12]
 800fdb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	2220      	movs	r2, #32
 800fdbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fdc8:	2300      	movs	r3, #0
}
 800fdca:	4618      	mov	r0, r3
 800fdcc:	3710      	adds	r7, #16
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	bd80      	pop	{r7, pc}
	...

0800fdd4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fdd4:	b480      	push	{r7}
 800fdd6:	b085      	sub	sp, #20
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d108      	bne.n	800fdf6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	2201      	movs	r2, #1
 800fde8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2201      	movs	r2, #1
 800fdf0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fdf4:	e031      	b.n	800fe5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fdf6:	2308      	movs	r3, #8
 800fdf8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fdfa:	2308      	movs	r3, #8
 800fdfc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	689b      	ldr	r3, [r3, #8]
 800fe04:	0e5b      	lsrs	r3, r3, #25
 800fe06:	b2db      	uxtb	r3, r3
 800fe08:	f003 0307 	and.w	r3, r3, #7
 800fe0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	689b      	ldr	r3, [r3, #8]
 800fe14:	0f5b      	lsrs	r3, r3, #29
 800fe16:	b2db      	uxtb	r3, r3
 800fe18:	f003 0307 	and.w	r3, r3, #7
 800fe1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fe1e:	7bbb      	ldrb	r3, [r7, #14]
 800fe20:	7b3a      	ldrb	r2, [r7, #12]
 800fe22:	4911      	ldr	r1, [pc, #68]	@ (800fe68 <UARTEx_SetNbDataToProcess+0x94>)
 800fe24:	5c8a      	ldrb	r2, [r1, r2]
 800fe26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fe2a:	7b3a      	ldrb	r2, [r7, #12]
 800fe2c:	490f      	ldr	r1, [pc, #60]	@ (800fe6c <UARTEx_SetNbDataToProcess+0x98>)
 800fe2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fe30:	fb93 f3f2 	sdiv	r3, r3, r2
 800fe34:	b29a      	uxth	r2, r3
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fe3c:	7bfb      	ldrb	r3, [r7, #15]
 800fe3e:	7b7a      	ldrb	r2, [r7, #13]
 800fe40:	4909      	ldr	r1, [pc, #36]	@ (800fe68 <UARTEx_SetNbDataToProcess+0x94>)
 800fe42:	5c8a      	ldrb	r2, [r1, r2]
 800fe44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fe48:	7b7a      	ldrb	r2, [r7, #13]
 800fe4a:	4908      	ldr	r1, [pc, #32]	@ (800fe6c <UARTEx_SetNbDataToProcess+0x98>)
 800fe4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fe4e:	fb93 f3f2 	sdiv	r3, r3, r2
 800fe52:	b29a      	uxth	r2, r3
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800fe5a:	bf00      	nop
 800fe5c:	3714      	adds	r7, #20
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe64:	4770      	bx	lr
 800fe66:	bf00      	nop
 800fe68:	0801eddc 	.word	0x0801eddc
 800fe6c:	0801ede4 	.word	0x0801ede4

0800fe70 <LL_DMA_ConfigTransfer>:
{
 800fe70:	b480      	push	{r7}
 800fe72:	b087      	sub	sp, #28
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	60f8      	str	r0, [r7, #12]
 800fe78:	60b9      	str	r1, [r7, #8]
 800fe7a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 800fe80:	4a0e      	ldr	r2, [pc, #56]	@ (800febc <LL_DMA_ConfigTransfer+0x4c>)
 800fe82:	68bb      	ldr	r3, [r7, #8]
 800fe84:	4413      	add	r3, r2
 800fe86:	781b      	ldrb	r3, [r3, #0]
 800fe88:	461a      	mov	r2, r3
 800fe8a:	697b      	ldr	r3, [r7, #20]
 800fe8c:	4413      	add	r3, r2
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800fe94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fe98:	4908      	ldr	r1, [pc, #32]	@ (800febc <LL_DMA_ConfigTransfer+0x4c>)
 800fe9a:	68ba      	ldr	r2, [r7, #8]
 800fe9c:	440a      	add	r2, r1
 800fe9e:	7812      	ldrb	r2, [r2, #0]
 800fea0:	4611      	mov	r1, r2
 800fea2:	697a      	ldr	r2, [r7, #20]
 800fea4:	440a      	add	r2, r1
 800fea6:	4611      	mov	r1, r2
 800fea8:	687a      	ldr	r2, [r7, #4]
 800feaa:	4313      	orrs	r3, r2
 800feac:	600b      	str	r3, [r1, #0]
}
 800feae:	bf00      	nop
 800feb0:	371c      	adds	r7, #28
 800feb2:	46bd      	mov	sp, r7
 800feb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb8:	4770      	bx	lr
 800feba:	bf00      	nop
 800febc:	0801edec 	.word	0x0801edec

0800fec0 <LL_DMA_SetDataLength>:
{
 800fec0:	b480      	push	{r7}
 800fec2:	b087      	sub	sp, #28
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	60f8      	str	r0, [r7, #12]
 800fec8:	60b9      	str	r1, [r7, #8]
 800feca:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 800fed0:	4a0d      	ldr	r2, [pc, #52]	@ (800ff08 <LL_DMA_SetDataLength+0x48>)
 800fed2:	68bb      	ldr	r3, [r7, #8]
 800fed4:	4413      	add	r3, r2
 800fed6:	781b      	ldrb	r3, [r3, #0]
 800fed8:	461a      	mov	r2, r3
 800feda:	697b      	ldr	r3, [r7, #20]
 800fedc:	4413      	add	r3, r2
 800fede:	685b      	ldr	r3, [r3, #4]
 800fee0:	0c1b      	lsrs	r3, r3, #16
 800fee2:	041b      	lsls	r3, r3, #16
 800fee4:	4908      	ldr	r1, [pc, #32]	@ (800ff08 <LL_DMA_SetDataLength+0x48>)
 800fee6:	68ba      	ldr	r2, [r7, #8]
 800fee8:	440a      	add	r2, r1
 800feea:	7812      	ldrb	r2, [r2, #0]
 800feec:	4611      	mov	r1, r2
 800feee:	697a      	ldr	r2, [r7, #20]
 800fef0:	440a      	add	r2, r1
 800fef2:	4611      	mov	r1, r2
 800fef4:	687a      	ldr	r2, [r7, #4]
 800fef6:	4313      	orrs	r3, r2
 800fef8:	604b      	str	r3, [r1, #4]
}
 800fefa:	bf00      	nop
 800fefc:	371c      	adds	r7, #28
 800fefe:	46bd      	mov	sp, r7
 800ff00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff04:	4770      	bx	lr
 800ff06:	bf00      	nop
 800ff08:	0801edec 	.word	0x0801edec

0800ff0c <LL_DMA_SetMemoryAddress>:
{
 800ff0c:	b480      	push	{r7}
 800ff0e:	b087      	sub	sp, #28
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	60f8      	str	r0, [r7, #12]
 800ff14:	60b9      	str	r1, [r7, #8]
 800ff16:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 800ff1c:	4a07      	ldr	r2, [pc, #28]	@ (800ff3c <LL_DMA_SetMemoryAddress+0x30>)
 800ff1e:	68bb      	ldr	r3, [r7, #8]
 800ff20:	4413      	add	r3, r2
 800ff22:	781b      	ldrb	r3, [r3, #0]
 800ff24:	461a      	mov	r2, r3
 800ff26:	697b      	ldr	r3, [r7, #20]
 800ff28:	4413      	add	r3, r2
 800ff2a:	461a      	mov	r2, r3
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	60d3      	str	r3, [r2, #12]
}
 800ff30:	bf00      	nop
 800ff32:	371c      	adds	r7, #28
 800ff34:	46bd      	mov	sp, r7
 800ff36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3a:	4770      	bx	lr
 800ff3c:	0801edec 	.word	0x0801edec

0800ff40 <LL_DMA_SetPeriphAddress>:
{
 800ff40:	b480      	push	{r7}
 800ff42:	b087      	sub	sp, #28
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	60f8      	str	r0, [r7, #12]
 800ff48:	60b9      	str	r1, [r7, #8]
 800ff4a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 800ff50:	4a07      	ldr	r2, [pc, #28]	@ (800ff70 <LL_DMA_SetPeriphAddress+0x30>)
 800ff52:	68bb      	ldr	r3, [r7, #8]
 800ff54:	4413      	add	r3, r2
 800ff56:	781b      	ldrb	r3, [r3, #0]
 800ff58:	461a      	mov	r2, r3
 800ff5a:	697b      	ldr	r3, [r7, #20]
 800ff5c:	4413      	add	r3, r2
 800ff5e:	461a      	mov	r2, r3
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	6093      	str	r3, [r2, #8]
}
 800ff64:	bf00      	nop
 800ff66:	371c      	adds	r7, #28
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6e:	4770      	bx	lr
 800ff70:	0801edec 	.word	0x0801edec

0800ff74 <LL_DMA_SetPeriphRequest>:
{
 800ff74:	b480      	push	{r7}
 800ff76:	b087      	sub	sp, #28
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	60f8      	str	r0, [r7, #12]
 800ff7c:	60b9      	str	r1, [r7, #8]
 800ff7e:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	0a9b      	lsrs	r3, r3, #10
 800ff84:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800ff88:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
 800ff8c:	00db      	lsls	r3, r3, #3
 800ff8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 800ff90:	68ba      	ldr	r2, [r7, #8]
 800ff92:	697b      	ldr	r3, [r7, #20]
 800ff94:	4413      	add	r3, r2
 800ff96:	009b      	lsls	r3, r3, #2
 800ff98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ff9c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800ffa6:	68ba      	ldr	r2, [r7, #8]
 800ffa8:	697b      	ldr	r3, [r7, #20]
 800ffaa:	4413      	add	r3, r2
 800ffac:	009b      	lsls	r3, r3, #2
 800ffae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ffb2:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800ffb6:	687a      	ldr	r2, [r7, #4]
 800ffb8:	430a      	orrs	r2, r1
 800ffba:	601a      	str	r2, [r3, #0]
}
 800ffbc:	bf00      	nop
 800ffbe:	371c      	adds	r7, #28
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc6:	4770      	bx	lr

0800ffc8 <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b084      	sub	sp, #16
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	60f8      	str	r0, [r7, #12]
 800ffd0:	60b9      	str	r1, [r7, #8]
 800ffd2:	607a      	str	r2, [r7, #4]
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	689a      	ldr	r2, [r3, #8]
                        DMA_InitStruct->Mode                   | \
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	68db      	ldr	r3, [r3, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800ffdc:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->Mode                   | \
 800ffe2:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	695b      	ldr	r3, [r3, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800ffe8:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	699b      	ldr	r3, [r3, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800ffee:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	69db      	ldr	r3, [r3, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800fff4:	431a      	orrs	r2, r3
                        DMA_InitStruct->Priority);
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800fffa:	4313      	orrs	r3, r2
 800fffc:	461a      	mov	r2, r3
 800fffe:	68b9      	ldr	r1, [r7, #8]
 8010000:	68f8      	ldr	r0, [r7, #12]
 8010002:	f7ff ff35 	bl	800fe70 <LL_DMA_ConfigTransfer>

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	685b      	ldr	r3, [r3, #4]
 801000a:	461a      	mov	r2, r3
 801000c:	68b9      	ldr	r1, [r7, #8]
 801000e:	68f8      	ldr	r0, [r7, #12]
 8010010:	f7ff ff7c 	bl	800ff0c <LL_DMA_SetMemoryAddress>

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	461a      	mov	r2, r3
 801001a:	68b9      	ldr	r1, [r7, #8]
 801001c:	68f8      	ldr	r0, [r7, #12]
 801001e:	f7ff ff8f 	bl	800ff40 <LL_DMA_SetPeriphAddress>

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	6a1b      	ldr	r3, [r3, #32]
 8010026:	461a      	mov	r2, r3
 8010028:	68b9      	ldr	r1, [r7, #8]
 801002a:	68f8      	ldr	r0, [r7, #12]
 801002c:	f7ff ff48 	bl	800fec0 <LL_DMA_SetDataLength>

  /*--------------------------- DMAMUXx CCR Configuration ----------------------
   * Configure the DMA request for DMA Channels on DMAMUX Channel x with parameter :
   * - PeriphRequest: DMA_CxCR[7:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010034:	461a      	mov	r2, r3
 8010036:	68b9      	ldr	r1, [r7, #8]
 8010038:	68f8      	ldr	r0, [r7, #12]
 801003a:	f7ff ff9b 	bl	800ff74 <LL_DMA_SetPeriphRequest>

  return (uint32_t)SUCCESS;
 801003e:	2300      	movs	r3, #0
}
 8010040:	4618      	mov	r0, r3
 8010042:	3710      	adds	r7, #16
 8010044:	46bd      	mov	sp, r7
 8010046:	bd80      	pop	{r7, pc}

08010048 <LL_DMA_StructInit>:
  * @brief  Set each @ref LL_DMA_InitTypeDef field to default value.
  * @param  DMA_InitStruct Pointer to a @ref LL_DMA_InitTypeDef structure.
  * @retval None
  */
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
{
 8010048:	b480      	push	{r7}
 801004a:	b083      	sub	sp, #12
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
  /* Set DMA_InitStruct fields to default values */
  DMA_InitStruct->PeriphOrM2MSrcAddress  = (uint32_t)0x00000000U;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	2200      	movs	r2, #0
 8010054:	601a      	str	r2, [r3, #0]
  DMA_InitStruct->MemoryOrM2MDstAddress  = (uint32_t)0x00000000U;
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	2200      	movs	r2, #0
 801005a:	605a      	str	r2, [r3, #4]
  DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2200      	movs	r2, #0
 8010060:	609a      	str	r2, [r3, #8]
  DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	2200      	movs	r2, #0
 8010066:	60da      	str	r2, [r3, #12]
  DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2200      	movs	r2, #0
 801006c:	611a      	str	r2, [r3, #16]
  DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	2200      	movs	r2, #0
 8010072:	615a      	str	r2, [r3, #20]
  DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	2200      	movs	r2, #0
 8010078:	619a      	str	r2, [r3, #24]
  DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	2200      	movs	r2, #0
 801007e:	61da      	str	r2, [r3, #28]
  DMA_InitStruct->NbData                 = (uint32_t)0x00000000U;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	2200      	movs	r2, #0
 8010084:	621a      	str	r2, [r3, #32]
  DMA_InitStruct->PeriphRequest          = LL_DMAMUX_REQ_MEM2MEM;
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	2200      	movs	r2, #0
 801008a:	625a      	str	r2, [r3, #36]	@ 0x24
  DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	2200      	movs	r2, #0
 8010090:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8010092:	bf00      	nop
 8010094:	370c      	adds	r7, #12
 8010096:	46bd      	mov	sp, r7
 8010098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801009c:	4770      	bx	lr

0801009e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 801009e:	b480      	push	{r7}
 80100a0:	b08b      	sub	sp, #44	@ 0x2c
 80100a2:	af00      	add	r7, sp, #0
 80100a4:	60f8      	str	r0, [r7, #12]
 80100a6:	60b9      	str	r1, [r7, #8]
 80100a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	681a      	ldr	r2, [r3, #0]
 80100ae:	68bb      	ldr	r3, [r7, #8]
 80100b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80100b2:	697b      	ldr	r3, [r7, #20]
 80100b4:	fa93 f3a3 	rbit	r3, r3
 80100b8:	613b      	str	r3, [r7, #16]
  return result;
 80100ba:	693b      	ldr	r3, [r7, #16]
 80100bc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80100be:	69bb      	ldr	r3, [r7, #24]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d101      	bne.n	80100c8 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80100c4:	2320      	movs	r3, #32
 80100c6:	e003      	b.n	80100d0 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80100c8:	69bb      	ldr	r3, [r7, #24]
 80100ca:	fab3 f383 	clz	r3, r3
 80100ce:	b2db      	uxtb	r3, r3
 80100d0:	005b      	lsls	r3, r3, #1
 80100d2:	2103      	movs	r1, #3
 80100d4:	fa01 f303 	lsl.w	r3, r1, r3
 80100d8:	43db      	mvns	r3, r3
 80100da:	401a      	ands	r2, r3
 80100dc:	68bb      	ldr	r3, [r7, #8]
 80100de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80100e0:	6a3b      	ldr	r3, [r7, #32]
 80100e2:	fa93 f3a3 	rbit	r3, r3
 80100e6:	61fb      	str	r3, [r7, #28]
  return result;
 80100e8:	69fb      	ldr	r3, [r7, #28]
 80100ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80100ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d101      	bne.n	80100f6 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80100f2:	2320      	movs	r3, #32
 80100f4:	e003      	b.n	80100fe <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80100f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100f8:	fab3 f383 	clz	r3, r3
 80100fc:	b2db      	uxtb	r3, r3
 80100fe:	005b      	lsls	r3, r3, #1
 8010100:	6879      	ldr	r1, [r7, #4]
 8010102:	fa01 f303 	lsl.w	r3, r1, r3
 8010106:	431a      	orrs	r2, r3
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	601a      	str	r2, [r3, #0]
}
 801010c:	bf00      	nop
 801010e:	372c      	adds	r7, #44	@ 0x2c
 8010110:	46bd      	mov	sp, r7
 8010112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010116:	4770      	bx	lr

08010118 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8010118:	b480      	push	{r7}
 801011a:	b085      	sub	sp, #20
 801011c:	af00      	add	r7, sp, #0
 801011e:	60f8      	str	r0, [r7, #12]
 8010120:	60b9      	str	r1, [r7, #8]
 8010122:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	685a      	ldr	r2, [r3, #4]
 8010128:	68bb      	ldr	r3, [r7, #8]
 801012a:	43db      	mvns	r3, r3
 801012c:	401a      	ands	r2, r3
 801012e:	68bb      	ldr	r3, [r7, #8]
 8010130:	6879      	ldr	r1, [r7, #4]
 8010132:	fb01 f303 	mul.w	r3, r1, r3
 8010136:	431a      	orrs	r2, r3
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	605a      	str	r2, [r3, #4]
}
 801013c:	bf00      	nop
 801013e:	3714      	adds	r7, #20
 8010140:	46bd      	mov	sp, r7
 8010142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010146:	4770      	bx	lr

08010148 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8010148:	b480      	push	{r7}
 801014a:	b08b      	sub	sp, #44	@ 0x2c
 801014c:	af00      	add	r7, sp, #0
 801014e:	60f8      	str	r0, [r7, #12]
 8010150:	60b9      	str	r1, [r7, #8]
 8010152:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	689a      	ldr	r2, [r3, #8]
 8010158:	68bb      	ldr	r3, [r7, #8]
 801015a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801015c:	697b      	ldr	r3, [r7, #20]
 801015e:	fa93 f3a3 	rbit	r3, r3
 8010162:	613b      	str	r3, [r7, #16]
  return result;
 8010164:	693b      	ldr	r3, [r7, #16]
 8010166:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8010168:	69bb      	ldr	r3, [r7, #24]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d101      	bne.n	8010172 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 801016e:	2320      	movs	r3, #32
 8010170:	e003      	b.n	801017a <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8010172:	69bb      	ldr	r3, [r7, #24]
 8010174:	fab3 f383 	clz	r3, r3
 8010178:	b2db      	uxtb	r3, r3
 801017a:	005b      	lsls	r3, r3, #1
 801017c:	2103      	movs	r1, #3
 801017e:	fa01 f303 	lsl.w	r3, r1, r3
 8010182:	43db      	mvns	r3, r3
 8010184:	401a      	ands	r2, r3
 8010186:	68bb      	ldr	r3, [r7, #8]
 8010188:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801018a:	6a3b      	ldr	r3, [r7, #32]
 801018c:	fa93 f3a3 	rbit	r3, r3
 8010190:	61fb      	str	r3, [r7, #28]
  return result;
 8010192:	69fb      	ldr	r3, [r7, #28]
 8010194:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8010196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010198:	2b00      	cmp	r3, #0
 801019a:	d101      	bne.n	80101a0 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 801019c:	2320      	movs	r3, #32
 801019e:	e003      	b.n	80101a8 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80101a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101a2:	fab3 f383 	clz	r3, r3
 80101a6:	b2db      	uxtb	r3, r3
 80101a8:	005b      	lsls	r3, r3, #1
 80101aa:	6879      	ldr	r1, [r7, #4]
 80101ac:	fa01 f303 	lsl.w	r3, r1, r3
 80101b0:	431a      	orrs	r2, r3
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80101b6:	bf00      	nop
 80101b8:	372c      	adds	r7, #44	@ 0x2c
 80101ba:	46bd      	mov	sp, r7
 80101bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c0:	4770      	bx	lr

080101c2 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80101c2:	b480      	push	{r7}
 80101c4:	b08b      	sub	sp, #44	@ 0x2c
 80101c6:	af00      	add	r7, sp, #0
 80101c8:	60f8      	str	r0, [r7, #12]
 80101ca:	60b9      	str	r1, [r7, #8]
 80101cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	68da      	ldr	r2, [r3, #12]
 80101d2:	68bb      	ldr	r3, [r7, #8]
 80101d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80101d6:	697b      	ldr	r3, [r7, #20]
 80101d8:	fa93 f3a3 	rbit	r3, r3
 80101dc:	613b      	str	r3, [r7, #16]
  return result;
 80101de:	693b      	ldr	r3, [r7, #16]
 80101e0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80101e2:	69bb      	ldr	r3, [r7, #24]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d101      	bne.n	80101ec <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80101e8:	2320      	movs	r3, #32
 80101ea:	e003      	b.n	80101f4 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80101ec:	69bb      	ldr	r3, [r7, #24]
 80101ee:	fab3 f383 	clz	r3, r3
 80101f2:	b2db      	uxtb	r3, r3
 80101f4:	005b      	lsls	r3, r3, #1
 80101f6:	2103      	movs	r1, #3
 80101f8:	fa01 f303 	lsl.w	r3, r1, r3
 80101fc:	43db      	mvns	r3, r3
 80101fe:	401a      	ands	r2, r3
 8010200:	68bb      	ldr	r3, [r7, #8]
 8010202:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010204:	6a3b      	ldr	r3, [r7, #32]
 8010206:	fa93 f3a3 	rbit	r3, r3
 801020a:	61fb      	str	r3, [r7, #28]
  return result;
 801020c:	69fb      	ldr	r3, [r7, #28]
 801020e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8010210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010212:	2b00      	cmp	r3, #0
 8010214:	d101      	bne.n	801021a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8010216:	2320      	movs	r3, #32
 8010218:	e003      	b.n	8010222 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 801021a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801021c:	fab3 f383 	clz	r3, r3
 8010220:	b2db      	uxtb	r3, r3
 8010222:	005b      	lsls	r3, r3, #1
 8010224:	6879      	ldr	r1, [r7, #4]
 8010226:	fa01 f303 	lsl.w	r3, r1, r3
 801022a:	431a      	orrs	r2, r3
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	60da      	str	r2, [r3, #12]
}
 8010230:	bf00      	nop
 8010232:	372c      	adds	r7, #44	@ 0x2c
 8010234:	46bd      	mov	sp, r7
 8010236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023a:	4770      	bx	lr

0801023c <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 801023c:	b480      	push	{r7}
 801023e:	b08b      	sub	sp, #44	@ 0x2c
 8010240:	af00      	add	r7, sp, #0
 8010242:	60f8      	str	r0, [r7, #12]
 8010244:	60b9      	str	r1, [r7, #8]
 8010246:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	6a1a      	ldr	r2, [r3, #32]
 801024c:	68bb      	ldr	r3, [r7, #8]
 801024e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010250:	697b      	ldr	r3, [r7, #20]
 8010252:	fa93 f3a3 	rbit	r3, r3
 8010256:	613b      	str	r3, [r7, #16]
  return result;
 8010258:	693b      	ldr	r3, [r7, #16]
 801025a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801025c:	69bb      	ldr	r3, [r7, #24]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d101      	bne.n	8010266 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8010262:	2320      	movs	r3, #32
 8010264:	e003      	b.n	801026e <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8010266:	69bb      	ldr	r3, [r7, #24]
 8010268:	fab3 f383 	clz	r3, r3
 801026c:	b2db      	uxtb	r3, r3
 801026e:	009b      	lsls	r3, r3, #2
 8010270:	210f      	movs	r1, #15
 8010272:	fa01 f303 	lsl.w	r3, r1, r3
 8010276:	43db      	mvns	r3, r3
 8010278:	401a      	ands	r2, r3
 801027a:	68bb      	ldr	r3, [r7, #8]
 801027c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801027e:	6a3b      	ldr	r3, [r7, #32]
 8010280:	fa93 f3a3 	rbit	r3, r3
 8010284:	61fb      	str	r3, [r7, #28]
  return result;
 8010286:	69fb      	ldr	r3, [r7, #28]
 8010288:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 801028a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801028c:	2b00      	cmp	r3, #0
 801028e:	d101      	bne.n	8010294 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8010290:	2320      	movs	r3, #32
 8010292:	e003      	b.n	801029c <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8010294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010296:	fab3 f383 	clz	r3, r3
 801029a:	b2db      	uxtb	r3, r3
 801029c:	009b      	lsls	r3, r3, #2
 801029e:	6879      	ldr	r1, [r7, #4]
 80102a0:	fa01 f303 	lsl.w	r3, r1, r3
 80102a4:	431a      	orrs	r2, r3
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80102aa:	bf00      	nop
 80102ac:	372c      	adds	r7, #44	@ 0x2c
 80102ae:	46bd      	mov	sp, r7
 80102b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b4:	4770      	bx	lr

080102b6 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80102b6:	b480      	push	{r7}
 80102b8:	b08b      	sub	sp, #44	@ 0x2c
 80102ba:	af00      	add	r7, sp, #0
 80102bc:	60f8      	str	r0, [r7, #12]
 80102be:	60b9      	str	r1, [r7, #8]
 80102c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80102c6:	68bb      	ldr	r3, [r7, #8]
 80102c8:	0a1b      	lsrs	r3, r3, #8
 80102ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80102cc:	697b      	ldr	r3, [r7, #20]
 80102ce:	fa93 f3a3 	rbit	r3, r3
 80102d2:	613b      	str	r3, [r7, #16]
  return result;
 80102d4:	693b      	ldr	r3, [r7, #16]
 80102d6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80102d8:	69bb      	ldr	r3, [r7, #24]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d101      	bne.n	80102e2 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80102de:	2320      	movs	r3, #32
 80102e0:	e003      	b.n	80102ea <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80102e2:	69bb      	ldr	r3, [r7, #24]
 80102e4:	fab3 f383 	clz	r3, r3
 80102e8:	b2db      	uxtb	r3, r3
 80102ea:	009b      	lsls	r3, r3, #2
 80102ec:	210f      	movs	r1, #15
 80102ee:	fa01 f303 	lsl.w	r3, r1, r3
 80102f2:	43db      	mvns	r3, r3
 80102f4:	401a      	ands	r2, r3
 80102f6:	68bb      	ldr	r3, [r7, #8]
 80102f8:	0a1b      	lsrs	r3, r3, #8
 80102fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80102fc:	6a3b      	ldr	r3, [r7, #32]
 80102fe:	fa93 f3a3 	rbit	r3, r3
 8010302:	61fb      	str	r3, [r7, #28]
  return result;
 8010304:	69fb      	ldr	r3, [r7, #28]
 8010306:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8010308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801030a:	2b00      	cmp	r3, #0
 801030c:	d101      	bne.n	8010312 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 801030e:	2320      	movs	r3, #32
 8010310:	e003      	b.n	801031a <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8010312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010314:	fab3 f383 	clz	r3, r3
 8010318:	b2db      	uxtb	r3, r3
 801031a:	009b      	lsls	r3, r3, #2
 801031c:	6879      	ldr	r1, [r7, #4]
 801031e:	fa01 f303 	lsl.w	r3, r1, r3
 8010322:	431a      	orrs	r2, r3
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8010328:	bf00      	nop
 801032a:	372c      	adds	r7, #44	@ 0x2c
 801032c:	46bd      	mov	sp, r7
 801032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010332:	4770      	bx	lr

08010334 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8010334:	b580      	push	{r7, lr}
 8010336:	b088      	sub	sp, #32
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
 801033c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 801033e:	683b      	ldr	r3, [r7, #0]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010344:	693b      	ldr	r3, [r7, #16]
 8010346:	fa93 f3a3 	rbit	r3, r3
 801034a:	60fb      	str	r3, [r7, #12]
  return result;
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8010350:	697b      	ldr	r3, [r7, #20]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d101      	bne.n	801035a <LL_GPIO_Init+0x26>
    return 32U;
 8010356:	2320      	movs	r3, #32
 8010358:	e003      	b.n	8010362 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 801035a:	697b      	ldr	r3, [r7, #20]
 801035c:	fab3 f383 	clz	r3, r3
 8010360:	b2db      	uxtb	r3, r3
 8010362:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8010364:	e048      	b.n	80103f8 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8010366:	683b      	ldr	r3, [r7, #0]
 8010368:	681a      	ldr	r2, [r3, #0]
 801036a:	2101      	movs	r1, #1
 801036c:	69fb      	ldr	r3, [r7, #28]
 801036e:	fa01 f303 	lsl.w	r3, r1, r3
 8010372:	4013      	ands	r3, r2
 8010374:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8010376:	69bb      	ldr	r3, [r7, #24]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d03a      	beq.n	80103f2 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 801037c:	683b      	ldr	r3, [r7, #0]
 801037e:	685b      	ldr	r3, [r3, #4]
 8010380:	2b01      	cmp	r3, #1
 8010382:	d003      	beq.n	801038c <LL_GPIO_Init+0x58>
 8010384:	683b      	ldr	r3, [r7, #0]
 8010386:	685b      	ldr	r3, [r3, #4]
 8010388:	2b02      	cmp	r3, #2
 801038a:	d10e      	bne.n	80103aa <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 801038c:	683b      	ldr	r3, [r7, #0]
 801038e:	689b      	ldr	r3, [r3, #8]
 8010390:	461a      	mov	r2, r3
 8010392:	69b9      	ldr	r1, [r7, #24]
 8010394:	6878      	ldr	r0, [r7, #4]
 8010396:	f7ff fed7 	bl	8010148 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 801039a:	683b      	ldr	r3, [r7, #0]
 801039c:	6819      	ldr	r1, [r3, #0]
 801039e:	683b      	ldr	r3, [r7, #0]
 80103a0:	68db      	ldr	r3, [r3, #12]
 80103a2:	461a      	mov	r2, r3
 80103a4:	6878      	ldr	r0, [r7, #4]
 80103a6:	f7ff feb7 	bl	8010118 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80103aa:	683b      	ldr	r3, [r7, #0]
 80103ac:	691b      	ldr	r3, [r3, #16]
 80103ae:	461a      	mov	r2, r3
 80103b0:	69b9      	ldr	r1, [r7, #24]
 80103b2:	6878      	ldr	r0, [r7, #4]
 80103b4:	f7ff ff05 	bl	80101c2 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80103b8:	683b      	ldr	r3, [r7, #0]
 80103ba:	685b      	ldr	r3, [r3, #4]
 80103bc:	2b02      	cmp	r3, #2
 80103be:	d111      	bne.n	80103e4 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80103c0:	69bb      	ldr	r3, [r7, #24]
 80103c2:	2bff      	cmp	r3, #255	@ 0xff
 80103c4:	d807      	bhi.n	80103d6 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	695b      	ldr	r3, [r3, #20]
 80103ca:	461a      	mov	r2, r3
 80103cc:	69b9      	ldr	r1, [r7, #24]
 80103ce:	6878      	ldr	r0, [r7, #4]
 80103d0:	f7ff ff34 	bl	801023c <LL_GPIO_SetAFPin_0_7>
 80103d4:	e006      	b.n	80103e4 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80103d6:	683b      	ldr	r3, [r7, #0]
 80103d8:	695b      	ldr	r3, [r3, #20]
 80103da:	461a      	mov	r2, r3
 80103dc:	69b9      	ldr	r1, [r7, #24]
 80103de:	6878      	ldr	r0, [r7, #4]
 80103e0:	f7ff ff69 	bl	80102b6 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80103e4:	683b      	ldr	r3, [r7, #0]
 80103e6:	685b      	ldr	r3, [r3, #4]
 80103e8:	461a      	mov	r2, r3
 80103ea:	69b9      	ldr	r1, [r7, #24]
 80103ec:	6878      	ldr	r0, [r7, #4]
 80103ee:	f7ff fe56 	bl	801009e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80103f2:	69fb      	ldr	r3, [r7, #28]
 80103f4:	3301      	adds	r3, #1
 80103f6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80103f8:	683b      	ldr	r3, [r7, #0]
 80103fa:	681a      	ldr	r2, [r3, #0]
 80103fc:	69fb      	ldr	r3, [r7, #28]
 80103fe:	fa22 f303 	lsr.w	r3, r2, r3
 8010402:	2b00      	cmp	r3, #0
 8010404:	d1af      	bne.n	8010366 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8010406:	2300      	movs	r3, #0
}
 8010408:	4618      	mov	r0, r3
 801040a:	3720      	adds	r7, #32
 801040c:	46bd      	mov	sp, r7
 801040e:	bd80      	pop	{r7, pc}

08010410 <LL_UCPD_Disable>:
  * @rmtoll CFG1          UCPDEN           LL_UCPD_Disable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_Disable(UCPD_TypeDef *UCPDx)
{
 8010410:	b480      	push	{r7}
 8010412:	b083      	sub	sp, #12
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	601a      	str	r2, [r3, #0]
}
 8010424:	bf00      	nop
 8010426:	370c      	adds	r7, #12
 8010428:	46bd      	mov	sp, r7
 801042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801042e:	4770      	bx	lr

08010430 <LL_APB1_GRP2_EnableClock>:
{
 8010430:	b480      	push	{r7}
 8010432:	b085      	sub	sp, #20
 8010434:	af00      	add	r7, sp, #0
 8010436:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8010438:	4b08      	ldr	r3, [pc, #32]	@ (801045c <LL_APB1_GRP2_EnableClock+0x2c>)
 801043a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801043c:	4907      	ldr	r1, [pc, #28]	@ (801045c <LL_APB1_GRP2_EnableClock+0x2c>)
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	4313      	orrs	r3, r2
 8010442:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8010444:	4b05      	ldr	r3, [pc, #20]	@ (801045c <LL_APB1_GRP2_EnableClock+0x2c>)
 8010446:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	4013      	ands	r3, r2
 801044c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801044e:	68fb      	ldr	r3, [r7, #12]
}
 8010450:	bf00      	nop
 8010452:	3714      	adds	r7, #20
 8010454:	46bd      	mov	sp, r7
 8010456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045a:	4770      	bx	lr
 801045c:	40021000 	.word	0x40021000

08010460 <LL_UCPD_Init>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure that contains
  *         the configuration information for the UCPD peripheral.
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_UCPD_Init(UCPD_TypeDef *UCPDx, const LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b082      	sub	sp, #8
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
 8010468:	6039      	str	r1, [r7, #0]
  /* Check the ucpd Instance UCPDx*/
  assert_param(IS_UCPD_ALL_INSTANCE(UCPDx));

  if (UCPD1 == UCPDx)
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	4a11      	ldr	r2, [pc, #68]	@ (80104b4 <LL_UCPD_Init+0x54>)
 801046e:	4293      	cmp	r3, r2
 8010470:	d103      	bne.n	801047a <LL_UCPD_Init+0x1a>
  {
    LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8010472:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8010476:	f7ff ffdb 	bl	8010430 <LL_APB1_GRP2_EnableClock>
  }


  LL_UCPD_Disable(UCPDx);
 801047a:	6878      	ldr	r0, [r7, #4]
 801047c:	f7ff ffc8 	bl	8010410 <LL_UCPD_Disable>

  /*---------------------------- UCPDx CFG1 Configuration ------------------------*/
  MODIFY_REG(UCPDx->CFG1,
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	681a      	ldr	r2, [r3, #0]
 8010484:	4b0c      	ldr	r3, [pc, #48]	@ (80104b8 <LL_UCPD_Init+0x58>)
 8010486:	4013      	ands	r3, r2
 8010488:	683a      	ldr	r2, [r7, #0]
 801048a:	6811      	ldr	r1, [r2, #0]
 801048c:	683a      	ldr	r2, [r7, #0]
 801048e:	6852      	ldr	r2, [r2, #4]
 8010490:	02d2      	lsls	r2, r2, #11
 8010492:	4311      	orrs	r1, r2
 8010494:	683a      	ldr	r2, [r7, #0]
 8010496:	6892      	ldr	r2, [r2, #8]
 8010498:	0192      	lsls	r2, r2, #6
 801049a:	4311      	orrs	r1, r2
 801049c:	683a      	ldr	r2, [r7, #0]
 801049e:	68d2      	ldr	r2, [r2, #12]
 80104a0:	430a      	orrs	r2, r1
 80104a2:	431a      	orrs	r2, r3
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	601a      	str	r2, [r3, #0]
             UCPD_CFG1_PSC_UCPDCLK | UCPD_CFG1_TRANSWIN | UCPD_CFG1_IFRGAP | UCPD_CFG1_HBITCLKDIV,
             UCPD_InitStruct->psc_ucpdclk | (UCPD_InitStruct->transwin  << UCPD_CFG1_TRANSWIN_Pos) |
             (UCPD_InitStruct->IfrGap << UCPD_CFG1_IFRGAP_Pos) | UCPD_InitStruct->HbitClockDiv);

  return SUCCESS;
 80104a8:	2300      	movs	r3, #0
}
 80104aa:	4618      	mov	r0, r3
 80104ac:	3708      	adds	r7, #8
 80104ae:	46bd      	mov	sp, r7
 80104b0:	bd80      	pop	{r7, pc}
 80104b2:	bf00      	nop
 80104b4:	4000a000 	.word	0x4000a000
 80104b8:	fff10000 	.word	0xfff10000

080104bc <LL_UCPD_StructInit>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure
  *         whose fields will be set to default values.
  * @retval None
  */
void LL_UCPD_StructInit(LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 80104bc:	b480      	push	{r7}
 80104be:	b083      	sub	sp, #12
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]
  /* Set UCPD_InitStruct fields to default values */
  UCPD_InitStruct->psc_ucpdclk  = LL_UCPD_PSC_DIV2;
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80104ca:	601a      	str	r2, [r3, #0]
  UCPD_InitStruct->transwin     = 0x7;   /* Divide by 8                     */
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	2207      	movs	r2, #7
 80104d0:	605a      	str	r2, [r3, #4]
  UCPD_InitStruct->IfrGap       = 0x10;  /* Divide by 17                    */
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	2210      	movs	r2, #16
 80104d6:	609a      	str	r2, [r3, #8]
  UCPD_InitStruct->HbitClockDiv = 0x0D;  /* Divide by 14 to produce HBITCLK */
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	220d      	movs	r2, #13
 80104dc:	60da      	str	r2, [r3, #12]
}
 80104de:	bf00      	nop
 80104e0:	370c      	adds	r7, #12
 80104e2:	46bd      	mov	sp, r7
 80104e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e8:	4770      	bx	lr
	...

080104ec <LIDAR_restart>:
	return 0; // Commande envoyée avec succès
}

//Soft restart
//No response
int LIDAR_restart(h_LIDAR_t * h_LIDAR){
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b084      	sub	sp, #16
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
	debug(START,"RESTART LIDAR");
 80104f4:	490d      	ldr	r1, [pc, #52]	@ (801052c <LIDAR_restart+0x40>)
 80104f6:	480e      	ldr	r0, [pc, #56]	@ (8010530 <LIDAR_restart+0x44>)
 80104f8:	f007 febe 	bl	8018278 <debug>
	uint8_t cmd_buff[CMD_BUFF_SIZE]={CMD_BEGIN,CMD_RESTART};
 80104fc:	f248 03a5 	movw	r3, #32933	@ 0x80a5
 8010500:	81bb      	strh	r3, [r7, #12]
	// Envoi de la commande pour restart le LIDAR
	if (h_LIDAR->serial_drv.it_transmit(cmd_buff, CMD_BUFF_SIZE) != 0) {
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	68db      	ldr	r3, [r3, #12]
 8010506:	f107 020c 	add.w	r2, r7, #12
 801050a:	2102      	movs	r1, #2
 801050c:	4610      	mov	r0, r2
 801050e:	4798      	blx	r3
 8010510:	4603      	mov	r3, r0
 8010512:	2b00      	cmp	r3, #0
 8010514:	d005      	beq.n	8010522 <LIDAR_restart+0x36>
		printf("Erreur lors de l'envoi de la commande.\r\n");
 8010516:	4807      	ldr	r0, [pc, #28]	@ (8010534 <LIDAR_restart+0x48>)
 8010518:	f009 fdf0 	bl	801a0fc <puts>
		return -1;
 801051c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010520:	e000      	b.n	8010524 <LIDAR_restart+0x38>
	}

	return 0;
 8010522:	2300      	movs	r3, #0
}
 8010524:	4618      	mov	r0, r3
 8010526:	3710      	adds	r7, #16
 8010528:	46bd      	mov	sp, r7
 801052a:	bd80      	pop	{r7, pc}
 801052c:	0801e278 	.word	0x0801e278
 8010530:	0801e288 	.word	0x0801e288
 8010534:	0801e228 	.word	0x0801e228

08010538 <LIDAR_get_info>:

int LIDAR_get_info(h_LIDAR_t *h_LIDAR) {
 8010538:	b5f0      	push	{r4, r5, r6, r7, lr}
 801053a:	b09d      	sub	sp, #116	@ 0x74
 801053c:	af10      	add	r7, sp, #64	@ 0x40
 801053e:	6278      	str	r0, [r7, #36]	@ 0x24
	uint8_t cmd_buff[CMD_BUFF_SIZE] = {CMD_BEGIN, CMD_INFO};
 8010540:	f249 03a5 	movw	r3, #37029	@ 0x90a5
 8010544:	853b      	strh	r3, [r7, #40]	@ 0x28

	// Envoi de la commande pour obtenir les informations
	if (h_LIDAR->serial_drv.it_transmit(cmd_buff, CMD_BUFF_SIZE) != 0) {
 8010546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010548:	68db      	ldr	r3, [r3, #12]
 801054a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 801054e:	2102      	movs	r1, #2
 8010550:	4610      	mov	r0, r2
 8010552:	4798      	blx	r3
 8010554:	4603      	mov	r3, r0
 8010556:	2b00      	cmp	r3, #0
 8010558:	d005      	beq.n	8010566 <LIDAR_get_info+0x2e>
		printf("Erreur lors de l'envoi de la commande.\r\n");
 801055a:	489b      	ldr	r0, [pc, #620]	@ (80107c8 <LIDAR_get_info+0x290>)
 801055c:	f009 fdce 	bl	801a0fc <puts>
		return -1;
 8010560:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010564:	e12b      	b.n	80107be <LIDAR_get_info+0x286>
	}

	// Préparation à la réception
	h_LIDAR->rx_flag_uart = 0; // Réinitialise le drapeau
 8010566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010568:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801056c:	2200      	movs	r2, #0
 801056e:	f883 27f0 	strb.w	r2, [r3, #2032]	@ 0x7f0
	if (h_LIDAR->serial_drv.it_receive(h_LIDAR->info_buff, INFO_BUFF_SIZE) != 0) {
 8010572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010574:	689b      	ldr	r3, [r3, #8]
 8010576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010578:	324c      	adds	r2, #76	@ 0x4c
 801057a:	211b      	movs	r1, #27
 801057c:	4610      	mov	r0, r2
 801057e:	4798      	blx	r3
 8010580:	4603      	mov	r3, r0
 8010582:	2b00      	cmp	r3, #0
 8010584:	d005      	beq.n	8010592 <LIDAR_get_info+0x5a>
		printf("Erreur lors de la preparation de la réception.\r\n");
 8010586:	4891      	ldr	r0, [pc, #580]	@ (80107cc <LIDAR_get_info+0x294>)
 8010588:	f009 fdb8 	bl	801a0fc <puts>
		return -2;
 801058c:	f06f 0301 	mvn.w	r3, #1
 8010590:	e115      	b.n	80107be <LIDAR_get_info+0x286>
	}

	// Attente de la réception
	uint32_t start_time = HAL_GetTick();
 8010592:	f7f6 f905 	bl	80067a0 <HAL_GetTick>
 8010596:	62f8      	str	r0, [r7, #44]	@ 0x2c
	while (!h_LIDAR->rx_flag_uart) {
 8010598:	e00e      	b.n	80105b8 <LIDAR_get_info+0x80>
		if (HAL_GetTick() - start_time > 10000) { // Timeout de 1000 ms
 801059a:	f7f6 f901 	bl	80067a0 <HAL_GetTick>
 801059e:	4602      	mov	r2, r0
 80105a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105a2:	1ad3      	subs	r3, r2, r3
 80105a4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80105a8:	4293      	cmp	r3, r2
 80105aa:	d905      	bls.n	80105b8 <LIDAR_get_info+0x80>
			printf("Timeout lors de la reception.\r\n");
 80105ac:	4888      	ldr	r0, [pc, #544]	@ (80107d0 <LIDAR_get_info+0x298>)
 80105ae:	f009 fda5 	bl	801a0fc <puts>
			return -3;
 80105b2:	f06f 0302 	mvn.w	r3, #2
 80105b6:	e102      	b.n	80107be <LIDAR_get_info+0x286>
	while (!h_LIDAR->rx_flag_uart) {
 80105b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105ba:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80105be:	f893 37f0 	ldrb.w	r3, [r3, #2032]	@ 0x7f0
 80105c2:	b2db      	uxtb	r3, r3
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d0e8      	beq.n	801059a <LIDAR_get_info+0x62>
		}
	}

	// Analyse des données
	h_LIDAR->device_info.start_sign = (h_LIDAR->info_buff[0] << 8) | h_LIDAR->info_buff[1];
 80105c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105ca:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80105ce:	021b      	lsls	r3, r3, #8
 80105d0:	b21a      	sxth	r2, r3
 80105d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105d4:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80105d8:	b21b      	sxth	r3, r3
 80105da:	4313      	orrs	r3, r2
 80105dc:	b21b      	sxth	r3, r3
 80105de:	b29a      	uxth	r2, r3
 80105e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105e2:	831a      	strh	r2, [r3, #24]
	h_LIDAR->device_info.length = (h_LIDAR->info_buff[2]) |
 80105e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105e6:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80105ea:	461a      	mov	r2, r3
			(h_LIDAR->info_buff[3] << 8) |
 80105ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105ee:	f893 304f 	ldrb.w	r3, [r3, #79]	@ 0x4f
 80105f2:	021b      	lsls	r3, r3, #8
	h_LIDAR->device_info.length = (h_LIDAR->info_buff[2]) |
 80105f4:	431a      	orrs	r2, r3
			(h_LIDAR->info_buff[4] << 16);
 80105f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105f8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80105fc:	041b      	lsls	r3, r3, #16
			(h_LIDAR->info_buff[3] << 8) |
 80105fe:	4313      	orrs	r3, r2
 8010600:	461a      	mov	r2, r3
	h_LIDAR->device_info.length = (h_LIDAR->info_buff[2]) |
 8010602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010604:	61da      	str	r2, [r3, #28]
	h_LIDAR->device_info.mode = h_LIDAR->info_buff[5] >> 6;
 8010606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010608:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801060c:	099b      	lsrs	r3, r3, #6
 801060e:	b2da      	uxtb	r2, r3
 8010610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010612:	f883 2020 	strb.w	r2, [r3, #32]
	h_LIDAR->device_info.type_code = h_LIDAR->info_buff[6];
 8010616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010618:	f893 2052 	ldrb.w	r2, [r3, #82]	@ 0x52
 801061c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801061e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	if (h_LIDAR->device_info.start_sign != 0xA55A) {
 8010622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010624:	8b1b      	ldrh	r3, [r3, #24]
 8010626:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 801062a:	4293      	cmp	r3, r2
 801062c:	d008      	beq.n	8010640 <LIDAR_get_info+0x108>
		printf("Signature de debut invalide : %04X\r\n", h_LIDAR->device_info.start_sign);
 801062e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010630:	8b1b      	ldrh	r3, [r3, #24]
 8010632:	4619      	mov	r1, r3
 8010634:	4867      	ldr	r0, [pc, #412]	@ (80107d4 <LIDAR_get_info+0x29c>)
 8010636:	f009 fcf9 	bl	801a02c <iprintf>
		return -4;
 801063a:	f06f 0303 	mvn.w	r3, #3
 801063e:	e0be      	b.n	80107be <LIDAR_get_info+0x286>
	}

	if (h_LIDAR->device_info.type_code != 0x04) {
 8010640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010642:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8010646:	2b04      	cmp	r3, #4
 8010648:	d009      	beq.n	801065e <LIDAR_get_info+0x126>
		printf("Type code invalide : %X\r\n", h_LIDAR->device_info.type_code);
 801064a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801064c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8010650:	4619      	mov	r1, r3
 8010652:	4861      	ldr	r0, [pc, #388]	@ (80107d8 <LIDAR_get_info+0x2a0>)
 8010654:	f009 fcea 	bl	801a02c <iprintf>
		return -5;
 8010658:	f06f 0304 	mvn.w	r3, #4
 801065c:	e0af      	b.n	80107be <LIDAR_get_info+0x286>
	}

	// Récupération des autres informations
	h_LIDAR->device_info.model = h_LIDAR->info_buff[7];
 801065e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010660:	f893 2053 	ldrb.w	r2, [r3, #83]	@ 0x53
 8010664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010666:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	snprintf(h_LIDAR->device_info.firmware, sizeof(h_LIDAR->device_info.firmware),
 801066a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801066c:	f103 0023 	add.w	r0, r3, #35	@ 0x23
			"%d.%d", h_LIDAR->info_buff[8], h_LIDAR->info_buff[9]);
 8010670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010672:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
	snprintf(h_LIDAR->device_info.firmware, sizeof(h_LIDAR->device_info.firmware),
 8010676:	461a      	mov	r2, r3
			"%d.%d", h_LIDAR->info_buff[8], h_LIDAR->info_buff[9]);
 8010678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801067a:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
	snprintf(h_LIDAR->device_info.firmware, sizeof(h_LIDAR->device_info.firmware),
 801067e:	9300      	str	r3, [sp, #0]
 8010680:	4613      	mov	r3, r2
 8010682:	4a56      	ldr	r2, [pc, #344]	@ (80107dc <LIDAR_get_info+0x2a4>)
 8010684:	2106      	movs	r1, #6
 8010686:	f008 fd21 	bl	80190cc <sniprintf>
	h_LIDAR->device_info.hardware = h_LIDAR->info_buff[10];
 801068a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801068c:	f893 2056 	ldrb.w	r2, [r3, #86]	@ 0x56
 8010690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010692:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	snprintf(h_LIDAR->device_info.serial, sizeof(h_LIDAR->device_info.serial),
 8010696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010698:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
			"%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X",
			h_LIDAR->info_buff[11], h_LIDAR->info_buff[12], h_LIDAR->info_buff[13], h_LIDAR->info_buff[14],
 801069c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801069e:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
	snprintf(h_LIDAR->device_info.serial, sizeof(h_LIDAR->device_info.serial),
 80106a2:	469c      	mov	ip, r3
			h_LIDAR->info_buff[11], h_LIDAR->info_buff[12], h_LIDAR->info_buff[13], h_LIDAR->info_buff[14],
 80106a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106a6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
	snprintf(h_LIDAR->device_info.serial, sizeof(h_LIDAR->device_info.serial),
 80106aa:	461d      	mov	r5, r3
			h_LIDAR->info_buff[11], h_LIDAR->info_buff[12], h_LIDAR->info_buff[13], h_LIDAR->info_buff[14],
 80106ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106ae:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
	snprintf(h_LIDAR->device_info.serial, sizeof(h_LIDAR->device_info.serial),
 80106b2:	461e      	mov	r6, r3
			h_LIDAR->info_buff[11], h_LIDAR->info_buff[12], h_LIDAR->info_buff[13], h_LIDAR->info_buff[14],
 80106b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106b6:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
	snprintf(h_LIDAR->device_info.serial, sizeof(h_LIDAR->device_info.serial),
 80106ba:	623b      	str	r3, [r7, #32]
			h_LIDAR->info_buff[15], h_LIDAR->info_buff[16], h_LIDAR->info_buff[17], h_LIDAR->info_buff[18],
 80106bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106be:	f893 305b 	ldrb.w	r3, [r3, #91]	@ 0x5b
	snprintf(h_LIDAR->device_info.serial, sizeof(h_LIDAR->device_info.serial),
 80106c2:	61fb      	str	r3, [r7, #28]
			h_LIDAR->info_buff[15], h_LIDAR->info_buff[16], h_LIDAR->info_buff[17], h_LIDAR->info_buff[18],
 80106c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106c6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
	snprintf(h_LIDAR->device_info.serial, sizeof(h_LIDAR->device_info.serial),
 80106ca:	61bb      	str	r3, [r7, #24]
			h_LIDAR->info_buff[15], h_LIDAR->info_buff[16], h_LIDAR->info_buff[17], h_LIDAR->info_buff[18],
 80106cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106ce:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
	snprintf(h_LIDAR->device_info.serial, sizeof(h_LIDAR->device_info.serial),
 80106d2:	617b      	str	r3, [r7, #20]
			h_LIDAR->info_buff[15], h_LIDAR->info_buff[16], h_LIDAR->info_buff[17], h_LIDAR->info_buff[18],
 80106d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106d6:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
	snprintf(h_LIDAR->device_info.serial, sizeof(h_LIDAR->device_info.serial),
 80106da:	613b      	str	r3, [r7, #16]
			h_LIDAR->info_buff[19], h_LIDAR->info_buff[20], h_LIDAR->info_buff[21], h_LIDAR->info_buff[22],
 80106dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106de:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
	snprintf(h_LIDAR->device_info.serial, sizeof(h_LIDAR->device_info.serial),
 80106e2:	60fb      	str	r3, [r7, #12]
			h_LIDAR->info_buff[19], h_LIDAR->info_buff[20], h_LIDAR->info_buff[21], h_LIDAR->info_buff[22],
 80106e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106e6:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
	snprintf(h_LIDAR->device_info.serial, sizeof(h_LIDAR->device_info.serial),
 80106ea:	60bb      	str	r3, [r7, #8]
			h_LIDAR->info_buff[19], h_LIDAR->info_buff[20], h_LIDAR->info_buff[21], h_LIDAR->info_buff[22],
 80106ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106ee:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
	snprintf(h_LIDAR->device_info.serial, sizeof(h_LIDAR->device_info.serial),
 80106f2:	607b      	str	r3, [r7, #4]
			h_LIDAR->info_buff[19], h_LIDAR->info_buff[20], h_LIDAR->info_buff[21], h_LIDAR->info_buff[22],
 80106f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106f6:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
	snprintf(h_LIDAR->device_info.serial, sizeof(h_LIDAR->device_info.serial),
 80106fa:	603b      	str	r3, [r7, #0]
			h_LIDAR->info_buff[23], h_LIDAR->info_buff[24], h_LIDAR->info_buff[25], h_LIDAR->info_buff[26]);
 80106fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106fe:	f893 3063 	ldrb.w	r3, [r3, #99]	@ 0x63
	snprintf(h_LIDAR->device_info.serial, sizeof(h_LIDAR->device_info.serial),
 8010702:	461c      	mov	r4, r3
			h_LIDAR->info_buff[23], h_LIDAR->info_buff[24], h_LIDAR->info_buff[25], h_LIDAR->info_buff[26]);
 8010704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010706:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
	snprintf(h_LIDAR->device_info.serial, sizeof(h_LIDAR->device_info.serial),
 801070a:	4619      	mov	r1, r3
			h_LIDAR->info_buff[23], h_LIDAR->info_buff[24], h_LIDAR->info_buff[25], h_LIDAR->info_buff[26]);
 801070c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801070e:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
	snprintf(h_LIDAR->device_info.serial, sizeof(h_LIDAR->device_info.serial),
 8010712:	461a      	mov	r2, r3
			h_LIDAR->info_buff[23], h_LIDAR->info_buff[24], h_LIDAR->info_buff[25], h_LIDAR->info_buff[26]);
 8010714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010716:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
	snprintf(h_LIDAR->device_info.serial, sizeof(h_LIDAR->device_info.serial),
 801071a:	930e      	str	r3, [sp, #56]	@ 0x38
 801071c:	920d      	str	r2, [sp, #52]	@ 0x34
 801071e:	910c      	str	r1, [sp, #48]	@ 0x30
 8010720:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010722:	683a      	ldr	r2, [r7, #0]
 8010724:	920a      	str	r2, [sp, #40]	@ 0x28
 8010726:	687a      	ldr	r2, [r7, #4]
 8010728:	9209      	str	r2, [sp, #36]	@ 0x24
 801072a:	68ba      	ldr	r2, [r7, #8]
 801072c:	9208      	str	r2, [sp, #32]
 801072e:	68fa      	ldr	r2, [r7, #12]
 8010730:	9207      	str	r2, [sp, #28]
 8010732:	693a      	ldr	r2, [r7, #16]
 8010734:	9206      	str	r2, [sp, #24]
 8010736:	697a      	ldr	r2, [r7, #20]
 8010738:	9205      	str	r2, [sp, #20]
 801073a:	69ba      	ldr	r2, [r7, #24]
 801073c:	9204      	str	r2, [sp, #16]
 801073e:	69fa      	ldr	r2, [r7, #28]
 8010740:	9203      	str	r2, [sp, #12]
 8010742:	6a3b      	ldr	r3, [r7, #32]
 8010744:	9302      	str	r3, [sp, #8]
 8010746:	9601      	str	r6, [sp, #4]
 8010748:	9500      	str	r5, [sp, #0]
 801074a:	4663      	mov	r3, ip
 801074c:	4a24      	ldr	r2, [pc, #144]	@ (80107e0 <LIDAR_get_info+0x2a8>)
 801074e:	2111      	movs	r1, #17
 8010750:	f008 fcbc 	bl	80190cc <sniprintf>


	// Affichage des informations
	printf("Start sign : %04X\r\n", h_LIDAR->device_info.start_sign);
 8010754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010756:	8b1b      	ldrh	r3, [r3, #24]
 8010758:	4619      	mov	r1, r3
 801075a:	4822      	ldr	r0, [pc, #136]	@ (80107e4 <LIDAR_get_info+0x2ac>)
 801075c:	f009 fc66 	bl	801a02c <iprintf>
	printf("Length : %lu\r\n", h_LIDAR->device_info.length);
 8010760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010762:	69db      	ldr	r3, [r3, #28]
 8010764:	4619      	mov	r1, r3
 8010766:	4820      	ldr	r0, [pc, #128]	@ (80107e8 <LIDAR_get_info+0x2b0>)
 8010768:	f009 fc60 	bl	801a02c <iprintf>
	printf("Mode : %X\r\n", h_LIDAR->device_info.mode);
 801076c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801076e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010772:	4619      	mov	r1, r3
 8010774:	481d      	ldr	r0, [pc, #116]	@ (80107ec <LIDAR_get_info+0x2b4>)
 8010776:	f009 fc59 	bl	801a02c <iprintf>
	printf("Type code : %X\r\n", h_LIDAR->device_info.type_code);
 801077a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801077c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8010780:	4619      	mov	r1, r3
 8010782:	481b      	ldr	r0, [pc, #108]	@ (80107f0 <LIDAR_get_info+0x2b8>)
 8010784:	f009 fc52 	bl	801a02c <iprintf>
	printf("Model : %X\r\n", h_LIDAR->device_info.model);
 8010788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801078a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 801078e:	4619      	mov	r1, r3
 8010790:	4818      	ldr	r0, [pc, #96]	@ (80107f4 <LIDAR_get_info+0x2bc>)
 8010792:	f009 fc4b 	bl	801a02c <iprintf>
	printf("Firmware version : %s\r\n", h_LIDAR->device_info.firmware);
 8010796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010798:	3323      	adds	r3, #35	@ 0x23
 801079a:	4619      	mov	r1, r3
 801079c:	4816      	ldr	r0, [pc, #88]	@ (80107f8 <LIDAR_get_info+0x2c0>)
 801079e:	f009 fc45 	bl	801a02c <iprintf>
	printf("Hardware version : %u\r\n", h_LIDAR->device_info.hardware);
 80107a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107a4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80107a8:	4619      	mov	r1, r3
 80107aa:	4814      	ldr	r0, [pc, #80]	@ (80107fc <LIDAR_get_info+0x2c4>)
 80107ac:	f009 fc3e 	bl	801a02c <iprintf>
	printf("Serial number : %s\r\n", h_LIDAR->device_info.serial);
 80107b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107b2:	332a      	adds	r3, #42	@ 0x2a
 80107b4:	4619      	mov	r1, r3
 80107b6:	4812      	ldr	r0, [pc, #72]	@ (8010800 <LIDAR_get_info+0x2c8>)
 80107b8:	f009 fc38 	bl	801a02c <iprintf>

	return 0;
 80107bc:	2300      	movs	r3, #0
}
 80107be:	4618      	mov	r0, r3
 80107c0:	3734      	adds	r7, #52	@ 0x34
 80107c2:	46bd      	mov	sp, r7
 80107c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107c6:	bf00      	nop
 80107c8:	0801e228 	.word	0x0801e228
 80107cc:	0801e294 	.word	0x0801e294
 80107d0:	0801e2c8 	.word	0x0801e2c8
 80107d4:	0801e2e8 	.word	0x0801e2e8
 80107d8:	0801e310 	.word	0x0801e310
 80107dc:	0801e32c 	.word	0x0801e32c
 80107e0:	0801e334 	.word	0x0801e334
 80107e4:	0801e378 	.word	0x0801e378
 80107e8:	0801e38c 	.word	0x0801e38c
 80107ec:	0801e39c 	.word	0x0801e39c
 80107f0:	0801e3a8 	.word	0x0801e3a8
 80107f4:	0801e3bc 	.word	0x0801e3bc
 80107f8:	0801e3cc 	.word	0x0801e3cc
 80107fc:	0801e3e4 	.word	0x0801e3e4
 8010800:	0801e3fc 	.word	0x0801e3fc

08010804 <LIDAR_get_health_stat>:


int LIDAR_get_health_stat(h_LIDAR_t *h_LIDAR) {
 8010804:	b580      	push	{r7, lr}
 8010806:	b084      	sub	sp, #16
 8010808:	af00      	add	r7, sp, #0
 801080a:	6078      	str	r0, [r7, #4]
	uint8_t cmd_buff[CMD_BUFF_SIZE] = {CMD_BEGIN, CMD_HEALTH};
 801080c:	f249 13a5 	movw	r3, #37285	@ 0x91a5
 8010810:	813b      	strh	r3, [r7, #8]

	// Envoi de la commande pour obtenir l'état de santé
	if (h_LIDAR->serial_drv.it_transmit(cmd_buff, CMD_BUFF_SIZE) != 0) {
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	68db      	ldr	r3, [r3, #12]
 8010816:	f107 0208 	add.w	r2, r7, #8
 801081a:	2102      	movs	r1, #2
 801081c:	4610      	mov	r0, r2
 801081e:	4798      	blx	r3
 8010820:	4603      	mov	r3, r0
 8010822:	2b00      	cmp	r3, #0
 8010824:	d005      	beq.n	8010832 <LIDAR_get_health_stat+0x2e>
		printf("Erreur lors de l'envoi de la commande.\r\n");
 8010826:	4861      	ldr	r0, [pc, #388]	@ (80109ac <LIDAR_get_health_stat+0x1a8>)
 8010828:	f009 fc68 	bl	801a0fc <puts>
		return -1;
 801082c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010830:	e0b8      	b.n	80109a4 <LIDAR_get_health_stat+0x1a0>
	}

	// Préparation à la réception
	h_LIDAR->rx_flag_uart = 0; // Réinitialise le drapeau
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010838:	2200      	movs	r2, #0
 801083a:	f883 27f0 	strb.w	r2, [r3, #2032]	@ 0x7f0
	if (h_LIDAR->serial_drv.it_receive(h_LIDAR->health_buff, HEALTH_BUFF_SIZE) != 0) {
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	689b      	ldr	r3, [r3, #8]
 8010842:	687a      	ldr	r2, [r7, #4]
 8010844:	3267      	adds	r2, #103	@ 0x67
 8010846:	210a      	movs	r1, #10
 8010848:	4610      	mov	r0, r2
 801084a:	4798      	blx	r3
 801084c:	4603      	mov	r3, r0
 801084e:	2b00      	cmp	r3, #0
 8010850:	d005      	beq.n	801085e <LIDAR_get_health_stat+0x5a>
		printf("Erreur lors de la préparation de la réception.\r\n");
 8010852:	4857      	ldr	r0, [pc, #348]	@ (80109b0 <LIDAR_get_health_stat+0x1ac>)
 8010854:	f009 fc52 	bl	801a0fc <puts>
		return -2;
 8010858:	f06f 0301 	mvn.w	r3, #1
 801085c:	e0a2      	b.n	80109a4 <LIDAR_get_health_stat+0x1a0>
	}

	// Attente de la réception
	uint32_t start_time = HAL_GetTick();
 801085e:	f7f5 ff9f 	bl	80067a0 <HAL_GetTick>
 8010862:	60f8      	str	r0, [r7, #12]
	while (!h_LIDAR->rx_flag_uart) {
 8010864:	e00d      	b.n	8010882 <LIDAR_get_health_stat+0x7e>
		if (HAL_GetTick() - start_time > 1000) { // Timeout de 1000 ms
 8010866:	f7f5 ff9b 	bl	80067a0 <HAL_GetTick>
 801086a:	4602      	mov	r2, r0
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	1ad3      	subs	r3, r2, r3
 8010870:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010874:	d905      	bls.n	8010882 <LIDAR_get_health_stat+0x7e>
			printf("Timeout lors de la reception.\r\n");
 8010876:	484f      	ldr	r0, [pc, #316]	@ (80109b4 <LIDAR_get_health_stat+0x1b0>)
 8010878:	f009 fc40 	bl	801a0fc <puts>
			return -3;
 801087c:	f06f 0302 	mvn.w	r3, #2
 8010880:	e090      	b.n	80109a4 <LIDAR_get_health_stat+0x1a0>
	while (!h_LIDAR->rx_flag_uart) {
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010888:	f893 37f0 	ldrb.w	r3, [r3, #2032]	@ 0x7f0
 801088c:	b2db      	uxtb	r3, r3
 801088e:	2b00      	cmp	r3, #0
 8010890:	d0e9      	beq.n	8010866 <LIDAR_get_health_stat+0x62>
		}
	}

	// Analyse des données
	h_LIDAR->health_stat.start_sign = (h_LIDAR->health_buff[0] << 8) | h_LIDAR->health_buff[1];
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	f893 3067 	ldrb.w	r3, [r3, #103]	@ 0x67
 8010898:	021b      	lsls	r3, r3, #8
 801089a:	b21a      	sxth	r2, r3
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80108a2:	b21b      	sxth	r3, r3
 80108a4:	4313      	orrs	r3, r2
 80108a6:	b21b      	sxth	r3, r3
 80108a8:	b29a      	uxth	r2, r3
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	879a      	strh	r2, [r3, #60]	@ 0x3c
	h_LIDAR->health_stat.length = (h_LIDAR->health_buff[2]) |
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80108b4:	461a      	mov	r2, r3
			(h_LIDAR->health_buff[3] << 8) |
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 80108bc:	021b      	lsls	r3, r3, #8
	h_LIDAR->health_stat.length = (h_LIDAR->health_buff[2]) |
 80108be:	431a      	orrs	r2, r3
			(h_LIDAR->health_buff[4] << 16);
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 80108c6:	041b      	lsls	r3, r3, #16
			(h_LIDAR->health_buff[3] << 8) |
 80108c8:	4313      	orrs	r3, r2
 80108ca:	461a      	mov	r2, r3
	h_LIDAR->health_stat.length = (h_LIDAR->health_buff[2]) |
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	641a      	str	r2, [r3, #64]	@ 0x40
	h_LIDAR->health_stat.mode = h_LIDAR->health_buff[5] >> 6;
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 80108d6:	099b      	lsrs	r3, r3, #6
 80108d8:	b2da      	uxtb	r2, r3
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	h_LIDAR->health_stat.type_code = h_LIDAR->health_buff[6];
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	f893 206d 	ldrb.w	r2, [r3, #109]	@ 0x6d
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	h_LIDAR->health_stat.status_code = h_LIDAR->health_buff[7];
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	f893 206e 	ldrb.w	r2, [r3, #110]	@ 0x6e
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
	h_LIDAR->health_stat.error_code = h_LIDAR->health_buff[8] | (h_LIDAR->health_buff[9] << 8);
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	f893 306f 	ldrb.w	r3, [r3, #111]	@ 0x6f
 80108fe:	b21a      	sxth	r2, r3
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8010906:	021b      	lsls	r3, r3, #8
 8010908:	b21b      	sxth	r3, r3
 801090a:	4313      	orrs	r3, r2
 801090c:	b21b      	sxth	r3, r3
 801090e:	b29a      	uxth	r2, r3
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

	if (h_LIDAR->health_stat.start_sign != 0xA55A) {
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801091a:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 801091e:	4293      	cmp	r3, r2
 8010920:	d008      	beq.n	8010934 <LIDAR_get_health_stat+0x130>
		printf("Signature de debut invalide : %04X\r\n", h_LIDAR->health_stat.start_sign);
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8010926:	4619      	mov	r1, r3
 8010928:	4823      	ldr	r0, [pc, #140]	@ (80109b8 <LIDAR_get_health_stat+0x1b4>)
 801092a:	f009 fb7f 	bl	801a02c <iprintf>
		return -4;
 801092e:	f06f 0303 	mvn.w	r3, #3
 8010932:	e037      	b.n	80109a4 <LIDAR_get_health_stat+0x1a0>
	}

	if (h_LIDAR->health_stat.type_code != 0x06) {
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801093a:	2b06      	cmp	r3, #6
 801093c:	d009      	beq.n	8010952 <LIDAR_get_health_stat+0x14e>
		printf("Type code invalide : %X\r\n", h_LIDAR->health_stat.type_code);
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010944:	4619      	mov	r1, r3
 8010946:	481d      	ldr	r0, [pc, #116]	@ (80109bc <LIDAR_get_health_stat+0x1b8>)
 8010948:	f009 fb70 	bl	801a02c <iprintf>
		return -5;
 801094c:	f06f 0304 	mvn.w	r3, #4
 8010950:	e028      	b.n	80109a4 <LIDAR_get_health_stat+0x1a0>
	}

	// Affichage de l'état de santé
	printf("Start sign : %04X\r\n", h_LIDAR->health_stat.start_sign);
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8010956:	4619      	mov	r1, r3
 8010958:	4819      	ldr	r0, [pc, #100]	@ (80109c0 <LIDAR_get_health_stat+0x1bc>)
 801095a:	f009 fb67 	bl	801a02c <iprintf>
	printf("Length : %lu\r\n", h_LIDAR->health_stat.length);
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010962:	4619      	mov	r1, r3
 8010964:	4817      	ldr	r0, [pc, #92]	@ (80109c4 <LIDAR_get_health_stat+0x1c0>)
 8010966:	f009 fb61 	bl	801a02c <iprintf>
	printf("Mode : %X\r\n", h_LIDAR->health_stat.mode);
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010970:	4619      	mov	r1, r3
 8010972:	4815      	ldr	r0, [pc, #84]	@ (80109c8 <LIDAR_get_health_stat+0x1c4>)
 8010974:	f009 fb5a 	bl	801a02c <iprintf>
	printf("Type code : %X\r\n", h_LIDAR->health_stat.type_code);
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801097e:	4619      	mov	r1, r3
 8010980:	4812      	ldr	r0, [pc, #72]	@ (80109cc <LIDAR_get_health_stat+0x1c8>)
 8010982:	f009 fb53 	bl	801a02c <iprintf>
	printf("Status code : %02X\r\n", h_LIDAR->health_stat.status_code);
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 801098c:	4619      	mov	r1, r3
 801098e:	4810      	ldr	r0, [pc, #64]	@ (80109d0 <LIDAR_get_health_stat+0x1cc>)
 8010990:	f009 fb4c 	bl	801a02c <iprintf>
	printf("Error code : %04X\r\n", h_LIDAR->health_stat.error_code);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801099a:	4619      	mov	r1, r3
 801099c:	480d      	ldr	r0, [pc, #52]	@ (80109d4 <LIDAR_get_health_stat+0x1d0>)
 801099e:	f009 fb45 	bl	801a02c <iprintf>

	return 0;
 80109a2:	2300      	movs	r3, #0
}
 80109a4:	4618      	mov	r0, r3
 80109a6:	3710      	adds	r7, #16
 80109a8:	46bd      	mov	sp, r7
 80109aa:	bd80      	pop	{r7, pc}
 80109ac:	0801e228 	.word	0x0801e228
 80109b0:	0801e414 	.word	0x0801e414
 80109b4:	0801e2c8 	.word	0x0801e2c8
 80109b8:	0801e2e8 	.word	0x0801e2e8
 80109bc:	0801e310 	.word	0x0801e310
 80109c0:	0801e378 	.word	0x0801e378
 80109c4:	0801e38c 	.word	0x0801e38c
 80109c8:	0801e39c 	.word	0x0801e39c
 80109cc:	0801e3a8 	.word	0x0801e3a8
 80109d0:	0801e448 	.word	0x0801e448
 80109d4:	0801e460 	.word	0x0801e460

080109d8 <LIDAR_start_scan_dma>:

int LIDAR_start_scan_dma(h_LIDAR_t *h_LIDAR) {
 80109d8:	b580      	push	{r7, lr}
 80109da:	b084      	sub	sp, #16
 80109dc:	af00      	add	r7, sp, #0
 80109de:	6078      	str	r0, [r7, #4]
	uint8_t cmd_buff[CMD_BUFF_SIZE] = {CMD_BEGIN, CMD_START}; // Commande pour démarrer le scan
 80109e0:	f246 03a5 	movw	r3, #24741	@ 0x60a5
 80109e4:	81bb      	strh	r3, [r7, #12]

	// Envoi de la commande
	if (h_LIDAR->serial_drv.it_transmit(cmd_buff, CMD_BUFF_SIZE) != 0) {
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	68db      	ldr	r3, [r3, #12]
 80109ea:	f107 020c 	add.w	r2, r7, #12
 80109ee:	2102      	movs	r1, #2
 80109f0:	4610      	mov	r0, r2
 80109f2:	4798      	blx	r3
 80109f4:	4603      	mov	r3, r0
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d005      	beq.n	8010a06 <LIDAR_start_scan_dma+0x2e>
		printf("Erreur lors de l'envoi de la commande de démarrage du scan.\r\n");
 80109fa:	4810      	ldr	r0, [pc, #64]	@ (8010a3c <LIDAR_start_scan_dma+0x64>)
 80109fc:	f009 fb7e 	bl	801a0fc <puts>
		return -1;
 8010a00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010a04:	e015      	b.n	8010a32 <LIDAR_start_scan_dma+0x5a>
	}

	// Configurer la réception DMA en mode circulaire
	if (h_LIDAR->serial_drv.dma_receive(h_LIDAR->processing.receive_buff, DATA_BUFF_SIZE) != 0) {
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	691b      	ldr	r3, [r3, #16]
 8010a0a:	687a      	ldr	r2, [r7, #4]
 8010a0c:	f502 625f 	add.w	r2, r2, #3568	@ 0xdf0
 8010a10:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 8010a14:	4610      	mov	r0, r2
 8010a16:	4798      	blx	r3
 8010a18:	4603      	mov	r3, r0
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d005      	beq.n	8010a2a <LIDAR_start_scan_dma+0x52>
		printf("Erreur lors de la configuration de la réception DMA.\r\n");
 8010a1e:	4808      	ldr	r0, [pc, #32]	@ (8010a40 <LIDAR_start_scan_dma+0x68>)
 8010a20:	f009 fb6c 	bl	801a0fc <puts>
		return -2;
 8010a24:	f06f 0301 	mvn.w	r3, #1
 8010a28:	e003      	b.n	8010a32 <LIDAR_start_scan_dma+0x5a>
	}

	printf("Scan DMA demarre avec succes en mode circulaire.\r\n");
 8010a2a:	4806      	ldr	r0, [pc, #24]	@ (8010a44 <LIDAR_start_scan_dma+0x6c>)
 8010a2c:	f009 fb66 	bl	801a0fc <puts>
	return 0;
 8010a30:	2300      	movs	r3, #0
}
 8010a32:	4618      	mov	r0, r3
 8010a34:	3710      	adds	r7, #16
 8010a36:	46bd      	mov	sp, r7
 8010a38:	bd80      	pop	{r7, pc}
 8010a3a:	bf00      	nop
 8010a3c:	0801e474 	.word	0x0801e474
 8010a40:	0801e4b4 	.word	0x0801e4b4
 8010a44:	0801e4ec 	.word	0x0801e4ec

08010a48 <LIDAR_process_frame>:

void LIDAR_process_frame(h_LIDAR_t *LIDAR, uint8_t *buff) {
 8010a48:	b480      	push	{r7}
 8010a4a:	b08d      	sub	sp, #52	@ 0x34
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
 8010a50:	6039      	str	r1, [r7, #0]
	// uint8_t *buff = LIDAR->processing.frame_buff; // Buffer circulaire DMA
	int buffer_size = FRAME_BUFF_SIZE;              // Taille totale du buffer
 8010a52:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8010a56:	627b      	str	r3, [r7, #36]	@ 0x24
	int start_idx = 0;                             // Indice de départ pour parcourir le buffer
 8010a58:	2300      	movs	r3, #0
 8010a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	while (start_idx < buffer_size) {
 8010a5c:	e0ea      	b.n	8010c34 <LIDAR_process_frame+0x1ec>

		if (buff[start_idx] == 0xAA && buff[(start_idx + 1) % buffer_size] == 0x55) {
 8010a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a60:	683a      	ldr	r2, [r7, #0]
 8010a62:	4413      	add	r3, r2
 8010a64:	781b      	ldrb	r3, [r3, #0]
 8010a66:	2baa      	cmp	r3, #170	@ 0xaa
 8010a68:	f040 80e1 	bne.w	8010c2e <LIDAR_process_frame+0x1e6>
 8010a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a6e:	3301      	adds	r3, #1
 8010a70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010a72:	fb93 f2f2 	sdiv	r2, r3, r2
 8010a76:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010a78:	fb01 f202 	mul.w	r2, r1, r2
 8010a7c:	1a9b      	subs	r3, r3, r2
 8010a7e:	461a      	mov	r2, r3
 8010a80:	683b      	ldr	r3, [r7, #0]
 8010a82:	4413      	add	r3, r2
 8010a84:	781b      	ldrb	r3, [r3, #0]
 8010a86:	2b55      	cmp	r3, #85	@ 0x55
 8010a88:	f040 80d1 	bne.w	8010c2e <LIDAR_process_frame+0x1e6>

			//printf("Trame trouvée \r\n");

			// L'entête est trouvé, extraire les métadonnées
			int header_idx = start_idx; // Index actuel pour début de trame
 8010a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a8e:	623b      	str	r3, [r7, #32]

			// Start Angle
			uint16_t FSA = (buff[(header_idx + 4) % buffer_size] |
 8010a90:	6a3b      	ldr	r3, [r7, #32]
 8010a92:	3304      	adds	r3, #4
 8010a94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010a96:	fb93 f2f2 	sdiv	r2, r3, r2
 8010a9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010a9c:	fb01 f202 	mul.w	r2, r1, r2
 8010aa0:	1a9b      	subs	r3, r3, r2
 8010aa2:	461a      	mov	r2, r3
 8010aa4:	683b      	ldr	r3, [r7, #0]
 8010aa6:	4413      	add	r3, r2
 8010aa8:	781b      	ldrb	r3, [r3, #0]
 8010aaa:	4618      	mov	r0, r3
					(buff[(header_idx + 5) % buffer_size] << 8)) >>
 8010aac:	6a3b      	ldr	r3, [r7, #32]
 8010aae:	3305      	adds	r3, #5
 8010ab0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010ab2:	fb93 f2f2 	sdiv	r2, r3, r2
 8010ab6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010ab8:	fb01 f202 	mul.w	r2, r1, r2
 8010abc:	1a9b      	subs	r3, r3, r2
 8010abe:	461a      	mov	r2, r3
 8010ac0:	683b      	ldr	r3, [r7, #0]
 8010ac2:	4413      	add	r3, r2
 8010ac4:	781b      	ldrb	r3, [r3, #0]
 8010ac6:	021b      	lsls	r3, r3, #8
			uint16_t FSA = (buff[(header_idx + 4) % buffer_size] |
 8010ac8:	4303      	orrs	r3, r0
					(buff[(header_idx + 5) % buffer_size] << 8)) >>
 8010aca:	11db      	asrs	r3, r3, #7
			uint16_t FSA = (buff[(header_idx + 4) % buffer_size] |
 8010acc:	83fb      	strh	r3, [r7, #30]
							7; // Shift de 7 pour diviser de 64 + Shift à 1 pour avoir l'angle en degré

			// End Angle
			uint16_t LSA = (buff[(header_idx + 6) % buffer_size] |
 8010ace:	6a3b      	ldr	r3, [r7, #32]
 8010ad0:	3306      	adds	r3, #6
 8010ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010ad4:	fb93 f2f2 	sdiv	r2, r3, r2
 8010ad8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010ada:	fb01 f202 	mul.w	r2, r1, r2
 8010ade:	1a9b      	subs	r3, r3, r2
 8010ae0:	461a      	mov	r2, r3
 8010ae2:	683b      	ldr	r3, [r7, #0]
 8010ae4:	4413      	add	r3, r2
 8010ae6:	781b      	ldrb	r3, [r3, #0]
 8010ae8:	4618      	mov	r0, r3
					(buff[(header_idx + 7) % buffer_size] << 8)) >>
 8010aea:	6a3b      	ldr	r3, [r7, #32]
 8010aec:	3307      	adds	r3, #7
 8010aee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010af0:	fb93 f2f2 	sdiv	r2, r3, r2
 8010af4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010af6:	fb01 f202 	mul.w	r2, r1, r2
 8010afa:	1a9b      	subs	r3, r3, r2
 8010afc:	461a      	mov	r2, r3
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	4413      	add	r3, r2
 8010b02:	781b      	ldrb	r3, [r3, #0]
 8010b04:	021b      	lsls	r3, r3, #8
			uint16_t LSA = (buff[(header_idx + 6) % buffer_size] |
 8010b06:	4303      	orrs	r3, r0
					(buff[(header_idx + 7) % buffer_size] << 8)) >>
 8010b08:	11db      	asrs	r3, r3, #7
			uint16_t LSA = (buff[(header_idx + 6) % buffer_size] |
 8010b0a:	83bb      	strh	r3, [r7, #28]
							7; // Shift de 7 pour diviser de 64 + Shift à 1 pour avoir l'angle en degré

			// Nombre de points
			uint8_t LSN = buff[(header_idx + 3) % buffer_size];
 8010b0c:	6a3b      	ldr	r3, [r7, #32]
 8010b0e:	3303      	adds	r3, #3
 8010b10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010b12:	fb93 f2f2 	sdiv	r2, r3, r2
 8010b16:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010b18:	fb01 f202 	mul.w	r2, r1, r2
 8010b1c:	1a9b      	subs	r3, r3, r2
 8010b1e:	461a      	mov	r2, r3
 8010b20:	683b      	ldr	r3, [r7, #0]
 8010b22:	4413      	add	r3, r2
 8010b24:	781b      	ldrb	r3, [r3, #0]
 8010b26:	76fb      	strb	r3, [r7, #27]

			// Calcul de la taille totale attendue de la trame
			int frame_size = 10 + LSN * 2; // 10 octets d'entête + 2 octets par point
 8010b28:	7efb      	ldrb	r3, [r7, #27]
 8010b2a:	3305      	adds	r3, #5
 8010b2c:	005b      	lsls	r3, r3, #1
 8010b2e:	617b      	str	r3, [r7, #20]
			if (frame_size > buffer_size) {
 8010b30:	697a      	ldr	r2, [r7, #20]
 8010b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b34:	429a      	cmp	r2, r3
 8010b36:	f300 8083 	bgt.w	8010c40 <LIDAR_process_frame+0x1f8>
				//                printf("Erreur : Taille de la trame (%d) dépasse la taille du buffer (%d).\r\n", frame_size, buffer_size);
				break;
			}

			// Vérifier si toute la trame est contenue dans le buffer
			if ((start_idx + frame_size) % buffer_size < start_idx) {
 8010b3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010b3c:	697b      	ldr	r3, [r7, #20]
 8010b3e:	4413      	add	r3, r2
 8010b40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010b42:	fb93 f2f2 	sdiv	r2, r3, r2
 8010b46:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010b48:	fb01 f202 	mul.w	r2, r1, r2
 8010b4c:	1a9b      	subs	r3, r3, r2
 8010b4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010b50:	429a      	cmp	r2, r3
 8010b52:	dc77      	bgt.n	8010c44 <LIDAR_process_frame+0x1fc>
			//                continue;
			//            }

			// Traiter les données de la trame

			for (int i = 0; i < LSN; i++) {
 8010b54:	2300      	movs	r3, #0
 8010b56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010b58:	e060      	b.n	8010c1c <LIDAR_process_frame+0x1d4>
				// Lecture de la distance brute
				uint16_t Si = buff[(header_idx + 10 + i * 2) % buffer_size] |
 8010b5a:	6a3b      	ldr	r3, [r7, #32]
 8010b5c:	f103 020a 	add.w	r2, r3, #10
 8010b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b62:	005b      	lsls	r3, r3, #1
 8010b64:	4413      	add	r3, r2
 8010b66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010b68:	fb93 f2f2 	sdiv	r2, r3, r2
 8010b6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010b6e:	fb01 f202 	mul.w	r2, r1, r2
 8010b72:	1a9b      	subs	r3, r3, r2
 8010b74:	461a      	mov	r2, r3
 8010b76:	683b      	ldr	r3, [r7, #0]
 8010b78:	4413      	add	r3, r2
 8010b7a:	781b      	ldrb	r3, [r3, #0]
 8010b7c:	b21a      	sxth	r2, r3
						(buff[(header_idx + 11 + i * 2) % buffer_size] << 8);
 8010b7e:	6a3b      	ldr	r3, [r7, #32]
 8010b80:	f103 010b 	add.w	r1, r3, #11
 8010b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b86:	005b      	lsls	r3, r3, #1
 8010b88:	440b      	add	r3, r1
 8010b8a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010b8c:	fb93 f1f1 	sdiv	r1, r3, r1
 8010b90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010b92:	fb00 f101 	mul.w	r1, r0, r1
 8010b96:	1a5b      	subs	r3, r3, r1
 8010b98:	4619      	mov	r1, r3
 8010b9a:	683b      	ldr	r3, [r7, #0]
 8010b9c:	440b      	add	r3, r1
 8010b9e:	781b      	ldrb	r3, [r3, #0]
 8010ba0:	021b      	lsls	r3, r3, #8
				uint16_t Si = buff[(header_idx + 10 + i * 2) % buffer_size] |
 8010ba2:	b21b      	sxth	r3, r3
 8010ba4:	4313      	orrs	r3, r2
 8010ba6:	b21b      	sxth	r3, r3
 8010ba8:	827b      	strh	r3, [r7, #18]


				int Di = Si / 4; // Distance réelle en mm
 8010baa:	8a7b      	ldrh	r3, [r7, #18]
 8010bac:	089b      	lsrs	r3, r3, #2
 8010bae:	b29b      	uxth	r3, r3
 8010bb0:	60fb      	str	r3, [r7, #12]

				// Calcul de l'angle
				int Ai = (i+1)*abs(LSA-FSA)/(LSN-1) + FSA;
 8010bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bb4:	3301      	adds	r3, #1
 8010bb6:	8bb9      	ldrh	r1, [r7, #28]
 8010bb8:	8bfa      	ldrh	r2, [r7, #30]
 8010bba:	1a8a      	subs	r2, r1, r2
 8010bbc:	2a00      	cmp	r2, #0
 8010bbe:	bfb8      	it	lt
 8010bc0:	4252      	neglt	r2, r2
 8010bc2:	fb03 f202 	mul.w	r2, r3, r2
 8010bc6:	7efb      	ldrb	r3, [r7, #27]
 8010bc8:	3b01      	subs	r3, #1
 8010bca:	fb92 f2f3 	sdiv	r2, r2, r3
 8010bce:	8bfb      	ldrh	r3, [r7, #30]
 8010bd0:	4413      	add	r3, r2
 8010bd2:	60bb      	str	r3, [r7, #8]

				if (Ai < 0 || Ai >= 360) {
 8010bd4:	68bb      	ldr	r3, [r7, #8]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	db1c      	blt.n	8010c14 <LIDAR_process_frame+0x1cc>
 8010bda:	68bb      	ldr	r3, [r7, #8]
 8010bdc:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8010be0:	da18      	bge.n	8010c14 <LIDAR_process_frame+0x1cc>
					continue;
				}

				// Stockage dans le buffer des points
				if (Di < 50 || Di > 4000) {
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	2b31      	cmp	r3, #49	@ 0x31
 8010be6:	dd03      	ble.n	8010bf0 <LIDAR_process_frame+0x1a8>
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8010bee:	dd08      	ble.n	8010c02 <LIDAR_process_frame+0x1ba>
					LIDAR->processing.point_buff[Ai] = 0; // Distance hors plage
 8010bf0:	687a      	ldr	r2, [r7, #4]
 8010bf2:	68bb      	ldr	r3, [r7, #8]
 8010bf4:	f203 2312 	addw	r3, r3, #530	@ 0x212
 8010bf8:	009b      	lsls	r3, r3, #2
 8010bfa:	4413      	add	r3, r2
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	609a      	str	r2, [r3, #8]
 8010c00:	e009      	b.n	8010c16 <LIDAR_process_frame+0x1ce>
				} else {
					LIDAR->processing.point_buff[Ai] = Di; // Distance valide
 8010c02:	687a      	ldr	r2, [r7, #4]
 8010c04:	68bb      	ldr	r3, [r7, #8]
 8010c06:	f203 2312 	addw	r3, r3, #530	@ 0x212
 8010c0a:	009b      	lsls	r3, r3, #2
 8010c0c:	4413      	add	r3, r2
 8010c0e:	68fa      	ldr	r2, [r7, #12]
 8010c10:	609a      	str	r2, [r3, #8]
 8010c12:	e000      	b.n	8010c16 <LIDAR_process_frame+0x1ce>
					continue;
 8010c14:	bf00      	nop
			for (int i = 0; i < LSN; i++) {
 8010c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c18:	3301      	adds	r3, #1
 8010c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010c1c:	7efb      	ldrb	r3, [r7, #27]
 8010c1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010c20:	429a      	cmp	r2, r3
 8010c22:	db9a      	blt.n	8010b5a <LIDAR_process_frame+0x112>
			}

			//            printf("Trame traitee : FSA=%d, LSA=%d, Points=%d\r\n", FSA, LSA, LSN);

			// Avancer dans le buffer jusqu'à la fin de la trame traitée
			start_idx += frame_size;
 8010c24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010c26:	697b      	ldr	r3, [r7, #20]
 8010c28:	4413      	add	r3, r2
 8010c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (buff[start_idx] == 0xAA && buff[(start_idx + 1) % buffer_size] == 0x55) {
 8010c2c:	e002      	b.n	8010c34 <LIDAR_process_frame+0x1ec>
		} else {
			// Avancer d'un octet si aucune entête valide n'est trouvée
			start_idx++;
 8010c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c30:	3301      	adds	r3, #1
 8010c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (start_idx < buffer_size) {
 8010c34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c38:	429a      	cmp	r2, r3
 8010c3a:	f6ff af10 	blt.w	8010a5e <LIDAR_process_frame+0x16>
		}
	}

}
 8010c3e:	e002      	b.n	8010c46 <LIDAR_process_frame+0x1fe>
				break;
 8010c40:	bf00      	nop
 8010c42:	e000      	b.n	8010c46 <LIDAR_process_frame+0x1fe>
				break;
 8010c44:	bf00      	nop
}
 8010c46:	bf00      	nop
 8010c48:	3734      	adds	r7, #52	@ 0x34
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c50:	4770      	bx	lr

08010c52 <calculer_distance_moyenne>:

// Permet de calculer la distance moyenen sur un tableau entre deux indices
int calculer_distance_moyenne(const int *distances, int debut, int fin) {
 8010c52:	b480      	push	{r7}
 8010c54:	b089      	sub	sp, #36	@ 0x24
 8010c56:	af00      	add	r7, sp, #0
 8010c58:	60f8      	str	r0, [r7, #12]
 8010c5a:	60b9      	str	r1, [r7, #8]
 8010c5c:	607a      	str	r2, [r7, #4]
	int somme = 0;
 8010c5e:	2300      	movs	r3, #0
 8010c60:	61fb      	str	r3, [r7, #28]
	int n = fin - debut + 1;
 8010c62:	687a      	ldr	r2, [r7, #4]
 8010c64:	68bb      	ldr	r3, [r7, #8]
 8010c66:	1ad3      	subs	r3, r2, r3
 8010c68:	3301      	adds	r3, #1
 8010c6a:	617b      	str	r3, [r7, #20]
	for (int i = debut; i <= fin; i++) {
 8010c6c:	68bb      	ldr	r3, [r7, #8]
 8010c6e:	61bb      	str	r3, [r7, #24]
 8010c70:	e00a      	b.n	8010c88 <calculer_distance_moyenne+0x36>
		somme += distances[i];
 8010c72:	69bb      	ldr	r3, [r7, #24]
 8010c74:	009b      	lsls	r3, r3, #2
 8010c76:	68fa      	ldr	r2, [r7, #12]
 8010c78:	4413      	add	r3, r2
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	69fa      	ldr	r2, [r7, #28]
 8010c7e:	4413      	add	r3, r2
 8010c80:	61fb      	str	r3, [r7, #28]
	for (int i = debut; i <= fin; i++) {
 8010c82:	69bb      	ldr	r3, [r7, #24]
 8010c84:	3301      	adds	r3, #1
 8010c86:	61bb      	str	r3, [r7, #24]
 8010c88:	69ba      	ldr	r2, [r7, #24]
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	429a      	cmp	r2, r3
 8010c8e:	ddf0      	ble.n	8010c72 <calculer_distance_moyenne+0x20>
	}
	return somme / n;
 8010c90:	69fa      	ldr	r2, [r7, #28]
 8010c92:	697b      	ldr	r3, [r7, #20]
 8010c94:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8010c98:	4618      	mov	r0, r3
 8010c9a:	3724      	adds	r7, #36	@ 0x24
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca2:	4770      	bx	lr

08010ca4 <find_clusters>:

/**
 * @brief Trouve les clusters dans les données du LIDAR.
 * @param LIDAR Pointeur vers la structure h_LIDAR_t.
 */
void find_clusters(h_LIDAR_t *LIDAR) {
 8010ca4:	b5b0      	push	{r4, r5, r7, lr}
 8010ca6:	b08c      	sub	sp, #48	@ 0x30
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	6078      	str	r0, [r7, #4]
	int *distances = LIDAR->processing.filtred_buff;
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	f503 53ec 	add.w	r3, r3, #7552	@ 0x1d80
 8010cb2:	3310      	adds	r3, #16
 8010cb4:	623b      	str	r3, [r7, #32]
	int cluster_count = 0;
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int debut_cluster = 0;
 8010cba:	2300      	movs	r3, #0
 8010cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
	LIDAR->processing.cluster_DistanceMIN = (Cluster_t){.angle_moyen=0,.distance_moyenne=4000,.count=0};
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010cc4:	461a      	mov	r2, r3
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	f8c2 37e4 	str.w	r3, [r2, #2020]	@ 0x7e4
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010cd2:	461a      	mov	r2, r3
 8010cd4:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8010cd8:	f8c2 37e8 	str.w	r3, [r2, #2024]	@ 0x7e8
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010ce2:	461a      	mov	r2, r3
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	f8c2 37ec 	str.w	r3, [r2, #2028]	@ 0x7ec
	// Parcours des distances pour identifier les clusters
	for (int i = 1; i < NB_DEGRES; i++) {
 8010cea:	2301      	movs	r3, #1
 8010cec:	627b      	str	r3, [r7, #36]	@ 0x24
 8010cee:	e086      	b.n	8010dfe <find_clusters+0x15a>
		// Si la différence dépasse le seuil, un cluster est terminé
		if (fabs(distances[i] - distances[i - 1]) > CLUSTER_SEUIL) {
 8010cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cf2:	009b      	lsls	r3, r3, #2
 8010cf4:	6a3a      	ldr	r2, [r7, #32]
 8010cf6:	4413      	add	r3, r2
 8010cf8:	681a      	ldr	r2, [r3, #0]
 8010cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cfc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8010d00:	3b01      	subs	r3, #1
 8010d02:	009b      	lsls	r3, r3, #2
 8010d04:	6a39      	ldr	r1, [r7, #32]
 8010d06:	440b      	add	r3, r1
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	1ad3      	subs	r3, r2, r3
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	f7f1 fe3b 	bl	8002988 <__aeabi_i2d>
 8010d12:	4602      	mov	r2, r0
 8010d14:	460b      	mov	r3, r1
 8010d16:	4614      	mov	r4, r2
 8010d18:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8010d1c:	f04f 0200 	mov.w	r2, #0
 8010d20:	4b6b      	ldr	r3, [pc, #428]	@ (8010ed0 <find_clusters+0x22c>)
 8010d22:	4620      	mov	r0, r4
 8010d24:	4629      	mov	r1, r5
 8010d26:	f7f2 f929 	bl	8002f7c <__aeabi_dcmpgt>
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d063      	beq.n	8010df8 <find_clusters+0x154>
			// Calcul et stockage des informations du cluster
			int distance_moyenne= calculer_distance_moyenne(distances, debut_cluster, i - 1);
 8010d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d32:	3b01      	subs	r3, #1
 8010d34:	461a      	mov	r2, r3
 8010d36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010d38:	6a38      	ldr	r0, [r7, #32]
 8010d3a:	f7ff ff8a 	bl	8010c52 <calculer_distance_moyenne>
 8010d3e:	61b8      	str	r0, [r7, #24]
			if (cluster_count < MAX_CLUSTERS && distance_moyenne > MIN_DISTANCE) {
 8010d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d42:	2b63      	cmp	r3, #99	@ 0x63
 8010d44:	dc56      	bgt.n	8010df4 <find_clusters+0x150>
 8010d46:	69bb      	ldr	r3, [r7, #24]
 8010d48:	2b28      	cmp	r3, #40	@ 0x28
 8010d4a:	dd53      	ble.n	8010df4 <find_clusters+0x150>
				LIDAR->processing.clusters[cluster_count].distance_moyenne = distance_moyenne;
 8010d4c:	6879      	ldr	r1, [r7, #4]
 8010d4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010d50:	4613      	mov	r3, r2
 8010d52:	005b      	lsls	r3, r3, #1
 8010d54:	4413      	add	r3, r2
 8010d56:	009b      	lsls	r3, r3, #2
 8010d58:	440b      	add	r3, r1
 8010d5a:	f503 530c 	add.w	r3, r3, #8960	@ 0x2300
 8010d5e:	3334      	adds	r3, #52	@ 0x34
 8010d60:	69ba      	ldr	r2, [r7, #24]
 8010d62:	601a      	str	r2, [r3, #0]
				LIDAR->processing.clusters[cluster_count].angle_moyen = (debut_cluster + i - 1) / 2;
 8010d64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d68:	4413      	add	r3, r2
 8010d6a:	3b01      	subs	r3, #1
 8010d6c:	0fda      	lsrs	r2, r3, #31
 8010d6e:	4413      	add	r3, r2
 8010d70:	105b      	asrs	r3, r3, #1
 8010d72:	4618      	mov	r0, r3
 8010d74:	6879      	ldr	r1, [r7, #4]
 8010d76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010d78:	4613      	mov	r3, r2
 8010d7a:	005b      	lsls	r3, r3, #1
 8010d7c:	4413      	add	r3, r2
 8010d7e:	009b      	lsls	r3, r3, #2
 8010d80:	440b      	add	r3, r1
 8010d82:	f503 530c 	add.w	r3, r3, #8960	@ 0x2300
 8010d86:	3330      	adds	r3, #48	@ 0x30
 8010d88:	6018      	str	r0, [r3, #0]
				LIDAR->processing.clusters[cluster_count].count = i - debut_cluster;
 8010d8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d8e:	1ad1      	subs	r1, r2, r3
 8010d90:	6878      	ldr	r0, [r7, #4]
 8010d92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010d94:	4613      	mov	r3, r2
 8010d96:	005b      	lsls	r3, r3, #1
 8010d98:	4413      	add	r3, r2
 8010d9a:	009b      	lsls	r3, r3, #2
 8010d9c:	4403      	add	r3, r0
 8010d9e:	f503 530c 	add.w	r3, r3, #8960	@ 0x2300
 8010da2:	3338      	adds	r3, #56	@ 0x38
 8010da4:	6019      	str	r1, [r3, #0]
				cluster_count++;
 8010da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010da8:	3301      	adds	r3, #1
 8010daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
				if (distance_moyenne <  LIDAR->processing.cluster_DistanceMIN.distance_moyenne){
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010db2:	f8d3 37e8 	ldr.w	r3, [r3, #2024]	@ 0x7e8
 8010db6:	69ba      	ldr	r2, [r7, #24]
 8010db8:	429a      	cmp	r2, r3
 8010dba:	da1b      	bge.n	8010df4 <find_clusters+0x150>
					LIDAR->processing.cluster_DistanceMIN.distance_moyenne = distance_moyenne;
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010dc2:	461a      	mov	r2, r3
 8010dc4:	69bb      	ldr	r3, [r7, #24]
 8010dc6:	f8c2 37e8 	str.w	r3, [r2, #2024]	@ 0x7e8
					LIDAR->processing.cluster_DistanceMIN.angle_moyen = (debut_cluster + i - 1) / 2;
 8010dca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dce:	4413      	add	r3, r2
 8010dd0:	3b01      	subs	r3, #1
 8010dd2:	0fda      	lsrs	r2, r3, #31
 8010dd4:	4413      	add	r3, r2
 8010dd6:	105b      	asrs	r3, r3, #1
 8010dd8:	461a      	mov	r2, r3
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010de0:	f8c3 27e4 	str.w	r2, [r3, #2020]	@ 0x7e4
					LIDAR->processing.cluster_DistanceMIN.count = i - debut_cluster;
 8010de4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010de8:	1ad3      	subs	r3, r2, r3
 8010dea:	687a      	ldr	r2, [r7, #4]
 8010dec:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8010df0:	f8c2 37ec 	str.w	r3, [r2, #2028]	@ 0x7ec
				}
			}
			debut_cluster = i; // Nouveau cluster
 8010df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010df6:	62bb      	str	r3, [r7, #40]	@ 0x28
	for (int i = 1; i < NB_DEGRES; i++) {
 8010df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dfa:	3301      	adds	r3, #1
 8010dfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8010dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e00:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8010e04:	f6ff af74 	blt.w	8010cf0 <find_clusters+0x4c>
		}
	}

	// Traitement du dernier cluster
	int distance_last = calculer_distance_moyenne(distances, debut_cluster, NB_DEGRES - 1);
 8010e08:	f240 1267 	movw	r2, #359	@ 0x167
 8010e0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010e0e:	6a38      	ldr	r0, [r7, #32]
 8010e10:	f7ff ff1f 	bl	8010c52 <calculer_distance_moyenne>
 8010e14:	61f8      	str	r0, [r7, #28]
	if (cluster_count < MAX_CLUSTERS && distance_last > MIN_DISTANCE ) {
 8010e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e18:	2b63      	cmp	r3, #99	@ 0x63
 8010e1a:	dc4e      	bgt.n	8010eba <find_clusters+0x216>
 8010e1c:	69fb      	ldr	r3, [r7, #28]
 8010e1e:	2b28      	cmp	r3, #40	@ 0x28
 8010e20:	dd4b      	ble.n	8010eba <find_clusters+0x216>
		LIDAR->processing.clusters[cluster_count].distance_moyenne = distance_last;
 8010e22:	6879      	ldr	r1, [r7, #4]
 8010e24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010e26:	4613      	mov	r3, r2
 8010e28:	005b      	lsls	r3, r3, #1
 8010e2a:	4413      	add	r3, r2
 8010e2c:	009b      	lsls	r3, r3, #2
 8010e2e:	440b      	add	r3, r1
 8010e30:	f503 530c 	add.w	r3, r3, #8960	@ 0x2300
 8010e34:	3334      	adds	r3, #52	@ 0x34
 8010e36:	69fa      	ldr	r2, [r7, #28]
 8010e38:	601a      	str	r2, [r3, #0]
		LIDAR->processing.clusters[cluster_count].angle_moyen = (debut_cluster + NB_DEGRES - 1) / 2;
 8010e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e3c:	f203 1367 	addw	r3, r3, #359	@ 0x167
 8010e40:	0fda      	lsrs	r2, r3, #31
 8010e42:	4413      	add	r3, r2
 8010e44:	105b      	asrs	r3, r3, #1
 8010e46:	4618      	mov	r0, r3
 8010e48:	6879      	ldr	r1, [r7, #4]
 8010e4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010e4c:	4613      	mov	r3, r2
 8010e4e:	005b      	lsls	r3, r3, #1
 8010e50:	4413      	add	r3, r2
 8010e52:	009b      	lsls	r3, r3, #2
 8010e54:	440b      	add	r3, r1
 8010e56:	f503 530c 	add.w	r3, r3, #8960	@ 0x2300
 8010e5a:	3330      	adds	r3, #48	@ 0x30
 8010e5c:	6018      	str	r0, [r3, #0]
		LIDAR->processing.clusters[cluster_count].count = NB_DEGRES - debut_cluster;
 8010e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e60:	f5c3 71b4 	rsb	r1, r3, #360	@ 0x168
 8010e64:	6878      	ldr	r0, [r7, #4]
 8010e66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010e68:	4613      	mov	r3, r2
 8010e6a:	005b      	lsls	r3, r3, #1
 8010e6c:	4413      	add	r3, r2
 8010e6e:	009b      	lsls	r3, r3, #2
 8010e70:	4403      	add	r3, r0
 8010e72:	f503 530c 	add.w	r3, r3, #8960	@ 0x2300
 8010e76:	3338      	adds	r3, #56	@ 0x38
 8010e78:	6019      	str	r1, [r3, #0]
		cluster_count++;
 8010e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e7c:	3301      	adds	r3, #1
 8010e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (distance_last <  LIDAR->processing.cluster_DistanceMIN.distance_moyenne){
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010e86:	f8d3 37e8 	ldr.w	r3, [r3, #2024]	@ 0x7e8
 8010e8a:	69fa      	ldr	r2, [r7, #28]
 8010e8c:	429a      	cmp	r2, r3
 8010e8e:	da14      	bge.n	8010eba <find_clusters+0x216>
			LIDAR->processing.cluster_DistanceMIN = LIDAR->processing.clusters[cluster_count];
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010e96:	4618      	mov	r0, r3
 8010e98:	6879      	ldr	r1, [r7, #4]
 8010e9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010e9c:	4613      	mov	r3, r2
 8010e9e:	005b      	lsls	r3, r3, #1
 8010ea0:	4413      	add	r3, r2
 8010ea2:	009b      	lsls	r3, r3, #2
 8010ea4:	440b      	add	r3, r1
 8010ea6:	f503 530c 	add.w	r3, r3, #8960	@ 0x2300
 8010eaa:	3328      	adds	r3, #40	@ 0x28
 8010eac:	f200 74e4 	addw	r4, r0, #2020	@ 0x7e4
 8010eb0:	3308      	adds	r3, #8
 8010eb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010eb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		}
	}

	// Mise à jour du compteur de clusters
	LIDAR->processing.cluster_cnt = cluster_count;
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010ec0:	461a      	mov	r2, r3
 8010ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ec4:	f8c2 37e0 	str.w	r3, [r2, #2016]	@ 0x7e0

}
 8010ec8:	bf00      	nop
 8010eca:	3730      	adds	r7, #48	@ 0x30
 8010ecc:	46bd      	mov	sp, r7
 8010ece:	bdb0      	pop	{r4, r5, r7, pc}
 8010ed0:	403e0000 	.word	0x403e0000

08010ed4 <medianFilter>:

//Applique un filtre médian aux données du LIDAR.
void medianFilter(h_LIDAR_t *LIDAR) {
 8010ed4:	b480      	push	{r7}
 8010ed6:	b093      	sub	sp, #76	@ 0x4c
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	6078      	str	r0, [r7, #4]
	int *signal = LIDAR->processing.point_buff;     // Signal brut
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	f503 6305 	add.w	r3, r3, #2128	@ 0x850
 8010ee2:	633b      	str	r3, [r7, #48]	@ 0x30
	int *filtred = LIDAR->processing.filtred_buff; // Signal filtré
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	f503 53ec 	add.w	r3, r3, #7552	@ 0x1d80
 8010eea:	3310      	adds	r3, #16
 8010eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int signal_length = NB_DEGRES;
 8010eee:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8010ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
	int window[5];
	int middle = 2; // La médiane est au centre d'une fenêtre de taille 5
 8010ef4:	2302      	movs	r3, #2
 8010ef6:	627b      	str	r3, [r7, #36]	@ 0x24

	for (int i = 0; i < signal_length; i++) {
 8010ef8:	2300      	movs	r3, #0
 8010efa:	647b      	str	r3, [r7, #68]	@ 0x44
 8010efc:	e06e      	b.n	8010fdc <medianFilter+0x108>
		// Construire la fenêtre de voisinage
		for (int j = 0; j < 5; j++) {
 8010efe:	2300      	movs	r3, #0
 8010f00:	643b      	str	r3, [r7, #64]	@ 0x40
 8010f02:	e01f      	b.n	8010f44 <medianFilter+0x70>
			int index = i - middle + j;
 8010f04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f08:	1ad3      	subs	r3, r2, r3
 8010f0a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010f0c:	4413      	add	r3, r2
 8010f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			// Gérer les bords du signal
			if (index < 0) index = 0;
 8010f10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	da01      	bge.n	8010f1a <medianFilter+0x46>
 8010f16:	2300      	movs	r3, #0
 8010f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (index >= signal_length) index = signal_length - 1;
 8010f1a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f1e:	429a      	cmp	r2, r3
 8010f20:	db02      	blt.n	8010f28 <medianFilter+0x54>
 8010f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f24:	3b01      	subs	r3, #1
 8010f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
			window[j] = signal[index];
 8010f28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f2a:	009b      	lsls	r3, r3, #2
 8010f2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010f2e:	4413      	add	r3, r2
 8010f30:	681a      	ldr	r2, [r3, #0]
 8010f32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010f34:	009b      	lsls	r3, r3, #2
 8010f36:	3348      	adds	r3, #72	@ 0x48
 8010f38:	443b      	add	r3, r7
 8010f3a:	f843 2c3c 	str.w	r2, [r3, #-60]
		for (int j = 0; j < 5; j++) {
 8010f3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010f40:	3301      	adds	r3, #1
 8010f42:	643b      	str	r3, [r7, #64]	@ 0x40
 8010f44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010f46:	2b04      	cmp	r3, #4
 8010f48:	dddc      	ble.n	8010f04 <medianFilter+0x30>
		}

		// Trier la fenêtre pour extraire la médiane
		for (int j = 0; j < 5; j++) {
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010f4e:	e034      	b.n	8010fba <medianFilter+0xe6>
			for (int k = j + 1; k < 5; k++) {
 8010f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f52:	3301      	adds	r3, #1
 8010f54:	637b      	str	r3, [r7, #52]	@ 0x34
 8010f56:	e02a      	b.n	8010fae <medianFilter+0xda>
				if (window[j] > window[k]) {
 8010f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f5a:	009b      	lsls	r3, r3, #2
 8010f5c:	3348      	adds	r3, #72	@ 0x48
 8010f5e:	443b      	add	r3, r7
 8010f60:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8010f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f66:	009b      	lsls	r3, r3, #2
 8010f68:	3348      	adds	r3, #72	@ 0x48
 8010f6a:	443b      	add	r3, r7
 8010f6c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8010f70:	429a      	cmp	r2, r3
 8010f72:	dd19      	ble.n	8010fa8 <medianFilter+0xd4>
					int temp = window[j];
 8010f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f76:	009b      	lsls	r3, r3, #2
 8010f78:	3348      	adds	r3, #72	@ 0x48
 8010f7a:	443b      	add	r3, r7
 8010f7c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8010f80:	623b      	str	r3, [r7, #32]
					window[j] = window[k];
 8010f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f84:	009b      	lsls	r3, r3, #2
 8010f86:	3348      	adds	r3, #72	@ 0x48
 8010f88:	443b      	add	r3, r7
 8010f8a:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8010f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f90:	009b      	lsls	r3, r3, #2
 8010f92:	3348      	adds	r3, #72	@ 0x48
 8010f94:	443b      	add	r3, r7
 8010f96:	f843 2c3c 	str.w	r2, [r3, #-60]
					window[k] = temp;
 8010f9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f9c:	009b      	lsls	r3, r3, #2
 8010f9e:	3348      	adds	r3, #72	@ 0x48
 8010fa0:	443b      	add	r3, r7
 8010fa2:	6a3a      	ldr	r2, [r7, #32]
 8010fa4:	f843 2c3c 	str.w	r2, [r3, #-60]
			for (int k = j + 1; k < 5; k++) {
 8010fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010faa:	3301      	adds	r3, #1
 8010fac:	637b      	str	r3, [r7, #52]	@ 0x34
 8010fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010fb0:	2b04      	cmp	r3, #4
 8010fb2:	ddd1      	ble.n	8010f58 <medianFilter+0x84>
		for (int j = 0; j < 5; j++) {
 8010fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fb6:	3301      	adds	r3, #1
 8010fb8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fbc:	2b04      	cmp	r3, #4
 8010fbe:	ddc7      	ble.n	8010f50 <medianFilter+0x7c>
				}
			}
		}

		// Stocker la médiane dans le tableau filtré
		filtred[i] = window[middle];
 8010fc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010fc2:	009b      	lsls	r3, r3, #2
 8010fc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010fc6:	441a      	add	r2, r3
 8010fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fca:	009b      	lsls	r3, r3, #2
 8010fcc:	3348      	adds	r3, #72	@ 0x48
 8010fce:	443b      	add	r3, r7
 8010fd0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8010fd4:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < signal_length; i++) {
 8010fd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010fd8:	3301      	adds	r3, #1
 8010fda:	647b      	str	r3, [r7, #68]	@ 0x44
 8010fdc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fe0:	429a      	cmp	r2, r3
 8010fe2:	db8c      	blt.n	8010efe <medianFilter+0x2a>
	}
}
 8010fe4:	bf00      	nop
 8010fe6:	bf00      	nop
 8010fe8:	374c      	adds	r7, #76	@ 0x4c
 8010fea:	46bd      	mov	sp, r7
 8010fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff0:	4770      	bx	lr
	...

08010ff4 <uart_transmit>:



// Définir les fonctions UART pour le mode polling
int uart_transmit(uint8_t *p_data, uint16_t size) {
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	b082      	sub	sp, #8
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	6078      	str	r0, [r7, #4]
 8010ffc:	460b      	mov	r3, r1
 8010ffe:	807b      	strh	r3, [r7, #2]
	return HAL_UART_Transmit(&huart2, p_data, size, HAL_MAX_DELAY);
 8011000:	887a      	ldrh	r2, [r7, #2]
 8011002:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011006:	6879      	ldr	r1, [r7, #4]
 8011008:	4803      	ldr	r0, [pc, #12]	@ (8011018 <uart_transmit+0x24>)
 801100a:	f7fc f859 	bl	800d0c0 <HAL_UART_Transmit>
 801100e:	4603      	mov	r3, r0
}
 8011010:	4618      	mov	r0, r3
 8011012:	3708      	adds	r7, #8
 8011014:	46bd      	mov	sp, r7
 8011016:	bd80      	pop	{r7, pc}
 8011018:	20000e78 	.word	0x20000e78

0801101c <uart_poll_receive>:

int uart_poll_receive(uint8_t *p_data, uint16_t size) {
 801101c:	b580      	push	{r7, lr}
 801101e:	b082      	sub	sp, #8
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]
 8011024:	460b      	mov	r3, r1
 8011026:	807b      	strh	r3, [r7, #2]
	return HAL_UART_Receive(&huart2, p_data, size, 100);
 8011028:	887a      	ldrh	r2, [r7, #2]
 801102a:	2364      	movs	r3, #100	@ 0x64
 801102c:	6879      	ldr	r1, [r7, #4]
 801102e:	4804      	ldr	r0, [pc, #16]	@ (8011040 <uart_poll_receive+0x24>)
 8011030:	f7fc f8d4 	bl	800d1dc <HAL_UART_Receive>
 8011034:	4603      	mov	r3, r0
}
 8011036:	4618      	mov	r0, r3
 8011038:	3708      	adds	r7, #8
 801103a:	46bd      	mov	sp, r7
 801103c:	bd80      	pop	{r7, pc}
 801103e:	bf00      	nop
 8011040:	20000e78 	.word	0x20000e78

08011044 <uart_it_receive>:

int uart_it_receive(uint8_t *p_data, uint16_t size){
 8011044:	b580      	push	{r7, lr}
 8011046:	b082      	sub	sp, #8
 8011048:	af00      	add	r7, sp, #0
 801104a:	6078      	str	r0, [r7, #4]
 801104c:	460b      	mov	r3, r1
 801104e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive_IT(&huart2, p_data, size);
 8011050:	887b      	ldrh	r3, [r7, #2]
 8011052:	461a      	mov	r2, r3
 8011054:	6879      	ldr	r1, [r7, #4]
 8011056:	4804      	ldr	r0, [pc, #16]	@ (8011068 <uart_it_receive+0x24>)
 8011058:	f7fc fa1c 	bl	800d494 <HAL_UART_Receive_IT>
	return 0;
 801105c:	2300      	movs	r3, #0
}
 801105e:	4618      	mov	r0, r3
 8011060:	3708      	adds	r7, #8
 8011062:	46bd      	mov	sp, r7
 8011064:	bd80      	pop	{r7, pc}
 8011066:	bf00      	nop
 8011068:	20000e78 	.word	0x20000e78

0801106c <uart_it_transmit>:

int uart_it_transmit(uint8_t *p_data, uint16_t size){
 801106c:	b580      	push	{r7, lr}
 801106e:	b082      	sub	sp, #8
 8011070:	af00      	add	r7, sp, #0
 8011072:	6078      	str	r0, [r7, #4]
 8011074:	460b      	mov	r3, r1
 8011076:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_IT(&huart2, p_data, size);
 8011078:	887b      	ldrh	r3, [r7, #2]
 801107a:	461a      	mov	r2, r3
 801107c:	6879      	ldr	r1, [r7, #4]
 801107e:	4804      	ldr	r0, [pc, #16]	@ (8011090 <uart_it_transmit+0x24>)
 8011080:	f7fc f974 	bl	800d36c <HAL_UART_Transmit_IT>
	return 0;
 8011084:	2300      	movs	r3, #0
}
 8011086:	4618      	mov	r0, r3
 8011088:	3708      	adds	r7, #8
 801108a:	46bd      	mov	sp, r7
 801108c:	bd80      	pop	{r7, pc}
 801108e:	bf00      	nop
 8011090:	20000e78 	.word	0x20000e78

08011094 <uart_dma_receive>:

int uart_dma_receive(uint8_t *p_data, uint16_t size){
 8011094:	b580      	push	{r7, lr}
 8011096:	b082      	sub	sp, #8
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
 801109c:	460b      	mov	r3, r1
 801109e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive_DMA(&huart2, p_data, size);
 80110a0:	887b      	ldrh	r3, [r7, #2]
 80110a2:	461a      	mov	r2, r3
 80110a4:	6879      	ldr	r1, [r7, #4]
 80110a6:	4804      	ldr	r0, [pc, #16]	@ (80110b8 <uart_dma_receive+0x24>)
 80110a8:	f7fc fac0 	bl	800d62c <HAL_UART_Receive_DMA>
	return 0;
 80110ac:	2300      	movs	r3, #0
}
 80110ae:	4618      	mov	r0, r3
 80110b0:	3708      	adds	r7, #8
 80110b2:	46bd      	mov	sp, r7
 80110b4:	bd80      	pop	{r7, pc}
 80110b6:	bf00      	nop
 80110b8:	20000e78 	.word	0x20000e78

080110bc <uart_dma_transmit>:

int uart_dma_transmit(uint8_t *p_data, uint16_t size){
 80110bc:	b580      	push	{r7, lr}
 80110be:	b082      	sub	sp, #8
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
 80110c4:	460b      	mov	r3, r1
 80110c6:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_DMA(&huart2, p_data, size);
 80110c8:	887b      	ldrh	r3, [r7, #2]
 80110ca:	461a      	mov	r2, r3
 80110cc:	6879      	ldr	r1, [r7, #4]
 80110ce:	4804      	ldr	r0, [pc, #16]	@ (80110e0 <uart_dma_transmit+0x24>)
 80110d0:	f7fc fa2c 	bl	800d52c <HAL_UART_Transmit_DMA>
	return 0;
 80110d4:	2300      	movs	r3, #0
}
 80110d6:	4618      	mov	r0, r3
 80110d8:	3708      	adds	r7, #8
 80110da:	46bd      	mov	sp, r7
 80110dc:	bd80      	pop	{r7, pc}
 80110de:	bf00      	nop
 80110e0:	20000e78 	.word	0x20000e78

080110e4 <lidar_init>:
extern SemaphoreHandle_t semb_halfCllbck;
extern SemaphoreHandle_t semb_cpltCllbck;
extern int lidarDebugShell;

SemaphoreHandle_t semb_process_authorized;
void lidar_init(void){
 80110e4:	b580      	push	{r7, lr}
 80110e6:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOA,LIDAR_M_CTR_Pin , SET);
 80110e8:	2201      	movs	r2, #1
 80110ea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80110ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80110f2:	f7f8 fb2b 	bl	800974c <HAL_GPIO_WritePin>

	lidar.serial_drv.transmit = uart_transmit;
 80110f6:	4b0e      	ldr	r3, [pc, #56]	@ (8011130 <lidar_init+0x4c>)
 80110f8:	4a0e      	ldr	r2, [pc, #56]	@ (8011134 <lidar_init+0x50>)
 80110fa:	601a      	str	r2, [r3, #0]
	lidar.serial_drv.poll_receive = uart_poll_receive;
 80110fc:	4b0c      	ldr	r3, [pc, #48]	@ (8011130 <lidar_init+0x4c>)
 80110fe:	4a0e      	ldr	r2, [pc, #56]	@ (8011138 <lidar_init+0x54>)
 8011100:	605a      	str	r2, [r3, #4]

	lidar.serial_drv.it_receive=uart_it_receive;
 8011102:	4b0b      	ldr	r3, [pc, #44]	@ (8011130 <lidar_init+0x4c>)
 8011104:	4a0d      	ldr	r2, [pc, #52]	@ (801113c <lidar_init+0x58>)
 8011106:	609a      	str	r2, [r3, #8]
	lidar.serial_drv.it_transmit=uart_it_transmit;
 8011108:	4b09      	ldr	r3, [pc, #36]	@ (8011130 <lidar_init+0x4c>)
 801110a:	4a0d      	ldr	r2, [pc, #52]	@ (8011140 <lidar_init+0x5c>)
 801110c:	60da      	str	r2, [r3, #12]

	lidar.serial_drv.dma_receive=uart_dma_receive;
 801110e:	4b08      	ldr	r3, [pc, #32]	@ (8011130 <lidar_init+0x4c>)
 8011110:	4a0c      	ldr	r2, [pc, #48]	@ (8011144 <lidar_init+0x60>)
 8011112:	611a      	str	r2, [r3, #16]
	lidar.serial_drv.dma_transmit=uart_dma_transmit;
 8011114:	4b06      	ldr	r3, [pc, #24]	@ (8011130 <lidar_init+0x4c>)
 8011116:	4a0c      	ldr	r2, [pc, #48]	@ (8011148 <lidar_init+0x64>)
 8011118:	615a      	str	r2, [r3, #20]

	semb_process_authorized = xSemaphoreCreateBinary();
 801111a:	2203      	movs	r2, #3
 801111c:	2100      	movs	r1, #0
 801111e:	2001      	movs	r0, #1
 8011120:	f002 ff36 	bl	8013f90 <xQueueGenericCreate>
 8011124:	4603      	mov	r3, r0
 8011126:	4a09      	ldr	r2, [pc, #36]	@ (801114c <lidar_init+0x68>)
 8011128:	6013      	str	r3, [r2, #0]
}
 801112a:	bf00      	nop
 801112c:	bd80      	pop	{r7, pc}
 801112e:	bf00      	nop
 8011130:	20000fec 	.word	0x20000fec
 8011134:	08010ff5 	.word	0x08010ff5
 8011138:	0801101d 	.word	0x0801101d
 801113c:	08011045 	.word	0x08011045
 8011140:	0801106d 	.word	0x0801106d
 8011144:	08011095 	.word	0x08011095
 8011148:	080110bd 	.word	0x080110bd
 801114c:	200037e0 	.word	0x200037e0

08011150 <lidarTake>:

void lidarTake (void * pvParameters){
 8011150:	b580      	push	{r7, lr}
 8011152:	b084      	sub	sp, #16
 8011154:	af00      	add	r7, sp, #0
 8011156:	6078      	str	r0, [r7, #4]
	uint8_t* buff;
	//Remove in the shell
	//LIDAR_start_scan_dma(&lidar) == 0 ? debug(START,"LIDAR") : debug(D_ERROR,"LIDAR");
	SemaphoreHandle_t semMutex_Process=xSemaphoreCreateMutex();
 8011158:	2001      	movs	r0, #1
 801115a:	f002 ff8d 	bl	8014078 <xQueueCreateMutex>
 801115e:	60f8      	str	r0, [r7, #12]
	for(;;){
		// Attente du Semahore de half buffer
		xSemaphoreTake(semb_halfCllbck, portMAX_DELAY);
 8011160:	4b1f      	ldr	r3, [pc, #124]	@ (80111e0 <lidarTake+0x90>)
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8011168:	4618      	mov	r0, r3
 801116a:	f003 faaf 	bl	80146cc <xQueueSemaphoreTake>
		// Pointeur sur le début des données
		buff = lidar.processing.receive_buff;
 801116e:	4b1d      	ldr	r3, [pc, #116]	@ (80111e4 <lidarTake+0x94>)
 8011170:	60bb      	str	r3, [r7, #8]
		xSemaphoreTake(semMutex_Process,portMAX_DELAY);
 8011172:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8011176:	68f8      	ldr	r0, [r7, #12]
 8011178:	f003 faa8 	bl	80146cc <xQueueSemaphoreTake>
		LIDAR_process_frame(&lidar, buff); //Peut provoquer des HardFault sans les mutexs
 801117c:	68b9      	ldr	r1, [r7, #8]
 801117e:	481a      	ldr	r0, [pc, #104]	@ (80111e8 <lidarTake+0x98>)
 8011180:	f7ff fc62 	bl	8010a48 <LIDAR_process_frame>
		xSemaphoreGive(semMutex_Process);
 8011184:	2300      	movs	r3, #0
 8011186:	2200      	movs	r2, #0
 8011188:	2100      	movs	r1, #0
 801118a:	68f8      	ldr	r0, [r7, #12]
 801118c:	f002 ff8c 	bl	80140a8 <xQueueGenericSend>

		xSemaphoreGive(semb_process_authorized);
 8011190:	4b16      	ldr	r3, [pc, #88]	@ (80111ec <lidarTake+0x9c>)
 8011192:	6818      	ldr	r0, [r3, #0]
 8011194:	2300      	movs	r3, #0
 8011196:	2200      	movs	r2, #0
 8011198:	2100      	movs	r1, #0
 801119a:	f002 ff85 	bl	80140a8 <xQueueGenericSend>
		// Attente du semaphore du complete buffer
		xSemaphoreTake(semb_cpltCllbck, portMAX_DELAY);
 801119e:	4b14      	ldr	r3, [pc, #80]	@ (80111f0 <lidarTake+0xa0>)
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80111a6:	4618      	mov	r0, r3
 80111a8:	f003 fa90 	bl	80146cc <xQueueSemaphoreTake>
		// Pointeur sur la moitié des données
		buff = &lidar.processing.receive_buff[FRAME_BUFF_SIZE];
 80111ac:	4b11      	ldr	r3, [pc, #68]	@ (80111f4 <lidarTake+0xa4>)
 80111ae:	60bb      	str	r3, [r7, #8]

		xSemaphoreTake(semMutex_Process,portMAX_DELAY);
 80111b0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80111b4:	68f8      	ldr	r0, [r7, #12]
 80111b6:	f003 fa89 	bl	80146cc <xQueueSemaphoreTake>
		LIDAR_process_frame(&lidar, buff);
 80111ba:	68b9      	ldr	r1, [r7, #8]
 80111bc:	480a      	ldr	r0, [pc, #40]	@ (80111e8 <lidarTake+0x98>)
 80111be:	f7ff fc43 	bl	8010a48 <LIDAR_process_frame>
		xSemaphoreGive(semMutex_Process);
 80111c2:	2300      	movs	r3, #0
 80111c4:	2200      	movs	r2, #0
 80111c6:	2100      	movs	r1, #0
 80111c8:	68f8      	ldr	r0, [r7, #12]
 80111ca:	f002 ff6d 	bl	80140a8 <xQueueGenericSend>

		xSemaphoreGive(semb_process_authorized);
 80111ce:	4b07      	ldr	r3, [pc, #28]	@ (80111ec <lidarTake+0x9c>)
 80111d0:	6818      	ldr	r0, [r3, #0]
 80111d2:	2300      	movs	r3, #0
 80111d4:	2200      	movs	r2, #0
 80111d6:	2100      	movs	r1, #0
 80111d8:	f002 ff66 	bl	80140a8 <xQueueGenericSend>
		xSemaphoreTake(semb_halfCllbck, portMAX_DELAY);
 80111dc:	bf00      	nop
 80111de:	e7bf      	b.n	8011160 <lidarTake+0x10>
 80111e0:	20000778 	.word	0x20000778
 80111e4:	20001ddc 	.word	0x20001ddc
 80111e8:	20000fec 	.word	0x20000fec
 80111ec:	200037e0 	.word	0x200037e0
 80111f0:	2000077c 	.word	0x2000077c
 80111f4:	200025ac 	.word	0x200025ac

080111f8 <lidarprocess>:
	}
}

void lidarprocess (void * pvParameters){
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b082      	sub	sp, #8
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
	for(;;){
		medianFilter(&lidar);
 8011200:	481a      	ldr	r0, [pc, #104]	@ (801126c <lidarprocess+0x74>)
 8011202:	f7ff fe67 	bl	8010ed4 <medianFilter>
		find_clusters(&lidar);
 8011206:	4819      	ldr	r0, [pc, #100]	@ (801126c <lidarprocess+0x74>)
 8011208:	f7ff fd4c 	bl	8010ca4 <find_clusters>
		// Changer la distance minimale si workMode idee tab_distance[distance_souris, distance_chat]
		if (lidar.processing.cluster_DistanceMIN.distance_moyenne < 4000){
 801120c:	4b17      	ldr	r3, [pc, #92]	@ (801126c <lidarprocess+0x74>)
 801120e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011212:	f8d3 37e8 	ldr.w	r3, [r3, #2024]	@ 0x7e8
 8011216:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 801121a:	da07      	bge.n	801122c <lidarprocess+0x34>
			ZXB5210_angle(lidar.processing.cluster_DistanceMIN.angle_moyen);
 801121c:	4b13      	ldr	r3, [pc, #76]	@ (801126c <lidarprocess+0x74>)
 801121e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011222:	f8d3 37e4 	ldr.w	r3, [r3, #2020]	@ 0x7e4
 8011226:	4618      	mov	r0, r3
 8011228:	f7f5 f8fa 	bl	8006420 <ZXB5210_angle>
		}

		if(lidarDebugShell){
 801122c:	4b10      	ldr	r3, [pc, #64]	@ (8011270 <lidarprocess+0x78>)
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d016      	beq.n	8011262 <lidarprocess+0x6a>
			printf("Clusters Maison trouvees : %d \r\n", lidar.processing.cluster_cnt);
 8011234:	4b0d      	ldr	r3, [pc, #52]	@ (801126c <lidarprocess+0x74>)
 8011236:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801123a:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	@ 0x7e0
 801123e:	4619      	mov	r1, r3
 8011240:	480c      	ldr	r0, [pc, #48]	@ (8011274 <lidarprocess+0x7c>)
 8011242:	f008 fef3 	bl	801a02c <iprintf>
			printf("Clusters Distance Minimum : %i | %i° \r\n", lidar.processing.cluster_DistanceMIN.distance_moyenne,lidar.processing.cluster_DistanceMIN.angle_moyen);
 8011246:	4b09      	ldr	r3, [pc, #36]	@ (801126c <lidarprocess+0x74>)
 8011248:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801124c:	f8d3 37e8 	ldr.w	r3, [r3, #2024]	@ 0x7e8
 8011250:	4a06      	ldr	r2, [pc, #24]	@ (801126c <lidarprocess+0x74>)
 8011252:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8011256:	f8d2 27e4 	ldr.w	r2, [r2, #2020]	@ 0x7e4
 801125a:	4619      	mov	r1, r3
 801125c:	4806      	ldr	r0, [pc, #24]	@ (8011278 <lidarprocess+0x80>)
 801125e:	f008 fee5 	bl	801a02c <iprintf>

		}
		vTaskDelay(DUREE);
 8011262:	200a      	movs	r0, #10
 8011264:	f003 fed6 	bl	8015014 <vTaskDelay>
		medianFilter(&lidar);
 8011268:	e7ca      	b.n	8011200 <lidarprocess+0x8>
 801126a:	bf00      	nop
 801126c:	20000fec 	.word	0x20000fec
 8011270:	200079ec 	.word	0x200079ec
 8011274:	0801e520 	.word	0x0801e520
 8011278:	0801e544 	.word	0x0801e544

0801127c <__NVIC_EnableIRQ>:
{
 801127c:	b480      	push	{r7}
 801127e:	b083      	sub	sp, #12
 8011280:	af00      	add	r7, sp, #0
 8011282:	4603      	mov	r3, r0
 8011284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801128a:	2b00      	cmp	r3, #0
 801128c:	db0b      	blt.n	80112a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801128e:	79fb      	ldrb	r3, [r7, #7]
 8011290:	f003 021f 	and.w	r2, r3, #31
 8011294:	4907      	ldr	r1, [pc, #28]	@ (80112b4 <__NVIC_EnableIRQ+0x38>)
 8011296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801129a:	095b      	lsrs	r3, r3, #5
 801129c:	2001      	movs	r0, #1
 801129e:	fa00 f202 	lsl.w	r2, r0, r2
 80112a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80112a6:	bf00      	nop
 80112a8:	370c      	adds	r7, #12
 80112aa:	46bd      	mov	sp, r7
 80112ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b0:	4770      	bx	lr
 80112b2:	bf00      	nop
 80112b4:	e000e100 	.word	0xe000e100

080112b8 <__NVIC_SetPriority>:
{
 80112b8:	b480      	push	{r7}
 80112ba:	b083      	sub	sp, #12
 80112bc:	af00      	add	r7, sp, #0
 80112be:	4603      	mov	r3, r0
 80112c0:	6039      	str	r1, [r7, #0]
 80112c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80112c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	db0a      	blt.n	80112e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80112cc:	683b      	ldr	r3, [r7, #0]
 80112ce:	b2da      	uxtb	r2, r3
 80112d0:	490c      	ldr	r1, [pc, #48]	@ (8011304 <__NVIC_SetPriority+0x4c>)
 80112d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80112d6:	0112      	lsls	r2, r2, #4
 80112d8:	b2d2      	uxtb	r2, r2
 80112da:	440b      	add	r3, r1
 80112dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80112e0:	e00a      	b.n	80112f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80112e2:	683b      	ldr	r3, [r7, #0]
 80112e4:	b2da      	uxtb	r2, r3
 80112e6:	4908      	ldr	r1, [pc, #32]	@ (8011308 <__NVIC_SetPriority+0x50>)
 80112e8:	79fb      	ldrb	r3, [r7, #7]
 80112ea:	f003 030f 	and.w	r3, r3, #15
 80112ee:	3b04      	subs	r3, #4
 80112f0:	0112      	lsls	r2, r2, #4
 80112f2:	b2d2      	uxtb	r2, r2
 80112f4:	440b      	add	r3, r1
 80112f6:	761a      	strb	r2, [r3, #24]
}
 80112f8:	bf00      	nop
 80112fa:	370c      	adds	r7, #12
 80112fc:	46bd      	mov	sp, r7
 80112fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011302:	4770      	bx	lr
 8011304:	e000e100 	.word	0xe000e100
 8011308:	e000ed00 	.word	0xe000ed00

0801130c <LL_AHB2_GRP1_EnableClock>:
{
 801130c:	b480      	push	{r7}
 801130e:	b085      	sub	sp, #20
 8011310:	af00      	add	r7, sp, #0
 8011312:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8011314:	4b08      	ldr	r3, [pc, #32]	@ (8011338 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8011316:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011318:	4907      	ldr	r1, [pc, #28]	@ (8011338 <LL_AHB2_GRP1_EnableClock+0x2c>)
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	4313      	orrs	r3, r2
 801131e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8011320:	4b05      	ldr	r3, [pc, #20]	@ (8011338 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8011322:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	4013      	ands	r3, r2
 8011328:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801132a:	68fb      	ldr	r3, [r7, #12]
}
 801132c:	bf00      	nop
 801132e:	3714      	adds	r7, #20
 8011330:	46bd      	mov	sp, r7
 8011332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011336:	4770      	bx	lr
 8011338:	40021000 	.word	0x40021000

0801133c <LL_GPIO_SetPinMode>:
{
 801133c:	b480      	push	{r7}
 801133e:	b08b      	sub	sp, #44	@ 0x2c
 8011340:	af00      	add	r7, sp, #0
 8011342:	60f8      	str	r0, [r7, #12]
 8011344:	60b9      	str	r1, [r7, #8]
 8011346:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	681a      	ldr	r2, [r3, #0]
 801134c:	68bb      	ldr	r3, [r7, #8]
 801134e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011350:	697b      	ldr	r3, [r7, #20]
 8011352:	fa93 f3a3 	rbit	r3, r3
 8011356:	613b      	str	r3, [r7, #16]
  return result;
 8011358:	693b      	ldr	r3, [r7, #16]
 801135a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801135c:	69bb      	ldr	r3, [r7, #24]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d101      	bne.n	8011366 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8011362:	2320      	movs	r3, #32
 8011364:	e003      	b.n	801136e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8011366:	69bb      	ldr	r3, [r7, #24]
 8011368:	fab3 f383 	clz	r3, r3
 801136c:	b2db      	uxtb	r3, r3
 801136e:	005b      	lsls	r3, r3, #1
 8011370:	2103      	movs	r1, #3
 8011372:	fa01 f303 	lsl.w	r3, r1, r3
 8011376:	43db      	mvns	r3, r3
 8011378:	401a      	ands	r2, r3
 801137a:	68bb      	ldr	r3, [r7, #8]
 801137c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801137e:	6a3b      	ldr	r3, [r7, #32]
 8011380:	fa93 f3a3 	rbit	r3, r3
 8011384:	61fb      	str	r3, [r7, #28]
  return result;
 8011386:	69fb      	ldr	r3, [r7, #28]
 8011388:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 801138a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801138c:	2b00      	cmp	r3, #0
 801138e:	d101      	bne.n	8011394 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8011390:	2320      	movs	r3, #32
 8011392:	e003      	b.n	801139c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8011394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011396:	fab3 f383 	clz	r3, r3
 801139a:	b2db      	uxtb	r3, r3
 801139c:	005b      	lsls	r3, r3, #1
 801139e:	6879      	ldr	r1, [r7, #4]
 80113a0:	fa01 f303 	lsl.w	r3, r1, r3
 80113a4:	431a      	orrs	r2, r3
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	601a      	str	r2, [r3, #0]
}
 80113aa:	bf00      	nop
 80113ac:	372c      	adds	r7, #44	@ 0x2c
 80113ae:	46bd      	mov	sp, r7
 80113b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b4:	4770      	bx	lr

080113b6 <LL_GPIO_SetPinPull>:
{
 80113b6:	b480      	push	{r7}
 80113b8:	b08b      	sub	sp, #44	@ 0x2c
 80113ba:	af00      	add	r7, sp, #0
 80113bc:	60f8      	str	r0, [r7, #12]
 80113be:	60b9      	str	r1, [r7, #8]
 80113c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	68da      	ldr	r2, [r3, #12]
 80113c6:	68bb      	ldr	r3, [r7, #8]
 80113c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80113ca:	697b      	ldr	r3, [r7, #20]
 80113cc:	fa93 f3a3 	rbit	r3, r3
 80113d0:	613b      	str	r3, [r7, #16]
  return result;
 80113d2:	693b      	ldr	r3, [r7, #16]
 80113d4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80113d6:	69bb      	ldr	r3, [r7, #24]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d101      	bne.n	80113e0 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80113dc:	2320      	movs	r3, #32
 80113de:	e003      	b.n	80113e8 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80113e0:	69bb      	ldr	r3, [r7, #24]
 80113e2:	fab3 f383 	clz	r3, r3
 80113e6:	b2db      	uxtb	r3, r3
 80113e8:	005b      	lsls	r3, r3, #1
 80113ea:	2103      	movs	r1, #3
 80113ec:	fa01 f303 	lsl.w	r3, r1, r3
 80113f0:	43db      	mvns	r3, r3
 80113f2:	401a      	ands	r2, r3
 80113f4:	68bb      	ldr	r3, [r7, #8]
 80113f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80113f8:	6a3b      	ldr	r3, [r7, #32]
 80113fa:	fa93 f3a3 	rbit	r3, r3
 80113fe:	61fb      	str	r3, [r7, #28]
  return result;
 8011400:	69fb      	ldr	r3, [r7, #28]
 8011402:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8011404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011406:	2b00      	cmp	r3, #0
 8011408:	d101      	bne.n	801140e <LL_GPIO_SetPinPull+0x58>
    return 32U;
 801140a:	2320      	movs	r3, #32
 801140c:	e003      	b.n	8011416 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 801140e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011410:	fab3 f383 	clz	r3, r3
 8011414:	b2db      	uxtb	r3, r3
 8011416:	005b      	lsls	r3, r3, #1
 8011418:	6879      	ldr	r1, [r7, #4]
 801141a:	fa01 f303 	lsl.w	r3, r1, r3
 801141e:	431a      	orrs	r2, r3
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	60da      	str	r2, [r3, #12]
}
 8011424:	bf00      	nop
 8011426:	372c      	adds	r7, #44	@ 0x2c
 8011428:	46bd      	mov	sp, r7
 801142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801142e:	4770      	bx	lr

08011430 <LL_UCPD_Enable>:
{
 8011430:	b480      	push	{r7}
 8011432:	b083      	sub	sp, #12
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	601a      	str	r2, [r3, #0]
}
 8011444:	bf00      	nop
 8011446:	370c      	adds	r7, #12
 8011448:	46bd      	mov	sp, r7
 801144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801144e:	4770      	bx	lr

08011450 <LL_UCPD_SetRxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT1
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetRxOrderSet(UCPD_TypeDef *UCPDx, uint32_t OrderSet)
{
 8011450:	b480      	push	{r7}
 8011452:	b083      	sub	sp, #12
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
 8011458:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CFG1, UCPD_CFG1_RXORDSETEN, OrderSet);
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8011462:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8011466:	683a      	ldr	r2, [r7, #0]
 8011468:	431a      	orrs	r2, r3
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	601a      	str	r2, [r3, #0]
}
 801146e:	bf00      	nop
 8011470:	370c      	adds	r7, #12
 8011472:	46bd      	mov	sp, r7
 8011474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011478:	4770      	bx	lr

0801147a <LL_UCPD_SetccEnable>:
  *         @arg @ref LL_UCPD_CCENABLE_CC2
  *         @arg @ref LL_UCPD_CCENABLE_CC1CC2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetccEnable(UCPD_TypeDef *UCPDx, uint32_t CCEnable)
{
 801147a:	b480      	push	{r7}
 801147c:	b083      	sub	sp, #12
 801147e:	af00      	add	r7, sp, #0
 8011480:	6078      	str	r0, [r7, #4]
 8011482:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	68db      	ldr	r3, [r3, #12]
 8011488:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801148c:	683b      	ldr	r3, [r7, #0]
 801148e:	431a      	orrs	r2, r3
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	60da      	str	r2, [r3, #12]
}
 8011494:	bf00      	nop
 8011496:	370c      	adds	r7, #12
 8011498:	46bd      	mov	sp, r7
 801149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149e:	4770      	bx	lr

080114a0 <LL_UCPD_EnableIT_TypeCEventCC2>:
  * @rmtoll IMR          TYPECEVT2IE        LL_UCPD_EnableIT_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 80114a0:	b480      	push	{r7}
 80114a2:	b083      	sub	sp, #12
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT2IE);
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	691b      	ldr	r3, [r3, #16]
 80114ac:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	611a      	str	r2, [r3, #16]
}
 80114b4:	bf00      	nop
 80114b6:	370c      	adds	r7, #12
 80114b8:	46bd      	mov	sp, r7
 80114ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114be:	4770      	bx	lr

080114c0 <LL_UCPD_EnableIT_TypeCEventCC1>:
  * @rmtoll IMR          TYPECEVT1IE        LL_UCPD_EnableIT_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 80114c0:	b480      	push	{r7}
 80114c2:	b083      	sub	sp, #12
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT1IE);
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	691b      	ldr	r3, [r3, #16]
 80114cc:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	611a      	str	r2, [r3, #16]
}
 80114d4:	bf00      	nop
 80114d6:	370c      	adds	r7, #12
 80114d8:	46bd      	mov	sp, r7
 80114da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114de:	4770      	bx	lr

080114e0 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 80114e0:	b480      	push	{r7}
 80114e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80114e4:	4b05      	ldr	r3, [pc, #20]	@ (80114fc <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80114e6:	689b      	ldr	r3, [r3, #8]
 80114e8:	4a04      	ldr	r2, [pc, #16]	@ (80114fc <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80114ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80114ee:	6093      	str	r3, [r2, #8]
}
 80114f0:	bf00      	nop
 80114f2:	46bd      	mov	sp, r7
 80114f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f8:	4770      	bx	lr
 80114fa:	bf00      	nop
 80114fc:	40007000 	.word	0x40007000

08011500 <CAD_Init>:
  * @param  pParams       Pointer on PD parameters based on @ref USBPD_ParamsTypeDef
  * @param  WakeUp        Wake-up callback function used for waking up CAD
  * @retval None
  */
void CAD_Init(uint8_t PortNum, USBPD_SettingsTypeDef *pSettings, USBPD_ParamsTypeDef *pParams,  void (*WakeUp)(void))
{
 8011500:	b590      	push	{r4, r7, lr}
 8011502:	b08b      	sub	sp, #44	@ 0x2c
 8011504:	af00      	add	r7, sp, #0
 8011506:	60b9      	str	r1, [r7, #8]
 8011508:	607a      	str	r2, [r7, #4]
 801150a:	603b      	str	r3, [r7, #0]
 801150c:	4603      	mov	r3, r0
 801150e:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8011510:	7bfa      	ldrb	r2, [r7, #15]
 8011512:	4613      	mov	r3, r2
 8011514:	005b      	lsls	r3, r3, #1
 8011516:	4413      	add	r3, r2
 8011518:	009b      	lsls	r3, r3, #2
 801151a:	4a66      	ldr	r2, [pc, #408]	@ (80116b4 <CAD_Init+0x1b4>)
 801151c:	4413      	add	r3, r2
 801151e:	627b      	str	r3, [r7, #36]	@ 0x24
  LL_UCPD_InitTypeDef settings;

  Ports[PortNum].params = pParams;
 8011520:	7bfa      	ldrb	r2, [r7, #15]
 8011522:	4965      	ldr	r1, [pc, #404]	@ (80116b8 <CAD_Init+0x1b8>)
 8011524:	4613      	mov	r3, r2
 8011526:	011b      	lsls	r3, r3, #4
 8011528:	1a9b      	subs	r3, r3, r2
 801152a:	009b      	lsls	r3, r3, #2
 801152c:	440b      	add	r3, r1
 801152e:	3310      	adds	r3, #16
 8011530:	687a      	ldr	r2, [r7, #4]
 8011532:	601a      	str	r2, [r3, #0]
  Ports[PortNum].settings = pSettings;
 8011534:	7bfa      	ldrb	r2, [r7, #15]
 8011536:	4960      	ldr	r1, [pc, #384]	@ (80116b8 <CAD_Init+0x1b8>)
 8011538:	4613      	mov	r3, r2
 801153a:	011b      	lsls	r3, r3, #4
 801153c:	1a9b      	subs	r3, r3, r2
 801153e:	009b      	lsls	r3, r3, #2
 8011540:	440b      	add	r3, r1
 8011542:	330c      	adds	r3, #12
 8011544:	68ba      	ldr	r2, [r7, #8]
 8011546:	601a      	str	r2, [r3, #0]
  Ports[PortNum].params->RpResistor = Ports[PortNum].settings->CAD_DefaultResistor;
 8011548:	7bfa      	ldrb	r2, [r7, #15]
 801154a:	495b      	ldr	r1, [pc, #364]	@ (80116b8 <CAD_Init+0x1b8>)
 801154c:	4613      	mov	r3, r2
 801154e:	011b      	lsls	r3, r3, #4
 8011550:	1a9b      	subs	r3, r3, r2
 8011552:	009b      	lsls	r3, r3, #2
 8011554:	440b      	add	r3, r1
 8011556:	330c      	adds	r3, #12
 8011558:	6819      	ldr	r1, [r3, #0]
 801155a:	7bfa      	ldrb	r2, [r7, #15]
 801155c:	4856      	ldr	r0, [pc, #344]	@ (80116b8 <CAD_Init+0x1b8>)
 801155e:	4613      	mov	r3, r2
 8011560:	011b      	lsls	r3, r3, #4
 8011562:	1a9b      	subs	r3, r3, r2
 8011564:	009b      	lsls	r3, r3, #2
 8011566:	4403      	add	r3, r0
 8011568:	3310      	adds	r3, #16
 801156a:	681a      	ldr	r2, [r3, #0]
 801156c:	794b      	ldrb	r3, [r1, #5]
 801156e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8011572:	b2d9      	uxtb	r1, r3
 8011574:	7893      	ldrb	r3, [r2, #2]
 8011576:	f361 0301 	bfi	r3, r1, #0, #2
 801157a:	7093      	strb	r3, [r2, #2]
  Ports[PortNum].params->SNKExposedRP_AtAttach = vRd_Undefined;
 801157c:	7bfa      	ldrb	r2, [r7, #15]
 801157e:	494e      	ldr	r1, [pc, #312]	@ (80116b8 <CAD_Init+0x1b8>)
 8011580:	4613      	mov	r3, r2
 8011582:	011b      	lsls	r3, r3, #4
 8011584:	1a9b      	subs	r3, r3, r2
 8011586:	009b      	lsls	r3, r3, #2
 8011588:	440b      	add	r3, r1
 801158a:	3310      	adds	r3, #16
 801158c:	681a      	ldr	r2, [r3, #0]
 801158e:	7893      	ldrb	r3, [r2, #2]
 8011590:	f36f 0383 	bfc	r3, #2, #2
 8011594:	7093      	strb	r3, [r2, #2]

  /* Reset handle */
  memset(_handle, 0, sizeof(CAD_HW_HandleTypeDef));
 8011596:	220c      	movs	r2, #12
 8011598:	2100      	movs	r1, #0
 801159a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801159c:	f008 fe24 	bl	801a1e8 <memset>

  /* Register CAD wake up callback */
  Ports[PortNum].USBPD_CAD_WakeUp = WakeUp;
 80115a0:	7bfa      	ldrb	r2, [r7, #15]
 80115a2:	4945      	ldr	r1, [pc, #276]	@ (80116b8 <CAD_Init+0x1b8>)
 80115a4:	4613      	mov	r3, r2
 80115a6:	011b      	lsls	r3, r3, #4
 80115a8:	1a9b      	subs	r3, r3, r2
 80115aa:	009b      	lsls	r3, r3, #2
 80115ac:	440b      	add	r3, r1
 80115ae:	332c      	adds	r3, #44	@ 0x2c
 80115b0:	683a      	ldr	r2, [r7, #0]
 80115b2:	601a      	str	r2, [r3, #0]

  /* Initialize the USBPD_IP */
  Ports[PortNum].husbpd = USBPD_HW_GetUSPDInstance(PortNum);
 80115b4:	7bfc      	ldrb	r4, [r7, #15]
 80115b6:	7bfb      	ldrb	r3, [r7, #15]
 80115b8:	4618      	mov	r0, r3
 80115ba:	f000 fb6b 	bl	8011c94 <USBPD_HW_GetUSPDInstance>
 80115be:	4602      	mov	r2, r0
 80115c0:	493d      	ldr	r1, [pc, #244]	@ (80116b8 <CAD_Init+0x1b8>)
 80115c2:	4623      	mov	r3, r4
 80115c4:	011b      	lsls	r3, r3, #4
 80115c6:	1b1b      	subs	r3, r3, r4
 80115c8:	009b      	lsls	r3, r3, #2
 80115ca:	440b      	add	r3, r1
 80115cc:	601a      	str	r2, [r3, #0]

  /* Initialize UCPD */
  LL_UCPD_StructInit(&settings);
 80115ce:	f107 0314 	add.w	r3, r7, #20
 80115d2:	4618      	mov	r0, r3
 80115d4:	f7fe ff72 	bl	80104bc <LL_UCPD_StructInit>
  (void)LL_UCPD_Init(Ports[PortNum].husbpd, &settings);
 80115d8:	7bfa      	ldrb	r2, [r7, #15]
 80115da:	4937      	ldr	r1, [pc, #220]	@ (80116b8 <CAD_Init+0x1b8>)
 80115dc:	4613      	mov	r3, r2
 80115de:	011b      	lsls	r3, r3, #4
 80115e0:	1a9b      	subs	r3, r3, r2
 80115e2:	009b      	lsls	r3, r3, #2
 80115e4:	440b      	add	r3, r1
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	f107 0214 	add.w	r2, r7, #20
 80115ec:	4611      	mov	r1, r2
 80115ee:	4618      	mov	r0, r3
 80115f0:	f7fe ff36 	bl	8010460 <LL_UCPD_Init>
  LL_UCPD_SetRxOrderSet(Ports[PortNum].husbpd,
 80115f4:	7bfa      	ldrb	r2, [r7, #15]
 80115f6:	4930      	ldr	r1, [pc, #192]	@ (80116b8 <CAD_Init+0x1b8>)
 80115f8:	4613      	mov	r3, r2
 80115fa:	011b      	lsls	r3, r3, #4
 80115fc:	1a9b      	subs	r3, r3, r2
 80115fe:	009b      	lsls	r3, r3, #2
 8011600:	440b      	add	r3, r1
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8011608:	4618      	mov	r0, r3
 801160a:	f7ff ff21 	bl	8011450 <LL_UCPD_SetRxOrderSet>
                        LL_UCPD_ORDERSET_SOP | LL_UCPD_ORDERSET_SOP1 | LL_UCPD_ORDERSET_SOP2 |
                        LL_UCPD_ORDERSET_CABLERST | LL_UCPD_ORDERSET_HARDRST);
  /* Controls whether pull-ups and pull-downs controls related to ANAMODE and ANASUBMODE
     should be applied to CC1 and CC2 analog PHYs */
  /* Should be done when UCPDEN is 1 */
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 801160e:	7bfa      	ldrb	r2, [r7, #15]
 8011610:	4929      	ldr	r1, [pc, #164]	@ (80116b8 <CAD_Init+0x1b8>)
 8011612:	4613      	mov	r3, r2
 8011614:	011b      	lsls	r3, r3, #4
 8011616:	1a9b      	subs	r3, r3, r2
 8011618:	009b      	lsls	r3, r3, #2
 801161a:	440b      	add	r3, r1
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8011622:	4618      	mov	r0, r3
 8011624:	f7ff ff29 	bl	801147a <LL_UCPD_SetccEnable>
#ifdef _LOW_POWER
  LL_UCPD_WakeUpEnable(Ports[PortNum].husbpd);
#endif /* _LOW_POWER */

  /* Disable dead battery */
  LL_PWR_DisableUCPDDeadBattery(); /* PWR->CR3 |= (1 << 14); */
 8011628:	f7ff ff5a 	bl	80114e0 <LL_PWR_DisableUCPDDeadBattery>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB); /* GPIOB enable RCC->AHB2ENR |= 2; */
 801162c:	2002      	movs	r0, #2
 801162e:	f7ff fe6d 	bl	801130c <LL_AHB2_GRP1_EnableClock>

  /* Set by default UCPD1_CC1 & UCPD1_CC2 in analog mode */
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_6, LL_GPIO_MODE_ANALOG); /* PB6 mode = GP analog => CC1 */
 8011632:	2203      	movs	r2, #3
 8011634:	2140      	movs	r1, #64	@ 0x40
 8011636:	4821      	ldr	r0, [pc, #132]	@ (80116bc <CAD_Init+0x1bc>)
 8011638:	f7ff fe80 	bl	801133c <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_4, LL_GPIO_MODE_ANALOG); /* PB4 mode = GP analog => CC2 */
 801163c:	2203      	movs	r2, #3
 801163e:	2110      	movs	r1, #16
 8011640:	481e      	ldr	r0, [pc, #120]	@ (80116bc <CAD_Init+0x1bc>)
 8011642:	f7ff fe7b 	bl	801133c <LL_GPIO_SetPinMode>

  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_6, LL_GPIO_PULL_NO);
 8011646:	2200      	movs	r2, #0
 8011648:	2140      	movs	r1, #64	@ 0x40
 801164a:	481c      	ldr	r0, [pc, #112]	@ (80116bc <CAD_Init+0x1bc>)
 801164c:	f7ff feb3 	bl	80113b6 <LL_GPIO_SetPinPull>
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_4, LL_GPIO_PULL_NO);
 8011650:	2200      	movs	r2, #0
 8011652:	2110      	movs	r1, #16
 8011654:	4819      	ldr	r0, [pc, #100]	@ (80116bc <CAD_Init+0x1bc>)
 8011656:	f7ff feae 	bl	80113b6 <LL_GPIO_SetPinPull>

  /* Init power */
  BSP_USBPD_PWR_Init(PortNum);
 801165a:	7bfb      	ldrb	r3, [r7, #15]
 801165c:	4618      	mov	r0, r3
 801165e:	f005 fccf 	bl	8017000 <BSP_USBPD_PWR_Init>
  /* Register VBUS detect callback */
  BSP_USBPD_PWR_RegisterVBUSDetectCallback(PortNum, CAD_HW_IF_VBUSDetectCallback);
#endif /* TCPP0203_SUPPORT */

  /* Enable USBPD IP */
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 8011662:	7bfa      	ldrb	r2, [r7, #15]
 8011664:	4914      	ldr	r1, [pc, #80]	@ (80116b8 <CAD_Init+0x1b8>)
 8011666:	4613      	mov	r3, r2
 8011668:	011b      	lsls	r3, r3, #4
 801166a:	1a9b      	subs	r3, r3, r2
 801166c:	009b      	lsls	r3, r3, #2
 801166e:	440b      	add	r3, r1
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	4618      	mov	r0, r3
 8011674:	f7ff fedc 	bl	8011430 <LL_UCPD_Enable>
#if defined(_DRP)
  else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
  {
    USBPDM1_AssertRd(PortNum);
 8011678:	7bfb      	ldrb	r3, [r7, #15]
 801167a:	4618      	mov	r0, r3
 801167c:	f001 fbd2 	bl	8012e24 <USBPDM1_AssertRd>
    else
#endif /* _SRC */
    {
#if defined(_SNK)
      /* Set current state machine to SNK state machine */
      _handle->CAD_PtrStateMachine = CAD_StateMachine_SNK;
 8011680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011682:	4a0f      	ldr	r2, [pc, #60]	@ (80116c0 <CAD_Init+0x1c0>)
 8011684:	609a      	str	r2, [r3, #8]
      _handle->CAD_Accessory_SNK = Ports[PortNum].settings->CAD_AccesorySupport;
 8011686:	7bfa      	ldrb	r2, [r7, #15]
 8011688:	490b      	ldr	r1, [pc, #44]	@ (80116b8 <CAD_Init+0x1b8>)
 801168a:	4613      	mov	r3, r2
 801168c:	011b      	lsls	r3, r3, #4
 801168e:	1a9b      	subs	r3, r3, r2
 8011690:	009b      	lsls	r3, r3, #2
 8011692:	440b      	add	r3, r1
 8011694:	330c      	adds	r3, #12
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	795b      	ldrb	r3, [r3, #5]
 801169a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801169e:	b2d9      	uxtb	r1, r3
 80116a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80116a2:	7853      	ldrb	r3, [r2, #1]
 80116a4:	f361 13c7 	bfi	r3, r1, #7, #1
 80116a8:	7053      	strb	r3, [r2, #1]
    _handle->CAD_VPD_SNK = Ports[PortNum].settings->CAD_VPDSupport;
#endif /* USBPDCORE_VPD */
#endif /* _SNK */
  }
#endif  /* USBPDCORE_LIB_NO_PD */
}
 80116aa:	bf00      	nop
 80116ac:	372c      	adds	r7, #44	@ 0x2c
 80116ae:	46bd      	mov	sp, r7
 80116b0:	bd90      	pop	{r4, r7, pc}
 80116b2:	bf00      	nop
 80116b4:	200037e4 	.word	0x200037e4
 80116b8:	200037fc 	.word	0x200037fc
 80116bc:	48000400 	.word	0x48000400
 80116c0:	08011711 	.word	0x08011711

080116c4 <CAD_Enter_ErrorRecovery>:
  * @brief  Function to force CAD state machine into error recovery state
  * @param  PortNum Index of current used port
  * @retval None
  */
void CAD_Enter_ErrorRecovery(uint8_t PortNum)
{
 80116c4:	b580      	push	{r7, lr}
 80116c6:	b082      	sub	sp, #8
 80116c8:	af00      	add	r7, sp, #0
 80116ca:	4603      	mov	r3, r0
 80116cc:	71fb      	strb	r3, [r7, #7]
  /* Remove the ucpd resistor */
  USBPDM1_EnterErrorRecovery(PortNum);
 80116ce:	79fb      	ldrb	r3, [r7, #7]
 80116d0:	4618      	mov	r0, r3
 80116d2:	f001 fc39 	bl	8012f48 <USBPDM1_EnterErrorRecovery>
  /* Set the error recovery flag to allow the stack to switch into errorRecovery Flag */
  CAD_HW_Handles[PortNum].CAD_ErrorRecoveryflag = USBPD_TRUE;
 80116d6:	79fa      	ldrb	r2, [r7, #7]
 80116d8:	490b      	ldr	r1, [pc, #44]	@ (8011708 <CAD_Enter_ErrorRecovery+0x44>)
 80116da:	4613      	mov	r3, r2
 80116dc:	005b      	lsls	r3, r3, #1
 80116de:	4413      	add	r3, r2
 80116e0:	009b      	lsls	r3, r3, #2
 80116e2:	18ca      	adds	r2, r1, r3
 80116e4:	7813      	ldrb	r3, [r2, #0]
 80116e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80116ea:	7013      	strb	r3, [r2, #0]
  /* Wake up CAD task */
  Ports[PortNum].USBPD_CAD_WakeUp();
 80116ec:	79fa      	ldrb	r2, [r7, #7]
 80116ee:	4907      	ldr	r1, [pc, #28]	@ (801170c <CAD_Enter_ErrorRecovery+0x48>)
 80116f0:	4613      	mov	r3, r2
 80116f2:	011b      	lsls	r3, r3, #4
 80116f4:	1a9b      	subs	r3, r3, r2
 80116f6:	009b      	lsls	r3, r3, #2
 80116f8:	440b      	add	r3, r1
 80116fa:	332c      	adds	r3, #44	@ 0x2c
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	4798      	blx	r3
}
 8011700:	bf00      	nop
 8011702:	3708      	adds	r7, #8
 8011704:	46bd      	mov	sp, r7
 8011706:	bd80      	pop	{r7, pc}
 8011708:	200037e4 	.word	0x200037e4
 801170c:	200037fc 	.word	0x200037fc

08011710 <CAD_StateMachine_SNK>:
  * @retval Timeout value
  */
#if defined(_SNK)
/* Function to handle SNK and SNK  + ACCESSORY OPTION */
uint32_t CAD_StateMachine_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8011710:	b580      	push	{r7, lr}
 8011712:	b086      	sub	sp, #24
 8011714:	af00      	add	r7, sp, #0
 8011716:	4603      	mov	r3, r0
 8011718:	60b9      	str	r1, [r7, #8]
 801171a:	607a      	str	r2, [r7, #4]
 801171c:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 801171e:	7bfa      	ldrb	r2, [r7, #15]
 8011720:	4613      	mov	r3, r2
 8011722:	005b      	lsls	r3, r3, #1
 8011724:	4413      	add	r3, r2
 8011726:	009b      	lsls	r3, r3, #2
 8011728:	4a17      	ldr	r2, [pc, #92]	@ (8011788 <CAD_StateMachine_SNK+0x78>)
 801172a:	4413      	add	r3, r2
 801172c:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 801172e:	2302      	movs	r3, #2
 8011730:	617b      	str	r3, [r7, #20]
#if defined(USBPDM1_VCC_FEATURE_ENABLED)
  BSP_USBPD_PWR_VCCSetState(PortNum, 1);
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  /* Check CAD STATE */
  switch (_handle->cstate)
 8011732:	693b      	ldr	r3, [r7, #16]
 8011734:	785b      	ldrb	r3, [r3, #1]
 8011736:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801173a:	b2db      	uxtb	r3, r3
 801173c:	2b03      	cmp	r3, #3
 801173e:	d014      	beq.n	801176a <CAD_StateMachine_SNK+0x5a>
 8011740:	2b03      	cmp	r3, #3
 8011742:	dc1a      	bgt.n	801177a <CAD_StateMachine_SNK+0x6a>
 8011744:	2b01      	cmp	r3, #1
 8011746:	d002      	beq.n	801174e <CAD_StateMachine_SNK+0x3e>
 8011748:	2b02      	cmp	r3, #2
 801174a:	d006      	beq.n	801175a <CAD_StateMachine_SNK+0x4a>
#endif /* USBPDCORE_VPD */
#endif /* _ACCESSORY_SNK */

    default:
    {
      break;
 801174c:	e015      	b.n	801177a <CAD_StateMachine_SNK+0x6a>
      _timing = ManageStateDetached_SNK(PortNum);
 801174e:	7bfb      	ldrb	r3, [r7, #15]
 8011750:	4618      	mov	r0, r3
 8011752:	f000 f955 	bl	8011a00 <ManageStateDetached_SNK>
 8011756:	6178      	str	r0, [r7, #20]
      break;
 8011758:	e010      	b.n	801177c <CAD_StateMachine_SNK+0x6c>
      _timing = ManageStateAttachedWait_SNK(PortNum, pEvent, pCCXX);
 801175a:	7bfb      	ldrb	r3, [r7, #15]
 801175c:	687a      	ldr	r2, [r7, #4]
 801175e:	68b9      	ldr	r1, [r7, #8]
 8011760:	4618      	mov	r0, r3
 8011762:	f000 f997 	bl	8011a94 <ManageStateAttachedWait_SNK>
 8011766:	6178      	str	r0, [r7, #20]
      break;
 8011768:	e008      	b.n	801177c <CAD_StateMachine_SNK+0x6c>
      _timing = ManageStateAttached_SNK(PortNum, pEvent, pCCXX);
 801176a:	7bfb      	ldrb	r3, [r7, #15]
 801176c:	687a      	ldr	r2, [r7, #4]
 801176e:	68b9      	ldr	r1, [r7, #8]
 8011770:	4618      	mov	r0, r3
 8011772:	f000 fa11 	bl	8011b98 <ManageStateAttached_SNK>
 8011776:	6178      	str	r0, [r7, #20]
      break;
 8011778:	e000      	b.n	801177c <CAD_StateMachine_SNK+0x6c>
      break;
 801177a:	bf00      	nop
      BSP_USBPD_PWR_VCCSetState(PortNum, 0);
      break;
  }
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 801177c:	697b      	ldr	r3, [r7, #20]
}
 801177e:	4618      	mov	r0, r3
 8011780:	3718      	adds	r7, #24
 8011782:	46bd      	mov	sp, r7
 8011784:	bd80      	pop	{r7, pc}
 8011786:	bf00      	nop
 8011788:	200037e4 	.word	0x200037e4

0801178c <CAD_StateMachine>:
  * @param  pEvent  Pointer on CAD event based on @ref USBPD_CAD_EVENT
  * @param  pCCXX   Pointer on CC Pin based on @ref CCxPin_TypeDef
  * @retval Timeout value
  */
uint32_t CAD_StateMachine(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 801178c:	b580      	push	{r7, lr}
 801178e:	b086      	sub	sp, #24
 8011790:	af00      	add	r7, sp, #0
 8011792:	4603      	mov	r3, r0
 8011794:	60b9      	str	r1, [r7, #8]
 8011796:	607a      	str	r2, [r7, #4]
 8011798:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 801179a:	7bfa      	ldrb	r2, [r7, #15]
 801179c:	4613      	mov	r3, r2
 801179e:	005b      	lsls	r3, r3, #1
 80117a0:	4413      	add	r3, r2
 80117a2:	009b      	lsls	r3, r3, #2
 80117a4:	4a52      	ldr	r2, [pc, #328]	@ (80118f0 <CAD_StateMachine+0x164>)
 80117a6:	4413      	add	r3, r2
 80117a8:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 80117aa:	2302      	movs	r3, #2
 80117ac:	617b      	str	r3, [r7, #20]

  /* Set by default event to none */
  *pEvent = USBPD_CAD_EVENT_NONE;
 80117ae:	68bb      	ldr	r3, [r7, #8]
 80117b0:	2200      	movs	r2, #0
 80117b2:	701a      	strb	r2, [r3, #0]

  /* If a swap is on going, return default timing */
  if (USBPD_TRUE == Ports[PortNum].params->PE_SwapOngoing)
 80117b4:	7bfa      	ldrb	r2, [r7, #15]
 80117b6:	494f      	ldr	r1, [pc, #316]	@ (80118f4 <CAD_StateMachine+0x168>)
 80117b8:	4613      	mov	r3, r2
 80117ba:	011b      	lsls	r3, r3, #4
 80117bc:	1a9b      	subs	r3, r3, r2
 80117be:	009b      	lsls	r3, r3, #2
 80117c0:	440b      	add	r3, r1
 80117c2:	3310      	adds	r3, #16
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	781b      	ldrb	r3, [r3, #0]
 80117c8:	f003 0310 	and.w	r3, r3, #16
 80117cc:	b2db      	uxtb	r3, r3
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d001      	beq.n	80117d6 <CAD_StateMachine+0x4a>
  {
    return _timing;
 80117d2:	697b      	ldr	r3, [r7, #20]
 80117d4:	e087      	b.n	80118e6 <CAD_StateMachine+0x15a>
  }

  if (_handle->CAD_ErrorRecoveryflag == USBPD_TRUE)
 80117d6:	693b      	ldr	r3, [r7, #16]
 80117d8:	781b      	ldrb	r3, [r3, #0]
 80117da:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80117de:	b2db      	uxtb	r3, r3
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d00a      	beq.n	80117fa <CAD_StateMachine+0x6e>
  {
    /* Force the state error recovery */
    _handle->CAD_ErrorRecoveryflag = USBPD_FALSE;
 80117e4:	693a      	ldr	r2, [r7, #16]
 80117e6:	7813      	ldrb	r3, [r2, #0]
 80117e8:	f36f 13c7 	bfc	r3, #7, #1
 80117ec:	7013      	strb	r3, [r2, #0]
    _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY;
 80117ee:	693a      	ldr	r2, [r7, #16]
 80117f0:	7853      	ldrb	r3, [r2, #1]
 80117f2:	210c      	movs	r1, #12
 80117f4:	f361 0345 	bfi	r3, r1, #1, #5
 80117f8:	7053      	strb	r3, [r2, #1]
#if defined(_TRACE)
    USBPD_TRACE_Add(USBPD_TRACE_CAD_LOW, PortNum, (uint8_t)_handle->cstate, NULL, 0);
#endif /* _TRACE */
  }

  switch (_handle->cstate)
 80117fa:	693b      	ldr	r3, [r7, #16]
 80117fc:	785b      	ldrb	r3, [r3, #1]
 80117fe:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8011802:	b2db      	uxtb	r3, r3
 8011804:	2b0d      	cmp	r3, #13
 8011806:	d051      	beq.n	80118ac <CAD_StateMachine+0x120>
 8011808:	2b0d      	cmp	r3, #13
 801180a:	dc62      	bgt.n	80118d2 <CAD_StateMachine+0x146>
 801180c:	2b00      	cmp	r3, #0
 801180e:	d002      	beq.n	8011816 <CAD_StateMachine+0x8a>
 8011810:	2b0c      	cmp	r3, #12
 8011812:	d024      	beq.n	801185e <CAD_StateMachine+0xd2>
 8011814:	e05d      	b.n	80118d2 <CAD_StateMachine+0x146>
  {
    case USBPD_CAD_STATE_RESET:
    {
#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
      /* Enable TypeCEvents Interrupts */
      LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
 8011816:	7bfa      	ldrb	r2, [r7, #15]
 8011818:	4936      	ldr	r1, [pc, #216]	@ (80118f4 <CAD_StateMachine+0x168>)
 801181a:	4613      	mov	r3, r2
 801181c:	011b      	lsls	r3, r3, #4
 801181e:	1a9b      	subs	r3, r3, r2
 8011820:	009b      	lsls	r3, r3, #2
 8011822:	440b      	add	r3, r1
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	4618      	mov	r0, r3
 8011828:	f7ff fe3a 	bl	80114a0 <LL_UCPD_EnableIT_TypeCEventCC2>
      LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
 801182c:	7bfa      	ldrb	r2, [r7, #15]
 801182e:	4931      	ldr	r1, [pc, #196]	@ (80118f4 <CAD_StateMachine+0x168>)
 8011830:	4613      	mov	r3, r2
 8011832:	011b      	lsls	r3, r3, #4
 8011834:	1a9b      	subs	r3, r3, r2
 8011836:	009b      	lsls	r3, r3, #2
 8011838:	440b      	add	r3, r1
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	4618      	mov	r0, r3
 801183e:	f7ff fe3f 	bl	80114c0 <LL_UCPD_EnableIT_TypeCEventCC1>
        LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
      }
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

      /* Enable IRQ */
      UCPD_INSTANCE0_ENABLEIRQ;
 8011842:	2104      	movs	r1, #4
 8011844:	203f      	movs	r0, #63	@ 0x3f
 8011846:	f7ff fd37 	bl	80112b8 <__NVIC_SetPriority>
 801184a:	203f      	movs	r0, #63	@ 0x3f
 801184c:	f7ff fd16 	bl	801127c <__NVIC_EnableIRQ>
#if defined(_DRP) || defined(_ACCESSORY_SNK)
      _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 8011850:	693a      	ldr	r2, [r7, #16]
 8011852:	7853      	ldrb	r3, [r2, #1]
 8011854:	2101      	movs	r1, #1
 8011856:	f361 0345 	bfi	r3, r1, #1, #5
 801185a:	7053      	strb	r3, [r2, #1]
      break;
 801185c:	e042      	b.n	80118e4 <CAD_StateMachine+0x158>

    case USBPD_CAD_STATE_ERRORRECOVERY :
    {
      /* Remove the resistor */
      /* Enter recovery = Switch to SRC with no resistor */
      USBPDM1_EnterErrorRecovery(PortNum);
 801185e:	7bfb      	ldrb	r3, [r7, #15]
 8011860:	4618      	mov	r0, r3
 8011862:	f001 fb71 	bl	8012f48 <USBPDM1_EnterErrorRecovery>

      /* Forward detach event to DPM */
      Ports[PortNum].CCx = CCNONE;
 8011866:	7bfa      	ldrb	r2, [r7, #15]
 8011868:	4922      	ldr	r1, [pc, #136]	@ (80118f4 <CAD_StateMachine+0x168>)
 801186a:	4613      	mov	r3, r2
 801186c:	011b      	lsls	r3, r3, #4
 801186e:	1a9b      	subs	r3, r3, r2
 8011870:	009b      	lsls	r3, r3, #2
 8011872:	440b      	add	r3, r1
 8011874:	3334      	adds	r3, #52	@ 0x34
 8011876:	2200      	movs	r2, #0
 8011878:	601a      	str	r2, [r3, #0]
      *pCCXX = CCNONE;
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	2200      	movs	r2, #0
 801187e:	601a      	str	r2, [r3, #0]
      _handle->cc = CCNONE;
 8011880:	693a      	ldr	r2, [r7, #16]
 8011882:	7813      	ldrb	r3, [r2, #0]
 8011884:	f36f 0301 	bfc	r3, #0, #2
 8011888:	7013      	strb	r3, [r2, #0]
      *pEvent = USBPD_CAD_EVENT_DETACHED;
 801188a:	68bb      	ldr	r3, [r7, #8]
 801188c:	2201      	movs	r2, #1
 801188e:	701a      	strb	r2, [r3, #0]

      /* Start tErrorRecovery timeout */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 8011890:	f7f4 ff86 	bl	80067a0 <HAL_GetTick>
 8011894:	4602      	mov	r2, r0
 8011896:	693b      	ldr	r3, [r7, #16]
 8011898:	605a      	str	r2, [r3, #4]
      _timing = CAD_TERROR_RECOVERY_TIME;
 801189a:	231a      	movs	r3, #26
 801189c:	617b      	str	r3, [r7, #20]
      _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY_EXIT;
 801189e:	693a      	ldr	r2, [r7, #16]
 80118a0:	7853      	ldrb	r3, [r2, #1]
 80118a2:	210d      	movs	r1, #13
 80118a4:	f361 0345 	bfi	r3, r1, #1, #5
 80118a8:	7053      	strb	r3, [r2, #1]
      break;
 80118aa:	e01b      	b.n	80118e4 <CAD_StateMachine+0x158>
    }

    case USBPD_CAD_STATE_ERRORRECOVERY_EXIT :
    {
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start) >  CAD_TERROR_RECOVERY_TIME)
 80118ac:	f7f4 ff78 	bl	80067a0 <HAL_GetTick>
 80118b0:	4602      	mov	r2, r0
 80118b2:	693b      	ldr	r3, [r7, #16]
 80118b4:	685b      	ldr	r3, [r3, #4]
 80118b6:	1ad3      	subs	r3, r2, r3
 80118b8:	2b1a      	cmp	r3, #26
 80118ba:	d912      	bls.n	80118e2 <CAD_StateMachine+0x156>
#if defined(_DRP)
        else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
        {
          USBPDM1_AssertRd(PortNum);
 80118bc:	7bfb      	ldrb	r3, [r7, #15]
 80118be:	4618      	mov	r0, r3
 80118c0:	f001 fab0 	bl	8012e24 <USBPDM1_AssertRd>
#endif /* _SNK || _DRP */
        /* Switch to state detach */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
        _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
        _handle->cstate = USBPD_CAD_STATE_DETACHED;
 80118c4:	693a      	ldr	r2, [r7, #16]
 80118c6:	7853      	ldrb	r3, [r2, #1]
 80118c8:	2101      	movs	r1, #1
 80118ca:	f361 0345 	bfi	r3, r1, #1, #5
 80118ce:	7053      	strb	r3, [r2, #1]
      }
      break;
 80118d0:	e007      	b.n	80118e2 <CAD_StateMachine+0x156>
    }

    default:
    {
      /* Call the state machine corresponding to the port SNK or SRC or DRP */
      _timing = _handle->CAD_PtrStateMachine(PortNum, pEvent, pCCXX);
 80118d2:	693b      	ldr	r3, [r7, #16]
 80118d4:	689b      	ldr	r3, [r3, #8]
 80118d6:	7bf8      	ldrb	r0, [r7, #15]
 80118d8:	687a      	ldr	r2, [r7, #4]
 80118da:	68b9      	ldr	r1, [r7, #8]
 80118dc:	4798      	blx	r3
 80118de:	6178      	str	r0, [r7, #20]
      break;
 80118e0:	e000      	b.n	80118e4 <CAD_StateMachine+0x158>
      break;
 80118e2:	bf00      	nop
    }
#endif /* CAD_DEBUG_TRACE */
  }
#endif /* _TRACE */

  return _timing;
 80118e4:	697b      	ldr	r3, [r7, #20]
}
 80118e6:	4618      	mov	r0, r3
 80118e8:	3718      	adds	r7, #24
 80118ea:	46bd      	mov	sp, r7
 80118ec:	bd80      	pop	{r7, pc}
 80118ee:	bf00      	nop
 80118f0:	200037e4 	.word	0x200037e4
 80118f4:	200037fc 	.word	0x200037fc

080118f8 <CAD_Check_HW_SNK>:
  * @brief  Check CCx HW condition
  * @param  PortNum Port
  * @retval none
  */
void CAD_Check_HW_SNK(uint8_t PortNum)
{
 80118f8:	b480      	push	{r7}
 80118fa:	b087      	sub	sp, #28
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	4603      	mov	r3, r0
 8011900:	71fb      	strb	r3, [r7, #7]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8011902:	79fa      	ldrb	r2, [r7, #7]
 8011904:	4613      	mov	r3, r2
 8011906:	005b      	lsls	r3, r3, #1
 8011908:	4413      	add	r3, r2
 801190a:	009b      	lsls	r3, r3, #2
 801190c:	4a3a      	ldr	r2, [pc, #232]	@ (80119f8 <CAD_Check_HW_SNK+0x100>)
 801190e:	4413      	add	r3, r2
 8011910:	617b      	str	r3, [r7, #20]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;

  /* Disable the C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#else
  CC1_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1;
 8011912:	79fa      	ldrb	r2, [r7, #7]
 8011914:	4939      	ldr	r1, [pc, #228]	@ (80119fc <CAD_Check_HW_SNK+0x104>)
 8011916:	4613      	mov	r3, r2
 8011918:	011b      	lsls	r3, r3, #4
 801191a:	1a9b      	subs	r3, r3, r2
 801191c:	009b      	lsls	r3, r3, #2
 801191e:	440b      	add	r3, r1
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	695b      	ldr	r3, [r3, #20]
 8011924:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8011928:	613b      	str	r3, [r7, #16]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;
 801192a:	79fa      	ldrb	r2, [r7, #7]
 801192c:	4933      	ldr	r1, [pc, #204]	@ (80119fc <CAD_Check_HW_SNK+0x104>)
 801192e:	4613      	mov	r3, r2
 8011930:	011b      	lsls	r3, r3, #4
 8011932:	1a9b      	subs	r3, r3, r2
 8011934:	009b      	lsls	r3, r3, #2
 8011936:	440b      	add	r3, r1
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	695b      	ldr	r3, [r3, #20]
 801193c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8011940:	60fb      	str	r3, [r7, #12]
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  _handle->cc  = CCNONE;
 8011942:	697a      	ldr	r2, [r7, #20]
 8011944:	7813      	ldrb	r3, [r2, #0]
 8011946:	f36f 0301 	bfc	r3, #0, #2
 801194a:	7013      	strb	r3, [r2, #0]
  _handle->CurrentHWcondition     = HW_Detachment;
 801194c:	697a      	ldr	r2, [r7, #20]
 801194e:	7813      	ldrb	r3, [r2, #0]
 8011950:	f36f 0384 	bfc	r3, #2, #3
 8011954:	7013      	strb	r3, [r2, #0]

  if ((CC1_value != LL_UCPD_SNK_CC1_VOPEN) && (CC2_value == LL_UCPD_SNK_CC2_VOPEN))
 8011956:	693b      	ldr	r3, [r7, #16]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d021      	beq.n	80119a0 <CAD_Check_HW_SNK+0xa8>
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d11e      	bne.n	80119a0 <CAD_Check_HW_SNK+0xa8>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 8011962:	697a      	ldr	r2, [r7, #20]
 8011964:	7813      	ldrb	r3, [r2, #0]
 8011966:	2101      	movs	r1, #1
 8011968:	f361 0384 	bfi	r3, r1, #2, #3
 801196c:	7013      	strb	r3, [r2, #0]
    _handle->cc = CC1;
 801196e:	697a      	ldr	r2, [r7, #20]
 8011970:	7813      	ldrb	r3, [r2, #0]
 8011972:	2101      	movs	r1, #1
 8011974:	f361 0301 	bfi	r3, r1, #0, #2
 8011978:	7013      	strb	r3, [r2, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC1_value >> UCPD_SR_TYPEC_VSTATE_CC1_Pos;
 801197a:	693b      	ldr	r3, [r7, #16]
 801197c:	0c18      	lsrs	r0, r3, #16
 801197e:	79fa      	ldrb	r2, [r7, #7]
 8011980:	491e      	ldr	r1, [pc, #120]	@ (80119fc <CAD_Check_HW_SNK+0x104>)
 8011982:	4613      	mov	r3, r2
 8011984:	011b      	lsls	r3, r3, #4
 8011986:	1a9b      	subs	r3, r3, r2
 8011988:	009b      	lsls	r3, r3, #2
 801198a:	440b      	add	r3, r1
 801198c:	3310      	adds	r3, #16
 801198e:	681a      	ldr	r2, [r3, #0]
 8011990:	4603      	mov	r3, r0
 8011992:	f003 0303 	and.w	r3, r3, #3
 8011996:	b2d9      	uxtb	r1, r3
 8011998:	7893      	ldrb	r3, [r2, #2]
 801199a:	f361 0383 	bfi	r3, r1, #2, #2
 801199e:	7093      	strb	r3, [r2, #2]
  }

  if ((CC1_value == LL_UCPD_SNK_CC1_VOPEN) && (CC2_value != LL_UCPD_SNK_CC2_VOPEN))
 80119a0:	693b      	ldr	r3, [r7, #16]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d121      	bne.n	80119ea <CAD_Check_HW_SNK+0xf2>
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d01e      	beq.n	80119ea <CAD_Check_HW_SNK+0xf2>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 80119ac:	697a      	ldr	r2, [r7, #20]
 80119ae:	7813      	ldrb	r3, [r2, #0]
 80119b0:	2101      	movs	r1, #1
 80119b2:	f361 0384 	bfi	r3, r1, #2, #3
 80119b6:	7013      	strb	r3, [r2, #0]
    _handle->cc = CC2;
 80119b8:	697a      	ldr	r2, [r7, #20]
 80119ba:	7813      	ldrb	r3, [r2, #0]
 80119bc:	2102      	movs	r1, #2
 80119be:	f361 0301 	bfi	r3, r1, #0, #2
 80119c2:	7013      	strb	r3, [r2, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC2_value >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;;
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	0c98      	lsrs	r0, r3, #18
 80119c8:	79fa      	ldrb	r2, [r7, #7]
 80119ca:	490c      	ldr	r1, [pc, #48]	@ (80119fc <CAD_Check_HW_SNK+0x104>)
 80119cc:	4613      	mov	r3, r2
 80119ce:	011b      	lsls	r3, r3, #4
 80119d0:	1a9b      	subs	r3, r3, r2
 80119d2:	009b      	lsls	r3, r3, #2
 80119d4:	440b      	add	r3, r1
 80119d6:	3310      	adds	r3, #16
 80119d8:	681a      	ldr	r2, [r3, #0]
 80119da:	4603      	mov	r3, r0
 80119dc:	f003 0303 	and.w	r3, r3, #3
 80119e0:	b2d9      	uxtb	r1, r3
 80119e2:	7893      	ldrb	r3, [r2, #2]
 80119e4:	f361 0383 	bfi	r3, r1, #2, #2
 80119e8:	7093      	strb	r3, [r2, #2]
  }
}
 80119ea:	bf00      	nop
 80119ec:	371c      	adds	r7, #28
 80119ee:	46bd      	mov	sp, r7
 80119f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f4:	4770      	bx	lr
 80119f6:	bf00      	nop
 80119f8:	200037e4 	.word	0x200037e4
 80119fc:	200037fc 	.word	0x200037fc

08011a00 <ManageStateDetached_SNK>:
  * @brief  Manage the detached state for sink role
  * @param  PortNum Port
  * @retval Timeout value
  */
static uint32_t ManageStateDetached_SNK(uint8_t PortNum)
{
 8011a00:	b580      	push	{r7, lr}
 8011a02:	b084      	sub	sp, #16
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	4603      	mov	r3, r0
 8011a08:	71fb      	strb	r3, [r7, #7]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8011a0a:	79fa      	ldrb	r2, [r7, #7]
 8011a0c:	4613      	mov	r3, r2
 8011a0e:	005b      	lsls	r3, r3, #1
 8011a10:	4413      	add	r3, r2
 8011a12:	009b      	lsls	r3, r3, #2
 8011a14:	4a1e      	ldr	r2, [pc, #120]	@ (8011a90 <ManageStateDetached_SNK+0x90>)
 8011a16:	4413      	add	r3, r2
 8011a18:	60bb      	str	r3, [r7, #8]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8011a1a:	2302      	movs	r3, #2
 8011a1c:	60fb      	str	r3, [r7, #12]

  CAD_Check_HW_SNK(PortNum);
 8011a1e:	79fb      	ldrb	r3, [r7, #7]
 8011a20:	4618      	mov	r0, r3
 8011a22:	f7ff ff69 	bl	80118f8 <CAD_Check_HW_SNK>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  if (_handle->CurrentHWcondition == HW_Detachment)
 8011a26:	68bb      	ldr	r3, [r7, #8]
 8011a28:	781b      	ldrb	r3, [r3, #0]
 8011a2a:	f003 031c 	and.w	r3, r3, #28
 8011a2e:	b2db      	uxtb	r3, r3
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d103      	bne.n	8011a3c <ManageStateDetached_SNK+0x3c>
    /* Value returned by a SRC or a SINK */
    _timing = CAD_DETACH_POLLING; /* 100ms in the sink cases */
#elif defined(USBPDM1_VCC_FEATURE_ENABLED)
    _timing = CAD_DEFAULT_TIME;
#else
    _timing = CAD_INFINITE_TIME;
 8011a34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011a38:	60fb      	str	r3, [r7, #12]
 8011a3a:	e023      	b.n	8011a84 <ManageStateDetached_SNK+0x84>
#endif /* _ACCESSORY_SNK */
  }
  else
  {
    /* Get the time of this event */
    _handle->CAD_tDebounce_start = HAL_GetTick();
 8011a3c:	f7f4 feb0 	bl	80067a0 <HAL_GetTick>
 8011a40:	4602      	mov	r2, r0
 8011a42:	68bb      	ldr	r3, [r7, #8]
 8011a44:	605a      	str	r2, [r3, #4]
    _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 8011a46:	68ba      	ldr	r2, [r7, #8]
 8011a48:	7853      	ldrb	r3, [r2, #1]
 8011a4a:	2102      	movs	r1, #2
 8011a4c:	f361 0345 	bfi	r3, r1, #1, #5
 8011a50:	7053      	strb	r3, [r2, #1]

    /* Temporary patch for test TD.PD 4.5.2 + rework for Patch TP.PD.C.E5 */
    HAL_Delay(1);
 8011a52:	2001      	movs	r0, #1
 8011a54:	f7f4 feb0 	bl	80067b8 <HAL_Delay>
    CAD_Check_HW_SNK(PortNum);
 8011a58:	79fb      	ldrb	r3, [r7, #7]
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	f7ff ff4c 	bl	80118f8 <CAD_Check_HW_SNK>

    if (_handle->CurrentHWcondition == HW_Detachment)
 8011a60:	68bb      	ldr	r3, [r7, #8]
 8011a62:	781b      	ldrb	r3, [r3, #0]
 8011a64:	f003 031c 	and.w	r3, r3, #28
 8011a68:	b2db      	uxtb	r3, r3
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d106      	bne.n	8011a7c <ManageStateDetached_SNK+0x7c>
    {
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 8011a6e:	68ba      	ldr	r2, [r7, #8]
 8011a70:	7853      	ldrb	r3, [r2, #1]
 8011a72:	2101      	movs	r1, #1
 8011a74:	f361 0345 	bfi	r3, r1, #1, #5
 8011a78:	7053      	strb	r3, [r2, #1]
 8011a7a:	e003      	b.n	8011a84 <ManageStateDetached_SNK+0x84>
    }
    else
    {
      BSP_USBPD_PWR_VBUSInit(PortNum);
 8011a7c:	79fb      	ldrb	r3, [r7, #7]
 8011a7e:	4618      	mov	r0, r3
 8011a80:	f005 fad1 	bl	8017026 <BSP_USBPD_PWR_VBUSInit>
    }
  }
  return _timing;
 8011a84:	68fb      	ldr	r3, [r7, #12]
}
 8011a86:	4618      	mov	r0, r3
 8011a88:	3710      	adds	r7, #16
 8011a8a:	46bd      	mov	sp, r7
 8011a8c:	bd80      	pop	{r7, pc}
 8011a8e:	bf00      	nop
 8011a90:	200037e4 	.word	0x200037e4

08011a94 <ManageStateAttachedWait_SNK>:
  * @param  pEvent  Pointer on CAD event based on @ref USBPD_CAD_EVENT
  * @param  pCCXX   Pointer on CC Pin based on @ref CCxPin_TypeDef
  * @retval Timeout value
  */
static uint32_t ManageStateAttachedWait_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b088      	sub	sp, #32
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	60b9      	str	r1, [r7, #8]
 8011a9e:	607a      	str	r2, [r7, #4]
 8011aa0:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8011aa2:	7bfa      	ldrb	r2, [r7, #15]
 8011aa4:	4613      	mov	r3, r2
 8011aa6:	005b      	lsls	r3, r3, #1
 8011aa8:	4413      	add	r3, r2
 8011aaa:	009b      	lsls	r3, r3, #2
 8011aac:	4a39      	ldr	r2, [pc, #228]	@ (8011b94 <ManageStateAttachedWait_SNK+0x100>)
 8011aae:	4413      	add	r3, r2
 8011ab0:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8011ab2:	2302      	movs	r3, #2
 8011ab4:	61fb      	str	r3, [r7, #28]

  uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 8011ab6:	f7f4 fe73 	bl	80067a0 <HAL_GetTick>
 8011aba:	4602      	mov	r2, r0
 8011abc:	69bb      	ldr	r3, [r7, #24]
 8011abe:	685b      	ldr	r3, [r3, #4]
 8011ac0:	1ad3      	subs	r3, r2, r3
 8011ac2:	617b      	str	r3, [r7, #20]
  CAD_Check_HW_SNK(PortNum);
 8011ac4:	7bfb      	ldrb	r3, [r7, #15]
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	f7ff ff16 	bl	80118f8 <CAD_Check_HW_SNK>
  if (_handle->CurrentHWcondition == HW_Attachment)
 8011acc:	69bb      	ldr	r3, [r7, #24]
 8011ace:	781b      	ldrb	r3, [r3, #0]
 8011ad0:	f003 031c 	and.w	r3, r3, #28
 8011ad4:	b2db      	uxtb	r3, r3
 8011ad6:	2b04      	cmp	r3, #4
 8011ad8:	d12c      	bne.n	8011b34 <ManageStateAttachedWait_SNK+0xa0>
  {
    if (CAD_tDebounce > CAD_TCCDEBOUNCE_THRESHOLD)
 8011ada:	697b      	ldr	r3, [r7, #20]
 8011adc:	2b78      	cmp	r3, #120	@ 0x78
 8011ade:	d923      	bls.n	8011b28 <ManageStateAttachedWait_SNK+0x94>
    {
      if (USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum, USBPD_PWR_VSAFE5V)) /* Check if Vbus is on */
 8011ae0:	7bfb      	ldrb	r3, [r7, #15]
 8011ae2:	2101      	movs	r1, #1
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	f005 fa4f 	bl	8016f88 <USBPD_PWR_IF_GetVBUSStatus>
 8011aea:	4603      	mov	r3, r0
 8011aec:	2b01      	cmp	r3, #1
 8011aee:	d11b      	bne.n	8011b28 <ManageStateAttachedWait_SNK+0x94>
      {
        HW_SignalAttachement(PortNum, _handle->cc);
 8011af0:	69bb      	ldr	r3, [r7, #24]
 8011af2:	781b      	ldrb	r3, [r3, #0]
 8011af4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8011af8:	b2db      	uxtb	r3, r3
 8011afa:	461a      	mov	r2, r3
 8011afc:	7bfb      	ldrb	r3, [r7, #15]
 8011afe:	4611      	mov	r1, r2
 8011b00:	4618      	mov	r0, r3
 8011b02:	f001 fa95 	bl	8013030 <HW_SignalAttachement>
        /* Go to attached state */
        _handle->cstate = USBPD_CAD_STATE_ATTACHED;
 8011b06:	69ba      	ldr	r2, [r7, #24]
 8011b08:	7853      	ldrb	r3, [r2, #1]
 8011b0a:	2103      	movs	r1, #3
 8011b0c:	f361 0345 	bfi	r3, r1, #1, #5
 8011b10:	7053      	strb	r3, [r2, #1]
        *pEvent = USBPD_CAD_EVENT_ATTACHED;
 8011b12:	68bb      	ldr	r3, [r7, #8]
 8011b14:	2202      	movs	r2, #2
 8011b16:	701a      	strb	r2, [r3, #0]
        *pCCXX = _handle->cc;
 8011b18:	69bb      	ldr	r3, [r7, #24]
 8011b1a:	781b      	ldrb	r3, [r3, #0]
 8011b1c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8011b20:	b2db      	uxtb	r3, r3
 8011b22:	461a      	mov	r2, r3
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	601a      	str	r2, [r3, #0]
      }
    }
    _handle->CAD_tDebounce_flag = USBPD_FALSE;
 8011b28:	69ba      	ldr	r2, [r7, #24]
 8011b2a:	7813      	ldrb	r3, [r2, #0]
 8011b2c:	f36f 1345 	bfc	r3, #5, #1
 8011b30:	7013      	strb	r3, [r2, #0]
 8011b32:	e02a      	b.n	8011b8a <ManageStateAttachedWait_SNK+0xf6>
  }
  else
  {
    /* Start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 8011b34:	69bb      	ldr	r3, [r7, #24]
 8011b36:	781b      	ldrb	r3, [r3, #0]
 8011b38:	f003 0320 	and.w	r3, r3, #32
 8011b3c:	b2db      	uxtb	r3, r3
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d10c      	bne.n	8011b5c <ManageStateAttachedWait_SNK+0xc8>
    {
      _handle->CAD_tDebounce_start = HAL_GetTick();
 8011b42:	f7f4 fe2d 	bl	80067a0 <HAL_GetTick>
 8011b46:	4602      	mov	r2, r0
 8011b48:	69bb      	ldr	r3, [r7, #24]
 8011b4a:	605a      	str	r2, [r3, #4]
      _handle->CAD_tDebounce_flag = USBPD_TRUE;
 8011b4c:	69ba      	ldr	r2, [r7, #24]
 8011b4e:	7813      	ldrb	r3, [r2, #0]
 8011b50:	f043 0320 	orr.w	r3, r3, #32
 8011b54:	7013      	strb	r3, [r2, #0]
      _timing = CAD_TPDDEBOUNCE_THRESHOLD;
 8011b56:	230c      	movs	r3, #12
 8011b58:	61fb      	str	r3, [r7, #28]
 8011b5a:	e016      	b.n	8011b8a <ManageStateAttachedWait_SNK+0xf6>
    }
    else /* CAD_tDebounce already running */
    {
      /* Evaluate CAD_tDebounce */
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start > CAD_TPDDEBOUNCE_THRESHOLD))
 8011b5c:	f7f4 fe20 	bl	80067a0 <HAL_GetTick>
 8011b60:	4602      	mov	r2, r0
 8011b62:	69bb      	ldr	r3, [r7, #24]
 8011b64:	685b      	ldr	r3, [r3, #4]
 8011b66:	1ad3      	subs	r3, r2, r3
 8011b68:	2b0c      	cmp	r3, #12
 8011b6a:	d90e      	bls.n	8011b8a <ManageStateAttachedWait_SNK+0xf6>
      {
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 8011b6c:	69ba      	ldr	r2, [r7, #24]
 8011b6e:	7813      	ldrb	r3, [r2, #0]
 8011b70:	f36f 1345 	bfc	r3, #5, #1
 8011b74:	7013      	strb	r3, [r2, #0]
        _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 8011b76:	69ba      	ldr	r2, [r7, #24]
 8011b78:	7853      	ldrb	r3, [r2, #1]
 8011b7a:	2101      	movs	r1, #1
 8011b7c:	f361 0345 	bfi	r3, r1, #1, #5
 8011b80:	7053      	strb	r3, [r2, #1]
        BSP_USBPD_PWR_VBUSDeInit(PortNum);
 8011b82:	7bfb      	ldrb	r3, [r7, #15]
 8011b84:	4618      	mov	r0, r3
 8011b86:	f005 fa61 	bl	801704c <BSP_USBPD_PWR_VBUSDeInit>
        }
#endif /* _ACCESSORY_SNK */
      }
    }
  }
  return _timing;
 8011b8a:	69fb      	ldr	r3, [r7, #28]
}
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	3720      	adds	r7, #32
 8011b90:	46bd      	mov	sp, r7
 8011b92:	bd80      	pop	{r7, pc}
 8011b94:	200037e4 	.word	0x200037e4

08011b98 <ManageStateAttached_SNK>:
  * @param  pEvent  Pointer on CAD event based on @ref USBPD_CAD_EVENT
  * @param  pCCXX   Pointer on CC Pin based on @ref CCxPin_TypeDef
  * @retval Timeout value
  */
static uint32_t ManageStateAttached_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8011b98:	b580      	push	{r7, lr}
 8011b9a:	b088      	sub	sp, #32
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	4603      	mov	r3, r0
 8011ba0:	60b9      	str	r1, [r7, #8]
 8011ba2:	607a      	str	r2, [r7, #4]
 8011ba4:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8011ba6:	7bfa      	ldrb	r2, [r7, #15]
 8011ba8:	4613      	mov	r3, r2
 8011baa:	005b      	lsls	r3, r3, #1
 8011bac:	4413      	add	r3, r2
 8011bae:	009b      	lsls	r3, r3, #2
 8011bb0:	4a2a      	ldr	r2, [pc, #168]	@ (8011c5c <ManageStateAttached_SNK+0xc4>)
 8011bb2:	4413      	add	r3, r2
 8011bb4:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8011bb6:	2302      	movs	r3, #2
 8011bb8:	61fb      	str	r3, [r7, #28]

  uint32_t ccx;
  uint32_t comp = (Ports[PortNum].CCx == CC1) ? LL_UCPD_SNK_CC1_VOPEN : LL_UCPD_SNK_CC2_VOPEN;
 8011bba:	2300      	movs	r3, #0
 8011bbc:	617b      	str	r3, [r7, #20]
  {
    __DSB();
  };
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 8011bbe:	7bfa      	ldrb	r2, [r7, #15]
 8011bc0:	4927      	ldr	r1, [pc, #156]	@ (8011c60 <ManageStateAttached_SNK+0xc8>)
 8011bc2:	4613      	mov	r3, r2
 8011bc4:	011b      	lsls	r3, r3, #4
 8011bc6:	1a9b      	subs	r3, r3, r2
 8011bc8:	009b      	lsls	r3, r3, #2
 8011bca:	440b      	add	r3, r1
 8011bcc:	3334      	adds	r3, #52	@ 0x34
 8011bce:	681b      	ldr	r3, [r3, #0]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 8011bd0:	2b01      	cmp	r3, #1
 8011bd2:	d10b      	bne.n	8011bec <ManageStateAttached_SNK+0x54>
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 8011bd4:	7bfa      	ldrb	r2, [r7, #15]
 8011bd6:	4922      	ldr	r1, [pc, #136]	@ (8011c60 <ManageStateAttached_SNK+0xc8>)
 8011bd8:	4613      	mov	r3, r2
 8011bda:	011b      	lsls	r3, r3, #4
 8011bdc:	1a9b      	subs	r3, r3, r2
 8011bde:	009b      	lsls	r3, r3, #2
 8011be0:	440b      	add	r3, r1
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	695b      	ldr	r3, [r3, #20]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 8011be6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8011bea:	e00a      	b.n	8011c02 <ManageStateAttached_SNK+0x6a>
 8011bec:	7bfa      	ldrb	r2, [r7, #15]
 8011bee:	491c      	ldr	r1, [pc, #112]	@ (8011c60 <ManageStateAttached_SNK+0xc8>)
 8011bf0:	4613      	mov	r3, r2
 8011bf2:	011b      	lsls	r3, r3, #4
 8011bf4:	1a9b      	subs	r3, r3, r2
 8011bf6:	009b      	lsls	r3, r3, #2
 8011bf8:	440b      	add	r3, r1
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	695b      	ldr	r3, [r3, #20]
 8011bfe:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 8011c02:	613b      	str	r3, [r7, #16]
  if ((USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum,
 8011c04:	7bfb      	ldrb	r3, [r7, #15]
 8011c06:	2102      	movs	r1, #2
 8011c08:	4618      	mov	r0, r3
 8011c0a:	f005 f9bd 	bl	8016f88 <USBPD_PWR_IF_GetVBUSStatus>
 8011c0e:	4603      	mov	r3, r0
 8011c10:	2b01      	cmp	r3, #1
 8011c12:	d11b      	bne.n	8011c4c <ManageStateAttached_SNK+0xb4>
                                                USBPD_PWR_SNKDETACH)) /* Check if Vbus is below disconnect threshold */
      &&
 8011c14:	697a      	ldr	r2, [r7, #20]
 8011c16:	693b      	ldr	r3, [r7, #16]
 8011c18:	429a      	cmp	r2, r3
 8011c1a:	d117      	bne.n	8011c4c <ManageStateAttached_SNK+0xb4>
      (comp == ccx)                                                   /* Confirm that there is no RP */
     )
  {
    HW_SignalDetachment(PortNum);
 8011c1c:	7bfb      	ldrb	r3, [r7, #15]
 8011c1e:	4618      	mov	r0, r3
 8011c20:	f001 fb52 	bl	80132c8 <HW_SignalDetachment>
    /* Restart the toggle time */
    _handle->CurrentHWcondition = HW_Detachment;
 8011c24:	69ba      	ldr	r2, [r7, #24]
 8011c26:	7813      	ldrb	r3, [r2, #0]
 8011c28:	f36f 0384 	bfc	r3, #2, #3
 8011c2c:	7013      	strb	r3, [r2, #0]
    _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 8011c2e:	69ba      	ldr	r2, [r7, #24]
 8011c30:	7853      	ldrb	r3, [r2, #1]
 8011c32:	2101      	movs	r1, #1
 8011c34:	f361 0345 	bfi	r3, r1, #1, #5
 8011c38:	7053      	strb	r3, [r2, #1]
    if (USBPD_TRUE ==  _handle->CAD_Accessory_SNK)
    {
      _handle->CAD_tToggle_start = HAL_GetTick();
    }
#endif /* _ACCESSORY_SNK */
    *pEvent = USBPD_CAD_EVENT_DETACHED;
 8011c3a:	68bb      	ldr	r3, [r7, #8]
 8011c3c:	2201      	movs	r2, #1
 8011c3e:	701a      	strb	r2, [r3, #0]
    *pCCXX = CCNONE;
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	2200      	movs	r2, #0
 8011c44:	601a      	str	r2, [r3, #0]
    _timing = 0;
 8011c46:	2300      	movs	r3, #0
 8011c48:	61fb      	str	r3, [r7, #28]
 8011c4a:	e001      	b.n	8011c50 <ManageStateAttached_SNK+0xb8>
  }
  else
  {
    _timing = CAD_VBUS_POLLING_TIME;
 8011c4c:	230a      	movs	r3, #10
 8011c4e:	61fb      	str	r3, [r7, #28]
#if defined(_LOW_POWER) || defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Disable type C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 8011c50:	69fb      	ldr	r3, [r7, #28]
}
 8011c52:	4618      	mov	r0, r3
 8011c54:	3720      	adds	r7, #32
 8011c56:	46bd      	mov	sp, r7
 8011c58:	bd80      	pop	{r7, pc}
 8011c5a:	bf00      	nop
 8011c5c:	200037e4 	.word	0x200037e4
 8011c60:	200037fc 	.word	0x200037fc

08011c64 <LL_AHB1_GRP1_EnableClock>:
{
 8011c64:	b480      	push	{r7}
 8011c66:	b085      	sub	sp, #20
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8011c6c:	4b08      	ldr	r3, [pc, #32]	@ (8011c90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8011c6e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8011c70:	4907      	ldr	r1, [pc, #28]	@ (8011c90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	4313      	orrs	r3, r2
 8011c76:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8011c78:	4b05      	ldr	r3, [pc, #20]	@ (8011c90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8011c7a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	4013      	ands	r3, r2
 8011c80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011c82:	68fb      	ldr	r3, [r7, #12]
}
 8011c84:	bf00      	nop
 8011c86:	3714      	adds	r7, #20
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c8e:	4770      	bx	lr
 8011c90:	40021000 	.word	0x40021000

08011c94 <USBPD_HW_GetUSPDInstance>:
/* Variable containing ADC conversions results */
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

UCPD_TypeDef *USBPD_HW_GetUSPDInstance(uint8_t PortNum)
{
 8011c94:	b480      	push	{r7}
 8011c96:	b083      	sub	sp, #12
 8011c98:	af00      	add	r7, sp, #0
 8011c9a:	4603      	mov	r3, r0
 8011c9c:	71fb      	strb	r3, [r7, #7]
  return UCPD_INSTANCE0;
 8011c9e:	4b03      	ldr	r3, [pc, #12]	@ (8011cac <USBPD_HW_GetUSPDInstance+0x18>)
}
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	370c      	adds	r7, #12
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011caa:	4770      	bx	lr
 8011cac:	4000a000 	.word	0x4000a000

08011cb0 <USBPD_HW_Init_DMARxInstance>:

#if !defined(USBPDCORE_LIB_NO_PD)
DMA_Channel_TypeDef *USBPD_HW_Init_DMARxInstance(uint8_t PortNum)
{
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b08e      	sub	sp, #56	@ 0x38
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	4603      	mov	r3, r0
 8011cb8:	71fb      	strb	r3, [r7, #7]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 8011cba:	f107 030c 	add.w	r3, r7, #12
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	f7fe f9c2 	bl	8010048 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	617b      	str	r3, [r7, #20]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 8011cc8:	2300      	movs	r3, #0
 8011cca:	61bb      	str	r3, [r7, #24]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 8011ccc:	2300      	movs	r3, #0
 8011cce:	61fb      	str	r3, [r7, #28]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 8011cd0:	2380      	movs	r3, #128	@ 0x80
 8011cd2:	623b      	str	r3, [r7, #32]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	627b      	str	r3, [r7, #36]	@ 0x24
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 8011cd8:	2300      	movs	r3, #0
 8011cda:	62bb      	str	r3, [r7, #40]	@ 0x28
  DMA_InitStruct.NbData = 0;
 8011cdc:	2300      	movs	r3, #0
 8011cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 8011ce0:	2300      	movs	r3, #0
 8011ce2:	613b      	str	r3, [r7, #16]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 8011ce4:	2300      	movs	r3, #0
 8011ce6:	60fb      	str	r3, [r7, #12]
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_HIGH;
 8011ce8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011cec:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Enable the clock */
  UCPDDMA_INSTANCE0_CLOCKENABLE_RX;
 8011cee:	2001      	movs	r0, #1
 8011cf0:	f7ff ffb8 	bl	8011c64 <LL_AHB1_GRP1_EnableClock>

  /* Initialise the DMA */
  DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_RX;
 8011cf4:	2372      	movs	r3, #114	@ 0x72
 8011cf6:	633b      	str	r3, [r7, #48]	@ 0x30

  (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_RX, UCPDDMA_INSTANCE0_LL_CHANNEL_RX, &DMA_InitStruct);
 8011cf8:	f107 030c 	add.w	r3, r7, #12
 8011cfc:	461a      	mov	r2, r3
 8011cfe:	2100      	movs	r1, #0
 8011d00:	4803      	ldr	r0, [pc, #12]	@ (8011d10 <USBPD_HW_Init_DMARxInstance+0x60>)
 8011d02:	f7fe f961 	bl	800ffc8 <LL_DMA_Init>
  return UCPDDMA_INSTANCE0_CHANNEL_RX;
 8011d06:	4b03      	ldr	r3, [pc, #12]	@ (8011d14 <USBPD_HW_Init_DMARxInstance+0x64>)
}
 8011d08:	4618      	mov	r0, r3
 8011d0a:	3738      	adds	r7, #56	@ 0x38
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	bd80      	pop	{r7, pc}
 8011d10:	40020000 	.word	0x40020000
 8011d14:	40020008 	.word	0x40020008

08011d18 <USBPD_HW_DeInit_DMARxInstance>:

void USBPD_HW_DeInit_DMARxInstance(uint8_t PortNum)
{
 8011d18:	b480      	push	{r7}
 8011d1a:	b083      	sub	sp, #12
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	4603      	mov	r3, r0
 8011d20:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
}
 8011d22:	bf00      	nop
 8011d24:	370c      	adds	r7, #12
 8011d26:	46bd      	mov	sp, r7
 8011d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d2c:	4770      	bx	lr
	...

08011d30 <USBPD_HW_Init_DMATxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMATxInstance(uint8_t PortNum)
{
 8011d30:	b580      	push	{r7, lr}
 8011d32:	b08e      	sub	sp, #56	@ 0x38
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	4603      	mov	r3, r0
 8011d38:	71fb      	strb	r3, [r7, #7]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 8011d3a:	f107 030c 	add.w	r3, r7, #12
 8011d3e:	4618      	mov	r0, r3
 8011d40:	f7fe f982 	bl	8010048 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 8011d44:	2310      	movs	r3, #16
 8011d46:	617b      	str	r3, [r7, #20]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 8011d48:	2300      	movs	r3, #0
 8011d4a:	61bb      	str	r3, [r7, #24]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 8011d4c:	2300      	movs	r3, #0
 8011d4e:	61fb      	str	r3, [r7, #28]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 8011d50:	2380      	movs	r3, #128	@ 0x80
 8011d52:	623b      	str	r3, [r7, #32]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 8011d54:	2300      	movs	r3, #0
 8011d56:	627b      	str	r3, [r7, #36]	@ 0x24
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 8011d58:	2300      	movs	r3, #0
 8011d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  DMA_InitStruct.NbData = 0;
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 8011d60:	2300      	movs	r3, #0
 8011d62:	613b      	str	r3, [r7, #16]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 8011d64:	2300      	movs	r3, #0
 8011d66:	60fb      	str	r3, [r7, #12]

  /* Enable the clock */
  UCPDDMA_INSTANCE0_CLOCKENABLE_TX;
 8011d68:	2001      	movs	r0, #1
 8011d6a:	f7ff ff7b 	bl	8011c64 <LL_AHB1_GRP1_EnableClock>

  DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_TX;
 8011d6e:	2373      	movs	r3, #115	@ 0x73
 8011d70:	633b      	str	r3, [r7, #48]	@ 0x30
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
 8011d72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011d76:	637b      	str	r3, [r7, #52]	@ 0x34
  (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_TX, UCPDDMA_INSTANCE0_LL_CHANNEL_TX, &DMA_InitStruct);
 8011d78:	f107 030c 	add.w	r3, r7, #12
 8011d7c:	461a      	mov	r2, r3
 8011d7e:	2101      	movs	r1, #1
 8011d80:	4803      	ldr	r0, [pc, #12]	@ (8011d90 <USBPD_HW_Init_DMATxInstance+0x60>)
 8011d82:	f7fe f921 	bl	800ffc8 <LL_DMA_Init>
  return UCPDDMA_INSTANCE0_CHANNEL_TX;
 8011d86:	4b03      	ldr	r3, [pc, #12]	@ (8011d94 <USBPD_HW_Init_DMATxInstance+0x64>)
}
 8011d88:	4618      	mov	r0, r3
 8011d8a:	3738      	adds	r7, #56	@ 0x38
 8011d8c:	46bd      	mov	sp, r7
 8011d8e:	bd80      	pop	{r7, pc}
 8011d90:	40020000 	.word	0x40020000
 8011d94:	4002001c 	.word	0x4002001c

08011d98 <USBPD_HW_DeInit_DMATxInstance>:

void USBPD_HW_DeInit_DMATxInstance(uint8_t PortNum)
{
 8011d98:	b480      	push	{r7}
 8011d9a:	b083      	sub	sp, #12
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	4603      	mov	r3, r0
 8011da0:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
}
 8011da2:	bf00      	nop
 8011da4:	370c      	adds	r7, #12
 8011da6:	46bd      	mov	sp, r7
 8011da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dac:	4770      	bx	lr

08011dae <USBPD_HW_SetFRSSignalling>:
  (void)PortNum;
  return LL_UCPD_RESISTOR_3_0A;
}

void USBPD_HW_SetFRSSignalling(uint8_t PortNum, uint8_t cc)
{
 8011dae:	b480      	push	{r7}
 8011db0:	b083      	sub	sp, #12
 8011db2:	af00      	add	r7, sp, #0
 8011db4:	4603      	mov	r3, r0
 8011db6:	460a      	mov	r2, r1
 8011db8:	71fb      	strb	r3, [r7, #7]
 8011dba:	4613      	mov	r3, r2
 8011dbc:	71bb      	strb	r3, [r7, #6]
  else
  {
    /* FRS_TX common */
    UCPDFRS_INSTANCE0_FRSCC2;
  }
}
 8011dbe:	bf00      	nop
 8011dc0:	370c      	adds	r7, #12
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc8:	4770      	bx	lr

08011dca <LL_UCPD_ClearFlag_TypeCEventCC2>:
  * @rmtoll IIMR          TYPECEVT2IE        LL_UCPD_ClearFlag_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 8011dca:	b480      	push	{r7}
 8011dcc:	b083      	sub	sp, #12
 8011dce:	af00      	add	r7, sp, #0
 8011dd0:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT2CF);
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	699b      	ldr	r3, [r3, #24]
 8011dd6:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	619a      	str	r2, [r3, #24]
}
 8011dde:	bf00      	nop
 8011de0:	370c      	adds	r7, #12
 8011de2:	46bd      	mov	sp, r7
 8011de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de8:	4770      	bx	lr

08011dea <LL_UCPD_ClearFlag_TypeCEventCC1>:
  * @rmtoll IIMR          TYPECEVT1IE        LL_UCPD_ClearFlag_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 8011dea:	b480      	push	{r7}
 8011dec:	b083      	sub	sp, #12
 8011dee:	af00      	add	r7, sp, #0
 8011df0:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT1CF);
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	699b      	ldr	r3, [r3, #24]
 8011df6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	619a      	str	r2, [r3, #24]
}
 8011dfe:	bf00      	nop
 8011e00:	370c      	adds	r7, #12
 8011e02:	46bd      	mov	sp, r7
 8011e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e08:	4770      	bx	lr

08011e0a <LL_UCPD_ClearFlag_RxMsgEnd>:
  * @rmtoll ICR          RXMSGENDIE         LL_UCPD_ClearFlag_RxMsgEnd
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxMsgEnd(UCPD_TypeDef *UCPDx)
{
 8011e0a:	b480      	push	{r7}
 8011e0c:	b083      	sub	sp, #12
 8011e0e:	af00      	add	r7, sp, #0
 8011e10:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXMSGENDCF);
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	699b      	ldr	r3, [r3, #24]
 8011e16:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	619a      	str	r2, [r3, #24]
}
 8011e1e:	bf00      	nop
 8011e20:	370c      	adds	r7, #12
 8011e22:	46bd      	mov	sp, r7
 8011e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e28:	4770      	bx	lr

08011e2a <LL_UCPD_ClearFlag_RxOvr>:
  * @rmtoll ICR          RXOVRIE         LL_UCPD_ClearFlag_RxOvr
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOvr(UCPD_TypeDef *UCPDx)
{
 8011e2a:	b480      	push	{r7}
 8011e2c:	b083      	sub	sp, #12
 8011e2e:	af00      	add	r7, sp, #0
 8011e30:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXOVRCF);
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	699b      	ldr	r3, [r3, #24]
 8011e36:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	619a      	str	r2, [r3, #24]
}
 8011e3e:	bf00      	nop
 8011e40:	370c      	adds	r7, #12
 8011e42:	46bd      	mov	sp, r7
 8011e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e48:	4770      	bx	lr

08011e4a <LL_UCPD_ClearFlag_RxHRST>:
  * @rmtoll ICR          RXHRSTDETIE         LL_UCPD_ClearFlag_RxHRST
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxHRST(UCPD_TypeDef *UCPDx)
{
 8011e4a:	b480      	push	{r7}
 8011e4c:	b083      	sub	sp, #12
 8011e4e:	af00      	add	r7, sp, #0
 8011e50:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXHRSTDETCF);
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	699b      	ldr	r3, [r3, #24]
 8011e56:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	619a      	str	r2, [r3, #24]
}
 8011e5e:	bf00      	nop
 8011e60:	370c      	adds	r7, #12
 8011e62:	46bd      	mov	sp, r7
 8011e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e68:	4770      	bx	lr

08011e6a <LL_UCPD_ClearFlag_RxOrderSet>:
  * @rmtoll ICR          RXORDDETIE         LL_UCPD_ClearFlag_RxOrderSet
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOrderSet(UCPD_TypeDef *UCPDx)
{
 8011e6a:	b480      	push	{r7}
 8011e6c:	b083      	sub	sp, #12
 8011e6e:	af00      	add	r7, sp, #0
 8011e70:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXORDDETCF);
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	699b      	ldr	r3, [r3, #24]
 8011e76:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	619a      	str	r2, [r3, #24]
}
 8011e7e:	bf00      	nop
 8011e80:	370c      	adds	r7, #12
 8011e82:	46bd      	mov	sp, r7
 8011e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e88:	4770      	bx	lr

08011e8a <LL_UCPD_ClearFlag_TxUND>:
  * @rmtoll ICR          TXUNDIE         LL_UCPD_ClearFlag_TxUND
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxUND(UCPD_TypeDef *UCPDx)
{
 8011e8a:	b480      	push	{r7}
 8011e8c:	b083      	sub	sp, #12
 8011e8e:	af00      	add	r7, sp, #0
 8011e90:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXUNDCF);
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	699b      	ldr	r3, [r3, #24]
 8011e96:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	619a      	str	r2, [r3, #24]
}
 8011e9e:	bf00      	nop
 8011ea0:	370c      	adds	r7, #12
 8011ea2:	46bd      	mov	sp, r7
 8011ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea8:	4770      	bx	lr

08011eaa <LL_UCPD_ClearFlag_TxHRSTSENT>:
  * @rmtoll ICR          HRSTSENTIE         LL_UCPD_ClearFlag_TxHRSTSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTSENT(UCPD_TypeDef *UCPDx)
{
 8011eaa:	b480      	push	{r7}
 8011eac:	b083      	sub	sp, #12
 8011eae:	af00      	add	r7, sp, #0
 8011eb0:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTSENTCF);
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	699b      	ldr	r3, [r3, #24]
 8011eb6:	f043 0220 	orr.w	r2, r3, #32
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	619a      	str	r2, [r3, #24]
}
 8011ebe:	bf00      	nop
 8011ec0:	370c      	adds	r7, #12
 8011ec2:	46bd      	mov	sp, r7
 8011ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec8:	4770      	bx	lr

08011eca <LL_UCPD_ClearFlag_TxHRSTDISC>:
  * @rmtoll ICR          HRSTDISCIE         LL_UCPD_ClearFlag_TxHRSTDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTDISC(UCPD_TypeDef *UCPDx)
{
 8011eca:	b480      	push	{r7}
 8011ecc:	b083      	sub	sp, #12
 8011ece:	af00      	add	r7, sp, #0
 8011ed0:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTDISCCF);
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	699b      	ldr	r3, [r3, #24]
 8011ed6:	f043 0210 	orr.w	r2, r3, #16
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	619a      	str	r2, [r3, #24]
}
 8011ede:	bf00      	nop
 8011ee0:	370c      	adds	r7, #12
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee8:	4770      	bx	lr

08011eea <LL_UCPD_ClearFlag_TxMSGABT>:
  * @rmtoll ICR          TXMSGABTIE         LL_UCPD_ClearFlag_TxMSGABT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGABT(UCPD_TypeDef *UCPDx)
{
 8011eea:	b480      	push	{r7}
 8011eec:	b083      	sub	sp, #12
 8011eee:	af00      	add	r7, sp, #0
 8011ef0:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGABTCF);
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	699b      	ldr	r3, [r3, #24]
 8011ef6:	f043 0208 	orr.w	r2, r3, #8
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	619a      	str	r2, [r3, #24]
}
 8011efe:	bf00      	nop
 8011f00:	370c      	adds	r7, #12
 8011f02:	46bd      	mov	sp, r7
 8011f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f08:	4770      	bx	lr

08011f0a <LL_UCPD_ClearFlag_TxMSGSENT>:
  * @rmtoll ICR          TXMSGSENTIE         LL_UCPD_ClearFlag_TxMSGSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGSENT(UCPD_TypeDef *UCPDx)
{
 8011f0a:	b480      	push	{r7}
 8011f0c:	b083      	sub	sp, #12
 8011f0e:	af00      	add	r7, sp, #0
 8011f10:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGSENTCF);
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	699b      	ldr	r3, [r3, #24]
 8011f16:	f043 0204 	orr.w	r2, r3, #4
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	619a      	str	r2, [r3, #24]
}
 8011f1e:	bf00      	nop
 8011f20:	370c      	adds	r7, #12
 8011f22:	46bd      	mov	sp, r7
 8011f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f28:	4770      	bx	lr

08011f2a <LL_UCPD_ClearFlag_TxMSGDISC>:
  * @rmtoll ICR          TXMSGDISCIE         LL_UCPD_ClearFlag_TxMSGDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGDISC(UCPD_TypeDef *UCPDx)
{
 8011f2a:	b480      	push	{r7}
 8011f2c:	b083      	sub	sp, #12
 8011f2e:	af00      	add	r7, sp, #0
 8011f30:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGDISCCF);
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	699b      	ldr	r3, [r3, #24]
 8011f36:	f043 0202 	orr.w	r2, r3, #2
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	619a      	str	r2, [r3, #24]
}
 8011f3e:	bf00      	nop
 8011f40:	370c      	adds	r7, #12
 8011f42:	46bd      	mov	sp, r7
 8011f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f48:	4770      	bx	lr

08011f4a <USBPD_PORT0_IRQHandler>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
void PORTx_IRQHandler(uint8_t PortNum);

void USBPD_PORT0_IRQHandler(void)
{
 8011f4a:	b580      	push	{r7, lr}
 8011f4c:	af00      	add	r7, sp, #0
  PORTx_IRQHandler(USBPD_PORT_0);
 8011f4e:	2000      	movs	r0, #0
 8011f50:	f000 f802 	bl	8011f58 <PORTx_IRQHandler>
}
 8011f54:	bf00      	nop
 8011f56:	bd80      	pop	{r7, pc}

08011f58 <PORTx_IRQHandler>:

void PORTx_IRQHandler(uint8_t PortNum)
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b084      	sub	sp, #16
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	4603      	mov	r3, r0
 8011f60:	71fb      	strb	r3, [r7, #7]
  UCPD_TypeDef *hucpd = Ports[PortNum].husbpd;
 8011f62:	79fa      	ldrb	r2, [r7, #7]
 8011f64:	4998      	ldr	r1, [pc, #608]	@ (80121c8 <PORTx_IRQHandler+0x270>)
 8011f66:	4613      	mov	r3, r2
 8011f68:	011b      	lsls	r3, r3, #4
 8011f6a:	1a9b      	subs	r3, r3, r2
 8011f6c:	009b      	lsls	r3, r3, #2
 8011f6e:	440b      	add	r3, r1
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	60fb      	str	r3, [r7, #12]
  uint32_t _interrupt = LL_UCPD_ReadReg(hucpd, SR);
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	695b      	ldr	r3, [r3, #20]
 8011f78:	60bb      	str	r3, [r7, #8]
  static uint8_t ovrflag = 0;

  if ((hucpd->IMR & _interrupt) != 0u)
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	691a      	ldr	r2, [r3, #16]
 8011f7e:	68bb      	ldr	r3, [r7, #8]
 8011f80:	4013      	ands	r3, r2
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	f000 81ca 	beq.w	801231c <PORTx_IRQHandler+0x3c4>
  {
    /* TXIS no need to enable it all the transfer are done by DMA */
    if (UCPD_SR_TXMSGDISC == (_interrupt & UCPD_SR_TXMSGDISC))
 8011f88:	68bb      	ldr	r3, [r7, #8]
 8011f8a:	f003 0302 	and.w	r3, r3, #2
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d035      	beq.n	8011ffe <PORTx_IRQHandler+0xa6>
    {
      /* Message has been discarded */
      LL_UCPD_ClearFlag_TxMSGDISC(hucpd);
 8011f92:	68f8      	ldr	r0, [r7, #12]
 8011f94:	f7ff ffc9 	bl	8011f2a <LL_UCPD_ClearFlag_TxMSGDISC>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8011f98:	79fa      	ldrb	r2, [r7, #7]
 8011f9a:	498b      	ldr	r1, [pc, #556]	@ (80121c8 <PORTx_IRQHandler+0x270>)
 8011f9c:	4613      	mov	r3, r2
 8011f9e:	011b      	lsls	r3, r3, #4
 8011fa0:	1a9b      	subs	r3, r3, r2
 8011fa2:	009b      	lsls	r3, r3, #2
 8011fa4:	440b      	add	r3, r1
 8011fa6:	3304      	adds	r3, #4
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	6819      	ldr	r1, [r3, #0]
 8011fac:	79fa      	ldrb	r2, [r7, #7]
 8011fae:	4886      	ldr	r0, [pc, #536]	@ (80121c8 <PORTx_IRQHandler+0x270>)
 8011fb0:	4613      	mov	r3, r2
 8011fb2:	011b      	lsls	r3, r3, #4
 8011fb4:	1a9b      	subs	r3, r3, r2
 8011fb6:	009b      	lsls	r3, r3, #2
 8011fb8:	4403      	add	r3, r0
 8011fba:	3304      	adds	r3, #4
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	f021 0201 	bic.w	r2, r1, #1
 8011fc2:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8011fc4:	bf00      	nop
 8011fc6:	79fa      	ldrb	r2, [r7, #7]
 8011fc8:	497f      	ldr	r1, [pc, #508]	@ (80121c8 <PORTx_IRQHandler+0x270>)
 8011fca:	4613      	mov	r3, r2
 8011fcc:	011b      	lsls	r3, r3, #4
 8011fce:	1a9b      	subs	r3, r3, r2
 8011fd0:	009b      	lsls	r3, r3, #2
 8011fd2:	440b      	add	r3, r1
 8011fd4:	3304      	adds	r3, #4
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	f003 0301 	and.w	r3, r3, #1
 8011fde:	2b01      	cmp	r3, #1
 8011fe0:	d0f1      	beq.n	8011fc6 <PORTx_IRQHandler+0x6e>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 1);
 8011fe2:	79fa      	ldrb	r2, [r7, #7]
 8011fe4:	4978      	ldr	r1, [pc, #480]	@ (80121c8 <PORTx_IRQHandler+0x270>)
 8011fe6:	4613      	mov	r3, r2
 8011fe8:	011b      	lsls	r3, r3, #4
 8011fea:	1a9b      	subs	r3, r3, r2
 8011fec:	009b      	lsls	r3, r3, #2
 8011fee:	440b      	add	r3, r1
 8011ff0:	3314      	adds	r3, #20
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	79fa      	ldrb	r2, [r7, #7]
 8011ff6:	2101      	movs	r1, #1
 8011ff8:	4610      	mov	r0, r2
 8011ffa:	4798      	blx	r3
      return;
 8011ffc:	e18e      	b.n	801231c <PORTx_IRQHandler+0x3c4>
    }

    if (UCPD_SR_TXMSGSENT == (_interrupt & UCPD_SR_TXMSGSENT))
 8011ffe:	68bb      	ldr	r3, [r7, #8]
 8012000:	f003 0304 	and.w	r3, r3, #4
 8012004:	2b00      	cmp	r3, #0
 8012006:	d035      	beq.n	8012074 <PORTx_IRQHandler+0x11c>
    {
      /* Message has been fully transferred */
      LL_UCPD_ClearFlag_TxMSGSENT(hucpd);
 8012008:	68f8      	ldr	r0, [r7, #12]
 801200a:	f7ff ff7e 	bl	8011f0a <LL_UCPD_ClearFlag_TxMSGSENT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 801200e:	79fa      	ldrb	r2, [r7, #7]
 8012010:	496d      	ldr	r1, [pc, #436]	@ (80121c8 <PORTx_IRQHandler+0x270>)
 8012012:	4613      	mov	r3, r2
 8012014:	011b      	lsls	r3, r3, #4
 8012016:	1a9b      	subs	r3, r3, r2
 8012018:	009b      	lsls	r3, r3, #2
 801201a:	440b      	add	r3, r1
 801201c:	3304      	adds	r3, #4
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	6819      	ldr	r1, [r3, #0]
 8012022:	79fa      	ldrb	r2, [r7, #7]
 8012024:	4868      	ldr	r0, [pc, #416]	@ (80121c8 <PORTx_IRQHandler+0x270>)
 8012026:	4613      	mov	r3, r2
 8012028:	011b      	lsls	r3, r3, #4
 801202a:	1a9b      	subs	r3, r3, r2
 801202c:	009b      	lsls	r3, r3, #2
 801202e:	4403      	add	r3, r0
 8012030:	3304      	adds	r3, #4
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	f021 0201 	bic.w	r2, r1, #1
 8012038:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 801203a:	bf00      	nop
 801203c:	79fa      	ldrb	r2, [r7, #7]
 801203e:	4962      	ldr	r1, [pc, #392]	@ (80121c8 <PORTx_IRQHandler+0x270>)
 8012040:	4613      	mov	r3, r2
 8012042:	011b      	lsls	r3, r3, #4
 8012044:	1a9b      	subs	r3, r3, r2
 8012046:	009b      	lsls	r3, r3, #2
 8012048:	440b      	add	r3, r1
 801204a:	3304      	adds	r3, #4
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	f003 0301 	and.w	r3, r3, #1
 8012054:	2b01      	cmp	r3, #1
 8012056:	d0f1      	beq.n	801203c <PORTx_IRQHandler+0xe4>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 0);
 8012058:	79fa      	ldrb	r2, [r7, #7]
 801205a:	495b      	ldr	r1, [pc, #364]	@ (80121c8 <PORTx_IRQHandler+0x270>)
 801205c:	4613      	mov	r3, r2
 801205e:	011b      	lsls	r3, r3, #4
 8012060:	1a9b      	subs	r3, r3, r2
 8012062:	009b      	lsls	r3, r3, #2
 8012064:	440b      	add	r3, r1
 8012066:	3314      	adds	r3, #20
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	79fa      	ldrb	r2, [r7, #7]
 801206c:	2100      	movs	r1, #0
 801206e:	4610      	mov	r0, r2
 8012070:	4798      	blx	r3

#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */
      return;
 8012072:	e153      	b.n	801231c <PORTx_IRQHandler+0x3c4>
    }

    if (UCPD_SR_TXMSGABT == (_interrupt & UCPD_SR_TXMSGABT))
 8012074:	68bb      	ldr	r3, [r7, #8]
 8012076:	f003 0308 	and.w	r3, r3, #8
 801207a:	2b00      	cmp	r3, #0
 801207c:	d035      	beq.n	80120ea <PORTx_IRQHandler+0x192>
    {
      LL_UCPD_ClearFlag_TxMSGABT(hucpd);
 801207e:	68f8      	ldr	r0, [r7, #12]
 8012080:	f7ff ff33 	bl	8011eea <LL_UCPD_ClearFlag_TxMSGABT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8012084:	79fa      	ldrb	r2, [r7, #7]
 8012086:	4950      	ldr	r1, [pc, #320]	@ (80121c8 <PORTx_IRQHandler+0x270>)
 8012088:	4613      	mov	r3, r2
 801208a:	011b      	lsls	r3, r3, #4
 801208c:	1a9b      	subs	r3, r3, r2
 801208e:	009b      	lsls	r3, r3, #2
 8012090:	440b      	add	r3, r1
 8012092:	3304      	adds	r3, #4
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	6819      	ldr	r1, [r3, #0]
 8012098:	79fa      	ldrb	r2, [r7, #7]
 801209a:	484b      	ldr	r0, [pc, #300]	@ (80121c8 <PORTx_IRQHandler+0x270>)
 801209c:	4613      	mov	r3, r2
 801209e:	011b      	lsls	r3, r3, #4
 80120a0:	1a9b      	subs	r3, r3, r2
 80120a2:	009b      	lsls	r3, r3, #2
 80120a4:	4403      	add	r3, r0
 80120a6:	3304      	adds	r3, #4
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	f021 0201 	bic.w	r2, r1, #1
 80120ae:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 80120b0:	bf00      	nop
 80120b2:	79fa      	ldrb	r2, [r7, #7]
 80120b4:	4944      	ldr	r1, [pc, #272]	@ (80121c8 <PORTx_IRQHandler+0x270>)
 80120b6:	4613      	mov	r3, r2
 80120b8:	011b      	lsls	r3, r3, #4
 80120ba:	1a9b      	subs	r3, r3, r2
 80120bc:	009b      	lsls	r3, r3, #2
 80120be:	440b      	add	r3, r1
 80120c0:	3304      	adds	r3, #4
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	f003 0301 	and.w	r3, r3, #1
 80120ca:	2b01      	cmp	r3, #1
 80120cc:	d0f1      	beq.n	80120b2 <PORTx_IRQHandler+0x15a>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 2);
 80120ce:	79fa      	ldrb	r2, [r7, #7]
 80120d0:	493d      	ldr	r1, [pc, #244]	@ (80121c8 <PORTx_IRQHandler+0x270>)
 80120d2:	4613      	mov	r3, r2
 80120d4:	011b      	lsls	r3, r3, #4
 80120d6:	1a9b      	subs	r3, r3, r2
 80120d8:	009b      	lsls	r3, r3, #2
 80120da:	440b      	add	r3, r1
 80120dc:	3314      	adds	r3, #20
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	79fa      	ldrb	r2, [r7, #7]
 80120e2:	2102      	movs	r1, #2
 80120e4:	4610      	mov	r0, r2
 80120e6:	4798      	blx	r3
      return;
 80120e8:	e118      	b.n	801231c <PORTx_IRQHandler+0x3c4>
    }

    /* HRSTDISC : hard reset sending has been discarded */
    if (UCPD_SR_HRSTDISC == (_interrupt & UCPD_SR_HRSTDISC))
 80120ea:	68bb      	ldr	r3, [r7, #8]
 80120ec:	f003 0310 	and.w	r3, r3, #16
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d003      	beq.n	80120fc <PORTx_IRQHandler+0x1a4>
    {
      LL_UCPD_ClearFlag_TxHRSTDISC(hucpd);
 80120f4:	68f8      	ldr	r0, [r7, #12]
 80120f6:	f7ff fee8 	bl	8011eca <LL_UCPD_ClearFlag_TxHRSTDISC>
      return;
 80120fa:	e10f      	b.n	801231c <PORTx_IRQHandler+0x3c4>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_HRSTSENT == (_interrupt & UCPD_SR_HRSTSENT))
 80120fc:	68bb      	ldr	r3, [r7, #8]
 80120fe:	f003 0320 	and.w	r3, r3, #32
 8012102:	2b00      	cmp	r3, #0
 8012104:	d010      	beq.n	8012128 <PORTx_IRQHandler+0x1d0>
    {
      /* Answer not expected by the stack */
      LL_UCPD_ClearFlag_TxHRSTSENT(hucpd);
 8012106:	68f8      	ldr	r0, [r7, #12]
 8012108:	f7ff fecf 	bl	8011eaa <LL_UCPD_ClearFlag_TxHRSTSENT>
      Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted(PortNum, USBPD_SOPTYPE_HARD_RESET);
 801210c:	79fa      	ldrb	r2, [r7, #7]
 801210e:	492e      	ldr	r1, [pc, #184]	@ (80121c8 <PORTx_IRQHandler+0x270>)
 8012110:	4613      	mov	r3, r2
 8012112:	011b      	lsls	r3, r3, #4
 8012114:	1a9b      	subs	r3, r3, r2
 8012116:	009b      	lsls	r3, r3, #2
 8012118:	440b      	add	r3, r1
 801211a:	3324      	adds	r3, #36	@ 0x24
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	79fa      	ldrb	r2, [r7, #7]
 8012120:	2105      	movs	r1, #5
 8012122:	4610      	mov	r0, r2
 8012124:	4798      	blx	r3
      return;
 8012126:	e0f9      	b.n	801231c <PORTx_IRQHandler+0x3c4>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_TXUND == (_interrupt & UCPD_SR_TXUND))
 8012128:	68bb      	ldr	r3, [r7, #8]
 801212a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801212e:	2b00      	cmp	r3, #0
 8012130:	d003      	beq.n	801213a <PORTx_IRQHandler+0x1e2>
    {
      /* Nothing to do.
         The port partner checks the message integrity with CRC, so PRL will repeat the sending.
         Can be used for debugging purpose */
      LL_UCPD_ClearFlag_TxUND(hucpd);
 8012132:	68f8      	ldr	r0, [r7, #12]
 8012134:	f7ff fea9 	bl	8011e8a <LL_UCPD_ClearFlag_TxUND>
      return;
 8012138:	e0f0      	b.n	801231c <PORTx_IRQHandler+0x3c4>
    }

    /* RXNE : not needed the stack only perform transfer by DMA */
    /* RXORDDET: not needed so stack will not enabled this interrupt */
    if (UCPD_SR_RXORDDET == (_interrupt & UCPD_SR_RXORDDET))
 801213a:	68bb      	ldr	r3, [r7, #8]
 801213c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012140:	2b00      	cmp	r3, #0
 8012142:	d01e      	beq.n	8012182 <PORTx_IRQHandler+0x22a>
    {
      if (LL_UCPD_RXORDSET_CABLE_RESET == hucpd->RX_ORDSET)
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012148:	2b05      	cmp	r3, #5
 801214a:	d10c      	bne.n	8012166 <PORTx_IRQHandler+0x20e>
      {
        /* Cable reset detected */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 801214c:	79fa      	ldrb	r2, [r7, #7]
 801214e:	491e      	ldr	r1, [pc, #120]	@ (80121c8 <PORTx_IRQHandler+0x270>)
 8012150:	4613      	mov	r3, r2
 8012152:	011b      	lsls	r3, r3, #4
 8012154:	1a9b      	subs	r3, r3, r2
 8012156:	009b      	lsls	r3, r3, #2
 8012158:	440b      	add	r3, r1
 801215a:	331c      	adds	r3, #28
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	79fa      	ldrb	r2, [r7, #7]
 8012160:	2106      	movs	r1, #6
 8012162:	4610      	mov	r0, r2
 8012164:	4798      	blx	r3
      }
      LL_UCPD_ClearFlag_RxOrderSet(hucpd);
 8012166:	68f8      	ldr	r0, [r7, #12]
 8012168:	f7ff fe7f 	bl	8011e6a <LL_UCPD_ClearFlag_RxOrderSet>
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */

      /* Forbid message sending */
      Ports[PortNum].RXStatus = USBPD_TRUE;
 801216c:	79fa      	ldrb	r2, [r7, #7]
 801216e:	4916      	ldr	r1, [pc, #88]	@ (80121c8 <PORTx_IRQHandler+0x270>)
 8012170:	4613      	mov	r3, r2
 8012172:	011b      	lsls	r3, r3, #4
 8012174:	1a9b      	subs	r3, r3, r2
 8012176:	009b      	lsls	r3, r3, #2
 8012178:	440b      	add	r3, r1
 801217a:	3338      	adds	r3, #56	@ 0x38
 801217c:	2201      	movs	r2, #1
 801217e:	701a      	strb	r2, [r3, #0]
      return;
 8012180:	e0cc      	b.n	801231c <PORTx_IRQHandler+0x3c4>
    }

    /* Check RXHRSTDET */
    if (UCPD_SR_RXHRSTDET == (_interrupt & UCPD_SR_RXHRSTDET))
 8012182:	68bb      	ldr	r3, [r7, #8]
 8012184:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8012188:	2b00      	cmp	r3, #0
 801218a:	d010      	beq.n	80121ae <PORTx_IRQHandler+0x256>
    {
      Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_HARD_RESET);
 801218c:	79fa      	ldrb	r2, [r7, #7]
 801218e:	490e      	ldr	r1, [pc, #56]	@ (80121c8 <PORTx_IRQHandler+0x270>)
 8012190:	4613      	mov	r3, r2
 8012192:	011b      	lsls	r3, r3, #4
 8012194:	1a9b      	subs	r3, r3, r2
 8012196:	009b      	lsls	r3, r3, #2
 8012198:	440b      	add	r3, r1
 801219a:	331c      	adds	r3, #28
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	79fa      	ldrb	r2, [r7, #7]
 80121a0:	2105      	movs	r1, #5
 80121a2:	4610      	mov	r0, r2
 80121a4:	4798      	blx	r3
      LL_UCPD_ClearFlag_RxHRST(hucpd);
 80121a6:	68f8      	ldr	r0, [r7, #12]
 80121a8:	f7ff fe4f 	bl	8011e4a <LL_UCPD_ClearFlag_RxHRST>
      return;
 80121ac:	e0b6      	b.n	801231c <PORTx_IRQHandler+0x3c4>
    }

    /* Check RXOVR */
    if (UCPD_SR_RXOVR == (_interrupt & UCPD_SR_RXOVR))
 80121ae:	68bb      	ldr	r3, [r7, #8]
 80121b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d00b      	beq.n	80121d0 <PORTx_IRQHandler+0x278>
    {
      /* Nothing to do, the message will be discarded and port Partner will try sending again. */
      ovrflag = 1;
 80121b8:	4b04      	ldr	r3, [pc, #16]	@ (80121cc <PORTx_IRQHandler+0x274>)
 80121ba:	2201      	movs	r2, #1
 80121bc:	701a      	strb	r2, [r3, #0]
      LL_UCPD_ClearFlag_RxOvr(hucpd);
 80121be:	68f8      	ldr	r0, [r7, #12]
 80121c0:	f7ff fe33 	bl	8011e2a <LL_UCPD_ClearFlag_RxOvr>
      return;
 80121c4:	e0aa      	b.n	801231c <PORTx_IRQHandler+0x3c4>
 80121c6:	bf00      	nop
 80121c8:	200037fc 	.word	0x200037fc
 80121cc:	200037f0 	.word	0x200037f0
    }

    /* Check RXMSGEND an Rx message has been received */
    if (UCPD_SR_RXMSGEND == (_interrupt & UCPD_SR_RXMSGEND))
 80121d0:	68bb      	ldr	r3, [r7, #8]
 80121d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	f000 8085 	beq.w	80122e6 <PORTx_IRQHandler+0x38e>
    {
      Ports[PortNum].RXStatus = USBPD_FALSE;
 80121dc:	79fa      	ldrb	r2, [r7, #7]
 80121de:	4951      	ldr	r1, [pc, #324]	@ (8012324 <PORTx_IRQHandler+0x3cc>)
 80121e0:	4613      	mov	r3, r2
 80121e2:	011b      	lsls	r3, r3, #4
 80121e4:	1a9b      	subs	r3, r3, r2
 80121e6:	009b      	lsls	r3, r3, #2
 80121e8:	440b      	add	r3, r1
 80121ea:	3338      	adds	r3, #56	@ 0x38
 80121ec:	2200      	movs	r2, #0
 80121ee:	701a      	strb	r2, [r3, #0]

      /* For DMA mode, add a check to ensure the number of data received matches
         the number of data received by UCPD */
      LL_UCPD_ClearFlag_RxMsgEnd(hucpd);
 80121f0:	68f8      	ldr	r0, [r7, #12]
 80121f2:	f7ff fe0a 	bl	8011e0a <LL_UCPD_ClearFlag_RxMsgEnd>

      /* Disable DMA */
      CLEAR_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 80121f6:	79fa      	ldrb	r2, [r7, #7]
 80121f8:	494a      	ldr	r1, [pc, #296]	@ (8012324 <PORTx_IRQHandler+0x3cc>)
 80121fa:	4613      	mov	r3, r2
 80121fc:	011b      	lsls	r3, r3, #4
 80121fe:	1a9b      	subs	r3, r3, r2
 8012200:	009b      	lsls	r3, r3, #2
 8012202:	440b      	add	r3, r1
 8012204:	3308      	adds	r3, #8
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	6819      	ldr	r1, [r3, #0]
 801220a:	79fa      	ldrb	r2, [r7, #7]
 801220c:	4845      	ldr	r0, [pc, #276]	@ (8012324 <PORTx_IRQHandler+0x3cc>)
 801220e:	4613      	mov	r3, r2
 8012210:	011b      	lsls	r3, r3, #4
 8012212:	1a9b      	subs	r3, r3, r2
 8012214:	009b      	lsls	r3, r3, #2
 8012216:	4403      	add	r3, r0
 8012218:	3308      	adds	r3, #8
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	f021 0201 	bic.w	r2, r1, #1
 8012220:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmarx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8012222:	bf00      	nop
 8012224:	79fa      	ldrb	r2, [r7, #7]
 8012226:	493f      	ldr	r1, [pc, #252]	@ (8012324 <PORTx_IRQHandler+0x3cc>)
 8012228:	4613      	mov	r3, r2
 801222a:	011b      	lsls	r3, r3, #4
 801222c:	1a9b      	subs	r3, r3, r2
 801222e:	009b      	lsls	r3, r3, #2
 8012230:	440b      	add	r3, r1
 8012232:	3308      	adds	r3, #8
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	f003 0301 	and.w	r3, r3, #1
 801223c:	2b01      	cmp	r3, #1
 801223e:	d0f1      	beq.n	8012224 <PORTx_IRQHandler+0x2cc>

      /* Ready for next transaction */
      WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 8012240:	79fa      	ldrb	r2, [r7, #7]
 8012242:	4938      	ldr	r1, [pc, #224]	@ (8012324 <PORTx_IRQHandler+0x3cc>)
 8012244:	4613      	mov	r3, r2
 8012246:	011b      	lsls	r3, r3, #4
 8012248:	1a9b      	subs	r3, r3, r2
 801224a:	009b      	lsls	r3, r3, #2
 801224c:	440b      	add	r3, r1
 801224e:	3330      	adds	r3, #48	@ 0x30
 8012250:	6818      	ldr	r0, [r3, #0]
 8012252:	79fa      	ldrb	r2, [r7, #7]
 8012254:	4933      	ldr	r1, [pc, #204]	@ (8012324 <PORTx_IRQHandler+0x3cc>)
 8012256:	4613      	mov	r3, r2
 8012258:	011b      	lsls	r3, r3, #4
 801225a:	1a9b      	subs	r3, r3, r2
 801225c:	009b      	lsls	r3, r3, #2
 801225e:	440b      	add	r3, r1
 8012260:	3308      	adds	r3, #8
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	4602      	mov	r2, r0
 8012266:	60da      	str	r2, [r3, #12]
      WRITE_REG(Ports[PortNum].hdmarx->CNDTR, SIZE_MAX_PD_TRANSACTION_UNCHUNK);
 8012268:	79fa      	ldrb	r2, [r7, #7]
 801226a:	492e      	ldr	r1, [pc, #184]	@ (8012324 <PORTx_IRQHandler+0x3cc>)
 801226c:	4613      	mov	r3, r2
 801226e:	011b      	lsls	r3, r3, #4
 8012270:	1a9b      	subs	r3, r3, r2
 8012272:	009b      	lsls	r3, r3, #2
 8012274:	440b      	add	r3, r1
 8012276:	3308      	adds	r3, #8
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	f44f 7284 	mov.w	r2, #264	@ 0x108
 801227e:	605a      	str	r2, [r3, #4]

      /* Enable the DMA */
      SET_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 8012280:	79fa      	ldrb	r2, [r7, #7]
 8012282:	4928      	ldr	r1, [pc, #160]	@ (8012324 <PORTx_IRQHandler+0x3cc>)
 8012284:	4613      	mov	r3, r2
 8012286:	011b      	lsls	r3, r3, #4
 8012288:	1a9b      	subs	r3, r3, r2
 801228a:	009b      	lsls	r3, r3, #2
 801228c:	440b      	add	r3, r1
 801228e:	3308      	adds	r3, #8
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	6819      	ldr	r1, [r3, #0]
 8012294:	79fa      	ldrb	r2, [r7, #7]
 8012296:	4823      	ldr	r0, [pc, #140]	@ (8012324 <PORTx_IRQHandler+0x3cc>)
 8012298:	4613      	mov	r3, r2
 801229a:	011b      	lsls	r3, r3, #4
 801229c:	1a9b      	subs	r3, r3, r2
 801229e:	009b      	lsls	r3, r3, #2
 80122a0:	4403      	add	r3, r0
 80122a2:	3308      	adds	r3, #8
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	f041 0201 	orr.w	r2, r1, #1
 80122aa:	601a      	str	r2, [r3, #0]
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */

      if (((_interrupt & UCPD_SR_RXERR) == 0u) && (ovrflag == 0u))
 80122ac:	68bb      	ldr	r3, [r7, #8]
 80122ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d113      	bne.n	80122de <PORTx_IRQHandler+0x386>
 80122b6:	4b1c      	ldr	r3, [pc, #112]	@ (8012328 <PORTx_IRQHandler+0x3d0>)
 80122b8:	781b      	ldrb	r3, [r3, #0]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d10f      	bne.n	80122de <PORTx_IRQHandler+0x386>
      {
        /* Rx message has been received without error */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed(PortNum, hucpd->RX_ORDSET & UCPD_RX_ORDSET_RXORDSET);
 80122be:	79fa      	ldrb	r2, [r7, #7]
 80122c0:	4918      	ldr	r1, [pc, #96]	@ (8012324 <PORTx_IRQHandler+0x3cc>)
 80122c2:	4613      	mov	r3, r2
 80122c4:	011b      	lsls	r3, r3, #4
 80122c6:	1a9b      	subs	r3, r3, r2
 80122c8:	009b      	lsls	r3, r3, #2
 80122ca:	440b      	add	r3, r1
 80122cc:	3320      	adds	r3, #32
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	68fa      	ldr	r2, [r7, #12]
 80122d2:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80122d4:	f002 0107 	and.w	r1, r2, #7
 80122d8:	79fa      	ldrb	r2, [r7, #7]
 80122da:	4610      	mov	r0, r2
 80122dc:	4798      	blx	r3
      }
      ovrflag = 0;
 80122de:	4b12      	ldr	r3, [pc, #72]	@ (8012328 <PORTx_IRQHandler+0x3d0>)
 80122e0:	2200      	movs	r2, #0
 80122e2:	701a      	strb	r2, [r3, #0]
      return;
 80122e4:	e01a      	b.n	801231c <PORTx_IRQHandler+0x3c4>
    }

    /* Check TYPECEVT1IE/TYPECEVT1IE || check TYPECEVT2IE/TYPECEVT2IE */
    if ((UCPD_SR_TYPECEVT1 == (_interrupt & UCPD_SR_TYPECEVT1))
 80122e6:	68bb      	ldr	r3, [r7, #8]
 80122e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d104      	bne.n	80122fa <PORTx_IRQHandler+0x3a2>
        || (UCPD_SR_TYPECEVT2 == (_interrupt & UCPD_SR_TYPECEVT2)))
 80122f0:	68bb      	ldr	r3, [r7, #8]
 80122f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d010      	beq.n	801231c <PORTx_IRQHandler+0x3c4>
    {
      /* Clear both interrupt */
      LL_UCPD_ClearFlag_TypeCEventCC1(hucpd);
 80122fa:	68f8      	ldr	r0, [r7, #12]
 80122fc:	f7ff fd75 	bl	8011dea <LL_UCPD_ClearFlag_TypeCEventCC1>
      LL_UCPD_ClearFlag_TypeCEventCC2(hucpd);
 8012300:	68f8      	ldr	r0, [r7, #12]
 8012302:	f7ff fd62 	bl	8011dca <LL_UCPD_ClearFlag_TypeCEventCC2>
      Ports[PortNum].USBPD_CAD_WakeUp();
 8012306:	79fa      	ldrb	r2, [r7, #7]
 8012308:	4906      	ldr	r1, [pc, #24]	@ (8012324 <PORTx_IRQHandler+0x3cc>)
 801230a:	4613      	mov	r3, r2
 801230c:	011b      	lsls	r3, r3, #4
 801230e:	1a9b      	subs	r3, r3, r2
 8012310:	009b      	lsls	r3, r3, #2
 8012312:	440b      	add	r3, r1
 8012314:	332c      	adds	r3, #44	@ 0x2c
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	4798      	blx	r3
      /* Wakeup CAD to check the detection event */
      return;
 801231a:	bf00      	nop
        }
      }
    }
#endif /* _FRS */
  }
}
 801231c:	3710      	adds	r7, #16
 801231e:	46bd      	mov	sp, r7
 8012320:	bd80      	pop	{r7, pc}
 8012322:	bf00      	nop
 8012324:	200037fc 	.word	0x200037fc
 8012328:	200037f0 	.word	0x200037f0

0801232c <USBPD_PHY_Init>:
  * @param  SupportedSOP  bit field of the supported SOP
  * @retval status        @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Init(uint8_t PortNum, const USBPD_PHY_Callbacks *pCallbacks, uint8_t *pRxBuffer,
                                   USBPD_PortPowerRole_TypeDef PowerRole, uint32_t SupportedSOP)
{
 801232c:	b480      	push	{r7}
 801232e:	b085      	sub	sp, #20
 8012330:	af00      	add	r7, sp, #0
 8012332:	60b9      	str	r1, [r7, #8]
 8012334:	607a      	str	r2, [r7, #4]
 8012336:	603b      	str	r3, [r7, #0]
 8012338:	4603      	mov	r3, r0
 801233a:	73fb      	strb	r3, [r7, #15]
  (void)PowerRole;

  /* Set all callbacks */
  Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted            = pCallbacks->USBPD_PHY_TxCompleted;
 801233c:	7bfa      	ldrb	r2, [r7, #15]
 801233e:	68bb      	ldr	r3, [r7, #8]
 8012340:	6919      	ldr	r1, [r3, #16]
 8012342:	482d      	ldr	r0, [pc, #180]	@ (80123f8 <USBPD_PHY_Init+0xcc>)
 8012344:	4613      	mov	r3, r2
 8012346:	011b      	lsls	r3, r3, #4
 8012348:	1a9b      	subs	r3, r3, r2
 801234a:	009b      	lsls	r3, r3, #2
 801234c:	4403      	add	r3, r0
 801234e:	3314      	adds	r3, #20
 8012350:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_BistCompleted          = pCallbacks->USBPD_PHY_BistCompleted;
 8012352:	7bfa      	ldrb	r2, [r7, #15]
 8012354:	68bb      	ldr	r3, [r7, #8]
 8012356:	68d9      	ldr	r1, [r3, #12]
 8012358:	4827      	ldr	r0, [pc, #156]	@ (80123f8 <USBPD_PHY_Init+0xcc>)
 801235a:	4613      	mov	r3, r2
 801235c:	011b      	lsls	r3, r3, #4
 801235e:	1a9b      	subs	r3, r3, r2
 8012360:	009b      	lsls	r3, r3, #2
 8012362:	4403      	add	r3, r0
 8012364:	3318      	adds	r3, #24
 8012366:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication     = pCallbacks->USBPD_PHY_ResetIndication;
 8012368:	7bfa      	ldrb	r2, [r7, #15]
 801236a:	68bb      	ldr	r3, [r7, #8]
 801236c:	6859      	ldr	r1, [r3, #4]
 801236e:	4822      	ldr	r0, [pc, #136]	@ (80123f8 <USBPD_PHY_Init+0xcc>)
 8012370:	4613      	mov	r3, r2
 8012372:	011b      	lsls	r3, r3, #4
 8012374:	1a9b      	subs	r3, r3, r2
 8012376:	009b      	lsls	r3, r3, #2
 8012378:	4403      	add	r3, r0
 801237a:	331c      	adds	r3, #28
 801237c:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed           = PHY_Rx_Completed;
 801237e:	7bfa      	ldrb	r2, [r7, #15]
 8012380:	491d      	ldr	r1, [pc, #116]	@ (80123f8 <USBPD_PHY_Init+0xcc>)
 8012382:	4613      	mov	r3, r2
 8012384:	011b      	lsls	r3, r3, #4
 8012386:	1a9b      	subs	r3, r3, r2
 8012388:	009b      	lsls	r3, r3, #2
 801238a:	440b      	add	r3, r1
 801238c:	3320      	adds	r3, #32
 801238e:	4a1b      	ldr	r2, [pc, #108]	@ (80123fc <USBPD_PHY_Init+0xd0>)
 8012390:	601a      	str	r2, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted  = pCallbacks->USBPD_PHY_ResetCompleted;
 8012392:	7bfa      	ldrb	r2, [r7, #15]
 8012394:	68bb      	ldr	r3, [r7, #8]
 8012396:	6899      	ldr	r1, [r3, #8]
 8012398:	4817      	ldr	r0, [pc, #92]	@ (80123f8 <USBPD_PHY_Init+0xcc>)
 801239a:	4613      	mov	r3, r2
 801239c:	011b      	lsls	r3, r3, #4
 801239e:	1a9b      	subs	r3, r3, r2
 80123a0:	009b      	lsls	r3, r3, #2
 80123a2:	4403      	add	r3, r0
 80123a4:	3324      	adds	r3, #36	@ 0x24
 80123a6:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_FRSReception        = pCallbacks->USBPD_PHY_FastRoleSwapReception;
 80123a8:	7bfa      	ldrb	r2, [r7, #15]
 80123aa:	68bb      	ldr	r3, [r7, #8]
 80123ac:	6959      	ldr	r1, [r3, #20]
 80123ae:	4812      	ldr	r0, [pc, #72]	@ (80123f8 <USBPD_PHY_Init+0xcc>)
 80123b0:	4613      	mov	r3, r2
 80123b2:	011b      	lsls	r3, r3, #4
 80123b4:	1a9b      	subs	r3, r3, r2
 80123b6:	009b      	lsls	r3, r3, #2
 80123b8:	4403      	add	r3, r0
 80123ba:	3328      	adds	r3, #40	@ 0x28
 80123bc:	6019      	str	r1, [r3, #0]
  /* Initialize the hardware for the port */
  Ports[PortNum].ptr_RxBuff = pRxBuffer;
 80123be:	7bfa      	ldrb	r2, [r7, #15]
 80123c0:	490d      	ldr	r1, [pc, #52]	@ (80123f8 <USBPD_PHY_Init+0xcc>)
 80123c2:	4613      	mov	r3, r2
 80123c4:	011b      	lsls	r3, r3, #4
 80123c6:	1a9b      	subs	r3, r3, r2
 80123c8:	009b      	lsls	r3, r3, #2
 80123ca:	440b      	add	r3, r1
 80123cc:	3330      	adds	r3, #48	@ 0x30
 80123ce:	687a      	ldr	r2, [r7, #4]
 80123d0:	601a      	str	r2, [r3, #0]

  /* Initialize port related functionalities inside this layer */
  PHY_Ports[PortNum].SupportedSOP = SupportedSOP;
 80123d2:	7bfb      	ldrb	r3, [r7, #15]
 80123d4:	4a0a      	ldr	r2, [pc, #40]	@ (8012400 <USBPD_PHY_Init+0xd4>)
 80123d6:	00db      	lsls	r3, r3, #3
 80123d8:	4413      	add	r3, r2
 80123da:	69ba      	ldr	r2, [r7, #24]
 80123dc:	605a      	str	r2, [r3, #4]
  PHY_Ports[PortNum].USBPD_PHY_MessageReceived = pCallbacks->USBPD_PHY_MessageReceived;
 80123de:	7bfb      	ldrb	r3, [r7, #15]
 80123e0:	68ba      	ldr	r2, [r7, #8]
 80123e2:	6812      	ldr	r2, [r2, #0]
 80123e4:	4906      	ldr	r1, [pc, #24]	@ (8012400 <USBPD_PHY_Init+0xd4>)
 80123e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

  return USBPD_OK;
 80123ea:	2300      	movs	r3, #0
}
 80123ec:	4618      	mov	r0, r3
 80123ee:	3714      	adds	r7, #20
 80123f0:	46bd      	mov	sp, r7
 80123f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f6:	4770      	bx	lr
 80123f8:	200037fc 	.word	0x200037fc
 80123fc:	08012535 	.word	0x08012535
 8012400:	200037f4 	.word	0x200037f4

08012404 <USBPD_PHY_GetRetryTimerValue>:
  * @note   time used to determine when the protocol layer must re-send a message not acknowledged by a goodCRC
  * @param  PortNum    Number of the port.
  * @retval retry counter value in us.
  */
uint16_t USBPD_PHY_GetRetryTimerValue(uint8_t PortNum)
{
 8012404:	b480      	push	{r7}
 8012406:	b083      	sub	sp, #12
 8012408:	af00      	add	r7, sp, #0
 801240a:	4603      	mov	r3, r0
 801240c:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
  return 905u;
 801240e:	f240 3389 	movw	r3, #905	@ 0x389
}
 8012412:	4618      	mov	r0, r3
 8012414:	370c      	adds	r7, #12
 8012416:	46bd      	mov	sp, r7
 8012418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801241c:	4770      	bx	lr

0801241e <USBPD_PHY_GetMinGOODCRCTimerValue>:
  * @note   time used to guarantee the min time of 26us between two PD message.
  * @param  PortNum    Number of the port.
  * @retval value in us.
  */
uint16_t USBPD_PHY_GetMinGOODCRCTimerValue(uint8_t PortNum)
{
 801241e:	b480      	push	{r7}
 8012420:	b083      	sub	sp, #12
 8012422:	af00      	add	r7, sp, #0
 8012424:	4603      	mov	r3, r0
 8012426:	71fb      	strb	r3, [r7, #7]
  return 30u;
 8012428:	231e      	movs	r3, #30
}
 801242a:	4618      	mov	r0, r3
 801242c:	370c      	adds	r7, #12
 801242e:	46bd      	mov	sp, r7
 8012430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012434:	4770      	bx	lr

08012436 <USBPD_PHY_Reset>:
  * @brief  Reset the PHY of a specified port.
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_Reset(uint8_t PortNum)
{
 8012436:	b480      	push	{r7}
 8012438:	b083      	sub	sp, #12
 801243a:	af00      	add	r7, sp, #0
 801243c:	4603      	mov	r3, r0
 801243e:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
  /* Reset PHY layer   */
  /* Reset HW_IF layer */
}
 8012440:	bf00      	nop
 8012442:	370c      	adds	r7, #12
 8012444:	46bd      	mov	sp, r7
 8012446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801244a:	4770      	bx	lr

0801244c <USBPD_PHY_ResetRequest>:
  * @param  PortNum Number of the port
  * @param  Type    Type of reset (hard or cable reset) @ref USBPD_SOPTYPE_HARD_RESET or @ref USBPD_SOPTYPE_CABLE_RESET
  * @retval status  @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_ResetRequest(uint8_t PortNum, USBPD_SOPType_TypeDef Type)
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b082      	sub	sp, #8
 8012450:	af00      	add	r7, sp, #0
 8012452:	4603      	mov	r3, r0
 8012454:	460a      	mov	r2, r1
 8012456:	71fb      	strb	r3, [r7, #7]
 8012458:	4613      	mov	r3, r2
 801245a:	71bb      	strb	r3, [r7, #6]
  /* Send the requested reset */
  return USBPD_PHY_SendMessage(PortNum, Type, NULL, 0);
 801245c:	79b9      	ldrb	r1, [r7, #6]
 801245e:	79f8      	ldrb	r0, [r7, #7]
 8012460:	2300      	movs	r3, #0
 8012462:	2200      	movs	r2, #0
 8012464:	f000 f805 	bl	8012472 <USBPD_PHY_SendMessage>
 8012468:	4603      	mov	r3, r0
}
 801246a:	4618      	mov	r0, r3
 801246c:	3708      	adds	r7, #8
 801246e:	46bd      	mov	sp, r7
 8012470:	bd80      	pop	{r7, pc}

08012472 <USBPD_PHY_SendMessage>:
  * @param  pBuffer   Pointer to the buffer to be transmitted
  * @param  Size      Size of the buffer (bytes)
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_SendMessage(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint16_t Size)
{
 8012472:	b580      	push	{r7, lr}
 8012474:	b082      	sub	sp, #8
 8012476:	af00      	add	r7, sp, #0
 8012478:	603a      	str	r2, [r7, #0]
 801247a:	461a      	mov	r2, r3
 801247c:	4603      	mov	r3, r0
 801247e:	71fb      	strb	r3, [r7, #7]
 8012480:	460b      	mov	r3, r1
 8012482:	71bb      	strb	r3, [r7, #6]
 8012484:	4613      	mov	r3, r2
 8012486:	80bb      	strh	r3, [r7, #4]
  /* Trace to track message */
  return USBPD_HW_IF_SendBuffer(PortNum, Type, pBuffer,  Size);
 8012488:	88bb      	ldrh	r3, [r7, #4]
 801248a:	79b9      	ldrb	r1, [r7, #6]
 801248c:	79f8      	ldrb	r0, [r7, #7]
 801248e:	683a      	ldr	r2, [r7, #0]
 8012490:	f000 fabe 	bl	8012a10 <USBPD_HW_IF_SendBuffer>
 8012494:	4603      	mov	r3, r0
}
 8012496:	4618      	mov	r0, r3
 8012498:	3708      	adds	r7, #8
 801249a:	46bd      	mov	sp, r7
 801249c:	bd80      	pop	{r7, pc}

0801249e <USBPD_PHY_Send_BIST_Pattern>:
  * @brief  Send BIST pattern.
  * @param  PortNum   Number of the port
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Send_BIST_Pattern(uint8_t PortNum)
{
 801249e:	b580      	push	{r7, lr}
 80124a0:	b082      	sub	sp, #8
 80124a2:	af00      	add	r7, sp, #0
 80124a4:	4603      	mov	r3, r0
 80124a6:	71fb      	strb	r3, [r7, #7]
  /* Call the low-level function (HW_IF) to accomplish the BIST Carrier Mode Transmission */
  USBPD_HW_IF_Send_BIST_Pattern(PortNum);
 80124a8:	79fb      	ldrb	r3, [r7, #7]
 80124aa:	4618      	mov	r0, r3
 80124ac:	f000 fbf6 	bl	8012c9c <USBPD_HW_IF_Send_BIST_Pattern>
  return USBPD_OK;
 80124b0:	2300      	movs	r3, #0
}
 80124b2:	4618      	mov	r0, r3
 80124b4:	3708      	adds	r7, #8
 80124b6:	46bd      	mov	sp, r7
 80124b8:	bd80      	pop	{r7, pc}

080124ba <USBPD_PHY_ExitTransmit>:
  * @param  PortNum port number value
  * @param  mode    SOP BIST MODE 2
  * @retval USBPD   status
  */
USBPD_StatusTypeDef USBPD_PHY_ExitTransmit(uint8_t PortNum, USBPD_SOPType_TypeDef mode)
{
 80124ba:	b580      	push	{r7, lr}
 80124bc:	b082      	sub	sp, #8
 80124be:	af00      	add	r7, sp, #0
 80124c0:	4603      	mov	r3, r0
 80124c2:	460a      	mov	r2, r1
 80124c4:	71fb      	strb	r3, [r7, #7]
 80124c6:	4613      	mov	r3, r2
 80124c8:	71bb      	strb	r3, [r7, #6]
  if (USBPD_SOPTYPE_BIST_MODE_2 == mode)
 80124ca:	79bb      	ldrb	r3, [r7, #6]
 80124cc:	2b07      	cmp	r3, #7
 80124ce:	d103      	bne.n	80124d8 <USBPD_PHY_ExitTransmit+0x1e>
  {
    USBPD_HW_IF_StopBISTMode2(PortNum);
 80124d0:	79fb      	ldrb	r3, [r7, #7]
 80124d2:	4618      	mov	r0, r3
 80124d4:	f000 fa64 	bl	80129a0 <USBPD_HW_IF_StopBISTMode2>
  }
  return USBPD_OK;
 80124d8:	2300      	movs	r3, #0
}
 80124da:	4618      	mov	r0, r3
 80124dc:	3708      	adds	r7, #8
 80124de:	46bd      	mov	sp, r7
 80124e0:	bd80      	pop	{r7, pc}

080124e2 <USBPD_PHY_IsResistor_SinkTxOk>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval USBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PHY_IsResistor_SinkTxOk(uint8_t PortNum)
{
 80124e2:	b580      	push	{r7, lr}
 80124e4:	b082      	sub	sp, #8
 80124e6:	af00      	add	r7, sp, #0
 80124e8:	4603      	mov	r3, r0
 80124ea:	71fb      	strb	r3, [r7, #7]
  return USBPD_HW_IF_IsResistor_SinkTxOk(PortNum);
 80124ec:	79fb      	ldrb	r3, [r7, #7]
 80124ee:	4618      	mov	r0, r3
 80124f0:	f000 ff70 	bl	80133d4 <USBPD_HW_IF_IsResistor_SinkTxOk>
 80124f4:	4603      	mov	r3, r0
}
 80124f6:	4618      	mov	r0, r3
 80124f8:	3708      	adds	r7, #8
 80124fa:	46bd      	mov	sp, r7
 80124fc:	bd80      	pop	{r7, pc}

080124fe <USBPD_PHY_EnableRX>:
  * @brief  function used to enable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_EnableRX(uint8_t PortNum)
{
 80124fe:	b580      	push	{r7, lr}
 8012500:	b082      	sub	sp, #8
 8012502:	af00      	add	r7, sp, #0
 8012504:	4603      	mov	r3, r0
 8012506:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_EnableRX(PortNum);
 8012508:	79fb      	ldrb	r3, [r7, #7]
 801250a:	4618      	mov	r0, r3
 801250c:	f000 fd64 	bl	8012fd8 <USBPD_HW_IF_EnableRX>
}
 8012510:	bf00      	nop
 8012512:	3708      	adds	r7, #8
 8012514:	46bd      	mov	sp, r7
 8012516:	bd80      	pop	{r7, pc}

08012518 <USBPD_PHY_DisableRX>:
  * @brief  function used to disable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_DisableRX(uint8_t PortNum)
{
 8012518:	b580      	push	{r7, lr}
 801251a:	b082      	sub	sp, #8
 801251c:	af00      	add	r7, sp, #0
 801251e:	4603      	mov	r3, r0
 8012520:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_DisableRX(PortNum);
 8012522:	79fb      	ldrb	r3, [r7, #7]
 8012524:	4618      	mov	r0, r3
 8012526:	f000 fd6d 	bl	8013004 <USBPD_HW_IF_DisableRX>
}
 801252a:	bf00      	nop
 801252c:	3708      	adds	r7, #8
 801252e:	46bd      	mov	sp, r7
 8012530:	bd80      	pop	{r7, pc}
	...

08012534 <PHY_Rx_Completed>:
  * @param  PortNum   Number of the port.
  * @param  MsgType   SOP Message Type
  * @retval None.
  */
void PHY_Rx_Completed(uint8_t PortNum, uint32_t MsgType)
{
 8012534:	b580      	push	{r7, lr}
 8012536:	b084      	sub	sp, #16
 8012538:	af00      	add	r7, sp, #0
 801253a:	4603      	mov	r3, r0
 801253c:	6039      	str	r1, [r7, #0]
 801253e:	71fb      	strb	r3, [r7, #7]
  const USBPD_SOPType_TypeDef tab_sop_value[] =
 8012540:	4a28      	ldr	r2, [pc, #160]	@ (80125e4 <PHY_Rx_Completed+0xb0>)
 8012542:	f107 0308 	add.w	r3, r7, #8
 8012546:	e892 0003 	ldmia.w	r2, {r0, r1}
 801254a:	6018      	str	r0, [r3, #0]
 801254c:	3304      	adds	r3, #4
 801254e:	8019      	strh	r1, [r3, #0]
    USBPD_SOPTYPE_SOP, USBPD_SOPTYPE_SOP1, USBPD_SOPTYPE_SOP2,
    USBPD_SOPTYPE_SOP1_DEBUG, USBPD_SOPTYPE_SOP2_DEBUG, USBPD_SOPTYPE_CABLE_RESET
  };
  USBPD_SOPType_TypeDef _msgtype;

  _msgtype = tab_sop_value[MsgType];
 8012550:	f107 0208 	add.w	r2, r7, #8
 8012554:	683b      	ldr	r3, [r7, #0]
 8012556:	4413      	add	r3, r2
 8012558:	781b      	ldrb	r3, [r3, #0]
 801255a:	73fb      	strb	r3, [r7, #15]

  /* Check if the message must be forwarded to usbpd stack */
  switch (_msgtype)
 801255c:	7bfb      	ldrb	r3, [r7, #15]
 801255e:	2b04      	cmp	r3, #4
 8012560:	dc02      	bgt.n	8012568 <PHY_Rx_Completed+0x34>
 8012562:	2b00      	cmp	r3, #0
 8012564:	da19      	bge.n	801259a <PHY_Rx_Completed+0x66>
                        2u + (header_rx.b.NumberOfDataObjects * 4u));
      }
#endif /* DEBUG_NOTFWD */
      break;
    default :
      break;
 8012566:	e034      	b.n	80125d2 <PHY_Rx_Completed+0x9e>
  switch (_msgtype)
 8012568:	2b06      	cmp	r3, #6
 801256a:	d132      	bne.n	80125d2 <PHY_Rx_Completed+0x9e>
      if (0x1Eu == (PHY_Ports[PortNum].SupportedSOP & 0x1Eu))
 801256c:	79fb      	ldrb	r3, [r7, #7]
 801256e:	4a1e      	ldr	r2, [pc, #120]	@ (80125e8 <PHY_Rx_Completed+0xb4>)
 8012570:	00db      	lsls	r3, r3, #3
 8012572:	4413      	add	r3, r2
 8012574:	685b      	ldr	r3, [r3, #4]
 8012576:	f003 031e 	and.w	r3, r3, #30
 801257a:	2b1e      	cmp	r3, #30
 801257c:	d12b      	bne.n	80125d6 <PHY_Rx_Completed+0xa2>
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 801257e:	79fa      	ldrb	r2, [r7, #7]
 8012580:	491a      	ldr	r1, [pc, #104]	@ (80125ec <PHY_Rx_Completed+0xb8>)
 8012582:	4613      	mov	r3, r2
 8012584:	011b      	lsls	r3, r3, #4
 8012586:	1a9b      	subs	r3, r3, r2
 8012588:	009b      	lsls	r3, r3, #2
 801258a:	440b      	add	r3, r1
 801258c:	331c      	adds	r3, #28
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	79fa      	ldrb	r2, [r7, #7]
 8012592:	2106      	movs	r1, #6
 8012594:	4610      	mov	r0, r2
 8012596:	4798      	blx	r3
      break;
 8012598:	e01d      	b.n	80125d6 <PHY_Rx_Completed+0xa2>
      if (!((uint8_t)(0x1u << _msgtype) != (PHY_Ports[PortNum].SupportedSOP & (uint8_t)(0x1u << _msgtype))))
 801259a:	7bfb      	ldrb	r3, [r7, #15]
 801259c:	2201      	movs	r2, #1
 801259e:	fa02 f303 	lsl.w	r3, r2, r3
 80125a2:	b2db      	uxtb	r3, r3
 80125a4:	4618      	mov	r0, r3
 80125a6:	79fb      	ldrb	r3, [r7, #7]
 80125a8:	4a0f      	ldr	r2, [pc, #60]	@ (80125e8 <PHY_Rx_Completed+0xb4>)
 80125aa:	00db      	lsls	r3, r3, #3
 80125ac:	4413      	add	r3, r2
 80125ae:	685b      	ldr	r3, [r3, #4]
 80125b0:	7bfa      	ldrb	r2, [r7, #15]
 80125b2:	2101      	movs	r1, #1
 80125b4:	fa01 f202 	lsl.w	r2, r1, r2
 80125b8:	b2d2      	uxtb	r2, r2
 80125ba:	4013      	ands	r3, r2
 80125bc:	4298      	cmp	r0, r3
 80125be:	d10c      	bne.n	80125da <PHY_Rx_Completed+0xa6>
        PHY_Ports[PortNum].USBPD_PHY_MessageReceived(PortNum, _msgtype);
 80125c0:	79fb      	ldrb	r3, [r7, #7]
 80125c2:	4a09      	ldr	r2, [pc, #36]	@ (80125e8 <PHY_Rx_Completed+0xb4>)
 80125c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80125c8:	7bf9      	ldrb	r1, [r7, #15]
 80125ca:	79fa      	ldrb	r2, [r7, #7]
 80125cc:	4610      	mov	r0, r2
 80125ce:	4798      	blx	r3
      break;
 80125d0:	e003      	b.n	80125da <PHY_Rx_Completed+0xa6>
      break;
 80125d2:	bf00      	nop
 80125d4:	e002      	b.n	80125dc <PHY_Rx_Completed+0xa8>
      break;
 80125d6:	bf00      	nop
 80125d8:	e000      	b.n	80125dc <PHY_Rx_Completed+0xa8>
      break;
 80125da:	bf00      	nop
  }
}
 80125dc:	bf00      	nop
 80125de:	3710      	adds	r7, #16
 80125e0:	46bd      	mov	sp, r7
 80125e2:	bd80      	pop	{r7, pc}
 80125e4:	0801e570 	.word	0x0801e570
 80125e8:	200037f4 	.word	0x200037f4
 80125ec:	200037fc 	.word	0x200037fc

080125f0 <LL_AHB1_GRP1_EnableClock>:
{
 80125f0:	b480      	push	{r7}
 80125f2:	b085      	sub	sp, #20
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80125f8:	4b08      	ldr	r3, [pc, #32]	@ (801261c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80125fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80125fc:	4907      	ldr	r1, [pc, #28]	@ (801261c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	4313      	orrs	r3, r2
 8012602:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8012604:	4b05      	ldr	r3, [pc, #20]	@ (801261c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8012606:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	4013      	ands	r3, r2
 801260c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801260e:	68fb      	ldr	r3, [r7, #12]
}
 8012610:	bf00      	nop
 8012612:	3714      	adds	r7, #20
 8012614:	46bd      	mov	sp, r7
 8012616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801261a:	4770      	bx	lr
 801261c:	40021000 	.word	0x40021000

08012620 <LL_APB1_GRP1_EnableClock>:
{
 8012620:	b480      	push	{r7}
 8012622:	b085      	sub	sp, #20
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8012628:	4b08      	ldr	r3, [pc, #32]	@ (801264c <LL_APB1_GRP1_EnableClock+0x2c>)
 801262a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801262c:	4907      	ldr	r1, [pc, #28]	@ (801264c <LL_APB1_GRP1_EnableClock+0x2c>)
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	4313      	orrs	r3, r2
 8012632:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8012634:	4b05      	ldr	r3, [pc, #20]	@ (801264c <LL_APB1_GRP1_EnableClock+0x2c>)
 8012636:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	4013      	ands	r3, r2
 801263c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801263e:	68fb      	ldr	r3, [r7, #12]
}
 8012640:	bf00      	nop
 8012642:	3714      	adds	r7, #20
 8012644:	46bd      	mov	sp, r7
 8012646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264a:	4770      	bx	lr
 801264c:	40021000 	.word	0x40021000

08012650 <LL_UCPD_Enable>:
{
 8012650:	b480      	push	{r7}
 8012652:	b083      	sub	sp, #12
 8012654:	af00      	add	r7, sp, #0
 8012656:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	601a      	str	r2, [r3, #0]
}
 8012664:	bf00      	nop
 8012666:	370c      	adds	r7, #12
 8012668:	46bd      	mov	sp, r7
 801266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801266e:	4770      	bx	lr

08012670 <LL_UCPD_Disable>:
{
 8012670:	b480      	push	{r7}
 8012672:	b083      	sub	sp, #12
 8012674:	af00      	add	r7, sp, #0
 8012676:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	601a      	str	r2, [r3, #0]
}
 8012684:	bf00      	nop
 8012686:	370c      	adds	r7, #12
 8012688:	46bd      	mov	sp, r7
 801268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801268e:	4770      	bx	lr

08012690 <LL_UCPD_TypeCDetectionCC2Enable>:
{
 8012690:	b480      	push	{r7}
 8012692:	b083      	sub	sp, #12
 8012694:	af00      	add	r7, sp, #0
 8012696:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	68db      	ldr	r3, [r3, #12]
 801269c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	60da      	str	r2, [r3, #12]
}
 80126a4:	bf00      	nop
 80126a6:	370c      	adds	r7, #12
 80126a8:	46bd      	mov	sp, r7
 80126aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ae:	4770      	bx	lr

080126b0 <LL_UCPD_TypeCDetectionCC2Disable>:
{
 80126b0:	b480      	push	{r7}
 80126b2:	b083      	sub	sp, #12
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	68db      	ldr	r3, [r3, #12]
 80126bc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	60da      	str	r2, [r3, #12]
}
 80126c4:	bf00      	nop
 80126c6:	370c      	adds	r7, #12
 80126c8:	46bd      	mov	sp, r7
 80126ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ce:	4770      	bx	lr

080126d0 <LL_UCPD_TypeCDetectionCC1Enable>:
{
 80126d0:	b480      	push	{r7}
 80126d2:	b083      	sub	sp, #12
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	68db      	ldr	r3, [r3, #12]
 80126dc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	60da      	str	r2, [r3, #12]
}
 80126e4:	bf00      	nop
 80126e6:	370c      	adds	r7, #12
 80126e8:	46bd      	mov	sp, r7
 80126ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ee:	4770      	bx	lr

080126f0 <LL_UCPD_TypeCDetectionCC1Disable>:
{
 80126f0:	b480      	push	{r7}
 80126f2:	b083      	sub	sp, #12
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	68db      	ldr	r3, [r3, #12]
 80126fc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	60da      	str	r2, [r3, #12]
}
 8012704:	bf00      	nop
 8012706:	370c      	adds	r7, #12
 8012708:	46bd      	mov	sp, r7
 801270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801270e:	4770      	bx	lr

08012710 <LL_UCPD_FRSDetectionEnable>:
{
 8012710:	b480      	push	{r7}
 8012712:	b083      	sub	sp, #12
 8012714:	af00      	add	r7, sp, #0
 8012716:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	68db      	ldr	r3, [r3, #12]
 801271c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	60da      	str	r2, [r3, #12]
}
 8012724:	bf00      	nop
 8012726:	370c      	adds	r7, #12
 8012728:	46bd      	mov	sp, r7
 801272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801272e:	4770      	bx	lr

08012730 <LL_UCPD_FRSDetectionDisable>:
{
 8012730:	b480      	push	{r7}
 8012732:	b083      	sub	sp, #12
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	68db      	ldr	r3, [r3, #12]
 801273c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	60da      	str	r2, [r3, #12]
}
 8012744:	bf00      	nop
 8012746:	370c      	adds	r7, #12
 8012748:	46bd      	mov	sp, r7
 801274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801274e:	4770      	bx	lr

08012750 <LL_UCPD_SetccEnable>:
{
 8012750:	b480      	push	{r7}
 8012752:	b083      	sub	sp, #12
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
 8012758:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	68db      	ldr	r3, [r3, #12]
 801275e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8012762:	683b      	ldr	r3, [r7, #0]
 8012764:	431a      	orrs	r2, r3
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	60da      	str	r2, [r3, #12]
}
 801276a:	bf00      	nop
 801276c:	370c      	adds	r7, #12
 801276e:	46bd      	mov	sp, r7
 8012770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012774:	4770      	bx	lr

08012776 <LL_UCPD_SetSNKRole>:
{
 8012776:	b480      	push	{r7}
 8012778:	b083      	sub	sp, #12
 801277a:	af00      	add	r7, sp, #0
 801277c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	68db      	ldr	r3, [r3, #12]
 8012782:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	60da      	str	r2, [r3, #12]
}
 801278a:	bf00      	nop
 801278c:	370c      	adds	r7, #12
 801278e:	46bd      	mov	sp, r7
 8012790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012794:	4770      	bx	lr

08012796 <LL_UCPD_SetSRCRole>:
{
 8012796:	b480      	push	{r7}
 8012798:	b083      	sub	sp, #12
 801279a:	af00      	add	r7, sp, #0
 801279c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	68db      	ldr	r3, [r3, #12]
 80127a2:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	60da      	str	r2, [r3, #12]
}
 80127aa:	bf00      	nop
 80127ac:	370c      	adds	r7, #12
 80127ae:	46bd      	mov	sp, r7
 80127b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b4:	4770      	bx	lr

080127b6 <LL_UCPD_SetRpResistor>:
{
 80127b6:	b480      	push	{r7}
 80127b8:	b083      	sub	sp, #12
 80127ba:	af00      	add	r7, sp, #0
 80127bc:	6078      	str	r0, [r7, #4]
 80127be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_ANASUBMODE,  Resistor);
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	68db      	ldr	r3, [r3, #12]
 80127c4:	f423 72c0 	bic.w	r2, r3, #384	@ 0x180
 80127c8:	683b      	ldr	r3, [r7, #0]
 80127ca:	431a      	orrs	r2, r3
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	60da      	str	r2, [r3, #12]
}
 80127d0:	bf00      	nop
 80127d2:	370c      	adds	r7, #12
 80127d4:	46bd      	mov	sp, r7
 80127d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127da:	4770      	bx	lr

080127dc <LL_UCPD_SetCCPin>:
{
 80127dc:	b480      	push	{r7}
 80127de:	b083      	sub	sp, #12
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	6078      	str	r0, [r7, #4]
 80127e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_PHYCCSEL,  CCPin);
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	68db      	ldr	r3, [r3, #12]
 80127ea:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80127ee:	683b      	ldr	r3, [r7, #0]
 80127f0:	431a      	orrs	r2, r3
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	60da      	str	r2, [r3, #12]
}
 80127f6:	bf00      	nop
 80127f8:	370c      	adds	r7, #12
 80127fa:	46bd      	mov	sp, r7
 80127fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012800:	4770      	bx	lr

08012802 <LL_UCPD_RxEnable>:
{
 8012802:	b480      	push	{r7}
 8012804:	b083      	sub	sp, #12
 8012806:	af00      	add	r7, sp, #0
 8012808:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	68db      	ldr	r3, [r3, #12]
 801280e:	f043 0220 	orr.w	r2, r3, #32
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	60da      	str	r2, [r3, #12]
}
 8012816:	bf00      	nop
 8012818:	370c      	adds	r7, #12
 801281a:	46bd      	mov	sp, r7
 801281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012820:	4770      	bx	lr

08012822 <LL_UCPD_RxDisable>:
{
 8012822:	b480      	push	{r7}
 8012824:	b083      	sub	sp, #12
 8012826:	af00      	add	r7, sp, #0
 8012828:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	68db      	ldr	r3, [r3, #12]
 801282e:	f023 0220 	bic.w	r2, r3, #32
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	60da      	str	r2, [r3, #12]
}
 8012836:	bf00      	nop
 8012838:	370c      	adds	r7, #12
 801283a:	46bd      	mov	sp, r7
 801283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012840:	4770      	bx	lr

08012842 <LL_UCPD_SetRxMode>:
{
 8012842:	b480      	push	{r7}
 8012844:	b083      	sub	sp, #12
 8012846:	af00      	add	r7, sp, #0
 8012848:	6078      	str	r0, [r7, #4]
 801284a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_RXMODE, RxMode);
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	68db      	ldr	r3, [r3, #12]
 8012850:	f023 0210 	bic.w	r2, r3, #16
 8012854:	683b      	ldr	r3, [r7, #0]
 8012856:	431a      	orrs	r2, r3
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	60da      	str	r2, [r3, #12]
}
 801285c:	bf00      	nop
 801285e:	370c      	adds	r7, #12
 8012860:	46bd      	mov	sp, r7
 8012862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012866:	4770      	bx	lr

08012868 <LL_UCPD_SendHardReset>:
{
 8012868:	b480      	push	{r7}
 801286a:	b083      	sub	sp, #12
 801286c:	af00      	add	r7, sp, #0
 801286e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXHRST);
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	68db      	ldr	r3, [r3, #12]
 8012874:	f043 0208 	orr.w	r2, r3, #8
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	60da      	str	r2, [r3, #12]
}
 801287c:	bf00      	nop
 801287e:	370c      	adds	r7, #12
 8012880:	46bd      	mov	sp, r7
 8012882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012886:	4770      	bx	lr

08012888 <LL_UCPD_SendMessage>:
{
 8012888:	b480      	push	{r7}
 801288a:	b083      	sub	sp, #12
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXSEND);
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	68db      	ldr	r3, [r3, #12]
 8012894:	f043 0204 	orr.w	r2, r3, #4
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	60da      	str	r2, [r3, #12]
}
 801289c:	bf00      	nop
 801289e:	370c      	adds	r7, #12
 80128a0:	46bd      	mov	sp, r7
 80128a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a6:	4770      	bx	lr

080128a8 <LL_UCPD_SetTxMode>:
{
 80128a8:	b480      	push	{r7}
 80128aa:	b083      	sub	sp, #12
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	6078      	str	r0, [r7, #4]
 80128b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_TXMODE, TxMode);
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	68db      	ldr	r3, [r3, #12]
 80128b6:	f023 0203 	bic.w	r2, r3, #3
 80128ba:	683b      	ldr	r3, [r7, #0]
 80128bc:	431a      	orrs	r2, r3
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	60da      	str	r2, [r3, #12]
}
 80128c2:	bf00      	nop
 80128c4:	370c      	adds	r7, #12
 80128c6:	46bd      	mov	sp, r7
 80128c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128cc:	4770      	bx	lr

080128ce <LL_UCPD_RxDMAEnable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMAEnable(UCPD_TypeDef *UCPDx)
{
 80128ce:	b480      	push	{r7}
 80128d0:	b083      	sub	sp, #12
 80128d2:	af00      	add	r7, sp, #0
 80128d4:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	601a      	str	r2, [r3, #0]
}
 80128e2:	bf00      	nop
 80128e4:	370c      	adds	r7, #12
 80128e6:	46bd      	mov	sp, r7
 80128e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ec:	4770      	bx	lr

080128ee <LL_UCPD_RxDMADisable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMADisable(UCPD_TypeDef *UCPDx)
{
 80128ee:	b480      	push	{r7}
 80128f0:	b083      	sub	sp, #12
 80128f2:	af00      	add	r7, sp, #0
 80128f4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	601a      	str	r2, [r3, #0]
}
 8012902:	bf00      	nop
 8012904:	370c      	adds	r7, #12
 8012906:	46bd      	mov	sp, r7
 8012908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801290c:	4770      	bx	lr

0801290e <LL_UCPD_TxDMAEnable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMAEnable(UCPD_TypeDef *UCPDx)
{
 801290e:	b480      	push	{r7}
 8012910:	b083      	sub	sp, #12
 8012912:	af00      	add	r7, sp, #0
 8012914:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	601a      	str	r2, [r3, #0]
}
 8012922:	bf00      	nop
 8012924:	370c      	adds	r7, #12
 8012926:	46bd      	mov	sp, r7
 8012928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801292c:	4770      	bx	lr

0801292e <LL_UCPD_TxDMADisable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMADisable(UCPD_TypeDef *UCPDx)
{
 801292e:	b480      	push	{r7}
 8012930:	b083      	sub	sp, #12
 8012932:	af00      	add	r7, sp, #0
 8012934:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	601a      	str	r2, [r3, #0]
}
 8012942:	bf00      	nop
 8012944:	370c      	adds	r7, #12
 8012946:	46bd      	mov	sp, r7
 8012948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801294c:	4770      	bx	lr

0801294e <LL_UCPD_WriteTxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP1_DEBUG
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP2_DEBUG
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_WriteTxOrderSet(UCPD_TypeDef *UCPDx, uint32_t TxOrderSet)
{
 801294e:	b480      	push	{r7}
 8012950:	b083      	sub	sp, #12
 8012952:	af00      	add	r7, sp, #0
 8012954:	6078      	str	r0, [r7, #4]
 8012956:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_ORDSET, TxOrderSet);
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	683a      	ldr	r2, [r7, #0]
 801295c:	61da      	str	r2, [r3, #28]
}
 801295e:	bf00      	nop
 8012960:	370c      	adds	r7, #12
 8012962:	46bd      	mov	sp, r7
 8012964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012968:	4770      	bx	lr

0801296a <LL_UCPD_WriteTxPaySize>:
  * @param  UCPDx UCPD Instance
  * @param  TxPaySize
  * @retval None.
  */
__STATIC_INLINE void LL_UCPD_WriteTxPaySize(UCPD_TypeDef *UCPDx, uint32_t TxPaySize)
{
 801296a:	b480      	push	{r7}
 801296c:	b083      	sub	sp, #12
 801296e:	af00      	add	r7, sp, #0
 8012970:	6078      	str	r0, [r7, #4]
 8012972:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_PAYSZ, TxPaySize);
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	683a      	ldr	r2, [r7, #0]
 8012978:	621a      	str	r2, [r3, #32]
}
 801297a:	bf00      	nop
 801297c:	370c      	adds	r7, #12
 801297e:	46bd      	mov	sp, r7
 8012980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012984:	4770      	bx	lr

08012986 <USBPD_HW_IF_GlobalHwInit>:

/* Private functions ---------------------------------------------------------*/


void USBPD_HW_IF_GlobalHwInit(void)
{
 8012986:	b580      	push	{r7, lr}
 8012988:	af00      	add	r7, sp, #0
  /* PWR register access (for disabling dead battery feature) */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 801298a:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 801298e:	f7ff fe47 	bl	8012620 <LL_APB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 8012992:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8012996:	f7ff fe2b 	bl	80125f0 <LL_AHB1_GRP1_EnableClock>

}
 801299a:	bf00      	nop
 801299c:	bd80      	pop	{r7, pc}
	...

080129a0 <USBPD_HW_IF_StopBISTMode2>:

#if !defined(USBPDCORE_LIB_NO_PD)
void USBPD_HW_IF_StopBISTMode2(uint8_t PortNum)
{
 80129a0:	b580      	push	{r7, lr}
 80129a2:	b084      	sub	sp, #16
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	4603      	mov	r3, r0
 80129a8:	71fb      	strb	r3, [r7, #7]
  uint32_t  _cr = READ_REG(Ports[PortNum].husbpd->CR) & ~(UCPD_CR_TXMODE | UCPD_CR_TXSEND);
 80129aa:	79fa      	ldrb	r2, [r7, #7]
 80129ac:	4917      	ldr	r1, [pc, #92]	@ (8012a0c <USBPD_HW_IF_StopBISTMode2+0x6c>)
 80129ae:	4613      	mov	r3, r2
 80129b0:	011b      	lsls	r3, r3, #4
 80129b2:	1a9b      	subs	r3, r3, r2
 80129b4:	009b      	lsls	r3, r3, #2
 80129b6:	440b      	add	r3, r1
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	68db      	ldr	r3, [r3, #12]
 80129bc:	f023 0307 	bic.w	r3, r3, #7
 80129c0:	60fb      	str	r3, [r7, #12]

  LL_UCPD_Disable(Ports[PortNum].husbpd);
 80129c2:	79fa      	ldrb	r2, [r7, #7]
 80129c4:	4911      	ldr	r1, [pc, #68]	@ (8012a0c <USBPD_HW_IF_StopBISTMode2+0x6c>)
 80129c6:	4613      	mov	r3, r2
 80129c8:	011b      	lsls	r3, r3, #4
 80129ca:	1a9b      	subs	r3, r3, r2
 80129cc:	009b      	lsls	r3, r3, #2
 80129ce:	440b      	add	r3, r1
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	4618      	mov	r0, r3
 80129d4:	f7ff fe4c 	bl	8012670 <LL_UCPD_Disable>
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 80129d8:	79fa      	ldrb	r2, [r7, #7]
 80129da:	490c      	ldr	r1, [pc, #48]	@ (8012a0c <USBPD_HW_IF_StopBISTMode2+0x6c>)
 80129dc:	4613      	mov	r3, r2
 80129de:	011b      	lsls	r3, r3, #4
 80129e0:	1a9b      	subs	r3, r3, r2
 80129e2:	009b      	lsls	r3, r3, #2
 80129e4:	440b      	add	r3, r1
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	4618      	mov	r0, r3
 80129ea:	f7ff fe31 	bl	8012650 <LL_UCPD_Enable>

  Ports[PortNum].husbpd->CR = _cr;
 80129ee:	79fa      	ldrb	r2, [r7, #7]
 80129f0:	4906      	ldr	r1, [pc, #24]	@ (8012a0c <USBPD_HW_IF_StopBISTMode2+0x6c>)
 80129f2:	4613      	mov	r3, r2
 80129f4:	011b      	lsls	r3, r3, #4
 80129f6:	1a9b      	subs	r3, r3, r2
 80129f8:	009b      	lsls	r3, r3, #2
 80129fa:	440b      	add	r3, r1
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	68fa      	ldr	r2, [r7, #12]
 8012a00:	60da      	str	r2, [r3, #12]
}
 8012a02:	bf00      	nop
 8012a04:	3710      	adds	r7, #16
 8012a06:	46bd      	mov	sp, r7
 8012a08:	bd80      	pop	{r7, pc}
 8012a0a:	bf00      	nop
 8012a0c:	200037fc 	.word	0x200037fc

08012a10 <USBPD_HW_IF_SendBuffer>:

USBPD_StatusTypeDef USBPD_HW_IF_SendBuffer(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint32_t Size)
{
 8012a10:	b580      	push	{r7, lr}
 8012a12:	b08a      	sub	sp, #40	@ 0x28
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	60ba      	str	r2, [r7, #8]
 8012a18:	607b      	str	r3, [r7, #4]
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	73fb      	strb	r3, [r7, #15]
 8012a1e:	460b      	mov	r3, r1
 8012a20:	73bb      	strb	r3, [r7, #14]
  USBPD_StatusTypeDef _status = USBPD_OK;
 8012a22:	2300      	movs	r3, #0
 8012a24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (USBPD_SOPTYPE_HARD_RESET == Type)
 8012a28:	7bbb      	ldrb	r3, [r7, #14]
 8012a2a:	2b05      	cmp	r3, #5
 8012a2c:	d10b      	bne.n	8012a46 <USBPD_HW_IF_SendBuffer+0x36>
  {
    LL_UCPD_SendHardReset(Ports[PortNum].husbpd);
 8012a2e:	7bfa      	ldrb	r2, [r7, #15]
 8012a30:	4996      	ldr	r1, [pc, #600]	@ (8012c8c <USBPD_HW_IF_SendBuffer+0x27c>)
 8012a32:	4613      	mov	r3, r2
 8012a34:	011b      	lsls	r3, r3, #4
 8012a36:	1a9b      	subs	r3, r3, r2
 8012a38:	009b      	lsls	r3, r3, #2
 8012a3a:	440b      	add	r3, r1
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	4618      	mov	r0, r3
 8012a40:	f7ff ff12 	bl	8012868 <LL_UCPD_SendHardReset>
 8012a44:	e11b      	b.n	8012c7e <USBPD_HW_IF_SendBuffer+0x26e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012a46:	f3ef 8310 	mrs	r3, PRIMASK
 8012a4a:	61fb      	str	r3, [r7, #28]
  return(result);
 8012a4c:	69fb      	ldr	r3, [r7, #28]
  }
  else
  {
    PHY_ENTER_CRITICAL_SECTION()
 8012a4e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8012a50:	b672      	cpsid	i
}
 8012a52:	bf00      	nop

    /* If RX is ongoing or if a DMA transfer is active then discard the buffer sending */
    if ((Ports[PortNum].RXStatus == USBPD_TRUE) || ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN))
 8012a54:	7bfa      	ldrb	r2, [r7, #15]
 8012a56:	498d      	ldr	r1, [pc, #564]	@ (8012c8c <USBPD_HW_IF_SendBuffer+0x27c>)
 8012a58:	4613      	mov	r3, r2
 8012a5a:	011b      	lsls	r3, r3, #4
 8012a5c:	1a9b      	subs	r3, r3, r2
 8012a5e:	009b      	lsls	r3, r3, #2
 8012a60:	440b      	add	r3, r1
 8012a62:	3338      	adds	r3, #56	@ 0x38
 8012a64:	781b      	ldrb	r3, [r3, #0]
 8012a66:	b2db      	uxtb	r3, r3
 8012a68:	2b01      	cmp	r3, #1
 8012a6a:	d00d      	beq.n	8012a88 <USBPD_HW_IF_SendBuffer+0x78>
 8012a6c:	7bfa      	ldrb	r2, [r7, #15]
 8012a6e:	4987      	ldr	r1, [pc, #540]	@ (8012c8c <USBPD_HW_IF_SendBuffer+0x27c>)
 8012a70:	4613      	mov	r3, r2
 8012a72:	011b      	lsls	r3, r3, #4
 8012a74:	1a9b      	subs	r3, r3, r2
 8012a76:	009b      	lsls	r3, r3, #2
 8012a78:	440b      	add	r3, r1
 8012a7a:	3304      	adds	r3, #4
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	f003 0301 	and.w	r3, r3, #1
 8012a84:	2b01      	cmp	r3, #1
 8012a86:	d109      	bne.n	8012a9c <USBPD_HW_IF_SendBuffer+0x8c>
 8012a88:	6a3b      	ldr	r3, [r7, #32]
 8012a8a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012a8c:	69bb      	ldr	r3, [r7, #24]
 8012a8e:	f383 8810 	msr	PRIMASK, r3
}
 8012a92:	bf00      	nop
    {
      PHY_LEAVE_CRITICAL_SECTION()
      _status = USBPD_ERROR;
 8012a94:	2302      	movs	r3, #2
 8012a96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012a9a:	e0f0      	b.n	8012c7e <USBPD_HW_IF_SendBuffer+0x26e>
 8012a9c:	6a3b      	ldr	r3, [r7, #32]
 8012a9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012aa0:	697b      	ldr	r3, [r7, #20]
 8012aa2:	f383 8810 	msr	PRIMASK, r3
}
 8012aa6:	bf00      	nop
    }
    else
    {
      PHY_LEAVE_CRITICAL_SECTION()

      switch (Type)
 8012aa8:	7bbb      	ldrb	r3, [r7, #14]
 8012aaa:	2b07      	cmp	r3, #7
 8012aac:	d877      	bhi.n	8012b9e <USBPD_HW_IF_SendBuffer+0x18e>
 8012aae:	a201      	add	r2, pc, #4	@ (adr r2, 8012ab4 <USBPD_HW_IF_SendBuffer+0xa4>)
 8012ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ab4:	08012ad5 	.word	0x08012ad5
 8012ab8:	08012b07 	.word	0x08012b07
 8012abc:	08012b39 	.word	0x08012b39
 8012ac0:	08012b9f 	.word	0x08012b9f
 8012ac4:	08012b9f 	.word	0x08012b9f
 8012ac8:	08012b9f 	.word	0x08012b9f
 8012acc:	08012b6b 	.word	0x08012b6b
 8012ad0:	08012b85 	.word	0x08012b85
      {
        case USBPD_SOPTYPE_SOP :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP);
 8012ad4:	7bfa      	ldrb	r2, [r7, #15]
 8012ad6:	496d      	ldr	r1, [pc, #436]	@ (8012c8c <USBPD_HW_IF_SendBuffer+0x27c>)
 8012ad8:	4613      	mov	r3, r2
 8012ada:	011b      	lsls	r3, r3, #4
 8012adc:	1a9b      	subs	r3, r3, r2
 8012ade:	009b      	lsls	r3, r3, #2
 8012ae0:	440b      	add	r3, r1
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	496a      	ldr	r1, [pc, #424]	@ (8012c90 <USBPD_HW_IF_SendBuffer+0x280>)
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	f7ff ff31 	bl	801294e <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 8012aec:	7bfa      	ldrb	r2, [r7, #15]
 8012aee:	4967      	ldr	r1, [pc, #412]	@ (8012c8c <USBPD_HW_IF_SendBuffer+0x27c>)
 8012af0:	4613      	mov	r3, r2
 8012af2:	011b      	lsls	r3, r3, #4
 8012af4:	1a9b      	subs	r3, r3, r2
 8012af6:	009b      	lsls	r3, r3, #2
 8012af8:	440b      	add	r3, r1
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	2100      	movs	r1, #0
 8012afe:	4618      	mov	r0, r3
 8012b00:	f7ff fed2 	bl	80128a8 <LL_UCPD_SetTxMode>
          break;
 8012b04:	e04f      	b.n	8012ba6 <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_SOP1 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP1);
 8012b06:	7bfa      	ldrb	r2, [r7, #15]
 8012b08:	4960      	ldr	r1, [pc, #384]	@ (8012c8c <USBPD_HW_IF_SendBuffer+0x27c>)
 8012b0a:	4613      	mov	r3, r2
 8012b0c:	011b      	lsls	r3, r3, #4
 8012b0e:	1a9b      	subs	r3, r3, r2
 8012b10:	009b      	lsls	r3, r3, #2
 8012b12:	440b      	add	r3, r1
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	495f      	ldr	r1, [pc, #380]	@ (8012c94 <USBPD_HW_IF_SendBuffer+0x284>)
 8012b18:	4618      	mov	r0, r3
 8012b1a:	f7ff ff18 	bl	801294e <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 8012b1e:	7bfa      	ldrb	r2, [r7, #15]
 8012b20:	495a      	ldr	r1, [pc, #360]	@ (8012c8c <USBPD_HW_IF_SendBuffer+0x27c>)
 8012b22:	4613      	mov	r3, r2
 8012b24:	011b      	lsls	r3, r3, #4
 8012b26:	1a9b      	subs	r3, r3, r2
 8012b28:	009b      	lsls	r3, r3, #2
 8012b2a:	440b      	add	r3, r1
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	2100      	movs	r1, #0
 8012b30:	4618      	mov	r0, r3
 8012b32:	f7ff feb9 	bl	80128a8 <LL_UCPD_SetTxMode>
          break;
 8012b36:	e036      	b.n	8012ba6 <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_SOP2 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP2);
 8012b38:	7bfa      	ldrb	r2, [r7, #15]
 8012b3a:	4954      	ldr	r1, [pc, #336]	@ (8012c8c <USBPD_HW_IF_SendBuffer+0x27c>)
 8012b3c:	4613      	mov	r3, r2
 8012b3e:	011b      	lsls	r3, r3, #4
 8012b40:	1a9b      	subs	r3, r3, r2
 8012b42:	009b      	lsls	r3, r3, #2
 8012b44:	440b      	add	r3, r1
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	4953      	ldr	r1, [pc, #332]	@ (8012c98 <USBPD_HW_IF_SendBuffer+0x288>)
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	f7ff feff 	bl	801294e <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 8012b50:	7bfa      	ldrb	r2, [r7, #15]
 8012b52:	494e      	ldr	r1, [pc, #312]	@ (8012c8c <USBPD_HW_IF_SendBuffer+0x27c>)
 8012b54:	4613      	mov	r3, r2
 8012b56:	011b      	lsls	r3, r3, #4
 8012b58:	1a9b      	subs	r3, r3, r2
 8012b5a:	009b      	lsls	r3, r3, #2
 8012b5c:	440b      	add	r3, r1
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	2100      	movs	r1, #0
 8012b62:	4618      	mov	r0, r3
 8012b64:	f7ff fea0 	bl	80128a8 <LL_UCPD_SetTxMode>
          break;
 8012b68:	e01d      	b.n	8012ba6 <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_CABLE_RESET :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_CABLE_RESET);
 8012b6a:	7bfa      	ldrb	r2, [r7, #15]
 8012b6c:	4947      	ldr	r1, [pc, #284]	@ (8012c8c <USBPD_HW_IF_SendBuffer+0x27c>)
 8012b6e:	4613      	mov	r3, r2
 8012b70:	011b      	lsls	r3, r3, #4
 8012b72:	1a9b      	subs	r3, r3, r2
 8012b74:	009b      	lsls	r3, r3, #2
 8012b76:	440b      	add	r3, r1
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	2101      	movs	r1, #1
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	f7ff fe93 	bl	80128a8 <LL_UCPD_SetTxMode>
          break;
 8012b82:	e010      	b.n	8012ba6 <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_BIST_MODE_2 :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 8012b84:	7bfa      	ldrb	r2, [r7, #15]
 8012b86:	4941      	ldr	r1, [pc, #260]	@ (8012c8c <USBPD_HW_IF_SendBuffer+0x27c>)
 8012b88:	4613      	mov	r3, r2
 8012b8a:	011b      	lsls	r3, r3, #4
 8012b8c:	1a9b      	subs	r3, r3, r2
 8012b8e:	009b      	lsls	r3, r3, #2
 8012b90:	440b      	add	r3, r1
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	2102      	movs	r1, #2
 8012b96:	4618      	mov	r0, r3
 8012b98:	f7ff fe86 	bl	80128a8 <LL_UCPD_SetTxMode>
          break;
 8012b9c:	e003      	b.n	8012ba6 <USBPD_HW_IF_SendBuffer+0x196>
        }
        default :
          _status = USBPD_ERROR;
 8012b9e:	2302      	movs	r3, #2
 8012ba0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 8012ba4:	bf00      	nop
      }

      if (USBPD_OK == _status)
 8012ba6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d167      	bne.n	8012c7e <USBPD_HW_IF_SendBuffer+0x26e>
      {
#if defined(_LOW_POWER)
        UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */
        CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8012bae:	7bfa      	ldrb	r2, [r7, #15]
 8012bb0:	4936      	ldr	r1, [pc, #216]	@ (8012c8c <USBPD_HW_IF_SendBuffer+0x27c>)
 8012bb2:	4613      	mov	r3, r2
 8012bb4:	011b      	lsls	r3, r3, #4
 8012bb6:	1a9b      	subs	r3, r3, r2
 8012bb8:	009b      	lsls	r3, r3, #2
 8012bba:	440b      	add	r3, r1
 8012bbc:	3304      	adds	r3, #4
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	6819      	ldr	r1, [r3, #0]
 8012bc2:	7bfa      	ldrb	r2, [r7, #15]
 8012bc4:	4831      	ldr	r0, [pc, #196]	@ (8012c8c <USBPD_HW_IF_SendBuffer+0x27c>)
 8012bc6:	4613      	mov	r3, r2
 8012bc8:	011b      	lsls	r3, r3, #4
 8012bca:	1a9b      	subs	r3, r3, r2
 8012bcc:	009b      	lsls	r3, r3, #2
 8012bce:	4403      	add	r3, r0
 8012bd0:	3304      	adds	r3, #4
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	f021 0201 	bic.w	r2, r1, #1
 8012bd8:	601a      	str	r2, [r3, #0]
        while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 8012bda:	bf00      	nop
 8012bdc:	7bfa      	ldrb	r2, [r7, #15]
 8012bde:	492b      	ldr	r1, [pc, #172]	@ (8012c8c <USBPD_HW_IF_SendBuffer+0x27c>)
 8012be0:	4613      	mov	r3, r2
 8012be2:	011b      	lsls	r3, r3, #4
 8012be4:	1a9b      	subs	r3, r3, r2
 8012be6:	009b      	lsls	r3, r3, #2
 8012be8:	440b      	add	r3, r1
 8012bea:	3304      	adds	r3, #4
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	f003 0301 	and.w	r3, r3, #1
 8012bf4:	2b01      	cmp	r3, #1
 8012bf6:	d0f1      	beq.n	8012bdc <USBPD_HW_IF_SendBuffer+0x1cc>

        WRITE_REG(Ports[PortNum].hdmatx->CMAR, (uint32_t)pBuffer);
 8012bf8:	7bfa      	ldrb	r2, [r7, #15]
 8012bfa:	4924      	ldr	r1, [pc, #144]	@ (8012c8c <USBPD_HW_IF_SendBuffer+0x27c>)
 8012bfc:	4613      	mov	r3, r2
 8012bfe:	011b      	lsls	r3, r3, #4
 8012c00:	1a9b      	subs	r3, r3, r2
 8012c02:	009b      	lsls	r3, r3, #2
 8012c04:	440b      	add	r3, r1
 8012c06:	3304      	adds	r3, #4
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	68ba      	ldr	r2, [r7, #8]
 8012c0c:	60da      	str	r2, [r3, #12]
        WRITE_REG(Ports[PortNum].hdmatx->CNDTR, Size);
 8012c0e:	7bfa      	ldrb	r2, [r7, #15]
 8012c10:	491e      	ldr	r1, [pc, #120]	@ (8012c8c <USBPD_HW_IF_SendBuffer+0x27c>)
 8012c12:	4613      	mov	r3, r2
 8012c14:	011b      	lsls	r3, r3, #4
 8012c16:	1a9b      	subs	r3, r3, r2
 8012c18:	009b      	lsls	r3, r3, #2
 8012c1a:	440b      	add	r3, r1
 8012c1c:	3304      	adds	r3, #4
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	687a      	ldr	r2, [r7, #4]
 8012c22:	605a      	str	r2, [r3, #4]
        SET_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8012c24:	7bfa      	ldrb	r2, [r7, #15]
 8012c26:	4919      	ldr	r1, [pc, #100]	@ (8012c8c <USBPD_HW_IF_SendBuffer+0x27c>)
 8012c28:	4613      	mov	r3, r2
 8012c2a:	011b      	lsls	r3, r3, #4
 8012c2c:	1a9b      	subs	r3, r3, r2
 8012c2e:	009b      	lsls	r3, r3, #2
 8012c30:	440b      	add	r3, r1
 8012c32:	3304      	adds	r3, #4
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	6819      	ldr	r1, [r3, #0]
 8012c38:	7bfa      	ldrb	r2, [r7, #15]
 8012c3a:	4814      	ldr	r0, [pc, #80]	@ (8012c8c <USBPD_HW_IF_SendBuffer+0x27c>)
 8012c3c:	4613      	mov	r3, r2
 8012c3e:	011b      	lsls	r3, r3, #4
 8012c40:	1a9b      	subs	r3, r3, r2
 8012c42:	009b      	lsls	r3, r3, #2
 8012c44:	4403      	add	r3, r0
 8012c46:	3304      	adds	r3, #4
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	f041 0201 	orr.w	r2, r1, #1
 8012c4e:	601a      	str	r2, [r3, #0]

        LL_UCPD_WriteTxPaySize(Ports[PortNum].husbpd, Size);
 8012c50:	7bfa      	ldrb	r2, [r7, #15]
 8012c52:	490e      	ldr	r1, [pc, #56]	@ (8012c8c <USBPD_HW_IF_SendBuffer+0x27c>)
 8012c54:	4613      	mov	r3, r2
 8012c56:	011b      	lsls	r3, r3, #4
 8012c58:	1a9b      	subs	r3, r3, r2
 8012c5a:	009b      	lsls	r3, r3, #2
 8012c5c:	440b      	add	r3, r1
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	6879      	ldr	r1, [r7, #4]
 8012c62:	4618      	mov	r0, r3
 8012c64:	f7ff fe81 	bl	801296a <LL_UCPD_WriteTxPaySize>
        LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 8012c68:	7bfa      	ldrb	r2, [r7, #15]
 8012c6a:	4908      	ldr	r1, [pc, #32]	@ (8012c8c <USBPD_HW_IF_SendBuffer+0x27c>)
 8012c6c:	4613      	mov	r3, r2
 8012c6e:	011b      	lsls	r3, r3, #4
 8012c70:	1a9b      	subs	r3, r3, r2
 8012c72:	009b      	lsls	r3, r3, #2
 8012c74:	440b      	add	r3, r1
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	4618      	mov	r0, r3
 8012c7a:	f7ff fe05 	bl	8012888 <LL_UCPD_SendMessage>
      }
    }
  }
  return _status;
 8012c7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8012c82:	4618      	mov	r0, r3
 8012c84:	3728      	adds	r7, #40	@ 0x28
 8012c86:	46bd      	mov	sp, r7
 8012c88:	bd80      	pop	{r7, pc}
 8012c8a:	bf00      	nop
 8012c8c:	200037fc 	.word	0x200037fc
 8012c90:	0008e318 	.word	0x0008e318
 8012c94:	00031b18 	.word	0x00031b18
 8012c98:	000360d8 	.word	0x000360d8

08012c9c <USBPD_HW_IF_Send_BIST_Pattern>:

void USBPD_HW_IF_Send_BIST_Pattern(uint8_t PortNum)
{
 8012c9c:	b580      	push	{r7, lr}
 8012c9e:	b082      	sub	sp, #8
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	4603      	mov	r3, r0
 8012ca4:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 8012ca6:	79fa      	ldrb	r2, [r7, #7]
 8012ca8:	490c      	ldr	r1, [pc, #48]	@ (8012cdc <USBPD_HW_IF_Send_BIST_Pattern+0x40>)
 8012caa:	4613      	mov	r3, r2
 8012cac:	011b      	lsls	r3, r3, #4
 8012cae:	1a9b      	subs	r3, r3, r2
 8012cb0:	009b      	lsls	r3, r3, #2
 8012cb2:	440b      	add	r3, r1
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	2102      	movs	r1, #2
 8012cb8:	4618      	mov	r0, r3
 8012cba:	f7ff fdf5 	bl	80128a8 <LL_UCPD_SetTxMode>
  LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 8012cbe:	79fa      	ldrb	r2, [r7, #7]
 8012cc0:	4906      	ldr	r1, [pc, #24]	@ (8012cdc <USBPD_HW_IF_Send_BIST_Pattern+0x40>)
 8012cc2:	4613      	mov	r3, r2
 8012cc4:	011b      	lsls	r3, r3, #4
 8012cc6:	1a9b      	subs	r3, r3, r2
 8012cc8:	009b      	lsls	r3, r3, #2
 8012cca:	440b      	add	r3, r1
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	4618      	mov	r0, r3
 8012cd0:	f7ff fdda 	bl	8012888 <LL_UCPD_SendMessage>
}
 8012cd4:	bf00      	nop
 8012cd6:	3708      	adds	r7, #8
 8012cd8:	46bd      	mov	sp, r7
 8012cda:	bd80      	pop	{r7, pc}
 8012cdc:	200037fc 	.word	0x200037fc

08012ce0 <USBPDM1_AssertRp>:
  * @brief  Assert Rp resistors
  * @param  PortNum Port
  * @retval None
  */
void USBPDM1_AssertRp(uint8_t PortNum)
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	b082      	sub	sp, #8
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	4603      	mov	r3, r0
 8012ce8:	71fb      	strb	r3, [r7, #7]
  switch (Ports[PortNum].params->RpResistor)
 8012cea:	79fa      	ldrb	r2, [r7, #7]
 8012cec:	4946      	ldr	r1, [pc, #280]	@ (8012e08 <USBPDM1_AssertRp+0x128>)
 8012cee:	4613      	mov	r3, r2
 8012cf0:	011b      	lsls	r3, r3, #4
 8012cf2:	1a9b      	subs	r3, r3, r2
 8012cf4:	009b      	lsls	r3, r3, #2
 8012cf6:	440b      	add	r3, r1
 8012cf8:	3310      	adds	r3, #16
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	789b      	ldrb	r3, [r3, #2]
 8012cfe:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8012d02:	b2db      	uxtb	r3, r3
 8012d04:	2b02      	cmp	r3, #2
 8012d06:	d021      	beq.n	8012d4c <USBPDM1_AssertRp+0x6c>
 8012d08:	2b02      	cmp	r3, #2
 8012d0a:	dc2d      	bgt.n	8012d68 <USBPDM1_AssertRp+0x88>
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d002      	beq.n	8012d16 <USBPDM1_AssertRp+0x36>
 8012d10:	2b01      	cmp	r3, #1
 8012d12:	d00d      	beq.n	8012d30 <USBPDM1_AssertRp+0x50>
      break;
    case vRp_3_0A:
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
      break;
    default:
      break;
 8012d14:	e028      	b.n	8012d68 <USBPDM1_AssertRp+0x88>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_DEFAULT);
 8012d16:	79fa      	ldrb	r2, [r7, #7]
 8012d18:	493b      	ldr	r1, [pc, #236]	@ (8012e08 <USBPDM1_AssertRp+0x128>)
 8012d1a:	4613      	mov	r3, r2
 8012d1c:	011b      	lsls	r3, r3, #4
 8012d1e:	1a9b      	subs	r3, r3, r2
 8012d20:	009b      	lsls	r3, r3, #2
 8012d22:	440b      	add	r3, r1
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	2180      	movs	r1, #128	@ 0x80
 8012d28:	4618      	mov	r0, r3
 8012d2a:	f7ff fd44 	bl	80127b6 <LL_UCPD_SetRpResistor>
      break;
 8012d2e:	e01c      	b.n	8012d6a <USBPDM1_AssertRp+0x8a>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 8012d30:	79fa      	ldrb	r2, [r7, #7]
 8012d32:	4935      	ldr	r1, [pc, #212]	@ (8012e08 <USBPDM1_AssertRp+0x128>)
 8012d34:	4613      	mov	r3, r2
 8012d36:	011b      	lsls	r3, r3, #4
 8012d38:	1a9b      	subs	r3, r3, r2
 8012d3a:	009b      	lsls	r3, r3, #2
 8012d3c:	440b      	add	r3, r1
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012d44:	4618      	mov	r0, r3
 8012d46:	f7ff fd36 	bl	80127b6 <LL_UCPD_SetRpResistor>
      break;
 8012d4a:	e00e      	b.n	8012d6a <USBPDM1_AssertRp+0x8a>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 8012d4c:	79fa      	ldrb	r2, [r7, #7]
 8012d4e:	492e      	ldr	r1, [pc, #184]	@ (8012e08 <USBPDM1_AssertRp+0x128>)
 8012d50:	4613      	mov	r3, r2
 8012d52:	011b      	lsls	r3, r3, #4
 8012d54:	1a9b      	subs	r3, r3, r2
 8012d56:	009b      	lsls	r3, r3, #2
 8012d58:	440b      	add	r3, r1
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8012d60:	4618      	mov	r0, r3
 8012d62:	f7ff fd28 	bl	80127b6 <LL_UCPD_SetRpResistor>
      break;
 8012d66:	e000      	b.n	8012d6a <USBPDM1_AssertRp+0x8a>
      break;
 8012d68:	bf00      	nop
  }
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8012d6a:	79fa      	ldrb	r2, [r7, #7]
 8012d6c:	4926      	ldr	r1, [pc, #152]	@ (8012e08 <USBPDM1_AssertRp+0x128>)
 8012d6e:	4613      	mov	r3, r2
 8012d70:	011b      	lsls	r3, r3, #4
 8012d72:	1a9b      	subs	r3, r3, r2
 8012d74:	009b      	lsls	r3, r3, #2
 8012d76:	440b      	add	r3, r1
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	2100      	movs	r1, #0
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	f7ff fce7 	bl	8012750 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 8012d82:	79fa      	ldrb	r2, [r7, #7]
 8012d84:	4920      	ldr	r1, [pc, #128]	@ (8012e08 <USBPDM1_AssertRp+0x128>)
 8012d86:	4613      	mov	r3, r2
 8012d88:	011b      	lsls	r3, r3, #4
 8012d8a:	1a9b      	subs	r3, r3, r2
 8012d8c:	009b      	lsls	r3, r3, #2
 8012d8e:	440b      	add	r3, r1
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	4618      	mov	r0, r3
 8012d94:	f7ff fcff 	bl	8012796 <LL_UCPD_SetSRCRole>
  if (CCNONE == Ports[PortNum].CCx)
 8012d98:	79fa      	ldrb	r2, [r7, #7]
 8012d9a:	491b      	ldr	r1, [pc, #108]	@ (8012e08 <USBPDM1_AssertRp+0x128>)
 8012d9c:	4613      	mov	r3, r2
 8012d9e:	011b      	lsls	r3, r3, #4
 8012da0:	1a9b      	subs	r3, r3, r2
 8012da2:	009b      	lsls	r3, r3, #2
 8012da4:	440b      	add	r3, r1
 8012da6:	3334      	adds	r3, #52	@ 0x34
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d10d      	bne.n	8012dca <USBPDM1_AssertRp+0xea>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8012dae:	79fa      	ldrb	r2, [r7, #7]
 8012db0:	4915      	ldr	r1, [pc, #84]	@ (8012e08 <USBPDM1_AssertRp+0x128>)
 8012db2:	4613      	mov	r3, r2
 8012db4:	011b      	lsls	r3, r3, #4
 8012db6:	1a9b      	subs	r3, r3, r2
 8012db8:	009b      	lsls	r3, r3, #2
 8012dba:	440b      	add	r3, r1
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	f7ff fcc4 	bl	8012750 <LL_UCPD_SetccEnable>
  }

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SOURCE);
#endif /* TCPP0203_SUPPORT */
}
 8012dc8:	e01a      	b.n	8012e00 <USBPDM1_AssertRp+0x120>
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8012dca:	79fa      	ldrb	r2, [r7, #7]
 8012dcc:	490e      	ldr	r1, [pc, #56]	@ (8012e08 <USBPDM1_AssertRp+0x128>)
 8012dce:	4613      	mov	r3, r2
 8012dd0:	011b      	lsls	r3, r3, #4
 8012dd2:	1a9b      	subs	r3, r3, r2
 8012dd4:	009b      	lsls	r3, r3, #2
 8012dd6:	440b      	add	r3, r1
 8012dd8:	6818      	ldr	r0, [r3, #0]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 8012dda:	79fa      	ldrb	r2, [r7, #7]
 8012ddc:	490a      	ldr	r1, [pc, #40]	@ (8012e08 <USBPDM1_AssertRp+0x128>)
 8012dde:	4613      	mov	r3, r2
 8012de0:	011b      	lsls	r3, r3, #4
 8012de2:	1a9b      	subs	r3, r3, r2
 8012de4:	009b      	lsls	r3, r3, #2
 8012de6:	440b      	add	r3, r1
 8012de8:	3334      	adds	r3, #52	@ 0x34
 8012dea:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8012dec:	2b01      	cmp	r3, #1
 8012dee:	d102      	bne.n	8012df6 <USBPDM1_AssertRp+0x116>
 8012df0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012df4:	e001      	b.n	8012dfa <USBPDM1_AssertRp+0x11a>
 8012df6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012dfa:	4619      	mov	r1, r3
 8012dfc:	f7ff fca8 	bl	8012750 <LL_UCPD_SetccEnable>
}
 8012e00:	bf00      	nop
 8012e02:	3708      	adds	r7, #8
 8012e04:	46bd      	mov	sp, r7
 8012e06:	bd80      	pop	{r7, pc}
 8012e08:	200037fc 	.word	0x200037fc

08012e0c <USBPDM1_DeAssertRp>:
  * @brief  De-assert Rp resistors
  * @param  PortNum Port
  * @retval None
  */
void USBPDM1_DeAssertRp(uint8_t PortNum)
{
 8012e0c:	b480      	push	{r7}
 8012e0e:	b083      	sub	sp, #12
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	4603      	mov	r3, r0
 8012e14:	71fb      	strb	r3, [r7, #7]
  /* Not needed on STM32G4xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 8012e16:	bf00      	nop
 8012e18:	370c      	adds	r7, #12
 8012e1a:	46bd      	mov	sp, r7
 8012e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e20:	4770      	bx	lr
	...

08012e24 <USBPDM1_AssertRd>:
  * @brief  Assert Rd resistors
  * @param  PortNum Port
  * @retval None
  */
void USBPDM1_AssertRd(uint8_t PortNum)
{
 8012e24:	b580      	push	{r7, lr}
 8012e26:	b082      	sub	sp, #8
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	4603      	mov	r3, r0
 8012e2c:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_TypeCDetectionCC2Disable(Ports[PortNum].husbpd);
 8012e2e:	79fa      	ldrb	r2, [r7, #7]
 8012e30:	493e      	ldr	r1, [pc, #248]	@ (8012f2c <USBPDM1_AssertRd+0x108>)
 8012e32:	4613      	mov	r3, r2
 8012e34:	011b      	lsls	r3, r3, #4
 8012e36:	1a9b      	subs	r3, r3, r2
 8012e38:	009b      	lsls	r3, r3, #2
 8012e3a:	440b      	add	r3, r1
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	4618      	mov	r0, r3
 8012e40:	f7ff fc36 	bl	80126b0 <LL_UCPD_TypeCDetectionCC2Disable>
  LL_UCPD_TypeCDetectionCC1Disable(Ports[PortNum].husbpd);
 8012e44:	79fa      	ldrb	r2, [r7, #7]
 8012e46:	4939      	ldr	r1, [pc, #228]	@ (8012f2c <USBPDM1_AssertRd+0x108>)
 8012e48:	4613      	mov	r3, r2
 8012e4a:	011b      	lsls	r3, r3, #4
 8012e4c:	1a9b      	subs	r3, r3, r2
 8012e4e:	009b      	lsls	r3, r3, #2
 8012e50:	440b      	add	r3, r1
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	4618      	mov	r0, r3
 8012e56:	f7ff fc4b 	bl	80126f0 <LL_UCPD_TypeCDetectionCC1Disable>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8012e5a:	79fa      	ldrb	r2, [r7, #7]
 8012e5c:	4933      	ldr	r1, [pc, #204]	@ (8012f2c <USBPDM1_AssertRd+0x108>)
 8012e5e:	4613      	mov	r3, r2
 8012e60:	011b      	lsls	r3, r3, #4
 8012e62:	1a9b      	subs	r3, r3, r2
 8012e64:	009b      	lsls	r3, r3, #2
 8012e66:	440b      	add	r3, r1
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	2100      	movs	r1, #0
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	f7ff fc6f 	bl	8012750 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSNKRole(Ports[PortNum].husbpd);
 8012e72:	79fa      	ldrb	r2, [r7, #7]
 8012e74:	492d      	ldr	r1, [pc, #180]	@ (8012f2c <USBPDM1_AssertRd+0x108>)
 8012e76:	4613      	mov	r3, r2
 8012e78:	011b      	lsls	r3, r3, #4
 8012e7a:	1a9b      	subs	r3, r3, r2
 8012e7c:	009b      	lsls	r3, r3, #2
 8012e7e:	440b      	add	r3, r1
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	4618      	mov	r0, r3
 8012e84:	f7ff fc77 	bl	8012776 <LL_UCPD_SetSNKRole>
  if (CCNONE == Ports[PortNum].CCx)
 8012e88:	79fa      	ldrb	r2, [r7, #7]
 8012e8a:	4928      	ldr	r1, [pc, #160]	@ (8012f2c <USBPDM1_AssertRd+0x108>)
 8012e8c:	4613      	mov	r3, r2
 8012e8e:	011b      	lsls	r3, r3, #4
 8012e90:	1a9b      	subs	r3, r3, r2
 8012e92:	009b      	lsls	r3, r3, #2
 8012e94:	440b      	add	r3, r1
 8012e96:	3334      	adds	r3, #52	@ 0x34
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d10d      	bne.n	8012eba <USBPDM1_AssertRd+0x96>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8012e9e:	79fa      	ldrb	r2, [r7, #7]
 8012ea0:	4922      	ldr	r1, [pc, #136]	@ (8012f2c <USBPDM1_AssertRd+0x108>)
 8012ea2:	4613      	mov	r3, r2
 8012ea4:	011b      	lsls	r3, r3, #4
 8012ea6:	1a9b      	subs	r3, r3, r2
 8012ea8:	009b      	lsls	r3, r3, #2
 8012eaa:	440b      	add	r3, r1
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	f7ff fc4c 	bl	8012750 <LL_UCPD_SetccEnable>
 8012eb8:	e01a      	b.n	8012ef0 <USBPDM1_AssertRd+0xcc>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8012eba:	79fa      	ldrb	r2, [r7, #7]
 8012ebc:	491b      	ldr	r1, [pc, #108]	@ (8012f2c <USBPDM1_AssertRd+0x108>)
 8012ebe:	4613      	mov	r3, r2
 8012ec0:	011b      	lsls	r3, r3, #4
 8012ec2:	1a9b      	subs	r3, r3, r2
 8012ec4:	009b      	lsls	r3, r3, #2
 8012ec6:	440b      	add	r3, r1
 8012ec8:	6818      	ldr	r0, [r3, #0]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 8012eca:	79fa      	ldrb	r2, [r7, #7]
 8012ecc:	4917      	ldr	r1, [pc, #92]	@ (8012f2c <USBPDM1_AssertRd+0x108>)
 8012ece:	4613      	mov	r3, r2
 8012ed0:	011b      	lsls	r3, r3, #4
 8012ed2:	1a9b      	subs	r3, r3, r2
 8012ed4:	009b      	lsls	r3, r3, #2
 8012ed6:	440b      	add	r3, r1
 8012ed8:	3334      	adds	r3, #52	@ 0x34
 8012eda:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8012edc:	2b01      	cmp	r3, #1
 8012ede:	d102      	bne.n	8012ee6 <USBPDM1_AssertRd+0xc2>
 8012ee0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012ee4:	e001      	b.n	8012eea <USBPDM1_AssertRd+0xc6>
 8012ee6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012eea:	4619      	mov	r1, r3
 8012eec:	f7ff fc30 	bl	8012750 <LL_UCPD_SetccEnable>
  }

  HAL_Delay(1);
 8012ef0:	2001      	movs	r0, #1
 8012ef2:	f7f3 fc61 	bl	80067b8 <HAL_Delay>

#ifndef _LOW_POWER
  LL_UCPD_TypeCDetectionCC2Enable(Ports[PortNum].husbpd);
 8012ef6:	79fa      	ldrb	r2, [r7, #7]
 8012ef8:	490c      	ldr	r1, [pc, #48]	@ (8012f2c <USBPDM1_AssertRd+0x108>)
 8012efa:	4613      	mov	r3, r2
 8012efc:	011b      	lsls	r3, r3, #4
 8012efe:	1a9b      	subs	r3, r3, r2
 8012f00:	009b      	lsls	r3, r3, #2
 8012f02:	440b      	add	r3, r1
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	4618      	mov	r0, r3
 8012f08:	f7ff fbc2 	bl	8012690 <LL_UCPD_TypeCDetectionCC2Enable>
  LL_UCPD_TypeCDetectionCC1Enable(Ports[PortNum].husbpd);
 8012f0c:	79fa      	ldrb	r2, [r7, #7]
 8012f0e:	4907      	ldr	r1, [pc, #28]	@ (8012f2c <USBPDM1_AssertRd+0x108>)
 8012f10:	4613      	mov	r3, r2
 8012f12:	011b      	lsls	r3, r3, #4
 8012f14:	1a9b      	subs	r3, r3, r2
 8012f16:	009b      	lsls	r3, r3, #2
 8012f18:	440b      	add	r3, r1
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	f7ff fbd7 	bl	80126d0 <LL_UCPD_TypeCDetectionCC1Enable>
#endif /* _LOW_POWER */

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SINK);
#endif /* TCPP0203_SUPPORT */
}
 8012f22:	bf00      	nop
 8012f24:	3708      	adds	r7, #8
 8012f26:	46bd      	mov	sp, r7
 8012f28:	bd80      	pop	{r7, pc}
 8012f2a:	bf00      	nop
 8012f2c:	200037fc 	.word	0x200037fc

08012f30 <USBPDM1_DeAssertRd>:
  * @brief  Assert Rd resistors
  * @param  PortNum Port
  * @retval none
  */
void USBPDM1_DeAssertRd(uint8_t PortNum)
{
 8012f30:	b480      	push	{r7}
 8012f32:	b083      	sub	sp, #12
 8012f34:	af00      	add	r7, sp, #0
 8012f36:	4603      	mov	r3, r0
 8012f38:	71fb      	strb	r3, [r7, #7]
  /* Not needed on STM32G4xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 8012f3a:	bf00      	nop
 8012f3c:	370c      	adds	r7, #12
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f44:	4770      	bx	lr
	...

08012f48 <USBPDM1_EnterErrorRecovery>:
  * @brief  Enter error recovery
  * @param  PortNum Port
  * @retval None
  */
void USBPDM1_EnterErrorRecovery(uint8_t PortNum)
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b082      	sub	sp, #8
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	4603      	mov	r3, r0
 8012f50:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 8012f52:	79fa      	ldrb	r2, [r7, #7]
 8012f54:	491f      	ldr	r1, [pc, #124]	@ (8012fd4 <USBPDM1_EnterErrorRecovery+0x8c>)
 8012f56:	4613      	mov	r3, r2
 8012f58:	011b      	lsls	r3, r3, #4
 8012f5a:	1a9b      	subs	r3, r3, r2
 8012f5c:	009b      	lsls	r3, r3, #2
 8012f5e:	440b      	add	r3, r1
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	4618      	mov	r0, r3
 8012f64:	f7ff fc17 	bl	8012796 <LL_UCPD_SetSRCRole>
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_NONE);
 8012f68:	79fa      	ldrb	r2, [r7, #7]
 8012f6a:	491a      	ldr	r1, [pc, #104]	@ (8012fd4 <USBPDM1_EnterErrorRecovery+0x8c>)
 8012f6c:	4613      	mov	r3, r2
 8012f6e:	011b      	lsls	r3, r3, #4
 8012f70:	1a9b      	subs	r3, r3, r2
 8012f72:	009b      	lsls	r3, r3, #2
 8012f74:	440b      	add	r3, r1
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	2100      	movs	r1, #0
 8012f7a:	4618      	mov	r0, r3
 8012f7c:	f7ff fc1b 	bl	80127b6 <LL_UCPD_SetRpResistor>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8012f80:	79fa      	ldrb	r2, [r7, #7]
 8012f82:	4914      	ldr	r1, [pc, #80]	@ (8012fd4 <USBPDM1_EnterErrorRecovery+0x8c>)
 8012f84:	4613      	mov	r3, r2
 8012f86:	011b      	lsls	r3, r3, #4
 8012f88:	1a9b      	subs	r3, r3, r2
 8012f8a:	009b      	lsls	r3, r3, #2
 8012f8c:	440b      	add	r3, r1
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	4618      	mov	r0, r3
 8012f92:	f7ff fc46 	bl	8012822 <LL_UCPD_RxDisable>

#if !defined(USBPDCORE_LIB_NO_PD)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 8012f96:	79fa      	ldrb	r2, [r7, #7]
 8012f98:	490e      	ldr	r1, [pc, #56]	@ (8012fd4 <USBPDM1_EnterErrorRecovery+0x8c>)
 8012f9a:	4613      	mov	r3, r2
 8012f9c:	011b      	lsls	r3, r3, #4
 8012f9e:	1a9b      	subs	r3, r3, r2
 8012fa0:	009b      	lsls	r3, r3, #2
 8012fa2:	440b      	add	r3, r1
 8012fa4:	330c      	adds	r3, #12
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	7a1b      	ldrb	r3, [r3, #8]
 8012faa:	f003 0302 	and.w	r3, r3, #2
 8012fae:	b2db      	uxtb	r3, r3
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d00a      	beq.n	8012fca <USBPDM1_EnterErrorRecovery+0x82>
  {
    /* Set GPIO to disallow the FRS RX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 8012fb4:	79fa      	ldrb	r2, [r7, #7]
 8012fb6:	4907      	ldr	r1, [pc, #28]	@ (8012fd4 <USBPDM1_EnterErrorRecovery+0x8c>)
 8012fb8:	4613      	mov	r3, r2
 8012fba:	011b      	lsls	r3, r3, #4
 8012fbc:	1a9b      	subs	r3, r3, r2
 8012fbe:	009b      	lsls	r3, r3, #2
 8012fc0:	440b      	add	r3, r1
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	f7ff fbb3 	bl	8012730 <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPDCORE_LIB_NO_PD */
}
 8012fca:	bf00      	nop
 8012fcc:	3708      	adds	r7, #8
 8012fce:	46bd      	mov	sp, r7
 8012fd0:	bd80      	pop	{r7, pc}
 8012fd2:	bf00      	nop
 8012fd4:	200037fc 	.word	0x200037fc

08012fd8 <USBPD_HW_IF_EnableRX>:
  * @brief  Enable RX
  * @param  PortNum Port
  * @retval None
  */
void USBPD_HW_IF_EnableRX(uint8_t PortNum)
{
 8012fd8:	b580      	push	{r7, lr}
 8012fda:	b082      	sub	sp, #8
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	4603      	mov	r3, r0
 8012fe0:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_RxEnable(Ports[PortNum].husbpd);
 8012fe2:	79fa      	ldrb	r2, [r7, #7]
 8012fe4:	4906      	ldr	r1, [pc, #24]	@ (8013000 <USBPD_HW_IF_EnableRX+0x28>)
 8012fe6:	4613      	mov	r3, r2
 8012fe8:	011b      	lsls	r3, r3, #4
 8012fea:	1a9b      	subs	r3, r3, r2
 8012fec:	009b      	lsls	r3, r3, #2
 8012fee:	440b      	add	r3, r1
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	f7ff fc05 	bl	8012802 <LL_UCPD_RxEnable>
}
 8012ff8:	bf00      	nop
 8012ffa:	3708      	adds	r7, #8
 8012ffc:	46bd      	mov	sp, r7
 8012ffe:	bd80      	pop	{r7, pc}
 8013000:	200037fc 	.word	0x200037fc

08013004 <USBPD_HW_IF_DisableRX>:
  * @brief  Disable RX
  * @param  PortNum Port
  * @retval None
  */
void USBPD_HW_IF_DisableRX(uint8_t PortNum)
{
 8013004:	b580      	push	{r7, lr}
 8013006:	b082      	sub	sp, #8
 8013008:	af00      	add	r7, sp, #0
 801300a:	4603      	mov	r3, r0
 801300c:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 801300e:	79fa      	ldrb	r2, [r7, #7]
 8013010:	4906      	ldr	r1, [pc, #24]	@ (801302c <USBPD_HW_IF_DisableRX+0x28>)
 8013012:	4613      	mov	r3, r2
 8013014:	011b      	lsls	r3, r3, #4
 8013016:	1a9b      	subs	r3, r3, r2
 8013018:	009b      	lsls	r3, r3, #2
 801301a:	440b      	add	r3, r1
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	4618      	mov	r0, r3
 8013020:	f7ff fbff 	bl	8012822 <LL_UCPD_RxDisable>
}
 8013024:	bf00      	nop
 8013026:	3708      	adds	r7, #8
 8013028:	46bd      	mov	sp, r7
 801302a:	bd80      	pop	{r7, pc}
 801302c:	200037fc 	.word	0x200037fc

08013030 <HW_SignalAttachement>:

void HW_SignalAttachement(uint8_t PortNum, CCxPin_TypeDef cc)
{
 8013030:	b590      	push	{r4, r7, lr}
 8013032:	b085      	sub	sp, #20
 8013034:	af00      	add	r7, sp, #0
 8013036:	4603      	mov	r3, r0
 8013038:	6039      	str	r1, [r7, #0]
 801303a:	71fb      	strb	r3, [r7, #7]
#if !defined(USBPDCORE_LIB_NO_PD)
  uint32_t _temp;

  /* Init timer to detect the reception of goodCRC */
  USBPD_TIM_Init();
 801303c:	f000 fc08 	bl	8013850 <USBPD_TIM_Init>

  /* Prepare ucpd to handle PD message
            RX message start listen
            TX prepare the DMA to be transfer ready
            Detection listen only the line corresponding CC=Rd for SRC/SNK */
  Ports[PortNum].hdmatx = USBPD_HW_Init_DMATxInstance(PortNum);
 8013040:	79fc      	ldrb	r4, [r7, #7]
 8013042:	79fb      	ldrb	r3, [r7, #7]
 8013044:	4618      	mov	r0, r3
 8013046:	f7fe fe73 	bl	8011d30 <USBPD_HW_Init_DMATxInstance>
 801304a:	4602      	mov	r2, r0
 801304c:	499d      	ldr	r1, [pc, #628]	@ (80132c4 <HW_SignalAttachement+0x294>)
 801304e:	4623      	mov	r3, r4
 8013050:	011b      	lsls	r3, r3, #4
 8013052:	1b1b      	subs	r3, r3, r4
 8013054:	009b      	lsls	r3, r3, #2
 8013056:	440b      	add	r3, r1
 8013058:	3304      	adds	r3, #4
 801305a:	601a      	str	r2, [r3, #0]
  Ports[PortNum].hdmarx = USBPD_HW_Init_DMARxInstance(PortNum);
 801305c:	79fc      	ldrb	r4, [r7, #7]
 801305e:	79fb      	ldrb	r3, [r7, #7]
 8013060:	4618      	mov	r0, r3
 8013062:	f7fe fe25 	bl	8011cb0 <USBPD_HW_Init_DMARxInstance>
 8013066:	4602      	mov	r2, r0
 8013068:	4996      	ldr	r1, [pc, #600]	@ (80132c4 <HW_SignalAttachement+0x294>)
 801306a:	4623      	mov	r3, r4
 801306c:	011b      	lsls	r3, r3, #4
 801306e:	1b1b      	subs	r3, r3, r4
 8013070:	009b      	lsls	r3, r3, #2
 8013072:	440b      	add	r3, r1
 8013074:	3308      	adds	r3, #8
 8013076:	601a      	str	r2, [r3, #0]

  /* Set the RX dma to allow reception */
  _temp = (uint32_t)&Ports[PortNum].husbpd->RXDR;
 8013078:	79fa      	ldrb	r2, [r7, #7]
 801307a:	4992      	ldr	r1, [pc, #584]	@ (80132c4 <HW_SignalAttachement+0x294>)
 801307c:	4613      	mov	r3, r2
 801307e:	011b      	lsls	r3, r3, #4
 8013080:	1a9b      	subs	r3, r3, r2
 8013082:	009b      	lsls	r3, r3, #2
 8013084:	440b      	add	r3, r1
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	3330      	adds	r3, #48	@ 0x30
 801308a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(Ports[PortNum].hdmarx->CPAR, _temp);
 801308c:	79fa      	ldrb	r2, [r7, #7]
 801308e:	498d      	ldr	r1, [pc, #564]	@ (80132c4 <HW_SignalAttachement+0x294>)
 8013090:	4613      	mov	r3, r2
 8013092:	011b      	lsls	r3, r3, #4
 8013094:	1a9b      	subs	r3, r3, r2
 8013096:	009b      	lsls	r3, r3, #2
 8013098:	440b      	add	r3, r1
 801309a:	3308      	adds	r3, #8
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	68fa      	ldr	r2, [r7, #12]
 80130a0:	609a      	str	r2, [r3, #8]
  WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 80130a2:	79fa      	ldrb	r2, [r7, #7]
 80130a4:	4987      	ldr	r1, [pc, #540]	@ (80132c4 <HW_SignalAttachement+0x294>)
 80130a6:	4613      	mov	r3, r2
 80130a8:	011b      	lsls	r3, r3, #4
 80130aa:	1a9b      	subs	r3, r3, r2
 80130ac:	009b      	lsls	r3, r3, #2
 80130ae:	440b      	add	r3, r1
 80130b0:	3330      	adds	r3, #48	@ 0x30
 80130b2:	6818      	ldr	r0, [r3, #0]
 80130b4:	79fa      	ldrb	r2, [r7, #7]
 80130b6:	4983      	ldr	r1, [pc, #524]	@ (80132c4 <HW_SignalAttachement+0x294>)
 80130b8:	4613      	mov	r3, r2
 80130ba:	011b      	lsls	r3, r3, #4
 80130bc:	1a9b      	subs	r3, r3, r2
 80130be:	009b      	lsls	r3, r3, #2
 80130c0:	440b      	add	r3, r1
 80130c2:	3308      	adds	r3, #8
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	4602      	mov	r2, r0
 80130c8:	60da      	str	r2, [r3, #12]
  Ports[PortNum].hdmarx->CNDTR = SIZE_MAX_PD_TRANSACTION_UNCHUNK;
 80130ca:	79fa      	ldrb	r2, [r7, #7]
 80130cc:	497d      	ldr	r1, [pc, #500]	@ (80132c4 <HW_SignalAttachement+0x294>)
 80130ce:	4613      	mov	r3, r2
 80130d0:	011b      	lsls	r3, r3, #4
 80130d2:	1a9b      	subs	r3, r3, r2
 80130d4:	009b      	lsls	r3, r3, #2
 80130d6:	440b      	add	r3, r1
 80130d8:	3308      	adds	r3, #8
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80130e0:	605a      	str	r2, [r3, #4]
  Ports[PortNum].hdmarx->CCR |= DMA_CCR_EN;
 80130e2:	79fa      	ldrb	r2, [r7, #7]
 80130e4:	4977      	ldr	r1, [pc, #476]	@ (80132c4 <HW_SignalAttachement+0x294>)
 80130e6:	4613      	mov	r3, r2
 80130e8:	011b      	lsls	r3, r3, #4
 80130ea:	1a9b      	subs	r3, r3, r2
 80130ec:	009b      	lsls	r3, r3, #2
 80130ee:	440b      	add	r3, r1
 80130f0:	3308      	adds	r3, #8
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	6819      	ldr	r1, [r3, #0]
 80130f6:	79fa      	ldrb	r2, [r7, #7]
 80130f8:	4872      	ldr	r0, [pc, #456]	@ (80132c4 <HW_SignalAttachement+0x294>)
 80130fa:	4613      	mov	r3, r2
 80130fc:	011b      	lsls	r3, r3, #4
 80130fe:	1a9b      	subs	r3, r3, r2
 8013100:	009b      	lsls	r3, r3, #2
 8013102:	4403      	add	r3, r0
 8013104:	3308      	adds	r3, #8
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	f041 0201 	orr.w	r2, r1, #1
 801310c:	601a      	str	r2, [r3, #0]

  /* Set the TX dma only UCPD address */
  _temp = (uint32_t)&Ports[PortNum].husbpd->TXDR;
 801310e:	79fa      	ldrb	r2, [r7, #7]
 8013110:	496c      	ldr	r1, [pc, #432]	@ (80132c4 <HW_SignalAttachement+0x294>)
 8013112:	4613      	mov	r3, r2
 8013114:	011b      	lsls	r3, r3, #4
 8013116:	1a9b      	subs	r3, r3, r2
 8013118:	009b      	lsls	r3, r3, #2
 801311a:	440b      	add	r3, r1
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	3324      	adds	r3, #36	@ 0x24
 8013120:	60fb      	str	r3, [r7, #12]
  Ports[PortNum].hdmatx->CPAR = _temp;
 8013122:	79fa      	ldrb	r2, [r7, #7]
 8013124:	4967      	ldr	r1, [pc, #412]	@ (80132c4 <HW_SignalAttachement+0x294>)
 8013126:	4613      	mov	r3, r2
 8013128:	011b      	lsls	r3, r3, #4
 801312a:	1a9b      	subs	r3, r3, r2
 801312c:	009b      	lsls	r3, r3, #2
 801312e:	440b      	add	r3, r1
 8013130:	3304      	adds	r3, #4
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	68fa      	ldr	r2, [r7, #12]
 8013136:	609a      	str	r2, [r3, #8]
  /* Disabled non Rd line set CC line enable */
#define INTERRUPT_MASK  UCPD_IMR_TXMSGDISCIE | UCPD_IMR_TXMSGSENTIE | UCPD_IMR_HRSTDISCIE  | UCPD_IMR_HRSTSENTIE |  \
  UCPD_IMR_TXMSGABTIE  | UCPD_IMR_TXUNDIE     | UCPD_IMR_RXORDDETIE  | UCPD_IMR_RXHRSTDETIE | \
  UCPD_IMR_RXOVRIE     | UCPD_IMR_RXMSGENDIE

  MODIFY_REG(Ports[PortNum].husbpd->IMR, INTERRUPT_MASK, INTERRUPT_MASK);
 8013138:	79fa      	ldrb	r2, [r7, #7]
 801313a:	4962      	ldr	r1, [pc, #392]	@ (80132c4 <HW_SignalAttachement+0x294>)
 801313c:	4613      	mov	r3, r2
 801313e:	011b      	lsls	r3, r3, #4
 8013140:	1a9b      	subs	r3, r3, r2
 8013142:	009b      	lsls	r3, r3, #2
 8013144:	440b      	add	r3, r1
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	6919      	ldr	r1, [r3, #16]
 801314a:	79fa      	ldrb	r2, [r7, #7]
 801314c:	485d      	ldr	r0, [pc, #372]	@ (80132c4 <HW_SignalAttachement+0x294>)
 801314e:	4613      	mov	r3, r2
 8013150:	011b      	lsls	r3, r3, #4
 8013152:	1a9b      	subs	r3, r3, r2
 8013154:	009b      	lsls	r3, r3, #2
 8013156:	4403      	add	r3, r0
 8013158:	681a      	ldr	r2, [r3, #0]
 801315a:	f441 53f3 	orr.w	r3, r1, #7776	@ 0x1e60
 801315e:	f043 031e 	orr.w	r3, r3, #30
 8013162:	6113      	str	r3, [r2, #16]
#endif /* !USBPDCORE_LIB_NO_PD */

  /* Handle CC enable */
  Ports[PortNum].CCx = cc;
 8013164:	79fa      	ldrb	r2, [r7, #7]
 8013166:	4957      	ldr	r1, [pc, #348]	@ (80132c4 <HW_SignalAttachement+0x294>)
 8013168:	4613      	mov	r3, r2
 801316a:	011b      	lsls	r3, r3, #4
 801316c:	1a9b      	subs	r3, r3, r2
 801316e:	009b      	lsls	r3, r3, #2
 8013170:	440b      	add	r3, r1
 8013172:	3334      	adds	r3, #52	@ 0x34
 8013174:	683a      	ldr	r2, [r7, #0]
 8013176:	601a      	str	r2, [r3, #0]

#if !defined(USBPDCORE_LIB_NO_PD)
  /* Set CC pin for PD message */
  LL_UCPD_SetCCPin(Ports[PortNum].husbpd, (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCPIN_CC1 : LL_UCPD_CCPIN_CC2);
 8013178:	79fa      	ldrb	r2, [r7, #7]
 801317a:	4952      	ldr	r1, [pc, #328]	@ (80132c4 <HW_SignalAttachement+0x294>)
 801317c:	4613      	mov	r3, r2
 801317e:	011b      	lsls	r3, r3, #4
 8013180:	1a9b      	subs	r3, r3, r2
 8013182:	009b      	lsls	r3, r3, #2
 8013184:	440b      	add	r3, r1
 8013186:	6818      	ldr	r0, [r3, #0]
 8013188:	79fa      	ldrb	r2, [r7, #7]
 801318a:	494e      	ldr	r1, [pc, #312]	@ (80132c4 <HW_SignalAttachement+0x294>)
 801318c:	4613      	mov	r3, r2
 801318e:	011b      	lsls	r3, r3, #4
 8013190:	1a9b      	subs	r3, r3, r2
 8013192:	009b      	lsls	r3, r3, #2
 8013194:	440b      	add	r3, r1
 8013196:	3334      	adds	r3, #52	@ 0x34
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	2b01      	cmp	r3, #1
 801319c:	d101      	bne.n	80131a2 <HW_SignalAttachement+0x172>
 801319e:	2300      	movs	r3, #0
 80131a0:	e000      	b.n	80131a4 <HW_SignalAttachement+0x174>
 80131a2:	2340      	movs	r3, #64	@ 0x40
 80131a4:	4619      	mov	r1, r3
 80131a6:	f7ff fb19 	bl	80127dc <LL_UCPD_SetCCPin>
#if defined(_VCONN_SUPPORT)
  /* Initialize Vconn management */
  (void)BSP_USBPD_PWR_VCONNInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */

  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 80131aa:	79fa      	ldrb	r2, [r7, #7]
 80131ac:	4945      	ldr	r1, [pc, #276]	@ (80132c4 <HW_SignalAttachement+0x294>)
 80131ae:	4613      	mov	r3, r2
 80131b0:	011b      	lsls	r3, r3, #4
 80131b2:	1a9b      	subs	r3, r3, r2
 80131b4:	009b      	lsls	r3, r3, #2
 80131b6:	440b      	add	r3, r1
 80131b8:	330c      	adds	r3, #12
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	7a1b      	ldrb	r3, [r3, #8]
 80131be:	f003 0302 	and.w	r3, r3, #2
 80131c2:	b2db      	uxtb	r3, r3
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d031      	beq.n	801322c <HW_SignalAttachement+0x1fc>
  {
    /* Set GPIO to allow the FRS TX handling */
    USBPD_HW_SetFRSSignalling(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
 80131c8:	79fa      	ldrb	r2, [r7, #7]
 80131ca:	493e      	ldr	r1, [pc, #248]	@ (80132c4 <HW_SignalAttachement+0x294>)
 80131cc:	4613      	mov	r3, r2
 80131ce:	011b      	lsls	r3, r3, #4
 80131d0:	1a9b      	subs	r3, r3, r2
 80131d2:	009b      	lsls	r3, r3, #2
 80131d4:	440b      	add	r3, r1
 80131d6:	3334      	adds	r3, #52	@ 0x34
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	2b01      	cmp	r3, #1
 80131dc:	d101      	bne.n	80131e2 <HW_SignalAttachement+0x1b2>
 80131de:	2201      	movs	r2, #1
 80131e0:	e000      	b.n	80131e4 <HW_SignalAttachement+0x1b4>
 80131e2:	2202      	movs	r2, #2
 80131e4:	79fb      	ldrb	r3, [r7, #7]
 80131e6:	4611      	mov	r1, r2
 80131e8:	4618      	mov	r0, r3
 80131ea:	f7fe fde0 	bl	8011dae <USBPD_HW_SetFRSSignalling>
    /* Enable FRS RX */
    LL_UCPD_FRSDetectionEnable(Ports[PortNum].husbpd);
 80131ee:	79fa      	ldrb	r2, [r7, #7]
 80131f0:	4934      	ldr	r1, [pc, #208]	@ (80132c4 <HW_SignalAttachement+0x294>)
 80131f2:	4613      	mov	r3, r2
 80131f4:	011b      	lsls	r3, r3, #4
 80131f6:	1a9b      	subs	r3, r3, r2
 80131f8:	009b      	lsls	r3, r3, #2
 80131fa:	440b      	add	r3, r1
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	4618      	mov	r0, r3
 8013200:	f7ff fa86 	bl	8012710 <LL_UCPD_FRSDetectionEnable>
    Ports[PortNum].husbpd->IMR |= UCPD_IMR_FRSEVTIE;
 8013204:	79fa      	ldrb	r2, [r7, #7]
 8013206:	492f      	ldr	r1, [pc, #188]	@ (80132c4 <HW_SignalAttachement+0x294>)
 8013208:	4613      	mov	r3, r2
 801320a:	011b      	lsls	r3, r3, #4
 801320c:	1a9b      	subs	r3, r3, r2
 801320e:	009b      	lsls	r3, r3, #2
 8013210:	440b      	add	r3, r1
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	6919      	ldr	r1, [r3, #16]
 8013216:	79fa      	ldrb	r2, [r7, #7]
 8013218:	482a      	ldr	r0, [pc, #168]	@ (80132c4 <HW_SignalAttachement+0x294>)
 801321a:	4613      	mov	r3, r2
 801321c:	011b      	lsls	r3, r3, #4
 801321e:	1a9b      	subs	r3, r3, r2
 8013220:	009b      	lsls	r3, r3, #2
 8013222:	4403      	add	r3, r0
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	f441 1280 	orr.w	r2, r1, #1048576	@ 0x100000
 801322a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Resistor on Vconn PIN */
  if (Ports[PortNum].CCx == CC1)
 801322c:	79fa      	ldrb	r2, [r7, #7]
 801322e:	4925      	ldr	r1, [pc, #148]	@ (80132c4 <HW_SignalAttachement+0x294>)
 8013230:	4613      	mov	r3, r2
 8013232:	011b      	lsls	r3, r3, #4
 8013234:	1a9b      	subs	r3, r3, r2
 8013236:	009b      	lsls	r3, r3, #2
 8013238:	440b      	add	r3, r1
 801323a:	3334      	adds	r3, #52	@ 0x34
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	2b01      	cmp	r3, #1
 8013240:	d10d      	bne.n	801325e <HW_SignalAttachement+0x22e>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1);
 8013242:	79fa      	ldrb	r2, [r7, #7]
 8013244:	491f      	ldr	r1, [pc, #124]	@ (80132c4 <HW_SignalAttachement+0x294>)
 8013246:	4613      	mov	r3, r2
 8013248:	011b      	lsls	r3, r3, #4
 801324a:	1a9b      	subs	r3, r3, r2
 801324c:	009b      	lsls	r3, r3, #2
 801324e:	440b      	add	r3, r1
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8013256:	4618      	mov	r0, r3
 8013258:	f7ff fa7a 	bl	8012750 <LL_UCPD_SetccEnable>
 801325c:	e00c      	b.n	8013278 <HW_SignalAttachement+0x248>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC2);
 801325e:	79fa      	ldrb	r2, [r7, #7]
 8013260:	4918      	ldr	r1, [pc, #96]	@ (80132c4 <HW_SignalAttachement+0x294>)
 8013262:	4613      	mov	r3, r2
 8013264:	011b      	lsls	r3, r3, #4
 8013266:	1a9b      	subs	r3, r3, r2
 8013268:	009b      	lsls	r3, r3, #2
 801326a:	440b      	add	r3, r1
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8013272:	4618      	mov	r0, r3
 8013274:	f7ff fa6c 	bl	8012750 <LL_UCPD_SetccEnable>
  }

  /* Prepare the rx processing */
  LL_UCPD_SetRxMode(Ports[PortNum].husbpd, LL_UCPD_RXMODE_NORMAL);
 8013278:	79fa      	ldrb	r2, [r7, #7]
 801327a:	4912      	ldr	r1, [pc, #72]	@ (80132c4 <HW_SignalAttachement+0x294>)
 801327c:	4613      	mov	r3, r2
 801327e:	011b      	lsls	r3, r3, #4
 8013280:	1a9b      	subs	r3, r3, r2
 8013282:	009b      	lsls	r3, r3, #2
 8013284:	440b      	add	r3, r1
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	2100      	movs	r1, #0
 801328a:	4618      	mov	r0, r3
 801328c:	f7ff fad9 	bl	8012842 <LL_UCPD_SetRxMode>
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
 8013290:	79fa      	ldrb	r2, [r7, #7]
 8013292:	490c      	ldr	r1, [pc, #48]	@ (80132c4 <HW_SignalAttachement+0x294>)
 8013294:	4613      	mov	r3, r2
 8013296:	011b      	lsls	r3, r3, #4
 8013298:	1a9b      	subs	r3, r3, r2
 801329a:	009b      	lsls	r3, r3, #2
 801329c:	440b      	add	r3, r1
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	4618      	mov	r0, r3
 80132a2:	f7ff fb14 	bl	80128ce <LL_UCPD_RxDMAEnable>
  LL_UCPD_TxDMAEnable(Ports[PortNum].husbpd);
 80132a6:	79fa      	ldrb	r2, [r7, #7]
 80132a8:	4906      	ldr	r1, [pc, #24]	@ (80132c4 <HW_SignalAttachement+0x294>)
 80132aa:	4613      	mov	r3, r2
 80132ac:	011b      	lsls	r3, r3, #4
 80132ae:	1a9b      	subs	r3, r3, r2
 80132b0:	009b      	lsls	r3, r3, #2
 80132b2:	440b      	add	r3, r1
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	4618      	mov	r0, r3
 80132b8:	f7ff fb29 	bl	801290e <LL_UCPD_TxDMAEnable>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 80132bc:	bf00      	nop
 80132be:	3714      	adds	r7, #20
 80132c0:	46bd      	mov	sp, r7
 80132c2:	bd90      	pop	{r4, r7, pc}
 80132c4:	200037fc 	.word	0x200037fc

080132c8 <HW_SignalDetachment>:


void HW_SignalDetachment(uint8_t PortNum)
{
 80132c8:	b580      	push	{r7, lr}
 80132ca:	b082      	sub	sp, #8
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	4603      	mov	r3, r0
 80132d0:	71fb      	strb	r3, [r7, #7]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* Stop DMA RX/TX */
  LL_UCPD_RxDMADisable(Ports[PortNum].husbpd);
 80132d2:	79fa      	ldrb	r2, [r7, #7]
 80132d4:	493e      	ldr	r1, [pc, #248]	@ (80133d0 <HW_SignalDetachment+0x108>)
 80132d6:	4613      	mov	r3, r2
 80132d8:	011b      	lsls	r3, r3, #4
 80132da:	1a9b      	subs	r3, r3, r2
 80132dc:	009b      	lsls	r3, r3, #2
 80132de:	440b      	add	r3, r1
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	4618      	mov	r0, r3
 80132e4:	f7ff fb03 	bl	80128ee <LL_UCPD_RxDMADisable>
  LL_UCPD_TxDMADisable(Ports[PortNum].husbpd);
 80132e8:	79fa      	ldrb	r2, [r7, #7]
 80132ea:	4939      	ldr	r1, [pc, #228]	@ (80133d0 <HW_SignalDetachment+0x108>)
 80132ec:	4613      	mov	r3, r2
 80132ee:	011b      	lsls	r3, r3, #4
 80132f0:	1a9b      	subs	r3, r3, r2
 80132f2:	009b      	lsls	r3, r3, #2
 80132f4:	440b      	add	r3, r1
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	4618      	mov	r0, r3
 80132fa:	f7ff fb18 	bl	801292e <LL_UCPD_TxDMADisable>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 80132fe:	79fa      	ldrb	r2, [r7, #7]
 8013300:	4933      	ldr	r1, [pc, #204]	@ (80133d0 <HW_SignalDetachment+0x108>)
 8013302:	4613      	mov	r3, r2
 8013304:	011b      	lsls	r3, r3, #4
 8013306:	1a9b      	subs	r3, r3, r2
 8013308:	009b      	lsls	r3, r3, #2
 801330a:	440b      	add	r3, r1
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	4618      	mov	r0, r3
 8013310:	f7ff fa87 	bl	8012822 <LL_UCPD_RxDisable>

#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Enable only detection interrupt */
  WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
 8013314:	79fa      	ldrb	r2, [r7, #7]
 8013316:	492e      	ldr	r1, [pc, #184]	@ (80133d0 <HW_SignalDetachment+0x108>)
 8013318:	4613      	mov	r3, r2
 801331a:	011b      	lsls	r3, r3, #4
 801331c:	1a9b      	subs	r3, r3, r2
 801331e:	009b      	lsls	r3, r3, #2
 8013320:	440b      	add	r3, r1
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8013328:	611a      	str	r2, [r3, #16]
    WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
  }
#endif /* !_DRP */
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

  USBPD_HW_DeInit_DMATxInstance(PortNum);
 801332a:	79fb      	ldrb	r3, [r7, #7]
 801332c:	4618      	mov	r0, r3
 801332e:	f7fe fd33 	bl	8011d98 <USBPD_HW_DeInit_DMATxInstance>
  USBPD_HW_DeInit_DMARxInstance(PortNum);
 8013332:	79fb      	ldrb	r3, [r7, #7]
 8013334:	4618      	mov	r0, r3
 8013336:	f7fe fcef 	bl	8011d18 <USBPD_HW_DeInit_DMARxInstance>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 801333a:	79fa      	ldrb	r2, [r7, #7]
 801333c:	4924      	ldr	r1, [pc, #144]	@ (80133d0 <HW_SignalDetachment+0x108>)
 801333e:	4613      	mov	r3, r2
 8013340:	011b      	lsls	r3, r3, #4
 8013342:	1a9b      	subs	r3, r3, r2
 8013344:	009b      	lsls	r3, r3, #2
 8013346:	440b      	add	r3, r1
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 801334e:	4618      	mov	r0, r3
 8013350:	f7ff f9fe 	bl	8012750 <LL_UCPD_SetccEnable>

  if (USBPD_PORTPOWERROLE_SNK == Ports[PortNum].params->PE_PowerRole)
 8013354:	79fa      	ldrb	r2, [r7, #7]
 8013356:	491e      	ldr	r1, [pc, #120]	@ (80133d0 <HW_SignalDetachment+0x108>)
 8013358:	4613      	mov	r3, r2
 801335a:	011b      	lsls	r3, r3, #4
 801335c:	1a9b      	subs	r3, r3, r2
 801335e:	009b      	lsls	r3, r3, #2
 8013360:	440b      	add	r3, r1
 8013362:	3310      	adds	r3, #16
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	781b      	ldrb	r3, [r3, #0]
 8013368:	f003 0304 	and.w	r3, r3, #4
 801336c:	b2db      	uxtb	r3, r3
 801336e:	2b00      	cmp	r3, #0
 8013370:	d103      	bne.n	801337a <HW_SignalDetachment+0xb2>
#if defined(_VCONN_SUPPORT)
    /* DeInitialize Vconn management */
    (void)BSP_USBPD_PWR_VCONNDeInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */
    /* DeInitialise VBUS power */
    (void)BSP_USBPD_PWR_VBUSDeInit(PortNum);
 8013372:	79fb      	ldrb	r3, [r7, #7]
 8013374:	4618      	mov	r0, r3
 8013376:	f003 fe69 	bl	801704c <BSP_USBPD_PWR_VBUSDeInit>
  }

  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 801337a:	79fa      	ldrb	r2, [r7, #7]
 801337c:	4914      	ldr	r1, [pc, #80]	@ (80133d0 <HW_SignalDetachment+0x108>)
 801337e:	4613      	mov	r3, r2
 8013380:	011b      	lsls	r3, r3, #4
 8013382:	1a9b      	subs	r3, r3, r2
 8013384:	009b      	lsls	r3, r3, #2
 8013386:	440b      	add	r3, r1
 8013388:	330c      	adds	r3, #12
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	7a1b      	ldrb	r3, [r3, #8]
 801338e:	f003 0302 	and.w	r3, r3, #2
 8013392:	b2db      	uxtb	r3, r3
 8013394:	2b00      	cmp	r3, #0
 8013396:	d00a      	beq.n	80133ae <HW_SignalDetachment+0xe6>
  {
    /* Set GPIO to disallow the FRS RX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 8013398:	79fa      	ldrb	r2, [r7, #7]
 801339a:	490d      	ldr	r1, [pc, #52]	@ (80133d0 <HW_SignalDetachment+0x108>)
 801339c:	4613      	mov	r3, r2
 801339e:	011b      	lsls	r3, r3, #4
 80133a0:	1a9b      	subs	r3, r3, r2
 80133a2:	009b      	lsls	r3, r3, #2
 80133a4:	440b      	add	r3, r1
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	4618      	mov	r0, r3
 80133aa:	f7ff f9c1 	bl	8012730 <LL_UCPD_FRSDetectionDisable>
  }

#endif /* !USBPDCORE_LIB_NO_PD */
  Ports[PortNum].CCx = CCNONE;
 80133ae:	79fa      	ldrb	r2, [r7, #7]
 80133b0:	4907      	ldr	r1, [pc, #28]	@ (80133d0 <HW_SignalDetachment+0x108>)
 80133b2:	4613      	mov	r3, r2
 80133b4:	011b      	lsls	r3, r3, #4
 80133b6:	1a9b      	subs	r3, r3, r2
 80133b8:	009b      	lsls	r3, r3, #2
 80133ba:	440b      	add	r3, r1
 80133bc:	3334      	adds	r3, #52	@ 0x34
 80133be:	2200      	movs	r2, #0
 80133c0:	601a      	str	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* DeInit timer to detect the reception of goodCRC */
  USBPD_TIM_DeInit();
 80133c2:	f000 facd 	bl	8013960 <USBPD_TIM_DeInit>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 80133c6:	bf00      	nop
 80133c8:	3708      	adds	r7, #8
 80133ca:	46bd      	mov	sp, r7
 80133cc:	bd80      	pop	{r7, pc}
 80133ce:	bf00      	nop
 80133d0:	200037fc 	.word	0x200037fc

080133d4 <USBPD_HW_IF_IsResistor_SinkTxOk>:
  * @brief  Check if resistors are set to SinkTxOk
  * @param  PortNum Port
  * @retval USBPD_TRUE if resistor is set to SinkTxOk, else USBPD_FALSE
  */
uint8_t USBPD_HW_IF_IsResistor_SinkTxOk(uint8_t PortNum)
{
 80133d4:	b480      	push	{r7}
 80133d6:	b083      	sub	sp, #12
 80133d8:	af00      	add	r7, sp, #0
 80133da:	4603      	mov	r3, r0
 80133dc:	71fb      	strb	r3, [r7, #7]

  /* Disable type C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, (UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS));
#endif /* _LOW_POWER */

  switch (Ports[PortNum].CCx)
 80133de:	79fa      	ldrb	r2, [r7, #7]
 80133e0:	491b      	ldr	r1, [pc, #108]	@ (8013450 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7c>)
 80133e2:	4613      	mov	r3, r2
 80133e4:	011b      	lsls	r3, r3, #4
 80133e6:	1a9b      	subs	r3, r3, r2
 80133e8:	009b      	lsls	r3, r3, #2
 80133ea:	440b      	add	r3, r1
 80133ec:	3334      	adds	r3, #52	@ 0x34
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	2b01      	cmp	r3, #1
 80133f2:	d002      	beq.n	80133fa <USBPD_HW_IF_IsResistor_SinkTxOk+0x26>
 80133f4:	2b02      	cmp	r3, #2
 80133f6:	d010      	beq.n	801341a <USBPD_HW_IF_IsResistor_SinkTxOk+0x46>
      {
        return USBPD_TRUE;
      }
      break;
    default:
      break;
 80133f8:	e022      	b.n	8013440 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6c>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) == LL_UCPD_SNK_CC1_VRP30A)
 80133fa:	79fa      	ldrb	r2, [r7, #7]
 80133fc:	4914      	ldr	r1, [pc, #80]	@ (8013450 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7c>)
 80133fe:	4613      	mov	r3, r2
 8013400:	011b      	lsls	r3, r3, #4
 8013402:	1a9b      	subs	r3, r3, r2
 8013404:	009b      	lsls	r3, r3, #2
 8013406:	440b      	add	r3, r1
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	695b      	ldr	r3, [r3, #20]
 801340c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8013410:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8013414:	d111      	bne.n	801343a <USBPD_HW_IF_IsResistor_SinkTxOk+0x66>
        return USBPD_TRUE;
 8013416:	2301      	movs	r3, #1
 8013418:	e013      	b.n	8013442 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6e>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) == LL_UCPD_SNK_CC2_VRP30A)
 801341a:	79fa      	ldrb	r2, [r7, #7]
 801341c:	490c      	ldr	r1, [pc, #48]	@ (8013450 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7c>)
 801341e:	4613      	mov	r3, r2
 8013420:	011b      	lsls	r3, r3, #4
 8013422:	1a9b      	subs	r3, r3, r2
 8013424:	009b      	lsls	r3, r3, #2
 8013426:	440b      	add	r3, r1
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	695b      	ldr	r3, [r3, #20]
 801342c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8013430:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8013434:	d103      	bne.n	801343e <USBPD_HW_IF_IsResistor_SinkTxOk+0x6a>
        return USBPD_TRUE;
 8013436:	2301      	movs	r3, #1
 8013438:	e003      	b.n	8013442 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6e>
      break;
 801343a:	bf00      	nop
 801343c:	e000      	b.n	8013440 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6c>
      break;
 801343e:	bf00      	nop
  }

  return USBPD_FALSE;
 8013440:	2300      	movs	r3, #0
}
 8013442:	4618      	mov	r0, r3
 8013444:	370c      	adds	r7, #12
 8013446:	46bd      	mov	sp, r7
 8013448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801344c:	4770      	bx	lr
 801344e:	bf00      	nop
 8013450:	200037fc 	.word	0x200037fc

08013454 <HW_IF_PWR_GetVoltage>:
  UNUSED(voltage);
  return USBPD_OK;
}

uint16_t HW_IF_PWR_GetVoltage(uint8_t PortNum)
{
 8013454:	b580      	push	{r7, lr}
 8013456:	b084      	sub	sp, #16
 8013458:	af00      	add	r7, sp, #0
 801345a:	4603      	mov	r3, r0
 801345c:	71fb      	strb	r3, [r7, #7]
  uint32_t _voltage;
  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 801345e:	79fb      	ldrb	r3, [r7, #7]
 8013460:	f107 020c 	add.w	r2, r7, #12
 8013464:	4611      	mov	r1, r2
 8013466:	4618      	mov	r0, r3
 8013468:	f003 fe04 	bl	8017074 <BSP_USBPD_PWR_VBUSGetVoltage>
  return (uint16_t)_voltage;
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	b29b      	uxth	r3, r3
}
 8013470:	4618      	mov	r0, r3
 8013472:	3710      	adds	r7, #16
 8013474:	46bd      	mov	sp, r7
 8013476:	bd80      	pop	{r7, pc}

08013478 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8013478:	b480      	push	{r7}
 801347a:	b085      	sub	sp, #20
 801347c:	af00      	add	r7, sp, #0
 801347e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8013480:	4b08      	ldr	r3, [pc, #32]	@ (80134a4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8013482:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8013484:	4907      	ldr	r1, [pc, #28]	@ (80134a4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	4313      	orrs	r3, r2
 801348a:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 801348c:	4b05      	ldr	r3, [pc, #20]	@ (80134a4 <LL_APB2_GRP1_EnableClock+0x2c>)
 801348e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	4013      	ands	r3, r2
 8013494:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8013496:	68fb      	ldr	r3, [r7, #12]
}
 8013498:	bf00      	nop
 801349a:	3714      	adds	r7, #20
 801349c:	46bd      	mov	sp, r7
 801349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a2:	4770      	bx	lr
 80134a4:	40021000 	.word	0x40021000

080134a8 <LL_APB2_GRP1_DisableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 80134a8:	b480      	push	{r7}
 80134aa:	b083      	sub	sp, #12
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80134b0:	4b06      	ldr	r3, [pc, #24]	@ (80134cc <LL_APB2_GRP1_DisableClock+0x24>)
 80134b2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	43db      	mvns	r3, r3
 80134b8:	4904      	ldr	r1, [pc, #16]	@ (80134cc <LL_APB2_GRP1_DisableClock+0x24>)
 80134ba:	4013      	ands	r3, r2
 80134bc:	660b      	str	r3, [r1, #96]	@ 0x60
}
 80134be:	bf00      	nop
 80134c0:	370c      	adds	r7, #12
 80134c2:	46bd      	mov	sp, r7
 80134c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c8:	4770      	bx	lr
 80134ca:	bf00      	nop
 80134cc:	40021000 	.word	0x40021000

080134d0 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80134d0:	b480      	push	{r7}
 80134d2:	b083      	sub	sp, #12
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	f043 0201 	orr.w	r2, r3, #1
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	601a      	str	r2, [r3, #0]
}
 80134e4:	bf00      	nop
 80134e6:	370c      	adds	r7, #12
 80134e8:	46bd      	mov	sp, r7
 80134ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ee:	4770      	bx	lr

080134f0 <LL_TIM_SetCounterMode>:
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
{
 80134f0:	b480      	push	{r7}
 80134f2:	b083      	sub	sp, #12
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	6078      	str	r0, [r7, #4]
 80134f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8013502:	683b      	ldr	r3, [r7, #0]
 8013504:	431a      	orrs	r2, r3
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	601a      	str	r2, [r3, #0]
}
 801350a:	bf00      	nop
 801350c:	370c      	adds	r7, #12
 801350e:	46bd      	mov	sp, r7
 8013510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013514:	4770      	bx	lr

08013516 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8013516:	b480      	push	{r7}
 8013518:	b083      	sub	sp, #12
 801351a:	af00      	add	r7, sp, #0
 801351c:	6078      	str	r0, [r7, #4]
 801351e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	683a      	ldr	r2, [r7, #0]
 8013524:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8013526:	bf00      	nop
 8013528:	370c      	adds	r7, #12
 801352a:	46bd      	mov	sp, r7
 801352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013530:	4770      	bx	lr

08013532 <LL_TIM_GetPrescaler>:
  * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
  * @param  TIMx Timer instance
  * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
  */
__STATIC_INLINE uint32_t LL_TIM_GetPrescaler(const TIM_TypeDef *TIMx)
{
 8013532:	b480      	push	{r7}
 8013534:	b083      	sub	sp, #12
 8013536:	af00      	add	r7, sp, #0
 8013538:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->PSC));
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 801353e:	4618      	mov	r0, r3
 8013540:	370c      	adds	r7, #12
 8013542:	46bd      	mov	sp, r7
 8013544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013548:	4770      	bx	lr

0801354a <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 801354a:	b480      	push	{r7}
 801354c:	b083      	sub	sp, #12
 801354e:	af00      	add	r7, sp, #0
 8013550:	6078      	str	r0, [r7, #4]
 8013552:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	683a      	ldr	r2, [r7, #0]
 8013558:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 801355a:	bf00      	nop
 801355c:	370c      	adds	r7, #12
 801355e:	46bd      	mov	sp, r7
 8013560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013564:	4770      	bx	lr
	...

08013568 <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_PULSE_ON_COMPARE   (for channel 3 or channel 4 only)
  *         @arg @ref LL_TIM_OCMODE_DIRECTION_OUTPUT   (for channel 3 or channel 4 only)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 8013568:	b480      	push	{r7}
 801356a:	b087      	sub	sp, #28
 801356c:	af00      	add	r7, sp, #0
 801356e:	60f8      	str	r0, [r7, #12]
 8013570:	60b9      	str	r1, [r7, #8]
 8013572:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8013574:	68bb      	ldr	r3, [r7, #8]
 8013576:	2b01      	cmp	r3, #1
 8013578:	d02e      	beq.n	80135d8 <LL_TIM_OC_SetMode+0x70>
 801357a:	68bb      	ldr	r3, [r7, #8]
 801357c:	2b04      	cmp	r3, #4
 801357e:	d029      	beq.n	80135d4 <LL_TIM_OC_SetMode+0x6c>
 8013580:	68bb      	ldr	r3, [r7, #8]
 8013582:	2b10      	cmp	r3, #16
 8013584:	d024      	beq.n	80135d0 <LL_TIM_OC_SetMode+0x68>
 8013586:	68bb      	ldr	r3, [r7, #8]
 8013588:	2b40      	cmp	r3, #64	@ 0x40
 801358a:	d01f      	beq.n	80135cc <LL_TIM_OC_SetMode+0x64>
 801358c:	68bb      	ldr	r3, [r7, #8]
 801358e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013592:	d019      	beq.n	80135c8 <LL_TIM_OC_SetMode+0x60>
 8013594:	68bb      	ldr	r3, [r7, #8]
 8013596:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801359a:	d013      	beq.n	80135c4 <LL_TIM_OC_SetMode+0x5c>
 801359c:	68bb      	ldr	r3, [r7, #8]
 801359e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80135a2:	d00d      	beq.n	80135c0 <LL_TIM_OC_SetMode+0x58>
 80135a4:	68bb      	ldr	r3, [r7, #8]
 80135a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80135aa:	d007      	beq.n	80135bc <LL_TIM_OC_SetMode+0x54>
 80135ac:	68bb      	ldr	r3, [r7, #8]
 80135ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80135b2:	d101      	bne.n	80135b8 <LL_TIM_OC_SetMode+0x50>
 80135b4:	2308      	movs	r3, #8
 80135b6:	e010      	b.n	80135da <LL_TIM_OC_SetMode+0x72>
 80135b8:	2309      	movs	r3, #9
 80135ba:	e00e      	b.n	80135da <LL_TIM_OC_SetMode+0x72>
 80135bc:	2307      	movs	r3, #7
 80135be:	e00c      	b.n	80135da <LL_TIM_OC_SetMode+0x72>
 80135c0:	2306      	movs	r3, #6
 80135c2:	e00a      	b.n	80135da <LL_TIM_OC_SetMode+0x72>
 80135c4:	2305      	movs	r3, #5
 80135c6:	e008      	b.n	80135da <LL_TIM_OC_SetMode+0x72>
 80135c8:	2304      	movs	r3, #4
 80135ca:	e006      	b.n	80135da <LL_TIM_OC_SetMode+0x72>
 80135cc:	2303      	movs	r3, #3
 80135ce:	e004      	b.n	80135da <LL_TIM_OC_SetMode+0x72>
 80135d0:	2302      	movs	r3, #2
 80135d2:	e002      	b.n	80135da <LL_TIM_OC_SetMode+0x72>
 80135d4:	2301      	movs	r3, #1
 80135d6:	e000      	b.n	80135da <LL_TIM_OC_SetMode+0x72>
 80135d8:	2300      	movs	r3, #0
 80135da:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	3318      	adds	r3, #24
 80135e0:	4619      	mov	r1, r3
 80135e2:	7dfb      	ldrb	r3, [r7, #23]
 80135e4:	4a0e      	ldr	r2, [pc, #56]	@ (8013620 <LL_TIM_OC_SetMode+0xb8>)
 80135e6:	5cd3      	ldrb	r3, [r2, r3]
 80135e8:	440b      	add	r3, r1
 80135ea:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80135ec:	693b      	ldr	r3, [r7, #16]
 80135ee:	681a      	ldr	r2, [r3, #0]
 80135f0:	7dfb      	ldrb	r3, [r7, #23]
 80135f2:	490c      	ldr	r1, [pc, #48]	@ (8013624 <LL_TIM_OC_SetMode+0xbc>)
 80135f4:	5ccb      	ldrb	r3, [r1, r3]
 80135f6:	4619      	mov	r1, r3
 80135f8:	4b0b      	ldr	r3, [pc, #44]	@ (8013628 <LL_TIM_OC_SetMode+0xc0>)
 80135fa:	408b      	lsls	r3, r1
 80135fc:	43db      	mvns	r3, r3
 80135fe:	401a      	ands	r2, r3
 8013600:	7dfb      	ldrb	r3, [r7, #23]
 8013602:	4908      	ldr	r1, [pc, #32]	@ (8013624 <LL_TIM_OC_SetMode+0xbc>)
 8013604:	5ccb      	ldrb	r3, [r1, r3]
 8013606:	4619      	mov	r1, r3
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	408b      	lsls	r3, r1
 801360c:	431a      	orrs	r2, r3
 801360e:	693b      	ldr	r3, [r7, #16]
 8013610:	601a      	str	r2, [r3, #0]
}
 8013612:	bf00      	nop
 8013614:	371c      	adds	r7, #28
 8013616:	46bd      	mov	sp, r7
 8013618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801361c:	4770      	bx	lr
 801361e:	bf00      	nop
 8013620:	0801edf4 	.word	0x0801edf4
 8013624:	0801ee00 	.word	0x0801ee00
 8013628:	00010073 	.word	0x00010073

0801362c <LL_TIM_OC_SetPolarity>:
  *         @arg @ref LL_TIM_OCPOLARITY_HIGH
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
 801362c:	b480      	push	{r7}
 801362e:	b087      	sub	sp, #28
 8013630:	af00      	add	r7, sp, #0
 8013632:	60f8      	str	r0, [r7, #12]
 8013634:	60b9      	str	r1, [r7, #8]
 8013636:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8013638:	68bb      	ldr	r3, [r7, #8]
 801363a:	2b01      	cmp	r3, #1
 801363c:	d02e      	beq.n	801369c <LL_TIM_OC_SetPolarity+0x70>
 801363e:	68bb      	ldr	r3, [r7, #8]
 8013640:	2b04      	cmp	r3, #4
 8013642:	d029      	beq.n	8013698 <LL_TIM_OC_SetPolarity+0x6c>
 8013644:	68bb      	ldr	r3, [r7, #8]
 8013646:	2b10      	cmp	r3, #16
 8013648:	d024      	beq.n	8013694 <LL_TIM_OC_SetPolarity+0x68>
 801364a:	68bb      	ldr	r3, [r7, #8]
 801364c:	2b40      	cmp	r3, #64	@ 0x40
 801364e:	d01f      	beq.n	8013690 <LL_TIM_OC_SetPolarity+0x64>
 8013650:	68bb      	ldr	r3, [r7, #8]
 8013652:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013656:	d019      	beq.n	801368c <LL_TIM_OC_SetPolarity+0x60>
 8013658:	68bb      	ldr	r3, [r7, #8]
 801365a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801365e:	d013      	beq.n	8013688 <LL_TIM_OC_SetPolarity+0x5c>
 8013660:	68bb      	ldr	r3, [r7, #8]
 8013662:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013666:	d00d      	beq.n	8013684 <LL_TIM_OC_SetPolarity+0x58>
 8013668:	68bb      	ldr	r3, [r7, #8]
 801366a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801366e:	d007      	beq.n	8013680 <LL_TIM_OC_SetPolarity+0x54>
 8013670:	68bb      	ldr	r3, [r7, #8]
 8013672:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013676:	d101      	bne.n	801367c <LL_TIM_OC_SetPolarity+0x50>
 8013678:	2308      	movs	r3, #8
 801367a:	e010      	b.n	801369e <LL_TIM_OC_SetPolarity+0x72>
 801367c:	2309      	movs	r3, #9
 801367e:	e00e      	b.n	801369e <LL_TIM_OC_SetPolarity+0x72>
 8013680:	2307      	movs	r3, #7
 8013682:	e00c      	b.n	801369e <LL_TIM_OC_SetPolarity+0x72>
 8013684:	2306      	movs	r3, #6
 8013686:	e00a      	b.n	801369e <LL_TIM_OC_SetPolarity+0x72>
 8013688:	2305      	movs	r3, #5
 801368a:	e008      	b.n	801369e <LL_TIM_OC_SetPolarity+0x72>
 801368c:	2304      	movs	r3, #4
 801368e:	e006      	b.n	801369e <LL_TIM_OC_SetPolarity+0x72>
 8013690:	2303      	movs	r3, #3
 8013692:	e004      	b.n	801369e <LL_TIM_OC_SetPolarity+0x72>
 8013694:	2302      	movs	r3, #2
 8013696:	e002      	b.n	801369e <LL_TIM_OC_SetPolarity+0x72>
 8013698:	2301      	movs	r3, #1
 801369a:	e000      	b.n	801369e <LL_TIM_OC_SetPolarity+0x72>
 801369c:	2300      	movs	r3, #0
 801369e:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	6a1a      	ldr	r2, [r3, #32]
 80136a4:	7dfb      	ldrb	r3, [r7, #23]
 80136a6:	490b      	ldr	r1, [pc, #44]	@ (80136d4 <LL_TIM_OC_SetPolarity+0xa8>)
 80136a8:	5ccb      	ldrb	r3, [r1, r3]
 80136aa:	4619      	mov	r1, r3
 80136ac:	2302      	movs	r3, #2
 80136ae:	408b      	lsls	r3, r1
 80136b0:	43db      	mvns	r3, r3
 80136b2:	401a      	ands	r2, r3
 80136b4:	7dfb      	ldrb	r3, [r7, #23]
 80136b6:	4907      	ldr	r1, [pc, #28]	@ (80136d4 <LL_TIM_OC_SetPolarity+0xa8>)
 80136b8:	5ccb      	ldrb	r3, [r1, r3]
 80136ba:	4619      	mov	r1, r3
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	408b      	lsls	r3, r1
 80136c0:	431a      	orrs	r2, r3
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	621a      	str	r2, [r3, #32]
}
 80136c6:	bf00      	nop
 80136c8:	371c      	adds	r7, #28
 80136ca:	46bd      	mov	sp, r7
 80136cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d0:	4770      	bx	lr
 80136d2:	bf00      	nop
 80136d4:	0801ee0c 	.word	0x0801ee0c

080136d8 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80136d8:	b480      	push	{r7}
 80136da:	b083      	sub	sp, #12
 80136dc:	af00      	add	r7, sp, #0
 80136de:	6078      	str	r0, [r7, #4]
 80136e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	683a      	ldr	r2, [r7, #0]
 80136e6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80136e8:	bf00      	nop
 80136ea:	370c      	adds	r7, #12
 80136ec:	46bd      	mov	sp, r7
 80136ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f2:	4770      	bx	lr

080136f4 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80136f4:	b480      	push	{r7}
 80136f6:	b083      	sub	sp, #12
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	6078      	str	r0, [r7, #4]
 80136fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	683a      	ldr	r2, [r7, #0]
 8013702:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8013704:	bf00      	nop
 8013706:	370c      	adds	r7, #12
 8013708:	46bd      	mov	sp, r7
 801370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801370e:	4770      	bx	lr

08013710 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8013710:	b480      	push	{r7}
 8013712:	b083      	sub	sp, #12
 8013714:	af00      	add	r7, sp, #0
 8013716:	6078      	str	r0, [r7, #4]
 8013718:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	683a      	ldr	r2, [r7, #0]
 801371e:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8013720:	bf00      	nop
 8013722:	370c      	adds	r7, #12
 8013724:	46bd      	mov	sp, r7
 8013726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801372a:	4770      	bx	lr

0801372c <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 801372c:	b480      	push	{r7}
 801372e:	b083      	sub	sp, #12
 8013730:	af00      	add	r7, sp, #0
 8013732:	6078      	str	r0, [r7, #4]
 8013734:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	683a      	ldr	r2, [r7, #0]
 801373a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 801373c:	bf00      	nop
 801373e:	370c      	adds	r7, #12
 8013740:	46bd      	mov	sp, r7
 8013742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013746:	4770      	bx	lr

08013748 <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 8013748:	b480      	push	{r7}
 801374a:	b083      	sub	sp, #12
 801374c:	af00      	add	r7, sp, #0
 801374e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	f06f 0202 	mvn.w	r2, #2
 8013756:	611a      	str	r2, [r3, #16]
}
 8013758:	bf00      	nop
 801375a:	370c      	adds	r7, #12
 801375c:	46bd      	mov	sp, r7
 801375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013762:	4770      	bx	lr

08013764 <LL_TIM_IsActiveFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_IsActiveFlag_CC1
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(const TIM_TypeDef *TIMx)
{
 8013764:	b480      	push	{r7}
 8013766:	b083      	sub	sp, #12
 8013768:	af00      	add	r7, sp, #0
 801376a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	691b      	ldr	r3, [r3, #16]
 8013770:	f003 0302 	and.w	r3, r3, #2
 8013774:	2b02      	cmp	r3, #2
 8013776:	d101      	bne.n	801377c <LL_TIM_IsActiveFlag_CC1+0x18>
 8013778:	2301      	movs	r3, #1
 801377a:	e000      	b.n	801377e <LL_TIM_IsActiveFlag_CC1+0x1a>
 801377c:	2300      	movs	r3, #0
}
 801377e:	4618      	mov	r0, r3
 8013780:	370c      	adds	r7, #12
 8013782:	46bd      	mov	sp, r7
 8013784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013788:	4770      	bx	lr

0801378a <LL_TIM_ClearFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_ClearFlag_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC2(TIM_TypeDef *TIMx)
{
 801378a:	b480      	push	{r7}
 801378c:	b083      	sub	sp, #12
 801378e:	af00      	add	r7, sp, #0
 8013790:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	f06f 0204 	mvn.w	r2, #4
 8013798:	611a      	str	r2, [r3, #16]
}
 801379a:	bf00      	nop
 801379c:	370c      	adds	r7, #12
 801379e:	46bd      	mov	sp, r7
 80137a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a4:	4770      	bx	lr

080137a6 <LL_TIM_IsActiveFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_IsActiveFlag_CC2
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC2(const TIM_TypeDef *TIMx)
{
 80137a6:	b480      	push	{r7}
 80137a8:	b083      	sub	sp, #12
 80137aa:	af00      	add	r7, sp, #0
 80137ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	691b      	ldr	r3, [r3, #16]
 80137b2:	f003 0304 	and.w	r3, r3, #4
 80137b6:	2b04      	cmp	r3, #4
 80137b8:	d101      	bne.n	80137be <LL_TIM_IsActiveFlag_CC2+0x18>
 80137ba:	2301      	movs	r3, #1
 80137bc:	e000      	b.n	80137c0 <LL_TIM_IsActiveFlag_CC2+0x1a>
 80137be:	2300      	movs	r3, #0
}
 80137c0:	4618      	mov	r0, r3
 80137c2:	370c      	adds	r7, #12
 80137c4:	46bd      	mov	sp, r7
 80137c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ca:	4770      	bx	lr

080137cc <LL_TIM_ClearFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_ClearFlag_CC3
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC3(TIM_TypeDef *TIMx)
{
 80137cc:	b480      	push	{r7}
 80137ce:	b083      	sub	sp, #12
 80137d0:	af00      	add	r7, sp, #0
 80137d2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	f06f 0208 	mvn.w	r2, #8
 80137da:	611a      	str	r2, [r3, #16]
}
 80137dc:	bf00      	nop
 80137de:	370c      	adds	r7, #12
 80137e0:	46bd      	mov	sp, r7
 80137e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e6:	4770      	bx	lr

080137e8 <LL_TIM_IsActiveFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_IsActiveFlag_CC3
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC3(const TIM_TypeDef *TIMx)
{
 80137e8:	b480      	push	{r7}
 80137ea:	b083      	sub	sp, #12
 80137ec:	af00      	add	r7, sp, #0
 80137ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF)) ? 1UL : 0UL);
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	691b      	ldr	r3, [r3, #16]
 80137f4:	f003 0308 	and.w	r3, r3, #8
 80137f8:	2b08      	cmp	r3, #8
 80137fa:	d101      	bne.n	8013800 <LL_TIM_IsActiveFlag_CC3+0x18>
 80137fc:	2301      	movs	r3, #1
 80137fe:	e000      	b.n	8013802 <LL_TIM_IsActiveFlag_CC3+0x1a>
 8013800:	2300      	movs	r3, #0
}
 8013802:	4618      	mov	r0, r3
 8013804:	370c      	adds	r7, #12
 8013806:	46bd      	mov	sp, r7
 8013808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801380c:	4770      	bx	lr

0801380e <LL_TIM_ClearFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_ClearFlag_CC4
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC4(TIM_TypeDef *TIMx)
{
 801380e:	b480      	push	{r7}
 8013810:	b083      	sub	sp, #12
 8013812:	af00      	add	r7, sp, #0
 8013814:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	f06f 0210 	mvn.w	r2, #16
 801381c:	611a      	str	r2, [r3, #16]
}
 801381e:	bf00      	nop
 8013820:	370c      	adds	r7, #12
 8013822:	46bd      	mov	sp, r7
 8013824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013828:	4770      	bx	lr

0801382a <LL_TIM_IsActiveFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_IsActiveFlag_CC4
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC4(const TIM_TypeDef *TIMx)
{
 801382a:	b480      	push	{r7}
 801382c:	b083      	sub	sp, #12
 801382e:	af00      	add	r7, sp, #0
 8013830:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	691b      	ldr	r3, [r3, #16]
 8013836:	f003 0310 	and.w	r3, r3, #16
 801383a:	2b10      	cmp	r3, #16
 801383c:	d101      	bne.n	8013842 <LL_TIM_IsActiveFlag_CC4+0x18>
 801383e:	2301      	movs	r3, #1
 8013840:	e000      	b.n	8013844 <LL_TIM_IsActiveFlag_CC4+0x1a>
 8013842:	2300      	movs	r3, #0
}
 8013844:	4618      	mov	r0, r3
 8013846:	370c      	adds	r7, #12
 8013848:	46bd      	mov	sp, r7
 801384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801384e:	4770      	bx	lr

08013850 <USBPD_TIM_Init>:
/**
  * @brief  Initialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_Init(void)
{
 8013850:	b598      	push	{r3, r4, r7, lr}
 8013852:	af00      	add	r7, sp, #0
  if (0 == timer_initcounter)
 8013854:	4b3d      	ldr	r3, [pc, #244]	@ (801394c <USBPD_TIM_Init+0xfc>)
 8013856:	f993 3000 	ldrsb.w	r3, [r3]
 801385a:	2b00      	cmp	r3, #0
 801385c:	d16a      	bne.n	8013934 <USBPD_TIM_Init+0xe4>
  {
    TIMX_CLK_ENABLE;
 801385e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8013862:	f7ff fe09 	bl	8013478 <LL_APB2_GRP1_EnableClock>
    /***************************/
    /* Time base configuration */
    /***************************/
    /* Counter mode: select up-counting mode */
    LL_TIM_SetCounterMode(TIMX, LL_TIM_COUNTERMODE_UP);
 8013866:	2100      	movs	r1, #0
 8013868:	4839      	ldr	r0, [pc, #228]	@ (8013950 <USBPD_TIM_Init+0x100>)
 801386a:	f7ff fe41 	bl	80134f0 <LL_TIM_SetCounterMode>

    /* Set the auto-reload value to have a counter frequency of 100Hz */
    LL_TIM_SetAutoReload(TIMX, __LL_TIM_CALC_ARR(TIMX_CLK_FREQ, LL_TIM_GetPrescaler(TIMX), 100u));
#else
    /* Set the pre-scaler value to have TIMx counter clock equal to 1 MHz */
    LL_TIM_SetPrescaler(TIMX, __LL_TIM_CALC_PSC(SystemCoreClock, 1000000u));
 801386e:	4b39      	ldr	r3, [pc, #228]	@ (8013954 <USBPD_TIM_Init+0x104>)
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	4a39      	ldr	r2, [pc, #228]	@ (8013958 <USBPD_TIM_Init+0x108>)
 8013874:	4293      	cmp	r3, r2
 8013876:	d90b      	bls.n	8013890 <USBPD_TIM_Init+0x40>
 8013878:	4b36      	ldr	r3, [pc, #216]	@ (8013954 <USBPD_TIM_Init+0x104>)
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	f503 23f4 	add.w	r3, r3, #499712	@ 0x7a000
 8013880:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8013884:	4a35      	ldr	r2, [pc, #212]	@ (801395c <USBPD_TIM_Init+0x10c>)
 8013886:	fba2 2303 	umull	r2, r3, r2, r3
 801388a:	0c9b      	lsrs	r3, r3, #18
 801388c:	3b01      	subs	r3, #1
 801388e:	e000      	b.n	8013892 <USBPD_TIM_Init+0x42>
 8013890:	2300      	movs	r3, #0
 8013892:	4619      	mov	r1, r3
 8013894:	482e      	ldr	r0, [pc, #184]	@ (8013950 <USBPD_TIM_Init+0x100>)
 8013896:	f7ff fe3e 	bl	8013516 <LL_TIM_SetPrescaler>

    /* Set the auto-reload value to have a counter frequency of 100Hz */
    LL_TIM_SetAutoReload(TIMX, __LL_TIM_CALC_ARR(SystemCoreClock, LL_TIM_GetPrescaler(TIMX), 100u));
 801389a:	4b2e      	ldr	r3, [pc, #184]	@ (8013954 <USBPD_TIM_Init+0x104>)
 801389c:	681c      	ldr	r4, [r3, #0]
 801389e:	482c      	ldr	r0, [pc, #176]	@ (8013950 <USBPD_TIM_Init+0x100>)
 80138a0:	f7ff fe47 	bl	8013532 <LL_TIM_GetPrescaler>
 80138a4:	4603      	mov	r3, r0
 80138a6:	3301      	adds	r3, #1
 80138a8:	fbb4 f3f3 	udiv	r3, r4, r3
 80138ac:	2b63      	cmp	r3, #99	@ 0x63
 80138ae:	d90d      	bls.n	80138cc <USBPD_TIM_Init+0x7c>
 80138b0:	4b28      	ldr	r3, [pc, #160]	@ (8013954 <USBPD_TIM_Init+0x104>)
 80138b2:	681c      	ldr	r4, [r3, #0]
 80138b4:	4826      	ldr	r0, [pc, #152]	@ (8013950 <USBPD_TIM_Init+0x100>)
 80138b6:	f7ff fe3c 	bl	8013532 <LL_TIM_GetPrescaler>
 80138ba:	4603      	mov	r3, r0
 80138bc:	3301      	adds	r3, #1
 80138be:	2264      	movs	r2, #100	@ 0x64
 80138c0:	fb02 f303 	mul.w	r3, r2, r3
 80138c4:	fbb4 f3f3 	udiv	r3, r4, r3
 80138c8:	3b01      	subs	r3, #1
 80138ca:	e000      	b.n	80138ce <USBPD_TIM_Init+0x7e>
 80138cc:	2300      	movs	r3, #0
 80138ce:	4619      	mov	r1, r3
 80138d0:	481f      	ldr	r0, [pc, #124]	@ (8013950 <USBPD_TIM_Init+0x100>)
 80138d2:	f7ff fe3a 	bl	801354a <LL_TIM_SetAutoReload>

    /*********************************/
    /* Output waveform configuration */
    /*********************************/
    /* Set output compare mode: TOGGLE */
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCMODE_TOGGLE);
 80138d6:	2230      	movs	r2, #48	@ 0x30
 80138d8:	2101      	movs	r1, #1
 80138da:	481d      	ldr	r0, [pc, #116]	@ (8013950 <USBPD_TIM_Init+0x100>)
 80138dc:	f7ff fe44 	bl	8013568 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCMODE_TOGGLE);
 80138e0:	2230      	movs	r2, #48	@ 0x30
 80138e2:	2110      	movs	r1, #16
 80138e4:	481a      	ldr	r0, [pc, #104]	@ (8013950 <USBPD_TIM_Init+0x100>)
 80138e6:	f7ff fe3f 	bl	8013568 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCMODE_TOGGLE);
 80138ea:	2230      	movs	r2, #48	@ 0x30
 80138ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80138f0:	4817      	ldr	r0, [pc, #92]	@ (8013950 <USBPD_TIM_Init+0x100>)
 80138f2:	f7ff fe39 	bl	8013568 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCMODE_TOGGLE);
 80138f6:	2230      	movs	r2, #48	@ 0x30
 80138f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80138fc:	4814      	ldr	r0, [pc, #80]	@ (8013950 <USBPD_TIM_Init+0x100>)
 80138fe:	f7ff fe33 	bl	8013568 <LL_TIM_OC_SetMode>

    /* Set output channel polarity: OC is active high */
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);
 8013902:	2200      	movs	r2, #0
 8013904:	2101      	movs	r1, #1
 8013906:	4812      	ldr	r0, [pc, #72]	@ (8013950 <USBPD_TIM_Init+0x100>)
 8013908:	f7ff fe90 	bl	801362c <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCPOLARITY_HIGH);
 801390c:	2200      	movs	r2, #0
 801390e:	2110      	movs	r1, #16
 8013910:	480f      	ldr	r0, [pc, #60]	@ (8013950 <USBPD_TIM_Init+0x100>)
 8013912:	f7ff fe8b 	bl	801362c <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCPOLARITY_HIGH);
 8013916:	2200      	movs	r2, #0
 8013918:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801391c:	480c      	ldr	r0, [pc, #48]	@ (8013950 <USBPD_TIM_Init+0x100>)
 801391e:	f7ff fe85 	bl	801362c <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCPOLARITY_HIGH);
 8013922:	2200      	movs	r2, #0
 8013924:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8013928:	4809      	ldr	r0, [pc, #36]	@ (8013950 <USBPD_TIM_Init+0x100>)
 801392a:	f7ff fe7f 	bl	801362c <LL_TIM_OC_SetPolarity>

    /* Enable counter */
    LL_TIM_EnableCounter(TIMX);
 801392e:	4808      	ldr	r0, [pc, #32]	@ (8013950 <USBPD_TIM_Init+0x100>)
 8013930:	f7ff fdce 	bl	80134d0 <LL_TIM_EnableCounter>
  }

  /* Enable the timer counter */
  timer_initcounter++;
 8013934:	4b05      	ldr	r3, [pc, #20]	@ (801394c <USBPD_TIM_Init+0xfc>)
 8013936:	f993 3000 	ldrsb.w	r3, [r3]
 801393a:	b2db      	uxtb	r3, r3
 801393c:	3301      	adds	r3, #1
 801393e:	b2db      	uxtb	r3, r3
 8013940:	b25a      	sxtb	r2, r3
 8013942:	4b02      	ldr	r3, [pc, #8]	@ (801394c <USBPD_TIM_Init+0xfc>)
 8013944:	701a      	strb	r2, [r3, #0]
}
 8013946:	bf00      	nop
 8013948:	bd98      	pop	{r3, r4, r7, pc}
 801394a:	bf00      	nop
 801394c:	20003838 	.word	0x20003838
 8013950:	40012c00 	.word	0x40012c00
 8013954:	20000004 	.word	0x20000004
 8013958:	000f423f 	.word	0x000f423f
 801395c:	431bde83 	.word	0x431bde83

08013960 <USBPD_TIM_DeInit>:
/**
  * @brief  UnInitialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_DeInit(void)
{
 8013960:	b580      	push	{r7, lr}
 8013962:	af00      	add	r7, sp, #0
  timer_initcounter--;
 8013964:	4b09      	ldr	r3, [pc, #36]	@ (801398c <USBPD_TIM_DeInit+0x2c>)
 8013966:	f993 3000 	ldrsb.w	r3, [r3]
 801396a:	b2db      	uxtb	r3, r3
 801396c:	3b01      	subs	r3, #1
 801396e:	b2db      	uxtb	r3, r3
 8013970:	b25a      	sxtb	r2, r3
 8013972:	4b06      	ldr	r3, [pc, #24]	@ (801398c <USBPD_TIM_DeInit+0x2c>)
 8013974:	701a      	strb	r2, [r3, #0]
  if (0 == timer_initcounter)
 8013976:	4b05      	ldr	r3, [pc, #20]	@ (801398c <USBPD_TIM_DeInit+0x2c>)
 8013978:	f993 3000 	ldrsb.w	r3, [r3]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d103      	bne.n	8013988 <USBPD_TIM_DeInit+0x28>
  {
    TIMX_CLK_DISABLE;
 8013980:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8013984:	f7ff fd90 	bl	80134a8 <LL_APB2_GRP1_DisableClock>
  }
}
 8013988:	bf00      	nop
 801398a:	bd80      	pop	{r7, pc}
 801398c:	20003838 	.word	0x20003838

08013990 <USBPD_TIM_Start>:
  * @param  timer id @TIM_identifier
  * @param  time in us
  * @retval None
  */
void USBPD_TIM_Start(TIM_identifier Id, uint32_t TimeUs)
{
 8013990:	b580      	push	{r7, lr}
 8013992:	b082      	sub	sp, #8
 8013994:	af00      	add	r7, sp, #0
 8013996:	4603      	mov	r3, r0
 8013998:	6039      	str	r1, [r7, #0]
 801399a:	71fb      	strb	r3, [r7, #7]
  /* Positionne l'evenement pour sa detection */
  switch (Id)
 801399c:	79fb      	ldrb	r3, [r7, #7]
 801399e:	2b03      	cmp	r3, #3
 80139a0:	d85e      	bhi.n	8013a60 <USBPD_TIM_Start+0xd0>
 80139a2:	a201      	add	r2, pc, #4	@ (adr r2, 80139a8 <USBPD_TIM_Start+0x18>)
 80139a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139a8:	080139b9 	.word	0x080139b9
 80139ac:	080139e3 	.word	0x080139e3
 80139b0:	08013a0d 	.word	0x08013a0d
 80139b4:	08013a37 	.word	0x08013a37
  {
    case TIM_PORT0_CRC:
      TIMX_CHANNEL1_SETEVENT;
 80139b8:	4b2c      	ldr	r3, [pc, #176]	@ (8013a6c <USBPD_TIM_Start+0xdc>)
 80139ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80139bc:	683b      	ldr	r3, [r7, #0]
 80139be:	441a      	add	r2, r3
 80139c0:	4b2b      	ldr	r3, [pc, #172]	@ (8013a70 <USBPD_TIM_Start+0xe0>)
 80139c2:	fba3 1302 	umull	r1, r3, r3, r2
 80139c6:	0b5b      	lsrs	r3, r3, #13
 80139c8:	f242 7110 	movw	r1, #10000	@ 0x2710
 80139cc:	fb01 f303 	mul.w	r3, r1, r3
 80139d0:	1ad3      	subs	r3, r2, r3
 80139d2:	4619      	mov	r1, r3
 80139d4:	4825      	ldr	r0, [pc, #148]	@ (8013a6c <USBPD_TIM_Start+0xdc>)
 80139d6:	f7ff fe7f 	bl	80136d8 <LL_TIM_OC_SetCompareCH1>
 80139da:	4824      	ldr	r0, [pc, #144]	@ (8013a6c <USBPD_TIM_Start+0xdc>)
 80139dc:	f7ff feb4 	bl	8013748 <LL_TIM_ClearFlag_CC1>
      break;
 80139e0:	e03f      	b.n	8013a62 <USBPD_TIM_Start+0xd2>
    case TIM_PORT0_RETRY:
      TIMX_CHANNEL2_SETEVENT;
 80139e2:	4b22      	ldr	r3, [pc, #136]	@ (8013a6c <USBPD_TIM_Start+0xdc>)
 80139e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80139e6:	683b      	ldr	r3, [r7, #0]
 80139e8:	441a      	add	r2, r3
 80139ea:	4b21      	ldr	r3, [pc, #132]	@ (8013a70 <USBPD_TIM_Start+0xe0>)
 80139ec:	fba3 1302 	umull	r1, r3, r3, r2
 80139f0:	0b5b      	lsrs	r3, r3, #13
 80139f2:	f242 7110 	movw	r1, #10000	@ 0x2710
 80139f6:	fb01 f303 	mul.w	r3, r1, r3
 80139fa:	1ad3      	subs	r3, r2, r3
 80139fc:	4619      	mov	r1, r3
 80139fe:	481b      	ldr	r0, [pc, #108]	@ (8013a6c <USBPD_TIM_Start+0xdc>)
 8013a00:	f7ff fe78 	bl	80136f4 <LL_TIM_OC_SetCompareCH2>
 8013a04:	4819      	ldr	r0, [pc, #100]	@ (8013a6c <USBPD_TIM_Start+0xdc>)
 8013a06:	f7ff fec0 	bl	801378a <LL_TIM_ClearFlag_CC2>
      break;
 8013a0a:	e02a      	b.n	8013a62 <USBPD_TIM_Start+0xd2>
    case TIM_PORT1_CRC:
      TIMX_CHANNEL3_SETEVENT;
 8013a0c:	4b17      	ldr	r3, [pc, #92]	@ (8013a6c <USBPD_TIM_Start+0xdc>)
 8013a0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013a10:	683b      	ldr	r3, [r7, #0]
 8013a12:	441a      	add	r2, r3
 8013a14:	4b16      	ldr	r3, [pc, #88]	@ (8013a70 <USBPD_TIM_Start+0xe0>)
 8013a16:	fba3 1302 	umull	r1, r3, r3, r2
 8013a1a:	0b5b      	lsrs	r3, r3, #13
 8013a1c:	f242 7110 	movw	r1, #10000	@ 0x2710
 8013a20:	fb01 f303 	mul.w	r3, r1, r3
 8013a24:	1ad3      	subs	r3, r2, r3
 8013a26:	4619      	mov	r1, r3
 8013a28:	4810      	ldr	r0, [pc, #64]	@ (8013a6c <USBPD_TIM_Start+0xdc>)
 8013a2a:	f7ff fe71 	bl	8013710 <LL_TIM_OC_SetCompareCH3>
 8013a2e:	480f      	ldr	r0, [pc, #60]	@ (8013a6c <USBPD_TIM_Start+0xdc>)
 8013a30:	f7ff fecc 	bl	80137cc <LL_TIM_ClearFlag_CC3>
      break;
 8013a34:	e015      	b.n	8013a62 <USBPD_TIM_Start+0xd2>
    case TIM_PORT1_RETRY:
      TIMX_CHANNEL4_SETEVENT;
 8013a36:	4b0d      	ldr	r3, [pc, #52]	@ (8013a6c <USBPD_TIM_Start+0xdc>)
 8013a38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013a3a:	683b      	ldr	r3, [r7, #0]
 8013a3c:	441a      	add	r2, r3
 8013a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8013a70 <USBPD_TIM_Start+0xe0>)
 8013a40:	fba3 1302 	umull	r1, r3, r3, r2
 8013a44:	0b5b      	lsrs	r3, r3, #13
 8013a46:	f242 7110 	movw	r1, #10000	@ 0x2710
 8013a4a:	fb01 f303 	mul.w	r3, r1, r3
 8013a4e:	1ad3      	subs	r3, r2, r3
 8013a50:	4619      	mov	r1, r3
 8013a52:	4806      	ldr	r0, [pc, #24]	@ (8013a6c <USBPD_TIM_Start+0xdc>)
 8013a54:	f7ff fe6a 	bl	801372c <LL_TIM_OC_SetCompareCH4>
 8013a58:	4804      	ldr	r0, [pc, #16]	@ (8013a6c <USBPD_TIM_Start+0xdc>)
 8013a5a:	f7ff fed8 	bl	801380e <LL_TIM_ClearFlag_CC4>
      break;
 8013a5e:	e000      	b.n	8013a62 <USBPD_TIM_Start+0xd2>
    default:
      break;
 8013a60:	bf00      	nop
  }
}
 8013a62:	bf00      	nop
 8013a64:	3708      	adds	r7, #8
 8013a66:	46bd      	mov	sp, r7
 8013a68:	bd80      	pop	{r7, pc}
 8013a6a:	bf00      	nop
 8013a6c:	40012c00 	.word	0x40012c00
 8013a70:	d1b71759 	.word	0xd1b71759

08013a74 <USBPD_TIM_IsExpired>:
  * @brief  check timer expiration
  * @param  timer id @TIM_identifier
  * @retval None
  */
uint32_t USBPD_TIM_IsExpired(TIM_identifier Id)
{
 8013a74:	b580      	push	{r7, lr}
 8013a76:	b084      	sub	sp, #16
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	4603      	mov	r3, r0
 8013a7c:	71fb      	strb	r3, [r7, #7]
  uint32_t _expired = 1u;
 8013a7e:	2301      	movs	r3, #1
 8013a80:	60fb      	str	r3, [r7, #12]
  switch (Id)
 8013a82:	79fb      	ldrb	r3, [r7, #7]
 8013a84:	2b03      	cmp	r3, #3
 8013a86:	d81f      	bhi.n	8013ac8 <USBPD_TIM_IsExpired+0x54>
 8013a88:	a201      	add	r2, pc, #4	@ (adr r2, 8013a90 <USBPD_TIM_IsExpired+0x1c>)
 8013a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a8e:	bf00      	nop
 8013a90:	08013aa1 	.word	0x08013aa1
 8013a94:	08013aab 	.word	0x08013aab
 8013a98:	08013ab5 	.word	0x08013ab5
 8013a9c:	08013abf 	.word	0x08013abf
  {
    case TIM_PORT0_CRC:
      _expired = TIMX_CHANNEL1_GETFLAG(TIMX);
 8013aa0:	480c      	ldr	r0, [pc, #48]	@ (8013ad4 <USBPD_TIM_IsExpired+0x60>)
 8013aa2:	f7ff fe5f 	bl	8013764 <LL_TIM_IsActiveFlag_CC1>
 8013aa6:	60f8      	str	r0, [r7, #12]
      break;
 8013aa8:	e00f      	b.n	8013aca <USBPD_TIM_IsExpired+0x56>
    case TIM_PORT0_RETRY:
      _expired = TIMX_CHANNEL2_GETFLAG(TIMX);
 8013aaa:	480a      	ldr	r0, [pc, #40]	@ (8013ad4 <USBPD_TIM_IsExpired+0x60>)
 8013aac:	f7ff fe7b 	bl	80137a6 <LL_TIM_IsActiveFlag_CC2>
 8013ab0:	60f8      	str	r0, [r7, #12]
      break;
 8013ab2:	e00a      	b.n	8013aca <USBPD_TIM_IsExpired+0x56>
    case TIM_PORT1_CRC:
      _expired = TIMX_CHANNEL3_GETFLAG(TIMX);
 8013ab4:	4807      	ldr	r0, [pc, #28]	@ (8013ad4 <USBPD_TIM_IsExpired+0x60>)
 8013ab6:	f7ff fe97 	bl	80137e8 <LL_TIM_IsActiveFlag_CC3>
 8013aba:	60f8      	str	r0, [r7, #12]
      break;
 8013abc:	e005      	b.n	8013aca <USBPD_TIM_IsExpired+0x56>
    case TIM_PORT1_RETRY:
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
 8013abe:	4805      	ldr	r0, [pc, #20]	@ (8013ad4 <USBPD_TIM_IsExpired+0x60>)
 8013ac0:	f7ff feb3 	bl	801382a <LL_TIM_IsActiveFlag_CC4>
 8013ac4:	60f8      	str	r0, [r7, #12]
      break;
 8013ac6:	e000      	b.n	8013aca <USBPD_TIM_IsExpired+0x56>
    default:
      break;
 8013ac8:	bf00      	nop
  }
  return _expired;
 8013aca:	68fb      	ldr	r3, [r7, #12]
}
 8013acc:	4618      	mov	r0, r3
 8013ace:	3710      	adds	r7, #16
 8013ad0:	46bd      	mov	sp, r7
 8013ad2:	bd80      	pop	{r7, pc}
 8013ad4:	40012c00 	.word	0x40012c00

08013ad8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8013ad8:	b480      	push	{r7}
 8013ada:	b085      	sub	sp, #20
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	4603      	mov	r3, r0
 8013ae0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8013ae2:	2300      	movs	r3, #0
 8013ae4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8013ae6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013aea:	2b84      	cmp	r3, #132	@ 0x84
 8013aec:	d005      	beq.n	8013afa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8013aee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	4413      	add	r3, r2
 8013af6:	3303      	adds	r3, #3
 8013af8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8013afa:	68fb      	ldr	r3, [r7, #12]
}
 8013afc:	4618      	mov	r0, r3
 8013afe:	3714      	adds	r7, #20
 8013b00:	46bd      	mov	sp, r7
 8013b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b06:	4770      	bx	lr

08013b08 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8013b08:	b480      	push	{r7}
 8013b0a:	b083      	sub	sp, #12
 8013b0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013b0e:	f3ef 8305 	mrs	r3, IPSR
 8013b12:	607b      	str	r3, [r7, #4]
  return(result);
 8013b14:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	bf14      	ite	ne
 8013b1a:	2301      	movne	r3, #1
 8013b1c:	2300      	moveq	r3, #0
 8013b1e:	b2db      	uxtb	r3, r3
}
 8013b20:	4618      	mov	r0, r3
 8013b22:	370c      	adds	r7, #12
 8013b24:	46bd      	mov	sp, r7
 8013b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b2a:	4770      	bx	lr

08013b2c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8013b2c:	b580      	push	{r7, lr}
 8013b2e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8013b30:	f001 fb0e 	bl	8015150 <vTaskStartScheduler>
  
  return osOK;
 8013b34:	2300      	movs	r3, #0
}
 8013b36:	4618      	mov	r0, r3
 8013b38:	bd80      	pop	{r7, pc}

08013b3a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8013b3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b3c:	b087      	sub	sp, #28
 8013b3e:	af02      	add	r7, sp, #8
 8013b40:	6078      	str	r0, [r7, #4]
 8013b42:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	685c      	ldr	r4, [r3, #4]
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013b50:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013b58:	4618      	mov	r0, r3
 8013b5a:	f7ff ffbd 	bl	8013ad8 <makeFreeRtosPriority>
 8013b5e:	4602      	mov	r2, r0
 8013b60:	f107 030c 	add.w	r3, r7, #12
 8013b64:	9301      	str	r3, [sp, #4]
 8013b66:	9200      	str	r2, [sp, #0]
 8013b68:	683b      	ldr	r3, [r7, #0]
 8013b6a:	4632      	mov	r2, r6
 8013b6c:	4629      	mov	r1, r5
 8013b6e:	4620      	mov	r0, r4
 8013b70:	f001 f866 	bl	8014c40 <xTaskCreate>
 8013b74:	4603      	mov	r3, r0
 8013b76:	2b01      	cmp	r3, #1
 8013b78:	d001      	beq.n	8013b7e <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8013b7a:	2300      	movs	r3, #0
 8013b7c:	e000      	b.n	8013b80 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8013b7e:	68fb      	ldr	r3, [r7, #12]
}
 8013b80:	4618      	mov	r0, r3
 8013b82:	3714      	adds	r7, #20
 8013b84:	46bd      	mov	sp, r7
 8013b86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013b88 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b082      	sub	sp, #8
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8013b90:	6878      	ldr	r0, [r7, #4]
 8013b92:	f001 f9af 	bl	8014ef4 <vTaskDelete>
  return osOK;
 8013b96:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8013b98:	4618      	mov	r0, r3
 8013b9a:	3708      	adds	r7, #8
 8013b9c:	46bd      	mov	sp, r7
 8013b9e:	bd80      	pop	{r7, pc}

08013ba0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8013ba0:	b580      	push	{r7, lr}
 8013ba2:	b084      	sub	sp, #16
 8013ba4:	af00      	add	r7, sp, #0
 8013ba6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d001      	beq.n	8013bb6 <osDelay+0x16>
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	e000      	b.n	8013bb8 <osDelay+0x18>
 8013bb6:	2301      	movs	r3, #1
 8013bb8:	4618      	mov	r0, r3
 8013bba:	f001 fa2b 	bl	8015014 <vTaskDelay>
  
  return osOK;
 8013bbe:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	3710      	adds	r7, #16
 8013bc4:	46bd      	mov	sp, r7
 8013bc6:	bd80      	pop	{r7, pc}

08013bc8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8013bc8:	b580      	push	{r7, lr}
 8013bca:	b082      	sub	sp, #8
 8013bcc:	af00      	add	r7, sp, #0
 8013bce:	6078      	str	r0, [r7, #4]
 8013bd0:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	6818      	ldr	r0, [r3, #0]
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	685b      	ldr	r3, [r3, #4]
 8013bda:	2200      	movs	r2, #0
 8013bdc:	4619      	mov	r1, r3
 8013bde:	f000 f9d7 	bl	8013f90 <xQueueGenericCreate>
 8013be2:	4603      	mov	r3, r0
#endif
}
 8013be4:	4618      	mov	r0, r3
 8013be6:	3708      	adds	r7, #8
 8013be8:	46bd      	mov	sp, r7
 8013bea:	bd80      	pop	{r7, pc}

08013bec <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8013bec:	b580      	push	{r7, lr}
 8013bee:	b086      	sub	sp, #24
 8013bf0:	af00      	add	r7, sp, #0
 8013bf2:	60f8      	str	r0, [r7, #12]
 8013bf4:	60b9      	str	r1, [r7, #8]
 8013bf6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8013bf8:	2300      	movs	r3, #0
 8013bfa:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8013c00:	697b      	ldr	r3, [r7, #20]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d101      	bne.n	8013c0a <osMessagePut+0x1e>
    ticks = 1;
 8013c06:	2301      	movs	r3, #1
 8013c08:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8013c0a:	f7ff ff7d 	bl	8013b08 <inHandlerMode>
 8013c0e:	4603      	mov	r3, r0
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d018      	beq.n	8013c46 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8013c14:	f107 0210 	add.w	r2, r7, #16
 8013c18:	f107 0108 	add.w	r1, r7, #8
 8013c1c:	2300      	movs	r3, #0
 8013c1e:	68f8      	ldr	r0, [r7, #12]
 8013c20:	f000 fb44 	bl	80142ac <xQueueGenericSendFromISR>
 8013c24:	4603      	mov	r3, r0
 8013c26:	2b01      	cmp	r3, #1
 8013c28:	d001      	beq.n	8013c2e <osMessagePut+0x42>
      return osErrorOS;
 8013c2a:	23ff      	movs	r3, #255	@ 0xff
 8013c2c:	e018      	b.n	8013c60 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8013c2e:	693b      	ldr	r3, [r7, #16]
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d014      	beq.n	8013c5e <osMessagePut+0x72>
 8013c34:	4b0c      	ldr	r3, [pc, #48]	@ (8013c68 <osMessagePut+0x7c>)
 8013c36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013c3a:	601a      	str	r2, [r3, #0]
 8013c3c:	f3bf 8f4f 	dsb	sy
 8013c40:	f3bf 8f6f 	isb	sy
 8013c44:	e00b      	b.n	8013c5e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8013c46:	f107 0108 	add.w	r1, r7, #8
 8013c4a:	2300      	movs	r3, #0
 8013c4c:	697a      	ldr	r2, [r7, #20]
 8013c4e:	68f8      	ldr	r0, [r7, #12]
 8013c50:	f000 fa2a 	bl	80140a8 <xQueueGenericSend>
 8013c54:	4603      	mov	r3, r0
 8013c56:	2b01      	cmp	r3, #1
 8013c58:	d001      	beq.n	8013c5e <osMessagePut+0x72>
      return osErrorOS;
 8013c5a:	23ff      	movs	r3, #255	@ 0xff
 8013c5c:	e000      	b.n	8013c60 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8013c5e:	2300      	movs	r3, #0
}
 8013c60:	4618      	mov	r0, r3
 8013c62:	3718      	adds	r7, #24
 8013c64:	46bd      	mov	sp, r7
 8013c66:	bd80      	pop	{r7, pc}
 8013c68:	e000ed04 	.word	0xe000ed04

08013c6c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8013c6c:	b590      	push	{r4, r7, lr}
 8013c6e:	b08b      	sub	sp, #44	@ 0x2c
 8013c70:	af00      	add	r7, sp, #0
 8013c72:	60f8      	str	r0, [r7, #12]
 8013c74:	60b9      	str	r1, [r7, #8]
 8013c76:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8013c78:	68bb      	ldr	r3, [r7, #8]
 8013c7a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8013c7c:	2300      	movs	r3, #0
 8013c7e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8013c80:	68bb      	ldr	r3, [r7, #8]
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d10a      	bne.n	8013c9c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8013c86:	2380      	movs	r3, #128	@ 0x80
 8013c88:	617b      	str	r3, [r7, #20]
    return event;
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	461c      	mov	r4, r3
 8013c8e:	f107 0314 	add.w	r3, r7, #20
 8013c92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013c96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013c9a:	e054      	b.n	8013d46 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8013c9c:	2300      	movs	r3, #0
 8013c9e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8013ca0:	2300      	movs	r3, #0
 8013ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013caa:	d103      	bne.n	8013cb4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8013cac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013cb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8013cb2:	e009      	b.n	8013cc8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d006      	beq.n	8013cc8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8013cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d101      	bne.n	8013cc8 <osMessageGet+0x5c>
      ticks = 1;
 8013cc4:	2301      	movs	r3, #1
 8013cc6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8013cc8:	f7ff ff1e 	bl	8013b08 <inHandlerMode>
 8013ccc:	4603      	mov	r3, r0
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d01c      	beq.n	8013d0c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8013cd2:	f107 0220 	add.w	r2, r7, #32
 8013cd6:	f107 0314 	add.w	r3, r7, #20
 8013cda:	3304      	adds	r3, #4
 8013cdc:	4619      	mov	r1, r3
 8013cde:	68b8      	ldr	r0, [r7, #8]
 8013ce0:	f000 fe04 	bl	80148ec <xQueueReceiveFromISR>
 8013ce4:	4603      	mov	r3, r0
 8013ce6:	2b01      	cmp	r3, #1
 8013ce8:	d102      	bne.n	8013cf0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8013cea:	2310      	movs	r3, #16
 8013cec:	617b      	str	r3, [r7, #20]
 8013cee:	e001      	b.n	8013cf4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8013cf0:	2300      	movs	r3, #0
 8013cf2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8013cf4:	6a3b      	ldr	r3, [r7, #32]
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d01d      	beq.n	8013d36 <osMessageGet+0xca>
 8013cfa:	4b15      	ldr	r3, [pc, #84]	@ (8013d50 <osMessageGet+0xe4>)
 8013cfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013d00:	601a      	str	r2, [r3, #0]
 8013d02:	f3bf 8f4f 	dsb	sy
 8013d06:	f3bf 8f6f 	isb	sy
 8013d0a:	e014      	b.n	8013d36 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8013d0c:	f107 0314 	add.w	r3, r7, #20
 8013d10:	3304      	adds	r3, #4
 8013d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013d14:	4619      	mov	r1, r3
 8013d16:	68b8      	ldr	r0, [r7, #8]
 8013d18:	f000 fbf6 	bl	8014508 <xQueueReceive>
 8013d1c:	4603      	mov	r3, r0
 8013d1e:	2b01      	cmp	r3, #1
 8013d20:	d102      	bne.n	8013d28 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8013d22:	2310      	movs	r3, #16
 8013d24:	617b      	str	r3, [r7, #20]
 8013d26:	e006      	b.n	8013d36 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8013d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d101      	bne.n	8013d32 <osMessageGet+0xc6>
 8013d2e:	2300      	movs	r3, #0
 8013d30:	e000      	b.n	8013d34 <osMessageGet+0xc8>
 8013d32:	2340      	movs	r3, #64	@ 0x40
 8013d34:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	461c      	mov	r4, r3
 8013d3a:	f107 0314 	add.w	r3, r7, #20
 8013d3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013d42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8013d46:	68f8      	ldr	r0, [r7, #12]
 8013d48:	372c      	adds	r7, #44	@ 0x2c
 8013d4a:	46bd      	mov	sp, r7
 8013d4c:	bd90      	pop	{r4, r7, pc}
 8013d4e:	bf00      	nop
 8013d50:	e000ed04 	.word	0xe000ed04

08013d54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013d54:	b480      	push	{r7}
 8013d56:	b083      	sub	sp, #12
 8013d58:	af00      	add	r7, sp, #0
 8013d5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	f103 0208 	add.w	r2, r3, #8
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013d6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	f103 0208 	add.w	r2, r3, #8
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	f103 0208 	add.w	r2, r3, #8
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	2200      	movs	r2, #0
 8013d86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013d88:	bf00      	nop
 8013d8a:	370c      	adds	r7, #12
 8013d8c:	46bd      	mov	sp, r7
 8013d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d92:	4770      	bx	lr

08013d94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013d94:	b480      	push	{r7}
 8013d96:	b083      	sub	sp, #12
 8013d98:	af00      	add	r7, sp, #0
 8013d9a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	2200      	movs	r2, #0
 8013da0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013da2:	bf00      	nop
 8013da4:	370c      	adds	r7, #12
 8013da6:	46bd      	mov	sp, r7
 8013da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dac:	4770      	bx	lr

08013dae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013dae:	b480      	push	{r7}
 8013db0:	b085      	sub	sp, #20
 8013db2:	af00      	add	r7, sp, #0
 8013db4:	6078      	str	r0, [r7, #4]
 8013db6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	685b      	ldr	r3, [r3, #4]
 8013dbc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013dbe:	683b      	ldr	r3, [r7, #0]
 8013dc0:	68fa      	ldr	r2, [r7, #12]
 8013dc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	689a      	ldr	r2, [r3, #8]
 8013dc8:	683b      	ldr	r3, [r7, #0]
 8013dca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	689b      	ldr	r3, [r3, #8]
 8013dd0:	683a      	ldr	r2, [r7, #0]
 8013dd2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	683a      	ldr	r2, [r7, #0]
 8013dd8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013dda:	683b      	ldr	r3, [r7, #0]
 8013ddc:	687a      	ldr	r2, [r7, #4]
 8013dde:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	1c5a      	adds	r2, r3, #1
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	601a      	str	r2, [r3, #0]
}
 8013dea:	bf00      	nop
 8013dec:	3714      	adds	r7, #20
 8013dee:	46bd      	mov	sp, r7
 8013df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df4:	4770      	bx	lr

08013df6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013df6:	b480      	push	{r7}
 8013df8:	b085      	sub	sp, #20
 8013dfa:	af00      	add	r7, sp, #0
 8013dfc:	6078      	str	r0, [r7, #4]
 8013dfe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013e00:	683b      	ldr	r3, [r7, #0]
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013e06:	68bb      	ldr	r3, [r7, #8]
 8013e08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013e0c:	d103      	bne.n	8013e16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	691b      	ldr	r3, [r3, #16]
 8013e12:	60fb      	str	r3, [r7, #12]
 8013e14:	e00c      	b.n	8013e30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	3308      	adds	r3, #8
 8013e1a:	60fb      	str	r3, [r7, #12]
 8013e1c:	e002      	b.n	8013e24 <vListInsert+0x2e>
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	685b      	ldr	r3, [r3, #4]
 8013e22:	60fb      	str	r3, [r7, #12]
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	685b      	ldr	r3, [r3, #4]
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	68ba      	ldr	r2, [r7, #8]
 8013e2c:	429a      	cmp	r2, r3
 8013e2e:	d2f6      	bcs.n	8013e1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	685a      	ldr	r2, [r3, #4]
 8013e34:	683b      	ldr	r3, [r7, #0]
 8013e36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013e38:	683b      	ldr	r3, [r7, #0]
 8013e3a:	685b      	ldr	r3, [r3, #4]
 8013e3c:	683a      	ldr	r2, [r7, #0]
 8013e3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013e40:	683b      	ldr	r3, [r7, #0]
 8013e42:	68fa      	ldr	r2, [r7, #12]
 8013e44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	683a      	ldr	r2, [r7, #0]
 8013e4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013e4c:	683b      	ldr	r3, [r7, #0]
 8013e4e:	687a      	ldr	r2, [r7, #4]
 8013e50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	1c5a      	adds	r2, r3, #1
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	601a      	str	r2, [r3, #0]
}
 8013e5c:	bf00      	nop
 8013e5e:	3714      	adds	r7, #20
 8013e60:	46bd      	mov	sp, r7
 8013e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e66:	4770      	bx	lr

08013e68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013e68:	b480      	push	{r7}
 8013e6a:	b085      	sub	sp, #20
 8013e6c:	af00      	add	r7, sp, #0
 8013e6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	691b      	ldr	r3, [r3, #16]
 8013e74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	685b      	ldr	r3, [r3, #4]
 8013e7a:	687a      	ldr	r2, [r7, #4]
 8013e7c:	6892      	ldr	r2, [r2, #8]
 8013e7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	689b      	ldr	r3, [r3, #8]
 8013e84:	687a      	ldr	r2, [r7, #4]
 8013e86:	6852      	ldr	r2, [r2, #4]
 8013e88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	685b      	ldr	r3, [r3, #4]
 8013e8e:	687a      	ldr	r2, [r7, #4]
 8013e90:	429a      	cmp	r2, r3
 8013e92:	d103      	bne.n	8013e9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	689a      	ldr	r2, [r3, #8]
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	2200      	movs	r2, #0
 8013ea0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	1e5a      	subs	r2, r3, #1
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	681b      	ldr	r3, [r3, #0]
}
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	3714      	adds	r7, #20
 8013eb4:	46bd      	mov	sp, r7
 8013eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eba:	4770      	bx	lr

08013ebc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013ebc:	b580      	push	{r7, lr}
 8013ebe:	b084      	sub	sp, #16
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	6078      	str	r0, [r7, #4]
 8013ec4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d10b      	bne.n	8013ee8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8013ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ed4:	f383 8811 	msr	BASEPRI, r3
 8013ed8:	f3bf 8f6f 	isb	sy
 8013edc:	f3bf 8f4f 	dsb	sy
 8013ee0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8013ee2:	bf00      	nop
 8013ee4:	bf00      	nop
 8013ee6:	e7fd      	b.n	8013ee4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8013ee8:	f002 f9ce 	bl	8016288 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	681a      	ldr	r2, [r3, #0]
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013ef4:	68f9      	ldr	r1, [r7, #12]
 8013ef6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8013ef8:	fb01 f303 	mul.w	r3, r1, r3
 8013efc:	441a      	add	r2, r3
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	2200      	movs	r2, #0
 8013f06:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	681a      	ldr	r2, [r3, #0]
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	681a      	ldr	r2, [r3, #0]
 8013f14:	68fb      	ldr	r3, [r7, #12]
 8013f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013f18:	3b01      	subs	r3, #1
 8013f1a:	68f9      	ldr	r1, [r7, #12]
 8013f1c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8013f1e:	fb01 f303 	mul.w	r3, r1, r3
 8013f22:	441a      	add	r2, r3
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	22ff      	movs	r2, #255	@ 0xff
 8013f2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	22ff      	movs	r2, #255	@ 0xff
 8013f34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8013f38:	683b      	ldr	r3, [r7, #0]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d114      	bne.n	8013f68 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	691b      	ldr	r3, [r3, #16]
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d01a      	beq.n	8013f7c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	3310      	adds	r3, #16
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	f001 fb6e 	bl	801562c <xTaskRemoveFromEventList>
 8013f50:	4603      	mov	r3, r0
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d012      	beq.n	8013f7c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013f56:	4b0d      	ldr	r3, [pc, #52]	@ (8013f8c <xQueueGenericReset+0xd0>)
 8013f58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013f5c:	601a      	str	r2, [r3, #0]
 8013f5e:	f3bf 8f4f 	dsb	sy
 8013f62:	f3bf 8f6f 	isb	sy
 8013f66:	e009      	b.n	8013f7c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	3310      	adds	r3, #16
 8013f6c:	4618      	mov	r0, r3
 8013f6e:	f7ff fef1 	bl	8013d54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	3324      	adds	r3, #36	@ 0x24
 8013f76:	4618      	mov	r0, r3
 8013f78:	f7ff feec 	bl	8013d54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013f7c:	f002 f9b6 	bl	80162ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013f80:	2301      	movs	r3, #1
}
 8013f82:	4618      	mov	r0, r3
 8013f84:	3710      	adds	r7, #16
 8013f86:	46bd      	mov	sp, r7
 8013f88:	bd80      	pop	{r7, pc}
 8013f8a:	bf00      	nop
 8013f8c:	e000ed04 	.word	0xe000ed04

08013f90 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013f90:	b580      	push	{r7, lr}
 8013f92:	b08a      	sub	sp, #40	@ 0x28
 8013f94:	af02      	add	r7, sp, #8
 8013f96:	60f8      	str	r0, [r7, #12]
 8013f98:	60b9      	str	r1, [r7, #8]
 8013f9a:	4613      	mov	r3, r2
 8013f9c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013f9e:	68fb      	ldr	r3, [r7, #12]
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d10b      	bne.n	8013fbc <xQueueGenericCreate+0x2c>
	__asm volatile
 8013fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013fa8:	f383 8811 	msr	BASEPRI, r3
 8013fac:	f3bf 8f6f 	isb	sy
 8013fb0:	f3bf 8f4f 	dsb	sy
 8013fb4:	613b      	str	r3, [r7, #16]
}
 8013fb6:	bf00      	nop
 8013fb8:	bf00      	nop
 8013fba:	e7fd      	b.n	8013fb8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	68ba      	ldr	r2, [r7, #8]
 8013fc0:	fb02 f303 	mul.w	r3, r2, r3
 8013fc4:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013fc6:	69fb      	ldr	r3, [r7, #28]
 8013fc8:	3350      	adds	r3, #80	@ 0x50
 8013fca:	4618      	mov	r0, r3
 8013fcc:	f002 fa7e 	bl	80164cc <pvPortMalloc>
 8013fd0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013fd2:	69bb      	ldr	r3, [r7, #24]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d00d      	beq.n	8013ff4 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8013fd8:	69bb      	ldr	r3, [r7, #24]
 8013fda:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013fdc:	697b      	ldr	r3, [r7, #20]
 8013fde:	3350      	adds	r3, #80	@ 0x50
 8013fe0:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013fe2:	79fa      	ldrb	r2, [r7, #7]
 8013fe4:	69bb      	ldr	r3, [r7, #24]
 8013fe6:	9300      	str	r3, [sp, #0]
 8013fe8:	4613      	mov	r3, r2
 8013fea:	697a      	ldr	r2, [r7, #20]
 8013fec:	68b9      	ldr	r1, [r7, #8]
 8013fee:	68f8      	ldr	r0, [r7, #12]
 8013ff0:	f000 f805 	bl	8013ffe <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013ff4:	69bb      	ldr	r3, [r7, #24]
	}
 8013ff6:	4618      	mov	r0, r3
 8013ff8:	3720      	adds	r7, #32
 8013ffa:	46bd      	mov	sp, r7
 8013ffc:	bd80      	pop	{r7, pc}

08013ffe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013ffe:	b580      	push	{r7, lr}
 8014000:	b084      	sub	sp, #16
 8014002:	af00      	add	r7, sp, #0
 8014004:	60f8      	str	r0, [r7, #12]
 8014006:	60b9      	str	r1, [r7, #8]
 8014008:	607a      	str	r2, [r7, #4]
 801400a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801400c:	68bb      	ldr	r3, [r7, #8]
 801400e:	2b00      	cmp	r3, #0
 8014010:	d103      	bne.n	801401a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014012:	69bb      	ldr	r3, [r7, #24]
 8014014:	69ba      	ldr	r2, [r7, #24]
 8014016:	601a      	str	r2, [r3, #0]
 8014018:	e002      	b.n	8014020 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801401a:	69bb      	ldr	r3, [r7, #24]
 801401c:	687a      	ldr	r2, [r7, #4]
 801401e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8014020:	69bb      	ldr	r3, [r7, #24]
 8014022:	68fa      	ldr	r2, [r7, #12]
 8014024:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8014026:	69bb      	ldr	r3, [r7, #24]
 8014028:	68ba      	ldr	r2, [r7, #8]
 801402a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801402c:	2101      	movs	r1, #1
 801402e:	69b8      	ldr	r0, [r7, #24]
 8014030:	f7ff ff44 	bl	8013ebc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8014034:	69bb      	ldr	r3, [r7, #24]
 8014036:	78fa      	ldrb	r2, [r7, #3]
 8014038:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801403c:	bf00      	nop
 801403e:	3710      	adds	r7, #16
 8014040:	46bd      	mov	sp, r7
 8014042:	bd80      	pop	{r7, pc}

08014044 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8014044:	b580      	push	{r7, lr}
 8014046:	b082      	sub	sp, #8
 8014048:	af00      	add	r7, sp, #0
 801404a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	2b00      	cmp	r3, #0
 8014050:	d00e      	beq.n	8014070 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	2200      	movs	r2, #0
 8014056:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	2200      	movs	r2, #0
 801405c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	2200      	movs	r2, #0
 8014062:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8014064:	2300      	movs	r3, #0
 8014066:	2200      	movs	r2, #0
 8014068:	2100      	movs	r1, #0
 801406a:	6878      	ldr	r0, [r7, #4]
 801406c:	f000 f81c 	bl	80140a8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8014070:	bf00      	nop
 8014072:	3708      	adds	r7, #8
 8014074:	46bd      	mov	sp, r7
 8014076:	bd80      	pop	{r7, pc}

08014078 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8014078:	b580      	push	{r7, lr}
 801407a:	b086      	sub	sp, #24
 801407c:	af00      	add	r7, sp, #0
 801407e:	4603      	mov	r3, r0
 8014080:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8014082:	2301      	movs	r3, #1
 8014084:	617b      	str	r3, [r7, #20]
 8014086:	2300      	movs	r3, #0
 8014088:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 801408a:	79fb      	ldrb	r3, [r7, #7]
 801408c:	461a      	mov	r2, r3
 801408e:	6939      	ldr	r1, [r7, #16]
 8014090:	6978      	ldr	r0, [r7, #20]
 8014092:	f7ff ff7d 	bl	8013f90 <xQueueGenericCreate>
 8014096:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8014098:	68f8      	ldr	r0, [r7, #12]
 801409a:	f7ff ffd3 	bl	8014044 <prvInitialiseMutex>

		return xNewQueue;
 801409e:	68fb      	ldr	r3, [r7, #12]
	}
 80140a0:	4618      	mov	r0, r3
 80140a2:	3718      	adds	r7, #24
 80140a4:	46bd      	mov	sp, r7
 80140a6:	bd80      	pop	{r7, pc}

080140a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80140a8:	b580      	push	{r7, lr}
 80140aa:	b08e      	sub	sp, #56	@ 0x38
 80140ac:	af00      	add	r7, sp, #0
 80140ae:	60f8      	str	r0, [r7, #12]
 80140b0:	60b9      	str	r1, [r7, #8]
 80140b2:	607a      	str	r2, [r7, #4]
 80140b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80140b6:	2300      	movs	r3, #0
 80140b8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80140be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d10b      	bne.n	80140dc <xQueueGenericSend+0x34>
	__asm volatile
 80140c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80140c8:	f383 8811 	msr	BASEPRI, r3
 80140cc:	f3bf 8f6f 	isb	sy
 80140d0:	f3bf 8f4f 	dsb	sy
 80140d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80140d6:	bf00      	nop
 80140d8:	bf00      	nop
 80140da:	e7fd      	b.n	80140d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80140dc:	68bb      	ldr	r3, [r7, #8]
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d103      	bne.n	80140ea <xQueueGenericSend+0x42>
 80140e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d101      	bne.n	80140ee <xQueueGenericSend+0x46>
 80140ea:	2301      	movs	r3, #1
 80140ec:	e000      	b.n	80140f0 <xQueueGenericSend+0x48>
 80140ee:	2300      	movs	r3, #0
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d10b      	bne.n	801410c <xQueueGenericSend+0x64>
	__asm volatile
 80140f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80140f8:	f383 8811 	msr	BASEPRI, r3
 80140fc:	f3bf 8f6f 	isb	sy
 8014100:	f3bf 8f4f 	dsb	sy
 8014104:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8014106:	bf00      	nop
 8014108:	bf00      	nop
 801410a:	e7fd      	b.n	8014108 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801410c:	683b      	ldr	r3, [r7, #0]
 801410e:	2b02      	cmp	r3, #2
 8014110:	d103      	bne.n	801411a <xQueueGenericSend+0x72>
 8014112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014116:	2b01      	cmp	r3, #1
 8014118:	d101      	bne.n	801411e <xQueueGenericSend+0x76>
 801411a:	2301      	movs	r3, #1
 801411c:	e000      	b.n	8014120 <xQueueGenericSend+0x78>
 801411e:	2300      	movs	r3, #0
 8014120:	2b00      	cmp	r3, #0
 8014122:	d10b      	bne.n	801413c <xQueueGenericSend+0x94>
	__asm volatile
 8014124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014128:	f383 8811 	msr	BASEPRI, r3
 801412c:	f3bf 8f6f 	isb	sy
 8014130:	f3bf 8f4f 	dsb	sy
 8014134:	623b      	str	r3, [r7, #32]
}
 8014136:	bf00      	nop
 8014138:	bf00      	nop
 801413a:	e7fd      	b.n	8014138 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801413c:	f001 fc1c 	bl	8015978 <xTaskGetSchedulerState>
 8014140:	4603      	mov	r3, r0
 8014142:	2b00      	cmp	r3, #0
 8014144:	d102      	bne.n	801414c <xQueueGenericSend+0xa4>
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d101      	bne.n	8014150 <xQueueGenericSend+0xa8>
 801414c:	2301      	movs	r3, #1
 801414e:	e000      	b.n	8014152 <xQueueGenericSend+0xaa>
 8014150:	2300      	movs	r3, #0
 8014152:	2b00      	cmp	r3, #0
 8014154:	d10b      	bne.n	801416e <xQueueGenericSend+0xc6>
	__asm volatile
 8014156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801415a:	f383 8811 	msr	BASEPRI, r3
 801415e:	f3bf 8f6f 	isb	sy
 8014162:	f3bf 8f4f 	dsb	sy
 8014166:	61fb      	str	r3, [r7, #28]
}
 8014168:	bf00      	nop
 801416a:	bf00      	nop
 801416c:	e7fd      	b.n	801416a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801416e:	f002 f88b 	bl	8016288 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014174:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801417a:	429a      	cmp	r2, r3
 801417c:	d302      	bcc.n	8014184 <xQueueGenericSend+0xdc>
 801417e:	683b      	ldr	r3, [r7, #0]
 8014180:	2b02      	cmp	r3, #2
 8014182:	d129      	bne.n	80141d8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014184:	683a      	ldr	r2, [r7, #0]
 8014186:	68b9      	ldr	r1, [r7, #8]
 8014188:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801418a:	f000 fc49 	bl	8014a20 <prvCopyDataToQueue>
 801418e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014194:	2b00      	cmp	r3, #0
 8014196:	d010      	beq.n	80141ba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801419a:	3324      	adds	r3, #36	@ 0x24
 801419c:	4618      	mov	r0, r3
 801419e:	f001 fa45 	bl	801562c <xTaskRemoveFromEventList>
 80141a2:	4603      	mov	r3, r0
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d013      	beq.n	80141d0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80141a8:	4b3f      	ldr	r3, [pc, #252]	@ (80142a8 <xQueueGenericSend+0x200>)
 80141aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80141ae:	601a      	str	r2, [r3, #0]
 80141b0:	f3bf 8f4f 	dsb	sy
 80141b4:	f3bf 8f6f 	isb	sy
 80141b8:	e00a      	b.n	80141d0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80141ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d007      	beq.n	80141d0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80141c0:	4b39      	ldr	r3, [pc, #228]	@ (80142a8 <xQueueGenericSend+0x200>)
 80141c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80141c6:	601a      	str	r2, [r3, #0]
 80141c8:	f3bf 8f4f 	dsb	sy
 80141cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80141d0:	f002 f88c 	bl	80162ec <vPortExitCritical>
				return pdPASS;
 80141d4:	2301      	movs	r3, #1
 80141d6:	e063      	b.n	80142a0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d103      	bne.n	80141e6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80141de:	f002 f885 	bl	80162ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80141e2:	2300      	movs	r3, #0
 80141e4:	e05c      	b.n	80142a0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80141e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d106      	bne.n	80141fa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80141ec:	f107 0314 	add.w	r3, r7, #20
 80141f0:	4618      	mov	r0, r3
 80141f2:	f001 fa7f 	bl	80156f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80141f6:	2301      	movs	r3, #1
 80141f8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80141fa:	f002 f877 	bl	80162ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80141fe:	f000 fffb 	bl	80151f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014202:	f002 f841 	bl	8016288 <vPortEnterCritical>
 8014206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014208:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801420c:	b25b      	sxtb	r3, r3
 801420e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014212:	d103      	bne.n	801421c <xQueueGenericSend+0x174>
 8014214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014216:	2200      	movs	r2, #0
 8014218:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801421c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801421e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014222:	b25b      	sxtb	r3, r3
 8014224:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014228:	d103      	bne.n	8014232 <xQueueGenericSend+0x18a>
 801422a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801422c:	2200      	movs	r2, #0
 801422e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014232:	f002 f85b 	bl	80162ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014236:	1d3a      	adds	r2, r7, #4
 8014238:	f107 0314 	add.w	r3, r7, #20
 801423c:	4611      	mov	r1, r2
 801423e:	4618      	mov	r0, r3
 8014240:	f001 fa6e 	bl	8015720 <xTaskCheckForTimeOut>
 8014244:	4603      	mov	r3, r0
 8014246:	2b00      	cmp	r3, #0
 8014248:	d124      	bne.n	8014294 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801424a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801424c:	f000 fce0 	bl	8014c10 <prvIsQueueFull>
 8014250:	4603      	mov	r3, r0
 8014252:	2b00      	cmp	r3, #0
 8014254:	d018      	beq.n	8014288 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8014256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014258:	3310      	adds	r3, #16
 801425a:	687a      	ldr	r2, [r7, #4]
 801425c:	4611      	mov	r1, r2
 801425e:	4618      	mov	r0, r3
 8014260:	f001 f9be 	bl	80155e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014264:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014266:	f000 fc6b 	bl	8014b40 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801426a:	f000 ffd3 	bl	8015214 <xTaskResumeAll>
 801426e:	4603      	mov	r3, r0
 8014270:	2b00      	cmp	r3, #0
 8014272:	f47f af7c 	bne.w	801416e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8014276:	4b0c      	ldr	r3, [pc, #48]	@ (80142a8 <xQueueGenericSend+0x200>)
 8014278:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801427c:	601a      	str	r2, [r3, #0]
 801427e:	f3bf 8f4f 	dsb	sy
 8014282:	f3bf 8f6f 	isb	sy
 8014286:	e772      	b.n	801416e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014288:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801428a:	f000 fc59 	bl	8014b40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801428e:	f000 ffc1 	bl	8015214 <xTaskResumeAll>
 8014292:	e76c      	b.n	801416e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014294:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014296:	f000 fc53 	bl	8014b40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801429a:	f000 ffbb 	bl	8015214 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801429e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80142a0:	4618      	mov	r0, r3
 80142a2:	3738      	adds	r7, #56	@ 0x38
 80142a4:	46bd      	mov	sp, r7
 80142a6:	bd80      	pop	{r7, pc}
 80142a8:	e000ed04 	.word	0xe000ed04

080142ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80142ac:	b580      	push	{r7, lr}
 80142ae:	b090      	sub	sp, #64	@ 0x40
 80142b0:	af00      	add	r7, sp, #0
 80142b2:	60f8      	str	r0, [r7, #12]
 80142b4:	60b9      	str	r1, [r7, #8]
 80142b6:	607a      	str	r2, [r7, #4]
 80142b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80142be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d10b      	bne.n	80142dc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80142c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80142c8:	f383 8811 	msr	BASEPRI, r3
 80142cc:	f3bf 8f6f 	isb	sy
 80142d0:	f3bf 8f4f 	dsb	sy
 80142d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80142d6:	bf00      	nop
 80142d8:	bf00      	nop
 80142da:	e7fd      	b.n	80142d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80142dc:	68bb      	ldr	r3, [r7, #8]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d103      	bne.n	80142ea <xQueueGenericSendFromISR+0x3e>
 80142e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80142e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d101      	bne.n	80142ee <xQueueGenericSendFromISR+0x42>
 80142ea:	2301      	movs	r3, #1
 80142ec:	e000      	b.n	80142f0 <xQueueGenericSendFromISR+0x44>
 80142ee:	2300      	movs	r3, #0
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d10b      	bne.n	801430c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80142f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80142f8:	f383 8811 	msr	BASEPRI, r3
 80142fc:	f3bf 8f6f 	isb	sy
 8014300:	f3bf 8f4f 	dsb	sy
 8014304:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8014306:	bf00      	nop
 8014308:	bf00      	nop
 801430a:	e7fd      	b.n	8014308 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801430c:	683b      	ldr	r3, [r7, #0]
 801430e:	2b02      	cmp	r3, #2
 8014310:	d103      	bne.n	801431a <xQueueGenericSendFromISR+0x6e>
 8014312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014316:	2b01      	cmp	r3, #1
 8014318:	d101      	bne.n	801431e <xQueueGenericSendFromISR+0x72>
 801431a:	2301      	movs	r3, #1
 801431c:	e000      	b.n	8014320 <xQueueGenericSendFromISR+0x74>
 801431e:	2300      	movs	r3, #0
 8014320:	2b00      	cmp	r3, #0
 8014322:	d10b      	bne.n	801433c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8014324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014328:	f383 8811 	msr	BASEPRI, r3
 801432c:	f3bf 8f6f 	isb	sy
 8014330:	f3bf 8f4f 	dsb	sy
 8014334:	623b      	str	r3, [r7, #32]
}
 8014336:	bf00      	nop
 8014338:	bf00      	nop
 801433a:	e7fd      	b.n	8014338 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801433c:	f002 f884 	bl	8016448 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8014340:	f3ef 8211 	mrs	r2, BASEPRI
 8014344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014348:	f383 8811 	msr	BASEPRI, r3
 801434c:	f3bf 8f6f 	isb	sy
 8014350:	f3bf 8f4f 	dsb	sy
 8014354:	61fa      	str	r2, [r7, #28]
 8014356:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8014358:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801435a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801435c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801435e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014364:	429a      	cmp	r2, r3
 8014366:	d302      	bcc.n	801436e <xQueueGenericSendFromISR+0xc2>
 8014368:	683b      	ldr	r3, [r7, #0]
 801436a:	2b02      	cmp	r3, #2
 801436c:	d12f      	bne.n	80143ce <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801436e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014370:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014374:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801437a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801437c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801437e:	683a      	ldr	r2, [r7, #0]
 8014380:	68b9      	ldr	r1, [r7, #8]
 8014382:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8014384:	f000 fb4c 	bl	8014a20 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014388:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 801438c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014390:	d112      	bne.n	80143b8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014396:	2b00      	cmp	r3, #0
 8014398:	d016      	beq.n	80143c8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801439a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801439c:	3324      	adds	r3, #36	@ 0x24
 801439e:	4618      	mov	r0, r3
 80143a0:	f001 f944 	bl	801562c <xTaskRemoveFromEventList>
 80143a4:	4603      	mov	r3, r0
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d00e      	beq.n	80143c8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d00b      	beq.n	80143c8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	2201      	movs	r2, #1
 80143b4:	601a      	str	r2, [r3, #0]
 80143b6:	e007      	b.n	80143c8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80143b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80143bc:	3301      	adds	r3, #1
 80143be:	b2db      	uxtb	r3, r3
 80143c0:	b25a      	sxtb	r2, r3
 80143c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80143c8:	2301      	movs	r3, #1
 80143ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80143cc:	e001      	b.n	80143d2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80143ce:	2300      	movs	r3, #0
 80143d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80143d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80143d4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80143d6:	697b      	ldr	r3, [r7, #20]
 80143d8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80143dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80143de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80143e0:	4618      	mov	r0, r3
 80143e2:	3740      	adds	r7, #64	@ 0x40
 80143e4:	46bd      	mov	sp, r7
 80143e6:	bd80      	pop	{r7, pc}

080143e8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80143e8:	b580      	push	{r7, lr}
 80143ea:	b08e      	sub	sp, #56	@ 0x38
 80143ec:	af00      	add	r7, sp, #0
 80143ee:	6078      	str	r0, [r7, #4]
 80143f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80143f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d10b      	bne.n	8014414 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80143fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014400:	f383 8811 	msr	BASEPRI, r3
 8014404:	f3bf 8f6f 	isb	sy
 8014408:	f3bf 8f4f 	dsb	sy
 801440c:	623b      	str	r3, [r7, #32]
}
 801440e:	bf00      	nop
 8014410:	bf00      	nop
 8014412:	e7fd      	b.n	8014410 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014418:	2b00      	cmp	r3, #0
 801441a:	d00b      	beq.n	8014434 <xQueueGiveFromISR+0x4c>
	__asm volatile
 801441c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014420:	f383 8811 	msr	BASEPRI, r3
 8014424:	f3bf 8f6f 	isb	sy
 8014428:	f3bf 8f4f 	dsb	sy
 801442c:	61fb      	str	r3, [r7, #28]
}
 801442e:	bf00      	nop
 8014430:	bf00      	nop
 8014432:	e7fd      	b.n	8014430 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8014434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014436:	681b      	ldr	r3, [r3, #0]
 8014438:	2b00      	cmp	r3, #0
 801443a:	d103      	bne.n	8014444 <xQueueGiveFromISR+0x5c>
 801443c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801443e:	689b      	ldr	r3, [r3, #8]
 8014440:	2b00      	cmp	r3, #0
 8014442:	d101      	bne.n	8014448 <xQueueGiveFromISR+0x60>
 8014444:	2301      	movs	r3, #1
 8014446:	e000      	b.n	801444a <xQueueGiveFromISR+0x62>
 8014448:	2300      	movs	r3, #0
 801444a:	2b00      	cmp	r3, #0
 801444c:	d10b      	bne.n	8014466 <xQueueGiveFromISR+0x7e>
	__asm volatile
 801444e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014452:	f383 8811 	msr	BASEPRI, r3
 8014456:	f3bf 8f6f 	isb	sy
 801445a:	f3bf 8f4f 	dsb	sy
 801445e:	61bb      	str	r3, [r7, #24]
}
 8014460:	bf00      	nop
 8014462:	bf00      	nop
 8014464:	e7fd      	b.n	8014462 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014466:	f001 ffef 	bl	8016448 <vPortValidateInterruptPriority>
	__asm volatile
 801446a:	f3ef 8211 	mrs	r2, BASEPRI
 801446e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014472:	f383 8811 	msr	BASEPRI, r3
 8014476:	f3bf 8f6f 	isb	sy
 801447a:	f3bf 8f4f 	dsb	sy
 801447e:	617a      	str	r2, [r7, #20]
 8014480:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8014482:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014484:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801448a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801448c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801448e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014490:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014492:	429a      	cmp	r2, r3
 8014494:	d22b      	bcs.n	80144ee <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014498:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801449c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80144a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144a2:	1c5a      	adds	r2, r3, #1
 80144a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144a6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80144a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80144ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80144b0:	d112      	bne.n	80144d8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80144b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d016      	beq.n	80144e8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80144ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144bc:	3324      	adds	r3, #36	@ 0x24
 80144be:	4618      	mov	r0, r3
 80144c0:	f001 f8b4 	bl	801562c <xTaskRemoveFromEventList>
 80144c4:	4603      	mov	r3, r0
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d00e      	beq.n	80144e8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80144ca:	683b      	ldr	r3, [r7, #0]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d00b      	beq.n	80144e8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80144d0:	683b      	ldr	r3, [r7, #0]
 80144d2:	2201      	movs	r2, #1
 80144d4:	601a      	str	r2, [r3, #0]
 80144d6:	e007      	b.n	80144e8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80144d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80144dc:	3301      	adds	r3, #1
 80144de:	b2db      	uxtb	r3, r3
 80144e0:	b25a      	sxtb	r2, r3
 80144e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80144e8:	2301      	movs	r3, #1
 80144ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80144ec:	e001      	b.n	80144f2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80144ee:	2300      	movs	r3, #0
 80144f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80144f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144f4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	f383 8811 	msr	BASEPRI, r3
}
 80144fc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80144fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8014500:	4618      	mov	r0, r3
 8014502:	3738      	adds	r7, #56	@ 0x38
 8014504:	46bd      	mov	sp, r7
 8014506:	bd80      	pop	{r7, pc}

08014508 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8014508:	b580      	push	{r7, lr}
 801450a:	b08c      	sub	sp, #48	@ 0x30
 801450c:	af00      	add	r7, sp, #0
 801450e:	60f8      	str	r0, [r7, #12]
 8014510:	60b9      	str	r1, [r7, #8]
 8014512:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8014514:	2300      	movs	r3, #0
 8014516:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801451c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801451e:	2b00      	cmp	r3, #0
 8014520:	d10b      	bne.n	801453a <xQueueReceive+0x32>
	__asm volatile
 8014522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014526:	f383 8811 	msr	BASEPRI, r3
 801452a:	f3bf 8f6f 	isb	sy
 801452e:	f3bf 8f4f 	dsb	sy
 8014532:	623b      	str	r3, [r7, #32]
}
 8014534:	bf00      	nop
 8014536:	bf00      	nop
 8014538:	e7fd      	b.n	8014536 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801453a:	68bb      	ldr	r3, [r7, #8]
 801453c:	2b00      	cmp	r3, #0
 801453e:	d103      	bne.n	8014548 <xQueueReceive+0x40>
 8014540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014544:	2b00      	cmp	r3, #0
 8014546:	d101      	bne.n	801454c <xQueueReceive+0x44>
 8014548:	2301      	movs	r3, #1
 801454a:	e000      	b.n	801454e <xQueueReceive+0x46>
 801454c:	2300      	movs	r3, #0
 801454e:	2b00      	cmp	r3, #0
 8014550:	d10b      	bne.n	801456a <xQueueReceive+0x62>
	__asm volatile
 8014552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014556:	f383 8811 	msr	BASEPRI, r3
 801455a:	f3bf 8f6f 	isb	sy
 801455e:	f3bf 8f4f 	dsb	sy
 8014562:	61fb      	str	r3, [r7, #28]
}
 8014564:	bf00      	nop
 8014566:	bf00      	nop
 8014568:	e7fd      	b.n	8014566 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801456a:	f001 fa05 	bl	8015978 <xTaskGetSchedulerState>
 801456e:	4603      	mov	r3, r0
 8014570:	2b00      	cmp	r3, #0
 8014572:	d102      	bne.n	801457a <xQueueReceive+0x72>
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	2b00      	cmp	r3, #0
 8014578:	d101      	bne.n	801457e <xQueueReceive+0x76>
 801457a:	2301      	movs	r3, #1
 801457c:	e000      	b.n	8014580 <xQueueReceive+0x78>
 801457e:	2300      	movs	r3, #0
 8014580:	2b00      	cmp	r3, #0
 8014582:	d10b      	bne.n	801459c <xQueueReceive+0x94>
	__asm volatile
 8014584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014588:	f383 8811 	msr	BASEPRI, r3
 801458c:	f3bf 8f6f 	isb	sy
 8014590:	f3bf 8f4f 	dsb	sy
 8014594:	61bb      	str	r3, [r7, #24]
}
 8014596:	bf00      	nop
 8014598:	bf00      	nop
 801459a:	e7fd      	b.n	8014598 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801459c:	f001 fe74 	bl	8016288 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80145a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80145a4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80145a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d01f      	beq.n	80145ec <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80145ac:	68b9      	ldr	r1, [r7, #8]
 80145ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80145b0:	f000 faa0 	bl	8014af4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80145b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145b6:	1e5a      	subs	r2, r3, #1
 80145b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145ba:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80145bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145be:	691b      	ldr	r3, [r3, #16]
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d00f      	beq.n	80145e4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80145c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145c6:	3310      	adds	r3, #16
 80145c8:	4618      	mov	r0, r3
 80145ca:	f001 f82f 	bl	801562c <xTaskRemoveFromEventList>
 80145ce:	4603      	mov	r3, r0
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d007      	beq.n	80145e4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80145d4:	4b3c      	ldr	r3, [pc, #240]	@ (80146c8 <xQueueReceive+0x1c0>)
 80145d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80145da:	601a      	str	r2, [r3, #0]
 80145dc:	f3bf 8f4f 	dsb	sy
 80145e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80145e4:	f001 fe82 	bl	80162ec <vPortExitCritical>
				return pdPASS;
 80145e8:	2301      	movs	r3, #1
 80145ea:	e069      	b.n	80146c0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d103      	bne.n	80145fa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80145f2:	f001 fe7b 	bl	80162ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80145f6:	2300      	movs	r3, #0
 80145f8:	e062      	b.n	80146c0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80145fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d106      	bne.n	801460e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014600:	f107 0310 	add.w	r3, r7, #16
 8014604:	4618      	mov	r0, r3
 8014606:	f001 f875 	bl	80156f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801460a:	2301      	movs	r3, #1
 801460c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801460e:	f001 fe6d 	bl	80162ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014612:	f000 fdf1 	bl	80151f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014616:	f001 fe37 	bl	8016288 <vPortEnterCritical>
 801461a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801461c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014620:	b25b      	sxtb	r3, r3
 8014622:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014626:	d103      	bne.n	8014630 <xQueueReceive+0x128>
 8014628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801462a:	2200      	movs	r2, #0
 801462c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014632:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014636:	b25b      	sxtb	r3, r3
 8014638:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801463c:	d103      	bne.n	8014646 <xQueueReceive+0x13e>
 801463e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014640:	2200      	movs	r2, #0
 8014642:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014646:	f001 fe51 	bl	80162ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801464a:	1d3a      	adds	r2, r7, #4
 801464c:	f107 0310 	add.w	r3, r7, #16
 8014650:	4611      	mov	r1, r2
 8014652:	4618      	mov	r0, r3
 8014654:	f001 f864 	bl	8015720 <xTaskCheckForTimeOut>
 8014658:	4603      	mov	r3, r0
 801465a:	2b00      	cmp	r3, #0
 801465c:	d123      	bne.n	80146a6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801465e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014660:	f000 fac0 	bl	8014be4 <prvIsQueueEmpty>
 8014664:	4603      	mov	r3, r0
 8014666:	2b00      	cmp	r3, #0
 8014668:	d017      	beq.n	801469a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801466a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801466c:	3324      	adds	r3, #36	@ 0x24
 801466e:	687a      	ldr	r2, [r7, #4]
 8014670:	4611      	mov	r1, r2
 8014672:	4618      	mov	r0, r3
 8014674:	f000 ffb4 	bl	80155e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014678:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801467a:	f000 fa61 	bl	8014b40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801467e:	f000 fdc9 	bl	8015214 <xTaskResumeAll>
 8014682:	4603      	mov	r3, r0
 8014684:	2b00      	cmp	r3, #0
 8014686:	d189      	bne.n	801459c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8014688:	4b0f      	ldr	r3, [pc, #60]	@ (80146c8 <xQueueReceive+0x1c0>)
 801468a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801468e:	601a      	str	r2, [r3, #0]
 8014690:	f3bf 8f4f 	dsb	sy
 8014694:	f3bf 8f6f 	isb	sy
 8014698:	e780      	b.n	801459c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801469a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801469c:	f000 fa50 	bl	8014b40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80146a0:	f000 fdb8 	bl	8015214 <xTaskResumeAll>
 80146a4:	e77a      	b.n	801459c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80146a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80146a8:	f000 fa4a 	bl	8014b40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80146ac:	f000 fdb2 	bl	8015214 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80146b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80146b2:	f000 fa97 	bl	8014be4 <prvIsQueueEmpty>
 80146b6:	4603      	mov	r3, r0
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	f43f af6f 	beq.w	801459c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80146be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80146c0:	4618      	mov	r0, r3
 80146c2:	3730      	adds	r7, #48	@ 0x30
 80146c4:	46bd      	mov	sp, r7
 80146c6:	bd80      	pop	{r7, pc}
 80146c8:	e000ed04 	.word	0xe000ed04

080146cc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80146cc:	b580      	push	{r7, lr}
 80146ce:	b08e      	sub	sp, #56	@ 0x38
 80146d0:	af00      	add	r7, sp, #0
 80146d2:	6078      	str	r0, [r7, #4]
 80146d4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80146d6:	2300      	movs	r3, #0
 80146d8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80146de:	2300      	movs	r3, #0
 80146e0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80146e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d10b      	bne.n	8014700 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80146e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80146ec:	f383 8811 	msr	BASEPRI, r3
 80146f0:	f3bf 8f6f 	isb	sy
 80146f4:	f3bf 8f4f 	dsb	sy
 80146f8:	623b      	str	r3, [r7, #32]
}
 80146fa:	bf00      	nop
 80146fc:	bf00      	nop
 80146fe:	e7fd      	b.n	80146fc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014704:	2b00      	cmp	r3, #0
 8014706:	d00b      	beq.n	8014720 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8014708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801470c:	f383 8811 	msr	BASEPRI, r3
 8014710:	f3bf 8f6f 	isb	sy
 8014714:	f3bf 8f4f 	dsb	sy
 8014718:	61fb      	str	r3, [r7, #28]
}
 801471a:	bf00      	nop
 801471c:	bf00      	nop
 801471e:	e7fd      	b.n	801471c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014720:	f001 f92a 	bl	8015978 <xTaskGetSchedulerState>
 8014724:	4603      	mov	r3, r0
 8014726:	2b00      	cmp	r3, #0
 8014728:	d102      	bne.n	8014730 <xQueueSemaphoreTake+0x64>
 801472a:	683b      	ldr	r3, [r7, #0]
 801472c:	2b00      	cmp	r3, #0
 801472e:	d101      	bne.n	8014734 <xQueueSemaphoreTake+0x68>
 8014730:	2301      	movs	r3, #1
 8014732:	e000      	b.n	8014736 <xQueueSemaphoreTake+0x6a>
 8014734:	2300      	movs	r3, #0
 8014736:	2b00      	cmp	r3, #0
 8014738:	d10b      	bne.n	8014752 <xQueueSemaphoreTake+0x86>
	__asm volatile
 801473a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801473e:	f383 8811 	msr	BASEPRI, r3
 8014742:	f3bf 8f6f 	isb	sy
 8014746:	f3bf 8f4f 	dsb	sy
 801474a:	61bb      	str	r3, [r7, #24]
}
 801474c:	bf00      	nop
 801474e:	bf00      	nop
 8014750:	e7fd      	b.n	801474e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014752:	f001 fd99 	bl	8016288 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8014756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801475a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801475c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801475e:	2b00      	cmp	r3, #0
 8014760:	d024      	beq.n	80147ac <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8014762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014764:	1e5a      	subs	r2, r3, #1
 8014766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014768:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801476a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	2b00      	cmp	r3, #0
 8014770:	d104      	bne.n	801477c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8014772:	f001 faad 	bl	8015cd0 <pvTaskIncrementMutexHeldCount>
 8014776:	4602      	mov	r2, r0
 8014778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801477a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801477c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801477e:	691b      	ldr	r3, [r3, #16]
 8014780:	2b00      	cmp	r3, #0
 8014782:	d00f      	beq.n	80147a4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014786:	3310      	adds	r3, #16
 8014788:	4618      	mov	r0, r3
 801478a:	f000 ff4f 	bl	801562c <xTaskRemoveFromEventList>
 801478e:	4603      	mov	r3, r0
 8014790:	2b00      	cmp	r3, #0
 8014792:	d007      	beq.n	80147a4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014794:	4b54      	ldr	r3, [pc, #336]	@ (80148e8 <xQueueSemaphoreTake+0x21c>)
 8014796:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801479a:	601a      	str	r2, [r3, #0]
 801479c:	f3bf 8f4f 	dsb	sy
 80147a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80147a4:	f001 fda2 	bl	80162ec <vPortExitCritical>
				return pdPASS;
 80147a8:	2301      	movs	r3, #1
 80147aa:	e098      	b.n	80148de <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80147ac:	683b      	ldr	r3, [r7, #0]
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d112      	bne.n	80147d8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80147b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d00b      	beq.n	80147d0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80147b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80147bc:	f383 8811 	msr	BASEPRI, r3
 80147c0:	f3bf 8f6f 	isb	sy
 80147c4:	f3bf 8f4f 	dsb	sy
 80147c8:	617b      	str	r3, [r7, #20]
}
 80147ca:	bf00      	nop
 80147cc:	bf00      	nop
 80147ce:	e7fd      	b.n	80147cc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80147d0:	f001 fd8c 	bl	80162ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80147d4:	2300      	movs	r3, #0
 80147d6:	e082      	b.n	80148de <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80147d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d106      	bne.n	80147ec <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80147de:	f107 030c 	add.w	r3, r7, #12
 80147e2:	4618      	mov	r0, r3
 80147e4:	f000 ff86 	bl	80156f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80147e8:	2301      	movs	r3, #1
 80147ea:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80147ec:	f001 fd7e 	bl	80162ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80147f0:	f000 fd02 	bl	80151f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80147f4:	f001 fd48 	bl	8016288 <vPortEnterCritical>
 80147f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80147fe:	b25b      	sxtb	r3, r3
 8014800:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014804:	d103      	bne.n	801480e <xQueueSemaphoreTake+0x142>
 8014806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014808:	2200      	movs	r2, #0
 801480a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801480e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014810:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014814:	b25b      	sxtb	r3, r3
 8014816:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801481a:	d103      	bne.n	8014824 <xQueueSemaphoreTake+0x158>
 801481c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801481e:	2200      	movs	r2, #0
 8014820:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014824:	f001 fd62 	bl	80162ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014828:	463a      	mov	r2, r7
 801482a:	f107 030c 	add.w	r3, r7, #12
 801482e:	4611      	mov	r1, r2
 8014830:	4618      	mov	r0, r3
 8014832:	f000 ff75 	bl	8015720 <xTaskCheckForTimeOut>
 8014836:	4603      	mov	r3, r0
 8014838:	2b00      	cmp	r3, #0
 801483a:	d132      	bne.n	80148a2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801483c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801483e:	f000 f9d1 	bl	8014be4 <prvIsQueueEmpty>
 8014842:	4603      	mov	r3, r0
 8014844:	2b00      	cmp	r3, #0
 8014846:	d026      	beq.n	8014896 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	2b00      	cmp	r3, #0
 801484e:	d109      	bne.n	8014864 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8014850:	f001 fd1a 	bl	8016288 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014856:	689b      	ldr	r3, [r3, #8]
 8014858:	4618      	mov	r0, r3
 801485a:	f001 f8ab 	bl	80159b4 <xTaskPriorityInherit>
 801485e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8014860:	f001 fd44 	bl	80162ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014866:	3324      	adds	r3, #36	@ 0x24
 8014868:	683a      	ldr	r2, [r7, #0]
 801486a:	4611      	mov	r1, r2
 801486c:	4618      	mov	r0, r3
 801486e:	f000 feb7 	bl	80155e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014872:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014874:	f000 f964 	bl	8014b40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014878:	f000 fccc 	bl	8015214 <xTaskResumeAll>
 801487c:	4603      	mov	r3, r0
 801487e:	2b00      	cmp	r3, #0
 8014880:	f47f af67 	bne.w	8014752 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8014884:	4b18      	ldr	r3, [pc, #96]	@ (80148e8 <xQueueSemaphoreTake+0x21c>)
 8014886:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801488a:	601a      	str	r2, [r3, #0]
 801488c:	f3bf 8f4f 	dsb	sy
 8014890:	f3bf 8f6f 	isb	sy
 8014894:	e75d      	b.n	8014752 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8014896:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014898:	f000 f952 	bl	8014b40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801489c:	f000 fcba 	bl	8015214 <xTaskResumeAll>
 80148a0:	e757      	b.n	8014752 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80148a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80148a4:	f000 f94c 	bl	8014b40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80148a8:	f000 fcb4 	bl	8015214 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80148ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80148ae:	f000 f999 	bl	8014be4 <prvIsQueueEmpty>
 80148b2:	4603      	mov	r3, r0
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	f43f af4c 	beq.w	8014752 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80148ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d00d      	beq.n	80148dc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80148c0:	f001 fce2 	bl	8016288 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80148c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80148c6:	f000 f893 	bl	80149f0 <prvGetDisinheritPriorityAfterTimeout>
 80148ca:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80148cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148ce:	689b      	ldr	r3, [r3, #8]
 80148d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80148d2:	4618      	mov	r0, r3
 80148d4:	f001 f96c 	bl	8015bb0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80148d8:	f001 fd08 	bl	80162ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80148dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80148de:	4618      	mov	r0, r3
 80148e0:	3738      	adds	r7, #56	@ 0x38
 80148e2:	46bd      	mov	sp, r7
 80148e4:	bd80      	pop	{r7, pc}
 80148e6:	bf00      	nop
 80148e8:	e000ed04 	.word	0xe000ed04

080148ec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80148ec:	b580      	push	{r7, lr}
 80148ee:	b08e      	sub	sp, #56	@ 0x38
 80148f0:	af00      	add	r7, sp, #0
 80148f2:	60f8      	str	r0, [r7, #12]
 80148f4:	60b9      	str	r1, [r7, #8]
 80148f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80148fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d10b      	bne.n	801491a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8014902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014906:	f383 8811 	msr	BASEPRI, r3
 801490a:	f3bf 8f6f 	isb	sy
 801490e:	f3bf 8f4f 	dsb	sy
 8014912:	623b      	str	r3, [r7, #32]
}
 8014914:	bf00      	nop
 8014916:	bf00      	nop
 8014918:	e7fd      	b.n	8014916 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801491a:	68bb      	ldr	r3, [r7, #8]
 801491c:	2b00      	cmp	r3, #0
 801491e:	d103      	bne.n	8014928 <xQueueReceiveFromISR+0x3c>
 8014920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014924:	2b00      	cmp	r3, #0
 8014926:	d101      	bne.n	801492c <xQueueReceiveFromISR+0x40>
 8014928:	2301      	movs	r3, #1
 801492a:	e000      	b.n	801492e <xQueueReceiveFromISR+0x42>
 801492c:	2300      	movs	r3, #0
 801492e:	2b00      	cmp	r3, #0
 8014930:	d10b      	bne.n	801494a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8014932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014936:	f383 8811 	msr	BASEPRI, r3
 801493a:	f3bf 8f6f 	isb	sy
 801493e:	f3bf 8f4f 	dsb	sy
 8014942:	61fb      	str	r3, [r7, #28]
}
 8014944:	bf00      	nop
 8014946:	bf00      	nop
 8014948:	e7fd      	b.n	8014946 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801494a:	f001 fd7d 	bl	8016448 <vPortValidateInterruptPriority>
	__asm volatile
 801494e:	f3ef 8211 	mrs	r2, BASEPRI
 8014952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014956:	f383 8811 	msr	BASEPRI, r3
 801495a:	f3bf 8f6f 	isb	sy
 801495e:	f3bf 8f4f 	dsb	sy
 8014962:	61ba      	str	r2, [r7, #24]
 8014964:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8014966:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014968:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801496a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801496c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801496e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014972:	2b00      	cmp	r3, #0
 8014974:	d02f      	beq.n	80149d6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8014976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014978:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801497c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014980:	68b9      	ldr	r1, [r7, #8]
 8014982:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014984:	f000 f8b6 	bl	8014af4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801498a:	1e5a      	subs	r2, r3, #1
 801498c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801498e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8014990:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8014994:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014998:	d112      	bne.n	80149c0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801499a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801499c:	691b      	ldr	r3, [r3, #16]
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d016      	beq.n	80149d0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80149a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149a4:	3310      	adds	r3, #16
 80149a6:	4618      	mov	r0, r3
 80149a8:	f000 fe40 	bl	801562c <xTaskRemoveFromEventList>
 80149ac:	4603      	mov	r3, r0
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d00e      	beq.n	80149d0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d00b      	beq.n	80149d0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	2201      	movs	r2, #1
 80149bc:	601a      	str	r2, [r3, #0]
 80149be:	e007      	b.n	80149d0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80149c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80149c4:	3301      	adds	r3, #1
 80149c6:	b2db      	uxtb	r3, r3
 80149c8:	b25a      	sxtb	r2, r3
 80149ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80149d0:	2301      	movs	r3, #1
 80149d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80149d4:	e001      	b.n	80149da <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80149d6:	2300      	movs	r3, #0
 80149d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80149da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149dc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80149de:	693b      	ldr	r3, [r7, #16]
 80149e0:	f383 8811 	msr	BASEPRI, r3
}
 80149e4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80149e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80149e8:	4618      	mov	r0, r3
 80149ea:	3738      	adds	r7, #56	@ 0x38
 80149ec:	46bd      	mov	sp, r7
 80149ee:	bd80      	pop	{r7, pc}

080149f0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80149f0:	b480      	push	{r7}
 80149f2:	b085      	sub	sp, #20
 80149f4:	af00      	add	r7, sp, #0
 80149f6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d006      	beq.n	8014a0e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	f1c3 0307 	rsb	r3, r3, #7
 8014a0a:	60fb      	str	r3, [r7, #12]
 8014a0c:	e001      	b.n	8014a12 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8014a0e:	2300      	movs	r3, #0
 8014a10:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8014a12:	68fb      	ldr	r3, [r7, #12]
	}
 8014a14:	4618      	mov	r0, r3
 8014a16:	3714      	adds	r7, #20
 8014a18:	46bd      	mov	sp, r7
 8014a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a1e:	4770      	bx	lr

08014a20 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014a20:	b580      	push	{r7, lr}
 8014a22:	b086      	sub	sp, #24
 8014a24:	af00      	add	r7, sp, #0
 8014a26:	60f8      	str	r0, [r7, #12]
 8014a28:	60b9      	str	r1, [r7, #8]
 8014a2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014a2c:	2300      	movs	r3, #0
 8014a2e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014a34:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d10d      	bne.n	8014a5a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d14d      	bne.n	8014ae2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	689b      	ldr	r3, [r3, #8]
 8014a4a:	4618      	mov	r0, r3
 8014a4c:	f001 f828 	bl	8015aa0 <xTaskPriorityDisinherit>
 8014a50:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8014a52:	68fb      	ldr	r3, [r7, #12]
 8014a54:	2200      	movs	r2, #0
 8014a56:	609a      	str	r2, [r3, #8]
 8014a58:	e043      	b.n	8014ae2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d119      	bne.n	8014a94 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	6858      	ldr	r0, [r3, #4]
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014a68:	461a      	mov	r2, r3
 8014a6a:	68b9      	ldr	r1, [r7, #8]
 8014a6c:	f005 fc5e 	bl	801a32c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	685a      	ldr	r2, [r3, #4]
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014a78:	441a      	add	r2, r3
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014a7e:	68fb      	ldr	r3, [r7, #12]
 8014a80:	685a      	ldr	r2, [r3, #4]
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	689b      	ldr	r3, [r3, #8]
 8014a86:	429a      	cmp	r2, r3
 8014a88:	d32b      	bcc.n	8014ae2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	681a      	ldr	r2, [r3, #0]
 8014a8e:	68fb      	ldr	r3, [r7, #12]
 8014a90:	605a      	str	r2, [r3, #4]
 8014a92:	e026      	b.n	8014ae2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	68d8      	ldr	r0, [r3, #12]
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014a9c:	461a      	mov	r2, r3
 8014a9e:	68b9      	ldr	r1, [r7, #8]
 8014aa0:	f005 fc44 	bl	801a32c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	68da      	ldr	r2, [r3, #12]
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014aac:	425b      	negs	r3, r3
 8014aae:	441a      	add	r2, r3
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	68da      	ldr	r2, [r3, #12]
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	429a      	cmp	r2, r3
 8014abe:	d207      	bcs.n	8014ad0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8014ac0:	68fb      	ldr	r3, [r7, #12]
 8014ac2:	689a      	ldr	r2, [r3, #8]
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014ac8:	425b      	negs	r3, r3
 8014aca:	441a      	add	r2, r3
 8014acc:	68fb      	ldr	r3, [r7, #12]
 8014ace:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	2b02      	cmp	r3, #2
 8014ad4:	d105      	bne.n	8014ae2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014ad6:	693b      	ldr	r3, [r7, #16]
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d002      	beq.n	8014ae2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8014adc:	693b      	ldr	r3, [r7, #16]
 8014ade:	3b01      	subs	r3, #1
 8014ae0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014ae2:	693b      	ldr	r3, [r7, #16]
 8014ae4:	1c5a      	adds	r2, r3, #1
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8014aea:	697b      	ldr	r3, [r7, #20]
}
 8014aec:	4618      	mov	r0, r3
 8014aee:	3718      	adds	r7, #24
 8014af0:	46bd      	mov	sp, r7
 8014af2:	bd80      	pop	{r7, pc}

08014af4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8014af4:	b580      	push	{r7, lr}
 8014af6:	b082      	sub	sp, #8
 8014af8:	af00      	add	r7, sp, #0
 8014afa:	6078      	str	r0, [r7, #4]
 8014afc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d018      	beq.n	8014b38 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	68da      	ldr	r2, [r3, #12]
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014b0e:	441a      	add	r2, r3
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	68da      	ldr	r2, [r3, #12]
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	689b      	ldr	r3, [r3, #8]
 8014b1c:	429a      	cmp	r2, r3
 8014b1e:	d303      	bcc.n	8014b28 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	681a      	ldr	r2, [r3, #0]
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	68d9      	ldr	r1, [r3, #12]
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014b30:	461a      	mov	r2, r3
 8014b32:	6838      	ldr	r0, [r7, #0]
 8014b34:	f005 fbfa 	bl	801a32c <memcpy>
	}
}
 8014b38:	bf00      	nop
 8014b3a:	3708      	adds	r7, #8
 8014b3c:	46bd      	mov	sp, r7
 8014b3e:	bd80      	pop	{r7, pc}

08014b40 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014b40:	b580      	push	{r7, lr}
 8014b42:	b084      	sub	sp, #16
 8014b44:	af00      	add	r7, sp, #0
 8014b46:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8014b48:	f001 fb9e 	bl	8016288 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014b52:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014b54:	e011      	b.n	8014b7a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d012      	beq.n	8014b84 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	3324      	adds	r3, #36	@ 0x24
 8014b62:	4618      	mov	r0, r3
 8014b64:	f000 fd62 	bl	801562c <xTaskRemoveFromEventList>
 8014b68:	4603      	mov	r3, r0
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d001      	beq.n	8014b72 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8014b6e:	f000 fe3b 	bl	80157e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8014b72:	7bfb      	ldrb	r3, [r7, #15]
 8014b74:	3b01      	subs	r3, #1
 8014b76:	b2db      	uxtb	r3, r3
 8014b78:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	dce9      	bgt.n	8014b56 <prvUnlockQueue+0x16>
 8014b82:	e000      	b.n	8014b86 <prvUnlockQueue+0x46>
					break;
 8014b84:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	22ff      	movs	r2, #255	@ 0xff
 8014b8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8014b8e:	f001 fbad 	bl	80162ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014b92:	f001 fb79 	bl	8016288 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014b9c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014b9e:	e011      	b.n	8014bc4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	691b      	ldr	r3, [r3, #16]
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d012      	beq.n	8014bce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	3310      	adds	r3, #16
 8014bac:	4618      	mov	r0, r3
 8014bae:	f000 fd3d 	bl	801562c <xTaskRemoveFromEventList>
 8014bb2:	4603      	mov	r3, r0
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d001      	beq.n	8014bbc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8014bb8:	f000 fe16 	bl	80157e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8014bbc:	7bbb      	ldrb	r3, [r7, #14]
 8014bbe:	3b01      	subs	r3, #1
 8014bc0:	b2db      	uxtb	r3, r3
 8014bc2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014bc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	dce9      	bgt.n	8014ba0 <prvUnlockQueue+0x60>
 8014bcc:	e000      	b.n	8014bd0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014bce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	22ff      	movs	r2, #255	@ 0xff
 8014bd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8014bd8:	f001 fb88 	bl	80162ec <vPortExitCritical>
}
 8014bdc:	bf00      	nop
 8014bde:	3710      	adds	r7, #16
 8014be0:	46bd      	mov	sp, r7
 8014be2:	bd80      	pop	{r7, pc}

08014be4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014be4:	b580      	push	{r7, lr}
 8014be6:	b084      	sub	sp, #16
 8014be8:	af00      	add	r7, sp, #0
 8014bea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014bec:	f001 fb4c 	bl	8016288 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d102      	bne.n	8014bfe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014bf8:	2301      	movs	r3, #1
 8014bfa:	60fb      	str	r3, [r7, #12]
 8014bfc:	e001      	b.n	8014c02 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014bfe:	2300      	movs	r3, #0
 8014c00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014c02:	f001 fb73 	bl	80162ec <vPortExitCritical>

	return xReturn;
 8014c06:	68fb      	ldr	r3, [r7, #12]
}
 8014c08:	4618      	mov	r0, r3
 8014c0a:	3710      	adds	r7, #16
 8014c0c:	46bd      	mov	sp, r7
 8014c0e:	bd80      	pop	{r7, pc}

08014c10 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014c10:	b580      	push	{r7, lr}
 8014c12:	b084      	sub	sp, #16
 8014c14:	af00      	add	r7, sp, #0
 8014c16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014c18:	f001 fb36 	bl	8016288 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014c24:	429a      	cmp	r2, r3
 8014c26:	d102      	bne.n	8014c2e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014c28:	2301      	movs	r3, #1
 8014c2a:	60fb      	str	r3, [r7, #12]
 8014c2c:	e001      	b.n	8014c32 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014c2e:	2300      	movs	r3, #0
 8014c30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014c32:	f001 fb5b 	bl	80162ec <vPortExitCritical>

	return xReturn;
 8014c36:	68fb      	ldr	r3, [r7, #12]
}
 8014c38:	4618      	mov	r0, r3
 8014c3a:	3710      	adds	r7, #16
 8014c3c:	46bd      	mov	sp, r7
 8014c3e:	bd80      	pop	{r7, pc}

08014c40 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014c40:	b580      	push	{r7, lr}
 8014c42:	b08c      	sub	sp, #48	@ 0x30
 8014c44:	af04      	add	r7, sp, #16
 8014c46:	60f8      	str	r0, [r7, #12]
 8014c48:	60b9      	str	r1, [r7, #8]
 8014c4a:	603b      	str	r3, [r7, #0]
 8014c4c:	4613      	mov	r3, r2
 8014c4e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014c50:	88fb      	ldrh	r3, [r7, #6]
 8014c52:	009b      	lsls	r3, r3, #2
 8014c54:	4618      	mov	r0, r3
 8014c56:	f001 fc39 	bl	80164cc <pvPortMalloc>
 8014c5a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014c5c:	697b      	ldr	r3, [r7, #20]
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d00e      	beq.n	8014c80 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014c62:	20ac      	movs	r0, #172	@ 0xac
 8014c64:	f001 fc32 	bl	80164cc <pvPortMalloc>
 8014c68:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014c6a:	69fb      	ldr	r3, [r7, #28]
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d003      	beq.n	8014c78 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014c70:	69fb      	ldr	r3, [r7, #28]
 8014c72:	697a      	ldr	r2, [r7, #20]
 8014c74:	631a      	str	r2, [r3, #48]	@ 0x30
 8014c76:	e005      	b.n	8014c84 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014c78:	6978      	ldr	r0, [r7, #20]
 8014c7a:	f001 fcf5 	bl	8016668 <vPortFree>
 8014c7e:	e001      	b.n	8014c84 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014c80:	2300      	movs	r3, #0
 8014c82:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014c84:	69fb      	ldr	r3, [r7, #28]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d013      	beq.n	8014cb2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014c8a:	88fa      	ldrh	r2, [r7, #6]
 8014c8c:	2300      	movs	r3, #0
 8014c8e:	9303      	str	r3, [sp, #12]
 8014c90:	69fb      	ldr	r3, [r7, #28]
 8014c92:	9302      	str	r3, [sp, #8]
 8014c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c96:	9301      	str	r3, [sp, #4]
 8014c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c9a:	9300      	str	r3, [sp, #0]
 8014c9c:	683b      	ldr	r3, [r7, #0]
 8014c9e:	68b9      	ldr	r1, [r7, #8]
 8014ca0:	68f8      	ldr	r0, [r7, #12]
 8014ca2:	f000 f80f 	bl	8014cc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014ca6:	69f8      	ldr	r0, [r7, #28]
 8014ca8:	f000 f8b6 	bl	8014e18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014cac:	2301      	movs	r3, #1
 8014cae:	61bb      	str	r3, [r7, #24]
 8014cb0:	e002      	b.n	8014cb8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014cb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014cb6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014cb8:	69bb      	ldr	r3, [r7, #24]
	}
 8014cba:	4618      	mov	r0, r3
 8014cbc:	3720      	adds	r7, #32
 8014cbe:	46bd      	mov	sp, r7
 8014cc0:	bd80      	pop	{r7, pc}
	...

08014cc4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014cc4:	b580      	push	{r7, lr}
 8014cc6:	b088      	sub	sp, #32
 8014cc8:	af00      	add	r7, sp, #0
 8014cca:	60f8      	str	r0, [r7, #12]
 8014ccc:	60b9      	str	r1, [r7, #8]
 8014cce:	607a      	str	r2, [r7, #4]
 8014cd0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cd4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	009b      	lsls	r3, r3, #2
 8014cda:	461a      	mov	r2, r3
 8014cdc:	21a5      	movs	r1, #165	@ 0xa5
 8014cde:	f005 fa83 	bl	801a1e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ce4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8014cec:	3b01      	subs	r3, #1
 8014cee:	009b      	lsls	r3, r3, #2
 8014cf0:	4413      	add	r3, r2
 8014cf2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014cf4:	69bb      	ldr	r3, [r7, #24]
 8014cf6:	f023 0307 	bic.w	r3, r3, #7
 8014cfa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014cfc:	69bb      	ldr	r3, [r7, #24]
 8014cfe:	f003 0307 	and.w	r3, r3, #7
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d00b      	beq.n	8014d1e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8014d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d0a:	f383 8811 	msr	BASEPRI, r3
 8014d0e:	f3bf 8f6f 	isb	sy
 8014d12:	f3bf 8f4f 	dsb	sy
 8014d16:	617b      	str	r3, [r7, #20]
}
 8014d18:	bf00      	nop
 8014d1a:	bf00      	nop
 8014d1c:	e7fd      	b.n	8014d1a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014d1e:	68bb      	ldr	r3, [r7, #8]
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d01f      	beq.n	8014d64 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014d24:	2300      	movs	r3, #0
 8014d26:	61fb      	str	r3, [r7, #28]
 8014d28:	e012      	b.n	8014d50 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014d2a:	68ba      	ldr	r2, [r7, #8]
 8014d2c:	69fb      	ldr	r3, [r7, #28]
 8014d2e:	4413      	add	r3, r2
 8014d30:	7819      	ldrb	r1, [r3, #0]
 8014d32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014d34:	69fb      	ldr	r3, [r7, #28]
 8014d36:	4413      	add	r3, r2
 8014d38:	3334      	adds	r3, #52	@ 0x34
 8014d3a:	460a      	mov	r2, r1
 8014d3c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014d3e:	68ba      	ldr	r2, [r7, #8]
 8014d40:	69fb      	ldr	r3, [r7, #28]
 8014d42:	4413      	add	r3, r2
 8014d44:	781b      	ldrb	r3, [r3, #0]
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d006      	beq.n	8014d58 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014d4a:	69fb      	ldr	r3, [r7, #28]
 8014d4c:	3301      	adds	r3, #1
 8014d4e:	61fb      	str	r3, [r7, #28]
 8014d50:	69fb      	ldr	r3, [r7, #28]
 8014d52:	2b0f      	cmp	r3, #15
 8014d54:	d9e9      	bls.n	8014d2a <prvInitialiseNewTask+0x66>
 8014d56:	e000      	b.n	8014d5a <prvInitialiseNewTask+0x96>
			{
				break;
 8014d58:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d5c:	2200      	movs	r2, #0
 8014d5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8014d62:	e003      	b.n	8014d6c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d66:	2200      	movs	r2, #0
 8014d68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d6e:	2b06      	cmp	r3, #6
 8014d70:	d901      	bls.n	8014d76 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014d72:	2306      	movs	r3, #6
 8014d74:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014d80:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d84:	2200      	movs	r2, #0
 8014d86:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d8a:	3304      	adds	r3, #4
 8014d8c:	4618      	mov	r0, r3
 8014d8e:	f7ff f801 	bl	8013d94 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d94:	3318      	adds	r3, #24
 8014d96:	4618      	mov	r0, r3
 8014d98:	f7fe fffc 	bl	8013d94 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014da0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014da4:	f1c3 0207 	rsb	r2, r3, #7
 8014da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014daa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014db0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8014db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014db4:	2200      	movs	r2, #0
 8014db6:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dba:	2200      	movs	r2, #0
 8014dbc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dc2:	2200      	movs	r2, #0
 8014dc4:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8014dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dca:	3358      	adds	r3, #88	@ 0x58
 8014dcc:	224c      	movs	r2, #76	@ 0x4c
 8014dce:	2100      	movs	r1, #0
 8014dd0:	4618      	mov	r0, r3
 8014dd2:	f005 fa09 	bl	801a1e8 <memset>
 8014dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dd8:	4a0c      	ldr	r2, [pc, #48]	@ (8014e0c <prvInitialiseNewTask+0x148>)
 8014dda:	65da      	str	r2, [r3, #92]	@ 0x5c
 8014ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dde:	4a0c      	ldr	r2, [pc, #48]	@ (8014e10 <prvInitialiseNewTask+0x14c>)
 8014de0:	661a      	str	r2, [r3, #96]	@ 0x60
 8014de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014de4:	4a0b      	ldr	r2, [pc, #44]	@ (8014e14 <prvInitialiseNewTask+0x150>)
 8014de6:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014de8:	683a      	ldr	r2, [r7, #0]
 8014dea:	68f9      	ldr	r1, [r7, #12]
 8014dec:	69b8      	ldr	r0, [r7, #24]
 8014dee:	f001 f91b 	bl	8016028 <pxPortInitialiseStack>
 8014df2:	4602      	mov	r2, r0
 8014df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014df6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d002      	beq.n	8014e04 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014e02:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014e04:	bf00      	nop
 8014e06:	3720      	adds	r7, #32
 8014e08:	46bd      	mov	sp, r7
 8014e0a:	bd80      	pop	{r7, pc}
 8014e0c:	200079fc 	.word	0x200079fc
 8014e10:	20007a64 	.word	0x20007a64
 8014e14:	20007acc 	.word	0x20007acc

08014e18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014e18:	b580      	push	{r7, lr}
 8014e1a:	b082      	sub	sp, #8
 8014e1c:	af00      	add	r7, sp, #0
 8014e1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014e20:	f001 fa32 	bl	8016288 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014e24:	4b2c      	ldr	r3, [pc, #176]	@ (8014ed8 <prvAddNewTaskToReadyList+0xc0>)
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	3301      	adds	r3, #1
 8014e2a:	4a2b      	ldr	r2, [pc, #172]	@ (8014ed8 <prvAddNewTaskToReadyList+0xc0>)
 8014e2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014e2e:	4b2b      	ldr	r3, [pc, #172]	@ (8014edc <prvAddNewTaskToReadyList+0xc4>)
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d109      	bne.n	8014e4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014e36:	4a29      	ldr	r2, [pc, #164]	@ (8014edc <prvAddNewTaskToReadyList+0xc4>)
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014e3c:	4b26      	ldr	r3, [pc, #152]	@ (8014ed8 <prvAddNewTaskToReadyList+0xc0>)
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	2b01      	cmp	r3, #1
 8014e42:	d110      	bne.n	8014e66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014e44:	f000 fcf4 	bl	8015830 <prvInitialiseTaskLists>
 8014e48:	e00d      	b.n	8014e66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014e4a:	4b25      	ldr	r3, [pc, #148]	@ (8014ee0 <prvAddNewTaskToReadyList+0xc8>)
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d109      	bne.n	8014e66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014e52:	4b22      	ldr	r3, [pc, #136]	@ (8014edc <prvAddNewTaskToReadyList+0xc4>)
 8014e54:	681b      	ldr	r3, [r3, #0]
 8014e56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e5c:	429a      	cmp	r2, r3
 8014e5e:	d802      	bhi.n	8014e66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014e60:	4a1e      	ldr	r2, [pc, #120]	@ (8014edc <prvAddNewTaskToReadyList+0xc4>)
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014e66:	4b1f      	ldr	r3, [pc, #124]	@ (8014ee4 <prvAddNewTaskToReadyList+0xcc>)
 8014e68:	681b      	ldr	r3, [r3, #0]
 8014e6a:	3301      	adds	r3, #1
 8014e6c:	4a1d      	ldr	r2, [pc, #116]	@ (8014ee4 <prvAddNewTaskToReadyList+0xcc>)
 8014e6e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014e70:	4b1c      	ldr	r3, [pc, #112]	@ (8014ee4 <prvAddNewTaskToReadyList+0xcc>)
 8014e72:	681a      	ldr	r2, [r3, #0]
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e7c:	2201      	movs	r2, #1
 8014e7e:	409a      	lsls	r2, r3
 8014e80:	4b19      	ldr	r3, [pc, #100]	@ (8014ee8 <prvAddNewTaskToReadyList+0xd0>)
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	4313      	orrs	r3, r2
 8014e86:	4a18      	ldr	r2, [pc, #96]	@ (8014ee8 <prvAddNewTaskToReadyList+0xd0>)
 8014e88:	6013      	str	r3, [r2, #0]
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014e8e:	4613      	mov	r3, r2
 8014e90:	009b      	lsls	r3, r3, #2
 8014e92:	4413      	add	r3, r2
 8014e94:	009b      	lsls	r3, r3, #2
 8014e96:	4a15      	ldr	r2, [pc, #84]	@ (8014eec <prvAddNewTaskToReadyList+0xd4>)
 8014e98:	441a      	add	r2, r3
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	3304      	adds	r3, #4
 8014e9e:	4619      	mov	r1, r3
 8014ea0:	4610      	mov	r0, r2
 8014ea2:	f7fe ff84 	bl	8013dae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014ea6:	f001 fa21 	bl	80162ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8014ee0 <prvAddNewTaskToReadyList+0xc8>)
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d00e      	beq.n	8014ed0 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8014edc <prvAddNewTaskToReadyList+0xc4>)
 8014eb4:	681b      	ldr	r3, [r3, #0]
 8014eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ebc:	429a      	cmp	r2, r3
 8014ebe:	d207      	bcs.n	8014ed0 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8014ef0 <prvAddNewTaskToReadyList+0xd8>)
 8014ec2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014ec6:	601a      	str	r2, [r3, #0]
 8014ec8:	f3bf 8f4f 	dsb	sy
 8014ecc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014ed0:	bf00      	nop
 8014ed2:	3708      	adds	r7, #8
 8014ed4:	46bd      	mov	sp, r7
 8014ed6:	bd80      	pop	{r7, pc}
 8014ed8:	2000393c 	.word	0x2000393c
 8014edc:	2000383c 	.word	0x2000383c
 8014ee0:	20003948 	.word	0x20003948
 8014ee4:	20003958 	.word	0x20003958
 8014ee8:	20003944 	.word	0x20003944
 8014eec:	20003840 	.word	0x20003840
 8014ef0:	e000ed04 	.word	0xe000ed04

08014ef4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8014ef4:	b580      	push	{r7, lr}
 8014ef6:	b084      	sub	sp, #16
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8014efc:	f001 f9c4 	bl	8016288 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d102      	bne.n	8014f0c <vTaskDelete+0x18>
 8014f06:	4b39      	ldr	r3, [pc, #228]	@ (8014fec <vTaskDelete+0xf8>)
 8014f08:	681b      	ldr	r3, [r3, #0]
 8014f0a:	e000      	b.n	8014f0e <vTaskDelete+0x1a>
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	3304      	adds	r3, #4
 8014f14:	4618      	mov	r0, r3
 8014f16:	f7fe ffa7 	bl	8013e68 <uxListRemove>
 8014f1a:	4603      	mov	r3, r0
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d115      	bne.n	8014f4c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014f24:	4932      	ldr	r1, [pc, #200]	@ (8014ff0 <vTaskDelete+0xfc>)
 8014f26:	4613      	mov	r3, r2
 8014f28:	009b      	lsls	r3, r3, #2
 8014f2a:	4413      	add	r3, r2
 8014f2c:	009b      	lsls	r3, r3, #2
 8014f2e:	440b      	add	r3, r1
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d10a      	bne.n	8014f4c <vTaskDelete+0x58>
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f3a:	2201      	movs	r2, #1
 8014f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8014f40:	43da      	mvns	r2, r3
 8014f42:	4b2c      	ldr	r3, [pc, #176]	@ (8014ff4 <vTaskDelete+0x100>)
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	4013      	ands	r3, r2
 8014f48:	4a2a      	ldr	r2, [pc, #168]	@ (8014ff4 <vTaskDelete+0x100>)
 8014f4a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d004      	beq.n	8014f5e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	3318      	adds	r3, #24
 8014f58:	4618      	mov	r0, r3
 8014f5a:	f7fe ff85 	bl	8013e68 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8014f5e:	4b26      	ldr	r3, [pc, #152]	@ (8014ff8 <vTaskDelete+0x104>)
 8014f60:	681b      	ldr	r3, [r3, #0]
 8014f62:	3301      	adds	r3, #1
 8014f64:	4a24      	ldr	r2, [pc, #144]	@ (8014ff8 <vTaskDelete+0x104>)
 8014f66:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8014f68:	4b20      	ldr	r3, [pc, #128]	@ (8014fec <vTaskDelete+0xf8>)
 8014f6a:	681b      	ldr	r3, [r3, #0]
 8014f6c:	68fa      	ldr	r2, [r7, #12]
 8014f6e:	429a      	cmp	r2, r3
 8014f70:	d10b      	bne.n	8014f8a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	3304      	adds	r3, #4
 8014f76:	4619      	mov	r1, r3
 8014f78:	4820      	ldr	r0, [pc, #128]	@ (8014ffc <vTaskDelete+0x108>)
 8014f7a:	f7fe ff18 	bl	8013dae <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8014f7e:	4b20      	ldr	r3, [pc, #128]	@ (8015000 <vTaskDelete+0x10c>)
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	3301      	adds	r3, #1
 8014f84:	4a1e      	ldr	r2, [pc, #120]	@ (8015000 <vTaskDelete+0x10c>)
 8014f86:	6013      	str	r3, [r2, #0]
 8014f88:	e009      	b.n	8014f9e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8014f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8015004 <vTaskDelete+0x110>)
 8014f8c:	681b      	ldr	r3, [r3, #0]
 8014f8e:	3b01      	subs	r3, #1
 8014f90:	4a1c      	ldr	r2, [pc, #112]	@ (8015004 <vTaskDelete+0x110>)
 8014f92:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8014f94:	68f8      	ldr	r0, [r7, #12]
 8014f96:	f000 fcb9 	bl	801590c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8014f9a:	f000 fccd 	bl	8015938 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8014f9e:	f001 f9a5 	bl	80162ec <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8014fa2:	4b19      	ldr	r3, [pc, #100]	@ (8015008 <vTaskDelete+0x114>)
 8014fa4:	681b      	ldr	r3, [r3, #0]
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d01c      	beq.n	8014fe4 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 8014faa:	4b10      	ldr	r3, [pc, #64]	@ (8014fec <vTaskDelete+0xf8>)
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	68fa      	ldr	r2, [r7, #12]
 8014fb0:	429a      	cmp	r2, r3
 8014fb2:	d117      	bne.n	8014fe4 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8014fb4:	4b15      	ldr	r3, [pc, #84]	@ (801500c <vTaskDelete+0x118>)
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d00b      	beq.n	8014fd4 <vTaskDelete+0xe0>
	__asm volatile
 8014fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014fc0:	f383 8811 	msr	BASEPRI, r3
 8014fc4:	f3bf 8f6f 	isb	sy
 8014fc8:	f3bf 8f4f 	dsb	sy
 8014fcc:	60bb      	str	r3, [r7, #8]
}
 8014fce:	bf00      	nop
 8014fd0:	bf00      	nop
 8014fd2:	e7fd      	b.n	8014fd0 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8014fd4:	4b0e      	ldr	r3, [pc, #56]	@ (8015010 <vTaskDelete+0x11c>)
 8014fd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014fda:	601a      	str	r2, [r3, #0]
 8014fdc:	f3bf 8f4f 	dsb	sy
 8014fe0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014fe4:	bf00      	nop
 8014fe6:	3710      	adds	r7, #16
 8014fe8:	46bd      	mov	sp, r7
 8014fea:	bd80      	pop	{r7, pc}
 8014fec:	2000383c 	.word	0x2000383c
 8014ff0:	20003840 	.word	0x20003840
 8014ff4:	20003944 	.word	0x20003944
 8014ff8:	20003958 	.word	0x20003958
 8014ffc:	20003910 	.word	0x20003910
 8015000:	20003924 	.word	0x20003924
 8015004:	2000393c 	.word	0x2000393c
 8015008:	20003948 	.word	0x20003948
 801500c:	20003964 	.word	0x20003964
 8015010:	e000ed04 	.word	0xe000ed04

08015014 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8015014:	b580      	push	{r7, lr}
 8015016:	b084      	sub	sp, #16
 8015018:	af00      	add	r7, sp, #0
 801501a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801501c:	2300      	movs	r3, #0
 801501e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	2b00      	cmp	r3, #0
 8015024:	d018      	beq.n	8015058 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8015026:	4b14      	ldr	r3, [pc, #80]	@ (8015078 <vTaskDelay+0x64>)
 8015028:	681b      	ldr	r3, [r3, #0]
 801502a:	2b00      	cmp	r3, #0
 801502c:	d00b      	beq.n	8015046 <vTaskDelay+0x32>
	__asm volatile
 801502e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015032:	f383 8811 	msr	BASEPRI, r3
 8015036:	f3bf 8f6f 	isb	sy
 801503a:	f3bf 8f4f 	dsb	sy
 801503e:	60bb      	str	r3, [r7, #8]
}
 8015040:	bf00      	nop
 8015042:	bf00      	nop
 8015044:	e7fd      	b.n	8015042 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8015046:	f000 f8d7 	bl	80151f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801504a:	2100      	movs	r1, #0
 801504c:	6878      	ldr	r0, [r7, #4]
 801504e:	f000 ff85 	bl	8015f5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8015052:	f000 f8df 	bl	8015214 <xTaskResumeAll>
 8015056:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	2b00      	cmp	r3, #0
 801505c:	d107      	bne.n	801506e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801505e:	4b07      	ldr	r3, [pc, #28]	@ (801507c <vTaskDelay+0x68>)
 8015060:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015064:	601a      	str	r2, [r3, #0]
 8015066:	f3bf 8f4f 	dsb	sy
 801506a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801506e:	bf00      	nop
 8015070:	3710      	adds	r7, #16
 8015072:	46bd      	mov	sp, r7
 8015074:	bd80      	pop	{r7, pc}
 8015076:	bf00      	nop
 8015078:	20003964 	.word	0x20003964
 801507c:	e000ed04 	.word	0xe000ed04

08015080 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8015080:	b580      	push	{r7, lr}
 8015082:	b088      	sub	sp, #32
 8015084:	af00      	add	r7, sp, #0
 8015086:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 801508c:	69bb      	ldr	r3, [r7, #24]
 801508e:	2b00      	cmp	r3, #0
 8015090:	d10b      	bne.n	80150aa <eTaskGetState+0x2a>
	__asm volatile
 8015092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015096:	f383 8811 	msr	BASEPRI, r3
 801509a:	f3bf 8f6f 	isb	sy
 801509e:	f3bf 8f4f 	dsb	sy
 80150a2:	60bb      	str	r3, [r7, #8]
}
 80150a4:	bf00      	nop
 80150a6:	bf00      	nop
 80150a8:	e7fd      	b.n	80150a6 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80150aa:	4b24      	ldr	r3, [pc, #144]	@ (801513c <eTaskGetState+0xbc>)
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	69ba      	ldr	r2, [r7, #24]
 80150b0:	429a      	cmp	r2, r3
 80150b2:	d102      	bne.n	80150ba <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80150b4:	2300      	movs	r3, #0
 80150b6:	77fb      	strb	r3, [r7, #31]
 80150b8:	e03a      	b.n	8015130 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 80150ba:	f001 f8e5 	bl	8016288 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80150be:	69bb      	ldr	r3, [r7, #24]
 80150c0:	695b      	ldr	r3, [r3, #20]
 80150c2:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80150c4:	4b1e      	ldr	r3, [pc, #120]	@ (8015140 <eTaskGetState+0xc0>)
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80150ca:	4b1e      	ldr	r3, [pc, #120]	@ (8015144 <eTaskGetState+0xc4>)
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80150d0:	f001 f90c 	bl	80162ec <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80150d4:	697a      	ldr	r2, [r7, #20]
 80150d6:	693b      	ldr	r3, [r7, #16]
 80150d8:	429a      	cmp	r2, r3
 80150da:	d003      	beq.n	80150e4 <eTaskGetState+0x64>
 80150dc:	697a      	ldr	r2, [r7, #20]
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	429a      	cmp	r2, r3
 80150e2:	d102      	bne.n	80150ea <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80150e4:	2302      	movs	r3, #2
 80150e6:	77fb      	strb	r3, [r7, #31]
 80150e8:	e022      	b.n	8015130 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80150ea:	697b      	ldr	r3, [r7, #20]
 80150ec:	4a16      	ldr	r2, [pc, #88]	@ (8015148 <eTaskGetState+0xc8>)
 80150ee:	4293      	cmp	r3, r2
 80150f0:	d112      	bne.n	8015118 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80150f2:	69bb      	ldr	r3, [r7, #24]
 80150f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d10b      	bne.n	8015112 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80150fa:	69bb      	ldr	r3, [r7, #24]
 80150fc:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8015100:	b2db      	uxtb	r3, r3
 8015102:	2b01      	cmp	r3, #1
 8015104:	d102      	bne.n	801510c <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 8015106:	2302      	movs	r3, #2
 8015108:	77fb      	strb	r3, [r7, #31]
 801510a:	e011      	b.n	8015130 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 801510c:	2303      	movs	r3, #3
 801510e:	77fb      	strb	r3, [r7, #31]
 8015110:	e00e      	b.n	8015130 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8015112:	2302      	movs	r3, #2
 8015114:	77fb      	strb	r3, [r7, #31]
 8015116:	e00b      	b.n	8015130 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8015118:	697b      	ldr	r3, [r7, #20]
 801511a:	4a0c      	ldr	r2, [pc, #48]	@ (801514c <eTaskGetState+0xcc>)
 801511c:	4293      	cmp	r3, r2
 801511e:	d002      	beq.n	8015126 <eTaskGetState+0xa6>
 8015120:	697b      	ldr	r3, [r7, #20]
 8015122:	2b00      	cmp	r3, #0
 8015124:	d102      	bne.n	801512c <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8015126:	2304      	movs	r3, #4
 8015128:	77fb      	strb	r3, [r7, #31]
 801512a:	e001      	b.n	8015130 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 801512c:	2301      	movs	r3, #1
 801512e:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8015130:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8015132:	4618      	mov	r0, r3
 8015134:	3720      	adds	r7, #32
 8015136:	46bd      	mov	sp, r7
 8015138:	bd80      	pop	{r7, pc}
 801513a:	bf00      	nop
 801513c:	2000383c 	.word	0x2000383c
 8015140:	200038f4 	.word	0x200038f4
 8015144:	200038f8 	.word	0x200038f8
 8015148:	20003928 	.word	0x20003928
 801514c:	20003910 	.word	0x20003910

08015150 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8015150:	b580      	push	{r7, lr}
 8015152:	b086      	sub	sp, #24
 8015154:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8015156:	4b20      	ldr	r3, [pc, #128]	@ (80151d8 <vTaskStartScheduler+0x88>)
 8015158:	9301      	str	r3, [sp, #4]
 801515a:	2300      	movs	r3, #0
 801515c:	9300      	str	r3, [sp, #0]
 801515e:	2300      	movs	r3, #0
 8015160:	2240      	movs	r2, #64	@ 0x40
 8015162:	491e      	ldr	r1, [pc, #120]	@ (80151dc <vTaskStartScheduler+0x8c>)
 8015164:	481e      	ldr	r0, [pc, #120]	@ (80151e0 <vTaskStartScheduler+0x90>)
 8015166:	f7ff fd6b 	bl	8014c40 <xTaskCreate>
 801516a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	2b01      	cmp	r3, #1
 8015170:	d11d      	bne.n	80151ae <vTaskStartScheduler+0x5e>
	__asm volatile
 8015172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015176:	f383 8811 	msr	BASEPRI, r3
 801517a:	f3bf 8f6f 	isb	sy
 801517e:	f3bf 8f4f 	dsb	sy
 8015182:	60bb      	str	r3, [r7, #8]
}
 8015184:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8015186:	4b17      	ldr	r3, [pc, #92]	@ (80151e4 <vTaskStartScheduler+0x94>)
 8015188:	681b      	ldr	r3, [r3, #0]
 801518a:	3358      	adds	r3, #88	@ 0x58
 801518c:	4a16      	ldr	r2, [pc, #88]	@ (80151e8 <vTaskStartScheduler+0x98>)
 801518e:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015190:	4b16      	ldr	r3, [pc, #88]	@ (80151ec <vTaskStartScheduler+0x9c>)
 8015192:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015196:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8015198:	4b15      	ldr	r3, [pc, #84]	@ (80151f0 <vTaskStartScheduler+0xa0>)
 801519a:	2201      	movs	r2, #1
 801519c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801519e:	4b15      	ldr	r3, [pc, #84]	@ (80151f4 <vTaskStartScheduler+0xa4>)
 80151a0:	2200      	movs	r2, #0
 80151a2:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80151a4:	f7ee fa54 	bl	8003650 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80151a8:	f000 ffca 	bl	8016140 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80151ac:	e00f      	b.n	80151ce <vTaskStartScheduler+0x7e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80151b4:	d10b      	bne.n	80151ce <vTaskStartScheduler+0x7e>
	__asm volatile
 80151b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151ba:	f383 8811 	msr	BASEPRI, r3
 80151be:	f3bf 8f6f 	isb	sy
 80151c2:	f3bf 8f4f 	dsb	sy
 80151c6:	607b      	str	r3, [r7, #4]
}
 80151c8:	bf00      	nop
 80151ca:	bf00      	nop
 80151cc:	e7fd      	b.n	80151ca <vTaskStartScheduler+0x7a>
}
 80151ce:	bf00      	nop
 80151d0:	3710      	adds	r7, #16
 80151d2:	46bd      	mov	sp, r7
 80151d4:	bd80      	pop	{r7, pc}
 80151d6:	bf00      	nop
 80151d8:	20003960 	.word	0x20003960
 80151dc:	0801e578 	.word	0x0801e578
 80151e0:	08015801 	.word	0x08015801
 80151e4:	2000383c 	.word	0x2000383c
 80151e8:	200004cc 	.word	0x200004cc
 80151ec:	2000395c 	.word	0x2000395c
 80151f0:	20003948 	.word	0x20003948
 80151f4:	20003940 	.word	0x20003940

080151f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80151f8:	b480      	push	{r7}
 80151fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80151fc:	4b04      	ldr	r3, [pc, #16]	@ (8015210 <vTaskSuspendAll+0x18>)
 80151fe:	681b      	ldr	r3, [r3, #0]
 8015200:	3301      	adds	r3, #1
 8015202:	4a03      	ldr	r2, [pc, #12]	@ (8015210 <vTaskSuspendAll+0x18>)
 8015204:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8015206:	bf00      	nop
 8015208:	46bd      	mov	sp, r7
 801520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801520e:	4770      	bx	lr
 8015210:	20003964 	.word	0x20003964

08015214 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015214:	b580      	push	{r7, lr}
 8015216:	b084      	sub	sp, #16
 8015218:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801521a:	2300      	movs	r3, #0
 801521c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801521e:	2300      	movs	r3, #0
 8015220:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8015222:	4b42      	ldr	r3, [pc, #264]	@ (801532c <xTaskResumeAll+0x118>)
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	2b00      	cmp	r3, #0
 8015228:	d10b      	bne.n	8015242 <xTaskResumeAll+0x2e>
	__asm volatile
 801522a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801522e:	f383 8811 	msr	BASEPRI, r3
 8015232:	f3bf 8f6f 	isb	sy
 8015236:	f3bf 8f4f 	dsb	sy
 801523a:	603b      	str	r3, [r7, #0]
}
 801523c:	bf00      	nop
 801523e:	bf00      	nop
 8015240:	e7fd      	b.n	801523e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015242:	f001 f821 	bl	8016288 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8015246:	4b39      	ldr	r3, [pc, #228]	@ (801532c <xTaskResumeAll+0x118>)
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	3b01      	subs	r3, #1
 801524c:	4a37      	ldr	r2, [pc, #220]	@ (801532c <xTaskResumeAll+0x118>)
 801524e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015250:	4b36      	ldr	r3, [pc, #216]	@ (801532c <xTaskResumeAll+0x118>)
 8015252:	681b      	ldr	r3, [r3, #0]
 8015254:	2b00      	cmp	r3, #0
 8015256:	d161      	bne.n	801531c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8015258:	4b35      	ldr	r3, [pc, #212]	@ (8015330 <xTaskResumeAll+0x11c>)
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	2b00      	cmp	r3, #0
 801525e:	d05d      	beq.n	801531c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015260:	e02e      	b.n	80152c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015262:	4b34      	ldr	r3, [pc, #208]	@ (8015334 <xTaskResumeAll+0x120>)
 8015264:	68db      	ldr	r3, [r3, #12]
 8015266:	68db      	ldr	r3, [r3, #12]
 8015268:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	3318      	adds	r3, #24
 801526e:	4618      	mov	r0, r3
 8015270:	f7fe fdfa 	bl	8013e68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015274:	68fb      	ldr	r3, [r7, #12]
 8015276:	3304      	adds	r3, #4
 8015278:	4618      	mov	r0, r3
 801527a:	f7fe fdf5 	bl	8013e68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015282:	2201      	movs	r2, #1
 8015284:	409a      	lsls	r2, r3
 8015286:	4b2c      	ldr	r3, [pc, #176]	@ (8015338 <xTaskResumeAll+0x124>)
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	4313      	orrs	r3, r2
 801528c:	4a2a      	ldr	r2, [pc, #168]	@ (8015338 <xTaskResumeAll+0x124>)
 801528e:	6013      	str	r3, [r2, #0]
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015294:	4613      	mov	r3, r2
 8015296:	009b      	lsls	r3, r3, #2
 8015298:	4413      	add	r3, r2
 801529a:	009b      	lsls	r3, r3, #2
 801529c:	4a27      	ldr	r2, [pc, #156]	@ (801533c <xTaskResumeAll+0x128>)
 801529e:	441a      	add	r2, r3
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	3304      	adds	r3, #4
 80152a4:	4619      	mov	r1, r3
 80152a6:	4610      	mov	r0, r2
 80152a8:	f7fe fd81 	bl	8013dae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80152b0:	4b23      	ldr	r3, [pc, #140]	@ (8015340 <xTaskResumeAll+0x12c>)
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80152b6:	429a      	cmp	r2, r3
 80152b8:	d302      	bcc.n	80152c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80152ba:	4b22      	ldr	r3, [pc, #136]	@ (8015344 <xTaskResumeAll+0x130>)
 80152bc:	2201      	movs	r2, #1
 80152be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80152c0:	4b1c      	ldr	r3, [pc, #112]	@ (8015334 <xTaskResumeAll+0x120>)
 80152c2:	681b      	ldr	r3, [r3, #0]
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d1cc      	bne.n	8015262 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80152c8:	68fb      	ldr	r3, [r7, #12]
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d001      	beq.n	80152d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80152ce:	f000 fb33 	bl	8015938 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80152d2:	4b1d      	ldr	r3, [pc, #116]	@ (8015348 <xTaskResumeAll+0x134>)
 80152d4:	681b      	ldr	r3, [r3, #0]
 80152d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d010      	beq.n	8015300 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80152de:	f000 f847 	bl	8015370 <xTaskIncrementTick>
 80152e2:	4603      	mov	r3, r0
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d002      	beq.n	80152ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80152e8:	4b16      	ldr	r3, [pc, #88]	@ (8015344 <xTaskResumeAll+0x130>)
 80152ea:	2201      	movs	r2, #1
 80152ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	3b01      	subs	r3, #1
 80152f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d1f1      	bne.n	80152de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80152fa:	4b13      	ldr	r3, [pc, #76]	@ (8015348 <xTaskResumeAll+0x134>)
 80152fc:	2200      	movs	r2, #0
 80152fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015300:	4b10      	ldr	r3, [pc, #64]	@ (8015344 <xTaskResumeAll+0x130>)
 8015302:	681b      	ldr	r3, [r3, #0]
 8015304:	2b00      	cmp	r3, #0
 8015306:	d009      	beq.n	801531c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015308:	2301      	movs	r3, #1
 801530a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801530c:	4b0f      	ldr	r3, [pc, #60]	@ (801534c <xTaskResumeAll+0x138>)
 801530e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015312:	601a      	str	r2, [r3, #0]
 8015314:	f3bf 8f4f 	dsb	sy
 8015318:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801531c:	f000 ffe6 	bl	80162ec <vPortExitCritical>

	return xAlreadyYielded;
 8015320:	68bb      	ldr	r3, [r7, #8]
}
 8015322:	4618      	mov	r0, r3
 8015324:	3710      	adds	r7, #16
 8015326:	46bd      	mov	sp, r7
 8015328:	bd80      	pop	{r7, pc}
 801532a:	bf00      	nop
 801532c:	20003964 	.word	0x20003964
 8015330:	2000393c 	.word	0x2000393c
 8015334:	200038fc 	.word	0x200038fc
 8015338:	20003944 	.word	0x20003944
 801533c:	20003840 	.word	0x20003840
 8015340:	2000383c 	.word	0x2000383c
 8015344:	20003950 	.word	0x20003950
 8015348:	2000394c 	.word	0x2000394c
 801534c:	e000ed04 	.word	0xe000ed04

08015350 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8015350:	b480      	push	{r7}
 8015352:	b083      	sub	sp, #12
 8015354:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8015356:	4b05      	ldr	r3, [pc, #20]	@ (801536c <xTaskGetTickCount+0x1c>)
 8015358:	681b      	ldr	r3, [r3, #0]
 801535a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801535c:	687b      	ldr	r3, [r7, #4]
}
 801535e:	4618      	mov	r0, r3
 8015360:	370c      	adds	r7, #12
 8015362:	46bd      	mov	sp, r7
 8015364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015368:	4770      	bx	lr
 801536a:	bf00      	nop
 801536c:	20003940 	.word	0x20003940

08015370 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015370:	b580      	push	{r7, lr}
 8015372:	b086      	sub	sp, #24
 8015374:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8015376:	2300      	movs	r3, #0
 8015378:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801537a:	4b4f      	ldr	r3, [pc, #316]	@ (80154b8 <xTaskIncrementTick+0x148>)
 801537c:	681b      	ldr	r3, [r3, #0]
 801537e:	2b00      	cmp	r3, #0
 8015380:	f040 808f 	bne.w	80154a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015384:	4b4d      	ldr	r3, [pc, #308]	@ (80154bc <xTaskIncrementTick+0x14c>)
 8015386:	681b      	ldr	r3, [r3, #0]
 8015388:	3301      	adds	r3, #1
 801538a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801538c:	4a4b      	ldr	r2, [pc, #300]	@ (80154bc <xTaskIncrementTick+0x14c>)
 801538e:	693b      	ldr	r3, [r7, #16]
 8015390:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8015392:	693b      	ldr	r3, [r7, #16]
 8015394:	2b00      	cmp	r3, #0
 8015396:	d121      	bne.n	80153dc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8015398:	4b49      	ldr	r3, [pc, #292]	@ (80154c0 <xTaskIncrementTick+0x150>)
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	681b      	ldr	r3, [r3, #0]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d00b      	beq.n	80153ba <xTaskIncrementTick+0x4a>
	__asm volatile
 80153a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153a6:	f383 8811 	msr	BASEPRI, r3
 80153aa:	f3bf 8f6f 	isb	sy
 80153ae:	f3bf 8f4f 	dsb	sy
 80153b2:	603b      	str	r3, [r7, #0]
}
 80153b4:	bf00      	nop
 80153b6:	bf00      	nop
 80153b8:	e7fd      	b.n	80153b6 <xTaskIncrementTick+0x46>
 80153ba:	4b41      	ldr	r3, [pc, #260]	@ (80154c0 <xTaskIncrementTick+0x150>)
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	60fb      	str	r3, [r7, #12]
 80153c0:	4b40      	ldr	r3, [pc, #256]	@ (80154c4 <xTaskIncrementTick+0x154>)
 80153c2:	681b      	ldr	r3, [r3, #0]
 80153c4:	4a3e      	ldr	r2, [pc, #248]	@ (80154c0 <xTaskIncrementTick+0x150>)
 80153c6:	6013      	str	r3, [r2, #0]
 80153c8:	4a3e      	ldr	r2, [pc, #248]	@ (80154c4 <xTaskIncrementTick+0x154>)
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	6013      	str	r3, [r2, #0]
 80153ce:	4b3e      	ldr	r3, [pc, #248]	@ (80154c8 <xTaskIncrementTick+0x158>)
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	3301      	adds	r3, #1
 80153d4:	4a3c      	ldr	r2, [pc, #240]	@ (80154c8 <xTaskIncrementTick+0x158>)
 80153d6:	6013      	str	r3, [r2, #0]
 80153d8:	f000 faae 	bl	8015938 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80153dc:	4b3b      	ldr	r3, [pc, #236]	@ (80154cc <xTaskIncrementTick+0x15c>)
 80153de:	681b      	ldr	r3, [r3, #0]
 80153e0:	693a      	ldr	r2, [r7, #16]
 80153e2:	429a      	cmp	r2, r3
 80153e4:	d348      	bcc.n	8015478 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80153e6:	4b36      	ldr	r3, [pc, #216]	@ (80154c0 <xTaskIncrementTick+0x150>)
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	681b      	ldr	r3, [r3, #0]
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d104      	bne.n	80153fa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80153f0:	4b36      	ldr	r3, [pc, #216]	@ (80154cc <xTaskIncrementTick+0x15c>)
 80153f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80153f6:	601a      	str	r2, [r3, #0]
					break;
 80153f8:	e03e      	b.n	8015478 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80153fa:	4b31      	ldr	r3, [pc, #196]	@ (80154c0 <xTaskIncrementTick+0x150>)
 80153fc:	681b      	ldr	r3, [r3, #0]
 80153fe:	68db      	ldr	r3, [r3, #12]
 8015400:	68db      	ldr	r3, [r3, #12]
 8015402:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015404:	68bb      	ldr	r3, [r7, #8]
 8015406:	685b      	ldr	r3, [r3, #4]
 8015408:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801540a:	693a      	ldr	r2, [r7, #16]
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	429a      	cmp	r2, r3
 8015410:	d203      	bcs.n	801541a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015412:	4a2e      	ldr	r2, [pc, #184]	@ (80154cc <xTaskIncrementTick+0x15c>)
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8015418:	e02e      	b.n	8015478 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801541a:	68bb      	ldr	r3, [r7, #8]
 801541c:	3304      	adds	r3, #4
 801541e:	4618      	mov	r0, r3
 8015420:	f7fe fd22 	bl	8013e68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015424:	68bb      	ldr	r3, [r7, #8]
 8015426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015428:	2b00      	cmp	r3, #0
 801542a:	d004      	beq.n	8015436 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801542c:	68bb      	ldr	r3, [r7, #8]
 801542e:	3318      	adds	r3, #24
 8015430:	4618      	mov	r0, r3
 8015432:	f7fe fd19 	bl	8013e68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015436:	68bb      	ldr	r3, [r7, #8]
 8015438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801543a:	2201      	movs	r2, #1
 801543c:	409a      	lsls	r2, r3
 801543e:	4b24      	ldr	r3, [pc, #144]	@ (80154d0 <xTaskIncrementTick+0x160>)
 8015440:	681b      	ldr	r3, [r3, #0]
 8015442:	4313      	orrs	r3, r2
 8015444:	4a22      	ldr	r2, [pc, #136]	@ (80154d0 <xTaskIncrementTick+0x160>)
 8015446:	6013      	str	r3, [r2, #0]
 8015448:	68bb      	ldr	r3, [r7, #8]
 801544a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801544c:	4613      	mov	r3, r2
 801544e:	009b      	lsls	r3, r3, #2
 8015450:	4413      	add	r3, r2
 8015452:	009b      	lsls	r3, r3, #2
 8015454:	4a1f      	ldr	r2, [pc, #124]	@ (80154d4 <xTaskIncrementTick+0x164>)
 8015456:	441a      	add	r2, r3
 8015458:	68bb      	ldr	r3, [r7, #8]
 801545a:	3304      	adds	r3, #4
 801545c:	4619      	mov	r1, r3
 801545e:	4610      	mov	r0, r2
 8015460:	f7fe fca5 	bl	8013dae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015464:	68bb      	ldr	r3, [r7, #8]
 8015466:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015468:	4b1b      	ldr	r3, [pc, #108]	@ (80154d8 <xTaskIncrementTick+0x168>)
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801546e:	429a      	cmp	r2, r3
 8015470:	d3b9      	bcc.n	80153e6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8015472:	2301      	movs	r3, #1
 8015474:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015476:	e7b6      	b.n	80153e6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015478:	4b17      	ldr	r3, [pc, #92]	@ (80154d8 <xTaskIncrementTick+0x168>)
 801547a:	681b      	ldr	r3, [r3, #0]
 801547c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801547e:	4915      	ldr	r1, [pc, #84]	@ (80154d4 <xTaskIncrementTick+0x164>)
 8015480:	4613      	mov	r3, r2
 8015482:	009b      	lsls	r3, r3, #2
 8015484:	4413      	add	r3, r2
 8015486:	009b      	lsls	r3, r3, #2
 8015488:	440b      	add	r3, r1
 801548a:	681b      	ldr	r3, [r3, #0]
 801548c:	2b01      	cmp	r3, #1
 801548e:	d901      	bls.n	8015494 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8015490:	2301      	movs	r3, #1
 8015492:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8015494:	4b11      	ldr	r3, [pc, #68]	@ (80154dc <xTaskIncrementTick+0x16c>)
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	2b00      	cmp	r3, #0
 801549a:	d007      	beq.n	80154ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 801549c:	2301      	movs	r3, #1
 801549e:	617b      	str	r3, [r7, #20]
 80154a0:	e004      	b.n	80154ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80154a2:	4b0f      	ldr	r3, [pc, #60]	@ (80154e0 <xTaskIncrementTick+0x170>)
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	3301      	adds	r3, #1
 80154a8:	4a0d      	ldr	r2, [pc, #52]	@ (80154e0 <xTaskIncrementTick+0x170>)
 80154aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80154ac:	697b      	ldr	r3, [r7, #20]
}
 80154ae:	4618      	mov	r0, r3
 80154b0:	3718      	adds	r7, #24
 80154b2:	46bd      	mov	sp, r7
 80154b4:	bd80      	pop	{r7, pc}
 80154b6:	bf00      	nop
 80154b8:	20003964 	.word	0x20003964
 80154bc:	20003940 	.word	0x20003940
 80154c0:	200038f4 	.word	0x200038f4
 80154c4:	200038f8 	.word	0x200038f8
 80154c8:	20003954 	.word	0x20003954
 80154cc:	2000395c 	.word	0x2000395c
 80154d0:	20003944 	.word	0x20003944
 80154d4:	20003840 	.word	0x20003840
 80154d8:	2000383c 	.word	0x2000383c
 80154dc:	20003950 	.word	0x20003950
 80154e0:	2000394c 	.word	0x2000394c

080154e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80154e4:	b580      	push	{r7, lr}
 80154e6:	b086      	sub	sp, #24
 80154e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80154ea:	4b35      	ldr	r3, [pc, #212]	@ (80155c0 <vTaskSwitchContext+0xdc>)
 80154ec:	681b      	ldr	r3, [r3, #0]
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d003      	beq.n	80154fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80154f2:	4b34      	ldr	r3, [pc, #208]	@ (80155c4 <vTaskSwitchContext+0xe0>)
 80154f4:	2201      	movs	r2, #1
 80154f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80154f8:	e05e      	b.n	80155b8 <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 80154fa:	4b32      	ldr	r3, [pc, #200]	@ (80155c4 <vTaskSwitchContext+0xe0>)
 80154fc:	2200      	movs	r2, #0
 80154fe:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8015500:	f7ee f8ad 	bl	800365e <getRunTimeCounterValue>
 8015504:	4603      	mov	r3, r0
 8015506:	4a30      	ldr	r2, [pc, #192]	@ (80155c8 <vTaskSwitchContext+0xe4>)
 8015508:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 801550a:	4b2f      	ldr	r3, [pc, #188]	@ (80155c8 <vTaskSwitchContext+0xe4>)
 801550c:	681a      	ldr	r2, [r3, #0]
 801550e:	4b2f      	ldr	r3, [pc, #188]	@ (80155cc <vTaskSwitchContext+0xe8>)
 8015510:	681b      	ldr	r3, [r3, #0]
 8015512:	429a      	cmp	r2, r3
 8015514:	d909      	bls.n	801552a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8015516:	4b2e      	ldr	r3, [pc, #184]	@ (80155d0 <vTaskSwitchContext+0xec>)
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801551c:	4a2a      	ldr	r2, [pc, #168]	@ (80155c8 <vTaskSwitchContext+0xe4>)
 801551e:	6810      	ldr	r0, [r2, #0]
 8015520:	4a2a      	ldr	r2, [pc, #168]	@ (80155cc <vTaskSwitchContext+0xe8>)
 8015522:	6812      	ldr	r2, [r2, #0]
 8015524:	1a82      	subs	r2, r0, r2
 8015526:	440a      	add	r2, r1
 8015528:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 801552a:	4b27      	ldr	r3, [pc, #156]	@ (80155c8 <vTaskSwitchContext+0xe4>)
 801552c:	681b      	ldr	r3, [r3, #0]
 801552e:	4a27      	ldr	r2, [pc, #156]	@ (80155cc <vTaskSwitchContext+0xe8>)
 8015530:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015532:	4b28      	ldr	r3, [pc, #160]	@ (80155d4 <vTaskSwitchContext+0xf0>)
 8015534:	681b      	ldr	r3, [r3, #0]
 8015536:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8015538:	68fb      	ldr	r3, [r7, #12]
 801553a:	fab3 f383 	clz	r3, r3
 801553e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8015540:	7afb      	ldrb	r3, [r7, #11]
 8015542:	f1c3 031f 	rsb	r3, r3, #31
 8015546:	617b      	str	r3, [r7, #20]
 8015548:	4923      	ldr	r1, [pc, #140]	@ (80155d8 <vTaskSwitchContext+0xf4>)
 801554a:	697a      	ldr	r2, [r7, #20]
 801554c:	4613      	mov	r3, r2
 801554e:	009b      	lsls	r3, r3, #2
 8015550:	4413      	add	r3, r2
 8015552:	009b      	lsls	r3, r3, #2
 8015554:	440b      	add	r3, r1
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	2b00      	cmp	r3, #0
 801555a:	d10b      	bne.n	8015574 <vTaskSwitchContext+0x90>
	__asm volatile
 801555c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015560:	f383 8811 	msr	BASEPRI, r3
 8015564:	f3bf 8f6f 	isb	sy
 8015568:	f3bf 8f4f 	dsb	sy
 801556c:	607b      	str	r3, [r7, #4]
}
 801556e:	bf00      	nop
 8015570:	bf00      	nop
 8015572:	e7fd      	b.n	8015570 <vTaskSwitchContext+0x8c>
 8015574:	697a      	ldr	r2, [r7, #20]
 8015576:	4613      	mov	r3, r2
 8015578:	009b      	lsls	r3, r3, #2
 801557a:	4413      	add	r3, r2
 801557c:	009b      	lsls	r3, r3, #2
 801557e:	4a16      	ldr	r2, [pc, #88]	@ (80155d8 <vTaskSwitchContext+0xf4>)
 8015580:	4413      	add	r3, r2
 8015582:	613b      	str	r3, [r7, #16]
 8015584:	693b      	ldr	r3, [r7, #16]
 8015586:	685b      	ldr	r3, [r3, #4]
 8015588:	685a      	ldr	r2, [r3, #4]
 801558a:	693b      	ldr	r3, [r7, #16]
 801558c:	605a      	str	r2, [r3, #4]
 801558e:	693b      	ldr	r3, [r7, #16]
 8015590:	685a      	ldr	r2, [r3, #4]
 8015592:	693b      	ldr	r3, [r7, #16]
 8015594:	3308      	adds	r3, #8
 8015596:	429a      	cmp	r2, r3
 8015598:	d104      	bne.n	80155a4 <vTaskSwitchContext+0xc0>
 801559a:	693b      	ldr	r3, [r7, #16]
 801559c:	685b      	ldr	r3, [r3, #4]
 801559e:	685a      	ldr	r2, [r3, #4]
 80155a0:	693b      	ldr	r3, [r7, #16]
 80155a2:	605a      	str	r2, [r3, #4]
 80155a4:	693b      	ldr	r3, [r7, #16]
 80155a6:	685b      	ldr	r3, [r3, #4]
 80155a8:	68db      	ldr	r3, [r3, #12]
 80155aa:	4a09      	ldr	r2, [pc, #36]	@ (80155d0 <vTaskSwitchContext+0xec>)
 80155ac:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80155ae:	4b08      	ldr	r3, [pc, #32]	@ (80155d0 <vTaskSwitchContext+0xec>)
 80155b0:	681b      	ldr	r3, [r3, #0]
 80155b2:	3358      	adds	r3, #88	@ 0x58
 80155b4:	4a09      	ldr	r2, [pc, #36]	@ (80155dc <vTaskSwitchContext+0xf8>)
 80155b6:	6013      	str	r3, [r2, #0]
}
 80155b8:	bf00      	nop
 80155ba:	3718      	adds	r7, #24
 80155bc:	46bd      	mov	sp, r7
 80155be:	bd80      	pop	{r7, pc}
 80155c0:	20003964 	.word	0x20003964
 80155c4:	20003950 	.word	0x20003950
 80155c8:	2000396c 	.word	0x2000396c
 80155cc:	20003968 	.word	0x20003968
 80155d0:	2000383c 	.word	0x2000383c
 80155d4:	20003944 	.word	0x20003944
 80155d8:	20003840 	.word	0x20003840
 80155dc:	200004cc 	.word	0x200004cc

080155e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b084      	sub	sp, #16
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	6078      	str	r0, [r7, #4]
 80155e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d10b      	bne.n	8015608 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80155f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80155f4:	f383 8811 	msr	BASEPRI, r3
 80155f8:	f3bf 8f6f 	isb	sy
 80155fc:	f3bf 8f4f 	dsb	sy
 8015600:	60fb      	str	r3, [r7, #12]
}
 8015602:	bf00      	nop
 8015604:	bf00      	nop
 8015606:	e7fd      	b.n	8015604 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015608:	4b07      	ldr	r3, [pc, #28]	@ (8015628 <vTaskPlaceOnEventList+0x48>)
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	3318      	adds	r3, #24
 801560e:	4619      	mov	r1, r3
 8015610:	6878      	ldr	r0, [r7, #4]
 8015612:	f7fe fbf0 	bl	8013df6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015616:	2101      	movs	r1, #1
 8015618:	6838      	ldr	r0, [r7, #0]
 801561a:	f000 fc9f 	bl	8015f5c <prvAddCurrentTaskToDelayedList>
}
 801561e:	bf00      	nop
 8015620:	3710      	adds	r7, #16
 8015622:	46bd      	mov	sp, r7
 8015624:	bd80      	pop	{r7, pc}
 8015626:	bf00      	nop
 8015628:	2000383c 	.word	0x2000383c

0801562c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801562c:	b580      	push	{r7, lr}
 801562e:	b086      	sub	sp, #24
 8015630:	af00      	add	r7, sp, #0
 8015632:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	68db      	ldr	r3, [r3, #12]
 8015638:	68db      	ldr	r3, [r3, #12]
 801563a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801563c:	693b      	ldr	r3, [r7, #16]
 801563e:	2b00      	cmp	r3, #0
 8015640:	d10b      	bne.n	801565a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8015642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015646:	f383 8811 	msr	BASEPRI, r3
 801564a:	f3bf 8f6f 	isb	sy
 801564e:	f3bf 8f4f 	dsb	sy
 8015652:	60fb      	str	r3, [r7, #12]
}
 8015654:	bf00      	nop
 8015656:	bf00      	nop
 8015658:	e7fd      	b.n	8015656 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801565a:	693b      	ldr	r3, [r7, #16]
 801565c:	3318      	adds	r3, #24
 801565e:	4618      	mov	r0, r3
 8015660:	f7fe fc02 	bl	8013e68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015664:	4b1d      	ldr	r3, [pc, #116]	@ (80156dc <xTaskRemoveFromEventList+0xb0>)
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	2b00      	cmp	r3, #0
 801566a:	d11c      	bne.n	80156a6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801566c:	693b      	ldr	r3, [r7, #16]
 801566e:	3304      	adds	r3, #4
 8015670:	4618      	mov	r0, r3
 8015672:	f7fe fbf9 	bl	8013e68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015676:	693b      	ldr	r3, [r7, #16]
 8015678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801567a:	2201      	movs	r2, #1
 801567c:	409a      	lsls	r2, r3
 801567e:	4b18      	ldr	r3, [pc, #96]	@ (80156e0 <xTaskRemoveFromEventList+0xb4>)
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	4313      	orrs	r3, r2
 8015684:	4a16      	ldr	r2, [pc, #88]	@ (80156e0 <xTaskRemoveFromEventList+0xb4>)
 8015686:	6013      	str	r3, [r2, #0]
 8015688:	693b      	ldr	r3, [r7, #16]
 801568a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801568c:	4613      	mov	r3, r2
 801568e:	009b      	lsls	r3, r3, #2
 8015690:	4413      	add	r3, r2
 8015692:	009b      	lsls	r3, r3, #2
 8015694:	4a13      	ldr	r2, [pc, #76]	@ (80156e4 <xTaskRemoveFromEventList+0xb8>)
 8015696:	441a      	add	r2, r3
 8015698:	693b      	ldr	r3, [r7, #16]
 801569a:	3304      	adds	r3, #4
 801569c:	4619      	mov	r1, r3
 801569e:	4610      	mov	r0, r2
 80156a0:	f7fe fb85 	bl	8013dae <vListInsertEnd>
 80156a4:	e005      	b.n	80156b2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80156a6:	693b      	ldr	r3, [r7, #16]
 80156a8:	3318      	adds	r3, #24
 80156aa:	4619      	mov	r1, r3
 80156ac:	480e      	ldr	r0, [pc, #56]	@ (80156e8 <xTaskRemoveFromEventList+0xbc>)
 80156ae:	f7fe fb7e 	bl	8013dae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80156b2:	693b      	ldr	r3, [r7, #16]
 80156b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80156b6:	4b0d      	ldr	r3, [pc, #52]	@ (80156ec <xTaskRemoveFromEventList+0xc0>)
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80156bc:	429a      	cmp	r2, r3
 80156be:	d905      	bls.n	80156cc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80156c0:	2301      	movs	r3, #1
 80156c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80156c4:	4b0a      	ldr	r3, [pc, #40]	@ (80156f0 <xTaskRemoveFromEventList+0xc4>)
 80156c6:	2201      	movs	r2, #1
 80156c8:	601a      	str	r2, [r3, #0]
 80156ca:	e001      	b.n	80156d0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80156cc:	2300      	movs	r3, #0
 80156ce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80156d0:	697b      	ldr	r3, [r7, #20]
}
 80156d2:	4618      	mov	r0, r3
 80156d4:	3718      	adds	r7, #24
 80156d6:	46bd      	mov	sp, r7
 80156d8:	bd80      	pop	{r7, pc}
 80156da:	bf00      	nop
 80156dc:	20003964 	.word	0x20003964
 80156e0:	20003944 	.word	0x20003944
 80156e4:	20003840 	.word	0x20003840
 80156e8:	200038fc 	.word	0x200038fc
 80156ec:	2000383c 	.word	0x2000383c
 80156f0:	20003950 	.word	0x20003950

080156f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80156f4:	b480      	push	{r7}
 80156f6:	b083      	sub	sp, #12
 80156f8:	af00      	add	r7, sp, #0
 80156fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80156fc:	4b06      	ldr	r3, [pc, #24]	@ (8015718 <vTaskInternalSetTimeOutState+0x24>)
 80156fe:	681a      	ldr	r2, [r3, #0]
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015704:	4b05      	ldr	r3, [pc, #20]	@ (801571c <vTaskInternalSetTimeOutState+0x28>)
 8015706:	681a      	ldr	r2, [r3, #0]
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	605a      	str	r2, [r3, #4]
}
 801570c:	bf00      	nop
 801570e:	370c      	adds	r7, #12
 8015710:	46bd      	mov	sp, r7
 8015712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015716:	4770      	bx	lr
 8015718:	20003954 	.word	0x20003954
 801571c:	20003940 	.word	0x20003940

08015720 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015720:	b580      	push	{r7, lr}
 8015722:	b088      	sub	sp, #32
 8015724:	af00      	add	r7, sp, #0
 8015726:	6078      	str	r0, [r7, #4]
 8015728:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	2b00      	cmp	r3, #0
 801572e:	d10b      	bne.n	8015748 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8015730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015734:	f383 8811 	msr	BASEPRI, r3
 8015738:	f3bf 8f6f 	isb	sy
 801573c:	f3bf 8f4f 	dsb	sy
 8015740:	613b      	str	r3, [r7, #16]
}
 8015742:	bf00      	nop
 8015744:	bf00      	nop
 8015746:	e7fd      	b.n	8015744 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8015748:	683b      	ldr	r3, [r7, #0]
 801574a:	2b00      	cmp	r3, #0
 801574c:	d10b      	bne.n	8015766 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 801574e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015752:	f383 8811 	msr	BASEPRI, r3
 8015756:	f3bf 8f6f 	isb	sy
 801575a:	f3bf 8f4f 	dsb	sy
 801575e:	60fb      	str	r3, [r7, #12]
}
 8015760:	bf00      	nop
 8015762:	bf00      	nop
 8015764:	e7fd      	b.n	8015762 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8015766:	f000 fd8f 	bl	8016288 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801576a:	4b1d      	ldr	r3, [pc, #116]	@ (80157e0 <xTaskCheckForTimeOut+0xc0>)
 801576c:	681b      	ldr	r3, [r3, #0]
 801576e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	685b      	ldr	r3, [r3, #4]
 8015774:	69ba      	ldr	r2, [r7, #24]
 8015776:	1ad3      	subs	r3, r2, r3
 8015778:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801577a:	683b      	ldr	r3, [r7, #0]
 801577c:	681b      	ldr	r3, [r3, #0]
 801577e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8015782:	d102      	bne.n	801578a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015784:	2300      	movs	r3, #0
 8015786:	61fb      	str	r3, [r7, #28]
 8015788:	e023      	b.n	80157d2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	681a      	ldr	r2, [r3, #0]
 801578e:	4b15      	ldr	r3, [pc, #84]	@ (80157e4 <xTaskCheckForTimeOut+0xc4>)
 8015790:	681b      	ldr	r3, [r3, #0]
 8015792:	429a      	cmp	r2, r3
 8015794:	d007      	beq.n	80157a6 <xTaskCheckForTimeOut+0x86>
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	685b      	ldr	r3, [r3, #4]
 801579a:	69ba      	ldr	r2, [r7, #24]
 801579c:	429a      	cmp	r2, r3
 801579e:	d302      	bcc.n	80157a6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80157a0:	2301      	movs	r3, #1
 80157a2:	61fb      	str	r3, [r7, #28]
 80157a4:	e015      	b.n	80157d2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80157a6:	683b      	ldr	r3, [r7, #0]
 80157a8:	681b      	ldr	r3, [r3, #0]
 80157aa:	697a      	ldr	r2, [r7, #20]
 80157ac:	429a      	cmp	r2, r3
 80157ae:	d20b      	bcs.n	80157c8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80157b0:	683b      	ldr	r3, [r7, #0]
 80157b2:	681a      	ldr	r2, [r3, #0]
 80157b4:	697b      	ldr	r3, [r7, #20]
 80157b6:	1ad2      	subs	r2, r2, r3
 80157b8:	683b      	ldr	r3, [r7, #0]
 80157ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80157bc:	6878      	ldr	r0, [r7, #4]
 80157be:	f7ff ff99 	bl	80156f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80157c2:	2300      	movs	r3, #0
 80157c4:	61fb      	str	r3, [r7, #28]
 80157c6:	e004      	b.n	80157d2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80157c8:	683b      	ldr	r3, [r7, #0]
 80157ca:	2200      	movs	r2, #0
 80157cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80157ce:	2301      	movs	r3, #1
 80157d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80157d2:	f000 fd8b 	bl	80162ec <vPortExitCritical>

	return xReturn;
 80157d6:	69fb      	ldr	r3, [r7, #28]
}
 80157d8:	4618      	mov	r0, r3
 80157da:	3720      	adds	r7, #32
 80157dc:	46bd      	mov	sp, r7
 80157de:	bd80      	pop	{r7, pc}
 80157e0:	20003940 	.word	0x20003940
 80157e4:	20003954 	.word	0x20003954

080157e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80157e8:	b480      	push	{r7}
 80157ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80157ec:	4b03      	ldr	r3, [pc, #12]	@ (80157fc <vTaskMissedYield+0x14>)
 80157ee:	2201      	movs	r2, #1
 80157f0:	601a      	str	r2, [r3, #0]
}
 80157f2:	bf00      	nop
 80157f4:	46bd      	mov	sp, r7
 80157f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157fa:	4770      	bx	lr
 80157fc:	20003950 	.word	0x20003950

08015800 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015800:	b580      	push	{r7, lr}
 8015802:	b082      	sub	sp, #8
 8015804:	af00      	add	r7, sp, #0
 8015806:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015808:	f000 f852 	bl	80158b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801580c:	4b06      	ldr	r3, [pc, #24]	@ (8015828 <prvIdleTask+0x28>)
 801580e:	681b      	ldr	r3, [r3, #0]
 8015810:	2b01      	cmp	r3, #1
 8015812:	d9f9      	bls.n	8015808 <prvIdleTask+0x8>
			{
				taskYIELD();
 8015814:	4b05      	ldr	r3, [pc, #20]	@ (801582c <prvIdleTask+0x2c>)
 8015816:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801581a:	601a      	str	r2, [r3, #0]
 801581c:	f3bf 8f4f 	dsb	sy
 8015820:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8015824:	e7f0      	b.n	8015808 <prvIdleTask+0x8>
 8015826:	bf00      	nop
 8015828:	20003840 	.word	0x20003840
 801582c:	e000ed04 	.word	0xe000ed04

08015830 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015830:	b580      	push	{r7, lr}
 8015832:	b082      	sub	sp, #8
 8015834:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015836:	2300      	movs	r3, #0
 8015838:	607b      	str	r3, [r7, #4]
 801583a:	e00c      	b.n	8015856 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801583c:	687a      	ldr	r2, [r7, #4]
 801583e:	4613      	mov	r3, r2
 8015840:	009b      	lsls	r3, r3, #2
 8015842:	4413      	add	r3, r2
 8015844:	009b      	lsls	r3, r3, #2
 8015846:	4a12      	ldr	r2, [pc, #72]	@ (8015890 <prvInitialiseTaskLists+0x60>)
 8015848:	4413      	add	r3, r2
 801584a:	4618      	mov	r0, r3
 801584c:	f7fe fa82 	bl	8013d54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	3301      	adds	r3, #1
 8015854:	607b      	str	r3, [r7, #4]
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	2b06      	cmp	r3, #6
 801585a:	d9ef      	bls.n	801583c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801585c:	480d      	ldr	r0, [pc, #52]	@ (8015894 <prvInitialiseTaskLists+0x64>)
 801585e:	f7fe fa79 	bl	8013d54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015862:	480d      	ldr	r0, [pc, #52]	@ (8015898 <prvInitialiseTaskLists+0x68>)
 8015864:	f7fe fa76 	bl	8013d54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015868:	480c      	ldr	r0, [pc, #48]	@ (801589c <prvInitialiseTaskLists+0x6c>)
 801586a:	f7fe fa73 	bl	8013d54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801586e:	480c      	ldr	r0, [pc, #48]	@ (80158a0 <prvInitialiseTaskLists+0x70>)
 8015870:	f7fe fa70 	bl	8013d54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015874:	480b      	ldr	r0, [pc, #44]	@ (80158a4 <prvInitialiseTaskLists+0x74>)
 8015876:	f7fe fa6d 	bl	8013d54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801587a:	4b0b      	ldr	r3, [pc, #44]	@ (80158a8 <prvInitialiseTaskLists+0x78>)
 801587c:	4a05      	ldr	r2, [pc, #20]	@ (8015894 <prvInitialiseTaskLists+0x64>)
 801587e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015880:	4b0a      	ldr	r3, [pc, #40]	@ (80158ac <prvInitialiseTaskLists+0x7c>)
 8015882:	4a05      	ldr	r2, [pc, #20]	@ (8015898 <prvInitialiseTaskLists+0x68>)
 8015884:	601a      	str	r2, [r3, #0]
}
 8015886:	bf00      	nop
 8015888:	3708      	adds	r7, #8
 801588a:	46bd      	mov	sp, r7
 801588c:	bd80      	pop	{r7, pc}
 801588e:	bf00      	nop
 8015890:	20003840 	.word	0x20003840
 8015894:	200038cc 	.word	0x200038cc
 8015898:	200038e0 	.word	0x200038e0
 801589c:	200038fc 	.word	0x200038fc
 80158a0:	20003910 	.word	0x20003910
 80158a4:	20003928 	.word	0x20003928
 80158a8:	200038f4 	.word	0x200038f4
 80158ac:	200038f8 	.word	0x200038f8

080158b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80158b0:	b580      	push	{r7, lr}
 80158b2:	b082      	sub	sp, #8
 80158b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80158b6:	e019      	b.n	80158ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80158b8:	f000 fce6 	bl	8016288 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80158bc:	4b10      	ldr	r3, [pc, #64]	@ (8015900 <prvCheckTasksWaitingTermination+0x50>)
 80158be:	68db      	ldr	r3, [r3, #12]
 80158c0:	68db      	ldr	r3, [r3, #12]
 80158c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	3304      	adds	r3, #4
 80158c8:	4618      	mov	r0, r3
 80158ca:	f7fe facd 	bl	8013e68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80158ce:	4b0d      	ldr	r3, [pc, #52]	@ (8015904 <prvCheckTasksWaitingTermination+0x54>)
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	3b01      	subs	r3, #1
 80158d4:	4a0b      	ldr	r2, [pc, #44]	@ (8015904 <prvCheckTasksWaitingTermination+0x54>)
 80158d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80158d8:	4b0b      	ldr	r3, [pc, #44]	@ (8015908 <prvCheckTasksWaitingTermination+0x58>)
 80158da:	681b      	ldr	r3, [r3, #0]
 80158dc:	3b01      	subs	r3, #1
 80158de:	4a0a      	ldr	r2, [pc, #40]	@ (8015908 <prvCheckTasksWaitingTermination+0x58>)
 80158e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80158e2:	f000 fd03 	bl	80162ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80158e6:	6878      	ldr	r0, [r7, #4]
 80158e8:	f000 f810 	bl	801590c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80158ec:	4b06      	ldr	r3, [pc, #24]	@ (8015908 <prvCheckTasksWaitingTermination+0x58>)
 80158ee:	681b      	ldr	r3, [r3, #0]
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d1e1      	bne.n	80158b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80158f4:	bf00      	nop
 80158f6:	bf00      	nop
 80158f8:	3708      	adds	r7, #8
 80158fa:	46bd      	mov	sp, r7
 80158fc:	bd80      	pop	{r7, pc}
 80158fe:	bf00      	nop
 8015900:	20003910 	.word	0x20003910
 8015904:	2000393c 	.word	0x2000393c
 8015908:	20003924 	.word	0x20003924

0801590c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801590c:	b580      	push	{r7, lr}
 801590e:	b082      	sub	sp, #8
 8015910:	af00      	add	r7, sp, #0
 8015912:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	3358      	adds	r3, #88	@ 0x58
 8015918:	4618      	mov	r0, r3
 801591a:	f004 fc71 	bl	801a200 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015922:	4618      	mov	r0, r3
 8015924:	f000 fea0 	bl	8016668 <vPortFree>
			vPortFree( pxTCB );
 8015928:	6878      	ldr	r0, [r7, #4]
 801592a:	f000 fe9d 	bl	8016668 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801592e:	bf00      	nop
 8015930:	3708      	adds	r7, #8
 8015932:	46bd      	mov	sp, r7
 8015934:	bd80      	pop	{r7, pc}
	...

08015938 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015938:	b480      	push	{r7}
 801593a:	b083      	sub	sp, #12
 801593c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801593e:	4b0c      	ldr	r3, [pc, #48]	@ (8015970 <prvResetNextTaskUnblockTime+0x38>)
 8015940:	681b      	ldr	r3, [r3, #0]
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	2b00      	cmp	r3, #0
 8015946:	d104      	bne.n	8015952 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015948:	4b0a      	ldr	r3, [pc, #40]	@ (8015974 <prvResetNextTaskUnblockTime+0x3c>)
 801594a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801594e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015950:	e008      	b.n	8015964 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015952:	4b07      	ldr	r3, [pc, #28]	@ (8015970 <prvResetNextTaskUnblockTime+0x38>)
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	68db      	ldr	r3, [r3, #12]
 8015958:	68db      	ldr	r3, [r3, #12]
 801595a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	685b      	ldr	r3, [r3, #4]
 8015960:	4a04      	ldr	r2, [pc, #16]	@ (8015974 <prvResetNextTaskUnblockTime+0x3c>)
 8015962:	6013      	str	r3, [r2, #0]
}
 8015964:	bf00      	nop
 8015966:	370c      	adds	r7, #12
 8015968:	46bd      	mov	sp, r7
 801596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801596e:	4770      	bx	lr
 8015970:	200038f4 	.word	0x200038f4
 8015974:	2000395c 	.word	0x2000395c

08015978 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015978:	b480      	push	{r7}
 801597a:	b083      	sub	sp, #12
 801597c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801597e:	4b0b      	ldr	r3, [pc, #44]	@ (80159ac <xTaskGetSchedulerState+0x34>)
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	2b00      	cmp	r3, #0
 8015984:	d102      	bne.n	801598c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015986:	2301      	movs	r3, #1
 8015988:	607b      	str	r3, [r7, #4]
 801598a:	e008      	b.n	801599e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801598c:	4b08      	ldr	r3, [pc, #32]	@ (80159b0 <xTaskGetSchedulerState+0x38>)
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	2b00      	cmp	r3, #0
 8015992:	d102      	bne.n	801599a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015994:	2302      	movs	r3, #2
 8015996:	607b      	str	r3, [r7, #4]
 8015998:	e001      	b.n	801599e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801599a:	2300      	movs	r3, #0
 801599c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801599e:	687b      	ldr	r3, [r7, #4]
	}
 80159a0:	4618      	mov	r0, r3
 80159a2:	370c      	adds	r7, #12
 80159a4:	46bd      	mov	sp, r7
 80159a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159aa:	4770      	bx	lr
 80159ac:	20003948 	.word	0x20003948
 80159b0:	20003964 	.word	0x20003964

080159b4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80159b4:	b580      	push	{r7, lr}
 80159b6:	b084      	sub	sp, #16
 80159b8:	af00      	add	r7, sp, #0
 80159ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80159c0:	2300      	movs	r3, #0
 80159c2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d05e      	beq.n	8015a88 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80159ca:	68bb      	ldr	r3, [r7, #8]
 80159cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80159ce:	4b31      	ldr	r3, [pc, #196]	@ (8015a94 <xTaskPriorityInherit+0xe0>)
 80159d0:	681b      	ldr	r3, [r3, #0]
 80159d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80159d4:	429a      	cmp	r2, r3
 80159d6:	d24e      	bcs.n	8015a76 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80159d8:	68bb      	ldr	r3, [r7, #8]
 80159da:	699b      	ldr	r3, [r3, #24]
 80159dc:	2b00      	cmp	r3, #0
 80159de:	db06      	blt.n	80159ee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80159e0:	4b2c      	ldr	r3, [pc, #176]	@ (8015a94 <xTaskPriorityInherit+0xe0>)
 80159e2:	681b      	ldr	r3, [r3, #0]
 80159e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80159e6:	f1c3 0207 	rsb	r2, r3, #7
 80159ea:	68bb      	ldr	r3, [r7, #8]
 80159ec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80159ee:	68bb      	ldr	r3, [r7, #8]
 80159f0:	6959      	ldr	r1, [r3, #20]
 80159f2:	68bb      	ldr	r3, [r7, #8]
 80159f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80159f6:	4613      	mov	r3, r2
 80159f8:	009b      	lsls	r3, r3, #2
 80159fa:	4413      	add	r3, r2
 80159fc:	009b      	lsls	r3, r3, #2
 80159fe:	4a26      	ldr	r2, [pc, #152]	@ (8015a98 <xTaskPriorityInherit+0xe4>)
 8015a00:	4413      	add	r3, r2
 8015a02:	4299      	cmp	r1, r3
 8015a04:	d12f      	bne.n	8015a66 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015a06:	68bb      	ldr	r3, [r7, #8]
 8015a08:	3304      	adds	r3, #4
 8015a0a:	4618      	mov	r0, r3
 8015a0c:	f7fe fa2c 	bl	8013e68 <uxListRemove>
 8015a10:	4603      	mov	r3, r0
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d10a      	bne.n	8015a2c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8015a16:	68bb      	ldr	r3, [r7, #8]
 8015a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a1a:	2201      	movs	r2, #1
 8015a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8015a20:	43da      	mvns	r2, r3
 8015a22:	4b1e      	ldr	r3, [pc, #120]	@ (8015a9c <xTaskPriorityInherit+0xe8>)
 8015a24:	681b      	ldr	r3, [r3, #0]
 8015a26:	4013      	ands	r3, r2
 8015a28:	4a1c      	ldr	r2, [pc, #112]	@ (8015a9c <xTaskPriorityInherit+0xe8>)
 8015a2a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015a2c:	4b19      	ldr	r3, [pc, #100]	@ (8015a94 <xTaskPriorityInherit+0xe0>)
 8015a2e:	681b      	ldr	r3, [r3, #0]
 8015a30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015a32:	68bb      	ldr	r3, [r7, #8]
 8015a34:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8015a36:	68bb      	ldr	r3, [r7, #8]
 8015a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a3a:	2201      	movs	r2, #1
 8015a3c:	409a      	lsls	r2, r3
 8015a3e:	4b17      	ldr	r3, [pc, #92]	@ (8015a9c <xTaskPriorityInherit+0xe8>)
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	4313      	orrs	r3, r2
 8015a44:	4a15      	ldr	r2, [pc, #84]	@ (8015a9c <xTaskPriorityInherit+0xe8>)
 8015a46:	6013      	str	r3, [r2, #0]
 8015a48:	68bb      	ldr	r3, [r7, #8]
 8015a4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015a4c:	4613      	mov	r3, r2
 8015a4e:	009b      	lsls	r3, r3, #2
 8015a50:	4413      	add	r3, r2
 8015a52:	009b      	lsls	r3, r3, #2
 8015a54:	4a10      	ldr	r2, [pc, #64]	@ (8015a98 <xTaskPriorityInherit+0xe4>)
 8015a56:	441a      	add	r2, r3
 8015a58:	68bb      	ldr	r3, [r7, #8]
 8015a5a:	3304      	adds	r3, #4
 8015a5c:	4619      	mov	r1, r3
 8015a5e:	4610      	mov	r0, r2
 8015a60:	f7fe f9a5 	bl	8013dae <vListInsertEnd>
 8015a64:	e004      	b.n	8015a70 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015a66:	4b0b      	ldr	r3, [pc, #44]	@ (8015a94 <xTaskPriorityInherit+0xe0>)
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015a6c:	68bb      	ldr	r3, [r7, #8]
 8015a6e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8015a70:	2301      	movs	r3, #1
 8015a72:	60fb      	str	r3, [r7, #12]
 8015a74:	e008      	b.n	8015a88 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8015a76:	68bb      	ldr	r3, [r7, #8]
 8015a78:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015a7a:	4b06      	ldr	r3, [pc, #24]	@ (8015a94 <xTaskPriorityInherit+0xe0>)
 8015a7c:	681b      	ldr	r3, [r3, #0]
 8015a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a80:	429a      	cmp	r2, r3
 8015a82:	d201      	bcs.n	8015a88 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8015a84:	2301      	movs	r3, #1
 8015a86:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015a88:	68fb      	ldr	r3, [r7, #12]
	}
 8015a8a:	4618      	mov	r0, r3
 8015a8c:	3710      	adds	r7, #16
 8015a8e:	46bd      	mov	sp, r7
 8015a90:	bd80      	pop	{r7, pc}
 8015a92:	bf00      	nop
 8015a94:	2000383c 	.word	0x2000383c
 8015a98:	20003840 	.word	0x20003840
 8015a9c:	20003944 	.word	0x20003944

08015aa0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015aa0:	b580      	push	{r7, lr}
 8015aa2:	b086      	sub	sp, #24
 8015aa4:	af00      	add	r7, sp, #0
 8015aa6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015aac:	2300      	movs	r3, #0
 8015aae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d070      	beq.n	8015b98 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015ab6:	4b3b      	ldr	r3, [pc, #236]	@ (8015ba4 <xTaskPriorityDisinherit+0x104>)
 8015ab8:	681b      	ldr	r3, [r3, #0]
 8015aba:	693a      	ldr	r2, [r7, #16]
 8015abc:	429a      	cmp	r2, r3
 8015abe:	d00b      	beq.n	8015ad8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8015ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ac4:	f383 8811 	msr	BASEPRI, r3
 8015ac8:	f3bf 8f6f 	isb	sy
 8015acc:	f3bf 8f4f 	dsb	sy
 8015ad0:	60fb      	str	r3, [r7, #12]
}
 8015ad2:	bf00      	nop
 8015ad4:	bf00      	nop
 8015ad6:	e7fd      	b.n	8015ad4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8015ad8:	693b      	ldr	r3, [r7, #16]
 8015ada:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d10b      	bne.n	8015af8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8015ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ae4:	f383 8811 	msr	BASEPRI, r3
 8015ae8:	f3bf 8f6f 	isb	sy
 8015aec:	f3bf 8f4f 	dsb	sy
 8015af0:	60bb      	str	r3, [r7, #8]
}
 8015af2:	bf00      	nop
 8015af4:	bf00      	nop
 8015af6:	e7fd      	b.n	8015af4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8015af8:	693b      	ldr	r3, [r7, #16]
 8015afa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015afc:	1e5a      	subs	r2, r3, #1
 8015afe:	693b      	ldr	r3, [r7, #16]
 8015b00:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015b02:	693b      	ldr	r3, [r7, #16]
 8015b04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015b06:	693b      	ldr	r3, [r7, #16]
 8015b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015b0a:	429a      	cmp	r2, r3
 8015b0c:	d044      	beq.n	8015b98 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8015b0e:	693b      	ldr	r3, [r7, #16]
 8015b10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d140      	bne.n	8015b98 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015b16:	693b      	ldr	r3, [r7, #16]
 8015b18:	3304      	adds	r3, #4
 8015b1a:	4618      	mov	r0, r3
 8015b1c:	f7fe f9a4 	bl	8013e68 <uxListRemove>
 8015b20:	4603      	mov	r3, r0
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d115      	bne.n	8015b52 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8015b26:	693b      	ldr	r3, [r7, #16]
 8015b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015b2a:	491f      	ldr	r1, [pc, #124]	@ (8015ba8 <xTaskPriorityDisinherit+0x108>)
 8015b2c:	4613      	mov	r3, r2
 8015b2e:	009b      	lsls	r3, r3, #2
 8015b30:	4413      	add	r3, r2
 8015b32:	009b      	lsls	r3, r3, #2
 8015b34:	440b      	add	r3, r1
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d10a      	bne.n	8015b52 <xTaskPriorityDisinherit+0xb2>
 8015b3c:	693b      	ldr	r3, [r7, #16]
 8015b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b40:	2201      	movs	r2, #1
 8015b42:	fa02 f303 	lsl.w	r3, r2, r3
 8015b46:	43da      	mvns	r2, r3
 8015b48:	4b18      	ldr	r3, [pc, #96]	@ (8015bac <xTaskPriorityDisinherit+0x10c>)
 8015b4a:	681b      	ldr	r3, [r3, #0]
 8015b4c:	4013      	ands	r3, r2
 8015b4e:	4a17      	ldr	r2, [pc, #92]	@ (8015bac <xTaskPriorityDisinherit+0x10c>)
 8015b50:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015b52:	693b      	ldr	r3, [r7, #16]
 8015b54:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015b56:	693b      	ldr	r3, [r7, #16]
 8015b58:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015b5a:	693b      	ldr	r3, [r7, #16]
 8015b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b5e:	f1c3 0207 	rsb	r2, r3, #7
 8015b62:	693b      	ldr	r3, [r7, #16]
 8015b64:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015b66:	693b      	ldr	r3, [r7, #16]
 8015b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b6a:	2201      	movs	r2, #1
 8015b6c:	409a      	lsls	r2, r3
 8015b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8015bac <xTaskPriorityDisinherit+0x10c>)
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	4313      	orrs	r3, r2
 8015b74:	4a0d      	ldr	r2, [pc, #52]	@ (8015bac <xTaskPriorityDisinherit+0x10c>)
 8015b76:	6013      	str	r3, [r2, #0]
 8015b78:	693b      	ldr	r3, [r7, #16]
 8015b7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015b7c:	4613      	mov	r3, r2
 8015b7e:	009b      	lsls	r3, r3, #2
 8015b80:	4413      	add	r3, r2
 8015b82:	009b      	lsls	r3, r3, #2
 8015b84:	4a08      	ldr	r2, [pc, #32]	@ (8015ba8 <xTaskPriorityDisinherit+0x108>)
 8015b86:	441a      	add	r2, r3
 8015b88:	693b      	ldr	r3, [r7, #16]
 8015b8a:	3304      	adds	r3, #4
 8015b8c:	4619      	mov	r1, r3
 8015b8e:	4610      	mov	r0, r2
 8015b90:	f7fe f90d 	bl	8013dae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015b94:	2301      	movs	r3, #1
 8015b96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015b98:	697b      	ldr	r3, [r7, #20]
	}
 8015b9a:	4618      	mov	r0, r3
 8015b9c:	3718      	adds	r7, #24
 8015b9e:	46bd      	mov	sp, r7
 8015ba0:	bd80      	pop	{r7, pc}
 8015ba2:	bf00      	nop
 8015ba4:	2000383c 	.word	0x2000383c
 8015ba8:	20003840 	.word	0x20003840
 8015bac:	20003944 	.word	0x20003944

08015bb0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8015bb0:	b580      	push	{r7, lr}
 8015bb2:	b088      	sub	sp, #32
 8015bb4:	af00      	add	r7, sp, #0
 8015bb6:	6078      	str	r0, [r7, #4]
 8015bb8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8015bbe:	2301      	movs	r3, #1
 8015bc0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d079      	beq.n	8015cbc <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8015bc8:	69bb      	ldr	r3, [r7, #24]
 8015bca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d10b      	bne.n	8015be8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8015bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015bd4:	f383 8811 	msr	BASEPRI, r3
 8015bd8:	f3bf 8f6f 	isb	sy
 8015bdc:	f3bf 8f4f 	dsb	sy
 8015be0:	60fb      	str	r3, [r7, #12]
}
 8015be2:	bf00      	nop
 8015be4:	bf00      	nop
 8015be6:	e7fd      	b.n	8015be4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8015be8:	69bb      	ldr	r3, [r7, #24]
 8015bea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015bec:	683a      	ldr	r2, [r7, #0]
 8015bee:	429a      	cmp	r2, r3
 8015bf0:	d902      	bls.n	8015bf8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8015bf2:	683b      	ldr	r3, [r7, #0]
 8015bf4:	61fb      	str	r3, [r7, #28]
 8015bf6:	e002      	b.n	8015bfe <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8015bf8:	69bb      	ldr	r3, [r7, #24]
 8015bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015bfc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8015bfe:	69bb      	ldr	r3, [r7, #24]
 8015c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c02:	69fa      	ldr	r2, [r7, #28]
 8015c04:	429a      	cmp	r2, r3
 8015c06:	d059      	beq.n	8015cbc <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8015c08:	69bb      	ldr	r3, [r7, #24]
 8015c0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015c0c:	697a      	ldr	r2, [r7, #20]
 8015c0e:	429a      	cmp	r2, r3
 8015c10:	d154      	bne.n	8015cbc <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8015c12:	4b2c      	ldr	r3, [pc, #176]	@ (8015cc4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	69ba      	ldr	r2, [r7, #24]
 8015c18:	429a      	cmp	r2, r3
 8015c1a:	d10b      	bne.n	8015c34 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8015c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c20:	f383 8811 	msr	BASEPRI, r3
 8015c24:	f3bf 8f6f 	isb	sy
 8015c28:	f3bf 8f4f 	dsb	sy
 8015c2c:	60bb      	str	r3, [r7, #8]
}
 8015c2e:	bf00      	nop
 8015c30:	bf00      	nop
 8015c32:	e7fd      	b.n	8015c30 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8015c34:	69bb      	ldr	r3, [r7, #24]
 8015c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c38:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8015c3a:	69bb      	ldr	r3, [r7, #24]
 8015c3c:	69fa      	ldr	r2, [r7, #28]
 8015c3e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015c40:	69bb      	ldr	r3, [r7, #24]
 8015c42:	699b      	ldr	r3, [r3, #24]
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	db04      	blt.n	8015c52 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015c48:	69fb      	ldr	r3, [r7, #28]
 8015c4a:	f1c3 0207 	rsb	r2, r3, #7
 8015c4e:	69bb      	ldr	r3, [r7, #24]
 8015c50:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8015c52:	69bb      	ldr	r3, [r7, #24]
 8015c54:	6959      	ldr	r1, [r3, #20]
 8015c56:	693a      	ldr	r2, [r7, #16]
 8015c58:	4613      	mov	r3, r2
 8015c5a:	009b      	lsls	r3, r3, #2
 8015c5c:	4413      	add	r3, r2
 8015c5e:	009b      	lsls	r3, r3, #2
 8015c60:	4a19      	ldr	r2, [pc, #100]	@ (8015cc8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8015c62:	4413      	add	r3, r2
 8015c64:	4299      	cmp	r1, r3
 8015c66:	d129      	bne.n	8015cbc <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015c68:	69bb      	ldr	r3, [r7, #24]
 8015c6a:	3304      	adds	r3, #4
 8015c6c:	4618      	mov	r0, r3
 8015c6e:	f7fe f8fb 	bl	8013e68 <uxListRemove>
 8015c72:	4603      	mov	r3, r0
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d10a      	bne.n	8015c8e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8015c78:	69bb      	ldr	r3, [r7, #24]
 8015c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c7c:	2201      	movs	r2, #1
 8015c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8015c82:	43da      	mvns	r2, r3
 8015c84:	4b11      	ldr	r3, [pc, #68]	@ (8015ccc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8015c86:	681b      	ldr	r3, [r3, #0]
 8015c88:	4013      	ands	r3, r2
 8015c8a:	4a10      	ldr	r2, [pc, #64]	@ (8015ccc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8015c8c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8015c8e:	69bb      	ldr	r3, [r7, #24]
 8015c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c92:	2201      	movs	r2, #1
 8015c94:	409a      	lsls	r2, r3
 8015c96:	4b0d      	ldr	r3, [pc, #52]	@ (8015ccc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	4313      	orrs	r3, r2
 8015c9c:	4a0b      	ldr	r2, [pc, #44]	@ (8015ccc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8015c9e:	6013      	str	r3, [r2, #0]
 8015ca0:	69bb      	ldr	r3, [r7, #24]
 8015ca2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015ca4:	4613      	mov	r3, r2
 8015ca6:	009b      	lsls	r3, r3, #2
 8015ca8:	4413      	add	r3, r2
 8015caa:	009b      	lsls	r3, r3, #2
 8015cac:	4a06      	ldr	r2, [pc, #24]	@ (8015cc8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8015cae:	441a      	add	r2, r3
 8015cb0:	69bb      	ldr	r3, [r7, #24]
 8015cb2:	3304      	adds	r3, #4
 8015cb4:	4619      	mov	r1, r3
 8015cb6:	4610      	mov	r0, r2
 8015cb8:	f7fe f879 	bl	8013dae <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015cbc:	bf00      	nop
 8015cbe:	3720      	adds	r7, #32
 8015cc0:	46bd      	mov	sp, r7
 8015cc2:	bd80      	pop	{r7, pc}
 8015cc4:	2000383c 	.word	0x2000383c
 8015cc8:	20003840 	.word	0x20003840
 8015ccc:	20003944 	.word	0x20003944

08015cd0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8015cd0:	b480      	push	{r7}
 8015cd2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8015cd4:	4b07      	ldr	r3, [pc, #28]	@ (8015cf4 <pvTaskIncrementMutexHeldCount+0x24>)
 8015cd6:	681b      	ldr	r3, [r3, #0]
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d004      	beq.n	8015ce6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8015cdc:	4b05      	ldr	r3, [pc, #20]	@ (8015cf4 <pvTaskIncrementMutexHeldCount+0x24>)
 8015cde:	681b      	ldr	r3, [r3, #0]
 8015ce0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015ce2:	3201      	adds	r2, #1
 8015ce4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8015ce6:	4b03      	ldr	r3, [pc, #12]	@ (8015cf4 <pvTaskIncrementMutexHeldCount+0x24>)
 8015ce8:	681b      	ldr	r3, [r3, #0]
	}
 8015cea:	4618      	mov	r0, r3
 8015cec:	46bd      	mov	sp, r7
 8015cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cf2:	4770      	bx	lr
 8015cf4:	2000383c 	.word	0x2000383c

08015cf8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8015cf8:	b580      	push	{r7, lr}
 8015cfa:	b084      	sub	sp, #16
 8015cfc:	af00      	add	r7, sp, #0
 8015cfe:	6078      	str	r0, [r7, #4]
 8015d00:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8015d02:	f000 fac1 	bl	8016288 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8015d06:	4b20      	ldr	r3, [pc, #128]	@ (8015d88 <ulTaskNotifyTake+0x90>)
 8015d08:	681b      	ldr	r3, [r3, #0]
 8015d0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d113      	bne.n	8015d3a <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8015d12:	4b1d      	ldr	r3, [pc, #116]	@ (8015d88 <ulTaskNotifyTake+0x90>)
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	2201      	movs	r2, #1
 8015d18:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8

				if( xTicksToWait > ( TickType_t ) 0 )
 8015d1c:	683b      	ldr	r3, [r7, #0]
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d00b      	beq.n	8015d3a <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015d22:	2101      	movs	r1, #1
 8015d24:	6838      	ldr	r0, [r7, #0]
 8015d26:	f000 f919 	bl	8015f5c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8015d2a:	4b18      	ldr	r3, [pc, #96]	@ (8015d8c <ulTaskNotifyTake+0x94>)
 8015d2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015d30:	601a      	str	r2, [r3, #0]
 8015d32:	f3bf 8f4f 	dsb	sy
 8015d36:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8015d3a:	f000 fad7 	bl	80162ec <vPortExitCritical>

		taskENTER_CRITICAL();
 8015d3e:	f000 faa3 	bl	8016288 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8015d42:	4b11      	ldr	r3, [pc, #68]	@ (8015d88 <ulTaskNotifyTake+0x90>)
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8015d4a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8015d4c:	68fb      	ldr	r3, [r7, #12]
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d00e      	beq.n	8015d70 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d005      	beq.n	8015d64 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8015d58:	4b0b      	ldr	r3, [pc, #44]	@ (8015d88 <ulTaskNotifyTake+0x90>)
 8015d5a:	681b      	ldr	r3, [r3, #0]
 8015d5c:	2200      	movs	r2, #0
 8015d5e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8015d62:	e005      	b.n	8015d70 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8015d64:	4b08      	ldr	r3, [pc, #32]	@ (8015d88 <ulTaskNotifyTake+0x90>)
 8015d66:	681b      	ldr	r3, [r3, #0]
 8015d68:	68fa      	ldr	r2, [r7, #12]
 8015d6a:	3a01      	subs	r2, #1
 8015d6c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015d70:	4b05      	ldr	r3, [pc, #20]	@ (8015d88 <ulTaskNotifyTake+0x90>)
 8015d72:	681b      	ldr	r3, [r3, #0]
 8015d74:	2200      	movs	r2, #0
 8015d76:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
		}
		taskEXIT_CRITICAL();
 8015d7a:	f000 fab7 	bl	80162ec <vPortExitCritical>

		return ulReturn;
 8015d7e:	68fb      	ldr	r3, [r7, #12]
	}
 8015d80:	4618      	mov	r0, r3
 8015d82:	3710      	adds	r7, #16
 8015d84:	46bd      	mov	sp, r7
 8015d86:	bd80      	pop	{r7, pc}
 8015d88:	2000383c 	.word	0x2000383c
 8015d8c:	e000ed04 	.word	0xe000ed04

08015d90 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8015d90:	b580      	push	{r7, lr}
 8015d92:	b08e      	sub	sp, #56	@ 0x38
 8015d94:	af00      	add	r7, sp, #0
 8015d96:	60f8      	str	r0, [r7, #12]
 8015d98:	60b9      	str	r1, [r7, #8]
 8015d9a:	603b      	str	r3, [r7, #0]
 8015d9c:	4613      	mov	r3, r2
 8015d9e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8015da0:	2301      	movs	r3, #1
 8015da2:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8015da4:	68fb      	ldr	r3, [r7, #12]
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d10b      	bne.n	8015dc2 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8015daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015dae:	f383 8811 	msr	BASEPRI, r3
 8015db2:	f3bf 8f6f 	isb	sy
 8015db6:	f3bf 8f4f 	dsb	sy
 8015dba:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8015dbc:	bf00      	nop
 8015dbe:	bf00      	nop
 8015dc0:	e7fd      	b.n	8015dbe <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015dc2:	f000 fb41 	bl	8016448 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8015dc6:	68fb      	ldr	r3, [r7, #12]
 8015dc8:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8015dca:	f3ef 8211 	mrs	r2, BASEPRI
 8015dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015dd2:	f383 8811 	msr	BASEPRI, r3
 8015dd6:	f3bf 8f6f 	isb	sy
 8015dda:	f3bf 8f4f 	dsb	sy
 8015dde:	623a      	str	r2, [r7, #32]
 8015de0:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8015de2:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8015de6:	683b      	ldr	r3, [r7, #0]
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d004      	beq.n	8015df6 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8015dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015dee:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8015df2:	683b      	ldr	r3, [r7, #0]
 8015df4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8015df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015df8:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8015dfc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8015e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e02:	2202      	movs	r2, #2
 8015e04:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8

			switch( eAction )
 8015e08:	79fb      	ldrb	r3, [r7, #7]
 8015e0a:	2b04      	cmp	r3, #4
 8015e0c:	d82e      	bhi.n	8015e6c <xTaskGenericNotifyFromISR+0xdc>
 8015e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8015e14 <xTaskGenericNotifyFromISR+0x84>)
 8015e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e14:	08015e91 	.word	0x08015e91
 8015e18:	08015e29 	.word	0x08015e29
 8015e1c:	08015e3b 	.word	0x08015e3b
 8015e20:	08015e4b 	.word	0x08015e4b
 8015e24:	08015e55 	.word	0x08015e55
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8015e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e2a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8015e2e:	68bb      	ldr	r3, [r7, #8]
 8015e30:	431a      	orrs	r2, r3
 8015e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e34:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					break;
 8015e38:	e02d      	b.n	8015e96 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8015e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8015e40:	1c5a      	adds	r2, r3, #1
 8015e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e44:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					break;
 8015e48:	e025      	b.n	8015e96 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8015e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e4c:	68ba      	ldr	r2, [r7, #8]
 8015e4e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					break;
 8015e52:	e020      	b.n	8015e96 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8015e54:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8015e58:	2b02      	cmp	r3, #2
 8015e5a:	d004      	beq.n	8015e66 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8015e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e5e:	68ba      	ldr	r2, [r7, #8]
 8015e60:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8015e64:	e017      	b.n	8015e96 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 8015e66:	2300      	movs	r3, #0
 8015e68:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8015e6a:	e014      	b.n	8015e96 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8015e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8015e72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8015e76:	d00d      	beq.n	8015e94 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8015e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e7c:	f383 8811 	msr	BASEPRI, r3
 8015e80:	f3bf 8f6f 	isb	sy
 8015e84:	f3bf 8f4f 	dsb	sy
 8015e88:	61bb      	str	r3, [r7, #24]
}
 8015e8a:	bf00      	nop
 8015e8c:	bf00      	nop
 8015e8e:	e7fd      	b.n	8015e8c <xTaskGenericNotifyFromISR+0xfc>
					break;
 8015e90:	bf00      	nop
 8015e92:	e000      	b.n	8015e96 <xTaskGenericNotifyFromISR+0x106>
					break;
 8015e94:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8015e96:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8015e9a:	2b01      	cmp	r3, #1
 8015e9c:	d146      	bne.n	8015f2c <xTaskGenericNotifyFromISR+0x19c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8015e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d00b      	beq.n	8015ebe <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 8015ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015eaa:	f383 8811 	msr	BASEPRI, r3
 8015eae:	f3bf 8f6f 	isb	sy
 8015eb2:	f3bf 8f4f 	dsb	sy
 8015eb6:	617b      	str	r3, [r7, #20]
}
 8015eb8:	bf00      	nop
 8015eba:	bf00      	nop
 8015ebc:	e7fd      	b.n	8015eba <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015ebe:	4b21      	ldr	r3, [pc, #132]	@ (8015f44 <xTaskGenericNotifyFromISR+0x1b4>)
 8015ec0:	681b      	ldr	r3, [r3, #0]
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d11c      	bne.n	8015f00 <xTaskGenericNotifyFromISR+0x170>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ec8:	3304      	adds	r3, #4
 8015eca:	4618      	mov	r0, r3
 8015ecc:	f7fd ffcc 	bl	8013e68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ed4:	2201      	movs	r2, #1
 8015ed6:	409a      	lsls	r2, r3
 8015ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8015f48 <xTaskGenericNotifyFromISR+0x1b8>)
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	4313      	orrs	r3, r2
 8015ede:	4a1a      	ldr	r2, [pc, #104]	@ (8015f48 <xTaskGenericNotifyFromISR+0x1b8>)
 8015ee0:	6013      	str	r3, [r2, #0]
 8015ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015ee6:	4613      	mov	r3, r2
 8015ee8:	009b      	lsls	r3, r3, #2
 8015eea:	4413      	add	r3, r2
 8015eec:	009b      	lsls	r3, r3, #2
 8015eee:	4a17      	ldr	r2, [pc, #92]	@ (8015f4c <xTaskGenericNotifyFromISR+0x1bc>)
 8015ef0:	441a      	add	r2, r3
 8015ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ef4:	3304      	adds	r3, #4
 8015ef6:	4619      	mov	r1, r3
 8015ef8:	4610      	mov	r0, r2
 8015efa:	f7fd ff58 	bl	8013dae <vListInsertEnd>
 8015efe:	e005      	b.n	8015f0c <xTaskGenericNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8015f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f02:	3318      	adds	r3, #24
 8015f04:	4619      	mov	r1, r3
 8015f06:	4812      	ldr	r0, [pc, #72]	@ (8015f50 <xTaskGenericNotifyFromISR+0x1c0>)
 8015f08:	f7fd ff51 	bl	8013dae <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015f10:	4b10      	ldr	r3, [pc, #64]	@ (8015f54 <xTaskGenericNotifyFromISR+0x1c4>)
 8015f12:	681b      	ldr	r3, [r3, #0]
 8015f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015f16:	429a      	cmp	r2, r3
 8015f18:	d908      	bls.n	8015f2c <xTaskGenericNotifyFromISR+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8015f1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d002      	beq.n	8015f26 <xTaskGenericNotifyFromISR+0x196>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8015f20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015f22:	2201      	movs	r2, #1
 8015f24:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8015f26:	4b0c      	ldr	r3, [pc, #48]	@ (8015f58 <xTaskGenericNotifyFromISR+0x1c8>)
 8015f28:	2201      	movs	r2, #1
 8015f2a:	601a      	str	r2, [r3, #0]
 8015f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f2e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8015f30:	693b      	ldr	r3, [r7, #16]
 8015f32:	f383 8811 	msr	BASEPRI, r3
}
 8015f36:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8015f38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8015f3a:	4618      	mov	r0, r3
 8015f3c:	3738      	adds	r7, #56	@ 0x38
 8015f3e:	46bd      	mov	sp, r7
 8015f40:	bd80      	pop	{r7, pc}
 8015f42:	bf00      	nop
 8015f44:	20003964 	.word	0x20003964
 8015f48:	20003944 	.word	0x20003944
 8015f4c:	20003840 	.word	0x20003840
 8015f50:	200038fc 	.word	0x200038fc
 8015f54:	2000383c 	.word	0x2000383c
 8015f58:	20003950 	.word	0x20003950

08015f5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015f5c:	b580      	push	{r7, lr}
 8015f5e:	b084      	sub	sp, #16
 8015f60:	af00      	add	r7, sp, #0
 8015f62:	6078      	str	r0, [r7, #4]
 8015f64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015f66:	4b29      	ldr	r3, [pc, #164]	@ (801600c <prvAddCurrentTaskToDelayedList+0xb0>)
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015f6c:	4b28      	ldr	r3, [pc, #160]	@ (8016010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015f6e:	681b      	ldr	r3, [r3, #0]
 8015f70:	3304      	adds	r3, #4
 8015f72:	4618      	mov	r0, r3
 8015f74:	f7fd ff78 	bl	8013e68 <uxListRemove>
 8015f78:	4603      	mov	r3, r0
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d10b      	bne.n	8015f96 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8015f7e:	4b24      	ldr	r3, [pc, #144]	@ (8016010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015f80:	681b      	ldr	r3, [r3, #0]
 8015f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015f84:	2201      	movs	r2, #1
 8015f86:	fa02 f303 	lsl.w	r3, r2, r3
 8015f8a:	43da      	mvns	r2, r3
 8015f8c:	4b21      	ldr	r3, [pc, #132]	@ (8016014 <prvAddCurrentTaskToDelayedList+0xb8>)
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	4013      	ands	r3, r2
 8015f92:	4a20      	ldr	r2, [pc, #128]	@ (8016014 <prvAddCurrentTaskToDelayedList+0xb8>)
 8015f94:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8015f9c:	d10a      	bne.n	8015fb4 <prvAddCurrentTaskToDelayedList+0x58>
 8015f9e:	683b      	ldr	r3, [r7, #0]
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d007      	beq.n	8015fb4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8016010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015fa6:	681b      	ldr	r3, [r3, #0]
 8015fa8:	3304      	adds	r3, #4
 8015faa:	4619      	mov	r1, r3
 8015fac:	481a      	ldr	r0, [pc, #104]	@ (8016018 <prvAddCurrentTaskToDelayedList+0xbc>)
 8015fae:	f7fd fefe 	bl	8013dae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015fb2:	e026      	b.n	8016002 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015fb4:	68fa      	ldr	r2, [r7, #12]
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	4413      	add	r3, r2
 8015fba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015fbc:	4b14      	ldr	r3, [pc, #80]	@ (8016010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	68ba      	ldr	r2, [r7, #8]
 8015fc2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015fc4:	68ba      	ldr	r2, [r7, #8]
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	429a      	cmp	r2, r3
 8015fca:	d209      	bcs.n	8015fe0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015fcc:	4b13      	ldr	r3, [pc, #76]	@ (801601c <prvAddCurrentTaskToDelayedList+0xc0>)
 8015fce:	681a      	ldr	r2, [r3, #0]
 8015fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8016010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015fd2:	681b      	ldr	r3, [r3, #0]
 8015fd4:	3304      	adds	r3, #4
 8015fd6:	4619      	mov	r1, r3
 8015fd8:	4610      	mov	r0, r2
 8015fda:	f7fd ff0c 	bl	8013df6 <vListInsert>
}
 8015fde:	e010      	b.n	8016002 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8016020 <prvAddCurrentTaskToDelayedList+0xc4>)
 8015fe2:	681a      	ldr	r2, [r3, #0]
 8015fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8016010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015fe6:	681b      	ldr	r3, [r3, #0]
 8015fe8:	3304      	adds	r3, #4
 8015fea:	4619      	mov	r1, r3
 8015fec:	4610      	mov	r0, r2
 8015fee:	f7fd ff02 	bl	8013df6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8016024 <prvAddCurrentTaskToDelayedList+0xc8>)
 8015ff4:	681b      	ldr	r3, [r3, #0]
 8015ff6:	68ba      	ldr	r2, [r7, #8]
 8015ff8:	429a      	cmp	r2, r3
 8015ffa:	d202      	bcs.n	8016002 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8015ffc:	4a09      	ldr	r2, [pc, #36]	@ (8016024 <prvAddCurrentTaskToDelayedList+0xc8>)
 8015ffe:	68bb      	ldr	r3, [r7, #8]
 8016000:	6013      	str	r3, [r2, #0]
}
 8016002:	bf00      	nop
 8016004:	3710      	adds	r7, #16
 8016006:	46bd      	mov	sp, r7
 8016008:	bd80      	pop	{r7, pc}
 801600a:	bf00      	nop
 801600c:	20003940 	.word	0x20003940
 8016010:	2000383c 	.word	0x2000383c
 8016014:	20003944 	.word	0x20003944
 8016018:	20003928 	.word	0x20003928
 801601c:	200038f8 	.word	0x200038f8
 8016020:	200038f4 	.word	0x200038f4
 8016024:	2000395c 	.word	0x2000395c

08016028 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016028:	b480      	push	{r7}
 801602a:	b085      	sub	sp, #20
 801602c:	af00      	add	r7, sp, #0
 801602e:	60f8      	str	r0, [r7, #12]
 8016030:	60b9      	str	r1, [r7, #8]
 8016032:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016034:	68fb      	ldr	r3, [r7, #12]
 8016036:	3b04      	subs	r3, #4
 8016038:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801603a:	68fb      	ldr	r3, [r7, #12]
 801603c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8016040:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016042:	68fb      	ldr	r3, [r7, #12]
 8016044:	3b04      	subs	r3, #4
 8016046:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016048:	68bb      	ldr	r3, [r7, #8]
 801604a:	f023 0201 	bic.w	r2, r3, #1
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016052:	68fb      	ldr	r3, [r7, #12]
 8016054:	3b04      	subs	r3, #4
 8016056:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016058:	4a0c      	ldr	r2, [pc, #48]	@ (801608c <pxPortInitialiseStack+0x64>)
 801605a:	68fb      	ldr	r3, [r7, #12]
 801605c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801605e:	68fb      	ldr	r3, [r7, #12]
 8016060:	3b14      	subs	r3, #20
 8016062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016064:	687a      	ldr	r2, [r7, #4]
 8016066:	68fb      	ldr	r3, [r7, #12]
 8016068:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801606a:	68fb      	ldr	r3, [r7, #12]
 801606c:	3b04      	subs	r3, #4
 801606e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	f06f 0202 	mvn.w	r2, #2
 8016076:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016078:	68fb      	ldr	r3, [r7, #12]
 801607a:	3b20      	subs	r3, #32
 801607c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801607e:	68fb      	ldr	r3, [r7, #12]
}
 8016080:	4618      	mov	r0, r3
 8016082:	3714      	adds	r7, #20
 8016084:	46bd      	mov	sp, r7
 8016086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801608a:	4770      	bx	lr
 801608c:	08016091 	.word	0x08016091

08016090 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016090:	b480      	push	{r7}
 8016092:	b085      	sub	sp, #20
 8016094:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8016096:	2300      	movs	r3, #0
 8016098:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801609a:	4b13      	ldr	r3, [pc, #76]	@ (80160e8 <prvTaskExitError+0x58>)
 801609c:	681b      	ldr	r3, [r3, #0]
 801609e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80160a2:	d00b      	beq.n	80160bc <prvTaskExitError+0x2c>
	__asm volatile
 80160a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80160a8:	f383 8811 	msr	BASEPRI, r3
 80160ac:	f3bf 8f6f 	isb	sy
 80160b0:	f3bf 8f4f 	dsb	sy
 80160b4:	60fb      	str	r3, [r7, #12]
}
 80160b6:	bf00      	nop
 80160b8:	bf00      	nop
 80160ba:	e7fd      	b.n	80160b8 <prvTaskExitError+0x28>
	__asm volatile
 80160bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80160c0:	f383 8811 	msr	BASEPRI, r3
 80160c4:	f3bf 8f6f 	isb	sy
 80160c8:	f3bf 8f4f 	dsb	sy
 80160cc:	60bb      	str	r3, [r7, #8]
}
 80160ce:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80160d0:	bf00      	nop
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d0fc      	beq.n	80160d2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80160d8:	bf00      	nop
 80160da:	bf00      	nop
 80160dc:	3714      	adds	r7, #20
 80160de:	46bd      	mov	sp, r7
 80160e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160e4:	4770      	bx	lr
 80160e6:	bf00      	nop
 80160e8:	20000144 	.word	0x20000144
 80160ec:	00000000 	.word	0x00000000

080160f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80160f0:	4b07      	ldr	r3, [pc, #28]	@ (8016110 <pxCurrentTCBConst2>)
 80160f2:	6819      	ldr	r1, [r3, #0]
 80160f4:	6808      	ldr	r0, [r1, #0]
 80160f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160fa:	f380 8809 	msr	PSP, r0
 80160fe:	f3bf 8f6f 	isb	sy
 8016102:	f04f 0000 	mov.w	r0, #0
 8016106:	f380 8811 	msr	BASEPRI, r0
 801610a:	4770      	bx	lr
 801610c:	f3af 8000 	nop.w

08016110 <pxCurrentTCBConst2>:
 8016110:	2000383c 	.word	0x2000383c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016114:	bf00      	nop
 8016116:	bf00      	nop

08016118 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016118:	4808      	ldr	r0, [pc, #32]	@ (801613c <prvPortStartFirstTask+0x24>)
 801611a:	6800      	ldr	r0, [r0, #0]
 801611c:	6800      	ldr	r0, [r0, #0]
 801611e:	f380 8808 	msr	MSP, r0
 8016122:	f04f 0000 	mov.w	r0, #0
 8016126:	f380 8814 	msr	CONTROL, r0
 801612a:	b662      	cpsie	i
 801612c:	b661      	cpsie	f
 801612e:	f3bf 8f4f 	dsb	sy
 8016132:	f3bf 8f6f 	isb	sy
 8016136:	df00      	svc	0
 8016138:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801613a:	bf00      	nop
 801613c:	e000ed08 	.word	0xe000ed08

08016140 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016140:	b580      	push	{r7, lr}
 8016142:	b086      	sub	sp, #24
 8016144:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016146:	4b47      	ldr	r3, [pc, #284]	@ (8016264 <xPortStartScheduler+0x124>)
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	4a47      	ldr	r2, [pc, #284]	@ (8016268 <xPortStartScheduler+0x128>)
 801614c:	4293      	cmp	r3, r2
 801614e:	d10b      	bne.n	8016168 <xPortStartScheduler+0x28>
	__asm volatile
 8016150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016154:	f383 8811 	msr	BASEPRI, r3
 8016158:	f3bf 8f6f 	isb	sy
 801615c:	f3bf 8f4f 	dsb	sy
 8016160:	613b      	str	r3, [r7, #16]
}
 8016162:	bf00      	nop
 8016164:	bf00      	nop
 8016166:	e7fd      	b.n	8016164 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016168:	4b3e      	ldr	r3, [pc, #248]	@ (8016264 <xPortStartScheduler+0x124>)
 801616a:	681b      	ldr	r3, [r3, #0]
 801616c:	4a3f      	ldr	r2, [pc, #252]	@ (801626c <xPortStartScheduler+0x12c>)
 801616e:	4293      	cmp	r3, r2
 8016170:	d10b      	bne.n	801618a <xPortStartScheduler+0x4a>
	__asm volatile
 8016172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016176:	f383 8811 	msr	BASEPRI, r3
 801617a:	f3bf 8f6f 	isb	sy
 801617e:	f3bf 8f4f 	dsb	sy
 8016182:	60fb      	str	r3, [r7, #12]
}
 8016184:	bf00      	nop
 8016186:	bf00      	nop
 8016188:	e7fd      	b.n	8016186 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801618a:	4b39      	ldr	r3, [pc, #228]	@ (8016270 <xPortStartScheduler+0x130>)
 801618c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801618e:	697b      	ldr	r3, [r7, #20]
 8016190:	781b      	ldrb	r3, [r3, #0]
 8016192:	b2db      	uxtb	r3, r3
 8016194:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016196:	697b      	ldr	r3, [r7, #20]
 8016198:	22ff      	movs	r2, #255	@ 0xff
 801619a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801619c:	697b      	ldr	r3, [r7, #20]
 801619e:	781b      	ldrb	r3, [r3, #0]
 80161a0:	b2db      	uxtb	r3, r3
 80161a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80161a4:	78fb      	ldrb	r3, [r7, #3]
 80161a6:	b2db      	uxtb	r3, r3
 80161a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80161ac:	b2da      	uxtb	r2, r3
 80161ae:	4b31      	ldr	r3, [pc, #196]	@ (8016274 <xPortStartScheduler+0x134>)
 80161b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80161b2:	4b31      	ldr	r3, [pc, #196]	@ (8016278 <xPortStartScheduler+0x138>)
 80161b4:	2207      	movs	r2, #7
 80161b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80161b8:	e009      	b.n	80161ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80161ba:	4b2f      	ldr	r3, [pc, #188]	@ (8016278 <xPortStartScheduler+0x138>)
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	3b01      	subs	r3, #1
 80161c0:	4a2d      	ldr	r2, [pc, #180]	@ (8016278 <xPortStartScheduler+0x138>)
 80161c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80161c4:	78fb      	ldrb	r3, [r7, #3]
 80161c6:	b2db      	uxtb	r3, r3
 80161c8:	005b      	lsls	r3, r3, #1
 80161ca:	b2db      	uxtb	r3, r3
 80161cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80161ce:	78fb      	ldrb	r3, [r7, #3]
 80161d0:	b2db      	uxtb	r3, r3
 80161d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80161d6:	2b80      	cmp	r3, #128	@ 0x80
 80161d8:	d0ef      	beq.n	80161ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80161da:	4b27      	ldr	r3, [pc, #156]	@ (8016278 <xPortStartScheduler+0x138>)
 80161dc:	681b      	ldr	r3, [r3, #0]
 80161de:	f1c3 0307 	rsb	r3, r3, #7
 80161e2:	2b04      	cmp	r3, #4
 80161e4:	d00b      	beq.n	80161fe <xPortStartScheduler+0xbe>
	__asm volatile
 80161e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80161ea:	f383 8811 	msr	BASEPRI, r3
 80161ee:	f3bf 8f6f 	isb	sy
 80161f2:	f3bf 8f4f 	dsb	sy
 80161f6:	60bb      	str	r3, [r7, #8]
}
 80161f8:	bf00      	nop
 80161fa:	bf00      	nop
 80161fc:	e7fd      	b.n	80161fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80161fe:	4b1e      	ldr	r3, [pc, #120]	@ (8016278 <xPortStartScheduler+0x138>)
 8016200:	681b      	ldr	r3, [r3, #0]
 8016202:	021b      	lsls	r3, r3, #8
 8016204:	4a1c      	ldr	r2, [pc, #112]	@ (8016278 <xPortStartScheduler+0x138>)
 8016206:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016208:	4b1b      	ldr	r3, [pc, #108]	@ (8016278 <xPortStartScheduler+0x138>)
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8016210:	4a19      	ldr	r2, [pc, #100]	@ (8016278 <xPortStartScheduler+0x138>)
 8016212:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	b2da      	uxtb	r2, r3
 8016218:	697b      	ldr	r3, [r7, #20]
 801621a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801621c:	4b17      	ldr	r3, [pc, #92]	@ (801627c <xPortStartScheduler+0x13c>)
 801621e:	681b      	ldr	r3, [r3, #0]
 8016220:	4a16      	ldr	r2, [pc, #88]	@ (801627c <xPortStartScheduler+0x13c>)
 8016222:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8016226:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016228:	4b14      	ldr	r3, [pc, #80]	@ (801627c <xPortStartScheduler+0x13c>)
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	4a13      	ldr	r2, [pc, #76]	@ (801627c <xPortStartScheduler+0x13c>)
 801622e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8016232:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016234:	f000 f8da 	bl	80163ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016238:	4b11      	ldr	r3, [pc, #68]	@ (8016280 <xPortStartScheduler+0x140>)
 801623a:	2200      	movs	r2, #0
 801623c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801623e:	f000 f8f9 	bl	8016434 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8016242:	4b10      	ldr	r3, [pc, #64]	@ (8016284 <xPortStartScheduler+0x144>)
 8016244:	681b      	ldr	r3, [r3, #0]
 8016246:	4a0f      	ldr	r2, [pc, #60]	@ (8016284 <xPortStartScheduler+0x144>)
 8016248:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801624c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801624e:	f7ff ff63 	bl	8016118 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8016252:	f7ff f947 	bl	80154e4 <vTaskSwitchContext>
	prvTaskExitError();
 8016256:	f7ff ff1b 	bl	8016090 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801625a:	2300      	movs	r3, #0
}
 801625c:	4618      	mov	r0, r3
 801625e:	3718      	adds	r7, #24
 8016260:	46bd      	mov	sp, r7
 8016262:	bd80      	pop	{r7, pc}
 8016264:	e000ed00 	.word	0xe000ed00
 8016268:	410fc271 	.word	0x410fc271
 801626c:	410fc270 	.word	0x410fc270
 8016270:	e000e400 	.word	0xe000e400
 8016274:	20003970 	.word	0x20003970
 8016278:	20003974 	.word	0x20003974
 801627c:	e000ed20 	.word	0xe000ed20
 8016280:	20000144 	.word	0x20000144
 8016284:	e000ef34 	.word	0xe000ef34

08016288 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016288:	b480      	push	{r7}
 801628a:	b083      	sub	sp, #12
 801628c:	af00      	add	r7, sp, #0
	__asm volatile
 801628e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016292:	f383 8811 	msr	BASEPRI, r3
 8016296:	f3bf 8f6f 	isb	sy
 801629a:	f3bf 8f4f 	dsb	sy
 801629e:	607b      	str	r3, [r7, #4]
}
 80162a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80162a2:	4b10      	ldr	r3, [pc, #64]	@ (80162e4 <vPortEnterCritical+0x5c>)
 80162a4:	681b      	ldr	r3, [r3, #0]
 80162a6:	3301      	adds	r3, #1
 80162a8:	4a0e      	ldr	r2, [pc, #56]	@ (80162e4 <vPortEnterCritical+0x5c>)
 80162aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80162ac:	4b0d      	ldr	r3, [pc, #52]	@ (80162e4 <vPortEnterCritical+0x5c>)
 80162ae:	681b      	ldr	r3, [r3, #0]
 80162b0:	2b01      	cmp	r3, #1
 80162b2:	d110      	bne.n	80162d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80162b4:	4b0c      	ldr	r3, [pc, #48]	@ (80162e8 <vPortEnterCritical+0x60>)
 80162b6:	681b      	ldr	r3, [r3, #0]
 80162b8:	b2db      	uxtb	r3, r3
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d00b      	beq.n	80162d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80162be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80162c2:	f383 8811 	msr	BASEPRI, r3
 80162c6:	f3bf 8f6f 	isb	sy
 80162ca:	f3bf 8f4f 	dsb	sy
 80162ce:	603b      	str	r3, [r7, #0]
}
 80162d0:	bf00      	nop
 80162d2:	bf00      	nop
 80162d4:	e7fd      	b.n	80162d2 <vPortEnterCritical+0x4a>
	}
}
 80162d6:	bf00      	nop
 80162d8:	370c      	adds	r7, #12
 80162da:	46bd      	mov	sp, r7
 80162dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162e0:	4770      	bx	lr
 80162e2:	bf00      	nop
 80162e4:	20000144 	.word	0x20000144
 80162e8:	e000ed04 	.word	0xe000ed04

080162ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80162ec:	b480      	push	{r7}
 80162ee:	b083      	sub	sp, #12
 80162f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80162f2:	4b12      	ldr	r3, [pc, #72]	@ (801633c <vPortExitCritical+0x50>)
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d10b      	bne.n	8016312 <vPortExitCritical+0x26>
	__asm volatile
 80162fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80162fe:	f383 8811 	msr	BASEPRI, r3
 8016302:	f3bf 8f6f 	isb	sy
 8016306:	f3bf 8f4f 	dsb	sy
 801630a:	607b      	str	r3, [r7, #4]
}
 801630c:	bf00      	nop
 801630e:	bf00      	nop
 8016310:	e7fd      	b.n	801630e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8016312:	4b0a      	ldr	r3, [pc, #40]	@ (801633c <vPortExitCritical+0x50>)
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	3b01      	subs	r3, #1
 8016318:	4a08      	ldr	r2, [pc, #32]	@ (801633c <vPortExitCritical+0x50>)
 801631a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801631c:	4b07      	ldr	r3, [pc, #28]	@ (801633c <vPortExitCritical+0x50>)
 801631e:	681b      	ldr	r3, [r3, #0]
 8016320:	2b00      	cmp	r3, #0
 8016322:	d105      	bne.n	8016330 <vPortExitCritical+0x44>
 8016324:	2300      	movs	r3, #0
 8016326:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016328:	683b      	ldr	r3, [r7, #0]
 801632a:	f383 8811 	msr	BASEPRI, r3
}
 801632e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016330:	bf00      	nop
 8016332:	370c      	adds	r7, #12
 8016334:	46bd      	mov	sp, r7
 8016336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801633a:	4770      	bx	lr
 801633c:	20000144 	.word	0x20000144

08016340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016340:	f3ef 8009 	mrs	r0, PSP
 8016344:	f3bf 8f6f 	isb	sy
 8016348:	4b15      	ldr	r3, [pc, #84]	@ (80163a0 <pxCurrentTCBConst>)
 801634a:	681a      	ldr	r2, [r3, #0]
 801634c:	f01e 0f10 	tst.w	lr, #16
 8016350:	bf08      	it	eq
 8016352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801635a:	6010      	str	r0, [r2, #0]
 801635c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016360:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8016364:	f380 8811 	msr	BASEPRI, r0
 8016368:	f3bf 8f4f 	dsb	sy
 801636c:	f3bf 8f6f 	isb	sy
 8016370:	f7ff f8b8 	bl	80154e4 <vTaskSwitchContext>
 8016374:	f04f 0000 	mov.w	r0, #0
 8016378:	f380 8811 	msr	BASEPRI, r0
 801637c:	bc09      	pop	{r0, r3}
 801637e:	6819      	ldr	r1, [r3, #0]
 8016380:	6808      	ldr	r0, [r1, #0]
 8016382:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016386:	f01e 0f10 	tst.w	lr, #16
 801638a:	bf08      	it	eq
 801638c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016390:	f380 8809 	msr	PSP, r0
 8016394:	f3bf 8f6f 	isb	sy
 8016398:	4770      	bx	lr
 801639a:	bf00      	nop
 801639c:	f3af 8000 	nop.w

080163a0 <pxCurrentTCBConst>:
 80163a0:	2000383c 	.word	0x2000383c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80163a4:	bf00      	nop
 80163a6:	bf00      	nop

080163a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80163a8:	b580      	push	{r7, lr}
 80163aa:	b082      	sub	sp, #8
 80163ac:	af00      	add	r7, sp, #0
	__asm volatile
 80163ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80163b2:	f383 8811 	msr	BASEPRI, r3
 80163b6:	f3bf 8f6f 	isb	sy
 80163ba:	f3bf 8f4f 	dsb	sy
 80163be:	607b      	str	r3, [r7, #4]
}
 80163c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80163c2:	f7fe ffd5 	bl	8015370 <xTaskIncrementTick>
 80163c6:	4603      	mov	r3, r0
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d003      	beq.n	80163d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80163cc:	4b06      	ldr	r3, [pc, #24]	@ (80163e8 <SysTick_Handler+0x40>)
 80163ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80163d2:	601a      	str	r2, [r3, #0]
 80163d4:	2300      	movs	r3, #0
 80163d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80163d8:	683b      	ldr	r3, [r7, #0]
 80163da:	f383 8811 	msr	BASEPRI, r3
}
 80163de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80163e0:	bf00      	nop
 80163e2:	3708      	adds	r7, #8
 80163e4:	46bd      	mov	sp, r7
 80163e6:	bd80      	pop	{r7, pc}
 80163e8:	e000ed04 	.word	0xe000ed04

080163ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80163ec:	b480      	push	{r7}
 80163ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80163f0:	4b0b      	ldr	r3, [pc, #44]	@ (8016420 <vPortSetupTimerInterrupt+0x34>)
 80163f2:	2200      	movs	r2, #0
 80163f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80163f6:	4b0b      	ldr	r3, [pc, #44]	@ (8016424 <vPortSetupTimerInterrupt+0x38>)
 80163f8:	2200      	movs	r2, #0
 80163fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80163fc:	4b0a      	ldr	r3, [pc, #40]	@ (8016428 <vPortSetupTimerInterrupt+0x3c>)
 80163fe:	681b      	ldr	r3, [r3, #0]
 8016400:	4a0a      	ldr	r2, [pc, #40]	@ (801642c <vPortSetupTimerInterrupt+0x40>)
 8016402:	fba2 2303 	umull	r2, r3, r2, r3
 8016406:	099b      	lsrs	r3, r3, #6
 8016408:	4a09      	ldr	r2, [pc, #36]	@ (8016430 <vPortSetupTimerInterrupt+0x44>)
 801640a:	3b01      	subs	r3, #1
 801640c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801640e:	4b04      	ldr	r3, [pc, #16]	@ (8016420 <vPortSetupTimerInterrupt+0x34>)
 8016410:	2207      	movs	r2, #7
 8016412:	601a      	str	r2, [r3, #0]
}
 8016414:	bf00      	nop
 8016416:	46bd      	mov	sp, r7
 8016418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801641c:	4770      	bx	lr
 801641e:	bf00      	nop
 8016420:	e000e010 	.word	0xe000e010
 8016424:	e000e018 	.word	0xe000e018
 8016428:	20000004 	.word	0x20000004
 801642c:	10624dd3 	.word	0x10624dd3
 8016430:	e000e014 	.word	0xe000e014

08016434 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016434:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8016444 <vPortEnableVFP+0x10>
 8016438:	6801      	ldr	r1, [r0, #0]
 801643a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801643e:	6001      	str	r1, [r0, #0]
 8016440:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016442:	bf00      	nop
 8016444:	e000ed88 	.word	0xe000ed88

08016448 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016448:	b480      	push	{r7}
 801644a:	b085      	sub	sp, #20
 801644c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801644e:	f3ef 8305 	mrs	r3, IPSR
 8016452:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016454:	68fb      	ldr	r3, [r7, #12]
 8016456:	2b0f      	cmp	r3, #15
 8016458:	d915      	bls.n	8016486 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801645a:	4a18      	ldr	r2, [pc, #96]	@ (80164bc <vPortValidateInterruptPriority+0x74>)
 801645c:	68fb      	ldr	r3, [r7, #12]
 801645e:	4413      	add	r3, r2
 8016460:	781b      	ldrb	r3, [r3, #0]
 8016462:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016464:	4b16      	ldr	r3, [pc, #88]	@ (80164c0 <vPortValidateInterruptPriority+0x78>)
 8016466:	781b      	ldrb	r3, [r3, #0]
 8016468:	7afa      	ldrb	r2, [r7, #11]
 801646a:	429a      	cmp	r2, r3
 801646c:	d20b      	bcs.n	8016486 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801646e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016472:	f383 8811 	msr	BASEPRI, r3
 8016476:	f3bf 8f6f 	isb	sy
 801647a:	f3bf 8f4f 	dsb	sy
 801647e:	607b      	str	r3, [r7, #4]
}
 8016480:	bf00      	nop
 8016482:	bf00      	nop
 8016484:	e7fd      	b.n	8016482 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016486:	4b0f      	ldr	r3, [pc, #60]	@ (80164c4 <vPortValidateInterruptPriority+0x7c>)
 8016488:	681b      	ldr	r3, [r3, #0]
 801648a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801648e:	4b0e      	ldr	r3, [pc, #56]	@ (80164c8 <vPortValidateInterruptPriority+0x80>)
 8016490:	681b      	ldr	r3, [r3, #0]
 8016492:	429a      	cmp	r2, r3
 8016494:	d90b      	bls.n	80164ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8016496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801649a:	f383 8811 	msr	BASEPRI, r3
 801649e:	f3bf 8f6f 	isb	sy
 80164a2:	f3bf 8f4f 	dsb	sy
 80164a6:	603b      	str	r3, [r7, #0]
}
 80164a8:	bf00      	nop
 80164aa:	bf00      	nop
 80164ac:	e7fd      	b.n	80164aa <vPortValidateInterruptPriority+0x62>
	}
 80164ae:	bf00      	nop
 80164b0:	3714      	adds	r7, #20
 80164b2:	46bd      	mov	sp, r7
 80164b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164b8:	4770      	bx	lr
 80164ba:	bf00      	nop
 80164bc:	e000e3f0 	.word	0xe000e3f0
 80164c0:	20003970 	.word	0x20003970
 80164c4:	e000ed0c 	.word	0xe000ed0c
 80164c8:	20003974 	.word	0x20003974

080164cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80164cc:	b580      	push	{r7, lr}
 80164ce:	b08a      	sub	sp, #40	@ 0x28
 80164d0:	af00      	add	r7, sp, #0
 80164d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80164d4:	2300      	movs	r3, #0
 80164d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80164d8:	f7fe fe8e 	bl	80151f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80164dc:	4b5c      	ldr	r3, [pc, #368]	@ (8016650 <pvPortMalloc+0x184>)
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d101      	bne.n	80164e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80164e4:	f000 f924 	bl	8016730 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80164e8:	4b5a      	ldr	r3, [pc, #360]	@ (8016654 <pvPortMalloc+0x188>)
 80164ea:	681a      	ldr	r2, [r3, #0]
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	4013      	ands	r3, r2
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	f040 8095 	bne.w	8016620 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d01e      	beq.n	801653a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80164fc:	2208      	movs	r2, #8
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	4413      	add	r3, r2
 8016502:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	f003 0307 	and.w	r3, r3, #7
 801650a:	2b00      	cmp	r3, #0
 801650c:	d015      	beq.n	801653a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	f023 0307 	bic.w	r3, r3, #7
 8016514:	3308      	adds	r3, #8
 8016516:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	f003 0307 	and.w	r3, r3, #7
 801651e:	2b00      	cmp	r3, #0
 8016520:	d00b      	beq.n	801653a <pvPortMalloc+0x6e>
	__asm volatile
 8016522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016526:	f383 8811 	msr	BASEPRI, r3
 801652a:	f3bf 8f6f 	isb	sy
 801652e:	f3bf 8f4f 	dsb	sy
 8016532:	617b      	str	r3, [r7, #20]
}
 8016534:	bf00      	nop
 8016536:	bf00      	nop
 8016538:	e7fd      	b.n	8016536 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	2b00      	cmp	r3, #0
 801653e:	d06f      	beq.n	8016620 <pvPortMalloc+0x154>
 8016540:	4b45      	ldr	r3, [pc, #276]	@ (8016658 <pvPortMalloc+0x18c>)
 8016542:	681b      	ldr	r3, [r3, #0]
 8016544:	687a      	ldr	r2, [r7, #4]
 8016546:	429a      	cmp	r2, r3
 8016548:	d86a      	bhi.n	8016620 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801654a:	4b44      	ldr	r3, [pc, #272]	@ (801665c <pvPortMalloc+0x190>)
 801654c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801654e:	4b43      	ldr	r3, [pc, #268]	@ (801665c <pvPortMalloc+0x190>)
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016554:	e004      	b.n	8016560 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8016556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016558:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801655a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016562:	685b      	ldr	r3, [r3, #4]
 8016564:	687a      	ldr	r2, [r7, #4]
 8016566:	429a      	cmp	r2, r3
 8016568:	d903      	bls.n	8016572 <pvPortMalloc+0xa6>
 801656a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	2b00      	cmp	r3, #0
 8016570:	d1f1      	bne.n	8016556 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016572:	4b37      	ldr	r3, [pc, #220]	@ (8016650 <pvPortMalloc+0x184>)
 8016574:	681b      	ldr	r3, [r3, #0]
 8016576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016578:	429a      	cmp	r2, r3
 801657a:	d051      	beq.n	8016620 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801657c:	6a3b      	ldr	r3, [r7, #32]
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	2208      	movs	r2, #8
 8016582:	4413      	add	r3, r2
 8016584:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016588:	681a      	ldr	r2, [r3, #0]
 801658a:	6a3b      	ldr	r3, [r7, #32]
 801658c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801658e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016590:	685a      	ldr	r2, [r3, #4]
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	1ad2      	subs	r2, r2, r3
 8016596:	2308      	movs	r3, #8
 8016598:	005b      	lsls	r3, r3, #1
 801659a:	429a      	cmp	r2, r3
 801659c:	d920      	bls.n	80165e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801659e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	4413      	add	r3, r2
 80165a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80165a6:	69bb      	ldr	r3, [r7, #24]
 80165a8:	f003 0307 	and.w	r3, r3, #7
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d00b      	beq.n	80165c8 <pvPortMalloc+0xfc>
	__asm volatile
 80165b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80165b4:	f383 8811 	msr	BASEPRI, r3
 80165b8:	f3bf 8f6f 	isb	sy
 80165bc:	f3bf 8f4f 	dsb	sy
 80165c0:	613b      	str	r3, [r7, #16]
}
 80165c2:	bf00      	nop
 80165c4:	bf00      	nop
 80165c6:	e7fd      	b.n	80165c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80165c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165ca:	685a      	ldr	r2, [r3, #4]
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	1ad2      	subs	r2, r2, r3
 80165d0:	69bb      	ldr	r3, [r7, #24]
 80165d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80165d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165d6:	687a      	ldr	r2, [r7, #4]
 80165d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80165da:	69b8      	ldr	r0, [r7, #24]
 80165dc:	f000 f90a 	bl	80167f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80165e0:	4b1d      	ldr	r3, [pc, #116]	@ (8016658 <pvPortMalloc+0x18c>)
 80165e2:	681a      	ldr	r2, [r3, #0]
 80165e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165e6:	685b      	ldr	r3, [r3, #4]
 80165e8:	1ad3      	subs	r3, r2, r3
 80165ea:	4a1b      	ldr	r2, [pc, #108]	@ (8016658 <pvPortMalloc+0x18c>)
 80165ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80165ee:	4b1a      	ldr	r3, [pc, #104]	@ (8016658 <pvPortMalloc+0x18c>)
 80165f0:	681a      	ldr	r2, [r3, #0]
 80165f2:	4b1b      	ldr	r3, [pc, #108]	@ (8016660 <pvPortMalloc+0x194>)
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	429a      	cmp	r2, r3
 80165f8:	d203      	bcs.n	8016602 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80165fa:	4b17      	ldr	r3, [pc, #92]	@ (8016658 <pvPortMalloc+0x18c>)
 80165fc:	681b      	ldr	r3, [r3, #0]
 80165fe:	4a18      	ldr	r2, [pc, #96]	@ (8016660 <pvPortMalloc+0x194>)
 8016600:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016604:	685a      	ldr	r2, [r3, #4]
 8016606:	4b13      	ldr	r3, [pc, #76]	@ (8016654 <pvPortMalloc+0x188>)
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	431a      	orrs	r2, r3
 801660c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801660e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016612:	2200      	movs	r2, #0
 8016614:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8016616:	4b13      	ldr	r3, [pc, #76]	@ (8016664 <pvPortMalloc+0x198>)
 8016618:	681b      	ldr	r3, [r3, #0]
 801661a:	3301      	adds	r3, #1
 801661c:	4a11      	ldr	r2, [pc, #68]	@ (8016664 <pvPortMalloc+0x198>)
 801661e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016620:	f7fe fdf8 	bl	8015214 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016624:	69fb      	ldr	r3, [r7, #28]
 8016626:	f003 0307 	and.w	r3, r3, #7
 801662a:	2b00      	cmp	r3, #0
 801662c:	d00b      	beq.n	8016646 <pvPortMalloc+0x17a>
	__asm volatile
 801662e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016632:	f383 8811 	msr	BASEPRI, r3
 8016636:	f3bf 8f6f 	isb	sy
 801663a:	f3bf 8f4f 	dsb	sy
 801663e:	60fb      	str	r3, [r7, #12]
}
 8016640:	bf00      	nop
 8016642:	bf00      	nop
 8016644:	e7fd      	b.n	8016642 <pvPortMalloc+0x176>
	return pvReturn;
 8016646:	69fb      	ldr	r3, [r7, #28]
}
 8016648:	4618      	mov	r0, r3
 801664a:	3728      	adds	r7, #40	@ 0x28
 801664c:	46bd      	mov	sp, r7
 801664e:	bd80      	pop	{r7, pc}
 8016650:	20007800 	.word	0x20007800
 8016654:	20007814 	.word	0x20007814
 8016658:	20007804 	.word	0x20007804
 801665c:	200077f8 	.word	0x200077f8
 8016660:	20007808 	.word	0x20007808
 8016664:	2000780c 	.word	0x2000780c

08016668 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016668:	b580      	push	{r7, lr}
 801666a:	b086      	sub	sp, #24
 801666c:	af00      	add	r7, sp, #0
 801666e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	2b00      	cmp	r3, #0
 8016678:	d04f      	beq.n	801671a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801667a:	2308      	movs	r3, #8
 801667c:	425b      	negs	r3, r3
 801667e:	697a      	ldr	r2, [r7, #20]
 8016680:	4413      	add	r3, r2
 8016682:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016684:	697b      	ldr	r3, [r7, #20]
 8016686:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016688:	693b      	ldr	r3, [r7, #16]
 801668a:	685a      	ldr	r2, [r3, #4]
 801668c:	4b25      	ldr	r3, [pc, #148]	@ (8016724 <vPortFree+0xbc>)
 801668e:	681b      	ldr	r3, [r3, #0]
 8016690:	4013      	ands	r3, r2
 8016692:	2b00      	cmp	r3, #0
 8016694:	d10b      	bne.n	80166ae <vPortFree+0x46>
	__asm volatile
 8016696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801669a:	f383 8811 	msr	BASEPRI, r3
 801669e:	f3bf 8f6f 	isb	sy
 80166a2:	f3bf 8f4f 	dsb	sy
 80166a6:	60fb      	str	r3, [r7, #12]
}
 80166a8:	bf00      	nop
 80166aa:	bf00      	nop
 80166ac:	e7fd      	b.n	80166aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80166ae:	693b      	ldr	r3, [r7, #16]
 80166b0:	681b      	ldr	r3, [r3, #0]
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d00b      	beq.n	80166ce <vPortFree+0x66>
	__asm volatile
 80166b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80166ba:	f383 8811 	msr	BASEPRI, r3
 80166be:	f3bf 8f6f 	isb	sy
 80166c2:	f3bf 8f4f 	dsb	sy
 80166c6:	60bb      	str	r3, [r7, #8]
}
 80166c8:	bf00      	nop
 80166ca:	bf00      	nop
 80166cc:	e7fd      	b.n	80166ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80166ce:	693b      	ldr	r3, [r7, #16]
 80166d0:	685a      	ldr	r2, [r3, #4]
 80166d2:	4b14      	ldr	r3, [pc, #80]	@ (8016724 <vPortFree+0xbc>)
 80166d4:	681b      	ldr	r3, [r3, #0]
 80166d6:	4013      	ands	r3, r2
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d01e      	beq.n	801671a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80166dc:	693b      	ldr	r3, [r7, #16]
 80166de:	681b      	ldr	r3, [r3, #0]
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d11a      	bne.n	801671a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80166e4:	693b      	ldr	r3, [r7, #16]
 80166e6:	685a      	ldr	r2, [r3, #4]
 80166e8:	4b0e      	ldr	r3, [pc, #56]	@ (8016724 <vPortFree+0xbc>)
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	43db      	mvns	r3, r3
 80166ee:	401a      	ands	r2, r3
 80166f0:	693b      	ldr	r3, [r7, #16]
 80166f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80166f4:	f7fe fd80 	bl	80151f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80166f8:	693b      	ldr	r3, [r7, #16]
 80166fa:	685a      	ldr	r2, [r3, #4]
 80166fc:	4b0a      	ldr	r3, [pc, #40]	@ (8016728 <vPortFree+0xc0>)
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	4413      	add	r3, r2
 8016702:	4a09      	ldr	r2, [pc, #36]	@ (8016728 <vPortFree+0xc0>)
 8016704:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016706:	6938      	ldr	r0, [r7, #16]
 8016708:	f000 f874 	bl	80167f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801670c:	4b07      	ldr	r3, [pc, #28]	@ (801672c <vPortFree+0xc4>)
 801670e:	681b      	ldr	r3, [r3, #0]
 8016710:	3301      	adds	r3, #1
 8016712:	4a06      	ldr	r2, [pc, #24]	@ (801672c <vPortFree+0xc4>)
 8016714:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8016716:	f7fe fd7d 	bl	8015214 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801671a:	bf00      	nop
 801671c:	3718      	adds	r7, #24
 801671e:	46bd      	mov	sp, r7
 8016720:	bd80      	pop	{r7, pc}
 8016722:	bf00      	nop
 8016724:	20007814 	.word	0x20007814
 8016728:	20007804 	.word	0x20007804
 801672c:	20007810 	.word	0x20007810

08016730 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016730:	b480      	push	{r7}
 8016732:	b085      	sub	sp, #20
 8016734:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016736:	f44f 537a 	mov.w	r3, #16000	@ 0x3e80
 801673a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801673c:	4b27      	ldr	r3, [pc, #156]	@ (80167dc <prvHeapInit+0xac>)
 801673e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016740:	68fb      	ldr	r3, [r7, #12]
 8016742:	f003 0307 	and.w	r3, r3, #7
 8016746:	2b00      	cmp	r3, #0
 8016748:	d00c      	beq.n	8016764 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	3307      	adds	r3, #7
 801674e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016750:	68fb      	ldr	r3, [r7, #12]
 8016752:	f023 0307 	bic.w	r3, r3, #7
 8016756:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016758:	68ba      	ldr	r2, [r7, #8]
 801675a:	68fb      	ldr	r3, [r7, #12]
 801675c:	1ad3      	subs	r3, r2, r3
 801675e:	4a1f      	ldr	r2, [pc, #124]	@ (80167dc <prvHeapInit+0xac>)
 8016760:	4413      	add	r3, r2
 8016762:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016768:	4a1d      	ldr	r2, [pc, #116]	@ (80167e0 <prvHeapInit+0xb0>)
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801676e:	4b1c      	ldr	r3, [pc, #112]	@ (80167e0 <prvHeapInit+0xb0>)
 8016770:	2200      	movs	r2, #0
 8016772:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	68ba      	ldr	r2, [r7, #8]
 8016778:	4413      	add	r3, r2
 801677a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801677c:	2208      	movs	r2, #8
 801677e:	68fb      	ldr	r3, [r7, #12]
 8016780:	1a9b      	subs	r3, r3, r2
 8016782:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016784:	68fb      	ldr	r3, [r7, #12]
 8016786:	f023 0307 	bic.w	r3, r3, #7
 801678a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	4a15      	ldr	r2, [pc, #84]	@ (80167e4 <prvHeapInit+0xb4>)
 8016790:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016792:	4b14      	ldr	r3, [pc, #80]	@ (80167e4 <prvHeapInit+0xb4>)
 8016794:	681b      	ldr	r3, [r3, #0]
 8016796:	2200      	movs	r2, #0
 8016798:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801679a:	4b12      	ldr	r3, [pc, #72]	@ (80167e4 <prvHeapInit+0xb4>)
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	2200      	movs	r2, #0
 80167a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80167a6:	683b      	ldr	r3, [r7, #0]
 80167a8:	68fa      	ldr	r2, [r7, #12]
 80167aa:	1ad2      	subs	r2, r2, r3
 80167ac:	683b      	ldr	r3, [r7, #0]
 80167ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80167b0:	4b0c      	ldr	r3, [pc, #48]	@ (80167e4 <prvHeapInit+0xb4>)
 80167b2:	681a      	ldr	r2, [r3, #0]
 80167b4:	683b      	ldr	r3, [r7, #0]
 80167b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80167b8:	683b      	ldr	r3, [r7, #0]
 80167ba:	685b      	ldr	r3, [r3, #4]
 80167bc:	4a0a      	ldr	r2, [pc, #40]	@ (80167e8 <prvHeapInit+0xb8>)
 80167be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80167c0:	683b      	ldr	r3, [r7, #0]
 80167c2:	685b      	ldr	r3, [r3, #4]
 80167c4:	4a09      	ldr	r2, [pc, #36]	@ (80167ec <prvHeapInit+0xbc>)
 80167c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80167c8:	4b09      	ldr	r3, [pc, #36]	@ (80167f0 <prvHeapInit+0xc0>)
 80167ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80167ce:	601a      	str	r2, [r3, #0]
}
 80167d0:	bf00      	nop
 80167d2:	3714      	adds	r7, #20
 80167d4:	46bd      	mov	sp, r7
 80167d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167da:	4770      	bx	lr
 80167dc:	20003978 	.word	0x20003978
 80167e0:	200077f8 	.word	0x200077f8
 80167e4:	20007800 	.word	0x20007800
 80167e8:	20007808 	.word	0x20007808
 80167ec:	20007804 	.word	0x20007804
 80167f0:	20007814 	.word	0x20007814

080167f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80167f4:	b480      	push	{r7}
 80167f6:	b085      	sub	sp, #20
 80167f8:	af00      	add	r7, sp, #0
 80167fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80167fc:	4b28      	ldr	r3, [pc, #160]	@ (80168a0 <prvInsertBlockIntoFreeList+0xac>)
 80167fe:	60fb      	str	r3, [r7, #12]
 8016800:	e002      	b.n	8016808 <prvInsertBlockIntoFreeList+0x14>
 8016802:	68fb      	ldr	r3, [r7, #12]
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	60fb      	str	r3, [r7, #12]
 8016808:	68fb      	ldr	r3, [r7, #12]
 801680a:	681b      	ldr	r3, [r3, #0]
 801680c:	687a      	ldr	r2, [r7, #4]
 801680e:	429a      	cmp	r2, r3
 8016810:	d8f7      	bhi.n	8016802 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016812:	68fb      	ldr	r3, [r7, #12]
 8016814:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016816:	68fb      	ldr	r3, [r7, #12]
 8016818:	685b      	ldr	r3, [r3, #4]
 801681a:	68ba      	ldr	r2, [r7, #8]
 801681c:	4413      	add	r3, r2
 801681e:	687a      	ldr	r2, [r7, #4]
 8016820:	429a      	cmp	r2, r3
 8016822:	d108      	bne.n	8016836 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016824:	68fb      	ldr	r3, [r7, #12]
 8016826:	685a      	ldr	r2, [r3, #4]
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	685b      	ldr	r3, [r3, #4]
 801682c:	441a      	add	r2, r3
 801682e:	68fb      	ldr	r3, [r7, #12]
 8016830:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016832:	68fb      	ldr	r3, [r7, #12]
 8016834:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	685b      	ldr	r3, [r3, #4]
 801683e:	68ba      	ldr	r2, [r7, #8]
 8016840:	441a      	add	r2, r3
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	681b      	ldr	r3, [r3, #0]
 8016846:	429a      	cmp	r2, r3
 8016848:	d118      	bne.n	801687c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801684a:	68fb      	ldr	r3, [r7, #12]
 801684c:	681a      	ldr	r2, [r3, #0]
 801684e:	4b15      	ldr	r3, [pc, #84]	@ (80168a4 <prvInsertBlockIntoFreeList+0xb0>)
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	429a      	cmp	r2, r3
 8016854:	d00d      	beq.n	8016872 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	685a      	ldr	r2, [r3, #4]
 801685a:	68fb      	ldr	r3, [r7, #12]
 801685c:	681b      	ldr	r3, [r3, #0]
 801685e:	685b      	ldr	r3, [r3, #4]
 8016860:	441a      	add	r2, r3
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	681b      	ldr	r3, [r3, #0]
 801686a:	681a      	ldr	r2, [r3, #0]
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	601a      	str	r2, [r3, #0]
 8016870:	e008      	b.n	8016884 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016872:	4b0c      	ldr	r3, [pc, #48]	@ (80168a4 <prvInsertBlockIntoFreeList+0xb0>)
 8016874:	681a      	ldr	r2, [r3, #0]
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	601a      	str	r2, [r3, #0]
 801687a:	e003      	b.n	8016884 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	681a      	ldr	r2, [r3, #0]
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016884:	68fa      	ldr	r2, [r7, #12]
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	429a      	cmp	r2, r3
 801688a:	d002      	beq.n	8016892 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	687a      	ldr	r2, [r7, #4]
 8016890:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016892:	bf00      	nop
 8016894:	3714      	adds	r7, #20
 8016896:	46bd      	mov	sp, r7
 8016898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801689c:	4770      	bx	lr
 801689e:	bf00      	nop
 80168a0:	200077f8 	.word	0x200077f8
 80168a4:	20007800 	.word	0x20007800

080168a8 <vPortGetHeapStats>:
/*-----------------------------------------------------------*/

void vPortGetHeapStats( HeapStats_t *pxHeapStats )
{
 80168a8:	b580      	push	{r7, lr}
 80168aa:	b086      	sub	sp, #24
 80168ac:	af00      	add	r7, sp, #0
 80168ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock;
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 80168b0:	2300      	movs	r3, #0
 80168b2:	613b      	str	r3, [r7, #16]
 80168b4:	2300      	movs	r3, #0
 80168b6:	60fb      	str	r3, [r7, #12]
 80168b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80168bc:	60bb      	str	r3, [r7, #8]

	vTaskSuspendAll();
 80168be:	f7fe fc9b 	bl	80151f8 <vTaskSuspendAll>
	{
		pxBlock = xStart.pxNextFreeBlock;
 80168c2:	4b22      	ldr	r3, [pc, #136]	@ (801694c <vPortGetHeapStats+0xa4>)
 80168c4:	681b      	ldr	r3, [r3, #0]
 80168c6:	617b      	str	r3, [r7, #20]

		/* pxBlock will be NULL if the heap has not been initialised.  The heap
		is initialised automatically when the first allocation is made. */
		if( pxBlock != NULL )
 80168c8:	697b      	ldr	r3, [r7, #20]
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d01a      	beq.n	8016904 <vPortGetHeapStats+0x5c>
		{
			do
			{
				/* Increment the number of blocks and record the largest block seen
				so far. */
				xBlocks++;
 80168ce:	693b      	ldr	r3, [r7, #16]
 80168d0:	3301      	adds	r3, #1
 80168d2:	613b      	str	r3, [r7, #16]

				if( pxBlock->xBlockSize > xMaxSize )
 80168d4:	697b      	ldr	r3, [r7, #20]
 80168d6:	685b      	ldr	r3, [r3, #4]
 80168d8:	68fa      	ldr	r2, [r7, #12]
 80168da:	429a      	cmp	r2, r3
 80168dc:	d202      	bcs.n	80168e4 <vPortGetHeapStats+0x3c>
				{
					xMaxSize = pxBlock->xBlockSize;
 80168de:	697b      	ldr	r3, [r7, #20]
 80168e0:	685b      	ldr	r3, [r3, #4]
 80168e2:	60fb      	str	r3, [r7, #12]
				}

				if( pxBlock->xBlockSize < xMinSize )
 80168e4:	697b      	ldr	r3, [r7, #20]
 80168e6:	685b      	ldr	r3, [r3, #4]
 80168e8:	68ba      	ldr	r2, [r7, #8]
 80168ea:	429a      	cmp	r2, r3
 80168ec:	d902      	bls.n	80168f4 <vPortGetHeapStats+0x4c>
				{
					xMinSize = pxBlock->xBlockSize;
 80168ee:	697b      	ldr	r3, [r7, #20]
 80168f0:	685b      	ldr	r3, [r3, #4]
 80168f2:	60bb      	str	r3, [r7, #8]
				}

				/* Move to the next block in the chain until the last block is
				reached. */
				pxBlock = pxBlock->pxNextFreeBlock;
 80168f4:	697b      	ldr	r3, [r7, #20]
 80168f6:	681b      	ldr	r3, [r3, #0]
 80168f8:	617b      	str	r3, [r7, #20]
			} while( pxBlock != pxEnd );
 80168fa:	4b15      	ldr	r3, [pc, #84]	@ (8016950 <vPortGetHeapStats+0xa8>)
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	697a      	ldr	r2, [r7, #20]
 8016900:	429a      	cmp	r2, r3
 8016902:	d1e4      	bne.n	80168ce <vPortGetHeapStats+0x26>
		}
	}
	xTaskResumeAll();
 8016904:	f7fe fc86 	bl	8015214 <xTaskResumeAll>

	pxHeapStats->xSizeOfLargestFreeBlockInBytes = xMaxSize;
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	68fa      	ldr	r2, [r7, #12]
 801690c:	605a      	str	r2, [r3, #4]
	pxHeapStats->xSizeOfSmallestFreeBlockInBytes = xMinSize;
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	68ba      	ldr	r2, [r7, #8]
 8016912:	609a      	str	r2, [r3, #8]
	pxHeapStats->xNumberOfFreeBlocks = xBlocks;
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	693a      	ldr	r2, [r7, #16]
 8016918:	60da      	str	r2, [r3, #12]

	taskENTER_CRITICAL();
 801691a:	f7ff fcb5 	bl	8016288 <vPortEnterCritical>
	{
		pxHeapStats->xAvailableHeapSpaceInBytes = xFreeBytesRemaining;
 801691e:	4b0d      	ldr	r3, [pc, #52]	@ (8016954 <vPortGetHeapStats+0xac>)
 8016920:	681a      	ldr	r2, [r3, #0]
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	601a      	str	r2, [r3, #0]
		pxHeapStats->xNumberOfSuccessfulAllocations = xNumberOfSuccessfulAllocations;
 8016926:	4b0c      	ldr	r3, [pc, #48]	@ (8016958 <vPortGetHeapStats+0xb0>)
 8016928:	681a      	ldr	r2, [r3, #0]
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	615a      	str	r2, [r3, #20]
		pxHeapStats->xNumberOfSuccessfulFrees = xNumberOfSuccessfulFrees;
 801692e:	4b0b      	ldr	r3, [pc, #44]	@ (801695c <vPortGetHeapStats+0xb4>)
 8016930:	681a      	ldr	r2, [r3, #0]
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	619a      	str	r2, [r3, #24]
		pxHeapStats->xMinimumEverFreeBytesRemaining = xMinimumEverFreeBytesRemaining;
 8016936:	4b0a      	ldr	r3, [pc, #40]	@ (8016960 <vPortGetHeapStats+0xb8>)
 8016938:	681a      	ldr	r2, [r3, #0]
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	611a      	str	r2, [r3, #16]
	}
	taskEXIT_CRITICAL();
 801693e:	f7ff fcd5 	bl	80162ec <vPortExitCritical>
}
 8016942:	bf00      	nop
 8016944:	3718      	adds	r7, #24
 8016946:	46bd      	mov	sp, r7
 8016948:	bd80      	pop	{r7, pc}
 801694a:	bf00      	nop
 801694c:	200077f8 	.word	0x200077f8
 8016950:	20007800 	.word	0x20007800
 8016954:	20007804 	.word	0x20007804
 8016958:	2000780c 	.word	0x2000780c
 801695c:	20007810 	.word	0x20007810
 8016960:	20007808 	.word	0x20007808

08016964 <MX_USBPD_Init>:

/* USER CODE BEGIN 2 */
/* USER CODE END 2 */
/* USBPD init function */
void MX_USBPD_Init(void)
{
 8016964:	b580      	push	{r7, lr}
 8016966:	af00      	add	r7, sp, #0

  /* Global Init of USBPD HW */
  USBPD_HW_IF_GlobalHwInit();
 8016968:	f7fc f80d 	bl	8012986 <USBPD_HW_IF_GlobalHwInit>

  /* Initialize the Device Policy Manager */
  if (USBPD_OK != USBPD_DPM_InitCore())
 801696c:	f000 f818 	bl	80169a0 <USBPD_DPM_InitCore>
 8016970:	4603      	mov	r3, r0
 8016972:	2b00      	cmp	r3, #0
 8016974:	d001      	beq.n	801697a <MX_USBPD_Init+0x16>
  {
    while(1);
 8016976:	bf00      	nop
 8016978:	e7fd      	b.n	8016976 <MX_USBPD_Init+0x12>
  }

  /* Initialise the DPM application */
  if (USBPD_OK != USBPD_DPM_UserInit())
 801697a:	f000 fa01 	bl	8016d80 <USBPD_DPM_UserInit>
 801697e:	4603      	mov	r3, r0
 8016980:	2b00      	cmp	r3, #0
 8016982:	d001      	beq.n	8016988 <MX_USBPD_Init+0x24>
  {
    while(1);
 8016984:	bf00      	nop
 8016986:	e7fd      	b.n	8016984 <MX_USBPD_Init+0x20>
  }

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

  if (USBPD_OK != USBPD_DPM_InitOS())
 8016988:	f000 f8b8 	bl	8016afc <USBPD_DPM_InitOS>
 801698c:	4603      	mov	r3, r0
 801698e:	2b00      	cmp	r3, #0
 8016990:	d001      	beq.n	8016996 <MX_USBPD_Init+0x32>
  {
    while(1);
 8016992:	bf00      	nop
 8016994:	e7fd      	b.n	8016992 <MX_USBPD_Init+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
 8016996:	b662      	cpsie	i
}
 8016998:	bf00      	nop
  /* USER CODE BEGIN EnableIRQ */
  /* Enable IRQ which has been disabled by FreeRTOS services */
  __enable_irq();
  /* USER CODE END EnableIRQ */

}
 801699a:	bf00      	nop
 801699c:	bd80      	pop	{r7, pc}
	...

080169a0 <USBPD_DPM_InitCore>:
/**
  * @brief  Initialize the core stack (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitCore(void)
{
 80169a0:	b580      	push	{r7, lr}
 80169a2:	b082      	sub	sp, #8
 80169a4:	af00      	add	r7, sp, #0
  /* variable to get dynamique memory allocated by usbpd stack */
  uint32_t stack_dynamemsize;
  USBPD_StatusTypeDef _retr = USBPD_OK;
 80169a6:	2300      	movs	r3, #0
 80169a8:	71fb      	strb	r3, [r7, #7]
    USBPD_DPM_CADCallback,
    USBPD_DPM_CADTaskWakeUp
  };

  /* Check the lib selected */
  if (USBPD_TRUE != USBPD_PE_CheckLIB(_LIB_ID))
 80169aa:	484f      	ldr	r0, [pc, #316]	@ (8016ae8 <USBPD_DPM_InitCore+0x148>)
 80169ac:	f7ea f9bd 	bl	8000d2a <USBPD_PE_CheckLIB>
 80169b0:	4603      	mov	r3, r0
 80169b2:	2b01      	cmp	r3, #1
 80169b4:	d001      	beq.n	80169ba <USBPD_DPM_InitCore+0x1a>
  {
    return USBPD_ERROR;
 80169b6:	2302      	movs	r3, #2
 80169b8:	e092      	b.n	8016ae0 <USBPD_DPM_InitCore+0x140>
  }

  /* to get how much memory are dynamically allocated by the stack
     the memory return is corresponding to 2 ports so if the application
     managed only one port divide the value return by 2                   */
  stack_dynamemsize = USBPD_PE_GetMemoryConsumption();
 80169ba:	f7ea f9c1 	bl	8000d40 <USBPD_PE_GetMemoryConsumption>
 80169be:	6038      	str	r0, [r7, #0]

  /* done to avoid warning */
  (void)stack_dynamemsize;

  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 80169c0:	2300      	movs	r3, #0
 80169c2:	71bb      	strb	r3, [r7, #6]
 80169c4:	e087      	b.n	8016ad6 <USBPD_DPM_InitCore+0x136>
  {
    /* Variable to be sure that DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_FALSE;
 80169c6:	79bb      	ldrb	r3, [r7, #6]
 80169c8:	4a48      	ldr	r2, [pc, #288]	@ (8016aec <USBPD_DPM_InitCore+0x14c>)
 80169ca:	009b      	lsls	r3, r3, #2
 80169cc:	4413      	add	r3, r2
 80169ce:	785a      	ldrb	r2, [r3, #1]
 80169d0:	f36f 02c3 	bfc	r2, #3, #1
 80169d4:	705a      	strb	r2, [r3, #1]

    /* check the stack settings */
    DPM_Params[_port_index].PE_SpecRevision  = DPM_Settings[_port_index].PE_SpecRevision;
 80169d6:	79b9      	ldrb	r1, [r7, #6]
 80169d8:	79ba      	ldrb	r2, [r7, #6]
 80169da:	4845      	ldr	r0, [pc, #276]	@ (8016af0 <USBPD_DPM_InitCore+0x150>)
 80169dc:	460b      	mov	r3, r1
 80169de:	005b      	lsls	r3, r3, #1
 80169e0:	440b      	add	r3, r1
 80169e2:	009b      	lsls	r3, r3, #2
 80169e4:	4403      	add	r3, r0
 80169e6:	791b      	ldrb	r3, [r3, #4]
 80169e8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80169ec:	b2d8      	uxtb	r0, r3
 80169ee:	493f      	ldr	r1, [pc, #252]	@ (8016aec <USBPD_DPM_InitCore+0x14c>)
 80169f0:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 80169f4:	f360 0301 	bfi	r3, r0, #0, #2
 80169f8:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].PE_PowerRole     = DPM_Settings[_port_index].PE_DefaultRole;
 80169fc:	79b9      	ldrb	r1, [r7, #6]
 80169fe:	79ba      	ldrb	r2, [r7, #6]
 8016a00:	483b      	ldr	r0, [pc, #236]	@ (8016af0 <USBPD_DPM_InitCore+0x150>)
 8016a02:	460b      	mov	r3, r1
 8016a04:	005b      	lsls	r3, r3, #1
 8016a06:	440b      	add	r3, r1
 8016a08:	009b      	lsls	r3, r3, #2
 8016a0a:	4403      	add	r3, r0
 8016a0c:	791b      	ldrb	r3, [r3, #4]
 8016a0e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8016a12:	b2d8      	uxtb	r0, r3
 8016a14:	4935      	ldr	r1, [pc, #212]	@ (8016aec <USBPD_DPM_InitCore+0x14c>)
 8016a16:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8016a1a:	f360 0382 	bfi	r3, r0, #2, #1
 8016a1e:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].PE_SwapOngoing   = USBPD_FALSE;
 8016a22:	79ba      	ldrb	r2, [r7, #6]
 8016a24:	4931      	ldr	r1, [pc, #196]	@ (8016aec <USBPD_DPM_InitCore+0x14c>)
 8016a26:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8016a2a:	f36f 1304 	bfc	r3, #4, #1
 8016a2e:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].ActiveCCIs       = CCNONE;
 8016a32:	79ba      	ldrb	r2, [r7, #6]
 8016a34:	492d      	ldr	r1, [pc, #180]	@ (8016aec <USBPD_DPM_InitCore+0x14c>)
 8016a36:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8016a3a:	f36f 1387 	bfc	r3, #6, #2
 8016a3e:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].VconnCCIs        = CCNONE;
 8016a42:	79bb      	ldrb	r3, [r7, #6]
 8016a44:	4a29      	ldr	r2, [pc, #164]	@ (8016aec <USBPD_DPM_InitCore+0x14c>)
 8016a46:	009b      	lsls	r3, r3, #2
 8016a48:	4413      	add	r3, r2
 8016a4a:	785a      	ldrb	r2, [r3, #1]
 8016a4c:	f36f 1246 	bfc	r2, #5, #2
 8016a50:	705a      	strb	r2, [r3, #1]
    DPM_Params[_port_index].VconnStatus      = USBPD_FALSE;
 8016a52:	79bb      	ldrb	r3, [r7, #6]
 8016a54:	4a25      	ldr	r2, [pc, #148]	@ (8016aec <USBPD_DPM_InitCore+0x14c>)
 8016a56:	009b      	lsls	r3, r3, #2
 8016a58:	4413      	add	r3, r2
 8016a5a:	785a      	ldrb	r2, [r3, #1]
 8016a5c:	f36f 12c7 	bfc	r2, #7, #1
 8016a60:	705a      	strb	r2, [r3, #1]

    /* CAD SET UP : Port 0 */
    CHECK_CAD_FUNCTION_CALL(USBPD_CAD_Init(_port_index, (USBPD_CAD_Callbacks *)&CAD_cbs,
 8016a62:	79ba      	ldrb	r2, [r7, #6]
 8016a64:	4613      	mov	r3, r2
 8016a66:	005b      	lsls	r3, r3, #1
 8016a68:	4413      	add	r3, r2
 8016a6a:	009b      	lsls	r3, r3, #2
 8016a6c:	4a20      	ldr	r2, [pc, #128]	@ (8016af0 <USBPD_DPM_InitCore+0x150>)
 8016a6e:	441a      	add	r2, r3
 8016a70:	79bb      	ldrb	r3, [r7, #6]
 8016a72:	009b      	lsls	r3, r3, #2
 8016a74:	491d      	ldr	r1, [pc, #116]	@ (8016aec <USBPD_DPM_InitCore+0x14c>)
 8016a76:	440b      	add	r3, r1
 8016a78:	79b8      	ldrb	r0, [r7, #6]
 8016a7a:	491e      	ldr	r1, [pc, #120]	@ (8016af4 <USBPD_DPM_InitCore+0x154>)
 8016a7c:	f7e9 fbd0 	bl	8000220 <USBPD_CAD_Init>
 8016a80:	4603      	mov	r3, r0
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d001      	beq.n	8016a8a <USBPD_DPM_InitCore+0xea>
 8016a86:	2302      	movs	r3, #2
 8016a88:	e02a      	b.n	8016ae0 <USBPD_DPM_InitCore+0x140>
                                           (USBPD_SettingsTypeDef *)&DPM_Settings[_port_index], &DPM_Params[_port_index]));

    /* PE SET UP : Port 0 */
    CHECK_PE_FUNCTION_CALL(USBPD_PE_Init(_port_index, (USBPD_SettingsTypeDef *)&DPM_Settings[_port_index],
 8016a8a:	79ba      	ldrb	r2, [r7, #6]
 8016a8c:	4613      	mov	r3, r2
 8016a8e:	005b      	lsls	r3, r3, #1
 8016a90:	4413      	add	r3, r2
 8016a92:	009b      	lsls	r3, r3, #2
 8016a94:	4a16      	ldr	r2, [pc, #88]	@ (8016af0 <USBPD_DPM_InitCore+0x150>)
 8016a96:	1899      	adds	r1, r3, r2
 8016a98:	79bb      	ldrb	r3, [r7, #6]
 8016a9a:	009b      	lsls	r3, r3, #2
 8016a9c:	4a13      	ldr	r2, [pc, #76]	@ (8016aec <USBPD_DPM_InitCore+0x14c>)
 8016a9e:	441a      	add	r2, r3
 8016aa0:	79b8      	ldrb	r0, [r7, #6]
 8016aa2:	4b15      	ldr	r3, [pc, #84]	@ (8016af8 <USBPD_DPM_InitCore+0x158>)
 8016aa4:	f7e9 fc72 	bl	800038c <USBPD_PE_Init>
 8016aa8:	4603      	mov	r3, r0
 8016aaa:	71fb      	strb	r3, [r7, #7]
 8016aac:	79fb      	ldrb	r3, [r7, #7]
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d001      	beq.n	8016ab6 <USBPD_DPM_InitCore+0x116>
 8016ab2:	79fb      	ldrb	r3, [r7, #7]
 8016ab4:	e014      	b.n	8016ae0 <USBPD_DPM_InitCore+0x140>
                                         &DPM_Params[_port_index], &dpmCallbacks));

  /* DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_TRUE;
 8016ab6:	79bb      	ldrb	r3, [r7, #6]
 8016ab8:	4a0c      	ldr	r2, [pc, #48]	@ (8016aec <USBPD_DPM_InitCore+0x14c>)
 8016aba:	009b      	lsls	r3, r3, #2
 8016abc:	4413      	add	r3, r2
 8016abe:	785a      	ldrb	r2, [r3, #1]
 8016ac0:	f042 0208 	orr.w	r2, r2, #8
 8016ac4:	705a      	strb	r2, [r3, #1]

    /* Enable CAD on Port 0 */
  USBPD_CAD_PortEnable(_port_index, USBPD_CAD_ENABLE);
 8016ac6:	79bb      	ldrb	r3, [r7, #6]
 8016ac8:	2101      	movs	r1, #1
 8016aca:	4618      	mov	r0, r3
 8016acc:	f7e9 fbd0 	bl	8000270 <USBPD_CAD_PortEnable>
  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 8016ad0:	79bb      	ldrb	r3, [r7, #6]
 8016ad2:	3301      	adds	r3, #1
 8016ad4:	71bb      	strb	r3, [r7, #6]
 8016ad6:	79bb      	ldrb	r3, [r7, #6]
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	f43f af74 	beq.w	80169c6 <USBPD_DPM_InitCore+0x26>
  }

  return _retr;
 8016ade:	79fb      	ldrb	r3, [r7, #7]
}
 8016ae0:	4618      	mov	r0, r3
 8016ae2:	3708      	adds	r7, #8
 8016ae4:	46bd      	mov	sp, r7
 8016ae6:	bd80      	pop	{r7, pc}
 8016ae8:	30410004 	.word	0x30410004
 8016aec:	20007824 	.word	0x20007824
 8016af0:	20000148 	.word	0x20000148
 8016af4:	0801ee64 	.word	0x0801ee64
 8016af8:	0801ee6c 	.word	0x0801ee6c

08016afc <USBPD_DPM_InitOS>:
/**
  * @brief  Initialize the OS parts (task, queue,... )
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitOS(void)
{
 8016afc:	b580      	push	{r7, lr}
 8016afe:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  CADQueueId = osMessageCreate(osMessageQ(queueCAD), NULL);
 8016b00:	2100      	movs	r1, #0
 8016b02:	480e      	ldr	r0, [pc, #56]	@ (8016b3c <USBPD_DPM_InitOS+0x40>)
 8016b04:	f7fd f860 	bl	8013bc8 <osMessageCreate>
 8016b08:	4603      	mov	r3, r0
 8016b0a:	4a0d      	ldr	r2, [pc, #52]	@ (8016b40 <USBPD_DPM_InitOS+0x44>)
 8016b0c:	6013      	str	r3, [r2, #0]
  if (osThreadCreate(osThread(CAD), NULL) == NULL)
 8016b0e:	2100      	movs	r1, #0
 8016b10:	480c      	ldr	r0, [pc, #48]	@ (8016b44 <USBPD_DPM_InitOS+0x48>)
 8016b12:	f7fd f812 	bl	8013b3a <osThreadCreate>
 8016b16:	4603      	mov	r3, r0
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d101      	bne.n	8016b20 <USBPD_DPM_InitOS+0x24>
#else
  CADQueueId = osMessageQueueNew (2, sizeof(uint16_t), NULL);
  if (NULL == osThreadNew(USBPD_CAD_Task, &CADQueueId, &CAD_Thread_Atrr))
#endif /* osCMSIS < 0x20000U */
  {
    return USBPD_ERROR;
 8016b1c:	2302      	movs	r3, #2
 8016b1e:	e00a      	b.n	8016b36 <USBPD_DPM_InitOS+0x3a>
  }

  /* Create the queue corresponding to PE task */
#if (osCMSIS < 0x20000U)
  PEQueueId[0] = osMessageCreate(osMessageQ(queuePE), NULL);
 8016b20:	2100      	movs	r1, #0
 8016b22:	4809      	ldr	r0, [pc, #36]	@ (8016b48 <USBPD_DPM_InitOS+0x4c>)
 8016b24:	f7fd f850 	bl	8013bc8 <osMessageCreate>
 8016b28:	4603      	mov	r3, r0
 8016b2a:	4a08      	ldr	r2, [pc, #32]	@ (8016b4c <USBPD_DPM_InitOS+0x50>)
 8016b2c:	6013      	str	r3, [r2, #0]
  PEQueueId[1] = osMessageQueueNew (1, sizeof(uint16_t), NULL);
#endif /* USBPD_PORT_COUNT == 2 */
#endif /* osCMSIS < 0x20000U */

  /* PE task to be created on attachment */
  DPM_PEThreadId_Table[USBPD_PORT_0] = NULL;
 8016b2e:	4b08      	ldr	r3, [pc, #32]	@ (8016b50 <USBPD_DPM_InitOS+0x54>)
 8016b30:	2200      	movs	r2, #0
 8016b32:	601a      	str	r2, [r3, #0]
#if USBPD_PORT_COUNT == 2
  DPM_PEThreadId_Table[USBPD_PORT_1] = NULL;
#endif /* USBPD_PORT_COUNT == 2 */

  return USBPD_OK;
 8016b34:	2300      	movs	r3, #0
}
 8016b36:	4618      	mov	r0, r3
 8016b38:	bd80      	pop	{r7, pc}
 8016b3a:	bf00      	nop
 8016b3c:	0801ee5c 	.word	0x0801ee5c
 8016b40:	20007818 	.word	0x20007818
 8016b44:	0801ee48 	.word	0x0801ee48
 8016b48:	0801ee40 	.word	0x0801ee40
 8016b4c:	20007820 	.word	0x20007820
 8016b50:	2000781c 	.word	0x2000781c

08016b54 <USBPD_PE_TaskWakeUp>:
  * @brief  WakeUp PE task
  * @param  PortNum port number
  * @retval None
  */
static void USBPD_PE_TaskWakeUp(uint8_t PortNum)
{
 8016b54:	b580      	push	{r7, lr}
 8016b56:	b082      	sub	sp, #8
 8016b58:	af00      	add	r7, sp, #0
 8016b5a:	4603      	mov	r3, r0
 8016b5c:	71fb      	strb	r3, [r7, #7]
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(PEQueueId[PortNum], 0xFFFF, 0);
 8016b5e:	79fb      	ldrb	r3, [r7, #7]
 8016b60:	4a06      	ldr	r2, [pc, #24]	@ (8016b7c <USBPD_PE_TaskWakeUp+0x28>)
 8016b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016b66:	2200      	movs	r2, #0
 8016b68:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8016b6c:	4618      	mov	r0, r3
 8016b6e:	f7fd f83d 	bl	8013bec <osMessagePut>
#else
  uint32_t event = 0xFFFFU;
  (void)osMessageQueuePut(PEQueueId[PortNum], &event, 0U, 0U);
#endif /* osCMSIS < 0x20000U */
}
 8016b72:	bf00      	nop
 8016b74:	3708      	adds	r7, #8
 8016b76:	46bd      	mov	sp, r7
 8016b78:	bd80      	pop	{r7, pc}
 8016b7a:	bf00      	nop
 8016b7c:	20007820 	.word	0x20007820

08016b80 <USBPD_DPM_CADTaskWakeUp>:
/**
  * @brief  WakeUp CAD task
  * @retval None
  */
static void USBPD_DPM_CADTaskWakeUp(void)
{
 8016b80:	b580      	push	{r7, lr}
 8016b82:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(CADQueueId, 0xFFFF, 0);
 8016b84:	4b04      	ldr	r3, [pc, #16]	@ (8016b98 <USBPD_DPM_CADTaskWakeUp+0x18>)
 8016b86:	681b      	ldr	r3, [r3, #0]
 8016b88:	2200      	movs	r2, #0
 8016b8a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8016b8e:	4618      	mov	r0, r3
 8016b90:	f7fd f82c 	bl	8013bec <osMessagePut>
#else
  uint32_t event = 0xFFFFU;
  (void)osMessageQueuePut(CADQueueId, &event, 0U, 0U);
#endif /* osCMSIS < 0x20000U */
}
 8016b94:	bf00      	nop
 8016b96:	bd80      	pop	{r7, pc}
 8016b98:	20007818 	.word	0x20007818

08016b9c <USBPD_PE_Task>:
  * @brief  Main task for PE layer
  * @param  argument Not used
  * @retval None
  */
void USBPD_PE_Task(void const *argument)
{
 8016b9c:	b580      	push	{r7, lr}
 8016b9e:	b088      	sub	sp, #32
 8016ba0:	af00      	add	r7, sp, #0
 8016ba2:	6178      	str	r0, [r7, #20]
  uint8_t _port = (uint32_t)argument;
 8016ba4:	697b      	ldr	r3, [r7, #20]
 8016ba6:	77fb      	strb	r3, [r7, #31]
  uint32_t _timing;

  for(;;)
  {
    _timing = USBPD_PE_StateMachine_SNK(_port);
 8016ba8:	7ffb      	ldrb	r3, [r7, #31]
 8016baa:	4618      	mov	r0, r3
 8016bac:	f7ea fb96 	bl	80012dc <USBPD_PE_StateMachine_SNK>
 8016bb0:	61b8      	str	r0, [r7, #24]
    osMessageGet(PEQueueId[_port],_timing);
 8016bb2:	7ffb      	ldrb	r3, [r7, #31]
 8016bb4:	4a04      	ldr	r2, [pc, #16]	@ (8016bc8 <USBPD_PE_Task+0x2c>)
 8016bb6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8016bba:	463b      	mov	r3, r7
 8016bbc:	69ba      	ldr	r2, [r7, #24]
 8016bbe:	4618      	mov	r0, r3
 8016bc0:	f7fd f854 	bl	8013c6c <osMessageGet>
    _timing = USBPD_PE_StateMachine_SNK(_port);
 8016bc4:	bf00      	nop
 8016bc6:	e7ef      	b.n	8016ba8 <USBPD_PE_Task+0xc>
 8016bc8:	20007820 	.word	0x20007820

08016bcc <USBPD_CAD_Task>:
#if (osCMSIS < 0x20000U)
void USBPD_CAD_Task(void const *argument)
#else
void USBPD_CAD_Task(void *argument)
#endif /* osCMSIS < 0x20000U */
{
 8016bcc:	b590      	push	{r4, r7, lr}
 8016bce:	b087      	sub	sp, #28
 8016bd0:	af00      	add	r7, sp, #0
 8016bd2:	6178      	str	r0, [r7, #20]
  for (;;)
  {
#if (osCMSIS < 0x20000U)
    osMessageGet(CADQueueId, USBPD_CAD_Process());
 8016bd4:	4b05      	ldr	r3, [pc, #20]	@ (8016bec <USBPD_CAD_Task+0x20>)
 8016bd6:	681c      	ldr	r4, [r3, #0]
 8016bd8:	f7e9 fb51 	bl	800027e <USBPD_CAD_Process>
 8016bdc:	4602      	mov	r2, r0
 8016bde:	463b      	mov	r3, r7
 8016be0:	4621      	mov	r1, r4
 8016be2:	4618      	mov	r0, r3
 8016be4:	f7fd f842 	bl	8013c6c <osMessageGet>
 8016be8:	e7f4      	b.n	8016bd4 <USBPD_CAD_Task+0x8>
 8016bea:	bf00      	nop
 8016bec:	20007818 	.word	0x20007818

08016bf0 <USBPD_DPM_CADCallback>:
  * @param  State     CAD state
  * @param  Cc        The Communication Channel for the USBPD communication
  * @retval None
  */
void USBPD_DPM_CADCallback(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 8016bf0:	b580      	push	{r7, lr}
 8016bf2:	b084      	sub	sp, #16
 8016bf4:	af00      	add	r7, sp, #0
 8016bf6:	4603      	mov	r3, r0
 8016bf8:	603a      	str	r2, [r7, #0]
 8016bfa:	71fb      	strb	r3, [r7, #7]
 8016bfc:	460b      	mov	r3, r1
 8016bfe:	71bb      	strb	r3, [r7, #6]

  switch (State)
 8016c00:	79bb      	ldrb	r3, [r7, #6]
 8016c02:	3b01      	subs	r3, #1
 8016c04:	2b03      	cmp	r3, #3
 8016c06:	d867      	bhi.n	8016cd8 <USBPD_DPM_CADCallback+0xe8>
 8016c08:	a201      	add	r2, pc, #4	@ (adr r2, 8016c10 <USBPD_DPM_CADCallback+0x20>)
 8016c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c0e:	bf00      	nop
 8016c10:	08016c3d 	.word	0x08016c3d
 8016c14:	08016c2f 	.word	0x08016c2f
 8016c18:	08016c3d 	.word	0x08016c3d
 8016c1c:	08016c21 	.word	0x08016c21
    case USBPD_CAD_EVENT_ATTEMC :
    {
#ifdef _VCONN_SUPPORT
      DPM_Params[PortNum].VconnStatus = USBPD_TRUE;
#endif /* _VCONN_SUPPORT */
      DPM_ManageAttachedState(PortNum, State, Cc);
 8016c20:	79b9      	ldrb	r1, [r7, #6]
 8016c22:	79fb      	ldrb	r3, [r7, #7]
 8016c24:	683a      	ldr	r2, [r7, #0]
 8016c26:	4618      	mov	r0, r3
 8016c28:	f000 f860 	bl	8016cec <DPM_ManageAttachedState>
#ifdef _VCONN_SUPPORT
      DPM_CORE_DEBUG_TRACE(PortNum, "Note: VconnStatus=TRUE");
#endif /* _VCONN_SUPPORT */
      break;
 8016c2c:	e055      	b.n	8016cda <USBPD_DPM_CADCallback+0xea>
    }
    case USBPD_CAD_EVENT_ATTACHED :
      DPM_ManageAttachedState(PortNum, State, Cc);
 8016c2e:	79b9      	ldrb	r1, [r7, #6]
 8016c30:	79fb      	ldrb	r3, [r7, #7]
 8016c32:	683a      	ldr	r2, [r7, #0]
 8016c34:	4618      	mov	r0, r3
 8016c36:	f000 f859 	bl	8016cec <DPM_ManageAttachedState>
      break;
 8016c3a:	e04e      	b.n	8016cda <USBPD_DPM_CADCallback+0xea>
    case USBPD_CAD_EVENT_DETACHED :
    case USBPD_CAD_EVENT_EMC :
    {
      /* The ufp is detached */
      (void)USBPD_PE_IsCableConnected(PortNum, 0);
 8016c3c:	79fb      	ldrb	r3, [r7, #7]
 8016c3e:	2100      	movs	r1, #0
 8016c40:	4618      	mov	r0, r3
 8016c42:	f7e9 fc09 	bl	8000458 <USBPD_PE_IsCableConnected>
      /* Terminate PE task */
      if (DPM_PEThreadId_Table[PortNum] != NULL)
 8016c46:	79fb      	ldrb	r3, [r7, #7]
 8016c48:	4a26      	ldr	r2, [pc, #152]	@ (8016ce4 <USBPD_DPM_CADCallback+0xf4>)
 8016c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	d023      	beq.n	8016c9a <USBPD_DPM_CADCallback+0xaa>
      {
        uint8_t _timeout = 0;
 8016c52:	2300      	movs	r3, #0
 8016c54:	73fb      	strb	r3, [r7, #15]
        /* Let time to PE to complete the ongoing action */
        while (eBlocked != eTaskGetState(DPM_PEThreadId_Table[PortNum]))
 8016c56:	e008      	b.n	8016c6a <USBPD_DPM_CADCallback+0x7a>
        {
          osDelay(1);
 8016c58:	2001      	movs	r0, #1
 8016c5a:	f7fc ffa1 	bl	8013ba0 <osDelay>
          _timeout++;
 8016c5e:	7bfb      	ldrb	r3, [r7, #15]
 8016c60:	3301      	adds	r3, #1
 8016c62:	73fb      	strb	r3, [r7, #15]
          if (_timeout > 30)
 8016c64:	7bfb      	ldrb	r3, [r7, #15]
 8016c66:	2b1e      	cmp	r3, #30
 8016c68:	d80a      	bhi.n	8016c80 <USBPD_DPM_CADCallback+0x90>
        while (eBlocked != eTaskGetState(DPM_PEThreadId_Table[PortNum]))
 8016c6a:	79fb      	ldrb	r3, [r7, #7]
 8016c6c:	4a1d      	ldr	r2, [pc, #116]	@ (8016ce4 <USBPD_DPM_CADCallback+0xf4>)
 8016c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016c72:	4618      	mov	r0, r3
 8016c74:	f7fe fa04 	bl	8015080 <eTaskGetState>
 8016c78:	4603      	mov	r3, r0
 8016c7a:	2b02      	cmp	r3, #2
 8016c7c:	d1ec      	bne.n	8016c58 <USBPD_DPM_CADCallback+0x68>
 8016c7e:	e000      	b.n	8016c82 <USBPD_DPM_CADCallback+0x92>
          {
            break;
 8016c80:	bf00      	nop
          }
        };

        /* Kill PE task */
        osThreadTerminate(DPM_PEThreadId_Table[PortNum]);
 8016c82:	79fb      	ldrb	r3, [r7, #7]
 8016c84:	4a17      	ldr	r2, [pc, #92]	@ (8016ce4 <USBPD_DPM_CADCallback+0xf4>)
 8016c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016c8a:	4618      	mov	r0, r3
 8016c8c:	f7fc ff7c 	bl	8013b88 <osThreadTerminate>
        DPM_PEThreadId_Table[PortNum] = NULL;
 8016c90:	79fb      	ldrb	r3, [r7, #7]
 8016c92:	4a14      	ldr	r2, [pc, #80]	@ (8016ce4 <USBPD_DPM_CADCallback+0xf4>)
 8016c94:	2100      	movs	r1, #0
 8016c96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }
      DPM_Params[PortNum].PE_SwapOngoing = USBPD_FALSE;
 8016c9a:	79fa      	ldrb	r2, [r7, #7]
 8016c9c:	4912      	ldr	r1, [pc, #72]	@ (8016ce8 <USBPD_DPM_CADCallback+0xf8>)
 8016c9e:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8016ca2:	f36f 1304 	bfc	r3, #4, #1
 8016ca6:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
      DPM_Params[PortNum].ActiveCCIs = CCNONE;
 8016caa:	79fa      	ldrb	r2, [r7, #7]
 8016cac:	490e      	ldr	r1, [pc, #56]	@ (8016ce8 <USBPD_DPM_CADCallback+0xf8>)
 8016cae:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8016cb2:	f36f 1387 	bfc	r3, #6, #2
 8016cb6:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
      DPM_Params[PortNum].PE_Power   = USBPD_POWER_NO;
 8016cba:	79fb      	ldrb	r3, [r7, #7]
 8016cbc:	4a0a      	ldr	r2, [pc, #40]	@ (8016ce8 <USBPD_DPM_CADCallback+0xf8>)
 8016cbe:	009b      	lsls	r3, r3, #2
 8016cc0:	4413      	add	r3, r2
 8016cc2:	785a      	ldrb	r2, [r3, #1]
 8016cc4:	f36f 0202 	bfc	r2, #0, #3
 8016cc8:	705a      	strb	r2, [r3, #1]
      USBPD_DPM_UserCableDetection(PortNum, State);
 8016cca:	79ba      	ldrb	r2, [r7, #6]
 8016ccc:	79fb      	ldrb	r3, [r7, #7]
 8016cce:	4611      	mov	r1, r2
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	f000 f85d 	bl	8016d90 <USBPD_DPM_UserCableDetection>
#ifdef _VCONN_SUPPORT
      DPM_Params[PortNum].VconnCCIs = CCNONE;
      DPM_Params[PortNum].VconnStatus = USBPD_FALSE;
      DPM_CORE_DEBUG_TRACE(PortNum, "Note: VconnStatus=FALSE");
#endif /* _VCONN_SUPPORT */
      break;
 8016cd6:	e000      	b.n	8016cda <USBPD_DPM_CADCallback+0xea>
    }
    default :
      /* nothing to do */
      break;
 8016cd8:	bf00      	nop
  }
}
 8016cda:	bf00      	nop
 8016cdc:	3710      	adds	r7, #16
 8016cde:	46bd      	mov	sp, r7
 8016ce0:	bd80      	pop	{r7, pc}
 8016ce2:	bf00      	nop
 8016ce4:	2000781c 	.word	0x2000781c
 8016ce8:	20007824 	.word	0x20007824

08016cec <DPM_ManageAttachedState>:

static void DPM_ManageAttachedState(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 8016cec:	b590      	push	{r4, r7, lr}
 8016cee:	b083      	sub	sp, #12
 8016cf0:	af00      	add	r7, sp, #0
 8016cf2:	4603      	mov	r3, r0
 8016cf4:	603a      	str	r2, [r7, #0]
 8016cf6:	71fb      	strb	r3, [r7, #7]
 8016cf8:	460b      	mov	r3, r1
 8016cfa:	71bb      	strb	r3, [r7, #6]
  if (CC2 == Cc)
  {
    DPM_Params[PortNum].VconnCCIs = CC1;
  }
#endif /* _VCONN_SUPPORT */
  DPM_Params[PortNum].ActiveCCIs = Cc;
 8016cfc:	79fa      	ldrb	r2, [r7, #7]
 8016cfe:	683b      	ldr	r3, [r7, #0]
 8016d00:	f003 0303 	and.w	r3, r3, #3
 8016d04:	b2d8      	uxtb	r0, r3
 8016d06:	491a      	ldr	r1, [pc, #104]	@ (8016d70 <DPM_ManageAttachedState+0x84>)
 8016d08:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8016d0c:	f360 1387 	bfi	r3, r0, #6, #2
 8016d10:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
  (void)USBPD_PE_IsCableConnected(PortNum, 1);
 8016d14:	79fb      	ldrb	r3, [r7, #7]
 8016d16:	2101      	movs	r1, #1
 8016d18:	4618      	mov	r0, r3
 8016d1a:	f7e9 fb9d 	bl	8000458 <USBPD_PE_IsCableConnected>

  USBPD_DPM_UserCableDetection(PortNum, State);
 8016d1e:	79ba      	ldrb	r2, [r7, #6]
 8016d20:	79fb      	ldrb	r3, [r7, #7]
 8016d22:	4611      	mov	r1, r2
 8016d24:	4618      	mov	r0, r3
 8016d26:	f000 f833 	bl	8016d90 <USBPD_DPM_UserCableDetection>

  /* Create PE task */
  if (DPM_PEThreadId_Table[PortNum] == NULL)
 8016d2a:	79fb      	ldrb	r3, [r7, #7]
 8016d2c:	4a11      	ldr	r2, [pc, #68]	@ (8016d74 <DPM_ManageAttachedState+0x88>)
 8016d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d117      	bne.n	8016d66 <DPM_ManageAttachedState+0x7a>
  {
#if (osCMSIS < 0x20000U)
    DPM_PEThreadId_Table[PortNum] = osThreadCreate(OSTHREAD_PE(PortNum), (void *)((uint32_t)PortNum));
 8016d36:	79fb      	ldrb	r3, [r7, #7]
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d101      	bne.n	8016d40 <DPM_ManageAttachedState+0x54>
 8016d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8016d78 <DPM_ManageAttachedState+0x8c>)
 8016d3e:	e000      	b.n	8016d42 <DPM_ManageAttachedState+0x56>
 8016d40:	4b0e      	ldr	r3, [pc, #56]	@ (8016d7c <DPM_ManageAttachedState+0x90>)
 8016d42:	79fa      	ldrb	r2, [r7, #7]
 8016d44:	79fc      	ldrb	r4, [r7, #7]
 8016d46:	4611      	mov	r1, r2
 8016d48:	4618      	mov	r0, r3
 8016d4a:	f7fc fef6 	bl	8013b3a <osThreadCreate>
 8016d4e:	4603      	mov	r3, r0
 8016d50:	4a08      	ldr	r2, [pc, #32]	@ (8016d74 <DPM_ManageAttachedState+0x88>)
 8016d52:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
#else
    DPM_PEThreadId_Table[PortNum] = osThreadNew(OSTHREAD_PE(PortNum), NULL, OSTHREAD_PE_ATTR(PortNum));
#endif /* osCMSIS < 0x20000U */
    if (DPM_PEThreadId_Table[PortNum] == NULL)
 8016d56:	79fb      	ldrb	r3, [r7, #7]
 8016d58:	4a06      	ldr	r2, [pc, #24]	@ (8016d74 <DPM_ManageAttachedState+0x88>)
 8016d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d101      	bne.n	8016d66 <DPM_ManageAttachedState+0x7a>
    {
      /* should not occur. May be an issue with FreeRTOS heap size too small */
      while (1);
 8016d62:	bf00      	nop
 8016d64:	e7fd      	b.n	8016d62 <DPM_ManageAttachedState+0x76>
    }
  }
}
 8016d66:	bf00      	nop
 8016d68:	370c      	adds	r7, #12
 8016d6a:	46bd      	mov	sp, r7
 8016d6c:	bd90      	pop	{r4, r7, pc}
 8016d6e:	bf00      	nop
 8016d70:	20007824 	.word	0x20007824
 8016d74:	2000781c 	.word	0x2000781c
 8016d78:	0801ee18 	.word	0x0801ee18
 8016d7c:	0801ee2c 	.word	0x0801ee2c

08016d80 <USBPD_DPM_UserInit>:
/**
  * @brief  Initialize DPM (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_UserInit(void)
{
 8016d80:	b480      	push	{r7}
 8016d82:	af00      	add	r7, sp, #0
/* USER CODE BEGIN USBPD_DPM_UserInit */
  return USBPD_OK;
 8016d84:	2300      	movs	r3, #0
/* USER CODE END USBPD_DPM_UserInit */
}
 8016d86:	4618      	mov	r0, r3
 8016d88:	46bd      	mov	sp, r7
 8016d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d8e:	4770      	bx	lr

08016d90 <USBPD_DPM_UserCableDetection>:
  * @param  PortNum The handle of the port
  * @param  State CAD state
  * @retval None
  */
void USBPD_DPM_UserCableDetection(uint8_t PortNum, USBPD_CAD_EVENT State)
{
 8016d90:	b480      	push	{r7}
 8016d92:	b083      	sub	sp, #12
 8016d94:	af00      	add	r7, sp, #0
 8016d96:	4603      	mov	r3, r0
 8016d98:	460a      	mov	r2, r1
 8016d9a:	71fb      	strb	r3, [r7, #7]
 8016d9c:	4613      	mov	r3, r2
 8016d9e:	71bb      	strb	r3, [r7, #6]
      // }
      // break;
    // }
  // }
/* USER CODE END USBPD_DPM_UserCableDetection */
}
 8016da0:	bf00      	nop
 8016da2:	370c      	adds	r7, #12
 8016da4:	46bd      	mov	sp, r7
 8016da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016daa:	4770      	bx	lr

08016dac <USBPD_DPM_Notification>:
  * @param  PortNum The current port number
  * @param  EventVal @ref USBPD_NotifyEventValue_TypeDef
  * @retval None
  */
void USBPD_DPM_Notification(uint8_t PortNum, USBPD_NotifyEventValue_TypeDef EventVal)
{
 8016dac:	b480      	push	{r7}
 8016dae:	b083      	sub	sp, #12
 8016db0:	af00      	add	r7, sp, #0
 8016db2:	4603      	mov	r3, r0
 8016db4:	460a      	mov	r2, r1
 8016db6:	71fb      	strb	r3, [r7, #7]
 8016db8:	4613      	mov	r3, r2
 8016dba:	71bb      	strb	r3, [r7, #6]
//      break;
//    case USBPD_NOTIFY_DATAROLESWAP_UFP :
//      break;
    default:
      DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: USBPD_DPM_Notification:%d", EventVal);
      break;
 8016dbc:	bf00      	nop
  }
/* USER CODE END USBPD_DPM_Notification */
}
 8016dbe:	bf00      	nop
 8016dc0:	370c      	adds	r7, #12
 8016dc2:	46bd      	mov	sp, r7
 8016dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dc8:	4770      	bx	lr

08016dca <USBPD_DPM_HardReset>:
  * @param  CurrentRole the current role
  * @param  Status status on hard reset event
  * @retval None
  */
void USBPD_DPM_HardReset(uint8_t PortNum, USBPD_PortPowerRole_TypeDef CurrentRole, USBPD_HR_Status_TypeDef Status)
{
 8016dca:	b480      	push	{r7}
 8016dcc:	b083      	sub	sp, #12
 8016dce:	af00      	add	r7, sp, #0
 8016dd0:	4603      	mov	r3, r0
 8016dd2:	6039      	str	r1, [r7, #0]
 8016dd4:	71fb      	strb	r3, [r7, #7]
 8016dd6:	4613      	mov	r3, r2
 8016dd8:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_DPM_HardReset */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_HardReset");
/* USER CODE END USBPD_DPM_HardReset */
}
 8016dda:	bf00      	nop
 8016ddc:	370c      	adds	r7, #12
 8016dde:	46bd      	mov	sp, r7
 8016de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016de4:	4770      	bx	lr

08016de6 <USBPD_DPM_GetDataInfo>:
  * @param  Ptr     Pointer on address where DPM data should be written (u8 pointer)
  * @param  Size    Pointer on nb of u8 written by DPM
  * @retval None
  */
void USBPD_DPM_GetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 8016de6:	b480      	push	{r7}
 8016de8:	b085      	sub	sp, #20
 8016dea:	af00      	add	r7, sp, #0
 8016dec:	60ba      	str	r2, [r7, #8]
 8016dee:	607b      	str	r3, [r7, #4]
 8016df0:	4603      	mov	r3, r0
 8016df2:	73fb      	strb	r3, [r7, #15]
 8016df4:	460b      	mov	r3, r1
 8016df6:	73bb      	strb	r3, [r7, #14]
    // break;
//  case USBPD_CORE_BATTERY_CAPABILITY:         /*!< Retrieve of Battery capability message content      */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_GetDataInfo:%d", DataId);
    break;
 8016df8:	bf00      	nop
  }
/* USER CODE END USBPD_DPM_GetDataInfo */
}
 8016dfa:	bf00      	nop
 8016dfc:	3714      	adds	r7, #20
 8016dfe:	46bd      	mov	sp, r7
 8016e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e04:	4770      	bx	lr

08016e06 <USBPD_DPM_SetDataInfo>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in DPM
  * @retval None
  */
void USBPD_DPM_SetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t Size)
{
 8016e06:	b480      	push	{r7}
 8016e08:	b085      	sub	sp, #20
 8016e0a:	af00      	add	r7, sp, #0
 8016e0c:	60ba      	str	r2, [r7, #8]
 8016e0e:	607b      	str	r3, [r7, #4]
 8016e10:	4603      	mov	r3, r0
 8016e12:	73fb      	strb	r3, [r7, #15]
 8016e14:	460b      	mov	r3, r1
 8016e16:	73bb      	strb	r3, [r7, #14]
    // break;
//  case USBPD_CORE_SNK_EXTENDED_CAPA:          /*!< Storing of Sink Extended capability message content       */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SetDataInfo:%d", DataId);
    break;
 8016e18:	bf00      	nop
  }
/* USER CODE END USBPD_DPM_SetDataInfo */

}
 8016e1a:	bf00      	nop
 8016e1c:	3714      	adds	r7, #20
 8016e1e:	46bd      	mov	sp, r7
 8016e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e24:	4770      	bx	lr

08016e26 <USBPD_DPM_SNK_EvaluateCapabilities>:
  * @param  PtrRequestData  Pointer on selected request data object
  * @param  PtrPowerObjectType  Pointer on the power data object
  * @retval None
  */
void USBPD_DPM_SNK_EvaluateCapabilities(uint8_t PortNum, uint32_t *PtrRequestData, USBPD_CORE_PDO_Type_TypeDef *PtrPowerObjectType)
{
 8016e26:	b480      	push	{r7}
 8016e28:	b085      	sub	sp, #20
 8016e2a:	af00      	add	r7, sp, #0
 8016e2c:	4603      	mov	r3, r0
 8016e2e:	60b9      	str	r1, [r7, #8]
 8016e30:	607a      	str	r2, [r7, #4]
 8016e32:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN USBPD_DPM_SNK_EvaluateCapabilities */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SNK_EvaluateCapabilities");
/* USER CODE END USBPD_DPM_SNK_EvaluateCapabilities */
}
 8016e34:	bf00      	nop
 8016e36:	3714      	adds	r7, #20
 8016e38:	46bd      	mov	sp, r7
 8016e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e3e:	4770      	bx	lr

08016e40 <USBPD_DPM_ExtendedMessageReceived>:
  * @param  ptrData   Pointer on address Extended Message data could be read (u8 pointer)
  * @param  DataSize  Nb of u8 that compose Extended message
  * @retval None
  */
void USBPD_DPM_ExtendedMessageReceived(uint8_t PortNum, USBPD_ExtendedMsg_TypeDef MsgType, uint8_t *ptrData, uint16_t DataSize)
{
 8016e40:	b480      	push	{r7}
 8016e42:	b083      	sub	sp, #12
 8016e44:	af00      	add	r7, sp, #0
 8016e46:	603a      	str	r2, [r7, #0]
 8016e48:	461a      	mov	r2, r3
 8016e4a:	4603      	mov	r3, r0
 8016e4c:	71fb      	strb	r3, [r7, #7]
 8016e4e:	460b      	mov	r3, r1
 8016e50:	71bb      	strb	r3, [r7, #6]
 8016e52:	4613      	mov	r3, r2
 8016e54:	80bb      	strh	r3, [r7, #4]
/* USER CODE BEGIN USBPD_DPM_ExtendedMessageReceived */

/* USER CODE END USBPD_DPM_ExtendedMessageReceived */
}
 8016e56:	bf00      	nop
 8016e58:	370c      	adds	r7, #12
 8016e5a:	46bd      	mov	sp, r7
 8016e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e60:	4770      	bx	lr

08016e62 <USBPD_DPM_EnterErrorRecovery>:
  * @brief  DPM callback to allow PE to enter ERROR_RECOVERY state.
  * @param  PortNum Port number
  * @retval None
  */
void USBPD_DPM_EnterErrorRecovery(uint8_t PortNum)
{
 8016e62:	b580      	push	{r7, lr}
 8016e64:	b082      	sub	sp, #8
 8016e66:	af00      	add	r7, sp, #0
 8016e68:	4603      	mov	r3, r0
 8016e6a:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_DPM_EnterErrorRecovery */
  /* Inform CAD to enter recovery mode */
  USBPD_CAD_EnterErrorRecovery(PortNum);
 8016e6c:	79fb      	ldrb	r3, [r7, #7]
 8016e6e:	4618      	mov	r0, r3
 8016e70:	f7e9 fa88 	bl	8000384 <USBPD_CAD_EnterErrorRecovery>
/* USER CODE END USBPD_DPM_EnterErrorRecovery */
}
 8016e74:	bf00      	nop
 8016e76:	3708      	adds	r7, #8
 8016e78:	46bd      	mov	sp, r7
 8016e7a:	bd80      	pop	{r7, pc}

08016e7c <USBPD_DPM_EvaluateDataRoleSwap>:
            @ref USBPD_ACCEPT if DRS can be accepted
            @ref USBPD_REJECT if DRS is not accepted in one data role (DFP or UFP) or in PD2.0 config
            @ref USBPD_NOTSUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluateDataRoleSwap(uint8_t PortNum)
{
 8016e7c:	b480      	push	{r7}
 8016e7e:	b085      	sub	sp, #20
 8016e80:	af00      	add	r7, sp, #0
 8016e82:	4603      	mov	r3, r0
 8016e84:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_DPM_EvaluateDataRoleSwap */
  USBPD_StatusTypeDef status = USBPD_REJECT;
 8016e86:	230c      	movs	r3, #12
 8016e88:	73fb      	strb	r3, [r7, #15]
  {
    /* ACCEPT DRS if at least supported by 1 data role */
    if (((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP) && (USBPD_PORTDATAROLE_UFP == DPM_Params[PortNum].PE_DataRole))
 8016e8a:	79fb      	ldrb	r3, [r7, #7]
 8016e8c:	4a18      	ldr	r2, [pc, #96]	@ (8016ef0 <USBPD_DPM_EvaluateDataRoleSwap+0x74>)
 8016e8e:	2158      	movs	r1, #88	@ 0x58
 8016e90:	fb01 f303 	mul.w	r3, r1, r3
 8016e94:	4413      	add	r3, r2
 8016e96:	781b      	ldrb	r3, [r3, #0]
 8016e98:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8016e9c:	b2db      	uxtb	r3, r3
 8016e9e:	2b01      	cmp	r3, #1
 8016ea0:	d108      	bne.n	8016eb4 <USBPD_DPM_EvaluateDataRoleSwap+0x38>
 8016ea2:	79fb      	ldrb	r3, [r7, #7]
 8016ea4:	4a13      	ldr	r2, [pc, #76]	@ (8016ef4 <USBPD_DPM_EvaluateDataRoleSwap+0x78>)
 8016ea6:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8016eaa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8016eae:	b2db      	uxtb	r3, r3
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d014      	beq.n	8016ede <USBPD_DPM_EvaluateDataRoleSwap+0x62>
       || ((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP) && (USBPD_PORTDATAROLE_DFP == DPM_Params[PortNum].PE_DataRole)))
 8016eb4:	79fb      	ldrb	r3, [r7, #7]
 8016eb6:	4a0e      	ldr	r2, [pc, #56]	@ (8016ef0 <USBPD_DPM_EvaluateDataRoleSwap+0x74>)
 8016eb8:	2158      	movs	r1, #88	@ 0x58
 8016eba:	fb01 f303 	mul.w	r3, r1, r3
 8016ebe:	4413      	add	r3, r2
 8016ec0:	781b      	ldrb	r3, [r3, #0]
 8016ec2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8016ec6:	b2db      	uxtb	r3, r3
 8016ec8:	2b01      	cmp	r3, #1
 8016eca:	d10a      	bne.n	8016ee2 <USBPD_DPM_EvaluateDataRoleSwap+0x66>
 8016ecc:	79fb      	ldrb	r3, [r7, #7]
 8016ece:	4a09      	ldr	r2, [pc, #36]	@ (8016ef4 <USBPD_DPM_EvaluateDataRoleSwap+0x78>)
 8016ed0:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8016ed4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8016ed8:	b2db      	uxtb	r3, r3
 8016eda:	2b01      	cmp	r3, #1
 8016edc:	d101      	bne.n	8016ee2 <USBPD_DPM_EvaluateDataRoleSwap+0x66>
    {
      status = USBPD_ACCEPT;
 8016ede:	230a      	movs	r3, #10
 8016ee0:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8016ee2:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_DPM_EvaluateDataRoleSwap */
}
 8016ee4:	4618      	mov	r0, r3
 8016ee6:	3714      	adds	r7, #20
 8016ee8:	46bd      	mov	sp, r7
 8016eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eee:	4770      	bx	lr
 8016ef0:	20000154 	.word	0x20000154
 8016ef4:	20007824 	.word	0x20007824

08016ef8 <USBPD_DPM_IsPowerReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD_DISABLE or USBPD_ENABLE
  */
USBPD_FunctionalState USBPD_DPM_IsPowerReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 8016ef8:	b580      	push	{r7, lr}
 8016efa:	b082      	sub	sp, #8
 8016efc:	af00      	add	r7, sp, #0
 8016efe:	4603      	mov	r3, r0
 8016f00:	460a      	mov	r2, r1
 8016f02:	71fb      	strb	r3, [r7, #7]
 8016f04:	4613      	mov	r3, r2
 8016f06:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_DPM_IsPowerReady */
  return ((USBPD_OK == USBPD_PWR_IF_SupplyReady(PortNum, Vsafe)) ? USBPD_ENABLE : USBPD_DISABLE);
 8016f08:	79ba      	ldrb	r2, [r7, #6]
 8016f0a:	79fb      	ldrb	r3, [r7, #7]
 8016f0c:	4611      	mov	r1, r2
 8016f0e:	4618      	mov	r0, r3
 8016f10:	f000 f80a 	bl	8016f28 <USBPD_PWR_IF_SupplyReady>
 8016f14:	4603      	mov	r3, r0
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	bf0c      	ite	eq
 8016f1a:	2301      	moveq	r3, #1
 8016f1c:	2300      	movne	r3, #0
 8016f1e:	b2db      	uxtb	r3, r3
/* USER CODE END USBPD_DPM_IsPowerReady */
}
 8016f20:	4618      	mov	r0, r3
 8016f22:	3708      	adds	r7, #8
 8016f24:	46bd      	mov	sp, r7
 8016f26:	bd80      	pop	{r7, pc}

08016f28 <USBPD_PWR_IF_SupplyReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_PWR_IF_SupplyReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 8016f28:	b580      	push	{r7, lr}
 8016f2a:	b084      	sub	sp, #16
 8016f2c:	af00      	add	r7, sp, #0
 8016f2e:	4603      	mov	r3, r0
 8016f30:	460a      	mov	r2, r1
 8016f32:	71fb      	strb	r3, [r7, #7]
 8016f34:	4613      	mov	r3, r2
 8016f36:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_PWR_IF_SupplyReady */
  USBPD_StatusTypeDef status = USBPD_ERROR;
 8016f38:	2302      	movs	r3, #2
 8016f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t _voltage;

  /* check for valid port */
  if (!USBPD_PORT_IsValid(PortNum))
 8016f3c:	79fb      	ldrb	r3, [r7, #7]
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d001      	beq.n	8016f46 <USBPD_PWR_IF_SupplyReady+0x1e>
  {
    return USBPD_ERROR;
 8016f42:	2302      	movs	r3, #2
 8016f44:	e01c      	b.n	8016f80 <USBPD_PWR_IF_SupplyReady+0x58>
  }

  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 8016f46:	79fb      	ldrb	r3, [r7, #7]
 8016f48:	f107 0208 	add.w	r2, r7, #8
 8016f4c:	4611      	mov	r1, r2
 8016f4e:	4618      	mov	r0, r3
 8016f50:	f000 f890 	bl	8017074 <BSP_USBPD_PWR_VBUSGetVoltage>
  if (USBPD_VSAFE_0V == Vsafe)
 8016f54:	79bb      	ldrb	r3, [r7, #6]
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	d109      	bne.n	8016f6e <USBPD_PWR_IF_SupplyReady+0x46>
  {
    /* Vsafe0V */
    status = ((_voltage < USBPD_PWR_LOW_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 8016f5a:	68bb      	ldr	r3, [r7, #8]
 8016f5c:	f240 22ed 	movw	r2, #749	@ 0x2ed
 8016f60:	4293      	cmp	r3, r2
 8016f62:	d801      	bhi.n	8016f68 <USBPD_PWR_IF_SupplyReady+0x40>
 8016f64:	2300      	movs	r3, #0
 8016f66:	e000      	b.n	8016f6a <USBPD_PWR_IF_SupplyReady+0x42>
 8016f68:	2302      	movs	r3, #2
 8016f6a:	73fb      	strb	r3, [r7, #15]
 8016f6c:	e007      	b.n	8016f7e <USBPD_PWR_IF_SupplyReady+0x56>
  }
  else
  {
    /* Vsafe5V */
    status = ((_voltage > USBPD_PWR_HIGH_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 8016f6e:	68bb      	ldr	r3, [r7, #8]
 8016f70:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 8016f74:	d901      	bls.n	8016f7a <USBPD_PWR_IF_SupplyReady+0x52>
 8016f76:	2300      	movs	r3, #0
 8016f78:	e000      	b.n	8016f7c <USBPD_PWR_IF_SupplyReady+0x54>
 8016f7a:	2302      	movs	r3, #2
 8016f7c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8016f7e:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_PWR_IF_SupplyReady */
}
 8016f80:	4618      	mov	r0, r3
 8016f82:	3710      	adds	r7, #16
 8016f84:	46bd      	mov	sp, r7
 8016f86:	bd80      	pop	{r7, pc}

08016f88 <USBPD_PWR_IF_GetVBUSStatus>:
  * @param PortNum Port number
  * @param PowerTypeStatus  Power type status based on @ref USBPD_VBUSPOWER_STATUS
  * @retval UBBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PWR_IF_GetVBUSStatus(uint8_t PortNum, USBPD_VBUSPOWER_STATUS PowerTypeStatus)
{
 8016f88:	b580      	push	{r7, lr}
 8016f8a:	b084      	sub	sp, #16
 8016f8c:	af00      	add	r7, sp, #0
 8016f8e:	4603      	mov	r3, r0
 8016f90:	460a      	mov	r2, r1
 8016f92:	71fb      	strb	r3, [r7, #7]
 8016f94:	4613      	mov	r3, r2
 8016f96:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_PWR_IF_GetVBUSStatus */
  uint8_t _status = USBPD_FALSE;
 8016f98:	2300      	movs	r3, #0
 8016f9a:	73fb      	strb	r3, [r7, #15]
  uint32_t _vbus = HW_IF_PWR_GetVoltage(PortNum);
 8016f9c:	79fb      	ldrb	r3, [r7, #7]
 8016f9e:	4618      	mov	r0, r3
 8016fa0:	f7fc fa58 	bl	8013454 <HW_IF_PWR_GetVoltage>
 8016fa4:	4603      	mov	r3, r0
 8016fa6:	60bb      	str	r3, [r7, #8]

  switch(PowerTypeStatus)
 8016fa8:	79bb      	ldrb	r3, [r7, #6]
 8016faa:	2b02      	cmp	r3, #2
 8016fac:	d015      	beq.n	8016fda <USBPD_PWR_IF_GetVBUSStatus+0x52>
 8016fae:	2b02      	cmp	r3, #2
 8016fb0:	dc1a      	bgt.n	8016fe8 <USBPD_PWR_IF_GetVBUSStatus+0x60>
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d002      	beq.n	8016fbc <USBPD_PWR_IF_GetVBUSStatus+0x34>
 8016fb6:	2b01      	cmp	r3, #1
 8016fb8:	d008      	beq.n	8016fcc <USBPD_PWR_IF_GetVBUSStatus+0x44>
    break;
  case USBPD_PWR_SNKDETACH:
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
    break;
  default :
    break;
 8016fba:	e015      	b.n	8016fe8 <USBPD_PWR_IF_GetVBUSStatus+0x60>
    if (_vbus < USBPD_PWR_LOW_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8016fbc:	68bb      	ldr	r3, [r7, #8]
 8016fbe:	f240 22ed 	movw	r2, #749	@ 0x2ed
 8016fc2:	4293      	cmp	r3, r2
 8016fc4:	d812      	bhi.n	8016fec <USBPD_PWR_IF_GetVBUSStatus+0x64>
 8016fc6:	2301      	movs	r3, #1
 8016fc8:	73fb      	strb	r3, [r7, #15]
    break;
 8016fca:	e00f      	b.n	8016fec <USBPD_PWR_IF_GetVBUSStatus+0x64>
    if (_vbus >= USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8016fcc:	68bb      	ldr	r3, [r7, #8]
 8016fce:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 8016fd2:	d30d      	bcc.n	8016ff0 <USBPD_PWR_IF_GetVBUSStatus+0x68>
 8016fd4:	2301      	movs	r3, #1
 8016fd6:	73fb      	strb	r3, [r7, #15]
    break;
 8016fd8:	e00a      	b.n	8016ff0 <USBPD_PWR_IF_GetVBUSStatus+0x68>
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8016fda:	68bb      	ldr	r3, [r7, #8]
 8016fdc:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 8016fe0:	d208      	bcs.n	8016ff4 <USBPD_PWR_IF_GetVBUSStatus+0x6c>
 8016fe2:	2301      	movs	r3, #1
 8016fe4:	73fb      	strb	r3, [r7, #15]
    break;
 8016fe6:	e005      	b.n	8016ff4 <USBPD_PWR_IF_GetVBUSStatus+0x6c>
    break;
 8016fe8:	bf00      	nop
 8016fea:	e004      	b.n	8016ff6 <USBPD_PWR_IF_GetVBUSStatus+0x6e>
    break;
 8016fec:	bf00      	nop
 8016fee:	e002      	b.n	8016ff6 <USBPD_PWR_IF_GetVBUSStatus+0x6e>
    break;
 8016ff0:	bf00      	nop
 8016ff2:	e000      	b.n	8016ff6 <USBPD_PWR_IF_GetVBUSStatus+0x6e>
    break;
 8016ff4:	bf00      	nop
  }
  return _status;
 8016ff6:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_PWR_IF_GetVBUSStatus */
}
 8016ff8:	4618      	mov	r0, r3
 8016ffa:	3710      	adds	r7, #16
 8016ffc:	46bd      	mov	sp, r7
 8016ffe:	bd80      	pop	{r7, pc}

08017000 <BSP_USBPD_PWR_Init>:
  *         This parameter can be take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_Init(uint32_t Instance)
{
 8017000:	b480      	push	{r7}
 8017002:	b085      	sub	sp, #20
 8017004:	af00      	add	r7, sp, #0
 8017006:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_Init */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 8017008:	2300      	movs	r3, #0
 801700a:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	2b00      	cmp	r3, #0
 8017010:	d002      	beq.n	8017018 <BSP_USBPD_PWR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8017012:	f06f 0301 	mvn.w	r3, #1
 8017016:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8017018:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_Init */
}
 801701a:	4618      	mov	r0, r3
 801701c:	3714      	adds	r7, #20
 801701e:	46bd      	mov	sp, r7
 8017020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017024:	4770      	bx	lr

08017026 <BSP_USBPD_PWR_VBUSInit>:
  *         This parameter can be take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSInit(uint32_t Instance)
{
 8017026:	b480      	push	{r7}
 8017028:	b085      	sub	sp, #20
 801702a:	af00      	add	r7, sp, #0
 801702c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 801702e:	2300      	movs	r3, #0
 8017030:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	2b00      	cmp	r3, #0
 8017036:	d002      	beq.n	801703e <BSP_USBPD_PWR_VBUSInit+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8017038:	f06f 0301 	mvn.w	r3, #1
 801703c:	60fb      	str	r3, [r7, #12]
  else
  {
    PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSInit");
  }

  return ret;
 801703e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSInit */
}
 8017040:	4618      	mov	r0, r3
 8017042:	3714      	adds	r7, #20
 8017044:	46bd      	mov	sp, r7
 8017046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801704a:	4770      	bx	lr

0801704c <BSP_USBPD_PWR_VBUSDeInit>:
  *         This parameter can be take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSDeInit(uint32_t Instance)
{
 801704c:	b480      	push	{r7}
 801704e:	b085      	sub	sp, #20
 8017050:	af00      	add	r7, sp, #0
 8017052:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSDeInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8017054:	f06f 030a 	mvn.w	r3, #10
 8017058:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	2b00      	cmp	r3, #0
 801705e:	d002      	beq.n	8017066 <BSP_USBPD_PWR_VBUSDeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8017060:	f06f 0301 	mvn.w	r3, #1
 8017064:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8017066:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSDeInit */
}
 8017068:	4618      	mov	r0, r3
 801706a:	3714      	adds	r7, #20
 801706c:	46bd      	mov	sp, r7
 801706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017072:	4770      	bx	lr

08017074 <BSP_USBPD_PWR_VBUSGetVoltage>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @param  pVoltage Pointer on measured voltage level (in mV)
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSGetVoltage(uint32_t Instance, uint32_t *pVoltage)
{
 8017074:	b480      	push	{r7}
 8017076:	b085      	sub	sp, #20
 8017078:	af00      	add	r7, sp, #0
 801707a:	6078      	str	r0, [r7, #4]
 801707c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSGetVoltage */
  /* Check if instance is valid       */
  int32_t ret;
  uint32_t val = 0U;
 801707e:	2300      	movs	r3, #0
 8017080:	60bb      	str	r3, [r7, #8]

  if ((Instance >= USBPD_PWR_INSTANCES_NBR) || (NULL == pVoltage))
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	2b00      	cmp	r3, #0
 8017086:	d102      	bne.n	801708e <BSP_USBPD_PWR_VBUSGetVoltage+0x1a>
 8017088:	683b      	ldr	r3, [r7, #0]
 801708a:	2b00      	cmp	r3, #0
 801708c:	d103      	bne.n	8017096 <BSP_USBPD_PWR_VBUSGetVoltage+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801708e:	f06f 0301 	mvn.w	r3, #1
 8017092:	60fb      	str	r3, [r7, #12]
 8017094:	e002      	b.n	801709c <BSP_USBPD_PWR_VBUSGetVoltage+0x28>
  }
  else
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8017096:	f06f 030a 	mvn.w	r3, #10
 801709a:	60fb      	str	r3, [r7, #12]
    PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSGetVoltage");
  }
  *pVoltage = val;
 801709c:	683b      	ldr	r3, [r7, #0]
 801709e:	68ba      	ldr	r2, [r7, #8]
 80170a0:	601a      	str	r2, [r3, #0]
  return ret;
 80170a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSGetVoltage */
}
 80170a4:	4618      	mov	r0, r3
 80170a6:	3714      	adds	r7, #20
 80170a8:	46bd      	mov	sp, r7
 80170aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ae:	4770      	bx	lr

080170b0 <asserv_courant_run>:

void asserv_init(void){

}
/************ ASSERV COURANT ************/
void asserv_courant_run(void*){
 80170b0:	b580      	push	{r7, lr}
 80170b2:	b086      	sub	sp, #24
 80170b4:	af00      	add	r7, sp, #0
 80170b6:	6078      	str	r0, [r7, #4]
	for(;;){

		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80170b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80170bc:	2001      	movs	r0, #1
 80170be:	f7fe fe1b 	bl	8015cf8 <ulTaskNotifyTake>
		// --> Variation DE 250mV de 0% a 100%duty cycle  ET  450mV de -100% a 0% duty cycle
		printf("\r\nADC CHANNEL 1:%i\t\tADC CHANNEL 2:%i\r\n",(int16_t)adc2_asserv_VAL[0],(int16_t)adc2_asserv_VAL[1]);
 80170c2:	4b1c      	ldr	r3, [pc, #112]	@ (8017134 <asserv_courant_run+0x84>)
 80170c4:	881b      	ldrh	r3, [r3, #0]
 80170c6:	b21b      	sxth	r3, r3
 80170c8:	4619      	mov	r1, r3
 80170ca:	4b1a      	ldr	r3, [pc, #104]	@ (8017134 <asserv_courant_run+0x84>)
 80170cc:	885b      	ldrh	r3, [r3, #2]
 80170ce:	b21b      	sxth	r3, r3
 80170d0:	461a      	mov	r2, r3
 80170d2:	4819      	ldr	r0, [pc, #100]	@ (8017138 <asserv_courant_run+0x88>)
 80170d4:	f002 ffaa 	bl	801a02c <iprintf>
		int16_t I_1_mA = (int16_t)adc2_asserv_VAL[0] /(R_SHUNT * GAIN_NCS199A2R); //RSHUNT EN mOhm --> I en mA
 80170d8:	4b16      	ldr	r3, [pc, #88]	@ (8017134 <asserv_courant_run+0x84>)
 80170da:	881b      	ldrh	r3, [r3, #0]
 80170dc:	b21b      	sxth	r3, r3
 80170de:	4a17      	ldr	r2, [pc, #92]	@ (801713c <asserv_courant_run+0x8c>)
 80170e0:	fb82 1203 	smull	r1, r2, r2, r3
 80170e4:	1192      	asrs	r2, r2, #6
 80170e6:	17db      	asrs	r3, r3, #31
 80170e8:	1ad3      	subs	r3, r2, r3
 80170ea:	82fb      	strh	r3, [r7, #22]
		int16_t I_2_mA = (int16_t)adc2_asserv_VAL[1] /(R_SHUNT * GAIN_NCS199A2R); //RSHUNT EN mOhm --> I en mA
 80170ec:	4b11      	ldr	r3, [pc, #68]	@ (8017134 <asserv_courant_run+0x84>)
 80170ee:	885b      	ldrh	r3, [r3, #2]
 80170f0:	b21b      	sxth	r3, r3
 80170f2:	4a12      	ldr	r2, [pc, #72]	@ (801713c <asserv_courant_run+0x8c>)
 80170f4:	fb82 1203 	smull	r1, r2, r2, r3
 80170f8:	1192      	asrs	r2, r2, #6
 80170fa:	17db      	asrs	r3, r3, #31
 80170fc:	1ad3      	subs	r3, r2, r3
 80170fe:	82bb      	strh	r3, [r7, #20]
		printf("Courant Driver1: %i (mA)\t\tCourant Driver2: %i (mA)\r\n",I_1_mA,I_2_mA);
 8017100:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017104:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8017108:	4619      	mov	r1, r3
 801710a:	480d      	ldr	r0, [pc, #52]	@ (8017140 <asserv_courant_run+0x90>)
 801710c:	f002 ff8e 	bl	801a02c <iprintf>
		//** Fonction de Transfert **//
		int32_t erreur_1= I_cons_1 - I_1_mA;
 8017110:	4b0c      	ldr	r3, [pc, #48]	@ (8017144 <asserv_courant_run+0x94>)
 8017112:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017116:	461a      	mov	r2, r3
 8017118:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801711c:	1ad3      	subs	r3, r2, r3
 801711e:	613b      	str	r3, [r7, #16]
		int32_t erreur_2= I_cons_1 - I_2_mA;
 8017120:	4b08      	ldr	r3, [pc, #32]	@ (8017144 <asserv_courant_run+0x94>)
 8017122:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017126:	461a      	mov	r2, r3
 8017128:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801712c:	1ad3      	subs	r3, r2, r3
 801712e:	60fb      	str	r3, [r7, #12]
	for(;;){
 8017130:	bf00      	nop
 8017132:	e7c1      	b.n	80170b8 <asserv_courant_run+0x8>
 8017134:	2000796c 	.word	0x2000796c
 8017138:	0801e5bc 	.word	0x0801e5bc
 801713c:	10624dd3 	.word	0x10624dd3
 8017140:	0801e5e4 	.word	0x0801e5e4
 8017144:	20007828 	.word	0x20007828

08017148 <CUSTOM_TIM_PeriodElapsedCallback>:
/*
 * We must declared here a function CUSTOM_ because main.c already use this callback
 */

/*********** PREEMPTION PRIORITY 14 ***********/
void CUSTOM_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8017148:	b580      	push	{r7, lr}
 801714a:	b084      	sub	sp, #16
 801714c:	af00      	add	r7, sp, #0
 801714e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM15) { //Every 1s
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	681b      	ldr	r3, [r3, #0]
 8017154:	4a8a      	ldr	r2, [pc, #552]	@ (8017380 <CUSTOM_TIM_PeriodElapsedCallback+0x238>)
 8017156:	4293      	cmp	r3, r2
 8017158:	d16b      	bne.n	8017232 <CUSTOM_TIM_PeriodElapsedCallback+0xea>
		if (verbosePulse){
 801715a:	4b8a      	ldr	r3, [pc, #552]	@ (8017384 <CUSTOM_TIM_PeriodElapsedCallback+0x23c>)
 801715c:	681b      	ldr	r3, [r3, #0]
 801715e:	2b00      	cmp	r3, #0
 8017160:	d03e      	beq.n	80171e0 <CUSTOM_TIM_PeriodElapsedCallback+0x98>
		printf("\r\nANGLE:%i\tWorkMode:%s\t%s\r\n",ANGLE_GLOBAL,(workMode == 1) ? "CHAT" : "SOURIS",(isSpeedActualisationIsBlocked==1) ? "BLOCKED" : "");
 8017162:	4b89      	ldr	r3, [pc, #548]	@ (8017388 <CUSTOM_TIM_PeriodElapsedCallback+0x240>)
 8017164:	6819      	ldr	r1, [r3, #0]
 8017166:	4b89      	ldr	r3, [pc, #548]	@ (801738c <CUSTOM_TIM_PeriodElapsedCallback+0x244>)
 8017168:	681b      	ldr	r3, [r3, #0]
 801716a:	2b01      	cmp	r3, #1
 801716c:	d101      	bne.n	8017172 <CUSTOM_TIM_PeriodElapsedCallback+0x2a>
 801716e:	4a88      	ldr	r2, [pc, #544]	@ (8017390 <CUSTOM_TIM_PeriodElapsedCallback+0x248>)
 8017170:	e000      	b.n	8017174 <CUSTOM_TIM_PeriodElapsedCallback+0x2c>
 8017172:	4a88      	ldr	r2, [pc, #544]	@ (8017394 <CUSTOM_TIM_PeriodElapsedCallback+0x24c>)
 8017174:	4b88      	ldr	r3, [pc, #544]	@ (8017398 <CUSTOM_TIM_PeriodElapsedCallback+0x250>)
 8017176:	681b      	ldr	r3, [r3, #0]
 8017178:	2b01      	cmp	r3, #1
 801717a:	d101      	bne.n	8017180 <CUSTOM_TIM_PeriodElapsedCallback+0x38>
 801717c:	4b87      	ldr	r3, [pc, #540]	@ (801739c <CUSTOM_TIM_PeriodElapsedCallback+0x254>)
 801717e:	e000      	b.n	8017182 <CUSTOM_TIM_PeriodElapsedCallback+0x3a>
 8017180:	4b87      	ldr	r3, [pc, #540]	@ (80173a0 <CUSTOM_TIM_PeriodElapsedCallback+0x258>)
 8017182:	4888      	ldr	r0, [pc, #544]	@ (80173a4 <CUSTOM_TIM_PeriodElapsedCallback+0x25c>)
 8017184:	f002 ff52 	bl	801a02c <iprintf>
		printf("FWD1 | pulseGoal: %lu | pulse: %lu\r\n", MDriver1.FWD->pulseGoal, *(MDriver1.FWD->CCR_Channel));
 8017188:	4b87      	ldr	r3, [pc, #540]	@ (80173a8 <CUSTOM_TIM_PeriodElapsedCallback+0x260>)
 801718a:	685b      	ldr	r3, [r3, #4]
 801718c:	6899      	ldr	r1, [r3, #8]
 801718e:	4b86      	ldr	r3, [pc, #536]	@ (80173a8 <CUSTOM_TIM_PeriodElapsedCallback+0x260>)
 8017190:	685b      	ldr	r3, [r3, #4]
 8017192:	685b      	ldr	r3, [r3, #4]
 8017194:	681b      	ldr	r3, [r3, #0]
 8017196:	461a      	mov	r2, r3
 8017198:	4884      	ldr	r0, [pc, #528]	@ (80173ac <CUSTOM_TIM_PeriodElapsedCallback+0x264>)
 801719a:	f002 ff47 	bl	801a02c <iprintf>
		printf("REV1 | pulseGoal: %lu | pulse: %lu\r\n", MDriver1.REV->pulseGoal, *(MDriver1.REV->CCR_Channel));
 801719e:	4b82      	ldr	r3, [pc, #520]	@ (80173a8 <CUSTOM_TIM_PeriodElapsedCallback+0x260>)
 80171a0:	689b      	ldr	r3, [r3, #8]
 80171a2:	6899      	ldr	r1, [r3, #8]
 80171a4:	4b80      	ldr	r3, [pc, #512]	@ (80173a8 <CUSTOM_TIM_PeriodElapsedCallback+0x260>)
 80171a6:	689b      	ldr	r3, [r3, #8]
 80171a8:	685b      	ldr	r3, [r3, #4]
 80171aa:	681b      	ldr	r3, [r3, #0]
 80171ac:	461a      	mov	r2, r3
 80171ae:	4880      	ldr	r0, [pc, #512]	@ (80173b0 <CUSTOM_TIM_PeriodElapsedCallback+0x268>)
 80171b0:	f002 ff3c 	bl	801a02c <iprintf>
		printf("FWD2 | pulseGoal: %lu | pulse: %lu\r\n", MDriver2.FWD->pulseGoal, *(MDriver2.FWD->CCR_Channel));
 80171b4:	4b7f      	ldr	r3, [pc, #508]	@ (80173b4 <CUSTOM_TIM_PeriodElapsedCallback+0x26c>)
 80171b6:	685b      	ldr	r3, [r3, #4]
 80171b8:	6899      	ldr	r1, [r3, #8]
 80171ba:	4b7e      	ldr	r3, [pc, #504]	@ (80173b4 <CUSTOM_TIM_PeriodElapsedCallback+0x26c>)
 80171bc:	685b      	ldr	r3, [r3, #4]
 80171be:	685b      	ldr	r3, [r3, #4]
 80171c0:	681b      	ldr	r3, [r3, #0]
 80171c2:	461a      	mov	r2, r3
 80171c4:	487c      	ldr	r0, [pc, #496]	@ (80173b8 <CUSTOM_TIM_PeriodElapsedCallback+0x270>)
 80171c6:	f002 ff31 	bl	801a02c <iprintf>
		printf("REV2 | pulseGoal: %lu | pulse: %lu\r\n", MDriver2.REV->pulseGoal, *(MDriver2.REV->CCR_Channel));
 80171ca:	4b7a      	ldr	r3, [pc, #488]	@ (80173b4 <CUSTOM_TIM_PeriodElapsedCallback+0x26c>)
 80171cc:	689b      	ldr	r3, [r3, #8]
 80171ce:	6899      	ldr	r1, [r3, #8]
 80171d0:	4b78      	ldr	r3, [pc, #480]	@ (80173b4 <CUSTOM_TIM_PeriodElapsedCallback+0x26c>)
 80171d2:	689b      	ldr	r3, [r3, #8]
 80171d4:	685b      	ldr	r3, [r3, #4]
 80171d6:	681b      	ldr	r3, [r3, #0]
 80171d8:	461a      	mov	r2, r3
 80171da:	4878      	ldr	r0, [pc, #480]	@ (80173bc <CUSTOM_TIM_PeriodElapsedCallback+0x274>)
 80171dc:	f002 ff26 	bl	801a02c <iprintf>
		}
		if (isSeeIMU) {
 80171e0:	4b77      	ldr	r3, [pc, #476]	@ (80173c0 <CUSTOM_TIM_PeriodElapsedCallback+0x278>)
 80171e2:	681b      	ldr	r3, [r3, #0]
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	d017      	beq.n	8017218 <CUSTOM_TIM_PeriodElapsedCallback+0xd0>
			uint8_t ret_ADXL;
			uint8_t ret_GPIO;
			ADXL343_ReadRegister(0x2B, &ret_ADXL, 1);
 80171e8:	f107 030e 	add.w	r3, r7, #14
 80171ec:	2201      	movs	r2, #1
 80171ee:	4619      	mov	r1, r3
 80171f0:	202b      	movs	r0, #43	@ 0x2b
 80171f2:	f7ee fbc7 	bl	8005984 <ADXL343_ReadRegister>
			TCA9555_ReadRegister(0x01, &ret_GPIO, 1);
 80171f6:	f107 030d 	add.w	r3, r7, #13
 80171fa:	2201      	movs	r2, #1
 80171fc:	4619      	mov	r1, r3
 80171fe:	2001      	movs	r0, #1
 8017200:	f7ee fec2 	bl	8005f88 <TCA9555_ReadRegister>
			printf("READ - ACP_TAP_STATUS :0x%02X\r\n",ret_ADXL);
 8017204:	7bbb      	ldrb	r3, [r7, #14]
 8017206:	4619      	mov	r1, r3
 8017208:	486e      	ldr	r0, [pc, #440]	@ (80173c4 <CUSTOM_TIM_PeriodElapsedCallback+0x27c>)
 801720a:	f002 ff0f 	bl	801a02c <iprintf>
			printf("READ - OUTPUT Port Registers :0x%02X\r\n",ret_GPIO);
 801720e:	7b7b      	ldrb	r3, [r7, #13]
 8017210:	4619      	mov	r1, r3
 8017212:	486d      	ldr	r0, [pc, #436]	@ (80173c8 <CUSTOM_TIM_PeriodElapsedCallback+0x280>)
 8017214:	f002 ff0a 	bl	801a02c <iprintf>

		}
		if(counterSecondesPreempt>0){
 8017218:	4b6c      	ldr	r3, [pc, #432]	@ (80173cc <CUSTOM_TIM_PeriodElapsedCallback+0x284>)
 801721a:	681b      	ldr	r3, [r3, #0]
 801721c:	2b00      	cmp	r3, #0
 801721e:	dd05      	ble.n	801722c <CUSTOM_TIM_PeriodElapsedCallback+0xe4>
 			counterSecondesPreempt--;
 8017220:	4b6a      	ldr	r3, [pc, #424]	@ (80173cc <CUSTOM_TIM_PeriodElapsedCallback+0x284>)
 8017222:	681b      	ldr	r3, [r3, #0]
 8017224:	3b01      	subs	r3, #1
 8017226:	4a69      	ldr	r2, [pc, #420]	@ (80173cc <CUSTOM_TIM_PeriodElapsedCallback+0x284>)
 8017228:	6013      	str	r3, [r2, #0]
 801722a:	e002      	b.n	8017232 <CUSTOM_TIM_PeriodElapsedCallback+0xea>
		}
		else{
			isSpeedActualisationIsBlocked = 0; // On debloque
 801722c:	4b5a      	ldr	r3, [pc, #360]	@ (8017398 <CUSTOM_TIM_PeriodElapsedCallback+0x250>)
 801722e:	2200      	movs	r2, #0
 8017230:	601a      	str	r2, [r3, #0]
		}
	}
	if (htim->Instance == TIM16) { //Every 250us
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	681b      	ldr	r3, [r3, #0]
 8017236:	4a66      	ldr	r2, [pc, #408]	@ (80173d0 <CUSTOM_TIM_PeriodElapsedCallback+0x288>)
 8017238:	4293      	cmp	r3, r2
 801723a:	f040 8108 	bne.w	801744e <CUSTOM_TIM_PeriodElapsedCallback+0x306>
		if (isSpeedInit) {
 801723e:	4b65      	ldr	r3, [pc, #404]	@ (80173d4 <CUSTOM_TIM_PeriodElapsedCallback+0x28c>)
 8017240:	681b      	ldr	r3, [r3, #0]
 8017242:	2b00      	cmp	r3, #0
 8017244:	d078      	beq.n	8017338 <CUSTOM_TIM_PeriodElapsedCallback+0x1f0>
			/*** SMOOTH SPEED CHANGE ***/
			uint8_t isSMOOTHspeed = 0;
 8017246:	2300      	movs	r3, #0
 8017248:	73fb      	strb	r3, [r7, #15]
			isSMOOTHspeed |= MDriver1.FWD->pulseGoal != *(MDriver1.FWD->CCR_Channel) ? 1: 0; //Stocke sur un bit si on doit changer une valeur de pulse
 801724a:	4b57      	ldr	r3, [pc, #348]	@ (80173a8 <CUSTOM_TIM_PeriodElapsedCallback+0x260>)
 801724c:	685b      	ldr	r3, [r3, #4]
 801724e:	689a      	ldr	r2, [r3, #8]
 8017250:	4b55      	ldr	r3, [pc, #340]	@ (80173a8 <CUSTOM_TIM_PeriodElapsedCallback+0x260>)
 8017252:	685b      	ldr	r3, [r3, #4]
 8017254:	685b      	ldr	r3, [r3, #4]
 8017256:	681b      	ldr	r3, [r3, #0]
 8017258:	429a      	cmp	r2, r3
 801725a:	bf14      	ite	ne
 801725c:	2301      	movne	r3, #1
 801725e:	2300      	moveq	r3, #0
 8017260:	b2db      	uxtb	r3, r3
 8017262:	b25a      	sxtb	r2, r3
 8017264:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017268:	4313      	orrs	r3, r2
 801726a:	b25b      	sxtb	r3, r3
 801726c:	73fb      	strb	r3, [r7, #15]
			isSMOOTHspeed |= MDriver1.REV->pulseGoal != *(MDriver1.REV->CCR_Channel) ? 1<<1: 0;
 801726e:	4b4e      	ldr	r3, [pc, #312]	@ (80173a8 <CUSTOM_TIM_PeriodElapsedCallback+0x260>)
 8017270:	689b      	ldr	r3, [r3, #8]
 8017272:	689a      	ldr	r2, [r3, #8]
 8017274:	4b4c      	ldr	r3, [pc, #304]	@ (80173a8 <CUSTOM_TIM_PeriodElapsedCallback+0x260>)
 8017276:	689b      	ldr	r3, [r3, #8]
 8017278:	685b      	ldr	r3, [r3, #4]
 801727a:	681b      	ldr	r3, [r3, #0]
 801727c:	429a      	cmp	r2, r3
 801727e:	d001      	beq.n	8017284 <CUSTOM_TIM_PeriodElapsedCallback+0x13c>
 8017280:	2302      	movs	r3, #2
 8017282:	e000      	b.n	8017286 <CUSTOM_TIM_PeriodElapsedCallback+0x13e>
 8017284:	2300      	movs	r3, #0
 8017286:	b25a      	sxtb	r2, r3
 8017288:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801728c:	4313      	orrs	r3, r2
 801728e:	b25b      	sxtb	r3, r3
 8017290:	73fb      	strb	r3, [r7, #15]
			isSMOOTHspeed |= MDriver2.FWD->pulseGoal != *(MDriver2.FWD->CCR_Channel) ? 1<<2: 0;
 8017292:	4b48      	ldr	r3, [pc, #288]	@ (80173b4 <CUSTOM_TIM_PeriodElapsedCallback+0x26c>)
 8017294:	685b      	ldr	r3, [r3, #4]
 8017296:	689a      	ldr	r2, [r3, #8]
 8017298:	4b46      	ldr	r3, [pc, #280]	@ (80173b4 <CUSTOM_TIM_PeriodElapsedCallback+0x26c>)
 801729a:	685b      	ldr	r3, [r3, #4]
 801729c:	685b      	ldr	r3, [r3, #4]
 801729e:	681b      	ldr	r3, [r3, #0]
 80172a0:	429a      	cmp	r2, r3
 80172a2:	d001      	beq.n	80172a8 <CUSTOM_TIM_PeriodElapsedCallback+0x160>
 80172a4:	2304      	movs	r3, #4
 80172a6:	e000      	b.n	80172aa <CUSTOM_TIM_PeriodElapsedCallback+0x162>
 80172a8:	2300      	movs	r3, #0
 80172aa:	b25a      	sxtb	r2, r3
 80172ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80172b0:	4313      	orrs	r3, r2
 80172b2:	b25b      	sxtb	r3, r3
 80172b4:	73fb      	strb	r3, [r7, #15]
			isSMOOTHspeed |= MDriver2.REV->pulseGoal != *(MDriver2.REV->CCR_Channel) ? 1<<3: 0;
 80172b6:	4b3f      	ldr	r3, [pc, #252]	@ (80173b4 <CUSTOM_TIM_PeriodElapsedCallback+0x26c>)
 80172b8:	689b      	ldr	r3, [r3, #8]
 80172ba:	689a      	ldr	r2, [r3, #8]
 80172bc:	4b3d      	ldr	r3, [pc, #244]	@ (80173b4 <CUSTOM_TIM_PeriodElapsedCallback+0x26c>)
 80172be:	689b      	ldr	r3, [r3, #8]
 80172c0:	685b      	ldr	r3, [r3, #4]
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	429a      	cmp	r2, r3
 80172c6:	d001      	beq.n	80172cc <CUSTOM_TIM_PeriodElapsedCallback+0x184>
 80172c8:	2308      	movs	r3, #8
 80172ca:	e000      	b.n	80172ce <CUSTOM_TIM_PeriodElapsedCallback+0x186>
 80172cc:	2300      	movs	r3, #0
 80172ce:	b25a      	sxtb	r2, r3
 80172d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80172d4:	4313      	orrs	r3, r2
 80172d6:	b25b      	sxtb	r3, r3
 80172d8:	73fb      	strb	r3, [r7, #15]

			if(isSMOOTHspeed){ // Si un seul 1 est présent aloir la condition est vrai
 80172da:	7bfb      	ldrb	r3, [r7, #15]
 80172dc:	2b00      	cmp	r3, #0
 80172de:	d02b      	beq.n	8017338 <CUSTOM_TIM_PeriodElapsedCallback+0x1f0>
				(isSMOOTHspeed & 0b1)>> 0 ? // Si on a detecter une erreur
 80172e0:	7bfb      	ldrb	r3, [r7, #15]
 80172e2:	f003 0301 	and.w	r3, r3, #1
						IT_ZXB5210_speed_UPDATE(&MDriver1, MDriver1.FWD):(void)0;
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d005      	beq.n	80172f6 <CUSTOM_TIM_PeriodElapsedCallback+0x1ae>
 80172ea:	4b2f      	ldr	r3, [pc, #188]	@ (80173a8 <CUSTOM_TIM_PeriodElapsedCallback+0x260>)
 80172ec:	685b      	ldr	r3, [r3, #4]
 80172ee:	4619      	mov	r1, r3
 80172f0:	482d      	ldr	r0, [pc, #180]	@ (80173a8 <CUSTOM_TIM_PeriodElapsedCallback+0x260>)
 80172f2:	f7ef f83b 	bl	800636c <IT_ZXB5210_speed_UPDATE>
				((isSMOOTHspeed & 0b10)>> 1) ?
 80172f6:	7bfb      	ldrb	r3, [r7, #15]
 80172f8:	f003 0302 	and.w	r3, r3, #2
						IT_ZXB5210_speed_UPDATE(&MDriver1, MDriver1.REV):(void)0;
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d005      	beq.n	801730c <CUSTOM_TIM_PeriodElapsedCallback+0x1c4>
 8017300:	4b29      	ldr	r3, [pc, #164]	@ (80173a8 <CUSTOM_TIM_PeriodElapsedCallback+0x260>)
 8017302:	689b      	ldr	r3, [r3, #8]
 8017304:	4619      	mov	r1, r3
 8017306:	4828      	ldr	r0, [pc, #160]	@ (80173a8 <CUSTOM_TIM_PeriodElapsedCallback+0x260>)
 8017308:	f7ef f830 	bl	800636c <IT_ZXB5210_speed_UPDATE>
				((isSMOOTHspeed & 0b100)>> 2) ?
 801730c:	7bfb      	ldrb	r3, [r7, #15]
 801730e:	f003 0304 	and.w	r3, r3, #4
						IT_ZXB5210_speed_UPDATE(&MDriver2, MDriver2.FWD):(void)0;
 8017312:	2b00      	cmp	r3, #0
 8017314:	d005      	beq.n	8017322 <CUSTOM_TIM_PeriodElapsedCallback+0x1da>
 8017316:	4b27      	ldr	r3, [pc, #156]	@ (80173b4 <CUSTOM_TIM_PeriodElapsedCallback+0x26c>)
 8017318:	685b      	ldr	r3, [r3, #4]
 801731a:	4619      	mov	r1, r3
 801731c:	4825      	ldr	r0, [pc, #148]	@ (80173b4 <CUSTOM_TIM_PeriodElapsedCallback+0x26c>)
 801731e:	f7ef f825 	bl	800636c <IT_ZXB5210_speed_UPDATE>
				((isSMOOTHspeed & 0b1000)>> 3) ?
 8017322:	7bfb      	ldrb	r3, [r7, #15]
 8017324:	f003 0308 	and.w	r3, r3, #8
						IT_ZXB5210_speed_UPDATE(&MDriver2, MDriver2.REV):(void)0;
 8017328:	2b00      	cmp	r3, #0
 801732a:	d005      	beq.n	8017338 <CUSTOM_TIM_PeriodElapsedCallback+0x1f0>
 801732c:	4b21      	ldr	r3, [pc, #132]	@ (80173b4 <CUSTOM_TIM_PeriodElapsedCallback+0x26c>)
 801732e:	689b      	ldr	r3, [r3, #8]
 8017330:	4619      	mov	r1, r3
 8017332:	4820      	ldr	r0, [pc, #128]	@ (80173b4 <CUSTOM_TIM_PeriodElapsedCallback+0x26c>)
 8017334:	f7ef f81a 	bl	800636c <IT_ZXB5210_speed_UPDATE>
			}
		}

		/* CHECK DETECTION BORD */
		if (HAL_GPIO_ReadPin(MOUSTACHE_1_GPIO_Port,MOUSTACHE_1_Pin) != GPIO_PIN_RESET)//Pour le debug on met RESET MAIS C'est BIEN SET
 8017338:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801733c:	4826      	ldr	r0, [pc, #152]	@ (80173d8 <CUSTOM_TIM_PeriodElapsedCallback+0x290>)
 801733e:	f7f2 f9ed 	bl	800971c <HAL_GPIO_ReadPin>
 8017342:	4603      	mov	r3, r0
 8017344:	2b00      	cmp	r3, #0
 8017346:	d04d      	beq.n	80173e4 <CUSTOM_TIM_PeriodElapsedCallback+0x29c>
		{
			LED_update(LED.L4.G,124);
 8017348:	4b24      	ldr	r3, [pc, #144]	@ (80173dc <CUSTOM_TIM_PeriodElapsedCallback+0x294>)
 801734a:	8a9b      	ldrh	r3, [r3, #20]
 801734c:	217c      	movs	r1, #124	@ 0x7c
 801734e:	4618      	mov	r0, r3
 8017350:	f7ee fc9c 	bl	8005c8c <LED_update>
			//ANGLE MOTEUR --> CHANGEMENT DE DIRECTION ±180
			if(ANGLE_GLOBAL >=0 && !isFalling1){
 8017354:	4b0c      	ldr	r3, [pc, #48]	@ (8017388 <CUSTOM_TIM_PeriodElapsedCallback+0x240>)
 8017356:	681b      	ldr	r3, [r3, #0]
 8017358:	2b00      	cmp	r3, #0
 801735a:	db4c      	blt.n	80173f6 <CUSTOM_TIM_PeriodElapsedCallback+0x2ae>
 801735c:	4b20      	ldr	r3, [pc, #128]	@ (80173e0 <CUSTOM_TIM_PeriodElapsedCallback+0x298>)
 801735e:	681b      	ldr	r3, [r3, #0]
 8017360:	2b00      	cmp	r3, #0
 8017362:	d148      	bne.n	80173f6 <CUSTOM_TIM_PeriodElapsedCallback+0x2ae>
				//ANGLE_GLOBAL = ((ANGLE_GLOBAL + 180) % 360 + 360) % 360;
				ZXB5210_angle(0);
 8017364:	2000      	movs	r0, #0
 8017366:	f7ef f85b 	bl	8006420 <ZXB5210_angle>
				isFalling1 = 1;
 801736a:	4b1d      	ldr	r3, [pc, #116]	@ (80173e0 <CUSTOM_TIM_PeriodElapsedCallback+0x298>)
 801736c:	2201      	movs	r2, #1
 801736e:	601a      	str	r2, [r3, #0]
				//Fenetre temporelle ou la consigne de demi-tour préemte sur celle du Lidar
				counterSecondesPreempt = SECONDS_BLOCKED;
 8017370:	4b16      	ldr	r3, [pc, #88]	@ (80173cc <CUSTOM_TIM_PeriodElapsedCallback+0x284>)
 8017372:	2202      	movs	r2, #2
 8017374:	601a      	str	r2, [r3, #0]
				isSpeedActualisationIsBlocked = 1;
 8017376:	4b08      	ldr	r3, [pc, #32]	@ (8017398 <CUSTOM_TIM_PeriodElapsedCallback+0x250>)
 8017378:	2201      	movs	r2, #1
 801737a:	601a      	str	r2, [r3, #0]
 801737c:	e03b      	b.n	80173f6 <CUSTOM_TIM_PeriodElapsedCallback+0x2ae>
 801737e:	bf00      	nop
 8017380:	40014000 	.word	0x40014000
 8017384:	200079f0 	.word	0x200079f0
 8017388:	20000138 	.word	0x20000138
 801738c:	200001b0 	.word	0x200001b0
 8017390:	0801e71c 	.word	0x0801e71c
 8017394:	0801e724 	.word	0x0801e724
 8017398:	2000782c 	.word	0x2000782c
 801739c:	0801e72c 	.word	0x0801e72c
 80173a0:	0801e734 	.word	0x0801e734
 80173a4:	0801e738 	.word	0x0801e738
 80173a8:	20000f84 	.word	0x20000f84
 80173ac:	0801e754 	.word	0x0801e754
 80173b0:	0801e77c 	.word	0x0801e77c
 80173b4:	20000f94 	.word	0x20000f94
 80173b8:	0801e7a4 	.word	0x0801e7a4
 80173bc:	0801e7cc 	.word	0x0801e7cc
 80173c0:	200079e0 	.word	0x200079e0
 80173c4:	0801e7f4 	.word	0x0801e7f4
 80173c8:	0801e814 	.word	0x0801e814
 80173cc:	200001ac 	.word	0x200001ac
 80173d0:	40014400 	.word	0x40014400
 80173d4:	20000fe4 	.word	0x20000fe4
 80173d8:	48000400 	.word	0x48000400
 80173dc:	20000f6c 	.word	0x20000f6c
 80173e0:	20007834 	.word	0x20007834
			}
		}
		else{
			LED_update(LED.L4.G,0);
 80173e4:	4b1c      	ldr	r3, [pc, #112]	@ (8017458 <CUSTOM_TIM_PeriodElapsedCallback+0x310>)
 80173e6:	8a9b      	ldrh	r3, [r3, #20]
 80173e8:	2100      	movs	r1, #0
 80173ea:	4618      	mov	r0, r3
 80173ec:	f7ee fc4e 	bl	8005c8c <LED_update>
			isFalling1 = 0;
 80173f0:	4b1a      	ldr	r3, [pc, #104]	@ (801745c <CUSTOM_TIM_PeriodElapsedCallback+0x314>)
 80173f2:	2200      	movs	r2, #0
 80173f4:	601a      	str	r2, [r3, #0]
		}

		if (HAL_GPIO_ReadPin(MOUSTACHE_3_GPIO_Port,MOUSTACHE_3_Pin) != GPIO_PIN_RESET)
 80173f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80173fa:	4819      	ldr	r0, [pc, #100]	@ (8017460 <CUSTOM_TIM_PeriodElapsedCallback+0x318>)
 80173fc:	f7f2 f98e 	bl	800971c <HAL_GPIO_ReadPin>
 8017400:	4603      	mov	r3, r0
 8017402:	2b00      	cmp	r3, #0
 8017404:	d01a      	beq.n	801743c <CUSTOM_TIM_PeriodElapsedCallback+0x2f4>
		{
			LED_update(LED.L4.B,124);
 8017406:	4b14      	ldr	r3, [pc, #80]	@ (8017458 <CUSTOM_TIM_PeriodElapsedCallback+0x310>)
 8017408:	8adb      	ldrh	r3, [r3, #22]
 801740a:	217c      	movs	r1, #124	@ 0x7c
 801740c:	4618      	mov	r0, r3
 801740e:	f7ee fc3d 	bl	8005c8c <LED_update>
			//ANGLE MOTEUR --> CHANGEMENT DE DIRECTION ±180
			if(ANGLE_GLOBAL >= 0 && !isFalling3){
 8017412:	4b14      	ldr	r3, [pc, #80]	@ (8017464 <CUSTOM_TIM_PeriodElapsedCallback+0x31c>)
 8017414:	681b      	ldr	r3, [r3, #0]
 8017416:	2b00      	cmp	r3, #0
 8017418:	db19      	blt.n	801744e <CUSTOM_TIM_PeriodElapsedCallback+0x306>
 801741a:	4b13      	ldr	r3, [pc, #76]	@ (8017468 <CUSTOM_TIM_PeriodElapsedCallback+0x320>)
 801741c:	681b      	ldr	r3, [r3, #0]
 801741e:	2b00      	cmp	r3, #0
 8017420:	d115      	bne.n	801744e <CUSTOM_TIM_PeriodElapsedCallback+0x306>
				//ANGLE_GLOBAL = ((ANGLE_GLOBAL + 180) % 360 + 360) % 360;
				ZXB5210_angle(180);
 8017422:	20b4      	movs	r0, #180	@ 0xb4
 8017424:	f7ee fffc 	bl	8006420 <ZXB5210_angle>
				isFalling3 = 1;
 8017428:	4b0f      	ldr	r3, [pc, #60]	@ (8017468 <CUSTOM_TIM_PeriodElapsedCallback+0x320>)
 801742a:	2201      	movs	r2, #1
 801742c:	601a      	str	r2, [r3, #0]
				//Fenetre temporelle ou la consigne de demi-tour préemte sur celle du Lidar
				counterSecondesPreempt = SECONDS_BLOCKED;
 801742e:	4b0f      	ldr	r3, [pc, #60]	@ (801746c <CUSTOM_TIM_PeriodElapsedCallback+0x324>)
 8017430:	2202      	movs	r2, #2
 8017432:	601a      	str	r2, [r3, #0]
				isSpeedActualisationIsBlocked =1;
 8017434:	4b0e      	ldr	r3, [pc, #56]	@ (8017470 <CUSTOM_TIM_PeriodElapsedCallback+0x328>)
 8017436:	2201      	movs	r2, #1
 8017438:	601a      	str	r2, [r3, #0]
		else{
			LED_update(LED.L4.B,0);
			isFalling3 = 0;
		}
	}
}
 801743a:	e008      	b.n	801744e <CUSTOM_TIM_PeriodElapsedCallback+0x306>
			LED_update(LED.L4.B,0);
 801743c:	4b06      	ldr	r3, [pc, #24]	@ (8017458 <CUSTOM_TIM_PeriodElapsedCallback+0x310>)
 801743e:	8adb      	ldrh	r3, [r3, #22]
 8017440:	2100      	movs	r1, #0
 8017442:	4618      	mov	r0, r3
 8017444:	f7ee fc22 	bl	8005c8c <LED_update>
			isFalling3 = 0;
 8017448:	4b07      	ldr	r3, [pc, #28]	@ (8017468 <CUSTOM_TIM_PeriodElapsedCallback+0x320>)
 801744a:	2200      	movs	r2, #0
 801744c:	601a      	str	r2, [r3, #0]
}
 801744e:	bf00      	nop
 8017450:	3710      	adds	r7, #16
 8017452:	46bd      	mov	sp, r7
 8017454:	bd80      	pop	{r7, pc}
 8017456:	bf00      	nop
 8017458:	20000f6c 	.word	0x20000f6c
 801745c:	20007834 	.word	0x20007834
 8017460:	48000400 	.word	0x48000400
 8017464:	20000138 	.word	0x20000138
 8017468:	20007838 	.word	0x20007838
 801746c:	200001ac 	.word	0x200001ac
 8017470:	2000782c 	.word	0x2000782c

08017474 <CUSTOM_EXTI_IRQHandler>:
void CUSTOM_EXTI_IRQHandler(void){
 8017474:	b580      	push	{r7, lr}
 8017476:	b084      	sub	sp, #16
 8017478:	af02      	add	r7, sp, #8
	if (__HAL_GPIO_EXTI_GET_IT(GE_EXTI_Pin) != RESET)
 801747a:	4b16      	ldr	r3, [pc, #88]	@ (80174d4 <CUSTOM_EXTI_IRQHandler+0x60>)
 801747c:	695b      	ldr	r3, [r3, #20]
 801747e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8017482:	2b00      	cmp	r3, #0
 8017484:	d015      	beq.n	80174b2 <CUSTOM_EXTI_IRQHandler+0x3e>
	{
		BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8017486:	2300      	movs	r3, #0
 8017488:	607b      	str	r3, [r7, #4]
		xTaskNotifyFromISR(h_task_changemenMode,
 801748a:	4b13      	ldr	r3, [pc, #76]	@ (80174d8 <CUSTOM_EXTI_IRQHandler+0x64>)
 801748c:	6818      	ldr	r0, [r3, #0]
 801748e:	1d3b      	adds	r3, r7, #4
 8017490:	9300      	str	r3, [sp, #0]
 8017492:	2300      	movs	r3, #0
 8017494:	2201      	movs	r2, #1
 8017496:	2101      	movs	r1, #1
 8017498:	f7fe fc7a 	bl	8015d90 <xTaskGenericNotifyFromISR>
				1,
				eSetBits,
				&pxHigherPriorityTaskWoken);
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	2b00      	cmp	r3, #0
 80174a0:	d007      	beq.n	80174b2 <CUSTOM_EXTI_IRQHandler+0x3e>
 80174a2:	4b0e      	ldr	r3, [pc, #56]	@ (80174dc <CUSTOM_EXTI_IRQHandler+0x68>)
 80174a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80174a8:	601a      	str	r2, [r3, #0]
 80174aa:	f3bf 8f4f 	dsb	sy
 80174ae:	f3bf 8f6f 	isb	sy
	}

	if (__HAL_GPIO_EXTI_GET_IT(START_Pin) != RESET)
 80174b2:	4b08      	ldr	r3, [pc, #32]	@ (80174d4 <CUSTOM_EXTI_IRQHandler+0x60>)
 80174b4:	695b      	ldr	r3, [r3, #20]
 80174b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d005      	beq.n	80174ca <CUSTOM_EXTI_IRQHandler+0x56>
	{
		isSpeedInit = 1-isSpeedInit;
 80174be:	4b08      	ldr	r3, [pc, #32]	@ (80174e0 <CUSTOM_EXTI_IRQHandler+0x6c>)
 80174c0:	681b      	ldr	r3, [r3, #0]
 80174c2:	f1c3 0301 	rsb	r3, r3, #1
 80174c6:	4a06      	ldr	r2, [pc, #24]	@ (80174e0 <CUSTOM_EXTI_IRQHandler+0x6c>)
 80174c8:	6013      	str	r3, [r2, #0]
	}
}
 80174ca:	bf00      	nop
 80174cc:	3708      	adds	r7, #8
 80174ce:	46bd      	mov	sp, r7
 80174d0:	bd80      	pop	{r7, pc}
 80174d2:	bf00      	nop
 80174d4:	40010400 	.word	0x40010400
 80174d8:	2000076c 	.word	0x2000076c
 80174dc:	e000ed04 	.word	0xe000ed04
 80174e0:	20000fe4 	.word	0x20000fe4

080174e4 <HAL_UART_RxHalfCpltCallback>:


void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart) {
 80174e4:	b580      	push	{r7, lr}
 80174e6:	b084      	sub	sp, #16
 80174e8:	af00      	add	r7, sp, #0
 80174ea:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	4a0d      	ldr	r2, [pc, #52]	@ (8017528 <HAL_UART_RxHalfCpltCallback+0x44>)
 80174f2:	4293      	cmp	r3, r2
 80174f4:	d114      	bne.n	8017520 <HAL_UART_RxHalfCpltCallback+0x3c>
		BaseType_t higher_priority_task_woken = pdFALSE;
 80174f6:	2300      	movs	r3, #0
 80174f8:	60fb      	str	r3, [r7, #12]
		xSemaphoreGiveFromISR(semb_halfCllbck, &higher_priority_task_woken);
 80174fa:	4b0c      	ldr	r3, [pc, #48]	@ (801752c <HAL_UART_RxHalfCpltCallback+0x48>)
 80174fc:	681b      	ldr	r3, [r3, #0]
 80174fe:	f107 020c 	add.w	r2, r7, #12
 8017502:	4611      	mov	r1, r2
 8017504:	4618      	mov	r0, r3
 8017506:	f7fc ff6f 	bl	80143e8 <xQueueGiveFromISR>
		portYIELD_FROM_ISR(higher_priority_task_woken);
 801750a:	68fb      	ldr	r3, [r7, #12]
 801750c:	2b00      	cmp	r3, #0
 801750e:	d007      	beq.n	8017520 <HAL_UART_RxHalfCpltCallback+0x3c>
 8017510:	4b07      	ldr	r3, [pc, #28]	@ (8017530 <HAL_UART_RxHalfCpltCallback+0x4c>)
 8017512:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017516:	601a      	str	r2, [r3, #0]
 8017518:	f3bf 8f4f 	dsb	sy
 801751c:	f3bf 8f6f 	isb	sy
	}
}
 8017520:	bf00      	nop
 8017522:	3710      	adds	r7, #16
 8017524:	46bd      	mov	sp, r7
 8017526:	bd80      	pop	{r7, pc}
 8017528:	40004400 	.word	0x40004400
 801752c:	20000778 	.word	0x20000778
 8017530:	e000ed04 	.word	0xe000ed04

08017534 <HAL_UART_RxCpltCallback>:

/*********** PREEMPTION PRIORITY 5 ***********/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8017534:	b580      	push	{r7, lr}
 8017536:	b084      	sub	sp, #16
 8017538:	af00      	add	r7, sp, #0
 801753a:	6078      	str	r0, [r7, #4]

	/** SHELL INTERRUPTIONS **/
	if (huart->Instance == USART1) {
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	681b      	ldr	r3, [r3, #0]
 8017540:	4a1a      	ldr	r2, [pc, #104]	@ (80175ac <HAL_UART_RxCpltCallback+0x78>)
 8017542:	4293      	cmp	r3, r2
 8017544:	d114      	bne.n	8017570 <HAL_UART_RxCpltCallback+0x3c>
		BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8017546:	2300      	movs	r3, #0
 8017548:	60fb      	str	r3, [r7, #12]
		xSemaphoreGiveFromISR(sem_uart_read, &pxHigherPriorityTaskWoken);
 801754a:	4b19      	ldr	r3, [pc, #100]	@ (80175b0 <HAL_UART_RxCpltCallback+0x7c>)
 801754c:	681b      	ldr	r3, [r3, #0]
 801754e:	f107 020c 	add.w	r2, r7, #12
 8017552:	4611      	mov	r1, r2
 8017554:	4618      	mov	r0, r3
 8017556:	f7fc ff47 	bl	80143e8 <xQueueGiveFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 801755a:	68fb      	ldr	r3, [r7, #12]
 801755c:	2b00      	cmp	r3, #0
 801755e:	d007      	beq.n	8017570 <HAL_UART_RxCpltCallback+0x3c>
 8017560:	4b14      	ldr	r3, [pc, #80]	@ (80175b4 <HAL_UART_RxCpltCallback+0x80>)
 8017562:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017566:	601a      	str	r2, [r3, #0]
 8017568:	f3bf 8f4f 	dsb	sy
 801756c:	f3bf 8f6f 	isb	sy
	}

	if (huart->Instance == USART2){
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	681b      	ldr	r3, [r3, #0]
 8017574:	4a10      	ldr	r2, [pc, #64]	@ (80175b8 <HAL_UART_RxCpltCallback+0x84>)
 8017576:	4293      	cmp	r3, r2
 8017578:	d114      	bne.n	80175a4 <HAL_UART_RxCpltCallback+0x70>
		BaseType_t higher_priority_task_woken = pdFALSE;
 801757a:	2300      	movs	r3, #0
 801757c:	60bb      	str	r3, [r7, #8]
		xSemaphoreGiveFromISR(semb_cpltCllbck, &higher_priority_task_woken);
 801757e:	4b0f      	ldr	r3, [pc, #60]	@ (80175bc <HAL_UART_RxCpltCallback+0x88>)
 8017580:	681b      	ldr	r3, [r3, #0]
 8017582:	f107 0208 	add.w	r2, r7, #8
 8017586:	4611      	mov	r1, r2
 8017588:	4618      	mov	r0, r3
 801758a:	f7fc ff2d 	bl	80143e8 <xQueueGiveFromISR>
		portYIELD_FROM_ISR(higher_priority_task_woken);
 801758e:	68bb      	ldr	r3, [r7, #8]
 8017590:	2b00      	cmp	r3, #0
 8017592:	d007      	beq.n	80175a4 <HAL_UART_RxCpltCallback+0x70>
 8017594:	4b07      	ldr	r3, [pc, #28]	@ (80175b4 <HAL_UART_RxCpltCallback+0x80>)
 8017596:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801759a:	601a      	str	r2, [r3, #0]
 801759c:	f3bf 8f4f 	dsb	sy
 80175a0:	f3bf 8f6f 	isb	sy
	}
}
 80175a4:	bf00      	nop
 80175a6:	3710      	adds	r7, #16
 80175a8:	46bd      	mov	sp, r7
 80175aa:	bd80      	pop	{r7, pc}
 80175ac:	40013800 	.word	0x40013800
 80175b0:	20007830 	.word	0x20007830
 80175b4:	e000ed04 	.word	0xe000ed04
 80175b8:	40004400 	.word	0x40004400
 80175bc:	2000077c 	.word	0x2000077c

080175c0 <HAL_ADC_ConvCpltCallback>:
/*********** PREEMPTION PRIORITY 5 ***********/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80175c0:	b580      	push	{r7, lr}
 80175c2:	b086      	sub	sp, #24
 80175c4:	af02      	add	r7, sp, #8
 80175c6:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC2) {
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	681b      	ldr	r3, [r3, #0]
 80175cc:	4a0e      	ldr	r2, [pc, #56]	@ (8017608 <HAL_ADC_ConvCpltCallback+0x48>)
 80175ce:	4293      	cmp	r3, r2
 80175d0:	d116      	bne.n	8017600 <HAL_ADC_ConvCpltCallback+0x40>
		BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 80175d2:	2300      	movs	r3, #0
 80175d4:	60fb      	str	r3, [r7, #12]
		xTaskNotifyFromISR(h_task_asserv_I,
 80175d6:	4b0d      	ldr	r3, [pc, #52]	@ (801760c <HAL_ADC_ConvCpltCallback+0x4c>)
 80175d8:	6818      	ldr	r0, [r3, #0]
 80175da:	f107 030c 	add.w	r3, r7, #12
 80175de:	9300      	str	r3, [sp, #0]
 80175e0:	2300      	movs	r3, #0
 80175e2:	2201      	movs	r2, #1
 80175e4:	2101      	movs	r1, #1
 80175e6:	f7fe fbd3 	bl	8015d90 <xTaskGenericNotifyFromISR>
				1,
				eSetBits,
				&pxHigherPriorityTaskWoken);
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80175ea:	68fb      	ldr	r3, [r7, #12]
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	d007      	beq.n	8017600 <HAL_ADC_ConvCpltCallback+0x40>
 80175f0:	4b07      	ldr	r3, [pc, #28]	@ (8017610 <HAL_ADC_ConvCpltCallback+0x50>)
 80175f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80175f6:	601a      	str	r2, [r3, #0]
 80175f8:	f3bf 8f4f 	dsb	sy
 80175fc:	f3bf 8f6f 	isb	sy
	}
}
 8017600:	bf00      	nop
 8017602:	3710      	adds	r7, #16
 8017604:	46bd      	mov	sp, r7
 8017606:	bd80      	pop	{r7, pc}
 8017608:	50000100 	.word	0x50000100
 801760c:	20000768 	.word	0x20000768
 8017610:	e000ed04 	.word	0xe000ed04

08017614 <HAL_DACEx_ConvCpltCallbackCh2>:

void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac){
 8017614:	b580      	push	{r7, lr}
 8017616:	b082      	sub	sp, #8
 8017618:	af00      	add	r7, sp, #0
 801761a:	6078      	str	r0, [r7, #4]
	if (hdac->Instance == DAC1) {
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	681b      	ldr	r3, [r3, #0]
 8017620:	4a04      	ldr	r2, [pc, #16]	@ (8017634 <HAL_DACEx_ConvCpltCallbackCh2+0x20>)
 8017622:	4293      	cmp	r3, r2
 8017624:	d102      	bne.n	801762c <HAL_DACEx_ConvCpltCallbackCh2+0x18>
		printf("FIN DE DU DAC\r\n");}
 8017626:	4804      	ldr	r0, [pc, #16]	@ (8017638 <HAL_DACEx_ConvCpltCallbackCh2+0x24>)
 8017628:	f002 fd68 	bl	801a0fc <puts>
}
 801762c:	bf00      	nop
 801762e:	3708      	adds	r7, #8
 8017630:	46bd      	mov	sp, r7
 8017632:	bd80      	pop	{r7, pc}
 8017634:	50000800 	.word	0x50000800
 8017638:	0801e83c 	.word	0x0801e83c

0801763c <changement_mode_init>:
extern LED_t LED;

int  workMode =1; // On commence en CHAT
#define DELAI_NOTIFICATION_MS 500

void changement_mode_init(void){
 801763c:	b480      	push	{r7}
 801763e:	af00      	add	r7, sp, #0
 //Le DAC est SYNCHRO AVEC TIM6
//	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);

}
 8017640:	bf00      	nop
 8017642:	46bd      	mov	sp, r7
 8017644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017648:	4770      	bx	lr
	...

0801764c <changeMode_run>:
void changeMode_run(void*){
 801764c:	b580      	push	{r7, lr}
 801764e:	b086      	sub	sp, #24
 8017650:	af00      	add	r7, sp, #0
 8017652:	6078      	str	r0, [r7, #4]
	TickType_t lastCall_Ticks = 0;
 8017654:	2300      	movs	r3, #0
 8017656:	617b      	str	r3, [r7, #20]
	for(;;){
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8017658:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801765c:	2001      	movs	r0, #1
 801765e:	f7fe fb4b 	bl	8015cf8 <ulTaskNotifyTake>
		// Obtenir le temps actuel en ticks
		TickType_t tempsActuelTicks = xTaskGetTickCount();
 8017662:	f7fd fe75 	bl	8015350 <xTaskGetTickCount>
 8017666:	6138      	str	r0, [r7, #16]
		uint8_t ret=0;
 8017668:	2300      	movs	r3, #0
 801766a:	72bb      	strb	r3, [r7, #10]

		// Calculer la durée écoulée depuis la dernière notification
		TickType_t dureeDepuisDernierAppel = tempsActuelTicks - lastCall_Ticks;
 801766c:	693a      	ldr	r2, [r7, #16]
 801766e:	697b      	ldr	r3, [r7, #20]
 8017670:	1ad3      	subs	r3, r2, r3
 8017672:	60fb      	str	r3, [r7, #12]

		// Vérifier si la durée dépasse le délai défini
		if (dureeDepuisDernierAppel > pdMS_TO_TICKS(DELAI_NOTIFICATION_MS)) {
 8017674:	68fb      	ldr	r3, [r7, #12]
 8017676:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 801767a:	d93c      	bls.n	80176f6 <changeMode_run+0xaa>
			// Mettre à jour l'horodatage du dernier appel
			lastCall_Ticks = tempsActuelTicks;
 801767c:	693b      	ldr	r3, [r7, #16]
 801767e:	617b      	str	r3, [r7, #20]
			// Lire dans les registre du Ge
			TCA9555_ReadRegister(0x03,&ret,1);
 8017680:	f107 030a 	add.w	r3, r7, #10
 8017684:	2201      	movs	r2, #1
 8017686:	4619      	mov	r1, r3
 8017688:	2003      	movs	r0, #3
 801768a:	f7ee fc7d 	bl	8005f88 <TCA9555_ReadRegister>
			uint8_t INT_IMU2 =  (ret >> 7) & 0b1;
 801768e:	7abb      	ldrb	r3, [r7, #10]
 8017690:	09db      	lsrs	r3, r3, #7
 8017692:	72fb      	strb	r3, [r7, #11]
			// Prendre decision
			if (INT_IMU2==1){
 8017694:	7afb      	ldrb	r3, [r7, #11]
 8017696:	2b01      	cmp	r3, #1
 8017698:	d109      	bne.n	80176ae <changeMode_run+0x62>
				workMode = workMode == 0 ? 1 : 0;
 801769a:	4b22      	ldr	r3, [pc, #136]	@ (8017724 <changeMode_run+0xd8>)
 801769c:	681b      	ldr	r3, [r3, #0]
 801769e:	2b00      	cmp	r3, #0
 80176a0:	bf0c      	ite	eq
 80176a2:	2301      	moveq	r3, #1
 80176a4:	2300      	movne	r3, #0
 80176a6:	b2db      	uxtb	r3, r3
 80176a8:	461a      	mov	r2, r3
 80176aa:	4b1e      	ldr	r3, [pc, #120]	@ (8017724 <changeMode_run+0xd8>)
 80176ac:	601a      	str	r2, [r3, #0]
			}
			if (workMode){
 80176ae:	4b1d      	ldr	r3, [pc, #116]	@ (8017724 <changeMode_run+0xd8>)
 80176b0:	681b      	ldr	r3, [r3, #0]
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	d00c      	beq.n	80176d0 <changeMode_run+0x84>
				LED_update((uint16_t )LED.L1.G,124);
 80176b6:	4b1c      	ldr	r3, [pc, #112]	@ (8017728 <changeMode_run+0xdc>)
 80176b8:	885b      	ldrh	r3, [r3, #2]
 80176ba:	217c      	movs	r1, #124	@ 0x7c
 80176bc:	4618      	mov	r0, r3
 80176be:	f7ee fae5 	bl	8005c8c <LED_update>
				LED_update((uint16_t )LED.L1.B,0);
 80176c2:	4b19      	ldr	r3, [pc, #100]	@ (8017728 <changeMode_run+0xdc>)
 80176c4:	889b      	ldrh	r3, [r3, #4]
 80176c6:	2100      	movs	r1, #0
 80176c8:	4618      	mov	r0, r3
 80176ca:	f7ee fadf 	bl	8005c8c <LED_update>
 80176ce:	e00b      	b.n	80176e8 <changeMode_run+0x9c>
				//play_song();
			}
			else{
				LED_update((uint16_t )LED.L1.G,0);
 80176d0:	4b15      	ldr	r3, [pc, #84]	@ (8017728 <changeMode_run+0xdc>)
 80176d2:	885b      	ldrh	r3, [r3, #2]
 80176d4:	2100      	movs	r1, #0
 80176d6:	4618      	mov	r0, r3
 80176d8:	f7ee fad8 	bl	8005c8c <LED_update>
				LED_update((uint16_t )LED.L1.B,124);
 80176dc:	4b12      	ldr	r3, [pc, #72]	@ (8017728 <changeMode_run+0xdc>)
 80176de:	889b      	ldrh	r3, [r3, #4]
 80176e0:	217c      	movs	r1, #124	@ 0x7c
 80176e2:	4618      	mov	r0, r3
 80176e4:	f7ee fad2 	bl	8005c8c <LED_update>
			}
			LED_update((uint16_t )LED.L2.R,0); //Led Cooldown
 80176e8:	4b0f      	ldr	r3, [pc, #60]	@ (8017728 <changeMode_run+0xdc>)
 80176ea:	88db      	ldrh	r3, [r3, #6]
 80176ec:	2100      	movs	r1, #0
 80176ee:	4618      	mov	r0, r3
 80176f0:	f7ee facc 	bl	8005c8c <LED_update>
 80176f4:	e005      	b.n	8017702 <changeMode_run+0xb6>
		}
		else{
			LED_update((uint16_t )LED.L2.R,124); //Led Cooldown
 80176f6:	4b0c      	ldr	r3, [pc, #48]	@ (8017728 <changeMode_run+0xdc>)
 80176f8:	88db      	ldrh	r3, [r3, #6]
 80176fa:	217c      	movs	r1, #124	@ 0x7c
 80176fc:	4618      	mov	r0, r3
 80176fe:	f7ee fac5 	bl	8005c8c <LED_update>
		}
		uint8_t retADXL=0;
 8017702:	2300      	movs	r3, #0
 8017704:	727b      	strb	r3, [r7, #9]
		ADXL343_ReadRegister(0x30,&retADXL,1); //Permet de reinitialiser le registre de l'adxl
 8017706:	f107 0309 	add.w	r3, r7, #9
 801770a:	2201      	movs	r2, #1
 801770c:	4619      	mov	r1, r3
 801770e:	2030      	movs	r0, #48	@ 0x30
 8017710:	f7ee f938 	bl	8005984 <ADXL343_ReadRegister>
		TCA9555_ReadRegister(0x03,&ret,1);
 8017714:	f107 030a 	add.w	r3, r7, #10
 8017718:	2201      	movs	r2, #1
 801771a:	4619      	mov	r1, r3
 801771c:	2003      	movs	r0, #3
 801771e:	f7ee fc33 	bl	8005f88 <TCA9555_ReadRegister>
	for(;;){
 8017722:	e799      	b.n	8017658 <changeMode_run+0xc>
 8017724:	200001b0 	.word	0x200001b0
 8017728:	20000f6c 	.word	0x20000f6c

0801772c <play_song>:

	}
}

void play_song(void){
 801772c:	b580      	push	{r7, lr}
 801772e:	b082      	sub	sp, #8
 8017730:	af02      	add	r7, sp, #8
	//Ici on joue le son miaou
	//HAL_DACEx_TriangleWaveGenerate(&hdac1, DAC1_CHANNEL_1, DAC_TRIANGLEAMPLITUDE_4095);
	generate_sine_wave();
 8017732:	f000 f821 	bl	8017778 <generate_sine_wave>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)audio_table, AUDIO_LENGTH,DAC_ALIGN_8B_R) ==HAL_OK ? debug(START,"DMA - MIAOU") : debug(D_ERROR,"DMA - MIAOU");
 8017736:	2308      	movs	r3, #8
 8017738:	9300      	str	r3, [sp, #0]
 801773a:	23c8      	movs	r3, #200	@ 0xc8
 801773c:	4a09      	ldr	r2, [pc, #36]	@ (8017764 <play_song+0x38>)
 801773e:	2100      	movs	r1, #0
 8017740:	4809      	ldr	r0, [pc, #36]	@ (8017768 <play_song+0x3c>)
 8017742:	f7f0 ffa3 	bl	800868c <HAL_DAC_Start_DMA>
 8017746:	4603      	mov	r3, r0
 8017748:	2b00      	cmp	r3, #0
 801774a:	d104      	bne.n	8017756 <play_song+0x2a>
 801774c:	4907      	ldr	r1, [pc, #28]	@ (801776c <play_song+0x40>)
 801774e:	4808      	ldr	r0, [pc, #32]	@ (8017770 <play_song+0x44>)
 8017750:	f000 fd92 	bl	8018278 <debug>
}
 8017754:	e003      	b.n	801775e <play_song+0x32>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)audio_table, AUDIO_LENGTH,DAC_ALIGN_8B_R) ==HAL_OK ? debug(START,"DMA - MIAOU") : debug(D_ERROR,"DMA - MIAOU");
 8017756:	4905      	ldr	r1, [pc, #20]	@ (801776c <play_song+0x40>)
 8017758:	4806      	ldr	r0, [pc, #24]	@ (8017774 <play_song+0x48>)
 801775a:	f000 fd8d 	bl	8018278 <debug>
}
 801775e:	bf00      	nop
 8017760:	46bd      	mov	sp, r7
 8017762:	bd80      	pop	{r7, pc}
 8017764:	2000783c 	.word	0x2000783c
 8017768:	2000062c 	.word	0x2000062c
 801776c:	0801e84c 	.word	0x0801e84c
 8017770:	0801e858 	.word	0x0801e858
 8017774:	0801e864 	.word	0x0801e864

08017778 <generate_sine_wave>:


void generate_sine_wave(void) {
 8017778:	b580      	push	{r7, lr}
 801777a:	b086      	sub	sp, #24
 801777c:	af00      	add	r7, sp, #0
    float amplitude = DAC_RESOLUTION / 2;  // Plage moyenne du DAC (0 à 255)
 801777e:	4b2e      	ldr	r3, [pc, #184]	@ (8017838 <generate_sine_wave+0xc0>)
 8017780:	60fb      	str	r3, [r7, #12]
    float offset = amplitude;              // Décalage pour faire osciller autour de 0
 8017782:	68fb      	ldr	r3, [r7, #12]
 8017784:	60bb      	str	r3, [r7, #8]

    for (int i = 0; i < AUDIO_LENGTH; i++) {
 8017786:	2300      	movs	r3, #0
 8017788:	617b      	str	r3, [r7, #20]
 801778a:	e048      	b.n	801781e <generate_sine_wave+0xa6>
        // Calculer l'échantillon sinusoidal
        float t = (float)i / SAMPLING_FREQ;  // Temps pour l'échantillon i
 801778c:	697b      	ldr	r3, [r7, #20]
 801778e:	ee07 3a90 	vmov	s15, r3
 8017792:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8017796:	eddf 6a29 	vldr	s13, [pc, #164]	@ 801783c <generate_sine_wave+0xc4>
 801779a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801779e:	edc7 7a01 	vstr	s15, [r7, #4]
        float sine_value = sin(2 * M_PI * SIN_FREQUENCY * t);  // Signal sinusoïdal
 80177a2:	6878      	ldr	r0, [r7, #4]
 80177a4:	f7eb f902 	bl	80029ac <__aeabi_f2d>
 80177a8:	a321      	add	r3, pc, #132	@ (adr r3, 8017830 <generate_sine_wave+0xb8>)
 80177aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177ae:	f7eb f955 	bl	8002a5c <__aeabi_dmul>
 80177b2:	4602      	mov	r2, r0
 80177b4:	460b      	mov	r3, r1
 80177b6:	ec43 2b17 	vmov	d7, r2, r3
 80177ba:	eeb0 0a47 	vmov.f32	s0, s14
 80177be:	eef0 0a67 	vmov.f32	s1, s15
 80177c2:	f005 fa3d 	bl	801cc40 <sin>
 80177c6:	ec53 2b10 	vmov	r2, r3, d0
 80177ca:	4610      	mov	r0, r2
 80177cc:	4619      	mov	r1, r3
 80177ce:	f7eb fc3d 	bl	800304c <__aeabi_d2f>
 80177d2:	4603      	mov	r3, r0
 80177d4:	603b      	str	r3, [r7, #0]

        // Adapter la valeur du sinus à la plage 0-255 (DAC 8 bits)
        int32_t dac_value = (int32_t)(amplitude * sine_value + offset);
 80177d6:	ed97 7a03 	vldr	s14, [r7, #12]
 80177da:	edd7 7a00 	vldr	s15, [r7]
 80177de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80177e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80177e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80177ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80177ee:	ee17 3a90 	vmov	r3, s15
 80177f2:	613b      	str	r3, [r7, #16]

        // Clipper la valeur dans la plage [0, 255]
        if (dac_value < 0) {
 80177f4:	693b      	ldr	r3, [r7, #16]
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	da02      	bge.n	8017800 <generate_sine_wave+0x88>
            dac_value = 0;
 80177fa:	2300      	movs	r3, #0
 80177fc:	613b      	str	r3, [r7, #16]
 80177fe:	e004      	b.n	801780a <generate_sine_wave+0x92>
        } else if (dac_value > DAC_RESOLUTION) {
 8017800:	693b      	ldr	r3, [r7, #16]
 8017802:	2bff      	cmp	r3, #255	@ 0xff
 8017804:	dd01      	ble.n	801780a <generate_sine_wave+0x92>
            dac_value = DAC_RESOLUTION;
 8017806:	23ff      	movs	r3, #255	@ 0xff
 8017808:	613b      	str	r3, [r7, #16]
        }

        // Assigner la valeur au tableau audio (8 bits)
        audio_table[i] = (uint8_t)dac_value;
 801780a:	693b      	ldr	r3, [r7, #16]
 801780c:	b2d9      	uxtb	r1, r3
 801780e:	4a0c      	ldr	r2, [pc, #48]	@ (8017840 <generate_sine_wave+0xc8>)
 8017810:	697b      	ldr	r3, [r7, #20]
 8017812:	4413      	add	r3, r2
 8017814:	460a      	mov	r2, r1
 8017816:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < AUDIO_LENGTH; i++) {
 8017818:	697b      	ldr	r3, [r7, #20]
 801781a:	3301      	adds	r3, #1
 801781c:	617b      	str	r3, [r7, #20]
 801781e:	697b      	ldr	r3, [r7, #20]
 8017820:	2bc7      	cmp	r3, #199	@ 0xc7
 8017822:	ddb3      	ble.n	801778c <generate_sine_wave+0x14>
    }
}
 8017824:	bf00      	nop
 8017826:	bf00      	nop
 8017828:	3718      	adds	r7, #24
 801782a:	46bd      	mov	sp, r7
 801782c:	bd80      	pop	{r7, pc}
 801782e:	bf00      	nop
 8017830:	704a9409 	.word	0x704a9409
 8017834:	40e88b2f 	.word	0x40e88b2f
 8017838:	42fe0000 	.word	0x42fe0000
 801783c:	45fa0000 	.word	0x45fa0000
 8017840:	2000783c 	.word	0x2000783c

08017844 <__NVIC_SystemReset>:
{
 8017844:	b480      	push	{r7}
 8017846:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8017848:	f3bf 8f4f 	dsb	sy
}
 801784c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801784e:	4b06      	ldr	r3, [pc, #24]	@ (8017868 <__NVIC_SystemReset+0x24>)
 8017850:	68db      	ldr	r3, [r3, #12]
 8017852:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8017856:	4904      	ldr	r1, [pc, #16]	@ (8017868 <__NVIC_SystemReset+0x24>)
 8017858:	4b04      	ldr	r3, [pc, #16]	@ (801786c <__NVIC_SystemReset+0x28>)
 801785a:	4313      	orrs	r3, r2
 801785c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801785e:	f3bf 8f4f 	dsb	sy
}
 8017862:	bf00      	nop
    __NOP();
 8017864:	bf00      	nop
 8017866:	e7fd      	b.n	8017864 <__NVIC_SystemReset+0x20>
 8017868:	e000ed00 	.word	0xe000ed00
 801786c:	05fa0004 	.word	0x05fa0004

08017870 <shell_init>:
int lidarDebugShell=0;
int verbosePulse = 0;
uint8_t PWMLed = 255;


void shell_init(void) {
 8017870:	b580      	push	{r7, lr}
 8017872:	af00      	add	r7, sp, #0
	memset(argv, 0, MAX_ARGS * sizeof(char*));
 8017874:	2220      	movs	r2, #32
 8017876:	2100      	movs	r1, #0
 8017878:	4821      	ldr	r0, [pc, #132]	@ (8017900 <shell_init+0x90>)
 801787a:	f002 fcb5 	bl	801a1e8 <memset>
	memset(cmdBuffer, 0, CMD_BUFFER_SIZE * sizeof(char));
 801787e:	2240      	movs	r2, #64	@ 0x40
 8017880:	2100      	movs	r1, #0
 8017882:	4820      	ldr	r0, [pc, #128]	@ (8017904 <shell_init+0x94>)
 8017884:	f002 fcb0 	bl	801a1e8 <memset>
	memset(uartRxBuffer, 0, UART_RX_BUFFER_SIZE * sizeof(char));
 8017888:	4b1f      	ldr	r3, [pc, #124]	@ (8017908 <shell_init+0x98>)
 801788a:	2200      	movs	r2, #0
 801788c:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer, 0, UART_TX_BUFFER_SIZE * sizeof(char));
 801788e:	2240      	movs	r2, #64	@ 0x40
 8017890:	2100      	movs	r1, #0
 8017892:	481e      	ldr	r0, [pc, #120]	@ (801790c <shell_init+0x9c>)
 8017894:	f002 fca8 	bl	801a1e8 <memset>
	sem_uart_read = xSemaphoreCreateBinary();
 8017898:	2203      	movs	r2, #3
 801789a:	2100      	movs	r1, #0
 801789c:	2001      	movs	r0, #1
 801789e:	f7fc fb77 	bl	8013f90 <xQueueGenericCreate>
 80178a2:	4603      	mov	r3, r0
 80178a4:	4a1a      	ldr	r2, [pc, #104]	@ (8017910 <shell_init+0xa0>)
 80178a6:	6013      	str	r3, [r2, #0]
	sem_uart_read == NULL ? Error_Handler() : (void) 0;
 80178a8:	4b19      	ldr	r3, [pc, #100]	@ (8017910 <shell_init+0xa0>)
 80178aa:	681b      	ldr	r3, [r3, #0]
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	d101      	bne.n	80178b4 <shell_init+0x44>
 80178b0:	f7ec fb98 	bl	8003fe4 <Error_Handler>

	HAL_UART_Transmit(&UART_DEVICE, started, strlen((char*) started),
 80178b4:	4817      	ldr	r0, [pc, #92]	@ (8017914 <shell_init+0xa4>)
 80178b6:	f7ea ff03 	bl	80026c0 <strlen>
 80178ba:	4603      	mov	r3, r0
 80178bc:	b29a      	uxth	r2, r3
 80178be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80178c2:	4914      	ldr	r1, [pc, #80]	@ (8017914 <shell_init+0xa4>)
 80178c4:	4814      	ldr	r0, [pc, #80]	@ (8017918 <shell_init+0xa8>)
 80178c6:	f7f5 fbfb 	bl	800d0c0 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
	HAL_UART_Transmit(&UART_DEVICE, prompt, strlen((char*) prompt),
 80178ca:	4814      	ldr	r0, [pc, #80]	@ (801791c <shell_init+0xac>)
 80178cc:	f7ea fef8 	bl	80026c0 <strlen>
 80178d0:	4603      	mov	r3, r0
 80178d2:	b29a      	uxth	r2, r3
 80178d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80178d8:	4910      	ldr	r1, [pc, #64]	@ (801791c <shell_init+0xac>)
 80178da:	480f      	ldr	r0, [pc, #60]	@ (8017918 <shell_init+0xa8>)
 80178dc:	f7f5 fbf0 	bl	800d0c0 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
	HAL_UART_Transmit(&UART_DEVICE, newline, strlen((char*) newline),
 80178e0:	480f      	ldr	r0, [pc, #60]	@ (8017920 <shell_init+0xb0>)
 80178e2:	f7ea feed 	bl	80026c0 <strlen>
 80178e6:	4603      	mov	r3, r0
 80178e8:	b29a      	uxth	r2, r3
 80178ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80178ee:	490c      	ldr	r1, [pc, #48]	@ (8017920 <shell_init+0xb0>)
 80178f0:	4809      	ldr	r0, [pc, #36]	@ (8017918 <shell_init+0xa8>)
 80178f2:	f7f5 fbe5 	bl	800d0c0 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
	subfunct_start(0);
 80178f6:	2000      	movs	r0, #0
 80178f8:	f000 f95c 	bl	8017bb4 <subfunct_start>
}
 80178fc:	bf00      	nop
 80178fe:	bd80      	pop	{r7, pc}
 8017900:	200079b4 	.word	0x200079b4
 8017904:	20007970 	.word	0x20007970
 8017908:	20007928 	.word	0x20007928
 801790c:	2000792c 	.word	0x2000792c
 8017910:	20007830 	.word	0x20007830
 8017914:	200002b4 	.word	0x200002b4
 8017918:	20000de4 	.word	0x20000de4
 801791c:	20000338 	.word	0x20000338
 8017920:	2000031c 	.word	0x2000031c

08017924 <shell_run>:

void shell_run(void*) {
 8017924:	b580      	push	{r7, lr}
 8017926:	b084      	sub	sp, #16
 8017928:	af00      	add	r7, sp, #0
 801792a:	6078      	str	r0, [r7, #4]
	int reading = 0;
 801792c:	2300      	movs	r3, #0
 801792e:	60fb      	str	r3, [r7, #12]
	for (;;) {
		reading = 1;
 8017930:	2301      	movs	r3, #1
 8017932:	60fb      	str	r3, [r7, #12]
		idx_cmd = 0;
 8017934:	4b5d      	ldr	r3, [pc, #372]	@ (8017aac <shell_run+0x188>)
 8017936:	2200      	movs	r2, #0
 8017938:	601a      	str	r2, [r3, #0]
		while (reading) {
 801793a:	e070      	b.n	8017a1e <shell_run+0xfa>
			HAL_UART_Receive_IT(&UART_DEVICE, uartRxBuffer, UART_RX_BUFFER_SIZE);
 801793c:	2201      	movs	r2, #1
 801793e:	495c      	ldr	r1, [pc, #368]	@ (8017ab0 <shell_run+0x18c>)
 8017940:	485c      	ldr	r0, [pc, #368]	@ (8017ab4 <shell_run+0x190>)
 8017942:	f7f5 fda7 	bl	800d494 <HAL_UART_Receive_IT>
			xSemaphoreTake(sem_uart_read, portMAX_DELAY)!=pdPASS ? Error_Handler():(void)0;
 8017946:	4b5c      	ldr	r3, [pc, #368]	@ (8017ab8 <shell_run+0x194>)
 8017948:	681b      	ldr	r3, [r3, #0]
 801794a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801794e:	4618      	mov	r0, r3
 8017950:	f7fc febc 	bl	80146cc <xQueueSemaphoreTake>
 8017954:	4603      	mov	r3, r0
 8017956:	2b01      	cmp	r3, #1
 8017958:	d001      	beq.n	801795e <shell_run+0x3a>
 801795a:	f7ec fb43 	bl	8003fe4 <Error_Handler>

			switch (uartRxBuffer[0]) {
 801795e:	4b54      	ldr	r3, [pc, #336]	@ (8017ab0 <shell_run+0x18c>)
 8017960:	781b      	ldrb	r3, [r3, #0]
 8017962:	2b7f      	cmp	r3, #127	@ 0x7f
 8017964:	d035      	beq.n	80179d2 <shell_run+0xae>
 8017966:	2b7f      	cmp	r3, #127	@ 0x7f
 8017968:	dc47      	bgt.n	80179fa <shell_run+0xd6>
 801796a:	2b08      	cmp	r3, #8
 801796c:	d031      	beq.n	80179d2 <shell_run+0xae>
 801796e:	2b0d      	cmp	r3, #13
 8017970:	d143      	bne.n	80179fa <shell_run+0xd6>
			case ASCII_CR: // Nouvelle ligne, instruction à traiter
				HAL_UART_Transmit(&UART_DEVICE, newline, sizeof(newline),
 8017972:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017976:	2203      	movs	r2, #3
 8017978:	4950      	ldr	r1, [pc, #320]	@ (8017abc <shell_run+0x198>)
 801797a:	484e      	ldr	r0, [pc, #312]	@ (8017ab4 <shell_run+0x190>)
 801797c:	f7f5 fba0 	bl	800d0c0 <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				//cmdBuffer[idx_cmd] = '\0';
				//On copie la commande dans l'historique
				//strcpy(cmdHistory[cmdHistory_index_save % CMD_HISTORY_SIZE], cmdBuffer);
				//cmdHistory_index_save++;
				argc = 0;
 8017980:	4b4f      	ldr	r3, [pc, #316]	@ (8017ac0 <shell_run+0x19c>)
 8017982:	2200      	movs	r2, #0
 8017984:	601a      	str	r2, [r3, #0]
				token = strtok(cmdBuffer, " ");
 8017986:	494f      	ldr	r1, [pc, #316]	@ (8017ac4 <shell_run+0x1a0>)
 8017988:	484f      	ldr	r0, [pc, #316]	@ (8017ac8 <shell_run+0x1a4>)
 801798a:	f002 fbd1 	bl	801a130 <strtok>
 801798e:	4603      	mov	r3, r0
 8017990:	4a4e      	ldr	r2, [pc, #312]	@ (8017acc <shell_run+0x1a8>)
 8017992:	6013      	str	r3, [r2, #0]
				while (token != NULL) {
 8017994:	e010      	b.n	80179b8 <shell_run+0x94>
					argv[argc++] = token;
 8017996:	4b4a      	ldr	r3, [pc, #296]	@ (8017ac0 <shell_run+0x19c>)
 8017998:	681b      	ldr	r3, [r3, #0]
 801799a:	1c5a      	adds	r2, r3, #1
 801799c:	4948      	ldr	r1, [pc, #288]	@ (8017ac0 <shell_run+0x19c>)
 801799e:	600a      	str	r2, [r1, #0]
 80179a0:	4a4a      	ldr	r2, [pc, #296]	@ (8017acc <shell_run+0x1a8>)
 80179a2:	6812      	ldr	r2, [r2, #0]
 80179a4:	494a      	ldr	r1, [pc, #296]	@ (8017ad0 <shell_run+0x1ac>)
 80179a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					token = strtok(NULL, " ");
 80179aa:	4946      	ldr	r1, [pc, #280]	@ (8017ac4 <shell_run+0x1a0>)
 80179ac:	2000      	movs	r0, #0
 80179ae:	f002 fbbf 	bl	801a130 <strtok>
 80179b2:	4603      	mov	r3, r0
 80179b4:	4a45      	ldr	r2, [pc, #276]	@ (8017acc <shell_run+0x1a8>)
 80179b6:	6013      	str	r3, [r2, #0]
				while (token != NULL) {
 80179b8:	4b44      	ldr	r3, [pc, #272]	@ (8017acc <shell_run+0x1a8>)
 80179ba:	681b      	ldr	r3, [r3, #0]
 80179bc:	2b00      	cmp	r3, #0
 80179be:	d1ea      	bne.n	8017996 <shell_run+0x72>
				}
				idx_cmd = 0;
 80179c0:	4b3a      	ldr	r3, [pc, #232]	@ (8017aac <shell_run+0x188>)
 80179c2:	2200      	movs	r2, #0
 80179c4:	601a      	str	r2, [r3, #0]
				reading = 0;        //exit read loop
 80179c6:	2300      	movs	r3, #0
 80179c8:	60fb      	str	r3, [r7, #12]
				newCmdReady = 1;
 80179ca:	4b42      	ldr	r3, [pc, #264]	@ (8017ad4 <shell_run+0x1b0>)
 80179cc:	2201      	movs	r2, #1
 80179ce:	601a      	str	r2, [r3, #0]
				break;
 80179d0:	e025      	b.n	8017a1e <shell_run+0xfa>
			case ASCII_BACK:
			case ASCII_BACK_BIS: // Suppression du dernier caractère
				if (idx_cmd == 0) {
 80179d2:	4b36      	ldr	r3, [pc, #216]	@ (8017aac <shell_run+0x188>)
 80179d4:	681b      	ldr	r3, [r3, #0]
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d020      	beq.n	8017a1c <shell_run+0xf8>
					break;
				}
				cmdBuffer[idx_cmd--] = '\0';
 80179da:	4b34      	ldr	r3, [pc, #208]	@ (8017aac <shell_run+0x188>)
 80179dc:	681b      	ldr	r3, [r3, #0]
 80179de:	1e5a      	subs	r2, r3, #1
 80179e0:	4932      	ldr	r1, [pc, #200]	@ (8017aac <shell_run+0x188>)
 80179e2:	600a      	str	r2, [r1, #0]
 80179e4:	4a38      	ldr	r2, [pc, #224]	@ (8017ac8 <shell_run+0x1a4>)
 80179e6:	2100      	movs	r1, #0
 80179e8:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit(&UART_DEVICE, backspace, sizeof(backspace),
 80179ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80179ee:	2204      	movs	r2, #4
 80179f0:	4939      	ldr	r1, [pc, #228]	@ (8017ad8 <shell_run+0x1b4>)
 80179f2:	4830      	ldr	r0, [pc, #192]	@ (8017ab4 <shell_run+0x190>)
 80179f4:	f7f5 fb64 	bl	800d0c0 <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				break;
 80179f8:	e011      	b.n	8017a1e <shell_run+0xfa>
			default:
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 80179fa:	4b2c      	ldr	r3, [pc, #176]	@ (8017aac <shell_run+0x188>)
 80179fc:	681b      	ldr	r3, [r3, #0]
 80179fe:	1c5a      	adds	r2, r3, #1
 8017a00:	492a      	ldr	r1, [pc, #168]	@ (8017aac <shell_run+0x188>)
 8017a02:	600a      	str	r2, [r1, #0]
 8017a04:	4a2a      	ldr	r2, [pc, #168]	@ (8017ab0 <shell_run+0x18c>)
 8017a06:	7811      	ldrb	r1, [r2, #0]
 8017a08:	4a2f      	ldr	r2, [pc, #188]	@ (8017ac8 <shell_run+0x1a4>)
 8017a0a:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit(&UART_DEVICE, uartRxBuffer,
 8017a0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017a10:	2201      	movs	r2, #1
 8017a12:	4927      	ldr	r1, [pc, #156]	@ (8017ab0 <shell_run+0x18c>)
 8017a14:	4827      	ldr	r0, [pc, #156]	@ (8017ab4 <shell_run+0x190>)
 8017a16:	f7f5 fb53 	bl	800d0c0 <HAL_UART_Transmit>
 8017a1a:	e000      	b.n	8017a1e <shell_run+0xfa>
					break;
 8017a1c:	bf00      	nop
		while (reading) {
 8017a1e:	68fb      	ldr	r3, [r7, #12]
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d18b      	bne.n	801793c <shell_run+0x18>
						UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
			}
		}
		if (newCmdReady) {
 8017a24:	4b2b      	ldr	r3, [pc, #172]	@ (8017ad4 <shell_run+0x1b0>)
 8017a26:	681b      	ldr	r3, [r3, #0]
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d081      	beq.n	8017930 <shell_run+0xc>
			for (int i = 0; i < sizeof(mapping) / sizeof(mapping[0]); i++) {
 8017a2c:	2300      	movs	r3, #0
 8017a2e:	60bb      	str	r3, [r7, #8]
 8017a30:	e01b      	b.n	8017a6a <shell_run+0x146>
				if (strcmp(argv[0], mapping[i].name) == 0) {
 8017a32:	4b27      	ldr	r3, [pc, #156]	@ (8017ad0 <shell_run+0x1ac>)
 8017a34:	681a      	ldr	r2, [r3, #0]
 8017a36:	4929      	ldr	r1, [pc, #164]	@ (8017adc <shell_run+0x1b8>)
 8017a38:	68bb      	ldr	r3, [r7, #8]
 8017a3a:	011b      	lsls	r3, r3, #4
 8017a3c:	440b      	add	r3, r1
 8017a3e:	681b      	ldr	r3, [r3, #0]
 8017a40:	4619      	mov	r1, r3
 8017a42:	4610      	mov	r0, r2
 8017a44:	f7ea fe44 	bl	80026d0 <strcmp>
 8017a48:	4603      	mov	r3, r0
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	d10a      	bne.n	8017a64 <shell_run+0x140>
					isFind = 1;
 8017a4e:	4b24      	ldr	r3, [pc, #144]	@ (8017ae0 <shell_run+0x1bc>)
 8017a50:	2201      	movs	r2, #1
 8017a52:	601a      	str	r2, [r3, #0]
					mapping[i].funct(argv);
 8017a54:	4a21      	ldr	r2, [pc, #132]	@ (8017adc <shell_run+0x1b8>)
 8017a56:	68bb      	ldr	r3, [r7, #8]
 8017a58:	011b      	lsls	r3, r3, #4
 8017a5a:	4413      	add	r3, r2
 8017a5c:	330c      	adds	r3, #12
 8017a5e:	681b      	ldr	r3, [r3, #0]
 8017a60:	481b      	ldr	r0, [pc, #108]	@ (8017ad0 <shell_run+0x1ac>)
 8017a62:	4798      	blx	r3
			for (int i = 0; i < sizeof(mapping) / sizeof(mapping[0]); i++) {
 8017a64:	68bb      	ldr	r3, [r7, #8]
 8017a66:	3301      	adds	r3, #1
 8017a68:	60bb      	str	r3, [r7, #8]
 8017a6a:	68bb      	ldr	r3, [r7, #8]
 8017a6c:	2b0f      	cmp	r3, #15
 8017a6e:	d9e0      	bls.n	8017a32 <shell_run+0x10e>
				}
			}
			if (!isFind) {
 8017a70:	4b1b      	ldr	r3, [pc, #108]	@ (8017ae0 <shell_run+0x1bc>)
 8017a72:	681b      	ldr	r3, [r3, #0]
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	d106      	bne.n	8017a86 <shell_run+0x162>
				HAL_UART_Transmit(&UART_DEVICE, cmdNotFound,
 8017a78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017a7c:	2214      	movs	r2, #20
 8017a7e:	4919      	ldr	r1, [pc, #100]	@ (8017ae4 <shell_run+0x1c0>)
 8017a80:	480c      	ldr	r0, [pc, #48]	@ (8017ab4 <shell_run+0x190>)
 8017a82:	f7f5 fb1d 	bl	800d0c0 <HAL_UART_Transmit>
						sizeof(cmdNotFound), HAL_MAX_DELAY);
			}

			HAL_UART_Transmit(&UART_DEVICE, prompt, sizeof(prompt),
 8017a86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017a8a:	2212      	movs	r2, #18
 8017a8c:	4916      	ldr	r1, [pc, #88]	@ (8017ae8 <shell_run+0x1c4>)
 8017a8e:	4809      	ldr	r0, [pc, #36]	@ (8017ab4 <shell_run+0x190>)
 8017a90:	f7f5 fb16 	bl	800d0c0 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
			newCmdReady = 0;
 8017a94:	4b0f      	ldr	r3, [pc, #60]	@ (8017ad4 <shell_run+0x1b0>)
 8017a96:	2200      	movs	r2, #0
 8017a98:	601a      	str	r2, [r3, #0]
			isFind = 0;
 8017a9a:	4b11      	ldr	r3, [pc, #68]	@ (8017ae0 <shell_run+0x1bc>)
 8017a9c:	2200      	movs	r2, #0
 8017a9e:	601a      	str	r2, [r3, #0]
			memset(cmdBuffer, 0, MAX_ARGS * sizeof(char*));
 8017aa0:	2220      	movs	r2, #32
 8017aa2:	2100      	movs	r1, #0
 8017aa4:	4808      	ldr	r0, [pc, #32]	@ (8017ac8 <shell_run+0x1a4>)
 8017aa6:	f002 fb9f 	bl	801a1e8 <memset>
		reading = 1;
 8017aaa:	e741      	b.n	8017930 <shell_run+0xc>
 8017aac:	200079b0 	.word	0x200079b0
 8017ab0:	20007928 	.word	0x20007928
 8017ab4:	20000de4 	.word	0x20000de4
 8017ab8:	20007830 	.word	0x20007830
 8017abc:	2000031c 	.word	0x2000031c
 8017ac0:	200079d4 	.word	0x200079d4
 8017ac4:	0801eaa4 	.word	0x0801eaa4
 8017ac8:	20007970 	.word	0x20007970
 8017acc:	200079d8 	.word	0x200079d8
 8017ad0:	200079b4 	.word	0x200079b4
 8017ad4:	200079dc 	.word	0x200079dc
 8017ad8:	20000320 	.word	0x20000320
 8017adc:	200001b4 	.word	0x200001b4
 8017ae0:	200079e8 	.word	0x200079e8
 8017ae4:	20000324 	.word	0x20000324
 8017ae8:	20000338 	.word	0x20000338

08017aec <subfunct_help>:

/*
 * ***********************************************************************************************
 * 										SUBFUNCTIONS
 *************************************************************************************************/
void subfunct_help(char **argv) {
 8017aec:	b580      	push	{r7, lr}
 8017aee:	b088      	sub	sp, #32
 8017af0:	af04      	add	r7, sp, #16
 8017af2:	6078      	str	r0, [r7, #4]
	printf("%s%-15s | %-30s | %-50s\r\n%s%s", GRAS, "Fonctions", "Params",
 8017af4:	4b1a      	ldr	r3, [pc, #104]	@ (8017b60 <subfunct_help+0x74>)
 8017af6:	9302      	str	r3, [sp, #8]
 8017af8:	4b1a      	ldr	r3, [pc, #104]	@ (8017b64 <subfunct_help+0x78>)
 8017afa:	9301      	str	r3, [sp, #4]
 8017afc:	4b1a      	ldr	r3, [pc, #104]	@ (8017b68 <subfunct_help+0x7c>)
 8017afe:	9300      	str	r3, [sp, #0]
 8017b00:	4b1a      	ldr	r3, [pc, #104]	@ (8017b6c <subfunct_help+0x80>)
 8017b02:	4a1b      	ldr	r2, [pc, #108]	@ (8017b70 <subfunct_help+0x84>)
 8017b04:	491b      	ldr	r1, [pc, #108]	@ (8017b74 <subfunct_help+0x88>)
 8017b06:	481c      	ldr	r0, [pc, #112]	@ (8017b78 <subfunct_help+0x8c>)
 8017b08:	f002 fa90 	bl	801a02c <iprintf>
			"Description", D_RESET, separator);
	for (int i = 0; i < sizeof(mapping) / sizeof(mapping[0]); i++) {
 8017b0c:	2300      	movs	r3, #0
 8017b0e:	60fb      	str	r3, [r7, #12]
 8017b10:	e01b      	b.n	8017b4a <subfunct_help+0x5e>
		printf("%s%-15s%s | %-30s | %-50s\r\n", FUNCTION, mapping[i].name,
 8017b12:	4a1a      	ldr	r2, [pc, #104]	@ (8017b7c <subfunct_help+0x90>)
 8017b14:	68fb      	ldr	r3, [r7, #12]
 8017b16:	011b      	lsls	r3, r3, #4
 8017b18:	4413      	add	r3, r2
 8017b1a:	6819      	ldr	r1, [r3, #0]
 8017b1c:	4a17      	ldr	r2, [pc, #92]	@ (8017b7c <subfunct_help+0x90>)
 8017b1e:	68fb      	ldr	r3, [r7, #12]
 8017b20:	011b      	lsls	r3, r3, #4
 8017b22:	4413      	add	r3, r2
 8017b24:	3308      	adds	r3, #8
 8017b26:	681b      	ldr	r3, [r3, #0]
 8017b28:	4814      	ldr	r0, [pc, #80]	@ (8017b7c <subfunct_help+0x90>)
 8017b2a:	68fa      	ldr	r2, [r7, #12]
 8017b2c:	0112      	lsls	r2, r2, #4
 8017b2e:	4402      	add	r2, r0
 8017b30:	3204      	adds	r2, #4
 8017b32:	6812      	ldr	r2, [r2, #0]
 8017b34:	9201      	str	r2, [sp, #4]
 8017b36:	9300      	str	r3, [sp, #0]
 8017b38:	4b0a      	ldr	r3, [pc, #40]	@ (8017b64 <subfunct_help+0x78>)
 8017b3a:	460a      	mov	r2, r1
 8017b3c:	4910      	ldr	r1, [pc, #64]	@ (8017b80 <subfunct_help+0x94>)
 8017b3e:	4811      	ldr	r0, [pc, #68]	@ (8017b84 <subfunct_help+0x98>)
 8017b40:	f002 fa74 	bl	801a02c <iprintf>
	for (int i = 0; i < sizeof(mapping) / sizeof(mapping[0]); i++) {
 8017b44:	68fb      	ldr	r3, [r7, #12]
 8017b46:	3301      	adds	r3, #1
 8017b48:	60fb      	str	r3, [r7, #12]
 8017b4a:	68fb      	ldr	r3, [r7, #12]
 8017b4c:	2b0f      	cmp	r3, #15
 8017b4e:	d9e0      	bls.n	8017b12 <subfunct_help+0x26>
				D_RESET, mapping[i].params, mapping[i].resume);
	}
	printf(separator);
 8017b50:	480d      	ldr	r0, [pc, #52]	@ (8017b88 <subfunct_help+0x9c>)
 8017b52:	f002 fad3 	bl	801a0fc <puts>
}
 8017b56:	bf00      	nop
 8017b58:	3710      	adds	r7, #16
 8017b5a:	46bd      	mov	sp, r7
 8017b5c:	bd80      	pop	{r7, pc}
 8017b5e:	bf00      	nop
 8017b60:	0801eae4 	.word	0x0801eae4
 8017b64:	0801eb34 	.word	0x0801eb34
 8017b68:	0801eb3c 	.word	0x0801eb3c
 8017b6c:	0801eaa8 	.word	0x0801eaa8
 8017b70:	0801eab0 	.word	0x0801eab0
 8017b74:	0801eabc 	.word	0x0801eabc
 8017b78:	0801eac4 	.word	0x0801eac4
 8017b7c:	200001b4 	.word	0x200001b4
 8017b80:	0801eb48 	.word	0x0801eb48
 8017b84:	0801eb50 	.word	0x0801eb50
 8017b88:	0801eb6c 	.word	0x0801eb6c

08017b8c <subfunct_clear>:
void subfunct_clear(char **argv) {
 8017b8c:	b580      	push	{r7, lr}
 8017b8e:	b082      	sub	sp, #8
 8017b90:	af00      	add	r7, sp, #0
 8017b92:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&UART_DEVICE, clear, sizeof(clear), HAL_MAX_DELAY);
 8017b94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017b98:	2208      	movs	r2, #8
 8017b9a:	4904      	ldr	r1, [pc, #16]	@ (8017bac <subfunct_clear+0x20>)
 8017b9c:	4804      	ldr	r0, [pc, #16]	@ (8017bb0 <subfunct_clear+0x24>)
 8017b9e:	f7f5 fa8f 	bl	800d0c0 <HAL_UART_Transmit>
}
 8017ba2:	bf00      	nop
 8017ba4:	3708      	adds	r7, #8
 8017ba6:	46bd      	mov	sp, r7
 8017ba8:	bd80      	pop	{r7, pc}
 8017baa:	bf00      	nop
 8017bac:	2000034c 	.word	0x2000034c
 8017bb0:	20000de4 	.word	0x20000de4

08017bb4 <subfunct_start>:
void subfunct_start(char **argv) {
 8017bb4:	b580      	push	{r7, lr}
 8017bb6:	b082      	sub	sp, #8
 8017bb8:	af00      	add	r7, sp, #0
 8017bba:	6078      	str	r0, [r7, #4]

	HAL_TIM_Base_Start_IT(&htim15) == HAL_OK ?
 8017bbc:	4831      	ldr	r0, [pc, #196]	@ (8017c84 <subfunct_start+0xd0>)
 8017bbe:	f7f3 fce3 	bl	800b588 <HAL_TIM_Base_Start_IT>
 8017bc2:	4603      	mov	r3, r0
			debug(START, "TIMER 15 - CALCUL IMU") : (void) 0;
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d103      	bne.n	8017bd0 <subfunct_start+0x1c>
 8017bc8:	492f      	ldr	r1, [pc, #188]	@ (8017c88 <subfunct_start+0xd4>)
 8017bca:	4830      	ldr	r0, [pc, #192]	@ (8017c8c <subfunct_start+0xd8>)
 8017bcc:	f000 fb54 	bl	8018278 <debug>
	HAL_TIM_Base_Start_IT(&htim16) == HAL_OK ?
 8017bd0:	482f      	ldr	r0, [pc, #188]	@ (8017c90 <subfunct_start+0xdc>)
 8017bd2:	f7f3 fcd9 	bl	800b588 <HAL_TIM_Base_Start_IT>
 8017bd6:	4603      	mov	r3, r0
			debug(START, "TIMER 16 - SMOOTH SPEED") : (void) 0;
 8017bd8:	2b00      	cmp	r3, #0
 8017bda:	d103      	bne.n	8017be4 <subfunct_start+0x30>
 8017bdc:	492d      	ldr	r1, [pc, #180]	@ (8017c94 <subfunct_start+0xe0>)
 8017bde:	482b      	ldr	r0, [pc, #172]	@ (8017c8c <subfunct_start+0xd8>)
 8017be0:	f000 fb4a 	bl	8018278 <debug>
	HAL_TIM_Base_Start(&htim2) == HAL_OK ?
 8017be4:	482c      	ldr	r0, [pc, #176]	@ (8017c98 <subfunct_start+0xe4>)
 8017be6:	f7f3 fc45 	bl	800b474 <HAL_TIM_Base_Start>
 8017bea:	4603      	mov	r3, r0
			debug(START, "TIMER 2 for PWM" ) : debug(D_ERROR, "TIMER 2 for PWM");
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	d104      	bne.n	8017bfa <subfunct_start+0x46>
 8017bf0:	492a      	ldr	r1, [pc, #168]	@ (8017c9c <subfunct_start+0xe8>)
 8017bf2:	4826      	ldr	r0, [pc, #152]	@ (8017c8c <subfunct_start+0xd8>)
 8017bf4:	f000 fb40 	bl	8018278 <debug>
 8017bf8:	e003      	b.n	8017c02 <subfunct_start+0x4e>
 8017bfa:	4928      	ldr	r1, [pc, #160]	@ (8017c9c <subfunct_start+0xe8>)
 8017bfc:	4828      	ldr	r0, [pc, #160]	@ (8017ca0 <subfunct_start+0xec>)
 8017bfe:	f000 fb3b 	bl	8018278 <debug>
	HAL_TIM_Base_Start(&htim3) == HAL_OK ?
 8017c02:	4828      	ldr	r0, [pc, #160]	@ (8017ca4 <subfunct_start+0xf0>)
 8017c04:	f7f3 fc36 	bl	800b474 <HAL_TIM_Base_Start>
 8017c08:	4603      	mov	r3, r0
			debug(START, "TIMER 3 for PWM") : debug(D_ERROR, "TIMER 3 for PWM");
 8017c0a:	2b00      	cmp	r3, #0
 8017c0c:	d104      	bne.n	8017c18 <subfunct_start+0x64>
 8017c0e:	4926      	ldr	r1, [pc, #152]	@ (8017ca8 <subfunct_start+0xf4>)
 8017c10:	481e      	ldr	r0, [pc, #120]	@ (8017c8c <subfunct_start+0xd8>)
 8017c12:	f000 fb31 	bl	8018278 <debug>
 8017c16:	e003      	b.n	8017c20 <subfunct_start+0x6c>
 8017c18:	4923      	ldr	r1, [pc, #140]	@ (8017ca8 <subfunct_start+0xf4>)
 8017c1a:	4821      	ldr	r0, [pc, #132]	@ (8017ca0 <subfunct_start+0xec>)
 8017c1c:	f000 fb2c 	bl	8018278 <debug>
	HAL_ADCEx_Calibration_Start(&hadc2,ADC_SINGLE_ENDED) == HAL_OK ?
 8017c20:	217f      	movs	r1, #127	@ 0x7f
 8017c22:	4822      	ldr	r0, [pc, #136]	@ (8017cac <subfunct_start+0xf8>)
 8017c24:	f7f0 fb9c 	bl	8008360 <HAL_ADCEx_Calibration_Start>
 8017c28:	4603      	mov	r3, r0
			debug(START, "ADC2 CALIBRATION") : debug(D_ERROR, "ADC2 CALIBRATION");
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	d104      	bne.n	8017c38 <subfunct_start+0x84>
 8017c2e:	4920      	ldr	r1, [pc, #128]	@ (8017cb0 <subfunct_start+0xfc>)
 8017c30:	4816      	ldr	r0, [pc, #88]	@ (8017c8c <subfunct_start+0xd8>)
 8017c32:	f000 fb21 	bl	8018278 <debug>
 8017c36:	e003      	b.n	8017c40 <subfunct_start+0x8c>
 8017c38:	491d      	ldr	r1, [pc, #116]	@ (8017cb0 <subfunct_start+0xfc>)
 8017c3a:	4819      	ldr	r0, [pc, #100]	@ (8017ca0 <subfunct_start+0xec>)
 8017c3c:	f000 fb1c 	bl	8018278 <debug>
	HAL_TIM_Base_Start_IT(&htim6)== HAL_OK ?
 8017c40:	481c      	ldr	r0, [pc, #112]	@ (8017cb4 <subfunct_start+0x100>)
 8017c42:	f7f3 fca1 	bl	800b588 <HAL_TIM_Base_Start_IT>
 8017c46:	4603      	mov	r3, r0
			debug(START,"TIM6 - MIAOU") : debug(D_ERROR,"TIM6 - MIAOU");
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d104      	bne.n	8017c56 <subfunct_start+0xa2>
 8017c4c:	491a      	ldr	r1, [pc, #104]	@ (8017cb8 <subfunct_start+0x104>)
 8017c4e:	480f      	ldr	r0, [pc, #60]	@ (8017c8c <subfunct_start+0xd8>)
 8017c50:	f000 fb12 	bl	8018278 <debug>
 8017c54:	e003      	b.n	8017c5e <subfunct_start+0xaa>
 8017c56:	4918      	ldr	r1, [pc, #96]	@ (8017cb8 <subfunct_start+0x104>)
 8017c58:	4811      	ldr	r0, [pc, #68]	@ (8017ca0 <subfunct_start+0xec>)
 8017c5a:	f000 fb0d 	bl	8018278 <debug>

	TCA9555_init();
 8017c5e:	f7ee f911 	bl	8005e84 <TCA9555_init>
	LP5812_Init();
 8017c62:	f7ed febd 	bl	80059e0 <LP5812_Init>
	ADXL343_init();
 8017c66:	f7ed fb5f 	bl	8005328 <ADXL343_init>
	ZXB5210_init();
 8017c6a:	f7ee f9bb 	bl	8005fe4 <ZXB5210_init>

	HAL_UART_Transmit(&UART_DEVICE, prompt, sizeof(prompt),
 8017c6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017c72:	2212      	movs	r2, #18
 8017c74:	4911      	ldr	r1, [pc, #68]	@ (8017cbc <subfunct_start+0x108>)
 8017c76:	4812      	ldr	r0, [pc, #72]	@ (8017cc0 <subfunct_start+0x10c>)
 8017c78:	f7f5 fa22 	bl	800d0c0 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
	return;
 8017c7c:	bf00      	nop
}
 8017c7e:	3708      	adds	r7, #8
 8017c80:	46bd      	mov	sp, r7
 8017c82:	bd80      	pop	{r7, pc}
 8017c84:	20000c4c 	.word	0x20000c4c
 8017c88:	0801ebb8 	.word	0x0801ebb8
 8017c8c:	0801ebd0 	.word	0x0801ebd0
 8017c90:	20000d18 	.word	0x20000d18
 8017c94:	0801ebdc 	.word	0x0801ebdc
 8017c98:	20000850 	.word	0x20000850
 8017c9c:	0801ebf4 	.word	0x0801ebf4
 8017ca0:	0801ec04 	.word	0x0801ec04
 8017ca4:	2000091c 	.word	0x2000091c
 8017ca8:	0801ec10 	.word	0x0801ec10
 8017cac:	2000055c 	.word	0x2000055c
 8017cb0:	0801ec20 	.word	0x0801ec20
 8017cb4:	20000ab4 	.word	0x20000ab4
 8017cb8:	0801ec34 	.word	0x0801ec34
 8017cbc:	20000338 	.word	0x20000338
 8017cc0:	20000de4 	.word	0x20000de4

08017cc4 <subfunct_stop>:
void subfunct_stop(char **argv) {
 8017cc4:	b580      	push	{r7, lr}
 8017cc6:	b082      	sub	sp, #8
 8017cc8:	af00      	add	r7, sp, #0
 8017cca:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop(&htim15) == HAL_OK ?
 8017ccc:	4813      	ldr	r0, [pc, #76]	@ (8017d1c <subfunct_stop+0x58>)
 8017cce:	f7f3 fc33 	bl	800b538 <HAL_TIM_Base_Stop>
 8017cd2:	4603      	mov	r3, r0
			debug(STOP, "TIMER 15 - CALCUL IMU") : (void) 0;
 8017cd4:	2b00      	cmp	r3, #0
 8017cd6:	d103      	bne.n	8017ce0 <subfunct_stop+0x1c>
 8017cd8:	4911      	ldr	r1, [pc, #68]	@ (8017d20 <subfunct_stop+0x5c>)
 8017cda:	4812      	ldr	r0, [pc, #72]	@ (8017d24 <subfunct_stop+0x60>)
 8017cdc:	f000 facc 	bl	8018278 <debug>
	ZXB5210_speed_FWD(&MDriver1,0);
 8017ce0:	2100      	movs	r1, #0
 8017ce2:	4811      	ldr	r0, [pc, #68]	@ (8017d28 <subfunct_stop+0x64>)
 8017ce4:	f7ee fa82 	bl	80061ec <ZXB5210_speed_FWD>
	ZXB5210_speed_FWD(&MDriver2,0);
 8017ce8:	2100      	movs	r1, #0
 8017cea:	4810      	ldr	r0, [pc, #64]	@ (8017d2c <subfunct_stop+0x68>)
 8017cec:	f7ee fa7e 	bl	80061ec <ZXB5210_speed_FWD>

	//	HAL_TIM_Base_Stop(&htim2) == HAL_OK ?
	//			debug(STOP, "TIMER 2") : debug(D_ERROR, "TIMER 2");
	//	HAL_TIM_Base_Stop(&htim3) == HAL_OK ?
	//			debug(STOP, "TIMER 3") : debug(D_ERROR, "TIMER 3");
	HAL_ADC_Stop_DMA(&hadc2) == HAL_OK ?
 8017cf0:	480f      	ldr	r0, [pc, #60]	@ (8017d30 <subfunct_stop+0x6c>)
 8017cf2:	f7ef fa49 	bl	8007188 <HAL_ADC_Stop_DMA>
 8017cf6:	4603      	mov	r3, r0
			debug(STOP, "ADC DMA") : debug(D_ERROR, "ADC2 DMA");
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	d104      	bne.n	8017d06 <subfunct_stop+0x42>
 8017cfc:	490d      	ldr	r1, [pc, #52]	@ (8017d34 <subfunct_stop+0x70>)
 8017cfe:	4809      	ldr	r0, [pc, #36]	@ (8017d24 <subfunct_stop+0x60>)
 8017d00:	f000 faba 	bl	8018278 <debug>
 8017d04:	e003      	b.n	8017d0e <subfunct_stop+0x4a>
 8017d06:	490c      	ldr	r1, [pc, #48]	@ (8017d38 <subfunct_stop+0x74>)
 8017d08:	480c      	ldr	r0, [pc, #48]	@ (8017d3c <subfunct_stop+0x78>)
 8017d0a:	f000 fab5 	bl	8018278 <debug>

	ZXB5210_deinit();
 8017d0e:	f7ee fa1b 	bl	8006148 <ZXB5210_deinit>
	return;
 8017d12:	bf00      	nop
}
 8017d14:	3708      	adds	r7, #8
 8017d16:	46bd      	mov	sp, r7
 8017d18:	bd80      	pop	{r7, pc}
 8017d1a:	bf00      	nop
 8017d1c:	20000c4c 	.word	0x20000c4c
 8017d20:	0801ebb8 	.word	0x0801ebb8
 8017d24:	0801ec44 	.word	0x0801ec44
 8017d28:	20000f84 	.word	0x20000f84
 8017d2c:	20000f94 	.word	0x20000f94
 8017d30:	2000055c 	.word	0x2000055c
 8017d34:	0801ec50 	.word	0x0801ec50
 8017d38:	0801ec58 	.word	0x0801ec58
 8017d3c:	0801ec04 	.word	0x0801ec04

08017d40 <subfunct_speed>:
void subfunct_speed(char **argv) {
 8017d40:	b580      	push	{r7, lr}
 8017d42:	b084      	sub	sp, #16
 8017d44:	af00      	add	r7, sp, #0
 8017d46:	6078      	str	r0, [r7, #4]
	/*
	 * int:MotorID 	int:speed
	 * ex:	speed 1 90
	 */
	MDriver_t* MDriver;
	if (argv[1] == NULL || argv[2] == NULL) {
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	3304      	adds	r3, #4
 8017d4c:	681b      	ldr	r3, [r3, #0]
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d004      	beq.n	8017d5c <subfunct_speed+0x1c>
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	3308      	adds	r3, #8
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	d104      	bne.n	8017d66 <subfunct_speed+0x26>
		debug(INFORMATION,"SPEED - ARGUMENTS NEEDED");
 8017d5c:	491d      	ldr	r1, [pc, #116]	@ (8017dd4 <subfunct_speed+0x94>)
 8017d5e:	481e      	ldr	r0, [pc, #120]	@ (8017dd8 <subfunct_speed+0x98>)
 8017d60:	f000 fa8a 	bl	8018278 <debug>
		return;
 8017d64:	e033      	b.n	8017dce <subfunct_speed+0x8e>
	}
	uint8_t driver_id = (uint8_t) strtol(argv[1], NULL, 10); // Base 10
 8017d66:	687b      	ldr	r3, [r7, #4]
 8017d68:	3304      	adds	r3, #4
 8017d6a:	681b      	ldr	r3, [r3, #0]
 8017d6c:	220a      	movs	r2, #10
 8017d6e:	2100      	movs	r1, #0
 8017d70:	4618      	mov	r0, r3
 8017d72:	f002 f933 	bl	8019fdc <strtol>
 8017d76:	4603      	mov	r3, r0
 8017d78:	73fb      	strb	r3, [r7, #15]
	int8_t s_alpha = (int8_t) strtol(argv[2], NULL, 10); //Prends des valeurs entre -128 et 127
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	3308      	adds	r3, #8
 8017d7e:	681b      	ldr	r3, [r3, #0]
 8017d80:	220a      	movs	r2, #10
 8017d82:	2100      	movs	r1, #0
 8017d84:	4618      	mov	r0, r3
 8017d86:	f002 f929 	bl	8019fdc <strtol>
 8017d8a:	4603      	mov	r3, r0
 8017d8c:	73bb      	strb	r3, [r7, #14]
	if (isSpeedInit==0){isSpeedInit=1;}
 8017d8e:	4b13      	ldr	r3, [pc, #76]	@ (8017ddc <subfunct_speed+0x9c>)
 8017d90:	681b      	ldr	r3, [r3, #0]
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	d102      	bne.n	8017d9c <subfunct_speed+0x5c>
 8017d96:	4b11      	ldr	r3, [pc, #68]	@ (8017ddc <subfunct_speed+0x9c>)
 8017d98:	2201      	movs	r2, #1
 8017d9a:	601a      	str	r2, [r3, #0]
	MDriver = driver_id==1 ? &MDriver1 : &MDriver2;
 8017d9c:	7bfb      	ldrb	r3, [r7, #15]
 8017d9e:	2b01      	cmp	r3, #1
 8017da0:	d101      	bne.n	8017da6 <subfunct_speed+0x66>
 8017da2:	4b0f      	ldr	r3, [pc, #60]	@ (8017de0 <subfunct_speed+0xa0>)
 8017da4:	e000      	b.n	8017da8 <subfunct_speed+0x68>
 8017da6:	4b0f      	ldr	r3, [pc, #60]	@ (8017de4 <subfunct_speed+0xa4>)
 8017da8:	60bb      	str	r3, [r7, #8]
	s_alpha >= 0 ? ZXB5210_speed_FWD(MDriver, (uint8_t)s_alpha) : ZXB5210_speed_REV(MDriver, (uint8_t)-s_alpha);
 8017daa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	db05      	blt.n	8017dbe <subfunct_speed+0x7e>
 8017db2:	7bbb      	ldrb	r3, [r7, #14]
 8017db4:	4619      	mov	r1, r3
 8017db6:	68b8      	ldr	r0, [r7, #8]
 8017db8:	f7ee fa18 	bl	80061ec <ZXB5210_speed_FWD>

	return;
 8017dbc:	e006      	b.n	8017dcc <subfunct_speed+0x8c>
	s_alpha >= 0 ? ZXB5210_speed_FWD(MDriver, (uint8_t)s_alpha) : ZXB5210_speed_REV(MDriver, (uint8_t)-s_alpha);
 8017dbe:	7bbb      	ldrb	r3, [r7, #14]
 8017dc0:	425b      	negs	r3, r3
 8017dc2:	b2db      	uxtb	r3, r3
 8017dc4:	4619      	mov	r1, r3
 8017dc6:	68b8      	ldr	r0, [r7, #8]
 8017dc8:	f7ee fa70 	bl	80062ac <ZXB5210_speed_REV>
	return;
 8017dcc:	bf00      	nop
}
 8017dce:	3710      	adds	r7, #16
 8017dd0:	46bd      	mov	sp, r7
 8017dd2:	bd80      	pop	{r7, pc}
 8017dd4:	0801ec64 	.word	0x0801ec64
 8017dd8:	0801ec80 	.word	0x0801ec80
 8017ddc:	20000fe4 	.word	0x20000fe4
 8017de0:	20000f84 	.word	0x20000f84
 8017de4:	20000f94 	.word	0x20000f94

08017de8 <subfunct_angle>:
void subfunct_angle(char **argv) {
 8017de8:	b580      	push	{r7, lr}
 8017dea:	b084      	sub	sp, #16
 8017dec:	af00      	add	r7, sp, #0
 8017dee:	6078      	str	r0, [r7, #4]
	/*
	 * int:MotorID 	int:speed
	 * ex:	speed 1 90
	 */
	if (argv[1] == NULL) {
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	3304      	adds	r3, #4
 8017df4:	681b      	ldr	r3, [r3, #0]
 8017df6:	2b00      	cmp	r3, #0
 8017df8:	d104      	bne.n	8017e04 <subfunct_angle+0x1c>
		debug(INFORMATION,"ANGLE - ARGUMENTS NEEDED");
 8017dfa:	4918      	ldr	r1, [pc, #96]	@ (8017e5c <subfunct_angle+0x74>)
 8017dfc:	4818      	ldr	r0, [pc, #96]	@ (8017e60 <subfunct_angle+0x78>)
 8017dfe:	f000 fa3b 	bl	8018278 <debug>
		return;
 8017e02:	e028      	b.n	8017e56 <subfunct_angle+0x6e>
	}
	if (strcmp(argv[1], "-v")==0){
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	3304      	adds	r3, #4
 8017e08:	681b      	ldr	r3, [r3, #0]
 8017e0a:	4916      	ldr	r1, [pc, #88]	@ (8017e64 <subfunct_angle+0x7c>)
 8017e0c:	4618      	mov	r0, r3
 8017e0e:	f7ea fc5f 	bl	80026d0 <strcmp>
 8017e12:	4603      	mov	r3, r0
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	d10a      	bne.n	8017e2e <subfunct_angle+0x46>
		verbosePulse = verbosePulse ==0? 1:0;
 8017e18:	4b13      	ldr	r3, [pc, #76]	@ (8017e68 <subfunct_angle+0x80>)
 8017e1a:	681b      	ldr	r3, [r3, #0]
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	bf0c      	ite	eq
 8017e20:	2301      	moveq	r3, #1
 8017e22:	2300      	movne	r3, #0
 8017e24:	b2db      	uxtb	r3, r3
 8017e26:	461a      	mov	r2, r3
 8017e28:	4b0f      	ldr	r3, [pc, #60]	@ (8017e68 <subfunct_angle+0x80>)
 8017e2a:	601a      	str	r2, [r3, #0]
	else{
		int angle = (int) strtol(argv[1], NULL, 10); // Base 10
		if (isSpeedInit==0){isSpeedInit=1;}
		ZXB5210_angle(angle);
	}
	return;
 8017e2c:	e012      	b.n	8017e54 <subfunct_angle+0x6c>
		int angle = (int) strtol(argv[1], NULL, 10); // Base 10
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	3304      	adds	r3, #4
 8017e32:	681b      	ldr	r3, [r3, #0]
 8017e34:	220a      	movs	r2, #10
 8017e36:	2100      	movs	r1, #0
 8017e38:	4618      	mov	r0, r3
 8017e3a:	f002 f8cf 	bl	8019fdc <strtol>
 8017e3e:	60f8      	str	r0, [r7, #12]
		if (isSpeedInit==0){isSpeedInit=1;}
 8017e40:	4b0a      	ldr	r3, [pc, #40]	@ (8017e6c <subfunct_angle+0x84>)
 8017e42:	681b      	ldr	r3, [r3, #0]
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d102      	bne.n	8017e4e <subfunct_angle+0x66>
 8017e48:	4b08      	ldr	r3, [pc, #32]	@ (8017e6c <subfunct_angle+0x84>)
 8017e4a:	2201      	movs	r2, #1
 8017e4c:	601a      	str	r2, [r3, #0]
		ZXB5210_angle(angle);
 8017e4e:	68f8      	ldr	r0, [r7, #12]
 8017e50:	f7ee fae6 	bl	8006420 <ZXB5210_angle>
	return;
 8017e54:	bf00      	nop
}
 8017e56:	3710      	adds	r7, #16
 8017e58:	46bd      	mov	sp, r7
 8017e5a:	bd80      	pop	{r7, pc}
 8017e5c:	0801ec94 	.word	0x0801ec94
 8017e60:	0801ec80 	.word	0x0801ec80
 8017e64:	0801ecb0 	.word	0x0801ecb0
 8017e68:	200079f0 	.word	0x200079f0
 8017e6c:	20000fe4 	.word	0x20000fe4

08017e70 <subfunct_Iasserv>:
void subfunct_Iasserv(char **argv) {
 8017e70:	b580      	push	{r7, lr}
 8017e72:	b082      	sub	sp, #8
 8017e74:	af00      	add	r7, sp, #0
 8017e76:	6078      	str	r0, [r7, #4]
	/** THIS DMA REQUEST IS SYNC WITH THE TIM15 EVENT **/

	HAL_ADC_Start_DMA(&hadc2,(uint32_t*)adc2_asserv_VAL,NUM_CHANNEL_ADC2) == HAL_OK ?
 8017e78:	2202      	movs	r2, #2
 8017e7a:	490a      	ldr	r1, [pc, #40]	@ (8017ea4 <subfunct_Iasserv+0x34>)
 8017e7c:	480a      	ldr	r0, [pc, #40]	@ (8017ea8 <subfunct_Iasserv+0x38>)
 8017e7e:	f7ef f8cf 	bl	8007020 <HAL_ADC_Start_DMA>
 8017e82:	4603      	mov	r3, r0
			debug(START, "ADC2 DMA") : debug(D_ERROR, "ADC2 DMA");
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d104      	bne.n	8017e92 <subfunct_Iasserv+0x22>
 8017e88:	4908      	ldr	r1, [pc, #32]	@ (8017eac <subfunct_Iasserv+0x3c>)
 8017e8a:	4809      	ldr	r0, [pc, #36]	@ (8017eb0 <subfunct_Iasserv+0x40>)
 8017e8c:	f000 f9f4 	bl	8018278 <debug>
	return;
 8017e90:	e004      	b.n	8017e9c <subfunct_Iasserv+0x2c>
			debug(START, "ADC2 DMA") : debug(D_ERROR, "ADC2 DMA");
 8017e92:	4906      	ldr	r1, [pc, #24]	@ (8017eac <subfunct_Iasserv+0x3c>)
 8017e94:	4807      	ldr	r0, [pc, #28]	@ (8017eb4 <subfunct_Iasserv+0x44>)
 8017e96:	f000 f9ef 	bl	8018278 <debug>
	return;
 8017e9a:	bf00      	nop
}
 8017e9c:	3708      	adds	r7, #8
 8017e9e:	46bd      	mov	sp, r7
 8017ea0:	bd80      	pop	{r7, pc}
 8017ea2:	bf00      	nop
 8017ea4:	2000796c 	.word	0x2000796c
 8017ea8:	2000055c 	.word	0x2000055c
 8017eac:	0801ec58 	.word	0x0801ec58
 8017eb0:	0801ebd0 	.word	0x0801ebd0
 8017eb4:	0801ec04 	.word	0x0801ec04

08017eb8 <subfunct_setLed>:
void subfunct_setLed(char **argv) {
 8017eb8:	b580      	push	{r7, lr}
 8017eba:	b082      	sub	sp, #8
 8017ebc:	af00      	add	r7, sp, #0
 8017ebe:	6078      	str	r0, [r7, #4]
	/*
	 * int: LedId	int: %PWM(0-255)
	 */

	chenillard_RGB();
 8017ec0:	f7ed fef6 	bl	8005cb0 <chenillard_RGB>

}
 8017ec4:	bf00      	nop
 8017ec6:	3708      	adds	r7, #8
 8017ec8:	46bd      	mov	sp, r7
 8017eca:	bd80      	pop	{r7, pc}

08017ecc <subfunct_seeIMU>:
void subfunct_seeIMU(char **argv) {
 8017ecc:	b480      	push	{r7}
 8017ece:	b083      	sub	sp, #12
 8017ed0:	af00      	add	r7, sp, #0
 8017ed2:	6078      	str	r0, [r7, #4]
	/*
	 * argv None
	 */
	isSeeIMU = isSeeIMU == 1 ? 0 : 1;
 8017ed4:	4b07      	ldr	r3, [pc, #28]	@ (8017ef4 <subfunct_seeIMU+0x28>)
 8017ed6:	681b      	ldr	r3, [r3, #0]
 8017ed8:	2b01      	cmp	r3, #1
 8017eda:	bf14      	ite	ne
 8017edc:	2301      	movne	r3, #1
 8017ede:	2300      	moveq	r3, #0
 8017ee0:	b2db      	uxtb	r3, r3
 8017ee2:	461a      	mov	r2, r3
 8017ee4:	4b03      	ldr	r3, [pc, #12]	@ (8017ef4 <subfunct_seeIMU+0x28>)
 8017ee6:	601a      	str	r2, [r3, #0]

	/* in main.c : TIM16 permet de faire calculer la vitesse et la position   */
}
 8017ee8:	bf00      	nop
 8017eea:	370c      	adds	r7, #12
 8017eec:	46bd      	mov	sp, r7
 8017eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ef2:	4770      	bx	lr
 8017ef4:	200079e0 	.word	0x200079e0

08017ef8 <subfunct_IMU_Update>:
void subfunct_IMU_Update(char **argv) {
 8017ef8:	b580      	push	{r7, lr}
 8017efa:	b084      	sub	sp, #16
 8017efc:	af00      	add	r7, sp, #0
 8017efe:	6078      	str	r0, [r7, #4]
	/*
	 * argv None
	 */
	uint8_t startReg = 0x1D;
 8017f00:	231d      	movs	r3, #29
 8017f02:	72fb      	strb	r3, [r7, #11]
	uint8_t endReg = 0x39;
 8017f04:	2339      	movs	r3, #57	@ 0x39
 8017f06:	72bb      	strb	r3, [r7, #10]
	for (int i = 1; i <= endReg - startReg + 1; i++) {
 8017f08:	2301      	movs	r3, #1
 8017f0a:	60fb      	str	r3, [r7, #12]
 8017f0c:	e01d      	b.n	8017f4a <subfunct_IMU_Update+0x52>
		uint8_t ret = 0;
 8017f0e:	2300      	movs	r3, #0
 8017f10:	727b      	strb	r3, [r7, #9]
		ADXL343_ReadRegister(IMURegister[i].reg, &ret, 1);
 8017f12:	4a14      	ldr	r2, [pc, #80]	@ (8017f64 <subfunct_IMU_Update+0x6c>)
 8017f14:	68fb      	ldr	r3, [r7, #12]
 8017f16:	00db      	lsls	r3, r3, #3
 8017f18:	4413      	add	r3, r2
 8017f1a:	791b      	ldrb	r3, [r3, #4]
 8017f1c:	f107 0109 	add.w	r1, r7, #9
 8017f20:	2201      	movs	r2, #1
 8017f22:	4618      	mov	r0, r3
 8017f24:	f7ed fd2e 	bl	8005984 <ADXL343_ReadRegister>
		printf("READ - 0x%02X (%s): 0x%02X\r\n", IMURegister[i].reg,
 8017f28:	4a0e      	ldr	r2, [pc, #56]	@ (8017f64 <subfunct_IMU_Update+0x6c>)
 8017f2a:	68fb      	ldr	r3, [r7, #12]
 8017f2c:	00db      	lsls	r3, r3, #3
 8017f2e:	4413      	add	r3, r2
 8017f30:	791b      	ldrb	r3, [r3, #4]
 8017f32:	4619      	mov	r1, r3
 8017f34:	4a0b      	ldr	r2, [pc, #44]	@ (8017f64 <subfunct_IMU_Update+0x6c>)
 8017f36:	68fb      	ldr	r3, [r7, #12]
 8017f38:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8017f3c:	7a7b      	ldrb	r3, [r7, #9]
 8017f3e:	480a      	ldr	r0, [pc, #40]	@ (8017f68 <subfunct_IMU_Update+0x70>)
 8017f40:	f002 f874 	bl	801a02c <iprintf>
	for (int i = 1; i <= endReg - startReg + 1; i++) {
 8017f44:	68fb      	ldr	r3, [r7, #12]
 8017f46:	3301      	adds	r3, #1
 8017f48:	60fb      	str	r3, [r7, #12]
 8017f4a:	7aba      	ldrb	r2, [r7, #10]
 8017f4c:	7afb      	ldrb	r3, [r7, #11]
 8017f4e:	1ad3      	subs	r3, r2, r3
 8017f50:	3301      	adds	r3, #1
 8017f52:	68fa      	ldr	r2, [r7, #12]
 8017f54:	429a      	cmp	r2, r3
 8017f56:	ddda      	ble.n	8017f0e <subfunct_IMU_Update+0x16>
				IMURegister[i].name, ret);
	}
	/* in main.c : TIM16 permet de faire calculer la vitesse et la position   */
}
 8017f58:	bf00      	nop
 8017f5a:	bf00      	nop
 8017f5c:	3710      	adds	r7, #16
 8017f5e:	46bd      	mov	sp, r7
 8017f60:	bd80      	pop	{r7, pc}
 8017f62:	bf00      	nop
 8017f64:	20000008 	.word	0x20000008
 8017f68:	0801ecb4 	.word	0x0801ecb4

08017f6c <subfunct_IMU_SelfTest>:
void subfunct_IMU_SelfTest(char **argv) {
 8017f6c:	b580      	push	{r7, lr}
 8017f6e:	b084      	sub	sp, #16
 8017f70:	af00      	add	r7, sp, #0
 8017f72:	6078      	str	r0, [r7, #4]
	/*
	 * argv None
	 */
	uint8_t ret;

	isSeeIMUFORCE = isSeeIMUFORCE == 1 ? 0 : 1;
 8017f74:	4b1f      	ldr	r3, [pc, #124]	@ (8017ff4 <subfunct_IMU_SelfTest+0x88>)
 8017f76:	681b      	ldr	r3, [r3, #0]
 8017f78:	2b01      	cmp	r3, #1
 8017f7a:	bf14      	ite	ne
 8017f7c:	2301      	movne	r3, #1
 8017f7e:	2300      	moveq	r3, #0
 8017f80:	b2db      	uxtb	r3, r3
 8017f82:	461a      	mov	r2, r3
 8017f84:	4b1b      	ldr	r3, [pc, #108]	@ (8017ff4 <subfunct_IMU_SelfTest+0x88>)
 8017f86:	601a      	str	r2, [r3, #0]
	char *debugType = isSeeIMUFORCE == 1 ? START : STOP;
 8017f88:	4b1a      	ldr	r3, [pc, #104]	@ (8017ff4 <subfunct_IMU_SelfTest+0x88>)
 8017f8a:	681b      	ldr	r3, [r3, #0]
 8017f8c:	2b01      	cmp	r3, #1
 8017f8e:	d101      	bne.n	8017f94 <subfunct_IMU_SelfTest+0x28>
 8017f90:	4b19      	ldr	r3, [pc, #100]	@ (8017ff8 <subfunct_IMU_SelfTest+0x8c>)
 8017f92:	e000      	b.n	8017f96 <subfunct_IMU_SelfTest+0x2a>
 8017f94:	4b19      	ldr	r3, [pc, #100]	@ (8017ffc <subfunct_IMU_SelfTest+0x90>)
 8017f96:	60fb      	str	r3, [r7, #12]

	ADXL343_ReadRegister(0x31, &ret, 1) != HAL_OK ?
 8017f98:	f107 030b 	add.w	r3, r7, #11
 8017f9c:	2201      	movs	r2, #1
 8017f9e:	4619      	mov	r1, r3
 8017fa0:	2031      	movs	r0, #49	@ 0x31
 8017fa2:	f7ed fcef 	bl	8005984 <ADXL343_ReadRegister>
 8017fa6:	4603      	mov	r3, r0
			debug(D_ERROR, "I2C READ in IMUFORCE") : (void) 0;
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	d003      	beq.n	8017fb4 <subfunct_IMU_SelfTest+0x48>
 8017fac:	4914      	ldr	r1, [pc, #80]	@ (8018000 <subfunct_IMU_SelfTest+0x94>)
 8017fae:	4815      	ldr	r0, [pc, #84]	@ (8018004 <subfunct_IMU_SelfTest+0x98>)
 8017fb0:	f000 f962 	bl	8018278 <debug>
	ADXL343_WriteRegister(0x31, ((isSeeIMUFORCE << 7) | (ret & 0x7F)))
 8017fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8017ff4 <subfunct_IMU_SelfTest+0x88>)
 8017fb6:	681b      	ldr	r3, [r3, #0]
 8017fb8:	01db      	lsls	r3, r3, #7
 8017fba:	b25a      	sxtb	r2, r3
 8017fbc:	7afb      	ldrb	r3, [r7, #11]
 8017fbe:	b25b      	sxtb	r3, r3
 8017fc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017fc4:	b25b      	sxtb	r3, r3
 8017fc6:	4313      	orrs	r3, r2
 8017fc8:	b25b      	sxtb	r3, r3
 8017fca:	b2db      	uxtb	r3, r3
 8017fcc:	4619      	mov	r1, r3
 8017fce:	2031      	movs	r0, #49	@ 0x31
 8017fd0:	f7ed fcba 	bl	8005948 <ADXL343_WriteRegister>
 8017fd4:	4603      	mov	r3, r0
	!= HAL_OK ? debug(D_ERROR, "I2C WRITE in IMUFORCE") : (void) 0;
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	d003      	beq.n	8017fe2 <subfunct_IMU_SelfTest+0x76>
 8017fda:	490b      	ldr	r1, [pc, #44]	@ (8018008 <subfunct_IMU_SelfTest+0x9c>)
 8017fdc:	4809      	ldr	r0, [pc, #36]	@ (8018004 <subfunct_IMU_SelfTest+0x98>)
 8017fde:	f000 f94b 	bl	8018278 <debug>
	debug(debugType, "IMU FORCE - Self Test");
 8017fe2:	490a      	ldr	r1, [pc, #40]	@ (801800c <subfunct_IMU_SelfTest+0xa0>)
 8017fe4:	68f8      	ldr	r0, [r7, #12]
 8017fe6:	f000 f947 	bl	8018278 <debug>
	/* in main.c : TIM16 permet de calculer la vitesse et la position   */
}
 8017fea:	bf00      	nop
 8017fec:	3710      	adds	r7, #16
 8017fee:	46bd      	mov	sp, r7
 8017ff0:	bd80      	pop	{r7, pc}
 8017ff2:	bf00      	nop
 8017ff4:	200079e4 	.word	0x200079e4
 8017ff8:	0801ebd0 	.word	0x0801ebd0
 8017ffc:	0801ec44 	.word	0x0801ec44
 8018000:	0801ecd4 	.word	0x0801ecd4
 8018004:	0801ec04 	.word	0x0801ec04
 8018008:	0801ecec 	.word	0x0801ecec
 801800c:	0801ed04 	.word	0x0801ed04

08018010 <subfunct_IMU_GET>:
void subfunct_IMU_GET(char **argv) {
 8018010:	b580      	push	{r7, lr}
 8018012:	b08e      	sub	sp, #56	@ 0x38
 8018014:	af00      	add	r7, sp, #0
 8018016:	6078      	str	r0, [r7, #4]
	/*
	 * argv None
	 */
	XYZ_t accPREV = accXYZ;
 8018018:	4a2b      	ldr	r2, [pc, #172]	@ (80180c8 <subfunct_IMU_GET+0xb8>)
 801801a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801801e:	ca07      	ldmia	r2, {r0, r1, r2}
 8018020:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	XYZ_t vitPREV = vitXYZ;
 8018024:	4a29      	ldr	r2, [pc, #164]	@ (80180cc <subfunct_IMU_GET+0xbc>)
 8018026:	f107 0320 	add.w	r3, r7, #32
 801802a:	ca07      	ldmia	r2, {r0, r1, r2}
 801802c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	accXYZ = ADXL343_getAcc();
 8018030:	f7ed fbdc 	bl	80057ec <ADXL343_getAcc>
 8018034:	eef0 6a40 	vmov.f32	s13, s0
 8018038:	eeb0 7a60 	vmov.f32	s14, s1
 801803c:	eef0 7a41 	vmov.f32	s15, s2
 8018040:	4b21      	ldr	r3, [pc, #132]	@ (80180c8 <subfunct_IMU_GET+0xb8>)
 8018042:	edc3 6a00 	vstr	s13, [r3]
 8018046:	ed83 7a01 	vstr	s14, [r3, #4]
 801804a:	edc3 7a02 	vstr	s15, [r3, #8]

	vitXYZ = (XYZ_t ) { accPREV.X - accXYZ.X, accPREV.Y - accXYZ.Y, accPREV.Z
 801804e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8018052:	4b1d      	ldr	r3, [pc, #116]	@ (80180c8 <subfunct_IMU_GET+0xb8>)
 8018054:	edd3 7a00 	vldr	s15, [r3]
 8018058:	ee77 6a67 	vsub.f32	s13, s14, s15
 801805c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8018060:	4b19      	ldr	r3, [pc, #100]	@ (80180c8 <subfunct_IMU_GET+0xb8>)
 8018062:	edd3 7a01 	vldr	s15, [r3, #4]
 8018066:	ee37 7a67 	vsub.f32	s14, s14, s15
 801806a:	ed97 6a0d 	vldr	s12, [r7, #52]	@ 0x34
		- accXYZ.Z };
 801806e:	4b16      	ldr	r3, [pc, #88]	@ (80180c8 <subfunct_IMU_GET+0xb8>)
 8018070:	edd3 7a02 	vldr	s15, [r3, #8]
 8018074:	ee76 7a67 	vsub.f32	s15, s12, s15
	vitXYZ = (XYZ_t ) { accPREV.X - accXYZ.X, accPREV.Y - accXYZ.Y, accPREV.Z
 8018078:	4b14      	ldr	r3, [pc, #80]	@ (80180cc <subfunct_IMU_GET+0xbc>)
 801807a:	edc3 6a00 	vstr	s13, [r3]
 801807e:	4b13      	ldr	r3, [pc, #76]	@ (80180cc <subfunct_IMU_GET+0xbc>)
 8018080:	ed83 7a01 	vstr	s14, [r3, #4]
 8018084:	4b11      	ldr	r3, [pc, #68]	@ (80180cc <subfunct_IMU_GET+0xbc>)
 8018086:	edc3 7a02 	vstr	s15, [r3, #8]
	posXYZ = (XYZ_t ) { vitPREV.X - vitPREV.X, vitPREV.Y - vitPREV.Y, vitPREV.Z
 801808a:	ed97 7a08 	vldr	s14, [r7, #32]
 801808e:	edd7 7a08 	vldr	s15, [r7, #32]
 8018092:	ee77 6a67 	vsub.f32	s13, s14, s15
 8018096:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 801809a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 801809e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80180a2:	ed97 6a0a 	vldr	s12, [r7, #40]	@ 0x28
		- vitPREV.Z };
 80180a6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80180aa:	ee76 7a67 	vsub.f32	s15, s12, s15
	posXYZ = (XYZ_t ) { vitPREV.X - vitPREV.X, vitPREV.Y - vitPREV.Y, vitPREV.Z
 80180ae:	4b08      	ldr	r3, [pc, #32]	@ (80180d0 <subfunct_IMU_GET+0xc0>)
 80180b0:	edc3 6a00 	vstr	s13, [r3]
 80180b4:	4b06      	ldr	r3, [pc, #24]	@ (80180d0 <subfunct_IMU_GET+0xc0>)
 80180b6:	ed83 7a01 	vstr	s14, [r3, #4]
 80180ba:	4b05      	ldr	r3, [pc, #20]	@ (80180d0 <subfunct_IMU_GET+0xc0>)
 80180bc:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80180c0:	bf00      	nop
 80180c2:	3738      	adds	r7, #56	@ 0x38
 80180c4:	46bd      	mov	sp, r7
 80180c6:	bd80      	pop	{r7, pc}
 80180c8:	20007904 	.word	0x20007904
 80180cc:	20007910 	.word	0x20007910
 80180d0:	2000791c 	.word	0x2000791c

080180d4 <subfunct_MIAOU>:
void subfunct_MIAOU(char **argv) {
 80180d4:	b580      	push	{r7, lr}
 80180d6:	b082      	sub	sp, #8
 80180d8:	af00      	add	r7, sp, #0
 80180da:	6078      	str	r0, [r7, #4]
	debug(INFORMATION,"MIAOU");
 80180dc:	4904      	ldr	r1, [pc, #16]	@ (80180f0 <subfunct_MIAOU+0x1c>)
 80180de:	4805      	ldr	r0, [pc, #20]	@ (80180f4 <subfunct_MIAOU+0x20>)
 80180e0:	f000 f8ca 	bl	8018278 <debug>
	play_song();
 80180e4:	f7ff fb22 	bl	801772c <play_song>
	return;
 80180e8:	bf00      	nop
}
 80180ea:	3708      	adds	r7, #8
 80180ec:	46bd      	mov	sp, r7
 80180ee:	bd80      	pop	{r7, pc}
 80180f0:	0801ed1c 	.word	0x0801ed1c
 80180f4:	0801ec80 	.word	0x0801ec80

080180f8 <subfunct_modify_calc_speed>:
void subfunct_modify_calc_speed(char**argv){
 80180f8:	b580      	push	{r7, lr}
 80180fa:	b088      	sub	sp, #32
 80180fc:	af00      	add	r7, sp, #0
 80180fe:	6078      	str	r0, [r7, #4]
	MDriver_t* MDriver;
	MDriver_Config_t* MDriver_Config;

	uint8_t driver_id = (uint8_t) strtol(argv[1], NULL, 10); // Base 10
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	3304      	adds	r3, #4
 8018104:	681b      	ldr	r3, [r3, #0]
 8018106:	220a      	movs	r2, #10
 8018108:	2100      	movs	r1, #0
 801810a:	4618      	mov	r0, r3
 801810c:	f001 ff66 	bl	8019fdc <strtol>
 8018110:	4603      	mov	r3, r0
 8018112:	77fb      	strb	r3, [r7, #31]
	char* sens_motor = argv[2];
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	689b      	ldr	r3, [r3, #8]
 8018118:	61bb      	str	r3, [r7, #24]
	int32_t offset_user = (int32_t) strtol(argv[3], NULL, 10); //Prends des valeurs entre -128 et 127
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	330c      	adds	r3, #12
 801811e:	681b      	ldr	r3, [r3, #0]
 8018120:	220a      	movs	r2, #10
 8018122:	2100      	movs	r1, #0
 8018124:	4618      	mov	r0, r3
 8018126:	f001 ff59 	bl	8019fdc <strtol>
 801812a:	6178      	str	r0, [r7, #20]
	MDriver = driver_id==1 ? &MDriver1 : &MDriver2;
 801812c:	7ffb      	ldrb	r3, [r7, #31]
 801812e:	2b01      	cmp	r3, #1
 8018130:	d101      	bne.n	8018136 <subfunct_modify_calc_speed+0x3e>
 8018132:	4b0c      	ldr	r3, [pc, #48]	@ (8018164 <subfunct_modify_calc_speed+0x6c>)
 8018134:	e000      	b.n	8018138 <subfunct_modify_calc_speed+0x40>
 8018136:	4b0c      	ldr	r3, [pc, #48]	@ (8018168 <subfunct_modify_calc_speed+0x70>)
 8018138:	613b      	str	r3, [r7, #16]
	MDriver_Config = strcmp(sens_motor, "FWD") == 0 ? MDriver->FWD : MDriver->REV;
 801813a:	490c      	ldr	r1, [pc, #48]	@ (801816c <subfunct_modify_calc_speed+0x74>)
 801813c:	69b8      	ldr	r0, [r7, #24]
 801813e:	f7ea fac7 	bl	80026d0 <strcmp>
 8018142:	4603      	mov	r3, r0
 8018144:	2b00      	cmp	r3, #0
 8018146:	d102      	bne.n	801814e <subfunct_modify_calc_speed+0x56>
 8018148:	693b      	ldr	r3, [r7, #16]
 801814a:	685b      	ldr	r3, [r3, #4]
 801814c:	e001      	b.n	8018152 <subfunct_modify_calc_speed+0x5a>
 801814e:	693b      	ldr	r3, [r7, #16]
 8018150:	689b      	ldr	r3, [r3, #8]
 8018152:	60fb      	str	r3, [r7, #12]
	MDriver_Config->offset=offset_user;
 8018154:	697a      	ldr	r2, [r7, #20]
 8018156:	68fb      	ldr	r3, [r7, #12]
 8018158:	60da      	str	r2, [r3, #12]

}
 801815a:	bf00      	nop
 801815c:	3720      	adds	r7, #32
 801815e:	46bd      	mov	sp, r7
 8018160:	bd80      	pop	{r7, pc}
 8018162:	bf00      	nop
 8018164:	20000f84 	.word	0x20000f84
 8018168:	20000f94 	.word	0x20000f94
 801816c:	0801ed24 	.word	0x0801ed24

08018170 <subfunct_lidar>:

void subfunct_lidar(char**argv){
 8018170:	b580      	push	{r7, lr}
 8018172:	b082      	sub	sp, #8
 8018174:	af00      	add	r7, sp, #0
 8018176:	6078      	str	r0, [r7, #4]
	if(argv[1]==NULL){
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	3304      	adds	r3, #4
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	2b00      	cmp	r3, #0
 8018180:	d10f      	bne.n	80181a2 <subfunct_lidar+0x32>
		LIDAR_start_scan_dma(&lidar) == 0 ? debug(START,"LIDAR") : debug(D_ERROR,"LIDAR");
 8018182:	482f      	ldr	r0, [pc, #188]	@ (8018240 <subfunct_lidar+0xd0>)
 8018184:	f7f8 fc28 	bl	80109d8 <LIDAR_start_scan_dma>
 8018188:	4603      	mov	r3, r0
 801818a:	2b00      	cmp	r3, #0
 801818c:	d104      	bne.n	8018198 <subfunct_lidar+0x28>
 801818e:	492d      	ldr	r1, [pc, #180]	@ (8018244 <subfunct_lidar+0xd4>)
 8018190:	482d      	ldr	r0, [pc, #180]	@ (8018248 <subfunct_lidar+0xd8>)
 8018192:	f000 f871 	bl	8018278 <debug>
		strcmp(argv[1], "-s") ==0 ? HAL_GPIO_TogglePin(GPIOA,LIDAR_M_CTR_Pin):(void)0;

		lidarDebugShell = strcmp(argv[1], "-debug") == 0 ? 1-lidarDebugShell:lidarDebugShell;

	}
}
 8018196:	e04e      	b.n	8018236 <subfunct_lidar+0xc6>
		LIDAR_start_scan_dma(&lidar) == 0 ? debug(START,"LIDAR") : debug(D_ERROR,"LIDAR");
 8018198:	492a      	ldr	r1, [pc, #168]	@ (8018244 <subfunct_lidar+0xd4>)
 801819a:	482c      	ldr	r0, [pc, #176]	@ (801824c <subfunct_lidar+0xdc>)
 801819c:	f000 f86c 	bl	8018278 <debug>
}
 80181a0:	e049      	b.n	8018236 <subfunct_lidar+0xc6>
		strcmp(argv[1], "-h") ==0 ? LIDAR_get_health_stat(&lidar):(void)0;
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	3304      	adds	r3, #4
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	4929      	ldr	r1, [pc, #164]	@ (8018250 <subfunct_lidar+0xe0>)
 80181aa:	4618      	mov	r0, r3
 80181ac:	f7ea fa90 	bl	80026d0 <strcmp>
 80181b0:	4603      	mov	r3, r0
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d102      	bne.n	80181bc <subfunct_lidar+0x4c>
 80181b6:	4822      	ldr	r0, [pc, #136]	@ (8018240 <subfunct_lidar+0xd0>)
 80181b8:	f7f8 fb24 	bl	8010804 <LIDAR_get_health_stat>
		strcmp(argv[1], "-r") ==0 ? LIDAR_restart(&lidar):(void)0;
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	3304      	adds	r3, #4
 80181c0:	681b      	ldr	r3, [r3, #0]
 80181c2:	4924      	ldr	r1, [pc, #144]	@ (8018254 <subfunct_lidar+0xe4>)
 80181c4:	4618      	mov	r0, r3
 80181c6:	f7ea fa83 	bl	80026d0 <strcmp>
 80181ca:	4603      	mov	r3, r0
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	d102      	bne.n	80181d6 <subfunct_lidar+0x66>
 80181d0:	481b      	ldr	r0, [pc, #108]	@ (8018240 <subfunct_lidar+0xd0>)
 80181d2:	f7f8 f98b 	bl	80104ec <LIDAR_restart>
		strcmp(argv[1], "-i") ==0 ? LIDAR_get_info(&lidar):(void)0;
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	3304      	adds	r3, #4
 80181da:	681b      	ldr	r3, [r3, #0]
 80181dc:	491e      	ldr	r1, [pc, #120]	@ (8018258 <subfunct_lidar+0xe8>)
 80181de:	4618      	mov	r0, r3
 80181e0:	f7ea fa76 	bl	80026d0 <strcmp>
 80181e4:	4603      	mov	r3, r0
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d102      	bne.n	80181f0 <subfunct_lidar+0x80>
 80181ea:	4815      	ldr	r0, [pc, #84]	@ (8018240 <subfunct_lidar+0xd0>)
 80181ec:	f7f8 f9a4 	bl	8010538 <LIDAR_get_info>
		strcmp(argv[1], "-s") ==0 ? HAL_GPIO_TogglePin(GPIOA,LIDAR_M_CTR_Pin):(void)0;
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	3304      	adds	r3, #4
 80181f4:	681b      	ldr	r3, [r3, #0]
 80181f6:	4919      	ldr	r1, [pc, #100]	@ (801825c <subfunct_lidar+0xec>)
 80181f8:	4618      	mov	r0, r3
 80181fa:	f7ea fa69 	bl	80026d0 <strcmp>
 80181fe:	4603      	mov	r3, r0
 8018200:	2b00      	cmp	r3, #0
 8018202:	d105      	bne.n	8018210 <subfunct_lidar+0xa0>
 8018204:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8018208:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801820c:	f7f1 fab6 	bl	800977c <HAL_GPIO_TogglePin>
		lidarDebugShell = strcmp(argv[1], "-debug") == 0 ? 1-lidarDebugShell:lidarDebugShell;
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	3304      	adds	r3, #4
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	4912      	ldr	r1, [pc, #72]	@ (8018260 <subfunct_lidar+0xf0>)
 8018218:	4618      	mov	r0, r3
 801821a:	f7ea fa59 	bl	80026d0 <strcmp>
 801821e:	4603      	mov	r3, r0
 8018220:	2b00      	cmp	r3, #0
 8018222:	d104      	bne.n	801822e <subfunct_lidar+0xbe>
 8018224:	4b0f      	ldr	r3, [pc, #60]	@ (8018264 <subfunct_lidar+0xf4>)
 8018226:	681b      	ldr	r3, [r3, #0]
 8018228:	f1c3 0301 	rsb	r3, r3, #1
 801822c:	e001      	b.n	8018232 <subfunct_lidar+0xc2>
 801822e:	4b0d      	ldr	r3, [pc, #52]	@ (8018264 <subfunct_lidar+0xf4>)
 8018230:	681b      	ldr	r3, [r3, #0]
 8018232:	4a0c      	ldr	r2, [pc, #48]	@ (8018264 <subfunct_lidar+0xf4>)
 8018234:	6013      	str	r3, [r2, #0]
}
 8018236:	bf00      	nop
 8018238:	3708      	adds	r7, #8
 801823a:	46bd      	mov	sp, r7
 801823c:	bd80      	pop	{r7, pc}
 801823e:	bf00      	nop
 8018240:	20000fec 	.word	0x20000fec
 8018244:	0801ed28 	.word	0x0801ed28
 8018248:	0801ebd0 	.word	0x0801ebd0
 801824c:	0801ec04 	.word	0x0801ec04
 8018250:	0801ed30 	.word	0x0801ed30
 8018254:	0801ed34 	.word	0x0801ed34
 8018258:	0801ed38 	.word	0x0801ed38
 801825c:	0801ed3c 	.word	0x0801ed3c
 8018260:	0801ed40 	.word	0x0801ed40
 8018264:	200079ec 	.word	0x200079ec

08018268 <reset>:
void reset(char **argv){
 8018268:	b580      	push	{r7, lr}
 801826a:	b082      	sub	sp, #8
 801826c:	af00      	add	r7, sp, #0
 801826e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8018270:	b672      	cpsid	i
}
 8018272:	bf00      	nop
	__disable_irq(); // Désactive les interruptions globales
	NVIC_SystemReset(); // Demande un reset système via le NVIC
 8018274:	f7ff fae6 	bl	8017844 <__NVIC_SystemReset>

08018278 <debug>:
}
/************************************************************************************************
 * 										DEBUG
 *************************************************************************************************/

void debug(char *debugType, char *message) {
 8018278:	b580      	push	{r7, lr}
 801827a:	b082      	sub	sp, #8
 801827c:	af00      	add	r7, sp, #0
 801827e:	6078      	str	r0, [r7, #4]
 8018280:	6039      	str	r1, [r7, #0]

	printf("%-15s%s| %s\r\n", debugType, D_RESET, message);
 8018282:	683b      	ldr	r3, [r7, #0]
 8018284:	4a04      	ldr	r2, [pc, #16]	@ (8018298 <debug+0x20>)
 8018286:	6879      	ldr	r1, [r7, #4]
 8018288:	4804      	ldr	r0, [pc, #16]	@ (801829c <debug+0x24>)
 801828a:	f001 fecf 	bl	801a02c <iprintf>

}
 801828e:	bf00      	nop
 8018290:	3708      	adds	r7, #8
 8018292:	46bd      	mov	sp, r7
 8018294:	bd80      	pop	{r7, pc}
 8018296:	bf00      	nop
 8018298:	0801eb34 	.word	0x0801eb34
 801829c:	0801ed48 	.word	0x0801ed48

080182a0 <__cvt>:
 80182a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80182a4:	ec57 6b10 	vmov	r6, r7, d0
 80182a8:	2f00      	cmp	r7, #0
 80182aa:	460c      	mov	r4, r1
 80182ac:	4619      	mov	r1, r3
 80182ae:	463b      	mov	r3, r7
 80182b0:	bfbb      	ittet	lt
 80182b2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80182b6:	461f      	movlt	r7, r3
 80182b8:	2300      	movge	r3, #0
 80182ba:	232d      	movlt	r3, #45	@ 0x2d
 80182bc:	700b      	strb	r3, [r1, #0]
 80182be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80182c0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80182c4:	4691      	mov	r9, r2
 80182c6:	f023 0820 	bic.w	r8, r3, #32
 80182ca:	bfbc      	itt	lt
 80182cc:	4632      	movlt	r2, r6
 80182ce:	4616      	movlt	r6, r2
 80182d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80182d4:	d005      	beq.n	80182e2 <__cvt+0x42>
 80182d6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80182da:	d100      	bne.n	80182de <__cvt+0x3e>
 80182dc:	3401      	adds	r4, #1
 80182de:	2102      	movs	r1, #2
 80182e0:	e000      	b.n	80182e4 <__cvt+0x44>
 80182e2:	2103      	movs	r1, #3
 80182e4:	ab03      	add	r3, sp, #12
 80182e6:	9301      	str	r3, [sp, #4]
 80182e8:	ab02      	add	r3, sp, #8
 80182ea:	9300      	str	r3, [sp, #0]
 80182ec:	ec47 6b10 	vmov	d0, r6, r7
 80182f0:	4653      	mov	r3, sl
 80182f2:	4622      	mov	r2, r4
 80182f4:	f002 f8e0 	bl	801a4b8 <_dtoa_r>
 80182f8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80182fc:	4605      	mov	r5, r0
 80182fe:	d119      	bne.n	8018334 <__cvt+0x94>
 8018300:	f019 0f01 	tst.w	r9, #1
 8018304:	d00e      	beq.n	8018324 <__cvt+0x84>
 8018306:	eb00 0904 	add.w	r9, r0, r4
 801830a:	2200      	movs	r2, #0
 801830c:	2300      	movs	r3, #0
 801830e:	4630      	mov	r0, r6
 8018310:	4639      	mov	r1, r7
 8018312:	f7ea fe0b 	bl	8002f2c <__aeabi_dcmpeq>
 8018316:	b108      	cbz	r0, 801831c <__cvt+0x7c>
 8018318:	f8cd 900c 	str.w	r9, [sp, #12]
 801831c:	2230      	movs	r2, #48	@ 0x30
 801831e:	9b03      	ldr	r3, [sp, #12]
 8018320:	454b      	cmp	r3, r9
 8018322:	d31e      	bcc.n	8018362 <__cvt+0xc2>
 8018324:	9b03      	ldr	r3, [sp, #12]
 8018326:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018328:	1b5b      	subs	r3, r3, r5
 801832a:	4628      	mov	r0, r5
 801832c:	6013      	str	r3, [r2, #0]
 801832e:	b004      	add	sp, #16
 8018330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018334:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8018338:	eb00 0904 	add.w	r9, r0, r4
 801833c:	d1e5      	bne.n	801830a <__cvt+0x6a>
 801833e:	7803      	ldrb	r3, [r0, #0]
 8018340:	2b30      	cmp	r3, #48	@ 0x30
 8018342:	d10a      	bne.n	801835a <__cvt+0xba>
 8018344:	2200      	movs	r2, #0
 8018346:	2300      	movs	r3, #0
 8018348:	4630      	mov	r0, r6
 801834a:	4639      	mov	r1, r7
 801834c:	f7ea fdee 	bl	8002f2c <__aeabi_dcmpeq>
 8018350:	b918      	cbnz	r0, 801835a <__cvt+0xba>
 8018352:	f1c4 0401 	rsb	r4, r4, #1
 8018356:	f8ca 4000 	str.w	r4, [sl]
 801835a:	f8da 3000 	ldr.w	r3, [sl]
 801835e:	4499      	add	r9, r3
 8018360:	e7d3      	b.n	801830a <__cvt+0x6a>
 8018362:	1c59      	adds	r1, r3, #1
 8018364:	9103      	str	r1, [sp, #12]
 8018366:	701a      	strb	r2, [r3, #0]
 8018368:	e7d9      	b.n	801831e <__cvt+0x7e>

0801836a <__exponent>:
 801836a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801836c:	2900      	cmp	r1, #0
 801836e:	bfba      	itte	lt
 8018370:	4249      	neglt	r1, r1
 8018372:	232d      	movlt	r3, #45	@ 0x2d
 8018374:	232b      	movge	r3, #43	@ 0x2b
 8018376:	2909      	cmp	r1, #9
 8018378:	7002      	strb	r2, [r0, #0]
 801837a:	7043      	strb	r3, [r0, #1]
 801837c:	dd29      	ble.n	80183d2 <__exponent+0x68>
 801837e:	f10d 0307 	add.w	r3, sp, #7
 8018382:	461d      	mov	r5, r3
 8018384:	270a      	movs	r7, #10
 8018386:	461a      	mov	r2, r3
 8018388:	fbb1 f6f7 	udiv	r6, r1, r7
 801838c:	fb07 1416 	mls	r4, r7, r6, r1
 8018390:	3430      	adds	r4, #48	@ 0x30
 8018392:	f802 4c01 	strb.w	r4, [r2, #-1]
 8018396:	460c      	mov	r4, r1
 8018398:	2c63      	cmp	r4, #99	@ 0x63
 801839a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801839e:	4631      	mov	r1, r6
 80183a0:	dcf1      	bgt.n	8018386 <__exponent+0x1c>
 80183a2:	3130      	adds	r1, #48	@ 0x30
 80183a4:	1e94      	subs	r4, r2, #2
 80183a6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80183aa:	1c41      	adds	r1, r0, #1
 80183ac:	4623      	mov	r3, r4
 80183ae:	42ab      	cmp	r3, r5
 80183b0:	d30a      	bcc.n	80183c8 <__exponent+0x5e>
 80183b2:	f10d 0309 	add.w	r3, sp, #9
 80183b6:	1a9b      	subs	r3, r3, r2
 80183b8:	42ac      	cmp	r4, r5
 80183ba:	bf88      	it	hi
 80183bc:	2300      	movhi	r3, #0
 80183be:	3302      	adds	r3, #2
 80183c0:	4403      	add	r3, r0
 80183c2:	1a18      	subs	r0, r3, r0
 80183c4:	b003      	add	sp, #12
 80183c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80183c8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80183cc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80183d0:	e7ed      	b.n	80183ae <__exponent+0x44>
 80183d2:	2330      	movs	r3, #48	@ 0x30
 80183d4:	3130      	adds	r1, #48	@ 0x30
 80183d6:	7083      	strb	r3, [r0, #2]
 80183d8:	70c1      	strb	r1, [r0, #3]
 80183da:	1d03      	adds	r3, r0, #4
 80183dc:	e7f1      	b.n	80183c2 <__exponent+0x58>
	...

080183e0 <_printf_float>:
 80183e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183e4:	b08d      	sub	sp, #52	@ 0x34
 80183e6:	460c      	mov	r4, r1
 80183e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80183ec:	4616      	mov	r6, r2
 80183ee:	461f      	mov	r7, r3
 80183f0:	4605      	mov	r5, r0
 80183f2:	f001 ff01 	bl	801a1f8 <_localeconv_r>
 80183f6:	6803      	ldr	r3, [r0, #0]
 80183f8:	9304      	str	r3, [sp, #16]
 80183fa:	4618      	mov	r0, r3
 80183fc:	f7ea f960 	bl	80026c0 <strlen>
 8018400:	2300      	movs	r3, #0
 8018402:	930a      	str	r3, [sp, #40]	@ 0x28
 8018404:	f8d8 3000 	ldr.w	r3, [r8]
 8018408:	9005      	str	r0, [sp, #20]
 801840a:	3307      	adds	r3, #7
 801840c:	f023 0307 	bic.w	r3, r3, #7
 8018410:	f103 0208 	add.w	r2, r3, #8
 8018414:	f894 a018 	ldrb.w	sl, [r4, #24]
 8018418:	f8d4 b000 	ldr.w	fp, [r4]
 801841c:	f8c8 2000 	str.w	r2, [r8]
 8018420:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018424:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8018428:	9307      	str	r3, [sp, #28]
 801842a:	f8cd 8018 	str.w	r8, [sp, #24]
 801842e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8018432:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018436:	4b9c      	ldr	r3, [pc, #624]	@ (80186a8 <_printf_float+0x2c8>)
 8018438:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801843c:	f7ea fda8 	bl	8002f90 <__aeabi_dcmpun>
 8018440:	bb70      	cbnz	r0, 80184a0 <_printf_float+0xc0>
 8018442:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018446:	4b98      	ldr	r3, [pc, #608]	@ (80186a8 <_printf_float+0x2c8>)
 8018448:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801844c:	f7ea fd82 	bl	8002f54 <__aeabi_dcmple>
 8018450:	bb30      	cbnz	r0, 80184a0 <_printf_float+0xc0>
 8018452:	2200      	movs	r2, #0
 8018454:	2300      	movs	r3, #0
 8018456:	4640      	mov	r0, r8
 8018458:	4649      	mov	r1, r9
 801845a:	f7ea fd71 	bl	8002f40 <__aeabi_dcmplt>
 801845e:	b110      	cbz	r0, 8018466 <_printf_float+0x86>
 8018460:	232d      	movs	r3, #45	@ 0x2d
 8018462:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018466:	4a91      	ldr	r2, [pc, #580]	@ (80186ac <_printf_float+0x2cc>)
 8018468:	4b91      	ldr	r3, [pc, #580]	@ (80186b0 <_printf_float+0x2d0>)
 801846a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801846e:	bf94      	ite	ls
 8018470:	4690      	movls	r8, r2
 8018472:	4698      	movhi	r8, r3
 8018474:	2303      	movs	r3, #3
 8018476:	6123      	str	r3, [r4, #16]
 8018478:	f02b 0304 	bic.w	r3, fp, #4
 801847c:	6023      	str	r3, [r4, #0]
 801847e:	f04f 0900 	mov.w	r9, #0
 8018482:	9700      	str	r7, [sp, #0]
 8018484:	4633      	mov	r3, r6
 8018486:	aa0b      	add	r2, sp, #44	@ 0x2c
 8018488:	4621      	mov	r1, r4
 801848a:	4628      	mov	r0, r5
 801848c:	f000 fa7c 	bl	8018988 <_printf_common>
 8018490:	3001      	adds	r0, #1
 8018492:	f040 808d 	bne.w	80185b0 <_printf_float+0x1d0>
 8018496:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801849a:	b00d      	add	sp, #52	@ 0x34
 801849c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184a0:	4642      	mov	r2, r8
 80184a2:	464b      	mov	r3, r9
 80184a4:	4640      	mov	r0, r8
 80184a6:	4649      	mov	r1, r9
 80184a8:	f7ea fd72 	bl	8002f90 <__aeabi_dcmpun>
 80184ac:	b140      	cbz	r0, 80184c0 <_printf_float+0xe0>
 80184ae:	464b      	mov	r3, r9
 80184b0:	2b00      	cmp	r3, #0
 80184b2:	bfbc      	itt	lt
 80184b4:	232d      	movlt	r3, #45	@ 0x2d
 80184b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80184ba:	4a7e      	ldr	r2, [pc, #504]	@ (80186b4 <_printf_float+0x2d4>)
 80184bc:	4b7e      	ldr	r3, [pc, #504]	@ (80186b8 <_printf_float+0x2d8>)
 80184be:	e7d4      	b.n	801846a <_printf_float+0x8a>
 80184c0:	6863      	ldr	r3, [r4, #4]
 80184c2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80184c6:	9206      	str	r2, [sp, #24]
 80184c8:	1c5a      	adds	r2, r3, #1
 80184ca:	d13b      	bne.n	8018544 <_printf_float+0x164>
 80184cc:	2306      	movs	r3, #6
 80184ce:	6063      	str	r3, [r4, #4]
 80184d0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80184d4:	2300      	movs	r3, #0
 80184d6:	6022      	str	r2, [r4, #0]
 80184d8:	9303      	str	r3, [sp, #12]
 80184da:	ab0a      	add	r3, sp, #40	@ 0x28
 80184dc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80184e0:	ab09      	add	r3, sp, #36	@ 0x24
 80184e2:	9300      	str	r3, [sp, #0]
 80184e4:	6861      	ldr	r1, [r4, #4]
 80184e6:	ec49 8b10 	vmov	d0, r8, r9
 80184ea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80184ee:	4628      	mov	r0, r5
 80184f0:	f7ff fed6 	bl	80182a0 <__cvt>
 80184f4:	9b06      	ldr	r3, [sp, #24]
 80184f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80184f8:	2b47      	cmp	r3, #71	@ 0x47
 80184fa:	4680      	mov	r8, r0
 80184fc:	d129      	bne.n	8018552 <_printf_float+0x172>
 80184fe:	1cc8      	adds	r0, r1, #3
 8018500:	db02      	blt.n	8018508 <_printf_float+0x128>
 8018502:	6863      	ldr	r3, [r4, #4]
 8018504:	4299      	cmp	r1, r3
 8018506:	dd41      	ble.n	801858c <_printf_float+0x1ac>
 8018508:	f1aa 0a02 	sub.w	sl, sl, #2
 801850c:	fa5f fa8a 	uxtb.w	sl, sl
 8018510:	3901      	subs	r1, #1
 8018512:	4652      	mov	r2, sl
 8018514:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8018518:	9109      	str	r1, [sp, #36]	@ 0x24
 801851a:	f7ff ff26 	bl	801836a <__exponent>
 801851e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018520:	1813      	adds	r3, r2, r0
 8018522:	2a01      	cmp	r2, #1
 8018524:	4681      	mov	r9, r0
 8018526:	6123      	str	r3, [r4, #16]
 8018528:	dc02      	bgt.n	8018530 <_printf_float+0x150>
 801852a:	6822      	ldr	r2, [r4, #0]
 801852c:	07d2      	lsls	r2, r2, #31
 801852e:	d501      	bpl.n	8018534 <_printf_float+0x154>
 8018530:	3301      	adds	r3, #1
 8018532:	6123      	str	r3, [r4, #16]
 8018534:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8018538:	2b00      	cmp	r3, #0
 801853a:	d0a2      	beq.n	8018482 <_printf_float+0xa2>
 801853c:	232d      	movs	r3, #45	@ 0x2d
 801853e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018542:	e79e      	b.n	8018482 <_printf_float+0xa2>
 8018544:	9a06      	ldr	r2, [sp, #24]
 8018546:	2a47      	cmp	r2, #71	@ 0x47
 8018548:	d1c2      	bne.n	80184d0 <_printf_float+0xf0>
 801854a:	2b00      	cmp	r3, #0
 801854c:	d1c0      	bne.n	80184d0 <_printf_float+0xf0>
 801854e:	2301      	movs	r3, #1
 8018550:	e7bd      	b.n	80184ce <_printf_float+0xee>
 8018552:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8018556:	d9db      	bls.n	8018510 <_printf_float+0x130>
 8018558:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801855c:	d118      	bne.n	8018590 <_printf_float+0x1b0>
 801855e:	2900      	cmp	r1, #0
 8018560:	6863      	ldr	r3, [r4, #4]
 8018562:	dd0b      	ble.n	801857c <_printf_float+0x19c>
 8018564:	6121      	str	r1, [r4, #16]
 8018566:	b913      	cbnz	r3, 801856e <_printf_float+0x18e>
 8018568:	6822      	ldr	r2, [r4, #0]
 801856a:	07d0      	lsls	r0, r2, #31
 801856c:	d502      	bpl.n	8018574 <_printf_float+0x194>
 801856e:	3301      	adds	r3, #1
 8018570:	440b      	add	r3, r1
 8018572:	6123      	str	r3, [r4, #16]
 8018574:	65a1      	str	r1, [r4, #88]	@ 0x58
 8018576:	f04f 0900 	mov.w	r9, #0
 801857a:	e7db      	b.n	8018534 <_printf_float+0x154>
 801857c:	b913      	cbnz	r3, 8018584 <_printf_float+0x1a4>
 801857e:	6822      	ldr	r2, [r4, #0]
 8018580:	07d2      	lsls	r2, r2, #31
 8018582:	d501      	bpl.n	8018588 <_printf_float+0x1a8>
 8018584:	3302      	adds	r3, #2
 8018586:	e7f4      	b.n	8018572 <_printf_float+0x192>
 8018588:	2301      	movs	r3, #1
 801858a:	e7f2      	b.n	8018572 <_printf_float+0x192>
 801858c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8018590:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018592:	4299      	cmp	r1, r3
 8018594:	db05      	blt.n	80185a2 <_printf_float+0x1c2>
 8018596:	6823      	ldr	r3, [r4, #0]
 8018598:	6121      	str	r1, [r4, #16]
 801859a:	07d8      	lsls	r0, r3, #31
 801859c:	d5ea      	bpl.n	8018574 <_printf_float+0x194>
 801859e:	1c4b      	adds	r3, r1, #1
 80185a0:	e7e7      	b.n	8018572 <_printf_float+0x192>
 80185a2:	2900      	cmp	r1, #0
 80185a4:	bfd4      	ite	le
 80185a6:	f1c1 0202 	rsble	r2, r1, #2
 80185aa:	2201      	movgt	r2, #1
 80185ac:	4413      	add	r3, r2
 80185ae:	e7e0      	b.n	8018572 <_printf_float+0x192>
 80185b0:	6823      	ldr	r3, [r4, #0]
 80185b2:	055a      	lsls	r2, r3, #21
 80185b4:	d407      	bmi.n	80185c6 <_printf_float+0x1e6>
 80185b6:	6923      	ldr	r3, [r4, #16]
 80185b8:	4642      	mov	r2, r8
 80185ba:	4631      	mov	r1, r6
 80185bc:	4628      	mov	r0, r5
 80185be:	47b8      	blx	r7
 80185c0:	3001      	adds	r0, #1
 80185c2:	d12b      	bne.n	801861c <_printf_float+0x23c>
 80185c4:	e767      	b.n	8018496 <_printf_float+0xb6>
 80185c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80185ca:	f240 80dd 	bls.w	8018788 <_printf_float+0x3a8>
 80185ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80185d2:	2200      	movs	r2, #0
 80185d4:	2300      	movs	r3, #0
 80185d6:	f7ea fca9 	bl	8002f2c <__aeabi_dcmpeq>
 80185da:	2800      	cmp	r0, #0
 80185dc:	d033      	beq.n	8018646 <_printf_float+0x266>
 80185de:	4a37      	ldr	r2, [pc, #220]	@ (80186bc <_printf_float+0x2dc>)
 80185e0:	2301      	movs	r3, #1
 80185e2:	4631      	mov	r1, r6
 80185e4:	4628      	mov	r0, r5
 80185e6:	47b8      	blx	r7
 80185e8:	3001      	adds	r0, #1
 80185ea:	f43f af54 	beq.w	8018496 <_printf_float+0xb6>
 80185ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80185f2:	4543      	cmp	r3, r8
 80185f4:	db02      	blt.n	80185fc <_printf_float+0x21c>
 80185f6:	6823      	ldr	r3, [r4, #0]
 80185f8:	07d8      	lsls	r0, r3, #31
 80185fa:	d50f      	bpl.n	801861c <_printf_float+0x23c>
 80185fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018600:	4631      	mov	r1, r6
 8018602:	4628      	mov	r0, r5
 8018604:	47b8      	blx	r7
 8018606:	3001      	adds	r0, #1
 8018608:	f43f af45 	beq.w	8018496 <_printf_float+0xb6>
 801860c:	f04f 0900 	mov.w	r9, #0
 8018610:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8018614:	f104 0a1a 	add.w	sl, r4, #26
 8018618:	45c8      	cmp	r8, r9
 801861a:	dc09      	bgt.n	8018630 <_printf_float+0x250>
 801861c:	6823      	ldr	r3, [r4, #0]
 801861e:	079b      	lsls	r3, r3, #30
 8018620:	f100 8103 	bmi.w	801882a <_printf_float+0x44a>
 8018624:	68e0      	ldr	r0, [r4, #12]
 8018626:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018628:	4298      	cmp	r0, r3
 801862a:	bfb8      	it	lt
 801862c:	4618      	movlt	r0, r3
 801862e:	e734      	b.n	801849a <_printf_float+0xba>
 8018630:	2301      	movs	r3, #1
 8018632:	4652      	mov	r2, sl
 8018634:	4631      	mov	r1, r6
 8018636:	4628      	mov	r0, r5
 8018638:	47b8      	blx	r7
 801863a:	3001      	adds	r0, #1
 801863c:	f43f af2b 	beq.w	8018496 <_printf_float+0xb6>
 8018640:	f109 0901 	add.w	r9, r9, #1
 8018644:	e7e8      	b.n	8018618 <_printf_float+0x238>
 8018646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018648:	2b00      	cmp	r3, #0
 801864a:	dc39      	bgt.n	80186c0 <_printf_float+0x2e0>
 801864c:	4a1b      	ldr	r2, [pc, #108]	@ (80186bc <_printf_float+0x2dc>)
 801864e:	2301      	movs	r3, #1
 8018650:	4631      	mov	r1, r6
 8018652:	4628      	mov	r0, r5
 8018654:	47b8      	blx	r7
 8018656:	3001      	adds	r0, #1
 8018658:	f43f af1d 	beq.w	8018496 <_printf_float+0xb6>
 801865c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8018660:	ea59 0303 	orrs.w	r3, r9, r3
 8018664:	d102      	bne.n	801866c <_printf_float+0x28c>
 8018666:	6823      	ldr	r3, [r4, #0]
 8018668:	07d9      	lsls	r1, r3, #31
 801866a:	d5d7      	bpl.n	801861c <_printf_float+0x23c>
 801866c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018670:	4631      	mov	r1, r6
 8018672:	4628      	mov	r0, r5
 8018674:	47b8      	blx	r7
 8018676:	3001      	adds	r0, #1
 8018678:	f43f af0d 	beq.w	8018496 <_printf_float+0xb6>
 801867c:	f04f 0a00 	mov.w	sl, #0
 8018680:	f104 0b1a 	add.w	fp, r4, #26
 8018684:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018686:	425b      	negs	r3, r3
 8018688:	4553      	cmp	r3, sl
 801868a:	dc01      	bgt.n	8018690 <_printf_float+0x2b0>
 801868c:	464b      	mov	r3, r9
 801868e:	e793      	b.n	80185b8 <_printf_float+0x1d8>
 8018690:	2301      	movs	r3, #1
 8018692:	465a      	mov	r2, fp
 8018694:	4631      	mov	r1, r6
 8018696:	4628      	mov	r0, r5
 8018698:	47b8      	blx	r7
 801869a:	3001      	adds	r0, #1
 801869c:	f43f aefb 	beq.w	8018496 <_printf_float+0xb6>
 80186a0:	f10a 0a01 	add.w	sl, sl, #1
 80186a4:	e7ee      	b.n	8018684 <_printf_float+0x2a4>
 80186a6:	bf00      	nop
 80186a8:	7fefffff 	.word	0x7fefffff
 80186ac:	0801eeac 	.word	0x0801eeac
 80186b0:	0801eeb0 	.word	0x0801eeb0
 80186b4:	0801eeb4 	.word	0x0801eeb4
 80186b8:	0801eeb8 	.word	0x0801eeb8
 80186bc:	0801eebc 	.word	0x0801eebc
 80186c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80186c2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80186c6:	4553      	cmp	r3, sl
 80186c8:	bfa8      	it	ge
 80186ca:	4653      	movge	r3, sl
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	4699      	mov	r9, r3
 80186d0:	dc36      	bgt.n	8018740 <_printf_float+0x360>
 80186d2:	f04f 0b00 	mov.w	fp, #0
 80186d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80186da:	f104 021a 	add.w	r2, r4, #26
 80186de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80186e0:	9306      	str	r3, [sp, #24]
 80186e2:	eba3 0309 	sub.w	r3, r3, r9
 80186e6:	455b      	cmp	r3, fp
 80186e8:	dc31      	bgt.n	801874e <_printf_float+0x36e>
 80186ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80186ec:	459a      	cmp	sl, r3
 80186ee:	dc3a      	bgt.n	8018766 <_printf_float+0x386>
 80186f0:	6823      	ldr	r3, [r4, #0]
 80186f2:	07da      	lsls	r2, r3, #31
 80186f4:	d437      	bmi.n	8018766 <_printf_float+0x386>
 80186f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80186f8:	ebaa 0903 	sub.w	r9, sl, r3
 80186fc:	9b06      	ldr	r3, [sp, #24]
 80186fe:	ebaa 0303 	sub.w	r3, sl, r3
 8018702:	4599      	cmp	r9, r3
 8018704:	bfa8      	it	ge
 8018706:	4699      	movge	r9, r3
 8018708:	f1b9 0f00 	cmp.w	r9, #0
 801870c:	dc33      	bgt.n	8018776 <_printf_float+0x396>
 801870e:	f04f 0800 	mov.w	r8, #0
 8018712:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018716:	f104 0b1a 	add.w	fp, r4, #26
 801871a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801871c:	ebaa 0303 	sub.w	r3, sl, r3
 8018720:	eba3 0309 	sub.w	r3, r3, r9
 8018724:	4543      	cmp	r3, r8
 8018726:	f77f af79 	ble.w	801861c <_printf_float+0x23c>
 801872a:	2301      	movs	r3, #1
 801872c:	465a      	mov	r2, fp
 801872e:	4631      	mov	r1, r6
 8018730:	4628      	mov	r0, r5
 8018732:	47b8      	blx	r7
 8018734:	3001      	adds	r0, #1
 8018736:	f43f aeae 	beq.w	8018496 <_printf_float+0xb6>
 801873a:	f108 0801 	add.w	r8, r8, #1
 801873e:	e7ec      	b.n	801871a <_printf_float+0x33a>
 8018740:	4642      	mov	r2, r8
 8018742:	4631      	mov	r1, r6
 8018744:	4628      	mov	r0, r5
 8018746:	47b8      	blx	r7
 8018748:	3001      	adds	r0, #1
 801874a:	d1c2      	bne.n	80186d2 <_printf_float+0x2f2>
 801874c:	e6a3      	b.n	8018496 <_printf_float+0xb6>
 801874e:	2301      	movs	r3, #1
 8018750:	4631      	mov	r1, r6
 8018752:	4628      	mov	r0, r5
 8018754:	9206      	str	r2, [sp, #24]
 8018756:	47b8      	blx	r7
 8018758:	3001      	adds	r0, #1
 801875a:	f43f ae9c 	beq.w	8018496 <_printf_float+0xb6>
 801875e:	9a06      	ldr	r2, [sp, #24]
 8018760:	f10b 0b01 	add.w	fp, fp, #1
 8018764:	e7bb      	b.n	80186de <_printf_float+0x2fe>
 8018766:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801876a:	4631      	mov	r1, r6
 801876c:	4628      	mov	r0, r5
 801876e:	47b8      	blx	r7
 8018770:	3001      	adds	r0, #1
 8018772:	d1c0      	bne.n	80186f6 <_printf_float+0x316>
 8018774:	e68f      	b.n	8018496 <_printf_float+0xb6>
 8018776:	9a06      	ldr	r2, [sp, #24]
 8018778:	464b      	mov	r3, r9
 801877a:	4442      	add	r2, r8
 801877c:	4631      	mov	r1, r6
 801877e:	4628      	mov	r0, r5
 8018780:	47b8      	blx	r7
 8018782:	3001      	adds	r0, #1
 8018784:	d1c3      	bne.n	801870e <_printf_float+0x32e>
 8018786:	e686      	b.n	8018496 <_printf_float+0xb6>
 8018788:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801878c:	f1ba 0f01 	cmp.w	sl, #1
 8018790:	dc01      	bgt.n	8018796 <_printf_float+0x3b6>
 8018792:	07db      	lsls	r3, r3, #31
 8018794:	d536      	bpl.n	8018804 <_printf_float+0x424>
 8018796:	2301      	movs	r3, #1
 8018798:	4642      	mov	r2, r8
 801879a:	4631      	mov	r1, r6
 801879c:	4628      	mov	r0, r5
 801879e:	47b8      	blx	r7
 80187a0:	3001      	adds	r0, #1
 80187a2:	f43f ae78 	beq.w	8018496 <_printf_float+0xb6>
 80187a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80187aa:	4631      	mov	r1, r6
 80187ac:	4628      	mov	r0, r5
 80187ae:	47b8      	blx	r7
 80187b0:	3001      	adds	r0, #1
 80187b2:	f43f ae70 	beq.w	8018496 <_printf_float+0xb6>
 80187b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80187ba:	2200      	movs	r2, #0
 80187bc:	2300      	movs	r3, #0
 80187be:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80187c2:	f7ea fbb3 	bl	8002f2c <__aeabi_dcmpeq>
 80187c6:	b9c0      	cbnz	r0, 80187fa <_printf_float+0x41a>
 80187c8:	4653      	mov	r3, sl
 80187ca:	f108 0201 	add.w	r2, r8, #1
 80187ce:	4631      	mov	r1, r6
 80187d0:	4628      	mov	r0, r5
 80187d2:	47b8      	blx	r7
 80187d4:	3001      	adds	r0, #1
 80187d6:	d10c      	bne.n	80187f2 <_printf_float+0x412>
 80187d8:	e65d      	b.n	8018496 <_printf_float+0xb6>
 80187da:	2301      	movs	r3, #1
 80187dc:	465a      	mov	r2, fp
 80187de:	4631      	mov	r1, r6
 80187e0:	4628      	mov	r0, r5
 80187e2:	47b8      	blx	r7
 80187e4:	3001      	adds	r0, #1
 80187e6:	f43f ae56 	beq.w	8018496 <_printf_float+0xb6>
 80187ea:	f108 0801 	add.w	r8, r8, #1
 80187ee:	45d0      	cmp	r8, sl
 80187f0:	dbf3      	blt.n	80187da <_printf_float+0x3fa>
 80187f2:	464b      	mov	r3, r9
 80187f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80187f8:	e6df      	b.n	80185ba <_printf_float+0x1da>
 80187fa:	f04f 0800 	mov.w	r8, #0
 80187fe:	f104 0b1a 	add.w	fp, r4, #26
 8018802:	e7f4      	b.n	80187ee <_printf_float+0x40e>
 8018804:	2301      	movs	r3, #1
 8018806:	4642      	mov	r2, r8
 8018808:	e7e1      	b.n	80187ce <_printf_float+0x3ee>
 801880a:	2301      	movs	r3, #1
 801880c:	464a      	mov	r2, r9
 801880e:	4631      	mov	r1, r6
 8018810:	4628      	mov	r0, r5
 8018812:	47b8      	blx	r7
 8018814:	3001      	adds	r0, #1
 8018816:	f43f ae3e 	beq.w	8018496 <_printf_float+0xb6>
 801881a:	f108 0801 	add.w	r8, r8, #1
 801881e:	68e3      	ldr	r3, [r4, #12]
 8018820:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018822:	1a5b      	subs	r3, r3, r1
 8018824:	4543      	cmp	r3, r8
 8018826:	dcf0      	bgt.n	801880a <_printf_float+0x42a>
 8018828:	e6fc      	b.n	8018624 <_printf_float+0x244>
 801882a:	f04f 0800 	mov.w	r8, #0
 801882e:	f104 0919 	add.w	r9, r4, #25
 8018832:	e7f4      	b.n	801881e <_printf_float+0x43e>

08018834 <malloc>:
 8018834:	4b02      	ldr	r3, [pc, #8]	@ (8018840 <malloc+0xc>)
 8018836:	4601      	mov	r1, r0
 8018838:	6818      	ldr	r0, [r3, #0]
 801883a:	f000 b825 	b.w	8018888 <_malloc_r>
 801883e:	bf00      	nop
 8018840:	200004cc 	.word	0x200004cc

08018844 <sbrk_aligned>:
 8018844:	b570      	push	{r4, r5, r6, lr}
 8018846:	4e0f      	ldr	r6, [pc, #60]	@ (8018884 <sbrk_aligned+0x40>)
 8018848:	460c      	mov	r4, r1
 801884a:	6831      	ldr	r1, [r6, #0]
 801884c:	4605      	mov	r5, r0
 801884e:	b911      	cbnz	r1, 8018856 <sbrk_aligned+0x12>
 8018850:	f001 fd2c 	bl	801a2ac <_sbrk_r>
 8018854:	6030      	str	r0, [r6, #0]
 8018856:	4621      	mov	r1, r4
 8018858:	4628      	mov	r0, r5
 801885a:	f001 fd27 	bl	801a2ac <_sbrk_r>
 801885e:	1c43      	adds	r3, r0, #1
 8018860:	d103      	bne.n	801886a <sbrk_aligned+0x26>
 8018862:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8018866:	4620      	mov	r0, r4
 8018868:	bd70      	pop	{r4, r5, r6, pc}
 801886a:	1cc4      	adds	r4, r0, #3
 801886c:	f024 0403 	bic.w	r4, r4, #3
 8018870:	42a0      	cmp	r0, r4
 8018872:	d0f8      	beq.n	8018866 <sbrk_aligned+0x22>
 8018874:	1a21      	subs	r1, r4, r0
 8018876:	4628      	mov	r0, r5
 8018878:	f001 fd18 	bl	801a2ac <_sbrk_r>
 801887c:	3001      	adds	r0, #1
 801887e:	d1f2      	bne.n	8018866 <sbrk_aligned+0x22>
 8018880:	e7ef      	b.n	8018862 <sbrk_aligned+0x1e>
 8018882:	bf00      	nop
 8018884:	200079f4 	.word	0x200079f4

08018888 <_malloc_r>:
 8018888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801888c:	1ccd      	adds	r5, r1, #3
 801888e:	f025 0503 	bic.w	r5, r5, #3
 8018892:	3508      	adds	r5, #8
 8018894:	2d0c      	cmp	r5, #12
 8018896:	bf38      	it	cc
 8018898:	250c      	movcc	r5, #12
 801889a:	2d00      	cmp	r5, #0
 801889c:	4606      	mov	r6, r0
 801889e:	db01      	blt.n	80188a4 <_malloc_r+0x1c>
 80188a0:	42a9      	cmp	r1, r5
 80188a2:	d904      	bls.n	80188ae <_malloc_r+0x26>
 80188a4:	230c      	movs	r3, #12
 80188a6:	6033      	str	r3, [r6, #0]
 80188a8:	2000      	movs	r0, #0
 80188aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80188ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018984 <_malloc_r+0xfc>
 80188b2:	f000 fc3f 	bl	8019134 <__malloc_lock>
 80188b6:	f8d8 3000 	ldr.w	r3, [r8]
 80188ba:	461c      	mov	r4, r3
 80188bc:	bb44      	cbnz	r4, 8018910 <_malloc_r+0x88>
 80188be:	4629      	mov	r1, r5
 80188c0:	4630      	mov	r0, r6
 80188c2:	f7ff ffbf 	bl	8018844 <sbrk_aligned>
 80188c6:	1c43      	adds	r3, r0, #1
 80188c8:	4604      	mov	r4, r0
 80188ca:	d158      	bne.n	801897e <_malloc_r+0xf6>
 80188cc:	f8d8 4000 	ldr.w	r4, [r8]
 80188d0:	4627      	mov	r7, r4
 80188d2:	2f00      	cmp	r7, #0
 80188d4:	d143      	bne.n	801895e <_malloc_r+0xd6>
 80188d6:	2c00      	cmp	r4, #0
 80188d8:	d04b      	beq.n	8018972 <_malloc_r+0xea>
 80188da:	6823      	ldr	r3, [r4, #0]
 80188dc:	4639      	mov	r1, r7
 80188de:	4630      	mov	r0, r6
 80188e0:	eb04 0903 	add.w	r9, r4, r3
 80188e4:	f001 fce2 	bl	801a2ac <_sbrk_r>
 80188e8:	4581      	cmp	r9, r0
 80188ea:	d142      	bne.n	8018972 <_malloc_r+0xea>
 80188ec:	6821      	ldr	r1, [r4, #0]
 80188ee:	1a6d      	subs	r5, r5, r1
 80188f0:	4629      	mov	r1, r5
 80188f2:	4630      	mov	r0, r6
 80188f4:	f7ff ffa6 	bl	8018844 <sbrk_aligned>
 80188f8:	3001      	adds	r0, #1
 80188fa:	d03a      	beq.n	8018972 <_malloc_r+0xea>
 80188fc:	6823      	ldr	r3, [r4, #0]
 80188fe:	442b      	add	r3, r5
 8018900:	6023      	str	r3, [r4, #0]
 8018902:	f8d8 3000 	ldr.w	r3, [r8]
 8018906:	685a      	ldr	r2, [r3, #4]
 8018908:	bb62      	cbnz	r2, 8018964 <_malloc_r+0xdc>
 801890a:	f8c8 7000 	str.w	r7, [r8]
 801890e:	e00f      	b.n	8018930 <_malloc_r+0xa8>
 8018910:	6822      	ldr	r2, [r4, #0]
 8018912:	1b52      	subs	r2, r2, r5
 8018914:	d420      	bmi.n	8018958 <_malloc_r+0xd0>
 8018916:	2a0b      	cmp	r2, #11
 8018918:	d917      	bls.n	801894a <_malloc_r+0xc2>
 801891a:	1961      	adds	r1, r4, r5
 801891c:	42a3      	cmp	r3, r4
 801891e:	6025      	str	r5, [r4, #0]
 8018920:	bf18      	it	ne
 8018922:	6059      	strne	r1, [r3, #4]
 8018924:	6863      	ldr	r3, [r4, #4]
 8018926:	bf08      	it	eq
 8018928:	f8c8 1000 	streq.w	r1, [r8]
 801892c:	5162      	str	r2, [r4, r5]
 801892e:	604b      	str	r3, [r1, #4]
 8018930:	4630      	mov	r0, r6
 8018932:	f000 fc05 	bl	8019140 <__malloc_unlock>
 8018936:	f104 000b 	add.w	r0, r4, #11
 801893a:	1d23      	adds	r3, r4, #4
 801893c:	f020 0007 	bic.w	r0, r0, #7
 8018940:	1ac2      	subs	r2, r0, r3
 8018942:	bf1c      	itt	ne
 8018944:	1a1b      	subne	r3, r3, r0
 8018946:	50a3      	strne	r3, [r4, r2]
 8018948:	e7af      	b.n	80188aa <_malloc_r+0x22>
 801894a:	6862      	ldr	r2, [r4, #4]
 801894c:	42a3      	cmp	r3, r4
 801894e:	bf0c      	ite	eq
 8018950:	f8c8 2000 	streq.w	r2, [r8]
 8018954:	605a      	strne	r2, [r3, #4]
 8018956:	e7eb      	b.n	8018930 <_malloc_r+0xa8>
 8018958:	4623      	mov	r3, r4
 801895a:	6864      	ldr	r4, [r4, #4]
 801895c:	e7ae      	b.n	80188bc <_malloc_r+0x34>
 801895e:	463c      	mov	r4, r7
 8018960:	687f      	ldr	r7, [r7, #4]
 8018962:	e7b6      	b.n	80188d2 <_malloc_r+0x4a>
 8018964:	461a      	mov	r2, r3
 8018966:	685b      	ldr	r3, [r3, #4]
 8018968:	42a3      	cmp	r3, r4
 801896a:	d1fb      	bne.n	8018964 <_malloc_r+0xdc>
 801896c:	2300      	movs	r3, #0
 801896e:	6053      	str	r3, [r2, #4]
 8018970:	e7de      	b.n	8018930 <_malloc_r+0xa8>
 8018972:	230c      	movs	r3, #12
 8018974:	6033      	str	r3, [r6, #0]
 8018976:	4630      	mov	r0, r6
 8018978:	f000 fbe2 	bl	8019140 <__malloc_unlock>
 801897c:	e794      	b.n	80188a8 <_malloc_r+0x20>
 801897e:	6005      	str	r5, [r0, #0]
 8018980:	e7d6      	b.n	8018930 <_malloc_r+0xa8>
 8018982:	bf00      	nop
 8018984:	200079f8 	.word	0x200079f8

08018988 <_printf_common>:
 8018988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801898c:	4616      	mov	r6, r2
 801898e:	4698      	mov	r8, r3
 8018990:	688a      	ldr	r2, [r1, #8]
 8018992:	690b      	ldr	r3, [r1, #16]
 8018994:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018998:	4293      	cmp	r3, r2
 801899a:	bfb8      	it	lt
 801899c:	4613      	movlt	r3, r2
 801899e:	6033      	str	r3, [r6, #0]
 80189a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80189a4:	4607      	mov	r7, r0
 80189a6:	460c      	mov	r4, r1
 80189a8:	b10a      	cbz	r2, 80189ae <_printf_common+0x26>
 80189aa:	3301      	adds	r3, #1
 80189ac:	6033      	str	r3, [r6, #0]
 80189ae:	6823      	ldr	r3, [r4, #0]
 80189b0:	0699      	lsls	r1, r3, #26
 80189b2:	bf42      	ittt	mi
 80189b4:	6833      	ldrmi	r3, [r6, #0]
 80189b6:	3302      	addmi	r3, #2
 80189b8:	6033      	strmi	r3, [r6, #0]
 80189ba:	6825      	ldr	r5, [r4, #0]
 80189bc:	f015 0506 	ands.w	r5, r5, #6
 80189c0:	d106      	bne.n	80189d0 <_printf_common+0x48>
 80189c2:	f104 0a19 	add.w	sl, r4, #25
 80189c6:	68e3      	ldr	r3, [r4, #12]
 80189c8:	6832      	ldr	r2, [r6, #0]
 80189ca:	1a9b      	subs	r3, r3, r2
 80189cc:	42ab      	cmp	r3, r5
 80189ce:	dc26      	bgt.n	8018a1e <_printf_common+0x96>
 80189d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80189d4:	6822      	ldr	r2, [r4, #0]
 80189d6:	3b00      	subs	r3, #0
 80189d8:	bf18      	it	ne
 80189da:	2301      	movne	r3, #1
 80189dc:	0692      	lsls	r2, r2, #26
 80189de:	d42b      	bmi.n	8018a38 <_printf_common+0xb0>
 80189e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80189e4:	4641      	mov	r1, r8
 80189e6:	4638      	mov	r0, r7
 80189e8:	47c8      	blx	r9
 80189ea:	3001      	adds	r0, #1
 80189ec:	d01e      	beq.n	8018a2c <_printf_common+0xa4>
 80189ee:	6823      	ldr	r3, [r4, #0]
 80189f0:	6922      	ldr	r2, [r4, #16]
 80189f2:	f003 0306 	and.w	r3, r3, #6
 80189f6:	2b04      	cmp	r3, #4
 80189f8:	bf02      	ittt	eq
 80189fa:	68e5      	ldreq	r5, [r4, #12]
 80189fc:	6833      	ldreq	r3, [r6, #0]
 80189fe:	1aed      	subeq	r5, r5, r3
 8018a00:	68a3      	ldr	r3, [r4, #8]
 8018a02:	bf0c      	ite	eq
 8018a04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018a08:	2500      	movne	r5, #0
 8018a0a:	4293      	cmp	r3, r2
 8018a0c:	bfc4      	itt	gt
 8018a0e:	1a9b      	subgt	r3, r3, r2
 8018a10:	18ed      	addgt	r5, r5, r3
 8018a12:	2600      	movs	r6, #0
 8018a14:	341a      	adds	r4, #26
 8018a16:	42b5      	cmp	r5, r6
 8018a18:	d11a      	bne.n	8018a50 <_printf_common+0xc8>
 8018a1a:	2000      	movs	r0, #0
 8018a1c:	e008      	b.n	8018a30 <_printf_common+0xa8>
 8018a1e:	2301      	movs	r3, #1
 8018a20:	4652      	mov	r2, sl
 8018a22:	4641      	mov	r1, r8
 8018a24:	4638      	mov	r0, r7
 8018a26:	47c8      	blx	r9
 8018a28:	3001      	adds	r0, #1
 8018a2a:	d103      	bne.n	8018a34 <_printf_common+0xac>
 8018a2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a34:	3501      	adds	r5, #1
 8018a36:	e7c6      	b.n	80189c6 <_printf_common+0x3e>
 8018a38:	18e1      	adds	r1, r4, r3
 8018a3a:	1c5a      	adds	r2, r3, #1
 8018a3c:	2030      	movs	r0, #48	@ 0x30
 8018a3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018a42:	4422      	add	r2, r4
 8018a44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018a48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018a4c:	3302      	adds	r3, #2
 8018a4e:	e7c7      	b.n	80189e0 <_printf_common+0x58>
 8018a50:	2301      	movs	r3, #1
 8018a52:	4622      	mov	r2, r4
 8018a54:	4641      	mov	r1, r8
 8018a56:	4638      	mov	r0, r7
 8018a58:	47c8      	blx	r9
 8018a5a:	3001      	adds	r0, #1
 8018a5c:	d0e6      	beq.n	8018a2c <_printf_common+0xa4>
 8018a5e:	3601      	adds	r6, #1
 8018a60:	e7d9      	b.n	8018a16 <_printf_common+0x8e>
	...

08018a64 <_printf_i>:
 8018a64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018a68:	7e0f      	ldrb	r7, [r1, #24]
 8018a6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018a6c:	2f78      	cmp	r7, #120	@ 0x78
 8018a6e:	4691      	mov	r9, r2
 8018a70:	4680      	mov	r8, r0
 8018a72:	460c      	mov	r4, r1
 8018a74:	469a      	mov	sl, r3
 8018a76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8018a7a:	d807      	bhi.n	8018a8c <_printf_i+0x28>
 8018a7c:	2f62      	cmp	r7, #98	@ 0x62
 8018a7e:	d80a      	bhi.n	8018a96 <_printf_i+0x32>
 8018a80:	2f00      	cmp	r7, #0
 8018a82:	f000 80d2 	beq.w	8018c2a <_printf_i+0x1c6>
 8018a86:	2f58      	cmp	r7, #88	@ 0x58
 8018a88:	f000 80b9 	beq.w	8018bfe <_printf_i+0x19a>
 8018a8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018a90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018a94:	e03a      	b.n	8018b0c <_printf_i+0xa8>
 8018a96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8018a9a:	2b15      	cmp	r3, #21
 8018a9c:	d8f6      	bhi.n	8018a8c <_printf_i+0x28>
 8018a9e:	a101      	add	r1, pc, #4	@ (adr r1, 8018aa4 <_printf_i+0x40>)
 8018aa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018aa4:	08018afd 	.word	0x08018afd
 8018aa8:	08018b11 	.word	0x08018b11
 8018aac:	08018a8d 	.word	0x08018a8d
 8018ab0:	08018a8d 	.word	0x08018a8d
 8018ab4:	08018a8d 	.word	0x08018a8d
 8018ab8:	08018a8d 	.word	0x08018a8d
 8018abc:	08018b11 	.word	0x08018b11
 8018ac0:	08018a8d 	.word	0x08018a8d
 8018ac4:	08018a8d 	.word	0x08018a8d
 8018ac8:	08018a8d 	.word	0x08018a8d
 8018acc:	08018a8d 	.word	0x08018a8d
 8018ad0:	08018c11 	.word	0x08018c11
 8018ad4:	08018b3b 	.word	0x08018b3b
 8018ad8:	08018bcb 	.word	0x08018bcb
 8018adc:	08018a8d 	.word	0x08018a8d
 8018ae0:	08018a8d 	.word	0x08018a8d
 8018ae4:	08018c33 	.word	0x08018c33
 8018ae8:	08018a8d 	.word	0x08018a8d
 8018aec:	08018b3b 	.word	0x08018b3b
 8018af0:	08018a8d 	.word	0x08018a8d
 8018af4:	08018a8d 	.word	0x08018a8d
 8018af8:	08018bd3 	.word	0x08018bd3
 8018afc:	6833      	ldr	r3, [r6, #0]
 8018afe:	1d1a      	adds	r2, r3, #4
 8018b00:	681b      	ldr	r3, [r3, #0]
 8018b02:	6032      	str	r2, [r6, #0]
 8018b04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018b08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018b0c:	2301      	movs	r3, #1
 8018b0e:	e09d      	b.n	8018c4c <_printf_i+0x1e8>
 8018b10:	6833      	ldr	r3, [r6, #0]
 8018b12:	6820      	ldr	r0, [r4, #0]
 8018b14:	1d19      	adds	r1, r3, #4
 8018b16:	6031      	str	r1, [r6, #0]
 8018b18:	0606      	lsls	r6, r0, #24
 8018b1a:	d501      	bpl.n	8018b20 <_printf_i+0xbc>
 8018b1c:	681d      	ldr	r5, [r3, #0]
 8018b1e:	e003      	b.n	8018b28 <_printf_i+0xc4>
 8018b20:	0645      	lsls	r5, r0, #25
 8018b22:	d5fb      	bpl.n	8018b1c <_printf_i+0xb8>
 8018b24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018b28:	2d00      	cmp	r5, #0
 8018b2a:	da03      	bge.n	8018b34 <_printf_i+0xd0>
 8018b2c:	232d      	movs	r3, #45	@ 0x2d
 8018b2e:	426d      	negs	r5, r5
 8018b30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018b34:	4859      	ldr	r0, [pc, #356]	@ (8018c9c <_printf_i+0x238>)
 8018b36:	230a      	movs	r3, #10
 8018b38:	e011      	b.n	8018b5e <_printf_i+0xfa>
 8018b3a:	6821      	ldr	r1, [r4, #0]
 8018b3c:	6833      	ldr	r3, [r6, #0]
 8018b3e:	0608      	lsls	r0, r1, #24
 8018b40:	f853 5b04 	ldr.w	r5, [r3], #4
 8018b44:	d402      	bmi.n	8018b4c <_printf_i+0xe8>
 8018b46:	0649      	lsls	r1, r1, #25
 8018b48:	bf48      	it	mi
 8018b4a:	b2ad      	uxthmi	r5, r5
 8018b4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8018b4e:	4853      	ldr	r0, [pc, #332]	@ (8018c9c <_printf_i+0x238>)
 8018b50:	6033      	str	r3, [r6, #0]
 8018b52:	bf14      	ite	ne
 8018b54:	230a      	movne	r3, #10
 8018b56:	2308      	moveq	r3, #8
 8018b58:	2100      	movs	r1, #0
 8018b5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8018b5e:	6866      	ldr	r6, [r4, #4]
 8018b60:	60a6      	str	r6, [r4, #8]
 8018b62:	2e00      	cmp	r6, #0
 8018b64:	bfa2      	ittt	ge
 8018b66:	6821      	ldrge	r1, [r4, #0]
 8018b68:	f021 0104 	bicge.w	r1, r1, #4
 8018b6c:	6021      	strge	r1, [r4, #0]
 8018b6e:	b90d      	cbnz	r5, 8018b74 <_printf_i+0x110>
 8018b70:	2e00      	cmp	r6, #0
 8018b72:	d04b      	beq.n	8018c0c <_printf_i+0x1a8>
 8018b74:	4616      	mov	r6, r2
 8018b76:	fbb5 f1f3 	udiv	r1, r5, r3
 8018b7a:	fb03 5711 	mls	r7, r3, r1, r5
 8018b7e:	5dc7      	ldrb	r7, [r0, r7]
 8018b80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018b84:	462f      	mov	r7, r5
 8018b86:	42bb      	cmp	r3, r7
 8018b88:	460d      	mov	r5, r1
 8018b8a:	d9f4      	bls.n	8018b76 <_printf_i+0x112>
 8018b8c:	2b08      	cmp	r3, #8
 8018b8e:	d10b      	bne.n	8018ba8 <_printf_i+0x144>
 8018b90:	6823      	ldr	r3, [r4, #0]
 8018b92:	07df      	lsls	r7, r3, #31
 8018b94:	d508      	bpl.n	8018ba8 <_printf_i+0x144>
 8018b96:	6923      	ldr	r3, [r4, #16]
 8018b98:	6861      	ldr	r1, [r4, #4]
 8018b9a:	4299      	cmp	r1, r3
 8018b9c:	bfde      	ittt	le
 8018b9e:	2330      	movle	r3, #48	@ 0x30
 8018ba0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018ba4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8018ba8:	1b92      	subs	r2, r2, r6
 8018baa:	6122      	str	r2, [r4, #16]
 8018bac:	f8cd a000 	str.w	sl, [sp]
 8018bb0:	464b      	mov	r3, r9
 8018bb2:	aa03      	add	r2, sp, #12
 8018bb4:	4621      	mov	r1, r4
 8018bb6:	4640      	mov	r0, r8
 8018bb8:	f7ff fee6 	bl	8018988 <_printf_common>
 8018bbc:	3001      	adds	r0, #1
 8018bbe:	d14a      	bne.n	8018c56 <_printf_i+0x1f2>
 8018bc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018bc4:	b004      	add	sp, #16
 8018bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018bca:	6823      	ldr	r3, [r4, #0]
 8018bcc:	f043 0320 	orr.w	r3, r3, #32
 8018bd0:	6023      	str	r3, [r4, #0]
 8018bd2:	4833      	ldr	r0, [pc, #204]	@ (8018ca0 <_printf_i+0x23c>)
 8018bd4:	2778      	movs	r7, #120	@ 0x78
 8018bd6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018bda:	6823      	ldr	r3, [r4, #0]
 8018bdc:	6831      	ldr	r1, [r6, #0]
 8018bde:	061f      	lsls	r7, r3, #24
 8018be0:	f851 5b04 	ldr.w	r5, [r1], #4
 8018be4:	d402      	bmi.n	8018bec <_printf_i+0x188>
 8018be6:	065f      	lsls	r7, r3, #25
 8018be8:	bf48      	it	mi
 8018bea:	b2ad      	uxthmi	r5, r5
 8018bec:	6031      	str	r1, [r6, #0]
 8018bee:	07d9      	lsls	r1, r3, #31
 8018bf0:	bf44      	itt	mi
 8018bf2:	f043 0320 	orrmi.w	r3, r3, #32
 8018bf6:	6023      	strmi	r3, [r4, #0]
 8018bf8:	b11d      	cbz	r5, 8018c02 <_printf_i+0x19e>
 8018bfa:	2310      	movs	r3, #16
 8018bfc:	e7ac      	b.n	8018b58 <_printf_i+0xf4>
 8018bfe:	4827      	ldr	r0, [pc, #156]	@ (8018c9c <_printf_i+0x238>)
 8018c00:	e7e9      	b.n	8018bd6 <_printf_i+0x172>
 8018c02:	6823      	ldr	r3, [r4, #0]
 8018c04:	f023 0320 	bic.w	r3, r3, #32
 8018c08:	6023      	str	r3, [r4, #0]
 8018c0a:	e7f6      	b.n	8018bfa <_printf_i+0x196>
 8018c0c:	4616      	mov	r6, r2
 8018c0e:	e7bd      	b.n	8018b8c <_printf_i+0x128>
 8018c10:	6833      	ldr	r3, [r6, #0]
 8018c12:	6825      	ldr	r5, [r4, #0]
 8018c14:	6961      	ldr	r1, [r4, #20]
 8018c16:	1d18      	adds	r0, r3, #4
 8018c18:	6030      	str	r0, [r6, #0]
 8018c1a:	062e      	lsls	r6, r5, #24
 8018c1c:	681b      	ldr	r3, [r3, #0]
 8018c1e:	d501      	bpl.n	8018c24 <_printf_i+0x1c0>
 8018c20:	6019      	str	r1, [r3, #0]
 8018c22:	e002      	b.n	8018c2a <_printf_i+0x1c6>
 8018c24:	0668      	lsls	r0, r5, #25
 8018c26:	d5fb      	bpl.n	8018c20 <_printf_i+0x1bc>
 8018c28:	8019      	strh	r1, [r3, #0]
 8018c2a:	2300      	movs	r3, #0
 8018c2c:	6123      	str	r3, [r4, #16]
 8018c2e:	4616      	mov	r6, r2
 8018c30:	e7bc      	b.n	8018bac <_printf_i+0x148>
 8018c32:	6833      	ldr	r3, [r6, #0]
 8018c34:	1d1a      	adds	r2, r3, #4
 8018c36:	6032      	str	r2, [r6, #0]
 8018c38:	681e      	ldr	r6, [r3, #0]
 8018c3a:	6862      	ldr	r2, [r4, #4]
 8018c3c:	2100      	movs	r1, #0
 8018c3e:	4630      	mov	r0, r6
 8018c40:	f7e9 fcee 	bl	8002620 <memchr>
 8018c44:	b108      	cbz	r0, 8018c4a <_printf_i+0x1e6>
 8018c46:	1b80      	subs	r0, r0, r6
 8018c48:	6060      	str	r0, [r4, #4]
 8018c4a:	6863      	ldr	r3, [r4, #4]
 8018c4c:	6123      	str	r3, [r4, #16]
 8018c4e:	2300      	movs	r3, #0
 8018c50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018c54:	e7aa      	b.n	8018bac <_printf_i+0x148>
 8018c56:	6923      	ldr	r3, [r4, #16]
 8018c58:	4632      	mov	r2, r6
 8018c5a:	4649      	mov	r1, r9
 8018c5c:	4640      	mov	r0, r8
 8018c5e:	47d0      	blx	sl
 8018c60:	3001      	adds	r0, #1
 8018c62:	d0ad      	beq.n	8018bc0 <_printf_i+0x15c>
 8018c64:	6823      	ldr	r3, [r4, #0]
 8018c66:	079b      	lsls	r3, r3, #30
 8018c68:	d413      	bmi.n	8018c92 <_printf_i+0x22e>
 8018c6a:	68e0      	ldr	r0, [r4, #12]
 8018c6c:	9b03      	ldr	r3, [sp, #12]
 8018c6e:	4298      	cmp	r0, r3
 8018c70:	bfb8      	it	lt
 8018c72:	4618      	movlt	r0, r3
 8018c74:	e7a6      	b.n	8018bc4 <_printf_i+0x160>
 8018c76:	2301      	movs	r3, #1
 8018c78:	4632      	mov	r2, r6
 8018c7a:	4649      	mov	r1, r9
 8018c7c:	4640      	mov	r0, r8
 8018c7e:	47d0      	blx	sl
 8018c80:	3001      	adds	r0, #1
 8018c82:	d09d      	beq.n	8018bc0 <_printf_i+0x15c>
 8018c84:	3501      	adds	r5, #1
 8018c86:	68e3      	ldr	r3, [r4, #12]
 8018c88:	9903      	ldr	r1, [sp, #12]
 8018c8a:	1a5b      	subs	r3, r3, r1
 8018c8c:	42ab      	cmp	r3, r5
 8018c8e:	dcf2      	bgt.n	8018c76 <_printf_i+0x212>
 8018c90:	e7eb      	b.n	8018c6a <_printf_i+0x206>
 8018c92:	2500      	movs	r5, #0
 8018c94:	f104 0619 	add.w	r6, r4, #25
 8018c98:	e7f5      	b.n	8018c86 <_printf_i+0x222>
 8018c9a:	bf00      	nop
 8018c9c:	0801eebe 	.word	0x0801eebe
 8018ca0:	0801eecf 	.word	0x0801eecf

08018ca4 <_scanf_float>:
 8018ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ca8:	b087      	sub	sp, #28
 8018caa:	4617      	mov	r7, r2
 8018cac:	9303      	str	r3, [sp, #12]
 8018cae:	688b      	ldr	r3, [r1, #8]
 8018cb0:	1e5a      	subs	r2, r3, #1
 8018cb2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8018cb6:	bf81      	itttt	hi
 8018cb8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8018cbc:	eb03 0b05 	addhi.w	fp, r3, r5
 8018cc0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8018cc4:	608b      	strhi	r3, [r1, #8]
 8018cc6:	680b      	ldr	r3, [r1, #0]
 8018cc8:	460a      	mov	r2, r1
 8018cca:	f04f 0500 	mov.w	r5, #0
 8018cce:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8018cd2:	f842 3b1c 	str.w	r3, [r2], #28
 8018cd6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8018cda:	4680      	mov	r8, r0
 8018cdc:	460c      	mov	r4, r1
 8018cde:	bf98      	it	ls
 8018ce0:	f04f 0b00 	movls.w	fp, #0
 8018ce4:	9201      	str	r2, [sp, #4]
 8018ce6:	4616      	mov	r6, r2
 8018ce8:	46aa      	mov	sl, r5
 8018cea:	46a9      	mov	r9, r5
 8018cec:	9502      	str	r5, [sp, #8]
 8018cee:	68a2      	ldr	r2, [r4, #8]
 8018cf0:	b152      	cbz	r2, 8018d08 <_scanf_float+0x64>
 8018cf2:	683b      	ldr	r3, [r7, #0]
 8018cf4:	781b      	ldrb	r3, [r3, #0]
 8018cf6:	2b4e      	cmp	r3, #78	@ 0x4e
 8018cf8:	d864      	bhi.n	8018dc4 <_scanf_float+0x120>
 8018cfa:	2b40      	cmp	r3, #64	@ 0x40
 8018cfc:	d83c      	bhi.n	8018d78 <_scanf_float+0xd4>
 8018cfe:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8018d02:	b2c8      	uxtb	r0, r1
 8018d04:	280e      	cmp	r0, #14
 8018d06:	d93a      	bls.n	8018d7e <_scanf_float+0xda>
 8018d08:	f1b9 0f00 	cmp.w	r9, #0
 8018d0c:	d003      	beq.n	8018d16 <_scanf_float+0x72>
 8018d0e:	6823      	ldr	r3, [r4, #0]
 8018d10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8018d14:	6023      	str	r3, [r4, #0]
 8018d16:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8018d1a:	f1ba 0f01 	cmp.w	sl, #1
 8018d1e:	f200 8117 	bhi.w	8018f50 <_scanf_float+0x2ac>
 8018d22:	9b01      	ldr	r3, [sp, #4]
 8018d24:	429e      	cmp	r6, r3
 8018d26:	f200 8108 	bhi.w	8018f3a <_scanf_float+0x296>
 8018d2a:	2001      	movs	r0, #1
 8018d2c:	b007      	add	sp, #28
 8018d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d32:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8018d36:	2a0d      	cmp	r2, #13
 8018d38:	d8e6      	bhi.n	8018d08 <_scanf_float+0x64>
 8018d3a:	a101      	add	r1, pc, #4	@ (adr r1, 8018d40 <_scanf_float+0x9c>)
 8018d3c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8018d40:	08018e87 	.word	0x08018e87
 8018d44:	08018d09 	.word	0x08018d09
 8018d48:	08018d09 	.word	0x08018d09
 8018d4c:	08018d09 	.word	0x08018d09
 8018d50:	08018ee7 	.word	0x08018ee7
 8018d54:	08018ebf 	.word	0x08018ebf
 8018d58:	08018d09 	.word	0x08018d09
 8018d5c:	08018d09 	.word	0x08018d09
 8018d60:	08018e95 	.word	0x08018e95
 8018d64:	08018d09 	.word	0x08018d09
 8018d68:	08018d09 	.word	0x08018d09
 8018d6c:	08018d09 	.word	0x08018d09
 8018d70:	08018d09 	.word	0x08018d09
 8018d74:	08018e4d 	.word	0x08018e4d
 8018d78:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8018d7c:	e7db      	b.n	8018d36 <_scanf_float+0x92>
 8018d7e:	290e      	cmp	r1, #14
 8018d80:	d8c2      	bhi.n	8018d08 <_scanf_float+0x64>
 8018d82:	a001      	add	r0, pc, #4	@ (adr r0, 8018d88 <_scanf_float+0xe4>)
 8018d84:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8018d88:	08018e3d 	.word	0x08018e3d
 8018d8c:	08018d09 	.word	0x08018d09
 8018d90:	08018e3d 	.word	0x08018e3d
 8018d94:	08018ed3 	.word	0x08018ed3
 8018d98:	08018d09 	.word	0x08018d09
 8018d9c:	08018de5 	.word	0x08018de5
 8018da0:	08018e23 	.word	0x08018e23
 8018da4:	08018e23 	.word	0x08018e23
 8018da8:	08018e23 	.word	0x08018e23
 8018dac:	08018e23 	.word	0x08018e23
 8018db0:	08018e23 	.word	0x08018e23
 8018db4:	08018e23 	.word	0x08018e23
 8018db8:	08018e23 	.word	0x08018e23
 8018dbc:	08018e23 	.word	0x08018e23
 8018dc0:	08018e23 	.word	0x08018e23
 8018dc4:	2b6e      	cmp	r3, #110	@ 0x6e
 8018dc6:	d809      	bhi.n	8018ddc <_scanf_float+0x138>
 8018dc8:	2b60      	cmp	r3, #96	@ 0x60
 8018dca:	d8b2      	bhi.n	8018d32 <_scanf_float+0x8e>
 8018dcc:	2b54      	cmp	r3, #84	@ 0x54
 8018dce:	d07b      	beq.n	8018ec8 <_scanf_float+0x224>
 8018dd0:	2b59      	cmp	r3, #89	@ 0x59
 8018dd2:	d199      	bne.n	8018d08 <_scanf_float+0x64>
 8018dd4:	2d07      	cmp	r5, #7
 8018dd6:	d197      	bne.n	8018d08 <_scanf_float+0x64>
 8018dd8:	2508      	movs	r5, #8
 8018dda:	e02c      	b.n	8018e36 <_scanf_float+0x192>
 8018ddc:	2b74      	cmp	r3, #116	@ 0x74
 8018dde:	d073      	beq.n	8018ec8 <_scanf_float+0x224>
 8018de0:	2b79      	cmp	r3, #121	@ 0x79
 8018de2:	e7f6      	b.n	8018dd2 <_scanf_float+0x12e>
 8018de4:	6821      	ldr	r1, [r4, #0]
 8018de6:	05c8      	lsls	r0, r1, #23
 8018de8:	d51b      	bpl.n	8018e22 <_scanf_float+0x17e>
 8018dea:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8018dee:	6021      	str	r1, [r4, #0]
 8018df0:	f109 0901 	add.w	r9, r9, #1
 8018df4:	f1bb 0f00 	cmp.w	fp, #0
 8018df8:	d003      	beq.n	8018e02 <_scanf_float+0x15e>
 8018dfa:	3201      	adds	r2, #1
 8018dfc:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8018e00:	60a2      	str	r2, [r4, #8]
 8018e02:	68a3      	ldr	r3, [r4, #8]
 8018e04:	3b01      	subs	r3, #1
 8018e06:	60a3      	str	r3, [r4, #8]
 8018e08:	6923      	ldr	r3, [r4, #16]
 8018e0a:	3301      	adds	r3, #1
 8018e0c:	6123      	str	r3, [r4, #16]
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	3b01      	subs	r3, #1
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	607b      	str	r3, [r7, #4]
 8018e16:	f340 8087 	ble.w	8018f28 <_scanf_float+0x284>
 8018e1a:	683b      	ldr	r3, [r7, #0]
 8018e1c:	3301      	adds	r3, #1
 8018e1e:	603b      	str	r3, [r7, #0]
 8018e20:	e765      	b.n	8018cee <_scanf_float+0x4a>
 8018e22:	eb1a 0105 	adds.w	r1, sl, r5
 8018e26:	f47f af6f 	bne.w	8018d08 <_scanf_float+0x64>
 8018e2a:	6822      	ldr	r2, [r4, #0]
 8018e2c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8018e30:	6022      	str	r2, [r4, #0]
 8018e32:	460d      	mov	r5, r1
 8018e34:	468a      	mov	sl, r1
 8018e36:	f806 3b01 	strb.w	r3, [r6], #1
 8018e3a:	e7e2      	b.n	8018e02 <_scanf_float+0x15e>
 8018e3c:	6822      	ldr	r2, [r4, #0]
 8018e3e:	0610      	lsls	r0, r2, #24
 8018e40:	f57f af62 	bpl.w	8018d08 <_scanf_float+0x64>
 8018e44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8018e48:	6022      	str	r2, [r4, #0]
 8018e4a:	e7f4      	b.n	8018e36 <_scanf_float+0x192>
 8018e4c:	f1ba 0f00 	cmp.w	sl, #0
 8018e50:	d10e      	bne.n	8018e70 <_scanf_float+0x1cc>
 8018e52:	f1b9 0f00 	cmp.w	r9, #0
 8018e56:	d10e      	bne.n	8018e76 <_scanf_float+0x1d2>
 8018e58:	6822      	ldr	r2, [r4, #0]
 8018e5a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8018e5e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8018e62:	d108      	bne.n	8018e76 <_scanf_float+0x1d2>
 8018e64:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8018e68:	6022      	str	r2, [r4, #0]
 8018e6a:	f04f 0a01 	mov.w	sl, #1
 8018e6e:	e7e2      	b.n	8018e36 <_scanf_float+0x192>
 8018e70:	f1ba 0f02 	cmp.w	sl, #2
 8018e74:	d055      	beq.n	8018f22 <_scanf_float+0x27e>
 8018e76:	2d01      	cmp	r5, #1
 8018e78:	d002      	beq.n	8018e80 <_scanf_float+0x1dc>
 8018e7a:	2d04      	cmp	r5, #4
 8018e7c:	f47f af44 	bne.w	8018d08 <_scanf_float+0x64>
 8018e80:	3501      	adds	r5, #1
 8018e82:	b2ed      	uxtb	r5, r5
 8018e84:	e7d7      	b.n	8018e36 <_scanf_float+0x192>
 8018e86:	f1ba 0f01 	cmp.w	sl, #1
 8018e8a:	f47f af3d 	bne.w	8018d08 <_scanf_float+0x64>
 8018e8e:	f04f 0a02 	mov.w	sl, #2
 8018e92:	e7d0      	b.n	8018e36 <_scanf_float+0x192>
 8018e94:	b97d      	cbnz	r5, 8018eb6 <_scanf_float+0x212>
 8018e96:	f1b9 0f00 	cmp.w	r9, #0
 8018e9a:	f47f af38 	bne.w	8018d0e <_scanf_float+0x6a>
 8018e9e:	6822      	ldr	r2, [r4, #0]
 8018ea0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8018ea4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8018ea8:	f040 8108 	bne.w	80190bc <_scanf_float+0x418>
 8018eac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8018eb0:	6022      	str	r2, [r4, #0]
 8018eb2:	2501      	movs	r5, #1
 8018eb4:	e7bf      	b.n	8018e36 <_scanf_float+0x192>
 8018eb6:	2d03      	cmp	r5, #3
 8018eb8:	d0e2      	beq.n	8018e80 <_scanf_float+0x1dc>
 8018eba:	2d05      	cmp	r5, #5
 8018ebc:	e7de      	b.n	8018e7c <_scanf_float+0x1d8>
 8018ebe:	2d02      	cmp	r5, #2
 8018ec0:	f47f af22 	bne.w	8018d08 <_scanf_float+0x64>
 8018ec4:	2503      	movs	r5, #3
 8018ec6:	e7b6      	b.n	8018e36 <_scanf_float+0x192>
 8018ec8:	2d06      	cmp	r5, #6
 8018eca:	f47f af1d 	bne.w	8018d08 <_scanf_float+0x64>
 8018ece:	2507      	movs	r5, #7
 8018ed0:	e7b1      	b.n	8018e36 <_scanf_float+0x192>
 8018ed2:	6822      	ldr	r2, [r4, #0]
 8018ed4:	0591      	lsls	r1, r2, #22
 8018ed6:	f57f af17 	bpl.w	8018d08 <_scanf_float+0x64>
 8018eda:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8018ede:	6022      	str	r2, [r4, #0]
 8018ee0:	f8cd 9008 	str.w	r9, [sp, #8]
 8018ee4:	e7a7      	b.n	8018e36 <_scanf_float+0x192>
 8018ee6:	6822      	ldr	r2, [r4, #0]
 8018ee8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8018eec:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8018ef0:	d006      	beq.n	8018f00 <_scanf_float+0x25c>
 8018ef2:	0550      	lsls	r0, r2, #21
 8018ef4:	f57f af08 	bpl.w	8018d08 <_scanf_float+0x64>
 8018ef8:	f1b9 0f00 	cmp.w	r9, #0
 8018efc:	f000 80de 	beq.w	80190bc <_scanf_float+0x418>
 8018f00:	0591      	lsls	r1, r2, #22
 8018f02:	bf58      	it	pl
 8018f04:	9902      	ldrpl	r1, [sp, #8]
 8018f06:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8018f0a:	bf58      	it	pl
 8018f0c:	eba9 0101 	subpl.w	r1, r9, r1
 8018f10:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8018f14:	bf58      	it	pl
 8018f16:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8018f1a:	6022      	str	r2, [r4, #0]
 8018f1c:	f04f 0900 	mov.w	r9, #0
 8018f20:	e789      	b.n	8018e36 <_scanf_float+0x192>
 8018f22:	f04f 0a03 	mov.w	sl, #3
 8018f26:	e786      	b.n	8018e36 <_scanf_float+0x192>
 8018f28:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8018f2c:	4639      	mov	r1, r7
 8018f2e:	4640      	mov	r0, r8
 8018f30:	4798      	blx	r3
 8018f32:	2800      	cmp	r0, #0
 8018f34:	f43f aedb 	beq.w	8018cee <_scanf_float+0x4a>
 8018f38:	e6e6      	b.n	8018d08 <_scanf_float+0x64>
 8018f3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8018f3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8018f42:	463a      	mov	r2, r7
 8018f44:	4640      	mov	r0, r8
 8018f46:	4798      	blx	r3
 8018f48:	6923      	ldr	r3, [r4, #16]
 8018f4a:	3b01      	subs	r3, #1
 8018f4c:	6123      	str	r3, [r4, #16]
 8018f4e:	e6e8      	b.n	8018d22 <_scanf_float+0x7e>
 8018f50:	1e6b      	subs	r3, r5, #1
 8018f52:	2b06      	cmp	r3, #6
 8018f54:	d824      	bhi.n	8018fa0 <_scanf_float+0x2fc>
 8018f56:	2d02      	cmp	r5, #2
 8018f58:	d836      	bhi.n	8018fc8 <_scanf_float+0x324>
 8018f5a:	9b01      	ldr	r3, [sp, #4]
 8018f5c:	429e      	cmp	r6, r3
 8018f5e:	f67f aee4 	bls.w	8018d2a <_scanf_float+0x86>
 8018f62:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8018f66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8018f6a:	463a      	mov	r2, r7
 8018f6c:	4640      	mov	r0, r8
 8018f6e:	4798      	blx	r3
 8018f70:	6923      	ldr	r3, [r4, #16]
 8018f72:	3b01      	subs	r3, #1
 8018f74:	6123      	str	r3, [r4, #16]
 8018f76:	e7f0      	b.n	8018f5a <_scanf_float+0x2b6>
 8018f78:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8018f7c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8018f80:	463a      	mov	r2, r7
 8018f82:	4640      	mov	r0, r8
 8018f84:	4798      	blx	r3
 8018f86:	6923      	ldr	r3, [r4, #16]
 8018f88:	3b01      	subs	r3, #1
 8018f8a:	6123      	str	r3, [r4, #16]
 8018f8c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8018f90:	fa5f fa8a 	uxtb.w	sl, sl
 8018f94:	f1ba 0f02 	cmp.w	sl, #2
 8018f98:	d1ee      	bne.n	8018f78 <_scanf_float+0x2d4>
 8018f9a:	3d03      	subs	r5, #3
 8018f9c:	b2ed      	uxtb	r5, r5
 8018f9e:	1b76      	subs	r6, r6, r5
 8018fa0:	6823      	ldr	r3, [r4, #0]
 8018fa2:	05da      	lsls	r2, r3, #23
 8018fa4:	d530      	bpl.n	8019008 <_scanf_float+0x364>
 8018fa6:	055b      	lsls	r3, r3, #21
 8018fa8:	d511      	bpl.n	8018fce <_scanf_float+0x32a>
 8018faa:	9b01      	ldr	r3, [sp, #4]
 8018fac:	429e      	cmp	r6, r3
 8018fae:	f67f aebc 	bls.w	8018d2a <_scanf_float+0x86>
 8018fb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8018fb6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8018fba:	463a      	mov	r2, r7
 8018fbc:	4640      	mov	r0, r8
 8018fbe:	4798      	blx	r3
 8018fc0:	6923      	ldr	r3, [r4, #16]
 8018fc2:	3b01      	subs	r3, #1
 8018fc4:	6123      	str	r3, [r4, #16]
 8018fc6:	e7f0      	b.n	8018faa <_scanf_float+0x306>
 8018fc8:	46aa      	mov	sl, r5
 8018fca:	46b3      	mov	fp, r6
 8018fcc:	e7de      	b.n	8018f8c <_scanf_float+0x2e8>
 8018fce:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8018fd2:	6923      	ldr	r3, [r4, #16]
 8018fd4:	2965      	cmp	r1, #101	@ 0x65
 8018fd6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8018fda:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8018fde:	6123      	str	r3, [r4, #16]
 8018fe0:	d00c      	beq.n	8018ffc <_scanf_float+0x358>
 8018fe2:	2945      	cmp	r1, #69	@ 0x45
 8018fe4:	d00a      	beq.n	8018ffc <_scanf_float+0x358>
 8018fe6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8018fea:	463a      	mov	r2, r7
 8018fec:	4640      	mov	r0, r8
 8018fee:	4798      	blx	r3
 8018ff0:	6923      	ldr	r3, [r4, #16]
 8018ff2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8018ff6:	3b01      	subs	r3, #1
 8018ff8:	1eb5      	subs	r5, r6, #2
 8018ffa:	6123      	str	r3, [r4, #16]
 8018ffc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8019000:	463a      	mov	r2, r7
 8019002:	4640      	mov	r0, r8
 8019004:	4798      	blx	r3
 8019006:	462e      	mov	r6, r5
 8019008:	6822      	ldr	r2, [r4, #0]
 801900a:	f012 0210 	ands.w	r2, r2, #16
 801900e:	d001      	beq.n	8019014 <_scanf_float+0x370>
 8019010:	2000      	movs	r0, #0
 8019012:	e68b      	b.n	8018d2c <_scanf_float+0x88>
 8019014:	7032      	strb	r2, [r6, #0]
 8019016:	6823      	ldr	r3, [r4, #0]
 8019018:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801901c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8019020:	d11c      	bne.n	801905c <_scanf_float+0x3b8>
 8019022:	9b02      	ldr	r3, [sp, #8]
 8019024:	454b      	cmp	r3, r9
 8019026:	eba3 0209 	sub.w	r2, r3, r9
 801902a:	d123      	bne.n	8019074 <_scanf_float+0x3d0>
 801902c:	9901      	ldr	r1, [sp, #4]
 801902e:	2200      	movs	r2, #0
 8019030:	4640      	mov	r0, r8
 8019032:	f000 ff51 	bl	8019ed8 <_strtod_r>
 8019036:	9b03      	ldr	r3, [sp, #12]
 8019038:	6821      	ldr	r1, [r4, #0]
 801903a:	681b      	ldr	r3, [r3, #0]
 801903c:	f011 0f02 	tst.w	r1, #2
 8019040:	ec57 6b10 	vmov	r6, r7, d0
 8019044:	f103 0204 	add.w	r2, r3, #4
 8019048:	d01f      	beq.n	801908a <_scanf_float+0x3e6>
 801904a:	9903      	ldr	r1, [sp, #12]
 801904c:	600a      	str	r2, [r1, #0]
 801904e:	681b      	ldr	r3, [r3, #0]
 8019050:	e9c3 6700 	strd	r6, r7, [r3]
 8019054:	68e3      	ldr	r3, [r4, #12]
 8019056:	3301      	adds	r3, #1
 8019058:	60e3      	str	r3, [r4, #12]
 801905a:	e7d9      	b.n	8019010 <_scanf_float+0x36c>
 801905c:	9b04      	ldr	r3, [sp, #16]
 801905e:	2b00      	cmp	r3, #0
 8019060:	d0e4      	beq.n	801902c <_scanf_float+0x388>
 8019062:	9905      	ldr	r1, [sp, #20]
 8019064:	230a      	movs	r3, #10
 8019066:	3101      	adds	r1, #1
 8019068:	4640      	mov	r0, r8
 801906a:	f000 ffb5 	bl	8019fd8 <_strtol_r>
 801906e:	9b04      	ldr	r3, [sp, #16]
 8019070:	9e05      	ldr	r6, [sp, #20]
 8019072:	1ac2      	subs	r2, r0, r3
 8019074:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8019078:	429e      	cmp	r6, r3
 801907a:	bf28      	it	cs
 801907c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8019080:	4910      	ldr	r1, [pc, #64]	@ (80190c4 <_scanf_float+0x420>)
 8019082:	4630      	mov	r0, r6
 8019084:	f000 f862 	bl	801914c <siprintf>
 8019088:	e7d0      	b.n	801902c <_scanf_float+0x388>
 801908a:	f011 0f04 	tst.w	r1, #4
 801908e:	9903      	ldr	r1, [sp, #12]
 8019090:	600a      	str	r2, [r1, #0]
 8019092:	d1dc      	bne.n	801904e <_scanf_float+0x3aa>
 8019094:	681d      	ldr	r5, [r3, #0]
 8019096:	4632      	mov	r2, r6
 8019098:	463b      	mov	r3, r7
 801909a:	4630      	mov	r0, r6
 801909c:	4639      	mov	r1, r7
 801909e:	f7e9 ff77 	bl	8002f90 <__aeabi_dcmpun>
 80190a2:	b128      	cbz	r0, 80190b0 <_scanf_float+0x40c>
 80190a4:	4808      	ldr	r0, [pc, #32]	@ (80190c8 <_scanf_float+0x424>)
 80190a6:	f001 f95b 	bl	801a360 <nanf>
 80190aa:	ed85 0a00 	vstr	s0, [r5]
 80190ae:	e7d1      	b.n	8019054 <_scanf_float+0x3b0>
 80190b0:	4630      	mov	r0, r6
 80190b2:	4639      	mov	r1, r7
 80190b4:	f7e9 ffca 	bl	800304c <__aeabi_d2f>
 80190b8:	6028      	str	r0, [r5, #0]
 80190ba:	e7cb      	b.n	8019054 <_scanf_float+0x3b0>
 80190bc:	f04f 0900 	mov.w	r9, #0
 80190c0:	e629      	b.n	8018d16 <_scanf_float+0x72>
 80190c2:	bf00      	nop
 80190c4:	0801eee0 	.word	0x0801eee0
 80190c8:	0801f0ed 	.word	0x0801f0ed

080190cc <sniprintf>:
 80190cc:	b40c      	push	{r2, r3}
 80190ce:	b530      	push	{r4, r5, lr}
 80190d0:	4b17      	ldr	r3, [pc, #92]	@ (8019130 <sniprintf+0x64>)
 80190d2:	1e0c      	subs	r4, r1, #0
 80190d4:	681d      	ldr	r5, [r3, #0]
 80190d6:	b09d      	sub	sp, #116	@ 0x74
 80190d8:	da08      	bge.n	80190ec <sniprintf+0x20>
 80190da:	238b      	movs	r3, #139	@ 0x8b
 80190dc:	602b      	str	r3, [r5, #0]
 80190de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80190e2:	b01d      	add	sp, #116	@ 0x74
 80190e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80190e8:	b002      	add	sp, #8
 80190ea:	4770      	bx	lr
 80190ec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80190f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80190f4:	bf14      	ite	ne
 80190f6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80190fa:	4623      	moveq	r3, r4
 80190fc:	9304      	str	r3, [sp, #16]
 80190fe:	9307      	str	r3, [sp, #28]
 8019100:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019104:	9002      	str	r0, [sp, #8]
 8019106:	9006      	str	r0, [sp, #24]
 8019108:	f8ad 3016 	strh.w	r3, [sp, #22]
 801910c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801910e:	ab21      	add	r3, sp, #132	@ 0x84
 8019110:	a902      	add	r1, sp, #8
 8019112:	4628      	mov	r0, r5
 8019114:	9301      	str	r3, [sp, #4]
 8019116:	f002 fb71 	bl	801b7fc <_svfiprintf_r>
 801911a:	1c43      	adds	r3, r0, #1
 801911c:	bfbc      	itt	lt
 801911e:	238b      	movlt	r3, #139	@ 0x8b
 8019120:	602b      	strlt	r3, [r5, #0]
 8019122:	2c00      	cmp	r4, #0
 8019124:	d0dd      	beq.n	80190e2 <sniprintf+0x16>
 8019126:	9b02      	ldr	r3, [sp, #8]
 8019128:	2200      	movs	r2, #0
 801912a:	701a      	strb	r2, [r3, #0]
 801912c:	e7d9      	b.n	80190e2 <sniprintf+0x16>
 801912e:	bf00      	nop
 8019130:	200004cc 	.word	0x200004cc

08019134 <__malloc_lock>:
 8019134:	4801      	ldr	r0, [pc, #4]	@ (801913c <__malloc_lock+0x8>)
 8019136:	f001 b8f4 	b.w	801a322 <__retarget_lock_acquire_recursive>
 801913a:	bf00      	nop
 801913c:	20007b3c 	.word	0x20007b3c

08019140 <__malloc_unlock>:
 8019140:	4801      	ldr	r0, [pc, #4]	@ (8019148 <__malloc_unlock+0x8>)
 8019142:	f001 b8ef 	b.w	801a324 <__retarget_lock_release_recursive>
 8019146:	bf00      	nop
 8019148:	20007b3c 	.word	0x20007b3c

0801914c <siprintf>:
 801914c:	b40e      	push	{r1, r2, r3}
 801914e:	b500      	push	{lr}
 8019150:	b09c      	sub	sp, #112	@ 0x70
 8019152:	ab1d      	add	r3, sp, #116	@ 0x74
 8019154:	9002      	str	r0, [sp, #8]
 8019156:	9006      	str	r0, [sp, #24]
 8019158:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801915c:	4809      	ldr	r0, [pc, #36]	@ (8019184 <siprintf+0x38>)
 801915e:	9107      	str	r1, [sp, #28]
 8019160:	9104      	str	r1, [sp, #16]
 8019162:	4909      	ldr	r1, [pc, #36]	@ (8019188 <siprintf+0x3c>)
 8019164:	f853 2b04 	ldr.w	r2, [r3], #4
 8019168:	9105      	str	r1, [sp, #20]
 801916a:	6800      	ldr	r0, [r0, #0]
 801916c:	9301      	str	r3, [sp, #4]
 801916e:	a902      	add	r1, sp, #8
 8019170:	f002 fb44 	bl	801b7fc <_svfiprintf_r>
 8019174:	9b02      	ldr	r3, [sp, #8]
 8019176:	2200      	movs	r2, #0
 8019178:	701a      	strb	r2, [r3, #0]
 801917a:	b01c      	add	sp, #112	@ 0x70
 801917c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019180:	b003      	add	sp, #12
 8019182:	4770      	bx	lr
 8019184:	200004cc 	.word	0x200004cc
 8019188:	ffff0208 	.word	0xffff0208

0801918c <std>:
 801918c:	2300      	movs	r3, #0
 801918e:	b510      	push	{r4, lr}
 8019190:	4604      	mov	r4, r0
 8019192:	e9c0 3300 	strd	r3, r3, [r0]
 8019196:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801919a:	6083      	str	r3, [r0, #8]
 801919c:	8181      	strh	r1, [r0, #12]
 801919e:	6643      	str	r3, [r0, #100]	@ 0x64
 80191a0:	81c2      	strh	r2, [r0, #14]
 80191a2:	6183      	str	r3, [r0, #24]
 80191a4:	4619      	mov	r1, r3
 80191a6:	2208      	movs	r2, #8
 80191a8:	305c      	adds	r0, #92	@ 0x5c
 80191aa:	f001 f81d 	bl	801a1e8 <memset>
 80191ae:	4b0d      	ldr	r3, [pc, #52]	@ (80191e4 <std+0x58>)
 80191b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80191b2:	4b0d      	ldr	r3, [pc, #52]	@ (80191e8 <std+0x5c>)
 80191b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80191b6:	4b0d      	ldr	r3, [pc, #52]	@ (80191ec <std+0x60>)
 80191b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80191ba:	4b0d      	ldr	r3, [pc, #52]	@ (80191f0 <std+0x64>)
 80191bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80191be:	4b0d      	ldr	r3, [pc, #52]	@ (80191f4 <std+0x68>)
 80191c0:	6224      	str	r4, [r4, #32]
 80191c2:	429c      	cmp	r4, r3
 80191c4:	d006      	beq.n	80191d4 <std+0x48>
 80191c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80191ca:	4294      	cmp	r4, r2
 80191cc:	d002      	beq.n	80191d4 <std+0x48>
 80191ce:	33d0      	adds	r3, #208	@ 0xd0
 80191d0:	429c      	cmp	r4, r3
 80191d2:	d105      	bne.n	80191e0 <std+0x54>
 80191d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80191d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80191dc:	f001 b8a0 	b.w	801a320 <__retarget_lock_init_recursive>
 80191e0:	bd10      	pop	{r4, pc}
 80191e2:	bf00      	nop
 80191e4:	0801c759 	.word	0x0801c759
 80191e8:	0801c77b 	.word	0x0801c77b
 80191ec:	0801c7b3 	.word	0x0801c7b3
 80191f0:	0801c7d7 	.word	0x0801c7d7
 80191f4:	200079fc 	.word	0x200079fc

080191f8 <stdio_exit_handler>:
 80191f8:	4a02      	ldr	r2, [pc, #8]	@ (8019204 <stdio_exit_handler+0xc>)
 80191fa:	4903      	ldr	r1, [pc, #12]	@ (8019208 <stdio_exit_handler+0x10>)
 80191fc:	4803      	ldr	r0, [pc, #12]	@ (801920c <stdio_exit_handler+0x14>)
 80191fe:	f000 bef7 	b.w	8019ff0 <_fwalk_sglue>
 8019202:	bf00      	nop
 8019204:	20000354 	.word	0x20000354
 8019208:	0801bda5 	.word	0x0801bda5
 801920c:	200004d0 	.word	0x200004d0

08019210 <cleanup_stdio>:
 8019210:	6841      	ldr	r1, [r0, #4]
 8019212:	4b0c      	ldr	r3, [pc, #48]	@ (8019244 <cleanup_stdio+0x34>)
 8019214:	4299      	cmp	r1, r3
 8019216:	b510      	push	{r4, lr}
 8019218:	4604      	mov	r4, r0
 801921a:	d001      	beq.n	8019220 <cleanup_stdio+0x10>
 801921c:	f002 fdc2 	bl	801bda4 <_fflush_r>
 8019220:	68a1      	ldr	r1, [r4, #8]
 8019222:	4b09      	ldr	r3, [pc, #36]	@ (8019248 <cleanup_stdio+0x38>)
 8019224:	4299      	cmp	r1, r3
 8019226:	d002      	beq.n	801922e <cleanup_stdio+0x1e>
 8019228:	4620      	mov	r0, r4
 801922a:	f002 fdbb 	bl	801bda4 <_fflush_r>
 801922e:	68e1      	ldr	r1, [r4, #12]
 8019230:	4b06      	ldr	r3, [pc, #24]	@ (801924c <cleanup_stdio+0x3c>)
 8019232:	4299      	cmp	r1, r3
 8019234:	d004      	beq.n	8019240 <cleanup_stdio+0x30>
 8019236:	4620      	mov	r0, r4
 8019238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801923c:	f002 bdb2 	b.w	801bda4 <_fflush_r>
 8019240:	bd10      	pop	{r4, pc}
 8019242:	bf00      	nop
 8019244:	200079fc 	.word	0x200079fc
 8019248:	20007a64 	.word	0x20007a64
 801924c:	20007acc 	.word	0x20007acc

08019250 <global_stdio_init.part.0>:
 8019250:	b510      	push	{r4, lr}
 8019252:	4b0b      	ldr	r3, [pc, #44]	@ (8019280 <global_stdio_init.part.0+0x30>)
 8019254:	4c0b      	ldr	r4, [pc, #44]	@ (8019284 <global_stdio_init.part.0+0x34>)
 8019256:	4a0c      	ldr	r2, [pc, #48]	@ (8019288 <global_stdio_init.part.0+0x38>)
 8019258:	601a      	str	r2, [r3, #0]
 801925a:	4620      	mov	r0, r4
 801925c:	2200      	movs	r2, #0
 801925e:	2104      	movs	r1, #4
 8019260:	f7ff ff94 	bl	801918c <std>
 8019264:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8019268:	2201      	movs	r2, #1
 801926a:	2109      	movs	r1, #9
 801926c:	f7ff ff8e 	bl	801918c <std>
 8019270:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8019274:	2202      	movs	r2, #2
 8019276:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801927a:	2112      	movs	r1, #18
 801927c:	f7ff bf86 	b.w	801918c <std>
 8019280:	20007b34 	.word	0x20007b34
 8019284:	200079fc 	.word	0x200079fc
 8019288:	080191f9 	.word	0x080191f9

0801928c <__sfp_lock_acquire>:
 801928c:	4801      	ldr	r0, [pc, #4]	@ (8019294 <__sfp_lock_acquire+0x8>)
 801928e:	f001 b848 	b.w	801a322 <__retarget_lock_acquire_recursive>
 8019292:	bf00      	nop
 8019294:	20007b3d 	.word	0x20007b3d

08019298 <__sfp_lock_release>:
 8019298:	4801      	ldr	r0, [pc, #4]	@ (80192a0 <__sfp_lock_release+0x8>)
 801929a:	f001 b843 	b.w	801a324 <__retarget_lock_release_recursive>
 801929e:	bf00      	nop
 80192a0:	20007b3d 	.word	0x20007b3d

080192a4 <__sinit>:
 80192a4:	b510      	push	{r4, lr}
 80192a6:	4604      	mov	r4, r0
 80192a8:	f7ff fff0 	bl	801928c <__sfp_lock_acquire>
 80192ac:	6a23      	ldr	r3, [r4, #32]
 80192ae:	b11b      	cbz	r3, 80192b8 <__sinit+0x14>
 80192b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80192b4:	f7ff bff0 	b.w	8019298 <__sfp_lock_release>
 80192b8:	4b04      	ldr	r3, [pc, #16]	@ (80192cc <__sinit+0x28>)
 80192ba:	6223      	str	r3, [r4, #32]
 80192bc:	4b04      	ldr	r3, [pc, #16]	@ (80192d0 <__sinit+0x2c>)
 80192be:	681b      	ldr	r3, [r3, #0]
 80192c0:	2b00      	cmp	r3, #0
 80192c2:	d1f5      	bne.n	80192b0 <__sinit+0xc>
 80192c4:	f7ff ffc4 	bl	8019250 <global_stdio_init.part.0>
 80192c8:	e7f2      	b.n	80192b0 <__sinit+0xc>
 80192ca:	bf00      	nop
 80192cc:	08019211 	.word	0x08019211
 80192d0:	20007b34 	.word	0x20007b34

080192d4 <sulp>:
 80192d4:	b570      	push	{r4, r5, r6, lr}
 80192d6:	4604      	mov	r4, r0
 80192d8:	460d      	mov	r5, r1
 80192da:	ec45 4b10 	vmov	d0, r4, r5
 80192de:	4616      	mov	r6, r2
 80192e0:	f003 f8fc 	bl	801c4dc <__ulp>
 80192e4:	ec51 0b10 	vmov	r0, r1, d0
 80192e8:	b17e      	cbz	r6, 801930a <sulp+0x36>
 80192ea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80192ee:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80192f2:	2b00      	cmp	r3, #0
 80192f4:	dd09      	ble.n	801930a <sulp+0x36>
 80192f6:	051b      	lsls	r3, r3, #20
 80192f8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80192fc:	2400      	movs	r4, #0
 80192fe:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8019302:	4622      	mov	r2, r4
 8019304:	462b      	mov	r3, r5
 8019306:	f7e9 fba9 	bl	8002a5c <__aeabi_dmul>
 801930a:	ec41 0b10 	vmov	d0, r0, r1
 801930e:	bd70      	pop	{r4, r5, r6, pc}

08019310 <_strtod_l>:
 8019310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019314:	b09f      	sub	sp, #124	@ 0x7c
 8019316:	460c      	mov	r4, r1
 8019318:	9217      	str	r2, [sp, #92]	@ 0x5c
 801931a:	2200      	movs	r2, #0
 801931c:	921a      	str	r2, [sp, #104]	@ 0x68
 801931e:	9005      	str	r0, [sp, #20]
 8019320:	f04f 0a00 	mov.w	sl, #0
 8019324:	f04f 0b00 	mov.w	fp, #0
 8019328:	460a      	mov	r2, r1
 801932a:	9219      	str	r2, [sp, #100]	@ 0x64
 801932c:	7811      	ldrb	r1, [r2, #0]
 801932e:	292b      	cmp	r1, #43	@ 0x2b
 8019330:	d04a      	beq.n	80193c8 <_strtod_l+0xb8>
 8019332:	d838      	bhi.n	80193a6 <_strtod_l+0x96>
 8019334:	290d      	cmp	r1, #13
 8019336:	d832      	bhi.n	801939e <_strtod_l+0x8e>
 8019338:	2908      	cmp	r1, #8
 801933a:	d832      	bhi.n	80193a2 <_strtod_l+0x92>
 801933c:	2900      	cmp	r1, #0
 801933e:	d03b      	beq.n	80193b8 <_strtod_l+0xa8>
 8019340:	2200      	movs	r2, #0
 8019342:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019344:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8019346:	782a      	ldrb	r2, [r5, #0]
 8019348:	2a30      	cmp	r2, #48	@ 0x30
 801934a:	f040 80b3 	bne.w	80194b4 <_strtod_l+0x1a4>
 801934e:	786a      	ldrb	r2, [r5, #1]
 8019350:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8019354:	2a58      	cmp	r2, #88	@ 0x58
 8019356:	d16e      	bne.n	8019436 <_strtod_l+0x126>
 8019358:	9302      	str	r3, [sp, #8]
 801935a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801935c:	9301      	str	r3, [sp, #4]
 801935e:	ab1a      	add	r3, sp, #104	@ 0x68
 8019360:	9300      	str	r3, [sp, #0]
 8019362:	4a8e      	ldr	r2, [pc, #568]	@ (801959c <_strtod_l+0x28c>)
 8019364:	9805      	ldr	r0, [sp, #20]
 8019366:	ab1b      	add	r3, sp, #108	@ 0x6c
 8019368:	a919      	add	r1, sp, #100	@ 0x64
 801936a:	f001 ff1b 	bl	801b1a4 <__gethex>
 801936e:	f010 060f 	ands.w	r6, r0, #15
 8019372:	4604      	mov	r4, r0
 8019374:	d005      	beq.n	8019382 <_strtod_l+0x72>
 8019376:	2e06      	cmp	r6, #6
 8019378:	d128      	bne.n	80193cc <_strtod_l+0xbc>
 801937a:	3501      	adds	r5, #1
 801937c:	2300      	movs	r3, #0
 801937e:	9519      	str	r5, [sp, #100]	@ 0x64
 8019380:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019382:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8019384:	2b00      	cmp	r3, #0
 8019386:	f040 858e 	bne.w	8019ea6 <_strtod_l+0xb96>
 801938a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801938c:	b1cb      	cbz	r3, 80193c2 <_strtod_l+0xb2>
 801938e:	4652      	mov	r2, sl
 8019390:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8019394:	ec43 2b10 	vmov	d0, r2, r3
 8019398:	b01f      	add	sp, #124	@ 0x7c
 801939a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801939e:	2920      	cmp	r1, #32
 80193a0:	d1ce      	bne.n	8019340 <_strtod_l+0x30>
 80193a2:	3201      	adds	r2, #1
 80193a4:	e7c1      	b.n	801932a <_strtod_l+0x1a>
 80193a6:	292d      	cmp	r1, #45	@ 0x2d
 80193a8:	d1ca      	bne.n	8019340 <_strtod_l+0x30>
 80193aa:	2101      	movs	r1, #1
 80193ac:	910b      	str	r1, [sp, #44]	@ 0x2c
 80193ae:	1c51      	adds	r1, r2, #1
 80193b0:	9119      	str	r1, [sp, #100]	@ 0x64
 80193b2:	7852      	ldrb	r2, [r2, #1]
 80193b4:	2a00      	cmp	r2, #0
 80193b6:	d1c5      	bne.n	8019344 <_strtod_l+0x34>
 80193b8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80193ba:	9419      	str	r4, [sp, #100]	@ 0x64
 80193bc:	2b00      	cmp	r3, #0
 80193be:	f040 8570 	bne.w	8019ea2 <_strtod_l+0xb92>
 80193c2:	4652      	mov	r2, sl
 80193c4:	465b      	mov	r3, fp
 80193c6:	e7e5      	b.n	8019394 <_strtod_l+0x84>
 80193c8:	2100      	movs	r1, #0
 80193ca:	e7ef      	b.n	80193ac <_strtod_l+0x9c>
 80193cc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80193ce:	b13a      	cbz	r2, 80193e0 <_strtod_l+0xd0>
 80193d0:	2135      	movs	r1, #53	@ 0x35
 80193d2:	a81c      	add	r0, sp, #112	@ 0x70
 80193d4:	f003 f97c 	bl	801c6d0 <__copybits>
 80193d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80193da:	9805      	ldr	r0, [sp, #20]
 80193dc:	f002 fd4a 	bl	801be74 <_Bfree>
 80193e0:	3e01      	subs	r6, #1
 80193e2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80193e4:	2e04      	cmp	r6, #4
 80193e6:	d806      	bhi.n	80193f6 <_strtod_l+0xe6>
 80193e8:	e8df f006 	tbb	[pc, r6]
 80193ec:	201d0314 	.word	0x201d0314
 80193f0:	14          	.byte	0x14
 80193f1:	00          	.byte	0x00
 80193f2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80193f6:	05e1      	lsls	r1, r4, #23
 80193f8:	bf48      	it	mi
 80193fa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80193fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019402:	0d1b      	lsrs	r3, r3, #20
 8019404:	051b      	lsls	r3, r3, #20
 8019406:	2b00      	cmp	r3, #0
 8019408:	d1bb      	bne.n	8019382 <_strtod_l+0x72>
 801940a:	f000 ff5f 	bl	801a2cc <__errno>
 801940e:	2322      	movs	r3, #34	@ 0x22
 8019410:	6003      	str	r3, [r0, #0]
 8019412:	e7b6      	b.n	8019382 <_strtod_l+0x72>
 8019414:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8019418:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801941c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8019420:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8019424:	e7e7      	b.n	80193f6 <_strtod_l+0xe6>
 8019426:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80195a4 <_strtod_l+0x294>
 801942a:	e7e4      	b.n	80193f6 <_strtod_l+0xe6>
 801942c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8019430:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8019434:	e7df      	b.n	80193f6 <_strtod_l+0xe6>
 8019436:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019438:	1c5a      	adds	r2, r3, #1
 801943a:	9219      	str	r2, [sp, #100]	@ 0x64
 801943c:	785b      	ldrb	r3, [r3, #1]
 801943e:	2b30      	cmp	r3, #48	@ 0x30
 8019440:	d0f9      	beq.n	8019436 <_strtod_l+0x126>
 8019442:	2b00      	cmp	r3, #0
 8019444:	d09d      	beq.n	8019382 <_strtod_l+0x72>
 8019446:	2301      	movs	r3, #1
 8019448:	9309      	str	r3, [sp, #36]	@ 0x24
 801944a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801944c:	930c      	str	r3, [sp, #48]	@ 0x30
 801944e:	2300      	movs	r3, #0
 8019450:	9308      	str	r3, [sp, #32]
 8019452:	930a      	str	r3, [sp, #40]	@ 0x28
 8019454:	461f      	mov	r7, r3
 8019456:	220a      	movs	r2, #10
 8019458:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801945a:	7805      	ldrb	r5, [r0, #0]
 801945c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8019460:	b2d9      	uxtb	r1, r3
 8019462:	2909      	cmp	r1, #9
 8019464:	d928      	bls.n	80194b8 <_strtod_l+0x1a8>
 8019466:	494e      	ldr	r1, [pc, #312]	@ (80195a0 <_strtod_l+0x290>)
 8019468:	2201      	movs	r2, #1
 801946a:	f000 fe4f 	bl	801a10c <strncmp>
 801946e:	2800      	cmp	r0, #0
 8019470:	d032      	beq.n	80194d8 <_strtod_l+0x1c8>
 8019472:	2000      	movs	r0, #0
 8019474:	462a      	mov	r2, r5
 8019476:	4681      	mov	r9, r0
 8019478:	463d      	mov	r5, r7
 801947a:	4603      	mov	r3, r0
 801947c:	2a65      	cmp	r2, #101	@ 0x65
 801947e:	d001      	beq.n	8019484 <_strtod_l+0x174>
 8019480:	2a45      	cmp	r2, #69	@ 0x45
 8019482:	d114      	bne.n	80194ae <_strtod_l+0x19e>
 8019484:	b91d      	cbnz	r5, 801948e <_strtod_l+0x17e>
 8019486:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019488:	4302      	orrs	r2, r0
 801948a:	d095      	beq.n	80193b8 <_strtod_l+0xa8>
 801948c:	2500      	movs	r5, #0
 801948e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8019490:	1c62      	adds	r2, r4, #1
 8019492:	9219      	str	r2, [sp, #100]	@ 0x64
 8019494:	7862      	ldrb	r2, [r4, #1]
 8019496:	2a2b      	cmp	r2, #43	@ 0x2b
 8019498:	d077      	beq.n	801958a <_strtod_l+0x27a>
 801949a:	2a2d      	cmp	r2, #45	@ 0x2d
 801949c:	d07b      	beq.n	8019596 <_strtod_l+0x286>
 801949e:	f04f 0c00 	mov.w	ip, #0
 80194a2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80194a6:	2909      	cmp	r1, #9
 80194a8:	f240 8082 	bls.w	80195b0 <_strtod_l+0x2a0>
 80194ac:	9419      	str	r4, [sp, #100]	@ 0x64
 80194ae:	f04f 0800 	mov.w	r8, #0
 80194b2:	e0a2      	b.n	80195fa <_strtod_l+0x2ea>
 80194b4:	2300      	movs	r3, #0
 80194b6:	e7c7      	b.n	8019448 <_strtod_l+0x138>
 80194b8:	2f08      	cmp	r7, #8
 80194ba:	bfd5      	itete	le
 80194bc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80194be:	9908      	ldrgt	r1, [sp, #32]
 80194c0:	fb02 3301 	mlale	r3, r2, r1, r3
 80194c4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80194c8:	f100 0001 	add.w	r0, r0, #1
 80194cc:	bfd4      	ite	le
 80194ce:	930a      	strle	r3, [sp, #40]	@ 0x28
 80194d0:	9308      	strgt	r3, [sp, #32]
 80194d2:	3701      	adds	r7, #1
 80194d4:	9019      	str	r0, [sp, #100]	@ 0x64
 80194d6:	e7bf      	b.n	8019458 <_strtod_l+0x148>
 80194d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80194da:	1c5a      	adds	r2, r3, #1
 80194dc:	9219      	str	r2, [sp, #100]	@ 0x64
 80194de:	785a      	ldrb	r2, [r3, #1]
 80194e0:	b37f      	cbz	r7, 8019542 <_strtod_l+0x232>
 80194e2:	4681      	mov	r9, r0
 80194e4:	463d      	mov	r5, r7
 80194e6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80194ea:	2b09      	cmp	r3, #9
 80194ec:	d912      	bls.n	8019514 <_strtod_l+0x204>
 80194ee:	2301      	movs	r3, #1
 80194f0:	e7c4      	b.n	801947c <_strtod_l+0x16c>
 80194f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80194f4:	1c5a      	adds	r2, r3, #1
 80194f6:	9219      	str	r2, [sp, #100]	@ 0x64
 80194f8:	785a      	ldrb	r2, [r3, #1]
 80194fa:	3001      	adds	r0, #1
 80194fc:	2a30      	cmp	r2, #48	@ 0x30
 80194fe:	d0f8      	beq.n	80194f2 <_strtod_l+0x1e2>
 8019500:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8019504:	2b08      	cmp	r3, #8
 8019506:	f200 84d3 	bhi.w	8019eb0 <_strtod_l+0xba0>
 801950a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801950c:	930c      	str	r3, [sp, #48]	@ 0x30
 801950e:	4681      	mov	r9, r0
 8019510:	2000      	movs	r0, #0
 8019512:	4605      	mov	r5, r0
 8019514:	3a30      	subs	r2, #48	@ 0x30
 8019516:	f100 0301 	add.w	r3, r0, #1
 801951a:	d02a      	beq.n	8019572 <_strtod_l+0x262>
 801951c:	4499      	add	r9, r3
 801951e:	eb00 0c05 	add.w	ip, r0, r5
 8019522:	462b      	mov	r3, r5
 8019524:	210a      	movs	r1, #10
 8019526:	4563      	cmp	r3, ip
 8019528:	d10d      	bne.n	8019546 <_strtod_l+0x236>
 801952a:	1c69      	adds	r1, r5, #1
 801952c:	4401      	add	r1, r0
 801952e:	4428      	add	r0, r5
 8019530:	2808      	cmp	r0, #8
 8019532:	dc16      	bgt.n	8019562 <_strtod_l+0x252>
 8019534:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8019536:	230a      	movs	r3, #10
 8019538:	fb03 2300 	mla	r3, r3, r0, r2
 801953c:	930a      	str	r3, [sp, #40]	@ 0x28
 801953e:	2300      	movs	r3, #0
 8019540:	e018      	b.n	8019574 <_strtod_l+0x264>
 8019542:	4638      	mov	r0, r7
 8019544:	e7da      	b.n	80194fc <_strtod_l+0x1ec>
 8019546:	2b08      	cmp	r3, #8
 8019548:	f103 0301 	add.w	r3, r3, #1
 801954c:	dc03      	bgt.n	8019556 <_strtod_l+0x246>
 801954e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8019550:	434e      	muls	r6, r1
 8019552:	960a      	str	r6, [sp, #40]	@ 0x28
 8019554:	e7e7      	b.n	8019526 <_strtod_l+0x216>
 8019556:	2b10      	cmp	r3, #16
 8019558:	bfde      	ittt	le
 801955a:	9e08      	ldrle	r6, [sp, #32]
 801955c:	434e      	mulle	r6, r1
 801955e:	9608      	strle	r6, [sp, #32]
 8019560:	e7e1      	b.n	8019526 <_strtod_l+0x216>
 8019562:	280f      	cmp	r0, #15
 8019564:	dceb      	bgt.n	801953e <_strtod_l+0x22e>
 8019566:	9808      	ldr	r0, [sp, #32]
 8019568:	230a      	movs	r3, #10
 801956a:	fb03 2300 	mla	r3, r3, r0, r2
 801956e:	9308      	str	r3, [sp, #32]
 8019570:	e7e5      	b.n	801953e <_strtod_l+0x22e>
 8019572:	4629      	mov	r1, r5
 8019574:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019576:	1c50      	adds	r0, r2, #1
 8019578:	9019      	str	r0, [sp, #100]	@ 0x64
 801957a:	7852      	ldrb	r2, [r2, #1]
 801957c:	4618      	mov	r0, r3
 801957e:	460d      	mov	r5, r1
 8019580:	e7b1      	b.n	80194e6 <_strtod_l+0x1d6>
 8019582:	f04f 0900 	mov.w	r9, #0
 8019586:	2301      	movs	r3, #1
 8019588:	e77d      	b.n	8019486 <_strtod_l+0x176>
 801958a:	f04f 0c00 	mov.w	ip, #0
 801958e:	1ca2      	adds	r2, r4, #2
 8019590:	9219      	str	r2, [sp, #100]	@ 0x64
 8019592:	78a2      	ldrb	r2, [r4, #2]
 8019594:	e785      	b.n	80194a2 <_strtod_l+0x192>
 8019596:	f04f 0c01 	mov.w	ip, #1
 801959a:	e7f8      	b.n	801958e <_strtod_l+0x27e>
 801959c:	0801eefc 	.word	0x0801eefc
 80195a0:	0801eee5 	.word	0x0801eee5
 80195a4:	7ff00000 	.word	0x7ff00000
 80195a8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80195aa:	1c51      	adds	r1, r2, #1
 80195ac:	9119      	str	r1, [sp, #100]	@ 0x64
 80195ae:	7852      	ldrb	r2, [r2, #1]
 80195b0:	2a30      	cmp	r2, #48	@ 0x30
 80195b2:	d0f9      	beq.n	80195a8 <_strtod_l+0x298>
 80195b4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80195b8:	2908      	cmp	r1, #8
 80195ba:	f63f af78 	bhi.w	80194ae <_strtod_l+0x19e>
 80195be:	3a30      	subs	r2, #48	@ 0x30
 80195c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80195c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80195c4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80195c6:	f04f 080a 	mov.w	r8, #10
 80195ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80195cc:	1c56      	adds	r6, r2, #1
 80195ce:	9619      	str	r6, [sp, #100]	@ 0x64
 80195d0:	7852      	ldrb	r2, [r2, #1]
 80195d2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80195d6:	f1be 0f09 	cmp.w	lr, #9
 80195da:	d939      	bls.n	8019650 <_strtod_l+0x340>
 80195dc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80195de:	1a76      	subs	r6, r6, r1
 80195e0:	2e08      	cmp	r6, #8
 80195e2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80195e6:	dc03      	bgt.n	80195f0 <_strtod_l+0x2e0>
 80195e8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80195ea:	4588      	cmp	r8, r1
 80195ec:	bfa8      	it	ge
 80195ee:	4688      	movge	r8, r1
 80195f0:	f1bc 0f00 	cmp.w	ip, #0
 80195f4:	d001      	beq.n	80195fa <_strtod_l+0x2ea>
 80195f6:	f1c8 0800 	rsb	r8, r8, #0
 80195fa:	2d00      	cmp	r5, #0
 80195fc:	d14e      	bne.n	801969c <_strtod_l+0x38c>
 80195fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019600:	4308      	orrs	r0, r1
 8019602:	f47f aebe 	bne.w	8019382 <_strtod_l+0x72>
 8019606:	2b00      	cmp	r3, #0
 8019608:	f47f aed6 	bne.w	80193b8 <_strtod_l+0xa8>
 801960c:	2a69      	cmp	r2, #105	@ 0x69
 801960e:	d028      	beq.n	8019662 <_strtod_l+0x352>
 8019610:	dc25      	bgt.n	801965e <_strtod_l+0x34e>
 8019612:	2a49      	cmp	r2, #73	@ 0x49
 8019614:	d025      	beq.n	8019662 <_strtod_l+0x352>
 8019616:	2a4e      	cmp	r2, #78	@ 0x4e
 8019618:	f47f aece 	bne.w	80193b8 <_strtod_l+0xa8>
 801961c:	499b      	ldr	r1, [pc, #620]	@ (801988c <_strtod_l+0x57c>)
 801961e:	a819      	add	r0, sp, #100	@ 0x64
 8019620:	f001 ffe2 	bl	801b5e8 <__match>
 8019624:	2800      	cmp	r0, #0
 8019626:	f43f aec7 	beq.w	80193b8 <_strtod_l+0xa8>
 801962a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801962c:	781b      	ldrb	r3, [r3, #0]
 801962e:	2b28      	cmp	r3, #40	@ 0x28
 8019630:	d12e      	bne.n	8019690 <_strtod_l+0x380>
 8019632:	4997      	ldr	r1, [pc, #604]	@ (8019890 <_strtod_l+0x580>)
 8019634:	aa1c      	add	r2, sp, #112	@ 0x70
 8019636:	a819      	add	r0, sp, #100	@ 0x64
 8019638:	f001 ffea 	bl	801b610 <__hexnan>
 801963c:	2805      	cmp	r0, #5
 801963e:	d127      	bne.n	8019690 <_strtod_l+0x380>
 8019640:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019642:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8019646:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801964a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801964e:	e698      	b.n	8019382 <_strtod_l+0x72>
 8019650:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8019652:	fb08 2101 	mla	r1, r8, r1, r2
 8019656:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801965a:	920e      	str	r2, [sp, #56]	@ 0x38
 801965c:	e7b5      	b.n	80195ca <_strtod_l+0x2ba>
 801965e:	2a6e      	cmp	r2, #110	@ 0x6e
 8019660:	e7da      	b.n	8019618 <_strtod_l+0x308>
 8019662:	498c      	ldr	r1, [pc, #560]	@ (8019894 <_strtod_l+0x584>)
 8019664:	a819      	add	r0, sp, #100	@ 0x64
 8019666:	f001 ffbf 	bl	801b5e8 <__match>
 801966a:	2800      	cmp	r0, #0
 801966c:	f43f aea4 	beq.w	80193b8 <_strtod_l+0xa8>
 8019670:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019672:	4989      	ldr	r1, [pc, #548]	@ (8019898 <_strtod_l+0x588>)
 8019674:	3b01      	subs	r3, #1
 8019676:	a819      	add	r0, sp, #100	@ 0x64
 8019678:	9319      	str	r3, [sp, #100]	@ 0x64
 801967a:	f001 ffb5 	bl	801b5e8 <__match>
 801967e:	b910      	cbnz	r0, 8019686 <_strtod_l+0x376>
 8019680:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019682:	3301      	adds	r3, #1
 8019684:	9319      	str	r3, [sp, #100]	@ 0x64
 8019686:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80198a8 <_strtod_l+0x598>
 801968a:	f04f 0a00 	mov.w	sl, #0
 801968e:	e678      	b.n	8019382 <_strtod_l+0x72>
 8019690:	4882      	ldr	r0, [pc, #520]	@ (801989c <_strtod_l+0x58c>)
 8019692:	f000 fe5d 	bl	801a350 <nan>
 8019696:	ec5b ab10 	vmov	sl, fp, d0
 801969a:	e672      	b.n	8019382 <_strtod_l+0x72>
 801969c:	eba8 0309 	sub.w	r3, r8, r9
 80196a0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80196a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80196a4:	2f00      	cmp	r7, #0
 80196a6:	bf08      	it	eq
 80196a8:	462f      	moveq	r7, r5
 80196aa:	2d10      	cmp	r5, #16
 80196ac:	462c      	mov	r4, r5
 80196ae:	bfa8      	it	ge
 80196b0:	2410      	movge	r4, #16
 80196b2:	f7e9 f959 	bl	8002968 <__aeabi_ui2d>
 80196b6:	2d09      	cmp	r5, #9
 80196b8:	4682      	mov	sl, r0
 80196ba:	468b      	mov	fp, r1
 80196bc:	dc13      	bgt.n	80196e6 <_strtod_l+0x3d6>
 80196be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	f43f ae5e 	beq.w	8019382 <_strtod_l+0x72>
 80196c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80196c8:	dd78      	ble.n	80197bc <_strtod_l+0x4ac>
 80196ca:	2b16      	cmp	r3, #22
 80196cc:	dc5f      	bgt.n	801978e <_strtod_l+0x47e>
 80196ce:	4974      	ldr	r1, [pc, #464]	@ (80198a0 <_strtod_l+0x590>)
 80196d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80196d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80196d8:	4652      	mov	r2, sl
 80196da:	465b      	mov	r3, fp
 80196dc:	f7e9 f9be 	bl	8002a5c <__aeabi_dmul>
 80196e0:	4682      	mov	sl, r0
 80196e2:	468b      	mov	fp, r1
 80196e4:	e64d      	b.n	8019382 <_strtod_l+0x72>
 80196e6:	4b6e      	ldr	r3, [pc, #440]	@ (80198a0 <_strtod_l+0x590>)
 80196e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80196ec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80196f0:	f7e9 f9b4 	bl	8002a5c <__aeabi_dmul>
 80196f4:	4682      	mov	sl, r0
 80196f6:	9808      	ldr	r0, [sp, #32]
 80196f8:	468b      	mov	fp, r1
 80196fa:	f7e9 f935 	bl	8002968 <__aeabi_ui2d>
 80196fe:	4602      	mov	r2, r0
 8019700:	460b      	mov	r3, r1
 8019702:	4650      	mov	r0, sl
 8019704:	4659      	mov	r1, fp
 8019706:	f7e8 fff3 	bl	80026f0 <__adddf3>
 801970a:	2d0f      	cmp	r5, #15
 801970c:	4682      	mov	sl, r0
 801970e:	468b      	mov	fp, r1
 8019710:	ddd5      	ble.n	80196be <_strtod_l+0x3ae>
 8019712:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019714:	1b2c      	subs	r4, r5, r4
 8019716:	441c      	add	r4, r3
 8019718:	2c00      	cmp	r4, #0
 801971a:	f340 8096 	ble.w	801984a <_strtod_l+0x53a>
 801971e:	f014 030f 	ands.w	r3, r4, #15
 8019722:	d00a      	beq.n	801973a <_strtod_l+0x42a>
 8019724:	495e      	ldr	r1, [pc, #376]	@ (80198a0 <_strtod_l+0x590>)
 8019726:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801972a:	4652      	mov	r2, sl
 801972c:	465b      	mov	r3, fp
 801972e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019732:	f7e9 f993 	bl	8002a5c <__aeabi_dmul>
 8019736:	4682      	mov	sl, r0
 8019738:	468b      	mov	fp, r1
 801973a:	f034 040f 	bics.w	r4, r4, #15
 801973e:	d073      	beq.n	8019828 <_strtod_l+0x518>
 8019740:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8019744:	dd48      	ble.n	80197d8 <_strtod_l+0x4c8>
 8019746:	2400      	movs	r4, #0
 8019748:	46a0      	mov	r8, r4
 801974a:	940a      	str	r4, [sp, #40]	@ 0x28
 801974c:	46a1      	mov	r9, r4
 801974e:	9a05      	ldr	r2, [sp, #20]
 8019750:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80198a8 <_strtod_l+0x598>
 8019754:	2322      	movs	r3, #34	@ 0x22
 8019756:	6013      	str	r3, [r2, #0]
 8019758:	f04f 0a00 	mov.w	sl, #0
 801975c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801975e:	2b00      	cmp	r3, #0
 8019760:	f43f ae0f 	beq.w	8019382 <_strtod_l+0x72>
 8019764:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019766:	9805      	ldr	r0, [sp, #20]
 8019768:	f002 fb84 	bl	801be74 <_Bfree>
 801976c:	9805      	ldr	r0, [sp, #20]
 801976e:	4649      	mov	r1, r9
 8019770:	f002 fb80 	bl	801be74 <_Bfree>
 8019774:	9805      	ldr	r0, [sp, #20]
 8019776:	4641      	mov	r1, r8
 8019778:	f002 fb7c 	bl	801be74 <_Bfree>
 801977c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801977e:	9805      	ldr	r0, [sp, #20]
 8019780:	f002 fb78 	bl	801be74 <_Bfree>
 8019784:	9805      	ldr	r0, [sp, #20]
 8019786:	4621      	mov	r1, r4
 8019788:	f002 fb74 	bl	801be74 <_Bfree>
 801978c:	e5f9      	b.n	8019382 <_strtod_l+0x72>
 801978e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019790:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8019794:	4293      	cmp	r3, r2
 8019796:	dbbc      	blt.n	8019712 <_strtod_l+0x402>
 8019798:	4c41      	ldr	r4, [pc, #260]	@ (80198a0 <_strtod_l+0x590>)
 801979a:	f1c5 050f 	rsb	r5, r5, #15
 801979e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80197a2:	4652      	mov	r2, sl
 80197a4:	465b      	mov	r3, fp
 80197a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80197aa:	f7e9 f957 	bl	8002a5c <__aeabi_dmul>
 80197ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80197b0:	1b5d      	subs	r5, r3, r5
 80197b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80197b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80197ba:	e78f      	b.n	80196dc <_strtod_l+0x3cc>
 80197bc:	3316      	adds	r3, #22
 80197be:	dba8      	blt.n	8019712 <_strtod_l+0x402>
 80197c0:	4b37      	ldr	r3, [pc, #220]	@ (80198a0 <_strtod_l+0x590>)
 80197c2:	eba9 0808 	sub.w	r8, r9, r8
 80197c6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80197ca:	e9d8 2300 	ldrd	r2, r3, [r8]
 80197ce:	4650      	mov	r0, sl
 80197d0:	4659      	mov	r1, fp
 80197d2:	f7e9 fa6d 	bl	8002cb0 <__aeabi_ddiv>
 80197d6:	e783      	b.n	80196e0 <_strtod_l+0x3d0>
 80197d8:	4b32      	ldr	r3, [pc, #200]	@ (80198a4 <_strtod_l+0x594>)
 80197da:	9308      	str	r3, [sp, #32]
 80197dc:	2300      	movs	r3, #0
 80197de:	1124      	asrs	r4, r4, #4
 80197e0:	4650      	mov	r0, sl
 80197e2:	4659      	mov	r1, fp
 80197e4:	461e      	mov	r6, r3
 80197e6:	2c01      	cmp	r4, #1
 80197e8:	dc21      	bgt.n	801982e <_strtod_l+0x51e>
 80197ea:	b10b      	cbz	r3, 80197f0 <_strtod_l+0x4e0>
 80197ec:	4682      	mov	sl, r0
 80197ee:	468b      	mov	fp, r1
 80197f0:	492c      	ldr	r1, [pc, #176]	@ (80198a4 <_strtod_l+0x594>)
 80197f2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80197f6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80197fa:	4652      	mov	r2, sl
 80197fc:	465b      	mov	r3, fp
 80197fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019802:	f7e9 f92b 	bl	8002a5c <__aeabi_dmul>
 8019806:	4b28      	ldr	r3, [pc, #160]	@ (80198a8 <_strtod_l+0x598>)
 8019808:	460a      	mov	r2, r1
 801980a:	400b      	ands	r3, r1
 801980c:	4927      	ldr	r1, [pc, #156]	@ (80198ac <_strtod_l+0x59c>)
 801980e:	428b      	cmp	r3, r1
 8019810:	4682      	mov	sl, r0
 8019812:	d898      	bhi.n	8019746 <_strtod_l+0x436>
 8019814:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8019818:	428b      	cmp	r3, r1
 801981a:	bf86      	itte	hi
 801981c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80198b0 <_strtod_l+0x5a0>
 8019820:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8019824:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8019828:	2300      	movs	r3, #0
 801982a:	9308      	str	r3, [sp, #32]
 801982c:	e07a      	b.n	8019924 <_strtod_l+0x614>
 801982e:	07e2      	lsls	r2, r4, #31
 8019830:	d505      	bpl.n	801983e <_strtod_l+0x52e>
 8019832:	9b08      	ldr	r3, [sp, #32]
 8019834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019838:	f7e9 f910 	bl	8002a5c <__aeabi_dmul>
 801983c:	2301      	movs	r3, #1
 801983e:	9a08      	ldr	r2, [sp, #32]
 8019840:	3208      	adds	r2, #8
 8019842:	3601      	adds	r6, #1
 8019844:	1064      	asrs	r4, r4, #1
 8019846:	9208      	str	r2, [sp, #32]
 8019848:	e7cd      	b.n	80197e6 <_strtod_l+0x4d6>
 801984a:	d0ed      	beq.n	8019828 <_strtod_l+0x518>
 801984c:	4264      	negs	r4, r4
 801984e:	f014 020f 	ands.w	r2, r4, #15
 8019852:	d00a      	beq.n	801986a <_strtod_l+0x55a>
 8019854:	4b12      	ldr	r3, [pc, #72]	@ (80198a0 <_strtod_l+0x590>)
 8019856:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801985a:	4650      	mov	r0, sl
 801985c:	4659      	mov	r1, fp
 801985e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019862:	f7e9 fa25 	bl	8002cb0 <__aeabi_ddiv>
 8019866:	4682      	mov	sl, r0
 8019868:	468b      	mov	fp, r1
 801986a:	1124      	asrs	r4, r4, #4
 801986c:	d0dc      	beq.n	8019828 <_strtod_l+0x518>
 801986e:	2c1f      	cmp	r4, #31
 8019870:	dd20      	ble.n	80198b4 <_strtod_l+0x5a4>
 8019872:	2400      	movs	r4, #0
 8019874:	46a0      	mov	r8, r4
 8019876:	940a      	str	r4, [sp, #40]	@ 0x28
 8019878:	46a1      	mov	r9, r4
 801987a:	9a05      	ldr	r2, [sp, #20]
 801987c:	2322      	movs	r3, #34	@ 0x22
 801987e:	f04f 0a00 	mov.w	sl, #0
 8019882:	f04f 0b00 	mov.w	fp, #0
 8019886:	6013      	str	r3, [r2, #0]
 8019888:	e768      	b.n	801975c <_strtod_l+0x44c>
 801988a:	bf00      	nop
 801988c:	0801eeb9 	.word	0x0801eeb9
 8019890:	0801eee8 	.word	0x0801eee8
 8019894:	0801eeb1 	.word	0x0801eeb1
 8019898:	0801f0f1 	.word	0x0801f0f1
 801989c:	0801f0ed 	.word	0x0801f0ed
 80198a0:	0801f268 	.word	0x0801f268
 80198a4:	0801f240 	.word	0x0801f240
 80198a8:	7ff00000 	.word	0x7ff00000
 80198ac:	7ca00000 	.word	0x7ca00000
 80198b0:	7fefffff 	.word	0x7fefffff
 80198b4:	f014 0310 	ands.w	r3, r4, #16
 80198b8:	bf18      	it	ne
 80198ba:	236a      	movne	r3, #106	@ 0x6a
 80198bc:	4ea9      	ldr	r6, [pc, #676]	@ (8019b64 <_strtod_l+0x854>)
 80198be:	9308      	str	r3, [sp, #32]
 80198c0:	4650      	mov	r0, sl
 80198c2:	4659      	mov	r1, fp
 80198c4:	2300      	movs	r3, #0
 80198c6:	07e2      	lsls	r2, r4, #31
 80198c8:	d504      	bpl.n	80198d4 <_strtod_l+0x5c4>
 80198ca:	e9d6 2300 	ldrd	r2, r3, [r6]
 80198ce:	f7e9 f8c5 	bl	8002a5c <__aeabi_dmul>
 80198d2:	2301      	movs	r3, #1
 80198d4:	1064      	asrs	r4, r4, #1
 80198d6:	f106 0608 	add.w	r6, r6, #8
 80198da:	d1f4      	bne.n	80198c6 <_strtod_l+0x5b6>
 80198dc:	b10b      	cbz	r3, 80198e2 <_strtod_l+0x5d2>
 80198de:	4682      	mov	sl, r0
 80198e0:	468b      	mov	fp, r1
 80198e2:	9b08      	ldr	r3, [sp, #32]
 80198e4:	b1b3      	cbz	r3, 8019914 <_strtod_l+0x604>
 80198e6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80198ea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80198ee:	2b00      	cmp	r3, #0
 80198f0:	4659      	mov	r1, fp
 80198f2:	dd0f      	ble.n	8019914 <_strtod_l+0x604>
 80198f4:	2b1f      	cmp	r3, #31
 80198f6:	dd55      	ble.n	80199a4 <_strtod_l+0x694>
 80198f8:	2b34      	cmp	r3, #52	@ 0x34
 80198fa:	bfde      	ittt	le
 80198fc:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8019900:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8019904:	4093      	lslle	r3, r2
 8019906:	f04f 0a00 	mov.w	sl, #0
 801990a:	bfcc      	ite	gt
 801990c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8019910:	ea03 0b01 	andle.w	fp, r3, r1
 8019914:	2200      	movs	r2, #0
 8019916:	2300      	movs	r3, #0
 8019918:	4650      	mov	r0, sl
 801991a:	4659      	mov	r1, fp
 801991c:	f7e9 fb06 	bl	8002f2c <__aeabi_dcmpeq>
 8019920:	2800      	cmp	r0, #0
 8019922:	d1a6      	bne.n	8019872 <_strtod_l+0x562>
 8019924:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019926:	9300      	str	r3, [sp, #0]
 8019928:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801992a:	9805      	ldr	r0, [sp, #20]
 801992c:	462b      	mov	r3, r5
 801992e:	463a      	mov	r2, r7
 8019930:	f002 fb08 	bl	801bf44 <__s2b>
 8019934:	900a      	str	r0, [sp, #40]	@ 0x28
 8019936:	2800      	cmp	r0, #0
 8019938:	f43f af05 	beq.w	8019746 <_strtod_l+0x436>
 801993c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801993e:	2a00      	cmp	r2, #0
 8019940:	eba9 0308 	sub.w	r3, r9, r8
 8019944:	bfa8      	it	ge
 8019946:	2300      	movge	r3, #0
 8019948:	9312      	str	r3, [sp, #72]	@ 0x48
 801994a:	2400      	movs	r4, #0
 801994c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8019950:	9316      	str	r3, [sp, #88]	@ 0x58
 8019952:	46a0      	mov	r8, r4
 8019954:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019956:	9805      	ldr	r0, [sp, #20]
 8019958:	6859      	ldr	r1, [r3, #4]
 801995a:	f002 fa4b 	bl	801bdf4 <_Balloc>
 801995e:	4681      	mov	r9, r0
 8019960:	2800      	cmp	r0, #0
 8019962:	f43f aef4 	beq.w	801974e <_strtod_l+0x43e>
 8019966:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019968:	691a      	ldr	r2, [r3, #16]
 801996a:	3202      	adds	r2, #2
 801996c:	f103 010c 	add.w	r1, r3, #12
 8019970:	0092      	lsls	r2, r2, #2
 8019972:	300c      	adds	r0, #12
 8019974:	f000 fcda 	bl	801a32c <memcpy>
 8019978:	ec4b ab10 	vmov	d0, sl, fp
 801997c:	9805      	ldr	r0, [sp, #20]
 801997e:	aa1c      	add	r2, sp, #112	@ 0x70
 8019980:	a91b      	add	r1, sp, #108	@ 0x6c
 8019982:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8019986:	f002 fe19 	bl	801c5bc <__d2b>
 801998a:	901a      	str	r0, [sp, #104]	@ 0x68
 801998c:	2800      	cmp	r0, #0
 801998e:	f43f aede 	beq.w	801974e <_strtod_l+0x43e>
 8019992:	9805      	ldr	r0, [sp, #20]
 8019994:	2101      	movs	r1, #1
 8019996:	f002 fb6b 	bl	801c070 <__i2b>
 801999a:	4680      	mov	r8, r0
 801999c:	b948      	cbnz	r0, 80199b2 <_strtod_l+0x6a2>
 801999e:	f04f 0800 	mov.w	r8, #0
 80199a2:	e6d4      	b.n	801974e <_strtod_l+0x43e>
 80199a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80199a8:	fa02 f303 	lsl.w	r3, r2, r3
 80199ac:	ea03 0a0a 	and.w	sl, r3, sl
 80199b0:	e7b0      	b.n	8019914 <_strtod_l+0x604>
 80199b2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80199b4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80199b6:	2d00      	cmp	r5, #0
 80199b8:	bfab      	itete	ge
 80199ba:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80199bc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80199be:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80199c0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80199c2:	bfac      	ite	ge
 80199c4:	18ef      	addge	r7, r5, r3
 80199c6:	1b5e      	sublt	r6, r3, r5
 80199c8:	9b08      	ldr	r3, [sp, #32]
 80199ca:	1aed      	subs	r5, r5, r3
 80199cc:	4415      	add	r5, r2
 80199ce:	4b66      	ldr	r3, [pc, #408]	@ (8019b68 <_strtod_l+0x858>)
 80199d0:	3d01      	subs	r5, #1
 80199d2:	429d      	cmp	r5, r3
 80199d4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80199d8:	da50      	bge.n	8019a7c <_strtod_l+0x76c>
 80199da:	1b5b      	subs	r3, r3, r5
 80199dc:	2b1f      	cmp	r3, #31
 80199de:	eba2 0203 	sub.w	r2, r2, r3
 80199e2:	f04f 0101 	mov.w	r1, #1
 80199e6:	dc3d      	bgt.n	8019a64 <_strtod_l+0x754>
 80199e8:	fa01 f303 	lsl.w	r3, r1, r3
 80199ec:	9313      	str	r3, [sp, #76]	@ 0x4c
 80199ee:	2300      	movs	r3, #0
 80199f0:	9310      	str	r3, [sp, #64]	@ 0x40
 80199f2:	18bd      	adds	r5, r7, r2
 80199f4:	9b08      	ldr	r3, [sp, #32]
 80199f6:	42af      	cmp	r7, r5
 80199f8:	4416      	add	r6, r2
 80199fa:	441e      	add	r6, r3
 80199fc:	463b      	mov	r3, r7
 80199fe:	bfa8      	it	ge
 8019a00:	462b      	movge	r3, r5
 8019a02:	42b3      	cmp	r3, r6
 8019a04:	bfa8      	it	ge
 8019a06:	4633      	movge	r3, r6
 8019a08:	2b00      	cmp	r3, #0
 8019a0a:	bfc2      	ittt	gt
 8019a0c:	1aed      	subgt	r5, r5, r3
 8019a0e:	1af6      	subgt	r6, r6, r3
 8019a10:	1aff      	subgt	r7, r7, r3
 8019a12:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8019a14:	2b00      	cmp	r3, #0
 8019a16:	dd16      	ble.n	8019a46 <_strtod_l+0x736>
 8019a18:	4641      	mov	r1, r8
 8019a1a:	9805      	ldr	r0, [sp, #20]
 8019a1c:	461a      	mov	r2, r3
 8019a1e:	f002 fbe7 	bl	801c1f0 <__pow5mult>
 8019a22:	4680      	mov	r8, r0
 8019a24:	2800      	cmp	r0, #0
 8019a26:	d0ba      	beq.n	801999e <_strtod_l+0x68e>
 8019a28:	4601      	mov	r1, r0
 8019a2a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8019a2c:	9805      	ldr	r0, [sp, #20]
 8019a2e:	f002 fb35 	bl	801c09c <__multiply>
 8019a32:	900e      	str	r0, [sp, #56]	@ 0x38
 8019a34:	2800      	cmp	r0, #0
 8019a36:	f43f ae8a 	beq.w	801974e <_strtod_l+0x43e>
 8019a3a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019a3c:	9805      	ldr	r0, [sp, #20]
 8019a3e:	f002 fa19 	bl	801be74 <_Bfree>
 8019a42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019a44:	931a      	str	r3, [sp, #104]	@ 0x68
 8019a46:	2d00      	cmp	r5, #0
 8019a48:	dc1d      	bgt.n	8019a86 <_strtod_l+0x776>
 8019a4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019a4c:	2b00      	cmp	r3, #0
 8019a4e:	dd23      	ble.n	8019a98 <_strtod_l+0x788>
 8019a50:	4649      	mov	r1, r9
 8019a52:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8019a54:	9805      	ldr	r0, [sp, #20]
 8019a56:	f002 fbcb 	bl	801c1f0 <__pow5mult>
 8019a5a:	4681      	mov	r9, r0
 8019a5c:	b9e0      	cbnz	r0, 8019a98 <_strtod_l+0x788>
 8019a5e:	f04f 0900 	mov.w	r9, #0
 8019a62:	e674      	b.n	801974e <_strtod_l+0x43e>
 8019a64:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8019a68:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8019a6c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8019a70:	35e2      	adds	r5, #226	@ 0xe2
 8019a72:	fa01 f305 	lsl.w	r3, r1, r5
 8019a76:	9310      	str	r3, [sp, #64]	@ 0x40
 8019a78:	9113      	str	r1, [sp, #76]	@ 0x4c
 8019a7a:	e7ba      	b.n	80199f2 <_strtod_l+0x6e2>
 8019a7c:	2300      	movs	r3, #0
 8019a7e:	9310      	str	r3, [sp, #64]	@ 0x40
 8019a80:	2301      	movs	r3, #1
 8019a82:	9313      	str	r3, [sp, #76]	@ 0x4c
 8019a84:	e7b5      	b.n	80199f2 <_strtod_l+0x6e2>
 8019a86:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019a88:	9805      	ldr	r0, [sp, #20]
 8019a8a:	462a      	mov	r2, r5
 8019a8c:	f002 fc0a 	bl	801c2a4 <__lshift>
 8019a90:	901a      	str	r0, [sp, #104]	@ 0x68
 8019a92:	2800      	cmp	r0, #0
 8019a94:	d1d9      	bne.n	8019a4a <_strtod_l+0x73a>
 8019a96:	e65a      	b.n	801974e <_strtod_l+0x43e>
 8019a98:	2e00      	cmp	r6, #0
 8019a9a:	dd07      	ble.n	8019aac <_strtod_l+0x79c>
 8019a9c:	4649      	mov	r1, r9
 8019a9e:	9805      	ldr	r0, [sp, #20]
 8019aa0:	4632      	mov	r2, r6
 8019aa2:	f002 fbff 	bl	801c2a4 <__lshift>
 8019aa6:	4681      	mov	r9, r0
 8019aa8:	2800      	cmp	r0, #0
 8019aaa:	d0d8      	beq.n	8019a5e <_strtod_l+0x74e>
 8019aac:	2f00      	cmp	r7, #0
 8019aae:	dd08      	ble.n	8019ac2 <_strtod_l+0x7b2>
 8019ab0:	4641      	mov	r1, r8
 8019ab2:	9805      	ldr	r0, [sp, #20]
 8019ab4:	463a      	mov	r2, r7
 8019ab6:	f002 fbf5 	bl	801c2a4 <__lshift>
 8019aba:	4680      	mov	r8, r0
 8019abc:	2800      	cmp	r0, #0
 8019abe:	f43f ae46 	beq.w	801974e <_strtod_l+0x43e>
 8019ac2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019ac4:	9805      	ldr	r0, [sp, #20]
 8019ac6:	464a      	mov	r2, r9
 8019ac8:	f002 fc74 	bl	801c3b4 <__mdiff>
 8019acc:	4604      	mov	r4, r0
 8019ace:	2800      	cmp	r0, #0
 8019ad0:	f43f ae3d 	beq.w	801974e <_strtod_l+0x43e>
 8019ad4:	68c3      	ldr	r3, [r0, #12]
 8019ad6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8019ad8:	2300      	movs	r3, #0
 8019ada:	60c3      	str	r3, [r0, #12]
 8019adc:	4641      	mov	r1, r8
 8019ade:	f002 fc4d 	bl	801c37c <__mcmp>
 8019ae2:	2800      	cmp	r0, #0
 8019ae4:	da46      	bge.n	8019b74 <_strtod_l+0x864>
 8019ae6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019ae8:	ea53 030a 	orrs.w	r3, r3, sl
 8019aec:	d16c      	bne.n	8019bc8 <_strtod_l+0x8b8>
 8019aee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019af2:	2b00      	cmp	r3, #0
 8019af4:	d168      	bne.n	8019bc8 <_strtod_l+0x8b8>
 8019af6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019afa:	0d1b      	lsrs	r3, r3, #20
 8019afc:	051b      	lsls	r3, r3, #20
 8019afe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8019b02:	d961      	bls.n	8019bc8 <_strtod_l+0x8b8>
 8019b04:	6963      	ldr	r3, [r4, #20]
 8019b06:	b913      	cbnz	r3, 8019b0e <_strtod_l+0x7fe>
 8019b08:	6923      	ldr	r3, [r4, #16]
 8019b0a:	2b01      	cmp	r3, #1
 8019b0c:	dd5c      	ble.n	8019bc8 <_strtod_l+0x8b8>
 8019b0e:	4621      	mov	r1, r4
 8019b10:	2201      	movs	r2, #1
 8019b12:	9805      	ldr	r0, [sp, #20]
 8019b14:	f002 fbc6 	bl	801c2a4 <__lshift>
 8019b18:	4641      	mov	r1, r8
 8019b1a:	4604      	mov	r4, r0
 8019b1c:	f002 fc2e 	bl	801c37c <__mcmp>
 8019b20:	2800      	cmp	r0, #0
 8019b22:	dd51      	ble.n	8019bc8 <_strtod_l+0x8b8>
 8019b24:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019b28:	9a08      	ldr	r2, [sp, #32]
 8019b2a:	0d1b      	lsrs	r3, r3, #20
 8019b2c:	051b      	lsls	r3, r3, #20
 8019b2e:	2a00      	cmp	r2, #0
 8019b30:	d06b      	beq.n	8019c0a <_strtod_l+0x8fa>
 8019b32:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8019b36:	d868      	bhi.n	8019c0a <_strtod_l+0x8fa>
 8019b38:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8019b3c:	f67f ae9d 	bls.w	801987a <_strtod_l+0x56a>
 8019b40:	4b0a      	ldr	r3, [pc, #40]	@ (8019b6c <_strtod_l+0x85c>)
 8019b42:	4650      	mov	r0, sl
 8019b44:	4659      	mov	r1, fp
 8019b46:	2200      	movs	r2, #0
 8019b48:	f7e8 ff88 	bl	8002a5c <__aeabi_dmul>
 8019b4c:	4b08      	ldr	r3, [pc, #32]	@ (8019b70 <_strtod_l+0x860>)
 8019b4e:	400b      	ands	r3, r1
 8019b50:	4682      	mov	sl, r0
 8019b52:	468b      	mov	fp, r1
 8019b54:	2b00      	cmp	r3, #0
 8019b56:	f47f ae05 	bne.w	8019764 <_strtod_l+0x454>
 8019b5a:	9a05      	ldr	r2, [sp, #20]
 8019b5c:	2322      	movs	r3, #34	@ 0x22
 8019b5e:	6013      	str	r3, [r2, #0]
 8019b60:	e600      	b.n	8019764 <_strtod_l+0x454>
 8019b62:	bf00      	nop
 8019b64:	0801ef10 	.word	0x0801ef10
 8019b68:	fffffc02 	.word	0xfffffc02
 8019b6c:	39500000 	.word	0x39500000
 8019b70:	7ff00000 	.word	0x7ff00000
 8019b74:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8019b78:	d165      	bne.n	8019c46 <_strtod_l+0x936>
 8019b7a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8019b7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019b80:	b35a      	cbz	r2, 8019bda <_strtod_l+0x8ca>
 8019b82:	4a9f      	ldr	r2, [pc, #636]	@ (8019e00 <_strtod_l+0xaf0>)
 8019b84:	4293      	cmp	r3, r2
 8019b86:	d12b      	bne.n	8019be0 <_strtod_l+0x8d0>
 8019b88:	9b08      	ldr	r3, [sp, #32]
 8019b8a:	4651      	mov	r1, sl
 8019b8c:	b303      	cbz	r3, 8019bd0 <_strtod_l+0x8c0>
 8019b8e:	4b9d      	ldr	r3, [pc, #628]	@ (8019e04 <_strtod_l+0xaf4>)
 8019b90:	465a      	mov	r2, fp
 8019b92:	4013      	ands	r3, r2
 8019b94:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8019b98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019b9c:	d81b      	bhi.n	8019bd6 <_strtod_l+0x8c6>
 8019b9e:	0d1b      	lsrs	r3, r3, #20
 8019ba0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8019ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8019ba8:	4299      	cmp	r1, r3
 8019baa:	d119      	bne.n	8019be0 <_strtod_l+0x8d0>
 8019bac:	4b96      	ldr	r3, [pc, #600]	@ (8019e08 <_strtod_l+0xaf8>)
 8019bae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019bb0:	429a      	cmp	r2, r3
 8019bb2:	d102      	bne.n	8019bba <_strtod_l+0x8aa>
 8019bb4:	3101      	adds	r1, #1
 8019bb6:	f43f adca 	beq.w	801974e <_strtod_l+0x43e>
 8019bba:	4b92      	ldr	r3, [pc, #584]	@ (8019e04 <_strtod_l+0xaf4>)
 8019bbc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019bbe:	401a      	ands	r2, r3
 8019bc0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8019bc4:	f04f 0a00 	mov.w	sl, #0
 8019bc8:	9b08      	ldr	r3, [sp, #32]
 8019bca:	2b00      	cmp	r3, #0
 8019bcc:	d1b8      	bne.n	8019b40 <_strtod_l+0x830>
 8019bce:	e5c9      	b.n	8019764 <_strtod_l+0x454>
 8019bd0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019bd4:	e7e8      	b.n	8019ba8 <_strtod_l+0x898>
 8019bd6:	4613      	mov	r3, r2
 8019bd8:	e7e6      	b.n	8019ba8 <_strtod_l+0x898>
 8019bda:	ea53 030a 	orrs.w	r3, r3, sl
 8019bde:	d0a1      	beq.n	8019b24 <_strtod_l+0x814>
 8019be0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019be2:	b1db      	cbz	r3, 8019c1c <_strtod_l+0x90c>
 8019be4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019be6:	4213      	tst	r3, r2
 8019be8:	d0ee      	beq.n	8019bc8 <_strtod_l+0x8b8>
 8019bea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019bec:	9a08      	ldr	r2, [sp, #32]
 8019bee:	4650      	mov	r0, sl
 8019bf0:	4659      	mov	r1, fp
 8019bf2:	b1bb      	cbz	r3, 8019c24 <_strtod_l+0x914>
 8019bf4:	f7ff fb6e 	bl	80192d4 <sulp>
 8019bf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8019bfc:	ec53 2b10 	vmov	r2, r3, d0
 8019c00:	f7e8 fd76 	bl	80026f0 <__adddf3>
 8019c04:	4682      	mov	sl, r0
 8019c06:	468b      	mov	fp, r1
 8019c08:	e7de      	b.n	8019bc8 <_strtod_l+0x8b8>
 8019c0a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8019c0e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8019c12:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8019c16:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8019c1a:	e7d5      	b.n	8019bc8 <_strtod_l+0x8b8>
 8019c1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8019c1e:	ea13 0f0a 	tst.w	r3, sl
 8019c22:	e7e1      	b.n	8019be8 <_strtod_l+0x8d8>
 8019c24:	f7ff fb56 	bl	80192d4 <sulp>
 8019c28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8019c2c:	ec53 2b10 	vmov	r2, r3, d0
 8019c30:	f7e8 fd5c 	bl	80026ec <__aeabi_dsub>
 8019c34:	2200      	movs	r2, #0
 8019c36:	2300      	movs	r3, #0
 8019c38:	4682      	mov	sl, r0
 8019c3a:	468b      	mov	fp, r1
 8019c3c:	f7e9 f976 	bl	8002f2c <__aeabi_dcmpeq>
 8019c40:	2800      	cmp	r0, #0
 8019c42:	d0c1      	beq.n	8019bc8 <_strtod_l+0x8b8>
 8019c44:	e619      	b.n	801987a <_strtod_l+0x56a>
 8019c46:	4641      	mov	r1, r8
 8019c48:	4620      	mov	r0, r4
 8019c4a:	f002 fd0f 	bl	801c66c <__ratio>
 8019c4e:	ec57 6b10 	vmov	r6, r7, d0
 8019c52:	2200      	movs	r2, #0
 8019c54:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8019c58:	4630      	mov	r0, r6
 8019c5a:	4639      	mov	r1, r7
 8019c5c:	f7e9 f97a 	bl	8002f54 <__aeabi_dcmple>
 8019c60:	2800      	cmp	r0, #0
 8019c62:	d06f      	beq.n	8019d44 <_strtod_l+0xa34>
 8019c64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019c66:	2b00      	cmp	r3, #0
 8019c68:	d17a      	bne.n	8019d60 <_strtod_l+0xa50>
 8019c6a:	f1ba 0f00 	cmp.w	sl, #0
 8019c6e:	d158      	bne.n	8019d22 <_strtod_l+0xa12>
 8019c70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019c72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019c76:	2b00      	cmp	r3, #0
 8019c78:	d15a      	bne.n	8019d30 <_strtod_l+0xa20>
 8019c7a:	4b64      	ldr	r3, [pc, #400]	@ (8019e0c <_strtod_l+0xafc>)
 8019c7c:	2200      	movs	r2, #0
 8019c7e:	4630      	mov	r0, r6
 8019c80:	4639      	mov	r1, r7
 8019c82:	f7e9 f95d 	bl	8002f40 <__aeabi_dcmplt>
 8019c86:	2800      	cmp	r0, #0
 8019c88:	d159      	bne.n	8019d3e <_strtod_l+0xa2e>
 8019c8a:	4630      	mov	r0, r6
 8019c8c:	4639      	mov	r1, r7
 8019c8e:	4b60      	ldr	r3, [pc, #384]	@ (8019e10 <_strtod_l+0xb00>)
 8019c90:	2200      	movs	r2, #0
 8019c92:	f7e8 fee3 	bl	8002a5c <__aeabi_dmul>
 8019c96:	4606      	mov	r6, r0
 8019c98:	460f      	mov	r7, r1
 8019c9a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8019c9e:	9606      	str	r6, [sp, #24]
 8019ca0:	9307      	str	r3, [sp, #28]
 8019ca2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019ca6:	4d57      	ldr	r5, [pc, #348]	@ (8019e04 <_strtod_l+0xaf4>)
 8019ca8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8019cac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019cae:	401d      	ands	r5, r3
 8019cb0:	4b58      	ldr	r3, [pc, #352]	@ (8019e14 <_strtod_l+0xb04>)
 8019cb2:	429d      	cmp	r5, r3
 8019cb4:	f040 80b2 	bne.w	8019e1c <_strtod_l+0xb0c>
 8019cb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019cba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8019cbe:	ec4b ab10 	vmov	d0, sl, fp
 8019cc2:	f002 fc0b 	bl	801c4dc <__ulp>
 8019cc6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019cca:	ec51 0b10 	vmov	r0, r1, d0
 8019cce:	f7e8 fec5 	bl	8002a5c <__aeabi_dmul>
 8019cd2:	4652      	mov	r2, sl
 8019cd4:	465b      	mov	r3, fp
 8019cd6:	f7e8 fd0b 	bl	80026f0 <__adddf3>
 8019cda:	460b      	mov	r3, r1
 8019cdc:	4949      	ldr	r1, [pc, #292]	@ (8019e04 <_strtod_l+0xaf4>)
 8019cde:	4a4e      	ldr	r2, [pc, #312]	@ (8019e18 <_strtod_l+0xb08>)
 8019ce0:	4019      	ands	r1, r3
 8019ce2:	4291      	cmp	r1, r2
 8019ce4:	4682      	mov	sl, r0
 8019ce6:	d942      	bls.n	8019d6e <_strtod_l+0xa5e>
 8019ce8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019cea:	4b47      	ldr	r3, [pc, #284]	@ (8019e08 <_strtod_l+0xaf8>)
 8019cec:	429a      	cmp	r2, r3
 8019cee:	d103      	bne.n	8019cf8 <_strtod_l+0x9e8>
 8019cf0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019cf2:	3301      	adds	r3, #1
 8019cf4:	f43f ad2b 	beq.w	801974e <_strtod_l+0x43e>
 8019cf8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8019e08 <_strtod_l+0xaf8>
 8019cfc:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8019d00:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019d02:	9805      	ldr	r0, [sp, #20]
 8019d04:	f002 f8b6 	bl	801be74 <_Bfree>
 8019d08:	9805      	ldr	r0, [sp, #20]
 8019d0a:	4649      	mov	r1, r9
 8019d0c:	f002 f8b2 	bl	801be74 <_Bfree>
 8019d10:	9805      	ldr	r0, [sp, #20]
 8019d12:	4641      	mov	r1, r8
 8019d14:	f002 f8ae 	bl	801be74 <_Bfree>
 8019d18:	9805      	ldr	r0, [sp, #20]
 8019d1a:	4621      	mov	r1, r4
 8019d1c:	f002 f8aa 	bl	801be74 <_Bfree>
 8019d20:	e618      	b.n	8019954 <_strtod_l+0x644>
 8019d22:	f1ba 0f01 	cmp.w	sl, #1
 8019d26:	d103      	bne.n	8019d30 <_strtod_l+0xa20>
 8019d28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019d2a:	2b00      	cmp	r3, #0
 8019d2c:	f43f ada5 	beq.w	801987a <_strtod_l+0x56a>
 8019d30:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8019de0 <_strtod_l+0xad0>
 8019d34:	4f35      	ldr	r7, [pc, #212]	@ (8019e0c <_strtod_l+0xafc>)
 8019d36:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019d3a:	2600      	movs	r6, #0
 8019d3c:	e7b1      	b.n	8019ca2 <_strtod_l+0x992>
 8019d3e:	4f34      	ldr	r7, [pc, #208]	@ (8019e10 <_strtod_l+0xb00>)
 8019d40:	2600      	movs	r6, #0
 8019d42:	e7aa      	b.n	8019c9a <_strtod_l+0x98a>
 8019d44:	4b32      	ldr	r3, [pc, #200]	@ (8019e10 <_strtod_l+0xb00>)
 8019d46:	4630      	mov	r0, r6
 8019d48:	4639      	mov	r1, r7
 8019d4a:	2200      	movs	r2, #0
 8019d4c:	f7e8 fe86 	bl	8002a5c <__aeabi_dmul>
 8019d50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019d52:	4606      	mov	r6, r0
 8019d54:	460f      	mov	r7, r1
 8019d56:	2b00      	cmp	r3, #0
 8019d58:	d09f      	beq.n	8019c9a <_strtod_l+0x98a>
 8019d5a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8019d5e:	e7a0      	b.n	8019ca2 <_strtod_l+0x992>
 8019d60:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8019de8 <_strtod_l+0xad8>
 8019d64:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019d68:	ec57 6b17 	vmov	r6, r7, d7
 8019d6c:	e799      	b.n	8019ca2 <_strtod_l+0x992>
 8019d6e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8019d72:	9b08      	ldr	r3, [sp, #32]
 8019d74:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8019d78:	2b00      	cmp	r3, #0
 8019d7a:	d1c1      	bne.n	8019d00 <_strtod_l+0x9f0>
 8019d7c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019d80:	0d1b      	lsrs	r3, r3, #20
 8019d82:	051b      	lsls	r3, r3, #20
 8019d84:	429d      	cmp	r5, r3
 8019d86:	d1bb      	bne.n	8019d00 <_strtod_l+0x9f0>
 8019d88:	4630      	mov	r0, r6
 8019d8a:	4639      	mov	r1, r7
 8019d8c:	f7e9 f9c6 	bl	800311c <__aeabi_d2lz>
 8019d90:	f7e8 fe36 	bl	8002a00 <__aeabi_l2d>
 8019d94:	4602      	mov	r2, r0
 8019d96:	460b      	mov	r3, r1
 8019d98:	4630      	mov	r0, r6
 8019d9a:	4639      	mov	r1, r7
 8019d9c:	f7e8 fca6 	bl	80026ec <__aeabi_dsub>
 8019da0:	460b      	mov	r3, r1
 8019da2:	4602      	mov	r2, r0
 8019da4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8019da8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8019dac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019dae:	ea46 060a 	orr.w	r6, r6, sl
 8019db2:	431e      	orrs	r6, r3
 8019db4:	d06f      	beq.n	8019e96 <_strtod_l+0xb86>
 8019db6:	a30e      	add	r3, pc, #56	@ (adr r3, 8019df0 <_strtod_l+0xae0>)
 8019db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dbc:	f7e9 f8c0 	bl	8002f40 <__aeabi_dcmplt>
 8019dc0:	2800      	cmp	r0, #0
 8019dc2:	f47f accf 	bne.w	8019764 <_strtod_l+0x454>
 8019dc6:	a30c      	add	r3, pc, #48	@ (adr r3, 8019df8 <_strtod_l+0xae8>)
 8019dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dcc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8019dd0:	f7e9 f8d4 	bl	8002f7c <__aeabi_dcmpgt>
 8019dd4:	2800      	cmp	r0, #0
 8019dd6:	d093      	beq.n	8019d00 <_strtod_l+0x9f0>
 8019dd8:	e4c4      	b.n	8019764 <_strtod_l+0x454>
 8019dda:	bf00      	nop
 8019ddc:	f3af 8000 	nop.w
 8019de0:	00000000 	.word	0x00000000
 8019de4:	bff00000 	.word	0xbff00000
 8019de8:	00000000 	.word	0x00000000
 8019dec:	3ff00000 	.word	0x3ff00000
 8019df0:	94a03595 	.word	0x94a03595
 8019df4:	3fdfffff 	.word	0x3fdfffff
 8019df8:	35afe535 	.word	0x35afe535
 8019dfc:	3fe00000 	.word	0x3fe00000
 8019e00:	000fffff 	.word	0x000fffff
 8019e04:	7ff00000 	.word	0x7ff00000
 8019e08:	7fefffff 	.word	0x7fefffff
 8019e0c:	3ff00000 	.word	0x3ff00000
 8019e10:	3fe00000 	.word	0x3fe00000
 8019e14:	7fe00000 	.word	0x7fe00000
 8019e18:	7c9fffff 	.word	0x7c9fffff
 8019e1c:	9b08      	ldr	r3, [sp, #32]
 8019e1e:	b323      	cbz	r3, 8019e6a <_strtod_l+0xb5a>
 8019e20:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8019e24:	d821      	bhi.n	8019e6a <_strtod_l+0xb5a>
 8019e26:	a328      	add	r3, pc, #160	@ (adr r3, 8019ec8 <_strtod_l+0xbb8>)
 8019e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e2c:	4630      	mov	r0, r6
 8019e2e:	4639      	mov	r1, r7
 8019e30:	f7e9 f890 	bl	8002f54 <__aeabi_dcmple>
 8019e34:	b1a0      	cbz	r0, 8019e60 <_strtod_l+0xb50>
 8019e36:	4639      	mov	r1, r7
 8019e38:	4630      	mov	r0, r6
 8019e3a:	f7e9 f8e7 	bl	800300c <__aeabi_d2uiz>
 8019e3e:	2801      	cmp	r0, #1
 8019e40:	bf38      	it	cc
 8019e42:	2001      	movcc	r0, #1
 8019e44:	f7e8 fd90 	bl	8002968 <__aeabi_ui2d>
 8019e48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019e4a:	4606      	mov	r6, r0
 8019e4c:	460f      	mov	r7, r1
 8019e4e:	b9fb      	cbnz	r3, 8019e90 <_strtod_l+0xb80>
 8019e50:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8019e54:	9014      	str	r0, [sp, #80]	@ 0x50
 8019e56:	9315      	str	r3, [sp, #84]	@ 0x54
 8019e58:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8019e5c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8019e60:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019e62:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8019e66:	1b5b      	subs	r3, r3, r5
 8019e68:	9311      	str	r3, [sp, #68]	@ 0x44
 8019e6a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8019e6e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8019e72:	f002 fb33 	bl	801c4dc <__ulp>
 8019e76:	4650      	mov	r0, sl
 8019e78:	ec53 2b10 	vmov	r2, r3, d0
 8019e7c:	4659      	mov	r1, fp
 8019e7e:	f7e8 fded 	bl	8002a5c <__aeabi_dmul>
 8019e82:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8019e86:	f7e8 fc33 	bl	80026f0 <__adddf3>
 8019e8a:	4682      	mov	sl, r0
 8019e8c:	468b      	mov	fp, r1
 8019e8e:	e770      	b.n	8019d72 <_strtod_l+0xa62>
 8019e90:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8019e94:	e7e0      	b.n	8019e58 <_strtod_l+0xb48>
 8019e96:	a30e      	add	r3, pc, #56	@ (adr r3, 8019ed0 <_strtod_l+0xbc0>)
 8019e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e9c:	f7e9 f850 	bl	8002f40 <__aeabi_dcmplt>
 8019ea0:	e798      	b.n	8019dd4 <_strtod_l+0xac4>
 8019ea2:	2300      	movs	r3, #0
 8019ea4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019ea6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8019ea8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019eaa:	6013      	str	r3, [r2, #0]
 8019eac:	f7ff ba6d 	b.w	801938a <_strtod_l+0x7a>
 8019eb0:	2a65      	cmp	r2, #101	@ 0x65
 8019eb2:	f43f ab66 	beq.w	8019582 <_strtod_l+0x272>
 8019eb6:	2a45      	cmp	r2, #69	@ 0x45
 8019eb8:	f43f ab63 	beq.w	8019582 <_strtod_l+0x272>
 8019ebc:	2301      	movs	r3, #1
 8019ebe:	f7ff bb9e 	b.w	80195fe <_strtod_l+0x2ee>
 8019ec2:	bf00      	nop
 8019ec4:	f3af 8000 	nop.w
 8019ec8:	ffc00000 	.word	0xffc00000
 8019ecc:	41dfffff 	.word	0x41dfffff
 8019ed0:	94a03595 	.word	0x94a03595
 8019ed4:	3fcfffff 	.word	0x3fcfffff

08019ed8 <_strtod_r>:
 8019ed8:	4b01      	ldr	r3, [pc, #4]	@ (8019ee0 <_strtod_r+0x8>)
 8019eda:	f7ff ba19 	b.w	8019310 <_strtod_l>
 8019ede:	bf00      	nop
 8019ee0:	20000360 	.word	0x20000360

08019ee4 <_strtol_l.constprop.0>:
 8019ee4:	2b24      	cmp	r3, #36	@ 0x24
 8019ee6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019eea:	4686      	mov	lr, r0
 8019eec:	4690      	mov	r8, r2
 8019eee:	d801      	bhi.n	8019ef4 <_strtol_l.constprop.0+0x10>
 8019ef0:	2b01      	cmp	r3, #1
 8019ef2:	d106      	bne.n	8019f02 <_strtol_l.constprop.0+0x1e>
 8019ef4:	f000 f9ea 	bl	801a2cc <__errno>
 8019ef8:	2316      	movs	r3, #22
 8019efa:	6003      	str	r3, [r0, #0]
 8019efc:	2000      	movs	r0, #0
 8019efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f02:	4834      	ldr	r0, [pc, #208]	@ (8019fd4 <_strtol_l.constprop.0+0xf0>)
 8019f04:	460d      	mov	r5, r1
 8019f06:	462a      	mov	r2, r5
 8019f08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019f0c:	5d06      	ldrb	r6, [r0, r4]
 8019f0e:	f016 0608 	ands.w	r6, r6, #8
 8019f12:	d1f8      	bne.n	8019f06 <_strtol_l.constprop.0+0x22>
 8019f14:	2c2d      	cmp	r4, #45	@ 0x2d
 8019f16:	d12d      	bne.n	8019f74 <_strtol_l.constprop.0+0x90>
 8019f18:	782c      	ldrb	r4, [r5, #0]
 8019f1a:	2601      	movs	r6, #1
 8019f1c:	1c95      	adds	r5, r2, #2
 8019f1e:	f033 0210 	bics.w	r2, r3, #16
 8019f22:	d109      	bne.n	8019f38 <_strtol_l.constprop.0+0x54>
 8019f24:	2c30      	cmp	r4, #48	@ 0x30
 8019f26:	d12a      	bne.n	8019f7e <_strtol_l.constprop.0+0x9a>
 8019f28:	782a      	ldrb	r2, [r5, #0]
 8019f2a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8019f2e:	2a58      	cmp	r2, #88	@ 0x58
 8019f30:	d125      	bne.n	8019f7e <_strtol_l.constprop.0+0x9a>
 8019f32:	786c      	ldrb	r4, [r5, #1]
 8019f34:	2310      	movs	r3, #16
 8019f36:	3502      	adds	r5, #2
 8019f38:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8019f3c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8019f40:	2200      	movs	r2, #0
 8019f42:	fbbc f9f3 	udiv	r9, ip, r3
 8019f46:	4610      	mov	r0, r2
 8019f48:	fb03 ca19 	mls	sl, r3, r9, ip
 8019f4c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8019f50:	2f09      	cmp	r7, #9
 8019f52:	d81b      	bhi.n	8019f8c <_strtol_l.constprop.0+0xa8>
 8019f54:	463c      	mov	r4, r7
 8019f56:	42a3      	cmp	r3, r4
 8019f58:	dd27      	ble.n	8019faa <_strtol_l.constprop.0+0xc6>
 8019f5a:	1c57      	adds	r7, r2, #1
 8019f5c:	d007      	beq.n	8019f6e <_strtol_l.constprop.0+0x8a>
 8019f5e:	4581      	cmp	r9, r0
 8019f60:	d320      	bcc.n	8019fa4 <_strtol_l.constprop.0+0xc0>
 8019f62:	d101      	bne.n	8019f68 <_strtol_l.constprop.0+0x84>
 8019f64:	45a2      	cmp	sl, r4
 8019f66:	db1d      	blt.n	8019fa4 <_strtol_l.constprop.0+0xc0>
 8019f68:	fb00 4003 	mla	r0, r0, r3, r4
 8019f6c:	2201      	movs	r2, #1
 8019f6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019f72:	e7eb      	b.n	8019f4c <_strtol_l.constprop.0+0x68>
 8019f74:	2c2b      	cmp	r4, #43	@ 0x2b
 8019f76:	bf04      	itt	eq
 8019f78:	782c      	ldrbeq	r4, [r5, #0]
 8019f7a:	1c95      	addeq	r5, r2, #2
 8019f7c:	e7cf      	b.n	8019f1e <_strtol_l.constprop.0+0x3a>
 8019f7e:	2b00      	cmp	r3, #0
 8019f80:	d1da      	bne.n	8019f38 <_strtol_l.constprop.0+0x54>
 8019f82:	2c30      	cmp	r4, #48	@ 0x30
 8019f84:	bf0c      	ite	eq
 8019f86:	2308      	moveq	r3, #8
 8019f88:	230a      	movne	r3, #10
 8019f8a:	e7d5      	b.n	8019f38 <_strtol_l.constprop.0+0x54>
 8019f8c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8019f90:	2f19      	cmp	r7, #25
 8019f92:	d801      	bhi.n	8019f98 <_strtol_l.constprop.0+0xb4>
 8019f94:	3c37      	subs	r4, #55	@ 0x37
 8019f96:	e7de      	b.n	8019f56 <_strtol_l.constprop.0+0x72>
 8019f98:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8019f9c:	2f19      	cmp	r7, #25
 8019f9e:	d804      	bhi.n	8019faa <_strtol_l.constprop.0+0xc6>
 8019fa0:	3c57      	subs	r4, #87	@ 0x57
 8019fa2:	e7d8      	b.n	8019f56 <_strtol_l.constprop.0+0x72>
 8019fa4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019fa8:	e7e1      	b.n	8019f6e <_strtol_l.constprop.0+0x8a>
 8019faa:	1c53      	adds	r3, r2, #1
 8019fac:	d108      	bne.n	8019fc0 <_strtol_l.constprop.0+0xdc>
 8019fae:	2322      	movs	r3, #34	@ 0x22
 8019fb0:	f8ce 3000 	str.w	r3, [lr]
 8019fb4:	4660      	mov	r0, ip
 8019fb6:	f1b8 0f00 	cmp.w	r8, #0
 8019fba:	d0a0      	beq.n	8019efe <_strtol_l.constprop.0+0x1a>
 8019fbc:	1e69      	subs	r1, r5, #1
 8019fbe:	e006      	b.n	8019fce <_strtol_l.constprop.0+0xea>
 8019fc0:	b106      	cbz	r6, 8019fc4 <_strtol_l.constprop.0+0xe0>
 8019fc2:	4240      	negs	r0, r0
 8019fc4:	f1b8 0f00 	cmp.w	r8, #0
 8019fc8:	d099      	beq.n	8019efe <_strtol_l.constprop.0+0x1a>
 8019fca:	2a00      	cmp	r2, #0
 8019fcc:	d1f6      	bne.n	8019fbc <_strtol_l.constprop.0+0xd8>
 8019fce:	f8c8 1000 	str.w	r1, [r8]
 8019fd2:	e794      	b.n	8019efe <_strtol_l.constprop.0+0x1a>
 8019fd4:	0801efb2 	.word	0x0801efb2

08019fd8 <_strtol_r>:
 8019fd8:	f7ff bf84 	b.w	8019ee4 <_strtol_l.constprop.0>

08019fdc <strtol>:
 8019fdc:	4613      	mov	r3, r2
 8019fde:	460a      	mov	r2, r1
 8019fe0:	4601      	mov	r1, r0
 8019fe2:	4802      	ldr	r0, [pc, #8]	@ (8019fec <strtol+0x10>)
 8019fe4:	6800      	ldr	r0, [r0, #0]
 8019fe6:	f7ff bf7d 	b.w	8019ee4 <_strtol_l.constprop.0>
 8019fea:	bf00      	nop
 8019fec:	200004cc 	.word	0x200004cc

08019ff0 <_fwalk_sglue>:
 8019ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019ff4:	4607      	mov	r7, r0
 8019ff6:	4688      	mov	r8, r1
 8019ff8:	4614      	mov	r4, r2
 8019ffa:	2600      	movs	r6, #0
 8019ffc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a000:	f1b9 0901 	subs.w	r9, r9, #1
 801a004:	d505      	bpl.n	801a012 <_fwalk_sglue+0x22>
 801a006:	6824      	ldr	r4, [r4, #0]
 801a008:	2c00      	cmp	r4, #0
 801a00a:	d1f7      	bne.n	8019ffc <_fwalk_sglue+0xc>
 801a00c:	4630      	mov	r0, r6
 801a00e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a012:	89ab      	ldrh	r3, [r5, #12]
 801a014:	2b01      	cmp	r3, #1
 801a016:	d907      	bls.n	801a028 <_fwalk_sglue+0x38>
 801a018:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a01c:	3301      	adds	r3, #1
 801a01e:	d003      	beq.n	801a028 <_fwalk_sglue+0x38>
 801a020:	4629      	mov	r1, r5
 801a022:	4638      	mov	r0, r7
 801a024:	47c0      	blx	r8
 801a026:	4306      	orrs	r6, r0
 801a028:	3568      	adds	r5, #104	@ 0x68
 801a02a:	e7e9      	b.n	801a000 <_fwalk_sglue+0x10>

0801a02c <iprintf>:
 801a02c:	b40f      	push	{r0, r1, r2, r3}
 801a02e:	b507      	push	{r0, r1, r2, lr}
 801a030:	4906      	ldr	r1, [pc, #24]	@ (801a04c <iprintf+0x20>)
 801a032:	ab04      	add	r3, sp, #16
 801a034:	6808      	ldr	r0, [r1, #0]
 801a036:	f853 2b04 	ldr.w	r2, [r3], #4
 801a03a:	6881      	ldr	r1, [r0, #8]
 801a03c:	9301      	str	r3, [sp, #4]
 801a03e:	f001 fd03 	bl	801ba48 <_vfiprintf_r>
 801a042:	b003      	add	sp, #12
 801a044:	f85d eb04 	ldr.w	lr, [sp], #4
 801a048:	b004      	add	sp, #16
 801a04a:	4770      	bx	lr
 801a04c:	200004cc 	.word	0x200004cc

0801a050 <_puts_r>:
 801a050:	6a03      	ldr	r3, [r0, #32]
 801a052:	b570      	push	{r4, r5, r6, lr}
 801a054:	6884      	ldr	r4, [r0, #8]
 801a056:	4605      	mov	r5, r0
 801a058:	460e      	mov	r6, r1
 801a05a:	b90b      	cbnz	r3, 801a060 <_puts_r+0x10>
 801a05c:	f7ff f922 	bl	80192a4 <__sinit>
 801a060:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a062:	07db      	lsls	r3, r3, #31
 801a064:	d405      	bmi.n	801a072 <_puts_r+0x22>
 801a066:	89a3      	ldrh	r3, [r4, #12]
 801a068:	0598      	lsls	r0, r3, #22
 801a06a:	d402      	bmi.n	801a072 <_puts_r+0x22>
 801a06c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a06e:	f000 f958 	bl	801a322 <__retarget_lock_acquire_recursive>
 801a072:	89a3      	ldrh	r3, [r4, #12]
 801a074:	0719      	lsls	r1, r3, #28
 801a076:	d502      	bpl.n	801a07e <_puts_r+0x2e>
 801a078:	6923      	ldr	r3, [r4, #16]
 801a07a:	2b00      	cmp	r3, #0
 801a07c:	d135      	bne.n	801a0ea <_puts_r+0x9a>
 801a07e:	4621      	mov	r1, r4
 801a080:	4628      	mov	r0, r5
 801a082:	f002 fc2b 	bl	801c8dc <__swsetup_r>
 801a086:	b380      	cbz	r0, 801a0ea <_puts_r+0x9a>
 801a088:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801a08c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a08e:	07da      	lsls	r2, r3, #31
 801a090:	d405      	bmi.n	801a09e <_puts_r+0x4e>
 801a092:	89a3      	ldrh	r3, [r4, #12]
 801a094:	059b      	lsls	r3, r3, #22
 801a096:	d402      	bmi.n	801a09e <_puts_r+0x4e>
 801a098:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a09a:	f000 f943 	bl	801a324 <__retarget_lock_release_recursive>
 801a09e:	4628      	mov	r0, r5
 801a0a0:	bd70      	pop	{r4, r5, r6, pc}
 801a0a2:	2b00      	cmp	r3, #0
 801a0a4:	da04      	bge.n	801a0b0 <_puts_r+0x60>
 801a0a6:	69a2      	ldr	r2, [r4, #24]
 801a0a8:	429a      	cmp	r2, r3
 801a0aa:	dc17      	bgt.n	801a0dc <_puts_r+0x8c>
 801a0ac:	290a      	cmp	r1, #10
 801a0ae:	d015      	beq.n	801a0dc <_puts_r+0x8c>
 801a0b0:	6823      	ldr	r3, [r4, #0]
 801a0b2:	1c5a      	adds	r2, r3, #1
 801a0b4:	6022      	str	r2, [r4, #0]
 801a0b6:	7019      	strb	r1, [r3, #0]
 801a0b8:	68a3      	ldr	r3, [r4, #8]
 801a0ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a0be:	3b01      	subs	r3, #1
 801a0c0:	60a3      	str	r3, [r4, #8]
 801a0c2:	2900      	cmp	r1, #0
 801a0c4:	d1ed      	bne.n	801a0a2 <_puts_r+0x52>
 801a0c6:	2b00      	cmp	r3, #0
 801a0c8:	da11      	bge.n	801a0ee <_puts_r+0x9e>
 801a0ca:	4622      	mov	r2, r4
 801a0cc:	210a      	movs	r1, #10
 801a0ce:	4628      	mov	r0, r5
 801a0d0:	f002 fbc6 	bl	801c860 <__swbuf_r>
 801a0d4:	3001      	adds	r0, #1
 801a0d6:	d0d7      	beq.n	801a088 <_puts_r+0x38>
 801a0d8:	250a      	movs	r5, #10
 801a0da:	e7d7      	b.n	801a08c <_puts_r+0x3c>
 801a0dc:	4622      	mov	r2, r4
 801a0de:	4628      	mov	r0, r5
 801a0e0:	f002 fbbe 	bl	801c860 <__swbuf_r>
 801a0e4:	3001      	adds	r0, #1
 801a0e6:	d1e7      	bne.n	801a0b8 <_puts_r+0x68>
 801a0e8:	e7ce      	b.n	801a088 <_puts_r+0x38>
 801a0ea:	3e01      	subs	r6, #1
 801a0ec:	e7e4      	b.n	801a0b8 <_puts_r+0x68>
 801a0ee:	6823      	ldr	r3, [r4, #0]
 801a0f0:	1c5a      	adds	r2, r3, #1
 801a0f2:	6022      	str	r2, [r4, #0]
 801a0f4:	220a      	movs	r2, #10
 801a0f6:	701a      	strb	r2, [r3, #0]
 801a0f8:	e7ee      	b.n	801a0d8 <_puts_r+0x88>
	...

0801a0fc <puts>:
 801a0fc:	4b02      	ldr	r3, [pc, #8]	@ (801a108 <puts+0xc>)
 801a0fe:	4601      	mov	r1, r0
 801a100:	6818      	ldr	r0, [r3, #0]
 801a102:	f7ff bfa5 	b.w	801a050 <_puts_r>
 801a106:	bf00      	nop
 801a108:	200004cc 	.word	0x200004cc

0801a10c <strncmp>:
 801a10c:	b510      	push	{r4, lr}
 801a10e:	b16a      	cbz	r2, 801a12c <strncmp+0x20>
 801a110:	3901      	subs	r1, #1
 801a112:	1884      	adds	r4, r0, r2
 801a114:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a118:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801a11c:	429a      	cmp	r2, r3
 801a11e:	d103      	bne.n	801a128 <strncmp+0x1c>
 801a120:	42a0      	cmp	r0, r4
 801a122:	d001      	beq.n	801a128 <strncmp+0x1c>
 801a124:	2a00      	cmp	r2, #0
 801a126:	d1f5      	bne.n	801a114 <strncmp+0x8>
 801a128:	1ad0      	subs	r0, r2, r3
 801a12a:	bd10      	pop	{r4, pc}
 801a12c:	4610      	mov	r0, r2
 801a12e:	e7fc      	b.n	801a12a <strncmp+0x1e>

0801a130 <strtok>:
 801a130:	4b16      	ldr	r3, [pc, #88]	@ (801a18c <strtok+0x5c>)
 801a132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a136:	681f      	ldr	r7, [r3, #0]
 801a138:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801a13a:	4605      	mov	r5, r0
 801a13c:	460e      	mov	r6, r1
 801a13e:	b9ec      	cbnz	r4, 801a17c <strtok+0x4c>
 801a140:	2050      	movs	r0, #80	@ 0x50
 801a142:	f7fe fb77 	bl	8018834 <malloc>
 801a146:	4602      	mov	r2, r0
 801a148:	6478      	str	r0, [r7, #68]	@ 0x44
 801a14a:	b920      	cbnz	r0, 801a156 <strtok+0x26>
 801a14c:	4b10      	ldr	r3, [pc, #64]	@ (801a190 <strtok+0x60>)
 801a14e:	4811      	ldr	r0, [pc, #68]	@ (801a194 <strtok+0x64>)
 801a150:	215b      	movs	r1, #91	@ 0x5b
 801a152:	f000 f90b 	bl	801a36c <__assert_func>
 801a156:	e9c0 4400 	strd	r4, r4, [r0]
 801a15a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801a15e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801a162:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801a166:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801a16a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801a16e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801a172:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801a176:	6184      	str	r4, [r0, #24]
 801a178:	7704      	strb	r4, [r0, #28]
 801a17a:	6244      	str	r4, [r0, #36]	@ 0x24
 801a17c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a17e:	4631      	mov	r1, r6
 801a180:	4628      	mov	r0, r5
 801a182:	2301      	movs	r3, #1
 801a184:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a188:	f000 b806 	b.w	801a198 <__strtok_r>
 801a18c:	200004cc 	.word	0x200004cc
 801a190:	0801ef38 	.word	0x0801ef38
 801a194:	0801ef4f 	.word	0x0801ef4f

0801a198 <__strtok_r>:
 801a198:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a19a:	4604      	mov	r4, r0
 801a19c:	b908      	cbnz	r0, 801a1a2 <__strtok_r+0xa>
 801a19e:	6814      	ldr	r4, [r2, #0]
 801a1a0:	b144      	cbz	r4, 801a1b4 <__strtok_r+0x1c>
 801a1a2:	4620      	mov	r0, r4
 801a1a4:	f814 5b01 	ldrb.w	r5, [r4], #1
 801a1a8:	460f      	mov	r7, r1
 801a1aa:	f817 6b01 	ldrb.w	r6, [r7], #1
 801a1ae:	b91e      	cbnz	r6, 801a1b8 <__strtok_r+0x20>
 801a1b0:	b965      	cbnz	r5, 801a1cc <__strtok_r+0x34>
 801a1b2:	6015      	str	r5, [r2, #0]
 801a1b4:	2000      	movs	r0, #0
 801a1b6:	e005      	b.n	801a1c4 <__strtok_r+0x2c>
 801a1b8:	42b5      	cmp	r5, r6
 801a1ba:	d1f6      	bne.n	801a1aa <__strtok_r+0x12>
 801a1bc:	2b00      	cmp	r3, #0
 801a1be:	d1f0      	bne.n	801a1a2 <__strtok_r+0xa>
 801a1c0:	6014      	str	r4, [r2, #0]
 801a1c2:	7003      	strb	r3, [r0, #0]
 801a1c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a1c6:	461c      	mov	r4, r3
 801a1c8:	e00c      	b.n	801a1e4 <__strtok_r+0x4c>
 801a1ca:	b915      	cbnz	r5, 801a1d2 <__strtok_r+0x3a>
 801a1cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a1d0:	460e      	mov	r6, r1
 801a1d2:	f816 5b01 	ldrb.w	r5, [r6], #1
 801a1d6:	42ab      	cmp	r3, r5
 801a1d8:	d1f7      	bne.n	801a1ca <__strtok_r+0x32>
 801a1da:	2b00      	cmp	r3, #0
 801a1dc:	d0f3      	beq.n	801a1c6 <__strtok_r+0x2e>
 801a1de:	2300      	movs	r3, #0
 801a1e0:	f804 3c01 	strb.w	r3, [r4, #-1]
 801a1e4:	6014      	str	r4, [r2, #0]
 801a1e6:	e7ed      	b.n	801a1c4 <__strtok_r+0x2c>

0801a1e8 <memset>:
 801a1e8:	4402      	add	r2, r0
 801a1ea:	4603      	mov	r3, r0
 801a1ec:	4293      	cmp	r3, r2
 801a1ee:	d100      	bne.n	801a1f2 <memset+0xa>
 801a1f0:	4770      	bx	lr
 801a1f2:	f803 1b01 	strb.w	r1, [r3], #1
 801a1f6:	e7f9      	b.n	801a1ec <memset+0x4>

0801a1f8 <_localeconv_r>:
 801a1f8:	4800      	ldr	r0, [pc, #0]	@ (801a1fc <_localeconv_r+0x4>)
 801a1fa:	4770      	bx	lr
 801a1fc:	20000450 	.word	0x20000450

0801a200 <_reclaim_reent>:
 801a200:	4b29      	ldr	r3, [pc, #164]	@ (801a2a8 <_reclaim_reent+0xa8>)
 801a202:	681b      	ldr	r3, [r3, #0]
 801a204:	4283      	cmp	r3, r0
 801a206:	b570      	push	{r4, r5, r6, lr}
 801a208:	4604      	mov	r4, r0
 801a20a:	d04b      	beq.n	801a2a4 <_reclaim_reent+0xa4>
 801a20c:	69c3      	ldr	r3, [r0, #28]
 801a20e:	b1ab      	cbz	r3, 801a23c <_reclaim_reent+0x3c>
 801a210:	68db      	ldr	r3, [r3, #12]
 801a212:	b16b      	cbz	r3, 801a230 <_reclaim_reent+0x30>
 801a214:	2500      	movs	r5, #0
 801a216:	69e3      	ldr	r3, [r4, #28]
 801a218:	68db      	ldr	r3, [r3, #12]
 801a21a:	5959      	ldr	r1, [r3, r5]
 801a21c:	2900      	cmp	r1, #0
 801a21e:	d13b      	bne.n	801a298 <_reclaim_reent+0x98>
 801a220:	3504      	adds	r5, #4
 801a222:	2d80      	cmp	r5, #128	@ 0x80
 801a224:	d1f7      	bne.n	801a216 <_reclaim_reent+0x16>
 801a226:	69e3      	ldr	r3, [r4, #28]
 801a228:	4620      	mov	r0, r4
 801a22a:	68d9      	ldr	r1, [r3, #12]
 801a22c:	f000 ff08 	bl	801b040 <_free_r>
 801a230:	69e3      	ldr	r3, [r4, #28]
 801a232:	6819      	ldr	r1, [r3, #0]
 801a234:	b111      	cbz	r1, 801a23c <_reclaim_reent+0x3c>
 801a236:	4620      	mov	r0, r4
 801a238:	f000 ff02 	bl	801b040 <_free_r>
 801a23c:	6961      	ldr	r1, [r4, #20]
 801a23e:	b111      	cbz	r1, 801a246 <_reclaim_reent+0x46>
 801a240:	4620      	mov	r0, r4
 801a242:	f000 fefd 	bl	801b040 <_free_r>
 801a246:	69e1      	ldr	r1, [r4, #28]
 801a248:	b111      	cbz	r1, 801a250 <_reclaim_reent+0x50>
 801a24a:	4620      	mov	r0, r4
 801a24c:	f000 fef8 	bl	801b040 <_free_r>
 801a250:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801a252:	b111      	cbz	r1, 801a25a <_reclaim_reent+0x5a>
 801a254:	4620      	mov	r0, r4
 801a256:	f000 fef3 	bl	801b040 <_free_r>
 801a25a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a25c:	b111      	cbz	r1, 801a264 <_reclaim_reent+0x64>
 801a25e:	4620      	mov	r0, r4
 801a260:	f000 feee 	bl	801b040 <_free_r>
 801a264:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801a266:	b111      	cbz	r1, 801a26e <_reclaim_reent+0x6e>
 801a268:	4620      	mov	r0, r4
 801a26a:	f000 fee9 	bl	801b040 <_free_r>
 801a26e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801a270:	b111      	cbz	r1, 801a278 <_reclaim_reent+0x78>
 801a272:	4620      	mov	r0, r4
 801a274:	f000 fee4 	bl	801b040 <_free_r>
 801a278:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801a27a:	b111      	cbz	r1, 801a282 <_reclaim_reent+0x82>
 801a27c:	4620      	mov	r0, r4
 801a27e:	f000 fedf 	bl	801b040 <_free_r>
 801a282:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801a284:	b111      	cbz	r1, 801a28c <_reclaim_reent+0x8c>
 801a286:	4620      	mov	r0, r4
 801a288:	f000 feda 	bl	801b040 <_free_r>
 801a28c:	6a23      	ldr	r3, [r4, #32]
 801a28e:	b14b      	cbz	r3, 801a2a4 <_reclaim_reent+0xa4>
 801a290:	4620      	mov	r0, r4
 801a292:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a296:	4718      	bx	r3
 801a298:	680e      	ldr	r6, [r1, #0]
 801a29a:	4620      	mov	r0, r4
 801a29c:	f000 fed0 	bl	801b040 <_free_r>
 801a2a0:	4631      	mov	r1, r6
 801a2a2:	e7bb      	b.n	801a21c <_reclaim_reent+0x1c>
 801a2a4:	bd70      	pop	{r4, r5, r6, pc}
 801a2a6:	bf00      	nop
 801a2a8:	200004cc 	.word	0x200004cc

0801a2ac <_sbrk_r>:
 801a2ac:	b538      	push	{r3, r4, r5, lr}
 801a2ae:	4d06      	ldr	r5, [pc, #24]	@ (801a2c8 <_sbrk_r+0x1c>)
 801a2b0:	2300      	movs	r3, #0
 801a2b2:	4604      	mov	r4, r0
 801a2b4:	4608      	mov	r0, r1
 801a2b6:	602b      	str	r3, [r5, #0]
 801a2b8:	f7ea f89e 	bl	80043f8 <_sbrk>
 801a2bc:	1c43      	adds	r3, r0, #1
 801a2be:	d102      	bne.n	801a2c6 <_sbrk_r+0x1a>
 801a2c0:	682b      	ldr	r3, [r5, #0]
 801a2c2:	b103      	cbz	r3, 801a2c6 <_sbrk_r+0x1a>
 801a2c4:	6023      	str	r3, [r4, #0]
 801a2c6:	bd38      	pop	{r3, r4, r5, pc}
 801a2c8:	20007b38 	.word	0x20007b38

0801a2cc <__errno>:
 801a2cc:	4b01      	ldr	r3, [pc, #4]	@ (801a2d4 <__errno+0x8>)
 801a2ce:	6818      	ldr	r0, [r3, #0]
 801a2d0:	4770      	bx	lr
 801a2d2:	bf00      	nop
 801a2d4:	200004cc 	.word	0x200004cc

0801a2d8 <__libc_init_array>:
 801a2d8:	b570      	push	{r4, r5, r6, lr}
 801a2da:	4d0d      	ldr	r5, [pc, #52]	@ (801a310 <__libc_init_array+0x38>)
 801a2dc:	4c0d      	ldr	r4, [pc, #52]	@ (801a314 <__libc_init_array+0x3c>)
 801a2de:	1b64      	subs	r4, r4, r5
 801a2e0:	10a4      	asrs	r4, r4, #2
 801a2e2:	2600      	movs	r6, #0
 801a2e4:	42a6      	cmp	r6, r4
 801a2e6:	d109      	bne.n	801a2fc <__libc_init_array+0x24>
 801a2e8:	4d0b      	ldr	r5, [pc, #44]	@ (801a318 <__libc_init_array+0x40>)
 801a2ea:	4c0c      	ldr	r4, [pc, #48]	@ (801a31c <__libc_init_array+0x44>)
 801a2ec:	f003 fd20 	bl	801dd30 <_init>
 801a2f0:	1b64      	subs	r4, r4, r5
 801a2f2:	10a4      	asrs	r4, r4, #2
 801a2f4:	2600      	movs	r6, #0
 801a2f6:	42a6      	cmp	r6, r4
 801a2f8:	d105      	bne.n	801a306 <__libc_init_array+0x2e>
 801a2fa:	bd70      	pop	{r4, r5, r6, pc}
 801a2fc:	f855 3b04 	ldr.w	r3, [r5], #4
 801a300:	4798      	blx	r3
 801a302:	3601      	adds	r6, #1
 801a304:	e7ee      	b.n	801a2e4 <__libc_init_array+0xc>
 801a306:	f855 3b04 	ldr.w	r3, [r5], #4
 801a30a:	4798      	blx	r3
 801a30c:	3601      	adds	r6, #1
 801a30e:	e7f2      	b.n	801a2f6 <__libc_init_array+0x1e>
 801a310:	0801f510 	.word	0x0801f510
 801a314:	0801f510 	.word	0x0801f510
 801a318:	0801f510 	.word	0x0801f510
 801a31c:	0801f514 	.word	0x0801f514

0801a320 <__retarget_lock_init_recursive>:
 801a320:	4770      	bx	lr

0801a322 <__retarget_lock_acquire_recursive>:
 801a322:	4770      	bx	lr

0801a324 <__retarget_lock_release_recursive>:
 801a324:	4770      	bx	lr

0801a326 <__aeabi_memclr>:
 801a326:	2200      	movs	r2, #0
 801a328:	f7e8 b92d 	b.w	8002586 <__aeabi_memset>

0801a32c <memcpy>:
 801a32c:	440a      	add	r2, r1
 801a32e:	4291      	cmp	r1, r2
 801a330:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801a334:	d100      	bne.n	801a338 <memcpy+0xc>
 801a336:	4770      	bx	lr
 801a338:	b510      	push	{r4, lr}
 801a33a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a33e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a342:	4291      	cmp	r1, r2
 801a344:	d1f9      	bne.n	801a33a <memcpy+0xe>
 801a346:	bd10      	pop	{r4, pc}

0801a348 <__aeabi_memcpy>:
 801a348:	f7ff bff0 	b.w	801a32c <memcpy>
 801a34c:	0000      	movs	r0, r0
	...

0801a350 <nan>:
 801a350:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801a358 <nan+0x8>
 801a354:	4770      	bx	lr
 801a356:	bf00      	nop
 801a358:	00000000 	.word	0x00000000
 801a35c:	7ff80000 	.word	0x7ff80000

0801a360 <nanf>:
 801a360:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801a368 <nanf+0x8>
 801a364:	4770      	bx	lr
 801a366:	bf00      	nop
 801a368:	7fc00000 	.word	0x7fc00000

0801a36c <__assert_func>:
 801a36c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a36e:	4614      	mov	r4, r2
 801a370:	461a      	mov	r2, r3
 801a372:	4b09      	ldr	r3, [pc, #36]	@ (801a398 <__assert_func+0x2c>)
 801a374:	681b      	ldr	r3, [r3, #0]
 801a376:	4605      	mov	r5, r0
 801a378:	68d8      	ldr	r0, [r3, #12]
 801a37a:	b954      	cbnz	r4, 801a392 <__assert_func+0x26>
 801a37c:	4b07      	ldr	r3, [pc, #28]	@ (801a39c <__assert_func+0x30>)
 801a37e:	461c      	mov	r4, r3
 801a380:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a384:	9100      	str	r1, [sp, #0]
 801a386:	462b      	mov	r3, r5
 801a388:	4905      	ldr	r1, [pc, #20]	@ (801a3a0 <__assert_func+0x34>)
 801a38a:	f002 fa29 	bl	801c7e0 <fiprintf>
 801a38e:	f002 fbed 	bl	801cb6c <abort>
 801a392:	4b04      	ldr	r3, [pc, #16]	@ (801a3a4 <__assert_func+0x38>)
 801a394:	e7f4      	b.n	801a380 <__assert_func+0x14>
 801a396:	bf00      	nop
 801a398:	200004cc 	.word	0x200004cc
 801a39c:	0801f0ed 	.word	0x0801f0ed
 801a3a0:	0801f0bf 	.word	0x0801f0bf
 801a3a4:	0801f0b2 	.word	0x0801f0b2

0801a3a8 <quorem>:
 801a3a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3ac:	6903      	ldr	r3, [r0, #16]
 801a3ae:	690c      	ldr	r4, [r1, #16]
 801a3b0:	42a3      	cmp	r3, r4
 801a3b2:	4607      	mov	r7, r0
 801a3b4:	db7e      	blt.n	801a4b4 <quorem+0x10c>
 801a3b6:	3c01      	subs	r4, #1
 801a3b8:	f101 0814 	add.w	r8, r1, #20
 801a3bc:	00a3      	lsls	r3, r4, #2
 801a3be:	f100 0514 	add.w	r5, r0, #20
 801a3c2:	9300      	str	r3, [sp, #0]
 801a3c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a3c8:	9301      	str	r3, [sp, #4]
 801a3ca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a3ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a3d2:	3301      	adds	r3, #1
 801a3d4:	429a      	cmp	r2, r3
 801a3d6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a3da:	fbb2 f6f3 	udiv	r6, r2, r3
 801a3de:	d32e      	bcc.n	801a43e <quorem+0x96>
 801a3e0:	f04f 0a00 	mov.w	sl, #0
 801a3e4:	46c4      	mov	ip, r8
 801a3e6:	46ae      	mov	lr, r5
 801a3e8:	46d3      	mov	fp, sl
 801a3ea:	f85c 3b04 	ldr.w	r3, [ip], #4
 801a3ee:	b298      	uxth	r0, r3
 801a3f0:	fb06 a000 	mla	r0, r6, r0, sl
 801a3f4:	0c02      	lsrs	r2, r0, #16
 801a3f6:	0c1b      	lsrs	r3, r3, #16
 801a3f8:	fb06 2303 	mla	r3, r6, r3, r2
 801a3fc:	f8de 2000 	ldr.w	r2, [lr]
 801a400:	b280      	uxth	r0, r0
 801a402:	b292      	uxth	r2, r2
 801a404:	1a12      	subs	r2, r2, r0
 801a406:	445a      	add	r2, fp
 801a408:	f8de 0000 	ldr.w	r0, [lr]
 801a40c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a410:	b29b      	uxth	r3, r3
 801a412:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801a416:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801a41a:	b292      	uxth	r2, r2
 801a41c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801a420:	45e1      	cmp	r9, ip
 801a422:	f84e 2b04 	str.w	r2, [lr], #4
 801a426:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801a42a:	d2de      	bcs.n	801a3ea <quorem+0x42>
 801a42c:	9b00      	ldr	r3, [sp, #0]
 801a42e:	58eb      	ldr	r3, [r5, r3]
 801a430:	b92b      	cbnz	r3, 801a43e <quorem+0x96>
 801a432:	9b01      	ldr	r3, [sp, #4]
 801a434:	3b04      	subs	r3, #4
 801a436:	429d      	cmp	r5, r3
 801a438:	461a      	mov	r2, r3
 801a43a:	d32f      	bcc.n	801a49c <quorem+0xf4>
 801a43c:	613c      	str	r4, [r7, #16]
 801a43e:	4638      	mov	r0, r7
 801a440:	f001 ff9c 	bl	801c37c <__mcmp>
 801a444:	2800      	cmp	r0, #0
 801a446:	db25      	blt.n	801a494 <quorem+0xec>
 801a448:	4629      	mov	r1, r5
 801a44a:	2000      	movs	r0, #0
 801a44c:	f858 2b04 	ldr.w	r2, [r8], #4
 801a450:	f8d1 c000 	ldr.w	ip, [r1]
 801a454:	fa1f fe82 	uxth.w	lr, r2
 801a458:	fa1f f38c 	uxth.w	r3, ip
 801a45c:	eba3 030e 	sub.w	r3, r3, lr
 801a460:	4403      	add	r3, r0
 801a462:	0c12      	lsrs	r2, r2, #16
 801a464:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801a468:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801a46c:	b29b      	uxth	r3, r3
 801a46e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a472:	45c1      	cmp	r9, r8
 801a474:	f841 3b04 	str.w	r3, [r1], #4
 801a478:	ea4f 4022 	mov.w	r0, r2, asr #16
 801a47c:	d2e6      	bcs.n	801a44c <quorem+0xa4>
 801a47e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a482:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a486:	b922      	cbnz	r2, 801a492 <quorem+0xea>
 801a488:	3b04      	subs	r3, #4
 801a48a:	429d      	cmp	r5, r3
 801a48c:	461a      	mov	r2, r3
 801a48e:	d30b      	bcc.n	801a4a8 <quorem+0x100>
 801a490:	613c      	str	r4, [r7, #16]
 801a492:	3601      	adds	r6, #1
 801a494:	4630      	mov	r0, r6
 801a496:	b003      	add	sp, #12
 801a498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a49c:	6812      	ldr	r2, [r2, #0]
 801a49e:	3b04      	subs	r3, #4
 801a4a0:	2a00      	cmp	r2, #0
 801a4a2:	d1cb      	bne.n	801a43c <quorem+0x94>
 801a4a4:	3c01      	subs	r4, #1
 801a4a6:	e7c6      	b.n	801a436 <quorem+0x8e>
 801a4a8:	6812      	ldr	r2, [r2, #0]
 801a4aa:	3b04      	subs	r3, #4
 801a4ac:	2a00      	cmp	r2, #0
 801a4ae:	d1ef      	bne.n	801a490 <quorem+0xe8>
 801a4b0:	3c01      	subs	r4, #1
 801a4b2:	e7ea      	b.n	801a48a <quorem+0xe2>
 801a4b4:	2000      	movs	r0, #0
 801a4b6:	e7ee      	b.n	801a496 <quorem+0xee>

0801a4b8 <_dtoa_r>:
 801a4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4bc:	69c7      	ldr	r7, [r0, #28]
 801a4be:	b099      	sub	sp, #100	@ 0x64
 801a4c0:	ed8d 0b02 	vstr	d0, [sp, #8]
 801a4c4:	ec55 4b10 	vmov	r4, r5, d0
 801a4c8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801a4ca:	9109      	str	r1, [sp, #36]	@ 0x24
 801a4cc:	4683      	mov	fp, r0
 801a4ce:	920e      	str	r2, [sp, #56]	@ 0x38
 801a4d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 801a4d2:	b97f      	cbnz	r7, 801a4f4 <_dtoa_r+0x3c>
 801a4d4:	2010      	movs	r0, #16
 801a4d6:	f7fe f9ad 	bl	8018834 <malloc>
 801a4da:	4602      	mov	r2, r0
 801a4dc:	f8cb 001c 	str.w	r0, [fp, #28]
 801a4e0:	b920      	cbnz	r0, 801a4ec <_dtoa_r+0x34>
 801a4e2:	4ba7      	ldr	r3, [pc, #668]	@ (801a780 <_dtoa_r+0x2c8>)
 801a4e4:	21ef      	movs	r1, #239	@ 0xef
 801a4e6:	48a7      	ldr	r0, [pc, #668]	@ (801a784 <_dtoa_r+0x2cc>)
 801a4e8:	f7ff ff40 	bl	801a36c <__assert_func>
 801a4ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801a4f0:	6007      	str	r7, [r0, #0]
 801a4f2:	60c7      	str	r7, [r0, #12]
 801a4f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 801a4f8:	6819      	ldr	r1, [r3, #0]
 801a4fa:	b159      	cbz	r1, 801a514 <_dtoa_r+0x5c>
 801a4fc:	685a      	ldr	r2, [r3, #4]
 801a4fe:	604a      	str	r2, [r1, #4]
 801a500:	2301      	movs	r3, #1
 801a502:	4093      	lsls	r3, r2
 801a504:	608b      	str	r3, [r1, #8]
 801a506:	4658      	mov	r0, fp
 801a508:	f001 fcb4 	bl	801be74 <_Bfree>
 801a50c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801a510:	2200      	movs	r2, #0
 801a512:	601a      	str	r2, [r3, #0]
 801a514:	1e2b      	subs	r3, r5, #0
 801a516:	bfb9      	ittee	lt
 801a518:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801a51c:	9303      	strlt	r3, [sp, #12]
 801a51e:	2300      	movge	r3, #0
 801a520:	6033      	strge	r3, [r6, #0]
 801a522:	9f03      	ldr	r7, [sp, #12]
 801a524:	4b98      	ldr	r3, [pc, #608]	@ (801a788 <_dtoa_r+0x2d0>)
 801a526:	bfbc      	itt	lt
 801a528:	2201      	movlt	r2, #1
 801a52a:	6032      	strlt	r2, [r6, #0]
 801a52c:	43bb      	bics	r3, r7
 801a52e:	d112      	bne.n	801a556 <_dtoa_r+0x9e>
 801a530:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801a532:	f242 730f 	movw	r3, #9999	@ 0x270f
 801a536:	6013      	str	r3, [r2, #0]
 801a538:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801a53c:	4323      	orrs	r3, r4
 801a53e:	f000 854d 	beq.w	801afdc <_dtoa_r+0xb24>
 801a542:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801a544:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801a79c <_dtoa_r+0x2e4>
 801a548:	2b00      	cmp	r3, #0
 801a54a:	f000 854f 	beq.w	801afec <_dtoa_r+0xb34>
 801a54e:	f10a 0303 	add.w	r3, sl, #3
 801a552:	f000 bd49 	b.w	801afe8 <_dtoa_r+0xb30>
 801a556:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a55a:	2200      	movs	r2, #0
 801a55c:	ec51 0b17 	vmov	r0, r1, d7
 801a560:	2300      	movs	r3, #0
 801a562:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801a566:	f7e8 fce1 	bl	8002f2c <__aeabi_dcmpeq>
 801a56a:	4680      	mov	r8, r0
 801a56c:	b158      	cbz	r0, 801a586 <_dtoa_r+0xce>
 801a56e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801a570:	2301      	movs	r3, #1
 801a572:	6013      	str	r3, [r2, #0]
 801a574:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801a576:	b113      	cbz	r3, 801a57e <_dtoa_r+0xc6>
 801a578:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801a57a:	4b84      	ldr	r3, [pc, #528]	@ (801a78c <_dtoa_r+0x2d4>)
 801a57c:	6013      	str	r3, [r2, #0]
 801a57e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801a7a0 <_dtoa_r+0x2e8>
 801a582:	f000 bd33 	b.w	801afec <_dtoa_r+0xb34>
 801a586:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801a58a:	aa16      	add	r2, sp, #88	@ 0x58
 801a58c:	a917      	add	r1, sp, #92	@ 0x5c
 801a58e:	4658      	mov	r0, fp
 801a590:	f002 f814 	bl	801c5bc <__d2b>
 801a594:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801a598:	4681      	mov	r9, r0
 801a59a:	2e00      	cmp	r6, #0
 801a59c:	d077      	beq.n	801a68e <_dtoa_r+0x1d6>
 801a59e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a5a0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801a5a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a5a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801a5ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801a5b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801a5b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801a5b8:	4619      	mov	r1, r3
 801a5ba:	2200      	movs	r2, #0
 801a5bc:	4b74      	ldr	r3, [pc, #464]	@ (801a790 <_dtoa_r+0x2d8>)
 801a5be:	f7e8 f895 	bl	80026ec <__aeabi_dsub>
 801a5c2:	a369      	add	r3, pc, #420	@ (adr r3, 801a768 <_dtoa_r+0x2b0>)
 801a5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5c8:	f7e8 fa48 	bl	8002a5c <__aeabi_dmul>
 801a5cc:	a368      	add	r3, pc, #416	@ (adr r3, 801a770 <_dtoa_r+0x2b8>)
 801a5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5d2:	f7e8 f88d 	bl	80026f0 <__adddf3>
 801a5d6:	4604      	mov	r4, r0
 801a5d8:	4630      	mov	r0, r6
 801a5da:	460d      	mov	r5, r1
 801a5dc:	f7e8 f9d4 	bl	8002988 <__aeabi_i2d>
 801a5e0:	a365      	add	r3, pc, #404	@ (adr r3, 801a778 <_dtoa_r+0x2c0>)
 801a5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5e6:	f7e8 fa39 	bl	8002a5c <__aeabi_dmul>
 801a5ea:	4602      	mov	r2, r0
 801a5ec:	460b      	mov	r3, r1
 801a5ee:	4620      	mov	r0, r4
 801a5f0:	4629      	mov	r1, r5
 801a5f2:	f7e8 f87d 	bl	80026f0 <__adddf3>
 801a5f6:	4604      	mov	r4, r0
 801a5f8:	460d      	mov	r5, r1
 801a5fa:	f7e8 fcdf 	bl	8002fbc <__aeabi_d2iz>
 801a5fe:	2200      	movs	r2, #0
 801a600:	4607      	mov	r7, r0
 801a602:	2300      	movs	r3, #0
 801a604:	4620      	mov	r0, r4
 801a606:	4629      	mov	r1, r5
 801a608:	f7e8 fc9a 	bl	8002f40 <__aeabi_dcmplt>
 801a60c:	b140      	cbz	r0, 801a620 <_dtoa_r+0x168>
 801a60e:	4638      	mov	r0, r7
 801a610:	f7e8 f9ba 	bl	8002988 <__aeabi_i2d>
 801a614:	4622      	mov	r2, r4
 801a616:	462b      	mov	r3, r5
 801a618:	f7e8 fc88 	bl	8002f2c <__aeabi_dcmpeq>
 801a61c:	b900      	cbnz	r0, 801a620 <_dtoa_r+0x168>
 801a61e:	3f01      	subs	r7, #1
 801a620:	2f16      	cmp	r7, #22
 801a622:	d851      	bhi.n	801a6c8 <_dtoa_r+0x210>
 801a624:	4b5b      	ldr	r3, [pc, #364]	@ (801a794 <_dtoa_r+0x2dc>)
 801a626:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801a62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a62e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801a632:	f7e8 fc85 	bl	8002f40 <__aeabi_dcmplt>
 801a636:	2800      	cmp	r0, #0
 801a638:	d048      	beq.n	801a6cc <_dtoa_r+0x214>
 801a63a:	3f01      	subs	r7, #1
 801a63c:	2300      	movs	r3, #0
 801a63e:	9312      	str	r3, [sp, #72]	@ 0x48
 801a640:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801a642:	1b9b      	subs	r3, r3, r6
 801a644:	1e5a      	subs	r2, r3, #1
 801a646:	bf44      	itt	mi
 801a648:	f1c3 0801 	rsbmi	r8, r3, #1
 801a64c:	2300      	movmi	r3, #0
 801a64e:	9208      	str	r2, [sp, #32]
 801a650:	bf54      	ite	pl
 801a652:	f04f 0800 	movpl.w	r8, #0
 801a656:	9308      	strmi	r3, [sp, #32]
 801a658:	2f00      	cmp	r7, #0
 801a65a:	db39      	blt.n	801a6d0 <_dtoa_r+0x218>
 801a65c:	9b08      	ldr	r3, [sp, #32]
 801a65e:	970f      	str	r7, [sp, #60]	@ 0x3c
 801a660:	443b      	add	r3, r7
 801a662:	9308      	str	r3, [sp, #32]
 801a664:	2300      	movs	r3, #0
 801a666:	930a      	str	r3, [sp, #40]	@ 0x28
 801a668:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a66a:	2b09      	cmp	r3, #9
 801a66c:	d864      	bhi.n	801a738 <_dtoa_r+0x280>
 801a66e:	2b05      	cmp	r3, #5
 801a670:	bfc4      	itt	gt
 801a672:	3b04      	subgt	r3, #4
 801a674:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801a676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a678:	f1a3 0302 	sub.w	r3, r3, #2
 801a67c:	bfcc      	ite	gt
 801a67e:	2400      	movgt	r4, #0
 801a680:	2401      	movle	r4, #1
 801a682:	2b03      	cmp	r3, #3
 801a684:	d863      	bhi.n	801a74e <_dtoa_r+0x296>
 801a686:	e8df f003 	tbb	[pc, r3]
 801a68a:	372a      	.short	0x372a
 801a68c:	5535      	.short	0x5535
 801a68e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801a692:	441e      	add	r6, r3
 801a694:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801a698:	2b20      	cmp	r3, #32
 801a69a:	bfc1      	itttt	gt
 801a69c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801a6a0:	409f      	lslgt	r7, r3
 801a6a2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801a6a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 801a6aa:	bfd6      	itet	le
 801a6ac:	f1c3 0320 	rsble	r3, r3, #32
 801a6b0:	ea47 0003 	orrgt.w	r0, r7, r3
 801a6b4:	fa04 f003 	lslle.w	r0, r4, r3
 801a6b8:	f7e8 f956 	bl	8002968 <__aeabi_ui2d>
 801a6bc:	2201      	movs	r2, #1
 801a6be:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801a6c2:	3e01      	subs	r6, #1
 801a6c4:	9214      	str	r2, [sp, #80]	@ 0x50
 801a6c6:	e777      	b.n	801a5b8 <_dtoa_r+0x100>
 801a6c8:	2301      	movs	r3, #1
 801a6ca:	e7b8      	b.n	801a63e <_dtoa_r+0x186>
 801a6cc:	9012      	str	r0, [sp, #72]	@ 0x48
 801a6ce:	e7b7      	b.n	801a640 <_dtoa_r+0x188>
 801a6d0:	427b      	negs	r3, r7
 801a6d2:	930a      	str	r3, [sp, #40]	@ 0x28
 801a6d4:	2300      	movs	r3, #0
 801a6d6:	eba8 0807 	sub.w	r8, r8, r7
 801a6da:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a6dc:	e7c4      	b.n	801a668 <_dtoa_r+0x1b0>
 801a6de:	2300      	movs	r3, #0
 801a6e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a6e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a6e4:	2b00      	cmp	r3, #0
 801a6e6:	dc35      	bgt.n	801a754 <_dtoa_r+0x29c>
 801a6e8:	2301      	movs	r3, #1
 801a6ea:	9300      	str	r3, [sp, #0]
 801a6ec:	9307      	str	r3, [sp, #28]
 801a6ee:	461a      	mov	r2, r3
 801a6f0:	920e      	str	r2, [sp, #56]	@ 0x38
 801a6f2:	e00b      	b.n	801a70c <_dtoa_r+0x254>
 801a6f4:	2301      	movs	r3, #1
 801a6f6:	e7f3      	b.n	801a6e0 <_dtoa_r+0x228>
 801a6f8:	2300      	movs	r3, #0
 801a6fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a6fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a6fe:	18fb      	adds	r3, r7, r3
 801a700:	9300      	str	r3, [sp, #0]
 801a702:	3301      	adds	r3, #1
 801a704:	2b01      	cmp	r3, #1
 801a706:	9307      	str	r3, [sp, #28]
 801a708:	bfb8      	it	lt
 801a70a:	2301      	movlt	r3, #1
 801a70c:	f8db 001c 	ldr.w	r0, [fp, #28]
 801a710:	2100      	movs	r1, #0
 801a712:	2204      	movs	r2, #4
 801a714:	f102 0514 	add.w	r5, r2, #20
 801a718:	429d      	cmp	r5, r3
 801a71a:	d91f      	bls.n	801a75c <_dtoa_r+0x2a4>
 801a71c:	6041      	str	r1, [r0, #4]
 801a71e:	4658      	mov	r0, fp
 801a720:	f001 fb68 	bl	801bdf4 <_Balloc>
 801a724:	4682      	mov	sl, r0
 801a726:	2800      	cmp	r0, #0
 801a728:	d13c      	bne.n	801a7a4 <_dtoa_r+0x2ec>
 801a72a:	4b1b      	ldr	r3, [pc, #108]	@ (801a798 <_dtoa_r+0x2e0>)
 801a72c:	4602      	mov	r2, r0
 801a72e:	f240 11af 	movw	r1, #431	@ 0x1af
 801a732:	e6d8      	b.n	801a4e6 <_dtoa_r+0x2e>
 801a734:	2301      	movs	r3, #1
 801a736:	e7e0      	b.n	801a6fa <_dtoa_r+0x242>
 801a738:	2401      	movs	r4, #1
 801a73a:	2300      	movs	r3, #0
 801a73c:	9309      	str	r3, [sp, #36]	@ 0x24
 801a73e:	940b      	str	r4, [sp, #44]	@ 0x2c
 801a740:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a744:	9300      	str	r3, [sp, #0]
 801a746:	9307      	str	r3, [sp, #28]
 801a748:	2200      	movs	r2, #0
 801a74a:	2312      	movs	r3, #18
 801a74c:	e7d0      	b.n	801a6f0 <_dtoa_r+0x238>
 801a74e:	2301      	movs	r3, #1
 801a750:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a752:	e7f5      	b.n	801a740 <_dtoa_r+0x288>
 801a754:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a756:	9300      	str	r3, [sp, #0]
 801a758:	9307      	str	r3, [sp, #28]
 801a75a:	e7d7      	b.n	801a70c <_dtoa_r+0x254>
 801a75c:	3101      	adds	r1, #1
 801a75e:	0052      	lsls	r2, r2, #1
 801a760:	e7d8      	b.n	801a714 <_dtoa_r+0x25c>
 801a762:	bf00      	nop
 801a764:	f3af 8000 	nop.w
 801a768:	636f4361 	.word	0x636f4361
 801a76c:	3fd287a7 	.word	0x3fd287a7
 801a770:	8b60c8b3 	.word	0x8b60c8b3
 801a774:	3fc68a28 	.word	0x3fc68a28
 801a778:	509f79fb 	.word	0x509f79fb
 801a77c:	3fd34413 	.word	0x3fd34413
 801a780:	0801ef38 	.word	0x0801ef38
 801a784:	0801f0fb 	.word	0x0801f0fb
 801a788:	7ff00000 	.word	0x7ff00000
 801a78c:	0801eebd 	.word	0x0801eebd
 801a790:	3ff80000 	.word	0x3ff80000
 801a794:	0801f268 	.word	0x0801f268
 801a798:	0801f153 	.word	0x0801f153
 801a79c:	0801f0f7 	.word	0x0801f0f7
 801a7a0:	0801eebc 	.word	0x0801eebc
 801a7a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 801a7a8:	6018      	str	r0, [r3, #0]
 801a7aa:	9b07      	ldr	r3, [sp, #28]
 801a7ac:	2b0e      	cmp	r3, #14
 801a7ae:	f200 80a4 	bhi.w	801a8fa <_dtoa_r+0x442>
 801a7b2:	2c00      	cmp	r4, #0
 801a7b4:	f000 80a1 	beq.w	801a8fa <_dtoa_r+0x442>
 801a7b8:	2f00      	cmp	r7, #0
 801a7ba:	dd33      	ble.n	801a824 <_dtoa_r+0x36c>
 801a7bc:	4bad      	ldr	r3, [pc, #692]	@ (801aa74 <_dtoa_r+0x5bc>)
 801a7be:	f007 020f 	and.w	r2, r7, #15
 801a7c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a7c6:	ed93 7b00 	vldr	d7, [r3]
 801a7ca:	05f8      	lsls	r0, r7, #23
 801a7cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 801a7d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 801a7d4:	d516      	bpl.n	801a804 <_dtoa_r+0x34c>
 801a7d6:	4ba8      	ldr	r3, [pc, #672]	@ (801aa78 <_dtoa_r+0x5c0>)
 801a7d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801a7dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801a7e0:	f7e8 fa66 	bl	8002cb0 <__aeabi_ddiv>
 801a7e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a7e8:	f004 040f 	and.w	r4, r4, #15
 801a7ec:	2603      	movs	r6, #3
 801a7ee:	4da2      	ldr	r5, [pc, #648]	@ (801aa78 <_dtoa_r+0x5c0>)
 801a7f0:	b954      	cbnz	r4, 801a808 <_dtoa_r+0x350>
 801a7f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a7f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a7fa:	f7e8 fa59 	bl	8002cb0 <__aeabi_ddiv>
 801a7fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a802:	e028      	b.n	801a856 <_dtoa_r+0x39e>
 801a804:	2602      	movs	r6, #2
 801a806:	e7f2      	b.n	801a7ee <_dtoa_r+0x336>
 801a808:	07e1      	lsls	r1, r4, #31
 801a80a:	d508      	bpl.n	801a81e <_dtoa_r+0x366>
 801a80c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a810:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a814:	f7e8 f922 	bl	8002a5c <__aeabi_dmul>
 801a818:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a81c:	3601      	adds	r6, #1
 801a81e:	1064      	asrs	r4, r4, #1
 801a820:	3508      	adds	r5, #8
 801a822:	e7e5      	b.n	801a7f0 <_dtoa_r+0x338>
 801a824:	f000 80d2 	beq.w	801a9cc <_dtoa_r+0x514>
 801a828:	427c      	negs	r4, r7
 801a82a:	4b92      	ldr	r3, [pc, #584]	@ (801aa74 <_dtoa_r+0x5bc>)
 801a82c:	4d92      	ldr	r5, [pc, #584]	@ (801aa78 <_dtoa_r+0x5c0>)
 801a82e:	f004 020f 	and.w	r2, r4, #15
 801a832:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a836:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a83a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801a83e:	f7e8 f90d 	bl	8002a5c <__aeabi_dmul>
 801a842:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a846:	1124      	asrs	r4, r4, #4
 801a848:	2300      	movs	r3, #0
 801a84a:	2602      	movs	r6, #2
 801a84c:	2c00      	cmp	r4, #0
 801a84e:	f040 80b2 	bne.w	801a9b6 <_dtoa_r+0x4fe>
 801a852:	2b00      	cmp	r3, #0
 801a854:	d1d3      	bne.n	801a7fe <_dtoa_r+0x346>
 801a856:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801a858:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801a85c:	2b00      	cmp	r3, #0
 801a85e:	f000 80b7 	beq.w	801a9d0 <_dtoa_r+0x518>
 801a862:	4b86      	ldr	r3, [pc, #536]	@ (801aa7c <_dtoa_r+0x5c4>)
 801a864:	2200      	movs	r2, #0
 801a866:	4620      	mov	r0, r4
 801a868:	4629      	mov	r1, r5
 801a86a:	f7e8 fb69 	bl	8002f40 <__aeabi_dcmplt>
 801a86e:	2800      	cmp	r0, #0
 801a870:	f000 80ae 	beq.w	801a9d0 <_dtoa_r+0x518>
 801a874:	9b07      	ldr	r3, [sp, #28]
 801a876:	2b00      	cmp	r3, #0
 801a878:	f000 80aa 	beq.w	801a9d0 <_dtoa_r+0x518>
 801a87c:	9b00      	ldr	r3, [sp, #0]
 801a87e:	2b00      	cmp	r3, #0
 801a880:	dd37      	ble.n	801a8f2 <_dtoa_r+0x43a>
 801a882:	1e7b      	subs	r3, r7, #1
 801a884:	9304      	str	r3, [sp, #16]
 801a886:	4620      	mov	r0, r4
 801a888:	4b7d      	ldr	r3, [pc, #500]	@ (801aa80 <_dtoa_r+0x5c8>)
 801a88a:	2200      	movs	r2, #0
 801a88c:	4629      	mov	r1, r5
 801a88e:	f7e8 f8e5 	bl	8002a5c <__aeabi_dmul>
 801a892:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a896:	9c00      	ldr	r4, [sp, #0]
 801a898:	3601      	adds	r6, #1
 801a89a:	4630      	mov	r0, r6
 801a89c:	f7e8 f874 	bl	8002988 <__aeabi_i2d>
 801a8a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a8a4:	f7e8 f8da 	bl	8002a5c <__aeabi_dmul>
 801a8a8:	4b76      	ldr	r3, [pc, #472]	@ (801aa84 <_dtoa_r+0x5cc>)
 801a8aa:	2200      	movs	r2, #0
 801a8ac:	f7e7 ff20 	bl	80026f0 <__adddf3>
 801a8b0:	4605      	mov	r5, r0
 801a8b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801a8b6:	2c00      	cmp	r4, #0
 801a8b8:	f040 808d 	bne.w	801a9d6 <_dtoa_r+0x51e>
 801a8bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a8c0:	4b71      	ldr	r3, [pc, #452]	@ (801aa88 <_dtoa_r+0x5d0>)
 801a8c2:	2200      	movs	r2, #0
 801a8c4:	f7e7 ff12 	bl	80026ec <__aeabi_dsub>
 801a8c8:	4602      	mov	r2, r0
 801a8ca:	460b      	mov	r3, r1
 801a8cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801a8d0:	462a      	mov	r2, r5
 801a8d2:	4633      	mov	r3, r6
 801a8d4:	f7e8 fb52 	bl	8002f7c <__aeabi_dcmpgt>
 801a8d8:	2800      	cmp	r0, #0
 801a8da:	f040 828b 	bne.w	801adf4 <_dtoa_r+0x93c>
 801a8de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a8e2:	462a      	mov	r2, r5
 801a8e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801a8e8:	f7e8 fb2a 	bl	8002f40 <__aeabi_dcmplt>
 801a8ec:	2800      	cmp	r0, #0
 801a8ee:	f040 8128 	bne.w	801ab42 <_dtoa_r+0x68a>
 801a8f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801a8f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801a8fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801a8fc:	2b00      	cmp	r3, #0
 801a8fe:	f2c0 815a 	blt.w	801abb6 <_dtoa_r+0x6fe>
 801a902:	2f0e      	cmp	r7, #14
 801a904:	f300 8157 	bgt.w	801abb6 <_dtoa_r+0x6fe>
 801a908:	4b5a      	ldr	r3, [pc, #360]	@ (801aa74 <_dtoa_r+0x5bc>)
 801a90a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801a90e:	ed93 7b00 	vldr	d7, [r3]
 801a912:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a914:	2b00      	cmp	r3, #0
 801a916:	ed8d 7b00 	vstr	d7, [sp]
 801a91a:	da03      	bge.n	801a924 <_dtoa_r+0x46c>
 801a91c:	9b07      	ldr	r3, [sp, #28]
 801a91e:	2b00      	cmp	r3, #0
 801a920:	f340 8101 	ble.w	801ab26 <_dtoa_r+0x66e>
 801a924:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801a928:	4656      	mov	r6, sl
 801a92a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a92e:	4620      	mov	r0, r4
 801a930:	4629      	mov	r1, r5
 801a932:	f7e8 f9bd 	bl	8002cb0 <__aeabi_ddiv>
 801a936:	f7e8 fb41 	bl	8002fbc <__aeabi_d2iz>
 801a93a:	4680      	mov	r8, r0
 801a93c:	f7e8 f824 	bl	8002988 <__aeabi_i2d>
 801a940:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a944:	f7e8 f88a 	bl	8002a5c <__aeabi_dmul>
 801a948:	4602      	mov	r2, r0
 801a94a:	460b      	mov	r3, r1
 801a94c:	4620      	mov	r0, r4
 801a94e:	4629      	mov	r1, r5
 801a950:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801a954:	f7e7 feca 	bl	80026ec <__aeabi_dsub>
 801a958:	f806 4b01 	strb.w	r4, [r6], #1
 801a95c:	9d07      	ldr	r5, [sp, #28]
 801a95e:	eba6 040a 	sub.w	r4, r6, sl
 801a962:	42a5      	cmp	r5, r4
 801a964:	4602      	mov	r2, r0
 801a966:	460b      	mov	r3, r1
 801a968:	f040 8117 	bne.w	801ab9a <_dtoa_r+0x6e2>
 801a96c:	f7e7 fec0 	bl	80026f0 <__adddf3>
 801a970:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a974:	4604      	mov	r4, r0
 801a976:	460d      	mov	r5, r1
 801a978:	f7e8 fb00 	bl	8002f7c <__aeabi_dcmpgt>
 801a97c:	2800      	cmp	r0, #0
 801a97e:	f040 80f9 	bne.w	801ab74 <_dtoa_r+0x6bc>
 801a982:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a986:	4620      	mov	r0, r4
 801a988:	4629      	mov	r1, r5
 801a98a:	f7e8 facf 	bl	8002f2c <__aeabi_dcmpeq>
 801a98e:	b118      	cbz	r0, 801a998 <_dtoa_r+0x4e0>
 801a990:	f018 0f01 	tst.w	r8, #1
 801a994:	f040 80ee 	bne.w	801ab74 <_dtoa_r+0x6bc>
 801a998:	4649      	mov	r1, r9
 801a99a:	4658      	mov	r0, fp
 801a99c:	f001 fa6a 	bl	801be74 <_Bfree>
 801a9a0:	2300      	movs	r3, #0
 801a9a2:	7033      	strb	r3, [r6, #0]
 801a9a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a9a6:	3701      	adds	r7, #1
 801a9a8:	601f      	str	r7, [r3, #0]
 801a9aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801a9ac:	2b00      	cmp	r3, #0
 801a9ae:	f000 831d 	beq.w	801afec <_dtoa_r+0xb34>
 801a9b2:	601e      	str	r6, [r3, #0]
 801a9b4:	e31a      	b.n	801afec <_dtoa_r+0xb34>
 801a9b6:	07e2      	lsls	r2, r4, #31
 801a9b8:	d505      	bpl.n	801a9c6 <_dtoa_r+0x50e>
 801a9ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a9be:	f7e8 f84d 	bl	8002a5c <__aeabi_dmul>
 801a9c2:	3601      	adds	r6, #1
 801a9c4:	2301      	movs	r3, #1
 801a9c6:	1064      	asrs	r4, r4, #1
 801a9c8:	3508      	adds	r5, #8
 801a9ca:	e73f      	b.n	801a84c <_dtoa_r+0x394>
 801a9cc:	2602      	movs	r6, #2
 801a9ce:	e742      	b.n	801a856 <_dtoa_r+0x39e>
 801a9d0:	9c07      	ldr	r4, [sp, #28]
 801a9d2:	9704      	str	r7, [sp, #16]
 801a9d4:	e761      	b.n	801a89a <_dtoa_r+0x3e2>
 801a9d6:	4b27      	ldr	r3, [pc, #156]	@ (801aa74 <_dtoa_r+0x5bc>)
 801a9d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801a9da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a9de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801a9e2:	4454      	add	r4, sl
 801a9e4:	2900      	cmp	r1, #0
 801a9e6:	d053      	beq.n	801aa90 <_dtoa_r+0x5d8>
 801a9e8:	4928      	ldr	r1, [pc, #160]	@ (801aa8c <_dtoa_r+0x5d4>)
 801a9ea:	2000      	movs	r0, #0
 801a9ec:	f7e8 f960 	bl	8002cb0 <__aeabi_ddiv>
 801a9f0:	4633      	mov	r3, r6
 801a9f2:	462a      	mov	r2, r5
 801a9f4:	f7e7 fe7a 	bl	80026ec <__aeabi_dsub>
 801a9f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801a9fc:	4656      	mov	r6, sl
 801a9fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801aa02:	f7e8 fadb 	bl	8002fbc <__aeabi_d2iz>
 801aa06:	4605      	mov	r5, r0
 801aa08:	f7e7 ffbe 	bl	8002988 <__aeabi_i2d>
 801aa0c:	4602      	mov	r2, r0
 801aa0e:	460b      	mov	r3, r1
 801aa10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801aa14:	f7e7 fe6a 	bl	80026ec <__aeabi_dsub>
 801aa18:	3530      	adds	r5, #48	@ 0x30
 801aa1a:	4602      	mov	r2, r0
 801aa1c:	460b      	mov	r3, r1
 801aa1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801aa22:	f806 5b01 	strb.w	r5, [r6], #1
 801aa26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801aa2a:	f7e8 fa89 	bl	8002f40 <__aeabi_dcmplt>
 801aa2e:	2800      	cmp	r0, #0
 801aa30:	d171      	bne.n	801ab16 <_dtoa_r+0x65e>
 801aa32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801aa36:	4911      	ldr	r1, [pc, #68]	@ (801aa7c <_dtoa_r+0x5c4>)
 801aa38:	2000      	movs	r0, #0
 801aa3a:	f7e7 fe57 	bl	80026ec <__aeabi_dsub>
 801aa3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801aa42:	f7e8 fa7d 	bl	8002f40 <__aeabi_dcmplt>
 801aa46:	2800      	cmp	r0, #0
 801aa48:	f040 8095 	bne.w	801ab76 <_dtoa_r+0x6be>
 801aa4c:	42a6      	cmp	r6, r4
 801aa4e:	f43f af50 	beq.w	801a8f2 <_dtoa_r+0x43a>
 801aa52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801aa56:	4b0a      	ldr	r3, [pc, #40]	@ (801aa80 <_dtoa_r+0x5c8>)
 801aa58:	2200      	movs	r2, #0
 801aa5a:	f7e7 ffff 	bl	8002a5c <__aeabi_dmul>
 801aa5e:	4b08      	ldr	r3, [pc, #32]	@ (801aa80 <_dtoa_r+0x5c8>)
 801aa60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801aa64:	2200      	movs	r2, #0
 801aa66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801aa6a:	f7e7 fff7 	bl	8002a5c <__aeabi_dmul>
 801aa6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801aa72:	e7c4      	b.n	801a9fe <_dtoa_r+0x546>
 801aa74:	0801f268 	.word	0x0801f268
 801aa78:	0801f240 	.word	0x0801f240
 801aa7c:	3ff00000 	.word	0x3ff00000
 801aa80:	40240000 	.word	0x40240000
 801aa84:	401c0000 	.word	0x401c0000
 801aa88:	40140000 	.word	0x40140000
 801aa8c:	3fe00000 	.word	0x3fe00000
 801aa90:	4631      	mov	r1, r6
 801aa92:	4628      	mov	r0, r5
 801aa94:	f7e7 ffe2 	bl	8002a5c <__aeabi_dmul>
 801aa98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801aa9c:	9415      	str	r4, [sp, #84]	@ 0x54
 801aa9e:	4656      	mov	r6, sl
 801aaa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801aaa4:	f7e8 fa8a 	bl	8002fbc <__aeabi_d2iz>
 801aaa8:	4605      	mov	r5, r0
 801aaaa:	f7e7 ff6d 	bl	8002988 <__aeabi_i2d>
 801aaae:	4602      	mov	r2, r0
 801aab0:	460b      	mov	r3, r1
 801aab2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801aab6:	f7e7 fe19 	bl	80026ec <__aeabi_dsub>
 801aaba:	3530      	adds	r5, #48	@ 0x30
 801aabc:	f806 5b01 	strb.w	r5, [r6], #1
 801aac0:	4602      	mov	r2, r0
 801aac2:	460b      	mov	r3, r1
 801aac4:	42a6      	cmp	r6, r4
 801aac6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801aaca:	f04f 0200 	mov.w	r2, #0
 801aace:	d124      	bne.n	801ab1a <_dtoa_r+0x662>
 801aad0:	4bac      	ldr	r3, [pc, #688]	@ (801ad84 <_dtoa_r+0x8cc>)
 801aad2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801aad6:	f7e7 fe0b 	bl	80026f0 <__adddf3>
 801aada:	4602      	mov	r2, r0
 801aadc:	460b      	mov	r3, r1
 801aade:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801aae2:	f7e8 fa4b 	bl	8002f7c <__aeabi_dcmpgt>
 801aae6:	2800      	cmp	r0, #0
 801aae8:	d145      	bne.n	801ab76 <_dtoa_r+0x6be>
 801aaea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801aaee:	49a5      	ldr	r1, [pc, #660]	@ (801ad84 <_dtoa_r+0x8cc>)
 801aaf0:	2000      	movs	r0, #0
 801aaf2:	f7e7 fdfb 	bl	80026ec <__aeabi_dsub>
 801aaf6:	4602      	mov	r2, r0
 801aaf8:	460b      	mov	r3, r1
 801aafa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801aafe:	f7e8 fa1f 	bl	8002f40 <__aeabi_dcmplt>
 801ab02:	2800      	cmp	r0, #0
 801ab04:	f43f aef5 	beq.w	801a8f2 <_dtoa_r+0x43a>
 801ab08:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801ab0a:	1e73      	subs	r3, r6, #1
 801ab0c:	9315      	str	r3, [sp, #84]	@ 0x54
 801ab0e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801ab12:	2b30      	cmp	r3, #48	@ 0x30
 801ab14:	d0f8      	beq.n	801ab08 <_dtoa_r+0x650>
 801ab16:	9f04      	ldr	r7, [sp, #16]
 801ab18:	e73e      	b.n	801a998 <_dtoa_r+0x4e0>
 801ab1a:	4b9b      	ldr	r3, [pc, #620]	@ (801ad88 <_dtoa_r+0x8d0>)
 801ab1c:	f7e7 ff9e 	bl	8002a5c <__aeabi_dmul>
 801ab20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ab24:	e7bc      	b.n	801aaa0 <_dtoa_r+0x5e8>
 801ab26:	d10c      	bne.n	801ab42 <_dtoa_r+0x68a>
 801ab28:	4b98      	ldr	r3, [pc, #608]	@ (801ad8c <_dtoa_r+0x8d4>)
 801ab2a:	2200      	movs	r2, #0
 801ab2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ab30:	f7e7 ff94 	bl	8002a5c <__aeabi_dmul>
 801ab34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ab38:	f7e8 fa16 	bl	8002f68 <__aeabi_dcmpge>
 801ab3c:	2800      	cmp	r0, #0
 801ab3e:	f000 8157 	beq.w	801adf0 <_dtoa_r+0x938>
 801ab42:	2400      	movs	r4, #0
 801ab44:	4625      	mov	r5, r4
 801ab46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ab48:	43db      	mvns	r3, r3
 801ab4a:	9304      	str	r3, [sp, #16]
 801ab4c:	4656      	mov	r6, sl
 801ab4e:	2700      	movs	r7, #0
 801ab50:	4621      	mov	r1, r4
 801ab52:	4658      	mov	r0, fp
 801ab54:	f001 f98e 	bl	801be74 <_Bfree>
 801ab58:	2d00      	cmp	r5, #0
 801ab5a:	d0dc      	beq.n	801ab16 <_dtoa_r+0x65e>
 801ab5c:	b12f      	cbz	r7, 801ab6a <_dtoa_r+0x6b2>
 801ab5e:	42af      	cmp	r7, r5
 801ab60:	d003      	beq.n	801ab6a <_dtoa_r+0x6b2>
 801ab62:	4639      	mov	r1, r7
 801ab64:	4658      	mov	r0, fp
 801ab66:	f001 f985 	bl	801be74 <_Bfree>
 801ab6a:	4629      	mov	r1, r5
 801ab6c:	4658      	mov	r0, fp
 801ab6e:	f001 f981 	bl	801be74 <_Bfree>
 801ab72:	e7d0      	b.n	801ab16 <_dtoa_r+0x65e>
 801ab74:	9704      	str	r7, [sp, #16]
 801ab76:	4633      	mov	r3, r6
 801ab78:	461e      	mov	r6, r3
 801ab7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ab7e:	2a39      	cmp	r2, #57	@ 0x39
 801ab80:	d107      	bne.n	801ab92 <_dtoa_r+0x6da>
 801ab82:	459a      	cmp	sl, r3
 801ab84:	d1f8      	bne.n	801ab78 <_dtoa_r+0x6c0>
 801ab86:	9a04      	ldr	r2, [sp, #16]
 801ab88:	3201      	adds	r2, #1
 801ab8a:	9204      	str	r2, [sp, #16]
 801ab8c:	2230      	movs	r2, #48	@ 0x30
 801ab8e:	f88a 2000 	strb.w	r2, [sl]
 801ab92:	781a      	ldrb	r2, [r3, #0]
 801ab94:	3201      	adds	r2, #1
 801ab96:	701a      	strb	r2, [r3, #0]
 801ab98:	e7bd      	b.n	801ab16 <_dtoa_r+0x65e>
 801ab9a:	4b7b      	ldr	r3, [pc, #492]	@ (801ad88 <_dtoa_r+0x8d0>)
 801ab9c:	2200      	movs	r2, #0
 801ab9e:	f7e7 ff5d 	bl	8002a5c <__aeabi_dmul>
 801aba2:	2200      	movs	r2, #0
 801aba4:	2300      	movs	r3, #0
 801aba6:	4604      	mov	r4, r0
 801aba8:	460d      	mov	r5, r1
 801abaa:	f7e8 f9bf 	bl	8002f2c <__aeabi_dcmpeq>
 801abae:	2800      	cmp	r0, #0
 801abb0:	f43f aebb 	beq.w	801a92a <_dtoa_r+0x472>
 801abb4:	e6f0      	b.n	801a998 <_dtoa_r+0x4e0>
 801abb6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801abb8:	2a00      	cmp	r2, #0
 801abba:	f000 80db 	beq.w	801ad74 <_dtoa_r+0x8bc>
 801abbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801abc0:	2a01      	cmp	r2, #1
 801abc2:	f300 80bf 	bgt.w	801ad44 <_dtoa_r+0x88c>
 801abc6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801abc8:	2a00      	cmp	r2, #0
 801abca:	f000 80b7 	beq.w	801ad3c <_dtoa_r+0x884>
 801abce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801abd2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801abd4:	4646      	mov	r6, r8
 801abd6:	9a08      	ldr	r2, [sp, #32]
 801abd8:	2101      	movs	r1, #1
 801abda:	441a      	add	r2, r3
 801abdc:	4658      	mov	r0, fp
 801abde:	4498      	add	r8, r3
 801abe0:	9208      	str	r2, [sp, #32]
 801abe2:	f001 fa45 	bl	801c070 <__i2b>
 801abe6:	4605      	mov	r5, r0
 801abe8:	b15e      	cbz	r6, 801ac02 <_dtoa_r+0x74a>
 801abea:	9b08      	ldr	r3, [sp, #32]
 801abec:	2b00      	cmp	r3, #0
 801abee:	dd08      	ble.n	801ac02 <_dtoa_r+0x74a>
 801abf0:	42b3      	cmp	r3, r6
 801abf2:	9a08      	ldr	r2, [sp, #32]
 801abf4:	bfa8      	it	ge
 801abf6:	4633      	movge	r3, r6
 801abf8:	eba8 0803 	sub.w	r8, r8, r3
 801abfc:	1af6      	subs	r6, r6, r3
 801abfe:	1ad3      	subs	r3, r2, r3
 801ac00:	9308      	str	r3, [sp, #32]
 801ac02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ac04:	b1f3      	cbz	r3, 801ac44 <_dtoa_r+0x78c>
 801ac06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ac08:	2b00      	cmp	r3, #0
 801ac0a:	f000 80b7 	beq.w	801ad7c <_dtoa_r+0x8c4>
 801ac0e:	b18c      	cbz	r4, 801ac34 <_dtoa_r+0x77c>
 801ac10:	4629      	mov	r1, r5
 801ac12:	4622      	mov	r2, r4
 801ac14:	4658      	mov	r0, fp
 801ac16:	f001 faeb 	bl	801c1f0 <__pow5mult>
 801ac1a:	464a      	mov	r2, r9
 801ac1c:	4601      	mov	r1, r0
 801ac1e:	4605      	mov	r5, r0
 801ac20:	4658      	mov	r0, fp
 801ac22:	f001 fa3b 	bl	801c09c <__multiply>
 801ac26:	4649      	mov	r1, r9
 801ac28:	9004      	str	r0, [sp, #16]
 801ac2a:	4658      	mov	r0, fp
 801ac2c:	f001 f922 	bl	801be74 <_Bfree>
 801ac30:	9b04      	ldr	r3, [sp, #16]
 801ac32:	4699      	mov	r9, r3
 801ac34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ac36:	1b1a      	subs	r2, r3, r4
 801ac38:	d004      	beq.n	801ac44 <_dtoa_r+0x78c>
 801ac3a:	4649      	mov	r1, r9
 801ac3c:	4658      	mov	r0, fp
 801ac3e:	f001 fad7 	bl	801c1f0 <__pow5mult>
 801ac42:	4681      	mov	r9, r0
 801ac44:	2101      	movs	r1, #1
 801ac46:	4658      	mov	r0, fp
 801ac48:	f001 fa12 	bl	801c070 <__i2b>
 801ac4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ac4e:	4604      	mov	r4, r0
 801ac50:	2b00      	cmp	r3, #0
 801ac52:	f000 81cf 	beq.w	801aff4 <_dtoa_r+0xb3c>
 801ac56:	461a      	mov	r2, r3
 801ac58:	4601      	mov	r1, r0
 801ac5a:	4658      	mov	r0, fp
 801ac5c:	f001 fac8 	bl	801c1f0 <__pow5mult>
 801ac60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ac62:	2b01      	cmp	r3, #1
 801ac64:	4604      	mov	r4, r0
 801ac66:	f300 8095 	bgt.w	801ad94 <_dtoa_r+0x8dc>
 801ac6a:	9b02      	ldr	r3, [sp, #8]
 801ac6c:	2b00      	cmp	r3, #0
 801ac6e:	f040 8087 	bne.w	801ad80 <_dtoa_r+0x8c8>
 801ac72:	9b03      	ldr	r3, [sp, #12]
 801ac74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ac78:	2b00      	cmp	r3, #0
 801ac7a:	f040 8089 	bne.w	801ad90 <_dtoa_r+0x8d8>
 801ac7e:	9b03      	ldr	r3, [sp, #12]
 801ac80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801ac84:	0d1b      	lsrs	r3, r3, #20
 801ac86:	051b      	lsls	r3, r3, #20
 801ac88:	b12b      	cbz	r3, 801ac96 <_dtoa_r+0x7de>
 801ac8a:	9b08      	ldr	r3, [sp, #32]
 801ac8c:	3301      	adds	r3, #1
 801ac8e:	9308      	str	r3, [sp, #32]
 801ac90:	f108 0801 	add.w	r8, r8, #1
 801ac94:	2301      	movs	r3, #1
 801ac96:	930a      	str	r3, [sp, #40]	@ 0x28
 801ac98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ac9a:	2b00      	cmp	r3, #0
 801ac9c:	f000 81b0 	beq.w	801b000 <_dtoa_r+0xb48>
 801aca0:	6923      	ldr	r3, [r4, #16]
 801aca2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801aca6:	6918      	ldr	r0, [r3, #16]
 801aca8:	f001 f996 	bl	801bfd8 <__hi0bits>
 801acac:	f1c0 0020 	rsb	r0, r0, #32
 801acb0:	9b08      	ldr	r3, [sp, #32]
 801acb2:	4418      	add	r0, r3
 801acb4:	f010 001f 	ands.w	r0, r0, #31
 801acb8:	d077      	beq.n	801adaa <_dtoa_r+0x8f2>
 801acba:	f1c0 0320 	rsb	r3, r0, #32
 801acbe:	2b04      	cmp	r3, #4
 801acc0:	dd6b      	ble.n	801ad9a <_dtoa_r+0x8e2>
 801acc2:	9b08      	ldr	r3, [sp, #32]
 801acc4:	f1c0 001c 	rsb	r0, r0, #28
 801acc8:	4403      	add	r3, r0
 801acca:	4480      	add	r8, r0
 801accc:	4406      	add	r6, r0
 801acce:	9308      	str	r3, [sp, #32]
 801acd0:	f1b8 0f00 	cmp.w	r8, #0
 801acd4:	dd05      	ble.n	801ace2 <_dtoa_r+0x82a>
 801acd6:	4649      	mov	r1, r9
 801acd8:	4642      	mov	r2, r8
 801acda:	4658      	mov	r0, fp
 801acdc:	f001 fae2 	bl	801c2a4 <__lshift>
 801ace0:	4681      	mov	r9, r0
 801ace2:	9b08      	ldr	r3, [sp, #32]
 801ace4:	2b00      	cmp	r3, #0
 801ace6:	dd05      	ble.n	801acf4 <_dtoa_r+0x83c>
 801ace8:	4621      	mov	r1, r4
 801acea:	461a      	mov	r2, r3
 801acec:	4658      	mov	r0, fp
 801acee:	f001 fad9 	bl	801c2a4 <__lshift>
 801acf2:	4604      	mov	r4, r0
 801acf4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801acf6:	2b00      	cmp	r3, #0
 801acf8:	d059      	beq.n	801adae <_dtoa_r+0x8f6>
 801acfa:	4621      	mov	r1, r4
 801acfc:	4648      	mov	r0, r9
 801acfe:	f001 fb3d 	bl	801c37c <__mcmp>
 801ad02:	2800      	cmp	r0, #0
 801ad04:	da53      	bge.n	801adae <_dtoa_r+0x8f6>
 801ad06:	1e7b      	subs	r3, r7, #1
 801ad08:	9304      	str	r3, [sp, #16]
 801ad0a:	4649      	mov	r1, r9
 801ad0c:	2300      	movs	r3, #0
 801ad0e:	220a      	movs	r2, #10
 801ad10:	4658      	mov	r0, fp
 801ad12:	f001 f8d1 	bl	801beb8 <__multadd>
 801ad16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ad18:	4681      	mov	r9, r0
 801ad1a:	2b00      	cmp	r3, #0
 801ad1c:	f000 8172 	beq.w	801b004 <_dtoa_r+0xb4c>
 801ad20:	2300      	movs	r3, #0
 801ad22:	4629      	mov	r1, r5
 801ad24:	220a      	movs	r2, #10
 801ad26:	4658      	mov	r0, fp
 801ad28:	f001 f8c6 	bl	801beb8 <__multadd>
 801ad2c:	9b00      	ldr	r3, [sp, #0]
 801ad2e:	2b00      	cmp	r3, #0
 801ad30:	4605      	mov	r5, r0
 801ad32:	dc67      	bgt.n	801ae04 <_dtoa_r+0x94c>
 801ad34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ad36:	2b02      	cmp	r3, #2
 801ad38:	dc41      	bgt.n	801adbe <_dtoa_r+0x906>
 801ad3a:	e063      	b.n	801ae04 <_dtoa_r+0x94c>
 801ad3c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ad3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801ad42:	e746      	b.n	801abd2 <_dtoa_r+0x71a>
 801ad44:	9b07      	ldr	r3, [sp, #28]
 801ad46:	1e5c      	subs	r4, r3, #1
 801ad48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ad4a:	42a3      	cmp	r3, r4
 801ad4c:	bfbf      	itttt	lt
 801ad4e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801ad50:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801ad52:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801ad54:	1ae3      	sublt	r3, r4, r3
 801ad56:	bfb4      	ite	lt
 801ad58:	18d2      	addlt	r2, r2, r3
 801ad5a:	1b1c      	subge	r4, r3, r4
 801ad5c:	9b07      	ldr	r3, [sp, #28]
 801ad5e:	bfbc      	itt	lt
 801ad60:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801ad62:	2400      	movlt	r4, #0
 801ad64:	2b00      	cmp	r3, #0
 801ad66:	bfb5      	itete	lt
 801ad68:	eba8 0603 	sublt.w	r6, r8, r3
 801ad6c:	9b07      	ldrge	r3, [sp, #28]
 801ad6e:	2300      	movlt	r3, #0
 801ad70:	4646      	movge	r6, r8
 801ad72:	e730      	b.n	801abd6 <_dtoa_r+0x71e>
 801ad74:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801ad76:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801ad78:	4646      	mov	r6, r8
 801ad7a:	e735      	b.n	801abe8 <_dtoa_r+0x730>
 801ad7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ad7e:	e75c      	b.n	801ac3a <_dtoa_r+0x782>
 801ad80:	2300      	movs	r3, #0
 801ad82:	e788      	b.n	801ac96 <_dtoa_r+0x7de>
 801ad84:	3fe00000 	.word	0x3fe00000
 801ad88:	40240000 	.word	0x40240000
 801ad8c:	40140000 	.word	0x40140000
 801ad90:	9b02      	ldr	r3, [sp, #8]
 801ad92:	e780      	b.n	801ac96 <_dtoa_r+0x7de>
 801ad94:	2300      	movs	r3, #0
 801ad96:	930a      	str	r3, [sp, #40]	@ 0x28
 801ad98:	e782      	b.n	801aca0 <_dtoa_r+0x7e8>
 801ad9a:	d099      	beq.n	801acd0 <_dtoa_r+0x818>
 801ad9c:	9a08      	ldr	r2, [sp, #32]
 801ad9e:	331c      	adds	r3, #28
 801ada0:	441a      	add	r2, r3
 801ada2:	4498      	add	r8, r3
 801ada4:	441e      	add	r6, r3
 801ada6:	9208      	str	r2, [sp, #32]
 801ada8:	e792      	b.n	801acd0 <_dtoa_r+0x818>
 801adaa:	4603      	mov	r3, r0
 801adac:	e7f6      	b.n	801ad9c <_dtoa_r+0x8e4>
 801adae:	9b07      	ldr	r3, [sp, #28]
 801adb0:	9704      	str	r7, [sp, #16]
 801adb2:	2b00      	cmp	r3, #0
 801adb4:	dc20      	bgt.n	801adf8 <_dtoa_r+0x940>
 801adb6:	9300      	str	r3, [sp, #0]
 801adb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801adba:	2b02      	cmp	r3, #2
 801adbc:	dd1e      	ble.n	801adfc <_dtoa_r+0x944>
 801adbe:	9b00      	ldr	r3, [sp, #0]
 801adc0:	2b00      	cmp	r3, #0
 801adc2:	f47f aec0 	bne.w	801ab46 <_dtoa_r+0x68e>
 801adc6:	4621      	mov	r1, r4
 801adc8:	2205      	movs	r2, #5
 801adca:	4658      	mov	r0, fp
 801adcc:	f001 f874 	bl	801beb8 <__multadd>
 801add0:	4601      	mov	r1, r0
 801add2:	4604      	mov	r4, r0
 801add4:	4648      	mov	r0, r9
 801add6:	f001 fad1 	bl	801c37c <__mcmp>
 801adda:	2800      	cmp	r0, #0
 801addc:	f77f aeb3 	ble.w	801ab46 <_dtoa_r+0x68e>
 801ade0:	4656      	mov	r6, sl
 801ade2:	2331      	movs	r3, #49	@ 0x31
 801ade4:	f806 3b01 	strb.w	r3, [r6], #1
 801ade8:	9b04      	ldr	r3, [sp, #16]
 801adea:	3301      	adds	r3, #1
 801adec:	9304      	str	r3, [sp, #16]
 801adee:	e6ae      	b.n	801ab4e <_dtoa_r+0x696>
 801adf0:	9c07      	ldr	r4, [sp, #28]
 801adf2:	9704      	str	r7, [sp, #16]
 801adf4:	4625      	mov	r5, r4
 801adf6:	e7f3      	b.n	801ade0 <_dtoa_r+0x928>
 801adf8:	9b07      	ldr	r3, [sp, #28]
 801adfa:	9300      	str	r3, [sp, #0]
 801adfc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801adfe:	2b00      	cmp	r3, #0
 801ae00:	f000 8104 	beq.w	801b00c <_dtoa_r+0xb54>
 801ae04:	2e00      	cmp	r6, #0
 801ae06:	dd05      	ble.n	801ae14 <_dtoa_r+0x95c>
 801ae08:	4629      	mov	r1, r5
 801ae0a:	4632      	mov	r2, r6
 801ae0c:	4658      	mov	r0, fp
 801ae0e:	f001 fa49 	bl	801c2a4 <__lshift>
 801ae12:	4605      	mov	r5, r0
 801ae14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ae16:	2b00      	cmp	r3, #0
 801ae18:	d05a      	beq.n	801aed0 <_dtoa_r+0xa18>
 801ae1a:	6869      	ldr	r1, [r5, #4]
 801ae1c:	4658      	mov	r0, fp
 801ae1e:	f000 ffe9 	bl	801bdf4 <_Balloc>
 801ae22:	4606      	mov	r6, r0
 801ae24:	b928      	cbnz	r0, 801ae32 <_dtoa_r+0x97a>
 801ae26:	4b84      	ldr	r3, [pc, #528]	@ (801b038 <_dtoa_r+0xb80>)
 801ae28:	4602      	mov	r2, r0
 801ae2a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801ae2e:	f7ff bb5a 	b.w	801a4e6 <_dtoa_r+0x2e>
 801ae32:	692a      	ldr	r2, [r5, #16]
 801ae34:	3202      	adds	r2, #2
 801ae36:	0092      	lsls	r2, r2, #2
 801ae38:	f105 010c 	add.w	r1, r5, #12
 801ae3c:	300c      	adds	r0, #12
 801ae3e:	f7ff fa75 	bl	801a32c <memcpy>
 801ae42:	2201      	movs	r2, #1
 801ae44:	4631      	mov	r1, r6
 801ae46:	4658      	mov	r0, fp
 801ae48:	f001 fa2c 	bl	801c2a4 <__lshift>
 801ae4c:	f10a 0301 	add.w	r3, sl, #1
 801ae50:	9307      	str	r3, [sp, #28]
 801ae52:	9b00      	ldr	r3, [sp, #0]
 801ae54:	4453      	add	r3, sl
 801ae56:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ae58:	9b02      	ldr	r3, [sp, #8]
 801ae5a:	f003 0301 	and.w	r3, r3, #1
 801ae5e:	462f      	mov	r7, r5
 801ae60:	930a      	str	r3, [sp, #40]	@ 0x28
 801ae62:	4605      	mov	r5, r0
 801ae64:	9b07      	ldr	r3, [sp, #28]
 801ae66:	4621      	mov	r1, r4
 801ae68:	3b01      	subs	r3, #1
 801ae6a:	4648      	mov	r0, r9
 801ae6c:	9300      	str	r3, [sp, #0]
 801ae6e:	f7ff fa9b 	bl	801a3a8 <quorem>
 801ae72:	4639      	mov	r1, r7
 801ae74:	9002      	str	r0, [sp, #8]
 801ae76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801ae7a:	4648      	mov	r0, r9
 801ae7c:	f001 fa7e 	bl	801c37c <__mcmp>
 801ae80:	462a      	mov	r2, r5
 801ae82:	9008      	str	r0, [sp, #32]
 801ae84:	4621      	mov	r1, r4
 801ae86:	4658      	mov	r0, fp
 801ae88:	f001 fa94 	bl	801c3b4 <__mdiff>
 801ae8c:	68c2      	ldr	r2, [r0, #12]
 801ae8e:	4606      	mov	r6, r0
 801ae90:	bb02      	cbnz	r2, 801aed4 <_dtoa_r+0xa1c>
 801ae92:	4601      	mov	r1, r0
 801ae94:	4648      	mov	r0, r9
 801ae96:	f001 fa71 	bl	801c37c <__mcmp>
 801ae9a:	4602      	mov	r2, r0
 801ae9c:	4631      	mov	r1, r6
 801ae9e:	4658      	mov	r0, fp
 801aea0:	920e      	str	r2, [sp, #56]	@ 0x38
 801aea2:	f000 ffe7 	bl	801be74 <_Bfree>
 801aea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aea8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801aeaa:	9e07      	ldr	r6, [sp, #28]
 801aeac:	ea43 0102 	orr.w	r1, r3, r2
 801aeb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801aeb2:	4319      	orrs	r1, r3
 801aeb4:	d110      	bne.n	801aed8 <_dtoa_r+0xa20>
 801aeb6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801aeba:	d029      	beq.n	801af10 <_dtoa_r+0xa58>
 801aebc:	9b08      	ldr	r3, [sp, #32]
 801aebe:	2b00      	cmp	r3, #0
 801aec0:	dd02      	ble.n	801aec8 <_dtoa_r+0xa10>
 801aec2:	9b02      	ldr	r3, [sp, #8]
 801aec4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801aec8:	9b00      	ldr	r3, [sp, #0]
 801aeca:	f883 8000 	strb.w	r8, [r3]
 801aece:	e63f      	b.n	801ab50 <_dtoa_r+0x698>
 801aed0:	4628      	mov	r0, r5
 801aed2:	e7bb      	b.n	801ae4c <_dtoa_r+0x994>
 801aed4:	2201      	movs	r2, #1
 801aed6:	e7e1      	b.n	801ae9c <_dtoa_r+0x9e4>
 801aed8:	9b08      	ldr	r3, [sp, #32]
 801aeda:	2b00      	cmp	r3, #0
 801aedc:	db04      	blt.n	801aee8 <_dtoa_r+0xa30>
 801aede:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801aee0:	430b      	orrs	r3, r1
 801aee2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801aee4:	430b      	orrs	r3, r1
 801aee6:	d120      	bne.n	801af2a <_dtoa_r+0xa72>
 801aee8:	2a00      	cmp	r2, #0
 801aeea:	dded      	ble.n	801aec8 <_dtoa_r+0xa10>
 801aeec:	4649      	mov	r1, r9
 801aeee:	2201      	movs	r2, #1
 801aef0:	4658      	mov	r0, fp
 801aef2:	f001 f9d7 	bl	801c2a4 <__lshift>
 801aef6:	4621      	mov	r1, r4
 801aef8:	4681      	mov	r9, r0
 801aefa:	f001 fa3f 	bl	801c37c <__mcmp>
 801aefe:	2800      	cmp	r0, #0
 801af00:	dc03      	bgt.n	801af0a <_dtoa_r+0xa52>
 801af02:	d1e1      	bne.n	801aec8 <_dtoa_r+0xa10>
 801af04:	f018 0f01 	tst.w	r8, #1
 801af08:	d0de      	beq.n	801aec8 <_dtoa_r+0xa10>
 801af0a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801af0e:	d1d8      	bne.n	801aec2 <_dtoa_r+0xa0a>
 801af10:	9a00      	ldr	r2, [sp, #0]
 801af12:	2339      	movs	r3, #57	@ 0x39
 801af14:	7013      	strb	r3, [r2, #0]
 801af16:	4633      	mov	r3, r6
 801af18:	461e      	mov	r6, r3
 801af1a:	3b01      	subs	r3, #1
 801af1c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801af20:	2a39      	cmp	r2, #57	@ 0x39
 801af22:	d052      	beq.n	801afca <_dtoa_r+0xb12>
 801af24:	3201      	adds	r2, #1
 801af26:	701a      	strb	r2, [r3, #0]
 801af28:	e612      	b.n	801ab50 <_dtoa_r+0x698>
 801af2a:	2a00      	cmp	r2, #0
 801af2c:	dd07      	ble.n	801af3e <_dtoa_r+0xa86>
 801af2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801af32:	d0ed      	beq.n	801af10 <_dtoa_r+0xa58>
 801af34:	9a00      	ldr	r2, [sp, #0]
 801af36:	f108 0301 	add.w	r3, r8, #1
 801af3a:	7013      	strb	r3, [r2, #0]
 801af3c:	e608      	b.n	801ab50 <_dtoa_r+0x698>
 801af3e:	9b07      	ldr	r3, [sp, #28]
 801af40:	9a07      	ldr	r2, [sp, #28]
 801af42:	f803 8c01 	strb.w	r8, [r3, #-1]
 801af46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801af48:	4293      	cmp	r3, r2
 801af4a:	d028      	beq.n	801af9e <_dtoa_r+0xae6>
 801af4c:	4649      	mov	r1, r9
 801af4e:	2300      	movs	r3, #0
 801af50:	220a      	movs	r2, #10
 801af52:	4658      	mov	r0, fp
 801af54:	f000 ffb0 	bl	801beb8 <__multadd>
 801af58:	42af      	cmp	r7, r5
 801af5a:	4681      	mov	r9, r0
 801af5c:	f04f 0300 	mov.w	r3, #0
 801af60:	f04f 020a 	mov.w	r2, #10
 801af64:	4639      	mov	r1, r7
 801af66:	4658      	mov	r0, fp
 801af68:	d107      	bne.n	801af7a <_dtoa_r+0xac2>
 801af6a:	f000 ffa5 	bl	801beb8 <__multadd>
 801af6e:	4607      	mov	r7, r0
 801af70:	4605      	mov	r5, r0
 801af72:	9b07      	ldr	r3, [sp, #28]
 801af74:	3301      	adds	r3, #1
 801af76:	9307      	str	r3, [sp, #28]
 801af78:	e774      	b.n	801ae64 <_dtoa_r+0x9ac>
 801af7a:	f000 ff9d 	bl	801beb8 <__multadd>
 801af7e:	4629      	mov	r1, r5
 801af80:	4607      	mov	r7, r0
 801af82:	2300      	movs	r3, #0
 801af84:	220a      	movs	r2, #10
 801af86:	4658      	mov	r0, fp
 801af88:	f000 ff96 	bl	801beb8 <__multadd>
 801af8c:	4605      	mov	r5, r0
 801af8e:	e7f0      	b.n	801af72 <_dtoa_r+0xaba>
 801af90:	9b00      	ldr	r3, [sp, #0]
 801af92:	2b00      	cmp	r3, #0
 801af94:	bfcc      	ite	gt
 801af96:	461e      	movgt	r6, r3
 801af98:	2601      	movle	r6, #1
 801af9a:	4456      	add	r6, sl
 801af9c:	2700      	movs	r7, #0
 801af9e:	4649      	mov	r1, r9
 801afa0:	2201      	movs	r2, #1
 801afa2:	4658      	mov	r0, fp
 801afa4:	f001 f97e 	bl	801c2a4 <__lshift>
 801afa8:	4621      	mov	r1, r4
 801afaa:	4681      	mov	r9, r0
 801afac:	f001 f9e6 	bl	801c37c <__mcmp>
 801afb0:	2800      	cmp	r0, #0
 801afb2:	dcb0      	bgt.n	801af16 <_dtoa_r+0xa5e>
 801afb4:	d102      	bne.n	801afbc <_dtoa_r+0xb04>
 801afb6:	f018 0f01 	tst.w	r8, #1
 801afba:	d1ac      	bne.n	801af16 <_dtoa_r+0xa5e>
 801afbc:	4633      	mov	r3, r6
 801afbe:	461e      	mov	r6, r3
 801afc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801afc4:	2a30      	cmp	r2, #48	@ 0x30
 801afc6:	d0fa      	beq.n	801afbe <_dtoa_r+0xb06>
 801afc8:	e5c2      	b.n	801ab50 <_dtoa_r+0x698>
 801afca:	459a      	cmp	sl, r3
 801afcc:	d1a4      	bne.n	801af18 <_dtoa_r+0xa60>
 801afce:	9b04      	ldr	r3, [sp, #16]
 801afd0:	3301      	adds	r3, #1
 801afd2:	9304      	str	r3, [sp, #16]
 801afd4:	2331      	movs	r3, #49	@ 0x31
 801afd6:	f88a 3000 	strb.w	r3, [sl]
 801afda:	e5b9      	b.n	801ab50 <_dtoa_r+0x698>
 801afdc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801afde:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801b03c <_dtoa_r+0xb84>
 801afe2:	b11b      	cbz	r3, 801afec <_dtoa_r+0xb34>
 801afe4:	f10a 0308 	add.w	r3, sl, #8
 801afe8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801afea:	6013      	str	r3, [r2, #0]
 801afec:	4650      	mov	r0, sl
 801afee:	b019      	add	sp, #100	@ 0x64
 801aff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aff4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aff6:	2b01      	cmp	r3, #1
 801aff8:	f77f ae37 	ble.w	801ac6a <_dtoa_r+0x7b2>
 801affc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801affe:	930a      	str	r3, [sp, #40]	@ 0x28
 801b000:	2001      	movs	r0, #1
 801b002:	e655      	b.n	801acb0 <_dtoa_r+0x7f8>
 801b004:	9b00      	ldr	r3, [sp, #0]
 801b006:	2b00      	cmp	r3, #0
 801b008:	f77f aed6 	ble.w	801adb8 <_dtoa_r+0x900>
 801b00c:	4656      	mov	r6, sl
 801b00e:	4621      	mov	r1, r4
 801b010:	4648      	mov	r0, r9
 801b012:	f7ff f9c9 	bl	801a3a8 <quorem>
 801b016:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801b01a:	f806 8b01 	strb.w	r8, [r6], #1
 801b01e:	9b00      	ldr	r3, [sp, #0]
 801b020:	eba6 020a 	sub.w	r2, r6, sl
 801b024:	4293      	cmp	r3, r2
 801b026:	ddb3      	ble.n	801af90 <_dtoa_r+0xad8>
 801b028:	4649      	mov	r1, r9
 801b02a:	2300      	movs	r3, #0
 801b02c:	220a      	movs	r2, #10
 801b02e:	4658      	mov	r0, fp
 801b030:	f000 ff42 	bl	801beb8 <__multadd>
 801b034:	4681      	mov	r9, r0
 801b036:	e7ea      	b.n	801b00e <_dtoa_r+0xb56>
 801b038:	0801f153 	.word	0x0801f153
 801b03c:	0801f0ee 	.word	0x0801f0ee

0801b040 <_free_r>:
 801b040:	b538      	push	{r3, r4, r5, lr}
 801b042:	4605      	mov	r5, r0
 801b044:	2900      	cmp	r1, #0
 801b046:	d041      	beq.n	801b0cc <_free_r+0x8c>
 801b048:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b04c:	1f0c      	subs	r4, r1, #4
 801b04e:	2b00      	cmp	r3, #0
 801b050:	bfb8      	it	lt
 801b052:	18e4      	addlt	r4, r4, r3
 801b054:	f7fe f86e 	bl	8019134 <__malloc_lock>
 801b058:	4a1d      	ldr	r2, [pc, #116]	@ (801b0d0 <_free_r+0x90>)
 801b05a:	6813      	ldr	r3, [r2, #0]
 801b05c:	b933      	cbnz	r3, 801b06c <_free_r+0x2c>
 801b05e:	6063      	str	r3, [r4, #4]
 801b060:	6014      	str	r4, [r2, #0]
 801b062:	4628      	mov	r0, r5
 801b064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b068:	f7fe b86a 	b.w	8019140 <__malloc_unlock>
 801b06c:	42a3      	cmp	r3, r4
 801b06e:	d908      	bls.n	801b082 <_free_r+0x42>
 801b070:	6820      	ldr	r0, [r4, #0]
 801b072:	1821      	adds	r1, r4, r0
 801b074:	428b      	cmp	r3, r1
 801b076:	bf01      	itttt	eq
 801b078:	6819      	ldreq	r1, [r3, #0]
 801b07a:	685b      	ldreq	r3, [r3, #4]
 801b07c:	1809      	addeq	r1, r1, r0
 801b07e:	6021      	streq	r1, [r4, #0]
 801b080:	e7ed      	b.n	801b05e <_free_r+0x1e>
 801b082:	461a      	mov	r2, r3
 801b084:	685b      	ldr	r3, [r3, #4]
 801b086:	b10b      	cbz	r3, 801b08c <_free_r+0x4c>
 801b088:	42a3      	cmp	r3, r4
 801b08a:	d9fa      	bls.n	801b082 <_free_r+0x42>
 801b08c:	6811      	ldr	r1, [r2, #0]
 801b08e:	1850      	adds	r0, r2, r1
 801b090:	42a0      	cmp	r0, r4
 801b092:	d10b      	bne.n	801b0ac <_free_r+0x6c>
 801b094:	6820      	ldr	r0, [r4, #0]
 801b096:	4401      	add	r1, r0
 801b098:	1850      	adds	r0, r2, r1
 801b09a:	4283      	cmp	r3, r0
 801b09c:	6011      	str	r1, [r2, #0]
 801b09e:	d1e0      	bne.n	801b062 <_free_r+0x22>
 801b0a0:	6818      	ldr	r0, [r3, #0]
 801b0a2:	685b      	ldr	r3, [r3, #4]
 801b0a4:	6053      	str	r3, [r2, #4]
 801b0a6:	4408      	add	r0, r1
 801b0a8:	6010      	str	r0, [r2, #0]
 801b0aa:	e7da      	b.n	801b062 <_free_r+0x22>
 801b0ac:	d902      	bls.n	801b0b4 <_free_r+0x74>
 801b0ae:	230c      	movs	r3, #12
 801b0b0:	602b      	str	r3, [r5, #0]
 801b0b2:	e7d6      	b.n	801b062 <_free_r+0x22>
 801b0b4:	6820      	ldr	r0, [r4, #0]
 801b0b6:	1821      	adds	r1, r4, r0
 801b0b8:	428b      	cmp	r3, r1
 801b0ba:	bf04      	itt	eq
 801b0bc:	6819      	ldreq	r1, [r3, #0]
 801b0be:	685b      	ldreq	r3, [r3, #4]
 801b0c0:	6063      	str	r3, [r4, #4]
 801b0c2:	bf04      	itt	eq
 801b0c4:	1809      	addeq	r1, r1, r0
 801b0c6:	6021      	streq	r1, [r4, #0]
 801b0c8:	6054      	str	r4, [r2, #4]
 801b0ca:	e7ca      	b.n	801b062 <_free_r+0x22>
 801b0cc:	bd38      	pop	{r3, r4, r5, pc}
 801b0ce:	bf00      	nop
 801b0d0:	200079f8 	.word	0x200079f8

0801b0d4 <rshift>:
 801b0d4:	6903      	ldr	r3, [r0, #16]
 801b0d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801b0da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b0de:	ea4f 1261 	mov.w	r2, r1, asr #5
 801b0e2:	f100 0414 	add.w	r4, r0, #20
 801b0e6:	dd45      	ble.n	801b174 <rshift+0xa0>
 801b0e8:	f011 011f 	ands.w	r1, r1, #31
 801b0ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801b0f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801b0f4:	d10c      	bne.n	801b110 <rshift+0x3c>
 801b0f6:	f100 0710 	add.w	r7, r0, #16
 801b0fa:	4629      	mov	r1, r5
 801b0fc:	42b1      	cmp	r1, r6
 801b0fe:	d334      	bcc.n	801b16a <rshift+0x96>
 801b100:	1a9b      	subs	r3, r3, r2
 801b102:	009b      	lsls	r3, r3, #2
 801b104:	1eea      	subs	r2, r5, #3
 801b106:	4296      	cmp	r6, r2
 801b108:	bf38      	it	cc
 801b10a:	2300      	movcc	r3, #0
 801b10c:	4423      	add	r3, r4
 801b10e:	e015      	b.n	801b13c <rshift+0x68>
 801b110:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801b114:	f1c1 0820 	rsb	r8, r1, #32
 801b118:	40cf      	lsrs	r7, r1
 801b11a:	f105 0e04 	add.w	lr, r5, #4
 801b11e:	46a1      	mov	r9, r4
 801b120:	4576      	cmp	r6, lr
 801b122:	46f4      	mov	ip, lr
 801b124:	d815      	bhi.n	801b152 <rshift+0x7e>
 801b126:	1a9a      	subs	r2, r3, r2
 801b128:	0092      	lsls	r2, r2, #2
 801b12a:	3a04      	subs	r2, #4
 801b12c:	3501      	adds	r5, #1
 801b12e:	42ae      	cmp	r6, r5
 801b130:	bf38      	it	cc
 801b132:	2200      	movcc	r2, #0
 801b134:	18a3      	adds	r3, r4, r2
 801b136:	50a7      	str	r7, [r4, r2]
 801b138:	b107      	cbz	r7, 801b13c <rshift+0x68>
 801b13a:	3304      	adds	r3, #4
 801b13c:	1b1a      	subs	r2, r3, r4
 801b13e:	42a3      	cmp	r3, r4
 801b140:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801b144:	bf08      	it	eq
 801b146:	2300      	moveq	r3, #0
 801b148:	6102      	str	r2, [r0, #16]
 801b14a:	bf08      	it	eq
 801b14c:	6143      	streq	r3, [r0, #20]
 801b14e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b152:	f8dc c000 	ldr.w	ip, [ip]
 801b156:	fa0c fc08 	lsl.w	ip, ip, r8
 801b15a:	ea4c 0707 	orr.w	r7, ip, r7
 801b15e:	f849 7b04 	str.w	r7, [r9], #4
 801b162:	f85e 7b04 	ldr.w	r7, [lr], #4
 801b166:	40cf      	lsrs	r7, r1
 801b168:	e7da      	b.n	801b120 <rshift+0x4c>
 801b16a:	f851 cb04 	ldr.w	ip, [r1], #4
 801b16e:	f847 cf04 	str.w	ip, [r7, #4]!
 801b172:	e7c3      	b.n	801b0fc <rshift+0x28>
 801b174:	4623      	mov	r3, r4
 801b176:	e7e1      	b.n	801b13c <rshift+0x68>

0801b178 <__hexdig_fun>:
 801b178:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801b17c:	2b09      	cmp	r3, #9
 801b17e:	d802      	bhi.n	801b186 <__hexdig_fun+0xe>
 801b180:	3820      	subs	r0, #32
 801b182:	b2c0      	uxtb	r0, r0
 801b184:	4770      	bx	lr
 801b186:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801b18a:	2b05      	cmp	r3, #5
 801b18c:	d801      	bhi.n	801b192 <__hexdig_fun+0x1a>
 801b18e:	3847      	subs	r0, #71	@ 0x47
 801b190:	e7f7      	b.n	801b182 <__hexdig_fun+0xa>
 801b192:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801b196:	2b05      	cmp	r3, #5
 801b198:	d801      	bhi.n	801b19e <__hexdig_fun+0x26>
 801b19a:	3827      	subs	r0, #39	@ 0x27
 801b19c:	e7f1      	b.n	801b182 <__hexdig_fun+0xa>
 801b19e:	2000      	movs	r0, #0
 801b1a0:	4770      	bx	lr
	...

0801b1a4 <__gethex>:
 801b1a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1a8:	b085      	sub	sp, #20
 801b1aa:	468a      	mov	sl, r1
 801b1ac:	9302      	str	r3, [sp, #8]
 801b1ae:	680b      	ldr	r3, [r1, #0]
 801b1b0:	9001      	str	r0, [sp, #4]
 801b1b2:	4690      	mov	r8, r2
 801b1b4:	1c9c      	adds	r4, r3, #2
 801b1b6:	46a1      	mov	r9, r4
 801b1b8:	f814 0b01 	ldrb.w	r0, [r4], #1
 801b1bc:	2830      	cmp	r0, #48	@ 0x30
 801b1be:	d0fa      	beq.n	801b1b6 <__gethex+0x12>
 801b1c0:	eba9 0303 	sub.w	r3, r9, r3
 801b1c4:	f1a3 0b02 	sub.w	fp, r3, #2
 801b1c8:	f7ff ffd6 	bl	801b178 <__hexdig_fun>
 801b1cc:	4605      	mov	r5, r0
 801b1ce:	2800      	cmp	r0, #0
 801b1d0:	d168      	bne.n	801b2a4 <__gethex+0x100>
 801b1d2:	49a0      	ldr	r1, [pc, #640]	@ (801b454 <__gethex+0x2b0>)
 801b1d4:	2201      	movs	r2, #1
 801b1d6:	4648      	mov	r0, r9
 801b1d8:	f7fe ff98 	bl	801a10c <strncmp>
 801b1dc:	4607      	mov	r7, r0
 801b1de:	2800      	cmp	r0, #0
 801b1e0:	d167      	bne.n	801b2b2 <__gethex+0x10e>
 801b1e2:	f899 0001 	ldrb.w	r0, [r9, #1]
 801b1e6:	4626      	mov	r6, r4
 801b1e8:	f7ff ffc6 	bl	801b178 <__hexdig_fun>
 801b1ec:	2800      	cmp	r0, #0
 801b1ee:	d062      	beq.n	801b2b6 <__gethex+0x112>
 801b1f0:	4623      	mov	r3, r4
 801b1f2:	7818      	ldrb	r0, [r3, #0]
 801b1f4:	2830      	cmp	r0, #48	@ 0x30
 801b1f6:	4699      	mov	r9, r3
 801b1f8:	f103 0301 	add.w	r3, r3, #1
 801b1fc:	d0f9      	beq.n	801b1f2 <__gethex+0x4e>
 801b1fe:	f7ff ffbb 	bl	801b178 <__hexdig_fun>
 801b202:	fab0 f580 	clz	r5, r0
 801b206:	096d      	lsrs	r5, r5, #5
 801b208:	f04f 0b01 	mov.w	fp, #1
 801b20c:	464a      	mov	r2, r9
 801b20e:	4616      	mov	r6, r2
 801b210:	3201      	adds	r2, #1
 801b212:	7830      	ldrb	r0, [r6, #0]
 801b214:	f7ff ffb0 	bl	801b178 <__hexdig_fun>
 801b218:	2800      	cmp	r0, #0
 801b21a:	d1f8      	bne.n	801b20e <__gethex+0x6a>
 801b21c:	498d      	ldr	r1, [pc, #564]	@ (801b454 <__gethex+0x2b0>)
 801b21e:	2201      	movs	r2, #1
 801b220:	4630      	mov	r0, r6
 801b222:	f7fe ff73 	bl	801a10c <strncmp>
 801b226:	2800      	cmp	r0, #0
 801b228:	d13f      	bne.n	801b2aa <__gethex+0x106>
 801b22a:	b944      	cbnz	r4, 801b23e <__gethex+0x9a>
 801b22c:	1c74      	adds	r4, r6, #1
 801b22e:	4622      	mov	r2, r4
 801b230:	4616      	mov	r6, r2
 801b232:	3201      	adds	r2, #1
 801b234:	7830      	ldrb	r0, [r6, #0]
 801b236:	f7ff ff9f 	bl	801b178 <__hexdig_fun>
 801b23a:	2800      	cmp	r0, #0
 801b23c:	d1f8      	bne.n	801b230 <__gethex+0x8c>
 801b23e:	1ba4      	subs	r4, r4, r6
 801b240:	00a7      	lsls	r7, r4, #2
 801b242:	7833      	ldrb	r3, [r6, #0]
 801b244:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801b248:	2b50      	cmp	r3, #80	@ 0x50
 801b24a:	d13e      	bne.n	801b2ca <__gethex+0x126>
 801b24c:	7873      	ldrb	r3, [r6, #1]
 801b24e:	2b2b      	cmp	r3, #43	@ 0x2b
 801b250:	d033      	beq.n	801b2ba <__gethex+0x116>
 801b252:	2b2d      	cmp	r3, #45	@ 0x2d
 801b254:	d034      	beq.n	801b2c0 <__gethex+0x11c>
 801b256:	1c71      	adds	r1, r6, #1
 801b258:	2400      	movs	r4, #0
 801b25a:	7808      	ldrb	r0, [r1, #0]
 801b25c:	f7ff ff8c 	bl	801b178 <__hexdig_fun>
 801b260:	1e43      	subs	r3, r0, #1
 801b262:	b2db      	uxtb	r3, r3
 801b264:	2b18      	cmp	r3, #24
 801b266:	d830      	bhi.n	801b2ca <__gethex+0x126>
 801b268:	f1a0 0210 	sub.w	r2, r0, #16
 801b26c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801b270:	f7ff ff82 	bl	801b178 <__hexdig_fun>
 801b274:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 801b278:	fa5f fc8c 	uxtb.w	ip, ip
 801b27c:	f1bc 0f18 	cmp.w	ip, #24
 801b280:	f04f 030a 	mov.w	r3, #10
 801b284:	d91e      	bls.n	801b2c4 <__gethex+0x120>
 801b286:	b104      	cbz	r4, 801b28a <__gethex+0xe6>
 801b288:	4252      	negs	r2, r2
 801b28a:	4417      	add	r7, r2
 801b28c:	f8ca 1000 	str.w	r1, [sl]
 801b290:	b1ed      	cbz	r5, 801b2ce <__gethex+0x12a>
 801b292:	f1bb 0f00 	cmp.w	fp, #0
 801b296:	bf0c      	ite	eq
 801b298:	2506      	moveq	r5, #6
 801b29a:	2500      	movne	r5, #0
 801b29c:	4628      	mov	r0, r5
 801b29e:	b005      	add	sp, #20
 801b2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2a4:	2500      	movs	r5, #0
 801b2a6:	462c      	mov	r4, r5
 801b2a8:	e7b0      	b.n	801b20c <__gethex+0x68>
 801b2aa:	2c00      	cmp	r4, #0
 801b2ac:	d1c7      	bne.n	801b23e <__gethex+0x9a>
 801b2ae:	4627      	mov	r7, r4
 801b2b0:	e7c7      	b.n	801b242 <__gethex+0x9e>
 801b2b2:	464e      	mov	r6, r9
 801b2b4:	462f      	mov	r7, r5
 801b2b6:	2501      	movs	r5, #1
 801b2b8:	e7c3      	b.n	801b242 <__gethex+0x9e>
 801b2ba:	2400      	movs	r4, #0
 801b2bc:	1cb1      	adds	r1, r6, #2
 801b2be:	e7cc      	b.n	801b25a <__gethex+0xb6>
 801b2c0:	2401      	movs	r4, #1
 801b2c2:	e7fb      	b.n	801b2bc <__gethex+0x118>
 801b2c4:	fb03 0002 	mla	r0, r3, r2, r0
 801b2c8:	e7ce      	b.n	801b268 <__gethex+0xc4>
 801b2ca:	4631      	mov	r1, r6
 801b2cc:	e7de      	b.n	801b28c <__gethex+0xe8>
 801b2ce:	eba6 0309 	sub.w	r3, r6, r9
 801b2d2:	3b01      	subs	r3, #1
 801b2d4:	4629      	mov	r1, r5
 801b2d6:	2b07      	cmp	r3, #7
 801b2d8:	dc0a      	bgt.n	801b2f0 <__gethex+0x14c>
 801b2da:	9801      	ldr	r0, [sp, #4]
 801b2dc:	f000 fd8a 	bl	801bdf4 <_Balloc>
 801b2e0:	4604      	mov	r4, r0
 801b2e2:	b940      	cbnz	r0, 801b2f6 <__gethex+0x152>
 801b2e4:	4b5c      	ldr	r3, [pc, #368]	@ (801b458 <__gethex+0x2b4>)
 801b2e6:	4602      	mov	r2, r0
 801b2e8:	21e4      	movs	r1, #228	@ 0xe4
 801b2ea:	485c      	ldr	r0, [pc, #368]	@ (801b45c <__gethex+0x2b8>)
 801b2ec:	f7ff f83e 	bl	801a36c <__assert_func>
 801b2f0:	3101      	adds	r1, #1
 801b2f2:	105b      	asrs	r3, r3, #1
 801b2f4:	e7ef      	b.n	801b2d6 <__gethex+0x132>
 801b2f6:	f100 0a14 	add.w	sl, r0, #20
 801b2fa:	2300      	movs	r3, #0
 801b2fc:	4655      	mov	r5, sl
 801b2fe:	469b      	mov	fp, r3
 801b300:	45b1      	cmp	r9, r6
 801b302:	d337      	bcc.n	801b374 <__gethex+0x1d0>
 801b304:	f845 bb04 	str.w	fp, [r5], #4
 801b308:	eba5 050a 	sub.w	r5, r5, sl
 801b30c:	10ad      	asrs	r5, r5, #2
 801b30e:	6125      	str	r5, [r4, #16]
 801b310:	4658      	mov	r0, fp
 801b312:	f000 fe61 	bl	801bfd8 <__hi0bits>
 801b316:	016d      	lsls	r5, r5, #5
 801b318:	f8d8 6000 	ldr.w	r6, [r8]
 801b31c:	1a2d      	subs	r5, r5, r0
 801b31e:	42b5      	cmp	r5, r6
 801b320:	dd54      	ble.n	801b3cc <__gethex+0x228>
 801b322:	1bad      	subs	r5, r5, r6
 801b324:	4629      	mov	r1, r5
 801b326:	4620      	mov	r0, r4
 801b328:	f001 f9f5 	bl	801c716 <__any_on>
 801b32c:	4681      	mov	r9, r0
 801b32e:	b178      	cbz	r0, 801b350 <__gethex+0x1ac>
 801b330:	1e6b      	subs	r3, r5, #1
 801b332:	1159      	asrs	r1, r3, #5
 801b334:	f003 021f 	and.w	r2, r3, #31
 801b338:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801b33c:	f04f 0901 	mov.w	r9, #1
 801b340:	fa09 f202 	lsl.w	r2, r9, r2
 801b344:	420a      	tst	r2, r1
 801b346:	d003      	beq.n	801b350 <__gethex+0x1ac>
 801b348:	454b      	cmp	r3, r9
 801b34a:	dc36      	bgt.n	801b3ba <__gethex+0x216>
 801b34c:	f04f 0902 	mov.w	r9, #2
 801b350:	4629      	mov	r1, r5
 801b352:	4620      	mov	r0, r4
 801b354:	f7ff febe 	bl	801b0d4 <rshift>
 801b358:	442f      	add	r7, r5
 801b35a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b35e:	42bb      	cmp	r3, r7
 801b360:	da42      	bge.n	801b3e8 <__gethex+0x244>
 801b362:	9801      	ldr	r0, [sp, #4]
 801b364:	4621      	mov	r1, r4
 801b366:	f000 fd85 	bl	801be74 <_Bfree>
 801b36a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b36c:	2300      	movs	r3, #0
 801b36e:	6013      	str	r3, [r2, #0]
 801b370:	25a3      	movs	r5, #163	@ 0xa3
 801b372:	e793      	b.n	801b29c <__gethex+0xf8>
 801b374:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801b378:	2a2e      	cmp	r2, #46	@ 0x2e
 801b37a:	d012      	beq.n	801b3a2 <__gethex+0x1fe>
 801b37c:	2b20      	cmp	r3, #32
 801b37e:	d104      	bne.n	801b38a <__gethex+0x1e6>
 801b380:	f845 bb04 	str.w	fp, [r5], #4
 801b384:	f04f 0b00 	mov.w	fp, #0
 801b388:	465b      	mov	r3, fp
 801b38a:	7830      	ldrb	r0, [r6, #0]
 801b38c:	9303      	str	r3, [sp, #12]
 801b38e:	f7ff fef3 	bl	801b178 <__hexdig_fun>
 801b392:	9b03      	ldr	r3, [sp, #12]
 801b394:	f000 000f 	and.w	r0, r0, #15
 801b398:	4098      	lsls	r0, r3
 801b39a:	ea4b 0b00 	orr.w	fp, fp, r0
 801b39e:	3304      	adds	r3, #4
 801b3a0:	e7ae      	b.n	801b300 <__gethex+0x15c>
 801b3a2:	45b1      	cmp	r9, r6
 801b3a4:	d8ea      	bhi.n	801b37c <__gethex+0x1d8>
 801b3a6:	492b      	ldr	r1, [pc, #172]	@ (801b454 <__gethex+0x2b0>)
 801b3a8:	9303      	str	r3, [sp, #12]
 801b3aa:	2201      	movs	r2, #1
 801b3ac:	4630      	mov	r0, r6
 801b3ae:	f7fe fead 	bl	801a10c <strncmp>
 801b3b2:	9b03      	ldr	r3, [sp, #12]
 801b3b4:	2800      	cmp	r0, #0
 801b3b6:	d1e1      	bne.n	801b37c <__gethex+0x1d8>
 801b3b8:	e7a2      	b.n	801b300 <__gethex+0x15c>
 801b3ba:	1ea9      	subs	r1, r5, #2
 801b3bc:	4620      	mov	r0, r4
 801b3be:	f001 f9aa 	bl	801c716 <__any_on>
 801b3c2:	2800      	cmp	r0, #0
 801b3c4:	d0c2      	beq.n	801b34c <__gethex+0x1a8>
 801b3c6:	f04f 0903 	mov.w	r9, #3
 801b3ca:	e7c1      	b.n	801b350 <__gethex+0x1ac>
 801b3cc:	da09      	bge.n	801b3e2 <__gethex+0x23e>
 801b3ce:	1b75      	subs	r5, r6, r5
 801b3d0:	4621      	mov	r1, r4
 801b3d2:	9801      	ldr	r0, [sp, #4]
 801b3d4:	462a      	mov	r2, r5
 801b3d6:	f000 ff65 	bl	801c2a4 <__lshift>
 801b3da:	1b7f      	subs	r7, r7, r5
 801b3dc:	4604      	mov	r4, r0
 801b3de:	f100 0a14 	add.w	sl, r0, #20
 801b3e2:	f04f 0900 	mov.w	r9, #0
 801b3e6:	e7b8      	b.n	801b35a <__gethex+0x1b6>
 801b3e8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801b3ec:	42bd      	cmp	r5, r7
 801b3ee:	dd6f      	ble.n	801b4d0 <__gethex+0x32c>
 801b3f0:	1bed      	subs	r5, r5, r7
 801b3f2:	42ae      	cmp	r6, r5
 801b3f4:	dc34      	bgt.n	801b460 <__gethex+0x2bc>
 801b3f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b3fa:	2b02      	cmp	r3, #2
 801b3fc:	d022      	beq.n	801b444 <__gethex+0x2a0>
 801b3fe:	2b03      	cmp	r3, #3
 801b400:	d024      	beq.n	801b44c <__gethex+0x2a8>
 801b402:	2b01      	cmp	r3, #1
 801b404:	d115      	bne.n	801b432 <__gethex+0x28e>
 801b406:	42ae      	cmp	r6, r5
 801b408:	d113      	bne.n	801b432 <__gethex+0x28e>
 801b40a:	2e01      	cmp	r6, #1
 801b40c:	d10b      	bne.n	801b426 <__gethex+0x282>
 801b40e:	9a02      	ldr	r2, [sp, #8]
 801b410:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b414:	6013      	str	r3, [r2, #0]
 801b416:	2301      	movs	r3, #1
 801b418:	6123      	str	r3, [r4, #16]
 801b41a:	f8ca 3000 	str.w	r3, [sl]
 801b41e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b420:	2562      	movs	r5, #98	@ 0x62
 801b422:	601c      	str	r4, [r3, #0]
 801b424:	e73a      	b.n	801b29c <__gethex+0xf8>
 801b426:	1e71      	subs	r1, r6, #1
 801b428:	4620      	mov	r0, r4
 801b42a:	f001 f974 	bl	801c716 <__any_on>
 801b42e:	2800      	cmp	r0, #0
 801b430:	d1ed      	bne.n	801b40e <__gethex+0x26a>
 801b432:	9801      	ldr	r0, [sp, #4]
 801b434:	4621      	mov	r1, r4
 801b436:	f000 fd1d 	bl	801be74 <_Bfree>
 801b43a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b43c:	2300      	movs	r3, #0
 801b43e:	6013      	str	r3, [r2, #0]
 801b440:	2550      	movs	r5, #80	@ 0x50
 801b442:	e72b      	b.n	801b29c <__gethex+0xf8>
 801b444:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b446:	2b00      	cmp	r3, #0
 801b448:	d1f3      	bne.n	801b432 <__gethex+0x28e>
 801b44a:	e7e0      	b.n	801b40e <__gethex+0x26a>
 801b44c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b44e:	2b00      	cmp	r3, #0
 801b450:	d1dd      	bne.n	801b40e <__gethex+0x26a>
 801b452:	e7ee      	b.n	801b432 <__gethex+0x28e>
 801b454:	0801eee5 	.word	0x0801eee5
 801b458:	0801f153 	.word	0x0801f153
 801b45c:	0801f164 	.word	0x0801f164
 801b460:	1e6f      	subs	r7, r5, #1
 801b462:	f1b9 0f00 	cmp.w	r9, #0
 801b466:	d130      	bne.n	801b4ca <__gethex+0x326>
 801b468:	b127      	cbz	r7, 801b474 <__gethex+0x2d0>
 801b46a:	4639      	mov	r1, r7
 801b46c:	4620      	mov	r0, r4
 801b46e:	f001 f952 	bl	801c716 <__any_on>
 801b472:	4681      	mov	r9, r0
 801b474:	117a      	asrs	r2, r7, #5
 801b476:	2301      	movs	r3, #1
 801b478:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801b47c:	f007 071f 	and.w	r7, r7, #31
 801b480:	40bb      	lsls	r3, r7
 801b482:	4213      	tst	r3, r2
 801b484:	4629      	mov	r1, r5
 801b486:	4620      	mov	r0, r4
 801b488:	bf18      	it	ne
 801b48a:	f049 0902 	orrne.w	r9, r9, #2
 801b48e:	f7ff fe21 	bl	801b0d4 <rshift>
 801b492:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801b496:	1b76      	subs	r6, r6, r5
 801b498:	2502      	movs	r5, #2
 801b49a:	f1b9 0f00 	cmp.w	r9, #0
 801b49e:	d047      	beq.n	801b530 <__gethex+0x38c>
 801b4a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b4a4:	2b02      	cmp	r3, #2
 801b4a6:	d015      	beq.n	801b4d4 <__gethex+0x330>
 801b4a8:	2b03      	cmp	r3, #3
 801b4aa:	d017      	beq.n	801b4dc <__gethex+0x338>
 801b4ac:	2b01      	cmp	r3, #1
 801b4ae:	d109      	bne.n	801b4c4 <__gethex+0x320>
 801b4b0:	f019 0f02 	tst.w	r9, #2
 801b4b4:	d006      	beq.n	801b4c4 <__gethex+0x320>
 801b4b6:	f8da 3000 	ldr.w	r3, [sl]
 801b4ba:	ea49 0903 	orr.w	r9, r9, r3
 801b4be:	f019 0f01 	tst.w	r9, #1
 801b4c2:	d10e      	bne.n	801b4e2 <__gethex+0x33e>
 801b4c4:	f045 0510 	orr.w	r5, r5, #16
 801b4c8:	e032      	b.n	801b530 <__gethex+0x38c>
 801b4ca:	f04f 0901 	mov.w	r9, #1
 801b4ce:	e7d1      	b.n	801b474 <__gethex+0x2d0>
 801b4d0:	2501      	movs	r5, #1
 801b4d2:	e7e2      	b.n	801b49a <__gethex+0x2f6>
 801b4d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b4d6:	f1c3 0301 	rsb	r3, r3, #1
 801b4da:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b4dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b4de:	2b00      	cmp	r3, #0
 801b4e0:	d0f0      	beq.n	801b4c4 <__gethex+0x320>
 801b4e2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801b4e6:	f104 0314 	add.w	r3, r4, #20
 801b4ea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801b4ee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801b4f2:	f04f 0c00 	mov.w	ip, #0
 801b4f6:	4618      	mov	r0, r3
 801b4f8:	f853 2b04 	ldr.w	r2, [r3], #4
 801b4fc:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801b500:	d01b      	beq.n	801b53a <__gethex+0x396>
 801b502:	3201      	adds	r2, #1
 801b504:	6002      	str	r2, [r0, #0]
 801b506:	2d02      	cmp	r5, #2
 801b508:	f104 0314 	add.w	r3, r4, #20
 801b50c:	d13c      	bne.n	801b588 <__gethex+0x3e4>
 801b50e:	f8d8 2000 	ldr.w	r2, [r8]
 801b512:	3a01      	subs	r2, #1
 801b514:	42b2      	cmp	r2, r6
 801b516:	d109      	bne.n	801b52c <__gethex+0x388>
 801b518:	1171      	asrs	r1, r6, #5
 801b51a:	2201      	movs	r2, #1
 801b51c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b520:	f006 061f 	and.w	r6, r6, #31
 801b524:	fa02 f606 	lsl.w	r6, r2, r6
 801b528:	421e      	tst	r6, r3
 801b52a:	d13a      	bne.n	801b5a2 <__gethex+0x3fe>
 801b52c:	f045 0520 	orr.w	r5, r5, #32
 801b530:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b532:	601c      	str	r4, [r3, #0]
 801b534:	9b02      	ldr	r3, [sp, #8]
 801b536:	601f      	str	r7, [r3, #0]
 801b538:	e6b0      	b.n	801b29c <__gethex+0xf8>
 801b53a:	4299      	cmp	r1, r3
 801b53c:	f843 cc04 	str.w	ip, [r3, #-4]
 801b540:	d8d9      	bhi.n	801b4f6 <__gethex+0x352>
 801b542:	68a3      	ldr	r3, [r4, #8]
 801b544:	459b      	cmp	fp, r3
 801b546:	db17      	blt.n	801b578 <__gethex+0x3d4>
 801b548:	6861      	ldr	r1, [r4, #4]
 801b54a:	9801      	ldr	r0, [sp, #4]
 801b54c:	3101      	adds	r1, #1
 801b54e:	f000 fc51 	bl	801bdf4 <_Balloc>
 801b552:	4681      	mov	r9, r0
 801b554:	b918      	cbnz	r0, 801b55e <__gethex+0x3ba>
 801b556:	4b1a      	ldr	r3, [pc, #104]	@ (801b5c0 <__gethex+0x41c>)
 801b558:	4602      	mov	r2, r0
 801b55a:	2184      	movs	r1, #132	@ 0x84
 801b55c:	e6c5      	b.n	801b2ea <__gethex+0x146>
 801b55e:	6922      	ldr	r2, [r4, #16]
 801b560:	3202      	adds	r2, #2
 801b562:	f104 010c 	add.w	r1, r4, #12
 801b566:	0092      	lsls	r2, r2, #2
 801b568:	300c      	adds	r0, #12
 801b56a:	f7fe fedf 	bl	801a32c <memcpy>
 801b56e:	4621      	mov	r1, r4
 801b570:	9801      	ldr	r0, [sp, #4]
 801b572:	f000 fc7f 	bl	801be74 <_Bfree>
 801b576:	464c      	mov	r4, r9
 801b578:	6923      	ldr	r3, [r4, #16]
 801b57a:	1c5a      	adds	r2, r3, #1
 801b57c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801b580:	6122      	str	r2, [r4, #16]
 801b582:	2201      	movs	r2, #1
 801b584:	615a      	str	r2, [r3, #20]
 801b586:	e7be      	b.n	801b506 <__gethex+0x362>
 801b588:	6922      	ldr	r2, [r4, #16]
 801b58a:	455a      	cmp	r2, fp
 801b58c:	dd0b      	ble.n	801b5a6 <__gethex+0x402>
 801b58e:	2101      	movs	r1, #1
 801b590:	4620      	mov	r0, r4
 801b592:	f7ff fd9f 	bl	801b0d4 <rshift>
 801b596:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b59a:	3701      	adds	r7, #1
 801b59c:	42bb      	cmp	r3, r7
 801b59e:	f6ff aee0 	blt.w	801b362 <__gethex+0x1be>
 801b5a2:	2501      	movs	r5, #1
 801b5a4:	e7c2      	b.n	801b52c <__gethex+0x388>
 801b5a6:	f016 061f 	ands.w	r6, r6, #31
 801b5aa:	d0fa      	beq.n	801b5a2 <__gethex+0x3fe>
 801b5ac:	4453      	add	r3, sl
 801b5ae:	f1c6 0620 	rsb	r6, r6, #32
 801b5b2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801b5b6:	f000 fd0f 	bl	801bfd8 <__hi0bits>
 801b5ba:	42b0      	cmp	r0, r6
 801b5bc:	dbe7      	blt.n	801b58e <__gethex+0x3ea>
 801b5be:	e7f0      	b.n	801b5a2 <__gethex+0x3fe>
 801b5c0:	0801f153 	.word	0x0801f153

0801b5c4 <L_shift>:
 801b5c4:	f1c2 0208 	rsb	r2, r2, #8
 801b5c8:	0092      	lsls	r2, r2, #2
 801b5ca:	b570      	push	{r4, r5, r6, lr}
 801b5cc:	f1c2 0620 	rsb	r6, r2, #32
 801b5d0:	6843      	ldr	r3, [r0, #4]
 801b5d2:	6804      	ldr	r4, [r0, #0]
 801b5d4:	fa03 f506 	lsl.w	r5, r3, r6
 801b5d8:	432c      	orrs	r4, r5
 801b5da:	40d3      	lsrs	r3, r2
 801b5dc:	6004      	str	r4, [r0, #0]
 801b5de:	f840 3f04 	str.w	r3, [r0, #4]!
 801b5e2:	4288      	cmp	r0, r1
 801b5e4:	d3f4      	bcc.n	801b5d0 <L_shift+0xc>
 801b5e6:	bd70      	pop	{r4, r5, r6, pc}

0801b5e8 <__match>:
 801b5e8:	b530      	push	{r4, r5, lr}
 801b5ea:	6803      	ldr	r3, [r0, #0]
 801b5ec:	3301      	adds	r3, #1
 801b5ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b5f2:	b914      	cbnz	r4, 801b5fa <__match+0x12>
 801b5f4:	6003      	str	r3, [r0, #0]
 801b5f6:	2001      	movs	r0, #1
 801b5f8:	bd30      	pop	{r4, r5, pc}
 801b5fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b5fe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801b602:	2d19      	cmp	r5, #25
 801b604:	bf98      	it	ls
 801b606:	3220      	addls	r2, #32
 801b608:	42a2      	cmp	r2, r4
 801b60a:	d0f0      	beq.n	801b5ee <__match+0x6>
 801b60c:	2000      	movs	r0, #0
 801b60e:	e7f3      	b.n	801b5f8 <__match+0x10>

0801b610 <__hexnan>:
 801b610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b614:	680b      	ldr	r3, [r1, #0]
 801b616:	6801      	ldr	r1, [r0, #0]
 801b618:	115e      	asrs	r6, r3, #5
 801b61a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801b61e:	f013 031f 	ands.w	r3, r3, #31
 801b622:	b087      	sub	sp, #28
 801b624:	bf18      	it	ne
 801b626:	3604      	addne	r6, #4
 801b628:	2500      	movs	r5, #0
 801b62a:	1f37      	subs	r7, r6, #4
 801b62c:	4682      	mov	sl, r0
 801b62e:	4690      	mov	r8, r2
 801b630:	9301      	str	r3, [sp, #4]
 801b632:	f846 5c04 	str.w	r5, [r6, #-4]
 801b636:	46b9      	mov	r9, r7
 801b638:	463c      	mov	r4, r7
 801b63a:	9502      	str	r5, [sp, #8]
 801b63c:	46ab      	mov	fp, r5
 801b63e:	784a      	ldrb	r2, [r1, #1]
 801b640:	1c4b      	adds	r3, r1, #1
 801b642:	9303      	str	r3, [sp, #12]
 801b644:	b342      	cbz	r2, 801b698 <__hexnan+0x88>
 801b646:	4610      	mov	r0, r2
 801b648:	9105      	str	r1, [sp, #20]
 801b64a:	9204      	str	r2, [sp, #16]
 801b64c:	f7ff fd94 	bl	801b178 <__hexdig_fun>
 801b650:	2800      	cmp	r0, #0
 801b652:	d151      	bne.n	801b6f8 <__hexnan+0xe8>
 801b654:	9a04      	ldr	r2, [sp, #16]
 801b656:	9905      	ldr	r1, [sp, #20]
 801b658:	2a20      	cmp	r2, #32
 801b65a:	d818      	bhi.n	801b68e <__hexnan+0x7e>
 801b65c:	9b02      	ldr	r3, [sp, #8]
 801b65e:	459b      	cmp	fp, r3
 801b660:	dd13      	ble.n	801b68a <__hexnan+0x7a>
 801b662:	454c      	cmp	r4, r9
 801b664:	d206      	bcs.n	801b674 <__hexnan+0x64>
 801b666:	2d07      	cmp	r5, #7
 801b668:	dc04      	bgt.n	801b674 <__hexnan+0x64>
 801b66a:	462a      	mov	r2, r5
 801b66c:	4649      	mov	r1, r9
 801b66e:	4620      	mov	r0, r4
 801b670:	f7ff ffa8 	bl	801b5c4 <L_shift>
 801b674:	4544      	cmp	r4, r8
 801b676:	d952      	bls.n	801b71e <__hexnan+0x10e>
 801b678:	2300      	movs	r3, #0
 801b67a:	f1a4 0904 	sub.w	r9, r4, #4
 801b67e:	f844 3c04 	str.w	r3, [r4, #-4]
 801b682:	f8cd b008 	str.w	fp, [sp, #8]
 801b686:	464c      	mov	r4, r9
 801b688:	461d      	mov	r5, r3
 801b68a:	9903      	ldr	r1, [sp, #12]
 801b68c:	e7d7      	b.n	801b63e <__hexnan+0x2e>
 801b68e:	2a29      	cmp	r2, #41	@ 0x29
 801b690:	d157      	bne.n	801b742 <__hexnan+0x132>
 801b692:	3102      	adds	r1, #2
 801b694:	f8ca 1000 	str.w	r1, [sl]
 801b698:	f1bb 0f00 	cmp.w	fp, #0
 801b69c:	d051      	beq.n	801b742 <__hexnan+0x132>
 801b69e:	454c      	cmp	r4, r9
 801b6a0:	d206      	bcs.n	801b6b0 <__hexnan+0xa0>
 801b6a2:	2d07      	cmp	r5, #7
 801b6a4:	dc04      	bgt.n	801b6b0 <__hexnan+0xa0>
 801b6a6:	462a      	mov	r2, r5
 801b6a8:	4649      	mov	r1, r9
 801b6aa:	4620      	mov	r0, r4
 801b6ac:	f7ff ff8a 	bl	801b5c4 <L_shift>
 801b6b0:	4544      	cmp	r4, r8
 801b6b2:	d936      	bls.n	801b722 <__hexnan+0x112>
 801b6b4:	f1a8 0204 	sub.w	r2, r8, #4
 801b6b8:	4623      	mov	r3, r4
 801b6ba:	f853 1b04 	ldr.w	r1, [r3], #4
 801b6be:	f842 1f04 	str.w	r1, [r2, #4]!
 801b6c2:	429f      	cmp	r7, r3
 801b6c4:	d2f9      	bcs.n	801b6ba <__hexnan+0xaa>
 801b6c6:	1b3b      	subs	r3, r7, r4
 801b6c8:	f023 0303 	bic.w	r3, r3, #3
 801b6cc:	3304      	adds	r3, #4
 801b6ce:	3401      	adds	r4, #1
 801b6d0:	3e03      	subs	r6, #3
 801b6d2:	42b4      	cmp	r4, r6
 801b6d4:	bf88      	it	hi
 801b6d6:	2304      	movhi	r3, #4
 801b6d8:	4443      	add	r3, r8
 801b6da:	2200      	movs	r2, #0
 801b6dc:	f843 2b04 	str.w	r2, [r3], #4
 801b6e0:	429f      	cmp	r7, r3
 801b6e2:	d2fb      	bcs.n	801b6dc <__hexnan+0xcc>
 801b6e4:	683b      	ldr	r3, [r7, #0]
 801b6e6:	b91b      	cbnz	r3, 801b6f0 <__hexnan+0xe0>
 801b6e8:	4547      	cmp	r7, r8
 801b6ea:	d128      	bne.n	801b73e <__hexnan+0x12e>
 801b6ec:	2301      	movs	r3, #1
 801b6ee:	603b      	str	r3, [r7, #0]
 801b6f0:	2005      	movs	r0, #5
 801b6f2:	b007      	add	sp, #28
 801b6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6f8:	3501      	adds	r5, #1
 801b6fa:	2d08      	cmp	r5, #8
 801b6fc:	f10b 0b01 	add.w	fp, fp, #1
 801b700:	dd06      	ble.n	801b710 <__hexnan+0x100>
 801b702:	4544      	cmp	r4, r8
 801b704:	d9c1      	bls.n	801b68a <__hexnan+0x7a>
 801b706:	2300      	movs	r3, #0
 801b708:	f844 3c04 	str.w	r3, [r4, #-4]
 801b70c:	2501      	movs	r5, #1
 801b70e:	3c04      	subs	r4, #4
 801b710:	6822      	ldr	r2, [r4, #0]
 801b712:	f000 000f 	and.w	r0, r0, #15
 801b716:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801b71a:	6020      	str	r0, [r4, #0]
 801b71c:	e7b5      	b.n	801b68a <__hexnan+0x7a>
 801b71e:	2508      	movs	r5, #8
 801b720:	e7b3      	b.n	801b68a <__hexnan+0x7a>
 801b722:	9b01      	ldr	r3, [sp, #4]
 801b724:	2b00      	cmp	r3, #0
 801b726:	d0dd      	beq.n	801b6e4 <__hexnan+0xd4>
 801b728:	f1c3 0320 	rsb	r3, r3, #32
 801b72c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b730:	40da      	lsrs	r2, r3
 801b732:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801b736:	4013      	ands	r3, r2
 801b738:	f846 3c04 	str.w	r3, [r6, #-4]
 801b73c:	e7d2      	b.n	801b6e4 <__hexnan+0xd4>
 801b73e:	3f04      	subs	r7, #4
 801b740:	e7d0      	b.n	801b6e4 <__hexnan+0xd4>
 801b742:	2004      	movs	r0, #4
 801b744:	e7d5      	b.n	801b6f2 <__hexnan+0xe2>

0801b746 <__ssputs_r>:
 801b746:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b74a:	688e      	ldr	r6, [r1, #8]
 801b74c:	461f      	mov	r7, r3
 801b74e:	42be      	cmp	r6, r7
 801b750:	680b      	ldr	r3, [r1, #0]
 801b752:	4682      	mov	sl, r0
 801b754:	460c      	mov	r4, r1
 801b756:	4690      	mov	r8, r2
 801b758:	d82d      	bhi.n	801b7b6 <__ssputs_r+0x70>
 801b75a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b75e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801b762:	d026      	beq.n	801b7b2 <__ssputs_r+0x6c>
 801b764:	6965      	ldr	r5, [r4, #20]
 801b766:	6909      	ldr	r1, [r1, #16]
 801b768:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b76c:	eba3 0901 	sub.w	r9, r3, r1
 801b770:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b774:	1c7b      	adds	r3, r7, #1
 801b776:	444b      	add	r3, r9
 801b778:	106d      	asrs	r5, r5, #1
 801b77a:	429d      	cmp	r5, r3
 801b77c:	bf38      	it	cc
 801b77e:	461d      	movcc	r5, r3
 801b780:	0553      	lsls	r3, r2, #21
 801b782:	d527      	bpl.n	801b7d4 <__ssputs_r+0x8e>
 801b784:	4629      	mov	r1, r5
 801b786:	f7fd f87f 	bl	8018888 <_malloc_r>
 801b78a:	4606      	mov	r6, r0
 801b78c:	b360      	cbz	r0, 801b7e8 <__ssputs_r+0xa2>
 801b78e:	6921      	ldr	r1, [r4, #16]
 801b790:	464a      	mov	r2, r9
 801b792:	f7fe fdcb 	bl	801a32c <memcpy>
 801b796:	89a3      	ldrh	r3, [r4, #12]
 801b798:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801b79c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b7a0:	81a3      	strh	r3, [r4, #12]
 801b7a2:	6126      	str	r6, [r4, #16]
 801b7a4:	6165      	str	r5, [r4, #20]
 801b7a6:	444e      	add	r6, r9
 801b7a8:	eba5 0509 	sub.w	r5, r5, r9
 801b7ac:	6026      	str	r6, [r4, #0]
 801b7ae:	60a5      	str	r5, [r4, #8]
 801b7b0:	463e      	mov	r6, r7
 801b7b2:	42be      	cmp	r6, r7
 801b7b4:	d900      	bls.n	801b7b8 <__ssputs_r+0x72>
 801b7b6:	463e      	mov	r6, r7
 801b7b8:	6820      	ldr	r0, [r4, #0]
 801b7ba:	4632      	mov	r2, r6
 801b7bc:	4641      	mov	r1, r8
 801b7be:	f001 f952 	bl	801ca66 <memmove>
 801b7c2:	68a3      	ldr	r3, [r4, #8]
 801b7c4:	1b9b      	subs	r3, r3, r6
 801b7c6:	60a3      	str	r3, [r4, #8]
 801b7c8:	6823      	ldr	r3, [r4, #0]
 801b7ca:	4433      	add	r3, r6
 801b7cc:	6023      	str	r3, [r4, #0]
 801b7ce:	2000      	movs	r0, #0
 801b7d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b7d4:	462a      	mov	r2, r5
 801b7d6:	f001 f815 	bl	801c804 <_realloc_r>
 801b7da:	4606      	mov	r6, r0
 801b7dc:	2800      	cmp	r0, #0
 801b7de:	d1e0      	bne.n	801b7a2 <__ssputs_r+0x5c>
 801b7e0:	6921      	ldr	r1, [r4, #16]
 801b7e2:	4650      	mov	r0, sl
 801b7e4:	f7ff fc2c 	bl	801b040 <_free_r>
 801b7e8:	230c      	movs	r3, #12
 801b7ea:	f8ca 3000 	str.w	r3, [sl]
 801b7ee:	89a3      	ldrh	r3, [r4, #12]
 801b7f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b7f4:	81a3      	strh	r3, [r4, #12]
 801b7f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b7fa:	e7e9      	b.n	801b7d0 <__ssputs_r+0x8a>

0801b7fc <_svfiprintf_r>:
 801b7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b800:	4698      	mov	r8, r3
 801b802:	898b      	ldrh	r3, [r1, #12]
 801b804:	061b      	lsls	r3, r3, #24
 801b806:	b09d      	sub	sp, #116	@ 0x74
 801b808:	4607      	mov	r7, r0
 801b80a:	460d      	mov	r5, r1
 801b80c:	4614      	mov	r4, r2
 801b80e:	d510      	bpl.n	801b832 <_svfiprintf_r+0x36>
 801b810:	690b      	ldr	r3, [r1, #16]
 801b812:	b973      	cbnz	r3, 801b832 <_svfiprintf_r+0x36>
 801b814:	2140      	movs	r1, #64	@ 0x40
 801b816:	f7fd f837 	bl	8018888 <_malloc_r>
 801b81a:	6028      	str	r0, [r5, #0]
 801b81c:	6128      	str	r0, [r5, #16]
 801b81e:	b930      	cbnz	r0, 801b82e <_svfiprintf_r+0x32>
 801b820:	230c      	movs	r3, #12
 801b822:	603b      	str	r3, [r7, #0]
 801b824:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b828:	b01d      	add	sp, #116	@ 0x74
 801b82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b82e:	2340      	movs	r3, #64	@ 0x40
 801b830:	616b      	str	r3, [r5, #20]
 801b832:	2300      	movs	r3, #0
 801b834:	9309      	str	r3, [sp, #36]	@ 0x24
 801b836:	2320      	movs	r3, #32
 801b838:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b83c:	f8cd 800c 	str.w	r8, [sp, #12]
 801b840:	2330      	movs	r3, #48	@ 0x30
 801b842:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801b9e0 <_svfiprintf_r+0x1e4>
 801b846:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b84a:	f04f 0901 	mov.w	r9, #1
 801b84e:	4623      	mov	r3, r4
 801b850:	469a      	mov	sl, r3
 801b852:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b856:	b10a      	cbz	r2, 801b85c <_svfiprintf_r+0x60>
 801b858:	2a25      	cmp	r2, #37	@ 0x25
 801b85a:	d1f9      	bne.n	801b850 <_svfiprintf_r+0x54>
 801b85c:	ebba 0b04 	subs.w	fp, sl, r4
 801b860:	d00b      	beq.n	801b87a <_svfiprintf_r+0x7e>
 801b862:	465b      	mov	r3, fp
 801b864:	4622      	mov	r2, r4
 801b866:	4629      	mov	r1, r5
 801b868:	4638      	mov	r0, r7
 801b86a:	f7ff ff6c 	bl	801b746 <__ssputs_r>
 801b86e:	3001      	adds	r0, #1
 801b870:	f000 80a7 	beq.w	801b9c2 <_svfiprintf_r+0x1c6>
 801b874:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b876:	445a      	add	r2, fp
 801b878:	9209      	str	r2, [sp, #36]	@ 0x24
 801b87a:	f89a 3000 	ldrb.w	r3, [sl]
 801b87e:	2b00      	cmp	r3, #0
 801b880:	f000 809f 	beq.w	801b9c2 <_svfiprintf_r+0x1c6>
 801b884:	2300      	movs	r3, #0
 801b886:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b88a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b88e:	f10a 0a01 	add.w	sl, sl, #1
 801b892:	9304      	str	r3, [sp, #16]
 801b894:	9307      	str	r3, [sp, #28]
 801b896:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b89a:	931a      	str	r3, [sp, #104]	@ 0x68
 801b89c:	4654      	mov	r4, sl
 801b89e:	2205      	movs	r2, #5
 801b8a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b8a4:	484e      	ldr	r0, [pc, #312]	@ (801b9e0 <_svfiprintf_r+0x1e4>)
 801b8a6:	f7e6 febb 	bl	8002620 <memchr>
 801b8aa:	9a04      	ldr	r2, [sp, #16]
 801b8ac:	b9d8      	cbnz	r0, 801b8e6 <_svfiprintf_r+0xea>
 801b8ae:	06d0      	lsls	r0, r2, #27
 801b8b0:	bf44      	itt	mi
 801b8b2:	2320      	movmi	r3, #32
 801b8b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b8b8:	0711      	lsls	r1, r2, #28
 801b8ba:	bf44      	itt	mi
 801b8bc:	232b      	movmi	r3, #43	@ 0x2b
 801b8be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b8c2:	f89a 3000 	ldrb.w	r3, [sl]
 801b8c6:	2b2a      	cmp	r3, #42	@ 0x2a
 801b8c8:	d015      	beq.n	801b8f6 <_svfiprintf_r+0xfa>
 801b8ca:	9a07      	ldr	r2, [sp, #28]
 801b8cc:	4654      	mov	r4, sl
 801b8ce:	2000      	movs	r0, #0
 801b8d0:	f04f 0c0a 	mov.w	ip, #10
 801b8d4:	4621      	mov	r1, r4
 801b8d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b8da:	3b30      	subs	r3, #48	@ 0x30
 801b8dc:	2b09      	cmp	r3, #9
 801b8de:	d94b      	bls.n	801b978 <_svfiprintf_r+0x17c>
 801b8e0:	b1b0      	cbz	r0, 801b910 <_svfiprintf_r+0x114>
 801b8e2:	9207      	str	r2, [sp, #28]
 801b8e4:	e014      	b.n	801b910 <_svfiprintf_r+0x114>
 801b8e6:	eba0 0308 	sub.w	r3, r0, r8
 801b8ea:	fa09 f303 	lsl.w	r3, r9, r3
 801b8ee:	4313      	orrs	r3, r2
 801b8f0:	9304      	str	r3, [sp, #16]
 801b8f2:	46a2      	mov	sl, r4
 801b8f4:	e7d2      	b.n	801b89c <_svfiprintf_r+0xa0>
 801b8f6:	9b03      	ldr	r3, [sp, #12]
 801b8f8:	1d19      	adds	r1, r3, #4
 801b8fa:	681b      	ldr	r3, [r3, #0]
 801b8fc:	9103      	str	r1, [sp, #12]
 801b8fe:	2b00      	cmp	r3, #0
 801b900:	bfbb      	ittet	lt
 801b902:	425b      	neglt	r3, r3
 801b904:	f042 0202 	orrlt.w	r2, r2, #2
 801b908:	9307      	strge	r3, [sp, #28]
 801b90a:	9307      	strlt	r3, [sp, #28]
 801b90c:	bfb8      	it	lt
 801b90e:	9204      	strlt	r2, [sp, #16]
 801b910:	7823      	ldrb	r3, [r4, #0]
 801b912:	2b2e      	cmp	r3, #46	@ 0x2e
 801b914:	d10a      	bne.n	801b92c <_svfiprintf_r+0x130>
 801b916:	7863      	ldrb	r3, [r4, #1]
 801b918:	2b2a      	cmp	r3, #42	@ 0x2a
 801b91a:	d132      	bne.n	801b982 <_svfiprintf_r+0x186>
 801b91c:	9b03      	ldr	r3, [sp, #12]
 801b91e:	1d1a      	adds	r2, r3, #4
 801b920:	681b      	ldr	r3, [r3, #0]
 801b922:	9203      	str	r2, [sp, #12]
 801b924:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b928:	3402      	adds	r4, #2
 801b92a:	9305      	str	r3, [sp, #20]
 801b92c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801b9f0 <_svfiprintf_r+0x1f4>
 801b930:	7821      	ldrb	r1, [r4, #0]
 801b932:	2203      	movs	r2, #3
 801b934:	4650      	mov	r0, sl
 801b936:	f7e6 fe73 	bl	8002620 <memchr>
 801b93a:	b138      	cbz	r0, 801b94c <_svfiprintf_r+0x150>
 801b93c:	9b04      	ldr	r3, [sp, #16]
 801b93e:	eba0 000a 	sub.w	r0, r0, sl
 801b942:	2240      	movs	r2, #64	@ 0x40
 801b944:	4082      	lsls	r2, r0
 801b946:	4313      	orrs	r3, r2
 801b948:	3401      	adds	r4, #1
 801b94a:	9304      	str	r3, [sp, #16]
 801b94c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b950:	4824      	ldr	r0, [pc, #144]	@ (801b9e4 <_svfiprintf_r+0x1e8>)
 801b952:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b956:	2206      	movs	r2, #6
 801b958:	f7e6 fe62 	bl	8002620 <memchr>
 801b95c:	2800      	cmp	r0, #0
 801b95e:	d036      	beq.n	801b9ce <_svfiprintf_r+0x1d2>
 801b960:	4b21      	ldr	r3, [pc, #132]	@ (801b9e8 <_svfiprintf_r+0x1ec>)
 801b962:	bb1b      	cbnz	r3, 801b9ac <_svfiprintf_r+0x1b0>
 801b964:	9b03      	ldr	r3, [sp, #12]
 801b966:	3307      	adds	r3, #7
 801b968:	f023 0307 	bic.w	r3, r3, #7
 801b96c:	3308      	adds	r3, #8
 801b96e:	9303      	str	r3, [sp, #12]
 801b970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b972:	4433      	add	r3, r6
 801b974:	9309      	str	r3, [sp, #36]	@ 0x24
 801b976:	e76a      	b.n	801b84e <_svfiprintf_r+0x52>
 801b978:	fb0c 3202 	mla	r2, ip, r2, r3
 801b97c:	460c      	mov	r4, r1
 801b97e:	2001      	movs	r0, #1
 801b980:	e7a8      	b.n	801b8d4 <_svfiprintf_r+0xd8>
 801b982:	2300      	movs	r3, #0
 801b984:	3401      	adds	r4, #1
 801b986:	9305      	str	r3, [sp, #20]
 801b988:	4619      	mov	r1, r3
 801b98a:	f04f 0c0a 	mov.w	ip, #10
 801b98e:	4620      	mov	r0, r4
 801b990:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b994:	3a30      	subs	r2, #48	@ 0x30
 801b996:	2a09      	cmp	r2, #9
 801b998:	d903      	bls.n	801b9a2 <_svfiprintf_r+0x1a6>
 801b99a:	2b00      	cmp	r3, #0
 801b99c:	d0c6      	beq.n	801b92c <_svfiprintf_r+0x130>
 801b99e:	9105      	str	r1, [sp, #20]
 801b9a0:	e7c4      	b.n	801b92c <_svfiprintf_r+0x130>
 801b9a2:	fb0c 2101 	mla	r1, ip, r1, r2
 801b9a6:	4604      	mov	r4, r0
 801b9a8:	2301      	movs	r3, #1
 801b9aa:	e7f0      	b.n	801b98e <_svfiprintf_r+0x192>
 801b9ac:	ab03      	add	r3, sp, #12
 801b9ae:	9300      	str	r3, [sp, #0]
 801b9b0:	462a      	mov	r2, r5
 801b9b2:	4b0e      	ldr	r3, [pc, #56]	@ (801b9ec <_svfiprintf_r+0x1f0>)
 801b9b4:	a904      	add	r1, sp, #16
 801b9b6:	4638      	mov	r0, r7
 801b9b8:	f7fc fd12 	bl	80183e0 <_printf_float>
 801b9bc:	1c42      	adds	r2, r0, #1
 801b9be:	4606      	mov	r6, r0
 801b9c0:	d1d6      	bne.n	801b970 <_svfiprintf_r+0x174>
 801b9c2:	89ab      	ldrh	r3, [r5, #12]
 801b9c4:	065b      	lsls	r3, r3, #25
 801b9c6:	f53f af2d 	bmi.w	801b824 <_svfiprintf_r+0x28>
 801b9ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b9cc:	e72c      	b.n	801b828 <_svfiprintf_r+0x2c>
 801b9ce:	ab03      	add	r3, sp, #12
 801b9d0:	9300      	str	r3, [sp, #0]
 801b9d2:	462a      	mov	r2, r5
 801b9d4:	4b05      	ldr	r3, [pc, #20]	@ (801b9ec <_svfiprintf_r+0x1f0>)
 801b9d6:	a904      	add	r1, sp, #16
 801b9d8:	4638      	mov	r0, r7
 801b9da:	f7fd f843 	bl	8018a64 <_printf_i>
 801b9de:	e7ed      	b.n	801b9bc <_svfiprintf_r+0x1c0>
 801b9e0:	0801f1c4 	.word	0x0801f1c4
 801b9e4:	0801f1ce 	.word	0x0801f1ce
 801b9e8:	080183e1 	.word	0x080183e1
 801b9ec:	0801b747 	.word	0x0801b747
 801b9f0:	0801f1ca 	.word	0x0801f1ca

0801b9f4 <__sfputc_r>:
 801b9f4:	6893      	ldr	r3, [r2, #8]
 801b9f6:	3b01      	subs	r3, #1
 801b9f8:	2b00      	cmp	r3, #0
 801b9fa:	b410      	push	{r4}
 801b9fc:	6093      	str	r3, [r2, #8]
 801b9fe:	da08      	bge.n	801ba12 <__sfputc_r+0x1e>
 801ba00:	6994      	ldr	r4, [r2, #24]
 801ba02:	42a3      	cmp	r3, r4
 801ba04:	db01      	blt.n	801ba0a <__sfputc_r+0x16>
 801ba06:	290a      	cmp	r1, #10
 801ba08:	d103      	bne.n	801ba12 <__sfputc_r+0x1e>
 801ba0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ba0e:	f000 bf27 	b.w	801c860 <__swbuf_r>
 801ba12:	6813      	ldr	r3, [r2, #0]
 801ba14:	1c58      	adds	r0, r3, #1
 801ba16:	6010      	str	r0, [r2, #0]
 801ba18:	7019      	strb	r1, [r3, #0]
 801ba1a:	4608      	mov	r0, r1
 801ba1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ba20:	4770      	bx	lr

0801ba22 <__sfputs_r>:
 801ba22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba24:	4606      	mov	r6, r0
 801ba26:	460f      	mov	r7, r1
 801ba28:	4614      	mov	r4, r2
 801ba2a:	18d5      	adds	r5, r2, r3
 801ba2c:	42ac      	cmp	r4, r5
 801ba2e:	d101      	bne.n	801ba34 <__sfputs_r+0x12>
 801ba30:	2000      	movs	r0, #0
 801ba32:	e007      	b.n	801ba44 <__sfputs_r+0x22>
 801ba34:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ba38:	463a      	mov	r2, r7
 801ba3a:	4630      	mov	r0, r6
 801ba3c:	f7ff ffda 	bl	801b9f4 <__sfputc_r>
 801ba40:	1c43      	adds	r3, r0, #1
 801ba42:	d1f3      	bne.n	801ba2c <__sfputs_r+0xa>
 801ba44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ba48 <_vfiprintf_r>:
 801ba48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba4c:	460d      	mov	r5, r1
 801ba4e:	b09d      	sub	sp, #116	@ 0x74
 801ba50:	4614      	mov	r4, r2
 801ba52:	4698      	mov	r8, r3
 801ba54:	4606      	mov	r6, r0
 801ba56:	b118      	cbz	r0, 801ba60 <_vfiprintf_r+0x18>
 801ba58:	6a03      	ldr	r3, [r0, #32]
 801ba5a:	b90b      	cbnz	r3, 801ba60 <_vfiprintf_r+0x18>
 801ba5c:	f7fd fc22 	bl	80192a4 <__sinit>
 801ba60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ba62:	07d9      	lsls	r1, r3, #31
 801ba64:	d405      	bmi.n	801ba72 <_vfiprintf_r+0x2a>
 801ba66:	89ab      	ldrh	r3, [r5, #12]
 801ba68:	059a      	lsls	r2, r3, #22
 801ba6a:	d402      	bmi.n	801ba72 <_vfiprintf_r+0x2a>
 801ba6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ba6e:	f7fe fc58 	bl	801a322 <__retarget_lock_acquire_recursive>
 801ba72:	89ab      	ldrh	r3, [r5, #12]
 801ba74:	071b      	lsls	r3, r3, #28
 801ba76:	d501      	bpl.n	801ba7c <_vfiprintf_r+0x34>
 801ba78:	692b      	ldr	r3, [r5, #16]
 801ba7a:	b99b      	cbnz	r3, 801baa4 <_vfiprintf_r+0x5c>
 801ba7c:	4629      	mov	r1, r5
 801ba7e:	4630      	mov	r0, r6
 801ba80:	f000 ff2c 	bl	801c8dc <__swsetup_r>
 801ba84:	b170      	cbz	r0, 801baa4 <_vfiprintf_r+0x5c>
 801ba86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ba88:	07dc      	lsls	r4, r3, #31
 801ba8a:	d504      	bpl.n	801ba96 <_vfiprintf_r+0x4e>
 801ba8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ba90:	b01d      	add	sp, #116	@ 0x74
 801ba92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba96:	89ab      	ldrh	r3, [r5, #12]
 801ba98:	0598      	lsls	r0, r3, #22
 801ba9a:	d4f7      	bmi.n	801ba8c <_vfiprintf_r+0x44>
 801ba9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ba9e:	f7fe fc41 	bl	801a324 <__retarget_lock_release_recursive>
 801baa2:	e7f3      	b.n	801ba8c <_vfiprintf_r+0x44>
 801baa4:	2300      	movs	r3, #0
 801baa6:	9309      	str	r3, [sp, #36]	@ 0x24
 801baa8:	2320      	movs	r3, #32
 801baaa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801baae:	f8cd 800c 	str.w	r8, [sp, #12]
 801bab2:	2330      	movs	r3, #48	@ 0x30
 801bab4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801bc64 <_vfiprintf_r+0x21c>
 801bab8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801babc:	f04f 0901 	mov.w	r9, #1
 801bac0:	4623      	mov	r3, r4
 801bac2:	469a      	mov	sl, r3
 801bac4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bac8:	b10a      	cbz	r2, 801bace <_vfiprintf_r+0x86>
 801baca:	2a25      	cmp	r2, #37	@ 0x25
 801bacc:	d1f9      	bne.n	801bac2 <_vfiprintf_r+0x7a>
 801bace:	ebba 0b04 	subs.w	fp, sl, r4
 801bad2:	d00b      	beq.n	801baec <_vfiprintf_r+0xa4>
 801bad4:	465b      	mov	r3, fp
 801bad6:	4622      	mov	r2, r4
 801bad8:	4629      	mov	r1, r5
 801bada:	4630      	mov	r0, r6
 801badc:	f7ff ffa1 	bl	801ba22 <__sfputs_r>
 801bae0:	3001      	adds	r0, #1
 801bae2:	f000 80a7 	beq.w	801bc34 <_vfiprintf_r+0x1ec>
 801bae6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bae8:	445a      	add	r2, fp
 801baea:	9209      	str	r2, [sp, #36]	@ 0x24
 801baec:	f89a 3000 	ldrb.w	r3, [sl]
 801baf0:	2b00      	cmp	r3, #0
 801baf2:	f000 809f 	beq.w	801bc34 <_vfiprintf_r+0x1ec>
 801baf6:	2300      	movs	r3, #0
 801baf8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801bafc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bb00:	f10a 0a01 	add.w	sl, sl, #1
 801bb04:	9304      	str	r3, [sp, #16]
 801bb06:	9307      	str	r3, [sp, #28]
 801bb08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801bb0c:	931a      	str	r3, [sp, #104]	@ 0x68
 801bb0e:	4654      	mov	r4, sl
 801bb10:	2205      	movs	r2, #5
 801bb12:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bb16:	4853      	ldr	r0, [pc, #332]	@ (801bc64 <_vfiprintf_r+0x21c>)
 801bb18:	f7e6 fd82 	bl	8002620 <memchr>
 801bb1c:	9a04      	ldr	r2, [sp, #16]
 801bb1e:	b9d8      	cbnz	r0, 801bb58 <_vfiprintf_r+0x110>
 801bb20:	06d1      	lsls	r1, r2, #27
 801bb22:	bf44      	itt	mi
 801bb24:	2320      	movmi	r3, #32
 801bb26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bb2a:	0713      	lsls	r3, r2, #28
 801bb2c:	bf44      	itt	mi
 801bb2e:	232b      	movmi	r3, #43	@ 0x2b
 801bb30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bb34:	f89a 3000 	ldrb.w	r3, [sl]
 801bb38:	2b2a      	cmp	r3, #42	@ 0x2a
 801bb3a:	d015      	beq.n	801bb68 <_vfiprintf_r+0x120>
 801bb3c:	9a07      	ldr	r2, [sp, #28]
 801bb3e:	4654      	mov	r4, sl
 801bb40:	2000      	movs	r0, #0
 801bb42:	f04f 0c0a 	mov.w	ip, #10
 801bb46:	4621      	mov	r1, r4
 801bb48:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bb4c:	3b30      	subs	r3, #48	@ 0x30
 801bb4e:	2b09      	cmp	r3, #9
 801bb50:	d94b      	bls.n	801bbea <_vfiprintf_r+0x1a2>
 801bb52:	b1b0      	cbz	r0, 801bb82 <_vfiprintf_r+0x13a>
 801bb54:	9207      	str	r2, [sp, #28]
 801bb56:	e014      	b.n	801bb82 <_vfiprintf_r+0x13a>
 801bb58:	eba0 0308 	sub.w	r3, r0, r8
 801bb5c:	fa09 f303 	lsl.w	r3, r9, r3
 801bb60:	4313      	orrs	r3, r2
 801bb62:	9304      	str	r3, [sp, #16]
 801bb64:	46a2      	mov	sl, r4
 801bb66:	e7d2      	b.n	801bb0e <_vfiprintf_r+0xc6>
 801bb68:	9b03      	ldr	r3, [sp, #12]
 801bb6a:	1d19      	adds	r1, r3, #4
 801bb6c:	681b      	ldr	r3, [r3, #0]
 801bb6e:	9103      	str	r1, [sp, #12]
 801bb70:	2b00      	cmp	r3, #0
 801bb72:	bfbb      	ittet	lt
 801bb74:	425b      	neglt	r3, r3
 801bb76:	f042 0202 	orrlt.w	r2, r2, #2
 801bb7a:	9307      	strge	r3, [sp, #28]
 801bb7c:	9307      	strlt	r3, [sp, #28]
 801bb7e:	bfb8      	it	lt
 801bb80:	9204      	strlt	r2, [sp, #16]
 801bb82:	7823      	ldrb	r3, [r4, #0]
 801bb84:	2b2e      	cmp	r3, #46	@ 0x2e
 801bb86:	d10a      	bne.n	801bb9e <_vfiprintf_r+0x156>
 801bb88:	7863      	ldrb	r3, [r4, #1]
 801bb8a:	2b2a      	cmp	r3, #42	@ 0x2a
 801bb8c:	d132      	bne.n	801bbf4 <_vfiprintf_r+0x1ac>
 801bb8e:	9b03      	ldr	r3, [sp, #12]
 801bb90:	1d1a      	adds	r2, r3, #4
 801bb92:	681b      	ldr	r3, [r3, #0]
 801bb94:	9203      	str	r2, [sp, #12]
 801bb96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801bb9a:	3402      	adds	r4, #2
 801bb9c:	9305      	str	r3, [sp, #20]
 801bb9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801bc74 <_vfiprintf_r+0x22c>
 801bba2:	7821      	ldrb	r1, [r4, #0]
 801bba4:	2203      	movs	r2, #3
 801bba6:	4650      	mov	r0, sl
 801bba8:	f7e6 fd3a 	bl	8002620 <memchr>
 801bbac:	b138      	cbz	r0, 801bbbe <_vfiprintf_r+0x176>
 801bbae:	9b04      	ldr	r3, [sp, #16]
 801bbb0:	eba0 000a 	sub.w	r0, r0, sl
 801bbb4:	2240      	movs	r2, #64	@ 0x40
 801bbb6:	4082      	lsls	r2, r0
 801bbb8:	4313      	orrs	r3, r2
 801bbba:	3401      	adds	r4, #1
 801bbbc:	9304      	str	r3, [sp, #16]
 801bbbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bbc2:	4829      	ldr	r0, [pc, #164]	@ (801bc68 <_vfiprintf_r+0x220>)
 801bbc4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801bbc8:	2206      	movs	r2, #6
 801bbca:	f7e6 fd29 	bl	8002620 <memchr>
 801bbce:	2800      	cmp	r0, #0
 801bbd0:	d03f      	beq.n	801bc52 <_vfiprintf_r+0x20a>
 801bbd2:	4b26      	ldr	r3, [pc, #152]	@ (801bc6c <_vfiprintf_r+0x224>)
 801bbd4:	bb1b      	cbnz	r3, 801bc1e <_vfiprintf_r+0x1d6>
 801bbd6:	9b03      	ldr	r3, [sp, #12]
 801bbd8:	3307      	adds	r3, #7
 801bbda:	f023 0307 	bic.w	r3, r3, #7
 801bbde:	3308      	adds	r3, #8
 801bbe0:	9303      	str	r3, [sp, #12]
 801bbe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bbe4:	443b      	add	r3, r7
 801bbe6:	9309      	str	r3, [sp, #36]	@ 0x24
 801bbe8:	e76a      	b.n	801bac0 <_vfiprintf_r+0x78>
 801bbea:	fb0c 3202 	mla	r2, ip, r2, r3
 801bbee:	460c      	mov	r4, r1
 801bbf0:	2001      	movs	r0, #1
 801bbf2:	e7a8      	b.n	801bb46 <_vfiprintf_r+0xfe>
 801bbf4:	2300      	movs	r3, #0
 801bbf6:	3401      	adds	r4, #1
 801bbf8:	9305      	str	r3, [sp, #20]
 801bbfa:	4619      	mov	r1, r3
 801bbfc:	f04f 0c0a 	mov.w	ip, #10
 801bc00:	4620      	mov	r0, r4
 801bc02:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bc06:	3a30      	subs	r2, #48	@ 0x30
 801bc08:	2a09      	cmp	r2, #9
 801bc0a:	d903      	bls.n	801bc14 <_vfiprintf_r+0x1cc>
 801bc0c:	2b00      	cmp	r3, #0
 801bc0e:	d0c6      	beq.n	801bb9e <_vfiprintf_r+0x156>
 801bc10:	9105      	str	r1, [sp, #20]
 801bc12:	e7c4      	b.n	801bb9e <_vfiprintf_r+0x156>
 801bc14:	fb0c 2101 	mla	r1, ip, r1, r2
 801bc18:	4604      	mov	r4, r0
 801bc1a:	2301      	movs	r3, #1
 801bc1c:	e7f0      	b.n	801bc00 <_vfiprintf_r+0x1b8>
 801bc1e:	ab03      	add	r3, sp, #12
 801bc20:	9300      	str	r3, [sp, #0]
 801bc22:	462a      	mov	r2, r5
 801bc24:	4b12      	ldr	r3, [pc, #72]	@ (801bc70 <_vfiprintf_r+0x228>)
 801bc26:	a904      	add	r1, sp, #16
 801bc28:	4630      	mov	r0, r6
 801bc2a:	f7fc fbd9 	bl	80183e0 <_printf_float>
 801bc2e:	4607      	mov	r7, r0
 801bc30:	1c78      	adds	r0, r7, #1
 801bc32:	d1d6      	bne.n	801bbe2 <_vfiprintf_r+0x19a>
 801bc34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801bc36:	07d9      	lsls	r1, r3, #31
 801bc38:	d405      	bmi.n	801bc46 <_vfiprintf_r+0x1fe>
 801bc3a:	89ab      	ldrh	r3, [r5, #12]
 801bc3c:	059a      	lsls	r2, r3, #22
 801bc3e:	d402      	bmi.n	801bc46 <_vfiprintf_r+0x1fe>
 801bc40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801bc42:	f7fe fb6f 	bl	801a324 <__retarget_lock_release_recursive>
 801bc46:	89ab      	ldrh	r3, [r5, #12]
 801bc48:	065b      	lsls	r3, r3, #25
 801bc4a:	f53f af1f 	bmi.w	801ba8c <_vfiprintf_r+0x44>
 801bc4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bc50:	e71e      	b.n	801ba90 <_vfiprintf_r+0x48>
 801bc52:	ab03      	add	r3, sp, #12
 801bc54:	9300      	str	r3, [sp, #0]
 801bc56:	462a      	mov	r2, r5
 801bc58:	4b05      	ldr	r3, [pc, #20]	@ (801bc70 <_vfiprintf_r+0x228>)
 801bc5a:	a904      	add	r1, sp, #16
 801bc5c:	4630      	mov	r0, r6
 801bc5e:	f7fc ff01 	bl	8018a64 <_printf_i>
 801bc62:	e7e4      	b.n	801bc2e <_vfiprintf_r+0x1e6>
 801bc64:	0801f1c4 	.word	0x0801f1c4
 801bc68:	0801f1ce 	.word	0x0801f1ce
 801bc6c:	080183e1 	.word	0x080183e1
 801bc70:	0801ba23 	.word	0x0801ba23
 801bc74:	0801f1ca 	.word	0x0801f1ca

0801bc78 <__ascii_mbtowc>:
 801bc78:	b082      	sub	sp, #8
 801bc7a:	b901      	cbnz	r1, 801bc7e <__ascii_mbtowc+0x6>
 801bc7c:	a901      	add	r1, sp, #4
 801bc7e:	b142      	cbz	r2, 801bc92 <__ascii_mbtowc+0x1a>
 801bc80:	b14b      	cbz	r3, 801bc96 <__ascii_mbtowc+0x1e>
 801bc82:	7813      	ldrb	r3, [r2, #0]
 801bc84:	600b      	str	r3, [r1, #0]
 801bc86:	7812      	ldrb	r2, [r2, #0]
 801bc88:	1e10      	subs	r0, r2, #0
 801bc8a:	bf18      	it	ne
 801bc8c:	2001      	movne	r0, #1
 801bc8e:	b002      	add	sp, #8
 801bc90:	4770      	bx	lr
 801bc92:	4610      	mov	r0, r2
 801bc94:	e7fb      	b.n	801bc8e <__ascii_mbtowc+0x16>
 801bc96:	f06f 0001 	mvn.w	r0, #1
 801bc9a:	e7f8      	b.n	801bc8e <__ascii_mbtowc+0x16>

0801bc9c <__sflush_r>:
 801bc9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801bca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bca4:	0716      	lsls	r6, r2, #28
 801bca6:	4605      	mov	r5, r0
 801bca8:	460c      	mov	r4, r1
 801bcaa:	d454      	bmi.n	801bd56 <__sflush_r+0xba>
 801bcac:	684b      	ldr	r3, [r1, #4]
 801bcae:	2b00      	cmp	r3, #0
 801bcb0:	dc02      	bgt.n	801bcb8 <__sflush_r+0x1c>
 801bcb2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801bcb4:	2b00      	cmp	r3, #0
 801bcb6:	dd48      	ble.n	801bd4a <__sflush_r+0xae>
 801bcb8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801bcba:	2e00      	cmp	r6, #0
 801bcbc:	d045      	beq.n	801bd4a <__sflush_r+0xae>
 801bcbe:	2300      	movs	r3, #0
 801bcc0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801bcc4:	682f      	ldr	r7, [r5, #0]
 801bcc6:	6a21      	ldr	r1, [r4, #32]
 801bcc8:	602b      	str	r3, [r5, #0]
 801bcca:	d030      	beq.n	801bd2e <__sflush_r+0x92>
 801bccc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801bcce:	89a3      	ldrh	r3, [r4, #12]
 801bcd0:	0759      	lsls	r1, r3, #29
 801bcd2:	d505      	bpl.n	801bce0 <__sflush_r+0x44>
 801bcd4:	6863      	ldr	r3, [r4, #4]
 801bcd6:	1ad2      	subs	r2, r2, r3
 801bcd8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801bcda:	b10b      	cbz	r3, 801bce0 <__sflush_r+0x44>
 801bcdc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801bcde:	1ad2      	subs	r2, r2, r3
 801bce0:	2300      	movs	r3, #0
 801bce2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801bce4:	6a21      	ldr	r1, [r4, #32]
 801bce6:	4628      	mov	r0, r5
 801bce8:	47b0      	blx	r6
 801bcea:	1c43      	adds	r3, r0, #1
 801bcec:	89a3      	ldrh	r3, [r4, #12]
 801bcee:	d106      	bne.n	801bcfe <__sflush_r+0x62>
 801bcf0:	6829      	ldr	r1, [r5, #0]
 801bcf2:	291d      	cmp	r1, #29
 801bcf4:	d82b      	bhi.n	801bd4e <__sflush_r+0xb2>
 801bcf6:	4a2a      	ldr	r2, [pc, #168]	@ (801bda0 <__sflush_r+0x104>)
 801bcf8:	410a      	asrs	r2, r1
 801bcfa:	07d6      	lsls	r6, r2, #31
 801bcfc:	d427      	bmi.n	801bd4e <__sflush_r+0xb2>
 801bcfe:	2200      	movs	r2, #0
 801bd00:	6062      	str	r2, [r4, #4]
 801bd02:	04d9      	lsls	r1, r3, #19
 801bd04:	6922      	ldr	r2, [r4, #16]
 801bd06:	6022      	str	r2, [r4, #0]
 801bd08:	d504      	bpl.n	801bd14 <__sflush_r+0x78>
 801bd0a:	1c42      	adds	r2, r0, #1
 801bd0c:	d101      	bne.n	801bd12 <__sflush_r+0x76>
 801bd0e:	682b      	ldr	r3, [r5, #0]
 801bd10:	b903      	cbnz	r3, 801bd14 <__sflush_r+0x78>
 801bd12:	6560      	str	r0, [r4, #84]	@ 0x54
 801bd14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801bd16:	602f      	str	r7, [r5, #0]
 801bd18:	b1b9      	cbz	r1, 801bd4a <__sflush_r+0xae>
 801bd1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801bd1e:	4299      	cmp	r1, r3
 801bd20:	d002      	beq.n	801bd28 <__sflush_r+0x8c>
 801bd22:	4628      	mov	r0, r5
 801bd24:	f7ff f98c 	bl	801b040 <_free_r>
 801bd28:	2300      	movs	r3, #0
 801bd2a:	6363      	str	r3, [r4, #52]	@ 0x34
 801bd2c:	e00d      	b.n	801bd4a <__sflush_r+0xae>
 801bd2e:	2301      	movs	r3, #1
 801bd30:	4628      	mov	r0, r5
 801bd32:	47b0      	blx	r6
 801bd34:	4602      	mov	r2, r0
 801bd36:	1c50      	adds	r0, r2, #1
 801bd38:	d1c9      	bne.n	801bcce <__sflush_r+0x32>
 801bd3a:	682b      	ldr	r3, [r5, #0]
 801bd3c:	2b00      	cmp	r3, #0
 801bd3e:	d0c6      	beq.n	801bcce <__sflush_r+0x32>
 801bd40:	2b1d      	cmp	r3, #29
 801bd42:	d001      	beq.n	801bd48 <__sflush_r+0xac>
 801bd44:	2b16      	cmp	r3, #22
 801bd46:	d11e      	bne.n	801bd86 <__sflush_r+0xea>
 801bd48:	602f      	str	r7, [r5, #0]
 801bd4a:	2000      	movs	r0, #0
 801bd4c:	e022      	b.n	801bd94 <__sflush_r+0xf8>
 801bd4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bd52:	b21b      	sxth	r3, r3
 801bd54:	e01b      	b.n	801bd8e <__sflush_r+0xf2>
 801bd56:	690f      	ldr	r7, [r1, #16]
 801bd58:	2f00      	cmp	r7, #0
 801bd5a:	d0f6      	beq.n	801bd4a <__sflush_r+0xae>
 801bd5c:	0793      	lsls	r3, r2, #30
 801bd5e:	680e      	ldr	r6, [r1, #0]
 801bd60:	bf08      	it	eq
 801bd62:	694b      	ldreq	r3, [r1, #20]
 801bd64:	600f      	str	r7, [r1, #0]
 801bd66:	bf18      	it	ne
 801bd68:	2300      	movne	r3, #0
 801bd6a:	eba6 0807 	sub.w	r8, r6, r7
 801bd6e:	608b      	str	r3, [r1, #8]
 801bd70:	f1b8 0f00 	cmp.w	r8, #0
 801bd74:	dde9      	ble.n	801bd4a <__sflush_r+0xae>
 801bd76:	6a21      	ldr	r1, [r4, #32]
 801bd78:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801bd7a:	4643      	mov	r3, r8
 801bd7c:	463a      	mov	r2, r7
 801bd7e:	4628      	mov	r0, r5
 801bd80:	47b0      	blx	r6
 801bd82:	2800      	cmp	r0, #0
 801bd84:	dc08      	bgt.n	801bd98 <__sflush_r+0xfc>
 801bd86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bd8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bd8e:	81a3      	strh	r3, [r4, #12]
 801bd90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bd94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bd98:	4407      	add	r7, r0
 801bd9a:	eba8 0800 	sub.w	r8, r8, r0
 801bd9e:	e7e7      	b.n	801bd70 <__sflush_r+0xd4>
 801bda0:	dfbffffe 	.word	0xdfbffffe

0801bda4 <_fflush_r>:
 801bda4:	b538      	push	{r3, r4, r5, lr}
 801bda6:	690b      	ldr	r3, [r1, #16]
 801bda8:	4605      	mov	r5, r0
 801bdaa:	460c      	mov	r4, r1
 801bdac:	b913      	cbnz	r3, 801bdb4 <_fflush_r+0x10>
 801bdae:	2500      	movs	r5, #0
 801bdb0:	4628      	mov	r0, r5
 801bdb2:	bd38      	pop	{r3, r4, r5, pc}
 801bdb4:	b118      	cbz	r0, 801bdbe <_fflush_r+0x1a>
 801bdb6:	6a03      	ldr	r3, [r0, #32]
 801bdb8:	b90b      	cbnz	r3, 801bdbe <_fflush_r+0x1a>
 801bdba:	f7fd fa73 	bl	80192a4 <__sinit>
 801bdbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bdc2:	2b00      	cmp	r3, #0
 801bdc4:	d0f3      	beq.n	801bdae <_fflush_r+0xa>
 801bdc6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801bdc8:	07d0      	lsls	r0, r2, #31
 801bdca:	d404      	bmi.n	801bdd6 <_fflush_r+0x32>
 801bdcc:	0599      	lsls	r1, r3, #22
 801bdce:	d402      	bmi.n	801bdd6 <_fflush_r+0x32>
 801bdd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bdd2:	f7fe faa6 	bl	801a322 <__retarget_lock_acquire_recursive>
 801bdd6:	4628      	mov	r0, r5
 801bdd8:	4621      	mov	r1, r4
 801bdda:	f7ff ff5f 	bl	801bc9c <__sflush_r>
 801bdde:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801bde0:	07da      	lsls	r2, r3, #31
 801bde2:	4605      	mov	r5, r0
 801bde4:	d4e4      	bmi.n	801bdb0 <_fflush_r+0xc>
 801bde6:	89a3      	ldrh	r3, [r4, #12]
 801bde8:	059b      	lsls	r3, r3, #22
 801bdea:	d4e1      	bmi.n	801bdb0 <_fflush_r+0xc>
 801bdec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bdee:	f7fe fa99 	bl	801a324 <__retarget_lock_release_recursive>
 801bdf2:	e7dd      	b.n	801bdb0 <_fflush_r+0xc>

0801bdf4 <_Balloc>:
 801bdf4:	b570      	push	{r4, r5, r6, lr}
 801bdf6:	69c6      	ldr	r6, [r0, #28]
 801bdf8:	4604      	mov	r4, r0
 801bdfa:	460d      	mov	r5, r1
 801bdfc:	b976      	cbnz	r6, 801be1c <_Balloc+0x28>
 801bdfe:	2010      	movs	r0, #16
 801be00:	f7fc fd18 	bl	8018834 <malloc>
 801be04:	4602      	mov	r2, r0
 801be06:	61e0      	str	r0, [r4, #28]
 801be08:	b920      	cbnz	r0, 801be14 <_Balloc+0x20>
 801be0a:	4b18      	ldr	r3, [pc, #96]	@ (801be6c <_Balloc+0x78>)
 801be0c:	4818      	ldr	r0, [pc, #96]	@ (801be70 <_Balloc+0x7c>)
 801be0e:	216b      	movs	r1, #107	@ 0x6b
 801be10:	f7fe faac 	bl	801a36c <__assert_func>
 801be14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801be18:	6006      	str	r6, [r0, #0]
 801be1a:	60c6      	str	r6, [r0, #12]
 801be1c:	69e6      	ldr	r6, [r4, #28]
 801be1e:	68f3      	ldr	r3, [r6, #12]
 801be20:	b183      	cbz	r3, 801be44 <_Balloc+0x50>
 801be22:	69e3      	ldr	r3, [r4, #28]
 801be24:	68db      	ldr	r3, [r3, #12]
 801be26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801be2a:	b9b8      	cbnz	r0, 801be5c <_Balloc+0x68>
 801be2c:	2101      	movs	r1, #1
 801be2e:	fa01 f605 	lsl.w	r6, r1, r5
 801be32:	1d72      	adds	r2, r6, #5
 801be34:	0092      	lsls	r2, r2, #2
 801be36:	4620      	mov	r0, r4
 801be38:	f000 fe9f 	bl	801cb7a <_calloc_r>
 801be3c:	b160      	cbz	r0, 801be58 <_Balloc+0x64>
 801be3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801be42:	e00e      	b.n	801be62 <_Balloc+0x6e>
 801be44:	2221      	movs	r2, #33	@ 0x21
 801be46:	2104      	movs	r1, #4
 801be48:	4620      	mov	r0, r4
 801be4a:	f000 fe96 	bl	801cb7a <_calloc_r>
 801be4e:	69e3      	ldr	r3, [r4, #28]
 801be50:	60f0      	str	r0, [r6, #12]
 801be52:	68db      	ldr	r3, [r3, #12]
 801be54:	2b00      	cmp	r3, #0
 801be56:	d1e4      	bne.n	801be22 <_Balloc+0x2e>
 801be58:	2000      	movs	r0, #0
 801be5a:	bd70      	pop	{r4, r5, r6, pc}
 801be5c:	6802      	ldr	r2, [r0, #0]
 801be5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801be62:	2300      	movs	r3, #0
 801be64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801be68:	e7f7      	b.n	801be5a <_Balloc+0x66>
 801be6a:	bf00      	nop
 801be6c:	0801ef38 	.word	0x0801ef38
 801be70:	0801f1d5 	.word	0x0801f1d5

0801be74 <_Bfree>:
 801be74:	b570      	push	{r4, r5, r6, lr}
 801be76:	69c6      	ldr	r6, [r0, #28]
 801be78:	4605      	mov	r5, r0
 801be7a:	460c      	mov	r4, r1
 801be7c:	b976      	cbnz	r6, 801be9c <_Bfree+0x28>
 801be7e:	2010      	movs	r0, #16
 801be80:	f7fc fcd8 	bl	8018834 <malloc>
 801be84:	4602      	mov	r2, r0
 801be86:	61e8      	str	r0, [r5, #28]
 801be88:	b920      	cbnz	r0, 801be94 <_Bfree+0x20>
 801be8a:	4b09      	ldr	r3, [pc, #36]	@ (801beb0 <_Bfree+0x3c>)
 801be8c:	4809      	ldr	r0, [pc, #36]	@ (801beb4 <_Bfree+0x40>)
 801be8e:	218f      	movs	r1, #143	@ 0x8f
 801be90:	f7fe fa6c 	bl	801a36c <__assert_func>
 801be94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801be98:	6006      	str	r6, [r0, #0]
 801be9a:	60c6      	str	r6, [r0, #12]
 801be9c:	b13c      	cbz	r4, 801beae <_Bfree+0x3a>
 801be9e:	69eb      	ldr	r3, [r5, #28]
 801bea0:	6862      	ldr	r2, [r4, #4]
 801bea2:	68db      	ldr	r3, [r3, #12]
 801bea4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801bea8:	6021      	str	r1, [r4, #0]
 801beaa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801beae:	bd70      	pop	{r4, r5, r6, pc}
 801beb0:	0801ef38 	.word	0x0801ef38
 801beb4:	0801f1d5 	.word	0x0801f1d5

0801beb8 <__multadd>:
 801beb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bebc:	690d      	ldr	r5, [r1, #16]
 801bebe:	4607      	mov	r7, r0
 801bec0:	460c      	mov	r4, r1
 801bec2:	461e      	mov	r6, r3
 801bec4:	f101 0c14 	add.w	ip, r1, #20
 801bec8:	2000      	movs	r0, #0
 801beca:	f8dc 3000 	ldr.w	r3, [ip]
 801bece:	b299      	uxth	r1, r3
 801bed0:	fb02 6101 	mla	r1, r2, r1, r6
 801bed4:	0c1e      	lsrs	r6, r3, #16
 801bed6:	0c0b      	lsrs	r3, r1, #16
 801bed8:	fb02 3306 	mla	r3, r2, r6, r3
 801bedc:	b289      	uxth	r1, r1
 801bede:	3001      	adds	r0, #1
 801bee0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801bee4:	4285      	cmp	r5, r0
 801bee6:	f84c 1b04 	str.w	r1, [ip], #4
 801beea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801beee:	dcec      	bgt.n	801beca <__multadd+0x12>
 801bef0:	b30e      	cbz	r6, 801bf36 <__multadd+0x7e>
 801bef2:	68a3      	ldr	r3, [r4, #8]
 801bef4:	42ab      	cmp	r3, r5
 801bef6:	dc19      	bgt.n	801bf2c <__multadd+0x74>
 801bef8:	6861      	ldr	r1, [r4, #4]
 801befa:	4638      	mov	r0, r7
 801befc:	3101      	adds	r1, #1
 801befe:	f7ff ff79 	bl	801bdf4 <_Balloc>
 801bf02:	4680      	mov	r8, r0
 801bf04:	b928      	cbnz	r0, 801bf12 <__multadd+0x5a>
 801bf06:	4602      	mov	r2, r0
 801bf08:	4b0c      	ldr	r3, [pc, #48]	@ (801bf3c <__multadd+0x84>)
 801bf0a:	480d      	ldr	r0, [pc, #52]	@ (801bf40 <__multadd+0x88>)
 801bf0c:	21ba      	movs	r1, #186	@ 0xba
 801bf0e:	f7fe fa2d 	bl	801a36c <__assert_func>
 801bf12:	6922      	ldr	r2, [r4, #16]
 801bf14:	3202      	adds	r2, #2
 801bf16:	f104 010c 	add.w	r1, r4, #12
 801bf1a:	0092      	lsls	r2, r2, #2
 801bf1c:	300c      	adds	r0, #12
 801bf1e:	f7fe fa05 	bl	801a32c <memcpy>
 801bf22:	4621      	mov	r1, r4
 801bf24:	4638      	mov	r0, r7
 801bf26:	f7ff ffa5 	bl	801be74 <_Bfree>
 801bf2a:	4644      	mov	r4, r8
 801bf2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801bf30:	3501      	adds	r5, #1
 801bf32:	615e      	str	r6, [r3, #20]
 801bf34:	6125      	str	r5, [r4, #16]
 801bf36:	4620      	mov	r0, r4
 801bf38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bf3c:	0801f153 	.word	0x0801f153
 801bf40:	0801f1d5 	.word	0x0801f1d5

0801bf44 <__s2b>:
 801bf44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bf48:	460c      	mov	r4, r1
 801bf4a:	4615      	mov	r5, r2
 801bf4c:	461f      	mov	r7, r3
 801bf4e:	2209      	movs	r2, #9
 801bf50:	3308      	adds	r3, #8
 801bf52:	4606      	mov	r6, r0
 801bf54:	fb93 f3f2 	sdiv	r3, r3, r2
 801bf58:	2100      	movs	r1, #0
 801bf5a:	2201      	movs	r2, #1
 801bf5c:	429a      	cmp	r2, r3
 801bf5e:	db09      	blt.n	801bf74 <__s2b+0x30>
 801bf60:	4630      	mov	r0, r6
 801bf62:	f7ff ff47 	bl	801bdf4 <_Balloc>
 801bf66:	b940      	cbnz	r0, 801bf7a <__s2b+0x36>
 801bf68:	4602      	mov	r2, r0
 801bf6a:	4b19      	ldr	r3, [pc, #100]	@ (801bfd0 <__s2b+0x8c>)
 801bf6c:	4819      	ldr	r0, [pc, #100]	@ (801bfd4 <__s2b+0x90>)
 801bf6e:	21d3      	movs	r1, #211	@ 0xd3
 801bf70:	f7fe f9fc 	bl	801a36c <__assert_func>
 801bf74:	0052      	lsls	r2, r2, #1
 801bf76:	3101      	adds	r1, #1
 801bf78:	e7f0      	b.n	801bf5c <__s2b+0x18>
 801bf7a:	9b08      	ldr	r3, [sp, #32]
 801bf7c:	6143      	str	r3, [r0, #20]
 801bf7e:	2d09      	cmp	r5, #9
 801bf80:	f04f 0301 	mov.w	r3, #1
 801bf84:	6103      	str	r3, [r0, #16]
 801bf86:	dd16      	ble.n	801bfb6 <__s2b+0x72>
 801bf88:	f104 0909 	add.w	r9, r4, #9
 801bf8c:	46c8      	mov	r8, r9
 801bf8e:	442c      	add	r4, r5
 801bf90:	f818 3b01 	ldrb.w	r3, [r8], #1
 801bf94:	4601      	mov	r1, r0
 801bf96:	3b30      	subs	r3, #48	@ 0x30
 801bf98:	220a      	movs	r2, #10
 801bf9a:	4630      	mov	r0, r6
 801bf9c:	f7ff ff8c 	bl	801beb8 <__multadd>
 801bfa0:	45a0      	cmp	r8, r4
 801bfa2:	d1f5      	bne.n	801bf90 <__s2b+0x4c>
 801bfa4:	f1a5 0408 	sub.w	r4, r5, #8
 801bfa8:	444c      	add	r4, r9
 801bfaa:	1b2d      	subs	r5, r5, r4
 801bfac:	1963      	adds	r3, r4, r5
 801bfae:	42bb      	cmp	r3, r7
 801bfb0:	db04      	blt.n	801bfbc <__s2b+0x78>
 801bfb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bfb6:	340a      	adds	r4, #10
 801bfb8:	2509      	movs	r5, #9
 801bfba:	e7f6      	b.n	801bfaa <__s2b+0x66>
 801bfbc:	f814 3b01 	ldrb.w	r3, [r4], #1
 801bfc0:	4601      	mov	r1, r0
 801bfc2:	3b30      	subs	r3, #48	@ 0x30
 801bfc4:	220a      	movs	r2, #10
 801bfc6:	4630      	mov	r0, r6
 801bfc8:	f7ff ff76 	bl	801beb8 <__multadd>
 801bfcc:	e7ee      	b.n	801bfac <__s2b+0x68>
 801bfce:	bf00      	nop
 801bfd0:	0801f153 	.word	0x0801f153
 801bfd4:	0801f1d5 	.word	0x0801f1d5

0801bfd8 <__hi0bits>:
 801bfd8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801bfdc:	4603      	mov	r3, r0
 801bfde:	bf36      	itet	cc
 801bfe0:	0403      	lslcc	r3, r0, #16
 801bfe2:	2000      	movcs	r0, #0
 801bfe4:	2010      	movcc	r0, #16
 801bfe6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801bfea:	bf3c      	itt	cc
 801bfec:	021b      	lslcc	r3, r3, #8
 801bfee:	3008      	addcc	r0, #8
 801bff0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801bff4:	bf3c      	itt	cc
 801bff6:	011b      	lslcc	r3, r3, #4
 801bff8:	3004      	addcc	r0, #4
 801bffa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801bffe:	bf3c      	itt	cc
 801c000:	009b      	lslcc	r3, r3, #2
 801c002:	3002      	addcc	r0, #2
 801c004:	2b00      	cmp	r3, #0
 801c006:	db05      	blt.n	801c014 <__hi0bits+0x3c>
 801c008:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801c00c:	f100 0001 	add.w	r0, r0, #1
 801c010:	bf08      	it	eq
 801c012:	2020      	moveq	r0, #32
 801c014:	4770      	bx	lr

0801c016 <__lo0bits>:
 801c016:	6803      	ldr	r3, [r0, #0]
 801c018:	4602      	mov	r2, r0
 801c01a:	f013 0007 	ands.w	r0, r3, #7
 801c01e:	d00b      	beq.n	801c038 <__lo0bits+0x22>
 801c020:	07d9      	lsls	r1, r3, #31
 801c022:	d421      	bmi.n	801c068 <__lo0bits+0x52>
 801c024:	0798      	lsls	r0, r3, #30
 801c026:	bf49      	itett	mi
 801c028:	085b      	lsrmi	r3, r3, #1
 801c02a:	089b      	lsrpl	r3, r3, #2
 801c02c:	2001      	movmi	r0, #1
 801c02e:	6013      	strmi	r3, [r2, #0]
 801c030:	bf5c      	itt	pl
 801c032:	6013      	strpl	r3, [r2, #0]
 801c034:	2002      	movpl	r0, #2
 801c036:	4770      	bx	lr
 801c038:	b299      	uxth	r1, r3
 801c03a:	b909      	cbnz	r1, 801c040 <__lo0bits+0x2a>
 801c03c:	0c1b      	lsrs	r3, r3, #16
 801c03e:	2010      	movs	r0, #16
 801c040:	b2d9      	uxtb	r1, r3
 801c042:	b909      	cbnz	r1, 801c048 <__lo0bits+0x32>
 801c044:	3008      	adds	r0, #8
 801c046:	0a1b      	lsrs	r3, r3, #8
 801c048:	0719      	lsls	r1, r3, #28
 801c04a:	bf04      	itt	eq
 801c04c:	091b      	lsreq	r3, r3, #4
 801c04e:	3004      	addeq	r0, #4
 801c050:	0799      	lsls	r1, r3, #30
 801c052:	bf04      	itt	eq
 801c054:	089b      	lsreq	r3, r3, #2
 801c056:	3002      	addeq	r0, #2
 801c058:	07d9      	lsls	r1, r3, #31
 801c05a:	d403      	bmi.n	801c064 <__lo0bits+0x4e>
 801c05c:	085b      	lsrs	r3, r3, #1
 801c05e:	f100 0001 	add.w	r0, r0, #1
 801c062:	d003      	beq.n	801c06c <__lo0bits+0x56>
 801c064:	6013      	str	r3, [r2, #0]
 801c066:	4770      	bx	lr
 801c068:	2000      	movs	r0, #0
 801c06a:	4770      	bx	lr
 801c06c:	2020      	movs	r0, #32
 801c06e:	4770      	bx	lr

0801c070 <__i2b>:
 801c070:	b510      	push	{r4, lr}
 801c072:	460c      	mov	r4, r1
 801c074:	2101      	movs	r1, #1
 801c076:	f7ff febd 	bl	801bdf4 <_Balloc>
 801c07a:	4602      	mov	r2, r0
 801c07c:	b928      	cbnz	r0, 801c08a <__i2b+0x1a>
 801c07e:	4b05      	ldr	r3, [pc, #20]	@ (801c094 <__i2b+0x24>)
 801c080:	4805      	ldr	r0, [pc, #20]	@ (801c098 <__i2b+0x28>)
 801c082:	f240 1145 	movw	r1, #325	@ 0x145
 801c086:	f7fe f971 	bl	801a36c <__assert_func>
 801c08a:	2301      	movs	r3, #1
 801c08c:	6144      	str	r4, [r0, #20]
 801c08e:	6103      	str	r3, [r0, #16]
 801c090:	bd10      	pop	{r4, pc}
 801c092:	bf00      	nop
 801c094:	0801f153 	.word	0x0801f153
 801c098:	0801f1d5 	.word	0x0801f1d5

0801c09c <__multiply>:
 801c09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0a0:	4614      	mov	r4, r2
 801c0a2:	690a      	ldr	r2, [r1, #16]
 801c0a4:	6923      	ldr	r3, [r4, #16]
 801c0a6:	429a      	cmp	r2, r3
 801c0a8:	bfa8      	it	ge
 801c0aa:	4623      	movge	r3, r4
 801c0ac:	460f      	mov	r7, r1
 801c0ae:	bfa4      	itt	ge
 801c0b0:	460c      	movge	r4, r1
 801c0b2:	461f      	movge	r7, r3
 801c0b4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801c0b8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801c0bc:	68a3      	ldr	r3, [r4, #8]
 801c0be:	6861      	ldr	r1, [r4, #4]
 801c0c0:	eb0a 0609 	add.w	r6, sl, r9
 801c0c4:	42b3      	cmp	r3, r6
 801c0c6:	b085      	sub	sp, #20
 801c0c8:	bfb8      	it	lt
 801c0ca:	3101      	addlt	r1, #1
 801c0cc:	f7ff fe92 	bl	801bdf4 <_Balloc>
 801c0d0:	b930      	cbnz	r0, 801c0e0 <__multiply+0x44>
 801c0d2:	4602      	mov	r2, r0
 801c0d4:	4b44      	ldr	r3, [pc, #272]	@ (801c1e8 <__multiply+0x14c>)
 801c0d6:	4845      	ldr	r0, [pc, #276]	@ (801c1ec <__multiply+0x150>)
 801c0d8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801c0dc:	f7fe f946 	bl	801a36c <__assert_func>
 801c0e0:	f100 0514 	add.w	r5, r0, #20
 801c0e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801c0e8:	462b      	mov	r3, r5
 801c0ea:	2200      	movs	r2, #0
 801c0ec:	4543      	cmp	r3, r8
 801c0ee:	d321      	bcc.n	801c134 <__multiply+0x98>
 801c0f0:	f107 0114 	add.w	r1, r7, #20
 801c0f4:	f104 0214 	add.w	r2, r4, #20
 801c0f8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801c0fc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801c100:	9302      	str	r3, [sp, #8]
 801c102:	1b13      	subs	r3, r2, r4
 801c104:	3b15      	subs	r3, #21
 801c106:	f023 0303 	bic.w	r3, r3, #3
 801c10a:	3304      	adds	r3, #4
 801c10c:	f104 0715 	add.w	r7, r4, #21
 801c110:	42ba      	cmp	r2, r7
 801c112:	bf38      	it	cc
 801c114:	2304      	movcc	r3, #4
 801c116:	9301      	str	r3, [sp, #4]
 801c118:	9b02      	ldr	r3, [sp, #8]
 801c11a:	9103      	str	r1, [sp, #12]
 801c11c:	428b      	cmp	r3, r1
 801c11e:	d80c      	bhi.n	801c13a <__multiply+0x9e>
 801c120:	2e00      	cmp	r6, #0
 801c122:	dd03      	ble.n	801c12c <__multiply+0x90>
 801c124:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801c128:	2b00      	cmp	r3, #0
 801c12a:	d05b      	beq.n	801c1e4 <__multiply+0x148>
 801c12c:	6106      	str	r6, [r0, #16]
 801c12e:	b005      	add	sp, #20
 801c130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c134:	f843 2b04 	str.w	r2, [r3], #4
 801c138:	e7d8      	b.n	801c0ec <__multiply+0x50>
 801c13a:	f8b1 a000 	ldrh.w	sl, [r1]
 801c13e:	f1ba 0f00 	cmp.w	sl, #0
 801c142:	d024      	beq.n	801c18e <__multiply+0xf2>
 801c144:	f104 0e14 	add.w	lr, r4, #20
 801c148:	46a9      	mov	r9, r5
 801c14a:	f04f 0c00 	mov.w	ip, #0
 801c14e:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c152:	f8d9 3000 	ldr.w	r3, [r9]
 801c156:	fa1f fb87 	uxth.w	fp, r7
 801c15a:	b29b      	uxth	r3, r3
 801c15c:	fb0a 330b 	mla	r3, sl, fp, r3
 801c160:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801c164:	f8d9 7000 	ldr.w	r7, [r9]
 801c168:	4463      	add	r3, ip
 801c16a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801c16e:	fb0a c70b 	mla	r7, sl, fp, ip
 801c172:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801c176:	b29b      	uxth	r3, r3
 801c178:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801c17c:	4572      	cmp	r2, lr
 801c17e:	f849 3b04 	str.w	r3, [r9], #4
 801c182:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801c186:	d8e2      	bhi.n	801c14e <__multiply+0xb2>
 801c188:	9b01      	ldr	r3, [sp, #4]
 801c18a:	f845 c003 	str.w	ip, [r5, r3]
 801c18e:	9b03      	ldr	r3, [sp, #12]
 801c190:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801c194:	3104      	adds	r1, #4
 801c196:	f1b9 0f00 	cmp.w	r9, #0
 801c19a:	d021      	beq.n	801c1e0 <__multiply+0x144>
 801c19c:	682b      	ldr	r3, [r5, #0]
 801c19e:	f104 0c14 	add.w	ip, r4, #20
 801c1a2:	46ae      	mov	lr, r5
 801c1a4:	f04f 0a00 	mov.w	sl, #0
 801c1a8:	f8bc b000 	ldrh.w	fp, [ip]
 801c1ac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801c1b0:	fb09 770b 	mla	r7, r9, fp, r7
 801c1b4:	4457      	add	r7, sl
 801c1b6:	b29b      	uxth	r3, r3
 801c1b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801c1bc:	f84e 3b04 	str.w	r3, [lr], #4
 801c1c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 801c1c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c1c8:	f8be 3000 	ldrh.w	r3, [lr]
 801c1cc:	fb09 330a 	mla	r3, r9, sl, r3
 801c1d0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801c1d4:	4562      	cmp	r2, ip
 801c1d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c1da:	d8e5      	bhi.n	801c1a8 <__multiply+0x10c>
 801c1dc:	9f01      	ldr	r7, [sp, #4]
 801c1de:	51eb      	str	r3, [r5, r7]
 801c1e0:	3504      	adds	r5, #4
 801c1e2:	e799      	b.n	801c118 <__multiply+0x7c>
 801c1e4:	3e01      	subs	r6, #1
 801c1e6:	e79b      	b.n	801c120 <__multiply+0x84>
 801c1e8:	0801f153 	.word	0x0801f153
 801c1ec:	0801f1d5 	.word	0x0801f1d5

0801c1f0 <__pow5mult>:
 801c1f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c1f4:	4615      	mov	r5, r2
 801c1f6:	f012 0203 	ands.w	r2, r2, #3
 801c1fa:	4607      	mov	r7, r0
 801c1fc:	460e      	mov	r6, r1
 801c1fe:	d007      	beq.n	801c210 <__pow5mult+0x20>
 801c200:	4c25      	ldr	r4, [pc, #148]	@ (801c298 <__pow5mult+0xa8>)
 801c202:	3a01      	subs	r2, #1
 801c204:	2300      	movs	r3, #0
 801c206:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c20a:	f7ff fe55 	bl	801beb8 <__multadd>
 801c20e:	4606      	mov	r6, r0
 801c210:	10ad      	asrs	r5, r5, #2
 801c212:	d03d      	beq.n	801c290 <__pow5mult+0xa0>
 801c214:	69fc      	ldr	r4, [r7, #28]
 801c216:	b97c      	cbnz	r4, 801c238 <__pow5mult+0x48>
 801c218:	2010      	movs	r0, #16
 801c21a:	f7fc fb0b 	bl	8018834 <malloc>
 801c21e:	4602      	mov	r2, r0
 801c220:	61f8      	str	r0, [r7, #28]
 801c222:	b928      	cbnz	r0, 801c230 <__pow5mult+0x40>
 801c224:	4b1d      	ldr	r3, [pc, #116]	@ (801c29c <__pow5mult+0xac>)
 801c226:	481e      	ldr	r0, [pc, #120]	@ (801c2a0 <__pow5mult+0xb0>)
 801c228:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801c22c:	f7fe f89e 	bl	801a36c <__assert_func>
 801c230:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c234:	6004      	str	r4, [r0, #0]
 801c236:	60c4      	str	r4, [r0, #12]
 801c238:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801c23c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801c240:	b94c      	cbnz	r4, 801c256 <__pow5mult+0x66>
 801c242:	f240 2171 	movw	r1, #625	@ 0x271
 801c246:	4638      	mov	r0, r7
 801c248:	f7ff ff12 	bl	801c070 <__i2b>
 801c24c:	2300      	movs	r3, #0
 801c24e:	f8c8 0008 	str.w	r0, [r8, #8]
 801c252:	4604      	mov	r4, r0
 801c254:	6003      	str	r3, [r0, #0]
 801c256:	f04f 0900 	mov.w	r9, #0
 801c25a:	07eb      	lsls	r3, r5, #31
 801c25c:	d50a      	bpl.n	801c274 <__pow5mult+0x84>
 801c25e:	4631      	mov	r1, r6
 801c260:	4622      	mov	r2, r4
 801c262:	4638      	mov	r0, r7
 801c264:	f7ff ff1a 	bl	801c09c <__multiply>
 801c268:	4631      	mov	r1, r6
 801c26a:	4680      	mov	r8, r0
 801c26c:	4638      	mov	r0, r7
 801c26e:	f7ff fe01 	bl	801be74 <_Bfree>
 801c272:	4646      	mov	r6, r8
 801c274:	106d      	asrs	r5, r5, #1
 801c276:	d00b      	beq.n	801c290 <__pow5mult+0xa0>
 801c278:	6820      	ldr	r0, [r4, #0]
 801c27a:	b938      	cbnz	r0, 801c28c <__pow5mult+0x9c>
 801c27c:	4622      	mov	r2, r4
 801c27e:	4621      	mov	r1, r4
 801c280:	4638      	mov	r0, r7
 801c282:	f7ff ff0b 	bl	801c09c <__multiply>
 801c286:	6020      	str	r0, [r4, #0]
 801c288:	f8c0 9000 	str.w	r9, [r0]
 801c28c:	4604      	mov	r4, r0
 801c28e:	e7e4      	b.n	801c25a <__pow5mult+0x6a>
 801c290:	4630      	mov	r0, r6
 801c292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c296:	bf00      	nop
 801c298:	0801f230 	.word	0x0801f230
 801c29c:	0801ef38 	.word	0x0801ef38
 801c2a0:	0801f1d5 	.word	0x0801f1d5

0801c2a4 <__lshift>:
 801c2a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c2a8:	460c      	mov	r4, r1
 801c2aa:	6849      	ldr	r1, [r1, #4]
 801c2ac:	6923      	ldr	r3, [r4, #16]
 801c2ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801c2b2:	68a3      	ldr	r3, [r4, #8]
 801c2b4:	4607      	mov	r7, r0
 801c2b6:	4691      	mov	r9, r2
 801c2b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801c2bc:	f108 0601 	add.w	r6, r8, #1
 801c2c0:	42b3      	cmp	r3, r6
 801c2c2:	db0b      	blt.n	801c2dc <__lshift+0x38>
 801c2c4:	4638      	mov	r0, r7
 801c2c6:	f7ff fd95 	bl	801bdf4 <_Balloc>
 801c2ca:	4605      	mov	r5, r0
 801c2cc:	b948      	cbnz	r0, 801c2e2 <__lshift+0x3e>
 801c2ce:	4602      	mov	r2, r0
 801c2d0:	4b28      	ldr	r3, [pc, #160]	@ (801c374 <__lshift+0xd0>)
 801c2d2:	4829      	ldr	r0, [pc, #164]	@ (801c378 <__lshift+0xd4>)
 801c2d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801c2d8:	f7fe f848 	bl	801a36c <__assert_func>
 801c2dc:	3101      	adds	r1, #1
 801c2de:	005b      	lsls	r3, r3, #1
 801c2e0:	e7ee      	b.n	801c2c0 <__lshift+0x1c>
 801c2e2:	2300      	movs	r3, #0
 801c2e4:	f100 0114 	add.w	r1, r0, #20
 801c2e8:	f100 0210 	add.w	r2, r0, #16
 801c2ec:	4618      	mov	r0, r3
 801c2ee:	4553      	cmp	r3, sl
 801c2f0:	db33      	blt.n	801c35a <__lshift+0xb6>
 801c2f2:	6920      	ldr	r0, [r4, #16]
 801c2f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801c2f8:	f104 0314 	add.w	r3, r4, #20
 801c2fc:	f019 091f 	ands.w	r9, r9, #31
 801c300:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801c304:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801c308:	d02b      	beq.n	801c362 <__lshift+0xbe>
 801c30a:	f1c9 0e20 	rsb	lr, r9, #32
 801c30e:	468a      	mov	sl, r1
 801c310:	2200      	movs	r2, #0
 801c312:	6818      	ldr	r0, [r3, #0]
 801c314:	fa00 f009 	lsl.w	r0, r0, r9
 801c318:	4310      	orrs	r0, r2
 801c31a:	f84a 0b04 	str.w	r0, [sl], #4
 801c31e:	f853 2b04 	ldr.w	r2, [r3], #4
 801c322:	459c      	cmp	ip, r3
 801c324:	fa22 f20e 	lsr.w	r2, r2, lr
 801c328:	d8f3      	bhi.n	801c312 <__lshift+0x6e>
 801c32a:	ebac 0304 	sub.w	r3, ip, r4
 801c32e:	3b15      	subs	r3, #21
 801c330:	f023 0303 	bic.w	r3, r3, #3
 801c334:	3304      	adds	r3, #4
 801c336:	f104 0015 	add.w	r0, r4, #21
 801c33a:	4584      	cmp	ip, r0
 801c33c:	bf38      	it	cc
 801c33e:	2304      	movcc	r3, #4
 801c340:	50ca      	str	r2, [r1, r3]
 801c342:	b10a      	cbz	r2, 801c348 <__lshift+0xa4>
 801c344:	f108 0602 	add.w	r6, r8, #2
 801c348:	3e01      	subs	r6, #1
 801c34a:	4638      	mov	r0, r7
 801c34c:	612e      	str	r6, [r5, #16]
 801c34e:	4621      	mov	r1, r4
 801c350:	f7ff fd90 	bl	801be74 <_Bfree>
 801c354:	4628      	mov	r0, r5
 801c356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c35a:	f842 0f04 	str.w	r0, [r2, #4]!
 801c35e:	3301      	adds	r3, #1
 801c360:	e7c5      	b.n	801c2ee <__lshift+0x4a>
 801c362:	3904      	subs	r1, #4
 801c364:	f853 2b04 	ldr.w	r2, [r3], #4
 801c368:	f841 2f04 	str.w	r2, [r1, #4]!
 801c36c:	459c      	cmp	ip, r3
 801c36e:	d8f9      	bhi.n	801c364 <__lshift+0xc0>
 801c370:	e7ea      	b.n	801c348 <__lshift+0xa4>
 801c372:	bf00      	nop
 801c374:	0801f153 	.word	0x0801f153
 801c378:	0801f1d5 	.word	0x0801f1d5

0801c37c <__mcmp>:
 801c37c:	690a      	ldr	r2, [r1, #16]
 801c37e:	4603      	mov	r3, r0
 801c380:	6900      	ldr	r0, [r0, #16]
 801c382:	1a80      	subs	r0, r0, r2
 801c384:	b530      	push	{r4, r5, lr}
 801c386:	d10e      	bne.n	801c3a6 <__mcmp+0x2a>
 801c388:	3314      	adds	r3, #20
 801c38a:	3114      	adds	r1, #20
 801c38c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801c390:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801c394:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801c398:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801c39c:	4295      	cmp	r5, r2
 801c39e:	d003      	beq.n	801c3a8 <__mcmp+0x2c>
 801c3a0:	d205      	bcs.n	801c3ae <__mcmp+0x32>
 801c3a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c3a6:	bd30      	pop	{r4, r5, pc}
 801c3a8:	42a3      	cmp	r3, r4
 801c3aa:	d3f3      	bcc.n	801c394 <__mcmp+0x18>
 801c3ac:	e7fb      	b.n	801c3a6 <__mcmp+0x2a>
 801c3ae:	2001      	movs	r0, #1
 801c3b0:	e7f9      	b.n	801c3a6 <__mcmp+0x2a>
	...

0801c3b4 <__mdiff>:
 801c3b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3b8:	4689      	mov	r9, r1
 801c3ba:	4606      	mov	r6, r0
 801c3bc:	4611      	mov	r1, r2
 801c3be:	4648      	mov	r0, r9
 801c3c0:	4614      	mov	r4, r2
 801c3c2:	f7ff ffdb 	bl	801c37c <__mcmp>
 801c3c6:	1e05      	subs	r5, r0, #0
 801c3c8:	d112      	bne.n	801c3f0 <__mdiff+0x3c>
 801c3ca:	4629      	mov	r1, r5
 801c3cc:	4630      	mov	r0, r6
 801c3ce:	f7ff fd11 	bl	801bdf4 <_Balloc>
 801c3d2:	4602      	mov	r2, r0
 801c3d4:	b928      	cbnz	r0, 801c3e2 <__mdiff+0x2e>
 801c3d6:	4b3f      	ldr	r3, [pc, #252]	@ (801c4d4 <__mdiff+0x120>)
 801c3d8:	f240 2137 	movw	r1, #567	@ 0x237
 801c3dc:	483e      	ldr	r0, [pc, #248]	@ (801c4d8 <__mdiff+0x124>)
 801c3de:	f7fd ffc5 	bl	801a36c <__assert_func>
 801c3e2:	2301      	movs	r3, #1
 801c3e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801c3e8:	4610      	mov	r0, r2
 801c3ea:	b003      	add	sp, #12
 801c3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3f0:	bfbc      	itt	lt
 801c3f2:	464b      	movlt	r3, r9
 801c3f4:	46a1      	movlt	r9, r4
 801c3f6:	4630      	mov	r0, r6
 801c3f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801c3fc:	bfba      	itte	lt
 801c3fe:	461c      	movlt	r4, r3
 801c400:	2501      	movlt	r5, #1
 801c402:	2500      	movge	r5, #0
 801c404:	f7ff fcf6 	bl	801bdf4 <_Balloc>
 801c408:	4602      	mov	r2, r0
 801c40a:	b918      	cbnz	r0, 801c414 <__mdiff+0x60>
 801c40c:	4b31      	ldr	r3, [pc, #196]	@ (801c4d4 <__mdiff+0x120>)
 801c40e:	f240 2145 	movw	r1, #581	@ 0x245
 801c412:	e7e3      	b.n	801c3dc <__mdiff+0x28>
 801c414:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801c418:	6926      	ldr	r6, [r4, #16]
 801c41a:	60c5      	str	r5, [r0, #12]
 801c41c:	f109 0310 	add.w	r3, r9, #16
 801c420:	f109 0514 	add.w	r5, r9, #20
 801c424:	f104 0e14 	add.w	lr, r4, #20
 801c428:	f100 0b14 	add.w	fp, r0, #20
 801c42c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801c430:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801c434:	9301      	str	r3, [sp, #4]
 801c436:	46d9      	mov	r9, fp
 801c438:	f04f 0c00 	mov.w	ip, #0
 801c43c:	9b01      	ldr	r3, [sp, #4]
 801c43e:	f85e 0b04 	ldr.w	r0, [lr], #4
 801c442:	f853 af04 	ldr.w	sl, [r3, #4]!
 801c446:	9301      	str	r3, [sp, #4]
 801c448:	fa1f f38a 	uxth.w	r3, sl
 801c44c:	4619      	mov	r1, r3
 801c44e:	b283      	uxth	r3, r0
 801c450:	1acb      	subs	r3, r1, r3
 801c452:	0c00      	lsrs	r0, r0, #16
 801c454:	4463      	add	r3, ip
 801c456:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801c45a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801c45e:	b29b      	uxth	r3, r3
 801c460:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801c464:	4576      	cmp	r6, lr
 801c466:	f849 3b04 	str.w	r3, [r9], #4
 801c46a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801c46e:	d8e5      	bhi.n	801c43c <__mdiff+0x88>
 801c470:	1b33      	subs	r3, r6, r4
 801c472:	3b15      	subs	r3, #21
 801c474:	f023 0303 	bic.w	r3, r3, #3
 801c478:	3415      	adds	r4, #21
 801c47a:	3304      	adds	r3, #4
 801c47c:	42a6      	cmp	r6, r4
 801c47e:	bf38      	it	cc
 801c480:	2304      	movcc	r3, #4
 801c482:	441d      	add	r5, r3
 801c484:	445b      	add	r3, fp
 801c486:	461e      	mov	r6, r3
 801c488:	462c      	mov	r4, r5
 801c48a:	4544      	cmp	r4, r8
 801c48c:	d30e      	bcc.n	801c4ac <__mdiff+0xf8>
 801c48e:	f108 0103 	add.w	r1, r8, #3
 801c492:	1b49      	subs	r1, r1, r5
 801c494:	f021 0103 	bic.w	r1, r1, #3
 801c498:	3d03      	subs	r5, #3
 801c49a:	45a8      	cmp	r8, r5
 801c49c:	bf38      	it	cc
 801c49e:	2100      	movcc	r1, #0
 801c4a0:	440b      	add	r3, r1
 801c4a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801c4a6:	b191      	cbz	r1, 801c4ce <__mdiff+0x11a>
 801c4a8:	6117      	str	r7, [r2, #16]
 801c4aa:	e79d      	b.n	801c3e8 <__mdiff+0x34>
 801c4ac:	f854 1b04 	ldr.w	r1, [r4], #4
 801c4b0:	46e6      	mov	lr, ip
 801c4b2:	0c08      	lsrs	r0, r1, #16
 801c4b4:	fa1c fc81 	uxtah	ip, ip, r1
 801c4b8:	4471      	add	r1, lr
 801c4ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801c4be:	b289      	uxth	r1, r1
 801c4c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801c4c4:	f846 1b04 	str.w	r1, [r6], #4
 801c4c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801c4cc:	e7dd      	b.n	801c48a <__mdiff+0xd6>
 801c4ce:	3f01      	subs	r7, #1
 801c4d0:	e7e7      	b.n	801c4a2 <__mdiff+0xee>
 801c4d2:	bf00      	nop
 801c4d4:	0801f153 	.word	0x0801f153
 801c4d8:	0801f1d5 	.word	0x0801f1d5

0801c4dc <__ulp>:
 801c4dc:	b082      	sub	sp, #8
 801c4de:	ed8d 0b00 	vstr	d0, [sp]
 801c4e2:	9a01      	ldr	r2, [sp, #4]
 801c4e4:	4b0f      	ldr	r3, [pc, #60]	@ (801c524 <__ulp+0x48>)
 801c4e6:	4013      	ands	r3, r2
 801c4e8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801c4ec:	2b00      	cmp	r3, #0
 801c4ee:	dc08      	bgt.n	801c502 <__ulp+0x26>
 801c4f0:	425b      	negs	r3, r3
 801c4f2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801c4f6:	ea4f 5223 	mov.w	r2, r3, asr #20
 801c4fa:	da04      	bge.n	801c506 <__ulp+0x2a>
 801c4fc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801c500:	4113      	asrs	r3, r2
 801c502:	2200      	movs	r2, #0
 801c504:	e008      	b.n	801c518 <__ulp+0x3c>
 801c506:	f1a2 0314 	sub.w	r3, r2, #20
 801c50a:	2b1e      	cmp	r3, #30
 801c50c:	bfda      	itte	le
 801c50e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801c512:	40da      	lsrle	r2, r3
 801c514:	2201      	movgt	r2, #1
 801c516:	2300      	movs	r3, #0
 801c518:	4619      	mov	r1, r3
 801c51a:	4610      	mov	r0, r2
 801c51c:	ec41 0b10 	vmov	d0, r0, r1
 801c520:	b002      	add	sp, #8
 801c522:	4770      	bx	lr
 801c524:	7ff00000 	.word	0x7ff00000

0801c528 <__b2d>:
 801c528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c52c:	6906      	ldr	r6, [r0, #16]
 801c52e:	f100 0814 	add.w	r8, r0, #20
 801c532:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801c536:	1f37      	subs	r7, r6, #4
 801c538:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801c53c:	4610      	mov	r0, r2
 801c53e:	f7ff fd4b 	bl	801bfd8 <__hi0bits>
 801c542:	f1c0 0320 	rsb	r3, r0, #32
 801c546:	280a      	cmp	r0, #10
 801c548:	600b      	str	r3, [r1, #0]
 801c54a:	491b      	ldr	r1, [pc, #108]	@ (801c5b8 <__b2d+0x90>)
 801c54c:	dc15      	bgt.n	801c57a <__b2d+0x52>
 801c54e:	f1c0 0c0b 	rsb	ip, r0, #11
 801c552:	fa22 f30c 	lsr.w	r3, r2, ip
 801c556:	45b8      	cmp	r8, r7
 801c558:	ea43 0501 	orr.w	r5, r3, r1
 801c55c:	bf34      	ite	cc
 801c55e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801c562:	2300      	movcs	r3, #0
 801c564:	3015      	adds	r0, #21
 801c566:	fa02 f000 	lsl.w	r0, r2, r0
 801c56a:	fa23 f30c 	lsr.w	r3, r3, ip
 801c56e:	4303      	orrs	r3, r0
 801c570:	461c      	mov	r4, r3
 801c572:	ec45 4b10 	vmov	d0, r4, r5
 801c576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c57a:	45b8      	cmp	r8, r7
 801c57c:	bf3a      	itte	cc
 801c57e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801c582:	f1a6 0708 	subcc.w	r7, r6, #8
 801c586:	2300      	movcs	r3, #0
 801c588:	380b      	subs	r0, #11
 801c58a:	d012      	beq.n	801c5b2 <__b2d+0x8a>
 801c58c:	f1c0 0120 	rsb	r1, r0, #32
 801c590:	fa23 f401 	lsr.w	r4, r3, r1
 801c594:	4082      	lsls	r2, r0
 801c596:	4322      	orrs	r2, r4
 801c598:	4547      	cmp	r7, r8
 801c59a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801c59e:	bf8c      	ite	hi
 801c5a0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801c5a4:	2200      	movls	r2, #0
 801c5a6:	4083      	lsls	r3, r0
 801c5a8:	40ca      	lsrs	r2, r1
 801c5aa:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801c5ae:	4313      	orrs	r3, r2
 801c5b0:	e7de      	b.n	801c570 <__b2d+0x48>
 801c5b2:	ea42 0501 	orr.w	r5, r2, r1
 801c5b6:	e7db      	b.n	801c570 <__b2d+0x48>
 801c5b8:	3ff00000 	.word	0x3ff00000

0801c5bc <__d2b>:
 801c5bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c5c0:	460f      	mov	r7, r1
 801c5c2:	2101      	movs	r1, #1
 801c5c4:	ec59 8b10 	vmov	r8, r9, d0
 801c5c8:	4616      	mov	r6, r2
 801c5ca:	f7ff fc13 	bl	801bdf4 <_Balloc>
 801c5ce:	4604      	mov	r4, r0
 801c5d0:	b930      	cbnz	r0, 801c5e0 <__d2b+0x24>
 801c5d2:	4602      	mov	r2, r0
 801c5d4:	4b23      	ldr	r3, [pc, #140]	@ (801c664 <__d2b+0xa8>)
 801c5d6:	4824      	ldr	r0, [pc, #144]	@ (801c668 <__d2b+0xac>)
 801c5d8:	f240 310f 	movw	r1, #783	@ 0x30f
 801c5dc:	f7fd fec6 	bl	801a36c <__assert_func>
 801c5e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801c5e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c5e8:	b10d      	cbz	r5, 801c5ee <__d2b+0x32>
 801c5ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801c5ee:	9301      	str	r3, [sp, #4]
 801c5f0:	f1b8 0300 	subs.w	r3, r8, #0
 801c5f4:	d023      	beq.n	801c63e <__d2b+0x82>
 801c5f6:	4668      	mov	r0, sp
 801c5f8:	9300      	str	r3, [sp, #0]
 801c5fa:	f7ff fd0c 	bl	801c016 <__lo0bits>
 801c5fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 801c602:	b1d0      	cbz	r0, 801c63a <__d2b+0x7e>
 801c604:	f1c0 0320 	rsb	r3, r0, #32
 801c608:	fa02 f303 	lsl.w	r3, r2, r3
 801c60c:	430b      	orrs	r3, r1
 801c60e:	40c2      	lsrs	r2, r0
 801c610:	6163      	str	r3, [r4, #20]
 801c612:	9201      	str	r2, [sp, #4]
 801c614:	9b01      	ldr	r3, [sp, #4]
 801c616:	61a3      	str	r3, [r4, #24]
 801c618:	2b00      	cmp	r3, #0
 801c61a:	bf0c      	ite	eq
 801c61c:	2201      	moveq	r2, #1
 801c61e:	2202      	movne	r2, #2
 801c620:	6122      	str	r2, [r4, #16]
 801c622:	b1a5      	cbz	r5, 801c64e <__d2b+0x92>
 801c624:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801c628:	4405      	add	r5, r0
 801c62a:	603d      	str	r5, [r7, #0]
 801c62c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801c630:	6030      	str	r0, [r6, #0]
 801c632:	4620      	mov	r0, r4
 801c634:	b003      	add	sp, #12
 801c636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c63a:	6161      	str	r1, [r4, #20]
 801c63c:	e7ea      	b.n	801c614 <__d2b+0x58>
 801c63e:	a801      	add	r0, sp, #4
 801c640:	f7ff fce9 	bl	801c016 <__lo0bits>
 801c644:	9b01      	ldr	r3, [sp, #4]
 801c646:	6163      	str	r3, [r4, #20]
 801c648:	3020      	adds	r0, #32
 801c64a:	2201      	movs	r2, #1
 801c64c:	e7e8      	b.n	801c620 <__d2b+0x64>
 801c64e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801c652:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801c656:	6038      	str	r0, [r7, #0]
 801c658:	6918      	ldr	r0, [r3, #16]
 801c65a:	f7ff fcbd 	bl	801bfd8 <__hi0bits>
 801c65e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801c662:	e7e5      	b.n	801c630 <__d2b+0x74>
 801c664:	0801f153 	.word	0x0801f153
 801c668:	0801f1d5 	.word	0x0801f1d5

0801c66c <__ratio>:
 801c66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c670:	b085      	sub	sp, #20
 801c672:	e9cd 1000 	strd	r1, r0, [sp]
 801c676:	a902      	add	r1, sp, #8
 801c678:	f7ff ff56 	bl	801c528 <__b2d>
 801c67c:	9800      	ldr	r0, [sp, #0]
 801c67e:	a903      	add	r1, sp, #12
 801c680:	ec55 4b10 	vmov	r4, r5, d0
 801c684:	f7ff ff50 	bl	801c528 <__b2d>
 801c688:	9b01      	ldr	r3, [sp, #4]
 801c68a:	6919      	ldr	r1, [r3, #16]
 801c68c:	9b00      	ldr	r3, [sp, #0]
 801c68e:	691b      	ldr	r3, [r3, #16]
 801c690:	1ac9      	subs	r1, r1, r3
 801c692:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801c696:	1a9b      	subs	r3, r3, r2
 801c698:	ec5b ab10 	vmov	sl, fp, d0
 801c69c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801c6a0:	2b00      	cmp	r3, #0
 801c6a2:	bfce      	itee	gt
 801c6a4:	462a      	movgt	r2, r5
 801c6a6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801c6aa:	465a      	movle	r2, fp
 801c6ac:	462f      	mov	r7, r5
 801c6ae:	46d9      	mov	r9, fp
 801c6b0:	bfcc      	ite	gt
 801c6b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801c6b6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801c6ba:	464b      	mov	r3, r9
 801c6bc:	4652      	mov	r2, sl
 801c6be:	4620      	mov	r0, r4
 801c6c0:	4639      	mov	r1, r7
 801c6c2:	f7e6 faf5 	bl	8002cb0 <__aeabi_ddiv>
 801c6c6:	ec41 0b10 	vmov	d0, r0, r1
 801c6ca:	b005      	add	sp, #20
 801c6cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c6d0 <__copybits>:
 801c6d0:	3901      	subs	r1, #1
 801c6d2:	b570      	push	{r4, r5, r6, lr}
 801c6d4:	1149      	asrs	r1, r1, #5
 801c6d6:	6914      	ldr	r4, [r2, #16]
 801c6d8:	3101      	adds	r1, #1
 801c6da:	f102 0314 	add.w	r3, r2, #20
 801c6de:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801c6e2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801c6e6:	1f05      	subs	r5, r0, #4
 801c6e8:	42a3      	cmp	r3, r4
 801c6ea:	d30c      	bcc.n	801c706 <__copybits+0x36>
 801c6ec:	1aa3      	subs	r3, r4, r2
 801c6ee:	3b11      	subs	r3, #17
 801c6f0:	f023 0303 	bic.w	r3, r3, #3
 801c6f4:	3211      	adds	r2, #17
 801c6f6:	42a2      	cmp	r2, r4
 801c6f8:	bf88      	it	hi
 801c6fa:	2300      	movhi	r3, #0
 801c6fc:	4418      	add	r0, r3
 801c6fe:	2300      	movs	r3, #0
 801c700:	4288      	cmp	r0, r1
 801c702:	d305      	bcc.n	801c710 <__copybits+0x40>
 801c704:	bd70      	pop	{r4, r5, r6, pc}
 801c706:	f853 6b04 	ldr.w	r6, [r3], #4
 801c70a:	f845 6f04 	str.w	r6, [r5, #4]!
 801c70e:	e7eb      	b.n	801c6e8 <__copybits+0x18>
 801c710:	f840 3b04 	str.w	r3, [r0], #4
 801c714:	e7f4      	b.n	801c700 <__copybits+0x30>

0801c716 <__any_on>:
 801c716:	f100 0214 	add.w	r2, r0, #20
 801c71a:	6900      	ldr	r0, [r0, #16]
 801c71c:	114b      	asrs	r3, r1, #5
 801c71e:	4298      	cmp	r0, r3
 801c720:	b510      	push	{r4, lr}
 801c722:	db11      	blt.n	801c748 <__any_on+0x32>
 801c724:	dd0a      	ble.n	801c73c <__any_on+0x26>
 801c726:	f011 011f 	ands.w	r1, r1, #31
 801c72a:	d007      	beq.n	801c73c <__any_on+0x26>
 801c72c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801c730:	fa24 f001 	lsr.w	r0, r4, r1
 801c734:	fa00 f101 	lsl.w	r1, r0, r1
 801c738:	428c      	cmp	r4, r1
 801c73a:	d10b      	bne.n	801c754 <__any_on+0x3e>
 801c73c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c740:	4293      	cmp	r3, r2
 801c742:	d803      	bhi.n	801c74c <__any_on+0x36>
 801c744:	2000      	movs	r0, #0
 801c746:	bd10      	pop	{r4, pc}
 801c748:	4603      	mov	r3, r0
 801c74a:	e7f7      	b.n	801c73c <__any_on+0x26>
 801c74c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801c750:	2900      	cmp	r1, #0
 801c752:	d0f5      	beq.n	801c740 <__any_on+0x2a>
 801c754:	2001      	movs	r0, #1
 801c756:	e7f6      	b.n	801c746 <__any_on+0x30>

0801c758 <__sread>:
 801c758:	b510      	push	{r4, lr}
 801c75a:	460c      	mov	r4, r1
 801c75c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c760:	f000 f9e0 	bl	801cb24 <_read_r>
 801c764:	2800      	cmp	r0, #0
 801c766:	bfab      	itete	ge
 801c768:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801c76a:	89a3      	ldrhlt	r3, [r4, #12]
 801c76c:	181b      	addge	r3, r3, r0
 801c76e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801c772:	bfac      	ite	ge
 801c774:	6563      	strge	r3, [r4, #84]	@ 0x54
 801c776:	81a3      	strhlt	r3, [r4, #12]
 801c778:	bd10      	pop	{r4, pc}

0801c77a <__swrite>:
 801c77a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c77e:	461f      	mov	r7, r3
 801c780:	898b      	ldrh	r3, [r1, #12]
 801c782:	05db      	lsls	r3, r3, #23
 801c784:	4605      	mov	r5, r0
 801c786:	460c      	mov	r4, r1
 801c788:	4616      	mov	r6, r2
 801c78a:	d505      	bpl.n	801c798 <__swrite+0x1e>
 801c78c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c790:	2302      	movs	r3, #2
 801c792:	2200      	movs	r2, #0
 801c794:	f000 f9b4 	bl	801cb00 <_lseek_r>
 801c798:	89a3      	ldrh	r3, [r4, #12]
 801c79a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c79e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801c7a2:	81a3      	strh	r3, [r4, #12]
 801c7a4:	4632      	mov	r2, r6
 801c7a6:	463b      	mov	r3, r7
 801c7a8:	4628      	mov	r0, r5
 801c7aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c7ae:	f000 b9cb 	b.w	801cb48 <_write_r>

0801c7b2 <__sseek>:
 801c7b2:	b510      	push	{r4, lr}
 801c7b4:	460c      	mov	r4, r1
 801c7b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c7ba:	f000 f9a1 	bl	801cb00 <_lseek_r>
 801c7be:	1c43      	adds	r3, r0, #1
 801c7c0:	89a3      	ldrh	r3, [r4, #12]
 801c7c2:	bf15      	itete	ne
 801c7c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 801c7c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801c7ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801c7ce:	81a3      	strheq	r3, [r4, #12]
 801c7d0:	bf18      	it	ne
 801c7d2:	81a3      	strhne	r3, [r4, #12]
 801c7d4:	bd10      	pop	{r4, pc}

0801c7d6 <__sclose>:
 801c7d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c7da:	f000 b95f 	b.w	801ca9c <_close_r>
	...

0801c7e0 <fiprintf>:
 801c7e0:	b40e      	push	{r1, r2, r3}
 801c7e2:	b503      	push	{r0, r1, lr}
 801c7e4:	4601      	mov	r1, r0
 801c7e6:	ab03      	add	r3, sp, #12
 801c7e8:	4805      	ldr	r0, [pc, #20]	@ (801c800 <fiprintf+0x20>)
 801c7ea:	f853 2b04 	ldr.w	r2, [r3], #4
 801c7ee:	6800      	ldr	r0, [r0, #0]
 801c7f0:	9301      	str	r3, [sp, #4]
 801c7f2:	f7ff f929 	bl	801ba48 <_vfiprintf_r>
 801c7f6:	b002      	add	sp, #8
 801c7f8:	f85d eb04 	ldr.w	lr, [sp], #4
 801c7fc:	b003      	add	sp, #12
 801c7fe:	4770      	bx	lr
 801c800:	200004cc 	.word	0x200004cc

0801c804 <_realloc_r>:
 801c804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c808:	4680      	mov	r8, r0
 801c80a:	4615      	mov	r5, r2
 801c80c:	460c      	mov	r4, r1
 801c80e:	b921      	cbnz	r1, 801c81a <_realloc_r+0x16>
 801c810:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c814:	4611      	mov	r1, r2
 801c816:	f7fc b837 	b.w	8018888 <_malloc_r>
 801c81a:	b92a      	cbnz	r2, 801c828 <_realloc_r+0x24>
 801c81c:	f7fe fc10 	bl	801b040 <_free_r>
 801c820:	2400      	movs	r4, #0
 801c822:	4620      	mov	r0, r4
 801c824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c828:	f000 f9bb 	bl	801cba2 <_malloc_usable_size_r>
 801c82c:	4285      	cmp	r5, r0
 801c82e:	4606      	mov	r6, r0
 801c830:	d802      	bhi.n	801c838 <_realloc_r+0x34>
 801c832:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801c836:	d8f4      	bhi.n	801c822 <_realloc_r+0x1e>
 801c838:	4629      	mov	r1, r5
 801c83a:	4640      	mov	r0, r8
 801c83c:	f7fc f824 	bl	8018888 <_malloc_r>
 801c840:	4607      	mov	r7, r0
 801c842:	2800      	cmp	r0, #0
 801c844:	d0ec      	beq.n	801c820 <_realloc_r+0x1c>
 801c846:	42b5      	cmp	r5, r6
 801c848:	462a      	mov	r2, r5
 801c84a:	4621      	mov	r1, r4
 801c84c:	bf28      	it	cs
 801c84e:	4632      	movcs	r2, r6
 801c850:	f7fd fd6c 	bl	801a32c <memcpy>
 801c854:	4621      	mov	r1, r4
 801c856:	4640      	mov	r0, r8
 801c858:	f7fe fbf2 	bl	801b040 <_free_r>
 801c85c:	463c      	mov	r4, r7
 801c85e:	e7e0      	b.n	801c822 <_realloc_r+0x1e>

0801c860 <__swbuf_r>:
 801c860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c862:	460e      	mov	r6, r1
 801c864:	4614      	mov	r4, r2
 801c866:	4605      	mov	r5, r0
 801c868:	b118      	cbz	r0, 801c872 <__swbuf_r+0x12>
 801c86a:	6a03      	ldr	r3, [r0, #32]
 801c86c:	b90b      	cbnz	r3, 801c872 <__swbuf_r+0x12>
 801c86e:	f7fc fd19 	bl	80192a4 <__sinit>
 801c872:	69a3      	ldr	r3, [r4, #24]
 801c874:	60a3      	str	r3, [r4, #8]
 801c876:	89a3      	ldrh	r3, [r4, #12]
 801c878:	071a      	lsls	r2, r3, #28
 801c87a:	d501      	bpl.n	801c880 <__swbuf_r+0x20>
 801c87c:	6923      	ldr	r3, [r4, #16]
 801c87e:	b943      	cbnz	r3, 801c892 <__swbuf_r+0x32>
 801c880:	4621      	mov	r1, r4
 801c882:	4628      	mov	r0, r5
 801c884:	f000 f82a 	bl	801c8dc <__swsetup_r>
 801c888:	b118      	cbz	r0, 801c892 <__swbuf_r+0x32>
 801c88a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801c88e:	4638      	mov	r0, r7
 801c890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c892:	6823      	ldr	r3, [r4, #0]
 801c894:	6922      	ldr	r2, [r4, #16]
 801c896:	1a98      	subs	r0, r3, r2
 801c898:	6963      	ldr	r3, [r4, #20]
 801c89a:	b2f6      	uxtb	r6, r6
 801c89c:	4283      	cmp	r3, r0
 801c89e:	4637      	mov	r7, r6
 801c8a0:	dc05      	bgt.n	801c8ae <__swbuf_r+0x4e>
 801c8a2:	4621      	mov	r1, r4
 801c8a4:	4628      	mov	r0, r5
 801c8a6:	f7ff fa7d 	bl	801bda4 <_fflush_r>
 801c8aa:	2800      	cmp	r0, #0
 801c8ac:	d1ed      	bne.n	801c88a <__swbuf_r+0x2a>
 801c8ae:	68a3      	ldr	r3, [r4, #8]
 801c8b0:	3b01      	subs	r3, #1
 801c8b2:	60a3      	str	r3, [r4, #8]
 801c8b4:	6823      	ldr	r3, [r4, #0]
 801c8b6:	1c5a      	adds	r2, r3, #1
 801c8b8:	6022      	str	r2, [r4, #0]
 801c8ba:	701e      	strb	r6, [r3, #0]
 801c8bc:	6962      	ldr	r2, [r4, #20]
 801c8be:	1c43      	adds	r3, r0, #1
 801c8c0:	429a      	cmp	r2, r3
 801c8c2:	d004      	beq.n	801c8ce <__swbuf_r+0x6e>
 801c8c4:	89a3      	ldrh	r3, [r4, #12]
 801c8c6:	07db      	lsls	r3, r3, #31
 801c8c8:	d5e1      	bpl.n	801c88e <__swbuf_r+0x2e>
 801c8ca:	2e0a      	cmp	r6, #10
 801c8cc:	d1df      	bne.n	801c88e <__swbuf_r+0x2e>
 801c8ce:	4621      	mov	r1, r4
 801c8d0:	4628      	mov	r0, r5
 801c8d2:	f7ff fa67 	bl	801bda4 <_fflush_r>
 801c8d6:	2800      	cmp	r0, #0
 801c8d8:	d0d9      	beq.n	801c88e <__swbuf_r+0x2e>
 801c8da:	e7d6      	b.n	801c88a <__swbuf_r+0x2a>

0801c8dc <__swsetup_r>:
 801c8dc:	b538      	push	{r3, r4, r5, lr}
 801c8de:	4b29      	ldr	r3, [pc, #164]	@ (801c984 <__swsetup_r+0xa8>)
 801c8e0:	4605      	mov	r5, r0
 801c8e2:	6818      	ldr	r0, [r3, #0]
 801c8e4:	460c      	mov	r4, r1
 801c8e6:	b118      	cbz	r0, 801c8f0 <__swsetup_r+0x14>
 801c8e8:	6a03      	ldr	r3, [r0, #32]
 801c8ea:	b90b      	cbnz	r3, 801c8f0 <__swsetup_r+0x14>
 801c8ec:	f7fc fcda 	bl	80192a4 <__sinit>
 801c8f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c8f4:	0719      	lsls	r1, r3, #28
 801c8f6:	d422      	bmi.n	801c93e <__swsetup_r+0x62>
 801c8f8:	06da      	lsls	r2, r3, #27
 801c8fa:	d407      	bmi.n	801c90c <__swsetup_r+0x30>
 801c8fc:	2209      	movs	r2, #9
 801c8fe:	602a      	str	r2, [r5, #0]
 801c900:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c904:	81a3      	strh	r3, [r4, #12]
 801c906:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c90a:	e033      	b.n	801c974 <__swsetup_r+0x98>
 801c90c:	0758      	lsls	r0, r3, #29
 801c90e:	d512      	bpl.n	801c936 <__swsetup_r+0x5a>
 801c910:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c912:	b141      	cbz	r1, 801c926 <__swsetup_r+0x4a>
 801c914:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c918:	4299      	cmp	r1, r3
 801c91a:	d002      	beq.n	801c922 <__swsetup_r+0x46>
 801c91c:	4628      	mov	r0, r5
 801c91e:	f7fe fb8f 	bl	801b040 <_free_r>
 801c922:	2300      	movs	r3, #0
 801c924:	6363      	str	r3, [r4, #52]	@ 0x34
 801c926:	89a3      	ldrh	r3, [r4, #12]
 801c928:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801c92c:	81a3      	strh	r3, [r4, #12]
 801c92e:	2300      	movs	r3, #0
 801c930:	6063      	str	r3, [r4, #4]
 801c932:	6923      	ldr	r3, [r4, #16]
 801c934:	6023      	str	r3, [r4, #0]
 801c936:	89a3      	ldrh	r3, [r4, #12]
 801c938:	f043 0308 	orr.w	r3, r3, #8
 801c93c:	81a3      	strh	r3, [r4, #12]
 801c93e:	6923      	ldr	r3, [r4, #16]
 801c940:	b94b      	cbnz	r3, 801c956 <__swsetup_r+0x7a>
 801c942:	89a3      	ldrh	r3, [r4, #12]
 801c944:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801c948:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c94c:	d003      	beq.n	801c956 <__swsetup_r+0x7a>
 801c94e:	4621      	mov	r1, r4
 801c950:	4628      	mov	r0, r5
 801c952:	f000 f84c 	bl	801c9ee <__smakebuf_r>
 801c956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c95a:	f013 0201 	ands.w	r2, r3, #1
 801c95e:	d00a      	beq.n	801c976 <__swsetup_r+0x9a>
 801c960:	2200      	movs	r2, #0
 801c962:	60a2      	str	r2, [r4, #8]
 801c964:	6962      	ldr	r2, [r4, #20]
 801c966:	4252      	negs	r2, r2
 801c968:	61a2      	str	r2, [r4, #24]
 801c96a:	6922      	ldr	r2, [r4, #16]
 801c96c:	b942      	cbnz	r2, 801c980 <__swsetup_r+0xa4>
 801c96e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801c972:	d1c5      	bne.n	801c900 <__swsetup_r+0x24>
 801c974:	bd38      	pop	{r3, r4, r5, pc}
 801c976:	0799      	lsls	r1, r3, #30
 801c978:	bf58      	it	pl
 801c97a:	6962      	ldrpl	r2, [r4, #20]
 801c97c:	60a2      	str	r2, [r4, #8]
 801c97e:	e7f4      	b.n	801c96a <__swsetup_r+0x8e>
 801c980:	2000      	movs	r0, #0
 801c982:	e7f7      	b.n	801c974 <__swsetup_r+0x98>
 801c984:	200004cc 	.word	0x200004cc

0801c988 <__ascii_wctomb>:
 801c988:	4603      	mov	r3, r0
 801c98a:	4608      	mov	r0, r1
 801c98c:	b141      	cbz	r1, 801c9a0 <__ascii_wctomb+0x18>
 801c98e:	2aff      	cmp	r2, #255	@ 0xff
 801c990:	d904      	bls.n	801c99c <__ascii_wctomb+0x14>
 801c992:	228a      	movs	r2, #138	@ 0x8a
 801c994:	601a      	str	r2, [r3, #0]
 801c996:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c99a:	4770      	bx	lr
 801c99c:	700a      	strb	r2, [r1, #0]
 801c99e:	2001      	movs	r0, #1
 801c9a0:	4770      	bx	lr

0801c9a2 <__swhatbuf_r>:
 801c9a2:	b570      	push	{r4, r5, r6, lr}
 801c9a4:	460c      	mov	r4, r1
 801c9a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c9aa:	2900      	cmp	r1, #0
 801c9ac:	b096      	sub	sp, #88	@ 0x58
 801c9ae:	4615      	mov	r5, r2
 801c9b0:	461e      	mov	r6, r3
 801c9b2:	da0d      	bge.n	801c9d0 <__swhatbuf_r+0x2e>
 801c9b4:	89a3      	ldrh	r3, [r4, #12]
 801c9b6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801c9ba:	f04f 0100 	mov.w	r1, #0
 801c9be:	bf14      	ite	ne
 801c9c0:	2340      	movne	r3, #64	@ 0x40
 801c9c2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801c9c6:	2000      	movs	r0, #0
 801c9c8:	6031      	str	r1, [r6, #0]
 801c9ca:	602b      	str	r3, [r5, #0]
 801c9cc:	b016      	add	sp, #88	@ 0x58
 801c9ce:	bd70      	pop	{r4, r5, r6, pc}
 801c9d0:	466a      	mov	r2, sp
 801c9d2:	f000 f873 	bl	801cabc <_fstat_r>
 801c9d6:	2800      	cmp	r0, #0
 801c9d8:	dbec      	blt.n	801c9b4 <__swhatbuf_r+0x12>
 801c9da:	9901      	ldr	r1, [sp, #4]
 801c9dc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801c9e0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801c9e4:	4259      	negs	r1, r3
 801c9e6:	4159      	adcs	r1, r3
 801c9e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801c9ec:	e7eb      	b.n	801c9c6 <__swhatbuf_r+0x24>

0801c9ee <__smakebuf_r>:
 801c9ee:	898b      	ldrh	r3, [r1, #12]
 801c9f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c9f2:	079d      	lsls	r5, r3, #30
 801c9f4:	4606      	mov	r6, r0
 801c9f6:	460c      	mov	r4, r1
 801c9f8:	d507      	bpl.n	801ca0a <__smakebuf_r+0x1c>
 801c9fa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801c9fe:	6023      	str	r3, [r4, #0]
 801ca00:	6123      	str	r3, [r4, #16]
 801ca02:	2301      	movs	r3, #1
 801ca04:	6163      	str	r3, [r4, #20]
 801ca06:	b003      	add	sp, #12
 801ca08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ca0a:	ab01      	add	r3, sp, #4
 801ca0c:	466a      	mov	r2, sp
 801ca0e:	f7ff ffc8 	bl	801c9a2 <__swhatbuf_r>
 801ca12:	9f00      	ldr	r7, [sp, #0]
 801ca14:	4605      	mov	r5, r0
 801ca16:	4639      	mov	r1, r7
 801ca18:	4630      	mov	r0, r6
 801ca1a:	f7fb ff35 	bl	8018888 <_malloc_r>
 801ca1e:	b948      	cbnz	r0, 801ca34 <__smakebuf_r+0x46>
 801ca20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ca24:	059a      	lsls	r2, r3, #22
 801ca26:	d4ee      	bmi.n	801ca06 <__smakebuf_r+0x18>
 801ca28:	f023 0303 	bic.w	r3, r3, #3
 801ca2c:	f043 0302 	orr.w	r3, r3, #2
 801ca30:	81a3      	strh	r3, [r4, #12]
 801ca32:	e7e2      	b.n	801c9fa <__smakebuf_r+0xc>
 801ca34:	89a3      	ldrh	r3, [r4, #12]
 801ca36:	6020      	str	r0, [r4, #0]
 801ca38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ca3c:	81a3      	strh	r3, [r4, #12]
 801ca3e:	9b01      	ldr	r3, [sp, #4]
 801ca40:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801ca44:	b15b      	cbz	r3, 801ca5e <__smakebuf_r+0x70>
 801ca46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ca4a:	4630      	mov	r0, r6
 801ca4c:	f000 f848 	bl	801cae0 <_isatty_r>
 801ca50:	b128      	cbz	r0, 801ca5e <__smakebuf_r+0x70>
 801ca52:	89a3      	ldrh	r3, [r4, #12]
 801ca54:	f023 0303 	bic.w	r3, r3, #3
 801ca58:	f043 0301 	orr.w	r3, r3, #1
 801ca5c:	81a3      	strh	r3, [r4, #12]
 801ca5e:	89a3      	ldrh	r3, [r4, #12]
 801ca60:	431d      	orrs	r5, r3
 801ca62:	81a5      	strh	r5, [r4, #12]
 801ca64:	e7cf      	b.n	801ca06 <__smakebuf_r+0x18>

0801ca66 <memmove>:
 801ca66:	4288      	cmp	r0, r1
 801ca68:	b510      	push	{r4, lr}
 801ca6a:	eb01 0402 	add.w	r4, r1, r2
 801ca6e:	d902      	bls.n	801ca76 <memmove+0x10>
 801ca70:	4284      	cmp	r4, r0
 801ca72:	4623      	mov	r3, r4
 801ca74:	d807      	bhi.n	801ca86 <memmove+0x20>
 801ca76:	1e43      	subs	r3, r0, #1
 801ca78:	42a1      	cmp	r1, r4
 801ca7a:	d008      	beq.n	801ca8e <memmove+0x28>
 801ca7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ca80:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ca84:	e7f8      	b.n	801ca78 <memmove+0x12>
 801ca86:	4402      	add	r2, r0
 801ca88:	4601      	mov	r1, r0
 801ca8a:	428a      	cmp	r2, r1
 801ca8c:	d100      	bne.n	801ca90 <memmove+0x2a>
 801ca8e:	bd10      	pop	{r4, pc}
 801ca90:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ca94:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ca98:	e7f7      	b.n	801ca8a <memmove+0x24>
	...

0801ca9c <_close_r>:
 801ca9c:	b538      	push	{r3, r4, r5, lr}
 801ca9e:	4d06      	ldr	r5, [pc, #24]	@ (801cab8 <_close_r+0x1c>)
 801caa0:	2300      	movs	r3, #0
 801caa2:	4604      	mov	r4, r0
 801caa4:	4608      	mov	r0, r1
 801caa6:	602b      	str	r3, [r5, #0]
 801caa8:	f7e7 fc72 	bl	8004390 <_close>
 801caac:	1c43      	adds	r3, r0, #1
 801caae:	d102      	bne.n	801cab6 <_close_r+0x1a>
 801cab0:	682b      	ldr	r3, [r5, #0]
 801cab2:	b103      	cbz	r3, 801cab6 <_close_r+0x1a>
 801cab4:	6023      	str	r3, [r4, #0]
 801cab6:	bd38      	pop	{r3, r4, r5, pc}
 801cab8:	20007b38 	.word	0x20007b38

0801cabc <_fstat_r>:
 801cabc:	b538      	push	{r3, r4, r5, lr}
 801cabe:	4d07      	ldr	r5, [pc, #28]	@ (801cadc <_fstat_r+0x20>)
 801cac0:	2300      	movs	r3, #0
 801cac2:	4604      	mov	r4, r0
 801cac4:	4608      	mov	r0, r1
 801cac6:	4611      	mov	r1, r2
 801cac8:	602b      	str	r3, [r5, #0]
 801caca:	f7e7 fc6d 	bl	80043a8 <_fstat>
 801cace:	1c43      	adds	r3, r0, #1
 801cad0:	d102      	bne.n	801cad8 <_fstat_r+0x1c>
 801cad2:	682b      	ldr	r3, [r5, #0]
 801cad4:	b103      	cbz	r3, 801cad8 <_fstat_r+0x1c>
 801cad6:	6023      	str	r3, [r4, #0]
 801cad8:	bd38      	pop	{r3, r4, r5, pc}
 801cada:	bf00      	nop
 801cadc:	20007b38 	.word	0x20007b38

0801cae0 <_isatty_r>:
 801cae0:	b538      	push	{r3, r4, r5, lr}
 801cae2:	4d06      	ldr	r5, [pc, #24]	@ (801cafc <_isatty_r+0x1c>)
 801cae4:	2300      	movs	r3, #0
 801cae6:	4604      	mov	r4, r0
 801cae8:	4608      	mov	r0, r1
 801caea:	602b      	str	r3, [r5, #0]
 801caec:	f7e7 fc6c 	bl	80043c8 <_isatty>
 801caf0:	1c43      	adds	r3, r0, #1
 801caf2:	d102      	bne.n	801cafa <_isatty_r+0x1a>
 801caf4:	682b      	ldr	r3, [r5, #0]
 801caf6:	b103      	cbz	r3, 801cafa <_isatty_r+0x1a>
 801caf8:	6023      	str	r3, [r4, #0]
 801cafa:	bd38      	pop	{r3, r4, r5, pc}
 801cafc:	20007b38 	.word	0x20007b38

0801cb00 <_lseek_r>:
 801cb00:	b538      	push	{r3, r4, r5, lr}
 801cb02:	4d07      	ldr	r5, [pc, #28]	@ (801cb20 <_lseek_r+0x20>)
 801cb04:	4604      	mov	r4, r0
 801cb06:	4608      	mov	r0, r1
 801cb08:	4611      	mov	r1, r2
 801cb0a:	2200      	movs	r2, #0
 801cb0c:	602a      	str	r2, [r5, #0]
 801cb0e:	461a      	mov	r2, r3
 801cb10:	f7e7 fc65 	bl	80043de <_lseek>
 801cb14:	1c43      	adds	r3, r0, #1
 801cb16:	d102      	bne.n	801cb1e <_lseek_r+0x1e>
 801cb18:	682b      	ldr	r3, [r5, #0]
 801cb1a:	b103      	cbz	r3, 801cb1e <_lseek_r+0x1e>
 801cb1c:	6023      	str	r3, [r4, #0]
 801cb1e:	bd38      	pop	{r3, r4, r5, pc}
 801cb20:	20007b38 	.word	0x20007b38

0801cb24 <_read_r>:
 801cb24:	b538      	push	{r3, r4, r5, lr}
 801cb26:	4d07      	ldr	r5, [pc, #28]	@ (801cb44 <_read_r+0x20>)
 801cb28:	4604      	mov	r4, r0
 801cb2a:	4608      	mov	r0, r1
 801cb2c:	4611      	mov	r1, r2
 801cb2e:	2200      	movs	r2, #0
 801cb30:	602a      	str	r2, [r5, #0]
 801cb32:	461a      	mov	r2, r3
 801cb34:	f7e7 fbf3 	bl	800431e <_read>
 801cb38:	1c43      	adds	r3, r0, #1
 801cb3a:	d102      	bne.n	801cb42 <_read_r+0x1e>
 801cb3c:	682b      	ldr	r3, [r5, #0]
 801cb3e:	b103      	cbz	r3, 801cb42 <_read_r+0x1e>
 801cb40:	6023      	str	r3, [r4, #0]
 801cb42:	bd38      	pop	{r3, r4, r5, pc}
 801cb44:	20007b38 	.word	0x20007b38

0801cb48 <_write_r>:
 801cb48:	b538      	push	{r3, r4, r5, lr}
 801cb4a:	4d07      	ldr	r5, [pc, #28]	@ (801cb68 <_write_r+0x20>)
 801cb4c:	4604      	mov	r4, r0
 801cb4e:	4608      	mov	r0, r1
 801cb50:	4611      	mov	r1, r2
 801cb52:	2200      	movs	r2, #0
 801cb54:	602a      	str	r2, [r5, #0]
 801cb56:	461a      	mov	r2, r3
 801cb58:	f7e7 fbfe 	bl	8004358 <_write>
 801cb5c:	1c43      	adds	r3, r0, #1
 801cb5e:	d102      	bne.n	801cb66 <_write_r+0x1e>
 801cb60:	682b      	ldr	r3, [r5, #0]
 801cb62:	b103      	cbz	r3, 801cb66 <_write_r+0x1e>
 801cb64:	6023      	str	r3, [r4, #0]
 801cb66:	bd38      	pop	{r3, r4, r5, pc}
 801cb68:	20007b38 	.word	0x20007b38

0801cb6c <abort>:
 801cb6c:	b508      	push	{r3, lr}
 801cb6e:	2006      	movs	r0, #6
 801cb70:	f000 f848 	bl	801cc04 <raise>
 801cb74:	2001      	movs	r0, #1
 801cb76:	f7e7 fbc7 	bl	8004308 <_exit>

0801cb7a <_calloc_r>:
 801cb7a:	b570      	push	{r4, r5, r6, lr}
 801cb7c:	fba1 5402 	umull	r5, r4, r1, r2
 801cb80:	b93c      	cbnz	r4, 801cb92 <_calloc_r+0x18>
 801cb82:	4629      	mov	r1, r5
 801cb84:	f7fb fe80 	bl	8018888 <_malloc_r>
 801cb88:	4606      	mov	r6, r0
 801cb8a:	b928      	cbnz	r0, 801cb98 <_calloc_r+0x1e>
 801cb8c:	2600      	movs	r6, #0
 801cb8e:	4630      	mov	r0, r6
 801cb90:	bd70      	pop	{r4, r5, r6, pc}
 801cb92:	220c      	movs	r2, #12
 801cb94:	6002      	str	r2, [r0, #0]
 801cb96:	e7f9      	b.n	801cb8c <_calloc_r+0x12>
 801cb98:	462a      	mov	r2, r5
 801cb9a:	4621      	mov	r1, r4
 801cb9c:	f7fd fb24 	bl	801a1e8 <memset>
 801cba0:	e7f5      	b.n	801cb8e <_calloc_r+0x14>

0801cba2 <_malloc_usable_size_r>:
 801cba2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cba6:	1f18      	subs	r0, r3, #4
 801cba8:	2b00      	cmp	r3, #0
 801cbaa:	bfbc      	itt	lt
 801cbac:	580b      	ldrlt	r3, [r1, r0]
 801cbae:	18c0      	addlt	r0, r0, r3
 801cbb0:	4770      	bx	lr

0801cbb2 <_raise_r>:
 801cbb2:	291f      	cmp	r1, #31
 801cbb4:	b538      	push	{r3, r4, r5, lr}
 801cbb6:	4605      	mov	r5, r0
 801cbb8:	460c      	mov	r4, r1
 801cbba:	d904      	bls.n	801cbc6 <_raise_r+0x14>
 801cbbc:	2316      	movs	r3, #22
 801cbbe:	6003      	str	r3, [r0, #0]
 801cbc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cbc4:	bd38      	pop	{r3, r4, r5, pc}
 801cbc6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801cbc8:	b112      	cbz	r2, 801cbd0 <_raise_r+0x1e>
 801cbca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801cbce:	b94b      	cbnz	r3, 801cbe4 <_raise_r+0x32>
 801cbd0:	4628      	mov	r0, r5
 801cbd2:	f000 f831 	bl	801cc38 <_getpid_r>
 801cbd6:	4622      	mov	r2, r4
 801cbd8:	4601      	mov	r1, r0
 801cbda:	4628      	mov	r0, r5
 801cbdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cbe0:	f000 b818 	b.w	801cc14 <_kill_r>
 801cbe4:	2b01      	cmp	r3, #1
 801cbe6:	d00a      	beq.n	801cbfe <_raise_r+0x4c>
 801cbe8:	1c59      	adds	r1, r3, #1
 801cbea:	d103      	bne.n	801cbf4 <_raise_r+0x42>
 801cbec:	2316      	movs	r3, #22
 801cbee:	6003      	str	r3, [r0, #0]
 801cbf0:	2001      	movs	r0, #1
 801cbf2:	e7e7      	b.n	801cbc4 <_raise_r+0x12>
 801cbf4:	2100      	movs	r1, #0
 801cbf6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801cbfa:	4620      	mov	r0, r4
 801cbfc:	4798      	blx	r3
 801cbfe:	2000      	movs	r0, #0
 801cc00:	e7e0      	b.n	801cbc4 <_raise_r+0x12>
	...

0801cc04 <raise>:
 801cc04:	4b02      	ldr	r3, [pc, #8]	@ (801cc10 <raise+0xc>)
 801cc06:	4601      	mov	r1, r0
 801cc08:	6818      	ldr	r0, [r3, #0]
 801cc0a:	f7ff bfd2 	b.w	801cbb2 <_raise_r>
 801cc0e:	bf00      	nop
 801cc10:	200004cc 	.word	0x200004cc

0801cc14 <_kill_r>:
 801cc14:	b538      	push	{r3, r4, r5, lr}
 801cc16:	4d07      	ldr	r5, [pc, #28]	@ (801cc34 <_kill_r+0x20>)
 801cc18:	2300      	movs	r3, #0
 801cc1a:	4604      	mov	r4, r0
 801cc1c:	4608      	mov	r0, r1
 801cc1e:	4611      	mov	r1, r2
 801cc20:	602b      	str	r3, [r5, #0]
 801cc22:	f7e7 fb61 	bl	80042e8 <_kill>
 801cc26:	1c43      	adds	r3, r0, #1
 801cc28:	d102      	bne.n	801cc30 <_kill_r+0x1c>
 801cc2a:	682b      	ldr	r3, [r5, #0]
 801cc2c:	b103      	cbz	r3, 801cc30 <_kill_r+0x1c>
 801cc2e:	6023      	str	r3, [r4, #0]
 801cc30:	bd38      	pop	{r3, r4, r5, pc}
 801cc32:	bf00      	nop
 801cc34:	20007b38 	.word	0x20007b38

0801cc38 <_getpid_r>:
 801cc38:	f7e7 bb4e 	b.w	80042d8 <_getpid>
 801cc3c:	0000      	movs	r0, r0
	...

0801cc40 <sin>:
 801cc40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801cc42:	ec53 2b10 	vmov	r2, r3, d0
 801cc46:	4826      	ldr	r0, [pc, #152]	@ (801cce0 <sin+0xa0>)
 801cc48:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801cc4c:	4281      	cmp	r1, r0
 801cc4e:	d807      	bhi.n	801cc60 <sin+0x20>
 801cc50:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801ccd8 <sin+0x98>
 801cc54:	2000      	movs	r0, #0
 801cc56:	b005      	add	sp, #20
 801cc58:	f85d eb04 	ldr.w	lr, [sp], #4
 801cc5c:	f000 bea8 	b.w	801d9b0 <__kernel_sin>
 801cc60:	4820      	ldr	r0, [pc, #128]	@ (801cce4 <sin+0xa4>)
 801cc62:	4281      	cmp	r1, r0
 801cc64:	d908      	bls.n	801cc78 <sin+0x38>
 801cc66:	4610      	mov	r0, r2
 801cc68:	4619      	mov	r1, r3
 801cc6a:	f7e5 fd3f 	bl	80026ec <__aeabi_dsub>
 801cc6e:	ec41 0b10 	vmov	d0, r0, r1
 801cc72:	b005      	add	sp, #20
 801cc74:	f85d fb04 	ldr.w	pc, [sp], #4
 801cc78:	4668      	mov	r0, sp
 801cc7a:	f000 f87d 	bl	801cd78 <__ieee754_rem_pio2>
 801cc7e:	f000 0003 	and.w	r0, r0, #3
 801cc82:	2801      	cmp	r0, #1
 801cc84:	d00c      	beq.n	801cca0 <sin+0x60>
 801cc86:	2802      	cmp	r0, #2
 801cc88:	d011      	beq.n	801ccae <sin+0x6e>
 801cc8a:	b9e8      	cbnz	r0, 801ccc8 <sin+0x88>
 801cc8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801cc90:	ed9d 0b00 	vldr	d0, [sp]
 801cc94:	2001      	movs	r0, #1
 801cc96:	f000 fe8b 	bl	801d9b0 <__kernel_sin>
 801cc9a:	ec51 0b10 	vmov	r0, r1, d0
 801cc9e:	e7e6      	b.n	801cc6e <sin+0x2e>
 801cca0:	ed9d 1b02 	vldr	d1, [sp, #8]
 801cca4:	ed9d 0b00 	vldr	d0, [sp]
 801cca8:	f000 fdba 	bl	801d820 <__kernel_cos>
 801ccac:	e7f5      	b.n	801cc9a <sin+0x5a>
 801ccae:	ed9d 1b02 	vldr	d1, [sp, #8]
 801ccb2:	ed9d 0b00 	vldr	d0, [sp]
 801ccb6:	2001      	movs	r0, #1
 801ccb8:	f000 fe7a 	bl	801d9b0 <__kernel_sin>
 801ccbc:	ec53 2b10 	vmov	r2, r3, d0
 801ccc0:	4610      	mov	r0, r2
 801ccc2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801ccc6:	e7d2      	b.n	801cc6e <sin+0x2e>
 801ccc8:	ed9d 1b02 	vldr	d1, [sp, #8]
 801cccc:	ed9d 0b00 	vldr	d0, [sp]
 801ccd0:	f000 fda6 	bl	801d820 <__kernel_cos>
 801ccd4:	e7f2      	b.n	801ccbc <sin+0x7c>
 801ccd6:	bf00      	nop
	...
 801cce0:	3fe921fb 	.word	0x3fe921fb
 801cce4:	7fefffff 	.word	0x7fefffff

0801cce8 <round>:
 801cce8:	ec51 0b10 	vmov	r0, r1, d0
 801ccec:	b570      	push	{r4, r5, r6, lr}
 801ccee:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801ccf2:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 801ccf6:	2a13      	cmp	r2, #19
 801ccf8:	460b      	mov	r3, r1
 801ccfa:	4605      	mov	r5, r0
 801ccfc:	dc1b      	bgt.n	801cd36 <round+0x4e>
 801ccfe:	2a00      	cmp	r2, #0
 801cd00:	da0b      	bge.n	801cd1a <round+0x32>
 801cd02:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 801cd06:	3201      	adds	r2, #1
 801cd08:	bf04      	itt	eq
 801cd0a:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 801cd0e:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 801cd12:	2200      	movs	r2, #0
 801cd14:	4619      	mov	r1, r3
 801cd16:	4610      	mov	r0, r2
 801cd18:	e015      	b.n	801cd46 <round+0x5e>
 801cd1a:	4c15      	ldr	r4, [pc, #84]	@ (801cd70 <round+0x88>)
 801cd1c:	4114      	asrs	r4, r2
 801cd1e:	ea04 0601 	and.w	r6, r4, r1
 801cd22:	4306      	orrs	r6, r0
 801cd24:	d00f      	beq.n	801cd46 <round+0x5e>
 801cd26:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 801cd2a:	fa41 f202 	asr.w	r2, r1, r2
 801cd2e:	4413      	add	r3, r2
 801cd30:	ea23 0304 	bic.w	r3, r3, r4
 801cd34:	e7ed      	b.n	801cd12 <round+0x2a>
 801cd36:	2a33      	cmp	r2, #51	@ 0x33
 801cd38:	dd08      	ble.n	801cd4c <round+0x64>
 801cd3a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801cd3e:	d102      	bne.n	801cd46 <round+0x5e>
 801cd40:	4602      	mov	r2, r0
 801cd42:	f7e5 fcd5 	bl	80026f0 <__adddf3>
 801cd46:	ec41 0b10 	vmov	d0, r0, r1
 801cd4a:	bd70      	pop	{r4, r5, r6, pc}
 801cd4c:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 801cd50:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801cd54:	40f4      	lsrs	r4, r6
 801cd56:	4204      	tst	r4, r0
 801cd58:	d0f5      	beq.n	801cd46 <round+0x5e>
 801cd5a:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 801cd5e:	2201      	movs	r2, #1
 801cd60:	408a      	lsls	r2, r1
 801cd62:	1952      	adds	r2, r2, r5
 801cd64:	bf28      	it	cs
 801cd66:	3301      	addcs	r3, #1
 801cd68:	ea22 0204 	bic.w	r2, r2, r4
 801cd6c:	e7d2      	b.n	801cd14 <round+0x2c>
 801cd6e:	bf00      	nop
 801cd70:	000fffff 	.word	0x000fffff
 801cd74:	00000000 	.word	0x00000000

0801cd78 <__ieee754_rem_pio2>:
 801cd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd7c:	ec57 6b10 	vmov	r6, r7, d0
 801cd80:	4bc5      	ldr	r3, [pc, #788]	@ (801d098 <__ieee754_rem_pio2+0x320>)
 801cd82:	b08d      	sub	sp, #52	@ 0x34
 801cd84:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801cd88:	4598      	cmp	r8, r3
 801cd8a:	4604      	mov	r4, r0
 801cd8c:	9704      	str	r7, [sp, #16]
 801cd8e:	d807      	bhi.n	801cda0 <__ieee754_rem_pio2+0x28>
 801cd90:	2200      	movs	r2, #0
 801cd92:	2300      	movs	r3, #0
 801cd94:	ed80 0b00 	vstr	d0, [r0]
 801cd98:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801cd9c:	2500      	movs	r5, #0
 801cd9e:	e028      	b.n	801cdf2 <__ieee754_rem_pio2+0x7a>
 801cda0:	4bbe      	ldr	r3, [pc, #760]	@ (801d09c <__ieee754_rem_pio2+0x324>)
 801cda2:	4598      	cmp	r8, r3
 801cda4:	d878      	bhi.n	801ce98 <__ieee754_rem_pio2+0x120>
 801cda6:	9b04      	ldr	r3, [sp, #16]
 801cda8:	4dbd      	ldr	r5, [pc, #756]	@ (801d0a0 <__ieee754_rem_pio2+0x328>)
 801cdaa:	2b00      	cmp	r3, #0
 801cdac:	4630      	mov	r0, r6
 801cdae:	a3ac      	add	r3, pc, #688	@ (adr r3, 801d060 <__ieee754_rem_pio2+0x2e8>)
 801cdb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdb4:	4639      	mov	r1, r7
 801cdb6:	dd38      	ble.n	801ce2a <__ieee754_rem_pio2+0xb2>
 801cdb8:	f7e5 fc98 	bl	80026ec <__aeabi_dsub>
 801cdbc:	45a8      	cmp	r8, r5
 801cdbe:	4606      	mov	r6, r0
 801cdc0:	460f      	mov	r7, r1
 801cdc2:	d01a      	beq.n	801cdfa <__ieee754_rem_pio2+0x82>
 801cdc4:	a3a8      	add	r3, pc, #672	@ (adr r3, 801d068 <__ieee754_rem_pio2+0x2f0>)
 801cdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdca:	f7e5 fc8f 	bl	80026ec <__aeabi_dsub>
 801cdce:	4602      	mov	r2, r0
 801cdd0:	460b      	mov	r3, r1
 801cdd2:	4680      	mov	r8, r0
 801cdd4:	4689      	mov	r9, r1
 801cdd6:	4630      	mov	r0, r6
 801cdd8:	4639      	mov	r1, r7
 801cdda:	f7e5 fc87 	bl	80026ec <__aeabi_dsub>
 801cdde:	a3a2      	add	r3, pc, #648	@ (adr r3, 801d068 <__ieee754_rem_pio2+0x2f0>)
 801cde0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cde4:	f7e5 fc82 	bl	80026ec <__aeabi_dsub>
 801cde8:	e9c4 8900 	strd	r8, r9, [r4]
 801cdec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801cdf0:	2501      	movs	r5, #1
 801cdf2:	4628      	mov	r0, r5
 801cdf4:	b00d      	add	sp, #52	@ 0x34
 801cdf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cdfa:	a39d      	add	r3, pc, #628	@ (adr r3, 801d070 <__ieee754_rem_pio2+0x2f8>)
 801cdfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce00:	f7e5 fc74 	bl	80026ec <__aeabi_dsub>
 801ce04:	a39c      	add	r3, pc, #624	@ (adr r3, 801d078 <__ieee754_rem_pio2+0x300>)
 801ce06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce0a:	4606      	mov	r6, r0
 801ce0c:	460f      	mov	r7, r1
 801ce0e:	f7e5 fc6d 	bl	80026ec <__aeabi_dsub>
 801ce12:	4602      	mov	r2, r0
 801ce14:	460b      	mov	r3, r1
 801ce16:	4680      	mov	r8, r0
 801ce18:	4689      	mov	r9, r1
 801ce1a:	4630      	mov	r0, r6
 801ce1c:	4639      	mov	r1, r7
 801ce1e:	f7e5 fc65 	bl	80026ec <__aeabi_dsub>
 801ce22:	a395      	add	r3, pc, #596	@ (adr r3, 801d078 <__ieee754_rem_pio2+0x300>)
 801ce24:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce28:	e7dc      	b.n	801cde4 <__ieee754_rem_pio2+0x6c>
 801ce2a:	f7e5 fc61 	bl	80026f0 <__adddf3>
 801ce2e:	45a8      	cmp	r8, r5
 801ce30:	4606      	mov	r6, r0
 801ce32:	460f      	mov	r7, r1
 801ce34:	d018      	beq.n	801ce68 <__ieee754_rem_pio2+0xf0>
 801ce36:	a38c      	add	r3, pc, #560	@ (adr r3, 801d068 <__ieee754_rem_pio2+0x2f0>)
 801ce38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce3c:	f7e5 fc58 	bl	80026f0 <__adddf3>
 801ce40:	4602      	mov	r2, r0
 801ce42:	460b      	mov	r3, r1
 801ce44:	4680      	mov	r8, r0
 801ce46:	4689      	mov	r9, r1
 801ce48:	4630      	mov	r0, r6
 801ce4a:	4639      	mov	r1, r7
 801ce4c:	f7e5 fc4e 	bl	80026ec <__aeabi_dsub>
 801ce50:	a385      	add	r3, pc, #532	@ (adr r3, 801d068 <__ieee754_rem_pio2+0x2f0>)
 801ce52:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce56:	f7e5 fc4b 	bl	80026f0 <__adddf3>
 801ce5a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801ce5e:	e9c4 8900 	strd	r8, r9, [r4]
 801ce62:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801ce66:	e7c4      	b.n	801cdf2 <__ieee754_rem_pio2+0x7a>
 801ce68:	a381      	add	r3, pc, #516	@ (adr r3, 801d070 <__ieee754_rem_pio2+0x2f8>)
 801ce6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce6e:	f7e5 fc3f 	bl	80026f0 <__adddf3>
 801ce72:	a381      	add	r3, pc, #516	@ (adr r3, 801d078 <__ieee754_rem_pio2+0x300>)
 801ce74:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce78:	4606      	mov	r6, r0
 801ce7a:	460f      	mov	r7, r1
 801ce7c:	f7e5 fc38 	bl	80026f0 <__adddf3>
 801ce80:	4602      	mov	r2, r0
 801ce82:	460b      	mov	r3, r1
 801ce84:	4680      	mov	r8, r0
 801ce86:	4689      	mov	r9, r1
 801ce88:	4630      	mov	r0, r6
 801ce8a:	4639      	mov	r1, r7
 801ce8c:	f7e5 fc2e 	bl	80026ec <__aeabi_dsub>
 801ce90:	a379      	add	r3, pc, #484	@ (adr r3, 801d078 <__ieee754_rem_pio2+0x300>)
 801ce92:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce96:	e7de      	b.n	801ce56 <__ieee754_rem_pio2+0xde>
 801ce98:	4b82      	ldr	r3, [pc, #520]	@ (801d0a4 <__ieee754_rem_pio2+0x32c>)
 801ce9a:	4598      	cmp	r8, r3
 801ce9c:	f200 80d1 	bhi.w	801d042 <__ieee754_rem_pio2+0x2ca>
 801cea0:	f000 fe40 	bl	801db24 <fabs>
 801cea4:	ec57 6b10 	vmov	r6, r7, d0
 801cea8:	a375      	add	r3, pc, #468	@ (adr r3, 801d080 <__ieee754_rem_pio2+0x308>)
 801ceaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ceae:	4630      	mov	r0, r6
 801ceb0:	4639      	mov	r1, r7
 801ceb2:	f7e5 fdd3 	bl	8002a5c <__aeabi_dmul>
 801ceb6:	4b7c      	ldr	r3, [pc, #496]	@ (801d0a8 <__ieee754_rem_pio2+0x330>)
 801ceb8:	2200      	movs	r2, #0
 801ceba:	f7e5 fc19 	bl	80026f0 <__adddf3>
 801cebe:	f7e6 f87d 	bl	8002fbc <__aeabi_d2iz>
 801cec2:	4605      	mov	r5, r0
 801cec4:	f7e5 fd60 	bl	8002988 <__aeabi_i2d>
 801cec8:	4602      	mov	r2, r0
 801ceca:	460b      	mov	r3, r1
 801cecc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801ced0:	a363      	add	r3, pc, #396	@ (adr r3, 801d060 <__ieee754_rem_pio2+0x2e8>)
 801ced2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ced6:	f7e5 fdc1 	bl	8002a5c <__aeabi_dmul>
 801ceda:	4602      	mov	r2, r0
 801cedc:	460b      	mov	r3, r1
 801cede:	4630      	mov	r0, r6
 801cee0:	4639      	mov	r1, r7
 801cee2:	f7e5 fc03 	bl	80026ec <__aeabi_dsub>
 801cee6:	a360      	add	r3, pc, #384	@ (adr r3, 801d068 <__ieee754_rem_pio2+0x2f0>)
 801cee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ceec:	4682      	mov	sl, r0
 801ceee:	468b      	mov	fp, r1
 801cef0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801cef4:	f7e5 fdb2 	bl	8002a5c <__aeabi_dmul>
 801cef8:	2d1f      	cmp	r5, #31
 801cefa:	4606      	mov	r6, r0
 801cefc:	460f      	mov	r7, r1
 801cefe:	dc0c      	bgt.n	801cf1a <__ieee754_rem_pio2+0x1a2>
 801cf00:	4b6a      	ldr	r3, [pc, #424]	@ (801d0ac <__ieee754_rem_pio2+0x334>)
 801cf02:	1e6a      	subs	r2, r5, #1
 801cf04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cf08:	4543      	cmp	r3, r8
 801cf0a:	d006      	beq.n	801cf1a <__ieee754_rem_pio2+0x1a2>
 801cf0c:	4632      	mov	r2, r6
 801cf0e:	463b      	mov	r3, r7
 801cf10:	4650      	mov	r0, sl
 801cf12:	4659      	mov	r1, fp
 801cf14:	f7e5 fbea 	bl	80026ec <__aeabi_dsub>
 801cf18:	e00e      	b.n	801cf38 <__ieee754_rem_pio2+0x1c0>
 801cf1a:	463b      	mov	r3, r7
 801cf1c:	4632      	mov	r2, r6
 801cf1e:	4650      	mov	r0, sl
 801cf20:	4659      	mov	r1, fp
 801cf22:	f7e5 fbe3 	bl	80026ec <__aeabi_dsub>
 801cf26:	ea4f 5328 	mov.w	r3, r8, asr #20
 801cf2a:	9305      	str	r3, [sp, #20]
 801cf2c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801cf30:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801cf34:	2b10      	cmp	r3, #16
 801cf36:	dc02      	bgt.n	801cf3e <__ieee754_rem_pio2+0x1c6>
 801cf38:	e9c4 0100 	strd	r0, r1, [r4]
 801cf3c:	e039      	b.n	801cfb2 <__ieee754_rem_pio2+0x23a>
 801cf3e:	a34c      	add	r3, pc, #304	@ (adr r3, 801d070 <__ieee754_rem_pio2+0x2f8>)
 801cf40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801cf48:	f7e5 fd88 	bl	8002a5c <__aeabi_dmul>
 801cf4c:	4606      	mov	r6, r0
 801cf4e:	460f      	mov	r7, r1
 801cf50:	4602      	mov	r2, r0
 801cf52:	460b      	mov	r3, r1
 801cf54:	4650      	mov	r0, sl
 801cf56:	4659      	mov	r1, fp
 801cf58:	f7e5 fbc8 	bl	80026ec <__aeabi_dsub>
 801cf5c:	4602      	mov	r2, r0
 801cf5e:	460b      	mov	r3, r1
 801cf60:	4680      	mov	r8, r0
 801cf62:	4689      	mov	r9, r1
 801cf64:	4650      	mov	r0, sl
 801cf66:	4659      	mov	r1, fp
 801cf68:	f7e5 fbc0 	bl	80026ec <__aeabi_dsub>
 801cf6c:	4632      	mov	r2, r6
 801cf6e:	463b      	mov	r3, r7
 801cf70:	f7e5 fbbc 	bl	80026ec <__aeabi_dsub>
 801cf74:	a340      	add	r3, pc, #256	@ (adr r3, 801d078 <__ieee754_rem_pio2+0x300>)
 801cf76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf7a:	4606      	mov	r6, r0
 801cf7c:	460f      	mov	r7, r1
 801cf7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801cf82:	f7e5 fd6b 	bl	8002a5c <__aeabi_dmul>
 801cf86:	4632      	mov	r2, r6
 801cf88:	463b      	mov	r3, r7
 801cf8a:	f7e5 fbaf 	bl	80026ec <__aeabi_dsub>
 801cf8e:	4602      	mov	r2, r0
 801cf90:	460b      	mov	r3, r1
 801cf92:	4606      	mov	r6, r0
 801cf94:	460f      	mov	r7, r1
 801cf96:	4640      	mov	r0, r8
 801cf98:	4649      	mov	r1, r9
 801cf9a:	f7e5 fba7 	bl	80026ec <__aeabi_dsub>
 801cf9e:	9a05      	ldr	r2, [sp, #20]
 801cfa0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801cfa4:	1ad3      	subs	r3, r2, r3
 801cfa6:	2b31      	cmp	r3, #49	@ 0x31
 801cfa8:	dc20      	bgt.n	801cfec <__ieee754_rem_pio2+0x274>
 801cfaa:	e9c4 0100 	strd	r0, r1, [r4]
 801cfae:	46c2      	mov	sl, r8
 801cfb0:	46cb      	mov	fp, r9
 801cfb2:	e9d4 8900 	ldrd	r8, r9, [r4]
 801cfb6:	4650      	mov	r0, sl
 801cfb8:	4642      	mov	r2, r8
 801cfba:	464b      	mov	r3, r9
 801cfbc:	4659      	mov	r1, fp
 801cfbe:	f7e5 fb95 	bl	80026ec <__aeabi_dsub>
 801cfc2:	463b      	mov	r3, r7
 801cfc4:	4632      	mov	r2, r6
 801cfc6:	f7e5 fb91 	bl	80026ec <__aeabi_dsub>
 801cfca:	9b04      	ldr	r3, [sp, #16]
 801cfcc:	2b00      	cmp	r3, #0
 801cfce:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801cfd2:	f6bf af0e 	bge.w	801cdf2 <__ieee754_rem_pio2+0x7a>
 801cfd6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801cfda:	6063      	str	r3, [r4, #4]
 801cfdc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801cfe0:	f8c4 8000 	str.w	r8, [r4]
 801cfe4:	60a0      	str	r0, [r4, #8]
 801cfe6:	60e3      	str	r3, [r4, #12]
 801cfe8:	426d      	negs	r5, r5
 801cfea:	e702      	b.n	801cdf2 <__ieee754_rem_pio2+0x7a>
 801cfec:	a326      	add	r3, pc, #152	@ (adr r3, 801d088 <__ieee754_rem_pio2+0x310>)
 801cfee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cff2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801cff6:	f7e5 fd31 	bl	8002a5c <__aeabi_dmul>
 801cffa:	4606      	mov	r6, r0
 801cffc:	460f      	mov	r7, r1
 801cffe:	4602      	mov	r2, r0
 801d000:	460b      	mov	r3, r1
 801d002:	4640      	mov	r0, r8
 801d004:	4649      	mov	r1, r9
 801d006:	f7e5 fb71 	bl	80026ec <__aeabi_dsub>
 801d00a:	4602      	mov	r2, r0
 801d00c:	460b      	mov	r3, r1
 801d00e:	4682      	mov	sl, r0
 801d010:	468b      	mov	fp, r1
 801d012:	4640      	mov	r0, r8
 801d014:	4649      	mov	r1, r9
 801d016:	f7e5 fb69 	bl	80026ec <__aeabi_dsub>
 801d01a:	4632      	mov	r2, r6
 801d01c:	463b      	mov	r3, r7
 801d01e:	f7e5 fb65 	bl	80026ec <__aeabi_dsub>
 801d022:	a31b      	add	r3, pc, #108	@ (adr r3, 801d090 <__ieee754_rem_pio2+0x318>)
 801d024:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d028:	4606      	mov	r6, r0
 801d02a:	460f      	mov	r7, r1
 801d02c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d030:	f7e5 fd14 	bl	8002a5c <__aeabi_dmul>
 801d034:	4632      	mov	r2, r6
 801d036:	463b      	mov	r3, r7
 801d038:	f7e5 fb58 	bl	80026ec <__aeabi_dsub>
 801d03c:	4606      	mov	r6, r0
 801d03e:	460f      	mov	r7, r1
 801d040:	e764      	b.n	801cf0c <__ieee754_rem_pio2+0x194>
 801d042:	4b1b      	ldr	r3, [pc, #108]	@ (801d0b0 <__ieee754_rem_pio2+0x338>)
 801d044:	4598      	cmp	r8, r3
 801d046:	d935      	bls.n	801d0b4 <__ieee754_rem_pio2+0x33c>
 801d048:	4632      	mov	r2, r6
 801d04a:	463b      	mov	r3, r7
 801d04c:	4630      	mov	r0, r6
 801d04e:	4639      	mov	r1, r7
 801d050:	f7e5 fb4c 	bl	80026ec <__aeabi_dsub>
 801d054:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801d058:	e9c4 0100 	strd	r0, r1, [r4]
 801d05c:	e69e      	b.n	801cd9c <__ieee754_rem_pio2+0x24>
 801d05e:	bf00      	nop
 801d060:	54400000 	.word	0x54400000
 801d064:	3ff921fb 	.word	0x3ff921fb
 801d068:	1a626331 	.word	0x1a626331
 801d06c:	3dd0b461 	.word	0x3dd0b461
 801d070:	1a600000 	.word	0x1a600000
 801d074:	3dd0b461 	.word	0x3dd0b461
 801d078:	2e037073 	.word	0x2e037073
 801d07c:	3ba3198a 	.word	0x3ba3198a
 801d080:	6dc9c883 	.word	0x6dc9c883
 801d084:	3fe45f30 	.word	0x3fe45f30
 801d088:	2e000000 	.word	0x2e000000
 801d08c:	3ba3198a 	.word	0x3ba3198a
 801d090:	252049c1 	.word	0x252049c1
 801d094:	397b839a 	.word	0x397b839a
 801d098:	3fe921fb 	.word	0x3fe921fb
 801d09c:	4002d97b 	.word	0x4002d97b
 801d0a0:	3ff921fb 	.word	0x3ff921fb
 801d0a4:	413921fb 	.word	0x413921fb
 801d0a8:	3fe00000 	.word	0x3fe00000
 801d0ac:	0801f330 	.word	0x0801f330
 801d0b0:	7fefffff 	.word	0x7fefffff
 801d0b4:	ea4f 5528 	mov.w	r5, r8, asr #20
 801d0b8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801d0bc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801d0c0:	4630      	mov	r0, r6
 801d0c2:	460f      	mov	r7, r1
 801d0c4:	f7e5 ff7a 	bl	8002fbc <__aeabi_d2iz>
 801d0c8:	f7e5 fc5e 	bl	8002988 <__aeabi_i2d>
 801d0cc:	4602      	mov	r2, r0
 801d0ce:	460b      	mov	r3, r1
 801d0d0:	4630      	mov	r0, r6
 801d0d2:	4639      	mov	r1, r7
 801d0d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801d0d8:	f7e5 fb08 	bl	80026ec <__aeabi_dsub>
 801d0dc:	4b22      	ldr	r3, [pc, #136]	@ (801d168 <__ieee754_rem_pio2+0x3f0>)
 801d0de:	2200      	movs	r2, #0
 801d0e0:	f7e5 fcbc 	bl	8002a5c <__aeabi_dmul>
 801d0e4:	460f      	mov	r7, r1
 801d0e6:	4606      	mov	r6, r0
 801d0e8:	f7e5 ff68 	bl	8002fbc <__aeabi_d2iz>
 801d0ec:	f7e5 fc4c 	bl	8002988 <__aeabi_i2d>
 801d0f0:	4602      	mov	r2, r0
 801d0f2:	460b      	mov	r3, r1
 801d0f4:	4630      	mov	r0, r6
 801d0f6:	4639      	mov	r1, r7
 801d0f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801d0fc:	f7e5 faf6 	bl	80026ec <__aeabi_dsub>
 801d100:	4b19      	ldr	r3, [pc, #100]	@ (801d168 <__ieee754_rem_pio2+0x3f0>)
 801d102:	2200      	movs	r2, #0
 801d104:	f7e5 fcaa 	bl	8002a5c <__aeabi_dmul>
 801d108:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801d10c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 801d110:	f04f 0803 	mov.w	r8, #3
 801d114:	2600      	movs	r6, #0
 801d116:	2700      	movs	r7, #0
 801d118:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801d11c:	4632      	mov	r2, r6
 801d11e:	463b      	mov	r3, r7
 801d120:	46c2      	mov	sl, r8
 801d122:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801d126:	f7e5 ff01 	bl	8002f2c <__aeabi_dcmpeq>
 801d12a:	2800      	cmp	r0, #0
 801d12c:	d1f4      	bne.n	801d118 <__ieee754_rem_pio2+0x3a0>
 801d12e:	4b0f      	ldr	r3, [pc, #60]	@ (801d16c <__ieee754_rem_pio2+0x3f4>)
 801d130:	9301      	str	r3, [sp, #4]
 801d132:	2302      	movs	r3, #2
 801d134:	9300      	str	r3, [sp, #0]
 801d136:	462a      	mov	r2, r5
 801d138:	4653      	mov	r3, sl
 801d13a:	4621      	mov	r1, r4
 801d13c:	a806      	add	r0, sp, #24
 801d13e:	f000 f817 	bl	801d170 <__kernel_rem_pio2>
 801d142:	9b04      	ldr	r3, [sp, #16]
 801d144:	2b00      	cmp	r3, #0
 801d146:	4605      	mov	r5, r0
 801d148:	f6bf ae53 	bge.w	801cdf2 <__ieee754_rem_pio2+0x7a>
 801d14c:	e9d4 2100 	ldrd	r2, r1, [r4]
 801d150:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801d154:	e9c4 2300 	strd	r2, r3, [r4]
 801d158:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 801d15c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801d160:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801d164:	e740      	b.n	801cfe8 <__ieee754_rem_pio2+0x270>
 801d166:	bf00      	nop
 801d168:	41700000 	.word	0x41700000
 801d16c:	0801f3b0 	.word	0x0801f3b0

0801d170 <__kernel_rem_pio2>:
 801d170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d174:	ed2d 8b02 	vpush	{d8}
 801d178:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 801d17c:	f112 0f14 	cmn.w	r2, #20
 801d180:	9306      	str	r3, [sp, #24]
 801d182:	9104      	str	r1, [sp, #16]
 801d184:	4bbe      	ldr	r3, [pc, #760]	@ (801d480 <__kernel_rem_pio2+0x310>)
 801d186:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 801d188:	9008      	str	r0, [sp, #32]
 801d18a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801d18e:	9300      	str	r3, [sp, #0]
 801d190:	9b06      	ldr	r3, [sp, #24]
 801d192:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801d196:	bfa8      	it	ge
 801d198:	1ed4      	subge	r4, r2, #3
 801d19a:	9305      	str	r3, [sp, #20]
 801d19c:	bfb2      	itee	lt
 801d19e:	2400      	movlt	r4, #0
 801d1a0:	2318      	movge	r3, #24
 801d1a2:	fb94 f4f3 	sdivge	r4, r4, r3
 801d1a6:	f06f 0317 	mvn.w	r3, #23
 801d1aa:	fb04 3303 	mla	r3, r4, r3, r3
 801d1ae:	eb03 0b02 	add.w	fp, r3, r2
 801d1b2:	9b00      	ldr	r3, [sp, #0]
 801d1b4:	9a05      	ldr	r2, [sp, #20]
 801d1b6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 801d470 <__kernel_rem_pio2+0x300>
 801d1ba:	eb03 0802 	add.w	r8, r3, r2
 801d1be:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801d1c0:	1aa7      	subs	r7, r4, r2
 801d1c2:	ae20      	add	r6, sp, #128	@ 0x80
 801d1c4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801d1c8:	2500      	movs	r5, #0
 801d1ca:	4545      	cmp	r5, r8
 801d1cc:	dd13      	ble.n	801d1f6 <__kernel_rem_pio2+0x86>
 801d1ce:	9b06      	ldr	r3, [sp, #24]
 801d1d0:	aa20      	add	r2, sp, #128	@ 0x80
 801d1d2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801d1d6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801d1da:	f04f 0800 	mov.w	r8, #0
 801d1de:	9b00      	ldr	r3, [sp, #0]
 801d1e0:	4598      	cmp	r8, r3
 801d1e2:	dc31      	bgt.n	801d248 <__kernel_rem_pio2+0xd8>
 801d1e4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 801d470 <__kernel_rem_pio2+0x300>
 801d1e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801d1ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 801d1f0:	462f      	mov	r7, r5
 801d1f2:	2600      	movs	r6, #0
 801d1f4:	e01b      	b.n	801d22e <__kernel_rem_pio2+0xbe>
 801d1f6:	42ef      	cmn	r7, r5
 801d1f8:	d407      	bmi.n	801d20a <__kernel_rem_pio2+0x9a>
 801d1fa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801d1fe:	f7e5 fbc3 	bl	8002988 <__aeabi_i2d>
 801d202:	e8e6 0102 	strd	r0, r1, [r6], #8
 801d206:	3501      	adds	r5, #1
 801d208:	e7df      	b.n	801d1ca <__kernel_rem_pio2+0x5a>
 801d20a:	ec51 0b18 	vmov	r0, r1, d8
 801d20e:	e7f8      	b.n	801d202 <__kernel_rem_pio2+0x92>
 801d210:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d214:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801d218:	f7e5 fc20 	bl	8002a5c <__aeabi_dmul>
 801d21c:	4602      	mov	r2, r0
 801d21e:	460b      	mov	r3, r1
 801d220:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d224:	f7e5 fa64 	bl	80026f0 <__adddf3>
 801d228:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d22c:	3601      	adds	r6, #1
 801d22e:	9b05      	ldr	r3, [sp, #20]
 801d230:	429e      	cmp	r6, r3
 801d232:	f1a7 0708 	sub.w	r7, r7, #8
 801d236:	ddeb      	ble.n	801d210 <__kernel_rem_pio2+0xa0>
 801d238:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d23c:	f108 0801 	add.w	r8, r8, #1
 801d240:	ecaa 7b02 	vstmia	sl!, {d7}
 801d244:	3508      	adds	r5, #8
 801d246:	e7ca      	b.n	801d1de <__kernel_rem_pio2+0x6e>
 801d248:	9b00      	ldr	r3, [sp, #0]
 801d24a:	f8dd 8000 	ldr.w	r8, [sp]
 801d24e:	aa0c      	add	r2, sp, #48	@ 0x30
 801d250:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d254:	930a      	str	r3, [sp, #40]	@ 0x28
 801d256:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801d258:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801d25c:	9309      	str	r3, [sp, #36]	@ 0x24
 801d25e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801d262:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d264:	ab98      	add	r3, sp, #608	@ 0x260
 801d266:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801d26a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801d26e:	ed8d 7b02 	vstr	d7, [sp, #8]
 801d272:	ac0c      	add	r4, sp, #48	@ 0x30
 801d274:	ab70      	add	r3, sp, #448	@ 0x1c0
 801d276:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801d27a:	46a1      	mov	r9, r4
 801d27c:	46c2      	mov	sl, r8
 801d27e:	f1ba 0f00 	cmp.w	sl, #0
 801d282:	f1a5 0508 	sub.w	r5, r5, #8
 801d286:	dc77      	bgt.n	801d378 <__kernel_rem_pio2+0x208>
 801d288:	4658      	mov	r0, fp
 801d28a:	ed9d 0b02 	vldr	d0, [sp, #8]
 801d28e:	f000 fc53 	bl	801db38 <scalbn>
 801d292:	ec57 6b10 	vmov	r6, r7, d0
 801d296:	2200      	movs	r2, #0
 801d298:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801d29c:	4630      	mov	r0, r6
 801d29e:	4639      	mov	r1, r7
 801d2a0:	f7e5 fbdc 	bl	8002a5c <__aeabi_dmul>
 801d2a4:	ec41 0b10 	vmov	d0, r0, r1
 801d2a8:	f000 fcc6 	bl	801dc38 <floor>
 801d2ac:	4b75      	ldr	r3, [pc, #468]	@ (801d484 <__kernel_rem_pio2+0x314>)
 801d2ae:	ec51 0b10 	vmov	r0, r1, d0
 801d2b2:	2200      	movs	r2, #0
 801d2b4:	f7e5 fbd2 	bl	8002a5c <__aeabi_dmul>
 801d2b8:	4602      	mov	r2, r0
 801d2ba:	460b      	mov	r3, r1
 801d2bc:	4630      	mov	r0, r6
 801d2be:	4639      	mov	r1, r7
 801d2c0:	f7e5 fa14 	bl	80026ec <__aeabi_dsub>
 801d2c4:	460f      	mov	r7, r1
 801d2c6:	4606      	mov	r6, r0
 801d2c8:	f7e5 fe78 	bl	8002fbc <__aeabi_d2iz>
 801d2cc:	9002      	str	r0, [sp, #8]
 801d2ce:	f7e5 fb5b 	bl	8002988 <__aeabi_i2d>
 801d2d2:	4602      	mov	r2, r0
 801d2d4:	460b      	mov	r3, r1
 801d2d6:	4630      	mov	r0, r6
 801d2d8:	4639      	mov	r1, r7
 801d2da:	f7e5 fa07 	bl	80026ec <__aeabi_dsub>
 801d2de:	f1bb 0f00 	cmp.w	fp, #0
 801d2e2:	4606      	mov	r6, r0
 801d2e4:	460f      	mov	r7, r1
 801d2e6:	dd6c      	ble.n	801d3c2 <__kernel_rem_pio2+0x252>
 801d2e8:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 801d2ec:	ab0c      	add	r3, sp, #48	@ 0x30
 801d2ee:	9d02      	ldr	r5, [sp, #8]
 801d2f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801d2f4:	f1cb 0018 	rsb	r0, fp, #24
 801d2f8:	fa43 f200 	asr.w	r2, r3, r0
 801d2fc:	4415      	add	r5, r2
 801d2fe:	4082      	lsls	r2, r0
 801d300:	1a9b      	subs	r3, r3, r2
 801d302:	aa0c      	add	r2, sp, #48	@ 0x30
 801d304:	9502      	str	r5, [sp, #8]
 801d306:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801d30a:	f1cb 0217 	rsb	r2, fp, #23
 801d30e:	fa43 f902 	asr.w	r9, r3, r2
 801d312:	f1b9 0f00 	cmp.w	r9, #0
 801d316:	dd64      	ble.n	801d3e2 <__kernel_rem_pio2+0x272>
 801d318:	9b02      	ldr	r3, [sp, #8]
 801d31a:	2200      	movs	r2, #0
 801d31c:	3301      	adds	r3, #1
 801d31e:	9302      	str	r3, [sp, #8]
 801d320:	4615      	mov	r5, r2
 801d322:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801d326:	4590      	cmp	r8, r2
 801d328:	f300 80b8 	bgt.w	801d49c <__kernel_rem_pio2+0x32c>
 801d32c:	f1bb 0f00 	cmp.w	fp, #0
 801d330:	dd07      	ble.n	801d342 <__kernel_rem_pio2+0x1d2>
 801d332:	f1bb 0f01 	cmp.w	fp, #1
 801d336:	f000 80bf 	beq.w	801d4b8 <__kernel_rem_pio2+0x348>
 801d33a:	f1bb 0f02 	cmp.w	fp, #2
 801d33e:	f000 80c6 	beq.w	801d4ce <__kernel_rem_pio2+0x35e>
 801d342:	f1b9 0f02 	cmp.w	r9, #2
 801d346:	d14c      	bne.n	801d3e2 <__kernel_rem_pio2+0x272>
 801d348:	4632      	mov	r2, r6
 801d34a:	463b      	mov	r3, r7
 801d34c:	494e      	ldr	r1, [pc, #312]	@ (801d488 <__kernel_rem_pio2+0x318>)
 801d34e:	2000      	movs	r0, #0
 801d350:	f7e5 f9cc 	bl	80026ec <__aeabi_dsub>
 801d354:	4606      	mov	r6, r0
 801d356:	460f      	mov	r7, r1
 801d358:	2d00      	cmp	r5, #0
 801d35a:	d042      	beq.n	801d3e2 <__kernel_rem_pio2+0x272>
 801d35c:	4658      	mov	r0, fp
 801d35e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 801d478 <__kernel_rem_pio2+0x308>
 801d362:	f000 fbe9 	bl	801db38 <scalbn>
 801d366:	4630      	mov	r0, r6
 801d368:	4639      	mov	r1, r7
 801d36a:	ec53 2b10 	vmov	r2, r3, d0
 801d36e:	f7e5 f9bd 	bl	80026ec <__aeabi_dsub>
 801d372:	4606      	mov	r6, r0
 801d374:	460f      	mov	r7, r1
 801d376:	e034      	b.n	801d3e2 <__kernel_rem_pio2+0x272>
 801d378:	4b44      	ldr	r3, [pc, #272]	@ (801d48c <__kernel_rem_pio2+0x31c>)
 801d37a:	2200      	movs	r2, #0
 801d37c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d380:	f7e5 fb6c 	bl	8002a5c <__aeabi_dmul>
 801d384:	f7e5 fe1a 	bl	8002fbc <__aeabi_d2iz>
 801d388:	f7e5 fafe 	bl	8002988 <__aeabi_i2d>
 801d38c:	4b40      	ldr	r3, [pc, #256]	@ (801d490 <__kernel_rem_pio2+0x320>)
 801d38e:	2200      	movs	r2, #0
 801d390:	4606      	mov	r6, r0
 801d392:	460f      	mov	r7, r1
 801d394:	f7e5 fb62 	bl	8002a5c <__aeabi_dmul>
 801d398:	4602      	mov	r2, r0
 801d39a:	460b      	mov	r3, r1
 801d39c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d3a0:	f7e5 f9a4 	bl	80026ec <__aeabi_dsub>
 801d3a4:	f7e5 fe0a 	bl	8002fbc <__aeabi_d2iz>
 801d3a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 801d3ac:	f849 0b04 	str.w	r0, [r9], #4
 801d3b0:	4639      	mov	r1, r7
 801d3b2:	4630      	mov	r0, r6
 801d3b4:	f7e5 f99c 	bl	80026f0 <__adddf3>
 801d3b8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801d3bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d3c0:	e75d      	b.n	801d27e <__kernel_rem_pio2+0x10e>
 801d3c2:	d107      	bne.n	801d3d4 <__kernel_rem_pio2+0x264>
 801d3c4:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 801d3c8:	aa0c      	add	r2, sp, #48	@ 0x30
 801d3ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d3ce:	ea4f 59e3 	mov.w	r9, r3, asr #23
 801d3d2:	e79e      	b.n	801d312 <__kernel_rem_pio2+0x1a2>
 801d3d4:	4b2f      	ldr	r3, [pc, #188]	@ (801d494 <__kernel_rem_pio2+0x324>)
 801d3d6:	2200      	movs	r2, #0
 801d3d8:	f7e5 fdc6 	bl	8002f68 <__aeabi_dcmpge>
 801d3dc:	2800      	cmp	r0, #0
 801d3de:	d143      	bne.n	801d468 <__kernel_rem_pio2+0x2f8>
 801d3e0:	4681      	mov	r9, r0
 801d3e2:	2200      	movs	r2, #0
 801d3e4:	2300      	movs	r3, #0
 801d3e6:	4630      	mov	r0, r6
 801d3e8:	4639      	mov	r1, r7
 801d3ea:	f7e5 fd9f 	bl	8002f2c <__aeabi_dcmpeq>
 801d3ee:	2800      	cmp	r0, #0
 801d3f0:	f000 80bf 	beq.w	801d572 <__kernel_rem_pio2+0x402>
 801d3f4:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 801d3f8:	2200      	movs	r2, #0
 801d3fa:	9900      	ldr	r1, [sp, #0]
 801d3fc:	428b      	cmp	r3, r1
 801d3fe:	da6e      	bge.n	801d4de <__kernel_rem_pio2+0x36e>
 801d400:	2a00      	cmp	r2, #0
 801d402:	f000 8089 	beq.w	801d518 <__kernel_rem_pio2+0x3a8>
 801d406:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801d40a:	ab0c      	add	r3, sp, #48	@ 0x30
 801d40c:	f1ab 0b18 	sub.w	fp, fp, #24
 801d410:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801d414:	2b00      	cmp	r3, #0
 801d416:	d0f6      	beq.n	801d406 <__kernel_rem_pio2+0x296>
 801d418:	4658      	mov	r0, fp
 801d41a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 801d478 <__kernel_rem_pio2+0x308>
 801d41e:	f000 fb8b 	bl	801db38 <scalbn>
 801d422:	f108 0301 	add.w	r3, r8, #1
 801d426:	00da      	lsls	r2, r3, #3
 801d428:	9205      	str	r2, [sp, #20]
 801d42a:	ec55 4b10 	vmov	r4, r5, d0
 801d42e:	aa70      	add	r2, sp, #448	@ 0x1c0
 801d430:	f8df b058 	ldr.w	fp, [pc, #88]	@ 801d48c <__kernel_rem_pio2+0x31c>
 801d434:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 801d438:	4646      	mov	r6, r8
 801d43a:	f04f 0a00 	mov.w	sl, #0
 801d43e:	2e00      	cmp	r6, #0
 801d440:	f280 80cf 	bge.w	801d5e2 <__kernel_rem_pio2+0x472>
 801d444:	4644      	mov	r4, r8
 801d446:	2c00      	cmp	r4, #0
 801d448:	f2c0 80fd 	blt.w	801d646 <__kernel_rem_pio2+0x4d6>
 801d44c:	4b12      	ldr	r3, [pc, #72]	@ (801d498 <__kernel_rem_pio2+0x328>)
 801d44e:	461f      	mov	r7, r3
 801d450:	ab70      	add	r3, sp, #448	@ 0x1c0
 801d452:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d456:	9306      	str	r3, [sp, #24]
 801d458:	f04f 0a00 	mov.w	sl, #0
 801d45c:	f04f 0b00 	mov.w	fp, #0
 801d460:	2600      	movs	r6, #0
 801d462:	eba8 0504 	sub.w	r5, r8, r4
 801d466:	e0e2      	b.n	801d62e <__kernel_rem_pio2+0x4be>
 801d468:	f04f 0902 	mov.w	r9, #2
 801d46c:	e754      	b.n	801d318 <__kernel_rem_pio2+0x1a8>
 801d46e:	bf00      	nop
	...
 801d47c:	3ff00000 	.word	0x3ff00000
 801d480:	0801f4f8 	.word	0x0801f4f8
 801d484:	40200000 	.word	0x40200000
 801d488:	3ff00000 	.word	0x3ff00000
 801d48c:	3e700000 	.word	0x3e700000
 801d490:	41700000 	.word	0x41700000
 801d494:	3fe00000 	.word	0x3fe00000
 801d498:	0801f4b8 	.word	0x0801f4b8
 801d49c:	f854 3b04 	ldr.w	r3, [r4], #4
 801d4a0:	b945      	cbnz	r5, 801d4b4 <__kernel_rem_pio2+0x344>
 801d4a2:	b123      	cbz	r3, 801d4ae <__kernel_rem_pio2+0x33e>
 801d4a4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 801d4a8:	f844 3c04 	str.w	r3, [r4, #-4]
 801d4ac:	2301      	movs	r3, #1
 801d4ae:	3201      	adds	r2, #1
 801d4b0:	461d      	mov	r5, r3
 801d4b2:	e738      	b.n	801d326 <__kernel_rem_pio2+0x1b6>
 801d4b4:	1acb      	subs	r3, r1, r3
 801d4b6:	e7f7      	b.n	801d4a8 <__kernel_rem_pio2+0x338>
 801d4b8:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 801d4bc:	ab0c      	add	r3, sp, #48	@ 0x30
 801d4be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d4c2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801d4c6:	a90c      	add	r1, sp, #48	@ 0x30
 801d4c8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801d4cc:	e739      	b.n	801d342 <__kernel_rem_pio2+0x1d2>
 801d4ce:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 801d4d2:	ab0c      	add	r3, sp, #48	@ 0x30
 801d4d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d4d8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801d4dc:	e7f3      	b.n	801d4c6 <__kernel_rem_pio2+0x356>
 801d4de:	a90c      	add	r1, sp, #48	@ 0x30
 801d4e0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801d4e4:	3b01      	subs	r3, #1
 801d4e6:	430a      	orrs	r2, r1
 801d4e8:	e787      	b.n	801d3fa <__kernel_rem_pio2+0x28a>
 801d4ea:	3401      	adds	r4, #1
 801d4ec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801d4f0:	2a00      	cmp	r2, #0
 801d4f2:	d0fa      	beq.n	801d4ea <__kernel_rem_pio2+0x37a>
 801d4f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d4f6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801d4fa:	eb0d 0503 	add.w	r5, sp, r3
 801d4fe:	9b06      	ldr	r3, [sp, #24]
 801d500:	aa20      	add	r2, sp, #128	@ 0x80
 801d502:	4443      	add	r3, r8
 801d504:	f108 0701 	add.w	r7, r8, #1
 801d508:	3d98      	subs	r5, #152	@ 0x98
 801d50a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 801d50e:	4444      	add	r4, r8
 801d510:	42bc      	cmp	r4, r7
 801d512:	da04      	bge.n	801d51e <__kernel_rem_pio2+0x3ae>
 801d514:	46a0      	mov	r8, r4
 801d516:	e6a2      	b.n	801d25e <__kernel_rem_pio2+0xee>
 801d518:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d51a:	2401      	movs	r4, #1
 801d51c:	e7e6      	b.n	801d4ec <__kernel_rem_pio2+0x37c>
 801d51e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d520:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801d524:	f7e5 fa30 	bl	8002988 <__aeabi_i2d>
 801d528:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 801d7f0 <__kernel_rem_pio2+0x680>
 801d52c:	e8e6 0102 	strd	r0, r1, [r6], #8
 801d530:	ed8d 7b02 	vstr	d7, [sp, #8]
 801d534:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801d538:	46b2      	mov	sl, r6
 801d53a:	f04f 0800 	mov.w	r8, #0
 801d53e:	9b05      	ldr	r3, [sp, #20]
 801d540:	4598      	cmp	r8, r3
 801d542:	dd05      	ble.n	801d550 <__kernel_rem_pio2+0x3e0>
 801d544:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d548:	3701      	adds	r7, #1
 801d54a:	eca5 7b02 	vstmia	r5!, {d7}
 801d54e:	e7df      	b.n	801d510 <__kernel_rem_pio2+0x3a0>
 801d550:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 801d554:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801d558:	f7e5 fa80 	bl	8002a5c <__aeabi_dmul>
 801d55c:	4602      	mov	r2, r0
 801d55e:	460b      	mov	r3, r1
 801d560:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d564:	f7e5 f8c4 	bl	80026f0 <__adddf3>
 801d568:	f108 0801 	add.w	r8, r8, #1
 801d56c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d570:	e7e5      	b.n	801d53e <__kernel_rem_pio2+0x3ce>
 801d572:	f1cb 0000 	rsb	r0, fp, #0
 801d576:	ec47 6b10 	vmov	d0, r6, r7
 801d57a:	f000 fadd 	bl	801db38 <scalbn>
 801d57e:	ec55 4b10 	vmov	r4, r5, d0
 801d582:	4b9d      	ldr	r3, [pc, #628]	@ (801d7f8 <__kernel_rem_pio2+0x688>)
 801d584:	2200      	movs	r2, #0
 801d586:	4620      	mov	r0, r4
 801d588:	4629      	mov	r1, r5
 801d58a:	f7e5 fced 	bl	8002f68 <__aeabi_dcmpge>
 801d58e:	b300      	cbz	r0, 801d5d2 <__kernel_rem_pio2+0x462>
 801d590:	4b9a      	ldr	r3, [pc, #616]	@ (801d7fc <__kernel_rem_pio2+0x68c>)
 801d592:	2200      	movs	r2, #0
 801d594:	4620      	mov	r0, r4
 801d596:	4629      	mov	r1, r5
 801d598:	f7e5 fa60 	bl	8002a5c <__aeabi_dmul>
 801d59c:	f7e5 fd0e 	bl	8002fbc <__aeabi_d2iz>
 801d5a0:	4606      	mov	r6, r0
 801d5a2:	f7e5 f9f1 	bl	8002988 <__aeabi_i2d>
 801d5a6:	4b94      	ldr	r3, [pc, #592]	@ (801d7f8 <__kernel_rem_pio2+0x688>)
 801d5a8:	2200      	movs	r2, #0
 801d5aa:	f7e5 fa57 	bl	8002a5c <__aeabi_dmul>
 801d5ae:	460b      	mov	r3, r1
 801d5b0:	4602      	mov	r2, r0
 801d5b2:	4629      	mov	r1, r5
 801d5b4:	4620      	mov	r0, r4
 801d5b6:	f7e5 f899 	bl	80026ec <__aeabi_dsub>
 801d5ba:	f7e5 fcff 	bl	8002fbc <__aeabi_d2iz>
 801d5be:	ab0c      	add	r3, sp, #48	@ 0x30
 801d5c0:	f10b 0b18 	add.w	fp, fp, #24
 801d5c4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801d5c8:	f108 0801 	add.w	r8, r8, #1
 801d5cc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 801d5d0:	e722      	b.n	801d418 <__kernel_rem_pio2+0x2a8>
 801d5d2:	4620      	mov	r0, r4
 801d5d4:	4629      	mov	r1, r5
 801d5d6:	f7e5 fcf1 	bl	8002fbc <__aeabi_d2iz>
 801d5da:	ab0c      	add	r3, sp, #48	@ 0x30
 801d5dc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801d5e0:	e71a      	b.n	801d418 <__kernel_rem_pio2+0x2a8>
 801d5e2:	ab0c      	add	r3, sp, #48	@ 0x30
 801d5e4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801d5e8:	f7e5 f9ce 	bl	8002988 <__aeabi_i2d>
 801d5ec:	4622      	mov	r2, r4
 801d5ee:	462b      	mov	r3, r5
 801d5f0:	f7e5 fa34 	bl	8002a5c <__aeabi_dmul>
 801d5f4:	4652      	mov	r2, sl
 801d5f6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 801d5fa:	465b      	mov	r3, fp
 801d5fc:	4620      	mov	r0, r4
 801d5fe:	4629      	mov	r1, r5
 801d600:	f7e5 fa2c 	bl	8002a5c <__aeabi_dmul>
 801d604:	3e01      	subs	r6, #1
 801d606:	4604      	mov	r4, r0
 801d608:	460d      	mov	r5, r1
 801d60a:	e718      	b.n	801d43e <__kernel_rem_pio2+0x2ce>
 801d60c:	9906      	ldr	r1, [sp, #24]
 801d60e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801d612:	9106      	str	r1, [sp, #24]
 801d614:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 801d618:	f7e5 fa20 	bl	8002a5c <__aeabi_dmul>
 801d61c:	4602      	mov	r2, r0
 801d61e:	460b      	mov	r3, r1
 801d620:	4650      	mov	r0, sl
 801d622:	4659      	mov	r1, fp
 801d624:	f7e5 f864 	bl	80026f0 <__adddf3>
 801d628:	3601      	adds	r6, #1
 801d62a:	4682      	mov	sl, r0
 801d62c:	468b      	mov	fp, r1
 801d62e:	9b00      	ldr	r3, [sp, #0]
 801d630:	429e      	cmp	r6, r3
 801d632:	dc01      	bgt.n	801d638 <__kernel_rem_pio2+0x4c8>
 801d634:	42b5      	cmp	r5, r6
 801d636:	dae9      	bge.n	801d60c <__kernel_rem_pio2+0x49c>
 801d638:	ab48      	add	r3, sp, #288	@ 0x120
 801d63a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801d63e:	e9c5 ab00 	strd	sl, fp, [r5]
 801d642:	3c01      	subs	r4, #1
 801d644:	e6ff      	b.n	801d446 <__kernel_rem_pio2+0x2d6>
 801d646:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801d648:	2b02      	cmp	r3, #2
 801d64a:	dc0b      	bgt.n	801d664 <__kernel_rem_pio2+0x4f4>
 801d64c:	2b00      	cmp	r3, #0
 801d64e:	dc39      	bgt.n	801d6c4 <__kernel_rem_pio2+0x554>
 801d650:	d05d      	beq.n	801d70e <__kernel_rem_pio2+0x59e>
 801d652:	9b02      	ldr	r3, [sp, #8]
 801d654:	f003 0007 	and.w	r0, r3, #7
 801d658:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801d65c:	ecbd 8b02 	vpop	{d8}
 801d660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d664:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801d666:	2b03      	cmp	r3, #3
 801d668:	d1f3      	bne.n	801d652 <__kernel_rem_pio2+0x4e2>
 801d66a:	9b05      	ldr	r3, [sp, #20]
 801d66c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801d670:	eb0d 0403 	add.w	r4, sp, r3
 801d674:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 801d678:	4625      	mov	r5, r4
 801d67a:	46c2      	mov	sl, r8
 801d67c:	f1ba 0f00 	cmp.w	sl, #0
 801d680:	f1a5 0508 	sub.w	r5, r5, #8
 801d684:	dc6b      	bgt.n	801d75e <__kernel_rem_pio2+0x5ee>
 801d686:	4645      	mov	r5, r8
 801d688:	2d01      	cmp	r5, #1
 801d68a:	f1a4 0408 	sub.w	r4, r4, #8
 801d68e:	f300 8087 	bgt.w	801d7a0 <__kernel_rem_pio2+0x630>
 801d692:	9c05      	ldr	r4, [sp, #20]
 801d694:	ab48      	add	r3, sp, #288	@ 0x120
 801d696:	441c      	add	r4, r3
 801d698:	2000      	movs	r0, #0
 801d69a:	2100      	movs	r1, #0
 801d69c:	f1b8 0f01 	cmp.w	r8, #1
 801d6a0:	f300 809c 	bgt.w	801d7dc <__kernel_rem_pio2+0x66c>
 801d6a4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 801d6a8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 801d6ac:	f1b9 0f00 	cmp.w	r9, #0
 801d6b0:	f040 80a6 	bne.w	801d800 <__kernel_rem_pio2+0x690>
 801d6b4:	9b04      	ldr	r3, [sp, #16]
 801d6b6:	e9c3 7800 	strd	r7, r8, [r3]
 801d6ba:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801d6be:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801d6c2:	e7c6      	b.n	801d652 <__kernel_rem_pio2+0x4e2>
 801d6c4:	9d05      	ldr	r5, [sp, #20]
 801d6c6:	ab48      	add	r3, sp, #288	@ 0x120
 801d6c8:	441d      	add	r5, r3
 801d6ca:	4644      	mov	r4, r8
 801d6cc:	2000      	movs	r0, #0
 801d6ce:	2100      	movs	r1, #0
 801d6d0:	2c00      	cmp	r4, #0
 801d6d2:	da35      	bge.n	801d740 <__kernel_rem_pio2+0x5d0>
 801d6d4:	f1b9 0f00 	cmp.w	r9, #0
 801d6d8:	d038      	beq.n	801d74c <__kernel_rem_pio2+0x5dc>
 801d6da:	4602      	mov	r2, r0
 801d6dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801d6e0:	9c04      	ldr	r4, [sp, #16]
 801d6e2:	e9c4 2300 	strd	r2, r3, [r4]
 801d6e6:	4602      	mov	r2, r0
 801d6e8:	460b      	mov	r3, r1
 801d6ea:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801d6ee:	f7e4 fffd 	bl	80026ec <__aeabi_dsub>
 801d6f2:	ad4a      	add	r5, sp, #296	@ 0x128
 801d6f4:	2401      	movs	r4, #1
 801d6f6:	45a0      	cmp	r8, r4
 801d6f8:	da2b      	bge.n	801d752 <__kernel_rem_pio2+0x5e2>
 801d6fa:	f1b9 0f00 	cmp.w	r9, #0
 801d6fe:	d002      	beq.n	801d706 <__kernel_rem_pio2+0x596>
 801d700:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801d704:	4619      	mov	r1, r3
 801d706:	9b04      	ldr	r3, [sp, #16]
 801d708:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801d70c:	e7a1      	b.n	801d652 <__kernel_rem_pio2+0x4e2>
 801d70e:	9c05      	ldr	r4, [sp, #20]
 801d710:	ab48      	add	r3, sp, #288	@ 0x120
 801d712:	441c      	add	r4, r3
 801d714:	2000      	movs	r0, #0
 801d716:	2100      	movs	r1, #0
 801d718:	f1b8 0f00 	cmp.w	r8, #0
 801d71c:	da09      	bge.n	801d732 <__kernel_rem_pio2+0x5c2>
 801d71e:	f1b9 0f00 	cmp.w	r9, #0
 801d722:	d002      	beq.n	801d72a <__kernel_rem_pio2+0x5ba>
 801d724:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801d728:	4619      	mov	r1, r3
 801d72a:	9b04      	ldr	r3, [sp, #16]
 801d72c:	e9c3 0100 	strd	r0, r1, [r3]
 801d730:	e78f      	b.n	801d652 <__kernel_rem_pio2+0x4e2>
 801d732:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801d736:	f7e4 ffdb 	bl	80026f0 <__adddf3>
 801d73a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801d73e:	e7eb      	b.n	801d718 <__kernel_rem_pio2+0x5a8>
 801d740:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801d744:	f7e4 ffd4 	bl	80026f0 <__adddf3>
 801d748:	3c01      	subs	r4, #1
 801d74a:	e7c1      	b.n	801d6d0 <__kernel_rem_pio2+0x560>
 801d74c:	4602      	mov	r2, r0
 801d74e:	460b      	mov	r3, r1
 801d750:	e7c6      	b.n	801d6e0 <__kernel_rem_pio2+0x570>
 801d752:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801d756:	f7e4 ffcb 	bl	80026f0 <__adddf3>
 801d75a:	3401      	adds	r4, #1
 801d75c:	e7cb      	b.n	801d6f6 <__kernel_rem_pio2+0x586>
 801d75e:	ed95 7b00 	vldr	d7, [r5]
 801d762:	ed8d 7b00 	vstr	d7, [sp]
 801d766:	ed95 7b02 	vldr	d7, [r5, #8]
 801d76a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d76e:	ec53 2b17 	vmov	r2, r3, d7
 801d772:	ed8d 7b06 	vstr	d7, [sp, #24]
 801d776:	f7e4 ffbb 	bl	80026f0 <__adddf3>
 801d77a:	4602      	mov	r2, r0
 801d77c:	460b      	mov	r3, r1
 801d77e:	4606      	mov	r6, r0
 801d780:	460f      	mov	r7, r1
 801d782:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d786:	f7e4 ffb1 	bl	80026ec <__aeabi_dsub>
 801d78a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d78e:	f7e4 ffaf 	bl	80026f0 <__adddf3>
 801d792:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801d796:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801d79a:	e9c5 6700 	strd	r6, r7, [r5]
 801d79e:	e76d      	b.n	801d67c <__kernel_rem_pio2+0x50c>
 801d7a0:	ed94 7b00 	vldr	d7, [r4]
 801d7a4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 801d7a8:	ec51 0b17 	vmov	r0, r1, d7
 801d7ac:	4652      	mov	r2, sl
 801d7ae:	465b      	mov	r3, fp
 801d7b0:	ed8d 7b00 	vstr	d7, [sp]
 801d7b4:	f7e4 ff9c 	bl	80026f0 <__adddf3>
 801d7b8:	4602      	mov	r2, r0
 801d7ba:	460b      	mov	r3, r1
 801d7bc:	4606      	mov	r6, r0
 801d7be:	460f      	mov	r7, r1
 801d7c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d7c4:	f7e4 ff92 	bl	80026ec <__aeabi_dsub>
 801d7c8:	4652      	mov	r2, sl
 801d7ca:	465b      	mov	r3, fp
 801d7cc:	f7e4 ff90 	bl	80026f0 <__adddf3>
 801d7d0:	3d01      	subs	r5, #1
 801d7d2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801d7d6:	e9c4 6700 	strd	r6, r7, [r4]
 801d7da:	e755      	b.n	801d688 <__kernel_rem_pio2+0x518>
 801d7dc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801d7e0:	f7e4 ff86 	bl	80026f0 <__adddf3>
 801d7e4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801d7e8:	e758      	b.n	801d69c <__kernel_rem_pio2+0x52c>
 801d7ea:	bf00      	nop
 801d7ec:	f3af 8000 	nop.w
	...
 801d7f8:	41700000 	.word	0x41700000
 801d7fc:	3e700000 	.word	0x3e700000
 801d800:	9b04      	ldr	r3, [sp, #16]
 801d802:	9a04      	ldr	r2, [sp, #16]
 801d804:	601f      	str	r7, [r3, #0]
 801d806:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 801d80a:	605c      	str	r4, [r3, #4]
 801d80c:	609d      	str	r5, [r3, #8]
 801d80e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801d812:	60d3      	str	r3, [r2, #12]
 801d814:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801d818:	6110      	str	r0, [r2, #16]
 801d81a:	6153      	str	r3, [r2, #20]
 801d81c:	e719      	b.n	801d652 <__kernel_rem_pio2+0x4e2>
 801d81e:	bf00      	nop

0801d820 <__kernel_cos>:
 801d820:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d824:	ec57 6b10 	vmov	r6, r7, d0
 801d828:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801d82c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 801d830:	ed8d 1b00 	vstr	d1, [sp]
 801d834:	d206      	bcs.n	801d844 <__kernel_cos+0x24>
 801d836:	4630      	mov	r0, r6
 801d838:	4639      	mov	r1, r7
 801d83a:	f7e5 fbbf 	bl	8002fbc <__aeabi_d2iz>
 801d83e:	2800      	cmp	r0, #0
 801d840:	f000 8088 	beq.w	801d954 <__kernel_cos+0x134>
 801d844:	4632      	mov	r2, r6
 801d846:	463b      	mov	r3, r7
 801d848:	4630      	mov	r0, r6
 801d84a:	4639      	mov	r1, r7
 801d84c:	f7e5 f906 	bl	8002a5c <__aeabi_dmul>
 801d850:	4b51      	ldr	r3, [pc, #324]	@ (801d998 <__kernel_cos+0x178>)
 801d852:	2200      	movs	r2, #0
 801d854:	4604      	mov	r4, r0
 801d856:	460d      	mov	r5, r1
 801d858:	f7e5 f900 	bl	8002a5c <__aeabi_dmul>
 801d85c:	a340      	add	r3, pc, #256	@ (adr r3, 801d960 <__kernel_cos+0x140>)
 801d85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d862:	4682      	mov	sl, r0
 801d864:	468b      	mov	fp, r1
 801d866:	4620      	mov	r0, r4
 801d868:	4629      	mov	r1, r5
 801d86a:	f7e5 f8f7 	bl	8002a5c <__aeabi_dmul>
 801d86e:	a33e      	add	r3, pc, #248	@ (adr r3, 801d968 <__kernel_cos+0x148>)
 801d870:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d874:	f7e4 ff3c 	bl	80026f0 <__adddf3>
 801d878:	4622      	mov	r2, r4
 801d87a:	462b      	mov	r3, r5
 801d87c:	f7e5 f8ee 	bl	8002a5c <__aeabi_dmul>
 801d880:	a33b      	add	r3, pc, #236	@ (adr r3, 801d970 <__kernel_cos+0x150>)
 801d882:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d886:	f7e4 ff31 	bl	80026ec <__aeabi_dsub>
 801d88a:	4622      	mov	r2, r4
 801d88c:	462b      	mov	r3, r5
 801d88e:	f7e5 f8e5 	bl	8002a5c <__aeabi_dmul>
 801d892:	a339      	add	r3, pc, #228	@ (adr r3, 801d978 <__kernel_cos+0x158>)
 801d894:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d898:	f7e4 ff2a 	bl	80026f0 <__adddf3>
 801d89c:	4622      	mov	r2, r4
 801d89e:	462b      	mov	r3, r5
 801d8a0:	f7e5 f8dc 	bl	8002a5c <__aeabi_dmul>
 801d8a4:	a336      	add	r3, pc, #216	@ (adr r3, 801d980 <__kernel_cos+0x160>)
 801d8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8aa:	f7e4 ff1f 	bl	80026ec <__aeabi_dsub>
 801d8ae:	4622      	mov	r2, r4
 801d8b0:	462b      	mov	r3, r5
 801d8b2:	f7e5 f8d3 	bl	8002a5c <__aeabi_dmul>
 801d8b6:	a334      	add	r3, pc, #208	@ (adr r3, 801d988 <__kernel_cos+0x168>)
 801d8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8bc:	f7e4 ff18 	bl	80026f0 <__adddf3>
 801d8c0:	4622      	mov	r2, r4
 801d8c2:	462b      	mov	r3, r5
 801d8c4:	f7e5 f8ca 	bl	8002a5c <__aeabi_dmul>
 801d8c8:	4622      	mov	r2, r4
 801d8ca:	462b      	mov	r3, r5
 801d8cc:	f7e5 f8c6 	bl	8002a5c <__aeabi_dmul>
 801d8d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d8d4:	4604      	mov	r4, r0
 801d8d6:	460d      	mov	r5, r1
 801d8d8:	4630      	mov	r0, r6
 801d8da:	4639      	mov	r1, r7
 801d8dc:	f7e5 f8be 	bl	8002a5c <__aeabi_dmul>
 801d8e0:	460b      	mov	r3, r1
 801d8e2:	4602      	mov	r2, r0
 801d8e4:	4629      	mov	r1, r5
 801d8e6:	4620      	mov	r0, r4
 801d8e8:	f7e4 ff00 	bl	80026ec <__aeabi_dsub>
 801d8ec:	4b2b      	ldr	r3, [pc, #172]	@ (801d99c <__kernel_cos+0x17c>)
 801d8ee:	4598      	cmp	r8, r3
 801d8f0:	4606      	mov	r6, r0
 801d8f2:	460f      	mov	r7, r1
 801d8f4:	d810      	bhi.n	801d918 <__kernel_cos+0xf8>
 801d8f6:	4602      	mov	r2, r0
 801d8f8:	460b      	mov	r3, r1
 801d8fa:	4650      	mov	r0, sl
 801d8fc:	4659      	mov	r1, fp
 801d8fe:	f7e4 fef5 	bl	80026ec <__aeabi_dsub>
 801d902:	460b      	mov	r3, r1
 801d904:	4926      	ldr	r1, [pc, #152]	@ (801d9a0 <__kernel_cos+0x180>)
 801d906:	4602      	mov	r2, r0
 801d908:	2000      	movs	r0, #0
 801d90a:	f7e4 feef 	bl	80026ec <__aeabi_dsub>
 801d90e:	ec41 0b10 	vmov	d0, r0, r1
 801d912:	b003      	add	sp, #12
 801d914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d918:	4b22      	ldr	r3, [pc, #136]	@ (801d9a4 <__kernel_cos+0x184>)
 801d91a:	4921      	ldr	r1, [pc, #132]	@ (801d9a0 <__kernel_cos+0x180>)
 801d91c:	4598      	cmp	r8, r3
 801d91e:	bf8c      	ite	hi
 801d920:	4d21      	ldrhi	r5, [pc, #132]	@ (801d9a8 <__kernel_cos+0x188>)
 801d922:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801d926:	2400      	movs	r4, #0
 801d928:	4622      	mov	r2, r4
 801d92a:	462b      	mov	r3, r5
 801d92c:	2000      	movs	r0, #0
 801d92e:	f7e4 fedd 	bl	80026ec <__aeabi_dsub>
 801d932:	4622      	mov	r2, r4
 801d934:	4680      	mov	r8, r0
 801d936:	4689      	mov	r9, r1
 801d938:	462b      	mov	r3, r5
 801d93a:	4650      	mov	r0, sl
 801d93c:	4659      	mov	r1, fp
 801d93e:	f7e4 fed5 	bl	80026ec <__aeabi_dsub>
 801d942:	4632      	mov	r2, r6
 801d944:	463b      	mov	r3, r7
 801d946:	f7e4 fed1 	bl	80026ec <__aeabi_dsub>
 801d94a:	4602      	mov	r2, r0
 801d94c:	460b      	mov	r3, r1
 801d94e:	4640      	mov	r0, r8
 801d950:	4649      	mov	r1, r9
 801d952:	e7da      	b.n	801d90a <__kernel_cos+0xea>
 801d954:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 801d990 <__kernel_cos+0x170>
 801d958:	e7db      	b.n	801d912 <__kernel_cos+0xf2>
 801d95a:	bf00      	nop
 801d95c:	f3af 8000 	nop.w
 801d960:	be8838d4 	.word	0xbe8838d4
 801d964:	bda8fae9 	.word	0xbda8fae9
 801d968:	bdb4b1c4 	.word	0xbdb4b1c4
 801d96c:	3e21ee9e 	.word	0x3e21ee9e
 801d970:	809c52ad 	.word	0x809c52ad
 801d974:	3e927e4f 	.word	0x3e927e4f
 801d978:	19cb1590 	.word	0x19cb1590
 801d97c:	3efa01a0 	.word	0x3efa01a0
 801d980:	16c15177 	.word	0x16c15177
 801d984:	3f56c16c 	.word	0x3f56c16c
 801d988:	5555554c 	.word	0x5555554c
 801d98c:	3fa55555 	.word	0x3fa55555
 801d990:	00000000 	.word	0x00000000
 801d994:	3ff00000 	.word	0x3ff00000
 801d998:	3fe00000 	.word	0x3fe00000
 801d99c:	3fd33332 	.word	0x3fd33332
 801d9a0:	3ff00000 	.word	0x3ff00000
 801d9a4:	3fe90000 	.word	0x3fe90000
 801d9a8:	3fd20000 	.word	0x3fd20000
 801d9ac:	00000000 	.word	0x00000000

0801d9b0 <__kernel_sin>:
 801d9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9b4:	ec55 4b10 	vmov	r4, r5, d0
 801d9b8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801d9bc:	b085      	sub	sp, #20
 801d9be:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801d9c2:	ed8d 1b02 	vstr	d1, [sp, #8]
 801d9c6:	4680      	mov	r8, r0
 801d9c8:	d205      	bcs.n	801d9d6 <__kernel_sin+0x26>
 801d9ca:	4620      	mov	r0, r4
 801d9cc:	4629      	mov	r1, r5
 801d9ce:	f7e5 faf5 	bl	8002fbc <__aeabi_d2iz>
 801d9d2:	2800      	cmp	r0, #0
 801d9d4:	d052      	beq.n	801da7c <__kernel_sin+0xcc>
 801d9d6:	4622      	mov	r2, r4
 801d9d8:	462b      	mov	r3, r5
 801d9da:	4620      	mov	r0, r4
 801d9dc:	4629      	mov	r1, r5
 801d9de:	f7e5 f83d 	bl	8002a5c <__aeabi_dmul>
 801d9e2:	4682      	mov	sl, r0
 801d9e4:	468b      	mov	fp, r1
 801d9e6:	4602      	mov	r2, r0
 801d9e8:	460b      	mov	r3, r1
 801d9ea:	4620      	mov	r0, r4
 801d9ec:	4629      	mov	r1, r5
 801d9ee:	f7e5 f835 	bl	8002a5c <__aeabi_dmul>
 801d9f2:	a342      	add	r3, pc, #264	@ (adr r3, 801dafc <__kernel_sin+0x14c>)
 801d9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9f8:	e9cd 0100 	strd	r0, r1, [sp]
 801d9fc:	4650      	mov	r0, sl
 801d9fe:	4659      	mov	r1, fp
 801da00:	f7e5 f82c 	bl	8002a5c <__aeabi_dmul>
 801da04:	a33f      	add	r3, pc, #252	@ (adr r3, 801db04 <__kernel_sin+0x154>)
 801da06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da0a:	f7e4 fe6f 	bl	80026ec <__aeabi_dsub>
 801da0e:	4652      	mov	r2, sl
 801da10:	465b      	mov	r3, fp
 801da12:	f7e5 f823 	bl	8002a5c <__aeabi_dmul>
 801da16:	a33d      	add	r3, pc, #244	@ (adr r3, 801db0c <__kernel_sin+0x15c>)
 801da18:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da1c:	f7e4 fe68 	bl	80026f0 <__adddf3>
 801da20:	4652      	mov	r2, sl
 801da22:	465b      	mov	r3, fp
 801da24:	f7e5 f81a 	bl	8002a5c <__aeabi_dmul>
 801da28:	a33a      	add	r3, pc, #232	@ (adr r3, 801db14 <__kernel_sin+0x164>)
 801da2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da2e:	f7e4 fe5d 	bl	80026ec <__aeabi_dsub>
 801da32:	4652      	mov	r2, sl
 801da34:	465b      	mov	r3, fp
 801da36:	f7e5 f811 	bl	8002a5c <__aeabi_dmul>
 801da3a:	a338      	add	r3, pc, #224	@ (adr r3, 801db1c <__kernel_sin+0x16c>)
 801da3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da40:	f7e4 fe56 	bl	80026f0 <__adddf3>
 801da44:	4606      	mov	r6, r0
 801da46:	460f      	mov	r7, r1
 801da48:	f1b8 0f00 	cmp.w	r8, #0
 801da4c:	d11b      	bne.n	801da86 <__kernel_sin+0xd6>
 801da4e:	4602      	mov	r2, r0
 801da50:	460b      	mov	r3, r1
 801da52:	4650      	mov	r0, sl
 801da54:	4659      	mov	r1, fp
 801da56:	f7e5 f801 	bl	8002a5c <__aeabi_dmul>
 801da5a:	a325      	add	r3, pc, #148	@ (adr r3, 801daf0 <__kernel_sin+0x140>)
 801da5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da60:	f7e4 fe44 	bl	80026ec <__aeabi_dsub>
 801da64:	e9dd 2300 	ldrd	r2, r3, [sp]
 801da68:	f7e4 fff8 	bl	8002a5c <__aeabi_dmul>
 801da6c:	4602      	mov	r2, r0
 801da6e:	460b      	mov	r3, r1
 801da70:	4620      	mov	r0, r4
 801da72:	4629      	mov	r1, r5
 801da74:	f7e4 fe3c 	bl	80026f0 <__adddf3>
 801da78:	4604      	mov	r4, r0
 801da7a:	460d      	mov	r5, r1
 801da7c:	ec45 4b10 	vmov	d0, r4, r5
 801da80:	b005      	add	sp, #20
 801da82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801da8a:	4b1b      	ldr	r3, [pc, #108]	@ (801daf8 <__kernel_sin+0x148>)
 801da8c:	2200      	movs	r2, #0
 801da8e:	f7e4 ffe5 	bl	8002a5c <__aeabi_dmul>
 801da92:	4632      	mov	r2, r6
 801da94:	4680      	mov	r8, r0
 801da96:	4689      	mov	r9, r1
 801da98:	463b      	mov	r3, r7
 801da9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801da9e:	f7e4 ffdd 	bl	8002a5c <__aeabi_dmul>
 801daa2:	4602      	mov	r2, r0
 801daa4:	460b      	mov	r3, r1
 801daa6:	4640      	mov	r0, r8
 801daa8:	4649      	mov	r1, r9
 801daaa:	f7e4 fe1f 	bl	80026ec <__aeabi_dsub>
 801daae:	4652      	mov	r2, sl
 801dab0:	465b      	mov	r3, fp
 801dab2:	f7e4 ffd3 	bl	8002a5c <__aeabi_dmul>
 801dab6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801daba:	f7e4 fe17 	bl	80026ec <__aeabi_dsub>
 801dabe:	a30c      	add	r3, pc, #48	@ (adr r3, 801daf0 <__kernel_sin+0x140>)
 801dac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dac4:	4606      	mov	r6, r0
 801dac6:	460f      	mov	r7, r1
 801dac8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801dacc:	f7e4 ffc6 	bl	8002a5c <__aeabi_dmul>
 801dad0:	4602      	mov	r2, r0
 801dad2:	460b      	mov	r3, r1
 801dad4:	4630      	mov	r0, r6
 801dad6:	4639      	mov	r1, r7
 801dad8:	f7e4 fe0a 	bl	80026f0 <__adddf3>
 801dadc:	4602      	mov	r2, r0
 801dade:	460b      	mov	r3, r1
 801dae0:	4620      	mov	r0, r4
 801dae2:	4629      	mov	r1, r5
 801dae4:	f7e4 fe02 	bl	80026ec <__aeabi_dsub>
 801dae8:	e7c6      	b.n	801da78 <__kernel_sin+0xc8>
 801daea:	bf00      	nop
 801daec:	f3af 8000 	nop.w
 801daf0:	55555549 	.word	0x55555549
 801daf4:	3fc55555 	.word	0x3fc55555
 801daf8:	3fe00000 	.word	0x3fe00000
 801dafc:	5acfd57c 	.word	0x5acfd57c
 801db00:	3de5d93a 	.word	0x3de5d93a
 801db04:	8a2b9ceb 	.word	0x8a2b9ceb
 801db08:	3e5ae5e6 	.word	0x3e5ae5e6
 801db0c:	57b1fe7d 	.word	0x57b1fe7d
 801db10:	3ec71de3 	.word	0x3ec71de3
 801db14:	19c161d5 	.word	0x19c161d5
 801db18:	3f2a01a0 	.word	0x3f2a01a0
 801db1c:	1110f8a6 	.word	0x1110f8a6
 801db20:	3f811111 	.word	0x3f811111

0801db24 <fabs>:
 801db24:	ec51 0b10 	vmov	r0, r1, d0
 801db28:	4602      	mov	r2, r0
 801db2a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801db2e:	ec43 2b10 	vmov	d0, r2, r3
 801db32:	4770      	bx	lr
 801db34:	0000      	movs	r0, r0
	...

0801db38 <scalbn>:
 801db38:	b570      	push	{r4, r5, r6, lr}
 801db3a:	ec55 4b10 	vmov	r4, r5, d0
 801db3e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801db42:	4606      	mov	r6, r0
 801db44:	462b      	mov	r3, r5
 801db46:	b991      	cbnz	r1, 801db6e <scalbn+0x36>
 801db48:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801db4c:	4323      	orrs	r3, r4
 801db4e:	d03d      	beq.n	801dbcc <scalbn+0x94>
 801db50:	4b35      	ldr	r3, [pc, #212]	@ (801dc28 <scalbn+0xf0>)
 801db52:	4620      	mov	r0, r4
 801db54:	4629      	mov	r1, r5
 801db56:	2200      	movs	r2, #0
 801db58:	f7e4 ff80 	bl	8002a5c <__aeabi_dmul>
 801db5c:	4b33      	ldr	r3, [pc, #204]	@ (801dc2c <scalbn+0xf4>)
 801db5e:	429e      	cmp	r6, r3
 801db60:	4604      	mov	r4, r0
 801db62:	460d      	mov	r5, r1
 801db64:	da0f      	bge.n	801db86 <scalbn+0x4e>
 801db66:	a328      	add	r3, pc, #160	@ (adr r3, 801dc08 <scalbn+0xd0>)
 801db68:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db6c:	e01e      	b.n	801dbac <scalbn+0x74>
 801db6e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801db72:	4291      	cmp	r1, r2
 801db74:	d10b      	bne.n	801db8e <scalbn+0x56>
 801db76:	4622      	mov	r2, r4
 801db78:	4620      	mov	r0, r4
 801db7a:	4629      	mov	r1, r5
 801db7c:	f7e4 fdb8 	bl	80026f0 <__adddf3>
 801db80:	4604      	mov	r4, r0
 801db82:	460d      	mov	r5, r1
 801db84:	e022      	b.n	801dbcc <scalbn+0x94>
 801db86:	460b      	mov	r3, r1
 801db88:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801db8c:	3936      	subs	r1, #54	@ 0x36
 801db8e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801db92:	4296      	cmp	r6, r2
 801db94:	dd0d      	ble.n	801dbb2 <scalbn+0x7a>
 801db96:	2d00      	cmp	r5, #0
 801db98:	a11d      	add	r1, pc, #116	@ (adr r1, 801dc10 <scalbn+0xd8>)
 801db9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801db9e:	da02      	bge.n	801dba6 <scalbn+0x6e>
 801dba0:	a11d      	add	r1, pc, #116	@ (adr r1, 801dc18 <scalbn+0xe0>)
 801dba2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801dba6:	a31a      	add	r3, pc, #104	@ (adr r3, 801dc10 <scalbn+0xd8>)
 801dba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dbac:	f7e4 ff56 	bl	8002a5c <__aeabi_dmul>
 801dbb0:	e7e6      	b.n	801db80 <scalbn+0x48>
 801dbb2:	1872      	adds	r2, r6, r1
 801dbb4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 801dbb8:	428a      	cmp	r2, r1
 801dbba:	dcec      	bgt.n	801db96 <scalbn+0x5e>
 801dbbc:	2a00      	cmp	r2, #0
 801dbbe:	dd08      	ble.n	801dbd2 <scalbn+0x9a>
 801dbc0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801dbc4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801dbc8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801dbcc:	ec45 4b10 	vmov	d0, r4, r5
 801dbd0:	bd70      	pop	{r4, r5, r6, pc}
 801dbd2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801dbd6:	da08      	bge.n	801dbea <scalbn+0xb2>
 801dbd8:	2d00      	cmp	r5, #0
 801dbda:	a10b      	add	r1, pc, #44	@ (adr r1, 801dc08 <scalbn+0xd0>)
 801dbdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801dbe0:	dac1      	bge.n	801db66 <scalbn+0x2e>
 801dbe2:	a10f      	add	r1, pc, #60	@ (adr r1, 801dc20 <scalbn+0xe8>)
 801dbe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801dbe8:	e7bd      	b.n	801db66 <scalbn+0x2e>
 801dbea:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801dbee:	3236      	adds	r2, #54	@ 0x36
 801dbf0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801dbf4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801dbf8:	4620      	mov	r0, r4
 801dbfa:	4b0d      	ldr	r3, [pc, #52]	@ (801dc30 <scalbn+0xf8>)
 801dbfc:	4629      	mov	r1, r5
 801dbfe:	2200      	movs	r2, #0
 801dc00:	e7d4      	b.n	801dbac <scalbn+0x74>
 801dc02:	bf00      	nop
 801dc04:	f3af 8000 	nop.w
 801dc08:	c2f8f359 	.word	0xc2f8f359
 801dc0c:	01a56e1f 	.word	0x01a56e1f
 801dc10:	8800759c 	.word	0x8800759c
 801dc14:	7e37e43c 	.word	0x7e37e43c
 801dc18:	8800759c 	.word	0x8800759c
 801dc1c:	fe37e43c 	.word	0xfe37e43c
 801dc20:	c2f8f359 	.word	0xc2f8f359
 801dc24:	81a56e1f 	.word	0x81a56e1f
 801dc28:	43500000 	.word	0x43500000
 801dc2c:	ffff3cb0 	.word	0xffff3cb0
 801dc30:	3c900000 	.word	0x3c900000
 801dc34:	00000000 	.word	0x00000000

0801dc38 <floor>:
 801dc38:	ec51 0b10 	vmov	r0, r1, d0
 801dc3c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801dc40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc44:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 801dc48:	2e13      	cmp	r6, #19
 801dc4a:	460c      	mov	r4, r1
 801dc4c:	4605      	mov	r5, r0
 801dc4e:	4680      	mov	r8, r0
 801dc50:	dc34      	bgt.n	801dcbc <floor+0x84>
 801dc52:	2e00      	cmp	r6, #0
 801dc54:	da17      	bge.n	801dc86 <floor+0x4e>
 801dc56:	a332      	add	r3, pc, #200	@ (adr r3, 801dd20 <floor+0xe8>)
 801dc58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc5c:	f7e4 fd48 	bl	80026f0 <__adddf3>
 801dc60:	2200      	movs	r2, #0
 801dc62:	2300      	movs	r3, #0
 801dc64:	f7e5 f98a 	bl	8002f7c <__aeabi_dcmpgt>
 801dc68:	b150      	cbz	r0, 801dc80 <floor+0x48>
 801dc6a:	2c00      	cmp	r4, #0
 801dc6c:	da55      	bge.n	801dd1a <floor+0xe2>
 801dc6e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801dc72:	432c      	orrs	r4, r5
 801dc74:	2500      	movs	r5, #0
 801dc76:	42ac      	cmp	r4, r5
 801dc78:	4c2b      	ldr	r4, [pc, #172]	@ (801dd28 <floor+0xf0>)
 801dc7a:	bf08      	it	eq
 801dc7c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801dc80:	4621      	mov	r1, r4
 801dc82:	4628      	mov	r0, r5
 801dc84:	e023      	b.n	801dcce <floor+0x96>
 801dc86:	4f29      	ldr	r7, [pc, #164]	@ (801dd2c <floor+0xf4>)
 801dc88:	4137      	asrs	r7, r6
 801dc8a:	ea01 0307 	and.w	r3, r1, r7
 801dc8e:	4303      	orrs	r3, r0
 801dc90:	d01d      	beq.n	801dcce <floor+0x96>
 801dc92:	a323      	add	r3, pc, #140	@ (adr r3, 801dd20 <floor+0xe8>)
 801dc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc98:	f7e4 fd2a 	bl	80026f0 <__adddf3>
 801dc9c:	2200      	movs	r2, #0
 801dc9e:	2300      	movs	r3, #0
 801dca0:	f7e5 f96c 	bl	8002f7c <__aeabi_dcmpgt>
 801dca4:	2800      	cmp	r0, #0
 801dca6:	d0eb      	beq.n	801dc80 <floor+0x48>
 801dca8:	2c00      	cmp	r4, #0
 801dcaa:	bfbe      	ittt	lt
 801dcac:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801dcb0:	4133      	asrlt	r3, r6
 801dcb2:	18e4      	addlt	r4, r4, r3
 801dcb4:	ea24 0407 	bic.w	r4, r4, r7
 801dcb8:	2500      	movs	r5, #0
 801dcba:	e7e1      	b.n	801dc80 <floor+0x48>
 801dcbc:	2e33      	cmp	r6, #51	@ 0x33
 801dcbe:	dd0a      	ble.n	801dcd6 <floor+0x9e>
 801dcc0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801dcc4:	d103      	bne.n	801dcce <floor+0x96>
 801dcc6:	4602      	mov	r2, r0
 801dcc8:	460b      	mov	r3, r1
 801dcca:	f7e4 fd11 	bl	80026f0 <__adddf3>
 801dcce:	ec41 0b10 	vmov	d0, r0, r1
 801dcd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dcd6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801dcda:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801dcde:	40df      	lsrs	r7, r3
 801dce0:	4207      	tst	r7, r0
 801dce2:	d0f4      	beq.n	801dcce <floor+0x96>
 801dce4:	a30e      	add	r3, pc, #56	@ (adr r3, 801dd20 <floor+0xe8>)
 801dce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dcea:	f7e4 fd01 	bl	80026f0 <__adddf3>
 801dcee:	2200      	movs	r2, #0
 801dcf0:	2300      	movs	r3, #0
 801dcf2:	f7e5 f943 	bl	8002f7c <__aeabi_dcmpgt>
 801dcf6:	2800      	cmp	r0, #0
 801dcf8:	d0c2      	beq.n	801dc80 <floor+0x48>
 801dcfa:	2c00      	cmp	r4, #0
 801dcfc:	da0a      	bge.n	801dd14 <floor+0xdc>
 801dcfe:	2e14      	cmp	r6, #20
 801dd00:	d101      	bne.n	801dd06 <floor+0xce>
 801dd02:	3401      	adds	r4, #1
 801dd04:	e006      	b.n	801dd14 <floor+0xdc>
 801dd06:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801dd0a:	2301      	movs	r3, #1
 801dd0c:	40b3      	lsls	r3, r6
 801dd0e:	441d      	add	r5, r3
 801dd10:	4545      	cmp	r5, r8
 801dd12:	d3f6      	bcc.n	801dd02 <floor+0xca>
 801dd14:	ea25 0507 	bic.w	r5, r5, r7
 801dd18:	e7b2      	b.n	801dc80 <floor+0x48>
 801dd1a:	2500      	movs	r5, #0
 801dd1c:	462c      	mov	r4, r5
 801dd1e:	e7af      	b.n	801dc80 <floor+0x48>
 801dd20:	8800759c 	.word	0x8800759c
 801dd24:	7e37e43c 	.word	0x7e37e43c
 801dd28:	bff00000 	.word	0xbff00000
 801dd2c:	000fffff 	.word	0x000fffff

0801dd30 <_init>:
 801dd30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dd32:	bf00      	nop
 801dd34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dd36:	bc08      	pop	{r3}
 801dd38:	469e      	mov	lr, r3
 801dd3a:	4770      	bx	lr

0801dd3c <_fini>:
 801dd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dd3e:	bf00      	nop
 801dd40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dd42:	bc08      	pop	{r3}
 801dd44:	469e      	mov	lr, r3
 801dd46:	4770      	bx	lr
