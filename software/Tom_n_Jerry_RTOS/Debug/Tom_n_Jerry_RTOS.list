
Tom_n_Jerry_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017a0c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ee4  08017bec  08017bec  00018bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018ad0  08018ad0  0001a310  2**0
                  CONTENTS
  4 .ARM          00000008  08018ad0  08018ad0  00019ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018ad8  08018ad8  0001a310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018ad8  08018ad8  00019ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08018adc  08018adc  00019adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000310  20000000  08018ae0  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000059bc  20000310  08018df0  0001a310  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005ccc  08018df0  0001accc  2**0
                  ALLOC
 11 .ARM.attributes 00000034  00000000  00000000  0001a310  2**0
                  CONTENTS, READONLY
 12 .debug_info   000397e2  00000000  00000000  0001a344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000088bb  00000000  00000000  00053b26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002d20  00000000  00000000  0005c3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000225c  00000000  00000000  0005f108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fbf6  00000000  00000000  00061364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003c683  00000000  00000000  00090f5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b00a  00000000  00000000  000cd5dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00002fcb  00000000  00000000  001d85e7  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  000002e0  00000000  00000000  001db5b2  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000020  00000000  00000000  001db894  2**2
                  CONTENTS, READONLY
 22 .iar.debug_frame 00000336  00000000  00000000  001db8b4  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000db68  00000000  00000000  001dbbec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000008c  00000000  00000000  001e9754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000310 	.word	0x20000310
 80001fc:	00000000 	.word	0x00000000
 8000200:	08017bd4 	.word	0x08017bd4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000314 	.word	0x20000314
 800021c:	08017bd4 	.word	0x08017bd4

08000220 <USBPD_CAD_Init>:
 8000220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000224:	2600      	movs	r6, #0
 8000226:	2803      	cmp	r0, #3
 8000228:	4681      	mov	r9, r0
 800022a:	460c      	mov	r4, r1
 800022c:	4690      	mov	r8, r2
 800022e:	461f      	mov	r7, r3
 8000230:	bf28      	it	cs
 8000232:	2601      	movcs	r6, #1
 8000234:	d219      	bcs.n	800026a <USBPD_CAD_Init+0x4a>
 8000236:	b90c      	cbnz	r4, 800023c <USBPD_CAD_Init+0x1c>
 8000238:	2602      	movs	r6, #2
 800023a:	e016      	b.n	800026a <USBPD_CAD_Init+0x4a>
 800023c:	200c      	movs	r0, #12
 800023e:	f016 fb29 	bl	8016894 <malloc>
 8000242:	0005      	movs	r5, r0
 8000244:	bf08      	it	eq
 8000246:	2603      	moveq	r6, #3
 8000248:	d00f      	beq.n	800026a <USBPD_CAD_Init+0x4a>
 800024a:	210c      	movs	r1, #12
 800024c:	f016 fe85 	bl	8016f5a <__aeabi_memclr>
 8000250:	602f      	str	r7, [r5, #0]
 8000252:	722e      	strb	r6, [r5, #8]
 8000254:	606c      	str	r4, [r5, #4]
 8000256:	464a      	mov	r2, r9
 8000258:	4947      	ldr	r1, [pc, #284]	@ (8000378 <.text_6>)
 800025a:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
 800025e:	463a      	mov	r2, r7
 8000260:	6863      	ldr	r3, [r4, #4]
 8000262:	4641      	mov	r1, r8
 8000264:	4648      	mov	r0, r9
 8000266:	f00f fd39 	bl	800fcdc <CAD_Init>
 800026a:	4630      	mov	r0, r6
 800026c:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

08000270 <USBPD_CAD_PortEnable>:
 8000270:	2803      	cmp	r0, #3
 8000272:	d203      	bcs.n	800027c <USBPD_CAD_PortEnable+0xc>
 8000274:	4a40      	ldr	r2, [pc, #256]	@ (8000378 <.text_6>)
 8000276:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800027a:	7201      	strb	r1, [r0, #8]
 800027c:	4770      	bx	lr

0800027e <USBPD_CAD_Process>:
 800027e:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8000280:	2100      	movs	r1, #0
 8000282:	f88d 1000 	strb.w	r1, [sp]
 8000286:	9101      	str	r1, [sp, #4]
 8000288:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800028c:	2600      	movs	r6, #0
 800028e:	4c3a      	ldr	r4, [pc, #232]	@ (8000378 <.text_6>)
 8000290:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8000294:	2800      	cmp	r0, #0
 8000296:	d069      	beq.n	800036c <USBPD_CAD_Process+0xee>
 8000298:	7a00      	ldrb	r0, [r0, #8]
 800029a:	2801      	cmp	r0, #1
 800029c:	d166      	bne.n	800036c <USBPD_CAD_Process+0xee>
 800029e:	aa01      	add	r2, sp, #4
 80002a0:	4669      	mov	r1, sp
 80002a2:	b2f0      	uxtb	r0, r6
 80002a4:	f00f fef0 	bl	8010088 <CAD_StateMachine>
 80002a8:	42a8      	cmp	r0, r5
 80002aa:	bf98      	it	ls
 80002ac:	4605      	movls	r5, r0
 80002ae:	f89d 0000 	ldrb.w	r0, [sp]
 80002b2:	2801      	cmp	r0, #1
 80002b4:	d004      	beq.n	80002c0 <USBPD_CAD_Process+0x42>
 80002b6:	2802      	cmp	r0, #2
 80002b8:	bf18      	it	ne
 80002ba:	2804      	cmpne	r0, #4
 80002bc:	d012      	beq.n	80002e4 <USBPD_CAD_Process+0x66>
 80002be:	e03e      	b.n	800033e <USBPD_CAD_Process+0xc0>
 80002c0:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80002c4:	6801      	ldr	r1, [r0, #0]
 80002c6:	680a      	ldr	r2, [r1, #0]
 80002c8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80002cc:	600a      	str	r2, [r1, #0]
 80002ce:	6801      	ldr	r1, [r0, #0]
 80002d0:	680b      	ldr	r3, [r1, #0]
 80002d2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80002d6:	600b      	str	r3, [r1, #0]
 80002d8:	6800      	ldr	r0, [r0, #0]
 80002da:	6801      	ldr	r1, [r0, #0]
 80002dc:	f421 41c0 	bic.w	r1, r1, #24576	@ 0x6000
 80002e0:	6001      	str	r1, [r0, #0]
 80002e2:	e02f      	b.n	8000344 <USBPD_CAD_Process+0xc6>
 80002e4:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80002e8:	6802      	ldr	r2, [r0, #0]
 80002ea:	9901      	ldr	r1, [sp, #4]
 80002ec:	6813      	ldr	r3, [r2, #0]
 80002ee:	2901      	cmp	r1, #1
 80002f0:	bf0c      	ite	eq
 80002f2:	2102      	moveq	r1, #2
 80002f4:	2101      	movne	r1, #1
 80002f6:	f361 334e 	bfi	r3, r1, #13, #2
 80002fa:	6013      	str	r3, [r2, #0]
 80002fc:	6800      	ldr	r0, [r0, #0]
 80002fe:	f854 1026 	ldr.w	r1, [r4, r6, lsl #2]
 8000302:	9a01      	ldr	r2, [sp, #4]
 8000304:	6803      	ldr	r3, [r0, #0]
 8000306:	f362 1387 	bfi	r3, r2, #6, #2
 800030a:	680a      	ldr	r2, [r1, #0]
 800030c:	6013      	str	r3, [r2, #0]
 800030e:	6808      	ldr	r0, [r1, #0]
 8000310:	6803      	ldr	r3, [r0, #0]
 8000312:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000316:	6003      	str	r3, [r0, #0]
 8000318:	6808      	ldr	r0, [r1, #0]
 800031a:	6801      	ldr	r1, [r0, #0]
 800031c:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8000320:	2800      	cmp	r0, #0
 8000322:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8000326:	6800      	ldr	r0, [r0, #0]
 8000328:	6801      	ldr	r1, [r0, #0]
 800032a:	bf0c      	ite	eq
 800032c:	f021 0108 	biceq.w	r1, r1, #8
 8000330:	f041 0108 	orrne.w	r1, r1, #8
 8000334:	6001      	str	r1, [r0, #0]
 8000336:	b2f0      	uxtb	r0, r6
 8000338:	2168      	movs	r1, #104	@ 0x68
 800033a:	f000 f8d3 	bl	80004e4 <USBPD_PE_Notification>
 800033e:	f89d 0000 	ldrb.w	r0, [sp]
 8000342:	b198      	cbz	r0, 800036c <USBPD_CAD_Process+0xee>
 8000344:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
 8000348:	685f      	ldr	r7, [r3, #4]
 800034a:	9a01      	ldr	r2, [sp, #4]
 800034c:	f89d 1000 	ldrb.w	r1, [sp]
 8000350:	f8d7 c000 	ldr.w	ip, [r7]
 8000354:	b2f0      	uxtb	r0, r6
 8000356:	47e0      	blx	ip
 8000358:	f89d 0000 	ldrb.w	r0, [sp]
 800035c:	2801      	cmp	r0, #1
 800035e:	bf18      	it	ne
 8000360:	2803      	cmpne	r0, #3
 8000362:	d103      	bne.n	800036c <USBPD_CAD_Process+0xee>
 8000364:	2169      	movs	r1, #105	@ 0x69
 8000366:	b2f0      	uxtb	r0, r6
 8000368:	f000 f8bc 	bl	80004e4 <USBPD_PE_Notification>
 800036c:	1c76      	adds	r6, r6, #1
 800036e:	2e02      	cmp	r6, #2
 8000370:	d98e      	bls.n	8000290 <USBPD_CAD_Process+0x12>
 8000372:	4628      	mov	r0, r5
 8000374:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

08000378 <.text_6>:
 8000378:	2000032c 	.word	0x2000032c

0800037c <USBPD_CAD_AssertRd>:
 800037c:	b510      	push	{r4, lr}
 800037e:	4604      	mov	r4, r0
 8000380:	f011 fab8 	bl	80118f4 <USBPDM1_DeAssertRp>
 8000384:	4620      	mov	r0, r4
 8000386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800038a:	f011 babf 	b.w	801190c <USBPDM1_AssertRd>

0800038e <USBPD_CAD_AssertRp>:
 800038e:	b510      	push	{r4, lr}
 8000390:	4604      	mov	r4, r0
 8000392:	f011 fb41 	bl	8011a18 <USBPDM1_DeAssertRd>
 8000396:	4620      	mov	r0, r4
 8000398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800039c:	f011 ba14 	b.w	80117c8 <USBPDM1_AssertRp>

080003a0 <USBPD_CAD_EnterErrorRecovery>:
 80003a0:	f00f bd9c 	b.w	800fedc <CAD_Enter_ErrorRecovery>

080003a4 <USBPD_CAD_SRC_SetRpResistor>:
 80003a4:	b510      	push	{r4, lr}
 80003a6:	f00f fdf5 	bl	800ff94 <CAD_Set_ResistorRp>
 80003aa:	2404      	movs	r4, #4
 80003ac:	b900      	cbnz	r0, 80003b0 <USBPD_CAD_SRC_SetRpResistor+0xc>
 80003ae:	2400      	movs	r4, #0
 80003b0:	4620      	mov	r0, r4
 80003b2:	bd10      	pop	{r4, pc}

080003b4 <USBPD_CAD_SetRpResistor>:
 80003b4:	e7f6      	b.n	80003a4 <USBPD_CAD_SRC_SetRpResistor>

080003b6 <USBPD_CAD_GetMemoryConsumption>:
 80003b6:	2024      	movs	r0, #36	@ 0x24
 80003b8:	4770      	bx	lr
	...

080003bc <USBPD_PE_Init>:
 80003bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80003c0:	461f      	mov	r7, r3
 80003c2:	4605      	mov	r5, r0
 80003c4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80003c6:	460e      	mov	r6, r1
 80003c8:	4690      	mov	r8, r2
 80003ca:	b908      	cbnz	r0, 80003d0 <USBPD_PE_Init+0x14>
 80003cc:	2718      	movs	r7, #24
 80003ce:	e038      	b.n	8000442 <USBPD_PE_Init+0x86>
 80003d0:	2d03      	cmp	r5, #3
 80003d2:	bf28      	it	cs
 80003d4:	2717      	movcs	r7, #23
 80003d6:	d234      	bcs.n	8000442 <USBPD_PE_Init+0x86>
 80003d8:	f44f 7035 	mov.w	r0, #724	@ 0x2d4
 80003dc:	f016 fa5a 	bl	8016894 <malloc>
 80003e0:	0004      	movs	r4, r0
 80003e2:	bf08      	it	eq
 80003e4:	2716      	moveq	r7, #22
 80003e6:	d02c      	beq.n	8000442 <USBPD_PE_Init+0x86>
 80003e8:	f44f 7135 	mov.w	r1, #724	@ 0x2d4
 80003ec:	f016 fdb5 	bl	8016f5a <__aeabi_memclr>
 80003f0:	f8df 0978 	ldr.w	r0, [pc, #2424]	@ 8000d6c <.text_49>
 80003f4:	4629      	mov	r1, r5
 80003f6:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
 80003fa:	6026      	str	r6, [r4, #0]
 80003fc:	f8c4 8004 	str.w	r8, [r4, #4]
 8000400:	7425      	strb	r5, [r4, #16]
 8000402:	60a7      	str	r7, [r4, #8]
 8000404:	f204 23b2 	addw	r3, r4, #690	@ 0x2b2
 8000408:	f104 02a9 	add.w	r2, r4, #169	@ 0xa9
 800040c:	4631      	mov	r1, r6
 800040e:	4628      	mov	r0, r5
 8000410:	f002 fcdf 	bl	8002dd2 <USBPD_PRL_Init>
 8000414:	0007      	movs	r7, r0
 8000416:	d114      	bne.n	8000442 <USBPD_PE_Init+0x86>
 8000418:	6820      	ldr	r0, [r4, #0]
 800041a:	6841      	ldr	r1, [r0, #4]
 800041c:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8000420:	b148      	cbz	r0, 8000436 <USBPD_PE_Init+0x7a>
 8000422:	f000 fa3e 	bl	80008a2 <.text_28>
 8000426:	2201      	movs	r2, #1
 8000428:	7933      	ldrb	r3, [r6, #4]
 800042a:	f003 0303 	and.w	r3, r3, #3
 800042e:	2101      	movs	r1, #1
 8000430:	4628      	mov	r0, r5
 8000432:	f002 fcf9 	bl	8002e28 <USBPD_PRL_SetHeader>
 8000436:	7931      	ldrb	r1, [r6, #4]
 8000438:	f001 0103 	and.w	r1, r1, #3
 800043c:	4628      	mov	r0, r5
 800043e:	f002 fd24 	bl	8002e8a <USBPD_PRL_CBL_SetHeaderSpecification>
 8000442:	4638      	mov	r0, r7
 8000444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000448 <USBPD_PE_TimerCounter>:
 8000448:	f8df 1920 	ldr.w	r1, [pc, #2336]	@ 8000d6c <.text_49>
 800044c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8000450:	8bc1      	ldrh	r1, [r0, #30]
 8000452:	044a      	lsls	r2, r1, #17
 8000454:	d002      	beq.n	800045c <USBPD_PE_TimerCounter+0x14>
 8000456:	8bc1      	ldrh	r1, [r0, #30]
 8000458:	1e4a      	subs	r2, r1, #1
 800045a:	83c2      	strh	r2, [r0, #30]
 800045c:	8c01      	ldrh	r1, [r0, #32]
 800045e:	044a      	lsls	r2, r1, #17
 8000460:	d002      	beq.n	8000468 <USBPD_PE_TimerCounter+0x20>
 8000462:	8c01      	ldrh	r1, [r0, #32]
 8000464:	1e4a      	subs	r2, r1, #1
 8000466:	8402      	strh	r2, [r0, #32]
 8000468:	8c41      	ldrh	r1, [r0, #34]	@ 0x22
 800046a:	044a      	lsls	r2, r1, #17
 800046c:	d002      	beq.n	8000474 <USBPD_PE_TimerCounter+0x2c>
 800046e:	8c41      	ldrh	r1, [r0, #34]	@ 0x22
 8000470:	1e4a      	subs	r2, r1, #1
 8000472:	8442      	strh	r2, [r0, #34]	@ 0x22
 8000474:	4770      	bx	lr

08000476 <USBPD_PE_TimerCounteUpdate>:
 8000476:	b538      	push	{r3, r4, r5, lr}
 8000478:	460c      	mov	r4, r1
 800047a:	f8df 18f0 	ldr.w	r1, [pc, #2288]	@ 8000d6c <.text_49>
 800047e:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
 8000482:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 8000486:	da17      	bge.n	80004b8 <USBPD_PE_TimerCounteUpdate+0x42>
 8000488:	8be8      	ldrh	r0, [r5, #30]
 800048a:	0441      	lsls	r1, r0, #17
 800048c:	d004      	beq.n	8000498 <USBPD_PE_TimerCounteUpdate+0x22>
 800048e:	8be8      	ldrh	r0, [r5, #30]
 8000490:	4621      	mov	r1, r4
 8000492:	f000 fc1c 	bl	8000cce <PE_UpdateTimer>
 8000496:	83e8      	strh	r0, [r5, #30]
 8000498:	8c28      	ldrh	r0, [r5, #32]
 800049a:	0441      	lsls	r1, r0, #17
 800049c:	d004      	beq.n	80004a8 <USBPD_PE_TimerCounteUpdate+0x32>
 800049e:	8c28      	ldrh	r0, [r5, #32]
 80004a0:	4621      	mov	r1, r4
 80004a2:	f000 fc14 	bl	8000cce <PE_UpdateTimer>
 80004a6:	8428      	strh	r0, [r5, #32]
 80004a8:	8c68      	ldrh	r0, [r5, #34]	@ 0x22
 80004aa:	0441      	lsls	r1, r0, #17
 80004ac:	d004      	beq.n	80004b8 <USBPD_PE_TimerCounteUpdate+0x42>
 80004ae:	8c68      	ldrh	r0, [r5, #34]	@ 0x22
 80004b0:	4621      	mov	r1, r4
 80004b2:	f000 fc0c 	bl	8000cce <PE_UpdateTimer>
 80004b6:	8468      	strh	r0, [r5, #34]	@ 0x22
 80004b8:	bd31      	pop	{r0, r4, r5, pc}

080004ba <USBPD_PE_IsCableConnected>:
 80004ba:	f8df 28b0 	ldr.w	r2, [pc, #2224]	@ 8000d6c <.text_49>
 80004be:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80004c2:	6842      	ldr	r2, [r0, #4]
 80004c4:	6813      	ldr	r3, [r2, #0]
 80004c6:	f361 330c 	bfi	r3, r1, #12, #1
 80004ca:	6013      	str	r3, [r2, #0]
 80004cc:	2248      	movs	r2, #72	@ 0x48
 80004ce:	7442      	strb	r2, [r0, #17]
 80004d0:	4770      	bx	lr

080004d2 <USBPD_PE_StateMachine_Reset>:
 80004d2:	f8df 2898 	ldr.w	r2, [pc, #2200]	@ 8000d6c <.text_49>
 80004d6:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80004da:	2148      	movs	r1, #72	@ 0x48
 80004dc:	7441      	strb	r1, [r0, #17]
 80004de:	4770      	bx	lr

080004e0 <USBPD_PE_StateMachine_Stop>:
 80004e0:	f002 bf73 	b.w	80033ca <USBPD_PRL_Stop>

080004e4 <USBPD_PE_Notification>:
 80004e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004e6:	2803      	cmp	r0, #3
 80004e8:	4604      	mov	r4, r0
 80004ea:	460d      	mov	r5, r1
 80004ec:	d214      	bcs.n	8000518 <__iar_annotation$$tailcall+0x2>
 80004ee:	2600      	movs	r6, #0
 80004f0:	9600      	str	r6, [sp, #0]
 80004f2:	2300      	movs	r3, #0
 80004f4:	f8df 7878 	ldr.w	r7, [pc, #2168]	@ 8000d70 <.text_50>
 80004f8:	683e      	ldr	r6, [r7, #0]
 80004fa:	462a      	mov	r2, r5
 80004fc:	4621      	mov	r1, r4
 80004fe:	2009      	movs	r0, #9
 8000500:	47b0      	blx	r6
 8000502:	f8df 2868 	ldr.w	r2, [pc, #2152]	@ 8000d6c <.text_49>
 8000506:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 800050a:	689a      	ldr	r2, [r3, #8]
 800050c:	68d3      	ldr	r3, [r2, #12]
 800050e:	4629      	mov	r1, r5
 8000510:	4620      	mov	r0, r4
 8000512:	e8bd 40f4 	ldmia.w	sp!, {r2, r4, r5, r6, r7, lr}

08000516 <__iar_annotation$$tailcall>:
 8000516:	4718      	bx	r3
 8000518:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

0800051a <USBPD_PE_InitVDM_Callback>:
 800051a:	f8df 2850 	ldr.w	r2, [pc, #2128]	@ 8000d6c <.text_49>
 800051e:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000522:	60c1      	str	r1, [r0, #12]
 8000524:	4770      	bx	lr

08000526 <USBPD_PE_Request_HardReset>:
 8000526:	b580      	push	{r7, lr}
 8000528:	f8df 1840 	ldr.w	r1, [pc, #2112]	@ 8000d6c <.text_49>
 800052c:	4602      	mov	r2, r0
 800052e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8000532:	230f      	movs	r3, #15
 8000534:	f881 302e 	strb.w	r3, [r1, #46]	@ 0x2e
 8000538:	6889      	ldr	r1, [r1, #8]
 800053a:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 800053c:	4790      	blx	r2
 800053e:	2000      	movs	r0, #0
 8000540:	bd02      	pop	{r1, pc}

08000542 <USBPD_PE_Request_CableReset>:
 8000542:	b538      	push	{r3, r4, r5, lr}
 8000544:	f000 fa91 	bl	8000a6a <.text_37>
 8000548:	6853      	ldr	r3, [r2, #4]
 800054a:	681c      	ldr	r4, [r3, #0]
 800054c:	f248 7108 	movw	r1, #34568	@ 0x8708
 8000550:	400c      	ands	r4, r1
 8000552:	f248 3508 	movw	r5, #33544	@ 0x8308
 8000556:	42ac      	cmp	r4, r5
 8000558:	d105      	bne.n	8000566 <USBPD_PE_Request_CableReset+0x24>
 800055a:	6891      	ldr	r1, [r2, #8]
 800055c:	2399      	movs	r3, #153	@ 0x99
 800055e:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
 8000562:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8000564:	4790      	blx	r2
 8000566:	2010      	movs	r0, #16
 8000568:	bd32      	pop	{r1, r4, r5, pc}

0800056a <USBPD_PE_Request_CtrlMessage>:
 800056a:	e92d 41f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, lr}
 800056e:	4680      	mov	r8, r0
 8000570:	460f      	mov	r7, r1
 8000572:	f8df 07f8 	ldr.w	r0, [pc, #2040]	@ 8000d6c <.text_49>
 8000576:	b093      	sub	sp, #76	@ 0x4c
 8000578:	4641      	mov	r1, r8
 800057a:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 800057e:	f8df 17f4 	ldr.w	r1, [pc, #2036]	@ 8000d74 <.text_51>
 8000582:	4614      	mov	r4, r2
 8000584:	4668      	mov	r0, sp
 8000586:	224c      	movs	r2, #76	@ 0x4c
 8000588:	f016 fcf8 	bl	8016f7c <__aeabi_memcpy>
 800058c:	f105 012e 	add.w	r1, r5, #46	@ 0x2e
 8000590:	2600      	movs	r6, #0
 8000592:	7808      	ldrb	r0, [r1, #0]
 8000594:	b920      	cbnz	r0, 80005a0 <USBPD_PE_Request_CtrlMessage+0x36>
 8000596:	6868      	ldr	r0, [r5, #4]
 8000598:	6802      	ldr	r2, [r0, #0]
 800059a:	f3c2 3000 	ubfx	r0, r2, #12, #1
 800059e:	b908      	cbnz	r0, 80005a4 <USBPD_PE_Request_CtrlMessage+0x3a>
 80005a0:	2603      	movs	r6, #3
 80005a2:	e03d      	b.n	8000620 <USBPD_PE_Request_CtrlMessage+0xb6>
 80005a4:	686a      	ldr	r2, [r5, #4]
 80005a6:	6828      	ldr	r0, [r5, #0]
 80005a8:	6813      	ldr	r3, [r2, #0]
 80005aa:	6840      	ldr	r0, [r0, #4]
 80005ac:	f3c3 2202 	ubfx	r2, r3, #8, #3
 80005b0:	686b      	ldr	r3, [r5, #4]
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	f003 0303 	and.w	r3, r3, #3
 80005b8:	08c0      	lsrs	r0, r0, #3
 80005ba:	2a03      	cmp	r2, #3
 80005bc:	bf0c      	ite	eq
 80005be:	2208      	moveq	r2, #8
 80005c0:	2200      	movne	r2, #0
 80005c2:	2b02      	cmp	r3, #2
 80005c4:	f000 0001 	and.w	r0, r0, #1
 80005c8:	bf0c      	ite	eq
 80005ca:	2340      	moveq	r3, #64	@ 0x40
 80005cc:	2300      	movne	r3, #0
 80005ce:	4310      	orrs	r0, r2
 80005d0:	4318      	orrs	r0, r3
 80005d2:	f040 0004 	orr.w	r0, r0, #4
 80005d6:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 80005da:	07c3      	lsls	r3, r0, #31
 80005dc:	bf48      	it	mi
 80005de:	f040 0010 	orrmi.w	r0, r0, #16
 80005e2:	f81d 3002 	ldrb.w	r3, [sp, r2]
 80005e6:	f040 0020 	orr.w	r0, r0, #32
 80005ea:	4018      	ands	r0, r3
 80005ec:	4298      	cmp	r0, r3
 80005ee:	d10a      	bne.n	8000606 <USBPD_PE_Request_CtrlMessage+0x9c>
 80005f0:	2f0b      	cmp	r7, #11
 80005f2:	704e      	strb	r6, [r1, #1]
 80005f4:	d004      	beq.n	8000600 <USBPD_PE_Request_CtrlMessage+0x96>
 80005f6:	2f0d      	cmp	r7, #13
 80005f8:	bf14      	ite	ne
 80005fa:	2f18      	cmpne	r7, #24
 80005fc:	704c      	strbeq	r4, [r1, #1]
 80005fe:	e004      	b.n	800060a <USBPD_PE_Request_CtrlMessage+0xa0>
 8000600:	68ab      	ldr	r3, [r5, #8]
 8000602:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8000604:	b908      	cbnz	r0, 800060a <USBPD_PE_Request_CtrlMessage+0xa0>
 8000606:	2602      	movs	r6, #2
 8000608:	e00a      	b.n	8000620 <USBPD_PE_Request_CtrlMessage+0xb6>
 800060a:	eb0d 0002 	add.w	r0, sp, r2
 800060e:	7843      	ldrb	r3, [r0, #1]
 8000610:	f885 3087 	strb.w	r3, [r5, #135]	@ 0x87
 8000614:	7882      	ldrb	r2, [r0, #2]
 8000616:	700a      	strb	r2, [r1, #0]
 8000618:	4640      	mov	r0, r8
 800061a:	68a9      	ldr	r1, [r5, #8]
 800061c:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 800061e:	4790      	blx	r2
 8000620:	4630      	mov	r0, r6
 8000622:	b014      	add	sp, #80	@ 0x50
 8000624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000628 <USBPD_PE_Request_DataMessage>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f8df 2740 	ldr.w	r2, [pc, #1856]	@ 8000d6c <.text_49>
 800062e:	4603      	mov	r3, r0
 8000630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000634:	f103 052e 	add.w	r5, r3, #46	@ 0x2e
 8000638:	2402      	movs	r4, #2
 800063a:	782a      	ldrb	r2, [r5, #0]
 800063c:	b922      	cbnz	r2, 8000648 <USBPD_PE_Request_DataMessage+0x20>
 800063e:	685a      	ldr	r2, [r3, #4]
 8000640:	6816      	ldr	r6, [r2, #0]
 8000642:	f3c6 3200 	ubfx	r2, r6, #12, #1
 8000646:	b90a      	cbnz	r2, 800064c <USBPD_PE_Request_DataMessage+0x24>
 8000648:	2403      	movs	r4, #3
 800064a:	e012      	b.n	8000672 <USBPD_PE_Request_DataMessage+0x4a>
 800064c:	2200      	movs	r2, #0
 800064e:	1e49      	subs	r1, r1, #1
 8000650:	706a      	strb	r2, [r5, #1]
 8000652:	d003      	beq.n	800065c <USBPD_PE_Request_DataMessage+0x34>
 8000654:	1f49      	subs	r1, r1, #5
 8000656:	2901      	cmp	r1, #1
 8000658:	d90b      	bls.n	8000672 <USBPD_PE_Request_DataMessage+0x4a>
 800065a:	e009      	b.n	8000670 <USBPD_PE_Request_DataMessage+0x48>
 800065c:	2101      	movs	r1, #1
 800065e:	f883 1087 	strb.w	r1, [r3, #135]	@ 0x87
 8000662:	2207      	movs	r2, #7
 8000664:	702a      	strb	r2, [r5, #0]
 8000666:	2400      	movs	r4, #0
 8000668:	6899      	ldr	r1, [r3, #8]
 800066a:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 800066c:	4790      	blx	r2
 800066e:	e000      	b.n	8000672 <USBPD_PE_Request_DataMessage+0x4a>
 8000670:	2410      	movs	r4, #16
 8000672:	4620      	mov	r0, r4
 8000674:	bd70      	pop	{r4, r5, r6, pc}

08000676 <PE_Send_RESET>:
 8000676:	b538      	push	{r3, r4, r5, lr}
 8000678:	4604      	mov	r4, r0
 800067a:	460d      	mov	r5, r1
 800067c:	2d05      	cmp	r5, #5
 800067e:	7c20      	ldrb	r0, [r4, #16]
 8000680:	bf0c      	ite	eq
 8000682:	211f      	moveq	r1, #31
 8000684:	215e      	movne	r1, #94	@ 0x5e
 8000686:	f7ff ff2d 	bl	80004e4 <USBPD_PE_Notification>
 800068a:	7c20      	ldrb	r0, [r4, #16]
 800068c:	4629      	mov	r1, r5
 800068e:	f002 fe42 	bl	8003316 <USBPD_PRL_ResetRequestProcess>
 8000692:	f3ef 8010 	mrs	r0, PRIMASK
 8000696:	b672      	cpsid	i
 8000698:	2100      	movs	r1, #0
 800069a:	f884 1038 	strb.w	r1, [r4, #56]	@ 0x38
 800069e:	f380 8810 	msr	PRIMASK, r0
 80006a2:	bd31      	pop	{r0, r4, r5, pc}

080006a4 <PE_Get_SpecRevision>:
 80006a4:	f8df 16c4 	ldr.w	r1, [pc, #1732]	@ 8000d6c <.text_49>
 80006a8:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80006ac:	6841      	ldr	r1, [r0, #4]
 80006ae:	7808      	ldrb	r0, [r1, #0]
 80006b0:	f000 0003 	and.w	r0, r0, #3
 80006b4:	4770      	bx	lr

080006b6 <PE_Get_RxEvent>:
 80006b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006b8:	2114      	movs	r1, #20
 80006ba:	f3ef 8410 	mrs	r4, PRIMASK
 80006be:	b672      	cpsid	i
 80006c0:	f100 052c 	add.w	r5, r0, #44	@ 0x2c
 80006c4:	7b2a      	ldrb	r2, [r5, #12]
 80006c6:	b33a      	cbz	r2, 8000718 <PE_Get_RxEvent+0x62>
 80006c8:	f100 0374 	add.w	r3, r0, #116	@ 0x74
 80006cc:	5c9e      	ldrb	r6, [r3, r2]
 80006ce:	0677      	lsls	r7, r6, #25
 80006d0:	bf58      	it	pl
 80006d2:	2103      	movpl	r1, #3
 80006d4:	d520      	bpl.n	8000718 <PE_Get_RxEvent+0x62>
 80006d6:	231e      	movs	r3, #30
 80006d8:	435a      	muls	r2, r3
 80006da:	4402      	add	r2, r0
 80006dc:	f102 061b 	add.w	r6, r2, #27
 80006e0:	60ae      	str	r6, [r5, #8]
 80006e2:	7833      	ldrb	r3, [r6, #0]
 80006e4:	7872      	ldrb	r2, [r6, #1]
 80006e6:	eb03 2602 	add.w	r6, r3, r2, lsl #8
 80006ea:	7b2a      	ldrb	r2, [r5, #12]
 80006ec:	80ae      	strh	r6, [r5, #4]
 80006ee:	3074      	adds	r0, #116	@ 0x74
 80006f0:	5c83      	ldrb	r3, [r0, r2]
 80006f2:	f003 031f 	and.w	r3, r3, #31
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d004      	beq.n	8000704 <PE_Get_RxEvent+0x4e>
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d005      	beq.n	800070a <PE_Get_RxEvent+0x54>
 80006fe:	2b04      	cmp	r3, #4
 8000700:	d007      	beq.n	8000712 <PE_Get_RxEvent+0x5c>
 8000702:	e009      	b.n	8000718 <PE_Get_RxEvent+0x62>
 8000704:	2111      	movs	r1, #17
 8000706:	2000      	movs	r0, #0
 8000708:	e005      	b.n	8000716 <PE_Get_RxEvent+0x60>
 800070a:	2201      	movs	r2, #1
 800070c:	2112      	movs	r1, #18
 800070e:	702a      	strb	r2, [r5, #0]
 8000710:	e002      	b.n	8000718 <PE_Get_RxEvent+0x62>
 8000712:	2113      	movs	r1, #19
 8000714:	2002      	movs	r0, #2
 8000716:	7028      	strb	r0, [r5, #0]
 8000718:	f384 8810 	msr	PRIMASK, r4
 800071c:	4608      	mov	r0, r1
 800071e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000720 <PE_Clear_RxEvent>:
 8000720:	b538      	push	{r3, r4, r5, lr}
 8000722:	4601      	mov	r1, r0
 8000724:	f3ef 8210 	mrs	r2, PRIMASK
 8000728:	b672      	cpsid	i
 800072a:	f891 0038 	ldrb.w	r0, [r1, #56]	@ 0x38
 800072e:	b1c0      	cbz	r0, 8000762 <PE_Clear_RxEvent+0x42>
 8000730:	1e40      	subs	r0, r0, #1
 8000732:	b2c0      	uxtb	r0, r0
 8000734:	f101 0475 	add.w	r4, r1, #117	@ 0x75
 8000738:	2300      	movs	r3, #0
 800073a:	5423      	strb	r3, [r4, r0]
 800073c:	1e40      	subs	r0, r0, #1
 800073e:	4180      	sbcs	r0, r0
 8000740:	0fc0      	lsrs	r0, r0, #31
 8000742:	f101 0375 	add.w	r3, r1, #117	@ 0x75
 8000746:	5c1c      	ldrb	r4, [r3, r0]
 8000748:	0665      	lsls	r5, r4, #25
 800074a:	d507      	bpl.n	800075c <PE_Clear_RxEvent+0x3c>
 800074c:	1c40      	adds	r0, r0, #1
 800074e:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8000752:	f382 8810 	msr	PRIMASK, r2
 8000756:	7c08      	ldrb	r0, [r1, #16]
 8000758:	6889      	ldr	r1, [r1, #8]
 800075a:	e075      	b.n	8000848 <.text_25>
 800075c:	2000      	movs	r0, #0
 800075e:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8000762:	f382 8810 	msr	PRIMASK, r2
 8000766:	bd31      	pop	{r0, r4, r5, pc}

08000768 <PE_PRL_Control_RxEvent>:
 8000768:	f8df 1600 	ldr.w	r1, [pc, #1536]	@ 8000d6c <.text_49>
 800076c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8000770:	2000      	movs	r0, #0
 8000772:	f3ef 8210 	mrs	r2, PRIMASK
 8000776:	b672      	cpsid	i
 8000778:	f891 1038 	ldrb.w	r1, [r1, #56]	@ 0x38
 800077c:	b101      	cbz	r1, 8000780 <PE_PRL_Control_RxEvent+0x18>
 800077e:	2001      	movs	r0, #1
 8000780:	f382 8810 	msr	PRIMASK, r2
 8000784:	4770      	bx	lr

08000786 <PE_Convert_SOPRxEvent>:
 8000786:	b118      	cbz	r0, 8000790 <PE_Convert_SOPRxEvent+0xa>
 8000788:	2802      	cmp	r0, #2
 800078a:	d005      	beq.n	8000798 <PE_Convert_SOPRxEvent+0x12>
 800078c:	d302      	bcc.n	8000794 <PE_Convert_SOPRxEvent+0xe>
 800078e:	e005      	b.n	800079c <PE_Convert_SOPRxEvent+0x16>
 8000790:	2011      	movs	r0, #17
 8000792:	4770      	bx	lr
 8000794:	2012      	movs	r0, #18
 8000796:	4770      	bx	lr
 8000798:	2013      	movs	r0, #19
 800079a:	4770      	bx	lr
 800079c:	2014      	movs	r0, #20
 800079e:	4770      	bx	lr

080007a0 <PE_Check_AMSConflict>:
 80007a0:	b510      	push	{r4, lr}
 80007a2:	4604      	mov	r4, r0
 80007a4:	f24f 011f 	movw	r1, #61471	@ 0xf01f
 80007a8:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
 80007aa:	2000      	movs	r0, #0
 80007ac:	400a      	ands	r2, r1
 80007ae:	2a0d      	cmp	r2, #13
 80007b0:	d101      	bne.n	80007b6 <PE_Check_AMSConflict+0x16>
 80007b2:	2010      	movs	r0, #16
 80007b4:	e01a      	b.n	80007ec <PE_Check_AMSConflict+0x4c>
 80007b6:	7f21      	ldrb	r1, [r4, #28]
 80007b8:	b179      	cbz	r1, 80007da <PE_Check_AMSConflict+0x3a>
 80007ba:	1e49      	subs	r1, r1, #1
 80007bc:	2901      	cmp	r1, #1
 80007be:	d912      	bls.n	80007e6 <PE_Check_AMSConflict+0x46>
 80007c0:	1e89      	subs	r1, r1, #2
 80007c2:	d012      	beq.n	80007ea <PE_Check_AMSConflict+0x4a>
 80007c4:	1e49      	subs	r1, r1, #1
 80007c6:	d019      	beq.n	80007fc <PE_Check_AMSConflict+0x5c>
 80007c8:	1e49      	subs	r1, r1, #1
 80007ca:	2909      	cmp	r1, #9
 80007cc:	bf84      	itt	hi
 80007ce:	390b      	subhi	r1, #11
 80007d0:	2901      	cmphi	r1, #1
 80007d2:	d908      	bls.n	80007e6 <PE_Check_AMSConflict+0x46>
 80007d4:	1e89      	subs	r1, r1, #2
 80007d6:	d003      	beq.n	80007e0 <PE_Check_AMSConflict+0x40>
 80007d8:	e00a      	b.n	80007f0 <PE_Check_AMSConflict+0x50>
 80007da:	2303      	movs	r3, #3
 80007dc:	7463      	strb	r3, [r4, #17]
 80007de:	bd10      	pop	{r4, pc}
 80007e0:	210f      	movs	r1, #15
 80007e2:	7461      	strb	r1, [r4, #17]
 80007e4:	bd10      	pop	{r4, pc}
 80007e6:	2011      	movs	r0, #17
 80007e8:	e000      	b.n	80007ec <PE_Check_AMSConflict+0x4c>
 80007ea:	200f      	movs	r0, #15
 80007ec:	7460      	strb	r0, [r4, #17]
 80007ee:	e005      	b.n	80007fc <PE_Check_AMSConflict+0x5c>
 80007f0:	7c20      	ldrb	r0, [r4, #16]
 80007f2:	215c      	movs	r1, #92	@ 0x5c
 80007f4:	f7ff fe76 	bl	80004e4 <USBPD_PE_Notification>
 80007f8:	2103      	movs	r1, #3
 80007fa:	7461      	strb	r1, [r4, #17]
 80007fc:	2015      	movs	r0, #21
 80007fe:	bd10      	pop	{r4, pc}

08000800 <PE_PRL_ResetReceived>:
 8000800:	b538      	push	{r3, r4, r5, lr}
 8000802:	4604      	mov	r4, r0
 8000804:	f8df 0564 	ldr.w	r0, [pc, #1380]	@ 8000d6c <.text_49>
 8000808:	4622      	mov	r2, r4
 800080a:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 800080e:	2905      	cmp	r1, #5
 8000810:	d114      	bne.n	800083c <PE_PRL_ResetReceived+0x3c>
 8000812:	6868      	ldr	r0, [r5, #4]
 8000814:	6801      	ldr	r1, [r0, #0]
 8000816:	f021 0110 	bic.w	r1, r1, #16
 800081a:	6001      	str	r1, [r0, #0]
 800081c:	2001      	movs	r0, #1
 800081e:	6969      	ldr	r1, [r5, #20]
 8000820:	f360 214a 	bfi	r1, r0, #9, #2
 8000824:	f105 002e 	add.w	r0, r5, #46	@ 0x2e
 8000828:	6169      	str	r1, [r5, #20]
 800082a:	2214      	movs	r2, #20
 800082c:	2300      	movs	r3, #0
 800082e:	7002      	strb	r2, [r0, #0]
 8000830:	7283      	strb	r3, [r0, #10]
 8000832:	211e      	movs	r1, #30
 8000834:	7c28      	ldrb	r0, [r5, #16]
 8000836:	f7ff fe55 	bl	80004e4 <USBPD_PE_Notification>
 800083a:	e003      	b.n	8000844 <PE_PRL_ResetReceived+0x44>
 800083c:	6968      	ldr	r0, [r5, #20]
 800083e:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 8000842:	6168      	str	r0, [r5, #20]
 8000844:	4620      	mov	r0, r4
 8000846:	68a9      	ldr	r1, [r5, #8]

08000848 <.text_25>:
 8000848:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 800084a:	e8bd 4032 	ldmia.w	sp!, {r1, r4, r5, lr}

0800084e <__iar_annotation$$tailcall>:
 800084e:	4710      	bx	r2

08000850 <PE_PRL_BistCompleted>:
 8000850:	4770      	bx	lr

08000852 <PE_Reset_HardReset>:
 8000852:	b510      	push	{r4, lr}
 8000854:	4604      	mov	r4, r0
 8000856:	f894 002e 	ldrb.w	r0, [r4, #46]	@ 0x2e
 800085a:	b118      	cbz	r0, 8000864 <PE_Reset_HardReset+0x12>
 800085c:	7c20      	ldrb	r0, [r4, #16]
 800085e:	215b      	movs	r1, #91	@ 0x5b
 8000860:	f7ff fe40 	bl	80004e4 <USBPD_PE_Notification>
 8000864:	4620      	mov	r0, r4
 8000866:	f000 f822 	bl	80008ae <PE_Reset_ZI>
 800086a:	6820      	ldr	r0, [r4, #0]
 800086c:	7903      	ldrb	r3, [r0, #4]
 800086e:	7c20      	ldrb	r0, [r4, #16]
 8000870:	f003 0303 	and.w	r3, r3, #3
 8000874:	2201      	movs	r2, #1
 8000876:	2101      	movs	r1, #1
 8000878:	f002 fad6 	bl	8002e28 <USBPD_PRL_SetHeader>
 800087c:	f000 f811 	bl	80008a2 <.text_28>
 8000880:	0889      	lsrs	r1, r1, #2
 8000882:	6822      	ldr	r2, [r4, #0]
 8000884:	7912      	ldrb	r2, [r2, #4]
 8000886:	f002 0203 	and.w	r2, r2, #3
 800088a:	ea42 0181 	orr.w	r1, r2, r1, lsl #2
 800088e:	6001      	str	r1, [r0, #0]
 8000890:	2101      	movs	r1, #1
 8000892:	7c20      	ldrb	r0, [r4, #16]
 8000894:	f002 fb19 	bl	8002eca <USBPD_PRL_SOPCapability>
 8000898:	7c20      	ldrb	r0, [r4, #16]
 800089a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800089e:	f002 bd76 	b.w	800338e <USBPD_PRL_Reset>

080008a2 <.text_28>:
 80008a2:	6860      	ldr	r0, [r4, #4]
 80008a4:	6801      	ldr	r1, [r0, #0]
 80008a6:	f041 0108 	orr.w	r1, r1, #8
 80008aa:	6001      	str	r1, [r0, #0]
 80008ac:	4770      	bx	lr

080008ae <PE_Reset_ZI>:
 80008ae:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 80008b0:	4604      	mov	r4, r0
 80008b2:	2100      	movs	r1, #0
 80008b4:	6860      	ldr	r0, [r4, #4]
 80008b6:	6802      	ldr	r2, [r0, #0]
 80008b8:	f022 0210 	bic.w	r2, r2, #16
 80008bc:	6002      	str	r2, [r0, #0]
 80008be:	4620      	mov	r0, r4
 80008c0:	f000 fa17 	bl	8000cf2 <PE_SetPowerNegotiation>
 80008c4:	2174      	movs	r1, #116	@ 0x74
 80008c6:	f104 0014 	add.w	r0, r4, #20
 80008ca:	f016 fb46 	bl	8016f5a <__aeabi_memclr>
 80008ce:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 80008d2:	9000      	str	r0, [sp, #0]
 80008d4:	2304      	movs	r3, #4
 80008d6:	68a5      	ldr	r5, [r4, #8]
 80008d8:	7c20      	ldrb	r0, [r4, #16]
 80008da:	69ae      	ldr	r6, [r5, #24]
 80008dc:	466a      	mov	r2, sp
 80008de:	2106      	movs	r1, #6
 80008e0:	47b0      	blx	r6
 80008e2:	6820      	ldr	r0, [r4, #0]
 80008e4:	7901      	ldrb	r1, [r0, #4]
 80008e6:	7c20      	ldrb	r0, [r4, #16]
 80008e8:	f001 0103 	and.w	r1, r1, #3
 80008ec:	f002 facd 	bl	8002e8a <USBPD_PRL_CBL_SetHeaderSpecification>
 80008f0:	6820      	ldr	r0, [r4, #0]
 80008f2:	6861      	ldr	r1, [r4, #4]
 80008f4:	7900      	ldrb	r0, [r0, #4]
 80008f6:	680a      	ldr	r2, [r1, #0]
 80008f8:	f000 0003 	and.w	r0, r0, #3
 80008fc:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8000900:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8000904:	600a      	str	r2, [r1, #0]
 8000906:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08000908 <PE_Reset_Counter>:
 8000908:	2103      	movs	r1, #3
 800090a:	3088      	adds	r0, #136	@ 0x88
 800090c:	f016 bb25 	b.w	8016f5a <__aeabi_memclr>

08000910 <PE_ExtRevisionInteroperability>:
 8000910:	b538      	push	{r3, r4, r5, lr}
 8000912:	f8df 3458 	ldr.w	r3, [pc, #1112]	@ 8000d6c <.text_49>
 8000916:	4602      	mov	r2, r0
 8000918:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800091c:	6865      	ldr	r5, [r4, #4]
 800091e:	682c      	ldr	r4, [r5, #0]
 8000920:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000924:	f004 0503 	and.w	r5, r4, #3
 8000928:	42a9      	cmp	r1, r5
 800092a:	bfa8      	it	ge
 800092c:	4629      	movge	r1, r5
 800092e:	f361 0401 	bfi	r4, r1, #0, #2
 8000932:	6851      	ldr	r1, [r2, #4]
 8000934:	600c      	str	r4, [r1, #0]
 8000936:	6851      	ldr	r1, [r2, #4]
 8000938:	680b      	ldr	r3, [r1, #0]
 800093a:	f003 0403 	and.w	r4, r3, #3
 800093e:	2c01      	cmp	r4, #1
 8000940:	bf0c      	ite	eq
 8000942:	2400      	moveq	r4, #0
 8000944:	2420      	movne	r4, #32
 8000946:	f023 0320 	bic.w	r3, r3, #32
 800094a:	4323      	orrs	r3, r4
 800094c:	600b      	str	r3, [r1, #0]
 800094e:	6852      	ldr	r2, [r2, #4]
 8000950:	7811      	ldrb	r1, [r2, #0]
 8000952:	e8bd 4034 	ldmia.w	sp!, {r2, r4, r5, lr}
 8000956:	f001 0103 	and.w	r1, r1, #3
 800095a:	f002 ba8f 	b.w	8002e7c <USBPD_PRL_SetHeaderSpecification>

0800095e <PE_PRL_FastRoleSwapReception>:
 800095e:	f8df 140c 	ldr.w	r1, [pc, #1036]	@ 8000d6c <.text_49>
 8000962:	4602      	mov	r2, r0
 8000964:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8000968:	7f0a      	ldrb	r2, [r1, #28]
 800096a:	2a09      	cmp	r2, #9
 800096c:	d00b      	beq.n	8000986 <__iar_annotation$$tailcall+0x2>
 800096e:	684a      	ldr	r2, [r1, #4]
 8000970:	6813      	ldr	r3, [r2, #0]
 8000972:	f043 0310 	orr.w	r3, r3, #16
 8000976:	6013      	str	r3, [r2, #0]
 8000978:	694a      	ldr	r2, [r1, #20]
 800097a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800097e:	614a      	str	r2, [r1, #20]
 8000980:	6889      	ldr	r1, [r1, #8]
 8000982:	6a8a      	ldr	r2, [r1, #40]	@ 0x28

08000984 <__iar_annotation$$tailcall>:
 8000984:	4710      	bx	r2
 8000986:	4770      	bx	lr

08000988 <PE_PRL_PostReceiveEvent>:
 8000988:	b570      	push	{r4, r5, r6, lr}
 800098a:	f8df 23e0 	ldr.w	r2, [pc, #992]	@ 8000d6c <.text_49>
 800098e:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8000992:	2000      	movs	r0, #0
 8000994:	2400      	movs	r4, #0
 8000996:	191a      	adds	r2, r3, r4
 8000998:	f892 2075 	ldrb.w	r2, [r2, #117]	@ 0x75
 800099c:	b122      	cbz	r2, 80009a8 <PE_PRL_PostReceiveEvent+0x20>
 800099e:	1c64      	adds	r4, r4, #1
 80009a0:	b2e4      	uxtb	r4, r4
 80009a2:	2c01      	cmp	r4, #1
 80009a4:	d9f7      	bls.n	8000996 <PE_PRL_PostReceiveEvent+0xe>
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	191a      	adds	r2, r3, r4
 80009aa:	2020      	movs	r0, #32
 80009ac:	191d      	adds	r5, r3, r4
 80009ae:	f882 0075 	strb.w	r0, [r2, #117]	@ 0x75
 80009b2:	2001      	movs	r0, #1
 80009b4:	f895 6075 	ldrb.w	r6, [r5, #117]	@ 0x75
 80009b8:	fa00 f101 	lsl.w	r1, r0, r1
 80009bc:	1918      	adds	r0, r3, r4
 80009be:	4331      	orrs	r1, r6
 80009c0:	f880 1075 	strb.w	r1, [r0, #117]	@ 0x75
 80009c4:	2001      	movs	r0, #1
 80009c6:	bd70      	pop	{r4, r5, r6, pc}

080009c8 <PE_PRL_PostReceiveEventError>:
 80009c8:	f8df 13a0 	ldr.w	r1, [pc, #928]	@ 8000d6c <.text_49>
 80009cc:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80009d0:	2100      	movs	r1, #0
 80009d2:	b2ca      	uxtb	r2, r1
 80009d4:	4402      	add	r2, r0
 80009d6:	f892 3075 	ldrb.w	r3, [r2, #117]	@ 0x75
 80009da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80009de:	2b20      	cmp	r3, #32
 80009e0:	d004      	beq.n	80009ec <PE_PRL_PostReceiveEventError+0x24>
 80009e2:	1c49      	adds	r1, r1, #1
 80009e4:	b2ca      	uxtb	r2, r1
 80009e6:	2a02      	cmp	r2, #2
 80009e8:	d3f3      	bcc.n	80009d2 <PE_PRL_PostReceiveEventError+0xa>
 80009ea:	4770      	bx	lr
 80009ec:	2000      	movs	r0, #0
 80009ee:	f882 0075 	strb.w	r0, [r2, #117]	@ 0x75
 80009f2:	4770      	bx	lr

080009f4 <PE_PRL_PostReceiveEventCopy>:
 80009f4:	b510      	push	{r4, lr}
 80009f6:	f8df 2374 	ldr.w	r2, [pc, #884]	@ 8000d6c <.text_49>
 80009fa:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80009fe:	2200      	movs	r2, #0
 8000a00:	b2d3      	uxtb	r3, r2
 8000a02:	18c4      	adds	r4, r0, r3
 8000a04:	f894 4075 	ldrb.w	r4, [r4, #117]	@ 0x75
 8000a08:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 8000a0c:	2c20      	cmp	r4, #32
 8000a0e:	d004      	beq.n	8000a1a <PE_PRL_PostReceiveEventCopy+0x26>
 8000a10:	1c52      	adds	r2, r2, #1
 8000a12:	b2d3      	uxtb	r3, r2
 8000a14:	2b02      	cmp	r3, #2
 8000a16:	d3f3      	bcc.n	8000a00 <PE_PRL_PostReceiveEventCopy+0xc>
 8000a18:	bd10      	pop	{r4, pc}
 8000a1a:	221e      	movs	r2, #30
 8000a1c:	fb12 f303 	smulbb	r3, r2, r3
 8000a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a24:	4403      	add	r3, r0
 8000a26:	f103 0039 	add.w	r0, r3, #57	@ 0x39
 8000a2a:	f016 baa7 	b.w	8016f7c <__aeabi_memcpy>

08000a2e <PE_PRL_PostReceiveEventComplete>:
 8000a2e:	b538      	push	{r3, r4, r5, lr}
 8000a30:	f000 f81b 	bl	8000a6a <.text_37>
 8000a34:	2100      	movs	r1, #0
 8000a36:	1854      	adds	r4, r2, r1
 8000a38:	1c4b      	adds	r3, r1, #1
 8000a3a:	f894 5075 	ldrb.w	r5, [r4, #117]	@ 0x75
 8000a3e:	f005 0560 	and.w	r5, r5, #96	@ 0x60
 8000a42:	2d20      	cmp	r5, #32
 8000a44:	d003      	beq.n	8000a4e <PE_PRL_PostReceiveEventComplete+0x20>
 8000a46:	b2d9      	uxtb	r1, r3
 8000a48:	2902      	cmp	r1, #2
 8000a4a:	d3f4      	bcc.n	8000a36 <PE_PRL_PostReceiveEventComplete+0x8>
 8000a4c:	bd31      	pop	{r0, r4, r5, pc}
 8000a4e:	f894 4075 	ldrb.w	r4, [r4, #117]	@ 0x75
 8000a52:	1855      	adds	r5, r2, r1
 8000a54:	f044 0440 	orr.w	r4, r4, #64	@ 0x40
 8000a58:	f885 4075 	strb.w	r4, [r5, #117]	@ 0x75
 8000a5c:	f892 1038 	ldrb.w	r1, [r2, #56]	@ 0x38
 8000a60:	b909      	cbnz	r1, 8000a66 <PE_PRL_PostReceiveEventComplete+0x38>
 8000a62:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
 8000a66:	6891      	ldr	r1, [r2, #8]
 8000a68:	e6ee      	b.n	8000848 <.text_25>

08000a6a <.text_37>:
 8000a6a:	49c0      	ldr	r1, [pc, #768]	@ (8000d6c <.text_49>)
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000a72:	4770      	bx	lr

08000a74 <PE_SubStateMachine_Generic>:
 8000a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a78:	b08c      	sub	sp, #48	@ 0x30
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	9004      	str	r0, [sp, #16]
 8000a80:	2502      	movs	r5, #2
 8000a82:	7c62      	ldrb	r2, [r4, #17]
 8000a84:	2a01      	cmp	r2, #1
 8000a86:	460e      	mov	r6, r1
 8000a88:	f104 072c 	add.w	r7, r4, #44	@ 0x2c
 8000a8c:	f248 081b 	movw	r8, #32795	@ 0x801b
 8000a90:	f000 80f7 	beq.w	8000c82 <PE_SubStateMachine_Generic+0x20e>
 8000a94:	2a18      	cmp	r2, #24
 8000a96:	d020      	beq.n	8000ada <PE_SubStateMachine_Generic+0x66>
 8000a98:	2a19      	cmp	r2, #25
 8000a9a:	d02b      	beq.n	8000af4 <PE_SubStateMachine_Generic+0x80>
 8000a9c:	2a1d      	cmp	r2, #29
 8000a9e:	d068      	beq.n	8000b72 <PE_SubStateMachine_Generic+0xfe>
 8000aa0:	2a27      	cmp	r2, #39	@ 0x27
 8000aa2:	f000 8084 	beq.w	8000bae <PE_SubStateMachine_Generic+0x13a>
 8000aa6:	2a28      	cmp	r2, #40	@ 0x28
 8000aa8:	f000 808e 	beq.w	8000bc8 <PE_SubStateMachine_Generic+0x154>
 8000aac:	2a29      	cmp	r2, #41	@ 0x29
 8000aae:	f000 8095 	beq.w	8000bdc <PE_SubStateMachine_Generic+0x168>
 8000ab2:	2a4b      	cmp	r2, #75	@ 0x4b
 8000ab4:	f000 809a 	beq.w	8000bec <PE_SubStateMachine_Generic+0x178>
 8000ab8:	2a67      	cmp	r2, #103	@ 0x67
 8000aba:	f000 80aa 	beq.w	8000c12 <PE_SubStateMachine_Generic+0x19e>
 8000abe:	2a68      	cmp	r2, #104	@ 0x68
 8000ac0:	f000 80b6 	beq.w	8000c30 <PE_SubStateMachine_Generic+0x1bc>
 8000ac4:	2a74      	cmp	r2, #116	@ 0x74
 8000ac6:	f000 80e2 	beq.w	8000c8e <PE_SubStateMachine_Generic+0x21a>
 8000aca:	2a99      	cmp	r2, #153	@ 0x99
 8000acc:	f040 80e6 	bne.w	8000c9c <PE_SubStateMachine_Generic+0x228>
 8000ad0:	2106      	movs	r1, #6
 8000ad2:	4620      	mov	r0, r4
 8000ad4:	f7ff fdcf 	bl	8000676 <PE_Send_RESET>
 8000ad8:	e0dc      	b.n	8000c94 <PE_SubStateMachine_Generic+0x220>
 8000ada:	6960      	ldr	r0, [r4, #20]
 8000adc:	0880      	lsrs	r0, r0, #2
 8000ade:	f000 0001 	and.w	r0, r0, #1
 8000ae2:	9000      	str	r0, [sp, #0]
 8000ae4:	2319      	movs	r3, #25
 8000ae6:	2208      	movs	r2, #8
 8000ae8:	f000 f8e9 	bl	8000cbe <.text_41>
 8000aec:	2800      	cmp	r0, #0
 8000aee:	d158      	bne.n	8000ba2 <PE_SubStateMachine_Generic+0x12e>
 8000af0:	2007      	movs	r0, #7
 8000af2:	e098      	b.n	8000c26 <PE_SubStateMachine_Generic+0x1b2>
 8000af4:	7830      	ldrb	r0, [r6, #0]
 8000af6:	2811      	cmp	r0, #17
 8000af8:	d137      	bne.n	8000b6a <PE_SubStateMachine_Generic+0xf6>
 8000afa:	88b9      	ldrh	r1, [r7, #4]
 8000afc:	0bc8      	lsrs	r0, r1, #15
 8000afe:	d11e      	bne.n	8000b3e <PE_SubStateMachine_Generic+0xca>
 8000b00:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8000b04:	b1d8      	cbz	r0, 8000b3e <PE_SubStateMachine_Generic+0xca>
 8000b06:	4608      	mov	r0, r1
 8000b08:	f000 011f 	and.w	r1, r0, #31
 8000b0c:	2904      	cmp	r1, #4
 8000b0e:	d116      	bne.n	8000b3e <PE_SubStateMachine_Generic+0xca>
 8000b10:	68a5      	ldr	r5, [r4, #8]
 8000b12:	f8d5 c018 	ldr.w	ip, [r5, #24]
 8000b16:	f3c0 3302 	ubfx	r3, r0, #12, #3
 8000b1a:	68b8      	ldr	r0, [r7, #8]
 8000b1c:	1c82      	adds	r2, r0, #2
 8000b1e:	7c20      	ldrb	r0, [r4, #16]
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	2105      	movs	r1, #5
 8000b24:	47e0      	blx	ip
 8000b26:	7830      	ldrb	r0, [r6, #0]
 8000b28:	2814      	cmp	r0, #20
 8000b2a:	d001      	beq.n	8000b30 <PE_SubStateMachine_Generic+0xbc>
 8000b2c:	f000 f8cb 	bl	8000cc6 <.text_42>
 8000b30:	2003      	movs	r0, #3
 8000b32:	7460      	strb	r0, [r4, #17]
 8000b34:	2107      	movs	r1, #7
 8000b36:	7c20      	ldrb	r0, [r4, #16]
 8000b38:	f7ff fcd4 	bl	80004e4 <USBPD_PE_Notification>
 8000b3c:	2500      	movs	r5, #0
 8000b3e:	88b8      	ldrh	r0, [r7, #4]
 8000b40:	f410 4f70 	tst.w	r0, #61440	@ 0xf000
 8000b44:	d111      	bne.n	8000b6a <PE_SubStateMachine_Generic+0xf6>
 8000b46:	f000 001f 	and.w	r0, r0, #31
 8000b4a:	2804      	cmp	r0, #4
 8000b4c:	bf18      	it	ne
 8000b4e:	2810      	cmpne	r0, #16
 8000b50:	d10b      	bne.n	8000b6a <PE_SubStateMachine_Generic+0xf6>
 8000b52:	7830      	ldrb	r0, [r6, #0]
 8000b54:	2814      	cmp	r0, #20
 8000b56:	d001      	beq.n	8000b5c <PE_SubStateMachine_Generic+0xe8>
 8000b58:	f000 f8b5 	bl	8000cc6 <.text_42>
 8000b5c:	2003      	movs	r0, #3
 8000b5e:	7460      	strb	r0, [r4, #17]
 8000b60:	2108      	movs	r1, #8
 8000b62:	7c20      	ldrb	r0, [r4, #16]
 8000b64:	f7ff fcbe 	bl	80004e4 <USBPD_PE_Notification>
 8000b68:	2500      	movs	r5, #0
 8000b6a:	f000 f89d 	bl	8000ca8 <.text_39>
 8000b6e:	d118      	bne.n	8000ba2 <PE_SubStateMachine_Generic+0x12e>
 8000b70:	e090      	b.n	8000c94 <PE_SubStateMachine_Generic+0x220>
 8000b72:	9003      	str	r0, [sp, #12]
 8000b74:	ab03      	add	r3, sp, #12
 8000b76:	68a6      	ldr	r6, [r4, #8]
 8000b78:	7c20      	ldrb	r0, [r4, #16]
 8000b7a:	6977      	ldr	r7, [r6, #20]
 8000b7c:	aa05      	add	r2, sp, #20
 8000b7e:	2101      	movs	r1, #1
 8000b80:	47b8      	blx	r7
 8000b82:	9803      	ldr	r0, [sp, #12]
 8000b84:	2104      	movs	r1, #4
 8000b86:	f000 f8e1 	bl	8000d4c <PE_CheckDataSizeFromGetDataInfo>
 8000b8a:	b108      	cbz	r0, 8000b90 <PE_SubStateMachine_Generic+0x11c>
 8000b8c:	2003      	movs	r0, #3
 8000b8e:	e086      	b.n	8000c9e <PE_SubStateMachine_Generic+0x22a>
 8000b90:	9a03      	ldr	r2, [sp, #12]
 8000b92:	f000 f88d 	bl	8000cb0 <.text_40>
 8000b96:	ab05      	add	r3, sp, #20
 8000b98:	2204      	movs	r2, #4
 8000b9a:	4620      	mov	r0, r4
 8000b9c:	f000 f947 	bl	8000e2e <PE_Send_DataMessage>
 8000ba0:	2800      	cmp	r0, #0
 8000ba2:	d17d      	bne.n	8000ca0 <PE_SubStateMachine_Generic+0x22c>
 8000ba4:	7c20      	ldrb	r0, [r4, #16]
 8000ba6:	210a      	movs	r1, #10
 8000ba8:	f7ff fc9c 	bl	80004e4 <USBPD_PE_Notification>
 8000bac:	e078      	b.n	8000ca0 <PE_SubStateMachine_Generic+0x22c>
 8000bae:	2012      	movs	r0, #18
 8000bb0:	7720      	strb	r0, [r4, #28]
 8000bb2:	2105      	movs	r1, #5
 8000bb4:	7c20      	ldrb	r0, [r4, #16]
 8000bb6:	f002 fbdd 	bl	8003374 <USBDPD_PRL_BistCarrierEyeMode>
 8000bba:	2028      	movs	r0, #40	@ 0x28
 8000bbc:	7460      	strb	r0, [r4, #17]
 8000bbe:	f248 012d 	movw	r1, #32813	@ 0x802d
 8000bc2:	83e1      	strh	r1, [r4, #30]
 8000bc4:	252d      	movs	r5, #45	@ 0x2d
 8000bc6:	e06b      	b.n	8000ca0 <PE_SubStateMachine_Generic+0x22c>
 8000bc8:	f000 f86e 	bl	8000ca8 <.text_39>
 8000bcc:	d168      	bne.n	8000ca0 <PE_SubStateMachine_Generic+0x22c>
 8000bce:	7c20      	ldrb	r0, [r4, #16]
 8000bd0:	2105      	movs	r1, #5
 8000bd2:	f002 fbd5 	bl	8003380 <USBDPD_PRL_BistCarrierEyeModeExit>
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	83e0      	strh	r0, [r4, #30]
 8000bda:	e05b      	b.n	8000c94 <PE_SubStateMachine_Generic+0x220>
 8000bdc:	7831      	ldrb	r1, [r6, #0]
 8000bde:	2914      	cmp	r1, #20
 8000be0:	d05e      	beq.n	8000ca0 <PE_SubStateMachine_Generic+0x22c>
 8000be2:	2014      	movs	r0, #20
 8000be4:	7030      	strb	r0, [r6, #0]
 8000be6:	f000 f870 	bl	8000cca <.text_42+0x4>
 8000bea:	e059      	b.n	8000ca0 <PE_SubStateMachine_Generic+0x22c>
 8000bec:	68a6      	ldr	r6, [r4, #8]
 8000bee:	7c20      	ldrb	r0, [r4, #16]
 8000bf0:	6977      	ldr	r7, [r6, #20]
 8000bf2:	ab04      	add	r3, sp, #16
 8000bf4:	aa03      	add	r2, sp, #12
 8000bf6:	2113      	movs	r1, #19
 8000bf8:	47b8      	blx	r7
 8000bfa:	9804      	ldr	r0, [sp, #16]
 8000bfc:	2800      	cmp	r0, #0
 8000bfe:	d04d      	beq.n	8000c9c <PE_SubStateMachine_Generic+0x228>
 8000c00:	9a04      	ldr	r2, [sp, #16]
 8000c02:	f000 f855 	bl	8000cb0 <.text_40>
 8000c06:	ab03      	add	r3, sp, #12
 8000c08:	220c      	movs	r2, #12
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	f000 f90f 	bl	8000e2e <PE_Send_DataMessage>
 8000c10:	e046      	b.n	8000ca0 <PE_SubStateMachine_Generic+0x22c>
 8000c12:	2101      	movs	r1, #1
 8000c14:	9100      	str	r1, [sp, #0]
 8000c16:	2368      	movs	r3, #104	@ 0x68
 8000c18:	7879      	ldrb	r1, [r7, #1]
 8000c1a:	2218      	movs	r2, #24
 8000c1c:	f000 f850 	bl	8000cc0 <.text_41+0x2>
 8000c20:	2800      	cmp	r0, #0
 8000c22:	d13d      	bne.n	8000ca0 <PE_SubStateMachine_Generic+0x22c>
 8000c24:	200f      	movs	r0, #15
 8000c26:	7720      	strb	r0, [r4, #28]
 8000c28:	f8a4 801e 	strh.w	r8, [r4, #30]
 8000c2c:	251b      	movs	r5, #27
 8000c2e:	e037      	b.n	8000ca0 <PE_SubStateMachine_Generic+0x22c>
 8000c30:	7830      	ldrb	r0, [r6, #0]
 8000c32:	2814      	cmp	r0, #20
 8000c34:	d020      	beq.n	8000c78 <PE_SubStateMachine_Generic+0x204>
 8000c36:	7839      	ldrb	r1, [r7, #0]
 8000c38:	7878      	ldrb	r0, [r7, #1]
 8000c3a:	4281      	cmp	r1, r0
 8000c3c:	d11c      	bne.n	8000c78 <PE_SubStateMachine_Generic+0x204>
 8000c3e:	88b9      	ldrh	r1, [r7, #4]
 8000c40:	0bc8      	lsrs	r0, r1, #15
 8000c42:	d119      	bne.n	8000c78 <PE_SubStateMachine_Generic+0x204>
 8000c44:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8000c48:	b1b0      	cbz	r0, 8000c78 <PE_SubStateMachine_Generic+0x204>
 8000c4a:	7938      	ldrb	r0, [r7, #4]
 8000c4c:	f000 001f 	and.w	r0, r0, #31
 8000c50:	280c      	cmp	r0, #12
 8000c52:	d111      	bne.n	8000c78 <PE_SubStateMachine_Generic+0x204>
 8000c54:	68b8      	ldr	r0, [r7, #8]
 8000c56:	68a5      	ldr	r5, [r4, #8]
 8000c58:	69af      	ldr	r7, [r5, #24]
 8000c5a:	1c82      	adds	r2, r0, #2
 8000c5c:	7c20      	ldrb	r0, [r4, #16]
 8000c5e:	2304      	movs	r3, #4
 8000c60:	2113      	movs	r1, #19
 8000c62:	47b8      	blx	r7
 8000c64:	2003      	movs	r0, #3
 8000c66:	7460      	strb	r0, [r4, #17]
 8000c68:	2500      	movs	r5, #0
 8000c6a:	7831      	ldrb	r1, [r6, #0]
 8000c6c:	2914      	cmp	r1, #20
 8000c6e:	d003      	beq.n	8000c78 <PE_SubStateMachine_Generic+0x204>
 8000c70:	2014      	movs	r0, #20
 8000c72:	7030      	strb	r0, [r6, #0]
 8000c74:	f000 f829 	bl	8000cca <.text_42+0x4>
 8000c78:	f000 f816 	bl	8000ca8 <.text_39>
 8000c7c:	d110      	bne.n	8000ca0 <PE_SubStateMachine_Generic+0x22c>
 8000c7e:	2111      	movs	r1, #17
 8000c80:	e009      	b.n	8000c96 <PE_SubStateMachine_Generic+0x222>
 8000c82:	9000      	str	r0, [sp, #0]
 8000c84:	2303      	movs	r3, #3
 8000c86:	2210      	movs	r2, #16
 8000c88:	f000 f819 	bl	8000cbe <.text_41>
 8000c8c:	e008      	b.n	8000ca0 <PE_SubStateMachine_Generic+0x22c>
 8000c8e:	f000 f80b 	bl	8000ca8 <.text_39>
 8000c92:	d105      	bne.n	8000ca0 <PE_SubStateMachine_Generic+0x22c>
 8000c94:	2103      	movs	r1, #3
 8000c96:	7461      	strb	r1, [r4, #17]
 8000c98:	2500      	movs	r5, #0
 8000c9a:	e001      	b.n	8000ca0 <PE_SubStateMachine_Generic+0x22c>
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	7460      	strb	r0, [r4, #17]
 8000ca0:	4628      	mov	r0, r5
 8000ca2:	b00c      	add	sp, #48	@ 0x30
 8000ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000ca8 <.text_39>:
 8000ca8:	8be0      	ldrh	r0, [r4, #30]
 8000caa:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8000cae:	4770      	bx	lr

08000cb0 <.text_40>:
 8000cb0:	2003      	movs	r0, #3
 8000cb2:	0892      	lsrs	r2, r2, #2
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	9001      	str	r0, [sp, #4]
 8000cb8:	9200      	str	r2, [sp, #0]
 8000cba:	9102      	str	r1, [sp, #8]
 8000cbc:	4770      	bx	lr

08000cbe <.text_41>:
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	f000 b887 	b.w	8000dd4 <PE_Send_CtrlMessage>

08000cc6 <.text_42>:
 8000cc6:	2114      	movs	r1, #20
 8000cc8:	7031      	strb	r1, [r6, #0]
 8000cca:	4620      	mov	r0, r4
 8000ccc:	e528      	b.n	8000720 <PE_Clear_RxEvent>

08000cce <PE_UpdateTimer>:
 8000cce:	b510      	push	{r4, lr}
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	f3c2 040e 	ubfx	r4, r2, #0, #15
 8000cd6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000cda:	42a1      	cmp	r1, r4
 8000cdc:	bfb8      	it	lt
 8000cde:	1a50      	sublt	r0, r2, r1
 8000ce0:	b280      	uxth	r0, r0
 8000ce2:	bd10      	pop	{r4, pc}

08000ce4 <PE_CallHardResetCallback>:
 8000ce4:	6883      	ldr	r3, [r0, #8]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	bf1c      	itt	ne
 8000cec:	7c00      	ldrbne	r0, [r0, #16]

08000cee <__iar_annotation$$tailcall>:
 8000cee:	4718      	bxne	r3
 8000cf0:	4770      	bx	lr

08000cf2 <PE_SetPowerNegotiation>:
 8000cf2:	6842      	ldr	r2, [r0, #4]
 8000cf4:	6813      	ldr	r3, [r2, #0]
 8000cf6:	f3c3 2202 	ubfx	r2, r3, #8, #3
 8000cfa:	4291      	cmp	r1, r2
 8000cfc:	d007      	beq.n	8000d0e <PE_SetPowerNegotiation+0x1c>
 8000cfe:	6842      	ldr	r2, [r0, #4]
 8000d00:	f361 230a 	bfi	r3, r1, #8, #3
 8000d04:	6013      	str	r3, [r2, #0]
 8000d06:	215a      	movs	r1, #90	@ 0x5a
 8000d08:	7c00      	ldrb	r0, [r0, #16]
 8000d0a:	f7ff bbeb 	b.w	80004e4 <USBPD_PE_Notification>
 8000d0e:	4770      	bx	lr

08000d10 <PE_CalculateMinTiming>:
 8000d10:	4601      	mov	r1, r0
 8000d12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d16:	8c4a      	ldrh	r2, [r1, #34]	@ 0x22
 8000d18:	0453      	lsls	r3, r2, #17
 8000d1a:	d003      	beq.n	8000d24 <PE_CalculateMinTiming+0x14>
 8000d1c:	8c48      	ldrh	r0, [r1, #34]	@ 0x22
 8000d1e:	8c48      	ldrh	r0, [r1, #34]	@ 0x22
 8000d20:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8000d24:	4770      	bx	lr

08000d26 <PE_SetPowerNegociation>:
 8000d26:	b538      	push	{r3, r4, r5, lr}
 8000d28:	4604      	mov	r4, r0
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	6860      	ldr	r0, [r4, #4]
 8000d2e:	6802      	ldr	r2, [r0, #0]
 8000d30:	f3c2 2002 	ubfx	r0, r2, #8, #3
 8000d34:	4285      	cmp	r5, r0
 8000d36:	d003      	beq.n	8000d40 <PE_SetPowerNegociation+0x1a>
 8000d38:	7c20      	ldrb	r0, [r4, #16]
 8000d3a:	215a      	movs	r1, #90	@ 0x5a
 8000d3c:	f7ff fbd2 	bl	80004e4 <USBPD_PE_Notification>
 8000d40:	6860      	ldr	r0, [r4, #4]
 8000d42:	6801      	ldr	r1, [r0, #0]
 8000d44:	f365 210a 	bfi	r1, r5, #8, #3
 8000d48:	6001      	str	r1, [r0, #0]
 8000d4a:	bd31      	pop	{r0, r4, r5, pc}

08000d4c <PE_CheckDataSizeFromGetDataInfo>:
 8000d4c:	b538      	push	{r3, r4, r5, lr}
 8000d4e:	2200      	movs	r2, #0
 8000d50:	4288      	cmp	r0, r1
 8000d52:	d208      	bcs.n	8000d66 <PE_CheckDataSizeFromGetDataInfo+0x1a>
 8000d54:	2018      	movs	r0, #24
 8000d56:	4c06      	ldr	r4, [pc, #24]	@ (8000d70 <.text_50>)
 8000d58:	a307      	add	r3, pc, #28	@ (adr r3, 8000d78 <.text_52>)
 8000d5a:	6825      	ldr	r5, [r4, #0]
 8000d5c:	9000      	str	r0, [sp, #0]
 8000d5e:	2100      	movs	r1, #0
 8000d60:	2006      	movs	r0, #6
 8000d62:	47a8      	blx	r5
 8000d64:	2202      	movs	r2, #2
 8000d66:	4610      	mov	r0, r2
 8000d68:	bd32      	pop	{r1, r4, r5, pc}
	...

08000d6c <.text_49>:
 8000d6c:	20000338 	.word	0x20000338

08000d70 <.text_50>:
 8000d70:	20000000 	.word	0x20000000

08000d74 <.text_51>:
 8000d74:	08018798 	.word	0x08018798

08000d78 <.text_52>:
 8000d78:	61746144 	.word	0x61746144
 8000d7c:	7a695320 	.word	0x7a695320
 8000d80:	73692065 	.word	0x73692065
 8000d84:	746f6e20 	.word	0x746f6e20
 8000d88:	726f6320 	.word	0x726f6320
 8000d8c:	74636572 	.word	0x74636572
 8000d90:	00          	.byte	0x00
 8000d91:	00          	.byte	0x00
	...

08000d94 <USBPD_PE_SetTrace>:
 8000d94:	0001      	movs	r1, r0
 8000d96:	4906      	ldr	r1, [pc, #24]	@ (8000db0 <.text_5>)
 8000d98:	bf08      	it	eq
 8000d9a:	f20f 0035 	addweq	r0, pc, #53	@ 0x35
 8000d9e:	6008      	str	r0, [r1, #0]
 8000da0:	4770      	bx	lr

08000da2 <USBPD_PE_CheckLIB>:
 8000da2:	4601      	mov	r1, r0
 8000da4:	2000      	movs	r0, #0
 8000da6:	4a03      	ldr	r2, [pc, #12]	@ (8000db4 <.text_6>)
 8000da8:	4291      	cmp	r1, r2
 8000daa:	bf08      	it	eq
 8000dac:	2001      	moveq	r0, #1
 8000dae:	4770      	bx	lr

08000db0 <.text_5>:
 8000db0:	20000000 	.word	0x20000000

08000db4 <.text_6>:
 8000db4:	30410002 	.word	0x30410002

08000db8 <USBPD_PE_GetMemoryConsumption>:
 8000db8:	b510      	push	{r4, lr}
 8000dba:	f002 f833 	bl	8002e24 <USBPD_PRL_GetMemoryConsumption>
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	f7ff faf9 	bl	80003b6 <USBPD_CAD_GetMemoryConsumption>
 8000dc4:	1904      	adds	r4, r0, r4
 8000dc6:	f604 047c 	addw	r4, r4, #2172	@ 0x87c
 8000dca:	4620      	mov	r0, r4
 8000dcc:	bd10      	pop	{r4, pc}
	...

08000dd0 <PE_Trace_Empty>:
 8000dd0:	4770      	bx	lr
	...

08000dd4 <PE_Send_CtrlMessage>:
 8000dd4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 8000dd8:	9c08      	ldr	r4, [sp, #32]
 8000dda:	4606      	mov	r6, r0
 8000ddc:	4688      	mov	r8, r1
 8000dde:	4617      	mov	r7, r2
 8000de0:	461d      	mov	r5, r3
 8000de2:	f000 f81f 	bl	8000e24 <.text_3>
 8000de6:	b190      	cbz	r0, 8000e0e <PE_Send_CtrlMessage+0x3a>
 8000de8:	9401      	str	r4, [sp, #4]
 8000dea:	2002      	movs	r0, #2
 8000dec:	9000      	str	r0, [sp, #0]
 8000dee:	f106 038b 	add.w	r3, r6, #139	@ 0x8b
 8000df2:	7c30      	ldrb	r0, [r6, #16]
 8000df4:	463a      	mov	r2, r7
 8000df6:	4641      	mov	r1, r8
 8000df8:	f002 f86a 	bl	8002ed0 <USBPD_PRL_SendMessage>
 8000dfc:	2803      	cmp	r0, #3
 8000dfe:	d0f0      	beq.n	8000de2 <PE_Send_CtrlMessage+0xe>
 8000e00:	2810      	cmp	r0, #16
 8000e02:	d00d      	beq.n	8000e20 <PE_Send_CtrlMessage+0x4c>
 8000e04:	2f0d      	cmp	r7, #13
 8000e06:	bf0c      	ite	eq
 8000e08:	2201      	moveq	r2, #1
 8000e0a:	2200      	movne	r2, #0
 8000e0c:	e002      	b.n	8000e14 <PE_Send_CtrlMessage+0x40>
 8000e0e:	7470      	strb	r0, [r6, #17]
 8000e10:	2010      	movs	r0, #16
 8000e12:	e005      	b.n	8000e20 <PE_Send_CtrlMessage+0x4c>
 8000e14:	4603      	mov	r3, r0
 8000e16:	9500      	str	r5, [sp, #0]
 8000e18:	4641      	mov	r1, r8
 8000e1a:	4630      	mov	r0, r6
 8000e1c:	f000 fa5d 	bl	80012da <PE_CheckSendMessageStatus>
 8000e20:	e8bd 81f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, pc}

08000e24 <.text_3>:
 8000e24:	6870      	ldr	r0, [r6, #4]
 8000e26:	6801      	ldr	r1, [r0, #0]
 8000e28:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8000e2c:	4770      	bx	lr

08000e2e <PE_Send_DataMessage>:
 8000e2e:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8000e30:	4604      	mov	r4, r0
 8000e32:	9f08      	ldr	r7, [sp, #32]
 8000e34:	460d      	mov	r5, r1
 8000e36:	4616      	mov	r6, r2
 8000e38:	2000      	movs	r0, #0
 8000e3a:	e010      	b.n	8000e5e <PE_Send_DataMessage+0x30>
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 8000e42:	f8d3 c000 	ldr.w	ip, [r3]
 8000e46:	440a      	add	r2, r1
 8000e48:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 8000e4c:	1c49      	adds	r1, r1, #1
 8000e4e:	fa2c fc0e 	lsr.w	ip, ip, lr
 8000e52:	2904      	cmp	r1, #4
 8000e54:	f882 c08d 	strb.w	ip, [r2, #141]	@ 0x8d
 8000e58:	d3f1      	bcc.n	8000e3e <PE_Send_DataMessage+0x10>
 8000e5a:	1d1b      	adds	r3, r3, #4
 8000e5c:	1c40      	adds	r0, r0, #1
 8000e5e:	42b8      	cmp	r0, r7
 8000e60:	d3ec      	bcc.n	8000e3c <PE_Send_DataMessage+0xe>
 8000e62:	6860      	ldr	r0, [r4, #4]
 8000e64:	f7ff ffdf 	bl	8000e26 <.text_3+0x2>
 8000e68:	b1d8      	cbz	r0, 8000ea2 <PE_Send_DataMessage+0x74>
 8000e6a:	f89d 0028 	ldrb.w	r0, [sp, #40]	@ 0x28
 8000e6e:	9001      	str	r0, [sp, #4]
 8000e70:	f104 038b 	add.w	r3, r4, #139	@ 0x8b
 8000e74:	00b8      	lsls	r0, r7, #2
 8000e76:	1c80      	adds	r0, r0, #2
 8000e78:	b280      	uxth	r0, r0
 8000e7a:	9000      	str	r0, [sp, #0]
 8000e7c:	4632      	mov	r2, r6
 8000e7e:	7c20      	ldrb	r0, [r4, #16]
 8000e80:	4629      	mov	r1, r5
 8000e82:	f002 f825 	bl	8002ed0 <USBPD_PRL_SendMessage>
 8000e86:	2803      	cmp	r0, #3
 8000e88:	d0eb      	beq.n	8000e62 <PE_Send_DataMessage+0x34>
 8000e8a:	2810      	cmp	r0, #16
 8000e8c:	d008      	beq.n	8000ea0 <PE_Send_DataMessage+0x72>
 8000e8e:	f89d 1024 	ldrb.w	r1, [sp, #36]	@ 0x24
 8000e92:	9100      	str	r1, [sp, #0]
 8000e94:	4603      	mov	r3, r0
 8000e96:	2200      	movs	r2, #0
 8000e98:	4629      	mov	r1, r5
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	f000 fa1d 	bl	80012da <PE_CheckSendMessageStatus>
 8000ea0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000ea2:	2010      	movs	r0, #16
 8000ea4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08000ea6 <PE_Check_ExtendedMessage>:
 8000ea6:	b510      	push	{r4, lr}
 8000ea8:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8000eaa:	788a      	ldrb	r2, [r1, #2]
 8000eac:	78c9      	ldrb	r1, [r1, #3]
 8000eae:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8000eb2:	f100 0182 	add.w	r1, r0, #130	@ 0x82
 8000eb6:	800a      	strh	r2, [r1, #0]
 8000eb8:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8000ebc:	f003 031f 	and.w	r3, r3, #31
 8000ec0:	708b      	strb	r3, [r1, #2]
 8000ec2:	f3c2 21c3 	ubfx	r1, r2, #11, #4
 8000ec6:	2900      	cmp	r1, #0
 8000ec8:	bf1e      	ittt	ne
 8000eca:	f3c2 2180 	ubfxne	r1, r2, #10, #1
 8000ece:	2900      	cmpne	r1, #0
 8000ed0:	2134      	movne	r1, #52	@ 0x34
 8000ed2:	d12d      	bne.n	8000f30 <PE_Check_ExtendedMessage+0x8a>
 8000ed4:	0411      	lsls	r1, r2, #16
 8000ed6:	0fc9      	lsrs	r1, r1, #31
 8000ed8:	f3c2 0308 	ubfx	r3, r2, #0, #9
 8000edc:	d10d      	bne.n	8000efa <PE_Check_ExtendedMessage+0x54>
 8000ede:	f8a0 32b2 	strh.w	r3, [r0, #690]	@ 0x2b2
 8000ee2:	f8b0 22b2 	ldrh.w	r2, [r0, #690]	@ 0x2b2
 8000ee6:	4291      	cmp	r1, r2
 8000ee8:	d21c      	bcs.n	8000f24 <PE_Check_ExtendedMessage+0x7e>
 8000eea:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8000eec:	440b      	add	r3, r1
 8000eee:	1844      	adds	r4, r0, r1
 8000ef0:	791a      	ldrb	r2, [r3, #4]
 8000ef2:	f884 20a9 	strb.w	r2, [r4, #169]	@ 0xa9
 8000ef6:	1c49      	adds	r1, r1, #1
 8000ef8:	e7f3      	b.n	8000ee2 <PE_Check_ExtendedMessage+0x3c>
 8000efa:	f412 4ff8 	tst.w	r2, #31744	@ 0x7c00
 8000efe:	d106      	bne.n	8000f0e <PE_Check_ExtendedMessage+0x68>
 8000f00:	8e01      	ldrh	r1, [r0, #48]	@ 0x30
 8000f02:	f3c1 3102 	ubfx	r1, r1, #12, #3
 8000f06:	2907      	cmp	r1, #7
 8000f08:	bf28      	it	cs
 8000f0a:	2b1b      	cmpcs	r3, #27
 8000f0c:	d30a      	bcc.n	8000f24 <PE_Check_ExtendedMessage+0x7e>
 8000f0e:	f3c2 2180 	ubfx	r1, r2, #10, #1
 8000f12:	b939      	cbnz	r1, 8000f24 <PE_Check_ExtendedMessage+0x7e>
 8000f14:	f8b0 12b2 	ldrh.w	r1, [r0, #690]	@ 0x2b2
 8000f18:	4299      	cmp	r1, r3
 8000f1a:	d203      	bcs.n	8000f24 <PE_Check_ExtendedMessage+0x7e>
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	83c2      	strh	r2, [r0, #30]
 8000f20:	2137      	movs	r1, #55	@ 0x37
 8000f22:	e005      	b.n	8000f30 <PE_Check_ExtendedMessage+0x8a>
 8000f24:	7f01      	ldrb	r1, [r0, #28]
 8000f26:	b111      	cbz	r1, 8000f2e <PE_Check_ExtendedMessage+0x88>
 8000f28:	2201      	movs	r2, #1
 8000f2a:	7442      	strb	r2, [r0, #17]
 8000f2c:	bd10      	pop	{r4, pc}
 8000f2e:	2101      	movs	r1, #1
 8000f30:	7441      	strb	r1, [r0, #17]
 8000f32:	bd10      	pop	{r4, pc}

08000f34 <PE_Send_ExtendedMessage>:
 8000f34:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 8000f38:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8000f3a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8000f3c:	4606      	mov	r6, r0
 8000f3e:	460f      	mov	r7, r1
 8000f40:	4690      	mov	r8, r2
 8000f42:	4699      	mov	r9, r3
 8000f44:	f7ff ff6e 	bl	8000e24 <.text_3>
 8000f48:	b1b8      	cbz	r0, 8000f7a <PE_Send_ExtendedMessage+0x46>
 8000f4a:	9501      	str	r5, [sp, #4]
 8000f4c:	9400      	str	r4, [sp, #0]
 8000f4e:	464b      	mov	r3, r9
 8000f50:	7c30      	ldrb	r0, [r6, #16]
 8000f52:	f048 0280 	orr.w	r2, r8, #128	@ 0x80
 8000f56:	4639      	mov	r1, r7
 8000f58:	f001 ffba 	bl	8002ed0 <USBPD_PRL_SendMessage>
 8000f5c:	2803      	cmp	r0, #3
 8000f5e:	d0f1      	beq.n	8000f44 <PE_Send_ExtendedMessage+0x10>
 8000f60:	2810      	cmp	r0, #16
 8000f62:	d008      	beq.n	8000f76 <PE_Send_ExtendedMessage+0x42>
 8000f64:	f89d 102c 	ldrb.w	r1, [sp, #44]	@ 0x2c
 8000f68:	9100      	str	r1, [sp, #0]
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	4639      	mov	r1, r7
 8000f70:	4630      	mov	r0, r6
 8000f72:	f000 f9b2 	bl	80012da <PE_CheckSendMessageStatus>
 8000f76:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
 8000f7a:	2011      	movs	r0, #17
 8000f7c:	7470      	strb	r0, [r6, #17]
 8000f7e:	2010      	movs	r0, #16
 8000f80:	e7f9      	b.n	8000f76 <PE_Send_ExtendedMessage+0x42>

08000f82 <PE_SubStateMachine_ExtendedMessages>:
 8000f82:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 8000f86:	2502      	movs	r5, #2
 8000f88:	4604      	mov	r4, r0
 8000f8a:	f104 018f 	add.w	r1, r4, #143	@ 0x8f
 8000f8e:	7c63      	ldrb	r3, [r4, #17]
 8000f90:	2b31      	cmp	r3, #49	@ 0x31
 8000f92:	f204 12ad 	addw	r2, r4, #429	@ 0x1ad
 8000f96:	f104 0682 	add.w	r6, r4, #130	@ 0x82
 8000f9a:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8000f9e:	f104 088b 	add.w	r8, r4, #139	@ 0x8b
 8000fa2:	f204 27b2 	addw	r7, r4, #690	@ 0x2b2
 8000fa6:	f248 001b 	movw	r0, #32795	@ 0x801b
 8000faa:	d010      	beq.n	8000fce <PE_SubStateMachine_ExtendedMessages+0x4c>
 8000fac:	2b33      	cmp	r3, #51	@ 0x33
 8000fae:	d004      	beq.n	8000fba <PE_SubStateMachine_ExtendedMessages+0x38>
 8000fb0:	2b34      	cmp	r3, #52	@ 0x34
 8000fb2:	d039      	beq.n	8001028 <PE_SubStateMachine_ExtendedMessages+0xa6>
 8000fb4:	2b35      	cmp	r3, #53	@ 0x35
 8000fb6:	d064      	beq.n	8001082 <PE_SubStateMachine_ExtendedMessages+0x100>
 8000fb8:	2b36      	cmp	r3, #54	@ 0x36
 8000fba:	d078      	beq.n	80010ae <PE_SubStateMachine_ExtendedMessages+0x12c>
 8000fbc:	2b37      	cmp	r3, #55	@ 0x37
 8000fbe:	d07a      	beq.n	80010b6 <PE_SubStateMachine_ExtendedMessages+0x134>
 8000fc0:	2b38      	cmp	r3, #56	@ 0x38
 8000fc2:	bf01      	itttt	eq
 8000fc4:	2003      	moveq	r0, #3
 8000fc6:	7460      	strbeq	r0, [r4, #17]
 8000fc8:	2500      	moveq	r5, #0
 8000fca:	803d      	strheq	r5, [r7, #0]
 8000fcc:	e0a0      	b.n	8001110 <PE_SubStateMachine_ExtendedMessages+0x18e>
 8000fce:	2300      	movs	r3, #0
 8000fd0:	803b      	strh	r3, [r7, #0]
 8000fd2:	7333      	strb	r3, [r6, #12]
 8000fd4:	72f3      	strb	r3, [r6, #11]
 8000fd6:	8878      	ldrh	r0, [r7, #2]
 8000fd8:	281a      	cmp	r0, #26
 8000fda:	4618      	mov	r0, r3
 8000fdc:	d906      	bls.n	8000fec <PE_SubStateMachine_ExtendedMessages+0x6a>
 8000fde:	f000 f89a 	bl	8001116 <.text_8>
 8000fe2:	281a      	cmp	r0, #26
 8000fe4:	d3fb      	bcc.n	8000fde <PE_SubStateMachine_ExtendedMessages+0x5c>
 8000fe6:	e005      	b.n	8000ff4 <PE_SubStateMachine_ExtendedMessages+0x72>
 8000fe8:	f000 f895 	bl	8001116 <.text_8>
 8000fec:	f8b7 c002 	ldrh.w	ip, [r7, #2]
 8000ff0:	4560      	cmp	r0, ip
 8000ff2:	d3f9      	bcc.n	8000fe8 <PE_SubStateMachine_ExtendedMessages+0x66>
 8000ff4:	6960      	ldr	r0, [r4, #20]
 8000ff6:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8000ffa:	2800      	cmp	r0, #0
 8000ffc:	bf1a      	itte	ne
 8000ffe:	2301      	movne	r3, #1
 8001000:	2033      	movne	r0, #51	@ 0x33
 8001002:	2003      	moveq	r0, #3
 8001004:	9001      	str	r0, [sp, #4]
 8001006:	9302      	str	r3, [sp, #8]
 8001008:	4643      	mov	r3, r8
 800100a:	8878      	ldrh	r0, [r7, #2]
 800100c:	1d00      	adds	r0, r0, #4
 800100e:	b280      	uxth	r0, r0
 8001010:	9000      	str	r0, [sp, #0]
 8001012:	78f2      	ldrb	r2, [r6, #3]
 8001014:	f899 1003 	ldrb.w	r1, [r9, #3]
 8001018:	4620      	mov	r0, r4
 800101a:	f7ff ff8b 	bl	8000f34 <PE_Send_ExtendedMessage>
 800101e:	2800      	cmp	r0, #0
 8001020:	d176      	bne.n	8001110 <PE_SubStateMachine_ExtendedMessages+0x18e>
 8001022:	7970      	ldrb	r0, [r6, #5]
 8001024:	7720      	strb	r0, [r4, #28]
 8001026:	e073      	b.n	8001110 <PE_SubStateMachine_ExtendedMessages+0x18e>
 8001028:	8833      	ldrh	r3, [r6, #0]
 800102a:	887d      	ldrh	r5, [r7, #2]
 800102c:	f3c3 23c3 	ubfx	r3, r3, #11, #4
 8001030:	201a      	movs	r0, #26
 8001032:	4343      	muls	r3, r0
 8001034:	42ab      	cmp	r3, r5
 8001036:	da04      	bge.n	8001042 <PE_SubStateMachine_ExtendedMessages+0xc0>
 8001038:	8830      	ldrh	r0, [r6, #0]
 800103a:	f3c0 20c3 	ubfx	r0, r0, #11, #4
 800103e:	280a      	cmp	r0, #10
 8001040:	d301      	bcc.n	8001046 <PE_SubStateMachine_ExtendedMessages+0xc4>
 8001042:	2003      	movs	r0, #3
 8001044:	e01a      	b.n	800107c <PE_SubStateMachine_ExtendedMessages+0xfa>
 8001046:	1ae8      	subs	r0, r5, r3
 8001048:	281a      	cmp	r0, #26
 800104a:	bf3a      	itte	cc
 800104c:	1aed      	subcc	r5, r5, r3
 800104e:	b2ed      	uxtbcc	r5, r5
 8001050:	251a      	movcs	r5, #26
 8001052:	2000      	movs	r0, #0
 8001054:	e006      	b.n	8001064 <PE_SubStateMachine_ExtendedMessages+0xe2>
 8001056:	eb00 0903 	add.w	r9, r0, r3
 800105a:	f812 9009 	ldrb.w	r9, [r2, r9]
 800105e:	f801 9000 	strb.w	r9, [r1, r0]
 8001062:	1c40      	adds	r0, r0, #1
 8001064:	42a8      	cmp	r0, r5
 8001066:	d3f6      	bcc.n	8001056 <PE_SubStateMachine_ExtendedMessages+0xd4>
 8001068:	8831      	ldrh	r1, [r6, #0]
 800106a:	887a      	ldrh	r2, [r7, #2]
 800106c:	7c20      	ldrb	r0, [r4, #16]
 800106e:	0ac9      	lsrs	r1, r1, #11
 8001070:	4643      	mov	r3, r8
 8001072:	f001 010f 	and.w	r1, r1, #15
 8001076:	f002 fba4 	bl	80037c2 <USBPD_PRL_PrepareExtendedTxChunkSending>
 800107a:	2035      	movs	r0, #53	@ 0x35
 800107c:	7460      	strb	r0, [r4, #17]
 800107e:	2500      	movs	r5, #0
 8001080:	e046      	b.n	8001110 <PE_SubStateMachine_ExtendedMessages+0x18e>
 8001082:	6960      	ldr	r0, [r4, #20]
 8001084:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8001088:	2800      	cmp	r0, #0
 800108a:	bf14      	ite	ne
 800108c:	2036      	movne	r0, #54	@ 0x36
 800108e:	2003      	moveq	r0, #3
 8001090:	2100      	movs	r1, #0
 8001092:	9001      	str	r0, [sp, #4]
 8001094:	9102      	str	r1, [sp, #8]
 8001096:	4643      	mov	r3, r8
 8001098:	8878      	ldrh	r0, [r7, #2]
 800109a:	9000      	str	r0, [sp, #0]
 800109c:	78f2      	ldrb	r2, [r6, #3]
 800109e:	f899 1000 	ldrb.w	r1, [r9]
 80010a2:	4620      	mov	r0, r4
 80010a4:	f7ff ff46 	bl	8000f34 <PE_Send_ExtendedMessage>
 80010a8:	2000      	movs	r0, #0
 80010aa:	8038      	strh	r0, [r7, #0]
 80010ac:	e030      	b.n	8001110 <PE_SubStateMachine_ExtendedMessages+0x18e>
 80010ae:	83e0      	strh	r0, [r4, #30]
 80010b0:	251b      	movs	r5, #27
 80010b2:	2039      	movs	r0, #57	@ 0x39
 80010b4:	e004      	b.n	80010c0 <PE_SubStateMachine_ExtendedMessages+0x13e>
 80010b6:	8be1      	ldrh	r1, [r4, #30]
 80010b8:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 80010bc:	d102      	bne.n	80010c4 <PE_SubStateMachine_ExtendedMessages+0x142>
 80010be:	200f      	movs	r0, #15
 80010c0:	7460      	strb	r0, [r4, #17]
 80010c2:	e025      	b.n	8001110 <PE_SubStateMachine_ExtendedMessages+0x18e>
 80010c4:	83e0      	strh	r0, [r4, #30]
 80010c6:	4641      	mov	r1, r8
 80010c8:	7c20      	ldrb	r0, [r4, #16]
 80010ca:	f002 fba3 	bl	8003814 <USBPD_PRL_PrepareChunkRequest>
 80010ce:	251b      	movs	r5, #27
 80010d0:	6860      	ldr	r0, [r4, #4]
 80010d2:	f7ff fea8 	bl	8000e26 <.text_3+0x2>
 80010d6:	b180      	cbz	r0, 80010fa <PE_SubStateMachine_ExtendedMessages+0x178>
 80010d8:	2000      	movs	r0, #0
 80010da:	2106      	movs	r1, #6
 80010dc:	9001      	str	r0, [sp, #4]
 80010de:	9100      	str	r1, [sp, #0]
 80010e0:	4643      	mov	r3, r8
 80010e2:	78b2      	ldrb	r2, [r6, #2]
 80010e4:	f899 1000 	ldrb.w	r1, [r9]
 80010e8:	7c20      	ldrb	r0, [r4, #16]
 80010ea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80010ee:	f001 feef 	bl	8002ed0 <USBPD_PRL_SendMessage>
 80010f2:	2803      	cmp	r0, #3
 80010f4:	4603      	mov	r3, r0
 80010f6:	d0eb      	beq.n	80010d0 <PE_SubStateMachine_ExtendedMessages+0x14e>
 80010f8:	e002      	b.n	8001100 <PE_SubStateMachine_ExtendedMessages+0x17e>
 80010fa:	2011      	movs	r0, #17
 80010fc:	7460      	strb	r0, [r4, #17]
 80010fe:	2310      	movs	r3, #16
 8001100:	2039      	movs	r0, #57	@ 0x39
 8001102:	9000      	str	r0, [sp, #0]
 8001104:	2200      	movs	r2, #0
 8001106:	f899 1000 	ldrb.w	r1, [r9]
 800110a:	4620      	mov	r0, r4
 800110c:	f000 f8e5 	bl	80012da <PE_CheckSendMessageStatus>
 8001110:	4628      	mov	r0, r5
 8001112:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}

08001116 <.text_8>:
 8001116:	f812 c000 	ldrb.w	ip, [r2, r0]
 800111a:	f801 c000 	strb.w	ip, [r1, r0]
 800111e:	1c40      	adds	r0, r0, #1
 8001120:	4770      	bx	lr

08001122 <PE_ManageRXEvent>:
 8001122:	f100 012c 	add.w	r1, r0, #44	@ 0x2c
 8001126:	780a      	ldrb	r2, [r1, #0]
 8001128:	704a      	strb	r2, [r1, #1]
 800112a:	888a      	ldrh	r2, [r1, #4]
 800112c:	0bd1      	lsrs	r1, r2, #15
 800112e:	bf18      	it	ne
 8001130:	f7ff beb9 	bne.w	8000ea6 <PE_Check_ExtendedMessage>
 8001134:	f412 4f70 	tst.w	r2, #61440	@ 0xf000
 8001138:	bf08      	it	eq
 800113a:	f000 b801 	beq.w	8001140 <PE_Check_ControlMessage>
 800113e:	e056      	b.n	80011ee <PE_Check_DataMessage>

08001140 <PE_Check_ControlMessage>:
 8001140:	b510      	push	{r4, lr}
 8001142:	f000 f8c4 	bl	80012ce <.text_12>
 8001146:	1e40      	subs	r0, r0, #1
 8001148:	2817      	cmp	r0, #23
 800114a:	d844      	bhi.n	80011d6 <PE_Check_ControlMessage+0x96>
 800114c:	e8df f000 	tbb	[pc, r0]
 8001150:	41414e4e 	.word	0x41414e4e
 8001154:	26164114 	.word	0x26164114
 8001158:	411e4343 	.word	0x411e4343
 800115c:	3b43430c 	.word	0x3b43430c
 8001160:	43434343 	.word	0x43434343
 8001164:	37434343 	.word	0x37434343
 8001168:	2203      	movs	r2, #3
 800116a:	7722      	strb	r2, [r4, #28]
 800116c:	2132      	movs	r1, #50	@ 0x32
 800116e:	7c20      	ldrb	r0, [r4, #16]
 8001170:	f7ff f9b8 	bl	80004e4 <USBPD_PE_Notification>
 8001174:	2110      	movs	r1, #16
 8001176:	e038      	b.n	80011ea <PE_Check_ControlMessage+0xaa>
 8001178:	2133      	movs	r1, #51	@ 0x33
 800117a:	e025      	b.n	80011c8 <PE_Check_ControlMessage+0x88>
 800117c:	2006      	movs	r0, #6
 800117e:	7720      	strb	r0, [r4, #28]
 8001180:	210c      	movs	r1, #12
 8001182:	7c20      	ldrb	r0, [r4, #16]
 8001184:	f7ff f9ae 	bl	80004e4 <USBPD_PE_Notification>
 8001188:	204c      	movs	r0, #76	@ 0x4c
 800118a:	e02b      	b.n	80011e4 <PE_Check_ControlMessage+0xa4>
 800118c:	68a1      	ldr	r1, [r4, #8]
 800118e:	6ac8      	ldr	r0, [r1, #44]	@ 0x2c
 8001190:	2800      	cmp	r0, #0
 8001192:	d020      	beq.n	80011d6 <PE_Check_ControlMessage+0x96>
 8001194:	2111      	movs	r1, #17
 8001196:	7721      	strb	r1, [r4, #28]
 8001198:	209d      	movs	r0, #157	@ 0x9d
 800119a:	e023      	b.n	80011e4 <PE_Check_ControlMessage+0xa4>
 800119c:	6860      	ldr	r0, [r4, #4]
 800119e:	6801      	ldr	r1, [r0, #0]
 80011a0:	f3c1 2002 	ubfx	r0, r1, #8, #3
 80011a4:	2803      	cmp	r0, #3
 80011a6:	d116      	bne.n	80011d6 <PE_Check_ControlMessage+0x96>
 80011a8:	6820      	ldr	r0, [r4, #0]
 80011aa:	6841      	ldr	r1, [r0, #4]
 80011ac:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 80011b0:	b188      	cbz	r0, 80011d6 <PE_Check_ControlMessage+0x96>
 80011b2:	211d      	movs	r1, #29
 80011b4:	7461      	strb	r1, [r4, #17]
 80011b6:	2007      	movs	r0, #7
 80011b8:	7720      	strb	r0, [r4, #28]
 80011ba:	2106      	movs	r1, #6
 80011bc:	e004      	b.n	80011c8 <PE_Check_ControlMessage+0x88>
 80011be:	200f      	movs	r0, #15
 80011c0:	7720      	strb	r0, [r4, #28]
 80011c2:	214b      	movs	r1, #75	@ 0x4b
 80011c4:	e011      	b.n	80011ea <PE_Check_ControlMessage+0xaa>
 80011c6:	2159      	movs	r1, #89	@ 0x59
 80011c8:	7c20      	ldrb	r0, [r4, #16]
 80011ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011ce:	f7ff b989 	b.w	80004e4 <USBPD_PE_Notification>
 80011d2:	2011      	movs	r0, #17
 80011d4:	e006      	b.n	80011e4 <PE_Check_ControlMessage+0xa4>
 80011d6:	6860      	ldr	r0, [r4, #4]
 80011d8:	7801      	ldrb	r1, [r0, #0]
 80011da:	f001 0103 	and.w	r1, r1, #3
 80011de:	2902      	cmp	r1, #2
 80011e0:	d102      	bne.n	80011e8 <PE_Check_ControlMessage+0xa8>
 80011e2:	2001      	movs	r0, #1
 80011e4:	7460      	strb	r0, [r4, #17]
 80011e6:	bd10      	pop	{r4, pc}
 80011e8:	212a      	movs	r1, #42	@ 0x2a
 80011ea:	7461      	strb	r1, [r4, #17]
 80011ec:	bd10      	pop	{r4, pc}

080011ee <PE_Check_DataMessage>:
 80011ee:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 80011f0:	f000 f86d 	bl	80012ce <.text_12>
 80011f4:	2801      	cmp	r0, #1
 80011f6:	d069      	beq.n	80012cc <PE_Check_DataMessage+0xde>
 80011f8:	2802      	cmp	r0, #2
 80011fa:	d009      	beq.n	8001210 <PE_Check_DataMessage+0x22>
 80011fc:	2803      	cmp	r0, #3
 80011fe:	d01e      	beq.n	800123e <PE_Check_DataMessage+0x50>
 8001200:	2806      	cmp	r0, #6
 8001202:	bf1c      	itt	ne
 8001204:	2807      	cmpne	r0, #7
 8001206:	280a      	cmpne	r0, #10
 8001208:	d05b      	beq.n	80012c2 <PE_Check_DataMessage+0xd4>
 800120a:	280f      	cmp	r0, #15
 800120c:	d055      	beq.n	80012ba <PE_Check_DataMessage+0xcc>
 800120e:	e05b      	b.n	80012c8 <PE_Check_DataMessage+0xda>
 8001210:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8001212:	7881      	ldrb	r1, [r0, #2]
 8001214:	78c2      	ldrb	r2, [r0, #3]
 8001216:	eb01 2302 	add.w	r3, r1, r2, lsl #8
 800121a:	7901      	ldrb	r1, [r0, #4]
 800121c:	7940      	ldrb	r0, [r0, #5]
 800121e:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8001222:	eb03 6300 	add.w	r3, r3, r0, lsl #24
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2304      	movs	r3, #4
 800122a:	68a5      	ldr	r5, [r4, #8]
 800122c:	7c20      	ldrb	r0, [r4, #16]
 800122e:	69ae      	ldr	r6, [r5, #24]
 8001230:	466a      	mov	r2, sp
 8001232:	2106      	movs	r1, #6
 8001234:	47b0      	blx	r6
 8001236:	2001      	movs	r0, #1
 8001238:	7720      	strb	r0, [r4, #28]
 800123a:	2109      	movs	r1, #9
 800123c:	e045      	b.n	80012ca <PE_Check_DataMessage+0xdc>
 800123e:	2200      	movs	r2, #0
 8001240:	9201      	str	r2, [sp, #4]
 8001242:	9200      	str	r2, [sp, #0]
 8001244:	466b      	mov	r3, sp
 8001246:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8001248:	7881      	ldrb	r1, [r0, #2]
 800124a:	78c2      	ldrb	r2, [r0, #3]
 800124c:	68a6      	ldr	r6, [r4, #8]
 800124e:	6977      	ldr	r7, [r6, #20]
 8001250:	eb01 2502 	add.w	r5, r1, r2, lsl #8
 8001254:	7901      	ldrb	r1, [r0, #4]
 8001256:	7940      	ldrb	r0, [r0, #5]
 8001258:	eb05 4501 	add.w	r5, r5, r1, lsl #16
 800125c:	eb05 6500 	add.w	r5, r5, r0, lsl #24
 8001260:	7c20      	ldrb	r0, [r4, #16]
 8001262:	aa01      	add	r2, sp, #4
 8001264:	2103      	movs	r1, #3
 8001266:	47b8      	blx	r7
 8001268:	9800      	ldr	r0, [sp, #0]
 800126a:	2104      	movs	r1, #4
 800126c:	f7ff fd6e 	bl	8000d4c <PE_CheckDataSizeFromGetDataInfo>
 8001270:	2800      	cmp	r0, #0
 8001272:	bf01      	itttt	eq
 8001274:	6860      	ldreq	r0, [r4, #4]
 8001276:	6801      	ldreq	r1, [r0, #0]
 8001278:	f3c1 2002 	ubfxeq	r0, r1, #8, #3
 800127c:	2803      	cmpeq	r0, #3
 800127e:	d11a      	bne.n	80012b6 <PE_Check_DataMessage+0xc8>
 8001280:	9801      	ldr	r0, [sp, #4]
 8001282:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001286:	4288      	cmp	r0, r1
 8001288:	d115      	bne.n	80012b6 <PE_Check_DataMessage+0xc8>
 800128a:	0f2d      	lsrs	r5, r5, #28
 800128c:	2d05      	cmp	r5, #5
 800128e:	d010      	beq.n	80012b2 <PE_Check_DataMessage+0xc4>
 8001290:	2d08      	cmp	r5, #8
 8001292:	d00c      	beq.n	80012ae <PE_Check_DataMessage+0xc0>
 8001294:	2d09      	cmp	r5, #9
 8001296:	d004      	beq.n	80012a2 <PE_Check_DataMessage+0xb4>
 8001298:	2d0a      	cmp	r5, #10
 800129a:	d117      	bne.n	80012cc <PE_Check_DataMessage+0xde>
 800129c:	7c20      	ldrb	r0, [r4, #16]
 800129e:	2166      	movs	r1, #102	@ 0x66
 80012a0:	e001      	b.n	80012a6 <PE_Check_DataMessage+0xb8>
 80012a2:	7c20      	ldrb	r0, [r4, #16]
 80012a4:	2165      	movs	r1, #101	@ 0x65
 80012a6:	f7ff f91d 	bl	80004e4 <USBPD_PE_Notification>
 80012aa:	2003      	movs	r0, #3
 80012ac:	e00a      	b.n	80012c4 <PE_Check_DataMessage+0xd6>
 80012ae:	2129      	movs	r1, #41	@ 0x29
 80012b0:	e00b      	b.n	80012ca <PE_Check_DataMessage+0xdc>
 80012b2:	2027      	movs	r0, #39	@ 0x27
 80012b4:	e006      	b.n	80012c4 <PE_Check_DataMessage+0xd6>
 80012b6:	2103      	movs	r1, #3
 80012b8:	e007      	b.n	80012ca <PE_Check_DataMessage+0xdc>
 80012ba:	4620      	mov	r0, r4
 80012bc:	f001 fc54 	bl	8002b68 <PE_Check_DataMessageVDM>
 80012c0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80012c2:	2001      	movs	r0, #1
 80012c4:	7460      	strb	r0, [r4, #17]
 80012c6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80012c8:	2111      	movs	r1, #17
 80012ca:	7461      	strb	r1, [r4, #17]
 80012cc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

080012ce <.text_12>:
 80012ce:	4604      	mov	r4, r0
 80012d0:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 80012d4:	f000 001f 	and.w	r0, r0, #31
 80012d8:	4770      	bx	lr

080012da <PE_CheckSendMessageStatus>:
 80012da:	b510      	push	{r4, lr}
 80012dc:	2410      	movs	r4, #16
 80012de:	2b05      	cmp	r3, #5
 80012e0:	d007      	beq.n	80012f2 <PE_CheckSendMessageStatus+0x18>
 80012e2:	2b06      	cmp	r3, #6
 80012e4:	d00c      	beq.n	8001300 <PE_CheckSendMessageStatus+0x26>
 80012e6:	2b07      	cmp	r3, #7
 80012e8:	d00f      	beq.n	800130a <PE_CheckSendMessageStatus+0x30>
 80012ea:	2b09      	cmp	r3, #9
 80012ec:	bf08      	it	eq
 80012ee:	2409      	moveq	r4, #9
 80012f0:	e027      	b.n	8001342 <PE_CheckSendMessageStatus+0x68>
 80012f2:	9902      	ldr	r1, [sp, #8]
 80012f4:	7441      	strb	r1, [r0, #17]
 80012f6:	2400      	movs	r4, #0
 80012f8:	6941      	ldr	r1, [r0, #20]
 80012fa:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 80012fe:	e002      	b.n	8001306 <PE_CheckSendMessageStatus+0x2c>
 8001300:	6941      	ldr	r1, [r0, #20]
 8001302:	f441 5100 	orr.w	r1, r1, #8192	@ 0x2000
 8001306:	6141      	str	r1, [r0, #20]
 8001308:	e01b      	b.n	8001342 <PE_CheckSendMessageStatus+0x68>
 800130a:	b129      	cbz	r1, 8001318 <PE_CheckSendMessageStatus+0x3e>
 800130c:	2a01      	cmp	r2, #1
 800130e:	bf08      	it	eq
 8001310:	2199      	moveq	r1, #153	@ 0x99
 8001312:	d015      	beq.n	8001340 <PE_CheckSendMessageStatus+0x66>
 8001314:	2407      	movs	r4, #7
 8001316:	e014      	b.n	8001342 <PE_CheckSendMessageStatus+0x68>
 8001318:	6841      	ldr	r1, [r0, #4]
 800131a:	680b      	ldr	r3, [r1, #0]
 800131c:	f3c3 2102 	ubfx	r1, r3, #8, #3
 8001320:	2904      	cmp	r1, #4
 8001322:	d003      	beq.n	800132c <PE_CheckSendMessageStatus+0x52>
 8001324:	2a01      	cmp	r2, #1
 8001326:	d10a      	bne.n	800133e <PE_CheckSendMessageStatus+0x64>
 8001328:	210f      	movs	r1, #15
 800132a:	e009      	b.n	8001340 <PE_CheckSendMessageStatus+0x66>
 800132c:	2a00      	cmp	r2, #0
 800132e:	d1fb      	bne.n	8001328 <PE_CheckSendMessageStatus+0x4e>
 8001330:	6882      	ldr	r2, [r0, #8]
 8001332:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8001334:	2900      	cmp	r1, #0
 8001336:	d0f7      	beq.n	8001328 <PE_CheckSendMessageStatus+0x4e>
 8001338:	2292      	movs	r2, #146	@ 0x92
 800133a:	7442      	strb	r2, [r0, #17]
 800133c:	e001      	b.n	8001342 <PE_CheckSendMessageStatus+0x68>
 800133e:	2111      	movs	r1, #17
 8001340:	7441      	strb	r1, [r0, #17]
 8001342:	4620      	mov	r0, r4
 8001344:	bd10      	pop	{r4, pc}
	...

08001348 <USBPD_PE_StateMachine_SRC>:
 8001348:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800134c:	4680      	mov	r8, r0
 800134e:	f8df 094c 	ldr.w	r0, [pc, #2380]	@ 8001c9c <.text_3>
 8001352:	f8df 994c 	ldr.w	r9, [pc, #2380]	@ 8001ca0 <.text_4>
 8001356:	4641      	mov	r1, r8
 8001358:	f850 6021 	ldr.w	r6, [r0, r1, lsl #2]
 800135c:	7c70      	ldrb	r0, [r6, #17]
 800135e:	2848      	cmp	r0, #72	@ 0x48
 8001360:	d12b      	bne.n	80013ba <USBPD_PE_StateMachine_SRC+0x72>
 8001362:	4630      	mov	r0, r6
 8001364:	f7ff faa3 	bl	80008ae <PE_Reset_ZI>
 8001368:	4630      	mov	r0, r6
 800136a:	f7ff facd 	bl	8000908 <PE_Reset_Counter>
 800136e:	6830      	ldr	r0, [r6, #0]
 8001370:	7903      	ldrb	r3, [r0, #4]
 8001372:	7c30      	ldrb	r0, [r6, #16]
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	2201      	movs	r2, #1
 800137a:	2101      	movs	r1, #1
 800137c:	f001 fd54 	bl	8002e28 <USBPD_PRL_SetHeader>
 8001380:	6870      	ldr	r0, [r6, #4]
 8001382:	6801      	ldr	r1, [r0, #0]
 8001384:	f041 0108 	orr.w	r1, r1, #8
 8001388:	6001      	str	r1, [r0, #0]
 800138a:	6830      	ldr	r0, [r6, #0]
 800138c:	6841      	ldr	r1, [r0, #4]
 800138e:	6870      	ldr	r0, [r6, #4]
 8001390:	6802      	ldr	r2, [r0, #0]
 8001392:	f361 0201 	bfi	r2, r1, #0, #2
 8001396:	6002      	str	r2, [r0, #0]
 8001398:	2101      	movs	r1, #1
 800139a:	7c30      	ldrb	r0, [r6, #16]
 800139c:	f001 fd95 	bl	8002eca <USBPD_PRL_SOPCapability>
 80013a0:	7c30      	ldrb	r0, [r6, #16]
 80013a2:	f001 fff4 	bl	800338e <USBPD_PRL_Reset>
 80013a6:	7cb1      	ldrb	r1, [r6, #18]
 80013a8:	2002      	movs	r0, #2
 80013aa:	2902      	cmp	r1, #2
 80013ac:	7470      	strb	r0, [r6, #17]
 80013ae:	d004      	beq.n	80013ba <USBPD_PE_StateMachine_SRC+0x72>
 80013b0:	f000 fc86 	bl	8001cc0 <.text_7>
 80013b4:	2202      	movs	r2, #2
 80013b6:	2004      	movs	r0, #4
 80013b8:	47a0      	blx	r4
 80013ba:	6970      	ldr	r0, [r6, #20]
 80013bc:	f3c0 4080 	ubfx	r0, r0, #18, #1
 80013c0:	b130      	cbz	r0, 80013d0 <USBPD_PE_StateMachine_SRC+0x88>
 80013c2:	6970      	ldr	r0, [r6, #20]
 80013c4:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
 80013c8:	6170      	str	r0, [r6, #20]
 80013ca:	2164      	movs	r1, #100	@ 0x64
 80013cc:	f000 fc8c 	bl	8001ce8 <.text_10>
 80013d0:	4630      	mov	r0, r6
 80013d2:	f7ff f970 	bl	80006b6 <PE_Get_RxEvent>
 80013d6:	2803      	cmp	r0, #3
 80013d8:	f88d 0004 	strb.w	r0, [sp, #4]
 80013dc:	f248 0b1b 	movw	fp, #32795	@ 0x801b
 80013e0:	d103      	bne.n	80013ea <USBPD_PE_StateMachine_SRC+0xa2>
 80013e2:	2401      	movs	r4, #1
 80013e4:	4620      	mov	r0, r4
 80013e6:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013ea:	6870      	ldr	r0, [r6, #4]
 80013ec:	6801      	ldr	r1, [r0, #0]
 80013ee:	f3c1 3000 	ubfx	r0, r1, #12, #1
 80013f2:	2800      	cmp	r0, #0
 80013f4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80013f8:	f000 80dd 	beq.w	80015b6 <USBPD_PE_StateMachine_SRC+0x26e>
 80013fc:	f106 052c 	add.w	r5, r6, #44	@ 0x2c
 8001400:	2402      	movs	r4, #2
 8001402:	78a8      	ldrb	r0, [r5, #2]
 8001404:	280f      	cmp	r0, #15
 8001406:	bf18      	it	ne
 8001408:	2814      	cmpne	r0, #20
 800140a:	d111      	bne.n	8001430 <USBPD_PE_StateMachine_SRC+0xe8>
 800140c:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8001410:	2814      	cmp	r0, #20
 8001412:	d001      	beq.n	8001418 <USBPD_PE_StateMachine_SRC+0xd0>
 8001414:	f000 fc72 	bl	8001cfc <.text_13>
 8001418:	78aa      	ldrb	r2, [r5, #2]
 800141a:	7472      	strb	r2, [r6, #17]
 800141c:	2000      	movs	r0, #0
 800141e:	70a8      	strb	r0, [r5, #2]
 8001420:	2100      	movs	r1, #0
 8001422:	7cb0      	ldrb	r0, [r6, #18]
 8001424:	62b1      	str	r1, [r6, #40]	@ 0x28
 8001426:	4290      	cmp	r0, r2
 8001428:	d002      	beq.n	8001430 <USBPD_PE_StateMachine_SRC+0xe8>
 800142a:	74b2      	strb	r2, [r6, #18]
 800142c:	f000 fc41 	bl	8001cb2 <.text_6>
 8001430:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8001434:	2811      	cmp	r0, #17
 8001436:	d11c      	bne.n	8001472 <USBPD_PE_StateMachine_SRC+0x12a>
 8001438:	6870      	ldr	r0, [r6, #4]
 800143a:	6801      	ldr	r1, [r0, #0]
 800143c:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8001440:	88a9      	ldrh	r1, [r5, #4]
 8001442:	f3c1 1140 	ubfx	r1, r1, #5, #1
 8001446:	4288      	cmp	r0, r1
 8001448:	d113      	bne.n	8001472 <USBPD_PE_StateMachine_SRC+0x12a>
 800144a:	2014      	movs	r0, #20
 800144c:	f88d 0004 	strb.w	r0, [sp, #4]
 8001450:	f000 fc57 	bl	8001d02 <.text_13+0x6>
 8001454:	7cb1      	ldrb	r1, [r6, #18]
 8001456:	2092      	movs	r0, #146	@ 0x92
 8001458:	2992      	cmp	r1, #146	@ 0x92
 800145a:	7470      	strb	r0, [r6, #17]
 800145c:	d073      	beq.n	8001546 <USBPD_PE_StateMachine_SRC+0x1fe>
 800145e:	74b0      	strb	r0, [r6, #18]
 8001460:	2100      	movs	r1, #0
 8001462:	9100      	str	r1, [sp, #0]
 8001464:	2300      	movs	r3, #0
 8001466:	7c31      	ldrb	r1, [r6, #16]
 8001468:	f8d9 c000 	ldr.w	ip, [r9]
 800146c:	2292      	movs	r2, #146	@ 0x92
 800146e:	2004      	movs	r0, #4
 8001470:	47e0      	blx	ip
 8001472:	7c70      	ldrb	r0, [r6, #17]
 8001474:	0001      	movs	r1, r0
 8001476:	f106 0786 	add.w	r7, r6, #134	@ 0x86
 800147a:	f000 809e 	beq.w	80015ba <USBPD_PE_StateMachine_SRC+0x272>
 800147e:	1e41      	subs	r1, r0, #1
 8001480:	d05c      	beq.n	800153c <USBPD_PE_StateMachine_SRC+0x1f4>
 8001482:	1e49      	subs	r1, r1, #1
 8001484:	f000 80ac 	beq.w	80015e0 <USBPD_PE_StateMachine_SRC+0x298>
 8001488:	1e49      	subs	r1, r1, #1
 800148a:	2901      	cmp	r1, #1
 800148c:	f240 832c 	bls.w	8001ae8 <USBPD_PE_StateMachine_SRC+0x7a0>
 8001490:	1e89      	subs	r1, r1, #2
 8001492:	d062      	beq.n	800155a <USBPD_PE_StateMachine_SRC+0x212>
 8001494:	1e49      	subs	r1, r1, #1
 8001496:	f000 80ed 	beq.w	8001674 <USBPD_PE_StateMachine_SRC+0x32c>
 800149a:	1e49      	subs	r1, r1, #1
 800149c:	f000 80f2 	beq.w	8001684 <USBPD_PE_StateMachine_SRC+0x33c>
 80014a0:	1e49      	subs	r1, r1, #1
 80014a2:	f000 8145 	beq.w	8001730 <USBPD_PE_StateMachine_SRC+0x3e8>
 80014a6:	1e49      	subs	r1, r1, #1
 80014a8:	f000 8191 	beq.w	80017ce <USBPD_PE_StateMachine_SRC+0x486>
 80014ac:	1ec9      	subs	r1, r1, #3
 80014ae:	f000 81c5 	beq.w	800183c <USBPD_PE_StateMachine_SRC+0x4f4>
 80014b2:	1e49      	subs	r1, r1, #1
 80014b4:	f000 81d2 	beq.w	800185c <USBPD_PE_StateMachine_SRC+0x514>
 80014b8:	1e49      	subs	r1, r1, #1
 80014ba:	f000 8083 	beq.w	80015c4 <USBPD_PE_StateMachine_SRC+0x27c>
 80014be:	1e49      	subs	r1, r1, #1
 80014c0:	f000 8237 	beq.w	8001932 <USBPD_PE_StateMachine_SRC+0x5ea>
 80014c4:	1e49      	subs	r1, r1, #1
 80014c6:	f000 81fb 	beq.w	80018c0 <USBPD_PE_StateMachine_SRC+0x578>
 80014ca:	1e49      	subs	r1, r1, #1
 80014cc:	f000 81fd 	beq.w	80018ca <USBPD_PE_StateMachine_SRC+0x582>
 80014d0:	1e49      	subs	r1, r1, #1
 80014d2:	f000 8208 	beq.w	80018e6 <USBPD_PE_StateMachine_SRC+0x59e>
 80014d6:	1e49      	subs	r1, r1, #1
 80014d8:	f000 8294 	beq.w	8001a04 <USBPD_PE_StateMachine_SRC+0x6bc>
 80014dc:	1e49      	subs	r1, r1, #1
 80014de:	f000 824e 	beq.w	800197e <USBPD_PE_StateMachine_SRC+0x636>
 80014e2:	1e49      	subs	r1, r1, #1
 80014e4:	f000 8255 	beq.w	8001992 <USBPD_PE_StateMachine_SRC+0x64a>
 80014e8:	1e49      	subs	r1, r1, #1
 80014ea:	f000 8139 	beq.w	8001760 <USBPD_PE_StateMachine_SRC+0x418>
 80014ee:	1e49      	subs	r1, r1, #1
 80014f0:	f000 826c 	beq.w	80019cc <USBPD_PE_StateMachine_SRC+0x684>
 80014f4:	1e49      	subs	r1, r1, #1
 80014f6:	2901      	cmp	r1, #1
 80014f8:	d920      	bls.n	800153c <USBPD_PE_StateMachine_SRC+0x1f4>
 80014fa:	1e89      	subs	r1, r1, #2
 80014fc:	f000 82a9 	beq.w	8001a52 <USBPD_PE_StateMachine_SRC+0x70a>
 8001500:	1e49      	subs	r1, r1, #1
 8001502:	f000 82b5 	beq.w	8001a70 <USBPD_PE_StateMachine_SRC+0x728>
 8001506:	1e89      	subs	r1, r1, #2
 8001508:	d018      	beq.n	800153c <USBPD_PE_StateMachine_SRC+0x1f4>
 800150a:	390a      	subs	r1, #10
 800150c:	2902      	cmp	r1, #2
 800150e:	d915      	bls.n	800153c <USBPD_PE_StateMachine_SRC+0x1f4>
 8001510:	1ec9      	subs	r1, r1, #3
 8001512:	f000 8299 	beq.w	8001a48 <USBPD_PE_StateMachine_SRC+0x700>
 8001516:	1f09      	subs	r1, r1, #4
 8001518:	f000 8352 	beq.w	8001bc0 <USBPD_PE_StateMachine_SRC+0x878>
 800151c:	1ec9      	subs	r1, r1, #3
 800151e:	d001      	beq.n	8001524 <USBPD_PE_StateMachine_SRC+0x1dc>
 8001520:	1e89      	subs	r1, r1, #2
 8001522:	2905      	cmp	r1, #5
 8001524:	f240 8381 	bls.w	8001c2a <USBPD_PE_StateMachine_SRC+0x8e2>
 8001528:	1f89      	subs	r1, r1, #6
 800152a:	f000 8359 	beq.w	8001be0 <USBPD_PE_StateMachine_SRC+0x898>
 800152e:	3912      	subs	r1, #18
 8001530:	d004      	beq.n	800153c <USBPD_PE_StateMachine_SRC+0x1f4>
 8001532:	1e49      	subs	r1, r1, #1
 8001534:	f000 80ea 	beq.w	800170c <USBPD_PE_StateMachine_SRC+0x3c4>
 8001538:	391b      	subs	r1, #27
 800153a:	2901      	cmp	r1, #1
 800153c:	f240 8379 	bls.w	8001c32 <USBPD_PE_StateMachine_SRC+0x8ea>
 8001540:	390d      	subs	r1, #13
 8001542:	d0fb      	beq.n	800153c <USBPD_PE_StateMachine_SRC+0x1f4>
 8001544:	391e      	subs	r1, #30
 8001546:	d03f      	beq.n	80015c8 <USBPD_PE_StateMachine_SRC+0x280>
 8001548:	1f09      	subs	r1, r1, #4
 800154a:	f000 8193 	beq.w	8001874 <USBPD_PE_StateMachine_SRC+0x52c>
 800154e:	1e49      	subs	r1, r1, #1
 8001550:	f000 81a3 	beq.w	800189a <USBPD_PE_StateMachine_SRC+0x552>
 8001554:	1e89      	subs	r1, r1, #2
 8001556:	d0f1      	beq.n	800153c <USBPD_PE_StateMachine_SRC+0x1f4>
 8001558:	1e49      	subs	r1, r1, #1
 800155a:	f000 8086 	beq.w	800166a <USBPD_PE_StateMachine_SRC+0x322>
 800155e:	1e89      	subs	r1, r1, #2
 8001560:	2908      	cmp	r1, #8
 8001562:	a901      	add	r1, sp, #4
 8001564:	4630      	mov	r0, r6
 8001566:	f240 8369 	bls.w	8001c3c <USBPD_PE_StateMachine_SRC+0x8f4>
 800156a:	f000 ffd5 	bl	8002518 <PE_StateMachine_VDM>
 800156e:	4604      	mov	r4, r0
 8001570:	7c72      	ldrb	r2, [r6, #17]
 8001572:	7cb0      	ldrb	r0, [r6, #18]
 8001574:	4290      	cmp	r0, r2
 8001576:	d003      	beq.n	8001580 <USBPD_PE_StateMachine_SRC+0x238>
 8001578:	74b2      	strb	r2, [r6, #18]
 800157a:	2100      	movs	r1, #0
 800157c:	f000 fb99 	bl	8001cb2 <.text_6>
 8001580:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8001584:	2814      	cmp	r0, #20
 8001586:	f000 8366 	beq.w	8001c56 <USBPD_PE_StateMachine_SRC+0x90e>
 800158a:	4630      	mov	r0, r6
 800158c:	f7ff f908 	bl	80007a0 <PE_Check_AMSConflict>
 8001590:	2815      	cmp	r0, #21
 8001592:	d105      	bne.n	80015a0 <USBPD_PE_StateMachine_SRC+0x258>
 8001594:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8001598:	2814      	cmp	r0, #20
 800159a:	d001      	beq.n	80015a0 <USBPD_PE_StateMachine_SRC+0x258>
 800159c:	f000 fbae 	bl	8001cfc <.text_13>
 80015a0:	7c72      	ldrb	r2, [r6, #17]
 80015a2:	7cb0      	ldrb	r0, [r6, #18]
 80015a4:	4290      	cmp	r0, r2
 80015a6:	d004      	beq.n	80015b2 <USBPD_PE_StateMachine_SRC+0x26a>
 80015a8:	74b2      	strb	r2, [r6, #18]
 80015aa:	f000 fb8a 	bl	8001cc2 <.text_7+0x2>
 80015ae:	2004      	movs	r0, #4
 80015b0:	47a0      	blx	r4
 80015b2:	2400      	movs	r4, #0
 80015b4:	e36a      	b.n	8001c8c <USBPD_PE_StateMachine_SRC+0x944>
 80015b6:	4654      	mov	r4, sl
 80015b8:	e714      	b.n	80013e4 <USBPD_PE_StateMachine_SRC+0x9c>
 80015ba:	f000 fb8f 	bl	8001cdc <.text_9>
 80015be:	215f      	movs	r1, #95	@ 0x5f
 80015c0:	f000 fb92 	bl	8001ce8 <.text_10>
 80015c4:	4654      	mov	r4, sl
 80015c6:	e7d3      	b.n	8001570 <USBPD_PE_StateMachine_SRC+0x228>
 80015c8:	6870      	ldr	r0, [r6, #4]
 80015ca:	6801      	ldr	r1, [r0, #0]
 80015cc:	f021 0110 	bic.w	r1, r1, #16
 80015d0:	6001      	str	r1, [r0, #0]
 80015d2:	68b0      	ldr	r0, [r6, #8]
 80015d4:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 80015d6:	2900      	cmp	r1, #0
 80015d8:	d0f4      	beq.n	80015c4 <USBPD_PE_StateMachine_SRC+0x27c>
 80015da:	7c30      	ldrb	r0, [r6, #16]
 80015dc:	4788      	blx	r1
 80015de:	e7f1      	b.n	80015c4 <USBPD_PE_StateMachine_SRC+0x27c>
 80015e0:	f000 fb76 	bl	8001cd0 <.text_8>
 80015e4:	bf1a      	itte	ne
 80015e6:	6830      	ldrne	r0, [r6, #0]
 80015e8:	6801      	ldrne	r1, [r0, #0]
 80015ea:	2101      	moveq	r1, #1
 80015ec:	4640      	mov	r0, r8
 80015ee:	f001 fc6c 	bl	8002eca <USBPD_PRL_SOPCapability>
 80015f2:	6870      	ldr	r0, [r6, #4]
 80015f4:	6801      	ldr	r1, [r0, #0]
 80015f6:	f3c1 3000 	ubfx	r0, r1, #12, #1
 80015fa:	b388      	cbz	r0, 8001660 <USBPD_PE_StateMachine_SRC+0x318>
 80015fc:	f001 0203 	and.w	r2, r1, #3
 8001600:	6870      	ldr	r0, [r6, #4]
 8001602:	2a01      	cmp	r2, #1
 8001604:	bf0c      	ite	eq
 8001606:	2200      	moveq	r2, #0
 8001608:	2220      	movne	r2, #32
 800160a:	f021 0120 	bic.w	r1, r1, #32
 800160e:	4311      	orrs	r1, r2
 8001610:	6001      	str	r1, [r0, #0]
 8001612:	2000      	movs	r0, #0
 8001614:	70f8      	strb	r0, [r7, #3]
 8001616:	2101      	movs	r1, #1
 8001618:	f000 fb6a 	bl	8001cf0 <.text_11+0x2>
 800161c:	6870      	ldr	r0, [r6, #4]
 800161e:	6801      	ldr	r1, [r0, #0]
 8001620:	f3c1 1000 	ubfx	r0, r1, #4, #1
 8001624:	b130      	cbz	r0, 8001634 <USBPD_PE_StateMachine_SRC+0x2ec>
 8001626:	f248 0014 	movw	r0, #32788	@ 0x8014
 800162a:	83f0      	strh	r0, [r6, #30]
 800162c:	2414      	movs	r4, #20
 800162e:	2106      	movs	r1, #6
 8001630:	7471      	strb	r1, [r6, #17]
 8001632:	e79d      	b.n	8001570 <USBPD_PE_StateMachine_SRC+0x228>
 8001634:	f3c1 30c0 	ubfx	r0, r1, #15, #1
 8001638:	2800      	cmp	r0, #0
 800163a:	d00a      	beq.n	8001652 <USBPD_PE_StateMachine_SRC+0x30a>
 800163c:	6830      	ldr	r0, [r6, #0]
 800163e:	7801      	ldrb	r1, [r0, #0]
 8001640:	078a      	lsls	r2, r1, #30
 8001642:	f140 808b 	bpl.w	800175c <USBPD_PE_StateMachine_SRC+0x414>
 8001646:	7939      	ldrb	r1, [r7, #4]
 8001648:	2914      	cmp	r1, #20
 800164a:	f080 8087 	bcs.w	800175c <USBPD_PE_StateMachine_SRC+0x414>
 800164e:	68f0      	ldr	r0, [r6, #12]
 8001650:	2800      	cmp	r0, #0
 8001652:	f000 8083 	beq.w	800175c <USBPD_PE_StateMachine_SRC+0x414>
 8001656:	1c49      	adds	r1, r1, #1
 8001658:	7139      	strb	r1, [r7, #4]
 800165a:	2005      	movs	r0, #5
 800165c:	7470      	strb	r0, [r6, #17]
 800165e:	e787      	b.n	8001570 <USBPD_PE_StateMachine_SRC+0x228>
 8001660:	7c30      	ldrb	r0, [r6, #16]
 8001662:	2121      	movs	r1, #33	@ 0x21
 8001664:	f7fe ff3e 	bl	80004e4 <USBPD_PE_Notification>
 8001668:	e1ca      	b.n	8001a00 <USBPD_PE_StateMachine_SRC+0x6b8>
 800166a:	a901      	add	r1, sp, #4
 800166c:	4630      	mov	r0, r6
 800166e:	f000 fb7b 	bl	8001d68 <PE_StateMachine_VDMCable>
 8001672:	e77c      	b.n	800156e <USBPD_PE_StateMachine_SRC+0x226>
 8001674:	8bf0      	ldrh	r0, [r6, #30]
 8001676:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800167a:	d102      	bne.n	8001682 <USBPD_PE_StateMachine_SRC+0x33a>
 800167c:	2107      	movs	r1, #7
 800167e:	7471      	strb	r1, [r6, #17]
 8001680:	2400      	movs	r4, #0
 8001682:	e775      	b.n	8001570 <USBPD_PE_StateMachine_SRC+0x228>
 8001684:	6971      	ldr	r1, [r6, #20]
 8001686:	0889      	lsrs	r1, r1, #2
 8001688:	f001 0101 	and.w	r1, r1, #1
 800168c:	4630      	mov	r0, r6
 800168e:	f000 fb40 	bl	8001d12 <PE_Send_SRCCapabilities>
 8001692:	2805      	cmp	r0, #5
 8001694:	d002      	beq.n	800169c <USBPD_PE_StateMachine_SRC+0x354>
 8001696:	2809      	cmp	r0, #9
 8001698:	d0f3      	beq.n	8001682 <USBPD_PE_StateMachine_SRC+0x33a>
 800169a:	e011      	b.n	80016c0 <USBPD_PE_StateMachine_SRC+0x378>
 800169c:	2001      	movs	r0, #1
 800169e:	6971      	ldr	r1, [r6, #20]
 80016a0:	7730      	strb	r0, [r6, #28]
 80016a2:	f041 0104 	orr.w	r1, r1, #4
 80016a6:	6171      	str	r1, [r6, #20]
 80016a8:	2000      	movs	r0, #0
 80016aa:	70f8      	strb	r0, [r7, #3]
 80016ac:	70b8      	strb	r0, [r7, #2]
 80016ae:	f8a6 b01e 	strh.w	fp, [r6, #30]
 80016b2:	2016      	movs	r0, #22
 80016b4:	241b      	movs	r4, #27
 80016b6:	7470      	strb	r0, [r6, #17]
 80016b8:	210f      	movs	r1, #15
 80016ba:	f000 fb15 	bl	8001ce8 <.text_10>
 80016be:	e757      	b.n	8001570 <USBPD_PE_StateMachine_SRC+0x228>
 80016c0:	6970      	ldr	r0, [r6, #20]
 80016c2:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80016c6:	b978      	cbnz	r0, 80016e8 <USBPD_PE_StateMachine_SRC+0x3a0>
 80016c8:	78f8      	ldrb	r0, [r7, #3]
 80016ca:	2833      	cmp	r0, #51	@ 0x33
 80016cc:	d218      	bcs.n	8001700 <USBPD_PE_StateMachine_SRC+0x3b8>
 80016ce:	f248 0196 	movw	r1, #32918	@ 0x8096
 80016d2:	83f1      	strh	r1, [r6, #30]
 80016d4:	2008      	movs	r0, #8
 80016d6:	7470      	strb	r0, [r6, #17]
 80016d8:	2496      	movs	r4, #150	@ 0x96
 80016da:	8c71      	ldrh	r1, [r6, #34]	@ 0x22
 80016dc:	0448      	lsls	r0, r1, #17
 80016de:	d002      	beq.n	80016e6 <USBPD_PE_StateMachine_SRC+0x39e>
 80016e0:	8c74      	ldrh	r4, [r6, #34]	@ 0x22
 80016e2:	f3c4 040e 	ubfx	r4, r4, #0, #15
 80016e6:	e743      	b.n	8001570 <USBPD_PE_StateMachine_SRC+0x228>
 80016e8:	6870      	ldr	r0, [r6, #4]
 80016ea:	7801      	ldrb	r1, [r0, #0]
 80016ec:	f001 0103 	and.w	r1, r1, #3
 80016f0:	2902      	cmp	r1, #2
 80016f2:	bf04      	itt	eq
 80016f4:	7c30      	ldrbeq	r0, [r6, #16]
 80016f6:	f001 fbdd 	bleq	8002eb4 <USBPD_PRL_SRCReleaseSinkNG>
 80016fa:	2011      	movs	r0, #17
 80016fc:	7470      	strb	r0, [r6, #17]
 80016fe:	e7bf      	b.n	8001680 <USBPD_PE_StateMachine_SRC+0x338>
 8001700:	7c30      	ldrb	r0, [r6, #16]
 8001702:	2121      	movs	r1, #33	@ 0x21
 8001704:	f7fe feee 	bl	80004e4 <USBPD_PE_Notification>
 8001708:	2000      	movs	r0, #0
 800170a:	e7a7      	b.n	800165c <USBPD_PE_StateMachine_SRC+0x314>
 800170c:	4630      	mov	r0, r6
 800170e:	f000 fb00 	bl	8001d12 <PE_Send_SRCCapabilities>
 8001712:	2805      	cmp	r0, #5
 8001714:	d108      	bne.n	8001728 <USBPD_PE_StateMachine_SRC+0x3e0>
 8001716:	f000 faea 	bl	8001cee <.text_11>
 800171a:	2001      	movs	r0, #1
 800171c:	7730      	strb	r0, [r6, #28]
 800171e:	f8a6 b01e 	strh.w	fp, [r6, #30]
 8001722:	2116      	movs	r1, #22
 8001724:	7471      	strb	r1, [r6, #17]
 8001726:	e7c7      	b.n	80016b8 <USBPD_PE_StateMachine_SRC+0x370>
 8001728:	2000      	movs	r0, #0
 800172a:	7730      	strb	r0, [r6, #28]
 800172c:	2111      	movs	r1, #17
 800172e:	e77f      	b.n	8001630 <USBPD_PE_StateMachine_SRC+0x2e8>
 8001730:	8c70      	ldrh	r0, [r6, #34]	@ 0x22
 8001732:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8001736:	d105      	bne.n	8001744 <USBPD_PE_StateMachine_SRC+0x3fc>
 8001738:	8471      	strh	r1, [r6, #34]	@ 0x22
 800173a:	2105      	movs	r1, #5
 800173c:	7938      	ldrb	r0, [r7, #4]
 800173e:	1c40      	adds	r0, r0, #1
 8001740:	7138      	strb	r0, [r7, #4]
 8001742:	7471      	strb	r1, [r6, #17]
 8001744:	8bf0      	ldrh	r0, [r6, #30]
 8001746:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800174a:	d1cc      	bne.n	80016e6 <USBPD_PE_StateMachine_SRC+0x39e>
 800174c:	6830      	ldr	r0, [r6, #0]
 800174e:	6841      	ldr	r1, [r0, #4]
 8001750:	f3c1 10c0 	ubfx	r0, r1, #7, #1
 8001754:	b110      	cbz	r0, 800175c <USBPD_PE_StateMachine_SRC+0x414>
 8001756:	78f8      	ldrb	r0, [r7, #3]
 8001758:	1c40      	adds	r0, r0, #1
 800175a:	70f8      	strb	r0, [r7, #3]
 800175c:	2007      	movs	r0, #7
 800175e:	e77d      	b.n	800165c <USBPD_PE_StateMachine_SRC+0x314>
 8001760:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8001764:	2811      	cmp	r0, #17
 8001766:	d12d      	bne.n	80017c4 <USBPD_PE_StateMachine_SRC+0x47c>
 8001768:	88a9      	ldrh	r1, [r5, #4]
 800176a:	0bc8      	lsrs	r0, r1, #15
 800176c:	d12a      	bne.n	80017c4 <USBPD_PE_StateMachine_SRC+0x47c>
 800176e:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8001772:	b338      	cbz	r0, 80017c4 <USBPD_PE_StateMachine_SRC+0x47c>
 8001774:	7928      	ldrb	r0, [r5, #4]
 8001776:	f000 001f 	and.w	r0, r0, #31
 800177a:	2802      	cmp	r0, #2
 800177c:	d122      	bne.n	80017c4 <USBPD_PE_StateMachine_SRC+0x47c>
 800177e:	68a8      	ldr	r0, [r5, #8]
 8001780:	7881      	ldrb	r1, [r0, #2]
 8001782:	78c2      	ldrb	r2, [r0, #3]
 8001784:	eb01 2302 	add.w	r3, r1, r2, lsl #8
 8001788:	7901      	ldrb	r1, [r0, #4]
 800178a:	7940      	ldrb	r0, [r0, #5]
 800178c:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8001790:	eb03 6300 	add.w	r3, r3, r0, lsl #24
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	88a8      	ldrh	r0, [r5, #4]
 8001798:	f3c0 1181 	ubfx	r1, r0, #6, #2
 800179c:	7c30      	ldrb	r0, [r6, #16]
 800179e:	f7ff f8b7 	bl	8000910 <PE_ExtRevisionInteroperability>
 80017a2:	68b4      	ldr	r4, [r6, #8]
 80017a4:	7c30      	ldrb	r0, [r6, #16]
 80017a6:	f8d4 c018 	ldr.w	ip, [r4, #24]
 80017aa:	2304      	movs	r3, #4
 80017ac:	466a      	mov	r2, sp
 80017ae:	2106      	movs	r1, #6
 80017b0:	47e0      	blx	ip
 80017b2:	2009      	movs	r0, #9
 80017b4:	7470      	strb	r0, [r6, #17]
 80017b6:	2400      	movs	r4, #0
 80017b8:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80017bc:	2814      	cmp	r0, #20
 80017be:	d001      	beq.n	80017c4 <USBPD_PE_StateMachine_SRC+0x47c>
 80017c0:	f000 fa9c 	bl	8001cfc <.text_13>
 80017c4:	8bf0      	ldrh	r0, [r6, #30]
 80017c6:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80017ca:	d119      	bne.n	8001800 <USBPD_PE_StateMachine_SRC+0x4b8>
 80017cc:	e0af      	b.n	800192e <USBPD_PE_StateMachine_SRC+0x5e6>
 80017ce:	68b2      	ldr	r2, [r6, #8]
 80017d0:	7c30      	ldrb	r0, [r6, #16]
 80017d2:	69d3      	ldr	r3, [r2, #28]
 80017d4:	a902      	add	r1, sp, #8
 80017d6:	4798      	blx	r3
 80017d8:	280a      	cmp	r0, #10
 80017da:	d012      	beq.n	8001802 <USBPD_PE_StateMachine_SRC+0x4ba>
 80017dc:	280b      	cmp	r0, #11
 80017de:	d020      	beq.n	8001822 <USBPD_PE_StateMachine_SRC+0x4da>
 80017e0:	280d      	cmp	r0, #13
 80017e2:	6870      	ldr	r0, [r6, #4]
 80017e4:	6801      	ldr	r1, [r0, #0]
 80017e6:	f3c1 2002 	ubfx	r0, r1, #8, #3
 80017ea:	d11f      	bne.n	800182c <USBPD_PE_StateMachine_SRC+0x4e4>
 80017ec:	2803      	cmp	r0, #3
 80017ee:	bf0c      	ite	eq
 80017f0:	2303      	moveq	r3, #3
 80017f2:	230e      	movne	r3, #14
 80017f4:	2000      	movs	r0, #0
 80017f6:	9000      	str	r0, [sp, #0]
 80017f8:	220c      	movs	r2, #12
 80017fa:	2100      	movs	r1, #0
 80017fc:	f000 fa7b 	bl	8001cf6 <.text_12>
 8001800:	e6b6      	b.n	8001570 <USBPD_PE_StateMachine_SRC+0x228>
 8001802:	f248 001e 	movw	r0, #32798	@ 0x801e
 8001806:	83f0      	strh	r0, [r6, #30]
 8001808:	2100      	movs	r1, #0
 800180a:	9100      	str	r1, [sp, #0]
 800180c:	230c      	movs	r3, #12
 800180e:	2203      	movs	r2, #3
 8001810:	f000 fa71 	bl	8001cf6 <.text_12>
 8001814:	9802      	ldr	r0, [sp, #8]
 8001816:	6971      	ldr	r1, [r6, #20]
 8001818:	f360 01c4 	bfi	r1, r0, #3, #2
 800181c:	241e      	movs	r4, #30
 800181e:	6171      	str	r1, [r6, #20]
 8001820:	e6a6      	b.n	8001570 <USBPD_PE_StateMachine_SRC+0x228>
 8001822:	2000      	movs	r0, #0
 8001824:	9000      	str	r0, [sp, #0]
 8001826:	230c      	movs	r3, #12
 8001828:	2202      	movs	r2, #2
 800182a:	e7e6      	b.n	80017fa <USBPD_PE_StateMachine_SRC+0x4b2>
 800182c:	2803      	cmp	r0, #3
 800182e:	bf0c      	ite	eq
 8001830:	2303      	moveq	r3, #3
 8001832:	230e      	movne	r3, #14
 8001834:	2000      	movs	r0, #0
 8001836:	9000      	str	r0, [sp, #0]
 8001838:	2204      	movs	r2, #4
 800183a:	e7de      	b.n	80017fa <USBPD_PE_StateMachine_SRC+0x4b2>
 800183c:	8bf0      	ldrh	r0, [r6, #30]
 800183e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8001842:	d1ed      	bne.n	8001820 <USBPD_PE_StateMachine_SRC+0x4d8>
 8001844:	f000 fa53 	bl	8001cee <.text_11>
 8001848:	68b0      	ldr	r0, [r6, #8]
 800184a:	6801      	ldr	r1, [r0, #0]
 800184c:	2900      	cmp	r1, #0
 800184e:	d0e7      	beq.n	8001820 <USBPD_PE_StateMachine_SRC+0x4d8>
 8001850:	7c30      	ldrb	r0, [r6, #16]
 8001852:	4788      	blx	r1
 8001854:	2800      	cmp	r0, #0
 8001856:	d16a      	bne.n	800192e <USBPD_PE_StateMachine_SRC+0x5e6>
 8001858:	200d      	movs	r0, #13
 800185a:	e6ff      	b.n	800165c <USBPD_PE_StateMachine_SRC+0x314>
 800185c:	9100      	str	r1, [sp, #0]
 800185e:	2303      	movs	r3, #3
 8001860:	2206      	movs	r2, #6
 8001862:	f000 fa48 	bl	8001cf6 <.text_12>
 8001866:	2800      	cmp	r0, #0
 8001868:	d116      	bne.n	8001898 <USBPD_PE_StateMachine_SRC+0x550>
 800186a:	2103      	movs	r1, #3
 800186c:	f000 fa40 	bl	8001cf0 <.text_11+0x2>
 8001870:	2110      	movs	r1, #16
 8001872:	e722      	b.n	80016ba <USBPD_PE_StateMachine_SRC+0x372>
 8001874:	2001      	movs	r0, #1
 8001876:	9000      	str	r0, [sp, #0]
 8001878:	2397      	movs	r3, #151	@ 0x97
 800187a:	2202      	movs	r2, #2
 800187c:	f000 fa3b 	bl	8001cf6 <.text_12>
 8001880:	2800      	cmp	r0, #0
 8001882:	d109      	bne.n	8001898 <USBPD_PE_StateMachine_SRC+0x550>
 8001884:	7c30      	ldrb	r0, [r6, #16]
 8001886:	7734      	strb	r4, [r6, #28]
 8001888:	2129      	movs	r1, #41	@ 0x29
 800188a:	f7fe fe2b 	bl	80004e4 <USBPD_PE_Notification>
 800188e:	f248 2026 	movw	r0, #33318	@ 0x8226
 8001892:	83f0      	strh	r0, [r6, #30]
 8001894:	f240 2426 	movw	r4, #550	@ 0x226
 8001898:	e66a      	b.n	8001570 <USBPD_PE_StateMachine_SRC+0x228>
 800189a:	8bf0      	ldrh	r0, [r6, #30]
 800189c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80018a0:	d1fa      	bne.n	8001898 <USBPD_PE_StateMachine_SRC+0x550>
 80018a2:	7c30      	ldrb	r0, [r6, #16]
 80018a4:	212a      	movs	r1, #42	@ 0x2a
 80018a6:	f7fe fe1d 	bl	80004e4 <USBPD_PE_Notification>
 80018aa:	2000      	movs	r0, #0
 80018ac:	9000      	str	r0, [sp, #0]
 80018ae:	2303      	movs	r3, #3
 80018b0:	2206      	movs	r2, #6
 80018b2:	2100      	movs	r1, #0
 80018b4:	f000 fa1f 	bl	8001cf6 <.text_12>
 80018b8:	2800      	cmp	r0, #0
 80018ba:	d1ed      	bne.n	8001898 <USBPD_PE_StateMachine_SRC+0x550>
 80018bc:	212e      	movs	r1, #46	@ 0x2e
 80018be:	e6fc      	b.n	80016ba <USBPD_PE_StateMachine_SRC+0x372>
 80018c0:	2000      	movs	r0, #0
 80018c2:	9000      	str	r0, [sp, #0]
 80018c4:	2307      	movs	r3, #7
 80018c6:	2203      	movs	r2, #3
 80018c8:	e798      	b.n	80017fc <USBPD_PE_StateMachine_SRC+0x4b4>
 80018ca:	2000      	movs	r0, #0
 80018cc:	9000      	str	r0, [sp, #0]
 80018ce:	2312      	movs	r3, #18
 80018d0:	7869      	ldrb	r1, [r5, #1]
 80018d2:	220d      	movs	r2, #13
 80018d4:	f000 fa0f 	bl	8001cf6 <.text_12>
 80018d8:	2800      	cmp	r0, #0
 80018da:	d1dd      	bne.n	8001898 <USBPD_PE_StateMachine_SRC+0x550>
 80018dc:	f8a6 b01e 	strh.w	fp, [r6, #30]
 80018e0:	241b      	movs	r4, #27
 80018e2:	2130      	movs	r1, #48	@ 0x30
 80018e4:	e6e9      	b.n	80016ba <USBPD_PE_StateMachine_SRC+0x372>
 80018e6:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80018ea:	2814      	cmp	r0, #20
 80018ec:	d01b      	beq.n	8001926 <USBPD_PE_StateMachine_SRC+0x5de>
 80018ee:	7829      	ldrb	r1, [r5, #0]
 80018f0:	7868      	ldrb	r0, [r5, #1]
 80018f2:	4281      	cmp	r1, r0
 80018f4:	bf01      	itttt	eq
 80018f6:	88a9      	ldrheq	r1, [r5, #4]
 80018f8:	f24f 001f 	movweq	r0, #61471	@ 0xf01f
 80018fc:	4001      	andeq	r1, r0
 80018fe:	2903      	cmpeq	r1, #3
 8001900:	d111      	bne.n	8001926 <USBPD_PE_StateMachine_SRC+0x5de>
 8001902:	7c30      	ldrb	r0, [r6, #16]
 8001904:	2131      	movs	r1, #49	@ 0x31
 8001906:	f7fe fded 	bl	80004e4 <USBPD_PE_Notification>
 800190a:	7828      	ldrb	r0, [r5, #0]
 800190c:	b910      	cbnz	r0, 8001914 <USBPD_PE_StateMachine_SRC+0x5cc>
 800190e:	2107      	movs	r1, #7
 8001910:	7471      	strb	r1, [r6, #17]
 8001912:	e002      	b.n	800191a <USBPD_PE_StateMachine_SRC+0x5d2>
 8001914:	2003      	movs	r0, #3
 8001916:	7470      	strb	r0, [r6, #17]
 8001918:	2400      	movs	r4, #0
 800191a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800191e:	2814      	cmp	r0, #20
 8001920:	d001      	beq.n	8001926 <USBPD_PE_StateMachine_SRC+0x5de>
 8001922:	f000 f9eb 	bl	8001cfc <.text_13>
 8001926:	8bf0      	ldrh	r0, [r6, #30]
 8001928:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800192c:	d1b4      	bne.n	8001898 <USBPD_PE_StateMachine_SRC+0x550>
 800192e:	210f      	movs	r1, #15
 8001930:	e6a5      	b.n	800167e <USBPD_PE_StateMachine_SRC+0x336>
 8001932:	6870      	ldr	r0, [r6, #4]
 8001934:	7801      	ldrb	r1, [r0, #0]
 8001936:	f001 0103 	and.w	r1, r1, #3
 800193a:	2902      	cmp	r1, #2
 800193c:	bf04      	itt	eq
 800193e:	7c30      	ldrbeq	r0, [r6, #16]
 8001940:	f001 fab8 	bleq	8002eb4 <USBPD_PRL_SRCReleaseSinkNG>
 8001944:	2105      	movs	r1, #5
 8001946:	4630      	mov	r0, r6
 8001948:	f7fe fe95 	bl	8000676 <PE_Send_RESET>
 800194c:	f000 f9c6 	bl	8001cdc <.text_9>
 8001950:	2100      	movs	r1, #0
 8001952:	78b8      	ldrb	r0, [r7, #2]
 8001954:	1c40      	adds	r0, r0, #1
 8001956:	70b8      	strb	r0, [r7, #2]
 8001958:	2202      	movs	r2, #2
 800195a:	6970      	ldr	r0, [r6, #20]
 800195c:	f420 60c0 	bic.w	r0, r0, #1536	@ 0x600
 8001960:	6170      	str	r0, [r6, #20]
 8001962:	70a9      	strb	r1, [r5, #2]
 8001964:	4630      	mov	r0, r6
 8001966:	2101      	movs	r1, #1
 8001968:	f7ff f9bc 	bl	8000ce4 <PE_CallHardResetCallback>
 800196c:	2169      	movs	r1, #105	@ 0x69
 800196e:	4640      	mov	r0, r8
 8001970:	f7fe fdb8 	bl	80004e4 <USBPD_PE_Notification>
 8001974:	f8a6 b01e 	strh.w	fp, [r6, #30]
 8001978:	241b      	movs	r4, #27
 800197a:	2015      	movs	r0, #21
 800197c:	e66e      	b.n	800165c <USBPD_PE_StateMachine_SRC+0x314>
 800197e:	6870      	ldr	r0, [r6, #4]
 8001980:	7801      	ldrb	r1, [r0, #0]
 8001982:	f001 0103 	and.w	r1, r1, #3
 8001986:	2902      	cmp	r1, #2
 8001988:	bf04      	itt	eq
 800198a:	7c30      	ldrbeq	r0, [r6, #16]
 800198c:	f001 fa92 	bleq	8002eb4 <USBPD_PRL_SRCReleaseSinkNG>
 8001990:	e7ec      	b.n	800196c <USBPD_PE_StateMachine_SRC+0x624>
 8001992:	8bf0      	ldrh	r0, [r6, #30]
 8001994:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8001998:	d117      	bne.n	80019ca <USBPD_PE_StateMachine_SRC+0x682>
 800199a:	78b9      	ldrb	r1, [r7, #2]
 800199c:	6970      	ldr	r0, [r6, #20]
 800199e:	2902      	cmp	r1, #2
 80019a0:	d903      	bls.n	80019aa <USBPD_PE_StateMachine_SRC+0x662>
 80019a2:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80019a6:	bb40      	cbnz	r0, 80019fa <USBPD_PE_StateMachine_SRC+0x6b2>
 80019a8:	e02a      	b.n	8001a00 <USBPD_PE_StateMachine_SRC+0x6b8>
 80019aa:	f248 218a 	movw	r1, #33418	@ 0x828a
 80019ae:	83f1      	strh	r1, [r6, #30]
 80019b0:	2217      	movs	r2, #23
 80019b2:	7472      	strb	r2, [r6, #17]
 80019b4:	2400      	movs	r4, #0
 80019b6:	f3c0 2041 	ubfx	r0, r0, #9, #2
 80019ba:	1e42      	subs	r2, r0, #1
 80019bc:	4192      	sbcs	r2, r2
 80019be:	0fd2      	lsrs	r2, r2, #31
 80019c0:	f000 f9a3 	bl	8001d0a <.text_14+0x2>
 80019c4:	2203      	movs	r2, #3
 80019c6:	f000 f9a0 	bl	8001d0a <.text_14+0x2>
 80019ca:	e5d1      	b.n	8001570 <USBPD_PE_StateMachine_SRC+0x228>
 80019cc:	68b2      	ldr	r2, [r6, #8]
 80019ce:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80019d0:	4640      	mov	r0, r8
 80019d2:	4798      	blx	r3
 80019d4:	2801      	cmp	r0, #1
 80019d6:	d106      	bne.n	80019e6 <USBPD_PE_StateMachine_SRC+0x69e>
 80019d8:	f248 3020 	movw	r0, #33568	@ 0x8320
 80019dc:	83f0      	strh	r0, [r6, #30]
 80019de:	2113      	movs	r1, #19
 80019e0:	f44f 7448 	mov.w	r4, #800	@ 0x320
 80019e4:	7471      	strb	r1, [r6, #17]
 80019e6:	8bf0      	ldrh	r0, [r6, #30]
 80019e8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80019ec:	d1ed      	bne.n	80019ca <USBPD_PE_StateMachine_SRC+0x682>
 80019ee:	f000 f98b 	bl	8001d08 <.text_14>
 80019f2:	6970      	ldr	r0, [r6, #20]
 80019f4:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80019f8:	b110      	cbz	r0, 8001a00 <USBPD_PE_StateMachine_SRC+0x6b8>
 80019fa:	68b1      	ldr	r1, [r6, #8]
 80019fc:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 80019fe:	bb08      	cbnz	r0, 8001a44 <USBPD_PE_StateMachine_SRC+0x6fc>
 8001a00:	2100      	movs	r1, #0
 8001a02:	e615      	b.n	8001630 <USBPD_PE_StateMachine_SRC+0x2e8>
 8001a04:	8bf0      	ldrh	r0, [r6, #30]
 8001a06:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8001a0a:	d1de      	bne.n	80019ca <USBPD_PE_StateMachine_SRC+0x682>
 8001a0c:	2204      	movs	r2, #4
 8001a0e:	f000 f97c 	bl	8001d0a <.text_14+0x2>
 8001a12:	68b2      	ldr	r2, [r6, #8]
 8001a14:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8001a16:	2101      	movs	r1, #1
 8001a18:	4640      	mov	r0, r8
 8001a1a:	4798      	blx	r3
 8001a1c:	2801      	cmp	r0, #1
 8001a1e:	d10a      	bne.n	8001a36 <USBPD_PE_StateMachine_SRC+0x6ee>
 8001a20:	4630      	mov	r0, r6
 8001a22:	f7fe ff16 	bl	8000852 <PE_Reset_HardReset>
 8001a26:	2168      	movs	r1, #104	@ 0x68
 8001a28:	4640      	mov	r0, r8
 8001a2a:	f7fe fd5b 	bl	80004e4 <USBPD_PE_Notification>
 8001a2e:	2205      	movs	r2, #5
 8001a30:	f000 f96b 	bl	8001d0a <.text_14+0x2>
 8001a34:	e692      	b.n	800175c <USBPD_PE_StateMachine_SRC+0x414>
 8001a36:	f000 f967 	bl	8001d08 <.text_14>
 8001a3a:	68b1      	ldr	r1, [r6, #8]
 8001a3c:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8001a3e:	b908      	cbnz	r0, 8001a44 <USBPD_PE_StateMachine_SRC+0x6fc>
 8001a40:	f7ff be5c 	b.w	80016fc <USBPD_PE_StateMachine_SRC+0x3b4>
 8001a44:	2192      	movs	r1, #146	@ 0x92
 8001a46:	e61a      	b.n	800167e <USBPD_PE_StateMachine_SRC+0x336>
 8001a48:	2000      	movs	r0, #0
 8001a4a:	9000      	str	r0, [sp, #0]
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	2204      	movs	r2, #4
 8001a50:	e6d4      	b.n	80017fc <USBPD_PE_StateMachine_SRC+0x4b4>
 8001a52:	2001      	movs	r0, #1
 8001a54:	9000      	str	r0, [sp, #0]
 8001a56:	231b      	movs	r3, #27
 8001a58:	2207      	movs	r2, #7
 8001a5a:	f000 f94c 	bl	8001cf6 <.text_12>
 8001a5e:	2800      	cmp	r0, #0
 8001a60:	d1b3      	bne.n	80019ca <USBPD_PE_StateMachine_SRC+0x682>
 8001a62:	2006      	movs	r0, #6
 8001a64:	7730      	strb	r0, [r6, #28]
 8001a66:	f8a6 b01e 	strh.w	fp, [r6, #30]
 8001a6a:	241b      	movs	r4, #27
 8001a6c:	210b      	movs	r1, #11
 8001a6e:	e624      	b.n	80016ba <USBPD_PE_StateMachine_SRC+0x372>
 8001a70:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8001a74:	2811      	cmp	r0, #17
 8001a76:	d131      	bne.n	8001adc <USBPD_PE_StateMachine_SRC+0x794>
 8001a78:	88a9      	ldrh	r1, [r5, #4]
 8001a7a:	0bc8      	lsrs	r0, r1, #15
 8001a7c:	d11b      	bne.n	8001ab6 <USBPD_PE_StateMachine_SRC+0x76e>
 8001a7e:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8001a82:	b1c0      	cbz	r0, 8001ab6 <USBPD_PE_StateMachine_SRC+0x76e>
 8001a84:	4608      	mov	r0, r1
 8001a86:	f000 011f 	and.w	r1, r0, #31
 8001a8a:	2901      	cmp	r1, #1
 8001a8c:	d113      	bne.n	8001ab6 <USBPD_PE_StateMachine_SRC+0x76e>
 8001a8e:	68b4      	ldr	r4, [r6, #8]
 8001a90:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8001a94:	f3c0 3302 	ubfx	r3, r0, #12, #3
 8001a98:	68a8      	ldr	r0, [r5, #8]
 8001a9a:	1c82      	adds	r2, r0, #2
 8001a9c:	7c30      	ldrb	r0, [r6, #16]
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	2104      	movs	r1, #4
 8001aa2:	47e0      	blx	ip
 8001aa4:	f000 f8fe 	bl	8001ca4 <.text_5>
 8001aa8:	d001      	beq.n	8001aae <USBPD_PE_StateMachine_SRC+0x766>
 8001aaa:	f000 f927 	bl	8001cfc <.text_13>
 8001aae:	7c30      	ldrb	r0, [r6, #16]
 8001ab0:	210d      	movs	r1, #13
 8001ab2:	f7fe fd17 	bl	80004e4 <USBPD_PE_Notification>
 8001ab6:	88a8      	ldrh	r0, [r5, #4]
 8001ab8:	f410 4f70 	tst.w	r0, #61440	@ 0xf000
 8001abc:	d10e      	bne.n	8001adc <USBPD_PE_StateMachine_SRC+0x794>
 8001abe:	f000 001f 	and.w	r0, r0, #31
 8001ac2:	2804      	cmp	r0, #4
 8001ac4:	bf18      	it	ne
 8001ac6:	2810      	cmpne	r0, #16
 8001ac8:	d108      	bne.n	8001adc <USBPD_PE_StateMachine_SRC+0x794>
 8001aca:	f000 f8eb 	bl	8001ca4 <.text_5>
 8001ace:	d001      	beq.n	8001ad4 <USBPD_PE_StateMachine_SRC+0x78c>
 8001ad0:	f000 f914 	bl	8001cfc <.text_13>
 8001ad4:	7c30      	ldrb	r0, [r6, #16]
 8001ad6:	210e      	movs	r1, #14
 8001ad8:	f7fe fd04 	bl	80004e4 <USBPD_PE_Notification>
 8001adc:	8bf0      	ldrh	r0, [r6, #30]
 8001ade:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8001ae2:	d120      	bne.n	8001b26 <USBPD_PE_StateMachine_SRC+0x7de>
 8001ae4:	2103      	movs	r1, #3
 8001ae6:	e5ca      	b.n	800167e <USBPD_PE_StateMachine_SRC+0x336>
 8001ae8:	2803      	cmp	r0, #3
 8001aea:	d10f      	bne.n	8001b0c <USBPD_PE_StateMachine_SRC+0x7c4>
 8001aec:	2000      	movs	r0, #0
 8001aee:	6871      	ldr	r1, [r6, #4]
 8001af0:	7730      	strb	r0, [r6, #28]
 8001af2:	7808      	ldrb	r0, [r1, #0]
 8001af4:	f000 0003 	and.w	r0, r0, #3
 8001af8:	2802      	cmp	r0, #2
 8001afa:	bf04      	itt	eq
 8001afc:	7c30      	ldrbeq	r0, [r6, #16]
 8001afe:	f001 f9d9 	bleq	8002eb4 <USBPD_PRL_SRCReleaseSinkNG>
 8001b02:	2004      	movs	r0, #4
 8001b04:	7470      	strb	r0, [r6, #17]
 8001b06:	2167      	movs	r1, #103	@ 0x67
 8001b08:	f000 f8ee 	bl	8001ce8 <.text_10>
 8001b0c:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8001b10:	2814      	cmp	r0, #20
 8001b12:	d009      	beq.n	8001b28 <USBPD_PE_StateMachine_SRC+0x7e0>
 8001b14:	4630      	mov	r0, r6
 8001b16:	f7ff fb04 	bl	8001122 <PE_ManageRXEvent>
 8001b1a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8001b1e:	2814      	cmp	r0, #20
 8001b20:	d001      	beq.n	8001b26 <USBPD_PE_StateMachine_SRC+0x7de>
 8001b22:	f000 f8eb 	bl	8001cfc <.text_13>
 8001b26:	e523      	b.n	8001570 <USBPD_PE_StateMachine_SRC+0x228>
 8001b28:	6970      	ldr	r0, [r6, #20]
 8001b2a:	0cc0      	lsrs	r0, r0, #19
 8001b2c:	d027      	beq.n	8001b7e <USBPD_PE_StateMachine_SRC+0x836>
 8001b2e:	8c30      	ldrh	r0, [r6, #32]
 8001b30:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8001b34:	d10e      	bne.n	8001b54 <USBPD_PE_StateMachine_SRC+0x80c>
 8001b36:	210f      	movs	r1, #15
 8001b38:	7471      	strb	r1, [r6, #17]
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	9000      	str	r0, [sp, #0]
 8001b3e:	7c31      	ldrb	r1, [r6, #16]
 8001b40:	f8d9 4000 	ldr.w	r4, [r9]
 8001b44:	2300      	movs	r3, #0
 8001b46:	2270      	movs	r2, #112	@ 0x70
 8001b48:	2009      	movs	r0, #9
 8001b4a:	47a0      	blx	r4
 8001b4c:	78b8      	ldrb	r0, [r7, #2]
 8001b4e:	1c40      	adds	r0, r0, #1
 8001b50:	70b8      	strb	r0, [r7, #2]
 8001b52:	e595      	b.n	8001680 <USBPD_PE_StateMachine_SRC+0x338>
 8001b54:	88a9      	ldrh	r1, [r5, #4]
 8001b56:	6972      	ldr	r2, [r6, #20]
 8001b58:	f3c1 2142 	ubfx	r1, r1, #9, #3
 8001b5c:	2033      	movs	r0, #51	@ 0x33
 8001b5e:	eb01 41d2 	add.w	r1, r1, r2, lsr #19
 8001b62:	fb11 f100 	smulbb	r1, r1, r0
 8001b66:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8001b6a:	8431      	strh	r1, [r6, #32]
 8001b6c:	88a9      	ldrh	r1, [r5, #4]
 8001b6e:	6972      	ldr	r2, [r6, #20]
 8001b70:	f3c1 2142 	ubfx	r1, r1, #9, #3
 8001b74:	eb01 44d2 	add.w	r4, r1, r2, lsr #19
 8001b78:	4344      	muls	r4, r0
 8001b7a:	b2a4      	uxth	r4, r4
 8001b7c:	e4f8      	b.n	8001570 <USBPD_PE_StateMachine_SRC+0x228>
 8001b7e:	7c30      	ldrb	r0, [r6, #16]
 8001b80:	f7fe fdf2 	bl	8000768 <PE_PRL_Control_RxEvent>
 8001b84:	b968      	cbnz	r0, 8001ba2 <USBPD_PE_StateMachine_SRC+0x85a>
 8001b86:	78a8      	ldrb	r0, [r5, #2]
 8001b88:	b158      	cbz	r0, 8001ba2 <USBPD_PE_StateMachine_SRC+0x85a>
 8001b8a:	78e9      	ldrb	r1, [r5, #3]
 8001b8c:	7069      	strb	r1, [r5, #1]
 8001b8e:	7470      	strb	r0, [r6, #17]
 8001b90:	2000      	movs	r0, #0
 8001b92:	70a8      	strb	r0, [r5, #2]
 8001b94:	6970      	ldr	r0, [r6, #20]
 8001b96:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 8001b98:	62b1      	str	r1, [r6, #40]	@ 0x28
 8001b9a:	f440 4080 	orr.w	r0, r0, #16384	@ 0x4000
 8001b9e:	6170      	str	r0, [r6, #20]
 8001ba0:	e56e      	b.n	8001680 <USBPD_PE_StateMachine_SRC+0x338>
 8001ba2:	8c70      	ldrh	r0, [r6, #34]	@ 0x22
 8001ba4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8001ba8:	d106      	bne.n	8001bb8 <USBPD_PE_StateMachine_SRC+0x870>
 8001baa:	2100      	movs	r1, #0
 8001bac:	8471      	strh	r1, [r6, #34]	@ 0x22
 8001bae:	2105      	movs	r1, #5
 8001bb0:	7938      	ldrb	r0, [r7, #4]
 8001bb2:	1c40      	adds	r0, r0, #1
 8001bb4:	7138      	strb	r0, [r7, #4]
 8001bb6:	e562      	b.n	800167e <USBPD_PE_StateMachine_SRC+0x336>
 8001bb8:	4630      	mov	r0, r6
 8001bba:	f7ff f8a9 	bl	8000d10 <PE_CalculateMinTiming>
 8001bbe:	e4d6      	b.n	800156e <USBPD_PE_StateMachine_SRC+0x226>
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	9000      	str	r0, [sp, #0]
 8001bc4:	783a      	ldrb	r2, [r7, #0]
 8001bc6:	78e9      	ldrb	r1, [r5, #3]
 8001bc8:	2339      	movs	r3, #57	@ 0x39
 8001bca:	f000 f894 	bl	8001cf6 <.text_12>
 8001bce:	2800      	cmp	r0, #0
 8001bd0:	d1d4      	bne.n	8001b7c <USBPD_PE_StateMachine_SRC+0x834>
 8001bd2:	7878      	ldrb	r0, [r7, #1]
 8001bd4:	7730      	strb	r0, [r6, #28]
 8001bd6:	f8a6 b01e 	strh.w	fp, [r6, #30]
 8001bda:	241b      	movs	r4, #27
 8001bdc:	2144      	movs	r1, #68	@ 0x44
 8001bde:	e56c      	b.n	80016ba <USBPD_PE_StateMachine_SRC+0x372>
 8001be0:	8bf0      	ldrh	r0, [r6, #30]
 8001be2:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8001be6:	bf04      	itt	eq
 8001be8:	f89d 0004 	ldrbeq.w	r0, [sp, #4]
 8001bec:	2814      	cmpeq	r0, #20
 8001bee:	f43f af79 	beq.w	8001ae4 <USBPD_PE_StateMachine_SRC+0x79c>
 8001bf2:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8001bf6:	2814      	cmp	r0, #20
 8001bf8:	d02c      	beq.n	8001c54 <USBPD_PE_StateMachine_SRC+0x90c>
 8001bfa:	88a9      	ldrh	r1, [r5, #4]
 8001bfc:	0bc8      	lsrs	r0, r1, #15
 8001bfe:	d003      	beq.n	8001c08 <USBPD_PE_StateMachine_SRC+0x8c0>
 8001c00:	4630      	mov	r0, r6
 8001c02:	f7ff f950 	bl	8000ea6 <PE_Check_ExtendedMessage>
 8001c06:	e788      	b.n	8001b1a <USBPD_PE_StateMachine_SRC+0x7d2>
 8001c08:	f001 011f 	and.w	r1, r1, #31
 8001c0c:	2910      	cmp	r1, #16
 8001c0e:	f47f af69 	bne.w	8001ae4 <USBPD_PE_StateMachine_SRC+0x79c>
 8001c12:	2014      	movs	r0, #20
 8001c14:	f88d 0004 	strb.w	r0, [sp, #4]
 8001c18:	2400      	movs	r4, #0
 8001c1a:	f000 f872 	bl	8001d02 <.text_13+0x6>
 8001c1e:	2000      	movs	r0, #0
 8001c20:	83f0      	strh	r0, [r6, #30]
 8001c22:	2103      	movs	r1, #3
 8001c24:	7471      	strb	r1, [r6, #17]
 8001c26:	2159      	movs	r1, #89	@ 0x59
 8001c28:	e547      	b.n	80016ba <USBPD_PE_StateMachine_SRC+0x372>
 8001c2a:	4630      	mov	r0, r6
 8001c2c:	f7ff f9a9 	bl	8000f82 <PE_SubStateMachine_ExtendedMessages>
 8001c30:	e49d      	b.n	800156e <USBPD_PE_StateMachine_SRC+0x226>
 8001c32:	a901      	add	r1, sp, #4
 8001c34:	4630      	mov	r0, r6
 8001c36:	f7fe ff1d 	bl	8000a74 <PE_SubStateMachine_Generic>
 8001c3a:	e498      	b.n	800156e <USBPD_PE_StateMachine_SRC+0x226>
 8001c3c:	f000 f9aa 	bl	8001f94 <PE_SubStateMachine_VconnSwap>
 8001c40:	4604      	mov	r4, r0
 8001c42:	f000 f845 	bl	8001cd0 <.text_8>
 8001c46:	bf0e      	itee	eq
 8001c48:	2101      	moveq	r1, #1
 8001c4a:	6830      	ldrne	r0, [r6, #0]
 8001c4c:	6801      	ldrne	r1, [r0, #0]
 8001c4e:	4640      	mov	r0, r8
 8001c50:	f001 f93b 	bl	8002eca <USBPD_PRL_SOPCapability>
 8001c54:	e48c      	b.n	8001570 <USBPD_PE_StateMachine_SRC+0x228>
 8001c56:	6970      	ldr	r0, [r6, #20]
 8001c58:	f3c0 3040 	ubfx	r0, r0, #13, #1
 8001c5c:	b1b0      	cbz	r0, 8001c8c <USBPD_PE_StateMachine_SRC+0x944>
 8001c5e:	6970      	ldr	r0, [r6, #20]
 8001c60:	f3c0 3080 	ubfx	r0, r0, #14, #1
 8001c64:	b138      	cbz	r0, 8001c76 <USBPD_PE_StateMachine_SRC+0x92e>
 8001c66:	7c30      	ldrb	r0, [r6, #16]
 8001c68:	215b      	movs	r1, #91	@ 0x5b
 8001c6a:	f7fe fc3b 	bl	80004e4 <USBPD_PE_Notification>
 8001c6e:	6970      	ldr	r0, [r6, #20]
 8001c70:	f420 4080 	bic.w	r0, r0, #16384	@ 0x4000
 8001c74:	6170      	str	r0, [r6, #20]
 8001c76:	2003      	movs	r0, #3
 8001c78:	7cb1      	ldrb	r1, [r6, #18]
 8001c7a:	7470      	strb	r0, [r6, #17]
 8001c7c:	2903      	cmp	r1, #3
 8001c7e:	d004      	beq.n	8001c8a <USBPD_PE_StateMachine_SRC+0x942>
 8001c80:	f000 f81e 	bl	8001cc0 <.text_7>
 8001c84:	2203      	movs	r2, #3
 8001c86:	2004      	movs	r0, #4
 8001c88:	47a0      	blx	r4
 8001c8a:	2401      	movs	r4, #1
 8001c8c:	6970      	ldr	r0, [r6, #20]
 8001c8e:	f420 5000 	bic.w	r0, r0, #8192	@ 0x2000
 8001c92:	2c00      	cmp	r4, #0
 8001c94:	6170      	str	r0, [r6, #20]
 8001c96:	f43f aba8 	beq.w	80013ea <USBPD_PE_StateMachine_SRC+0xa2>
 8001c9a:	e48d      	b.n	80015b8 <USBPD_PE_StateMachine_SRC+0x270>

08001c9c <.text_3>:
 8001c9c:	20000338 	.word	0x20000338

08001ca0 <.text_4>:
 8001ca0:	20000000 	.word	0x20000000

08001ca4 <.text_5>:
 8001ca4:	2003      	movs	r0, #3
 8001ca6:	7470      	strb	r0, [r6, #17]
 8001ca8:	2400      	movs	r4, #0
 8001caa:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8001cae:	2814      	cmp	r0, #20
 8001cb0:	4770      	bx	lr

08001cb2 <.text_6>:
 8001cb2:	9100      	str	r1, [sp, #0]
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	7c31      	ldrb	r1, [r6, #16]
 8001cb8:	f8d9 c000 	ldr.w	ip, [r9]
 8001cbc:	2004      	movs	r0, #4

08001cbe <__iar_annotation$$tailcall>:
 8001cbe:	4760      	bx	ip

08001cc0 <.text_7>:
 8001cc0:	74b0      	strb	r0, [r6, #18]
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	9100      	str	r1, [sp, #0]
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	7c31      	ldrb	r1, [r6, #16]
 8001cca:	f8d9 4000 	ldr.w	r4, [r9]
 8001cce:	4770      	bx	lr

08001cd0 <.text_8>:
 8001cd0:	6870      	ldr	r0, [r6, #4]
 8001cd2:	6801      	ldr	r1, [r0, #0]
 8001cd4:	f3c1 30c0 	ubfx	r0, r1, #15, #1
 8001cd8:	2800      	cmp	r0, #0
 8001cda:	4770      	bx	lr

08001cdc <.text_9>:
 8001cdc:	6870      	ldr	r0, [r6, #4]
 8001cde:	6801      	ldr	r1, [r0, #0]
 8001ce0:	f021 0110 	bic.w	r1, r1, #16
 8001ce4:	6001      	str	r1, [r0, #0]
 8001ce6:	4770      	bx	lr

08001ce8 <.text_10>:
 8001ce8:	7c30      	ldrb	r0, [r6, #16]
 8001cea:	f7fe bbfb 	b.w	80004e4 <USBPD_PE_Notification>

08001cee <.text_11>:
 8001cee:	2104      	movs	r1, #4
 8001cf0:	4630      	mov	r0, r6
 8001cf2:	f7fe bffe 	b.w	8000cf2 <PE_SetPowerNegotiation>

08001cf6 <.text_12>:
 8001cf6:	4630      	mov	r0, r6
 8001cf8:	f7ff b86c 	b.w	8000dd4 <PE_Send_CtrlMessage>

08001cfc <.text_13>:
 8001cfc:	2114      	movs	r1, #20
 8001cfe:	f88d 1004 	strb.w	r1, [sp, #4]
 8001d02:	4630      	mov	r0, r6
 8001d04:	f7fe bd0c 	b.w	8000720 <PE_Clear_RxEvent>

08001d08 <.text_14>:
 8001d08:	2206      	movs	r2, #6
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	4630      	mov	r0, r6
 8001d0e:	f7fe bfe9 	b.w	8000ce4 <PE_CallHardResetCallback>

08001d12 <PE_Send_SRCCapabilities>:
 8001d12:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8001d14:	4604      	mov	r4, r0
 8001d16:	2000      	movs	r0, #0
 8001d18:	9002      	str	r0, [sp, #8]
 8001d1a:	460d      	mov	r5, r1
 8001d1c:	68a6      	ldr	r6, [r4, #8]
 8001d1e:	7c20      	ldrb	r0, [r4, #16]
 8001d20:	6977      	ldr	r7, [r6, #20]
 8001d22:	ab02      	add	r3, sp, #8
 8001d24:	f104 028d 	add.w	r2, r4, #141	@ 0x8d
 8001d28:	2100      	movs	r1, #0
 8001d2a:	47b8      	blx	r7
 8001d2c:	9802      	ldr	r0, [sp, #8]
 8001d2e:	1c80      	adds	r0, r0, #2
 8001d30:	9002      	str	r0, [sp, #8]
 8001d32:	9802      	ldr	r0, [sp, #8]
 8001d34:	2104      	movs	r1, #4
 8001d36:	f7ff f809 	bl	8000d4c <PE_CheckDataSizeFromGetDataInfo>
 8001d3a:	b998      	cbnz	r0, 8001d64 <PE_Send_SRCCapabilities+0x52>
 8001d3c:	6860      	ldr	r0, [r4, #4]
 8001d3e:	6801      	ldr	r1, [r0, #0]
 8001d40:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8001d44:	2800      	cmp	r0, #0
 8001d46:	d00d      	beq.n	8001d64 <PE_Send_SRCCapabilities+0x52>
 8001d48:	9802      	ldr	r0, [sp, #8]
 8001d4a:	9501      	str	r5, [sp, #4]
 8001d4c:	b280      	uxth	r0, r0
 8001d4e:	9000      	str	r0, [sp, #0]
 8001d50:	f104 038b 	add.w	r3, r4, #139	@ 0x8b
 8001d54:	7c20      	ldrb	r0, [r4, #16]
 8001d56:	2201      	movs	r2, #1
 8001d58:	2100      	movs	r1, #0
 8001d5a:	f001 f8b9 	bl	8002ed0 <USBPD_PRL_SendMessage>
 8001d5e:	2803      	cmp	r0, #3
 8001d60:	d0e7      	beq.n	8001d32 <PE_Send_SRCCapabilities+0x20>
 8001d62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001d64:	2010      	movs	r0, #16
 8001d66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08001d68 <PE_StateMachine_VDMCable>:
 8001d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d6a:	4605      	mov	r5, r0
 8001d6c:	b08c      	sub	sp, #48	@ 0x30
 8001d6e:	7c68      	ldrb	r0, [r5, #17]
 8001d70:	2602      	movs	r6, #2
 8001d72:	2805      	cmp	r0, #5
 8001d74:	460c      	mov	r4, r1
 8001d76:	f248 072d 	movw	r7, #32813	@ 0x802d
 8001d7a:	d002      	beq.n	8001d82 <PE_StateMachine_VDMCable+0x1a>
 8001d7c:	289a      	cmp	r0, #154	@ 0x9a
 8001d7e:	d05d      	beq.n	8001e3c <PE_StateMachine_VDMCable+0xd4>
 8001d80:	e0ea      	b.n	8001f58 <PE_StateMachine_VDMCable+0x1f0>
 8001d82:	686a      	ldr	r2, [r5, #4]
 8001d84:	7811      	ldrb	r1, [r2, #0]
 8001d86:	f001 0103 	and.w	r1, r1, #3
 8001d8a:	4628      	mov	r0, r5
 8001d8c:	f000 fa2e 	bl	80021ec <PE_ExtRevisionInteroperability_Cable>
 8001d90:	6fa8      	ldr	r0, [r5, #120]	@ 0x78
 8001d92:	0940      	lsrs	r0, r0, #5
 8001d94:	0140      	lsls	r0, r0, #5
 8001d96:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8001d9a:	f040 0001 	orr.w	r0, r0, #1
 8001d9e:	67a8      	str	r0, [r5, #120]	@ 0x78
 8001da0:	f105 0378 	add.w	r3, r5, #120	@ 0x78
 8001da4:	6868      	ldr	r0, [r5, #4]
 8001da6:	6faa      	ldr	r2, [r5, #120]	@ 0x78
 8001da8:	6801      	ldr	r1, [r0, #0]
 8001daa:	f649 003f 	movw	r0, #38975	@ 0x983f
 8001dae:	f3c1 1140 	ubfx	r1, r1, #5, #1
 8001db2:	4002      	ands	r2, r0
 8001db4:	6968      	ldr	r0, [r5, #20]
 8001db6:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001dba:	f042 427f 	orr.w	r2, r2, #4278190080	@ 0xff000000
 8001dbe:	0880      	lsrs	r0, r0, #2
 8001dc0:	67aa      	str	r2, [r5, #120]	@ 0x78
 8001dc2:	f000 0001 	and.w	r0, r0, #1
 8001dc6:	9002      	str	r0, [sp, #8]
 8001dc8:	219a      	movs	r1, #154	@ 0x9a
 8001dca:	2001      	movs	r0, #1
 8001dcc:	9101      	str	r1, [sp, #4]
 8001dce:	9000      	str	r0, [sp, #0]
 8001dd0:	220f      	movs	r2, #15
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	4628      	mov	r0, r5
 8001dd6:	f7ff f82a 	bl	8000e2e <PE_Send_DataMessage>
 8001dda:	b950      	cbnz	r0, 8001df2 <PE_StateMachine_VDMCable+0x8a>
 8001ddc:	6968      	ldr	r0, [r5, #20]
 8001dde:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 8001de2:	6168      	str	r0, [r5, #20]
 8001de4:	2151      	movs	r1, #81	@ 0x51
 8001de6:	7729      	strb	r1, [r5, #28]
 8001de8:	f248 001e 	movw	r0, #32798	@ 0x801e
 8001dec:	8468      	strh	r0, [r5, #34]	@ 0x22
 8001dee:	261e      	movs	r6, #30
 8001df0:	e0b2      	b.n	8001f58 <PE_StateMachine_VDMCable+0x1f0>
 8001df2:	2809      	cmp	r0, #9
 8001df4:	d0fc      	beq.n	8001df0 <PE_StateMachine_VDMCable+0x88>
 8001df6:	f895 008a 	ldrb.w	r0, [r5, #138]	@ 0x8a
 8001dfa:	2815      	cmp	r0, #21
 8001dfc:	bf38      	it	cc
 8001dfe:	846f      	strhcc	r7, [r5, #34]	@ 0x22
 8001e00:	d307      	bcc.n	8001e12 <PE_StateMachine_VDMCable+0xaa>
 8001e02:	68e8      	ldr	r0, [r5, #12]
 8001e04:	6944      	ldr	r4, [r0, #20]
 8001e06:	b124      	cbz	r4, 8001e12 <PE_StateMachine_VDMCable+0xaa>
 8001e08:	7c28      	ldrb	r0, [r5, #16]
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	2205      	movs	r2, #5
 8001e0e:	2101      	movs	r1, #1
 8001e10:	47a0      	blx	r4
 8001e12:	f000 f8a9 	bl	8001f68 <.text_4>
 8001e16:	d07c      	beq.n	8001f12 <PE_StateMachine_VDMCable+0x1aa>
 8001e18:	8be8      	ldrh	r0, [r5, #30]
 8001e1a:	0441      	lsls	r1, r0, #17
 8001e1c:	d00b      	beq.n	8001e36 <PE_StateMachine_VDMCable+0xce>
 8001e1e:	2008      	movs	r0, #8
 8001e20:	7468      	strb	r0, [r5, #17]
 8001e22:	8be9      	ldrh	r1, [r5, #30]
 8001e24:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8001e28:	292d      	cmp	r1, #45	@ 0x2d
 8001e2a:	bf2e      	itee	cs
 8001e2c:	262d      	movcs	r6, #45	@ 0x2d
 8001e2e:	8bee      	ldrhcc	r6, [r5, #30]
 8001e30:	f3c6 060e 	ubfxcc	r6, r6, #0, #15
 8001e34:	e090      	b.n	8001f58 <PE_StateMachine_VDMCable+0x1f0>
 8001e36:	2007      	movs	r0, #7
 8001e38:	7468      	strb	r0, [r5, #17]
 8001e3a:	e08d      	b.n	8001f58 <PE_StateMachine_VDMCable+0x1f0>
 8001e3c:	2001      	movs	r0, #1
 8001e3e:	f7fe fca2 	bl	8000786 <PE_Convert_SOPRxEvent>
 8001e42:	7822      	ldrb	r2, [r4, #0]
 8001e44:	8e29      	ldrh	r1, [r5, #48]	@ 0x30
 8001e46:	4282      	cmp	r2, r0
 8001e48:	d142      	bne.n	8001ed0 <PE_StateMachine_VDMCable+0x168>
 8001e4a:	0bc8      	lsrs	r0, r1, #15
 8001e4c:	d140      	bne.n	8001ed0 <PE_StateMachine_VDMCable+0x168>
 8001e4e:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8001e52:	2800      	cmp	r0, #0
 8001e54:	d03c      	beq.n	8001ed0 <PE_StateMachine_VDMCable+0x168>
 8001e56:	f895 0030 	ldrb.w	r0, [r5, #48]	@ 0x30
 8001e5a:	f000 001f 	and.w	r0, r0, #31
 8001e5e:	280f      	cmp	r0, #15
 8001e60:	d136      	bne.n	8001ed0 <PE_StateMachine_VDMCable+0x168>
 8001e62:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8001e64:	7887      	ldrb	r7, [r0, #2]
 8001e66:	f007 011f 	and.w	r1, r7, #31
 8001e6a:	2901      	cmp	r1, #1
 8001e6c:	d12c      	bne.n	8001ec8 <PE_StateMachine_VDMCable+0x160>
 8001e6e:	f3c7 1081 	ubfx	r0, r7, #6, #2
 8001e72:	b348      	cbz	r0, 8001ec8 <PE_StateMachine_VDMCable+0x160>
 8001e74:	8e28      	ldrh	r0, [r5, #48]	@ 0x30
 8001e76:	f3c0 1181 	ubfx	r1, r0, #6, #2
 8001e7a:	4628      	mov	r0, r5
 8001e7c:	f000 f9b6 	bl	80021ec <PE_ExtRevisionInteroperability_Cable>
 8001e80:	68e9      	ldr	r1, [r5, #12]
 8001e82:	6948      	ldr	r0, [r1, #20]
 8001e84:	b1f0      	cbz	r0, 8001ec4 <PE_StateMachine_VDMCable+0x15c>
 8001e86:	f3c7 1081 	ubfx	r0, r7, #6, #2
 8001e8a:	2801      	cmp	r0, #1
 8001e8c:	d11a      	bne.n	8001ec4 <PE_StateMachine_VDMCable+0x15c>
 8001e8e:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8001e90:	1d81      	adds	r1, r0, #6
 8001e92:	7c28      	ldrb	r0, [r5, #16]
 8001e94:	aa03      	add	r2, sp, #12
 8001e96:	f000 fe8d 	bl	8002bb4 <PE_SVDM_CheckIdentity>
 8001e9a:	b978      	cbnz	r0, 8001ebc <PE_StateMachine_VDMCable+0x154>
 8001e9c:	68ee      	ldr	r6, [r5, #12]
 8001e9e:	7c28      	ldrb	r0, [r5, #16]
 8001ea0:	f3c7 1281 	ubfx	r2, r7, #6, #2
 8001ea4:	6977      	ldr	r7, [r6, #20]
 8001ea6:	ab03      	add	r3, sp, #12
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	47b8      	blx	r7
 8001eac:	7c28      	ldrb	r0, [r5, #16]
 8001eae:	2152      	movs	r1, #82	@ 0x52
 8001eb0:	f7fe fb18 	bl	80004e4 <USBPD_PE_Notification>
 8001eb4:	2014      	movs	r0, #20
 8001eb6:	f885 008a 	strb.w	r0, [r5, #138]	@ 0x8a
 8001eba:	e003      	b.n	8001ec4 <PE_StateMachine_VDMCable+0x15c>
 8001ebc:	7c28      	ldrb	r0, [r5, #16]
 8001ebe:	211b      	movs	r1, #27
 8001ec0:	f7fe fb10 	bl	80004e4 <USBPD_PE_Notification>
 8001ec4:	f000 f856 	bl	8001f74 <.text_5>
 8001ec8:	7820      	ldrb	r0, [r4, #0]
 8001eca:	2814      	cmp	r0, #20
 8001ecc:	d10d      	bne.n	8001eea <PE_StateMachine_VDMCable+0x182>
 8001ece:	e043      	b.n	8001f58 <PE_StateMachine_VDMCable+0x1f0>
 8001ed0:	f001 011f 	and.w	r1, r1, #31
 8001ed4:	2910      	cmp	r1, #16
 8001ed6:	d10e      	bne.n	8001ef6 <PE_StateMachine_VDMCable+0x18e>
 8001ed8:	f000 f84c 	bl	8001f74 <.text_5>
 8001edc:	2159      	movs	r1, #89	@ 0x59
 8001ede:	7c28      	ldrb	r0, [r5, #16]
 8001ee0:	f7fe fb00 	bl	80004e4 <USBPD_PE_Notification>
 8001ee4:	7820      	ldrb	r0, [r4, #0]
 8001ee6:	2814      	cmp	r0, #20
 8001ee8:	d036      	beq.n	8001f58 <PE_StateMachine_VDMCable+0x1f0>
 8001eea:	2114      	movs	r1, #20
 8001eec:	7021      	strb	r1, [r4, #0]
 8001eee:	4628      	mov	r0, r5
 8001ef0:	f7fe fc16 	bl	8000720 <PE_Clear_RxEvent>
 8001ef4:	e030      	b.n	8001f58 <PE_StateMachine_VDMCable+0x1f0>
 8001ef6:	8c68      	ldrh	r0, [r5, #34]	@ 0x22
 8001ef8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8001efc:	d12c      	bne.n	8001f58 <PE_StateMachine_VDMCable+0x1f0>
 8001efe:	2100      	movs	r1, #0
 8001f00:	8469      	strh	r1, [r5, #34]	@ 0x22
 8001f02:	f000 f831 	bl	8001f68 <.text_4>
 8001f06:	d108      	bne.n	8001f1a <PE_StateMachine_VDMCable+0x1b2>
 8001f08:	68e8      	ldr	r0, [r5, #12]
 8001f0a:	6944      	ldr	r4, [r0, #20]
 8001f0c:	b10c      	cbz	r4, 8001f12 <PE_StateMachine_VDMCable+0x1aa>
 8001f0e:	f000 f826 	bl	8001f5e <.text_3>
 8001f12:	2003      	movs	r0, #3
 8001f14:	7468      	strb	r0, [r5, #17]
 8001f16:	2600      	movs	r6, #0
 8001f18:	e01e      	b.n	8001f58 <PE_StateMachine_VDMCable+0x1f0>
 8001f1a:	6868      	ldr	r0, [r5, #4]
 8001f1c:	6801      	ldr	r1, [r0, #0]
 8001f1e:	f3c1 6081 	ubfx	r0, r1, #26, #2
 8001f22:	2802      	cmp	r0, #2
 8001f24:	d10e      	bne.n	8001f44 <PE_StateMachine_VDMCable+0x1dc>
 8001f26:	6869      	ldr	r1, [r5, #4]
 8001f28:	680a      	ldr	r2, [r1, #0]
 8001f2a:	2001      	movs	r0, #1
 8001f2c:	f360 629b 	bfi	r2, r0, #26, #2
 8001f30:	600a      	str	r2, [r1, #0]
 8001f32:	2101      	movs	r1, #1
 8001f34:	7c28      	ldrb	r0, [r5, #16]
 8001f36:	f000 ffa8 	bl	8002e8a <USBPD_PRL_CBL_SetHeaderSpecification>
 8001f3a:	846f      	strh	r7, [r5, #34]	@ 0x22
 8001f3c:	2008      	movs	r0, #8
 8001f3e:	262d      	movs	r6, #45	@ 0x2d
 8001f40:	7468      	strb	r0, [r5, #17]
 8001f42:	e007      	b.n	8001f54 <PE_StateMachine_VDMCable+0x1ec>
 8001f44:	68e8      	ldr	r0, [r5, #12]
 8001f46:	6944      	ldr	r4, [r0, #20]
 8001f48:	b10c      	cbz	r4, 8001f4e <PE_StateMachine_VDMCable+0x1e6>
 8001f4a:	f000 f808 	bl	8001f5e <.text_3>
 8001f4e:	2007      	movs	r0, #7
 8001f50:	7468      	strb	r0, [r5, #17]
 8001f52:	2600      	movs	r6, #0
 8001f54:	2000      	movs	r0, #0
 8001f56:	7728      	strb	r0, [r5, #28]
 8001f58:	4630      	mov	r0, r6
 8001f5a:	b00d      	add	sp, #52	@ 0x34
 8001f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f5e <.text_3>:
 8001f5e:	7c28      	ldrb	r0, [r5, #16]
 8001f60:	2300      	movs	r3, #0
 8001f62:	2204      	movs	r2, #4
 8001f64:	2101      	movs	r1, #1

08001f66 <__iar_annotation$$tailcall>:
 8001f66:	4720      	bx	r4

08001f68 <.text_4>:
 8001f68:	6868      	ldr	r0, [r5, #4]
 8001f6a:	6801      	ldr	r1, [r0, #0]
 8001f6c:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8001f70:	2803      	cmp	r0, #3
 8001f72:	4770      	bx	lr

08001f74 <.text_5>:
 8001f74:	2000      	movs	r0, #0
 8001f76:	8468      	strh	r0, [r5, #34]	@ 0x22
 8001f78:	6868      	ldr	r0, [r5, #4]
 8001f7a:	6801      	ldr	r1, [r0, #0]
 8001f7c:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8001f80:	2803      	cmp	r0, #3
 8001f82:	d102      	bne.n	8001f8a <.text_5+0x16>
 8001f84:	7468      	strb	r0, [r5, #17]
 8001f86:	2600      	movs	r6, #0
 8001f88:	4770      	bx	lr
 8001f8a:	2007      	movs	r0, #7
 8001f8c:	2600      	movs	r6, #0
 8001f8e:	7468      	strb	r0, [r5, #17]
 8001f90:	772e      	strb	r6, [r5, #28]
 8001f92:	4770      	bx	lr

08001f94 <PE_SubStateMachine_VconnSwap>:
 8001f94:	b538      	push	{r3, r4, r5, lr}
 8001f96:	4604      	mov	r4, r0
 8001f98:	2502      	movs	r5, #2
 8001f9a:	7c60      	ldrb	r0, [r4, #17]
 8001f9c:	289d      	cmp	r0, #157	@ 0x9d
 8001f9e:	d010      	beq.n	8001fc2 <PE_SubStateMachine_VconnSwap+0x2e>
 8001fa0:	d30e      	bcc.n	8001fc0 <PE_SubStateMachine_VconnSwap+0x2c>
 8001fa2:	289f      	cmp	r0, #159	@ 0x9f
 8001fa4:	d054      	beq.n	8002050 <PE_SubStateMachine_VconnSwap+0xbc>
 8001fa6:	d33b      	bcc.n	8002020 <PE_SubStateMachine_VconnSwap+0x8c>
 8001fa8:	28a1      	cmp	r0, #161	@ 0xa1
 8001faa:	f000 807e 	beq.w	80020aa <PE_SubStateMachine_VconnSwap+0x116>
 8001fae:	d370      	bcc.n	8002092 <PE_SubStateMachine_VconnSwap+0xfe>
 8001fb0:	28a3      	cmp	r0, #163	@ 0xa3
 8001fb2:	f000 809a 	beq.w	80020ea <PE_SubStateMachine_VconnSwap+0x156>
 8001fb6:	f0c0 8086 	bcc.w	80020c6 <PE_SubStateMachine_VconnSwap+0x132>
 8001fba:	28a4      	cmp	r0, #164	@ 0xa4
 8001fbc:	f000 80ee 	beq.w	800219c <PE_SubStateMachine_VconnSwap+0x208>
 8001fc0:	e0f8      	b.n	80021b4 <PE_SubStateMachine_VconnSwap+0x220>
 8001fc2:	6861      	ldr	r1, [r4, #4]
 8001fc4:	6808      	ldr	r0, [r1, #0]
 8001fc6:	f400 50b8 	and.w	r0, r0, #5888	@ 0x1700
 8001fca:	f5b0 5f98 	cmp.w	r0, #4864	@ 0x1300
 8001fce:	d11f      	bne.n	8002010 <PE_SubStateMachine_VconnSwap+0x7c>
 8001fd0:	68a1      	ldr	r1, [r4, #8]
 8001fd2:	7c20      	ldrb	r0, [r4, #16]
 8001fd4:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8001fd6:	4790      	blx	r2
 8001fd8:	280a      	cmp	r0, #10
 8001fda:	d002      	beq.n	8001fe2 <PE_SubStateMachine_VconnSwap+0x4e>
 8001fdc:	280d      	cmp	r0, #13
 8001fde:	d007      	beq.n	8001ff0 <PE_SubStateMachine_VconnSwap+0x5c>
 8001fe0:	e00d      	b.n	8001ffe <PE_SubStateMachine_VconnSwap+0x6a>
 8001fe2:	6961      	ldr	r1, [r4, #20]
 8001fe4:	209e      	movs	r0, #158	@ 0x9e
 8001fe6:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
 8001fea:	7460      	strb	r0, [r4, #17]
 8001fec:	6161      	str	r1, [r4, #20]
 8001fee:	e0e1      	b.n	80021b4 <PE_SubStateMachine_VconnSwap+0x220>
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	9000      	str	r0, [sp, #0]
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	220c      	movs	r2, #12
 8001ff8:	f000 f8f4 	bl	80021e4 <.text_10>
 8001ffc:	e0da      	b.n	80021b4 <PE_SubStateMachine_VconnSwap+0x220>
 8001ffe:	2000      	movs	r0, #0
 8002000:	9000      	str	r0, [sp, #0]
 8002002:	2303      	movs	r3, #3
 8002004:	2204      	movs	r2, #4
 8002006:	f000 f8ed 	bl	80021e4 <.text_10>
 800200a:	2003      	movs	r0, #3
 800200c:	7460      	strb	r0, [r4, #17]
 800200e:	e005      	b.n	800201c <PE_SubStateMachine_VconnSwap+0x88>
 8002010:	6960      	ldr	r0, [r4, #20]
 8002012:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8002016:	2103      	movs	r1, #3
 8002018:	6160      	str	r0, [r4, #20]
 800201a:	7461      	strb	r1, [r4, #17]
 800201c:	2500      	movs	r5, #0
 800201e:	e0c9      	b.n	80021b4 <PE_SubStateMachine_VconnSwap+0x220>
 8002020:	2000      	movs	r0, #0
 8002022:	9000      	str	r0, [sp, #0]
 8002024:	239e      	movs	r3, #158	@ 0x9e
 8002026:	2203      	movs	r2, #3
 8002028:	f000 f8dc 	bl	80021e4 <.text_10>
 800202c:	2800      	cmp	r0, #0
 800202e:	d1f6      	bne.n	800201e <PE_SubStateMachine_VconnSwap+0x8a>
 8002030:	6860      	ldr	r0, [r4, #4]
 8002032:	6801      	ldr	r1, [r0, #0]
 8002034:	f3c1 30c0 	ubfx	r0, r1, #15, #1
 8002038:	b130      	cbz	r0, 8002048 <PE_SubStateMachine_VconnSwap+0xb4>
 800203a:	209f      	movs	r0, #159	@ 0x9f
 800203c:	7460      	strb	r0, [r4, #17]
 800203e:	f248 0196 	movw	r1, #32918	@ 0x8096
 8002042:	83e1      	strh	r1, [r4, #30]
 8002044:	2596      	movs	r5, #150	@ 0x96
 8002046:	e001      	b.n	800204c <PE_SubStateMachine_VconnSwap+0xb8>
 8002048:	20a0      	movs	r0, #160	@ 0xa0
 800204a:	7460      	strb	r0, [r4, #17]
 800204c:	213f      	movs	r1, #63	@ 0x3f
 800204e:	e0a1      	b.n	8002194 <PE_SubStateMachine_VconnSwap+0x200>
 8002050:	8be0      	ldrh	r0, [r4, #30]
 8002052:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002056:	f000 8095 	beq.w	8002184 <PE_SubStateMachine_VconnSwap+0x1f0>
 800205a:	780a      	ldrb	r2, [r1, #0]
 800205c:	2a11      	cmp	r2, #17
 800205e:	bf01      	itttt	eq
 8002060:	8e22      	ldrheq	r2, [r4, #48]	@ 0x30
 8002062:	f24f 001f 	movweq	r0, #61471	@ 0xf01f
 8002066:	4002      	andeq	r2, r0
 8002068:	2a06      	cmpeq	r2, #6
 800206a:	d111      	bne.n	8002090 <PE_SubStateMachine_VconnSwap+0xfc>
 800206c:	f000 f8ab 	bl	80021c6 <.text_8>
 8002070:	68a0      	ldr	r0, [r4, #8]
 8002072:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8002074:	b112      	cbz	r2, 800207c <PE_SubStateMachine_VconnSwap+0xe8>
 8002076:	7c20      	ldrb	r0, [r4, #16]
 8002078:	2100      	movs	r1, #0
 800207a:	4790      	blx	r2
 800207c:	f000 f89c 	bl	80021b8 <.text_7>
 8002080:	2142      	movs	r1, #66	@ 0x42
 8002082:	7c20      	ldrb	r0, [r4, #16]
 8002084:	f7fe fa2e 	bl	80004e4 <USBPD_PE_Notification>
 8002088:	2500      	movs	r5, #0
 800208a:	8465      	strh	r5, [r4, #34]	@ 0x22
 800208c:	f884 508a 	strb.w	r5, [r4, #138]	@ 0x8a
 8002090:	e090      	b.n	80021b4 <PE_SubStateMachine_VconnSwap+0x220>
 8002092:	68a0      	ldr	r0, [r4, #8]
 8002094:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8002096:	b112      	cbz	r2, 800209e <PE_SubStateMachine_VconnSwap+0x10a>
 8002098:	7c20      	ldrb	r0, [r4, #16]
 800209a:	2101      	movs	r1, #1
 800209c:	4790      	blx	r2
 800209e:	20a1      	movs	r0, #161	@ 0xa1
 80020a0:	2100      	movs	r1, #0
 80020a2:	7460      	strb	r0, [r4, #17]
 80020a4:	f884 108a 	strb.w	r1, [r4, #138]	@ 0x8a
 80020a8:	e084      	b.n	80021b4 <PE_SubStateMachine_VconnSwap+0x220>
 80020aa:	2000      	movs	r0, #0
 80020ac:	9000      	str	r0, [sp, #0]
 80020ae:	2303      	movs	r3, #3
 80020b0:	2206      	movs	r2, #6
 80020b2:	f000 f897 	bl	80021e4 <.text_10>
 80020b6:	2800      	cmp	r0, #0
 80020b8:	d17c      	bne.n	80021b4 <PE_SubStateMachine_VconnSwap+0x220>
 80020ba:	6960      	ldr	r0, [r4, #20]
 80020bc:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 80020c0:	6160      	str	r0, [r4, #20]
 80020c2:	2142      	movs	r1, #66	@ 0x42
 80020c4:	e066      	b.n	8002194 <PE_SubStateMachine_VconnSwap+0x200>
 80020c6:	2000      	movs	r0, #0
 80020c8:	9000      	str	r0, [sp, #0]
 80020ca:	23a3      	movs	r3, #163	@ 0xa3
 80020cc:	220b      	movs	r2, #11
 80020ce:	f000 f889 	bl	80021e4 <.text_10>
 80020d2:	2800      	cmp	r0, #0
 80020d4:	d16e      	bne.n	80021b4 <PE_SubStateMachine_VconnSwap+0x220>
 80020d6:	6960      	ldr	r0, [r4, #20]
 80020d8:	f440 5080 	orr.w	r0, r0, #4096	@ 0x1000
 80020dc:	6160      	str	r0, [r4, #20]
 80020de:	f248 011b 	movw	r1, #32795	@ 0x801b
 80020e2:	83e1      	strh	r1, [r4, #30]
 80020e4:	251b      	movs	r5, #27
 80020e6:	213e      	movs	r1, #62	@ 0x3e
 80020e8:	e054      	b.n	8002194 <PE_SubStateMachine_VconnSwap+0x200>
 80020ea:	7808      	ldrb	r0, [r1, #0]
 80020ec:	2811      	cmp	r0, #17
 80020ee:	bf04      	itt	eq
 80020f0:	8e20      	ldrheq	r0, [r4, #48]	@ 0x30
 80020f2:	f410 4f70 	tsteq.w	r0, #61440	@ 0xf000
 80020f6:	d141      	bne.n	800217c <PE_SubStateMachine_VconnSwap+0x1e8>
 80020f8:	f000 001f 	and.w	r0, r0, #31
 80020fc:	2803      	cmp	r0, #3
 80020fe:	d006      	beq.n	800210e <PE_SubStateMachine_VconnSwap+0x17a>
 8002100:	2804      	cmp	r0, #4
 8002102:	d01c      	beq.n	800213e <PE_SubStateMachine_VconnSwap+0x1aa>
 8002104:	280c      	cmp	r0, #12
 8002106:	d013      	beq.n	8002130 <PE_SubStateMachine_VconnSwap+0x19c>
 8002108:	2810      	cmp	r0, #16
 800210a:	d01f      	beq.n	800214c <PE_SubStateMachine_VconnSwap+0x1b8>
 800210c:	e036      	b.n	800217c <PE_SubStateMachine_VconnSwap+0x1e8>
 800210e:	6860      	ldr	r0, [r4, #4]
 8002110:	6802      	ldr	r2, [r0, #0]
 8002112:	f3c2 30c0 	ubfx	r0, r2, #15, #1
 8002116:	2800      	cmp	r0, #0
 8002118:	bf19      	ittee	ne
 800211a:	209f      	movne	r0, #159	@ 0x9f
 800211c:	7460      	strbne	r0, [r4, #17]
 800211e:	22a0      	moveq	r2, #160	@ 0xa0
 8002120:	7462      	strbeq	r2, [r4, #17]
 8002122:	7808      	ldrb	r0, [r1, #0]
 8002124:	2814      	cmp	r0, #20
 8002126:	d001      	beq.n	800212c <PE_SubStateMachine_VconnSwap+0x198>
 8002128:	f000 f84d 	bl	80021c6 <.text_8>
 800212c:	213f      	movs	r1, #63	@ 0x3f
 800212e:	e022      	b.n	8002176 <PE_SubStateMachine_VconnSwap+0x1e2>
 8002130:	f000 f84e 	bl	80021d0 <.text_9>
 8002134:	d001      	beq.n	800213a <PE_SubStateMachine_VconnSwap+0x1a6>
 8002136:	f000 f846 	bl	80021c6 <.text_8>
 800213a:	2140      	movs	r1, #64	@ 0x40
 800213c:	e01b      	b.n	8002176 <PE_SubStateMachine_VconnSwap+0x1e2>
 800213e:	f000 f847 	bl	80021d0 <.text_9>
 8002142:	d001      	beq.n	8002148 <PE_SubStateMachine_VconnSwap+0x1b4>
 8002144:	f000 f83f 	bl	80021c6 <.text_8>
 8002148:	2141      	movs	r1, #65	@ 0x41
 800214a:	e014      	b.n	8002176 <PE_SubStateMachine_VconnSwap+0x1e2>
 800214c:	6860      	ldr	r0, [r4, #4]
 800214e:	6802      	ldr	r2, [r0, #0]
 8002150:	f3c2 30c0 	ubfx	r0, r2, #15, #1
 8002154:	b910      	cbnz	r0, 800215c <PE_SubStateMachine_VconnSwap+0x1c8>
 8002156:	20a4      	movs	r0, #164	@ 0xa4
 8002158:	7460      	strb	r0, [r4, #17]
 800215a:	e006      	b.n	800216a <PE_SubStateMachine_VconnSwap+0x1d6>
 800215c:	6960      	ldr	r0, [r4, #20]
 800215e:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8002162:	2203      	movs	r2, #3
 8002164:	6160      	str	r0, [r4, #20]
 8002166:	7462      	strb	r2, [r4, #17]
 8002168:	2500      	movs	r5, #0
 800216a:	7808      	ldrb	r0, [r1, #0]
 800216c:	2814      	cmp	r0, #20
 800216e:	d001      	beq.n	8002174 <PE_SubStateMachine_VconnSwap+0x1e0>
 8002170:	f000 f829 	bl	80021c6 <.text_8>
 8002174:	2143      	movs	r1, #67	@ 0x43
 8002176:	7c20      	ldrb	r0, [r4, #16]
 8002178:	f7fe f9b4 	bl	80004e4 <USBPD_PE_Notification>
 800217c:	8be0      	ldrh	r0, [r4, #30]
 800217e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002182:	d117      	bne.n	80021b4 <PE_SubStateMachine_VconnSwap+0x220>
 8002184:	6960      	ldr	r0, [r4, #20]
 8002186:	2103      	movs	r1, #3
 8002188:	7461      	strb	r1, [r4, #17]
 800218a:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 800218e:	6160      	str	r0, [r4, #20]
 8002190:	2500      	movs	r5, #0
 8002192:	211c      	movs	r1, #28
 8002194:	7c20      	ldrb	r0, [r4, #16]
 8002196:	f7fe f9a5 	bl	80004e4 <USBPD_PE_Notification>
 800219a:	e00b      	b.n	80021b4 <PE_SubStateMachine_VconnSwap+0x220>
 800219c:	68a0      	ldr	r0, [r4, #8]
 800219e:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80021a0:	b112      	cbz	r2, 80021a8 <PE_SubStateMachine_VconnSwap+0x214>
 80021a2:	7c20      	ldrb	r0, [r4, #16]
 80021a4:	2101      	movs	r1, #1
 80021a6:	4790      	blx	r2
 80021a8:	f000 f806 	bl	80021b8 <.text_7>
 80021ac:	f248 002d 	movw	r0, #32813	@ 0x802d
 80021b0:	2500      	movs	r5, #0
 80021b2:	8460      	strh	r0, [r4, #34]	@ 0x22
 80021b4:	4628      	mov	r0, r5
 80021b6:	bd32      	pop	{r1, r4, r5, pc}

080021b8 <.text_7>:
 80021b8:	6960      	ldr	r0, [r4, #20]
 80021ba:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 80021be:	6160      	str	r0, [r4, #20]
 80021c0:	2103      	movs	r1, #3
 80021c2:	7461      	strb	r1, [r4, #17]
 80021c4:	4770      	bx	lr

080021c6 <.text_8>:
 80021c6:	2214      	movs	r2, #20
 80021c8:	700a      	strb	r2, [r1, #0]
 80021ca:	4620      	mov	r0, r4
 80021cc:	f7fe baa8 	b.w	8000720 <PE_Clear_RxEvent>

080021d0 <.text_9>:
 80021d0:	6960      	ldr	r0, [r4, #20]
 80021d2:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 80021d6:	6160      	str	r0, [r4, #20]
 80021d8:	2203      	movs	r2, #3
 80021da:	7462      	strb	r2, [r4, #17]
 80021dc:	2500      	movs	r5, #0
 80021de:	7808      	ldrb	r0, [r1, #0]
 80021e0:	2814      	cmp	r0, #20
 80021e2:	4770      	bx	lr

080021e4 <.text_10>:
 80021e4:	2100      	movs	r1, #0
 80021e6:	4620      	mov	r0, r4
 80021e8:	f7fe bdf4 	b.w	8000dd4 <PE_Send_CtrlMessage>

080021ec <PE_ExtRevisionInteroperability_Cable>:
 80021ec:	6842      	ldr	r2, [r0, #4]
 80021ee:	6812      	ldr	r2, [r2, #0]
 80021f0:	f002 0303 	and.w	r3, r2, #3
 80021f4:	4299      	cmp	r1, r3
 80021f6:	bf28      	it	cs
 80021f8:	4619      	movcs	r1, r3
 80021fa:	f361 629b 	bfi	r2, r1, #26, #2
 80021fe:	6841      	ldr	r1, [r0, #4]
 8002200:	600a      	str	r2, [r1, #0]
 8002202:	f3c2 6181 	ubfx	r1, r2, #26, #2
 8002206:	7c00      	ldrb	r0, [r0, #16]
 8002208:	f000 be3f 	b.w	8002e8a <USBPD_PRL_CBL_SetHeaderSpecification>

0800220c <USBPD_PE_SVDM_RequestIdentity>:
 800220c:	b570      	push	{r4, r5, r6, lr}
 800220e:	f000 f854 	bl	80022ba <.text_4>
 8002212:	6823      	ldr	r3, [r4, #0]
 8002214:	685d      	ldr	r5, [r3, #4]
 8002216:	2210      	movs	r2, #16
 8002218:	f3c5 2340 	ubfx	r3, r5, #9, #1
 800221c:	2b00      	cmp	r3, #0
 800221e:	bf1e      	ittt	ne
 8002220:	68e3      	ldrne	r3, [r4, #12]
 8002222:	2b00      	cmpne	r3, #0
 8002224:	2902      	cmpne	r1, #2
 8002226:	d101      	bne.n	800222c <USBPD_PE_SVDM_RequestIdentity+0x20>
 8002228:	2202      	movs	r2, #2
 800222a:	e01b      	b.n	8002264 <USBPD_PE_SVDM_RequestIdentity+0x58>
 800222c:	f104 052e 	add.w	r5, r4, #46	@ 0x2e
 8002230:	782b      	ldrb	r3, [r5, #0]
 8002232:	b923      	cbnz	r3, 800223e <USBPD_PE_SVDM_RequestIdentity+0x32>
 8002234:	6863      	ldr	r3, [r4, #4]
 8002236:	681e      	ldr	r6, [r3, #0]
 8002238:	f3c6 3300 	ubfx	r3, r6, #12, #1
 800223c:	b90b      	cbnz	r3, 8002242 <USBPD_PE_SVDM_RequestIdentity+0x36>
 800223e:	2203      	movs	r2, #3
 8002240:	e010      	b.n	8002264 <USBPD_PE_SVDM_RequestIdentity+0x58>
 8002242:	2901      	cmp	r1, #1
 8002244:	7069      	strb	r1, [r5, #1]
 8002246:	d10d      	bne.n	8002264 <USBPD_PE_SVDM_RequestIdentity+0x58>
 8002248:	6861      	ldr	r1, [r4, #4]
 800224a:	680b      	ldr	r3, [r1, #0]
 800224c:	f3c3 2102 	ubfx	r1, r3, #8, #3
 8002250:	2901      	cmp	r1, #1
 8002252:	bf18      	it	ne
 8002254:	2903      	cmpne	r1, #3
 8002256:	d105      	bne.n	8002264 <USBPD_PE_SVDM_RequestIdentity+0x58>
 8002258:	2105      	movs	r1, #5
 800225a:	7029      	strb	r1, [r5, #0]
 800225c:	68a2      	ldr	r2, [r4, #8]
 800225e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002260:	4788      	blx	r1
 8002262:	2200      	movs	r2, #0
 8002264:	4610      	mov	r0, r2
 8002266:	bd70      	pop	{r4, r5, r6, pc}

08002268 <USBPD_PE_SVDM_RequestSVID>:
 8002268:	b570      	push	{r4, r5, r6, lr}
 800226a:	f000 f826 	bl	80022ba <.text_4>
 800226e:	68e3      	ldr	r3, [r4, #12]
 8002270:	2210      	movs	r2, #16
 8002272:	2b00      	cmp	r3, #0
 8002274:	bf14      	ite	ne
 8002276:	2902      	cmpne	r1, #2
 8002278:	2202      	moveq	r2, #2
 800227a:	d01c      	beq.n	80022b6 <USBPD_PE_SVDM_RequestSVID+0x4e>
 800227c:	f104 052e 	add.w	r5, r4, #46	@ 0x2e
 8002280:	782b      	ldrb	r3, [r5, #0]
 8002282:	b923      	cbnz	r3, 800228e <USBPD_PE_SVDM_RequestSVID+0x26>
 8002284:	6863      	ldr	r3, [r4, #4]
 8002286:	681e      	ldr	r6, [r3, #0]
 8002288:	f3c6 3300 	ubfx	r3, r6, #12, #1
 800228c:	b90b      	cbnz	r3, 8002292 <USBPD_PE_SVDM_RequestSVID+0x2a>
 800228e:	2203      	movs	r2, #3
 8002290:	e011      	b.n	80022b6 <USBPD_PE_SVDM_RequestSVID+0x4e>
 8002292:	f3c6 2302 	ubfx	r3, r6, #8, #3
 8002296:	2b03      	cmp	r3, #3
 8002298:	d10d      	bne.n	80022b6 <USBPD_PE_SVDM_RequestSVID+0x4e>
 800229a:	237f      	movs	r3, #127	@ 0x7f
 800229c:	7069      	strb	r1, [r5, #1]
 800229e:	702b      	strb	r3, [r5, #0]
 80022a0:	b129      	cbz	r1, 80022ae <USBPD_PE_SVDM_RequestSVID+0x46>
 80022a2:	2901      	cmp	r1, #1
 80022a4:	d107      	bne.n	80022b6 <USBPD_PE_SVDM_RequestSVID+0x4e>
 80022a6:	6961      	ldr	r1, [r4, #20]
 80022a8:	f3c1 4100 	ubfx	r1, r1, #16, #1
 80022ac:	b119      	cbz	r1, 80022b6 <USBPD_PE_SVDM_RequestSVID+0x4e>
 80022ae:	68a1      	ldr	r1, [r4, #8]
 80022b0:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80022b2:	4790      	blx	r2
 80022b4:	2200      	movs	r2, #0
 80022b6:	4610      	mov	r0, r2
 80022b8:	bd70      	pop	{r4, r5, r6, pc}

080022ba <.text_4>:
 80022ba:	f8df 2af0 	ldr.w	r2, [pc, #2800]	@ 8002dac <.text_34>
 80022be:	4603      	mov	r3, r0
 80022c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80022c4:	4770      	bx	lr

080022c6 <USBPD_PE_SVDM_RequestMode>:
 80022c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022c8:	f8df 3ae0 	ldr.w	r3, [pc, #2784]	@ 8002dac <.text_34>
 80022cc:	4604      	mov	r4, r0
 80022ce:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 80022d2:	68ec      	ldr	r4, [r5, #12]
 80022d4:	2310      	movs	r3, #16
 80022d6:	2c00      	cmp	r4, #0
 80022d8:	bf14      	ite	ne
 80022da:	2902      	cmpne	r1, #2
 80022dc:	2302      	moveq	r3, #2
 80022de:	d01e      	beq.n	800231e <USBPD_PE_SVDM_RequestMode+0x58>
 80022e0:	f105 062e 	add.w	r6, r5, #46	@ 0x2e
 80022e4:	7834      	ldrb	r4, [r6, #0]
 80022e6:	b924      	cbnz	r4, 80022f2 <USBPD_PE_SVDM_RequestMode+0x2c>
 80022e8:	686c      	ldr	r4, [r5, #4]
 80022ea:	6827      	ldr	r7, [r4, #0]
 80022ec:	f3c7 3400 	ubfx	r4, r7, #12, #1
 80022f0:	b90c      	cbnz	r4, 80022f6 <USBPD_PE_SVDM_RequestMode+0x30>
 80022f2:	2303      	movs	r3, #3
 80022f4:	e013      	b.n	800231e <USBPD_PE_SVDM_RequestMode+0x58>
 80022f6:	f3c7 2402 	ubfx	r4, r7, #8, #3
 80022fa:	2c03      	cmp	r4, #3
 80022fc:	d10f      	bne.n	800231e <USBPD_PE_SVDM_RequestMode+0x58>
 80022fe:	2481      	movs	r4, #129	@ 0x81
 8002300:	7071      	strb	r1, [r6, #1]
 8002302:	7034      	strb	r4, [r6, #0]
 8002304:	f8a5 2080 	strh.w	r2, [r5, #128]	@ 0x80
 8002308:	b129      	cbz	r1, 8002316 <USBPD_PE_SVDM_RequestMode+0x50>
 800230a:	2901      	cmp	r1, #1
 800230c:	d107      	bne.n	800231e <USBPD_PE_SVDM_RequestMode+0x58>
 800230e:	6969      	ldr	r1, [r5, #20]
 8002310:	f3c1 4100 	ubfx	r1, r1, #16, #1
 8002314:	b119      	cbz	r1, 800231e <USBPD_PE_SVDM_RequestMode+0x58>
 8002316:	68a9      	ldr	r1, [r5, #8]
 8002318:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 800231a:	4790      	blx	r2
 800231c:	2300      	movs	r3, #0
 800231e:	4618      	mov	r0, r3
 8002320:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08002322 <USBPD_PE_SVDM_RequestModeEnter>:
 8002322:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002324:	f000 f854 	bl	80023d0 <.text_10>
 8002328:	b90d      	cbnz	r5, 800232e <USBPD_PE_SVDM_RequestModeEnter+0xc>
 800232a:	2402      	movs	r4, #2
 800232c:	e01b      	b.n	8002366 <USBPD_PE_SVDM_RequestModeEnter+0x44>
 800232e:	f106 072e 	add.w	r7, r6, #46	@ 0x2e
 8002332:	783d      	ldrb	r5, [r7, #0]
 8002334:	b915      	cbnz	r5, 800233c <USBPD_PE_SVDM_RequestModeEnter+0x1a>
 8002336:	f000 f845 	bl	80023c4 <.text_9>
 800233a:	b90d      	cbnz	r5, 8002340 <USBPD_PE_SVDM_RequestModeEnter+0x1e>
 800233c:	2403      	movs	r4, #3
 800233e:	e012      	b.n	8002366 <USBPD_PE_SVDM_RequestModeEnter+0x44>
 8002340:	f40c 65e1 	and.w	r5, ip, #1800	@ 0x708
 8002344:	f5b5 7f42 	cmp.w	r5, #776	@ 0x308
 8002348:	d10d      	bne.n	8002366 <USBPD_PE_SVDM_RequestModeEnter+0x44>
 800234a:	2582      	movs	r5, #130	@ 0x82
 800234c:	f000 f831 	bl	80023b2 <.text_8>
 8002350:	b129      	cbz	r1, 800235e <USBPD_PE_SVDM_RequestModeEnter+0x3c>
 8002352:	2902      	cmp	r1, #2
 8002354:	d000      	beq.n	8002358 <USBPD_PE_SVDM_RequestModeEnter+0x36>
 8002356:	d206      	bcs.n	8002366 <USBPD_PE_SVDM_RequestModeEnter+0x44>
 8002358:	f3c2 4100 	ubfx	r1, r2, #16, #1
 800235c:	b119      	cbz	r1, 8002366 <USBPD_PE_SVDM_RequestModeEnter+0x44>
 800235e:	68b1      	ldr	r1, [r6, #8]
 8002360:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8002362:	4790      	blx	r2
 8002364:	2400      	movs	r4, #0
 8002366:	4620      	mov	r0, r4
 8002368:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800236a <USBPD_PE_SVDM_RequestModeExit>:
 800236a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800236c:	f000 f830 	bl	80023d0 <.text_10>
 8002370:	b90d      	cbnz	r5, 8002376 <USBPD_PE_SVDM_RequestModeExit+0xc>
 8002372:	2402      	movs	r4, #2
 8002374:	e01b      	b.n	80023ae <USBPD_PE_SVDM_RequestModeExit+0x44>
 8002376:	f106 072e 	add.w	r7, r6, #46	@ 0x2e
 800237a:	783d      	ldrb	r5, [r7, #0]
 800237c:	b915      	cbnz	r5, 8002384 <USBPD_PE_SVDM_RequestModeExit+0x1a>
 800237e:	f000 f821 	bl	80023c4 <.text_9>
 8002382:	b90d      	cbnz	r5, 8002388 <USBPD_PE_SVDM_RequestModeExit+0x1e>
 8002384:	2403      	movs	r4, #3
 8002386:	e012      	b.n	80023ae <USBPD_PE_SVDM_RequestModeExit+0x44>
 8002388:	f40c 65e1 	and.w	r5, ip, #1800	@ 0x708
 800238c:	f5b5 7f42 	cmp.w	r5, #776	@ 0x308
 8002390:	d10d      	bne.n	80023ae <USBPD_PE_SVDM_RequestModeExit+0x44>
 8002392:	2583      	movs	r5, #131	@ 0x83
 8002394:	f000 f80d 	bl	80023b2 <.text_8>
 8002398:	b129      	cbz	r1, 80023a6 <USBPD_PE_SVDM_RequestModeExit+0x3c>
 800239a:	2902      	cmp	r1, #2
 800239c:	d000      	beq.n	80023a0 <USBPD_PE_SVDM_RequestModeExit+0x36>
 800239e:	d206      	bcs.n	80023ae <USBPD_PE_SVDM_RequestModeExit+0x44>
 80023a0:	f3c2 4100 	ubfx	r1, r2, #16, #1
 80023a4:	b119      	cbz	r1, 80023ae <USBPD_PE_SVDM_RequestModeExit+0x44>
 80023a6:	68b1      	ldr	r1, [r6, #8]
 80023a8:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80023aa:	4790      	blx	r2
 80023ac:	2400      	movs	r4, #0
 80023ae:	4620      	mov	r0, r4
 80023b0:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080023b2 <.text_8>:
 80023b2:	7079      	strb	r1, [r7, #1]
 80023b4:	703d      	strb	r5, [r7, #0]
 80023b6:	f8a6 2080 	strh.w	r2, [r6, #128]	@ 0x80
 80023ba:	6972      	ldr	r2, [r6, #20]
 80023bc:	f363 1288 	bfi	r2, r3, #6, #3
 80023c0:	6172      	str	r2, [r6, #20]
 80023c2:	4770      	bx	lr

080023c4 <.text_9>:
 80023c4:	6875      	ldr	r5, [r6, #4]
 80023c6:	f8d5 c000 	ldr.w	ip, [r5]
 80023ca:	f3cc 3500 	ubfx	r5, ip, #12, #1
 80023ce:	4770      	bx	lr

080023d0 <.text_10>:
 80023d0:	f8df 49d8 	ldr.w	r4, [pc, #2520]	@ 8002dac <.text_34>
 80023d4:	4605      	mov	r5, r0
 80023d6:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
 80023da:	68f5      	ldr	r5, [r6, #12]
 80023dc:	2410      	movs	r4, #16
 80023de:	4770      	bx	lr

080023e0 <USBPD_PE_SVDM_RequestSpecific>:
 80023e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023e2:	f7ff fff5 	bl	80023d0 <.text_10>
 80023e6:	b90d      	cbnz	r5, 80023ec <USBPD_PE_SVDM_RequestSpecific+0xc>
 80023e8:	2402      	movs	r4, #2
 80023ea:	e01d      	b.n	8002428 <USBPD_PE_SVDM_RequestSpecific+0x48>
 80023ec:	f106 072e 	add.w	r7, r6, #46	@ 0x2e
 80023f0:	783d      	ldrb	r5, [r7, #0]
 80023f2:	b915      	cbnz	r5, 80023fa <USBPD_PE_SVDM_RequestSpecific+0x1a>
 80023f4:	f7ff ffe6 	bl	80023c4 <.text_9>
 80023f8:	b90d      	cbnz	r5, 80023fe <USBPD_PE_SVDM_RequestSpecific+0x1e>
 80023fa:	2403      	movs	r4, #3
 80023fc:	e014      	b.n	8002428 <USBPD_PE_SVDM_RequestSpecific+0x48>
 80023fe:	6975      	ldr	r5, [r6, #20]
 8002400:	f3c5 4500 	ubfx	r5, r5, #16, #1
 8002404:	b90d      	cbnz	r5, 800240a <USBPD_PE_SVDM_RequestSpecific+0x2a>
 8002406:	000d      	movs	r5, r1
 8002408:	d10e      	bne.n	8002428 <USBPD_PE_SVDM_RequestSpecific+0x48>
 800240a:	f3cc 2502 	ubfx	r5, ip, #8, #3
 800240e:	2d03      	cmp	r5, #3
 8002410:	d10a      	bne.n	8002428 <USBPD_PE_SVDM_RequestSpecific+0x48>
 8002412:	7079      	strb	r1, [r7, #1]
 8002414:	2400      	movs	r4, #0
 8002416:	2185      	movs	r1, #133	@ 0x85
 8002418:	7039      	strb	r1, [r7, #0]
 800241a:	f106 017c 	add.w	r1, r6, #124	@ 0x7c
 800241e:	600a      	str	r2, [r1, #0]
 8002420:	808b      	strh	r3, [r1, #4]
 8002422:	68b1      	ldr	r1, [r6, #8]
 8002424:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8002426:	4790      	blx	r2
 8002428:	4620      	mov	r0, r4
 800242a:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800242c <PE_Receive_SVDM>:
 800242c:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8002430:	8811      	ldrh	r1, [r2, #0]
 8002432:	0b09      	lsrs	r1, r1, #12
 8002434:	f001 0107 	and.w	r1, r1, #7
 8002438:	1e4b      	subs	r3, r1, #1
 800243a:	f890 102d 	ldrb.w	r1, [r0, #45]	@ 0x2d
 800243e:	f880 32d0 	strb.w	r3, [r0, #720]	@ 0x2d0
 8002442:	2900      	cmp	r1, #0
 8002444:	d000      	beq.n	8002448 <PE_Receive_SVDM+0x1c>
 8002446:	4770      	bx	lr
 8002448:	b570      	push	{r4, r5, r6, lr}
 800244a:	e012      	b.n	8002472 <PE_Receive_SVDM+0x46>
 800244c:	6853      	ldr	r3, [r2, #4]
 800244e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8002452:	799c      	ldrb	r4, [r3, #6]
 8002454:	79dd      	ldrb	r5, [r3, #7]
 8002456:	eb04 2605 	add.w	r6, r4, r5, lsl #8
 800245a:	7a1c      	ldrb	r4, [r3, #8]
 800245c:	7a5b      	ldrb	r3, [r3, #9]
 800245e:	eb06 4604 	add.w	r6, r6, r4, lsl #16
 8002462:	eb00 0481 	add.w	r4, r0, r1, lsl #2
 8002466:	eb06 6603 	add.w	r6, r6, r3, lsl #24
 800246a:	1c49      	adds	r1, r1, #1
 800246c:	f8c4 62b8 	str.w	r6, [r4, #696]	@ 0x2b8
 8002470:	b2c9      	uxtb	r1, r1
 8002472:	f890 32d0 	ldrb.w	r3, [r0, #720]	@ 0x2d0
 8002476:	4299      	cmp	r1, r3
 8002478:	dbe8      	blt.n	800244c <PE_Receive_SVDM+0x20>
 800247a:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 800247c:	f003 041f 	and.w	r4, r3, #31
 8002480:	1e64      	subs	r4, r4, #1
 8002482:	f248 010f 	movw	r1, #32783	@ 0x800f
 8002486:	d003      	beq.n	8002490 <PE_Receive_SVDM+0x64>
 8002488:	1e64      	subs	r4, r4, #1
 800248a:	2c03      	cmp	r4, #3
 800248c:	d918      	bls.n	80024c0 <PE_Receive_SVDM+0x94>
 800248e:	bd70      	pop	{r4, r5, r6, pc}
 8002490:	2350      	movs	r3, #80	@ 0x50
 8002492:	6844      	ldr	r4, [r0, #4]
 8002494:	7703      	strb	r3, [r0, #28]
 8002496:	6825      	ldr	r5, [r4, #0]
 8002498:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 800249a:	f000 f837 	bl	800250c <.text_13>
 800249e:	da03      	bge.n	80024a8 <PE_Receive_SVDM+0x7c>
 80024a0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80024a2:	f3c2 3241 	ubfx	r2, r2, #13, #2
 80024a6:	e003      	b.n	80024b0 <PE_Receive_SVDM+0x84>
 80024a8:	6842      	ldr	r2, [r0, #4]
 80024aa:	6813      	ldr	r3, [r2, #0]
 80024ac:	f3c3 1240 	ubfx	r2, r3, #5, #1
 80024b0:	6843      	ldr	r3, [r0, #4]
 80024b2:	681c      	ldr	r4, [r3, #0]
 80024b4:	f362 1445 	bfi	r4, r2, #5, #1
 80024b8:	601c      	str	r4, [r3, #0]
 80024ba:	83c1      	strh	r1, [r0, #30]
 80024bc:	2175      	movs	r1, #117	@ 0x75
 80024be:	e023      	b.n	8002508 <PE_Receive_SVDM+0xdc>
 80024c0:	6844      	ldr	r4, [r0, #4]
 80024c2:	6825      	ldr	r5, [r4, #0]
 80024c4:	f000 f822 	bl	800250c <.text_13>
 80024c8:	6844      	ldr	r4, [r0, #4]
 80024ca:	bfba      	itte	lt
 80024cc:	6c93      	ldrlt	r3, [r2, #72]	@ 0x48
 80024ce:	f3c3 3341 	ubfxlt	r3, r3, #13, #2
 80024d2:	f3c5 1340 	ubfxge	r3, r5, #5, #1
 80024d6:	f363 1545 	bfi	r5, r3, #5, #1
 80024da:	6025      	str	r5, [r4, #0]
 80024dc:	83c1      	strh	r1, [r0, #30]
 80024de:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80024e0:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 80024e4:	6491      	str	r1, [r2, #72]	@ 0x48
 80024e6:	6841      	ldr	r1, [r0, #4]
 80024e8:	680b      	ldr	r3, [r1, #0]
 80024ea:	f3c3 1140 	ubfx	r1, r3, #5, #1
 80024ee:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 80024f0:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 80024f4:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
 80024f8:	6493      	str	r3, [r2, #72]	@ 0x48
 80024fa:	2102      	movs	r1, #2
 80024fc:	f361 1387 	bfi	r3, r1, #6, #2
 8002500:	6493      	str	r3, [r2, #72]	@ 0x48
 8002502:	2250      	movs	r2, #80	@ 0x50
 8002504:	7702      	strb	r2, [r0, #28]
 8002506:	2176      	movs	r1, #118	@ 0x76
 8002508:	7441      	strb	r1, [r0, #17]
 800250a:	bd70      	pop	{r4, r5, r6, pc}

0800250c <.text_13>:
 800250c:	f3c3 3341 	ubfx	r3, r3, #13, #2
 8002510:	f3c5 1440 	ubfx	r4, r5, #5, #1
 8002514:	42a3      	cmp	r3, r4
 8002516:	4770      	bx	lr

08002518 <PE_StateMachine_VDM>:
 8002518:	e92d 47f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800251c:	b091      	sub	sp, #68	@ 0x44
 800251e:	4606      	mov	r6, r0
 8002520:	460c      	mov	r4, r1
 8002522:	7c70      	ldrb	r0, [r6, #17]
 8002524:	2875      	cmp	r0, #117	@ 0x75
 8002526:	f04f 0802 	mov.w	r8, #2
 800252a:	f106 072d 	add.w	r7, r6, #45	@ 0x2d
 800252e:	f106 0530 	add.w	r5, r6, #48	@ 0x30
 8002532:	f248 0a32 	movw	sl, #32818	@ 0x8032
 8002536:	f248 091e 	movw	r9, #32798	@ 0x801e
 800253a:	d021      	beq.n	8002580 <PE_StateMachine_VDM+0x68>
 800253c:	2876      	cmp	r0, #118	@ 0x76
 800253e:	f000 8091 	beq.w	8002664 <PE_StateMachine_VDM+0x14c>
 8002542:	287f      	cmp	r0, #127	@ 0x7f
 8002544:	f000 809e 	beq.w	8002684 <PE_StateMachine_VDM+0x16c>
 8002548:	2881      	cmp	r0, #129	@ 0x81
 800254a:	f000 80ec 	beq.w	8002726 <PE_StateMachine_VDM+0x20e>
 800254e:	2882      	cmp	r0, #130	@ 0x82
 8002550:	f000 8145 	beq.w	80027de <PE_StateMachine_VDM+0x2c6>
 8002554:	2883      	cmp	r0, #131	@ 0x83
 8002556:	f000 81a1 	beq.w	800289c <PE_StateMachine_VDM+0x384>
 800255a:	2885      	cmp	r0, #133	@ 0x85
 800255c:	f000 8203 	beq.w	8002966 <PE_StateMachine_VDM+0x44e>
 8002560:	2889      	cmp	r0, #137	@ 0x89
 8002562:	f000 80b0 	beq.w	80026c6 <PE_StateMachine_VDM+0x1ae>
 8002566:	288b      	cmp	r0, #139	@ 0x8b
 8002568:	f000 80fe 	beq.w	8002768 <PE_StateMachine_VDM+0x250>
 800256c:	288c      	cmp	r0, #140	@ 0x8c
 800256e:	f000 8146 	beq.w	80027fe <PE_StateMachine_VDM+0x2e6>
 8002572:	288d      	cmp	r0, #141	@ 0x8d
 8002574:	f000 81a9 	beq.w	80028ca <PE_StateMachine_VDM+0x3b2>
 8002578:	288f      	cmp	r0, #143	@ 0x8f
 800257a:	f000 8230 	beq.w	80029de <PE_StateMachine_VDM+0x4c6>
 800257e:	e296      	b.n	8002aae <PE_StateMachine_VDM+0x596>
 8002580:	8bf0      	ldrh	r0, [r6, #30]
 8002582:	2401      	movs	r4, #1
 8002584:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002588:	f000 828d 	beq.w	8002aa6 <PE_StateMachine_VDM+0x58e>
 800258c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800258e:	0940      	lsrs	r0, r0, #5
 8002590:	0140      	lsls	r0, r0, #5
 8002592:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8002596:	f040 0001 	orr.w	r0, r0, #1
 800259a:	f000 fac3 	bl	8002b24 <.text_25>
 800259e:	f421 41c0 	bic.w	r1, r1, #24576	@ 0x6000
 80025a2:	ea41 3140 	orr.w	r1, r1, r0, lsl #13
 80025a6:	64a9      	str	r1, [r5, #72]	@ 0x48
 80025a8:	6870      	ldr	r0, [r6, #4]
 80025aa:	7802      	ldrb	r2, [r0, #0]
 80025ac:	f002 020b 	and.w	r2, r2, #11
 80025b0:	2a09      	cmp	r2, #9
 80025b2:	bf1f      	itttt	ne
 80025b4:	68f0      	ldrne	r0, [r6, #12]
 80025b6:	2800      	cmpne	r0, #0
 80025b8:	6802      	ldrne	r2, [r0, #0]
 80025ba:	2a00      	cmpne	r2, #0
 80025bc:	d040      	beq.n	8002640 <PE_StateMachine_VDM+0x128>
 80025be:	0c09      	lsrs	r1, r1, #16
 80025c0:	f5b1 4f7f 	cmp.w	r1, #65280	@ 0xff00
 80025c4:	d13c      	bne.n	8002640 <PE_StateMachine_VDM+0x128>
 80025c6:	7c30      	ldrb	r0, [r6, #16]
 80025c8:	4669      	mov	r1, sp
 80025ca:	4790      	blx	r2
 80025cc:	2803      	cmp	r0, #3
 80025ce:	d002      	beq.n	80025d6 <PE_StateMachine_VDM+0xbe>
 80025d0:	280f      	cmp	r0, #15
 80025d2:	d004      	beq.n	80025de <PE_StateMachine_VDM+0xc6>
 80025d4:	e034      	b.n	8002640 <PE_StateMachine_VDM+0x128>
 80025d6:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 80025d8:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 80025dc:	e033      	b.n	8002646 <PE_StateMachine_VDM+0x12e>
 80025de:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 80025e0:	f364 1187 	bfi	r1, r4, #6, #2
 80025e4:	64a9      	str	r1, [r5, #72]	@ 0x48
 80025e6:	a809      	add	r0, sp, #36	@ 0x24
 80025e8:	9900      	ldr	r1, [sp, #0]
 80025ea:	6041      	str	r1, [r0, #4]
 80025ec:	2404      	movs	r4, #4
 80025ee:	9901      	ldr	r1, [sp, #4]
 80025f0:	6081      	str	r1, [r0, #8]
 80025f2:	9902      	ldr	r1, [sp, #8]
 80025f4:	60c1      	str	r1, [r0, #12]
 80025f6:	f89d 1020 	ldrb.w	r1, [sp, #32]
 80025fa:	f3c1 0140 	ubfx	r1, r1, #1, #1
 80025fe:	b111      	cbz	r1, 8002606 <PE_StateMachine_VDM+0xee>
 8002600:	9904      	ldr	r1, [sp, #16]
 8002602:	6101      	str	r1, [r0, #16]
 8002604:	2405      	movs	r4, #5
 8002606:	f89d 1020 	ldrb.w	r1, [sp, #32]
 800260a:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 800260e:	b121      	cbz	r1, 800261a <PE_StateMachine_VDM+0x102>
 8002610:	9906      	ldr	r1, [sp, #24]
 8002612:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
 8002616:	1c64      	adds	r4, r4, #1
 8002618:	b2e4      	uxtb	r4, r4
 800261a:	f89d 1020 	ldrb.w	r1, [sp, #32]
 800261e:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8002622:	b189      	cbz	r1, 8002648 <PE_StateMachine_VDM+0x130>
 8002624:	f89d 1020 	ldrb.w	r1, [sp, #32]
 8002628:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 800262c:	b119      	cbz	r1, 8002636 <PE_StateMachine_VDM+0x11e>
 800262e:	2100      	movs	r1, #0
 8002630:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
 8002634:	1c64      	adds	r4, r4, #1
 8002636:	9907      	ldr	r1, [sp, #28]
 8002638:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
 800263c:	1c64      	adds	r4, r4, #1
 800263e:	e003      	b.n	8002648 <PE_StateMachine_VDM+0x130>
 8002640:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 8002642:	f368 1187 	bfi	r1, r8, #6, #2
 8002646:	64a9      	str	r1, [r5, #72]	@ 0x48
 8002648:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800264a:	9009      	str	r0, [sp, #36]	@ 0x24
 800264c:	2100      	movs	r1, #0
 800264e:	9102      	str	r1, [sp, #8]
 8002650:	2203      	movs	r2, #3
 8002652:	9201      	str	r2, [sp, #4]
 8002654:	9400      	str	r4, [sp, #0]
 8002656:	ab09      	add	r3, sp, #36	@ 0x24
 8002658:	7839      	ldrb	r1, [r7, #0]
 800265a:	220f      	movs	r2, #15
 800265c:	4630      	mov	r0, r6
 800265e:	f7fe fbe6 	bl	8000e2e <PE_Send_DataMessage>
 8002662:	e224      	b.n	8002aae <PE_StateMachine_VDM+0x596>
 8002664:	2050      	movs	r0, #80	@ 0x50
 8002666:	7730      	strb	r0, [r6, #28]
 8002668:	2100      	movs	r1, #0
 800266a:	9102      	str	r1, [sp, #8]
 800266c:	2203      	movs	r2, #3
 800266e:	2001      	movs	r0, #1
 8002670:	9201      	str	r2, [sp, #4]
 8002672:	9000      	str	r0, [sp, #0]
 8002674:	f106 0378 	add.w	r3, r6, #120	@ 0x78
 8002678:	7839      	ldrb	r1, [r7, #0]
 800267a:	220f      	movs	r2, #15
 800267c:	4630      	mov	r0, r6
 800267e:	f7fe fbd6 	bl	8000e2e <PE_Send_DataMessage>
 8002682:	e214      	b.n	8002aae <PE_StateMachine_VDM+0x596>
 8002684:	6caa      	ldr	r2, [r5, #72]	@ 0x48
 8002686:	f8df 0728 	ldr.w	r0, [pc, #1832]	@ 8002db0 <.text_35>
 800268a:	f64f 7120 	movw	r1, #65312	@ 0xff20
 800268e:	400a      	ands	r2, r1
 8002690:	4302      	orrs	r2, r0
 8002692:	64aa      	str	r2, [r5, #72]	@ 0x48
 8002694:	f422 42ce 	bic.w	r2, r2, #26368	@ 0x6700
 8002698:	6870      	ldr	r0, [r6, #4]
 800269a:	6801      	ldr	r1, [r0, #0]
 800269c:	f3c1 1040 	ubfx	r0, r1, #5, #1
 80026a0:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 80026a4:	64aa      	str	r2, [r5, #72]	@ 0x48
 80026a6:	2189      	movs	r1, #137	@ 0x89
 80026a8:	f000 fa1e 	bl	8002ae8 <.text_20>
 80026ac:	f106 0378 	add.w	r3, r6, #120	@ 0x78
 80026b0:	2001      	movs	r0, #1
 80026b2:	9000      	str	r0, [sp, #0]
 80026b4:	220f      	movs	r2, #15
 80026b6:	7839      	ldrb	r1, [r7, #0]
 80026b8:	4630      	mov	r0, r6
 80026ba:	f7fe fbb8 	bl	8000e2e <PE_Send_DataMessage>
 80026be:	2800      	cmp	r0, #0
 80026c0:	d1df      	bne.n	8002682 <PE_StateMachine_VDM+0x16a>
 80026c2:	2052      	movs	r0, #82	@ 0x52
 80026c4:	e04d      	b.n	8002762 <PE_StateMachine_VDM+0x24a>
 80026c6:	f000 fa0c 	bl	8002ae2 <.text_19>
 80026ca:	7821      	ldrb	r1, [r4, #0]
 80026cc:	4281      	cmp	r1, r0
 80026ce:	d161      	bne.n	8002794 <PE_StateMachine_VDM+0x27c>
 80026d0:	8829      	ldrh	r1, [r5, #0]
 80026d2:	0bc8      	lsrs	r0, r1, #15
 80026d4:	d15e      	bne.n	8002794 <PE_StateMachine_VDM+0x27c>
 80026d6:	f000 f9fb 	bl	8002ad0 <.text_17>
 80026da:	d060      	beq.n	800279e <PE_StateMachine_VDM+0x286>
 80026dc:	f000 f9fc 	bl	8002ad8 <.text_18>
 80026e0:	d158      	bne.n	8002794 <PE_StateMachine_VDM+0x27c>
 80026e2:	7820      	ldrb	r0, [r4, #0]
 80026e4:	2814      	cmp	r0, #20
 80026e6:	d001      	beq.n	80026ec <PE_StateMachine_VDM+0x1d4>
 80026e8:	f000 fa0b 	bl	8002b02 <.text_22>
 80026ec:	f000 f9e3 	bl	8002ab6 <.text_15>
 80026f0:	2902      	cmp	r1, #2
 80026f2:	d14f      	bne.n	8002794 <PE_StateMachine_VDM+0x27c>
 80026f4:	f3c9 1081 	ubfx	r0, r9, #6, #2
 80026f8:	2800      	cmp	r0, #0
 80026fa:	d050      	beq.n	800279e <PE_StateMachine_VDM+0x286>
 80026fc:	68f1      	ldr	r1, [r6, #12]
 80026fe:	6988      	ldr	r0, [r1, #24]
 8002700:	2800      	cmp	r0, #0
 8002702:	d06b      	beq.n	80027dc <PE_StateMachine_VDM+0x2c4>
 8002704:	6868      	ldr	r0, [r5, #4]
 8002706:	1d81      	adds	r1, r0, #6
 8002708:	7c30      	ldrb	r0, [r6, #16]
 800270a:	aa08      	add	r2, sp, #32
 800270c:	f000 faf0 	bl	8002cf0 <PE_SVDM_CheckSVIDs>
 8002710:	68f4      	ldr	r4, [r6, #12]
 8002712:	7839      	ldrb	r1, [r7, #0]
 8002714:	7c30      	ldrb	r0, [r6, #16]
 8002716:	f8d4 8018 	ldr.w	r8, [r4, #24]
 800271a:	ab08      	add	r3, sp, #32
 800271c:	f3c9 1281 	ubfx	r2, r9, #6, #2
 8002720:	47c0      	blx	r8
 8002722:	2153      	movs	r1, #83	@ 0x53
 8002724:	e057      	b.n	80027d6 <PE_StateMachine_VDM+0x2be>
 8002726:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8002728:	f020 00df 	bic.w	r0, r0, #223	@ 0xdf
 800272c:	f040 0003 	orr.w	r0, r0, #3
 8002730:	64a8      	str	r0, [r5, #72]	@ 0x48
 8002732:	f106 0378 	add.w	r3, r6, #120	@ 0x78
 8002736:	f000 f9c4 	bl	8002ac2 <.text_16>
 800273a:	64a8      	str	r0, [r5, #72]	@ 0x48
 800273c:	6870      	ldr	r0, [r6, #4]
 800273e:	6caa      	ldr	r2, [r5, #72]	@ 0x48
 8002740:	6801      	ldr	r1, [r0, #0]
 8002742:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8002746:	f422 42ce 	bic.w	r2, r2, #26368	@ 0x6700
 800274a:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 800274e:	64aa      	str	r2, [r5, #72]	@ 0x48
 8002750:	218b      	movs	r1, #139	@ 0x8b
 8002752:	f000 f9c9 	bl	8002ae8 <.text_20>
 8002756:	220f      	movs	r2, #15
 8002758:	f000 f9de 	bl	8002b18 <.text_24>
 800275c:	2800      	cmp	r0, #0
 800275e:	d102      	bne.n	8002766 <PE_StateMachine_VDM+0x24e>
 8002760:	2053      	movs	r0, #83	@ 0x53
 8002762:	f000 f9c8 	bl	8002af6 <.text_21>
 8002766:	e1a2      	b.n	8002aae <PE_StateMachine_VDM+0x596>
 8002768:	f000 f9bb 	bl	8002ae2 <.text_19>
 800276c:	7821      	ldrb	r1, [r4, #0]
 800276e:	4281      	cmp	r1, r0
 8002770:	d110      	bne.n	8002794 <PE_StateMachine_VDM+0x27c>
 8002772:	8829      	ldrh	r1, [r5, #0]
 8002774:	0bc8      	lsrs	r0, r1, #15
 8002776:	d10d      	bne.n	8002794 <PE_StateMachine_VDM+0x27c>
 8002778:	f000 f9aa 	bl	8002ad0 <.text_17>
 800277c:	d00f      	beq.n	800279e <PE_StateMachine_VDM+0x286>
 800277e:	f000 f9ab 	bl	8002ad8 <.text_18>
 8002782:	d107      	bne.n	8002794 <PE_StateMachine_VDM+0x27c>
 8002784:	7820      	ldrb	r0, [r4, #0]
 8002786:	2814      	cmp	r0, #20
 8002788:	d001      	beq.n	800278e <PE_StateMachine_VDM+0x276>
 800278a:	f000 f9ba 	bl	8002b02 <.text_22>
 800278e:	f000 f992 	bl	8002ab6 <.text_15>
 8002792:	2903      	cmp	r1, #3
 8002794:	f040 80dc 	bne.w	8002950 <PE_StateMachine_VDM+0x438>
 8002798:	f3c9 1081 	ubfx	r0, r9, #6, #2
 800279c:	2800      	cmp	r0, #0
 800279e:	f000 80d7 	beq.w	8002950 <PE_StateMachine_VDM+0x438>
 80027a2:	68f1      	ldr	r1, [r6, #12]
 80027a4:	69c8      	ldr	r0, [r1, #28]
 80027a6:	2800      	cmp	r0, #0
 80027a8:	d018      	beq.n	80027dc <PE_StateMachine_VDM+0x2c4>
 80027aa:	6868      	ldr	r0, [r5, #4]
 80027ac:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 80027ae:	1d82      	adds	r2, r0, #6
 80027b0:	7c30      	ldrb	r0, [r6, #16]
 80027b2:	ab08      	add	r3, sp, #32
 80027b4:	0c09      	lsrs	r1, r1, #16
 80027b6:	f000 facf 	bl	8002d58 <PE_SVDM_CheckModes>
 80027ba:	68f4      	ldr	r4, [r6, #12]
 80027bc:	7839      	ldrb	r1, [r7, #0]
 80027be:	7c30      	ldrb	r0, [r6, #16]
 80027c0:	f8d4 801c 	ldr.w	r8, [r4, #28]
 80027c4:	ab08      	add	r3, sp, #32
 80027c6:	f3c9 1281 	ubfx	r2, r9, #6, #2
 80027ca:	47c0      	blx	r8
 80027cc:	f3c9 1081 	ubfx	r0, r9, #6, #2
 80027d0:	2801      	cmp	r0, #1
 80027d2:	d103      	bne.n	80027dc <PE_StateMachine_VDM+0x2c4>
 80027d4:	2154      	movs	r1, #84	@ 0x54
 80027d6:	7c30      	ldrb	r0, [r6, #16]
 80027d8:	f7fd fe84 	bl	80004e4 <USBPD_PE_Notification>
 80027dc:	e148      	b.n	8002a70 <PE_StateMachine_VDM+0x558>
 80027de:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80027e0:	f020 00df 	bic.w	r0, r0, #223	@ 0xdf
 80027e4:	f040 0004 	orr.w	r0, r0, #4
 80027e8:	f000 f9a3 	bl	8002b32 <.text_26>
 80027ec:	218c      	movs	r1, #140	@ 0x8c
 80027ee:	f000 f98d 	bl	8002b0c <.text_23>
 80027f2:	2800      	cmp	r0, #0
 80027f4:	d1b7      	bne.n	8002766 <PE_StateMachine_VDM+0x24e>
 80027f6:	2054      	movs	r0, #84	@ 0x54
 80027f8:	7730      	strb	r0, [r6, #28]
 80027fa:	2134      	movs	r1, #52	@ 0x34
 80027fc:	e05d      	b.n	80028ba <PE_StateMachine_VDM+0x3a2>
 80027fe:	f000 f970 	bl	8002ae2 <.text_19>
 8002802:	7821      	ldrb	r1, [r4, #0]
 8002804:	4281      	cmp	r1, r0
 8002806:	f04f 0934 	mov.w	r9, #52	@ 0x34
 800280a:	d162      	bne.n	80028d2 <PE_StateMachine_VDM+0x3ba>
 800280c:	8829      	ldrh	r1, [r5, #0]
 800280e:	0bc8      	lsrs	r0, r1, #15
 8002810:	d15f      	bne.n	80028d2 <PE_StateMachine_VDM+0x3ba>
 8002812:	f000 f95d 	bl	8002ad0 <.text_17>
 8002816:	d062      	beq.n	80028de <PE_StateMachine_VDM+0x3c6>
 8002818:	f000 f95e 	bl	8002ad8 <.text_18>
 800281c:	d159      	bne.n	80028d2 <PE_StateMachine_VDM+0x3ba>
 800281e:	7820      	ldrb	r0, [r4, #0]
 8002820:	2814      	cmp	r0, #20
 8002822:	d001      	beq.n	8002828 <PE_StateMachine_VDM+0x310>
 8002824:	f000 f96d 	bl	8002b02 <.text_22>
 8002828:	2000      	movs	r0, #0
 800282a:	7730      	strb	r0, [r6, #28]
 800282c:	6869      	ldr	r1, [r5, #4]
 800282e:	f891 a002 	ldrb.w	sl, [r1, #2]
 8002832:	f00a 001f 	and.w	r0, sl, #31
 8002836:	2804      	cmp	r0, #4
 8002838:	d14b      	bne.n	80028d2 <PE_StateMachine_VDM+0x3ba>
 800283a:	f3ca 1081 	ubfx	r0, sl, #6, #2
 800283e:	2800      	cmp	r0, #0
 8002840:	d04d      	beq.n	80028de <PE_StateMachine_VDM+0x3c6>
 8002842:	2801      	cmp	r0, #1
 8002844:	d00a      	beq.n	800285c <PE_StateMachine_VDM+0x344>
 8002846:	d312      	bcc.n	800286e <PE_StateMachine_VDM+0x356>
 8002848:	2803      	cmp	r0, #3
 800284a:	d00a      	beq.n	8002862 <PE_StateMachine_VDM+0x34a>
 800284c:	bf3f      	itttt	cc
 800284e:	6970      	ldrcc	r0, [r6, #20]
 8002850:	f420 70e0 	biccc.w	r0, r0, #448	@ 0x1c0
 8002854:	6170      	strcc	r0, [r6, #20]
 8002856:	f04f 0936 	movcc.w	r9, #54	@ 0x36
 800285a:	e008      	b.n	800286e <PE_StateMachine_VDM+0x356>
 800285c:	f04f 0935 	mov.w	r9, #53	@ 0x35
 8002860:	e005      	b.n	800286e <PE_StateMachine_VDM+0x356>
 8002862:	6970      	ldr	r0, [r6, #20]
 8002864:	f420 70e0 	bic.w	r0, r0, #448	@ 0x1c0
 8002868:	6170      	str	r0, [r6, #20]
 800286a:	f04f 0937 	mov.w	r9, #55	@ 0x37
 800286e:	7c30      	ldrb	r0, [r6, #16]
 8002870:	4649      	mov	r1, r9
 8002872:	f7fd fe37 	bl	80004e4 <USBPD_PE_Notification>
 8002876:	68f1      	ldr	r1, [r6, #12]
 8002878:	6a08      	ldr	r0, [r1, #32]
 800287a:	2800      	cmp	r0, #0
 800287c:	d00d      	beq.n	800289a <PE_StateMachine_VDM+0x382>
 800287e:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8002880:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8002884:	9000      	str	r0, [sp, #0]
 8002886:	f3ca 1281 	ubfx	r2, sl, #6, #2
 800288a:	68f4      	ldr	r4, [r6, #12]
 800288c:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800288e:	7839      	ldrb	r1, [r7, #0]
 8002890:	7c30      	ldrb	r0, [r6, #16]
 8002892:	f8d4 8020 	ldr.w	r8, [r4, #32]
 8002896:	0c1b      	lsrs	r3, r3, #16
 8002898:	47c0      	blx	r8
 800289a:	e0e9      	b.n	8002a70 <PE_StateMachine_VDM+0x558>
 800289c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800289e:	f020 00df 	bic.w	r0, r0, #223	@ 0xdf
 80028a2:	f040 0005 	orr.w	r0, r0, #5
 80028a6:	f000 f944 	bl	8002b32 <.text_26>
 80028aa:	218d      	movs	r1, #141	@ 0x8d
 80028ac:	f000 f92e 	bl	8002b0c <.text_23>
 80028b0:	2800      	cmp	r0, #0
 80028b2:	d109      	bne.n	80028c8 <PE_StateMachine_VDM+0x3b0>
 80028b4:	2055      	movs	r0, #85	@ 0x55
 80028b6:	7730      	strb	r0, [r6, #28]
 80028b8:	2155      	movs	r1, #85	@ 0x55
 80028ba:	7c30      	ldrb	r0, [r6, #16]
 80028bc:	f7fd fe12 	bl	80004e4 <USBPD_PE_Notification>
 80028c0:	f8a6 a01e 	strh.w	sl, [r6, #30]
 80028c4:	f04f 0832 	mov.w	r8, #50	@ 0x32
 80028c8:	e0f1      	b.n	8002aae <PE_StateMachine_VDM+0x596>
 80028ca:	f000 f90a 	bl	8002ae2 <.text_19>
 80028ce:	7821      	ldrb	r1, [r4, #0]
 80028d0:	4281      	cmp	r1, r0
 80028d2:	d13d      	bne.n	8002950 <PE_StateMachine_VDM+0x438>
 80028d4:	8829      	ldrh	r1, [r5, #0]
 80028d6:	0bc8      	lsrs	r0, r1, #15
 80028d8:	d13a      	bne.n	8002950 <PE_StateMachine_VDM+0x438>
 80028da:	f000 f8f9 	bl	8002ad0 <.text_17>
 80028de:	d037      	beq.n	8002950 <PE_StateMachine_VDM+0x438>
 80028e0:	f000 f8fa 	bl	8002ad8 <.text_18>
 80028e4:	d134      	bne.n	8002950 <PE_StateMachine_VDM+0x438>
 80028e6:	7820      	ldrb	r0, [r4, #0]
 80028e8:	2814      	cmp	r0, #20
 80028ea:	d001      	beq.n	80028f0 <PE_StateMachine_VDM+0x3d8>
 80028ec:	f000 f909 	bl	8002b02 <.text_22>
 80028f0:	2000      	movs	r0, #0
 80028f2:	7730      	strb	r0, [r6, #28]
 80028f4:	6869      	ldr	r1, [r5, #4]
 80028f6:	f891 9002 	ldrb.w	r9, [r1, #2]
 80028fa:	f009 001f 	and.w	r0, r9, #31
 80028fe:	2805      	cmp	r0, #5
 8002900:	d126      	bne.n	8002950 <PE_StateMachine_VDM+0x438>
 8002902:	f3c9 1081 	ubfx	r0, r9, #6, #2
 8002906:	b318      	cbz	r0, 8002950 <PE_StateMachine_VDM+0x438>
 8002908:	2801      	cmp	r0, #1
 800290a:	d004      	beq.n	8002916 <PE_StateMachine_VDM+0x3fe>
 800290c:	d309      	bcc.n	8002922 <PE_StateMachine_VDM+0x40a>
 800290e:	2803      	cmp	r0, #3
 8002910:	d005      	beq.n	800291e <PE_StateMachine_VDM+0x406>
 8002912:	d302      	bcc.n	800291a <PE_StateMachine_VDM+0x402>
 8002914:	e005      	b.n	8002922 <PE_StateMachine_VDM+0x40a>
 8002916:	2156      	movs	r1, #86	@ 0x56
 8002918:	e004      	b.n	8002924 <PE_StateMachine_VDM+0x40c>
 800291a:	2157      	movs	r1, #87	@ 0x57
 800291c:	e002      	b.n	8002924 <PE_StateMachine_VDM+0x40c>
 800291e:	2158      	movs	r1, #88	@ 0x58
 8002920:	e000      	b.n	8002924 <PE_StateMachine_VDM+0x40c>
 8002922:	2155      	movs	r1, #85	@ 0x55
 8002924:	7c30      	ldrb	r0, [r6, #16]
 8002926:	f7fd fddd 	bl	80004e4 <USBPD_PE_Notification>
 800292a:	68f1      	ldr	r1, [r6, #12]
 800292c:	6a48      	ldr	r0, [r1, #36]	@ 0x24
 800292e:	2800      	cmp	r0, #0
 8002930:	d00d      	beq.n	800294e <PE_StateMachine_VDM+0x436>
 8002932:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8002934:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8002938:	9000      	str	r0, [sp, #0]
 800293a:	f3c9 1281 	ubfx	r2, r9, #6, #2
 800293e:	68f4      	ldr	r4, [r6, #12]
 8002940:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8002942:	7839      	ldrb	r1, [r7, #0]
 8002944:	7c30      	ldrb	r0, [r6, #16]
 8002946:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
 800294a:	0c1b      	lsrs	r3, r3, #16
 800294c:	47c0      	blx	r8
 800294e:	e08f      	b.n	8002a70 <PE_StateMachine_VDM+0x558>
 8002950:	7828      	ldrb	r0, [r5, #0]
 8002952:	f000 001f 	and.w	r0, r0, #31
 8002956:	2810      	cmp	r0, #16
 8002958:	f000 8092 	beq.w	8002a80 <PE_StateMachine_VDM+0x568>
 800295c:	8bf0      	ldrh	r0, [r6, #30]
 800295e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002962:	d13b      	bne.n	80029dc <PE_StateMachine_VDM+0x4c4>
 8002964:	e09f      	b.n	8002aa6 <PE_StateMachine_VDM+0x58e>
 8002966:	2100      	movs	r1, #0
 8002968:	f88d 100c 	strb.w	r1, [sp, #12]
 800296c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800296e:	f020 00c0 	bic.w	r0, r0, #192	@ 0xc0
 8002972:	64a8      	str	r0, [r5, #72]	@ 0x48
 8002974:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8002976:	f361 0004 	bfi	r0, r1, #0, #5
 800297a:	64a8      	str	r0, [r5, #72]	@ 0x48
 800297c:	f000 f8a1 	bl	8002ac2 <.text_16>
 8002980:	f000 f8d0 	bl	8002b24 <.text_25>
 8002984:	f421 41ce 	bic.w	r1, r1, #26368	@ 0x6700
 8002988:	ea41 3140 	orr.w	r1, r1, r0, lsl #13
 800298c:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8002990:	64a9      	str	r1, [r5, #72]	@ 0x48
 8002992:	9104      	str	r1, [sp, #16]
 8002994:	68f0      	ldr	r0, [r6, #12]
 8002996:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8002998:	b14c      	cbz	r4, 80029ae <PE_StateMachine_VDM+0x496>
 800299a:	a805      	add	r0, sp, #20
 800299c:	9000      	str	r0, [sp, #0]
 800299e:	ab03      	add	r3, sp, #12
 80029a0:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 80029a4:	7839      	ldrb	r1, [r7, #0]
 80029a6:	7c30      	ldrb	r0, [r6, #16]
 80029a8:	f002 021f 	and.w	r2, r2, #31
 80029ac:	47a0      	blx	r4
 80029ae:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80029b2:	1c40      	adds	r0, r0, #1
 80029b4:	f88d 000c 	strb.w	r0, [sp, #12]
 80029b8:	218f      	movs	r1, #143	@ 0x8f
 80029ba:	f000 f895 	bl	8002ae8 <.text_20>
 80029be:	ab04      	add	r3, sp, #16
 80029c0:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80029c4:	9000      	str	r0, [sp, #0]
 80029c6:	220f      	movs	r2, #15
 80029c8:	7839      	ldrb	r1, [r7, #0]
 80029ca:	4630      	mov	r0, r6
 80029cc:	f7fe fa2f 	bl	8000e2e <PE_Send_DataMessage>
 80029d0:	b910      	cbnz	r0, 80029d8 <PE_StateMachine_VDM+0x4c0>
 80029d2:	205a      	movs	r0, #90	@ 0x5a
 80029d4:	f000 f88f 	bl	8002af6 <.text_21>
 80029d8:	2000      	movs	r0, #0
 80029da:	7078      	strb	r0, [r7, #1]
 80029dc:	e067      	b.n	8002aae <PE_StateMachine_VDM+0x596>
 80029de:	8829      	ldrh	r1, [r5, #0]
 80029e0:	0b09      	lsrs	r1, r1, #12
 80029e2:	f001 0107 	and.w	r1, r1, #7
 80029e6:	1e48      	subs	r0, r1, #1
 80029e8:	f88d 0004 	strb.w	r0, [sp, #4]
 80029ec:	f000 f879 	bl	8002ae2 <.text_19>
 80029f0:	7821      	ldrb	r1, [r4, #0]
 80029f2:	4281      	cmp	r1, r0
 80029f4:	d13f      	bne.n	8002a76 <PE_StateMachine_VDM+0x55e>
 80029f6:	8829      	ldrh	r1, [r5, #0]
 80029f8:	0bc8      	lsrs	r0, r1, #15
 80029fa:	d13c      	bne.n	8002a76 <PE_StateMachine_VDM+0x55e>
 80029fc:	f000 f868 	bl	8002ad0 <.text_17>
 8002a00:	d039      	beq.n	8002a76 <PE_StateMachine_VDM+0x55e>
 8002a02:	f000 f869 	bl	8002ad8 <.text_18>
 8002a06:	d136      	bne.n	8002a76 <PE_StateMachine_VDM+0x55e>
 8002a08:	7820      	ldrb	r0, [r4, #0]
 8002a0a:	2814      	cmp	r0, #20
 8002a0c:	d001      	beq.n	8002a12 <PE_StateMachine_VDM+0x4fa>
 8002a0e:	f000 f878 	bl	8002b02 <.text_22>
 8002a12:	6868      	ldr	r0, [r5, #4]
 8002a14:	7882      	ldrb	r2, [r0, #2]
 8002a16:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8002a18:	f002 011f 	and.w	r1, r2, #31
 8002a1c:	4281      	cmp	r1, r0
 8002a1e:	d12a      	bne.n	8002a76 <PE_StateMachine_VDM+0x55e>
 8002a20:	f3c2 1081 	ubfx	r0, r2, #6, #2
 8002a24:	b338      	cbz	r0, 8002a76 <PE_StateMachine_VDM+0x55e>
 8002a26:	68f1      	ldr	r1, [r6, #12]
 8002a28:	6b88      	ldr	r0, [r1, #56]	@ 0x38
 8002a2a:	b308      	cbz	r0, 8002a70 <PE_StateMachine_VDM+0x558>
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	e010      	b.n	8002a52 <PE_StateMachine_VDM+0x53a>
 8002a30:	6869      	ldr	r1, [r5, #4]
 8002a32:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8002a36:	798b      	ldrb	r3, [r1, #6]
 8002a38:	79cc      	ldrb	r4, [r1, #7]
 8002a3a:	eb03 2404 	add.w	r4, r3, r4, lsl #8
 8002a3e:	7a0b      	ldrb	r3, [r1, #8]
 8002a40:	7a49      	ldrb	r1, [r1, #9]
 8002a42:	eb04 4303 	add.w	r3, r4, r3, lsl #16
 8002a46:	eb03 6101 	add.w	r1, r3, r1, lsl #24
 8002a4a:	ab02      	add	r3, sp, #8
 8002a4c:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8002a50:	1c40      	adds	r0, r0, #1
 8002a52:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8002a56:	4288      	cmp	r0, r1
 8002a58:	d3ea      	bcc.n	8002a30 <PE_StateMachine_VDM+0x518>
 8002a5a:	a802      	add	r0, sp, #8
 8002a5c:	9000      	str	r0, [sp, #0]
 8002a5e:	ab01      	add	r3, sp, #4
 8002a60:	68f4      	ldr	r4, [r6, #12]
 8002a62:	7839      	ldrb	r1, [r7, #0]
 8002a64:	7c30      	ldrb	r0, [r6, #16]
 8002a66:	f8d4 8038 	ldr.w	r8, [r4, #56]	@ 0x38
 8002a6a:	f002 021f 	and.w	r2, r2, #31
 8002a6e:	47c0      	blx	r8
 8002a70:	2000      	movs	r0, #0
 8002a72:	83f0      	strh	r0, [r6, #30]
 8002a74:	e017      	b.n	8002aa6 <PE_StateMachine_VDM+0x58e>
 8002a76:	7829      	ldrb	r1, [r5, #0]
 8002a78:	f001 011f 	and.w	r1, r1, #31
 8002a7c:	2910      	cmp	r1, #16
 8002a7e:	d10e      	bne.n	8002a9e <PE_StateMachine_VDM+0x586>
 8002a80:	7820      	ldrb	r0, [r4, #0]
 8002a82:	2814      	cmp	r0, #20
 8002a84:	d001      	beq.n	8002a8a <PE_StateMachine_VDM+0x572>
 8002a86:	f000 f83c 	bl	8002b02 <.text_22>
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	83f0      	strh	r0, [r6, #30]
 8002a8e:	2103      	movs	r1, #3
 8002a90:	7471      	strb	r1, [r6, #17]
 8002a92:	4680      	mov	r8, r0
 8002a94:	7c30      	ldrb	r0, [r6, #16]
 8002a96:	2159      	movs	r1, #89	@ 0x59
 8002a98:	f7fd fd24 	bl	80004e4 <USBPD_PE_Notification>
 8002a9c:	e007      	b.n	8002aae <PE_StateMachine_VDM+0x596>
 8002a9e:	8bf0      	ldrh	r0, [r6, #30]
 8002aa0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002aa4:	d103      	bne.n	8002aae <PE_StateMachine_VDM+0x596>
 8002aa6:	2103      	movs	r1, #3
 8002aa8:	7471      	strb	r1, [r6, #17]
 8002aaa:	f04f 0800 	mov.w	r8, #0
 8002aae:	4640      	mov	r0, r8
 8002ab0:	b012      	add	sp, #72	@ 0x48
 8002ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002ab6 <.text_15>:
 8002ab6:	6868      	ldr	r0, [r5, #4]
 8002ab8:	f890 9002 	ldrb.w	r9, [r0, #2]
 8002abc:	f009 011f 	and.w	r1, r9, #31
 8002ac0:	4770      	bx	lr

08002ac2 <.text_16>:
 8002ac2:	f8b6 1080 	ldrh.w	r1, [r6, #128]	@ 0x80
 8002ac6:	eac0 4001 	pkhbt	r0, r0, r1, lsl #16
 8002aca:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8002ace:	4770      	bx	lr

08002ad0 <.text_17>:
 8002ad0:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8002ad4:	2800      	cmp	r0, #0
 8002ad6:	4770      	bx	lr

08002ad8 <.text_18>:
 8002ad8:	7828      	ldrb	r0, [r5, #0]
 8002ada:	f000 001f 	and.w	r0, r0, #31
 8002ade:	280f      	cmp	r0, #15
 8002ae0:	4770      	bx	lr

08002ae2 <.text_19>:
 8002ae2:	7838      	ldrb	r0, [r7, #0]
 8002ae4:	f7fd be4f 	b.w	8000786 <PE_Convert_SOPRxEvent>

08002ae8 <.text_20>:
 8002ae8:	6970      	ldr	r0, [r6, #20]
 8002aea:	9101      	str	r1, [sp, #4]
 8002aec:	0880      	lsrs	r0, r0, #2
 8002aee:	f000 0001 	and.w	r0, r0, #1
 8002af2:	9002      	str	r0, [sp, #8]
 8002af4:	4770      	bx	lr

08002af6 <.text_21>:
 8002af6:	7730      	strb	r0, [r6, #28]
 8002af8:	f8a6 901e 	strh.w	r9, [r6, #30]
 8002afc:	f04f 081e 	mov.w	r8, #30
 8002b00:	4770      	bx	lr

08002b02 <.text_22>:
 8002b02:	2114      	movs	r1, #20
 8002b04:	7021      	strb	r1, [r4, #0]
 8002b06:	4630      	mov	r0, r6
 8002b08:	f7fd be0a 	b.w	8000720 <PE_Clear_RxEvent>

08002b0c <.text_23>:
 8002b0c:	6970      	ldr	r0, [r6, #20]
 8002b0e:	9101      	str	r1, [sp, #4]
 8002b10:	0880      	lsrs	r0, r0, #2
 8002b12:	f000 0001 	and.w	r0, r0, #1
 8002b16:	9002      	str	r0, [sp, #8]

08002b18 <.text_24>:
 8002b18:	2001      	movs	r0, #1
 8002b1a:	9000      	str	r0, [sp, #0]
 8002b1c:	4630      	mov	r0, r6
 8002b1e:	7839      	ldrb	r1, [r7, #0]
 8002b20:	f7fe b985 	b.w	8000e2e <PE_Send_DataMessage>

08002b24 <.text_25>:
 8002b24:	64a8      	str	r0, [r5, #72]	@ 0x48
 8002b26:	6870      	ldr	r0, [r6, #4]
 8002b28:	6801      	ldr	r1, [r0, #0]
 8002b2a:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8002b2e:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 8002b30:	4770      	bx	lr

08002b32 <.text_26>:
 8002b32:	64a8      	str	r0, [r5, #72]	@ 0x48
 8002b34:	f106 0378 	add.w	r3, r6, #120	@ 0x78
 8002b38:	f8b6 1080 	ldrh.w	r1, [r6, #128]	@ 0x80
 8002b3c:	eac0 4001 	pkhbt	r0, r0, r1, lsl #16
 8002b40:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8002b44:	64a8      	str	r0, [r5, #72]	@ 0x48
 8002b46:	220f      	movs	r2, #15
 8002b48:	6870      	ldr	r0, [r6, #4]
 8002b4a:	6801      	ldr	r1, [r0, #0]
 8002b4c:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8002b50:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 8002b52:	f421 41c0 	bic.w	r1, r1, #24576	@ 0x6000
 8002b56:	ea41 3140 	orr.w	r1, r1, r0, lsl #13
 8002b5a:	64a9      	str	r1, [r5, #72]	@ 0x48
 8002b5c:	6970      	ldr	r0, [r6, #20]
 8002b5e:	0980      	lsrs	r0, r0, #6
 8002b60:	f360 210a 	bfi	r1, r0, #8, #3
 8002b64:	64a9      	str	r1, [r5, #72]	@ 0x48
 8002b66:	4770      	bx	lr

08002b68 <PE_Check_DataMessageVDM>:
 8002b68:	b510      	push	{r4, lr}
 8002b6a:	68c1      	ldr	r1, [r0, #12]
 8002b6c:	b1c9      	cbz	r1, 8002ba2 <PE_Check_DataMessageVDM+0x3a>
 8002b6e:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8002b70:	788a      	ldrb	r2, [r1, #2]
 8002b72:	78cb      	ldrb	r3, [r1, #3]
 8002b74:	790c      	ldrb	r4, [r1, #4]
 8002b76:	7949      	ldrb	r1, [r1, #5]
 8002b78:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 8002b7c:	eb02 4204 	add.w	r2, r2, r4, lsl #16
 8002b80:	eb02 6201 	add.w	r2, r2, r1, lsl #24
 8002b84:	f3c2 31c0 	ubfx	r1, r2, #15, #1
 8002b88:	b159      	cbz	r1, 8002ba2 <PE_Check_DataMessageVDM+0x3a>
 8002b8a:	6782      	str	r2, [r0, #120]	@ 0x78
 8002b8c:	f3c2 1181 	ubfx	r1, r2, #6, #2
 8002b90:	b939      	cbnz	r1, 8002ba2 <PE_Check_DataMessageVDM+0x3a>
 8002b92:	6801      	ldr	r1, [r0, #0]
 8002b94:	684a      	ldr	r2, [r1, #4]
 8002b96:	f3c2 2100 	ubfx	r1, r2, #8, #1
 8002b9a:	b111      	cbz	r1, 8002ba2 <PE_Check_DataMessageVDM+0x3a>
 8002b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ba0:	e444      	b.n	800242c <PE_Receive_SVDM>
 8002ba2:	6841      	ldr	r1, [r0, #4]
 8002ba4:	780a      	ldrb	r2, [r1, #0]
 8002ba6:	f002 0203 	and.w	r2, r2, #3
 8002baa:	2a02      	cmp	r2, #2
 8002bac:	bf04      	itt	eq
 8002bae:	2101      	moveq	r1, #1
 8002bb0:	7441      	strbeq	r1, [r0, #17]
 8002bb2:	bd10      	pop	{r4, pc}

08002bb4 <PE_SVDM_CheckIdentity>:
 8002bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bb6:	f000 f8f3 	bl	8002da0 <.text_33>
 8002bba:	0b24      	lsrs	r4, r4, #12
 8002bbc:	f004 0407 	and.w	r4, r4, #7
 8002bc0:	1e65      	subs	r5, r4, #1
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	b2ee      	uxtb	r6, r5
 8002bc6:	2e03      	cmp	r6, #3
 8002bc8:	f0c0 8081 	bcc.w	8002cce <PE_SVDM_CheckIdentity+0x11a>
 8002bcc:	780c      	ldrb	r4, [r1, #0]
 8002bce:	784e      	ldrb	r6, [r1, #1]
 8002bd0:	788f      	ldrb	r7, [r1, #2]
 8002bd2:	eb04 2406 	add.w	r4, r4, r6, lsl #8
 8002bd6:	78ce      	ldrb	r6, [r1, #3]
 8002bd8:	eb04 4407 	add.w	r4, r4, r7, lsl #16
 8002bdc:	eb04 6406 	add.w	r4, r4, r6, lsl #24
 8002be0:	6014      	str	r4, [r2, #0]
 8002be2:	790f      	ldrb	r7, [r1, #4]
 8002be4:	794e      	ldrb	r6, [r1, #5]
 8002be6:	eb07 2606 	add.w	r6, r7, r6, lsl #8
 8002bea:	798f      	ldrb	r7, [r1, #6]
 8002bec:	eb06 4707 	add.w	r7, r6, r7, lsl #16
 8002bf0:	79ce      	ldrb	r6, [r1, #7]
 8002bf2:	eb07 6606 	add.w	r6, r7, r6, lsl #24
 8002bf6:	6056      	str	r6, [r2, #4]
 8002bf8:	7a0f      	ldrb	r7, [r1, #8]
 8002bfa:	f891 c009 	ldrb.w	ip, [r1, #9]
 8002bfe:	eb07 2e0c 	add.w	lr, r7, ip, lsl #8
 8002c02:	7a8f      	ldrb	r7, [r1, #10]
 8002c04:	f891 c00b 	ldrb.w	ip, [r1, #11]
 8002c08:	eb0e 4707 	add.w	r7, lr, r7, lsl #16
 8002c0c:	eb07 670c 	add.w	r7, r7, ip, lsl #24
 8002c10:	6097      	str	r7, [r2, #8]
 8002c12:	2608      	movs	r6, #8
 8002c14:	1eef      	subs	r7, r5, #3
 8002c16:	f892 5020 	ldrb.w	r5, [r2, #32]
 8002c1a:	f005 0ee0 	and.w	lr, r5, #224	@ 0xe0
 8002c1e:	b2fd      	uxtb	r5, r7
 8002c20:	2d00      	cmp	r5, #0
 8002c22:	f882 e020 	strb.w	lr, [r2, #32]
 8002c26:	d053      	beq.n	8002cd0 <PE_SVDM_CheckIdentity+0x11c>
 8002c28:	0ee4      	lsrs	r4, r4, #27
 8002c2a:	1e7d      	subs	r5, r7, #1
 8002c2c:	f004 0407 	and.w	r4, r4, #7
 8002c30:	2c05      	cmp	r4, #5
 8002c32:	d84c      	bhi.n	8002cce <PE_SVDM_CheckIdentity+0x11a>
 8002c34:	e8df f004 	tbb	[pc, r4]
 8002c38:	2303030c 	.word	0x2303030c
 8002c3c:	2f29      	.short	0x2f29
 8002c3e:	f04e 0408 	orr.w	r4, lr, #8
 8002c42:	f000 f847 	bl	8002cd4 <.text_29>
 8002c46:	6194      	str	r4, [r2, #24]
 8002c48:	462f      	mov	r7, r5
 8002c4a:	b2fc      	uxtb	r4, r7
 8002c4c:	2c00      	cmp	r4, #0
 8002c4e:	d03f      	beq.n	8002cd0 <PE_SVDM_CheckIdentity+0x11c>
 8002c50:	8e00      	ldrh	r0, [r0, #48]	@ 0x30
 8002c52:	f3c0 1081 	ubfx	r0, r0, #6, #2
 8002c56:	2802      	cmp	r0, #2
 8002c58:	d33a      	bcc.n	8002cd0 <PE_SVDM_CheckIdentity+0x11c>
 8002c5a:	6810      	ldr	r0, [r2, #0]
 8002c5c:	0dc0      	lsrs	r0, r0, #23
 8002c5e:	f010 0007 	ands.w	r0, r0, #7
 8002c62:	d035      	beq.n	8002cd0 <PE_SVDM_CheckIdentity+0x11c>
 8002c64:	1e40      	subs	r0, r0, #1
 8002c66:	2802      	cmp	r0, #2
 8002c68:	d831      	bhi.n	8002cce <PE_SVDM_CheckIdentity+0x11a>
 8002c6a:	f892 0020 	ldrb.w	r0, [r2, #32]
 8002c6e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8002c72:	2800      	cmp	r0, #0
 8002c74:	bf1a      	itte	ne
 8002c76:	3608      	addne	r6, #8
 8002c78:	1e7f      	subne	r7, r7, #1
 8002c7a:	1d36      	addeq	r6, r6, #4
 8002c7c:	e011      	b.n	8002ca2 <PE_SVDM_CheckIdentity+0xee>
 8002c7e:	f04e 0401 	orr.w	r4, lr, #1
 8002c82:	f000 f827 	bl	8002cd4 <.text_29>
 8002c86:	60d4      	str	r4, [r2, #12]
 8002c88:	e7de      	b.n	8002c48 <PE_SVDM_CheckIdentity+0x94>
 8002c8a:	f04e 0404 	orr.w	r4, lr, #4
 8002c8e:	f000 f821 	bl	8002cd4 <.text_29>
 8002c92:	6154      	str	r4, [r2, #20]
 8002c94:	e7d8      	b.n	8002c48 <PE_SVDM_CheckIdentity+0x94>
 8002c96:	f04e 0402 	orr.w	r4, lr, #2
 8002c9a:	f000 f81b 	bl	8002cd4 <.text_29>
 8002c9e:	6114      	str	r4, [r2, #16]
 8002ca0:	e7d2      	b.n	8002c48 <PE_SVDM_CheckIdentity+0x94>
 8002ca2:	b2ff      	uxtb	r7, r7
 8002ca4:	2f01      	cmp	r7, #1
 8002ca6:	d112      	bne.n	8002cce <PE_SVDM_CheckIdentity+0x11a>
 8002ca8:	f892 0020 	ldrb.w	r0, [r2, #32]
 8002cac:	f040 0010 	orr.w	r0, r0, #16
 8002cb0:	f882 0020 	strb.w	r0, [r2, #32]
 8002cb4:	1988      	adds	r0, r1, r6
 8002cb6:	7801      	ldrb	r1, [r0, #0]
 8002cb8:	7844      	ldrb	r4, [r0, #1]
 8002cba:	eb01 2504 	add.w	r5, r1, r4, lsl #8
 8002cbe:	7881      	ldrb	r1, [r0, #2]
 8002cc0:	78c0      	ldrb	r0, [r0, #3]
 8002cc2:	eb05 4501 	add.w	r5, r5, r1, lsl #16
 8002cc6:	eb05 6500 	add.w	r5, r5, r0, lsl #24
 8002cca:	61d5      	str	r5, [r2, #28]
 8002ccc:	e000      	b.n	8002cd0 <PE_SVDM_CheckIdentity+0x11c>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cd4 <.text_29>:
 8002cd4:	f882 4020 	strb.w	r4, [r2, #32]
 8002cd8:	260c      	movs	r6, #12
 8002cda:	7b0c      	ldrb	r4, [r1, #12]
 8002cdc:	7b4f      	ldrb	r7, [r1, #13]
 8002cde:	eb04 2707 	add.w	r7, r4, r7, lsl #8
 8002ce2:	7b8c      	ldrb	r4, [r1, #14]
 8002ce4:	eb07 4404 	add.w	r4, r7, r4, lsl #16
 8002ce8:	7bcf      	ldrb	r7, [r1, #15]
 8002cea:	eb04 6407 	add.w	r4, r4, r7, lsl #24
 8002cee:	4770      	bx	lr

08002cf0 <PE_SVDM_CheckSVIDs>:
 8002cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cf2:	4b2e      	ldr	r3, [pc, #184]	@ (8002dac <.text_34>)
 8002cf4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002cf8:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8002cfa:	0b1b      	lsrs	r3, r3, #12
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	1e5b      	subs	r3, r3, #1
 8002d02:	2400      	movs	r4, #0
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2500      	movs	r5, #0
 8002d08:	7614      	strb	r4, [r2, #24]
 8002d0a:	7654      	strb	r4, [r2, #25]
 8002d0c:	f000 f816 	bl	8002d3c <.text_31>
 8002d10:	bf19      	ittee	ne
 8002d12:	1c76      	addne	r6, r6, #1
 8002d14:	7616      	strbne	r6, [r2, #24]
 8002d16:	2501      	moveq	r5, #1
 8002d18:	7655      	strbeq	r5, [r2, #25]
 8002d1a:	1ca4      	adds	r4, r4, #2
 8002d1c:	b2e4      	uxtb	r4, r4
 8002d1e:	f000 f80d 	bl	8002d3c <.text_31>
 8002d22:	bf19      	ittee	ne
 8002d24:	1c76      	addne	r6, r6, #1
 8002d26:	7616      	strbne	r6, [r2, #24]
 8002d28:	2501      	moveq	r5, #1
 8002d2a:	7655      	strbeq	r5, [r2, #25]
 8002d2c:	1ca4      	adds	r4, r4, #2
 8002d2e:	b2e4      	uxtb	r4, r4
 8002d30:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
 8002d34:	d201      	bcs.n	8002d3a <PE_SVDM_CheckSVIDs+0x4a>
 8002d36:	0028      	movs	r0, r5
 8002d38:	d0e8      	beq.n	8002d0c <PE_SVDM_CheckSVIDs+0x1c>
 8002d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d3c <.text_31>:
 8002d3c:	1c4e      	adds	r6, r1, #1
 8002d3e:	5d08      	ldrb	r0, [r1, r4]
 8002d40:	5d37      	ldrb	r7, [r6, r4]
 8002d42:	eb00 2607 	add.w	r6, r0, r7, lsl #8
 8002d46:	7e10      	ldrb	r0, [r2, #24]
 8002d48:	f822 6010 	strh.w	r6, [r2, r0, lsl #1]
 8002d4c:	7e16      	ldrb	r6, [r2, #24]
 8002d4e:	4637      	mov	r7, r6
 8002d50:	f832 0017 	ldrh.w	r0, [r2, r7, lsl #1]
 8002d54:	2800      	cmp	r0, #0
 8002d56:	4770      	bx	lr

08002d58 <PE_SVDM_CheckModes>:
 8002d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d5a:	f000 f821 	bl	8002da0 <.text_33>
 8002d5e:	8399      	strh	r1, [r3, #28]
 8002d60:	0b24      	lsrs	r4, r4, #12
 8002d62:	f004 0407 	and.w	r4, r4, #7
 8002d66:	1e60      	subs	r0, r4, #1
 8002d68:	2400      	movs	r4, #0
 8002d6a:	b2c0      	uxtb	r0, r0
 8002d6c:	601c      	str	r4, [r3, #0]
 8002d6e:	1916      	adds	r6, r2, r4
 8002d70:	5d15      	ldrb	r5, [r2, r4]
 8002d72:	7871      	ldrb	r1, [r6, #1]
 8002d74:	eb05 2701 	add.w	r7, r5, r1, lsl #8
 8002d78:	1911      	adds	r1, r2, r4
 8002d7a:	1d24      	adds	r4, r4, #4
 8002d7c:	788d      	ldrb	r5, [r1, #2]
 8002d7e:	78ce      	ldrb	r6, [r1, #3]
 8002d80:	6819      	ldr	r1, [r3, #0]
 8002d82:	eb07 4705 	add.w	r7, r7, r5, lsl #16
 8002d86:	eb03 0581 	add.w	r5, r3, r1, lsl #2
 8002d8a:	eb07 6706 	add.w	r7, r7, r6, lsl #24
 8002d8e:	606f      	str	r7, [r5, #4]
 8002d90:	b2e4      	uxtb	r4, r4
 8002d92:	681e      	ldr	r6, [r3, #0]
 8002d94:	1c76      	adds	r6, r6, #1
 8002d96:	ebb4 0f80 	cmp.w	r4, r0, lsl #2
 8002d9a:	601e      	str	r6, [r3, #0]
 8002d9c:	d3e7      	bcc.n	8002d6e <PE_SVDM_CheckModes+0x16>
 8002d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002da0 <.text_33>:
 8002da0:	4c02      	ldr	r4, [pc, #8]	@ (8002dac <.text_34>)
 8002da2:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8002da6:	8e04      	ldrh	r4, [r0, #48]	@ 0x30
 8002da8:	4770      	bx	lr
	...

08002dac <.text_34>:
 8002dac:	20000338 	.word	0x20000338

08002db0 <.text_35>:
 8002db0:	ff008002 	.word	0xff008002

08002db4 <USBPD_PRL_TimerCounter>:
 8002db4:	b510      	push	{r4, lr}
 8002db6:	f000 f876 	bl	8002ea6 <.text_12>
 8002dba:	7919      	ldrb	r1, [r3, #4]
 8002dbc:	b111      	cbz	r1, 8002dc4 <USBPD_PRL_TimerCounter+0x10>
 8002dbe:	7919      	ldrb	r1, [r3, #4]
 8002dc0:	1e4c      	subs	r4, r1, #1
 8002dc2:	711c      	strb	r4, [r3, #4]
 8002dc4:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
 8002dc8:	7848      	ldrb	r0, [r1, #1]
 8002dca:	b108      	cbz	r0, 8002dd0 <USBPD_PRL_TimerCounter+0x1c>
 8002dcc:	1e40      	subs	r0, r0, #1
 8002dce:	7048      	strb	r0, [r1, #1]
 8002dd0:	bd10      	pop	{r4, pc}

08002dd2 <USBPD_PRL_Init>:
 8002dd2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002dd6:	4680      	mov	r8, r0
 8002dd8:	460e      	mov	r6, r1
 8002dda:	4617      	mov	r7, r2
 8002ddc:	461d      	mov	r5, r3
 8002dde:	2050      	movs	r0, #80	@ 0x50
 8002de0:	f013 fd58 	bl	8016894 <malloc>
 8002de4:	0004      	movs	r4, r0
 8002de6:	f04f 0916 	mov.w	r9, #22
 8002dea:	d018      	beq.n	8002e1e <USBPD_PRL_Init+0x4c>
 8002dec:	2150      	movs	r1, #80	@ 0x50
 8002dee:	f014 f8b4 	bl	8016f5a <__aeabi_memclr>
 8002df2:	f000 fc8e 	bl	8003712 <.text_33>
 8002df6:	f8df 0a14 	ldr.w	r0, [pc, #2580]	@ 800380c <.text_39>
 8002dfa:	4641      	mov	r1, r8
 8002dfc:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
 8002e00:	62a7      	str	r7, [r4, #40]	@ 0x28
 8002e02:	62e5      	str	r5, [r4, #44]	@ 0x2c
 8002e04:	2001      	movs	r0, #1
 8002e06:	9000      	str	r0, [sp, #0]
 8002e08:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 8002e0c:	6870      	ldr	r0, [r6, #4]
 8002e0e:	f60f 2170 	addw	r1, pc, #2672	@ 0xa70
 8002e12:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8002e16:	4640      	mov	r0, r8
 8002e18:	f00d ffdc 	bl	8010dd4 <USBPD_PHY_Init>
 8002e1c:	4681      	mov	r9, r0
 8002e1e:	4648      	mov	r0, r9
 8002e20:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

08002e24 <USBPD_PRL_GetMemoryConsumption>:
 8002e24:	20f0      	movs	r0, #240	@ 0xf0
 8002e26:	4770      	bx	lr

08002e28 <USBPD_PRL_SetHeader>:
 8002e28:	b530      	push	{r4, r5, lr}
 8002e2a:	f8df 49e0 	ldr.w	r4, [pc, #2528]	@ 800380c <.text_39>
 8002e2e:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
 8002e32:	8a6d      	ldrh	r5, [r5, #18]
 8002e34:	f361 2508 	bfi	r5, r1, #8, #1
 8002e38:	f854 1020 	ldr.w	r1, [r4, r0, lsl #2]
 8002e3c:	824d      	strh	r5, [r1, #18]
 8002e3e:	f362 1545 	bfi	r5, r2, #5, #1
 8002e42:	f854 1020 	ldr.w	r1, [r4, r0, lsl #2]
 8002e46:	824d      	strh	r5, [r1, #18]
 8002e48:	f363 1587 	bfi	r5, r3, #6, #2
 8002e4c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8002e50:	8245      	strh	r5, [r0, #18]
 8002e52:	bd30      	pop	{r4, r5, pc}

08002e54 <USBPD_PRL_SetHeaderPowerRole>:
 8002e54:	b510      	push	{r4, lr}
 8002e56:	f000 f80b 	bl	8002e70 <.text_9>
 8002e5a:	f361 2408 	bfi	r4, r1, #8, #1
 8002e5e:	825c      	strh	r4, [r3, #18]
 8002e60:	bd10      	pop	{r4, pc}

08002e62 <USBPD_PRL_SetHeaderDataRole>:
 8002e62:	b510      	push	{r4, lr}
 8002e64:	f000 f804 	bl	8002e70 <.text_9>
 8002e68:	f361 1445 	bfi	r4, r1, #5, #1
 8002e6c:	825c      	strh	r4, [r3, #18]
 8002e6e:	bd10      	pop	{r4, pc}

08002e70 <.text_9>:
 8002e70:	f8df 2998 	ldr.w	r2, [pc, #2456]	@ 800380c <.text_39>
 8002e74:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8002e78:	8a5c      	ldrh	r4, [r3, #18]
 8002e7a:	4770      	bx	lr

08002e7c <USBPD_PRL_SetHeaderSpecification>:
 8002e7c:	b510      	push	{r4, lr}
 8002e7e:	f7ff fff7 	bl	8002e70 <.text_9>
 8002e82:	f361 1487 	bfi	r4, r1, #6, #2
 8002e86:	825c      	strh	r4, [r3, #18]
 8002e88:	bd10      	pop	{r4, pc}

08002e8a <USBPD_PRL_CBL_SetHeaderSpecification>:
 8002e8a:	b540      	push	{r6, lr}
 8002e8c:	f000 f80b 	bl	8002ea6 <.text_12>
 8002e90:	8a9e      	ldrh	r6, [r3, #20]
 8002e92:	f361 1687 	bfi	r6, r1, #6, #2
 8002e96:	829e      	strh	r6, [r3, #20]
 8002e98:	8adb      	ldrh	r3, [r3, #22]
 8002e9a:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8002e9e:	f361 1387 	bfi	r3, r1, #6, #2
 8002ea2:	82c3      	strh	r3, [r0, #22]
 8002ea4:	bd40      	pop	{r6, pc}

08002ea6 <.text_12>:
 8002ea6:	f8df 2964 	ldr.w	r2, [pc, #2404]	@ 800380c <.text_39>
 8002eaa:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8002eae:	4770      	bx	lr

08002eb0 <USBPD_PRL_SRCSetSinkNG>:
 8002eb0:	f00e b86b 	b.w	8010f8a <USBPD_PHY_SetResistor_SinkTxNG>

08002eb4 <USBPD_PRL_SRCReleaseSinkNG>:
 8002eb4:	b510      	push	{r4, lr}
 8002eb6:	4604      	mov	r4, r0
 8002eb8:	f00e f874 	bl	8010fa4 <USBPD_PHY_SetResistor_SinkTxOK>
 8002ebc:	f8df 194c 	ldr.w	r1, [pc, #2380]	@ 800380c <.text_39>
 8002ec0:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	7150      	strb	r0, [r2, #5]
 8002ec8:	bd10      	pop	{r4, pc}

08002eca <USBPD_PRL_SOPCapability>:
 8002eca:	f00e b879 	b.w	8010fc0 <USBPD_PHY_SOPSupported>
	...

08002ed0 <USBPD_PRL_SendMessage>:
 8002ed0:	e92d 4ff5 	stmdb	sp!, {r0, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ed4:	f8df a934 	ldr.w	sl, [pc, #2356]	@ 800380c <.text_39>
 8002ed8:	b083      	sub	sp, #12
 8002eda:	4680      	mov	r8, r0
 8002edc:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 8002ee0:	4694      	mov	ip, r2
 8002ee2:	f10c 0701 	add.w	r7, ip, #1
 8002ee6:	2403      	movs	r4, #3
 8002ee8:	7938      	ldrb	r0, [r7, #4]
 8002eea:	b118      	cbz	r0, 8002ef4 <USBPD_PRL_SendMessage+0x24>
 8002eec:	7a38      	ldrb	r0, [r7, #8]
 8002eee:	b908      	cbnz	r0, 8002ef4 <USBPD_PRL_SendMessage+0x24>
 8002ef0:	200f      	movs	r0, #15
 8002ef2:	7150      	strb	r0, [r2, #5]
 8002ef4:	ea4f 0048 	mov.w	r0, r8, lsl #1
 8002ef8:	1c40      	adds	r0, r0, #1
 8002efa:	f88d 0005 	strb.w	r0, [sp, #5]
 8002efe:	f88d 1004 	strb.w	r1, [sp, #4]
 8002f02:	9302      	str	r3, [sp, #8]
 8002f04:	eb0c 0601 	add.w	r6, ip, r1
 8002f08:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8002f0a:	f8dd e038 	ldr.w	lr, [sp, #56]	@ 0x38
 8002f0e:	f897 b004 	ldrb.w	fp, [r7, #4]
 8002f12:	f1bb 0f10 	cmp.w	fp, #16
 8002f16:	f10c 050e 	add.w	r5, ip, #14
 8002f1a:	46f1      	mov	r9, lr
 8002f1c:	f200 81e2 	bhi.w	80032e4 <USBPD_PRL_SendMessage+0x414>
 8002f20:	e8df f01b 	tbh	[pc, fp, lsl #1]
 8002f24:	00280011 	.word	0x00280011
 8002f28:	01e00033 	.word	0x01e00033
 8002f2c:	004d01e0 	.word	0x004d01e0
 8002f30:	00ae003e 	.word	0x00ae003e
 8002f34:	01e001e0 	.word	0x01e001e0
 8002f38:	0181016c 	.word	0x0181016c
 8002f3c:	01a90198 	.word	0x01a90198
 8002f40:	01dc01e0 	.word	0x01dc01e0
 8002f44:	01c4      	.short	0x01c4
 8002f46:	f3ef 8510 	mrs	r5, PRIMASK
 8002f4a:	b672      	cpsid	i
 8002f4c:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002f50:	f7fd fc0a 	bl	8000768 <PE_PRL_Control_RxEvent>
 8002f54:	2800      	cmp	r0, #0
 8002f56:	bf04      	itt	eq
 8002f58:	7a78      	ldrbeq	r0, [r7, #9]
 8002f5a:	2800      	cmpeq	r0, #0
 8002f5c:	bf07      	ittee	eq
 8002f5e:	21ff      	moveq	r1, #255	@ 0xff
 8002f60:	7239      	strbeq	r1, [r7, #8]
 8002f62:	2000      	movne	r0, #0
 8002f64:	7238      	strbne	r0, [r7, #8]
 8002f66:	f385 8810 	msr	PRIMASK, r5
 8002f6a:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8002f6e:	2106      	movs	r1, #6
 8002f70:	7141      	strb	r1, [r0, #5]
 8002f72:	e1ba      	b.n	80032ea <USBPD_PRL_SendMessage+0x41a>
 8002f74:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002f78:	f00e f807 	bl	8010f8a <USBPD_PHY_SetResistor_SinkTxNG>
 8002f7c:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 8002f80:	2002      	movs	r0, #2
 8002f82:	7148      	strb	r0, [r1, #5]
 8002f84:	2013      	movs	r0, #19
 8002f86:	7038      	strb	r0, [r7, #0]
 8002f88:	e1af      	b.n	80032ea <USBPD_PRL_SendMessage+0x41a>
 8002f8a:	2801      	cmp	r0, #1
 8002f8c:	d106      	bne.n	8002f9c <USBPD_PRL_SendMessage+0xcc>
 8002f8e:	7838      	ldrb	r0, [r7, #0]
 8002f90:	2800      	cmp	r0, #0
 8002f92:	bf12      	itee	ne
 8002f94:	2409      	movne	r4, #9
 8002f96:	2105      	moveq	r1, #5
 8002f98:	7151      	strbeq	r1, [r2, #5]
 8002f9a:	e1a6      	b.n	80032ea <USBPD_PRL_SendMessage+0x41a>
 8002f9c:	2006      	movs	r0, #6
 8002f9e:	e157      	b.n	8003250 <USBPD_PRL_SendMessage+0x380>
 8002fa0:	f10c 0212 	add.w	r2, ip, #18
 8002fa4:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8002fa8:	f3c1 1181 	ubfx	r1, r1, #6, #2
 8002fac:	2902      	cmp	r1, #2
 8002fae:	bf0d      	iteet	eq
 8002fb0:	2801      	cmpeq	r0, #1
 8002fb2:	2005      	movne	r0, #5
 8002fb4:	f85a 1028 	ldrne.w	r1, [sl, r8, lsl #2]
 8002fb8:	f85a 1028 	ldreq.w	r1, [sl, r8, lsl #2]
 8002fbc:	e16e      	b.n	800329c <USBPD_PRL_SendMessage+0x3cc>
 8002fbe:	f10c 0012 	add.w	r0, ip, #18
 8002fc2:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8002fc6:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8002fca:	f10c 0312 	add.w	r3, ip, #18
 8002fce:	f362 0004 	bfi	r0, r2, #0, #5
 8002fd2:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 8002fd6:	ea4f 1bd2 	mov.w	fp, r2, lsr #7
 8002fda:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8002fde:	ea40 30cb 	orr.w	r0, r0, fp, lsl #15
 8002fe2:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	7078      	strb	r0, [r7, #1]
 8002fea:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002fee:	0bd8      	lsrs	r0, r3, #15
 8002ff0:	d026      	beq.n	8003040 <USBPD_PRL_SendMessage+0x170>
 8002ff2:	9802      	ldr	r0, [sp, #8]
 8002ff4:	7883      	ldrb	r3, [r0, #2]
 8002ff6:	78c7      	ldrb	r7, [r0, #3]
 8002ff8:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8002ffc:	81eb      	strh	r3, [r5, #14]
 8002ffe:	89e8      	ldrh	r0, [r5, #14]
 8003000:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8003004:	b970      	cbnz	r0, 8003024 <USBPD_PRL_SendMessage+0x154>
 8003006:	89e8      	ldrh	r0, [r5, #14]
 8003008:	f3c0 20c3 	ubfx	r0, r0, #11, #4
 800300c:	bb18      	cbnz	r0, 8003056 <USBPD_PRL_SendMessage+0x186>
 800300e:	f1ae 0004 	sub.w	r0, lr, #4
 8003012:	82a8      	strh	r0, [r5, #20]
 8003014:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8003018:	89eb      	ldrh	r3, [r5, #14]
 800301a:	f403 437e 	and.w	r3, r3, #65024	@ 0xfe00
 800301e:	4318      	orrs	r0, r3
 8003020:	81e8      	strh	r0, [r5, #14]
 8003022:	e018      	b.n	8003056 <USBPD_PRL_SendMessage+0x186>
 8003024:	2000      	movs	r0, #0
 8003026:	f10c 0312 	add.w	r3, ip, #18
 800302a:	82a8      	strh	r0, [r5, #20]
 800302c:	2001      	movs	r0, #1
 800302e:	f833 7011 	ldrh.w	r7, [r3, r1, lsl #1]
 8003032:	f360 370e 	bfi	r7, r0, #12, #3
 8003036:	f10c 0012 	add.w	r0, ip, #18
 800303a:	f820 7011 	strh.w	r7, [r0, r1, lsl #1]
 800303e:	e00a      	b.n	8003056 <USBPD_PRL_SendMessage+0x186>
 8003040:	f1a9 0002 	sub.w	r0, r9, #2
 8003044:	0880      	lsrs	r0, r0, #2
 8003046:	f360 330e 	bfi	r3, r0, #12, #3
 800304a:	f10c 0012 	add.w	r0, ip, #18
 800304e:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8003052:	2300      	movs	r3, #0
 8003054:	82ab      	strh	r3, [r5, #20]
 8003056:	2a0d      	cmp	r2, #13
 8003058:	bf02      	ittt	eq
 800305a:	f10c 0012 	addeq.w	r0, ip, #18
 800305e:	f830 1011 	ldrheq.w	r1, [r0, r1, lsl #1]
 8003062:	f411 4f70 	tsteq.w	r1, #61440	@ 0xf000
 8003066:	d107      	bne.n	8003078 <USBPD_PRL_SendMessage+0x1a8>
 8003068:	2000      	movs	r0, #0
 800306a:	72f0      	strb	r0, [r6, #11]
 800306c:	220f      	movs	r2, #15
 800306e:	2103      	movs	r1, #3
 8003070:	f10c 0006 	add.w	r0, ip, #6
 8003074:	f000 fc11 	bl	800389a <__aeabi_memset>
 8003078:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 800307c:	2007      	movs	r0, #7
 800307e:	e10d      	b.n	800329c <USBPD_PRL_SendMessage+0x3cc>
 8003080:	f102 0312 	add.w	r3, r2, #18
 8003084:	4677      	mov	r7, lr
 8003086:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 800308a:	0bc0      	lsrs	r0, r0, #15
 800308c:	f000 8080 	beq.w	8003190 <USBPD_PRL_SendMessage+0x2c0>
 8003090:	8b90      	ldrh	r0, [r2, #28]
 8003092:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8003096:	8390      	strh	r0, [r2, #28]
 8003098:	f3c0 2080 	ubfx	r0, r0, #10, #1
 800309c:	2800      	cmp	r0, #0
 800309e:	d16c      	bne.n	800317a <USBPD_PRL_SendMessage+0x2aa>
 80030a0:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 80030a4:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 80030a6:	8b93      	ldrh	r3, [r2, #28]
 80030a8:	2d1b      	cmp	r5, #27
 80030aa:	d30f      	bcc.n	80030cc <USBPD_PRL_SendMessage+0x1fc>
 80030ac:	0bd8      	lsrs	r0, r3, #15
 80030ae:	d00d      	beq.n	80030cc <USBPD_PRL_SendMessage+0x1fc>
 80030b0:	f102 0312 	add.w	r3, r2, #18
 80030b4:	271e      	movs	r7, #30
 80030b6:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 80030ba:	f440 40e0 	orr.w	r0, r0, #28672	@ 0x7000
 80030be:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 80030c2:	8c50      	ldrh	r0, [r2, #34]	@ 0x22
 80030c4:	f1a0 031a 	sub.w	r3, r0, #26
 80030c8:	8453      	strh	r3, [r2, #34]	@ 0x22
 80030ca:	e056      	b.n	800317a <USBPD_PRL_SendMessage+0x2aa>
 80030cc:	f3c3 20c3 	ubfx	r0, r3, #11, #4
 80030d0:	b918      	cbnz	r0, 80030da <USBPD_PRL_SendMessage+0x20a>
 80030d2:	4618      	mov	r0, r3
 80030d4:	f365 0008 	bfi	r0, r5, #0, #9
 80030d8:	8390      	strh	r0, [r2, #28]
 80030da:	f648 70ff 	movw	r0, #36863	@ 0x8fff
 80030de:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 80030e2:	f102 0312 	add.w	r3, r2, #18
 80030e6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80030ea:	4003      	ands	r3, r0
 80030ec:	f102 0012 	add.w	r0, r2, #18
 80030f0:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 80030f4:	8b90      	ldrh	r0, [r2, #28]
 80030f6:	0bc0      	lsrs	r0, r0, #15
 80030f8:	d03b      	beq.n	8003172 <USBPD_PRL_SendMessage+0x2a2>
 80030fa:	8c50      	ldrh	r0, [r2, #34]	@ 0x22
 80030fc:	1c80      	adds	r0, r0, #2
 80030fe:	0880      	lsrs	r0, r0, #2
 8003100:	0307      	lsls	r7, r0, #12
 8003102:	f407 47e0 	and.w	r7, r7, #28672	@ 0x7000
 8003106:	f102 0012 	add.w	r0, r2, #18
 800310a:	433b      	orrs	r3, r7
 800310c:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8003110:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8003112:	1c92      	adds	r2, r2, #2
 8003114:	f012 0203 	ands.w	r2, r2, #3
 8003118:	d021      	beq.n	800315e <USBPD_PRL_SendMessage+0x28e>
 800311a:	9802      	ldr	r0, [sp, #8]
 800311c:	2300      	movs	r3, #0
 800311e:	e005      	b.n	800312c <USBPD_PRL_SendMessage+0x25c>
 8003120:	8c7f      	ldrh	r7, [r7, #34]	@ 0x22
 8003122:	442f      	add	r7, r5
 8003124:	4407      	add	r7, r0
 8003126:	2500      	movs	r5, #0
 8003128:	713d      	strb	r5, [r7, #4]
 800312a:	1c5b      	adds	r3, r3, #1
 800312c:	b2dd      	uxtb	r5, r3
 800312e:	f1c2 0e04 	rsb	lr, r2, #4
 8003132:	f85a 7028 	ldr.w	r7, [sl, r8, lsl #2]
 8003136:	4575      	cmp	r5, lr
 8003138:	d3f2      	bcc.n	8003120 <USBPD_PRL_SendMessage+0x250>
 800313a:	9002      	str	r0, [sp, #8]
 800313c:	f648 72ff 	movw	r2, #36863	@ 0x8fff
 8003140:	f107 0012 	add.w	r0, r7, #18
 8003144:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8003148:	4002      	ands	r2, r0
 800314a:	0b00      	lsrs	r0, r0, #12
 800314c:	1c40      	adds	r0, r0, #1
 800314e:	0300      	lsls	r0, r0, #12
 8003150:	f400 40e0 	and.w	r0, r0, #28672	@ 0x7000
 8003154:	4310      	orrs	r0, r2
 8003156:	f107 0212 	add.w	r2, r7, #18
 800315a:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
 800315e:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8003162:	f100 0212 	add.w	r2, r0, #18
 8003166:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 800316a:	f3c3 3702 	ubfx	r7, r3, #12, #3
 800316e:	00bf      	lsls	r7, r7, #2
 8003170:	1cbf      	adds	r7, r7, #2
 8003172:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 8003176:	2000      	movs	r0, #0
 8003178:	8450      	strh	r0, [r2, #34]	@ 0x22
 800317a:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 800317e:	8b82      	ldrh	r2, [r0, #28]
 8003180:	9802      	ldr	r0, [sp, #8]
 8003182:	7082      	strb	r2, [r0, #2]
 8003184:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 8003188:	8b90      	ldrh	r0, [r2, #28]
 800318a:	9a02      	ldr	r2, [sp, #8]
 800318c:	0a00      	lsrs	r0, r0, #8
 800318e:	70d0      	strb	r0, [r2, #3]
 8003190:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8003194:	f8df 5678 	ldr.w	r5, [pc, #1656]	@ 8003810 <.text_40>
 8003198:	f100 020b 	add.w	r2, r0, #11
 800319c:	3012      	adds	r0, #18
 800319e:	5c53      	ldrb	r3, [r2, r1]
 80031a0:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 80031a4:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 80031a8:	f363 204b 	bfi	r0, r3, #9, #3
 80031ac:	f102 0312 	add.w	r3, r2, #18
 80031b0:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 80031b4:	9a02      	ldr	r2, [sp, #8]
 80031b6:	7010      	strb	r0, [r2, #0]
 80031b8:	2202      	movs	r2, #2
 80031ba:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 80031be:	f100 0312 	add.w	r3, r0, #18
 80031c2:	9802      	ldr	r0, [sp, #8]
 80031c4:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 80031c8:	0a09      	lsrs	r1, r1, #8
 80031ca:	7041      	strb	r1, [r0, #1]
 80031cc:	210a      	movs	r1, #10
 80031ce:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 80031d2:	81c7      	strh	r7, [r0, #14]
 80031d4:	7141      	strb	r1, [r0, #5]
 80031d6:	7402      	strb	r2, [r0, #16]
 80031d8:	b2b8      	uxth	r0, r7
 80031da:	9000      	str	r0, [sp, #0]
 80031dc:	f000 f88d 	bl	80032fa <.text_18>
 80031e0:	2002      	movs	r0, #2
 80031e2:	47d0      	blx	sl
 80031e4:	f89d 0005 	ldrb.w	r0, [sp, #5]
 80031e8:	f242 7110 	movw	r1, #10000	@ 0x2710
 80031ec:	f00f f934 	bl	8012458 <USBPD_TIM_Start>
 80031f0:	f000 f88b 	bl	800330a <.text_19>
 80031f4:	b2bb      	uxth	r3, r7
 80031f6:	f00d fe90 	bl	8010f1a <USBPD_PHY_SendMessage>
 80031fa:	e076      	b.n	80032ea <USBPD_PRL_SendMessage+0x41a>
 80031fc:	f3ef 8710 	mrs	r7, PRIMASK
 8003200:	b672      	cpsid	i
 8003202:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8003206:	7941      	ldrb	r1, [r0, #5]
 8003208:	290a      	cmp	r1, #10
 800320a:	d109      	bne.n	8003220 <USBPD_PRL_SendMessage+0x350>
 800320c:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8003210:	f00f f994 	bl	801253c <USBPD_TIM_IsExpired>
 8003214:	2801      	cmp	r0, #1
 8003216:	d103      	bne.n	8003220 <USBPD_PRL_SendMessage+0x350>
 8003218:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 800321c:	200d      	movs	r0, #13
 800321e:	7148      	strb	r0, [r1, #5]
 8003220:	f387 8810 	msr	PRIMASK, r7
 8003224:	e061      	b.n	80032ea <USBPD_PRL_SendMessage+0x41a>
 8003226:	89a8      	ldrh	r0, [r5, #12]
 8003228:	7af1      	ldrb	r1, [r6, #11]
 800322a:	0a43      	lsrs	r3, r0, #9
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	4299      	cmp	r1, r3
 8003232:	bf04      	itt	eq
 8003234:	f000 001f 	andeq.w	r0, r0, #31
 8003238:	2801      	cmpeq	r0, #1
 800323a:	d108      	bne.n	800324e <USBPD_PRL_SendMessage+0x37e>
 800323c:	1c49      	adds	r1, r1, #1
 800323e:	f001 0107 	and.w	r1, r1, #7
 8003242:	72f1      	strb	r1, [r6, #11]
 8003244:	2000      	movs	r0, #0
 8003246:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 800324a:	7148      	strb	r0, [r1, #5]
 800324c:	e011      	b.n	8003272 <USBPD_PRL_SendMessage+0x3a2>
 800324e:	200d      	movs	r0, #13
 8003250:	7150      	strb	r0, [r2, #5]
 8003252:	e04a      	b.n	80032ea <USBPD_PRL_SendMessage+0x41a>
 8003254:	f000 f84b 	bl	80032ee <.text_17>
 8003258:	2000      	movs	r0, #0
 800325a:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 800325e:	7148      	strb	r0, [r1, #5]
 8003260:	f248 71ff 	movw	r1, #34815	@ 0x87ff
 8003264:	89ea      	ldrh	r2, [r5, #14]
 8003266:	400a      	ands	r2, r1
 8003268:	81ea      	strh	r2, [r5, #14]
 800326a:	f64f 30ff 	movw	r0, #64511	@ 0xfbff
 800326e:	4002      	ands	r2, r0
 8003270:	81ea      	strh	r2, [r5, #14]
 8003272:	2405      	movs	r4, #5
 8003274:	e039      	b.n	80032ea <USBPD_PRL_SendMessage+0x41a>
 8003276:	7878      	ldrb	r0, [r7, #1]
 8003278:	1c40      	adds	r0, r0, #1
 800327a:	7078      	strb	r0, [r7, #1]
 800327c:	f10c 0012 	add.w	r0, ip, #18
 8003280:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8003284:	787a      	ldrb	r2, [r7, #1]
 8003286:	f3c1 1081 	ubfx	r0, r1, #6, #2
 800328a:	2801      	cmp	r0, #1
 800328c:	bf0c      	ite	eq
 800328e:	2003      	moveq	r0, #3
 8003290:	2002      	movne	r0, #2
 8003292:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 8003296:	4290      	cmp	r0, r2
 8003298:	d302      	bcc.n	80032a0 <USBPD_PRL_SendMessage+0x3d0>
 800329a:	2010      	movs	r0, #16
 800329c:	7148      	strb	r0, [r1, #5]
 800329e:	e024      	b.n	80032ea <USBPD_PRL_SendMessage+0x41a>
 80032a0:	2200      	movs	r2, #0
 80032a2:	714a      	strb	r2, [r1, #5]
 80032a4:	2407      	movs	r4, #7
 80032a6:	f000 f822 	bl	80032ee <.text_17>
 80032aa:	e01e      	b.n	80032ea <USBPD_PRL_SendMessage+0x41a>
 80032ac:	200a      	movs	r0, #10
 80032ae:	7150      	strb	r0, [r2, #5]
 80032b0:	2102      	movs	r1, #2
 80032b2:	70a9      	strb	r1, [r5, #2]
 80032b4:	f242 7110 	movw	r1, #10000	@ 0x2710
 80032b8:	f89d 0005 	ldrb.w	r0, [sp, #5]
 80032bc:	f00f f8cc 	bl	8012458 <USBPD_TIM_Start>
 80032c0:	882b      	ldrh	r3, [r5, #0]
 80032c2:	f000 f822 	bl	800330a <.text_19>
 80032c6:	f8df 5548 	ldr.w	r5, [pc, #1352]	@ 8003810 <.text_40>
 80032ca:	f00d fe26 	bl	8010f1a <USBPD_PHY_SendMessage>
 80032ce:	f000 f814 	bl	80032fa <.text_18>
 80032d2:	f8cd 9000 	str.w	r9, [sp]
 80032d6:	2002      	movs	r0, #2
 80032d8:	47d0      	blx	sl
 80032da:	e006      	b.n	80032ea <USBPD_PRL_SendMessage+0x41a>
 80032dc:	2000      	movs	r0, #0
 80032de:	7150      	strb	r0, [r2, #5]
 80032e0:	2406      	movs	r4, #6
 80032e2:	e002      	b.n	80032ea <USBPD_PRL_SendMessage+0x41a>
 80032e4:	2000      	movs	r0, #0
 80032e6:	7150      	strb	r0, [r2, #5]
 80032e8:	2410      	movs	r4, #16
 80032ea:	4620      	mov	r0, r4
 80032ec:	e1f6      	b.n	80036dc <.text_28>

080032ee <.text_17>:
 80032ee:	7af0      	ldrb	r0, [r6, #11]
 80032f0:	1c40      	adds	r0, r0, #1
 80032f2:	f000 0007 	and.w	r0, r0, #7
 80032f6:	72f0      	strb	r0, [r6, #11]
 80032f8:	4770      	bx	lr

080032fa <.text_18>:
 80032fa:	9b02      	ldr	r3, [sp, #8]
 80032fc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8003300:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8003304:	f8d5 a000 	ldr.w	sl, [r5]
 8003308:	4770      	bx	lr

0800330a <.text_19>:
 800330a:	9a02      	ldr	r2, [sp, #8]
 800330c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8003310:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003314:	4770      	bx	lr

08003316 <USBPD_PRL_ResetRequestProcess>:
 8003316:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 800331a:	4605      	mov	r5, r0
 800331c:	f8df 84ec 	ldr.w	r8, [pc, #1260]	@ 800380c <.text_39>
 8003320:	462f      	mov	r7, r5
 8003322:	f858 4027 	ldr.w	r4, [r8, r7, lsl #2]
 8003326:	2000      	movs	r0, #0
 8003328:	70e0      	strb	r0, [r4, #3]
 800332a:	72e0      	strb	r0, [r4, #11]
 800332c:	7320      	strb	r0, [r4, #12]
 800332e:	7360      	strb	r0, [r4, #13]
 8003330:	460e      	mov	r6, r1
 8003332:	f000 f9ee 	bl	8003712 <.text_33>
 8003336:	f858 0027 	ldr.w	r0, [r8, r7, lsl #2]
 800333a:	f8df 74d4 	ldr.w	r7, [pc, #1236]	@ 8003810 <.text_40>
 800333e:	2200      	movs	r2, #0
 8003340:	7142      	strb	r2, [r0, #5]
 8003342:	9200      	str	r2, [sp, #0]
 8003344:	2300      	movs	r3, #0
 8003346:	f8d7 c000 	ldr.w	ip, [r7]
 800334a:	4632      	mov	r2, r6
 800334c:	4629      	mov	r1, r5
 800334e:	2002      	movs	r0, #2
 8003350:	47e0      	blx	ip
 8003352:	4628      	mov	r0, r5
 8003354:	f000 f83c 	bl	80033d0 <PRL_DisableRX>
 8003358:	4631      	mov	r1, r6
 800335a:	4628      	mov	r0, r5
 800335c:	f00d fdca 	bl	8010ef4 <USBPD_PHY_ResetRequest>
 8003360:	2005      	movs	r0, #5
 8003362:	7120      	strb	r0, [r4, #4]
 8003364:	78e0      	ldrb	r0, [r4, #3]
 8003366:	2801      	cmp	r0, #1
 8003368:	bf1c      	itt	ne
 800336a:	7920      	ldrbne	r0, [r4, #4]
 800336c:	2800      	cmpne	r0, #0
 800336e:	d1f9      	bne.n	8003364 <USBPD_PRL_ResetRequestProcess+0x4e>
 8003370:	e8bd 81f3 	ldmia.w	sp!, {r0, r1, r4, r5, r6, r7, r8, pc}

08003374 <USBDPD_PRL_BistCarrierEyeMode>:
 8003374:	2905      	cmp	r1, #5
 8003376:	bf08      	it	eq
 8003378:	f00d bde5 	beq.w	8010f46 <USBPD_PHY_Send_BIST_Pattern>
 800337c:	2010      	movs	r0, #16
 800337e:	4770      	bx	lr

08003380 <USBDPD_PRL_BistCarrierEyeModeExit>:
 8003380:	2905      	cmp	r1, #5
 8003382:	bf04      	itt	eq
 8003384:	2107      	moveq	r1, #7
 8003386:	f00d bdec 	beq.w	8010f62 <USBPD_PHY_ExitTransmit>
 800338a:	2010      	movs	r0, #16
 800338c:	4770      	bx	lr

0800338e <USBPD_PRL_Reset>:
 800338e:	b538      	push	{r3, r4, r5, lr}
 8003390:	4604      	mov	r4, r0
 8003392:	f8df 0478 	ldr.w	r0, [pc, #1144]	@ 800380c <.text_39>
 8003396:	4621      	mov	r1, r4
 8003398:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 800339c:	2200      	movs	r2, #0
 800339e:	716a      	strb	r2, [r5, #5]
 80033a0:	702a      	strb	r2, [r5, #0]
 80033a2:	712a      	strb	r2, [r5, #4]
 80033a4:	72ea      	strb	r2, [r5, #11]
 80033a6:	732a      	strb	r2, [r5, #12]
 80033a8:	736a      	strb	r2, [r5, #13]
 80033aa:	2103      	movs	r1, #3
 80033ac:	220f      	movs	r2, #15
 80033ae:	1da8      	adds	r0, r5, #6
 80033b0:	f000 fa73 	bl	800389a <__aeabi_memset>
 80033b4:	2200      	movs	r2, #0
 80033b6:	f885 2025 	strb.w	r2, [r5, #37]	@ 0x25
 80033ba:	4620      	mov	r0, r4
 80033bc:	f00d fd8f 	bl	8010ede <USBPD_PHY_Reset>
 80033c0:	4620      	mov	r0, r4
 80033c2:	e8bd 4032 	ldmia.w	sp!, {r1, r4, r5, lr}
 80033c6:	f00d be0f 	b.w	8010fe8 <USBPD_PHY_EnableRX>

080033ca <USBPD_PRL_Stop>:
 80033ca:	f00d be1a 	b.w	8011002 <USBPD_PHY_DisableRX>

080033ce <USBPD_PRL_DeInit>:
 80033ce:	4770      	bx	lr

080033d0 <PRL_DisableRX>:
 80033d0:	f00d be17 	b.w	8011002 <USBPD_PHY_DisableRX>

080033d4 <PRL_Received>:
 80033d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033d8:	4682      	mov	sl, r0
 80033da:	f8df 9430 	ldr.w	r9, [pc, #1072]	@ 800380c <.text_39>
 80033de:	b084      	sub	sp, #16
 80033e0:	4655      	mov	r5, sl
 80033e2:	f859 4025 	ldr.w	r4, [r9, r5, lsl #2]
 80033e6:	f8df b428 	ldr.w	fp, [pc, #1064]	@ 8003810 <.text_40>
 80033ea:	4688      	mov	r8, r1
 80033ec:	f00d fd6b 	bl	8010ec6 <USBPD_PHY_GetMinGOODCRCTimerValue>
 80033f0:	4601      	mov	r1, r0
 80033f2:	ea4f 004a 	mov.w	r0, sl, lsl #1
 80033f6:	b2c0      	uxtb	r0, r0
 80033f8:	f00f f82e 	bl	8012458 <USBPD_TIM_Start>
 80033fc:	f104 0628 	add.w	r6, r4, #40	@ 0x28
 8003400:	7a30      	ldrb	r0, [r6, #8]
 8003402:	7a71      	ldrb	r1, [r6, #9]
 8003404:	eb00 2701 	add.w	r7, r0, r1, lsl #8
 8003408:	f24f 001f 	movw	r0, #61471	@ 0xf01f
 800340c:	4038      	ands	r0, r7
 800340e:	2801      	cmp	r0, #1
 8003410:	d113      	bne.n	800343a <PRL_Received+0x66>
 8003412:	0069      	lsls	r1, r5, #1
 8003414:	1c49      	adds	r1, r1, #1
 8003416:	b2c8      	uxtb	r0, r1
 8003418:	f00f f890 	bl	801253c <USBPD_TIM_IsExpired>
 800341c:	2801      	cmp	r0, #1
 800341e:	d040      	beq.n	80034a2 <PRL_Received+0xce>
 8003420:	f859 1025 	ldr.w	r1, [r9, r5, lsl #2]
 8003424:	200b      	movs	r0, #11
 8003426:	7148      	strb	r0, [r1, #5]
 8003428:	8367      	strh	r7, [r4, #26]
 800342a:	f000 f96c 	bl	8003706 <.text_32>
 800342e:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8003432:	4642      	mov	r2, r8
 8003434:	4651      	mov	r1, sl
 8003436:	2001      	movs	r0, #1
 8003438:	e14d      	b.n	80036d6 <PRL_Received+0x302>
 800343a:	f20f 405c 	addw	r0, pc, #1116	@ 0x45c
 800343e:	8805      	ldrh	r5, [r0, #0]
 8003440:	f24f 001f 	movw	r0, #61471	@ 0xf01f
 8003444:	2101      	movs	r1, #1
 8003446:	4038      	ands	r0, r7
 8003448:	72a1      	strb	r1, [r4, #10]
 800344a:	eb04 0208 	add.w	r2, r4, r8
 800344e:	280d      	cmp	r0, #13
 8003450:	9202      	str	r2, [sp, #8]
 8003452:	d103      	bne.n	800345c <PRL_Received+0x88>
 8003454:	2100      	movs	r1, #0
 8003456:	72d1      	strb	r1, [r2, #11]
 8003458:	f000 f95b 	bl	8003712 <.text_33>
 800345c:	ea5f 0008 	movs.w	r0, r8
 8003460:	d10c      	bne.n	800347c <PRL_Received+0xa8>
 8003462:	8a60      	ldrh	r0, [r4, #18]
 8003464:	f3c0 1140 	ubfx	r1, r0, #5, #1
 8003468:	f3c0 2200 	ubfx	r2, r0, #8, #1
 800346c:	f64f 60df 	movw	r0, #65247	@ 0xfedf
 8003470:	4005      	ands	r5, r0
 8003472:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
 8003476:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 800347a:	e002      	b.n	8003482 <PRL_Received+0xae>
 800347c:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8003480:	4015      	ands	r5, r2
 8003482:	f24f 113f 	movw	r1, #61759	@ 0xf13f
 8003486:	400d      	ands	r5, r1
 8003488:	f407 6060 	and.w	r0, r7, #3584	@ 0xe00
 800348c:	4305      	orrs	r5, r0
 800348e:	f045 0540 	orr.w	r5, r5, #64	@ 0x40
 8003492:	7625      	strb	r5, [r4, #24]
 8003494:	4641      	mov	r1, r8
 8003496:	0a2d      	lsrs	r5, r5, #8
 8003498:	7665      	strb	r5, [r4, #25]
 800349a:	4650      	mov	r0, sl
 800349c:	f7fd fa74 	bl	8000988 <PE_PRL_PostReceiveEvent>
 80034a0:	2800      	cmp	r0, #0
 80034a2:	f000 811b 	beq.w	80036dc <.text_28>
 80034a6:	2001      	movs	r0, #1
 80034a8:	7420      	strb	r0, [r4, #16]
 80034aa:	ea4f 004a 	mov.w	r0, sl, lsl #1
 80034ae:	b2c0      	uxtb	r0, r0
 80034b0:	f00f f844 	bl	801253c <USBPD_TIM_IsExpired>
 80034b4:	2800      	cmp	r0, #0
 80034b6:	d0f8      	beq.n	80034aa <PRL_Received+0xd6>
 80034b8:	2302      	movs	r3, #2
 80034ba:	f104 0218 	add.w	r2, r4, #24
 80034be:	4641      	mov	r1, r8
 80034c0:	4650      	mov	r0, sl
 80034c2:	f00d fd2a 	bl	8010f1a <USBPD_PHY_SendMessage>
 80034c6:	9003      	str	r0, [sp, #12]
 80034c8:	f884 8009 	strb.w	r8, [r4, #9]
 80034cc:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80034d0:	4650      	mov	r0, sl
 80034d2:	f7fd fa8f 	bl	80009f4 <PE_PRL_PostReceiveEventCopy>
 80034d6:	7ab0      	ldrb	r0, [r6, #10]
 80034d8:	7af1      	ldrb	r1, [r6, #11]
 80034da:	eb00 2201 	add.w	r2, r0, r1, lsl #8
 80034de:	f8ad 2004 	strh.w	r2, [sp, #4]
 80034e2:	0438      	lsls	r0, r7, #16
 80034e4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80034e8:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 80034ec:	0bc9      	lsrs	r1, r1, #15
 80034ee:	0fc0      	lsrs	r0, r0, #31
 80034f0:	f3c5 0508 	ubfx	r5, r5, #0, #9
 80034f4:	f8ad 1006 	strh.w	r1, [sp, #6]
 80034f8:	d004      	beq.n	8003504 <PRL_Received+0x130>
 80034fa:	0008      	movs	r0, r1
 80034fc:	d102      	bne.n	8003504 <PRL_Received+0x130>
 80034fe:	1d29      	adds	r1, r5, #4
 8003500:	9100      	str	r1, [sp, #0]
 8003502:	e019      	b.n	8003538 <PRL_Received+0x164>
 8003504:	7821      	ldrb	r1, [r4, #0]
 8003506:	b9a9      	cbnz	r1, 8003534 <PRL_Received+0x160>
 8003508:	f3c7 3002 	ubfx	r0, r7, #12, #3
 800350c:	b190      	cbz	r0, 8003534 <PRL_Received+0x160>
 800350e:	f007 001f 	and.w	r0, r7, #31
 8003512:	2803      	cmp	r0, #3
 8003514:	d10e      	bne.n	8003534 <PRL_Received+0x160>
 8003516:	7ab0      	ldrb	r0, [r6, #10]
 8003518:	7af1      	ldrb	r1, [r6, #11]
 800351a:	eb00 2201 	add.w	r2, r0, r1, lsl #8
 800351e:	7b30      	ldrb	r0, [r6, #12]
 8003520:	7b71      	ldrb	r1, [r6, #13]
 8003522:	eb02 4200 	add.w	r2, r2, r0, lsl #16
 8003526:	eb02 6201 	add.w	r2, r2, r1, lsl #24
 800352a:	0f12      	lsrs	r2, r2, #28
 800352c:	2a08      	cmp	r2, #8
 800352e:	bf04      	itt	eq
 8003530:	2001      	moveq	r0, #1
 8003532:	7020      	strbeq	r0, [r4, #0]
 8003534:	f000 f8e7 	bl	8003706 <.text_32>
 8003538:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 800353c:	f8db c000 	ldr.w	ip, [fp]
 8003540:	4642      	mov	r2, r8
 8003542:	4651      	mov	r1, sl
 8003544:	2001      	movs	r0, #1
 8003546:	47e0      	blx	ip
 8003548:	9803      	ldr	r0, [sp, #12]
 800354a:	b948      	cbnz	r0, 8003560 <PRL_Received+0x18c>
 800354c:	2102      	movs	r1, #2
 800354e:	9100      	str	r1, [sp, #0]
 8003550:	f104 0318 	add.w	r3, r4, #24
 8003554:	f8db c000 	ldr.w	ip, [fp]
 8003558:	4642      	mov	r2, r8
 800355a:	4651      	mov	r1, sl
 800355c:	2002      	movs	r0, #2
 800355e:	47e0      	blx	ip
 8003560:	9802      	ldr	r0, [sp, #8]
 8003562:	7981      	ldrb	r1, [r0, #6]
 8003564:	f3c7 2042 	ubfx	r0, r7, #9, #3
 8003568:	4281      	cmp	r1, r0
 800356a:	bf04      	itt	eq
 800356c:	9803      	ldreq	r0, [sp, #12]
 800356e:	2800      	cmpeq	r0, #0
 8003570:	f000 80a2 	beq.w	80036b8 <PRL_Received+0x2e4>
 8003574:	0439      	lsls	r1, r7, #16
 8003576:	9a02      	ldr	r2, [sp, #8]
 8003578:	0e49      	lsrs	r1, r1, #25
 800357a:	f001 0107 	and.w	r1, r1, #7
 800357e:	7191      	strb	r1, [r2, #6]
 8003580:	0438      	lsls	r0, r7, #16
 8003582:	8427      	strh	r7, [r4, #32]
 8003584:	0fc0      	lsrs	r0, r0, #31
 8003586:	bf1c      	itt	ne
 8003588:	f8bd 0006 	ldrhne.w	r0, [sp, #6]
 800358c:	2800      	cmpne	r0, #0
 800358e:	d06e      	beq.n	800366e <PRL_Received+0x29a>
 8003590:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8003594:	83e0      	strh	r0, [r4, #30]
 8003596:	201a      	movs	r0, #26
 8003598:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800359c:	f411 4ff8 	tst.w	r1, #31744	@ 0x7c00
 80035a0:	d13c      	bne.n	800361c <PRL_Received+0x248>
 80035a2:	f3c7 3102 	ubfx	r1, r7, #12, #3
 80035a6:	2907      	cmp	r1, #7
 80035a8:	d301      	bcc.n	80035ae <PRL_Received+0x1da>
 80035aa:	2d1a      	cmp	r5, #26
 80035ac:	d820      	bhi.n	80035f0 <PRL_Received+0x21c>
 80035ae:	2100      	movs	r1, #0
 80035b0:	3434      	adds	r4, #52	@ 0x34
 80035b2:	e00c      	b.n	80035ce <PRL_Received+0x1fa>
 80035b4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80035b8:	6832      	ldr	r2, [r6, #0]
 80035ba:	f814 e001 	ldrb.w	lr, [r4, r1]
 80035be:	f3c3 23c3 	ubfx	r3, r3, #11, #4
 80035c2:	fb10 1303 	smlabb	r3, r0, r3, r1
 80035c6:	1c49      	adds	r1, r1, #1
 80035c8:	f802 e003 	strb.w	lr, [r2, r3]
 80035cc:	b289      	uxth	r1, r1
 80035ce:	f000 f894 	bl	80036fa <.text_31>
 80035d2:	d3ef      	bcc.n	80035b4 <PRL_Received+0x1e0>
 80035d4:	f3c7 3002 	ubfx	r0, r7, #12, #3
 80035d8:	0080      	lsls	r0, r0, #2
 80035da:	1e80      	subs	r0, r0, #2
 80035dc:	42a8      	cmp	r0, r5
 80035de:	d204      	bcs.n	80035ea <PRL_Received+0x216>
 80035e0:	f3c7 3002 	ubfx	r0, r7, #12, #3
 80035e4:	0080      	lsls	r0, r0, #2
 80035e6:	1e80      	subs	r0, r0, #2
 80035e8:	e00f      	b.n	800360a <PRL_Received+0x236>
 80035ea:	6870      	ldr	r0, [r6, #4]
 80035ec:	8005      	strh	r5, [r0, #0]
 80035ee:	e00e      	b.n	800360e <PRL_Received+0x23a>
 80035f0:	2101      	movs	r1, #1
 80035f2:	f884 1025 	strb.w	r1, [r4, #37]	@ 0x25
 80035f6:	2000      	movs	r0, #0
 80035f8:	f104 0134 	add.w	r1, r4, #52	@ 0x34
 80035fc:	6833      	ldr	r3, [r6, #0]
 80035fe:	5c0a      	ldrb	r2, [r1, r0]
 8003600:	541a      	strb	r2, [r3, r0]
 8003602:	1c40      	adds	r0, r0, #1
 8003604:	281a      	cmp	r0, #26
 8003606:	d3f9      	bcc.n	80035fc <PRL_Received+0x228>
 8003608:	201a      	movs	r0, #26
 800360a:	6871      	ldr	r1, [r6, #4]
 800360c:	8008      	strh	r0, [r1, #0]
 800360e:	4641      	mov	r1, r8
 8003610:	4650      	mov	r0, sl
 8003612:	b005      	add	sp, #20
 8003614:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003618:	f7fd b9b6 	b.w	8000988 <PE_PRL_PostReceiveEvent>
 800361c:	6871      	ldr	r1, [r6, #4]
 800361e:	8809      	ldrh	r1, [r1, #0]
 8003620:	f240 1205 	movw	r2, #261	@ 0x105
 8003624:	f101 031a 	add.w	r3, r1, #26
 8003628:	4293      	cmp	r3, r2
 800362a:	bf3f      	itttt	cc
 800362c:	f3c7 3302 	ubfxcc	r3, r7, #12, #3
 8003630:	eb01 0183 	addcc.w	r1, r1, r3, lsl #2
 8003634:	1e89      	subcc	r1, r1, #2
 8003636:	42a9      	cmpcc	r1, r5
 8003638:	d21a      	bcs.n	8003670 <PRL_Received+0x29c>
 800363a:	2101      	movs	r1, #1
 800363c:	f884 1025 	strb.w	r1, [r4, #37]	@ 0x25
 8003640:	3434      	adds	r4, #52	@ 0x34
 8003642:	2100      	movs	r1, #0
 8003644:	e007      	b.n	8003656 <PRL_Received+0x282>
 8003646:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800364a:	6832      	ldr	r2, [r6, #0]
 800364c:	5c65      	ldrb	r5, [r4, r1]
 800364e:	f000 f848 	bl	80036e2 <.text_29>
 8003652:	54d5      	strb	r5, [r2, r3]
 8003654:	b289      	uxth	r1, r1
 8003656:	f000 f850 	bl	80036fa <.text_31>
 800365a:	d3f4      	bcc.n	8003646 <PRL_Received+0x272>
 800365c:	6871      	ldr	r1, [r6, #4]
 800365e:	880a      	ldrh	r2, [r1, #0]
 8003660:	043f      	lsls	r7, r7, #16
 8003662:	0ebf      	lsrs	r7, r7, #26
 8003664:	f007 071c 	and.w	r7, r7, #28
 8003668:	1eb8      	subs	r0, r7, #2
 800366a:	1882      	adds	r2, r0, r2
 800366c:	800a      	strh	r2, [r1, #0]
 800366e:	e035      	b.n	80036dc <.text_28>
 8003670:	6871      	ldr	r1, [r6, #4]
 8003672:	880b      	ldrh	r3, [r1, #0]
 8003674:	f000 f83b 	bl	80036ee <.text_30>
 8003678:	4291      	cmp	r1, r2
 800367a:	d219      	bcs.n	80036b0 <PRL_Received+0x2dc>
 800367c:	f000 f837 	bl	80036ee <.text_30>
 8003680:	42a9      	cmp	r1, r5
 8003682:	d315      	bcc.n	80036b0 <PRL_Received+0x2dc>
 8003684:	2201      	movs	r2, #1
 8003686:	f884 2025 	strb.w	r2, [r4, #37]	@ 0x25
 800368a:	2100      	movs	r1, #0
 800368c:	3434      	adds	r4, #52	@ 0x34
 800368e:	e009      	b.n	80036a4 <PRL_Received+0x2d0>
 8003690:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8003694:	6832      	ldr	r2, [r6, #0]
 8003696:	f814 a001 	ldrb.w	sl, [r4, r1]
 800369a:	f000 f822 	bl	80036e2 <.text_29>
 800369e:	f802 a003 	strb.w	sl, [r2, r3]
 80036a2:	b289      	uxth	r1, r1
 80036a4:	f000 f829 	bl	80036fa <.text_31>
 80036a8:	d3f2      	bcc.n	8003690 <PRL_Received+0x2bc>
 80036aa:	6870      	ldr	r0, [r6, #4]
 80036ac:	8005      	strh	r5, [r0, #0]
 80036ae:	e015      	b.n	80036dc <.text_28>
 80036b0:	2100      	movs	r1, #0
 80036b2:	f884 1025 	strb.w	r1, [r4, #37]	@ 0x25
 80036b6:	e011      	b.n	80036dc <.text_28>
 80036b8:	20ff      	movs	r0, #255	@ 0xff
 80036ba:	7260      	strb	r0, [r4, #9]
 80036bc:	2100      	movs	r1, #0
 80036be:	7421      	strb	r1, [r4, #16]
 80036c0:	4650      	mov	r0, sl
 80036c2:	f7fd f981 	bl	80009c8 <PE_PRL_PostReceiveEventError>
 80036c6:	2000      	movs	r0, #0
 80036c8:	72a0      	strb	r0, [r4, #10]
 80036ca:	2117      	movs	r1, #23
 80036cc:	9100      	str	r1, [sp, #0]
 80036ce:	2200      	movs	r2, #0
 80036d0:	a365      	add	r3, pc, #404	@ (adr r3, 8003868 <.text_42>)
 80036d2:	4651      	mov	r1, sl
 80036d4:	2006      	movs	r0, #6
 80036d6:	f8db 4000 	ldr.w	r4, [fp]
 80036da:	47a0      	blx	r4

080036dc <.text_28>:
 80036dc:	b005      	add	sp, #20
 80036de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080036e2 <.text_29>:
 80036e2:	f3c3 23c3 	ubfx	r3, r3, #11, #4
 80036e6:	fb10 1303 	smlabb	r3, r0, r3, r1
 80036ea:	1c49      	adds	r1, r1, #1
 80036ec:	4770      	bx	lr

080036ee <.text_30>:
 80036ee:	f3c7 3102 	ubfx	r1, r7, #12, #3
 80036f2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80036f6:	1e89      	subs	r1, r1, #2
 80036f8:	4770      	bx	lr

080036fa <.text_31>:
 80036fa:	f3c7 3202 	ubfx	r2, r7, #12, #3
 80036fe:	0092      	lsls	r2, r2, #2
 8003700:	1e92      	subs	r2, r2, #2
 8003702:	4291      	cmp	r1, r2
 8003704:	4770      	bx	lr

08003706 <.text_32>:
 8003706:	f3c7 3002 	ubfx	r0, r7, #12, #3
 800370a:	0080      	lsls	r0, r0, #2
 800370c:	1c80      	adds	r0, r0, #2
 800370e:	9000      	str	r0, [sp, #0]
 8003710:	4770      	bx	lr

08003712 <.text_33>:
 8003712:	220f      	movs	r2, #15
 8003714:	2103      	movs	r1, #3
 8003716:	1da0      	adds	r0, r4, #6
 8003718:	f000 b8bf 	b.w	800389a <__aeabi_memset>

0800371c <PRL_ResetIndicate>:
 800371c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 8003720:	460d      	mov	r5, r1
 8003722:	2d05      	cmp	r5, #5
 8003724:	4680      	mov	r8, r0
 8003726:	d116      	bne.n	8003756 <PRL_ResetIndicate+0x3a>
 8003728:	4f38      	ldr	r7, [pc, #224]	@ (800380c <.text_39>)
 800372a:	4646      	mov	r6, r8
 800372c:	f857 4026 	ldr.w	r4, [r7, r6, lsl #2]
 8003730:	2000      	movs	r0, #0
 8003732:	2100      	movs	r1, #0
 8003734:	b2c2      	uxtb	r2, r0
 8003736:	1c40      	adds	r0, r0, #1
 8003738:	18a2      	adds	r2, r4, r2
 800373a:	b2c3      	uxtb	r3, r0
 800373c:	2b03      	cmp	r3, #3
 800373e:	72d1      	strb	r1, [r2, #11]
 8003740:	d3f8      	bcc.n	8003734 <PRL_ResetIndicate+0x18>
 8003742:	f7ff ffe6 	bl	8003712 <.text_33>
 8003746:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
 800374a:	2200      	movs	r2, #0
 800374c:	7142      	strb	r2, [r0, #5]
 800374e:	7022      	strb	r2, [r4, #0]
 8003750:	4640      	mov	r0, r8
 8003752:	f7ff fe3d 	bl	80033d0 <PRL_DisableRX>
 8003756:	2000      	movs	r0, #0
 8003758:	4e2d      	ldr	r6, [pc, #180]	@ (8003810 <.text_40>)
 800375a:	6837      	ldr	r7, [r6, #0]
 800375c:	9000      	str	r0, [sp, #0]
 800375e:	2300      	movs	r3, #0
 8003760:	462a      	mov	r2, r5
 8003762:	4641      	mov	r1, r8
 8003764:	2001      	movs	r0, #1
 8003766:	47b8      	blx	r7
 8003768:	4629      	mov	r1, r5
 800376a:	4640      	mov	r0, r8
 800376c:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 8003770:	f7fd b846 	b.w	8000800 <PE_PRL_ResetReceived>

08003774 <PRL_ResetCompleted>:
 8003774:	4a25      	ldr	r2, [pc, #148]	@ (800380c <.text_39>)
 8003776:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800377a:	2101      	movs	r1, #1
 800377c:	70c1      	strb	r1, [r0, #3]
 800377e:	4770      	bx	lr

08003780 <PRL_BistCompleted>:
 8003780:	f7fd b866 	b.w	8000850 <PE_PRL_BistCompleted>

08003784 <PRL_TxCompleted>:
 8003784:	b538      	push	{r3, r4, r5, lr}
 8003786:	4a21      	ldr	r2, [pc, #132]	@ (800380c <.text_39>)
 8003788:	4604      	mov	r4, r0
 800378a:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
 800378e:	7c2a      	ldrb	r2, [r5, #16]
 8003790:	2a01      	cmp	r2, #1
 8003792:	d002      	beq.n	800379a <PRL_TxCompleted+0x16>
 8003794:	2a02      	cmp	r2, #2
 8003796:	d009      	beq.n	80037ac <PRL_TxCompleted+0x28>
 8003798:	e010      	b.n	80037bc <PRL_TxCompleted+0x38>
 800379a:	b911      	cbnz	r1, 80037a2 <PRL_TxCompleted+0x1e>
 800379c:	f7fd f947 	bl	8000a2e <PE_PRL_PostReceiveEventComplete>
 80037a0:	e001      	b.n	80037a6 <PRL_TxCompleted+0x22>
 80037a2:	f7fd f911 	bl	80009c8 <PE_PRL_PostReceiveEventError>
 80037a6:	2000      	movs	r0, #0
 80037a8:	72a8      	strb	r0, [r5, #10]
 80037aa:	e007      	b.n	80037bc <PRL_TxCompleted+0x38>
 80037ac:	f00d fb7e 	bl	8010eac <USBPD_PHY_GetRetryTimerValue>
 80037b0:	0064      	lsls	r4, r4, #1
 80037b2:	4601      	mov	r1, r0
 80037b4:	1c64      	adds	r4, r4, #1
 80037b6:	b2e0      	uxtb	r0, r4
 80037b8:	f00e fe4e 	bl	8012458 <USBPD_TIM_Start>
 80037bc:	2000      	movs	r0, #0
 80037be:	7428      	strb	r0, [r5, #16]
 80037c0:	bd31      	pop	{r0, r4, r5, pc}

080037c2 <USBPD_PRL_PrepareExtendedTxChunkSending>:
 80037c2:	b530      	push	{r4, r5, lr}
 80037c4:	4c11      	ldr	r4, [pc, #68]	@ (800380c <.text_39>)
 80037c6:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 80037ca:	8ba5      	ldrh	r5, [r4, #28]
 80037cc:	f248 30ff 	movw	r0, #33791	@ 0x83ff
 80037d0:	4005      	ands	r5, r0
 80037d2:	8a60      	ldrh	r0, [r4, #18]
 80037d4:	ea45 25c1 	orr.w	r5, r5, r1, lsl #11
 80037d8:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 80037dc:	f405 457e 	and.w	r5, r5, #65024	@ 0xfe00
 80037e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037e4:	8260      	strh	r0, [r4, #18]
 80037e6:	432a      	orrs	r2, r5
 80037e8:	8c21      	ldrh	r1, [r4, #32]
 80037ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037ee:	f361 0004 	bfi	r0, r1, #0, #5
 80037f2:	83a2      	strh	r2, [r4, #28]
 80037f4:	8260      	strh	r0, [r4, #18]
 80037f6:	7018      	strb	r0, [r3, #0]
 80037f8:	8a60      	ldrh	r0, [r4, #18]
 80037fa:	0a00      	lsrs	r0, r0, #8
 80037fc:	7058      	strb	r0, [r3, #1]
 80037fe:	8ba0      	ldrh	r0, [r4, #28]
 8003800:	7098      	strb	r0, [r3, #2]
 8003802:	8ba1      	ldrh	r1, [r4, #28]
 8003804:	0a09      	lsrs	r1, r1, #8
 8003806:	70d9      	strb	r1, [r3, #3]
 8003808:	bd30      	pop	{r4, r5, pc}
	...

0800380c <.text_39>:
 800380c:	20000344 	.word	0x20000344

08003810 <.text_40>:
 8003810:	20000000 	.word	0x20000000

08003814 <USBPD_PRL_PrepareChunkRequest>:
 8003814:	b530      	push	{r4, r5, lr}
 8003816:	f7ff fb46 	bl	8002ea6 <.text_12>
 800381a:	8b9c      	ldrh	r4, [r3, #28]
 800381c:	8bdd      	ldrh	r5, [r3, #30]
 800381e:	f444 4404 	orr.w	r4, r4, #33792	@ 0x8400
 8003822:	0aed      	lsrs	r5, r5, #11
 8003824:	839c      	strh	r4, [r3, #28]
 8003826:	1c6d      	adds	r5, r5, #1
 8003828:	02ed      	lsls	r5, r5, #11
 800382a:	f404 4406 	and.w	r4, r4, #34304	@ 0x8600
 800382e:	f405 45f0 	and.w	r5, r5, #30720	@ 0x7800
 8003832:	432c      	orrs	r4, r5
 8003834:	839c      	strh	r4, [r3, #28]
 8003836:	8a5c      	ldrh	r4, [r3, #18]
 8003838:	8c1d      	ldrh	r5, [r3, #32]
 800383a:	f444 4400 	orr.w	r4, r4, #32768	@ 0x8000
 800383e:	825c      	strh	r4, [r3, #18]
 8003840:	f365 0404 	bfi	r4, r5, #0, #5
 8003844:	825c      	strh	r4, [r3, #18]
 8003846:	2400      	movs	r4, #0
 8003848:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800384c:	7144      	strb	r4, [r0, #5]
 800384e:	8a5a      	ldrh	r2, [r3, #18]
 8003850:	700a      	strb	r2, [r1, #0]
 8003852:	8a58      	ldrh	r0, [r3, #18]
 8003854:	0a00      	lsrs	r0, r0, #8
 8003856:	7048      	strb	r0, [r1, #1]
 8003858:	8b98      	ldrh	r0, [r3, #28]
 800385a:	7088      	strb	r0, [r1, #2]
 800385c:	8b9a      	ldrh	r2, [r3, #28]
 800385e:	710c      	strb	r4, [r1, #4]
 8003860:	0a12      	lsrs	r2, r2, #8
 8003862:	714c      	strb	r4, [r1, #5]
 8003864:	70ca      	strb	r2, [r1, #3]
 8003866:	bd30      	pop	{r4, r5, pc}

08003868 <.text_42>:
 8003868:	5f4c5250 	.word	0x5f4c5250
 800386c:	4e455645 	.word	0x4e455645
 8003870:	58525f54 	.word	0x58525f54
 8003874:	5349445f 	.word	0x5349445f
 8003878:	44524143 	.word	0x44524143
 800387c:	00004445 	.word	0x00004445

08003880 <USBPD_PRL_Init::PRL_PhyCallbacks>:
 8003880:	080033d5 0800371d 08003775 08003781     .3...7..u7...7..
 8003890:	08003785 00000000                       .7......

08003898 <.text_44>:
 8003898:	0001      	.short	0x0001

0800389a <__aeabi_memset>:
 800389a:	b470      	push	{r4, r5, r6}
 800389c:	0784      	lsls	r4, r0, #30
 800389e:	d046      	beq.n	800392e <__aeabi_memset+0x94>
 80038a0:	1e4c      	subs	r4, r1, #1
 80038a2:	2900      	cmp	r1, #0
 80038a4:	d041      	beq.n	800392a <__aeabi_memset+0x90>
 80038a6:	b2d5      	uxtb	r5, r2
 80038a8:	4603      	mov	r3, r0
 80038aa:	e002      	b.n	80038b2 <__aeabi_memset+0x18>
 80038ac:	1e61      	subs	r1, r4, #1
 80038ae:	b3e4      	cbz	r4, 800392a <__aeabi_memset+0x90>
 80038b0:	460c      	mov	r4, r1
 80038b2:	f803 5b01 	strb.w	r5, [r3], #1
 80038b6:	0799      	lsls	r1, r3, #30
 80038b8:	d1f8      	bne.n	80038ac <__aeabi_memset+0x12>
 80038ba:	2c03      	cmp	r4, #3
 80038bc:	d92e      	bls.n	800391c <__aeabi_memset+0x82>
 80038be:	b2d5      	uxtb	r5, r2
 80038c0:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80038c4:	2c0f      	cmp	r4, #15
 80038c6:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80038ca:	d919      	bls.n	8003900 <__aeabi_memset+0x66>
 80038cc:	4626      	mov	r6, r4
 80038ce:	f103 0110 	add.w	r1, r3, #16
 80038d2:	3e10      	subs	r6, #16
 80038d4:	2e0f      	cmp	r6, #15
 80038d6:	f841 5c10 	str.w	r5, [r1, #-16]
 80038da:	f841 5c0c 	str.w	r5, [r1, #-12]
 80038de:	f841 5c08 	str.w	r5, [r1, #-8]
 80038e2:	f841 5c04 	str.w	r5, [r1, #-4]
 80038e6:	f101 0110 	add.w	r1, r1, #16
 80038ea:	d8f2      	bhi.n	80038d2 <__aeabi_memset+0x38>
 80038ec:	f1a4 0110 	sub.w	r1, r4, #16
 80038f0:	f021 010f 	bic.w	r1, r1, #15
 80038f4:	f004 040f 	and.w	r4, r4, #15
 80038f8:	3110      	adds	r1, #16
 80038fa:	2c03      	cmp	r4, #3
 80038fc:	440b      	add	r3, r1
 80038fe:	d90d      	bls.n	800391c <__aeabi_memset+0x82>
 8003900:	461e      	mov	r6, r3
 8003902:	4621      	mov	r1, r4
 8003904:	3904      	subs	r1, #4
 8003906:	2903      	cmp	r1, #3
 8003908:	f846 5b04 	str.w	r5, [r6], #4
 800390c:	d8fa      	bhi.n	8003904 <__aeabi_memset+0x6a>
 800390e:	1f21      	subs	r1, r4, #4
 8003910:	f021 0103 	bic.w	r1, r1, #3
 8003914:	3104      	adds	r1, #4
 8003916:	440b      	add	r3, r1
 8003918:	f004 0403 	and.w	r4, r4, #3
 800391c:	b12c      	cbz	r4, 800392a <__aeabi_memset+0x90>
 800391e:	b2d2      	uxtb	r2, r2
 8003920:	441c      	add	r4, r3
 8003922:	f803 2b01 	strb.w	r2, [r3], #1
 8003926:	42a3      	cmp	r3, r4
 8003928:	d1fb      	bne.n	8003922 <__aeabi_memset+0x88>
 800392a:	bc70      	pop	{r4, r5, r6}
 800392c:	4770      	bx	lr
 800392e:	460c      	mov	r4, r1
 8003930:	4603      	mov	r3, r0
 8003932:	e7c2      	b.n	80038ba <__aeabi_memset+0x20>

08003934 <strlen>:
 8003934:	4603      	mov	r3, r0
 8003936:	f813 2b01 	ldrb.w	r2, [r3], #1
 800393a:	2a00      	cmp	r2, #0
 800393c:	d1fb      	bne.n	8003936 <strlen+0x2>
 800393e:	1a18      	subs	r0, r3, r0
 8003940:	3801      	subs	r0, #1
 8003942:	4770      	bx	lr

08003944 <strcmp>:
 8003944:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003948:	f811 3b01 	ldrb.w	r3, [r1], #1
 800394c:	2a01      	cmp	r2, #1
 800394e:	bf28      	it	cs
 8003950:	429a      	cmpcs	r2, r3
 8003952:	d0f7      	beq.n	8003944 <strcmp>
 8003954:	1ad0      	subs	r0, r2, r3
 8003956:	4770      	bx	lr
	...

08003960 <memchr>:
 8003960:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8003964:	2a10      	cmp	r2, #16
 8003966:	db2b      	blt.n	80039c0 <memchr+0x60>
 8003968:	f010 0f07 	tst.w	r0, #7
 800396c:	d008      	beq.n	8003980 <memchr+0x20>
 800396e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003972:	3a01      	subs	r2, #1
 8003974:	428b      	cmp	r3, r1
 8003976:	d02d      	beq.n	80039d4 <memchr+0x74>
 8003978:	f010 0f07 	tst.w	r0, #7
 800397c:	b342      	cbz	r2, 80039d0 <memchr+0x70>
 800397e:	d1f6      	bne.n	800396e <memchr+0xe>
 8003980:	b4f0      	push	{r4, r5, r6, r7}
 8003982:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8003986:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800398a:	f022 0407 	bic.w	r4, r2, #7
 800398e:	f07f 0700 	mvns.w	r7, #0
 8003992:	2300      	movs	r3, #0
 8003994:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8003998:	3c08      	subs	r4, #8
 800399a:	ea85 0501 	eor.w	r5, r5, r1
 800399e:	ea86 0601 	eor.w	r6, r6, r1
 80039a2:	fa85 f547 	uadd8	r5, r5, r7
 80039a6:	faa3 f587 	sel	r5, r3, r7
 80039aa:	fa86 f647 	uadd8	r6, r6, r7
 80039ae:	faa5 f687 	sel	r6, r5, r7
 80039b2:	b98e      	cbnz	r6, 80039d8 <memchr+0x78>
 80039b4:	d1ee      	bne.n	8003994 <memchr+0x34>
 80039b6:	bcf0      	pop	{r4, r5, r6, r7}
 80039b8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80039bc:	f002 0207 	and.w	r2, r2, #7
 80039c0:	b132      	cbz	r2, 80039d0 <memchr+0x70>
 80039c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80039c6:	3a01      	subs	r2, #1
 80039c8:	ea83 0301 	eor.w	r3, r3, r1
 80039cc:	b113      	cbz	r3, 80039d4 <memchr+0x74>
 80039ce:	d1f8      	bne.n	80039c2 <memchr+0x62>
 80039d0:	2000      	movs	r0, #0
 80039d2:	4770      	bx	lr
 80039d4:	3801      	subs	r0, #1
 80039d6:	4770      	bx	lr
 80039d8:	2d00      	cmp	r5, #0
 80039da:	bf06      	itte	eq
 80039dc:	4635      	moveq	r5, r6
 80039de:	3803      	subeq	r0, #3
 80039e0:	3807      	subne	r0, #7
 80039e2:	f015 0f01 	tst.w	r5, #1
 80039e6:	d107      	bne.n	80039f8 <memchr+0x98>
 80039e8:	3001      	adds	r0, #1
 80039ea:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80039ee:	bf02      	ittt	eq
 80039f0:	3001      	addeq	r0, #1
 80039f2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80039f6:	3001      	addeq	r0, #1
 80039f8:	bcf0      	pop	{r4, r5, r6, r7}
 80039fa:	3801      	subs	r0, #1
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop

08003a00 <__aeabi_drsub>:
 8003a00:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8003a04:	e002      	b.n	8003a0c <__adddf3>
 8003a06:	bf00      	nop

08003a08 <__aeabi_dsub>:
 8003a08:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08003a0c <__adddf3>:
 8003a0c:	b530      	push	{r4, r5, lr}
 8003a0e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8003a12:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8003a16:	ea94 0f05 	teq	r4, r5
 8003a1a:	bf08      	it	eq
 8003a1c:	ea90 0f02 	teqeq	r0, r2
 8003a20:	bf1f      	itttt	ne
 8003a22:	ea54 0c00 	orrsne.w	ip, r4, r0
 8003a26:	ea55 0c02 	orrsne.w	ip, r5, r2
 8003a2a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8003a2e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003a32:	f000 80e2 	beq.w	8003bfa <__adddf3+0x1ee>
 8003a36:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8003a3a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8003a3e:	bfb8      	it	lt
 8003a40:	426d      	neglt	r5, r5
 8003a42:	dd0c      	ble.n	8003a5e <__adddf3+0x52>
 8003a44:	442c      	add	r4, r5
 8003a46:	ea80 0202 	eor.w	r2, r0, r2
 8003a4a:	ea81 0303 	eor.w	r3, r1, r3
 8003a4e:	ea82 0000 	eor.w	r0, r2, r0
 8003a52:	ea83 0101 	eor.w	r1, r3, r1
 8003a56:	ea80 0202 	eor.w	r2, r0, r2
 8003a5a:	ea81 0303 	eor.w	r3, r1, r3
 8003a5e:	2d36      	cmp	r5, #54	@ 0x36
 8003a60:	bf88      	it	hi
 8003a62:	bd30      	pophi	{r4, r5, pc}
 8003a64:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8003a68:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8003a6c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8003a70:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8003a74:	d002      	beq.n	8003a7c <__adddf3+0x70>
 8003a76:	4240      	negs	r0, r0
 8003a78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003a7c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8003a80:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003a84:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8003a88:	d002      	beq.n	8003a90 <__adddf3+0x84>
 8003a8a:	4252      	negs	r2, r2
 8003a8c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003a90:	ea94 0f05 	teq	r4, r5
 8003a94:	f000 80a7 	beq.w	8003be6 <__adddf3+0x1da>
 8003a98:	f1a4 0401 	sub.w	r4, r4, #1
 8003a9c:	f1d5 0e20 	rsbs	lr, r5, #32
 8003aa0:	db0d      	blt.n	8003abe <__adddf3+0xb2>
 8003aa2:	fa02 fc0e 	lsl.w	ip, r2, lr
 8003aa6:	fa22 f205 	lsr.w	r2, r2, r5
 8003aaa:	1880      	adds	r0, r0, r2
 8003aac:	f141 0100 	adc.w	r1, r1, #0
 8003ab0:	fa03 f20e 	lsl.w	r2, r3, lr
 8003ab4:	1880      	adds	r0, r0, r2
 8003ab6:	fa43 f305 	asr.w	r3, r3, r5
 8003aba:	4159      	adcs	r1, r3
 8003abc:	e00e      	b.n	8003adc <__adddf3+0xd0>
 8003abe:	f1a5 0520 	sub.w	r5, r5, #32
 8003ac2:	f10e 0e20 	add.w	lr, lr, #32
 8003ac6:	2a01      	cmp	r2, #1
 8003ac8:	fa03 fc0e 	lsl.w	ip, r3, lr
 8003acc:	bf28      	it	cs
 8003ace:	f04c 0c02 	orrcs.w	ip, ip, #2
 8003ad2:	fa43 f305 	asr.w	r3, r3, r5
 8003ad6:	18c0      	adds	r0, r0, r3
 8003ad8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8003adc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8003ae0:	d507      	bpl.n	8003af2 <__adddf3+0xe6>
 8003ae2:	f04f 0e00 	mov.w	lr, #0
 8003ae6:	f1dc 0c00 	rsbs	ip, ip, #0
 8003aea:	eb7e 0000 	sbcs.w	r0, lr, r0
 8003aee:	eb6e 0101 	sbc.w	r1, lr, r1
 8003af2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8003af6:	d31b      	bcc.n	8003b30 <__adddf3+0x124>
 8003af8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8003afc:	d30c      	bcc.n	8003b18 <__adddf3+0x10c>
 8003afe:	0849      	lsrs	r1, r1, #1
 8003b00:	ea5f 0030 	movs.w	r0, r0, rrx
 8003b04:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8003b08:	f104 0401 	add.w	r4, r4, #1
 8003b0c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8003b10:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8003b14:	f080 809a 	bcs.w	8003c4c <__adddf3+0x240>
 8003b18:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8003b1c:	bf08      	it	eq
 8003b1e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8003b22:	f150 0000 	adcs.w	r0, r0, #0
 8003b26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003b2a:	ea41 0105 	orr.w	r1, r1, r5
 8003b2e:	bd30      	pop	{r4, r5, pc}
 8003b30:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8003b34:	4140      	adcs	r0, r0
 8003b36:	eb41 0101 	adc.w	r1, r1, r1
 8003b3a:	3c01      	subs	r4, #1
 8003b3c:	bf28      	it	cs
 8003b3e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8003b42:	d2e9      	bcs.n	8003b18 <__adddf3+0x10c>
 8003b44:	f091 0f00 	teq	r1, #0
 8003b48:	bf04      	itt	eq
 8003b4a:	4601      	moveq	r1, r0
 8003b4c:	2000      	moveq	r0, #0
 8003b4e:	fab1 f381 	clz	r3, r1
 8003b52:	bf08      	it	eq
 8003b54:	3320      	addeq	r3, #32
 8003b56:	f1a3 030b 	sub.w	r3, r3, #11
 8003b5a:	f1b3 0220 	subs.w	r2, r3, #32
 8003b5e:	da0c      	bge.n	8003b7a <__adddf3+0x16e>
 8003b60:	320c      	adds	r2, #12
 8003b62:	dd08      	ble.n	8003b76 <__adddf3+0x16a>
 8003b64:	f102 0c14 	add.w	ip, r2, #20
 8003b68:	f1c2 020c 	rsb	r2, r2, #12
 8003b6c:	fa01 f00c 	lsl.w	r0, r1, ip
 8003b70:	fa21 f102 	lsr.w	r1, r1, r2
 8003b74:	e00c      	b.n	8003b90 <__adddf3+0x184>
 8003b76:	f102 0214 	add.w	r2, r2, #20
 8003b7a:	bfd8      	it	le
 8003b7c:	f1c2 0c20 	rsble	ip, r2, #32
 8003b80:	fa01 f102 	lsl.w	r1, r1, r2
 8003b84:	fa20 fc0c 	lsr.w	ip, r0, ip
 8003b88:	bfdc      	itt	le
 8003b8a:	ea41 010c 	orrle.w	r1, r1, ip
 8003b8e:	4090      	lslle	r0, r2
 8003b90:	1ae4      	subs	r4, r4, r3
 8003b92:	bfa2      	ittt	ge
 8003b94:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8003b98:	4329      	orrge	r1, r5
 8003b9a:	bd30      	popge	{r4, r5, pc}
 8003b9c:	ea6f 0404 	mvn.w	r4, r4
 8003ba0:	3c1f      	subs	r4, #31
 8003ba2:	da1c      	bge.n	8003bde <__adddf3+0x1d2>
 8003ba4:	340c      	adds	r4, #12
 8003ba6:	dc0e      	bgt.n	8003bc6 <__adddf3+0x1ba>
 8003ba8:	f104 0414 	add.w	r4, r4, #20
 8003bac:	f1c4 0220 	rsb	r2, r4, #32
 8003bb0:	fa20 f004 	lsr.w	r0, r0, r4
 8003bb4:	fa01 f302 	lsl.w	r3, r1, r2
 8003bb8:	ea40 0003 	orr.w	r0, r0, r3
 8003bbc:	fa21 f304 	lsr.w	r3, r1, r4
 8003bc0:	ea45 0103 	orr.w	r1, r5, r3
 8003bc4:	bd30      	pop	{r4, r5, pc}
 8003bc6:	f1c4 040c 	rsb	r4, r4, #12
 8003bca:	f1c4 0220 	rsb	r2, r4, #32
 8003bce:	fa20 f002 	lsr.w	r0, r0, r2
 8003bd2:	fa01 f304 	lsl.w	r3, r1, r4
 8003bd6:	ea40 0003 	orr.w	r0, r0, r3
 8003bda:	4629      	mov	r1, r5
 8003bdc:	bd30      	pop	{r4, r5, pc}
 8003bde:	fa21 f004 	lsr.w	r0, r1, r4
 8003be2:	4629      	mov	r1, r5
 8003be4:	bd30      	pop	{r4, r5, pc}
 8003be6:	f094 0f00 	teq	r4, #0
 8003bea:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8003bee:	bf06      	itte	eq
 8003bf0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8003bf4:	3401      	addeq	r4, #1
 8003bf6:	3d01      	subne	r5, #1
 8003bf8:	e74e      	b.n	8003a98 <__adddf3+0x8c>
 8003bfa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8003bfe:	bf18      	it	ne
 8003c00:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003c04:	d029      	beq.n	8003c5a <__adddf3+0x24e>
 8003c06:	ea94 0f05 	teq	r4, r5
 8003c0a:	bf08      	it	eq
 8003c0c:	ea90 0f02 	teqeq	r0, r2
 8003c10:	d005      	beq.n	8003c1e <__adddf3+0x212>
 8003c12:	ea54 0c00 	orrs.w	ip, r4, r0
 8003c16:	bf04      	itt	eq
 8003c18:	4619      	moveq	r1, r3
 8003c1a:	4610      	moveq	r0, r2
 8003c1c:	bd30      	pop	{r4, r5, pc}
 8003c1e:	ea91 0f03 	teq	r1, r3
 8003c22:	bf1e      	ittt	ne
 8003c24:	2100      	movne	r1, #0
 8003c26:	2000      	movne	r0, #0
 8003c28:	bd30      	popne	{r4, r5, pc}
 8003c2a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8003c2e:	d105      	bne.n	8003c3c <__adddf3+0x230>
 8003c30:	0040      	lsls	r0, r0, #1
 8003c32:	4149      	adcs	r1, r1
 8003c34:	bf28      	it	cs
 8003c36:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8003c3a:	bd30      	pop	{r4, r5, pc}
 8003c3c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8003c40:	bf3c      	itt	cc
 8003c42:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8003c46:	bd30      	popcc	{r4, r5, pc}
 8003c48:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8003c4c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8003c50:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003c54:	f04f 0000 	mov.w	r0, #0
 8003c58:	bd30      	pop	{r4, r5, pc}
 8003c5a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8003c5e:	bf1a      	itte	ne
 8003c60:	4619      	movne	r1, r3
 8003c62:	4610      	movne	r0, r2
 8003c64:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8003c68:	bf1c      	itt	ne
 8003c6a:	460b      	movne	r3, r1
 8003c6c:	4602      	movne	r2, r0
 8003c6e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8003c72:	bf06      	itte	eq
 8003c74:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8003c78:	ea91 0f03 	teqeq	r1, r3
 8003c7c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8003c80:	bd30      	pop	{r4, r5, pc}
 8003c82:	bf00      	nop

08003c84 <__aeabi_ui2d>:
 8003c84:	f090 0f00 	teq	r0, #0
 8003c88:	bf04      	itt	eq
 8003c8a:	2100      	moveq	r1, #0
 8003c8c:	4770      	bxeq	lr
 8003c8e:	b530      	push	{r4, r5, lr}
 8003c90:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8003c94:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8003c98:	f04f 0500 	mov.w	r5, #0
 8003c9c:	f04f 0100 	mov.w	r1, #0
 8003ca0:	e750      	b.n	8003b44 <__adddf3+0x138>
 8003ca2:	bf00      	nop

08003ca4 <__aeabi_i2d>:
 8003ca4:	f090 0f00 	teq	r0, #0
 8003ca8:	bf04      	itt	eq
 8003caa:	2100      	moveq	r1, #0
 8003cac:	4770      	bxeq	lr
 8003cae:	b530      	push	{r4, r5, lr}
 8003cb0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8003cb4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8003cb8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8003cbc:	bf48      	it	mi
 8003cbe:	4240      	negmi	r0, r0
 8003cc0:	f04f 0100 	mov.w	r1, #0
 8003cc4:	e73e      	b.n	8003b44 <__adddf3+0x138>
 8003cc6:	bf00      	nop

08003cc8 <__aeabi_f2d>:
 8003cc8:	0042      	lsls	r2, r0, #1
 8003cca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8003cce:	ea4f 0131 	mov.w	r1, r1, rrx
 8003cd2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8003cd6:	bf1f      	itttt	ne
 8003cd8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8003cdc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8003ce0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8003ce4:	4770      	bxne	lr
 8003ce6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8003cea:	bf08      	it	eq
 8003cec:	4770      	bxeq	lr
 8003cee:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8003cf2:	bf04      	itt	eq
 8003cf4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8003cf8:	4770      	bxeq	lr
 8003cfa:	b530      	push	{r4, r5, lr}
 8003cfc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8003d00:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8003d04:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8003d08:	e71c      	b.n	8003b44 <__adddf3+0x138>
 8003d0a:	bf00      	nop

08003d0c <__aeabi_ul2d>:
 8003d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8003d10:	bf08      	it	eq
 8003d12:	4770      	bxeq	lr
 8003d14:	b530      	push	{r4, r5, lr}
 8003d16:	f04f 0500 	mov.w	r5, #0
 8003d1a:	e00a      	b.n	8003d32 <__aeabi_l2d+0x16>

08003d1c <__aeabi_l2d>:
 8003d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8003d20:	bf08      	it	eq
 8003d22:	4770      	bxeq	lr
 8003d24:	b530      	push	{r4, r5, lr}
 8003d26:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8003d2a:	d502      	bpl.n	8003d32 <__aeabi_l2d+0x16>
 8003d2c:	4240      	negs	r0, r0
 8003d2e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003d32:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8003d36:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8003d3a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8003d3e:	f43f aed8 	beq.w	8003af2 <__adddf3+0xe6>
 8003d42:	f04f 0203 	mov.w	r2, #3
 8003d46:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003d4a:	bf18      	it	ne
 8003d4c:	3203      	addne	r2, #3
 8003d4e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003d52:	bf18      	it	ne
 8003d54:	3203      	addne	r2, #3
 8003d56:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8003d5a:	f1c2 0320 	rsb	r3, r2, #32
 8003d5e:	fa00 fc03 	lsl.w	ip, r0, r3
 8003d62:	fa20 f002 	lsr.w	r0, r0, r2
 8003d66:	fa01 fe03 	lsl.w	lr, r1, r3
 8003d6a:	ea40 000e 	orr.w	r0, r0, lr
 8003d6e:	fa21 f102 	lsr.w	r1, r1, r2
 8003d72:	4414      	add	r4, r2
 8003d74:	e6bd      	b.n	8003af2 <__adddf3+0xe6>
 8003d76:	bf00      	nop

08003d78 <__aeabi_dmul>:
 8003d78:	b570      	push	{r4, r5, r6, lr}
 8003d7a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8003d7e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8003d82:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8003d86:	bf1d      	ittte	ne
 8003d88:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003d8c:	ea94 0f0c 	teqne	r4, ip
 8003d90:	ea95 0f0c 	teqne	r5, ip
 8003d94:	f000 f8de 	bleq	8003f54 <__aeabi_dmul+0x1dc>
 8003d98:	442c      	add	r4, r5
 8003d9a:	ea81 0603 	eor.w	r6, r1, r3
 8003d9e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8003da2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8003da6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8003daa:	bf18      	it	ne
 8003dac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8003db0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8003db4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003db8:	d038      	beq.n	8003e2c <__aeabi_dmul+0xb4>
 8003dba:	fba0 ce02 	umull	ip, lr, r0, r2
 8003dbe:	f04f 0500 	mov.w	r5, #0
 8003dc2:	fbe1 e502 	umlal	lr, r5, r1, r2
 8003dc6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8003dca:	fbe0 e503 	umlal	lr, r5, r0, r3
 8003dce:	f04f 0600 	mov.w	r6, #0
 8003dd2:	fbe1 5603 	umlal	r5, r6, r1, r3
 8003dd6:	f09c 0f00 	teq	ip, #0
 8003dda:	bf18      	it	ne
 8003ddc:	f04e 0e01 	orrne.w	lr, lr, #1
 8003de0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8003de4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8003de8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8003dec:	d204      	bcs.n	8003df8 <__aeabi_dmul+0x80>
 8003dee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8003df2:	416d      	adcs	r5, r5
 8003df4:	eb46 0606 	adc.w	r6, r6, r6
 8003df8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8003dfc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8003e00:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8003e04:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8003e08:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8003e0c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8003e10:	bf88      	it	hi
 8003e12:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8003e16:	d81e      	bhi.n	8003e56 <__aeabi_dmul+0xde>
 8003e18:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8003e1c:	bf08      	it	eq
 8003e1e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8003e22:	f150 0000 	adcs.w	r0, r0, #0
 8003e26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003e2a:	bd70      	pop	{r4, r5, r6, pc}
 8003e2c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8003e30:	ea46 0101 	orr.w	r1, r6, r1
 8003e34:	ea40 0002 	orr.w	r0, r0, r2
 8003e38:	ea81 0103 	eor.w	r1, r1, r3
 8003e3c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8003e40:	bfc2      	ittt	gt
 8003e42:	ebd4 050c 	rsbsgt	r5, r4, ip
 8003e46:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8003e4a:	bd70      	popgt	{r4, r5, r6, pc}
 8003e4c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8003e50:	f04f 0e00 	mov.w	lr, #0
 8003e54:	3c01      	subs	r4, #1
 8003e56:	f300 80ab 	bgt.w	8003fb0 <__aeabi_dmul+0x238>
 8003e5a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8003e5e:	bfde      	ittt	le
 8003e60:	2000      	movle	r0, #0
 8003e62:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8003e66:	bd70      	pople	{r4, r5, r6, pc}
 8003e68:	f1c4 0400 	rsb	r4, r4, #0
 8003e6c:	3c20      	subs	r4, #32
 8003e6e:	da35      	bge.n	8003edc <__aeabi_dmul+0x164>
 8003e70:	340c      	adds	r4, #12
 8003e72:	dc1b      	bgt.n	8003eac <__aeabi_dmul+0x134>
 8003e74:	f104 0414 	add.w	r4, r4, #20
 8003e78:	f1c4 0520 	rsb	r5, r4, #32
 8003e7c:	fa00 f305 	lsl.w	r3, r0, r5
 8003e80:	fa20 f004 	lsr.w	r0, r0, r4
 8003e84:	fa01 f205 	lsl.w	r2, r1, r5
 8003e88:	ea40 0002 	orr.w	r0, r0, r2
 8003e8c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8003e90:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8003e94:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8003e98:	fa21 f604 	lsr.w	r6, r1, r4
 8003e9c:	eb42 0106 	adc.w	r1, r2, r6
 8003ea0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003ea4:	bf08      	it	eq
 8003ea6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003eaa:	bd70      	pop	{r4, r5, r6, pc}
 8003eac:	f1c4 040c 	rsb	r4, r4, #12
 8003eb0:	f1c4 0520 	rsb	r5, r4, #32
 8003eb4:	fa00 f304 	lsl.w	r3, r0, r4
 8003eb8:	fa20 f005 	lsr.w	r0, r0, r5
 8003ebc:	fa01 f204 	lsl.w	r2, r1, r4
 8003ec0:	ea40 0002 	orr.w	r0, r0, r2
 8003ec4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8003ec8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8003ecc:	f141 0100 	adc.w	r1, r1, #0
 8003ed0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003ed4:	bf08      	it	eq
 8003ed6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003eda:	bd70      	pop	{r4, r5, r6, pc}
 8003edc:	f1c4 0520 	rsb	r5, r4, #32
 8003ee0:	fa00 f205 	lsl.w	r2, r0, r5
 8003ee4:	ea4e 0e02 	orr.w	lr, lr, r2
 8003ee8:	fa20 f304 	lsr.w	r3, r0, r4
 8003eec:	fa01 f205 	lsl.w	r2, r1, r5
 8003ef0:	ea43 0302 	orr.w	r3, r3, r2
 8003ef4:	fa21 f004 	lsr.w	r0, r1, r4
 8003ef8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8003efc:	fa21 f204 	lsr.w	r2, r1, r4
 8003f00:	ea20 0002 	bic.w	r0, r0, r2
 8003f04:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8003f08:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003f0c:	bf08      	it	eq
 8003f0e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003f12:	bd70      	pop	{r4, r5, r6, pc}
 8003f14:	f094 0f00 	teq	r4, #0
 8003f18:	d10f      	bne.n	8003f3a <__aeabi_dmul+0x1c2>
 8003f1a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8003f1e:	0040      	lsls	r0, r0, #1
 8003f20:	eb41 0101 	adc.w	r1, r1, r1
 8003f24:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8003f28:	bf08      	it	eq
 8003f2a:	3c01      	subeq	r4, #1
 8003f2c:	d0f7      	beq.n	8003f1e <__aeabi_dmul+0x1a6>
 8003f2e:	ea41 0106 	orr.w	r1, r1, r6
 8003f32:	f095 0f00 	teq	r5, #0
 8003f36:	bf18      	it	ne
 8003f38:	4770      	bxne	lr
 8003f3a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8003f3e:	0052      	lsls	r2, r2, #1
 8003f40:	eb43 0303 	adc.w	r3, r3, r3
 8003f44:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8003f48:	bf08      	it	eq
 8003f4a:	3d01      	subeq	r5, #1
 8003f4c:	d0f7      	beq.n	8003f3e <__aeabi_dmul+0x1c6>
 8003f4e:	ea43 0306 	orr.w	r3, r3, r6
 8003f52:	4770      	bx	lr
 8003f54:	ea94 0f0c 	teq	r4, ip
 8003f58:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8003f5c:	bf18      	it	ne
 8003f5e:	ea95 0f0c 	teqne	r5, ip
 8003f62:	d00c      	beq.n	8003f7e <__aeabi_dmul+0x206>
 8003f64:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003f68:	bf18      	it	ne
 8003f6a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003f6e:	d1d1      	bne.n	8003f14 <__aeabi_dmul+0x19c>
 8003f70:	ea81 0103 	eor.w	r1, r1, r3
 8003f74:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8003f78:	f04f 0000 	mov.w	r0, #0
 8003f7c:	bd70      	pop	{r4, r5, r6, pc}
 8003f7e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003f82:	bf06      	itte	eq
 8003f84:	4610      	moveq	r0, r2
 8003f86:	4619      	moveq	r1, r3
 8003f88:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003f8c:	d019      	beq.n	8003fc2 <__aeabi_dmul+0x24a>
 8003f8e:	ea94 0f0c 	teq	r4, ip
 8003f92:	d102      	bne.n	8003f9a <__aeabi_dmul+0x222>
 8003f94:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8003f98:	d113      	bne.n	8003fc2 <__aeabi_dmul+0x24a>
 8003f9a:	ea95 0f0c 	teq	r5, ip
 8003f9e:	d105      	bne.n	8003fac <__aeabi_dmul+0x234>
 8003fa0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8003fa4:	bf1c      	itt	ne
 8003fa6:	4610      	movne	r0, r2
 8003fa8:	4619      	movne	r1, r3
 8003faa:	d10a      	bne.n	8003fc2 <__aeabi_dmul+0x24a>
 8003fac:	ea81 0103 	eor.w	r1, r1, r3
 8003fb0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8003fb4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8003fb8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003fbc:	f04f 0000 	mov.w	r0, #0
 8003fc0:	bd70      	pop	{r4, r5, r6, pc}
 8003fc2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8003fc6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8003fca:	bd70      	pop	{r4, r5, r6, pc}

08003fcc <__aeabi_ddiv>:
 8003fcc:	b570      	push	{r4, r5, r6, lr}
 8003fce:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8003fd2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8003fd6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8003fda:	bf1d      	ittte	ne
 8003fdc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003fe0:	ea94 0f0c 	teqne	r4, ip
 8003fe4:	ea95 0f0c 	teqne	r5, ip
 8003fe8:	f000 f8a7 	bleq	800413a <__aeabi_ddiv+0x16e>
 8003fec:	eba4 0405 	sub.w	r4, r4, r5
 8003ff0:	ea81 0e03 	eor.w	lr, r1, r3
 8003ff4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8003ff8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8003ffc:	f000 8088 	beq.w	8004110 <__aeabi_ddiv+0x144>
 8004000:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004004:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8004008:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800400c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8004010:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8004014:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8004018:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800401c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8004020:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8004024:	429d      	cmp	r5, r3
 8004026:	bf08      	it	eq
 8004028:	4296      	cmpeq	r6, r2
 800402a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800402e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8004032:	d202      	bcs.n	800403a <__aeabi_ddiv+0x6e>
 8004034:	085b      	lsrs	r3, r3, #1
 8004036:	ea4f 0232 	mov.w	r2, r2, rrx
 800403a:	1ab6      	subs	r6, r6, r2
 800403c:	eb65 0503 	sbc.w	r5, r5, r3
 8004040:	085b      	lsrs	r3, r3, #1
 8004042:	ea4f 0232 	mov.w	r2, r2, rrx
 8004046:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800404a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800404e:	ebb6 0e02 	subs.w	lr, r6, r2
 8004052:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004056:	bf22      	ittt	cs
 8004058:	1ab6      	subcs	r6, r6, r2
 800405a:	4675      	movcs	r5, lr
 800405c:	ea40 000c 	orrcs.w	r0, r0, ip
 8004060:	085b      	lsrs	r3, r3, #1
 8004062:	ea4f 0232 	mov.w	r2, r2, rrx
 8004066:	ebb6 0e02 	subs.w	lr, r6, r2
 800406a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800406e:	bf22      	ittt	cs
 8004070:	1ab6      	subcs	r6, r6, r2
 8004072:	4675      	movcs	r5, lr
 8004074:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8004078:	085b      	lsrs	r3, r3, #1
 800407a:	ea4f 0232 	mov.w	r2, r2, rrx
 800407e:	ebb6 0e02 	subs.w	lr, r6, r2
 8004082:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004086:	bf22      	ittt	cs
 8004088:	1ab6      	subcs	r6, r6, r2
 800408a:	4675      	movcs	r5, lr
 800408c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8004090:	085b      	lsrs	r3, r3, #1
 8004092:	ea4f 0232 	mov.w	r2, r2, rrx
 8004096:	ebb6 0e02 	subs.w	lr, r6, r2
 800409a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800409e:	bf22      	ittt	cs
 80040a0:	1ab6      	subcs	r6, r6, r2
 80040a2:	4675      	movcs	r5, lr
 80040a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80040a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80040ac:	d018      	beq.n	80040e0 <__aeabi_ddiv+0x114>
 80040ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80040b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80040b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80040ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80040be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80040c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80040c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80040ca:	d1c0      	bne.n	800404e <__aeabi_ddiv+0x82>
 80040cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80040d0:	d10b      	bne.n	80040ea <__aeabi_ddiv+0x11e>
 80040d2:	ea41 0100 	orr.w	r1, r1, r0
 80040d6:	f04f 0000 	mov.w	r0, #0
 80040da:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80040de:	e7b6      	b.n	800404e <__aeabi_ddiv+0x82>
 80040e0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80040e4:	bf04      	itt	eq
 80040e6:	4301      	orreq	r1, r0
 80040e8:	2000      	moveq	r0, #0
 80040ea:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80040ee:	bf88      	it	hi
 80040f0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80040f4:	f63f aeaf 	bhi.w	8003e56 <__aeabi_dmul+0xde>
 80040f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80040fc:	bf04      	itt	eq
 80040fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8004102:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004106:	f150 0000 	adcs.w	r0, r0, #0
 800410a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800410e:	bd70      	pop	{r4, r5, r6, pc}
 8004110:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8004114:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8004118:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800411c:	bfc2      	ittt	gt
 800411e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004122:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8004126:	bd70      	popgt	{r4, r5, r6, pc}
 8004128:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800412c:	f04f 0e00 	mov.w	lr, #0
 8004130:	3c01      	subs	r4, #1
 8004132:	e690      	b.n	8003e56 <__aeabi_dmul+0xde>
 8004134:	ea45 0e06 	orr.w	lr, r5, r6
 8004138:	e68d      	b.n	8003e56 <__aeabi_dmul+0xde>
 800413a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800413e:	ea94 0f0c 	teq	r4, ip
 8004142:	bf08      	it	eq
 8004144:	ea95 0f0c 	teqeq	r5, ip
 8004148:	f43f af3b 	beq.w	8003fc2 <__aeabi_dmul+0x24a>
 800414c:	ea94 0f0c 	teq	r4, ip
 8004150:	d10a      	bne.n	8004168 <__aeabi_ddiv+0x19c>
 8004152:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8004156:	f47f af34 	bne.w	8003fc2 <__aeabi_dmul+0x24a>
 800415a:	ea95 0f0c 	teq	r5, ip
 800415e:	f47f af25 	bne.w	8003fac <__aeabi_dmul+0x234>
 8004162:	4610      	mov	r0, r2
 8004164:	4619      	mov	r1, r3
 8004166:	e72c      	b.n	8003fc2 <__aeabi_dmul+0x24a>
 8004168:	ea95 0f0c 	teq	r5, ip
 800416c:	d106      	bne.n	800417c <__aeabi_ddiv+0x1b0>
 800416e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8004172:	f43f aefd 	beq.w	8003f70 <__aeabi_dmul+0x1f8>
 8004176:	4610      	mov	r0, r2
 8004178:	4619      	mov	r1, r3
 800417a:	e722      	b.n	8003fc2 <__aeabi_dmul+0x24a>
 800417c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004180:	bf18      	it	ne
 8004182:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8004186:	f47f aec5 	bne.w	8003f14 <__aeabi_dmul+0x19c>
 800418a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800418e:	f47f af0d 	bne.w	8003fac <__aeabi_dmul+0x234>
 8004192:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8004196:	f47f aeeb 	bne.w	8003f70 <__aeabi_dmul+0x1f8>
 800419a:	e712      	b.n	8003fc2 <__aeabi_dmul+0x24a>

0800419c <__aeabi_d2uiz>:
 800419c:	004a      	lsls	r2, r1, #1
 800419e:	d211      	bcs.n	80041c4 <__aeabi_d2uiz+0x28>
 80041a0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80041a4:	d211      	bcs.n	80041ca <__aeabi_d2uiz+0x2e>
 80041a6:	d50d      	bpl.n	80041c4 <__aeabi_d2uiz+0x28>
 80041a8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80041ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80041b0:	d40e      	bmi.n	80041d0 <__aeabi_d2uiz+0x34>
 80041b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80041b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80041ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80041be:	fa23 f002 	lsr.w	r0, r3, r2
 80041c2:	4770      	bx	lr
 80041c4:	f04f 0000 	mov.w	r0, #0
 80041c8:	4770      	bx	lr
 80041ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80041ce:	d102      	bne.n	80041d6 <__aeabi_d2uiz+0x3a>
 80041d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80041d4:	4770      	bx	lr
 80041d6:	f04f 0000 	mov.w	r0, #0
 80041da:	4770      	bx	lr

080041dc <__aeabi_uldivmod>:
 80041dc:	b953      	cbnz	r3, 80041f4 <__aeabi_uldivmod+0x18>
 80041de:	b94a      	cbnz	r2, 80041f4 <__aeabi_uldivmod+0x18>
 80041e0:	2900      	cmp	r1, #0
 80041e2:	bf08      	it	eq
 80041e4:	2800      	cmpeq	r0, #0
 80041e6:	bf1c      	itt	ne
 80041e8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80041ec:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80041f0:	f000 b96a 	b.w	80044c8 <__aeabi_idiv0>
 80041f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80041f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80041fc:	f000 f806 	bl	800420c <__udivmoddi4>
 8004200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004208:	b004      	add	sp, #16
 800420a:	4770      	bx	lr

0800420c <__udivmoddi4>:
 800420c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004210:	9d08      	ldr	r5, [sp, #32]
 8004212:	460c      	mov	r4, r1
 8004214:	2b00      	cmp	r3, #0
 8004216:	d14e      	bne.n	80042b6 <__udivmoddi4+0xaa>
 8004218:	4694      	mov	ip, r2
 800421a:	458c      	cmp	ip, r1
 800421c:	4686      	mov	lr, r0
 800421e:	fab2 f282 	clz	r2, r2
 8004222:	d962      	bls.n	80042ea <__udivmoddi4+0xde>
 8004224:	b14a      	cbz	r2, 800423a <__udivmoddi4+0x2e>
 8004226:	f1c2 0320 	rsb	r3, r2, #32
 800422a:	4091      	lsls	r1, r2
 800422c:	fa20 f303 	lsr.w	r3, r0, r3
 8004230:	fa0c fc02 	lsl.w	ip, ip, r2
 8004234:	4319      	orrs	r1, r3
 8004236:	fa00 fe02 	lsl.w	lr, r0, r2
 800423a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800423e:	fa1f f68c 	uxth.w	r6, ip
 8004242:	fbb1 f4f7 	udiv	r4, r1, r7
 8004246:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800424a:	fb07 1114 	mls	r1, r7, r4, r1
 800424e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004252:	fb04 f106 	mul.w	r1, r4, r6
 8004256:	4299      	cmp	r1, r3
 8004258:	d90a      	bls.n	8004270 <__udivmoddi4+0x64>
 800425a:	eb1c 0303 	adds.w	r3, ip, r3
 800425e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8004262:	f080 8112 	bcs.w	800448a <__udivmoddi4+0x27e>
 8004266:	4299      	cmp	r1, r3
 8004268:	f240 810f 	bls.w	800448a <__udivmoddi4+0x27e>
 800426c:	3c02      	subs	r4, #2
 800426e:	4463      	add	r3, ip
 8004270:	1a59      	subs	r1, r3, r1
 8004272:	fa1f f38e 	uxth.w	r3, lr
 8004276:	fbb1 f0f7 	udiv	r0, r1, r7
 800427a:	fb07 1110 	mls	r1, r7, r0, r1
 800427e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004282:	fb00 f606 	mul.w	r6, r0, r6
 8004286:	429e      	cmp	r6, r3
 8004288:	d90a      	bls.n	80042a0 <__udivmoddi4+0x94>
 800428a:	eb1c 0303 	adds.w	r3, ip, r3
 800428e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8004292:	f080 80fc 	bcs.w	800448e <__udivmoddi4+0x282>
 8004296:	429e      	cmp	r6, r3
 8004298:	f240 80f9 	bls.w	800448e <__udivmoddi4+0x282>
 800429c:	4463      	add	r3, ip
 800429e:	3802      	subs	r0, #2
 80042a0:	1b9b      	subs	r3, r3, r6
 80042a2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80042a6:	2100      	movs	r1, #0
 80042a8:	b11d      	cbz	r5, 80042b2 <__udivmoddi4+0xa6>
 80042aa:	40d3      	lsrs	r3, r2
 80042ac:	2200      	movs	r2, #0
 80042ae:	e9c5 3200 	strd	r3, r2, [r5]
 80042b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042b6:	428b      	cmp	r3, r1
 80042b8:	d905      	bls.n	80042c6 <__udivmoddi4+0xba>
 80042ba:	b10d      	cbz	r5, 80042c0 <__udivmoddi4+0xb4>
 80042bc:	e9c5 0100 	strd	r0, r1, [r5]
 80042c0:	2100      	movs	r1, #0
 80042c2:	4608      	mov	r0, r1
 80042c4:	e7f5      	b.n	80042b2 <__udivmoddi4+0xa6>
 80042c6:	fab3 f183 	clz	r1, r3
 80042ca:	2900      	cmp	r1, #0
 80042cc:	d146      	bne.n	800435c <__udivmoddi4+0x150>
 80042ce:	42a3      	cmp	r3, r4
 80042d0:	d302      	bcc.n	80042d8 <__udivmoddi4+0xcc>
 80042d2:	4290      	cmp	r0, r2
 80042d4:	f0c0 80f0 	bcc.w	80044b8 <__udivmoddi4+0x2ac>
 80042d8:	1a86      	subs	r6, r0, r2
 80042da:	eb64 0303 	sbc.w	r3, r4, r3
 80042de:	2001      	movs	r0, #1
 80042e0:	2d00      	cmp	r5, #0
 80042e2:	d0e6      	beq.n	80042b2 <__udivmoddi4+0xa6>
 80042e4:	e9c5 6300 	strd	r6, r3, [r5]
 80042e8:	e7e3      	b.n	80042b2 <__udivmoddi4+0xa6>
 80042ea:	2a00      	cmp	r2, #0
 80042ec:	f040 8090 	bne.w	8004410 <__udivmoddi4+0x204>
 80042f0:	eba1 040c 	sub.w	r4, r1, ip
 80042f4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80042f8:	fa1f f78c 	uxth.w	r7, ip
 80042fc:	2101      	movs	r1, #1
 80042fe:	fbb4 f6f8 	udiv	r6, r4, r8
 8004302:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8004306:	fb08 4416 	mls	r4, r8, r6, r4
 800430a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800430e:	fb07 f006 	mul.w	r0, r7, r6
 8004312:	4298      	cmp	r0, r3
 8004314:	d908      	bls.n	8004328 <__udivmoddi4+0x11c>
 8004316:	eb1c 0303 	adds.w	r3, ip, r3
 800431a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800431e:	d202      	bcs.n	8004326 <__udivmoddi4+0x11a>
 8004320:	4298      	cmp	r0, r3
 8004322:	f200 80cd 	bhi.w	80044c0 <__udivmoddi4+0x2b4>
 8004326:	4626      	mov	r6, r4
 8004328:	1a1c      	subs	r4, r3, r0
 800432a:	fa1f f38e 	uxth.w	r3, lr
 800432e:	fbb4 f0f8 	udiv	r0, r4, r8
 8004332:	fb08 4410 	mls	r4, r8, r0, r4
 8004336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800433a:	fb00 f707 	mul.w	r7, r0, r7
 800433e:	429f      	cmp	r7, r3
 8004340:	d908      	bls.n	8004354 <__udivmoddi4+0x148>
 8004342:	eb1c 0303 	adds.w	r3, ip, r3
 8004346:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800434a:	d202      	bcs.n	8004352 <__udivmoddi4+0x146>
 800434c:	429f      	cmp	r7, r3
 800434e:	f200 80b0 	bhi.w	80044b2 <__udivmoddi4+0x2a6>
 8004352:	4620      	mov	r0, r4
 8004354:	1bdb      	subs	r3, r3, r7
 8004356:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800435a:	e7a5      	b.n	80042a8 <__udivmoddi4+0x9c>
 800435c:	f1c1 0620 	rsb	r6, r1, #32
 8004360:	408b      	lsls	r3, r1
 8004362:	fa22 f706 	lsr.w	r7, r2, r6
 8004366:	431f      	orrs	r7, r3
 8004368:	fa20 fc06 	lsr.w	ip, r0, r6
 800436c:	fa04 f301 	lsl.w	r3, r4, r1
 8004370:	ea43 030c 	orr.w	r3, r3, ip
 8004374:	40f4      	lsrs	r4, r6
 8004376:	fa00 f801 	lsl.w	r8, r0, r1
 800437a:	0c38      	lsrs	r0, r7, #16
 800437c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8004380:	fbb4 fef0 	udiv	lr, r4, r0
 8004384:	fa1f fc87 	uxth.w	ip, r7
 8004388:	fb00 441e 	mls	r4, r0, lr, r4
 800438c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8004390:	fb0e f90c 	mul.w	r9, lr, ip
 8004394:	45a1      	cmp	r9, r4
 8004396:	fa02 f201 	lsl.w	r2, r2, r1
 800439a:	d90a      	bls.n	80043b2 <__udivmoddi4+0x1a6>
 800439c:	193c      	adds	r4, r7, r4
 800439e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80043a2:	f080 8084 	bcs.w	80044ae <__udivmoddi4+0x2a2>
 80043a6:	45a1      	cmp	r9, r4
 80043a8:	f240 8081 	bls.w	80044ae <__udivmoddi4+0x2a2>
 80043ac:	f1ae 0e02 	sub.w	lr, lr, #2
 80043b0:	443c      	add	r4, r7
 80043b2:	eba4 0409 	sub.w	r4, r4, r9
 80043b6:	fa1f f983 	uxth.w	r9, r3
 80043ba:	fbb4 f3f0 	udiv	r3, r4, r0
 80043be:	fb00 4413 	mls	r4, r0, r3, r4
 80043c2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80043c6:	fb03 fc0c 	mul.w	ip, r3, ip
 80043ca:	45a4      	cmp	ip, r4
 80043cc:	d907      	bls.n	80043de <__udivmoddi4+0x1d2>
 80043ce:	193c      	adds	r4, r7, r4
 80043d0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80043d4:	d267      	bcs.n	80044a6 <__udivmoddi4+0x29a>
 80043d6:	45a4      	cmp	ip, r4
 80043d8:	d965      	bls.n	80044a6 <__udivmoddi4+0x29a>
 80043da:	3b02      	subs	r3, #2
 80043dc:	443c      	add	r4, r7
 80043de:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80043e2:	fba0 9302 	umull	r9, r3, r0, r2
 80043e6:	eba4 040c 	sub.w	r4, r4, ip
 80043ea:	429c      	cmp	r4, r3
 80043ec:	46ce      	mov	lr, r9
 80043ee:	469c      	mov	ip, r3
 80043f0:	d351      	bcc.n	8004496 <__udivmoddi4+0x28a>
 80043f2:	d04e      	beq.n	8004492 <__udivmoddi4+0x286>
 80043f4:	b155      	cbz	r5, 800440c <__udivmoddi4+0x200>
 80043f6:	ebb8 030e 	subs.w	r3, r8, lr
 80043fa:	eb64 040c 	sbc.w	r4, r4, ip
 80043fe:	fa04 f606 	lsl.w	r6, r4, r6
 8004402:	40cb      	lsrs	r3, r1
 8004404:	431e      	orrs	r6, r3
 8004406:	40cc      	lsrs	r4, r1
 8004408:	e9c5 6400 	strd	r6, r4, [r5]
 800440c:	2100      	movs	r1, #0
 800440e:	e750      	b.n	80042b2 <__udivmoddi4+0xa6>
 8004410:	f1c2 0320 	rsb	r3, r2, #32
 8004414:	fa20 f103 	lsr.w	r1, r0, r3
 8004418:	fa0c fc02 	lsl.w	ip, ip, r2
 800441c:	fa24 f303 	lsr.w	r3, r4, r3
 8004420:	4094      	lsls	r4, r2
 8004422:	430c      	orrs	r4, r1
 8004424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8004428:	fa00 fe02 	lsl.w	lr, r0, r2
 800442c:	fa1f f78c 	uxth.w	r7, ip
 8004430:	fbb3 f0f8 	udiv	r0, r3, r8
 8004434:	fb08 3110 	mls	r1, r8, r0, r3
 8004438:	0c23      	lsrs	r3, r4, #16
 800443a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800443e:	fb00 f107 	mul.w	r1, r0, r7
 8004442:	4299      	cmp	r1, r3
 8004444:	d908      	bls.n	8004458 <__udivmoddi4+0x24c>
 8004446:	eb1c 0303 	adds.w	r3, ip, r3
 800444a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800444e:	d22c      	bcs.n	80044aa <__udivmoddi4+0x29e>
 8004450:	4299      	cmp	r1, r3
 8004452:	d92a      	bls.n	80044aa <__udivmoddi4+0x29e>
 8004454:	3802      	subs	r0, #2
 8004456:	4463      	add	r3, ip
 8004458:	1a5b      	subs	r3, r3, r1
 800445a:	b2a4      	uxth	r4, r4
 800445c:	fbb3 f1f8 	udiv	r1, r3, r8
 8004460:	fb08 3311 	mls	r3, r8, r1, r3
 8004464:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8004468:	fb01 f307 	mul.w	r3, r1, r7
 800446c:	42a3      	cmp	r3, r4
 800446e:	d908      	bls.n	8004482 <__udivmoddi4+0x276>
 8004470:	eb1c 0404 	adds.w	r4, ip, r4
 8004474:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8004478:	d213      	bcs.n	80044a2 <__udivmoddi4+0x296>
 800447a:	42a3      	cmp	r3, r4
 800447c:	d911      	bls.n	80044a2 <__udivmoddi4+0x296>
 800447e:	3902      	subs	r1, #2
 8004480:	4464      	add	r4, ip
 8004482:	1ae4      	subs	r4, r4, r3
 8004484:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004488:	e739      	b.n	80042fe <__udivmoddi4+0xf2>
 800448a:	4604      	mov	r4, r0
 800448c:	e6f0      	b.n	8004270 <__udivmoddi4+0x64>
 800448e:	4608      	mov	r0, r1
 8004490:	e706      	b.n	80042a0 <__udivmoddi4+0x94>
 8004492:	45c8      	cmp	r8, r9
 8004494:	d2ae      	bcs.n	80043f4 <__udivmoddi4+0x1e8>
 8004496:	ebb9 0e02 	subs.w	lr, r9, r2
 800449a:	eb63 0c07 	sbc.w	ip, r3, r7
 800449e:	3801      	subs	r0, #1
 80044a0:	e7a8      	b.n	80043f4 <__udivmoddi4+0x1e8>
 80044a2:	4631      	mov	r1, r6
 80044a4:	e7ed      	b.n	8004482 <__udivmoddi4+0x276>
 80044a6:	4603      	mov	r3, r0
 80044a8:	e799      	b.n	80043de <__udivmoddi4+0x1d2>
 80044aa:	4630      	mov	r0, r6
 80044ac:	e7d4      	b.n	8004458 <__udivmoddi4+0x24c>
 80044ae:	46d6      	mov	lr, sl
 80044b0:	e77f      	b.n	80043b2 <__udivmoddi4+0x1a6>
 80044b2:	4463      	add	r3, ip
 80044b4:	3802      	subs	r0, #2
 80044b6:	e74d      	b.n	8004354 <__udivmoddi4+0x148>
 80044b8:	4606      	mov	r6, r0
 80044ba:	4623      	mov	r3, r4
 80044bc:	4608      	mov	r0, r1
 80044be:	e70f      	b.n	80042e0 <__udivmoddi4+0xd4>
 80044c0:	3e02      	subs	r6, #2
 80044c2:	4463      	add	r3, ip
 80044c4:	e730      	b.n	8004328 <__udivmoddi4+0x11c>
 80044c6:	bf00      	nop

080044c8 <__aeabi_idiv0>:
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop

080044cc <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b088      	sub	sp, #32
 80044d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80044d2:	463b      	mov	r3, r7
 80044d4:	2220      	movs	r2, #32
 80044d6:	2100      	movs	r1, #0
 80044d8:	4618      	mov	r0, r3
 80044da:	f012 fca3 	bl	8016e24 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80044de:	4b33      	ldr	r3, [pc, #204]	@ (80045ac <MX_ADC2_Init+0xe0>)
 80044e0:	4a33      	ldr	r2, [pc, #204]	@ (80045b0 <MX_ADC2_Init+0xe4>)
 80044e2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80044e4:	4b31      	ldr	r3, [pc, #196]	@ (80045ac <MX_ADC2_Init+0xe0>)
 80044e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80044ea:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80044ec:	4b2f      	ldr	r3, [pc, #188]	@ (80045ac <MX_ADC2_Init+0xe0>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80044f2:	4b2e      	ldr	r3, [pc, #184]	@ (80045ac <MX_ADC2_Init+0xe0>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80044f8:	4b2c      	ldr	r3, [pc, #176]	@ (80045ac <MX_ADC2_Init+0xe0>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80044fe:	4b2b      	ldr	r3, [pc, #172]	@ (80045ac <MX_ADC2_Init+0xe0>)
 8004500:	2201      	movs	r2, #1
 8004502:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004504:	4b29      	ldr	r3, [pc, #164]	@ (80045ac <MX_ADC2_Init+0xe0>)
 8004506:	2208      	movs	r2, #8
 8004508:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800450a:	4b28      	ldr	r3, [pc, #160]	@ (80045ac <MX_ADC2_Init+0xe0>)
 800450c:	2200      	movs	r2, #0
 800450e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8004510:	4b26      	ldr	r3, [pc, #152]	@ (80045ac <MX_ADC2_Init+0xe0>)
 8004512:	2200      	movs	r2, #0
 8004514:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8004516:	4b25      	ldr	r3, [pc, #148]	@ (80045ac <MX_ADC2_Init+0xe0>)
 8004518:	2202      	movs	r2, #2
 800451a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800451c:	4b23      	ldr	r3, [pc, #140]	@ (80045ac <MX_ADC2_Init+0xe0>)
 800451e:	2200      	movs	r2, #0
 8004520:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8004524:	4b21      	ldr	r3, [pc, #132]	@ (80045ac <MX_ADC2_Init+0xe0>)
 8004526:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 800452a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800452c:	4b1f      	ldr	r3, [pc, #124]	@ (80045ac <MX_ADC2_Init+0xe0>)
 800452e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004532:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004534:	4b1d      	ldr	r3, [pc, #116]	@ (80045ac <MX_ADC2_Init+0xe0>)
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800453c:	4b1b      	ldr	r3, [pc, #108]	@ (80045ac <MX_ADC2_Init+0xe0>)
 800453e:	2200      	movs	r2, #0
 8004540:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8004542:	4b1a      	ldr	r3, [pc, #104]	@ (80045ac <MX_ADC2_Init+0xe0>)
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800454a:	4818      	ldr	r0, [pc, #96]	@ (80045ac <MX_ADC2_Init+0xe0>)
 800454c:	f002 fed4 	bl	80072f8 <HAL_ADC_Init>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8004556:	f000 fce7 	bl	8004f28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800455a:	4b16      	ldr	r3, [pc, #88]	@ (80045b4 <MX_ADC2_Init+0xe8>)
 800455c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800455e:	2306      	movs	r3, #6
 8004560:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8004562:	2303      	movs	r3, #3
 8004564:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004566:	237f      	movs	r3, #127	@ 0x7f
 8004568:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800456a:	2304      	movs	r3, #4
 800456c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800456e:	2300      	movs	r3, #0
 8004570:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004572:	463b      	mov	r3, r7
 8004574:	4619      	mov	r1, r3
 8004576:	480d      	ldr	r0, [pc, #52]	@ (80045ac <MX_ADC2_Init+0xe0>)
 8004578:	f003 fb90 	bl	8007c9c <HAL_ADC_ConfigChannel>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8004582:	f000 fcd1 	bl	8004f28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004586:	4b0c      	ldr	r3, [pc, #48]	@ (80045b8 <MX_ADC2_Init+0xec>)
 8004588:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800458a:	230c      	movs	r3, #12
 800458c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800458e:	463b      	mov	r3, r7
 8004590:	4619      	mov	r1, r3
 8004592:	4806      	ldr	r0, [pc, #24]	@ (80045ac <MX_ADC2_Init+0xe0>)
 8004594:	f003 fb82 	bl	8007c9c <HAL_ADC_ConfigChannel>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 800459e:	f000 fcc3 	bl	8004f28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80045a2:	bf00      	nop
 80045a4:	3720      	adds	r7, #32
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	20000350 	.word	0x20000350
 80045b0:	50000100 	.word	0x50000100
 80045b4:	0c900008 	.word	0x0c900008
 80045b8:	10c00010 	.word	0x10c00010

080045bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b09a      	sub	sp, #104	@ 0x68
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045c4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80045c8:	2200      	movs	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	605a      	str	r2, [r3, #4]
 80045ce:	609a      	str	r2, [r3, #8]
 80045d0:	60da      	str	r2, [r3, #12]
 80045d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80045d4:	f107 0310 	add.w	r3, r7, #16
 80045d8:	2244      	movs	r2, #68	@ 0x44
 80045da:	2100      	movs	r1, #0
 80045dc:	4618      	mov	r0, r3
 80045de:	f012 fc21 	bl	8016e24 <memset>
  if(adcHandle->Instance==ADC2)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a37      	ldr	r2, [pc, #220]	@ (80046c4 <HAL_ADC_MspInit+0x108>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d167      	bne.n	80046bc <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80045ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045f0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80045f2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80045f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80045f8:	f107 0310 	add.w	r3, r7, #16
 80045fc:	4618      	mov	r0, r3
 80045fe:	f006 fdaf 	bl	800b160 <HAL_RCCEx_PeriphCLKConfig>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004608:	f000 fc8e 	bl	8004f28 <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800460c:	4b2e      	ldr	r3, [pc, #184]	@ (80046c8 <HAL_ADC_MspInit+0x10c>)
 800460e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004610:	4a2d      	ldr	r2, [pc, #180]	@ (80046c8 <HAL_ADC_MspInit+0x10c>)
 8004612:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004616:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004618:	4b2b      	ldr	r3, [pc, #172]	@ (80046c8 <HAL_ADC_MspInit+0x10c>)
 800461a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800461c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004624:	4b28      	ldr	r3, [pc, #160]	@ (80046c8 <HAL_ADC_MspInit+0x10c>)
 8004626:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004628:	4a27      	ldr	r2, [pc, #156]	@ (80046c8 <HAL_ADC_MspInit+0x10c>)
 800462a:	f043 0301 	orr.w	r3, r3, #1
 800462e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004630:	4b25      	ldr	r3, [pc, #148]	@ (80046c8 <HAL_ADC_MspInit+0x10c>)
 8004632:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	60bb      	str	r3, [r7, #8]
 800463a:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = ASSERV_I1_Pin|ASSERV_I2_Pin;
 800463c:	23c0      	movs	r3, #192	@ 0xc0
 800463e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004640:	2303      	movs	r3, #3
 8004642:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004644:	2300      	movs	r3, #0
 8004646:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004648:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800464c:	4619      	mov	r1, r3
 800464e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004652:	f004 fff5 	bl	8009640 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel3;
 8004656:	4b1d      	ldr	r3, [pc, #116]	@ (80046cc <HAL_ADC_MspInit+0x110>)
 8004658:	4a1d      	ldr	r2, [pc, #116]	@ (80046d0 <HAL_ADC_MspInit+0x114>)
 800465a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800465c:	4b1b      	ldr	r3, [pc, #108]	@ (80046cc <HAL_ADC_MspInit+0x110>)
 800465e:	2224      	movs	r2, #36	@ 0x24
 8004660:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004662:	4b1a      	ldr	r3, [pc, #104]	@ (80046cc <HAL_ADC_MspInit+0x110>)
 8004664:	2200      	movs	r2, #0
 8004666:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004668:	4b18      	ldr	r3, [pc, #96]	@ (80046cc <HAL_ADC_MspInit+0x110>)
 800466a:	2200      	movs	r2, #0
 800466c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800466e:	4b17      	ldr	r3, [pc, #92]	@ (80046cc <HAL_ADC_MspInit+0x110>)
 8004670:	2280      	movs	r2, #128	@ 0x80
 8004672:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004674:	4b15      	ldr	r3, [pc, #84]	@ (80046cc <HAL_ADC_MspInit+0x110>)
 8004676:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800467a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800467c:	4b13      	ldr	r3, [pc, #76]	@ (80046cc <HAL_ADC_MspInit+0x110>)
 800467e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004682:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004684:	4b11      	ldr	r3, [pc, #68]	@ (80046cc <HAL_ADC_MspInit+0x110>)
 8004686:	2220      	movs	r2, #32
 8004688:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800468a:	4b10      	ldr	r3, [pc, #64]	@ (80046cc <HAL_ADC_MspInit+0x110>)
 800468c:	2200      	movs	r2, #0
 800468e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004690:	480e      	ldr	r0, [pc, #56]	@ (80046cc <HAL_ADC_MspInit+0x110>)
 8004692:	f004 fca3 	bl	8008fdc <HAL_DMA_Init>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d001      	beq.n	80046a0 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 800469c:	f000 fc44 	bl	8004f28 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a0a      	ldr	r2, [pc, #40]	@ (80046cc <HAL_ADC_MspInit+0x110>)
 80046a4:	655a      	str	r2, [r3, #84]	@ 0x54
 80046a6:	4a09      	ldr	r2, [pc, #36]	@ (80046cc <HAL_ADC_MspInit+0x110>)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80046ac:	2200      	movs	r2, #0
 80046ae:	2105      	movs	r1, #5
 80046b0:	2012      	movs	r0, #18
 80046b2:	f004 fa91 	bl	8008bd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80046b6:	2012      	movs	r0, #18
 80046b8:	f004 faa8 	bl	8008c0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80046bc:	bf00      	nop
 80046be:	3768      	adds	r7, #104	@ 0x68
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	50000100 	.word	0x50000100
 80046c8:	40021000 	.word	0x40021000
 80046cc:	200003bc 	.word	0x200003bc
 80046d0:	40020030 	.word	0x40020030

080046d4 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80046d4:	b480      	push	{r7}
 80046d6:	af00      	add	r7, sp, #0

}
 80046d8:	bf00      	nop
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80046e2:	b480      	push	{r7}
 80046e4:	af00      	add	r7, sp, #0
return 0;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
	...

080046f4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80046f4:	b5b0      	push	{r4, r5, r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80046fa:	4b09      	ldr	r3, [pc, #36]	@ (8004720 <MX_FREERTOS_Init+0x2c>)
 80046fc:	1d3c      	adds	r4, r7, #4
 80046fe:	461d      	mov	r5, r3
 8004700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004704:	682b      	ldr	r3, [r5, #0]
 8004706:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004708:	1d3b      	adds	r3, r7, #4
 800470a:	2100      	movs	r1, #0
 800470c:	4618      	mov	r0, r3
 800470e:	f00d ff78 	bl	8012602 <osThreadCreate>
 8004712:	4603      	mov	r3, r0
 8004714:	4a03      	ldr	r2, [pc, #12]	@ (8004724 <MX_FREERTOS_Init+0x30>)
 8004716:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8004718:	bf00      	nop
 800471a:	3718      	adds	r7, #24
 800471c:	46bd      	mov	sp, r7
 800471e:	bdb0      	pop	{r4, r5, r7, pc}
 8004720:	08017bf8 	.word	0x08017bf8
 8004724:	2000041c 	.word	0x2000041c

08004728 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
	for(;;)
  {
    osDelay(1);
 8004730:	2001      	movs	r0, #1
 8004732:	f00d ff99 	bl	8012668 <osDelay>
 8004736:	e7fb      	b.n	8004730 <StartDefaultTask+0x8>

08004738 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b08c      	sub	sp, #48	@ 0x30
 800473c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800473e:	463b      	mov	r3, r7
 8004740:	2230      	movs	r2, #48	@ 0x30
 8004742:	2100      	movs	r1, #0
 8004744:	4618      	mov	r0, r3
 8004746:	f012 fb6d 	bl	8016e24 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800474a:	4b16      	ldr	r3, [pc, #88]	@ (80047a4 <MX_DAC1_Init+0x6c>)
 800474c:	4a16      	ldr	r2, [pc, #88]	@ (80047a8 <MX_DAC1_Init+0x70>)
 800474e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8004750:	4814      	ldr	r0, [pc, #80]	@ (80047a4 <MX_DAC1_Init+0x6c>)
 8004752:	f004 fa69 	bl	8008c28 <HAL_DAC_Init>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d001      	beq.n	8004760 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800475c:	f000 fbe4 	bl	8004f28 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8004760:	2302      	movs	r3, #2
 8004762:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8004764:	2300      	movs	r3, #0
 8004766:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8004768:	2300      	movs	r3, #0
 800476a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800476c:	2300      	movs	r3, #0
 800476e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8004770:	2300      	movs	r3, #0
 8004772:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8004774:	2300      	movs	r3, #0
 8004776:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8004778:	2300      	movs	r3, #0
 800477a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800477c:	2301      	movs	r3, #1
 800477e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8004780:	2300      	movs	r3, #0
 8004782:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004784:	463b      	mov	r3, r7
 8004786:	2200      	movs	r2, #0
 8004788:	4619      	mov	r1, r3
 800478a:	4806      	ldr	r0, [pc, #24]	@ (80047a4 <MX_DAC1_Init+0x6c>)
 800478c:	f004 fa6e 	bl	8008c6c <HAL_DAC_ConfigChannel>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8004796:	f000 fbc7 	bl	8004f28 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800479a:	bf00      	nop
 800479c:	3730      	adds	r7, #48	@ 0x30
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	20000420 	.word	0x20000420
 80047a8:	50000800 	.word	0x50000800

080047ac <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b08a      	sub	sp, #40	@ 0x28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047b4:	f107 0314 	add.w	r3, r7, #20
 80047b8:	2200      	movs	r2, #0
 80047ba:	601a      	str	r2, [r3, #0]
 80047bc:	605a      	str	r2, [r3, #4]
 80047be:	609a      	str	r2, [r3, #8]
 80047c0:	60da      	str	r2, [r3, #12]
 80047c2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a15      	ldr	r2, [pc, #84]	@ (8004820 <HAL_DAC_MspInit+0x74>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d124      	bne.n	8004818 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80047ce:	4b15      	ldr	r3, [pc, #84]	@ (8004824 <HAL_DAC_MspInit+0x78>)
 80047d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047d2:	4a14      	ldr	r2, [pc, #80]	@ (8004824 <HAL_DAC_MspInit+0x78>)
 80047d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80047da:	4b12      	ldr	r3, [pc, #72]	@ (8004824 <HAL_DAC_MspInit+0x78>)
 80047dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047e2:	613b      	str	r3, [r7, #16]
 80047e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004824 <HAL_DAC_MspInit+0x78>)
 80047e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047ea:	4a0e      	ldr	r2, [pc, #56]	@ (8004824 <HAL_DAC_MspInit+0x78>)
 80047ec:	f043 0301 	orr.w	r3, r3, #1
 80047f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80047f2:	4b0c      	ldr	r3, [pc, #48]	@ (8004824 <HAL_DAC_MspInit+0x78>)
 80047f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	60fb      	str	r3, [r7, #12]
 80047fc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = DAC__Pin;
 80047fe:	2310      	movs	r3, #16
 8004800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004802:	2303      	movs	r3, #3
 8004804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004806:	2300      	movs	r3, #0
 8004808:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC__GPIO_Port, &GPIO_InitStruct);
 800480a:	f107 0314 	add.w	r3, r7, #20
 800480e:	4619      	mov	r1, r3
 8004810:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004814:	f004 ff14 	bl	8009640 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8004818:	bf00      	nop
 800481a:	3728      	adds	r7, #40	@ 0x28
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	50000800 	.word	0x50000800
 8004824:	40021000 	.word	0x40021000

08004828 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800482c:	4b04      	ldr	r3, [pc, #16]	@ (8004840 <__NVIC_GetPriorityGrouping+0x18>)
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	0a1b      	lsrs	r3, r3, #8
 8004832:	f003 0307 	and.w	r3, r3, #7
}
 8004836:	4618      	mov	r0, r3
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr
 8004840:	e000ed00 	.word	0xe000ed00

08004844 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	4603      	mov	r3, r0
 800484c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800484e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004852:	2b00      	cmp	r3, #0
 8004854:	db0b      	blt.n	800486e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004856:	79fb      	ldrb	r3, [r7, #7]
 8004858:	f003 021f 	and.w	r2, r3, #31
 800485c:	4907      	ldr	r1, [pc, #28]	@ (800487c <__NVIC_EnableIRQ+0x38>)
 800485e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004862:	095b      	lsrs	r3, r3, #5
 8004864:	2001      	movs	r0, #1
 8004866:	fa00 f202 	lsl.w	r2, r0, r2
 800486a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	e000e100 	.word	0xe000e100

08004880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	4603      	mov	r3, r0
 8004888:	6039      	str	r1, [r7, #0]
 800488a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800488c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004890:	2b00      	cmp	r3, #0
 8004892:	db0a      	blt.n	80048aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	b2da      	uxtb	r2, r3
 8004898:	490c      	ldr	r1, [pc, #48]	@ (80048cc <__NVIC_SetPriority+0x4c>)
 800489a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800489e:	0112      	lsls	r2, r2, #4
 80048a0:	b2d2      	uxtb	r2, r2
 80048a2:	440b      	add	r3, r1
 80048a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048a8:	e00a      	b.n	80048c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	4908      	ldr	r1, [pc, #32]	@ (80048d0 <__NVIC_SetPriority+0x50>)
 80048b0:	79fb      	ldrb	r3, [r7, #7]
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	3b04      	subs	r3, #4
 80048b8:	0112      	lsls	r2, r2, #4
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	440b      	add	r3, r1
 80048be:	761a      	strb	r2, [r3, #24]
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr
 80048cc:	e000e100 	.word	0xe000e100
 80048d0:	e000ed00 	.word	0xe000ed00

080048d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b089      	sub	sp, #36	@ 0x24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	f1c3 0307 	rsb	r3, r3, #7
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	bf28      	it	cs
 80048f2:	2304      	movcs	r3, #4
 80048f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	3304      	adds	r3, #4
 80048fa:	2b06      	cmp	r3, #6
 80048fc:	d902      	bls.n	8004904 <NVIC_EncodePriority+0x30>
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	3b03      	subs	r3, #3
 8004902:	e000      	b.n	8004906 <NVIC_EncodePriority+0x32>
 8004904:	2300      	movs	r3, #0
 8004906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004908:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	fa02 f303 	lsl.w	r3, r2, r3
 8004912:	43da      	mvns	r2, r3
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	401a      	ands	r2, r3
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800491c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	fa01 f303 	lsl.w	r3, r1, r3
 8004926:	43d9      	mvns	r1, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800492c:	4313      	orrs	r3, r2
         );
}
 800492e:	4618      	mov	r0, r3
 8004930:	3724      	adds	r7, #36	@ 0x24
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
	...

0800493c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004942:	4b22      	ldr	r3, [pc, #136]	@ (80049cc <MX_DMA_Init+0x90>)
 8004944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004946:	4a21      	ldr	r2, [pc, #132]	@ (80049cc <MX_DMA_Init+0x90>)
 8004948:	f043 0304 	orr.w	r3, r3, #4
 800494c:	6493      	str	r3, [r2, #72]	@ 0x48
 800494e:	4b1f      	ldr	r3, [pc, #124]	@ (80049cc <MX_DMA_Init+0x90>)
 8004950:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004952:	f003 0304 	and.w	r3, r3, #4
 8004956:	607b      	str	r3, [r7, #4]
 8004958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800495a:	4b1c      	ldr	r3, [pc, #112]	@ (80049cc <MX_DMA_Init+0x90>)
 800495c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800495e:	4a1b      	ldr	r2, [pc, #108]	@ (80049cc <MX_DMA_Init+0x90>)
 8004960:	f043 0301 	orr.w	r3, r3, #1
 8004964:	6493      	str	r3, [r2, #72]	@ 0x48
 8004966:	4b19      	ldr	r3, [pc, #100]	@ (80049cc <MX_DMA_Init+0x90>)
 8004968:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	603b      	str	r3, [r7, #0]
 8004970:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8004972:	f7ff ff59 	bl	8004828 <__NVIC_GetPriorityGrouping>
 8004976:	4603      	mov	r3, r0
 8004978:	2200      	movs	r2, #0
 800497a:	2105      	movs	r1, #5
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff ffa9 	bl	80048d4 <NVIC_EncodePriority>
 8004982:	4603      	mov	r3, r0
 8004984:	4619      	mov	r1, r3
 8004986:	200b      	movs	r0, #11
 8004988:	f7ff ff7a 	bl	8004880 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800498c:	200b      	movs	r0, #11
 800498e:	f7ff ff59 	bl	8004844 <__NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8004992:	f7ff ff49 	bl	8004828 <__NVIC_GetPriorityGrouping>
 8004996:	4603      	mov	r3, r0
 8004998:	2200      	movs	r2, #0
 800499a:	2105      	movs	r1, #5
 800499c:	4618      	mov	r0, r3
 800499e:	f7ff ff99 	bl	80048d4 <NVIC_EncodePriority>
 80049a2:	4603      	mov	r3, r0
 80049a4:	4619      	mov	r1, r3
 80049a6:	200c      	movs	r0, #12
 80049a8:	f7ff ff6a 	bl	8004880 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80049ac:	200c      	movs	r0, #12
 80049ae:	f7ff ff49 	bl	8004844 <__NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80049b2:	2200      	movs	r2, #0
 80049b4:	2105      	movs	r1, #5
 80049b6:	200d      	movs	r0, #13
 80049b8:	f004 f90e 	bl	8008bd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80049bc:	200d      	movs	r0, #13
 80049be:	f004 f925 	bl	8008c0c <HAL_NVIC_EnableIRQ>

}
 80049c2:	bf00      	nop
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	40021000 	.word	0x40021000

080049d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b08a      	sub	sp, #40	@ 0x28
 80049d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049d6:	f107 0314 	add.w	r3, r7, #20
 80049da:	2200      	movs	r2, #0
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	605a      	str	r2, [r3, #4]
 80049e0:	609a      	str	r2, [r3, #8]
 80049e2:	60da      	str	r2, [r3, #12]
 80049e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80049e6:	4b33      	ldr	r3, [pc, #204]	@ (8004ab4 <MX_GPIO_Init+0xe4>)
 80049e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049ea:	4a32      	ldr	r2, [pc, #200]	@ (8004ab4 <MX_GPIO_Init+0xe4>)
 80049ec:	f043 0304 	orr.w	r3, r3, #4
 80049f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80049f2:	4b30      	ldr	r3, [pc, #192]	@ (8004ab4 <MX_GPIO_Init+0xe4>)
 80049f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049f6:	f003 0304 	and.w	r3, r3, #4
 80049fa:	613b      	str	r3, [r7, #16]
 80049fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80049fe:	4b2d      	ldr	r3, [pc, #180]	@ (8004ab4 <MX_GPIO_Init+0xe4>)
 8004a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a02:	4a2c      	ldr	r2, [pc, #176]	@ (8004ab4 <MX_GPIO_Init+0xe4>)
 8004a04:	f043 0320 	orr.w	r3, r3, #32
 8004a08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a0a:	4b2a      	ldr	r3, [pc, #168]	@ (8004ab4 <MX_GPIO_Init+0xe4>)
 8004a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a0e:	f003 0320 	and.w	r3, r3, #32
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a16:	4b27      	ldr	r3, [pc, #156]	@ (8004ab4 <MX_GPIO_Init+0xe4>)
 8004a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a1a:	4a26      	ldr	r2, [pc, #152]	@ (8004ab4 <MX_GPIO_Init+0xe4>)
 8004a1c:	f043 0301 	orr.w	r3, r3, #1
 8004a20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a22:	4b24      	ldr	r3, [pc, #144]	@ (8004ab4 <MX_GPIO_Init+0xe4>)
 8004a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	60bb      	str	r3, [r7, #8]
 8004a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a2e:	4b21      	ldr	r3, [pc, #132]	@ (8004ab4 <MX_GPIO_Init+0xe4>)
 8004a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a32:	4a20      	ldr	r2, [pc, #128]	@ (8004ab4 <MX_GPIO_Init+0xe4>)
 8004a34:	f043 0302 	orr.w	r3, r3, #2
 8004a38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a3a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ab4 <MX_GPIO_Init+0xe4>)
 8004a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	607b      	str	r3, [r7, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BUTTON_INITIAL_STATE_Pin|BUTTON_START_ROBOT_Pin;
 8004a46:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8004a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004a4c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a52:	2300      	movs	r3, #0
 8004a54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a56:	f107 0314 	add.w	r3, r7, #20
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	4816      	ldr	r0, [pc, #88]	@ (8004ab8 <MX_GPIO_Init+0xe8>)
 8004a5e:	f004 fdef 	bl	8009640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOUSTACHE_1_Pin;
 8004a62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004a68:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MOUSTACHE_1_GPIO_Port, &GPIO_InitStruct);
 8004a72:	f107 0314 	add.w	r3, r7, #20
 8004a76:	4619      	mov	r1, r3
 8004a78:	4810      	ldr	r0, [pc, #64]	@ (8004abc <MX_GPIO_Init+0xec>)
 8004a7a:	f004 fde1 	bl	8009640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_EXP_EXTI_Pin;
 8004a7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004a84:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8004a88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_EXP_EXTI_GPIO_Port, &GPIO_InitStruct);
 8004a8e:	f107 0314 	add.w	r3, r7, #20
 8004a92:	4619      	mov	r1, r3
 8004a94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004a98:	f004 fdd2 	bl	8009640 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	2105      	movs	r1, #5
 8004aa0:	2028      	movs	r0, #40	@ 0x28
 8004aa2:	f004 f899 	bl	8008bd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004aa6:	2028      	movs	r0, #40	@ 0x28
 8004aa8:	f004 f8b0 	bl	8008c0c <HAL_NVIC_EnableIRQ>

}
 8004aac:	bf00      	nop
 8004aae:	3728      	adds	r7, #40	@ 0x28
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	48000800 	.word	0x48000800
 8004abc:	48000400 	.word	0x48000400

08004ac0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8004b34 <MX_I2C1_Init+0x74>)
 8004ac6:	4a1c      	ldr	r2, [pc, #112]	@ (8004b38 <MX_I2C1_Init+0x78>)
 8004ac8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8004aca:	4b1a      	ldr	r3, [pc, #104]	@ (8004b34 <MX_I2C1_Init+0x74>)
 8004acc:	4a1b      	ldr	r2, [pc, #108]	@ (8004b3c <MX_I2C1_Init+0x7c>)
 8004ace:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004ad0:	4b18      	ldr	r3, [pc, #96]	@ (8004b34 <MX_I2C1_Init+0x74>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004ad6:	4b17      	ldr	r3, [pc, #92]	@ (8004b34 <MX_I2C1_Init+0x74>)
 8004ad8:	2201      	movs	r2, #1
 8004ada:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004adc:	4b15      	ldr	r3, [pc, #84]	@ (8004b34 <MX_I2C1_Init+0x74>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004ae2:	4b14      	ldr	r3, [pc, #80]	@ (8004b34 <MX_I2C1_Init+0x74>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004ae8:	4b12      	ldr	r3, [pc, #72]	@ (8004b34 <MX_I2C1_Init+0x74>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004aee:	4b11      	ldr	r3, [pc, #68]	@ (8004b34 <MX_I2C1_Init+0x74>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004af4:	4b0f      	ldr	r3, [pc, #60]	@ (8004b34 <MX_I2C1_Init+0x74>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004afa:	480e      	ldr	r0, [pc, #56]	@ (8004b34 <MX_I2C1_Init+0x74>)
 8004afc:	f004 ff45 	bl	800998a <HAL_I2C_Init>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004b06:	f000 fa0f 	bl	8004f28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	4809      	ldr	r0, [pc, #36]	@ (8004b34 <MX_I2C1_Init+0x74>)
 8004b0e:	f005 fc8b 	bl	800a428 <HAL_I2CEx_ConfigAnalogFilter>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004b18:	f000 fa06 	bl	8004f28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	4805      	ldr	r0, [pc, #20]	@ (8004b34 <MX_I2C1_Init+0x74>)
 8004b20:	f005 fccd 	bl	800a4be <HAL_I2CEx_ConfigDigitalFilter>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d001      	beq.n	8004b2e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004b2a:	f000 f9fd 	bl	8004f28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004b2e:	bf00      	nop
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	20000434 	.word	0x20000434
 8004b38:	40005400 	.word	0x40005400
 8004b3c:	00503d58 	.word	0x00503d58

08004b40 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8004b44:	4b1b      	ldr	r3, [pc, #108]	@ (8004bb4 <MX_I2C3_Init+0x74>)
 8004b46:	4a1c      	ldr	r2, [pc, #112]	@ (8004bb8 <MX_I2C3_Init+0x78>)
 8004b48:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00503D58;
 8004b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8004bb4 <MX_I2C3_Init+0x74>)
 8004b4c:	4a1b      	ldr	r2, [pc, #108]	@ (8004bbc <MX_I2C3_Init+0x7c>)
 8004b4e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8004b50:	4b18      	ldr	r3, [pc, #96]	@ (8004bb4 <MX_I2C3_Init+0x74>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004b56:	4b17      	ldr	r3, [pc, #92]	@ (8004bb4 <MX_I2C3_Init+0x74>)
 8004b58:	2201      	movs	r2, #1
 8004b5a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004b5c:	4b15      	ldr	r3, [pc, #84]	@ (8004bb4 <MX_I2C3_Init+0x74>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8004b62:	4b14      	ldr	r3, [pc, #80]	@ (8004bb4 <MX_I2C3_Init+0x74>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004b68:	4b12      	ldr	r3, [pc, #72]	@ (8004bb4 <MX_I2C3_Init+0x74>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004b6e:	4b11      	ldr	r3, [pc, #68]	@ (8004bb4 <MX_I2C3_Init+0x74>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004b74:	4b0f      	ldr	r3, [pc, #60]	@ (8004bb4 <MX_I2C3_Init+0x74>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004b7a:	480e      	ldr	r0, [pc, #56]	@ (8004bb4 <MX_I2C3_Init+0x74>)
 8004b7c:	f004 ff05 	bl	800998a <HAL_I2C_Init>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8004b86:	f000 f9cf 	bl	8004f28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	4809      	ldr	r0, [pc, #36]	@ (8004bb4 <MX_I2C3_Init+0x74>)
 8004b8e:	f005 fc4b 	bl	800a428 <HAL_I2CEx_ConfigAnalogFilter>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d001      	beq.n	8004b9c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8004b98:	f000 f9c6 	bl	8004f28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	4805      	ldr	r0, [pc, #20]	@ (8004bb4 <MX_I2C3_Init+0x74>)
 8004ba0:	f005 fc8d 	bl	800a4be <HAL_I2CEx_ConfigDigitalFilter>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8004baa:	f000 f9bd 	bl	8004f28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8004bae:	bf00      	nop
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	20000488 	.word	0x20000488
 8004bb8:	40007800 	.word	0x40007800
 8004bbc:	00503d58 	.word	0x00503d58

08004bc0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b09e      	sub	sp, #120	@ 0x78
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bc8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004bcc:	2200      	movs	r2, #0
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	605a      	str	r2, [r3, #4]
 8004bd2:	609a      	str	r2, [r3, #8]
 8004bd4:	60da      	str	r2, [r3, #12]
 8004bd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004bd8:	f107 0320 	add.w	r3, r7, #32
 8004bdc:	2244      	movs	r2, #68	@ 0x44
 8004bde:	2100      	movs	r1, #0
 8004be0:	4618      	mov	r0, r3
 8004be2:	f012 f91f 	bl	8016e24 <memset>
  if(i2cHandle->Instance==I2C1)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a5c      	ldr	r2, [pc, #368]	@ (8004d5c <HAL_I2C_MspInit+0x19c>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d155      	bne.n	8004c9c <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004bf0:	2340      	movs	r3, #64	@ 0x40
 8004bf2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004bf8:	f107 0320 	add.w	r3, r7, #32
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f006 faaf 	bl	800b160 <HAL_RCCEx_PeriphCLKConfig>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d001      	beq.n	8004c0c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004c08:	f000 f98e 	bl	8004f28 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c0c:	4b54      	ldr	r3, [pc, #336]	@ (8004d60 <HAL_I2C_MspInit+0x1a0>)
 8004c0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c10:	4a53      	ldr	r2, [pc, #332]	@ (8004d60 <HAL_I2C_MspInit+0x1a0>)
 8004c12:	f043 0301 	orr.w	r3, r3, #1
 8004c16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004c18:	4b51      	ldr	r3, [pc, #324]	@ (8004d60 <HAL_I2C_MspInit+0x1a0>)
 8004c1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	61fb      	str	r3, [r7, #28]
 8004c22:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c24:	4b4e      	ldr	r3, [pc, #312]	@ (8004d60 <HAL_I2C_MspInit+0x1a0>)
 8004c26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c28:	4a4d      	ldr	r2, [pc, #308]	@ (8004d60 <HAL_I2C_MspInit+0x1a0>)
 8004c2a:	f043 0302 	orr.w	r3, r3, #2
 8004c2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004c30:	4b4b      	ldr	r3, [pc, #300]	@ (8004d60 <HAL_I2C_MspInit+0x1a0>)
 8004c32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	61bb      	str	r3, [r7, #24]
 8004c3a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_IMU_SCL_Pin;
 8004c3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c40:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c42:	2312      	movs	r3, #18
 8004c44:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c46:	2300      	movs	r3, #0
 8004c48:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004c4e:	2304      	movs	r3, #4
 8004c50:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(I2C_IMU_SCL_GPIO_Port, &GPIO_InitStruct);
 8004c52:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004c56:	4619      	mov	r1, r3
 8004c58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004c5c:	f004 fcf0 	bl	8009640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C_IMU_SDA_Pin;
 8004c60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c64:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c66:	2312      	movs	r3, #18
 8004c68:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004c72:	2304      	movs	r3, #4
 8004c74:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(I2C_IMU_SDA_GPIO_Port, &GPIO_InitStruct);
 8004c76:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	4839      	ldr	r0, [pc, #228]	@ (8004d64 <HAL_I2C_MspInit+0x1a4>)
 8004c7e:	f004 fcdf 	bl	8009640 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004c82:	4b37      	ldr	r3, [pc, #220]	@ (8004d60 <HAL_I2C_MspInit+0x1a0>)
 8004c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c86:	4a36      	ldr	r2, [pc, #216]	@ (8004d60 <HAL_I2C_MspInit+0x1a0>)
 8004c88:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004c8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c8e:	4b34      	ldr	r3, [pc, #208]	@ (8004d60 <HAL_I2C_MspInit+0x1a0>)
 8004c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c96:	617b      	str	r3, [r7, #20]
 8004c98:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8004c9a:	e05a      	b.n	8004d52 <HAL_I2C_MspInit+0x192>
  else if(i2cHandle->Instance==I2C3)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a31      	ldr	r2, [pc, #196]	@ (8004d68 <HAL_I2C_MspInit+0x1a8>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d155      	bne.n	8004d52 <HAL_I2C_MspInit+0x192>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8004ca6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004caa:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8004cac:	2300      	movs	r3, #0
 8004cae:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004cb0:	f107 0320 	add.w	r3, r7, #32
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f006 fa53 	bl	800b160 <HAL_RCCEx_PeriphCLKConfig>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d001      	beq.n	8004cc4 <HAL_I2C_MspInit+0x104>
      Error_Handler();
 8004cc0:	f000 f932 	bl	8004f28 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cc4:	4b26      	ldr	r3, [pc, #152]	@ (8004d60 <HAL_I2C_MspInit+0x1a0>)
 8004cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cc8:	4a25      	ldr	r2, [pc, #148]	@ (8004d60 <HAL_I2C_MspInit+0x1a0>)
 8004cca:	f043 0301 	orr.w	r3, r3, #1
 8004cce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004cd0:	4b23      	ldr	r3, [pc, #140]	@ (8004d60 <HAL_I2C_MspInit+0x1a0>)
 8004cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	613b      	str	r3, [r7, #16]
 8004cda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cdc:	4b20      	ldr	r3, [pc, #128]	@ (8004d60 <HAL_I2C_MspInit+0x1a0>)
 8004cde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ce0:	4a1f      	ldr	r2, [pc, #124]	@ (8004d60 <HAL_I2C_MspInit+0x1a0>)
 8004ce2:	f043 0304 	orr.w	r3, r3, #4
 8004ce6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8004d60 <HAL_I2C_MspInit+0x1a0>)
 8004cea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C_MAIN_SCL_Pin;
 8004cf4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004cf8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004cfa:	2312      	movs	r3, #18
 8004cfc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d02:	2300      	movs	r3, #0
 8004d04:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8004d06:	2302      	movs	r3, #2
 8004d08:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(I2C_MAIN_SCL_GPIO_Port, &GPIO_InitStruct);
 8004d0a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004d0e:	4619      	mov	r1, r3
 8004d10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004d14:	f004 fc94 	bl	8009640 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C_MAIN_SDA_Pin;
 8004d18:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004d1c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d1e:	2312      	movs	r3, #18
 8004d20:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d22:	2300      	movs	r3, #0
 8004d24:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d26:	2300      	movs	r3, #0
 8004d28:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8004d2a:	2308      	movs	r3, #8
 8004d2c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(I2C_MAIN_SDA_GPIO_Port, &GPIO_InitStruct);
 8004d2e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004d32:	4619      	mov	r1, r3
 8004d34:	480d      	ldr	r0, [pc, #52]	@ (8004d6c <HAL_I2C_MspInit+0x1ac>)
 8004d36:	f004 fc83 	bl	8009640 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004d3a:	4b09      	ldr	r3, [pc, #36]	@ (8004d60 <HAL_I2C_MspInit+0x1a0>)
 8004d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d3e:	4a08      	ldr	r2, [pc, #32]	@ (8004d60 <HAL_I2C_MspInit+0x1a0>)
 8004d40:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d44:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d46:	4b06      	ldr	r3, [pc, #24]	@ (8004d60 <HAL_I2C_MspInit+0x1a0>)
 8004d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d4a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004d4e:	60bb      	str	r3, [r7, #8]
 8004d50:	68bb      	ldr	r3, [r7, #8]
}
 8004d52:	bf00      	nop
 8004d54:	3778      	adds	r7, #120	@ 0x78
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	40005400 	.word	0x40005400
 8004d60:	40021000 	.word	0x40021000
 8004d64:	48000400 	.word	0x48000400
 8004d68:	40007800 	.word	0x40007800
 8004d6c:	48000800 	.word	0x48000800

08004d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004d76:	f001 ffd8 	bl	8006d2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004d7a:	f000 f881 	bl	8004e80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004d7e:	f7ff fe27 	bl	80049d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8004d82:	f7ff fddb 	bl	800493c <MX_DMA_Init>
  MX_ADC2_Init();
 8004d86:	f7ff fba1 	bl	80044cc <MX_ADC2_Init>
  MX_DAC1_Init();
 8004d8a:	f7ff fcd5 	bl	8004738 <MX_DAC1_Init>
  MX_I2C1_Init();
 8004d8e:	f7ff fe97 	bl	8004ac0 <MX_I2C1_Init>
  MX_I2C3_Init();
 8004d92:	f7ff fed5 	bl	8004b40 <MX_I2C3_Init>
  MX_TIM2_Init();
 8004d96:	f000 faf1 	bl	800537c <MX_TIM2_Init>
  MX_TIM3_Init();
 8004d9a:	f000 fb71 	bl	8005480 <MX_TIM3_Init>
  MX_TIM4_Init();
 8004d9e:	f000 fbd5 	bl	800554c <MX_TIM4_Init>
  MX_UCPD1_Init();
 8004da2:	f000 ff5b 	bl	8005c5c <MX_UCPD1_Init>
  MX_USART1_UART_Init();
 8004da6:	f000 ffe9 	bl	8005d7c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004daa:	f001 f837 	bl	8005e1c <MX_USART2_UART_Init>
  MX_TIM15_Init();
 8004dae:	f000 fc27 	bl	8005600 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

	asserv_init();
 8004db2:	f010 fe5f 	bl	8015a74 <asserv_init>
	shell_init();
 8004db6:	f011 f89b 	bl	8015ef0 <shell_init>
	xTaskCreate(changeMode_run,			"Changement MODE", TASK_STACK_DEPTH_CHANGEMODE, NULL, TASK_PRIORITY_CHANGEMODE, &h_task_changemenMode) != pdPASS ? Error_Handler():(void)0;
 8004dba:	4b25      	ldr	r3, [pc, #148]	@ (8004e50 <main+0xe0>)
 8004dbc:	9301      	str	r3, [sp, #4]
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004dc8:	4922      	ldr	r1, [pc, #136]	@ (8004e54 <main+0xe4>)
 8004dca:	4823      	ldr	r0, [pc, #140]	@ (8004e58 <main+0xe8>)
 8004dcc:	f00e fc6a 	bl	80136a4 <xTaskCreate>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d001      	beq.n	8004dda <main+0x6a>
 8004dd6:	f000 f8a7 	bl	8004f28 <Error_Handler>
	xTaskCreate(asserv_courant_run, 	"Asserv Courant", TASK_STACK_DEPTH_ASSERV_I, NULL, TASK_PRIORITY_ASSERV_I, &h_task_asserv_I) != pdPASS ? Error_Handler():(void)0;
 8004dda:	4b20      	ldr	r3, [pc, #128]	@ (8004e5c <main+0xec>)
 8004ddc:	9301      	str	r3, [sp, #4]
 8004dde:	2302      	movs	r3, #2
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	2300      	movs	r3, #0
 8004de4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004de8:	491d      	ldr	r1, [pc, #116]	@ (8004e60 <main+0xf0>)
 8004dea:	481e      	ldr	r0, [pc, #120]	@ (8004e64 <main+0xf4>)
 8004dec:	f00e fc5a 	bl	80136a4 <xTaskCreate>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d001      	beq.n	8004dfa <main+0x8a>
 8004df6:	f000 f897 	bl	8004f28 <Error_Handler>
	xTaskCreate(asserv_position_run, 	"Asserv Position", TASK_STACK_DEPTH_ASSERV_XYZ, NULL, TASK_PRIORITY_ASSERV_XYZ, &h_task_asserv_XYZ) != pdPASS ? Error_Handler():(void)0;
 8004dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8004e68 <main+0xf8>)
 8004dfc:	9301      	str	r3, [sp, #4]
 8004dfe:	2303      	movs	r3, #3
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	2300      	movs	r3, #0
 8004e04:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004e08:	4918      	ldr	r1, [pc, #96]	@ (8004e6c <main+0xfc>)
 8004e0a:	4819      	ldr	r0, [pc, #100]	@ (8004e70 <main+0x100>)
 8004e0c:	f00e fc4a 	bl	80136a4 <xTaskCreate>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d001      	beq.n	8004e1a <main+0xaa>
 8004e16:	f000 f887 	bl	8004f28 <Error_Handler>
	xTaskCreate(shell_run,				"Shell", TASK_STACK_DEPTH_SHELL, NULL, TASK_PRIORITY_SHELL, &h_task_shell) != pdPASS ? Error_Handler():(void)0;
 8004e1a:	4b16      	ldr	r3, [pc, #88]	@ (8004e74 <main+0x104>)
 8004e1c:	9301      	str	r3, [sp, #4]
 8004e1e:	2304      	movs	r3, #4
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	2300      	movs	r3, #0
 8004e24:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e28:	4913      	ldr	r1, [pc, #76]	@ (8004e78 <main+0x108>)
 8004e2a:	4814      	ldr	r0, [pc, #80]	@ (8004e7c <main+0x10c>)
 8004e2c:	f00e fc3a 	bl	80136a4 <xTaskCreate>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d001      	beq.n	8004e3a <main+0xca>
 8004e36:	f000 f877 	bl	8004f28 <Error_Handler>

	vTaskStartScheduler();
 8004e3a:	f00e febb 	bl	8013bb4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* USBPD initialisation ---------------------------------*/
  MX_USBPD_Init();
 8004e3e:	f010 fa53 	bl	80152e8 <MX_USBPD_Init>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8004e42:	f7ff fc57 	bl	80046f4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8004e46:	f00d fbd5 	bl	80125f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8004e4a:	bf00      	nop
 8004e4c:	e7fd      	b.n	8004e4a <main+0xda>
 8004e4e:	bf00      	nop
 8004e50:	200004e8 	.word	0x200004e8
 8004e54:	08017c0c 	.word	0x08017c0c
 8004e58:	08015e69 	.word	0x08015e69
 8004e5c:	200004e0 	.word	0x200004e0
 8004e60:	08017c1c 	.word	0x08017c1c
 8004e64:	08015a85 	.word	0x08015a85
 8004e68:	200004e4 	.word	0x200004e4
 8004e6c:	08017c2c 	.word	0x08017c2c
 8004e70:	08015b1d 	.word	0x08015b1d
 8004e74:	200004dc 	.word	0x200004dc
 8004e78:	08017c3c 	.word	0x08017c3c
 8004e7c:	08015f8d 	.word	0x08015f8d

08004e80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b094      	sub	sp, #80	@ 0x50
 8004e84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004e86:	f107 0318 	add.w	r3, r7, #24
 8004e8a:	2238      	movs	r2, #56	@ 0x38
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f011 ffc8 	bl	8016e24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004e94:	1d3b      	adds	r3, r7, #4
 8004e96:	2200      	movs	r2, #0
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	605a      	str	r2, [r3, #4]
 8004e9c:	609a      	str	r2, [r3, #8]
 8004e9e:	60da      	str	r2, [r3, #12]
 8004ea0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ea2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8004ea6:	f005 fb57 	bl	800a558 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004eaa:	2302      	movs	r3, #2
 8004eac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004eae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004eb2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004eb4:	2340      	movs	r3, #64	@ 0x40
 8004eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ebc:	f107 0318 	add.w	r3, r7, #24
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f005 fbed 	bl	800a6a0 <HAL_RCC_OscConfig>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d001      	beq.n	8004ed0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8004ecc:	f000 f82c 	bl	8004f28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004ed0:	230f      	movs	r3, #15
 8004ed2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004edc:	2300      	movs	r3, #0
 8004ede:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004ee4:	1d3b      	adds	r3, r7, #4
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f005 feeb 	bl	800acc4 <HAL_RCC_ClockConfig>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d001      	beq.n	8004ef8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8004ef4:	f000 f818 	bl	8004f28 <Error_Handler>
  }
}
 8004ef8:	bf00      	nop
 8004efa:	3750      	adds	r7, #80	@ 0x50
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	CUSTOM_TIM_PeriodElapsedCallback(htim);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f010 fead 	bl	8015c68 <CUSTOM_TIM_PeriodElapsedCallback>
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a04      	ldr	r2, [pc, #16]	@ (8004f24 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d101      	bne.n	8004f1c <HAL_TIM_PeriodElapsedCallback+0x1c>
    HAL_IncTick();
 8004f18:	f001 ff20 	bl	8006d5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004f1c:	bf00      	nop
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40014800 	.word	0x40014800

08004f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004f2c:	b672      	cpsid	i
}
 8004f2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8004f30:	bf00      	nop
 8004f32:	e7fd      	b.n	8004f30 <Error_Handler+0x8>

08004f34 <__io_putchar>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */
PUTCHAR_PROTOTYPE
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART2 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8004f3c:	1d39      	adds	r1, r7, #4
 8004f3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004f42:	2201      	movs	r2, #1
 8004f44:	4803      	ldr	r0, [pc, #12]	@ (8004f54 <__io_putchar+0x20>)
 8004f46:	f008 f97b 	bl	800d240 <HAL_UART_Transmit>
	return ch;
 8004f4a:	687b      	ldr	r3, [r7, #4]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3708      	adds	r7, #8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	200008ec 	.word	0x200008ec

08004f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f5e:	4b11      	ldr	r3, [pc, #68]	@ (8004fa4 <HAL_MspInit+0x4c>)
 8004f60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f62:	4a10      	ldr	r2, [pc, #64]	@ (8004fa4 <HAL_MspInit+0x4c>)
 8004f64:	f043 0301 	orr.w	r3, r3, #1
 8004f68:	6613      	str	r3, [r2, #96]	@ 0x60
 8004f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8004fa4 <HAL_MspInit+0x4c>)
 8004f6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	607b      	str	r3, [r7, #4]
 8004f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f76:	4b0b      	ldr	r3, [pc, #44]	@ (8004fa4 <HAL_MspInit+0x4c>)
 8004f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8004fa4 <HAL_MspInit+0x4c>)
 8004f7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f80:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f82:	4b08      	ldr	r3, [pc, #32]	@ (8004fa4 <HAL_MspInit+0x4c>)
 8004f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f8a:	603b      	str	r3, [r7, #0]
 8004f8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004f8e:	2200      	movs	r2, #0
 8004f90:	210f      	movs	r1, #15
 8004f92:	f06f 0001 	mvn.w	r0, #1
 8004f96:	f003 fe1f 	bl	8008bd8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f9a:	bf00      	nop
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	40021000 	.word	0x40021000

08004fa8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b08c      	sub	sp, #48	@ 0x30
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8004fb8:	4b2f      	ldr	r3, [pc, #188]	@ (8005078 <HAL_InitTick+0xd0>)
 8004fba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fbc:	4a2e      	ldr	r2, [pc, #184]	@ (8005078 <HAL_InitTick+0xd0>)
 8004fbe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fc2:	6613      	str	r3, [r2, #96]	@ 0x60
 8004fc4:	4b2c      	ldr	r3, [pc, #176]	@ (8005078 <HAL_InitTick+0xd0>)
 8004fc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fc8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fcc:	60bb      	str	r3, [r7, #8]
 8004fce:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004fd0:	f107 020c 	add.w	r2, r7, #12
 8004fd4:	f107 0310 	add.w	r3, r7, #16
 8004fd8:	4611      	mov	r1, r2
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f006 f848 	bl	800b070 <HAL_RCC_GetClockConfig>
  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004fe0:	f006 f830 	bl	800b044 <HAL_RCC_GetPCLK2Freq>
 8004fe4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe8:	4a24      	ldr	r2, [pc, #144]	@ (800507c <HAL_InitTick+0xd4>)
 8004fea:	fba2 2303 	umull	r2, r3, r2, r3
 8004fee:	0c9b      	lsrs	r3, r3, #18
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8004ff4:	4b22      	ldr	r3, [pc, #136]	@ (8005080 <HAL_InitTick+0xd8>)
 8004ff6:	4a23      	ldr	r2, [pc, #140]	@ (8005084 <HAL_InitTick+0xdc>)
 8004ff8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8004ffa:	4b21      	ldr	r3, [pc, #132]	@ (8005080 <HAL_InitTick+0xd8>)
 8004ffc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005000:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8005002:	4a1f      	ldr	r2, [pc, #124]	@ (8005080 <HAL_InitTick+0xd8>)
 8005004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005006:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8005008:	4b1d      	ldr	r3, [pc, #116]	@ (8005080 <HAL_InitTick+0xd8>)
 800500a:	2200      	movs	r2, #0
 800500c:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800500e:	4b1c      	ldr	r3, [pc, #112]	@ (8005080 <HAL_InitTick+0xd8>)
 8005010:	2200      	movs	r2, #0
 8005012:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 8005014:	481a      	ldr	r0, [pc, #104]	@ (8005080 <HAL_InitTick+0xd8>)
 8005016:	f006 fa93 	bl	800b540 <HAL_TIM_Base_Init>
 800501a:	4603      	mov	r3, r0
 800501c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8005020:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005024:	2b00      	cmp	r3, #0
 8005026:	d11b      	bne.n	8005060 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8005028:	4815      	ldr	r0, [pc, #84]	@ (8005080 <HAL_InitTick+0xd8>)
 800502a:	f006 fb77 	bl	800b71c <HAL_TIM_Base_Start_IT>
 800502e:	4603      	mov	r3, r0
 8005030:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8005034:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005038:	2b00      	cmp	r3, #0
 800503a:	d111      	bne.n	8005060 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800503c:	201a      	movs	r0, #26
 800503e:	f003 fde5 	bl	8008c0c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b0f      	cmp	r3, #15
 8005046:	d808      	bhi.n	800505a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 8005048:	2200      	movs	r2, #0
 800504a:	6879      	ldr	r1, [r7, #4]
 800504c:	201a      	movs	r0, #26
 800504e:	f003 fdc3 	bl	8008bd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005052:	4a0d      	ldr	r2, [pc, #52]	@ (8005088 <HAL_InitTick+0xe0>)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6013      	str	r3, [r2, #0]
 8005058:	e002      	b.n	8005060 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

  HAL_TIM_RegisterCallback(&htim17, HAL_TIM_PERIOD_ELAPSED_CB_ID, TimeBase_TIM_PeriodElapsedCallback);
 8005060:	4a0a      	ldr	r2, [pc, #40]	@ (800508c <HAL_InitTick+0xe4>)
 8005062:	210e      	movs	r1, #14
 8005064:	4806      	ldr	r0, [pc, #24]	@ (8005080 <HAL_InitTick+0xd8>)
 8005066:	f007 f99f 	bl	800c3a8 <HAL_TIM_RegisterCallback>

 /* Return function status */
  return status;
 800506a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800506e:	4618      	mov	r0, r3
 8005070:	3730      	adds	r7, #48	@ 0x30
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	40021000 	.word	0x40021000
 800507c:	431bde83 	.word	0x431bde83
 8005080:	200004ec 	.word	0x200004ec
 8005084:	40014800 	.word	0x40014800
 8005088:	20000138 	.word	0x20000138
 800508c:	08005091 	.word	0x08005091

08005090 <TimeBase_TIM_PeriodElapsedCallback>:
  * @param  htim TIM handle
  * @retval None
  */

void TimeBase_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 8005098:	f001 fe60 	bl	8006d5c <HAL_IncTick>
}
 800509c:	bf00      	nop
 800509e:	3708      	adds	r7, #8
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050a4:	b480      	push	{r7}
 80050a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80050a8:	bf00      	nop
 80050aa:	e7fd      	b.n	80050a8 <NMI_Handler+0x4>

080050ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80050b0:	bf00      	nop
 80050b2:	e7fd      	b.n	80050b0 <HardFault_Handler+0x4>

080050b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80050b4:	b480      	push	{r7}
 80050b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80050b8:	bf00      	nop
 80050ba:	e7fd      	b.n	80050b8 <MemManage_Handler+0x4>

080050bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80050bc:	b480      	push	{r7}
 80050be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80050c0:	bf00      	nop
 80050c2:	e7fd      	b.n	80050c0 <BusFault_Handler+0x4>

080050c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80050c4:	b480      	push	{r7}
 80050c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80050c8:	bf00      	nop
 80050ca:	e7fd      	b.n	80050c8 <UsageFault_Handler+0x4>

080050cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80050d0:	bf00      	nop
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80050da:	b480      	push	{r7}
 80050dc:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80050de:	bf00      	nop
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80050e8:	b480      	push	{r7}
 80050ea:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel2_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80050ec:	bf00      	nop
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
	...

080050f8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80050fc:	4802      	ldr	r0, [pc, #8]	@ (8005108 <DMA1_Channel3_IRQHandler+0x10>)
 80050fe:	f004 f950 	bl	80093a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005102:	bf00      	nop
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	200003bc 	.word	0x200003bc

0800510c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8005110:	4802      	ldr	r0, [pc, #8]	@ (800511c <ADC1_2_IRQHandler+0x10>)
 8005112:	f002 fb8b 	bl	800782c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8005116:	bf00      	nop
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	20000350 	.word	0x20000350

08005120 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8005124:	4802      	ldr	r0, [pc, #8]	@ (8005130 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8005126:	f006 fd5d 	bl	800bbe4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800512a:	bf00      	nop
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	20000820 	.word	0x20000820

08005134 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8005138:	4802      	ldr	r0, [pc, #8]	@ (8005144 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800513a:	f006 fd53 	bl	800bbe4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800513e:	bf00      	nop
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	200004ec 	.word	0x200004ec

08005148 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800514c:	4802      	ldr	r0, [pc, #8]	@ (8005158 <USART1_IRQHandler+0x10>)
 800514e:	f008 f951 	bl	800d3f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005152:	bf00      	nop
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	200008ec 	.word	0x200008ec

0800515c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8005162:	2300      	movs	r3, #0
 8005164:	607b      	str	r3, [r7, #4]
	xTaskNotifyFromISR(h_task_changemenMode,
 8005166:	4b14      	ldr	r3, [pc, #80]	@ (80051b8 <EXTI15_10_IRQHandler+0x5c>)
 8005168:	6818      	ldr	r0, [r3, #0]
 800516a:	1d3b      	adds	r3, r7, #4
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	2300      	movs	r3, #0
 8005170:	2201      	movs	r2, #1
 8005172:	2101      	movs	r1, #1
 8005174:	f00f fb2e 	bl	80147d4 <xTaskGenericNotifyFromISR>
			1,
			eSetBits,
			&pxHigherPriorityTaskWoken);
	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d007      	beq.n	800518e <EXTI15_10_IRQHandler+0x32>
 800517e:	4b0f      	ldr	r3, [pc, #60]	@ (80051bc <EXTI15_10_IRQHandler+0x60>)
 8005180:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	f3bf 8f6f 	isb	sy

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXP_EXTI_Pin);
 800518e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005192:	f004 fbd7 	bl	8009944 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_INITIAL_STATE_Pin);
 8005196:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800519a:	f004 fbd3 	bl	8009944 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_START_ROBOT_Pin);
 800519e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80051a2:	f004 fbcf 	bl	8009944 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MOUSTACHE_1_Pin);
 80051a6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80051aa:	f004 fbcb 	bl	8009944 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80051ae:	bf00      	nop
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	200004e8 	.word	0x200004e8
 80051bc:	e000ed04 	.word	0xe000ed04

080051c0 <UCPD1_IRQHandler>:

/**
  * @brief This function handles UCPD1 interrupt / UCPD1 wake-up interrupt through EXTI line 43.
  */
void UCPD1_IRQHandler(void)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UCPD1_IRQn 0 */

  /* USER CODE END UCPD1_IRQn 0 */
  USBPD_PORT0_IRQHandler();
 80051c4:	f00b fc15 	bl	80109f2 <USBPD_PORT0_IRQHandler>

  /* USER CODE BEGIN UCPD1_IRQn 1 */

  /* USER CODE END UCPD1_IRQn 1 */
}
 80051c8:	bf00      	nop
 80051ca:	bd80      	pop	{r7, pc}

080051cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80051cc:	b480      	push	{r7}
 80051ce:	af00      	add	r7, sp, #0
  return 1;
 80051d0:	2301      	movs	r3, #1
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <_kill>:

int _kill(int pid, int sig)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80051e6:	f011 fe8b 	bl	8016f00 <__errno>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2216      	movs	r2, #22
 80051ee:	601a      	str	r2, [r3, #0]
  return -1;
 80051f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3708      	adds	r7, #8
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <_exit>:

void _exit (int status)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005204:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f7ff ffe7 	bl	80051dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800520e:	bf00      	nop
 8005210:	e7fd      	b.n	800520e <_exit+0x12>

08005212 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b086      	sub	sp, #24
 8005216:	af00      	add	r7, sp, #0
 8005218:	60f8      	str	r0, [r7, #12]
 800521a:	60b9      	str	r1, [r7, #8]
 800521c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800521e:	2300      	movs	r3, #0
 8005220:	617b      	str	r3, [r7, #20]
 8005222:	e00a      	b.n	800523a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005224:	f3af 8000 	nop.w
 8005228:	4601      	mov	r1, r0
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	1c5a      	adds	r2, r3, #1
 800522e:	60ba      	str	r2, [r7, #8]
 8005230:	b2ca      	uxtb	r2, r1
 8005232:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	3301      	adds	r3, #1
 8005238:	617b      	str	r3, [r7, #20]
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	429a      	cmp	r2, r3
 8005240:	dbf0      	blt.n	8005224 <_read+0x12>
  }

  return len;
 8005242:	687b      	ldr	r3, [r7, #4]
}
 8005244:	4618      	mov	r0, r3
 8005246:	3718      	adds	r7, #24
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005258:	2300      	movs	r3, #0
 800525a:	617b      	str	r3, [r7, #20]
 800525c:	e009      	b.n	8005272 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	1c5a      	adds	r2, r3, #1
 8005262:	60ba      	str	r2, [r7, #8]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	4618      	mov	r0, r3
 8005268:	f7ff fe64 	bl	8004f34 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	3301      	adds	r3, #1
 8005270:	617b      	str	r3, [r7, #20]
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	429a      	cmp	r2, r3
 8005278:	dbf1      	blt.n	800525e <_write+0x12>
  }
  return len;
 800527a:	687b      	ldr	r3, [r7, #4]
}
 800527c:	4618      	mov	r0, r3
 800527e:	3718      	adds	r7, #24
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <_close>:

int _close(int file)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800528c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8005290:	4618      	mov	r0, r3
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80052ac:	605a      	str	r2, [r3, #4]
  return 0;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <_isatty>:

int _isatty(int file)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80052c4:	2301      	movs	r3, #1
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	370c      	adds	r7, #12
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b085      	sub	sp, #20
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	60f8      	str	r0, [r7, #12]
 80052da:	60b9      	str	r1, [r7, #8]
 80052dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80052f4:	4a14      	ldr	r2, [pc, #80]	@ (8005348 <_sbrk+0x5c>)
 80052f6:	4b15      	ldr	r3, [pc, #84]	@ (800534c <_sbrk+0x60>)
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005300:	4b13      	ldr	r3, [pc, #76]	@ (8005350 <_sbrk+0x64>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d102      	bne.n	800530e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005308:	4b11      	ldr	r3, [pc, #68]	@ (8005350 <_sbrk+0x64>)
 800530a:	4a12      	ldr	r2, [pc, #72]	@ (8005354 <_sbrk+0x68>)
 800530c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800530e:	4b10      	ldr	r3, [pc, #64]	@ (8005350 <_sbrk+0x64>)
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4413      	add	r3, r2
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	429a      	cmp	r2, r3
 800531a:	d207      	bcs.n	800532c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800531c:	f011 fdf0 	bl	8016f00 <__errno>
 8005320:	4603      	mov	r3, r0
 8005322:	220c      	movs	r2, #12
 8005324:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005326:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800532a:	e009      	b.n	8005340 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800532c:	4b08      	ldr	r3, [pc, #32]	@ (8005350 <_sbrk+0x64>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005332:	4b07      	ldr	r3, [pc, #28]	@ (8005350 <_sbrk+0x64>)
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4413      	add	r3, r2
 800533a:	4a05      	ldr	r2, [pc, #20]	@ (8005350 <_sbrk+0x64>)
 800533c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800533e:	68fb      	ldr	r3, [r7, #12]
}
 8005340:	4618      	mov	r0, r3
 8005342:	3718      	adds	r7, #24
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	20008000 	.word	0x20008000
 800534c:	00000400 	.word	0x00000400
 8005350:	200005b8 	.word	0x200005b8
 8005354:	20005cd0 	.word	0x20005cd0

08005358 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005358:	b480      	push	{r7}
 800535a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800535c:	4b06      	ldr	r3, [pc, #24]	@ (8005378 <SystemInit+0x20>)
 800535e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005362:	4a05      	ldr	r2, [pc, #20]	@ (8005378 <SystemInit+0x20>)
 8005364:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005368:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800536c:	bf00      	nop
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	e000ed00 	.word	0xe000ed00

0800537c <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b08e      	sub	sp, #56	@ 0x38
 8005380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005382:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005386:	2200      	movs	r2, #0
 8005388:	601a      	str	r2, [r3, #0]
 800538a:	605a      	str	r2, [r3, #4]
 800538c:	609a      	str	r2, [r3, #8]
 800538e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005390:	f107 031c 	add.w	r3, r7, #28
 8005394:	2200      	movs	r2, #0
 8005396:	601a      	str	r2, [r3, #0]
 8005398:	605a      	str	r2, [r3, #4]
 800539a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800539c:	463b      	mov	r3, r7
 800539e:	2200      	movs	r2, #0
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	605a      	str	r2, [r3, #4]
 80053a4:	609a      	str	r2, [r3, #8]
 80053a6:	60da      	str	r2, [r3, #12]
 80053a8:	611a      	str	r2, [r3, #16]
 80053aa:	615a      	str	r2, [r3, #20]
 80053ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80053ae:	4b33      	ldr	r3, [pc, #204]	@ (800547c <MX_TIM2_Init+0x100>)
 80053b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80053b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80053b6:	4b31      	ldr	r3, [pc, #196]	@ (800547c <MX_TIM2_Init+0x100>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053bc:	4b2f      	ldr	r3, [pc, #188]	@ (800547c <MX_TIM2_Init+0x100>)
 80053be:	2200      	movs	r2, #0
 80053c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 639;
 80053c2:	4b2e      	ldr	r3, [pc, #184]	@ (800547c <MX_TIM2_Init+0x100>)
 80053c4:	f240 227f 	movw	r2, #639	@ 0x27f
 80053c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053ca:	4b2c      	ldr	r3, [pc, #176]	@ (800547c <MX_TIM2_Init+0x100>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053d0:	4b2a      	ldr	r3, [pc, #168]	@ (800547c <MX_TIM2_Init+0x100>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80053d6:	4829      	ldr	r0, [pc, #164]	@ (800547c <MX_TIM2_Init+0x100>)
 80053d8:	f006 f8b2 	bl	800b540 <HAL_TIM_Base_Init>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80053e2:	f7ff fda1 	bl	8004f28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80053e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80053ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80053ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80053f0:	4619      	mov	r1, r3
 80053f2:	4822      	ldr	r0, [pc, #136]	@ (800547c <MX_TIM2_Init+0x100>)
 80053f4:	f006 fe84 	bl	800c100 <HAL_TIM_ConfigClockSource>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80053fe:	f7ff fd93 	bl	8004f28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005402:	481e      	ldr	r0, [pc, #120]	@ (800547c <MX_TIM2_Init+0x100>)
 8005404:	f006 f9f4 	bl	800b7f0 <HAL_TIM_PWM_Init>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800540e:	f7ff fd8b 	bl	8004f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005412:	2300      	movs	r3, #0
 8005414:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005416:	2300      	movs	r3, #0
 8005418:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800541a:	f107 031c 	add.w	r3, r7, #28
 800541e:	4619      	mov	r1, r3
 8005420:	4816      	ldr	r0, [pc, #88]	@ (800547c <MX_TIM2_Init+0x100>)
 8005422:	f007 fdeb 	bl	800cffc <HAL_TIMEx_MasterConfigSynchronization>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d001      	beq.n	8005430 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800542c:	f7ff fd7c 	bl	8004f28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005430:	2360      	movs	r3, #96	@ 0x60
 8005432:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005434:	2300      	movs	r3, #0
 8005436:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005438:	2300      	movs	r3, #0
 800543a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800543c:	2300      	movs	r3, #0
 800543e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005440:	463b      	mov	r3, r7
 8005442:	2208      	movs	r2, #8
 8005444:	4619      	mov	r1, r3
 8005446:	480d      	ldr	r0, [pc, #52]	@ (800547c <MX_TIM2_Init+0x100>)
 8005448:	f006 fd46 	bl	800bed8 <HAL_TIM_PWM_ConfigChannel>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8005452:	f7ff fd69 	bl	8004f28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005456:	463b      	mov	r3, r7
 8005458:	220c      	movs	r2, #12
 800545a:	4619      	mov	r1, r3
 800545c:	4807      	ldr	r0, [pc, #28]	@ (800547c <MX_TIM2_Init+0x100>)
 800545e:	f006 fd3b 	bl	800bed8 <HAL_TIM_PWM_ConfigChannel>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8005468:	f7ff fd5e 	bl	8004f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800546c:	4803      	ldr	r0, [pc, #12]	@ (800547c <MX_TIM2_Init+0x100>)
 800546e:	f000 f985 	bl	800577c <HAL_TIM_MspPostInit>

}
 8005472:	bf00      	nop
 8005474:	3738      	adds	r7, #56	@ 0x38
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	200005bc 	.word	0x200005bc

08005480 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b08a      	sub	sp, #40	@ 0x28
 8005484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005486:	f107 031c 	add.w	r3, r7, #28
 800548a:	2200      	movs	r2, #0
 800548c:	601a      	str	r2, [r3, #0]
 800548e:	605a      	str	r2, [r3, #4]
 8005490:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005492:	463b      	mov	r3, r7
 8005494:	2200      	movs	r2, #0
 8005496:	601a      	str	r2, [r3, #0]
 8005498:	605a      	str	r2, [r3, #4]
 800549a:	609a      	str	r2, [r3, #8]
 800549c:	60da      	str	r2, [r3, #12]
 800549e:	611a      	str	r2, [r3, #16]
 80054a0:	615a      	str	r2, [r3, #20]
 80054a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80054a4:	4b27      	ldr	r3, [pc, #156]	@ (8005544 <MX_TIM3_Init+0xc4>)
 80054a6:	4a28      	ldr	r2, [pc, #160]	@ (8005548 <MX_TIM3_Init+0xc8>)
 80054a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80054aa:	4b26      	ldr	r3, [pc, #152]	@ (8005544 <MX_TIM3_Init+0xc4>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054b0:	4b24      	ldr	r3, [pc, #144]	@ (8005544 <MX_TIM3_Init+0xc4>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 639;
 80054b6:	4b23      	ldr	r3, [pc, #140]	@ (8005544 <MX_TIM3_Init+0xc4>)
 80054b8:	f240 227f 	movw	r2, #639	@ 0x27f
 80054bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054be:	4b21      	ldr	r3, [pc, #132]	@ (8005544 <MX_TIM3_Init+0xc4>)
 80054c0:	2200      	movs	r2, #0
 80054c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054c4:	4b1f      	ldr	r3, [pc, #124]	@ (8005544 <MX_TIM3_Init+0xc4>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80054ca:	481e      	ldr	r0, [pc, #120]	@ (8005544 <MX_TIM3_Init+0xc4>)
 80054cc:	f006 f990 	bl	800b7f0 <HAL_TIM_PWM_Init>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80054d6:	f7ff fd27 	bl	8004f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054da:	2300      	movs	r3, #0
 80054dc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054de:	2300      	movs	r3, #0
 80054e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80054e2:	f107 031c 	add.w	r3, r7, #28
 80054e6:	4619      	mov	r1, r3
 80054e8:	4816      	ldr	r0, [pc, #88]	@ (8005544 <MX_TIM3_Init+0xc4>)
 80054ea:	f007 fd87 	bl	800cffc <HAL_TIMEx_MasterConfigSynchronization>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d001      	beq.n	80054f8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80054f4:	f7ff fd18 	bl	8004f28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80054f8:	2360      	movs	r3, #96	@ 0x60
 80054fa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80054fc:	2300      	movs	r3, #0
 80054fe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005500:	2300      	movs	r3, #0
 8005502:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005504:	2300      	movs	r3, #0
 8005506:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005508:	463b      	mov	r3, r7
 800550a:	2208      	movs	r2, #8
 800550c:	4619      	mov	r1, r3
 800550e:	480d      	ldr	r0, [pc, #52]	@ (8005544 <MX_TIM3_Init+0xc4>)
 8005510:	f006 fce2 	bl	800bed8 <HAL_TIM_PWM_ConfigChannel>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800551a:	f7ff fd05 	bl	8004f28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800551e:	463b      	mov	r3, r7
 8005520:	220c      	movs	r2, #12
 8005522:	4619      	mov	r1, r3
 8005524:	4807      	ldr	r0, [pc, #28]	@ (8005544 <MX_TIM3_Init+0xc4>)
 8005526:	f006 fcd7 	bl	800bed8 <HAL_TIM_PWM_ConfigChannel>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d001      	beq.n	8005534 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8005530:	f7ff fcfa 	bl	8004f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005534:	4803      	ldr	r0, [pc, #12]	@ (8005544 <MX_TIM3_Init+0xc4>)
 8005536:	f000 f921 	bl	800577c <HAL_TIM_MspPostInit>

}
 800553a:	bf00      	nop
 800553c:	3728      	adds	r7, #40	@ 0x28
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	20000688 	.word	0x20000688
 8005548:	40000400 	.word	0x40000400

0800554c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b08a      	sub	sp, #40	@ 0x28
 8005550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005552:	f107 031c 	add.w	r3, r7, #28
 8005556:	2200      	movs	r2, #0
 8005558:	601a      	str	r2, [r3, #0]
 800555a:	605a      	str	r2, [r3, #4]
 800555c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800555e:	463b      	mov	r3, r7
 8005560:	2200      	movs	r2, #0
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	605a      	str	r2, [r3, #4]
 8005566:	609a      	str	r2, [r3, #8]
 8005568:	60da      	str	r2, [r3, #12]
 800556a:	611a      	str	r2, [r3, #16]
 800556c:	615a      	str	r2, [r3, #20]
 800556e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005570:	4b21      	ldr	r3, [pc, #132]	@ (80055f8 <MX_TIM4_Init+0xac>)
 8005572:	4a22      	ldr	r2, [pc, #136]	@ (80055fc <MX_TIM4_Init+0xb0>)
 8005574:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005576:	4b20      	ldr	r3, [pc, #128]	@ (80055f8 <MX_TIM4_Init+0xac>)
 8005578:	2200      	movs	r2, #0
 800557a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800557c:	4b1e      	ldr	r3, [pc, #120]	@ (80055f8 <MX_TIM4_Init+0xac>)
 800557e:	2200      	movs	r2, #0
 8005580:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8005582:	4b1d      	ldr	r3, [pc, #116]	@ (80055f8 <MX_TIM4_Init+0xac>)
 8005584:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005588:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800558a:	4b1b      	ldr	r3, [pc, #108]	@ (80055f8 <MX_TIM4_Init+0xac>)
 800558c:	2200      	movs	r2, #0
 800558e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005590:	4b19      	ldr	r3, [pc, #100]	@ (80055f8 <MX_TIM4_Init+0xac>)
 8005592:	2200      	movs	r2, #0
 8005594:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005596:	4818      	ldr	r0, [pc, #96]	@ (80055f8 <MX_TIM4_Init+0xac>)
 8005598:	f006 f92a 	bl	800b7f0 <HAL_TIM_PWM_Init>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80055a2:	f7ff fcc1 	bl	8004f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80055a6:	2300      	movs	r3, #0
 80055a8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80055aa:	2300      	movs	r3, #0
 80055ac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80055ae:	f107 031c 	add.w	r3, r7, #28
 80055b2:	4619      	mov	r1, r3
 80055b4:	4810      	ldr	r0, [pc, #64]	@ (80055f8 <MX_TIM4_Init+0xac>)
 80055b6:	f007 fd21 	bl	800cffc <HAL_TIMEx_MasterConfigSynchronization>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d001      	beq.n	80055c4 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80055c0:	f7ff fcb2 	bl	8004f28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80055c4:	2360      	movs	r3, #96	@ 0x60
 80055c6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80055c8:	2300      	movs	r3, #0
 80055ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80055cc:	2300      	movs	r3, #0
 80055ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80055d0:	2300      	movs	r3, #0
 80055d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80055d4:	463b      	mov	r3, r7
 80055d6:	2200      	movs	r2, #0
 80055d8:	4619      	mov	r1, r3
 80055da:	4807      	ldr	r0, [pc, #28]	@ (80055f8 <MX_TIM4_Init+0xac>)
 80055dc:	f006 fc7c 	bl	800bed8 <HAL_TIM_PWM_ConfigChannel>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d001      	beq.n	80055ea <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80055e6:	f7ff fc9f 	bl	8004f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80055ea:	4803      	ldr	r0, [pc, #12]	@ (80055f8 <MX_TIM4_Init+0xac>)
 80055ec:	f000 f8c6 	bl	800577c <HAL_TIM_MspPostInit>

}
 80055f0:	bf00      	nop
 80055f2:	3728      	adds	r7, #40	@ 0x28
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	20000754 	.word	0x20000754
 80055fc:	40000800 	.word	0x40000800

08005600 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b088      	sub	sp, #32
 8005604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005606:	f107 0310 	add.w	r3, r7, #16
 800560a:	2200      	movs	r2, #0
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	605a      	str	r2, [r3, #4]
 8005610:	609a      	str	r2, [r3, #8]
 8005612:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005614:	1d3b      	adds	r3, r7, #4
 8005616:	2200      	movs	r2, #0
 8005618:	601a      	str	r2, [r3, #0]
 800561a:	605a      	str	r2, [r3, #4]
 800561c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800561e:	4b1f      	ldr	r3, [pc, #124]	@ (800569c <MX_TIM15_Init+0x9c>)
 8005620:	4a1f      	ldr	r2, [pc, #124]	@ (80056a0 <MX_TIM15_Init+0xa0>)
 8005622:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 999;
 8005624:	4b1d      	ldr	r3, [pc, #116]	@ (800569c <MX_TIM15_Init+0x9c>)
 8005626:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800562a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800562c:	4b1b      	ldr	r3, [pc, #108]	@ (800569c <MX_TIM15_Init+0x9c>)
 800562e:	2200      	movs	r2, #0
 8005630:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 15999;
 8005632:	4b1a      	ldr	r3, [pc, #104]	@ (800569c <MX_TIM15_Init+0x9c>)
 8005634:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8005638:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800563a:	4b18      	ldr	r3, [pc, #96]	@ (800569c <MX_TIM15_Init+0x9c>)
 800563c:	2200      	movs	r2, #0
 800563e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8005640:	4b16      	ldr	r3, [pc, #88]	@ (800569c <MX_TIM15_Init+0x9c>)
 8005642:	2200      	movs	r2, #0
 8005644:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005646:	4b15      	ldr	r3, [pc, #84]	@ (800569c <MX_TIM15_Init+0x9c>)
 8005648:	2280      	movs	r2, #128	@ 0x80
 800564a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800564c:	4813      	ldr	r0, [pc, #76]	@ (800569c <MX_TIM15_Init+0x9c>)
 800564e:	f005 ff77 	bl	800b540 <HAL_TIM_Base_Init>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d001      	beq.n	800565c <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8005658:	f7ff fc66 	bl	8004f28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800565c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005660:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8005662:	f107 0310 	add.w	r3, r7, #16
 8005666:	4619      	mov	r1, r3
 8005668:	480c      	ldr	r0, [pc, #48]	@ (800569c <MX_TIM15_Init+0x9c>)
 800566a:	f006 fd49 	bl	800c100 <HAL_TIM_ConfigClockSource>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8005674:	f7ff fc58 	bl	8004f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005678:	2320      	movs	r3, #32
 800567a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800567c:	2300      	movs	r3, #0
 800567e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8005680:	1d3b      	adds	r3, r7, #4
 8005682:	4619      	mov	r1, r3
 8005684:	4805      	ldr	r0, [pc, #20]	@ (800569c <MX_TIM15_Init+0x9c>)
 8005686:	f007 fcb9 	bl	800cffc <HAL_TIMEx_MasterConfigSynchronization>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d001      	beq.n	8005694 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8005690:	f7ff fc4a 	bl	8004f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8005694:	bf00      	nop
 8005696:	3720      	adds	r7, #32
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	20000820 	.word	0x20000820
 80056a0:	40014000 	.word	0x40014000

080056a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056b4:	d10c      	bne.n	80056d0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80056b6:	4b15      	ldr	r3, [pc, #84]	@ (800570c <HAL_TIM_Base_MspInit+0x68>)
 80056b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ba:	4a14      	ldr	r2, [pc, #80]	@ (800570c <HAL_TIM_Base_MspInit+0x68>)
 80056bc:	f043 0301 	orr.w	r3, r3, #1
 80056c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80056c2:	4b12      	ldr	r3, [pc, #72]	@ (800570c <HAL_TIM_Base_MspInit+0x68>)
 80056c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	60fb      	str	r3, [r7, #12]
 80056cc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80056ce:	e018      	b.n	8005702 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM15)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a0e      	ldr	r2, [pc, #56]	@ (8005710 <HAL_TIM_Base_MspInit+0x6c>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d113      	bne.n	8005702 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80056da:	4b0c      	ldr	r3, [pc, #48]	@ (800570c <HAL_TIM_Base_MspInit+0x68>)
 80056dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056de:	4a0b      	ldr	r2, [pc, #44]	@ (800570c <HAL_TIM_Base_MspInit+0x68>)
 80056e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80056e6:	4b09      	ldr	r3, [pc, #36]	@ (800570c <HAL_TIM_Base_MspInit+0x68>)
 80056e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056ee:	60bb      	str	r3, [r7, #8]
 80056f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 80056f2:	2200      	movs	r2, #0
 80056f4:	2105      	movs	r1, #5
 80056f6:	2018      	movs	r0, #24
 80056f8:	f003 fa6e 	bl	8008bd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80056fc:	2018      	movs	r0, #24
 80056fe:	f003 fa85 	bl	8008c0c <HAL_NVIC_EnableIRQ>
}
 8005702:	bf00      	nop
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	40021000 	.word	0x40021000
 8005710:	40014000 	.word	0x40014000

08005714 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a13      	ldr	r2, [pc, #76]	@ (8005770 <HAL_TIM_PWM_MspInit+0x5c>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d10c      	bne.n	8005740 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005726:	4b13      	ldr	r3, [pc, #76]	@ (8005774 <HAL_TIM_PWM_MspInit+0x60>)
 8005728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800572a:	4a12      	ldr	r2, [pc, #72]	@ (8005774 <HAL_TIM_PWM_MspInit+0x60>)
 800572c:	f043 0302 	orr.w	r3, r3, #2
 8005730:	6593      	str	r3, [r2, #88]	@ 0x58
 8005732:	4b10      	ldr	r3, [pc, #64]	@ (8005774 <HAL_TIM_PWM_MspInit+0x60>)
 8005734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005736:	f003 0302 	and.w	r3, r3, #2
 800573a:	60fb      	str	r3, [r7, #12]
 800573c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800573e:	e010      	b.n	8005762 <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM4)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a0c      	ldr	r2, [pc, #48]	@ (8005778 <HAL_TIM_PWM_MspInit+0x64>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d10b      	bne.n	8005762 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800574a:	4b0a      	ldr	r3, [pc, #40]	@ (8005774 <HAL_TIM_PWM_MspInit+0x60>)
 800574c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800574e:	4a09      	ldr	r2, [pc, #36]	@ (8005774 <HAL_TIM_PWM_MspInit+0x60>)
 8005750:	f043 0304 	orr.w	r3, r3, #4
 8005754:	6593      	str	r3, [r2, #88]	@ 0x58
 8005756:	4b07      	ldr	r3, [pc, #28]	@ (8005774 <HAL_TIM_PWM_MspInit+0x60>)
 8005758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800575a:	f003 0304 	and.w	r3, r3, #4
 800575e:	60bb      	str	r3, [r7, #8]
 8005760:	68bb      	ldr	r3, [r7, #8]
}
 8005762:	bf00      	nop
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	40000400 	.word	0x40000400
 8005774:	40021000 	.word	0x40021000
 8005778:	40000800 	.word	0x40000800

0800577c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b08a      	sub	sp, #40	@ 0x28
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005784:	f107 0314 	add.w	r3, r7, #20
 8005788:	2200      	movs	r2, #0
 800578a:	601a      	str	r2, [r3, #0]
 800578c:	605a      	str	r2, [r3, #4]
 800578e:	609a      	str	r2, [r3, #8]
 8005790:	60da      	str	r2, [r3, #12]
 8005792:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800579c:	d11d      	bne.n	80057da <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800579e:	4b33      	ldr	r3, [pc, #204]	@ (800586c <HAL_TIM_MspPostInit+0xf0>)
 80057a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057a2:	4a32      	ldr	r2, [pc, #200]	@ (800586c <HAL_TIM_MspPostInit+0xf0>)
 80057a4:	f043 0302 	orr.w	r3, r3, #2
 80057a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80057aa:	4b30      	ldr	r3, [pc, #192]	@ (800586c <HAL_TIM_MspPostInit+0xf0>)
 80057ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057ae:	f003 0302 	and.w	r3, r3, #2
 80057b2:	613b      	str	r3, [r7, #16]
 80057b4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = DRIVER_REV1_Pin|DRIVER_FWD1_Pin;
 80057b6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80057ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057bc:	2302      	movs	r3, #2
 80057be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057c0:	2300      	movs	r3, #0
 80057c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057c4:	2300      	movs	r3, #0
 80057c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80057c8:	2301      	movs	r3, #1
 80057ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057cc:	f107 0314 	add.w	r3, r7, #20
 80057d0:	4619      	mov	r1, r3
 80057d2:	4827      	ldr	r0, [pc, #156]	@ (8005870 <HAL_TIM_MspPostInit+0xf4>)
 80057d4:	f003 ff34 	bl	8009640 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80057d8:	e044      	b.n	8005864 <HAL_TIM_MspPostInit+0xe8>
  else if(timHandle->Instance==TIM3)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a25      	ldr	r2, [pc, #148]	@ (8005874 <HAL_TIM_MspPostInit+0xf8>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d11c      	bne.n	800581e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057e4:	4b21      	ldr	r3, [pc, #132]	@ (800586c <HAL_TIM_MspPostInit+0xf0>)
 80057e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057e8:	4a20      	ldr	r2, [pc, #128]	@ (800586c <HAL_TIM_MspPostInit+0xf0>)
 80057ea:	f043 0302 	orr.w	r3, r3, #2
 80057ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80057f0:	4b1e      	ldr	r3, [pc, #120]	@ (800586c <HAL_TIM_MspPostInit+0xf0>)
 80057f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	60fb      	str	r3, [r7, #12]
 80057fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DRIVER_FWD2_Pin|DRIVER_REV2_Pin;
 80057fc:	2303      	movs	r3, #3
 80057fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005800:	2302      	movs	r3, #2
 8005802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005804:	2300      	movs	r3, #0
 8005806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005808:	2300      	movs	r3, #0
 800580a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800580c:	2302      	movs	r3, #2
 800580e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005810:	f107 0314 	add.w	r3, r7, #20
 8005814:	4619      	mov	r1, r3
 8005816:	4816      	ldr	r0, [pc, #88]	@ (8005870 <HAL_TIM_MspPostInit+0xf4>)
 8005818:	f003 ff12 	bl	8009640 <HAL_GPIO_Init>
}
 800581c:	e022      	b.n	8005864 <HAL_TIM_MspPostInit+0xe8>
  else if(timHandle->Instance==TIM4)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a15      	ldr	r2, [pc, #84]	@ (8005878 <HAL_TIM_MspPostInit+0xfc>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d11d      	bne.n	8005864 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005828:	4b10      	ldr	r3, [pc, #64]	@ (800586c <HAL_TIM_MspPostInit+0xf0>)
 800582a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800582c:	4a0f      	ldr	r2, [pc, #60]	@ (800586c <HAL_TIM_MspPostInit+0xf0>)
 800582e:	f043 0301 	orr.w	r3, r3, #1
 8005832:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005834:	4b0d      	ldr	r3, [pc, #52]	@ (800586c <HAL_TIM_MspPostInit+0xf0>)
 8005836:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005838:	f003 0301 	and.w	r3, r3, #1
 800583c:	60bb      	str	r3, [r7, #8]
 800583e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LIDAR_M_CTR_Pin;
 8005840:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005846:	2302      	movs	r3, #2
 8005848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800584a:	2300      	movs	r3, #0
 800584c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800584e:	2300      	movs	r3, #0
 8005850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8005852:	230a      	movs	r3, #10
 8005854:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LIDAR_M_CTR_GPIO_Port, &GPIO_InitStruct);
 8005856:	f107 0314 	add.w	r3, r7, #20
 800585a:	4619      	mov	r1, r3
 800585c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005860:	f003 feee 	bl	8009640 <HAL_GPIO_Init>
}
 8005864:	bf00      	nop
 8005866:	3728      	adds	r7, #40	@ 0x28
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	40021000 	.word	0x40021000
 8005870:	48000400 	.word	0x48000400
 8005874:	40000400 	.word	0x40000400
 8005878:	40000800 	.word	0x40000800

0800587c <__NVIC_GetPriorityGrouping>:
{
 800587c:	b480      	push	{r7}
 800587e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005880:	4b04      	ldr	r3, [pc, #16]	@ (8005894 <__NVIC_GetPriorityGrouping+0x18>)
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	0a1b      	lsrs	r3, r3, #8
 8005886:	f003 0307 	and.w	r3, r3, #7
}
 800588a:	4618      	mov	r0, r3
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr
 8005894:	e000ed00 	.word	0xe000ed00

08005898 <__NVIC_EnableIRQ>:
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	4603      	mov	r3, r0
 80058a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	db0b      	blt.n	80058c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058aa:	79fb      	ldrb	r3, [r7, #7]
 80058ac:	f003 021f 	and.w	r2, r3, #31
 80058b0:	4907      	ldr	r1, [pc, #28]	@ (80058d0 <__NVIC_EnableIRQ+0x38>)
 80058b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058b6:	095b      	lsrs	r3, r3, #5
 80058b8:	2001      	movs	r0, #1
 80058ba:	fa00 f202 	lsl.w	r2, r0, r2
 80058be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80058c2:	bf00      	nop
 80058c4:	370c      	adds	r7, #12
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	e000e100 	.word	0xe000e100

080058d4 <__NVIC_SetPriority>:
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	4603      	mov	r3, r0
 80058dc:	6039      	str	r1, [r7, #0]
 80058de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	db0a      	blt.n	80058fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	b2da      	uxtb	r2, r3
 80058ec:	490c      	ldr	r1, [pc, #48]	@ (8005920 <__NVIC_SetPriority+0x4c>)
 80058ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058f2:	0112      	lsls	r2, r2, #4
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	440b      	add	r3, r1
 80058f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80058fc:	e00a      	b.n	8005914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	b2da      	uxtb	r2, r3
 8005902:	4908      	ldr	r1, [pc, #32]	@ (8005924 <__NVIC_SetPriority+0x50>)
 8005904:	79fb      	ldrb	r3, [r7, #7]
 8005906:	f003 030f 	and.w	r3, r3, #15
 800590a:	3b04      	subs	r3, #4
 800590c:	0112      	lsls	r2, r2, #4
 800590e:	b2d2      	uxtb	r2, r2
 8005910:	440b      	add	r3, r1
 8005912:	761a      	strb	r2, [r3, #24]
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr
 8005920:	e000e100 	.word	0xe000e100
 8005924:	e000ed00 	.word	0xe000ed00

08005928 <NVIC_EncodePriority>:
{
 8005928:	b480      	push	{r7}
 800592a:	b089      	sub	sp, #36	@ 0x24
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f003 0307 	and.w	r3, r3, #7
 800593a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	f1c3 0307 	rsb	r3, r3, #7
 8005942:	2b04      	cmp	r3, #4
 8005944:	bf28      	it	cs
 8005946:	2304      	movcs	r3, #4
 8005948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	3304      	adds	r3, #4
 800594e:	2b06      	cmp	r3, #6
 8005950:	d902      	bls.n	8005958 <NVIC_EncodePriority+0x30>
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	3b03      	subs	r3, #3
 8005956:	e000      	b.n	800595a <NVIC_EncodePriority+0x32>
 8005958:	2300      	movs	r3, #0
 800595a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800595c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	fa02 f303 	lsl.w	r3, r2, r3
 8005966:	43da      	mvns	r2, r3
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	401a      	ands	r2, r3
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005970:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	fa01 f303 	lsl.w	r3, r1, r3
 800597a:	43d9      	mvns	r1, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005980:	4313      	orrs	r3, r2
}
 8005982:	4618      	mov	r0, r3
 8005984:	3724      	adds	r7, #36	@ 0x24
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
	...

08005990 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005998:	4b08      	ldr	r3, [pc, #32]	@ (80059bc <LL_AHB2_GRP1_EnableClock+0x2c>)
 800599a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800599c:	4907      	ldr	r1, [pc, #28]	@ (80059bc <LL_AHB2_GRP1_EnableClock+0x2c>)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80059a4:	4b05      	ldr	r3, [pc, #20]	@ (80059bc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80059a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4013      	ands	r3, r2
 80059ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80059ae:	68fb      	ldr	r3, [r7, #12]
}
 80059b0:	bf00      	nop
 80059b2:	3714      	adds	r7, #20
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr
 80059bc:	40021000 	.word	0x40021000

080059c0 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80059c8:	4b08      	ldr	r3, [pc, #32]	@ (80059ec <LL_APB1_GRP2_EnableClock+0x2c>)
 80059ca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80059cc:	4907      	ldr	r1, [pc, #28]	@ (80059ec <LL_APB1_GRP2_EnableClock+0x2c>)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80059d4:	4b05      	ldr	r3, [pc, #20]	@ (80059ec <LL_APB1_GRP2_EnableClock+0x2c>)
 80059d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4013      	ands	r3, r2
 80059dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80059de:	68fb      	ldr	r3, [r7, #12]
}
 80059e0:	bf00      	nop
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	40021000 	.word	0x40021000

080059f0 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b087      	sub	sp, #28
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8005a00:	4a0e      	ldr	r2, [pc, #56]	@ (8005a3c <LL_DMA_SetDataTransferDirection+0x4c>)
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	4413      	add	r3, r2
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	461a      	mov	r2, r3
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a14:	f023 0310 	bic.w	r3, r3, #16
 8005a18:	4908      	ldr	r1, [pc, #32]	@ (8005a3c <LL_DMA_SetDataTransferDirection+0x4c>)
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	440a      	add	r2, r1
 8005a1e:	7812      	ldrb	r2, [r2, #0]
 8005a20:	4611      	mov	r1, r2
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	440a      	add	r2, r1
 8005a26:	4611      	mov	r1, r2
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8005a2e:	bf00      	nop
 8005a30:	371c      	adds	r7, #28
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	080187fc 	.word	0x080187fc

08005a40 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 8005a50:	4a0d      	ldr	r2, [pc, #52]	@ (8005a88 <LL_DMA_SetMode+0x48>)
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	4413      	add	r3, r2
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	461a      	mov	r2, r3
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f023 0220 	bic.w	r2, r3, #32
 8005a64:	4908      	ldr	r1, [pc, #32]	@ (8005a88 <LL_DMA_SetMode+0x48>)
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	440b      	add	r3, r1
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	440b      	add	r3, r1
 8005a72:	4619      	mov	r1, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	600b      	str	r3, [r1, #0]
             Mode);
}
 8005a7a:	bf00      	nop
 8005a7c:	371c      	adds	r7, #28
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	080187fc 	.word	0x080187fc

08005a8c <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b087      	sub	sp, #28
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 8005a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8005ad4 <LL_DMA_SetPeriphIncMode+0x48>)
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8005ab0:	4908      	ldr	r1, [pc, #32]	@ (8005ad4 <LL_DMA_SetPeriphIncMode+0x48>)
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	440b      	add	r3, r1
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	4619      	mov	r1, r3
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	440b      	add	r3, r1
 8005abe:	4619      	mov	r1, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8005ac6:	bf00      	nop
 8005ac8:	371c      	adds	r7, #28
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	080187fc 	.word	0x080187fc

08005ad8 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b087      	sub	sp, #28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8005ae8:	4a0d      	ldr	r2, [pc, #52]	@ (8005b20 <LL_DMA_SetMemoryIncMode+0x48>)
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	4413      	add	r3, r2
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	461a      	mov	r2, r3
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	4413      	add	r3, r2
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005afc:	4908      	ldr	r1, [pc, #32]	@ (8005b20 <LL_DMA_SetMemoryIncMode+0x48>)
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	440b      	add	r3, r1
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	4619      	mov	r1, r3
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	440b      	add	r3, r1
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8005b12:	bf00      	nop
 8005b14:	371c      	adds	r7, #28
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	080187fc 	.word	0x080187fc

08005b24 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b087      	sub	sp, #28
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 8005b34:	4a0d      	ldr	r2, [pc, #52]	@ (8005b6c <LL_DMA_SetPeriphSize+0x48>)
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	4413      	add	r3, r2
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	4413      	add	r3, r2
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b48:	4908      	ldr	r1, [pc, #32]	@ (8005b6c <LL_DMA_SetPeriphSize+0x48>)
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	440b      	add	r3, r1
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	4619      	mov	r1, r3
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	440b      	add	r3, r1
 8005b56:	4619      	mov	r1, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8005b5e:	bf00      	nop
 8005b60:	371c      	adds	r7, #28
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	080187fc 	.word	0x080187fc

08005b70 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b087      	sub	sp, #28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 8005b80:	4a0d      	ldr	r2, [pc, #52]	@ (8005bb8 <LL_DMA_SetMemorySize+0x48>)
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	4413      	add	r3, r2
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	461a      	mov	r2, r3
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005b94:	4908      	ldr	r1, [pc, #32]	@ (8005bb8 <LL_DMA_SetMemorySize+0x48>)
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	440b      	add	r3, r1
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	440b      	add	r3, r1
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8005baa:	bf00      	nop
 8005bac:	371c      	adds	r7, #28
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	080187fc 	.word	0x080187fc

08005bbc <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b087      	sub	sp, #28
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 8005bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8005c04 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	4413      	add	r3, r2
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005be0:	4908      	ldr	r1, [pc, #32]	@ (8005c04 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	440b      	add	r3, r1
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	4619      	mov	r1, r3
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	440b      	add	r3, r1
 8005bee:	4619      	mov	r1, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	600b      	str	r3, [r1, #0]
             Priority);
}
 8005bf6:	bf00      	nop
 8005bf8:	371c      	adds	r7, #28
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	080187fc 	.word	0x080187fc

08005c08 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD1_TX
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b087      	sub	sp, #28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	0a9b      	lsrs	r3, r3, #10
 8005c18:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8005c1c:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
 8005c20:	00db      	lsls	r3, r3, #3
 8005c22:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	4413      	add	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005c30:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	4413      	add	r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005c46:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	601a      	str	r2, [r3, #0]
}
 8005c50:	bf00      	nop
 8005c52:	371c      	adds	r7, #28
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c62:	463b      	mov	r3, r7
 8005c64:	2200      	movs	r2, #0
 8005c66:	601a      	str	r2, [r3, #0]
 8005c68:	605a      	str	r2, [r3, #4]
 8005c6a:	609a      	str	r2, [r3, #8]
 8005c6c:	60da      	str	r2, [r3, #12]
 8005c6e:	611a      	str	r2, [r3, #16]
 8005c70:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8005c72:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005c76:	f7ff fea3 	bl	80059c0 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8005c7a:	2002      	movs	r0, #2
 8005c7c:	f7ff fe88 	bl	8005990 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB4   ------> UCPD1_CC2
  PB6   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8005c80:	2310      	movs	r3, #16
 8005c82:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8005c84:	2303      	movs	r3, #3
 8005c86:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c8c:	463b      	mov	r3, r7
 8005c8e:	4619      	mov	r1, r3
 8005c90:	4838      	ldr	r0, [pc, #224]	@ (8005d74 <MX_UCPD1_Init+0x118>)
 8005c92:	f009 fe05 	bl	800f8a0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8005c96:	2340      	movs	r3, #64	@ 0x40
 8005c98:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ca2:	463b      	mov	r3, r7
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	4833      	ldr	r0, [pc, #204]	@ (8005d74 <MX_UCPD1_Init+0x118>)
 8005ca8:	f009 fdfa 	bl	800f8a0 <LL_GPIO_Init>

  /* UCPD1 DMA Init */

  /* UCPD1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_UCPD1_RX);
 8005cac:	2272      	movs	r2, #114	@ 0x72
 8005cae:	2100      	movs	r1, #0
 8005cb0:	4831      	ldr	r0, [pc, #196]	@ (8005d78 <MX_UCPD1_Init+0x11c>)
 8005cb2:	f7ff ffa9 	bl	8005c08 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	2100      	movs	r1, #0
 8005cba:	482f      	ldr	r0, [pc, #188]	@ (8005d78 <MX_UCPD1_Init+0x11c>)
 8005cbc:	f7ff fe98 	bl	80059f0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	482c      	ldr	r0, [pc, #176]	@ (8005d78 <MX_UCPD1_Init+0x11c>)
 8005cc6:	f7ff ff79 	bl	8005bbc <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 8005cca:	2200      	movs	r2, #0
 8005ccc:	2100      	movs	r1, #0
 8005cce:	482a      	ldr	r0, [pc, #168]	@ (8005d78 <MX_UCPD1_Init+0x11c>)
 8005cd0:	f7ff feb6 	bl	8005a40 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	4827      	ldr	r0, [pc, #156]	@ (8005d78 <MX_UCPD1_Init+0x11c>)
 8005cda:	f7ff fed7 	bl	8005a8c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8005cde:	2280      	movs	r2, #128	@ 0x80
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	4825      	ldr	r0, [pc, #148]	@ (8005d78 <MX_UCPD1_Init+0x11c>)
 8005ce4:	f7ff fef8 	bl	8005ad8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 8005ce8:	2200      	movs	r2, #0
 8005cea:	2100      	movs	r1, #0
 8005cec:	4822      	ldr	r0, [pc, #136]	@ (8005d78 <MX_UCPD1_Init+0x11c>)
 8005cee:	f7ff ff19 	bl	8005b24 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	4820      	ldr	r0, [pc, #128]	@ (8005d78 <MX_UCPD1_Init+0x11c>)
 8005cf8:	f7ff ff3a 	bl	8005b70 <LL_DMA_SetMemorySize>

  /* UCPD1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_UCPD1_TX);
 8005cfc:	2273      	movs	r2, #115	@ 0x73
 8005cfe:	2101      	movs	r1, #1
 8005d00:	481d      	ldr	r0, [pc, #116]	@ (8005d78 <MX_UCPD1_Init+0x11c>)
 8005d02:	f7ff ff81 	bl	8005c08 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8005d06:	2210      	movs	r2, #16
 8005d08:	2101      	movs	r1, #1
 8005d0a:	481b      	ldr	r0, [pc, #108]	@ (8005d78 <MX_UCPD1_Init+0x11c>)
 8005d0c:	f7ff fe70 	bl	80059f0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 8005d10:	2200      	movs	r2, #0
 8005d12:	2101      	movs	r1, #1
 8005d14:	4818      	ldr	r0, [pc, #96]	@ (8005d78 <MX_UCPD1_Init+0x11c>)
 8005d16:	f7ff ff51 	bl	8005bbc <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	2101      	movs	r1, #1
 8005d1e:	4816      	ldr	r0, [pc, #88]	@ (8005d78 <MX_UCPD1_Init+0x11c>)
 8005d20:	f7ff fe8e 	bl	8005a40 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 8005d24:	2200      	movs	r2, #0
 8005d26:	2101      	movs	r1, #1
 8005d28:	4813      	ldr	r0, [pc, #76]	@ (8005d78 <MX_UCPD1_Init+0x11c>)
 8005d2a:	f7ff feaf 	bl	8005a8c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 8005d2e:	2280      	movs	r2, #128	@ 0x80
 8005d30:	2101      	movs	r1, #1
 8005d32:	4811      	ldr	r0, [pc, #68]	@ (8005d78 <MX_UCPD1_Init+0x11c>)
 8005d34:	f7ff fed0 	bl	8005ad8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 8005d38:	2200      	movs	r2, #0
 8005d3a:	2101      	movs	r1, #1
 8005d3c:	480e      	ldr	r0, [pc, #56]	@ (8005d78 <MX_UCPD1_Init+0x11c>)
 8005d3e:	f7ff fef1 	bl	8005b24 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 8005d42:	2200      	movs	r2, #0
 8005d44:	2101      	movs	r1, #1
 8005d46:	480c      	ldr	r0, [pc, #48]	@ (8005d78 <MX_UCPD1_Init+0x11c>)
 8005d48:	f7ff ff12 	bl	8005b70 <LL_DMA_SetMemorySize>

  /* UCPD1 interrupt Init */
  NVIC_SetPriority(UCPD1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8005d4c:	f7ff fd96 	bl	800587c <__NVIC_GetPriorityGrouping>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2200      	movs	r2, #0
 8005d54:	2105      	movs	r1, #5
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7ff fde6 	bl	8005928 <NVIC_EncodePriority>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	4619      	mov	r1, r3
 8005d60:	203f      	movs	r0, #63	@ 0x3f
 8005d62:	f7ff fdb7 	bl	80058d4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UCPD1_IRQn);
 8005d66:	203f      	movs	r0, #63	@ 0x3f
 8005d68:	f7ff fd96 	bl	8005898 <__NVIC_EnableIRQ>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8005d6c:	bf00      	nop
 8005d6e:	3718      	adds	r7, #24
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	48000400 	.word	0x48000400
 8005d78:	40020000 	.word	0x40020000

08005d7c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005d80:	4b24      	ldr	r3, [pc, #144]	@ (8005e14 <MX_USART1_UART_Init+0x98>)
 8005d82:	4a25      	ldr	r2, [pc, #148]	@ (8005e18 <MX_USART1_UART_Init+0x9c>)
 8005d84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005d86:	4b23      	ldr	r3, [pc, #140]	@ (8005e14 <MX_USART1_UART_Init+0x98>)
 8005d88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005d8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005d8e:	4b21      	ldr	r3, [pc, #132]	@ (8005e14 <MX_USART1_UART_Init+0x98>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005d94:	4b1f      	ldr	r3, [pc, #124]	@ (8005e14 <MX_USART1_UART_Init+0x98>)
 8005d96:	2200      	movs	r2, #0
 8005d98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8005e14 <MX_USART1_UART_Init+0x98>)
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005da0:	4b1c      	ldr	r3, [pc, #112]	@ (8005e14 <MX_USART1_UART_Init+0x98>)
 8005da2:	220c      	movs	r2, #12
 8005da4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005da6:	4b1b      	ldr	r3, [pc, #108]	@ (8005e14 <MX_USART1_UART_Init+0x98>)
 8005da8:	2200      	movs	r2, #0
 8005daa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005dac:	4b19      	ldr	r3, [pc, #100]	@ (8005e14 <MX_USART1_UART_Init+0x98>)
 8005dae:	2200      	movs	r2, #0
 8005db0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005db2:	4b18      	ldr	r3, [pc, #96]	@ (8005e14 <MX_USART1_UART_Init+0x98>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005db8:	4b16      	ldr	r3, [pc, #88]	@ (8005e14 <MX_USART1_UART_Init+0x98>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8005dbe:	4b15      	ldr	r3, [pc, #84]	@ (8005e14 <MX_USART1_UART_Init+0x98>)
 8005dc0:	2208      	movs	r2, #8
 8005dc2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8005dc4:	4b13      	ldr	r3, [pc, #76]	@ (8005e14 <MX_USART1_UART_Init+0x98>)
 8005dc6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005dca:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005dcc:	4811      	ldr	r0, [pc, #68]	@ (8005e14 <MX_USART1_UART_Init+0x98>)
 8005dce:	f007 f9e7 	bl	800d1a0 <HAL_UART_Init>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d001      	beq.n	8005ddc <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 8005dd8:	f7ff f8a6 	bl	8004f28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005ddc:	2100      	movs	r1, #0
 8005dde:	480d      	ldr	r0, [pc, #52]	@ (8005e14 <MX_USART1_UART_Init+0x98>)
 8005de0:	f009 fa31 	bl	800f246 <HAL_UARTEx_SetTxFifoThreshold>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d001      	beq.n	8005dee <MX_USART1_UART_Init+0x72>
  {
    Error_Handler();
 8005dea:	f7ff f89d 	bl	8004f28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005dee:	2100      	movs	r1, #0
 8005df0:	4808      	ldr	r0, [pc, #32]	@ (8005e14 <MX_USART1_UART_Init+0x98>)
 8005df2:	f009 fa66 	bl	800f2c2 <HAL_UARTEx_SetRxFifoThreshold>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d001      	beq.n	8005e00 <MX_USART1_UART_Init+0x84>
  {
    Error_Handler();
 8005dfc:	f7ff f894 	bl	8004f28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005e00:	4804      	ldr	r0, [pc, #16]	@ (8005e14 <MX_USART1_UART_Init+0x98>)
 8005e02:	f009 f9e7 	bl	800f1d4 <HAL_UARTEx_DisableFifoMode>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d001      	beq.n	8005e10 <MX_USART1_UART_Init+0x94>
  {
    Error_Handler();
 8005e0c:	f7ff f88c 	bl	8004f28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005e10:	bf00      	nop
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	200008ec 	.word	0x200008ec
 8005e18:	40013800 	.word	0x40013800

08005e1c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005e20:	4b22      	ldr	r3, [pc, #136]	@ (8005eac <MX_USART2_UART_Init+0x90>)
 8005e22:	4a23      	ldr	r2, [pc, #140]	@ (8005eb0 <MX_USART2_UART_Init+0x94>)
 8005e24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005e26:	4b21      	ldr	r3, [pc, #132]	@ (8005eac <MX_USART2_UART_Init+0x90>)
 8005e28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005e2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005e2e:	4b1f      	ldr	r3, [pc, #124]	@ (8005eac <MX_USART2_UART_Init+0x90>)
 8005e30:	2200      	movs	r2, #0
 8005e32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005e34:	4b1d      	ldr	r3, [pc, #116]	@ (8005eac <MX_USART2_UART_Init+0x90>)
 8005e36:	2200      	movs	r2, #0
 8005e38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005e3a:	4b1c      	ldr	r3, [pc, #112]	@ (8005eac <MX_USART2_UART_Init+0x90>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005e40:	4b1a      	ldr	r3, [pc, #104]	@ (8005eac <MX_USART2_UART_Init+0x90>)
 8005e42:	220c      	movs	r2, #12
 8005e44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005e46:	4b19      	ldr	r3, [pc, #100]	@ (8005eac <MX_USART2_UART_Init+0x90>)
 8005e48:	2200      	movs	r2, #0
 8005e4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005e4c:	4b17      	ldr	r3, [pc, #92]	@ (8005eac <MX_USART2_UART_Init+0x90>)
 8005e4e:	2200      	movs	r2, #0
 8005e50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005e52:	4b16      	ldr	r3, [pc, #88]	@ (8005eac <MX_USART2_UART_Init+0x90>)
 8005e54:	2200      	movs	r2, #0
 8005e56:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005e58:	4b14      	ldr	r3, [pc, #80]	@ (8005eac <MX_USART2_UART_Init+0x90>)
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005e5e:	4b13      	ldr	r3, [pc, #76]	@ (8005eac <MX_USART2_UART_Init+0x90>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005e64:	4811      	ldr	r0, [pc, #68]	@ (8005eac <MX_USART2_UART_Init+0x90>)
 8005e66:	f007 f99b 	bl	800d1a0 <HAL_UART_Init>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8005e70:	f7ff f85a 	bl	8004f28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005e74:	2100      	movs	r1, #0
 8005e76:	480d      	ldr	r0, [pc, #52]	@ (8005eac <MX_USART2_UART_Init+0x90>)
 8005e78:	f009 f9e5 	bl	800f246 <HAL_UARTEx_SetTxFifoThreshold>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d001      	beq.n	8005e86 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8005e82:	f7ff f851 	bl	8004f28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005e86:	2100      	movs	r1, #0
 8005e88:	4808      	ldr	r0, [pc, #32]	@ (8005eac <MX_USART2_UART_Init+0x90>)
 8005e8a:	f009 fa1a 	bl	800f2c2 <HAL_UARTEx_SetRxFifoThreshold>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d001      	beq.n	8005e98 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8005e94:	f7ff f848 	bl	8004f28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005e98:	4804      	ldr	r0, [pc, #16]	@ (8005eac <MX_USART2_UART_Init+0x90>)
 8005e9a:	f009 f99b 	bl	800f1d4 <HAL_UARTEx_DisableFifoMode>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d001      	beq.n	8005ea8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8005ea4:	f7ff f840 	bl	8004f28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005ea8:	bf00      	nop
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	20000980 	.word	0x20000980
 8005eb0:	40004400 	.word	0x40004400

08005eb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b09e      	sub	sp, #120	@ 0x78
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ebc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	601a      	str	r2, [r3, #0]
 8005ec4:	605a      	str	r2, [r3, #4]
 8005ec6:	609a      	str	r2, [r3, #8]
 8005ec8:	60da      	str	r2, [r3, #12]
 8005eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005ecc:	f107 0320 	add.w	r3, r7, #32
 8005ed0:	2244      	movs	r2, #68	@ 0x44
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f010 ffa5 	bl	8016e24 <memset>
  if(uartHandle->Instance==USART1)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a4f      	ldr	r2, [pc, #316]	@ (800601c <HAL_UART_MspInit+0x168>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d15a      	bne.n	8005f9a <HAL_UART_MspInit+0xe6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005eec:	f107 0320 	add.w	r3, r7, #32
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f005 f935 	bl	800b160 <HAL_RCCEx_PeriphCLKConfig>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d001      	beq.n	8005f00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005efc:	f7ff f814 	bl	8004f28 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005f00:	4b47      	ldr	r3, [pc, #284]	@ (8006020 <HAL_UART_MspInit+0x16c>)
 8005f02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f04:	4a46      	ldr	r2, [pc, #280]	@ (8006020 <HAL_UART_MspInit+0x16c>)
 8005f06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005f0a:	6613      	str	r3, [r2, #96]	@ 0x60
 8005f0c:	4b44      	ldr	r3, [pc, #272]	@ (8006020 <HAL_UART_MspInit+0x16c>)
 8005f0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f14:	61fb      	str	r3, [r7, #28]
 8005f16:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f18:	4b41      	ldr	r3, [pc, #260]	@ (8006020 <HAL_UART_MspInit+0x16c>)
 8005f1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f1c:	4a40      	ldr	r2, [pc, #256]	@ (8006020 <HAL_UART_MspInit+0x16c>)
 8005f1e:	f043 0304 	orr.w	r3, r3, #4
 8005f22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005f24:	4b3e      	ldr	r3, [pc, #248]	@ (8006020 <HAL_UART_MspInit+0x16c>)
 8005f26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f28:	f003 0304 	and.w	r3, r3, #4
 8005f2c:	61bb      	str	r3, [r7, #24]
 8005f2e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f30:	4b3b      	ldr	r3, [pc, #236]	@ (8006020 <HAL_UART_MspInit+0x16c>)
 8005f32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f34:	4a3a      	ldr	r2, [pc, #232]	@ (8006020 <HAL_UART_MspInit+0x16c>)
 8005f36:	f043 0302 	orr.w	r3, r3, #2
 8005f3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005f3c:	4b38      	ldr	r3, [pc, #224]	@ (8006020 <HAL_UART_MspInit+0x16c>)
 8005f3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	617b      	str	r3, [r7, #20]
 8005f46:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8005f48:	2310      	movs	r3, #16
 8005f4a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f50:	2300      	movs	r3, #0
 8005f52:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f54:	2300      	movs	r3, #0
 8005f56:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005f58:	2307      	movs	r3, #7
 8005f5a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8005f5c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005f60:	4619      	mov	r1, r3
 8005f62:	4830      	ldr	r0, [pc, #192]	@ (8006024 <HAL_UART_MspInit+0x170>)
 8005f64:	f003 fb6c 	bl	8009640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8005f68:	2380      	movs	r3, #128	@ 0x80
 8005f6a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f70:	2300      	movs	r3, #0
 8005f72:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f74:	2300      	movs	r3, #0
 8005f76:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005f78:	2307      	movs	r3, #7
 8005f7a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8005f7c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005f80:	4619      	mov	r1, r3
 8005f82:	4829      	ldr	r0, [pc, #164]	@ (8006028 <HAL_UART_MspInit+0x174>)
 8005f84:	f003 fb5c 	bl	8009640 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005f88:	2200      	movs	r2, #0
 8005f8a:	2105      	movs	r1, #5
 8005f8c:	2025      	movs	r0, #37	@ 0x25
 8005f8e:	f002 fe23 	bl	8008bd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005f92:	2025      	movs	r0, #37	@ 0x25
 8005f94:	f002 fe3a 	bl	8008c0c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005f98:	e03b      	b.n	8006012 <HAL_UART_MspInit+0x15e>
  else if(uartHandle->Instance==USART2)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a23      	ldr	r2, [pc, #140]	@ (800602c <HAL_UART_MspInit+0x178>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d136      	bne.n	8006012 <HAL_UART_MspInit+0x15e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005fac:	f107 0320 	add.w	r3, r7, #32
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f005 f8d5 	bl	800b160 <HAL_RCCEx_PeriphCLKConfig>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d001      	beq.n	8005fc0 <HAL_UART_MspInit+0x10c>
      Error_Handler();
 8005fbc:	f7fe ffb4 	bl	8004f28 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005fc0:	4b17      	ldr	r3, [pc, #92]	@ (8006020 <HAL_UART_MspInit+0x16c>)
 8005fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fc4:	4a16      	ldr	r2, [pc, #88]	@ (8006020 <HAL_UART_MspInit+0x16c>)
 8005fc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fca:	6593      	str	r3, [r2, #88]	@ 0x58
 8005fcc:	4b14      	ldr	r3, [pc, #80]	@ (8006020 <HAL_UART_MspInit+0x16c>)
 8005fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fd4:	613b      	str	r3, [r7, #16]
 8005fd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fd8:	4b11      	ldr	r3, [pc, #68]	@ (8006020 <HAL_UART_MspInit+0x16c>)
 8005fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fdc:	4a10      	ldr	r2, [pc, #64]	@ (8006020 <HAL_UART_MspInit+0x16c>)
 8005fde:	f043 0301 	orr.w	r3, r3, #1
 8005fe2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8006020 <HAL_UART_MspInit+0x16c>)
 8005fe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	60fb      	str	r3, [r7, #12]
 8005fee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LIDAR_RXnTX_STM_Pin|LIDAR_TXnRX_STM_Pin;
 8005ff0:	230c      	movs	r3, #12
 8005ff2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006000:	2307      	movs	r3, #7
 8006002:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006004:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8006008:	4619      	mov	r1, r3
 800600a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800600e:	f003 fb17 	bl	8009640 <HAL_GPIO_Init>
}
 8006012:	bf00      	nop
 8006014:	3778      	adds	r7, #120	@ 0x78
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	40013800 	.word	0x40013800
 8006020:	40021000 	.word	0x40021000
 8006024:	48000800 	.word	0x48000800
 8006028:	48000400 	.word	0x48000400
 800602c:	40004400 	.word	0x40004400

08006030 <ADXL343_init>:

XYZ_t accXYZ;
XYZ_t vitXYZ;
XYZ_t posXYZ;

void ADXL343_init(void){
 8006030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006034:	b08c      	sub	sp, #48	@ 0x30
 8006036:	af00      	add	r7, sp, #0
	debug(INFORMATION,"ADXL343 - INIT");
 8006038:	490f      	ldr	r1, [pc, #60]	@ (8006078 <ADXL343_init+0x48>)
 800603a:	4810      	ldr	r0, [pc, #64]	@ (800607c <ADXL343_init+0x4c>)
 800603c:	f010 fc16 	bl	801686c <debug>
	uint8_t ret=0;
 8006040:	2300      	movs	r3, #0
 8006042:	743b      	strb	r3, [r7, #16]
	ADXL343_ReadRegister(0x00, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 8006044:	f107 0310 	add.w	r3, r7, #16
 8006048:	2201      	movs	r2, #1
 800604a:	4619      	mov	r1, r3
 800604c:	2000      	movs	r0, #0
 800604e:	f000 fb07 	bl	8006660 <ADXL343_ReadRegister>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d003      	beq.n	8006060 <ADXL343_init+0x30>
 8006058:	4909      	ldr	r1, [pc, #36]	@ (8006080 <ADXL343_init+0x50>)
 800605a:	480a      	ldr	r0, [pc, #40]	@ (8006084 <ADXL343_init+0x54>)
 800605c:	f010 fc06 	bl	801686c <debug>
	printf("READ - deviceID: 0x%02X\r\n",ret);
 8006060:	7c3b      	ldrb	r3, [r7, #16]
 8006062:	4619      	mov	r1, r3
 8006064:	4808      	ldr	r0, [pc, #32]	@ (8006088 <ADXL343_init+0x58>)
 8006066:	f010 fe11 	bl	8016c8c <iprintf>

	uint8_t startReg = 0x1D;
 800606a:	231d      	movs	r3, #29
 800606c:	76fb      	strb	r3, [r7, #27]
	uint8_t endReg = 0x39;
 800606e:	2339      	movs	r3, #57	@ 0x39
 8006070:	76bb      	strb	r3, [r7, #26]
	for (int i = 1; i <= endReg-startReg+1; i++) {
 8006072:	2301      	movs	r3, #1
 8006074:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006076:	e027      	b.n	80060c8 <ADXL343_init+0x98>
 8006078:	08017d78 	.word	0x08017d78
 800607c:	08017d88 	.word	0x08017d88
 8006080:	08017d9c 	.word	0x08017d9c
 8006084:	08017db0 	.word	0x08017db0
 8006088:	08017dbc 	.word	0x08017dbc
		uint8_t ret=0;
 800608c:	2300      	movs	r3, #0
 800608e:	73fb      	strb	r3, [r7, #15]
		ADXL343_ReadRegister(IMURegister[i].reg, &ret,1);
 8006090:	4aae      	ldr	r2, [pc, #696]	@ (800634c <ADXL343_init+0x31c>)
 8006092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006094:	00db      	lsls	r3, r3, #3
 8006096:	4413      	add	r3, r2
 8006098:	791b      	ldrb	r3, [r3, #4]
 800609a:	f107 010f 	add.w	r1, r7, #15
 800609e:	2201      	movs	r2, #1
 80060a0:	4618      	mov	r0, r3
 80060a2:	f000 fadd 	bl	8006660 <ADXL343_ReadRegister>
		printf("READ - 0x%02X (%s): 0x%02X\r\n", IMURegister[i].reg,IMURegister[i].name, ret);
 80060a6:	4aa9      	ldr	r2, [pc, #676]	@ (800634c <ADXL343_init+0x31c>)
 80060a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060aa:	00db      	lsls	r3, r3, #3
 80060ac:	4413      	add	r3, r2
 80060ae:	791b      	ldrb	r3, [r3, #4]
 80060b0:	4619      	mov	r1, r3
 80060b2:	4aa6      	ldr	r2, [pc, #664]	@ (800634c <ADXL343_init+0x31c>)
 80060b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060b6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80060ba:	7bfb      	ldrb	r3, [r7, #15]
 80060bc:	48a4      	ldr	r0, [pc, #656]	@ (8006350 <ADXL343_init+0x320>)
 80060be:	f010 fde5 	bl	8016c8c <iprintf>
	for (int i = 1; i <= endReg-startReg+1; i++) {
 80060c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060c4:	3301      	adds	r3, #1
 80060c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060c8:	7eba      	ldrb	r2, [r7, #26]
 80060ca:	7efb      	ldrb	r3, [r7, #27]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	3301      	adds	r3, #1
 80060d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060d2:	429a      	cmp	r2, r3
 80060d4:	ddda      	ble.n	800608c <ADXL343_init+0x5c>
	}

	/*	0x1D-TRESHS_TAP
	 *	0x10= 1g
	 */
	ADXL343_WriteRegister(0x1D, 0x20)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 80060d6:	2120      	movs	r1, #32
 80060d8:	201d      	movs	r0, #29
 80060da:	f000 faa3 	bl	8006624 <ADXL343_WriteRegister>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d003      	beq.n	80060ec <ADXL343_init+0xbc>
 80060e4:	499b      	ldr	r1, [pc, #620]	@ (8006354 <ADXL343_init+0x324>)
 80060e6:	489c      	ldr	r0, [pc, #624]	@ (8006358 <ADXL343_init+0x328>)
 80060e8:	f010 fbc0 	bl	801686c <debug>
	ADXL343_ReadRegister(0x1D, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 80060ec:	f107 0310 	add.w	r3, r7, #16
 80060f0:	2201      	movs	r2, #1
 80060f2:	4619      	mov	r1, r3
 80060f4:	201d      	movs	r0, #29
 80060f6:	f000 fab3 	bl	8006660 <ADXL343_ReadRegister>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d003      	beq.n	8006108 <ADXL343_init+0xd8>
 8006100:	4996      	ldr	r1, [pc, #600]	@ (800635c <ADXL343_init+0x32c>)
 8006102:	4895      	ldr	r0, [pc, #596]	@ (8006358 <ADXL343_init+0x328>)
 8006104:	f010 fbb2 	bl	801686c <debug>
	printf("WRITE/READ - TRESHS_TAP: 0x%02X\r\n",ret);
 8006108:	7c3b      	ldrb	r3, [r7, #16]
 800610a:	4619      	mov	r1, r3
 800610c:	4894      	ldr	r0, [pc, #592]	@ (8006360 <ADXL343_init+0x330>)
 800610e:	f010 fdbd 	bl	8016c8c <iprintf>
	/* 	0x21-DUR
	 *	0x08 : 5ms
	 */
	ADXL343_WriteRegister(0x21, 0x20)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 8006112:	2120      	movs	r1, #32
 8006114:	2021      	movs	r0, #33	@ 0x21
 8006116:	f000 fa85 	bl	8006624 <ADXL343_WriteRegister>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d003      	beq.n	8006128 <ADXL343_init+0xf8>
 8006120:	498c      	ldr	r1, [pc, #560]	@ (8006354 <ADXL343_init+0x324>)
 8006122:	488d      	ldr	r0, [pc, #564]	@ (8006358 <ADXL343_init+0x328>)
 8006124:	f010 fba2 	bl	801686c <debug>
	ADXL343_ReadRegister(0x21, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 8006128:	f107 0310 	add.w	r3, r7, #16
 800612c:	2201      	movs	r2, #1
 800612e:	4619      	mov	r1, r3
 8006130:	2021      	movs	r0, #33	@ 0x21
 8006132:	f000 fa95 	bl	8006660 <ADXL343_ReadRegister>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d003      	beq.n	8006144 <ADXL343_init+0x114>
 800613c:	4987      	ldr	r1, [pc, #540]	@ (800635c <ADXL343_init+0x32c>)
 800613e:	4886      	ldr	r0, [pc, #536]	@ (8006358 <ADXL343_init+0x328>)
 8006140:	f010 fb94 	bl	801686c <debug>
	printf("WRITE/READ - DUR: 0x%02X\r\n",ret);
 8006144:	7c3b      	ldrb	r3, [r7, #16]
 8006146:	4619      	mov	r1, r3
 8006148:	4886      	ldr	r0, [pc, #536]	@ (8006364 <ADXL343_init+0x334>)
 800614a:	f010 fd9f 	bl	8016c8c <iprintf>
	/* 	0x22 - LATENT
	 *	0x50 : 100ms
	 */
	ADXL343_WriteRegister(0x22, 0xA0)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 800614e:	21a0      	movs	r1, #160	@ 0xa0
 8006150:	2022      	movs	r0, #34	@ 0x22
 8006152:	f000 fa67 	bl	8006624 <ADXL343_WriteRegister>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d003      	beq.n	8006164 <ADXL343_init+0x134>
 800615c:	497d      	ldr	r1, [pc, #500]	@ (8006354 <ADXL343_init+0x324>)
 800615e:	487e      	ldr	r0, [pc, #504]	@ (8006358 <ADXL343_init+0x328>)
 8006160:	f010 fb84 	bl	801686c <debug>
	ADXL343_ReadRegister(0x22, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 8006164:	f107 0310 	add.w	r3, r7, #16
 8006168:	2201      	movs	r2, #1
 800616a:	4619      	mov	r1, r3
 800616c:	2022      	movs	r0, #34	@ 0x22
 800616e:	f000 fa77 	bl	8006660 <ADXL343_ReadRegister>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d003      	beq.n	8006180 <ADXL343_init+0x150>
 8006178:	4978      	ldr	r1, [pc, #480]	@ (800635c <ADXL343_init+0x32c>)
 800617a:	4877      	ldr	r0, [pc, #476]	@ (8006358 <ADXL343_init+0x328>)
 800617c:	f010 fb76 	bl	801686c <debug>
	printf("WRITE/READ - DUR: 0x%02X\r\n",ret);
 8006180:	7c3b      	ldrb	r3, [r7, #16]
 8006182:	4619      	mov	r1, r3
 8006184:	4877      	ldr	r0, [pc, #476]	@ (8006364 <ADXL343_init+0x334>)
 8006186:	f010 fd81 	bl	8016c8c <iprintf>
	 *	D3		|SUPRESS
	 * 	D2		|TAP_X
	 * 	D1		|TAP_Y
	 * 	D0		|TAP_Z
	 */
	ADXL343_WriteRegister(0x2A, 0b110)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 800618a:	2106      	movs	r1, #6
 800618c:	202a      	movs	r0, #42	@ 0x2a
 800618e:	f000 fa49 	bl	8006624 <ADXL343_WriteRegister>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d003      	beq.n	80061a0 <ADXL343_init+0x170>
 8006198:	496e      	ldr	r1, [pc, #440]	@ (8006354 <ADXL343_init+0x324>)
 800619a:	486f      	ldr	r0, [pc, #444]	@ (8006358 <ADXL343_init+0x328>)
 800619c:	f010 fb66 	bl	801686c <debug>
	ADXL343_ReadRegister(0x2A, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 80061a0:	f107 0310 	add.w	r3, r7, #16
 80061a4:	2201      	movs	r2, #1
 80061a6:	4619      	mov	r1, r3
 80061a8:	202a      	movs	r0, #42	@ 0x2a
 80061aa:	f000 fa59 	bl	8006660 <ADXL343_ReadRegister>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d003      	beq.n	80061bc <ADXL343_init+0x18c>
 80061b4:	4969      	ldr	r1, [pc, #420]	@ (800635c <ADXL343_init+0x32c>)
 80061b6:	4868      	ldr	r0, [pc, #416]	@ (8006358 <ADXL343_init+0x328>)
 80061b8:	f010 fb58 	bl	801686c <debug>
	printf("WRITE/READ - TAP_AXES: 0x%02X\r\n",ret);
 80061bc:	7c3b      	ldrb	r3, [r7, #16]
 80061be:	4619      	mov	r1, r3
 80061c0:	4869      	ldr	r0, [pc, #420]	@ (8006368 <ADXL343_init+0x338>)
 80061c2:	f010 fd63 	bl	8016c8c <iprintf>
	/*	0x2E-INT_ENABLE
	 * 	D6 		| SINGLE_TAP
	 */
	ADXL343_WriteRegister(0x2E, 0b1<<6)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 80061c6:	2140      	movs	r1, #64	@ 0x40
 80061c8:	202e      	movs	r0, #46	@ 0x2e
 80061ca:	f000 fa2b 	bl	8006624 <ADXL343_WriteRegister>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d003      	beq.n	80061dc <ADXL343_init+0x1ac>
 80061d4:	495f      	ldr	r1, [pc, #380]	@ (8006354 <ADXL343_init+0x324>)
 80061d6:	4860      	ldr	r0, [pc, #384]	@ (8006358 <ADXL343_init+0x328>)
 80061d8:	f010 fb48 	bl	801686c <debug>
	ADXL343_ReadRegister(0x2E, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 80061dc:	f107 0310 	add.w	r3, r7, #16
 80061e0:	2201      	movs	r2, #1
 80061e2:	4619      	mov	r1, r3
 80061e4:	202e      	movs	r0, #46	@ 0x2e
 80061e6:	f000 fa3b 	bl	8006660 <ADXL343_ReadRegister>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d003      	beq.n	80061f8 <ADXL343_init+0x1c8>
 80061f0:	495a      	ldr	r1, [pc, #360]	@ (800635c <ADXL343_init+0x32c>)
 80061f2:	4859      	ldr	r0, [pc, #356]	@ (8006358 <ADXL343_init+0x328>)
 80061f4:	f010 fb3a 	bl	801686c <debug>
	printf("WRITE/READ - INT_ENABLE: 0x%02X\r\n",ret);
 80061f8:	7c3b      	ldrb	r3, [r7, #16]
 80061fa:	4619      	mov	r1, r3
 80061fc:	485b      	ldr	r0, [pc, #364]	@ (800636c <ADXL343_init+0x33c>)
 80061fe:	f010 fd45 	bl	8016c8c <iprintf>
	/*	0x2F-INT_MAP
	 * 	D6 		| SINGLE_TAP =1 : vers INT2
	 */
	ADXL343_WriteRegister(0x2F, 0b1<<6)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 8006202:	2140      	movs	r1, #64	@ 0x40
 8006204:	202f      	movs	r0, #47	@ 0x2f
 8006206:	f000 fa0d 	bl	8006624 <ADXL343_WriteRegister>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d003      	beq.n	8006218 <ADXL343_init+0x1e8>
 8006210:	4950      	ldr	r1, [pc, #320]	@ (8006354 <ADXL343_init+0x324>)
 8006212:	4851      	ldr	r0, [pc, #324]	@ (8006358 <ADXL343_init+0x328>)
 8006214:	f010 fb2a 	bl	801686c <debug>
	ADXL343_ReadRegister(0x2F, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 8006218:	f107 0310 	add.w	r3, r7, #16
 800621c:	2201      	movs	r2, #1
 800621e:	4619      	mov	r1, r3
 8006220:	202f      	movs	r0, #47	@ 0x2f
 8006222:	f000 fa1d 	bl	8006660 <ADXL343_ReadRegister>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d003      	beq.n	8006234 <ADXL343_init+0x204>
 800622c:	494b      	ldr	r1, [pc, #300]	@ (800635c <ADXL343_init+0x32c>)
 800622e:	484a      	ldr	r0, [pc, #296]	@ (8006358 <ADXL343_init+0x328>)
 8006230:	f010 fb1c 	bl	801686c <debug>
	printf("WRITE/READ - INT_ENABLE: 0x%02X\r\n",ret);
 8006234:	7c3b      	ldrb	r3, [r7, #16]
 8006236:	4619      	mov	r1, r3
 8006238:	484c      	ldr	r0, [pc, #304]	@ (800636c <ADXL343_init+0x33c>)
 800623a:	f010 fd27 	bl	8016c8c <iprintf>
	printf("WRITE/READ - INT_ENABLE: 0x%02X\r\n",ret);
 800623e:	7c3b      	ldrb	r3, [r7, #16]
 8006240:	4619      	mov	r1, r3
 8006242:	484a      	ldr	r0, [pc, #296]	@ (800636c <ADXL343_init+0x33c>)
 8006244:	f010 fd22 	bl	8016c8c <iprintf>
	 * 	D3		| INACT ac/dc
	 * 	D2		| INACT_X enable
	 * 	D1		| INACT_Y enable
	 * 	D0		| INACT_Z enable
	 */
	ADXL343_WriteRegister(0x27, 0b11100000)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 8006248:	21e0      	movs	r1, #224	@ 0xe0
 800624a:	2027      	movs	r0, #39	@ 0x27
 800624c:	f000 f9ea 	bl	8006624 <ADXL343_WriteRegister>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d003      	beq.n	800625e <ADXL343_init+0x22e>
 8006256:	493f      	ldr	r1, [pc, #252]	@ (8006354 <ADXL343_init+0x324>)
 8006258:	483f      	ldr	r0, [pc, #252]	@ (8006358 <ADXL343_init+0x328>)
 800625a:	f010 fb07 	bl	801686c <debug>
	ADXL343_ReadRegister(0x27, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 800625e:	f107 0310 	add.w	r3, r7, #16
 8006262:	2201      	movs	r2, #1
 8006264:	4619      	mov	r1, r3
 8006266:	2027      	movs	r0, #39	@ 0x27
 8006268:	f000 f9fa 	bl	8006660 <ADXL343_ReadRegister>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d003      	beq.n	800627a <ADXL343_init+0x24a>
 8006272:	493a      	ldr	r1, [pc, #232]	@ (800635c <ADXL343_init+0x32c>)
 8006274:	4838      	ldr	r0, [pc, #224]	@ (8006358 <ADXL343_init+0x328>)
 8006276:	f010 faf9 	bl	801686c <debug>
	printf("WRITE/READ - ACT_INACT_CTL: 0x%02X\r\n",ret);
 800627a:	7c3b      	ldrb	r3, [r7, #16]
 800627c:	4619      	mov	r1, r3
 800627e:	483c      	ldr	r0, [pc, #240]	@ (8006370 <ADXL343_init+0x340>)
 8006280:	f010 fd04 	bl	8016c8c <iprintf>

	/*	0x2D—POWER_CTL
	 * 	D3		| MEASURE = 1
	 */
	ADXL343_WriteRegister(0x2D, 1<<3)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 8006284:	2108      	movs	r1, #8
 8006286:	202d      	movs	r0, #45	@ 0x2d
 8006288:	f000 f9cc 	bl	8006624 <ADXL343_WriteRegister>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d003      	beq.n	800629a <ADXL343_init+0x26a>
 8006292:	4930      	ldr	r1, [pc, #192]	@ (8006354 <ADXL343_init+0x324>)
 8006294:	4830      	ldr	r0, [pc, #192]	@ (8006358 <ADXL343_init+0x328>)
 8006296:	f010 fae9 	bl	801686c <debug>
	ADXL343_ReadRegister(0x2D, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 800629a:	f107 0310 	add.w	r3, r7, #16
 800629e:	2201      	movs	r2, #1
 80062a0:	4619      	mov	r1, r3
 80062a2:	202d      	movs	r0, #45	@ 0x2d
 80062a4:	f000 f9dc 	bl	8006660 <ADXL343_ReadRegister>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <ADXL343_init+0x286>
 80062ae:	492b      	ldr	r1, [pc, #172]	@ (800635c <ADXL343_init+0x32c>)
 80062b0:	4829      	ldr	r0, [pc, #164]	@ (8006358 <ADXL343_init+0x328>)
 80062b2:	f010 fadb 	bl	801686c <debug>
	printf("WRITE/READ - POWER_CTL: 0x%02X\r\n",ret);
 80062b6:	7c3b      	ldrb	r3, [r7, #16]
 80062b8:	4619      	mov	r1, r3
 80062ba:	482e      	ldr	r0, [pc, #184]	@ (8006374 <ADXL343_init+0x344>)
 80062bc:	f010 fce6 	bl	8016c8c <iprintf>
	 * 	D5 		| INT_INVERT = 0 => Inverse le high and low des INT
	 * 	D3 		| FULL_RES = 1 => Max resolution
	 * 	D2 		| JUSTIFY = 0 => LSB
	 * 	D1-D0 	| RANGE = 00 =>  ±2g
	 */
	ADXL343_WriteRegister(0x31, 0<<7|1<<6|1<<3|0b00)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 80062c0:	2148      	movs	r1, #72	@ 0x48
 80062c2:	2031      	movs	r0, #49	@ 0x31
 80062c4:	f000 f9ae 	bl	8006624 <ADXL343_WriteRegister>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d003      	beq.n	80062d6 <ADXL343_init+0x2a6>
 80062ce:	4921      	ldr	r1, [pc, #132]	@ (8006354 <ADXL343_init+0x324>)
 80062d0:	4821      	ldr	r0, [pc, #132]	@ (8006358 <ADXL343_init+0x328>)
 80062d2:	f010 facb 	bl	801686c <debug>
	ADXL343_ReadRegister(0x31, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 80062d6:	f107 0310 	add.w	r3, r7, #16
 80062da:	2201      	movs	r2, #1
 80062dc:	4619      	mov	r1, r3
 80062de:	2031      	movs	r0, #49	@ 0x31
 80062e0:	f000 f9be 	bl	8006660 <ADXL343_ReadRegister>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d003      	beq.n	80062f2 <ADXL343_init+0x2c2>
 80062ea:	491c      	ldr	r1, [pc, #112]	@ (800635c <ADXL343_init+0x32c>)
 80062ec:	481a      	ldr	r0, [pc, #104]	@ (8006358 <ADXL343_init+0x328>)
 80062ee:	f010 fabd 	bl	801686c <debug>
	printf("WRITE/READ - dataFormat: 0x%02X\r\n",ret);
 80062f2:	7c3b      	ldrb	r3, [r7, #16]
 80062f4:	4619      	mov	r1, r3
 80062f6:	4820      	ldr	r0, [pc, #128]	@ (8006378 <ADXL343_init+0x348>)
 80062f8:	f010 fcc8 	bl	8016c8c <iprintf>
	/* 	0x38—FIFO_CTL
	 * 	D7-D6	| FIFO_MODE = 10 => STREAM
	 * 	D5		| TRIGGER BIT = 1 => Redirige ExINT vers INT2
	 * 	D4-D0	| SAMPLE BITS = 0b10000(16) => Nécessite 16 samples avant de trigger le INT
	 */
	ADXL343_WriteRegister(0x38, ((0b10<<6)| 0b10000))!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in INIT"):(void)0;
 80062fc:	2190      	movs	r1, #144	@ 0x90
 80062fe:	2038      	movs	r0, #56	@ 0x38
 8006300:	f000 f990 	bl	8006624 <ADXL343_WriteRegister>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d003      	beq.n	8006312 <ADXL343_init+0x2e2>
 800630a:	4912      	ldr	r1, [pc, #72]	@ (8006354 <ADXL343_init+0x324>)
 800630c:	4812      	ldr	r0, [pc, #72]	@ (8006358 <ADXL343_init+0x328>)
 800630e:	f010 faad 	bl	801686c <debug>
	ADXL343_ReadRegister(0x38, &ret,1)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 8006312:	f107 0310 	add.w	r3, r7, #16
 8006316:	2201      	movs	r2, #1
 8006318:	4619      	mov	r1, r3
 800631a:	2038      	movs	r0, #56	@ 0x38
 800631c:	f000 f9a0 	bl	8006660 <ADXL343_ReadRegister>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d003      	beq.n	800632e <ADXL343_init+0x2fe>
 8006326:	490d      	ldr	r1, [pc, #52]	@ (800635c <ADXL343_init+0x32c>)
 8006328:	480b      	ldr	r0, [pc, #44]	@ (8006358 <ADXL343_init+0x328>)
 800632a:	f010 fa9f 	bl	801686c <debug>
	printf("WRITE/READ - FIFO Mode: 0x%02X\r\n",ret);
 800632e:	7c3b      	ldrb	r3, [r7, #16]
 8006330:	4619      	mov	r1, r3
 8006332:	4812      	ldr	r0, [pc, #72]	@ (800637c <ADXL343_init+0x34c>)
 8006334:	f010 fcaa 	bl	8016c8c <iprintf>

	/*
	 ************$	ETALONNAGE	$************
	 */
	int32_t sumX = 0, sumY = 0, sumZ = 0;
 8006338:	2300      	movs	r3, #0
 800633a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800633c:	2300      	movs	r3, #0
 800633e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006340:	2300      	movs	r3, #0
 8006342:	623b      	str	r3, [r7, #32]
	for (int i=0;i<IMU_SAMPLE_0G;i++){
 8006344:	2300      	movs	r3, #0
 8006346:	61fb      	str	r3, [r7, #28]
 8006348:	e02d      	b.n	80063a6 <ADXL343_init+0x376>
 800634a:	bf00      	nop
 800634c:	20000008 	.word	0x20000008
 8006350:	08017dd8 	.word	0x08017dd8
 8006354:	08017df8 	.word	0x08017df8
 8006358:	08017db0 	.word	0x08017db0
 800635c:	08017d9c 	.word	0x08017d9c
 8006360:	08017e10 	.word	0x08017e10
 8006364:	08017e34 	.word	0x08017e34
 8006368:	08017e50 	.word	0x08017e50
 800636c:	08017e70 	.word	0x08017e70
 8006370:	08017e94 	.word	0x08017e94
 8006374:	08017ebc 	.word	0x08017ebc
 8006378:	08017ee0 	.word	0x08017ee0
 800637c:	08017f04 	.word	0x08017f04
		XYZ_t accXYZ_0G = ADXL343_getAcc();
 8006380:	463b      	mov	r3, r7
 8006382:	4618      	mov	r0, r3
 8006384:	f000 f8ce 	bl	8006524 <ADXL343_getAcc>
		sumX += accXYZ_0G.X;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800638c:	4413      	add	r3, r2
 800638e:	62bb      	str	r3, [r7, #40]	@ 0x28
		sumY += accXYZ_0G.Y;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006394:	4413      	add	r3, r2
 8006396:	627b      	str	r3, [r7, #36]	@ 0x24
		sumZ += accXYZ_0G.Z;
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	6a3a      	ldr	r2, [r7, #32]
 800639c:	4413      	add	r3, r2
 800639e:	623b      	str	r3, [r7, #32]
	for (int i=0;i<IMU_SAMPLE_0G;i++){
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	3301      	adds	r3, #1
 80063a4:	61fb      	str	r3, [r7, #28]
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	2b09      	cmp	r3, #9
 80063aa:	dde9      	ble.n	8006380 <ADXL343_init+0x350>
	}
	// Average
	int16_t avgX = sumX / IMU_SAMPLE_0G;
 80063ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ae:	4a5a      	ldr	r2, [pc, #360]	@ (8006518 <ADXL343_init+0x4e8>)
 80063b0:	fb82 1203 	smull	r1, r2, r2, r3
 80063b4:	1092      	asrs	r2, r2, #2
 80063b6:	17db      	asrs	r3, r3, #31
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	833b      	strh	r3, [r7, #24]
	int16_t avgY = sumY / IMU_SAMPLE_0G;
 80063bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063be:	4a56      	ldr	r2, [pc, #344]	@ (8006518 <ADXL343_init+0x4e8>)
 80063c0:	fb82 1203 	smull	r1, r2, r2, r3
 80063c4:	1092      	asrs	r2, r2, #2
 80063c6:	17db      	asrs	r3, r3, #31
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	82fb      	strh	r3, [r7, #22]
	int16_t avgZ = (sumZ / IMU_SAMPLE_0G);//-10;
 80063cc:	6a3b      	ldr	r3, [r7, #32]
 80063ce:	4a52      	ldr	r2, [pc, #328]	@ (8006518 <ADXL343_init+0x4e8>)
 80063d0:	fb82 1203 	smull	r1, r2, r2, r3
 80063d4:	1092      	asrs	r2, r2, #2
 80063d6:	17db      	asrs	r3, r3, #31
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	82bb      	strh	r3, [r7, #20]

	//!\\  Each LSB of output in full-resolution is 3.9 mg or one-quarter of an LSB of the offset register
	uint8_t offsetX = -round((float)avgX / (SENSITIVITY_FULL_RES / SCALE_FACTOR_OFFSET_REG));
 80063dc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80063e0:	ee07 3a90 	vmov	s15, r3
 80063e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063e8:	ee17 0a90 	vmov	r0, s15
 80063ec:	f7fd fc6c 	bl	8003cc8 <__aeabi_f2d>
 80063f0:	a347      	add	r3, pc, #284	@ (adr r3, 8006510 <ADXL343_init+0x4e0>)
 80063f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f6:	f7fd fde9 	bl	8003fcc <__aeabi_ddiv>
 80063fa:	4602      	mov	r2, r0
 80063fc:	460b      	mov	r3, r1
 80063fe:	ec43 2b17 	vmov	d7, r2, r3
 8006402:	eeb0 0a47 	vmov.f32	s0, s14
 8006406:	eef0 0a67 	vmov.f32	s1, s15
 800640a:	f011 fb9d 	bl	8017b48 <round>
 800640e:	ec53 2b10 	vmov	r2, r3, d0
 8006412:	4692      	mov	sl, r2
 8006414:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 8006418:	4650      	mov	r0, sl
 800641a:	4659      	mov	r1, fp
 800641c:	f7fd febe 	bl	800419c <__aeabi_d2uiz>
 8006420:	4603      	mov	r3, r0
 8006422:	74fb      	strb	r3, [r7, #19]
	uint8_t offsetY = -round((float)avgY / (SENSITIVITY_FULL_RES / SCALE_FACTOR_OFFSET_REG));
 8006424:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006428:	ee07 3a90 	vmov	s15, r3
 800642c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006430:	ee17 0a90 	vmov	r0, s15
 8006434:	f7fd fc48 	bl	8003cc8 <__aeabi_f2d>
 8006438:	a335      	add	r3, pc, #212	@ (adr r3, 8006510 <ADXL343_init+0x4e0>)
 800643a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643e:	f7fd fdc5 	bl	8003fcc <__aeabi_ddiv>
 8006442:	4602      	mov	r2, r0
 8006444:	460b      	mov	r3, r1
 8006446:	ec43 2b17 	vmov	d7, r2, r3
 800644a:	eeb0 0a47 	vmov.f32	s0, s14
 800644e:	eef0 0a67 	vmov.f32	s1, s15
 8006452:	f011 fb79 	bl	8017b48 <round>
 8006456:	ec53 2b10 	vmov	r2, r3, d0
 800645a:	4690      	mov	r8, r2
 800645c:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8006460:	4640      	mov	r0, r8
 8006462:	4649      	mov	r1, r9
 8006464:	f7fd fe9a 	bl	800419c <__aeabi_d2uiz>
 8006468:	4603      	mov	r3, r0
 800646a:	74bb      	strb	r3, [r7, #18]
	uint8_t offsetZ = -round((float)(avgZ - SENSITIVITY_FULL_RES) / (SENSITIVITY_FULL_RES / SCALE_FACTOR_OFFSET_REG));
 800646c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006470:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006474:	ee07 3a90 	vmov	s15, r3
 8006478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800647c:	ee17 0a90 	vmov	r0, s15
 8006480:	f7fd fc22 	bl	8003cc8 <__aeabi_f2d>
 8006484:	a322      	add	r3, pc, #136	@ (adr r3, 8006510 <ADXL343_init+0x4e0>)
 8006486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648a:	f7fd fd9f 	bl	8003fcc <__aeabi_ddiv>
 800648e:	4602      	mov	r2, r0
 8006490:	460b      	mov	r3, r1
 8006492:	ec43 2b17 	vmov	d7, r2, r3
 8006496:	eeb0 0a47 	vmov.f32	s0, s14
 800649a:	eef0 0a67 	vmov.f32	s1, s15
 800649e:	f011 fb53 	bl	8017b48 <round>
 80064a2:	ec53 2b10 	vmov	r2, r3, d0
 80064a6:	4614      	mov	r4, r2
 80064a8:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80064ac:	4620      	mov	r0, r4
 80064ae:	4629      	mov	r1, r5
 80064b0:	f7fd fe74 	bl	800419c <__aeabi_d2uiz>
 80064b4:	4603      	mov	r3, r0
 80064b6:	747b      	strb	r3, [r7, #17]

	ADXL343_WriteRegister(0x1E, offsetX)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 80064b8:	7cfb      	ldrb	r3, [r7, #19]
 80064ba:	4619      	mov	r1, r3
 80064bc:	201e      	movs	r0, #30
 80064be:	f000 f8b1 	bl	8006624 <ADXL343_WriteRegister>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d003      	beq.n	80064d0 <ADXL343_init+0x4a0>
 80064c8:	4914      	ldr	r1, [pc, #80]	@ (800651c <ADXL343_init+0x4ec>)
 80064ca:	4815      	ldr	r0, [pc, #84]	@ (8006520 <ADXL343_init+0x4f0>)
 80064cc:	f010 f9ce 	bl	801686c <debug>
	ADXL343_WriteRegister(0x1F, offsetY)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 80064d0:	7cbb      	ldrb	r3, [r7, #18]
 80064d2:	4619      	mov	r1, r3
 80064d4:	201f      	movs	r0, #31
 80064d6:	f000 f8a5 	bl	8006624 <ADXL343_WriteRegister>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d003      	beq.n	80064e8 <ADXL343_init+0x4b8>
 80064e0:	490e      	ldr	r1, [pc, #56]	@ (800651c <ADXL343_init+0x4ec>)
 80064e2:	480f      	ldr	r0, [pc, #60]	@ (8006520 <ADXL343_init+0x4f0>)
 80064e4:	f010 f9c2 	bl	801686c <debug>
	ADXL343_WriteRegister(0x20, offsetZ)!=HAL_OK ? debug(D_ERROR,"I2C READ in INIT"):(void)0;
 80064e8:	7c7b      	ldrb	r3, [r7, #17]
 80064ea:	4619      	mov	r1, r3
 80064ec:	2020      	movs	r0, #32
 80064ee:	f000 f899 	bl	8006624 <ADXL343_WriteRegister>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d003      	beq.n	8006500 <ADXL343_init+0x4d0>
 80064f8:	4908      	ldr	r1, [pc, #32]	@ (800651c <ADXL343_init+0x4ec>)
 80064fa:	4809      	ldr	r0, [pc, #36]	@ (8006520 <ADXL343_init+0x4f0>)
 80064fc:	f010 f9b6 	bl	801686c <debug>
}
 8006500:	bf00      	nop
 8006502:	3730      	adds	r7, #48	@ 0x30
 8006504:	46bd      	mov	sp, r7
 8006506:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800650a:	bf00      	nop
 800650c:	f3af 8000 	nop.w
 8006510:	90690691 	.word	0x90690691
 8006514:	40306906 	.word	0x40306906
 8006518:	66666667 	.word	0x66666667
 800651c:	08017d9c 	.word	0x08017d9c
 8006520:	08017db0 	.word	0x08017db0

08006524 <ADXL343_getAcc>:
//Resort la valeur en mm/s2
XYZ_t ADXL343_getAcc(void){
 8006524:	b590      	push	{r4, r7, lr}
 8006526:	b089      	sub	sp, #36	@ 0x24
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
	XYZ_t accXYZ;
	int8_t a_x[2]={0,0};
 800652c:	2300      	movs	r3, #0
 800652e:	823b      	strh	r3, [r7, #16]
	int8_t a_y[2]={0,0};
 8006530:	2300      	movs	r3, #0
 8006532:	81bb      	strh	r3, [r7, #12]
	int8_t a_z[2]={0,0};
 8006534:	2300      	movs	r3, #0
 8006536:	813b      	strh	r3, [r7, #8]

	ADXL343_ReadRegister(0x32, (uint8_t*)a_x, 2)!=HAL_OK ? debug(D_ERROR,"I2C RECEIVE in ReadREGISTER"):(void)0;
 8006538:	f107 0310 	add.w	r3, r7, #16
 800653c:	2202      	movs	r2, #2
 800653e:	4619      	mov	r1, r3
 8006540:	2032      	movs	r0, #50	@ 0x32
 8006542:	f000 f88d 	bl	8006660 <ADXL343_ReadRegister>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d003      	beq.n	8006554 <ADXL343_getAcc+0x30>
 800654c:	4933      	ldr	r1, [pc, #204]	@ (800661c <ADXL343_getAcc+0xf8>)
 800654e:	4834      	ldr	r0, [pc, #208]	@ (8006620 <ADXL343_getAcc+0xfc>)
 8006550:	f010 f98c 	bl	801686c <debug>
	ADXL343_ReadRegister(0x34, (uint8_t*)a_y, 2)!=HAL_OK ? debug(D_ERROR,"I2C RECEIVE in ReadREGISTER"):(void)0;
 8006554:	f107 030c 	add.w	r3, r7, #12
 8006558:	2202      	movs	r2, #2
 800655a:	4619      	mov	r1, r3
 800655c:	2034      	movs	r0, #52	@ 0x34
 800655e:	f000 f87f 	bl	8006660 <ADXL343_ReadRegister>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d003      	beq.n	8006570 <ADXL343_getAcc+0x4c>
 8006568:	492c      	ldr	r1, [pc, #176]	@ (800661c <ADXL343_getAcc+0xf8>)
 800656a:	482d      	ldr	r0, [pc, #180]	@ (8006620 <ADXL343_getAcc+0xfc>)
 800656c:	f010 f97e 	bl	801686c <debug>
	ADXL343_ReadRegister(0x36, (uint8_t*)a_z, 2)!=HAL_OK ? debug(D_ERROR,"I2C RECEIVE in ReadREGISTER"):(void)0;
 8006570:	f107 0308 	add.w	r3, r7, #8
 8006574:	2202      	movs	r2, #2
 8006576:	4619      	mov	r1, r3
 8006578:	2036      	movs	r0, #54	@ 0x36
 800657a:	f000 f871 	bl	8006660 <ADXL343_ReadRegister>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d003      	beq.n	800658c <ADXL343_getAcc+0x68>
 8006584:	4925      	ldr	r1, [pc, #148]	@ (800661c <ADXL343_getAcc+0xf8>)
 8006586:	4826      	ldr	r0, [pc, #152]	@ (8006620 <ADXL343_getAcc+0xfc>)
 8006588:	f010 f970 	bl	801686c <debug>
	accXYZ.X = (int16_t)(	a_x[1] << 8 | a_x[0]	)*ADXL_SENSIBILITY; //g.e-3 ie mm.s-2
 800658c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006590:	021b      	lsls	r3, r3, #8
 8006592:	b21b      	sxth	r3, r3
 8006594:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8006598:	4313      	orrs	r3, r2
 800659a:	b21b      	sxth	r3, r3
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	617b      	str	r3, [r7, #20]
	accXYZ.Y = (int16_t)(	a_y[1] << 8 | a_y[0]	)*ADXL_SENSIBILITY;
 80065a0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80065a4:	021b      	lsls	r3, r3, #8
 80065a6:	b21b      	sxth	r3, r3
 80065a8:	f997 200c 	ldrsb.w	r2, [r7, #12]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	b21b      	sxth	r3, r3
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	61bb      	str	r3, [r7, #24]
	accXYZ.Z = (int16_t)(	a_z[1] << 8 | a_z[0]	)*ADXL_SENSIBILITY;
 80065b4:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80065b8:	021b      	lsls	r3, r3, #8
 80065ba:	b21b      	sxth	r3, r3
 80065bc:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	b21b      	sxth	r3, r3
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	61fb      	str	r3, [r7, #28]

	/** FILTRAGE **/
	accXYZ.X = abs(accXYZ.X)>=MM_S2_SEUIL ? accXYZ.X:0;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	bfb8      	it	lt
 80065ce:	425b      	neglt	r3, r3
 80065d0:	2b27      	cmp	r3, #39	@ 0x27
 80065d2:	dd01      	ble.n	80065d8 <ADXL343_getAcc+0xb4>
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	e000      	b.n	80065da <ADXL343_getAcc+0xb6>
 80065d8:	2300      	movs	r3, #0
 80065da:	617b      	str	r3, [r7, #20]
	accXYZ.Y = abs(accXYZ.Y)>=MM_S2_SEUIL ? accXYZ.Y:0;
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	bfb8      	it	lt
 80065e2:	425b      	neglt	r3, r3
 80065e4:	2b27      	cmp	r3, #39	@ 0x27
 80065e6:	dd01      	ble.n	80065ec <ADXL343_getAcc+0xc8>
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	e000      	b.n	80065ee <ADXL343_getAcc+0xca>
 80065ec:	2300      	movs	r3, #0
 80065ee:	61bb      	str	r3, [r7, #24]
	accXYZ.Z = abs(accXYZ.Z)>=MM_S2_SEUIL ? accXYZ.Z:0;
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	bfb8      	it	lt
 80065f6:	425b      	neglt	r3, r3
 80065f8:	2b27      	cmp	r3, #39	@ 0x27
 80065fa:	dd01      	ble.n	8006600 <ADXL343_getAcc+0xdc>
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	e000      	b.n	8006602 <ADXL343_getAcc+0xde>
 8006600:	2300      	movs	r3, #0
 8006602:	61fb      	str	r3, [r7, #28]

	return accXYZ;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	461c      	mov	r4, r3
 8006608:	f107 0314 	add.w	r3, r7, #20
 800660c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006610:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	/*
	 * Pour obtenir vitesse et position : CallBack dans fichier .IT
	 */
}
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	3724      	adds	r7, #36	@ 0x24
 8006618:	46bd      	mov	sp, r7
 800661a:	bd90      	pop	{r4, r7, pc}
 800661c:	08017f28 	.word	0x08017f28
 8006620:	08017db0 	.word	0x08017db0

08006624 <ADXL343_WriteRegister>:

HAL_StatusTypeDef ADXL343_WriteRegister(uint8_t reg, uint8_t data){
 8006624:	b580      	push	{r7, lr}
 8006626:	b086      	sub	sp, #24
 8006628:	af02      	add	r7, sp, #8
 800662a:	4603      	mov	r3, r0
 800662c:	460a      	mov	r2, r1
 800662e:	71fb      	strb	r3, [r7, #7]
 8006630:	4613      	mov	r3, r2
 8006632:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer[2]={reg,data};
 8006634:	79fb      	ldrb	r3, [r7, #7]
 8006636:	733b      	strb	r3, [r7, #12]
 8006638:	79bb      	ldrb	r3, [r7, #6]
 800663a:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(&I2C_IMU, (uint16_t)(ADXL_ADRR<<1), buffer, 2 ,HAL_MAX_DELAY);
 800663c:	f107 020c 	add.w	r2, r7, #12
 8006640:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006644:	9300      	str	r3, [sp, #0]
 8006646:	2302      	movs	r3, #2
 8006648:	21a6      	movs	r1, #166	@ 0xa6
 800664a:	4804      	ldr	r0, [pc, #16]	@ (800665c <ADXL343_WriteRegister+0x38>)
 800664c:	f003 fa38 	bl	8009ac0 <HAL_I2C_Master_Transmit>
 8006650:	4603      	mov	r3, r0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	20000434 	.word	0x20000434

08006660 <ADXL343_ReadRegister>:

HAL_StatusTypeDef ADXL343_ReadRegister(uint8_t reg, uint8_t* recptData, uint8_t lenData){
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af02      	add	r7, sp, #8
 8006666:	4603      	mov	r3, r0
 8006668:	6039      	str	r1, [r7, #0]
 800666a:	71fb      	strb	r3, [r7, #7]
 800666c:	4613      	mov	r3, r2
 800666e:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&I2C_IMU, (uint16_t)(ADXL_ADRR<<1), &reg, 1 ,HAL_MAX_DELAY)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in ReadREGISTER"):(void)0;
 8006670:	1dfa      	adds	r2, r7, #7
 8006672:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	2301      	movs	r3, #1
 800667a:	21a6      	movs	r1, #166	@ 0xa6
 800667c:	480c      	ldr	r0, [pc, #48]	@ (80066b0 <ADXL343_ReadRegister+0x50>)
 800667e:	f003 fa1f 	bl	8009ac0 <HAL_I2C_Master_Transmit>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d003      	beq.n	8006690 <ADXL343_ReadRegister+0x30>
 8006688:	490a      	ldr	r1, [pc, #40]	@ (80066b4 <ADXL343_ReadRegister+0x54>)
 800668a:	480b      	ldr	r0, [pc, #44]	@ (80066b8 <ADXL343_ReadRegister+0x58>)
 800668c:	f010 f8ee 	bl	801686c <debug>
	return HAL_I2C_Master_Receive(&I2C_IMU, (uint16_t)(ADXL_ADRR<<1), recptData, lenData ,HAL_MAX_DELAY);
 8006690:	79bb      	ldrb	r3, [r7, #6]
 8006692:	b29b      	uxth	r3, r3
 8006694:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006698:	9200      	str	r2, [sp, #0]
 800669a:	683a      	ldr	r2, [r7, #0]
 800669c:	21a6      	movs	r1, #166	@ 0xa6
 800669e:	4804      	ldr	r0, [pc, #16]	@ (80066b0 <ADXL343_ReadRegister+0x50>)
 80066a0:	f003 fb26 	bl	8009cf0 <HAL_I2C_Master_Receive>
 80066a4:	4603      	mov	r3, r0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3708      	adds	r7, #8
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	20000434 	.word	0x20000434
 80066b4:	08017f44 	.word	0x08017f44
 80066b8:	08017db0 	.word	0x08017db0

080066bc <LP5812_Init>:
#define LP5812_I2C_INDEP_ADDR 0x1C
#define I2C_MAIN hi2c3


// Fonctions de configuration du LP5812
void LP5812_Init(void) {
 80066bc:	b580      	push	{r7, lr}
 80066be:	af00      	add	r7, sp, #0
	debug(INFORMATION,"LP5812 - INIT");
 80066c0:	4960      	ldr	r1, [pc, #384]	@ (8006844 <LP5812_Init+0x188>)
 80066c2:	4861      	ldr	r0, [pc, #388]	@ (8006848 <LP5812_Init+0x18c>)
 80066c4:	f010 f8d2 	bl	801686c <debug>
	// Activer les LEDs en écrivant dans le registre ENABLE
	/*
	 * Set chip_en = 1 to enable the device
	 */
	LP5812_WriteRegister(0x000,0x01)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 80066c8:	2101      	movs	r1, #1
 80066ca:	2000      	movs	r0, #0
 80066cc:	f000 f8c2 	bl	8006854 <LP5812_WriteRegister>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d003      	beq.n	80066de <LP5812_Init+0x22>
 80066d6:	495d      	ldr	r1, [pc, #372]	@ (800684c <LP5812_Init+0x190>)
 80066d8:	485d      	ldr	r0, [pc, #372]	@ (8006850 <LP5812_Init+0x194>)
 80066da:	f010 f8c7 	bl	801686c <debug>
	/*
	 * Set led_mode = 4h to configure the LED drive mode as direct drive mode.
	 */
	LP5812_WriteRegister(0x002,0x40)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 80066de:	2140      	movs	r1, #64	@ 0x40
 80066e0:	2002      	movs	r0, #2
 80066e2:	f000 f8b7 	bl	8006854 <LP5812_WriteRegister>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d003      	beq.n	80066f4 <LP5812_Init+0x38>
 80066ec:	4957      	ldr	r1, [pc, #348]	@ (800684c <LP5812_Init+0x190>)
 80066ee:	4858      	ldr	r0, [pc, #352]	@ (8006850 <LP5812_Init+0x194>)
 80066f0:	f010 f8bc 	bl	801686c <debug>
	/*
	 * Send update command to complete configuration settings
	 */
	LP5812_WriteRegister(0x010,0x55)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 80066f4:	2155      	movs	r1, #85	@ 0x55
 80066f6:	2010      	movs	r0, #16
 80066f8:	f000 f8ac 	bl	8006854 <LP5812_WriteRegister>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d003      	beq.n	800670a <LP5812_Init+0x4e>
 8006702:	4952      	ldr	r1, [pc, #328]	@ (800684c <LP5812_Init+0x190>)
 8006704:	4852      	ldr	r0, [pc, #328]	@ (8006850 <LP5812_Init+0x194>)
 8006706:	f010 f8b1 	bl	801686c <debug>
	//Lire le registre 300h pou être certain que la configuration est bonne

	/*
	 * Enable all 12 LEDs (Write F0h to register 020h and FFh to register 021h)
	 */
	LP5812_WriteRegister(0x020,0xF0)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 800670a:	21f0      	movs	r1, #240	@ 0xf0
 800670c:	2020      	movs	r0, #32
 800670e:	f000 f8a1 	bl	8006854 <LP5812_WriteRegister>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d003      	beq.n	8006720 <LP5812_Init+0x64>
 8006718:	494c      	ldr	r1, [pc, #304]	@ (800684c <LP5812_Init+0x190>)
 800671a:	484d      	ldr	r0, [pc, #308]	@ (8006850 <LP5812_Init+0x194>)
 800671c:	f010 f8a6 	bl	801686c <debug>
	LP5812_WriteRegister(0x021,0xFF)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 8006720:	21ff      	movs	r1, #255	@ 0xff
 8006722:	2021      	movs	r0, #33	@ 0x21
 8006724:	f000 f896 	bl	8006854 <LP5812_WriteRegister>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d003      	beq.n	8006736 <LP5812_Init+0x7a>
 800672e:	4947      	ldr	r1, [pc, #284]	@ (800684c <LP5812_Init+0x190>)
 8006730:	4847      	ldr	r0, [pc, #284]	@ (8006850 <LP5812_Init+0x194>)
 8006732:	f010 f89b 	bl	801686c <debug>
	/*
	 * 	Set 51mA peak current for red LEDs (Write FFh to registers 035h, 038h, 03Bh, 03Eh) , and 40mA peak
	 *	current for green and blue LEDs (Write CCh to registers 034h, 036h, 037h, 039h, 03Ah, 03Ch, 03Dh,
		03Fh)
	 */
	LP5812_WriteRegister(0x035,0xFF)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 8006736:	21ff      	movs	r1, #255	@ 0xff
 8006738:	2035      	movs	r0, #53	@ 0x35
 800673a:	f000 f88b 	bl	8006854 <LP5812_WriteRegister>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d003      	beq.n	800674c <LP5812_Init+0x90>
 8006744:	4941      	ldr	r1, [pc, #260]	@ (800684c <LP5812_Init+0x190>)
 8006746:	4842      	ldr	r0, [pc, #264]	@ (8006850 <LP5812_Init+0x194>)
 8006748:	f010 f890 	bl	801686c <debug>
	LP5812_WriteRegister(0x038,0xFF)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 800674c:	21ff      	movs	r1, #255	@ 0xff
 800674e:	2038      	movs	r0, #56	@ 0x38
 8006750:	f000 f880 	bl	8006854 <LP5812_WriteRegister>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d003      	beq.n	8006762 <LP5812_Init+0xa6>
 800675a:	493c      	ldr	r1, [pc, #240]	@ (800684c <LP5812_Init+0x190>)
 800675c:	483c      	ldr	r0, [pc, #240]	@ (8006850 <LP5812_Init+0x194>)
 800675e:	f010 f885 	bl	801686c <debug>
	LP5812_WriteRegister(0x03B,0xFF)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 8006762:	21ff      	movs	r1, #255	@ 0xff
 8006764:	203b      	movs	r0, #59	@ 0x3b
 8006766:	f000 f875 	bl	8006854 <LP5812_WriteRegister>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d003      	beq.n	8006778 <LP5812_Init+0xbc>
 8006770:	4936      	ldr	r1, [pc, #216]	@ (800684c <LP5812_Init+0x190>)
 8006772:	4837      	ldr	r0, [pc, #220]	@ (8006850 <LP5812_Init+0x194>)
 8006774:	f010 f87a 	bl	801686c <debug>
	LP5812_WriteRegister(0x03E,0xFF)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 8006778:	21ff      	movs	r1, #255	@ 0xff
 800677a:	203e      	movs	r0, #62	@ 0x3e
 800677c:	f000 f86a 	bl	8006854 <LP5812_WriteRegister>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d003      	beq.n	800678e <LP5812_Init+0xd2>
 8006786:	4931      	ldr	r1, [pc, #196]	@ (800684c <LP5812_Init+0x190>)
 8006788:	4831      	ldr	r0, [pc, #196]	@ (8006850 <LP5812_Init+0x194>)
 800678a:	f010 f86f 	bl	801686c <debug>
	/*	RED - BLUE And GREEN	*/
	LP5812_WriteRegister(0x034,0xCC)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 800678e:	21cc      	movs	r1, #204	@ 0xcc
 8006790:	2034      	movs	r0, #52	@ 0x34
 8006792:	f000 f85f 	bl	8006854 <LP5812_WriteRegister>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d003      	beq.n	80067a4 <LP5812_Init+0xe8>
 800679c:	492b      	ldr	r1, [pc, #172]	@ (800684c <LP5812_Init+0x190>)
 800679e:	482c      	ldr	r0, [pc, #176]	@ (8006850 <LP5812_Init+0x194>)
 80067a0:	f010 f864 	bl	801686c <debug>
	LP5812_WriteRegister(0x036,0xCC)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 80067a4:	21cc      	movs	r1, #204	@ 0xcc
 80067a6:	2036      	movs	r0, #54	@ 0x36
 80067a8:	f000 f854 	bl	8006854 <LP5812_WriteRegister>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <LP5812_Init+0xfe>
 80067b2:	4926      	ldr	r1, [pc, #152]	@ (800684c <LP5812_Init+0x190>)
 80067b4:	4826      	ldr	r0, [pc, #152]	@ (8006850 <LP5812_Init+0x194>)
 80067b6:	f010 f859 	bl	801686c <debug>
	LP5812_WriteRegister(0x037,0xCC)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 80067ba:	21cc      	movs	r1, #204	@ 0xcc
 80067bc:	2037      	movs	r0, #55	@ 0x37
 80067be:	f000 f849 	bl	8006854 <LP5812_WriteRegister>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d003      	beq.n	80067d0 <LP5812_Init+0x114>
 80067c8:	4920      	ldr	r1, [pc, #128]	@ (800684c <LP5812_Init+0x190>)
 80067ca:	4821      	ldr	r0, [pc, #132]	@ (8006850 <LP5812_Init+0x194>)
 80067cc:	f010 f84e 	bl	801686c <debug>
	LP5812_WriteRegister(0x039,0xCC)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 80067d0:	21cc      	movs	r1, #204	@ 0xcc
 80067d2:	2039      	movs	r0, #57	@ 0x39
 80067d4:	f000 f83e 	bl	8006854 <LP5812_WriteRegister>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d003      	beq.n	80067e6 <LP5812_Init+0x12a>
 80067de:	491b      	ldr	r1, [pc, #108]	@ (800684c <LP5812_Init+0x190>)
 80067e0:	481b      	ldr	r0, [pc, #108]	@ (8006850 <LP5812_Init+0x194>)
 80067e2:	f010 f843 	bl	801686c <debug>
	LP5812_WriteRegister(0x03A,0xCC)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 80067e6:	21cc      	movs	r1, #204	@ 0xcc
 80067e8:	203a      	movs	r0, #58	@ 0x3a
 80067ea:	f000 f833 	bl	8006854 <LP5812_WriteRegister>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d003      	beq.n	80067fc <LP5812_Init+0x140>
 80067f4:	4915      	ldr	r1, [pc, #84]	@ (800684c <LP5812_Init+0x190>)
 80067f6:	4816      	ldr	r0, [pc, #88]	@ (8006850 <LP5812_Init+0x194>)
 80067f8:	f010 f838 	bl	801686c <debug>
	LP5812_WriteRegister(0x03C,0xCC)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 80067fc:	21cc      	movs	r1, #204	@ 0xcc
 80067fe:	203c      	movs	r0, #60	@ 0x3c
 8006800:	f000 f828 	bl	8006854 <LP5812_WriteRegister>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d003      	beq.n	8006812 <LP5812_Init+0x156>
 800680a:	4910      	ldr	r1, [pc, #64]	@ (800684c <LP5812_Init+0x190>)
 800680c:	4810      	ldr	r0, [pc, #64]	@ (8006850 <LP5812_Init+0x194>)
 800680e:	f010 f82d 	bl	801686c <debug>
	LP5812_WriteRegister(0x03D,0xCC)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 8006812:	21cc      	movs	r1, #204	@ 0xcc
 8006814:	203d      	movs	r0, #61	@ 0x3d
 8006816:	f000 f81d 	bl	8006854 <LP5812_WriteRegister>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d003      	beq.n	8006828 <LP5812_Init+0x16c>
 8006820:	490a      	ldr	r1, [pc, #40]	@ (800684c <LP5812_Init+0x190>)
 8006822:	480b      	ldr	r0, [pc, #44]	@ (8006850 <LP5812_Init+0x194>)
 8006824:	f010 f822 	bl	801686c <debug>
	LP5812_WriteRegister(0x03F,0xCC)!=HAL_OK ? debug(D_ERROR,"I2C MAIN"):	(void)0;
 8006828:	21cc      	movs	r1, #204	@ 0xcc
 800682a:	203f      	movs	r0, #63	@ 0x3f
 800682c:	f000 f812 	bl	8006854 <LP5812_WriteRegister>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d003      	beq.n	800683e <LP5812_Init+0x182>
 8006836:	4905      	ldr	r1, [pc, #20]	@ (800684c <LP5812_Init+0x190>)
 8006838:	4805      	ldr	r0, [pc, #20]	@ (8006850 <LP5812_Init+0x194>)
 800683a:	f010 f817 	bl	801686c <debug>
*/
	/*//!\\Attention : L'adresse du composant est sur 2 bytes :
	 *				1er bytes est composé de R/W +  2dernier bytes du registres ciblé + Broadcast/Speci
	 *				2eme byte composé du reste du registre cible
	 */
}
 800683e:	bf00      	nop
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	08017f64 	.word	0x08017f64
 8006848:	08017f74 	.word	0x08017f74
 800684c:	08017f88 	.word	0x08017f88
 8006850:	08017f94 	.word	0x08017f94

08006854 <LP5812_WriteRegister>:


// Fonction pour écrire dans un registre 16 bits du LP5812
HAL_StatusTypeDef LP5812_WriteRegister(uint16_t reg, uint8_t data) {
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af02      	add	r7, sp, #8
 800685a:	4603      	mov	r3, r0
 800685c:	460a      	mov	r2, r1
 800685e:	80fb      	strh	r3, [r7, #6]
 8006860:	4613      	mov	r3, r2
 8006862:	717b      	strb	r3, [r7, #5]
	uint8_t addr_byte1, addr_byte2;
	uint8_t buffer[3];

	// Configuration des Address Byte 1 et Address Byte 2
	addr_byte1 = (LP5812_I2C_BASE_ADDR << 3) | ((reg >> 8) & 0x03);  // 5 bits d'adresse et 2 bits supérieurs du registre
 8006864:	88fb      	ldrh	r3, [r7, #6]
 8006866:	0a1b      	lsrs	r3, r3, #8
 8006868:	b29b      	uxth	r3, r3
 800686a:	b25b      	sxtb	r3, r3
 800686c:	f003 0303 	and.w	r3, r3, #3
 8006870:	b25b      	sxtb	r3, r3
 8006872:	f063 0327 	orn	r3, r3, #39	@ 0x27
 8006876:	b25b      	sxtb	r3, r3
 8006878:	73fb      	strb	r3, [r7, #15]
	addr_byte2 = (uint8_t)(reg & 0xFF);                               // 8 bits inférieurs du registre
 800687a:	88fb      	ldrh	r3, [r7, #6]
 800687c:	73bb      	strb	r3, [r7, #14]

	// Préparer les données à envoyer : Address Byte 2 et Data
	buffer[0] = addr_byte2;
 800687e:	7bbb      	ldrb	r3, [r7, #14]
 8006880:	723b      	strb	r3, [r7, #8]
	buffer[1] = data;
 8006882:	797b      	ldrb	r3, [r7, #5]
 8006884:	727b      	strb	r3, [r7, #9]

	// Envoyer Address Byte 1, puis buffer
	return HAL_I2C_Master_Transmit(&hi2c3, addr_byte1, buffer, 2, HAL_MAX_DELAY);
 8006886:	7bfb      	ldrb	r3, [r7, #15]
 8006888:	b299      	uxth	r1, r3
 800688a:	f107 0208 	add.w	r2, r7, #8
 800688e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006892:	9300      	str	r3, [sp, #0]
 8006894:	2302      	movs	r3, #2
 8006896:	4804      	ldr	r0, [pc, #16]	@ (80068a8 <LP5812_WriteRegister+0x54>)
 8006898:	f003 f912 	bl	8009ac0 <HAL_I2C_Master_Transmit>
 800689c:	4603      	mov	r3, r0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	20000488 	.word	0x20000488

080068ac <TCA9555_init>:
		{"POLARITY INVERSION PORT 0",	0x04},
		{"POLARITY INVERSION PORT 1",	0x05},
		{"CONFIGURATION PORT 0",	0x06},
		{"CONFIGURATION PORT 1",	0x07},
};
void TCA9555_init(void){
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
	debug(INFORMATION,"TCA9555 - INIT");
 80068b2:	4924      	ldr	r1, [pc, #144]	@ (8006944 <TCA9555_init+0x98>)
 80068b4:	4824      	ldr	r0, [pc, #144]	@ (8006948 <TCA9555_init+0x9c>)
 80068b6:	f00f ffd9 	bl	801686c <debug>

	TCA9555_WriteRegister(0x06, 0b11111111)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in WriteREGISTER"):(void)0;
 80068ba:	21ff      	movs	r1, #255	@ 0xff
 80068bc:	2006      	movs	r0, #6
 80068be:	f000 f84d 	bl	800695c <TCA9555_WriteRegister>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d003      	beq.n	80068d0 <TCA9555_init+0x24>
 80068c8:	4920      	ldr	r1, [pc, #128]	@ (800694c <TCA9555_init+0xa0>)
 80068ca:	4821      	ldr	r0, [pc, #132]	@ (8006950 <TCA9555_init+0xa4>)
 80068cc:	f00f ffce 	bl	801686c <debug>
	TCA9555_WriteRegister(0x07, 0b11111111)!=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in WriteREGISTER"):(void)0;
 80068d0:	21ff      	movs	r1, #255	@ 0xff
 80068d2:	2007      	movs	r0, #7
 80068d4:	f000 f842 	bl	800695c <TCA9555_WriteRegister>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d003      	beq.n	80068e6 <TCA9555_init+0x3a>
 80068de:	491b      	ldr	r1, [pc, #108]	@ (800694c <TCA9555_init+0xa0>)
 80068e0:	481b      	ldr	r0, [pc, #108]	@ (8006950 <TCA9555_init+0xa4>)
 80068e2:	f00f ffc3 	bl	801686c <debug>

	uint8_t startReg = 0x00;
 80068e6:	2300      	movs	r3, #0
 80068e8:	70fb      	strb	r3, [r7, #3]
	uint8_t endReg = 0x07;
 80068ea:	2307      	movs	r3, #7
 80068ec:	70bb      	strb	r3, [r7, #2]
	for (int i = 0; i <= endReg-startReg; i++) {
 80068ee:	2300      	movs	r3, #0
 80068f0:	607b      	str	r3, [r7, #4]
 80068f2:	e01c      	b.n	800692e <TCA9555_init+0x82>
		uint8_t ret=0;
 80068f4:	2300      	movs	r3, #0
 80068f6:	707b      	strb	r3, [r7, #1]
		TCA9555_ReadRegister(GPIOExpRegister[i].reg, &ret,1);
 80068f8:	4a16      	ldr	r2, [pc, #88]	@ (8006954 <TCA9555_init+0xa8>)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	00db      	lsls	r3, r3, #3
 80068fe:	4413      	add	r3, r2
 8006900:	791b      	ldrb	r3, [r3, #4]
 8006902:	1c79      	adds	r1, r7, #1
 8006904:	2201      	movs	r2, #1
 8006906:	4618      	mov	r0, r3
 8006908:	f000 f846 	bl	8006998 <TCA9555_ReadRegister>
		printf("READ - 0x%02X (%s): 0x%02X\r\n", GPIOExpRegister[i].reg,GPIOExpRegister[i].name, ret);
 800690c:	4a11      	ldr	r2, [pc, #68]	@ (8006954 <TCA9555_init+0xa8>)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	00db      	lsls	r3, r3, #3
 8006912:	4413      	add	r3, r2
 8006914:	791b      	ldrb	r3, [r3, #4]
 8006916:	4619      	mov	r1, r3
 8006918:	4a0e      	ldr	r2, [pc, #56]	@ (8006954 <TCA9555_init+0xa8>)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8006920:	787b      	ldrb	r3, [r7, #1]
 8006922:	480d      	ldr	r0, [pc, #52]	@ (8006958 <TCA9555_init+0xac>)
 8006924:	f010 f9b2 	bl	8016c8c <iprintf>
	for (int i = 0; i <= endReg-startReg; i++) {
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	3301      	adds	r3, #1
 800692c:	607b      	str	r3, [r7, #4]
 800692e:	78ba      	ldrb	r2, [r7, #2]
 8006930:	78fb      	ldrb	r3, [r7, #3]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	429a      	cmp	r2, r3
 8006938:	dddc      	ble.n	80068f4 <TCA9555_init+0x48>
	}
}
 800693a:	bf00      	nop
 800693c:	bf00      	nop
 800693e:	3708      	adds	r7, #8
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	08018068 	.word	0x08018068
 8006948:	08018078 	.word	0x08018078
 800694c:	0801808c 	.word	0x0801808c
 8006950:	080180ac 	.word	0x080180ac
 8006954:	200000f8 	.word	0x200000f8
 8006958:	080180b8 	.word	0x080180b8

0800695c <TCA9555_WriteRegister>:

HAL_StatusTypeDef TCA9555_WriteRegister(uint8_t reg, uint8_t data){
 800695c:	b580      	push	{r7, lr}
 800695e:	b086      	sub	sp, #24
 8006960:	af02      	add	r7, sp, #8
 8006962:	4603      	mov	r3, r0
 8006964:	460a      	mov	r2, r1
 8006966:	71fb      	strb	r3, [r7, #7]
 8006968:	4613      	mov	r3, r2
 800696a:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer[2]={reg,data};
 800696c:	79fb      	ldrb	r3, [r7, #7]
 800696e:	733b      	strb	r3, [r7, #12]
 8006970:	79bb      	ldrb	r3, [r7, #6]
 8006972:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(&I2C_MAIN, (uint16_t)(TCA9555_ADRR<<1), buffer, 2 ,HAL_MAX_DELAY);
 8006974:	f107 020c 	add.w	r2, r7, #12
 8006978:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800697c:	9300      	str	r3, [sp, #0]
 800697e:	2302      	movs	r3, #2
 8006980:	2140      	movs	r1, #64	@ 0x40
 8006982:	4804      	ldr	r0, [pc, #16]	@ (8006994 <TCA9555_WriteRegister+0x38>)
 8006984:	f003 f89c 	bl	8009ac0 <HAL_I2C_Master_Transmit>
 8006988:	4603      	mov	r3, r0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	20000488 	.word	0x20000488

08006998 <TCA9555_ReadRegister>:
HAL_StatusTypeDef TCA9555_ReadRegister(uint8_t reg, uint8_t* recptData, uint8_t lenData){
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af02      	add	r7, sp, #8
 800699e:	4603      	mov	r3, r0
 80069a0:	6039      	str	r1, [r7, #0]
 80069a2:	71fb      	strb	r3, [r7, #7]
 80069a4:	4613      	mov	r3, r2
 80069a6:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&I2C_MAIN, (uint16_t)(TCA9555_ADRR<<1), &reg, 1 ,HAL_MAX_DELAY) !=HAL_OK ? debug(D_ERROR,"I2C TRANSMIT in ReadREGISTER"):(void)0;
 80069a8:	1dfa      	adds	r2, r7, #7
 80069aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80069ae:	9300      	str	r3, [sp, #0]
 80069b0:	2301      	movs	r3, #1
 80069b2:	2140      	movs	r1, #64	@ 0x40
 80069b4:	480c      	ldr	r0, [pc, #48]	@ (80069e8 <TCA9555_ReadRegister+0x50>)
 80069b6:	f003 f883 	bl	8009ac0 <HAL_I2C_Master_Transmit>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d003      	beq.n	80069c8 <TCA9555_ReadRegister+0x30>
 80069c0:	490a      	ldr	r1, [pc, #40]	@ (80069ec <TCA9555_ReadRegister+0x54>)
 80069c2:	480b      	ldr	r0, [pc, #44]	@ (80069f0 <TCA9555_ReadRegister+0x58>)
 80069c4:	f00f ff52 	bl	801686c <debug>
	return HAL_I2C_Master_Receive(&I2C_MAIN, (uint16_t)(TCA9555_ADRR<<1), recptData, lenData ,HAL_MAX_DELAY);
 80069c8:	79bb      	ldrb	r3, [r7, #6]
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80069d0:	9200      	str	r2, [sp, #0]
 80069d2:	683a      	ldr	r2, [r7, #0]
 80069d4:	2140      	movs	r1, #64	@ 0x40
 80069d6:	4804      	ldr	r0, [pc, #16]	@ (80069e8 <TCA9555_ReadRegister+0x50>)
 80069d8:	f003 f98a 	bl	8009cf0 <HAL_I2C_Master_Receive>
 80069dc:	4603      	mov	r3, r0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	20000488 	.word	0x20000488
 80069ec:	080180d8 	.word	0x080180d8
 80069f0:	080180ac 	.word	0x080180ac

080069f4 <ZXB5210_init>:
#include "components/ZXB5210.h"
MDriver_t MDriver1;
MDriver_t MDriver2;
int isSpeedInit = 0;

void ZXB5210_init(void){
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b09a      	sub	sp, #104	@ 0x68
 80069f8:	af00      	add	r7, sp, #0
	debug(INFORMATION,"ZXB5210 - INIT");
 80069fa:	493d      	ldr	r1, [pc, #244]	@ (8006af0 <ZXB5210_init+0xfc>)
 80069fc:	483d      	ldr	r0, [pc, #244]	@ (8006af4 <ZXB5210_init+0x100>)
 80069fe:	f00f ff35 	bl	801686c <debug>
	MDriver1 = (MDriver_t){
		.htim = &htim2,
				.FWD = (MDriver_Config_t){.Tim_Channel = TIM_CHANNEL_3,.CCR_Channel = &htim2.Instance->CCR3,.pulseGoal = 0,},
 8006a02:	4b3d      	ldr	r3, [pc, #244]	@ (8006af8 <ZXB5210_init+0x104>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
				.REV = (MDriver_Config_t){.Tim_Channel = TIM_CHANNEL_4,.CCR_Channel = &htim2.Instance->CCR4,.pulseGoal = 0,},
 8006a0a:	4b3b      	ldr	r3, [pc, #236]	@ (8006af8 <ZXB5210_init+0x104>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3340      	adds	r3, #64	@ 0x40
	MDriver1 = (MDriver_t){
 8006a10:	493a      	ldr	r1, [pc, #232]	@ (8006afc <ZXB5210_init+0x108>)
 8006a12:	4839      	ldr	r0, [pc, #228]	@ (8006af8 <ZXB5210_init+0x104>)
 8006a14:	6008      	str	r0, [r1, #0]
 8006a16:	4939      	ldr	r1, [pc, #228]	@ (8006afc <ZXB5210_init+0x108>)
 8006a18:	2008      	movs	r0, #8
 8006a1a:	6048      	str	r0, [r1, #4]
 8006a1c:	4937      	ldr	r1, [pc, #220]	@ (8006afc <ZXB5210_init+0x108>)
 8006a1e:	608a      	str	r2, [r1, #8]
 8006a20:	4a36      	ldr	r2, [pc, #216]	@ (8006afc <ZXB5210_init+0x108>)
 8006a22:	2100      	movs	r1, #0
 8006a24:	60d1      	str	r1, [r2, #12]
 8006a26:	4a35      	ldr	r2, [pc, #212]	@ (8006afc <ZXB5210_init+0x108>)
 8006a28:	210c      	movs	r1, #12
 8006a2a:	6111      	str	r1, [r2, #16]
 8006a2c:	4a33      	ldr	r2, [pc, #204]	@ (8006afc <ZXB5210_init+0x108>)
 8006a2e:	6153      	str	r3, [r2, #20]
 8006a30:	4b32      	ldr	r3, [pc, #200]	@ (8006afc <ZXB5210_init+0x108>)
 8006a32:	2200      	movs	r2, #0
 8006a34:	619a      	str	r2, [r3, #24]
	};
	MDriver2 = (MDriver_t){
		.htim = &htim3,
				.FWD = (MDriver_Config_t){.Tim_Channel = TIM_CHANNEL_4,.CCR_Channel = &htim3.Instance->CCR4,.pulseGoal = 0,},
 8006a36:	4b32      	ldr	r3, [pc, #200]	@ (8006b00 <ZXB5210_init+0x10c>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f103 0240 	add.w	r2, r3, #64	@ 0x40
				.REV = (MDriver_Config_t){.Tim_Channel = TIM_CHANNEL_3,.CCR_Channel = &htim3.Instance->CCR3,.pulseGoal = 0,},
 8006a3e:	4b30      	ldr	r3, [pc, #192]	@ (8006b00 <ZXB5210_init+0x10c>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	333c      	adds	r3, #60	@ 0x3c
	MDriver2 = (MDriver_t){
 8006a44:	492f      	ldr	r1, [pc, #188]	@ (8006b04 <ZXB5210_init+0x110>)
 8006a46:	482e      	ldr	r0, [pc, #184]	@ (8006b00 <ZXB5210_init+0x10c>)
 8006a48:	6008      	str	r0, [r1, #0]
 8006a4a:	492e      	ldr	r1, [pc, #184]	@ (8006b04 <ZXB5210_init+0x110>)
 8006a4c:	200c      	movs	r0, #12
 8006a4e:	6048      	str	r0, [r1, #4]
 8006a50:	492c      	ldr	r1, [pc, #176]	@ (8006b04 <ZXB5210_init+0x110>)
 8006a52:	608a      	str	r2, [r1, #8]
 8006a54:	4a2b      	ldr	r2, [pc, #172]	@ (8006b04 <ZXB5210_init+0x110>)
 8006a56:	2100      	movs	r1, #0
 8006a58:	60d1      	str	r1, [r2, #12]
 8006a5a:	4a2a      	ldr	r2, [pc, #168]	@ (8006b04 <ZXB5210_init+0x110>)
 8006a5c:	2108      	movs	r1, #8
 8006a5e:	6111      	str	r1, [r2, #16]
 8006a60:	4a28      	ldr	r2, [pc, #160]	@ (8006b04 <ZXB5210_init+0x110>)
 8006a62:	6153      	str	r3, [r2, #20]
 8006a64:	4b27      	ldr	r3, [pc, #156]	@ (8006b04 <ZXB5210_init+0x110>)
 8006a66:	2200      	movs	r2, #0
 8006a68:	619a      	str	r2, [r3, #24]
	};
	HAL_TIM_PWM_Start(MDriver1.htim,MDriver1.FWD.Tim_Channel) == HAL_OK ? debug(START,"DRIVER1 - PWM CHANNEL FWD"):(void)0;
 8006a6a:	4b24      	ldr	r3, [pc, #144]	@ (8006afc <ZXB5210_init+0x108>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a23      	ldr	r2, [pc, #140]	@ (8006afc <ZXB5210_init+0x108>)
 8006a70:	6852      	ldr	r2, [r2, #4]
 8006a72:	4611      	mov	r1, r2
 8006a74:	4618      	mov	r0, r3
 8006a76:	f004 ff1f 	bl	800b8b8 <HAL_TIM_PWM_Start>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d103      	bne.n	8006a88 <ZXB5210_init+0x94>
 8006a80:	4921      	ldr	r1, [pc, #132]	@ (8006b08 <ZXB5210_init+0x114>)
 8006a82:	4822      	ldr	r0, [pc, #136]	@ (8006b0c <ZXB5210_init+0x118>)
 8006a84:	f00f fef2 	bl	801686c <debug>
	HAL_TIM_PWM_Start(MDriver1.htim,MDriver1.REV.Tim_Channel) == HAL_OK ? debug(START,"DRIVER1 - PWM CHANNEL REV"):(void)0;
 8006a88:	4b1c      	ldr	r3, [pc, #112]	@ (8006afc <ZXB5210_init+0x108>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a1b      	ldr	r2, [pc, #108]	@ (8006afc <ZXB5210_init+0x108>)
 8006a8e:	6912      	ldr	r2, [r2, #16]
 8006a90:	4611      	mov	r1, r2
 8006a92:	4618      	mov	r0, r3
 8006a94:	f004 ff10 	bl	800b8b8 <HAL_TIM_PWM_Start>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d103      	bne.n	8006aa6 <ZXB5210_init+0xb2>
 8006a9e:	491c      	ldr	r1, [pc, #112]	@ (8006b10 <ZXB5210_init+0x11c>)
 8006aa0:	481a      	ldr	r0, [pc, #104]	@ (8006b0c <ZXB5210_init+0x118>)
 8006aa2:	f00f fee3 	bl	801686c <debug>

	HAL_TIM_PWM_Start(MDriver2.htim,MDriver2.FWD.Tim_Channel) == HAL_OK ? debug(START,"DRIVER2 - PWM CHANNEL FWD"):(void)0;
 8006aa6:	4b17      	ldr	r3, [pc, #92]	@ (8006b04 <ZXB5210_init+0x110>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a16      	ldr	r2, [pc, #88]	@ (8006b04 <ZXB5210_init+0x110>)
 8006aac:	6852      	ldr	r2, [r2, #4]
 8006aae:	4611      	mov	r1, r2
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f004 ff01 	bl	800b8b8 <HAL_TIM_PWM_Start>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d103      	bne.n	8006ac4 <ZXB5210_init+0xd0>
 8006abc:	4915      	ldr	r1, [pc, #84]	@ (8006b14 <ZXB5210_init+0x120>)
 8006abe:	4813      	ldr	r0, [pc, #76]	@ (8006b0c <ZXB5210_init+0x118>)
 8006ac0:	f00f fed4 	bl	801686c <debug>
	HAL_TIM_PWM_Start(MDriver2.htim,MDriver2.REV.Tim_Channel) == HAL_OK ? debug(START,"DRIVER2 - PWM CHANNEL REV"):(void)0;
 8006ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8006b04 <ZXB5210_init+0x110>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a0e      	ldr	r2, [pc, #56]	@ (8006b04 <ZXB5210_init+0x110>)
 8006aca:	6912      	ldr	r2, [r2, #16]
 8006acc:	4611      	mov	r1, r2
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f004 fef2 	bl	800b8b8 <HAL_TIM_PWM_Start>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d103      	bne.n	8006ae2 <ZXB5210_init+0xee>
 8006ada:	490f      	ldr	r1, [pc, #60]	@ (8006b18 <ZXB5210_init+0x124>)
 8006adc:	480b      	ldr	r0, [pc, #44]	@ (8006b0c <ZXB5210_init+0x118>)
 8006ade:	f00f fec5 	bl	801686c <debug>

	isSpeedInit = 1;
 8006ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8006b1c <ZXB5210_init+0x128>)
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	601a      	str	r2, [r3, #0]
}
 8006ae8:	bf00      	nop
 8006aea:	3768      	adds	r7, #104	@ 0x68
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	080180f8 	.word	0x080180f8
 8006af4:	08018108 	.word	0x08018108
 8006af8:	200005bc 	.word	0x200005bc
 8006afc:	20000a38 	.word	0x20000a38
 8006b00:	20000688 	.word	0x20000688
 8006b04:	20000a54 	.word	0x20000a54
 8006b08:	0801811c 	.word	0x0801811c
 8006b0c:	08018138 	.word	0x08018138
 8006b10:	08018144 	.word	0x08018144
 8006b14:	08018160 	.word	0x08018160
 8006b18:	0801817c 	.word	0x0801817c
 8006b1c:	20000a70 	.word	0x20000a70

08006b20 <ZXB5210_deinit>:
// Tout les channels ne sont pas cabler pareil

void ZXB5210_deinit(void){
 8006b20:	b580      	push	{r7, lr}
 8006b22:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(MDriver1.htim,MDriver1.FWD.Tim_Channel) == HAL_OK ? debug(STOP,"DRIVER1 - PWM CHANNEL FWD"):(void)0;
 8006b24:	4b1e      	ldr	r3, [pc, #120]	@ (8006ba0 <ZXB5210_deinit+0x80>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a1d      	ldr	r2, [pc, #116]	@ (8006ba0 <ZXB5210_deinit+0x80>)
 8006b2a:	6852      	ldr	r2, [r2, #4]
 8006b2c:	4611      	mov	r1, r2
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f004 ffc2 	bl	800bab8 <HAL_TIM_PWM_Stop>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d103      	bne.n	8006b42 <ZXB5210_deinit+0x22>
 8006b3a:	491a      	ldr	r1, [pc, #104]	@ (8006ba4 <ZXB5210_deinit+0x84>)
 8006b3c:	481a      	ldr	r0, [pc, #104]	@ (8006ba8 <ZXB5210_deinit+0x88>)
 8006b3e:	f00f fe95 	bl	801686c <debug>
	HAL_TIM_PWM_Stop(MDriver1.htim,MDriver1.REV.Tim_Channel) == HAL_OK ? debug(STOP,"DRIVER1 - PWM CHANNEL REV"):(void)0;
 8006b42:	4b17      	ldr	r3, [pc, #92]	@ (8006ba0 <ZXB5210_deinit+0x80>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a16      	ldr	r2, [pc, #88]	@ (8006ba0 <ZXB5210_deinit+0x80>)
 8006b48:	6912      	ldr	r2, [r2, #16]
 8006b4a:	4611      	mov	r1, r2
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f004 ffb3 	bl	800bab8 <HAL_TIM_PWM_Stop>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d103      	bne.n	8006b60 <ZXB5210_deinit+0x40>
 8006b58:	4914      	ldr	r1, [pc, #80]	@ (8006bac <ZXB5210_deinit+0x8c>)
 8006b5a:	4813      	ldr	r0, [pc, #76]	@ (8006ba8 <ZXB5210_deinit+0x88>)
 8006b5c:	f00f fe86 	bl	801686c <debug>

	HAL_TIM_PWM_Stop(MDriver2.htim,MDriver2.FWD.Tim_Channel) == HAL_OK ? debug(STOP,"DRIVER2 - PWM CHANNEL FWD"):(void)0;
 8006b60:	4b13      	ldr	r3, [pc, #76]	@ (8006bb0 <ZXB5210_deinit+0x90>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a12      	ldr	r2, [pc, #72]	@ (8006bb0 <ZXB5210_deinit+0x90>)
 8006b66:	6852      	ldr	r2, [r2, #4]
 8006b68:	4611      	mov	r1, r2
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f004 ffa4 	bl	800bab8 <HAL_TIM_PWM_Stop>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d103      	bne.n	8006b7e <ZXB5210_deinit+0x5e>
 8006b76:	490f      	ldr	r1, [pc, #60]	@ (8006bb4 <ZXB5210_deinit+0x94>)
 8006b78:	480b      	ldr	r0, [pc, #44]	@ (8006ba8 <ZXB5210_deinit+0x88>)
 8006b7a:	f00f fe77 	bl	801686c <debug>
	HAL_TIM_PWM_Stop(MDriver2.htim,MDriver2.REV.Tim_Channel) == HAL_OK ? debug(STOP,"DRIVER2 - PWM CHANNEL REV"):(void)0;
 8006b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8006bb0 <ZXB5210_deinit+0x90>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a0b      	ldr	r2, [pc, #44]	@ (8006bb0 <ZXB5210_deinit+0x90>)
 8006b84:	6912      	ldr	r2, [r2, #16]
 8006b86:	4611      	mov	r1, r2
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f004 ff95 	bl	800bab8 <HAL_TIM_PWM_Stop>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d103      	bne.n	8006b9c <ZXB5210_deinit+0x7c>
 8006b94:	4908      	ldr	r1, [pc, #32]	@ (8006bb8 <ZXB5210_deinit+0x98>)
 8006b96:	4804      	ldr	r0, [pc, #16]	@ (8006ba8 <ZXB5210_deinit+0x88>)
 8006b98:	f00f fe68 	bl	801686c <debug>
}
 8006b9c:	bf00      	nop
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	20000a38 	.word	0x20000a38
 8006ba4:	0801811c 	.word	0x0801811c
 8006ba8:	08018198 	.word	0x08018198
 8006bac:	08018144 	.word	0x08018144
 8006bb0:	20000a54 	.word	0x20000a54
 8006bb4:	08018160 	.word	0x08018160
 8006bb8:	0801817c 	.word	0x0801817c

08006bbc <ZXB5210_speed_FWD>:
	uint32_t pulse = (htim->Instance->ARR * alpha)/100;
	__HAL_TIM_SET_COMPARE(htim,TIM_CHANNEL_4,pulse);
}
#endif

void ZXB5210_speed_FWD(MDriver_t* MDriver ,uint8_t alpha){
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	70fb      	strb	r3, [r7, #3]
	MDriver->FWD.pulseGoal = (MDriver->htim->Instance->ARR * alpha)/100;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd0:	78fa      	ldrb	r2, [r7, #3]
 8006bd2:	fb02 f303 	mul.w	r3, r2, r3
 8006bd6:	4a07      	ldr	r2, [pc, #28]	@ (8006bf4 <ZXB5210_speed_FWD+0x38>)
 8006bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bdc:	095a      	lsrs	r2, r3, #5
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	60da      	str	r2, [r3, #12]
	MDriver->REV.pulseGoal = 0;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	619a      	str	r2, [r3, #24]
}
 8006be8:	bf00      	nop
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr
 8006bf4:	51eb851f 	.word	0x51eb851f

08006bf8 <ZXB5210_speed_REV>:
void ZXB5210_speed_REV(MDriver_t *MDriver ,uint8_t alpha){
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	460b      	mov	r3, r1
 8006c02:	70fb      	strb	r3, [r7, #3]
	MDriver->REV.pulseGoal = (MDriver->htim->Instance->ARR * alpha)/100;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c0c:	78fa      	ldrb	r2, [r7, #3]
 8006c0e:	fb02 f303 	mul.w	r3, r2, r3
 8006c12:	4a07      	ldr	r2, [pc, #28]	@ (8006c30 <ZXB5210_speed_REV+0x38>)
 8006c14:	fba2 2303 	umull	r2, r3, r2, r3
 8006c18:	095a      	lsrs	r2, r3, #5
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	619a      	str	r2, [r3, #24]
	MDriver->FWD.pulseGoal = 0;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	60da      	str	r2, [r3, #12]
}
 8006c24:	bf00      	nop
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr
 8006c30:	51eb851f 	.word	0x51eb851f

08006c34 <IT_ZXB5210_speed_UPDATE>:
void IT_ZXB5210_speed_UPDATE(MDriver_t* MDriver, MDriver_Config_t* SENS){
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
	uint32_t pulse = *(SENS->CCR_Channel);
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	60fb      	str	r3, [r7, #12]
	pulse < SENS->pulseGoal ? // Si le pulse est trop petit
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	689b      	ldr	r3, [r3, #8]
			pulse ++ :
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d203      	bcs.n	8006c58 <IT_ZXB5210_speed_UPDATE+0x24>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	3301      	adds	r3, #1
 8006c54:	60fb      	str	r3, [r7, #12]
 8006c56:	e002      	b.n	8006c5e <IT_ZXB5210_speed_UPDATE+0x2a>
			pulse --;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(MDriver->htim,SENS->Tim_Channel,pulse);
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d105      	bne.n	8006c72 <IT_ZXB5210_speed_UPDATE+0x3e>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8006c70:	e02c      	b.n	8006ccc <IT_ZXB5210_speed_UPDATE+0x98>
	__HAL_TIM_SET_COMPARE(MDriver->htim,SENS->Tim_Channel,pulse);
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2b04      	cmp	r3, #4
 8006c78:	d105      	bne.n	8006c86 <IT_ZXB5210_speed_UPDATE+0x52>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8006c84:	e022      	b.n	8006ccc <IT_ZXB5210_speed_UPDATE+0x98>
	__HAL_TIM_SET_COMPARE(MDriver->htim,SENS->Tim_Channel,pulse);
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2b08      	cmp	r3, #8
 8006c8c:	d105      	bne.n	8006c9a <IT_ZXB5210_speed_UPDATE+0x66>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8006c98:	e018      	b.n	8006ccc <IT_ZXB5210_speed_UPDATE+0x98>
	__HAL_TIM_SET_COMPARE(MDriver->htim,SENS->Tim_Channel,pulse);
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2b0c      	cmp	r3, #12
 8006ca0:	d105      	bne.n	8006cae <IT_ZXB5210_speed_UPDATE+0x7a>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8006cac:	e00e      	b.n	8006ccc <IT_ZXB5210_speed_UPDATE+0x98>
	__HAL_TIM_SET_COMPARE(MDriver->htim,SENS->Tim_Channel,pulse);
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2b10      	cmp	r3, #16
 8006cb4:	d105      	bne.n	8006cc2 <IT_ZXB5210_speed_UPDATE+0x8e>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8006cc0:	e004      	b.n	8006ccc <IT_ZXB5210_speed_UPDATE+0x98>
	__HAL_TIM_SET_COMPARE(MDriver->htim,SENS->Tim_Channel,pulse);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8006ccc:	bf00      	nop
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006cd8:	480d      	ldr	r0, [pc, #52]	@ (8006d10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006cda:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8006cdc:	f7fe fb3c 	bl	8005358 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006ce0:	480c      	ldr	r0, [pc, #48]	@ (8006d14 <LoopForever+0x6>)
  ldr r1, =_edata
 8006ce2:	490d      	ldr	r1, [pc, #52]	@ (8006d18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006ce4:	4a0d      	ldr	r2, [pc, #52]	@ (8006d1c <LoopForever+0xe>)
  movs r3, #0
 8006ce6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8006ce8:	e002      	b.n	8006cf0 <LoopCopyDataInit>

08006cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006cee:	3304      	adds	r3, #4

08006cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006cf4:	d3f9      	bcc.n	8006cea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8006d20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006cf8:	4c0a      	ldr	r4, [pc, #40]	@ (8006d24 <LoopForever+0x16>)
  movs r3, #0
 8006cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006cfc:	e001      	b.n	8006d02 <LoopFillZerobss>

08006cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006d00:	3204      	adds	r2, #4

08006d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006d04:	d3fb      	bcc.n	8006cfe <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8006d06:	f010 f901 	bl	8016f0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006d0a:	f7fe f831 	bl	8004d70 <main>

08006d0e <LoopForever>:

LoopForever:
    b LoopForever
 8006d0e:	e7fe      	b.n	8006d0e <LoopForever>
  ldr   r0, =_estack
 8006d10:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8006d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006d18:	20000310 	.word	0x20000310
  ldr r2, =_sidata
 8006d1c:	08018ae0 	.word	0x08018ae0
  ldr r2, =_sbss
 8006d20:	20000310 	.word	0x20000310
  ldr r4, =_ebss
 8006d24:	20005ccc 	.word	0x20005ccc

08006d28 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006d28:	e7fe      	b.n	8006d28 <COMP1_2_3_IRQHandler>

08006d2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b082      	sub	sp, #8
 8006d2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006d30:	2300      	movs	r3, #0
 8006d32:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006d34:	2003      	movs	r0, #3
 8006d36:	f001 ff44 	bl	8008bc2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006d3a:	200f      	movs	r0, #15
 8006d3c:	f7fe f934 	bl	8004fa8 <HAL_InitTick>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d002      	beq.n	8006d4c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	71fb      	strb	r3, [r7, #7]
 8006d4a:	e001      	b.n	8006d50 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006d4c:	f7fe f904 	bl	8004f58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006d50:	79fb      	ldrb	r3, [r7, #7]

}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
	...

08006d5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006d60:	4b05      	ldr	r3, [pc, #20]	@ (8006d78 <HAL_IncTick+0x1c>)
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	4b05      	ldr	r3, [pc, #20]	@ (8006d7c <HAL_IncTick+0x20>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4413      	add	r3, r2
 8006d6a:	4a03      	ldr	r2, [pc, #12]	@ (8006d78 <HAL_IncTick+0x1c>)
 8006d6c:	6013      	str	r3, [r2, #0]
}
 8006d6e:	bf00      	nop
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr
 8006d78:	20000a74 	.word	0x20000a74
 8006d7c:	2000013c 	.word	0x2000013c

08006d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006d80:	b480      	push	{r7}
 8006d82:	af00      	add	r7, sp, #0
  return uwTick;
 8006d84:	4b03      	ldr	r3, [pc, #12]	@ (8006d94 <HAL_GetTick+0x14>)
 8006d86:	681b      	ldr	r3, [r3, #0]
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	20000a74 	.word	0x20000a74

08006d98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006da0:	f7ff ffee 	bl	8006d80 <HAL_GetTick>
 8006da4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006db0:	d004      	beq.n	8006dbc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8006db2:	4b09      	ldr	r3, [pc, #36]	@ (8006dd8 <HAL_Delay+0x40>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	4413      	add	r3, r2
 8006dba:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006dbc:	bf00      	nop
 8006dbe:	f7ff ffdf 	bl	8006d80 <HAL_GetTick>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d8f7      	bhi.n	8006dbe <HAL_Delay+0x26>
  {
  }
}
 8006dce:	bf00      	nop
 8006dd0:	bf00      	nop
 8006dd2:	3710      	adds	r7, #16
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	2000013c 	.word	0x2000013c

08006ddc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	431a      	orrs	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	609a      	str	r2, [r3, #8]
}
 8006df6:	bf00      	nop
 8006df8:	370c      	adds	r7, #12
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr

08006e02 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006e02:	b480      	push	{r7}
 8006e04:	b083      	sub	sp, #12
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
 8006e0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	431a      	orrs	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	609a      	str	r2, [r3, #8]
}
 8006e1c:	bf00      	nop
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b087      	sub	sp, #28
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
 8006e50:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	3360      	adds	r3, #96	@ 0x60
 8006e56:	461a      	mov	r2, r3
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	4b08      	ldr	r3, [pc, #32]	@ (8006e88 <LL_ADC_SetOffset+0x44>)
 8006e66:	4013      	ands	r3, r2
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	430a      	orrs	r2, r1
 8006e72:	4313      	orrs	r3, r2
 8006e74:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006e7c:	bf00      	nop
 8006e7e:	371c      	adds	r7, #28
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr
 8006e88:	03fff000 	.word	0x03fff000

08006e8c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b085      	sub	sp, #20
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	3360      	adds	r3, #96	@ 0x60
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	4413      	add	r3, r2
 8006ea2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3714      	adds	r7, #20
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b087      	sub	sp, #28
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	3360      	adds	r3, #96	@ 0x60
 8006ec8:	461a      	mov	r2, r3
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	4413      	add	r3, r2
 8006ed0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	431a      	orrs	r2, r3
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006ee2:	bf00      	nop
 8006ee4:	371c      	adds	r7, #28
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr

08006eee <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b087      	sub	sp, #28
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	60f8      	str	r0, [r7, #12]
 8006ef6:	60b9      	str	r1, [r7, #8]
 8006ef8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	3360      	adds	r3, #96	@ 0x60
 8006efe:	461a      	mov	r2, r3
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4413      	add	r3, r2
 8006f06:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	431a      	orrs	r2, r3
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8006f18:	bf00      	nop
 8006f1a:	371c      	adds	r7, #28
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b087      	sub	sp, #28
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	3360      	adds	r3, #96	@ 0x60
 8006f34:	461a      	mov	r2, r3
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4413      	add	r3, r2
 8006f3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	431a      	orrs	r2, r3
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8006f4e:	bf00      	nop
 8006f50:	371c      	adds	r7, #28
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr

08006f5a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8006f5a:	b480      	push	{r7}
 8006f5c:	b083      	sub	sp, #12
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
 8006f62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	695b      	ldr	r3, [r3, #20]
 8006f68:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	431a      	orrs	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	615a      	str	r2, [r3, #20]
}
 8006f74:	bf00      	nop
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d101      	bne.n	8006f98 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006f94:	2301      	movs	r3, #1
 8006f96:	e000      	b.n	8006f9a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	370c      	adds	r7, #12
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr

08006fa6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006fa6:	b480      	push	{r7}
 8006fa8:	b087      	sub	sp, #28
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	60f8      	str	r0, [r7, #12]
 8006fae:	60b9      	str	r1, [r7, #8]
 8006fb0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	3330      	adds	r3, #48	@ 0x30
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	0a1b      	lsrs	r3, r3, #8
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	f003 030c 	and.w	r3, r3, #12
 8006fc2:	4413      	add	r3, r2
 8006fc4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	f003 031f 	and.w	r3, r3, #31
 8006fd0:	211f      	movs	r1, #31
 8006fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8006fd6:	43db      	mvns	r3, r3
 8006fd8:	401a      	ands	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	0e9b      	lsrs	r3, r3, #26
 8006fde:	f003 011f 	and.w	r1, r3, #31
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	f003 031f 	and.w	r3, r3, #31
 8006fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8006fec:	431a      	orrs	r2, r3
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006ff2:	bf00      	nop
 8006ff4:	371c      	adds	r7, #28
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr

08006ffe <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006ffe:	b480      	push	{r7}
 8007000:	b083      	sub	sp, #12
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800700a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800700e:	2b00      	cmp	r3, #0
 8007010:	d101      	bne.n	8007016 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8007012:	2301      	movs	r3, #1
 8007014:	e000      	b.n	8007018 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8007024:	b480      	push	{r7}
 8007026:	b087      	sub	sp, #28
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	3314      	adds	r3, #20
 8007034:	461a      	mov	r2, r3
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	0e5b      	lsrs	r3, r3, #25
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	f003 0304 	and.w	r3, r3, #4
 8007040:	4413      	add	r3, r2
 8007042:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	0d1b      	lsrs	r3, r3, #20
 800704c:	f003 031f 	and.w	r3, r3, #31
 8007050:	2107      	movs	r1, #7
 8007052:	fa01 f303 	lsl.w	r3, r1, r3
 8007056:	43db      	mvns	r3, r3
 8007058:	401a      	ands	r2, r3
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	0d1b      	lsrs	r3, r3, #20
 800705e:	f003 031f 	and.w	r3, r3, #31
 8007062:	6879      	ldr	r1, [r7, #4]
 8007064:	fa01 f303 	lsl.w	r3, r1, r3
 8007068:	431a      	orrs	r2, r3
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800706e:	bf00      	nop
 8007070:	371c      	adds	r7, #28
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
	...

0800707c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007094:	43db      	mvns	r3, r3
 8007096:	401a      	ands	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f003 0318 	and.w	r3, r3, #24
 800709e:	4908      	ldr	r1, [pc, #32]	@ (80070c0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80070a0:	40d9      	lsrs	r1, r3
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	400b      	ands	r3, r1
 80070a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070aa:	431a      	orrs	r2, r3
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80070b2:	bf00      	nop
 80070b4:	3714      	adds	r7, #20
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop
 80070c0:	0007ffff 	.word	0x0007ffff

080070c4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	f003 031f 	and.w	r3, r3, #31
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800710c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	6093      	str	r3, [r2, #8]
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007130:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007134:	d101      	bne.n	800713a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8007136:	2301      	movs	r3, #1
 8007138:	e000      	b.n	800713c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8007158:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800715c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007164:	bf00      	nop
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007180:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007184:	d101      	bne.n	800718a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007186:	2301      	movs	r3, #1
 8007188:	e000      	b.n	800718c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80071a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80071ac:	f043 0201 	orr.w	r2, r3, #1
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80071b4:	bf00      	nop
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80071d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80071d4:	f043 0202 	orr.w	r2, r3, #2
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80071dc:	bf00      	nop
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	f003 0301 	and.w	r3, r3, #1
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d101      	bne.n	8007200 <LL_ADC_IsEnabled+0x18>
 80071fc:	2301      	movs	r3, #1
 80071fe:	e000      	b.n	8007202 <LL_ADC_IsEnabled+0x1a>
 8007200:	2300      	movs	r3, #0
}
 8007202:	4618      	mov	r0, r3
 8007204:	370c      	adds	r7, #12
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr

0800720e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800720e:	b480      	push	{r7}
 8007210:	b083      	sub	sp, #12
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	f003 0302 	and.w	r3, r3, #2
 800721e:	2b02      	cmp	r3, #2
 8007220:	d101      	bne.n	8007226 <LL_ADC_IsDisableOngoing+0x18>
 8007222:	2301      	movs	r3, #1
 8007224:	e000      	b.n	8007228 <LL_ADC_IsDisableOngoing+0x1a>
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007244:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007248:	f043 0204 	orr.w	r2, r3, #4
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800726c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007270:	f043 0210 	orr.w	r2, r3, #16
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	f003 0304 	and.w	r3, r3, #4
 8007294:	2b04      	cmp	r3, #4
 8007296:	d101      	bne.n	800729c <LL_ADC_REG_IsConversionOngoing+0x18>
 8007298:	2301      	movs	r3, #1
 800729a:	e000      	b.n	800729e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	370c      	adds	r7, #12
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr

080072aa <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80072aa:	b480      	push	{r7}
 80072ac:	b083      	sub	sp, #12
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80072ba:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80072be:	f043 0220 	orr.w	r2, r3, #32
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80072c6:	bf00      	nop
 80072c8:	370c      	adds	r7, #12
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr

080072d2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80072d2:	b480      	push	{r7}
 80072d4:	b083      	sub	sp, #12
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	f003 0308 	and.w	r3, r3, #8
 80072e2:	2b08      	cmp	r3, #8
 80072e4:	d101      	bne.n	80072ea <LL_ADC_INJ_IsConversionOngoing+0x18>
 80072e6:	2301      	movs	r3, #1
 80072e8:	e000      	b.n	80072ec <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80072f8:	b590      	push	{r4, r7, lr}
 80072fa:	b089      	sub	sp, #36	@ 0x24
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007300:	2300      	movs	r3, #0
 8007302:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8007304:	2300      	movs	r3, #0
 8007306:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e167      	b.n	80075e2 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800731c:	2b00      	cmp	r3, #0
 800731e:	d109      	bne.n	8007334 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f7fd f94b 	bl	80045bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4618      	mov	r0, r3
 800733a:	f7ff fef1 	bl	8007120 <LL_ADC_IsDeepPowerDownEnabled>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d004      	beq.n	800734e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4618      	mov	r0, r3
 800734a:	f7ff fed7 	bl	80070fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4618      	mov	r0, r3
 8007354:	f7ff ff0c 	bl	8007170 <LL_ADC_IsInternalRegulatorEnabled>
 8007358:	4603      	mov	r3, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d115      	bne.n	800738a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4618      	mov	r0, r3
 8007364:	f7ff fef0 	bl	8007148 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007368:	4ba0      	ldr	r3, [pc, #640]	@ (80075ec <HAL_ADC_Init+0x2f4>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	099b      	lsrs	r3, r3, #6
 800736e:	4aa0      	ldr	r2, [pc, #640]	@ (80075f0 <HAL_ADC_Init+0x2f8>)
 8007370:	fba2 2303 	umull	r2, r3, r2, r3
 8007374:	099b      	lsrs	r3, r3, #6
 8007376:	3301      	adds	r3, #1
 8007378:	005b      	lsls	r3, r3, #1
 800737a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800737c:	e002      	b.n	8007384 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	3b01      	subs	r3, #1
 8007382:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1f9      	bne.n	800737e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4618      	mov	r0, r3
 8007390:	f7ff feee 	bl	8007170 <LL_ADC_IsInternalRegulatorEnabled>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d10d      	bne.n	80073b6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800739e:	f043 0210 	orr.w	r2, r3, #16
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073aa:	f043 0201 	orr.w	r2, r3, #1
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4618      	mov	r0, r3
 80073bc:	f7ff ff62 	bl	8007284 <LL_ADC_REG_IsConversionOngoing>
 80073c0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073c6:	f003 0310 	and.w	r3, r3, #16
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f040 8100 	bne.w	80075d0 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	f040 80fc 	bne.w	80075d0 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073dc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80073e0:	f043 0202 	orr.w	r2, r3, #2
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7ff fefb 	bl	80071e8 <LL_ADC_IsEnabled>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d111      	bne.n	800741c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80073f8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80073fc:	f7ff fef4 	bl	80071e8 <LL_ADC_IsEnabled>
 8007400:	4604      	mov	r4, r0
 8007402:	487c      	ldr	r0, [pc, #496]	@ (80075f4 <HAL_ADC_Init+0x2fc>)
 8007404:	f7ff fef0 	bl	80071e8 <LL_ADC_IsEnabled>
 8007408:	4603      	mov	r3, r0
 800740a:	4323      	orrs	r3, r4
 800740c:	2b00      	cmp	r3, #0
 800740e:	d105      	bne.n	800741c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	4619      	mov	r1, r3
 8007416:	4878      	ldr	r0, [pc, #480]	@ (80075f8 <HAL_ADC_Init+0x300>)
 8007418:	f7ff fce0 	bl	8006ddc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	7f5b      	ldrb	r3, [r3, #29]
 8007420:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007426:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800742c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8007432:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800743a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800743c:	4313      	orrs	r3, r2
 800743e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007446:	2b01      	cmp	r3, #1
 8007448:	d106      	bne.n	8007458 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800744e:	3b01      	subs	r3, #1
 8007450:	045b      	lsls	r3, r3, #17
 8007452:	69ba      	ldr	r2, [r7, #24]
 8007454:	4313      	orrs	r3, r2
 8007456:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800745c:	2b00      	cmp	r3, #0
 800745e:	d009      	beq.n	8007474 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007464:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800746c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800746e:	69ba      	ldr	r2, [r7, #24]
 8007470:	4313      	orrs	r3, r2
 8007472:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68da      	ldr	r2, [r3, #12]
 800747a:	4b60      	ldr	r3, [pc, #384]	@ (80075fc <HAL_ADC_Init+0x304>)
 800747c:	4013      	ands	r3, r2
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	6812      	ldr	r2, [r2, #0]
 8007482:	69b9      	ldr	r1, [r7, #24]
 8007484:	430b      	orrs	r3, r1
 8007486:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	430a      	orrs	r2, r1
 800749c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7ff ff15 	bl	80072d2 <LL_ADC_INJ_IsConversionOngoing>
 80074a8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d16d      	bne.n	800758c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d16a      	bne.n	800758c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80074ba:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80074c2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80074c4:	4313      	orrs	r3, r2
 80074c6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80074d2:	f023 0302 	bic.w	r3, r3, #2
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	6812      	ldr	r2, [r2, #0]
 80074da:	69b9      	ldr	r1, [r7, #24]
 80074dc:	430b      	orrs	r3, r1
 80074de:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d017      	beq.n	8007518 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	691a      	ldr	r2, [r3, #16]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80074f6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007500:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8007504:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	6911      	ldr	r1, [r2, #16]
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	6812      	ldr	r2, [r2, #0]
 8007510:	430b      	orrs	r3, r1
 8007512:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8007516:	e013      	b.n	8007540 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	691a      	ldr	r2, [r3, #16]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007526:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	6812      	ldr	r2, [r2, #0]
 8007534:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8007538:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800753c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007546:	2b01      	cmp	r3, #1
 8007548:	d118      	bne.n	800757c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	691b      	ldr	r3, [r3, #16]
 8007550:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007554:	f023 0304 	bic.w	r3, r3, #4
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007560:	4311      	orrs	r1, r2
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007566:	4311      	orrs	r1, r2
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800756c:	430a      	orrs	r2, r1
 800756e:	431a      	orrs	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f042 0201 	orr.w	r2, r2, #1
 8007578:	611a      	str	r2, [r3, #16]
 800757a:	e007      	b.n	800758c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	691a      	ldr	r2, [r3, #16]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f022 0201 	bic.w	r2, r2, #1
 800758a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	695b      	ldr	r3, [r3, #20]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d10c      	bne.n	80075ae <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800759a:	f023 010f 	bic.w	r1, r3, #15
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a1b      	ldr	r3, [r3, #32]
 80075a2:	1e5a      	subs	r2, r3, #1
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	430a      	orrs	r2, r1
 80075aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80075ac:	e007      	b.n	80075be <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f022 020f 	bic.w	r2, r2, #15
 80075bc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075c2:	f023 0303 	bic.w	r3, r3, #3
 80075c6:	f043 0201 	orr.w	r2, r3, #1
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80075ce:	e007      	b.n	80075e0 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075d4:	f043 0210 	orr.w	r2, r3, #16
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80075e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3724      	adds	r7, #36	@ 0x24
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd90      	pop	{r4, r7, pc}
 80075ea:	bf00      	nop
 80075ec:	20000004 	.word	0x20000004
 80075f0:	053e2d63 	.word	0x053e2d63
 80075f4:	50000100 	.word	0x50000100
 80075f8:	50000300 	.word	0x50000300
 80075fc:	fff04007 	.word	0xfff04007

08007600 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b086      	sub	sp, #24
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800760c:	4851      	ldr	r0, [pc, #324]	@ (8007754 <HAL_ADC_Start_DMA+0x154>)
 800760e:	f7ff fd59 	bl	80070c4 <LL_ADC_GetMultimode>
 8007612:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4618      	mov	r0, r3
 800761a:	f7ff fe33 	bl	8007284 <LL_ADC_REG_IsConversionOngoing>
 800761e:	4603      	mov	r3, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	f040 808f 	bne.w	8007744 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800762c:	2b01      	cmp	r3, #1
 800762e:	d101      	bne.n	8007634 <HAL_ADC_Start_DMA+0x34>
 8007630:	2302      	movs	r3, #2
 8007632:	e08a      	b.n	800774a <HAL_ADC_Start_DMA+0x14a>
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d005      	beq.n	800764e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	2b05      	cmp	r3, #5
 8007646:	d002      	beq.n	800764e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	2b09      	cmp	r3, #9
 800764c:	d173      	bne.n	8007736 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800764e:	68f8      	ldr	r0, [r7, #12]
 8007650:	f000 ffd0 	bl	80085f4 <ADC_Enable>
 8007654:	4603      	mov	r3, r0
 8007656:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8007658:	7dfb      	ldrb	r3, [r7, #23]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d166      	bne.n	800772c <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007662:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007666:	f023 0301 	bic.w	r3, r3, #1
 800766a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a38      	ldr	r2, [pc, #224]	@ (8007758 <HAL_ADC_Start_DMA+0x158>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d002      	beq.n	8007682 <HAL_ADC_Start_DMA+0x82>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	e001      	b.n	8007686 <HAL_ADC_Start_DMA+0x86>
 8007682:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	6812      	ldr	r2, [r2, #0]
 800768a:	4293      	cmp	r3, r2
 800768c:	d002      	beq.n	8007694 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d105      	bne.n	80076a0 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007698:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d006      	beq.n	80076ba <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076b0:	f023 0206 	bic.w	r2, r3, #6
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	661a      	str	r2, [r3, #96]	@ 0x60
 80076b8:	e002      	b.n	80076c0 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2200      	movs	r2, #0
 80076be:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076c4:	4a25      	ldr	r2, [pc, #148]	@ (800775c <HAL_ADC_Start_DMA+0x15c>)
 80076c6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076cc:	4a24      	ldr	r2, [pc, #144]	@ (8007760 <HAL_ADC_Start_DMA+0x160>)
 80076ce:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076d4:	4a23      	ldr	r2, [pc, #140]	@ (8007764 <HAL_ADC_Start_DMA+0x164>)
 80076d6:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	221c      	movs	r2, #28
 80076de:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2200      	movs	r2, #0
 80076e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f042 0210 	orr.w	r2, r2, #16
 80076f6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	68da      	ldr	r2, [r3, #12]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f042 0201 	orr.w	r2, r2, #1
 8007706:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	3340      	adds	r3, #64	@ 0x40
 8007712:	4619      	mov	r1, r3
 8007714:	68ba      	ldr	r2, [r7, #8]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f001 fd08 	bl	800912c <HAL_DMA_Start_IT>
 800771c:	4603      	mov	r3, r0
 800771e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4618      	mov	r0, r3
 8007726:	f7ff fd85 	bl	8007234 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800772a:	e00d      	b.n	8007748 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2200      	movs	r2, #0
 8007730:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8007734:	e008      	b.n	8007748 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8007742:	e001      	b.n	8007748 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007744:	2302      	movs	r3, #2
 8007746:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007748:	7dfb      	ldrb	r3, [r7, #23]
}
 800774a:	4618      	mov	r0, r3
 800774c:	3718      	adds	r7, #24
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	50000300 	.word	0x50000300
 8007758:	50000100 	.word	0x50000100
 800775c:	080087bf 	.word	0x080087bf
 8007760:	08008897 	.word	0x08008897
 8007764:	080088b3 	.word	0x080088b3

08007768 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007776:	2b01      	cmp	r3, #1
 8007778:	d101      	bne.n	800777e <HAL_ADC_Stop_DMA+0x16>
 800777a:	2302      	movs	r3, #2
 800777c:	e051      	b.n	8007822 <HAL_ADC_Stop_DMA+0xba>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2201      	movs	r2, #1
 8007782:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8007786:	2103      	movs	r1, #3
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 fe77 	bl	800847c <ADC_ConversionStop>
 800778e:	4603      	mov	r3, r0
 8007790:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8007792:	7bfb      	ldrb	r3, [r7, #15]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d13f      	bne.n	8007818 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68da      	ldr	r2, [r3, #12]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f022 0201 	bic.w	r2, r2, #1
 80077a6:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077ac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	d10f      	bne.n	80077d6 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077ba:	4618      	mov	r0, r3
 80077bc:	f001 fd31 	bl	8009222 <HAL_DMA_Abort>
 80077c0:	4603      	mov	r3, r0
 80077c2:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80077c4:	7bfb      	ldrb	r3, [r7, #15]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d005      	beq.n	80077d6 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	685a      	ldr	r2, [r3, #4]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f022 0210 	bic.w	r2, r2, #16
 80077e4:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80077e6:	7bfb      	ldrb	r3, [r7, #15]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d105      	bne.n	80077f8 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 ff87 	bl	8008700 <ADC_Disable>
 80077f2:	4603      	mov	r3, r0
 80077f4:	73fb      	strb	r3, [r7, #15]
 80077f6:	e002      	b.n	80077fe <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 ff81 	bl	8008700 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80077fe:	7bfb      	ldrb	r3, [r7, #15]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d109      	bne.n	8007818 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007808:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800780c:	f023 0301 	bic.w	r3, r3, #1
 8007810:	f043 0201 	orr.w	r2, r3, #1
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8007820:	7bfb      	ldrb	r3, [r7, #15]
}
 8007822:	4618      	mov	r0, r3
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
	...

0800782c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b08a      	sub	sp, #40	@ 0x28
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8007834:	2300      	movs	r3, #0
 8007836:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007848:	4883      	ldr	r0, [pc, #524]	@ (8007a58 <HAL_ADC_IRQHandler+0x22c>)
 800784a:	f7ff fc3b 	bl	80070c4 <LL_ADC_GetMultimode>
 800784e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	f003 0302 	and.w	r3, r3, #2
 8007856:	2b00      	cmp	r3, #0
 8007858:	d017      	beq.n	800788a <HAL_ADC_IRQHandler+0x5e>
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	f003 0302 	and.w	r3, r3, #2
 8007860:	2b00      	cmp	r3, #0
 8007862:	d012      	beq.n	800788a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007868:	f003 0310 	and.w	r3, r3, #16
 800786c:	2b00      	cmp	r3, #0
 800786e:	d105      	bne.n	800787c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007874:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f001 f8e9 	bl	8008a54 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2202      	movs	r2, #2
 8007888:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	f003 0304 	and.w	r3, r3, #4
 8007890:	2b00      	cmp	r3, #0
 8007892:	d004      	beq.n	800789e <HAL_ADC_IRQHandler+0x72>
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	f003 0304 	and.w	r3, r3, #4
 800789a:	2b00      	cmp	r3, #0
 800789c:	d10a      	bne.n	80078b4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f000 8085 	beq.w	80079b4 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	f003 0308 	and.w	r3, r3, #8
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d07f      	beq.n	80079b4 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078b8:	f003 0310 	and.w	r3, r3, #16
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d105      	bne.n	80078cc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078c4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4618      	mov	r0, r3
 80078d2:	f7ff fb55 	bl	8006f80 <LL_ADC_REG_IsTriggerSourceSWStart>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d064      	beq.n	80079a6 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a5e      	ldr	r2, [pc, #376]	@ (8007a5c <HAL_ADC_IRQHandler+0x230>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d002      	beq.n	80078ec <HAL_ADC_IRQHandler+0xc0>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	e001      	b.n	80078f0 <HAL_ADC_IRQHandler+0xc4>
 80078ec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	6812      	ldr	r2, [r2, #0]
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d008      	beq.n	800790a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d005      	beq.n	800790a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	2b05      	cmp	r3, #5
 8007902:	d002      	beq.n	800790a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	2b09      	cmp	r3, #9
 8007908:	d104      	bne.n	8007914 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	623b      	str	r3, [r7, #32]
 8007912:	e00d      	b.n	8007930 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a50      	ldr	r2, [pc, #320]	@ (8007a5c <HAL_ADC_IRQHandler+0x230>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d002      	beq.n	8007924 <HAL_ADC_IRQHandler+0xf8>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	e001      	b.n	8007928 <HAL_ADC_IRQHandler+0xfc>
 8007924:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8007928:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8007930:	6a3b      	ldr	r3, [r7, #32]
 8007932:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007936:	2b00      	cmp	r3, #0
 8007938:	d135      	bne.n	80079a6 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 0308 	and.w	r3, r3, #8
 8007944:	2b08      	cmp	r3, #8
 8007946:	d12e      	bne.n	80079a6 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4618      	mov	r0, r3
 800794e:	f7ff fc99 	bl	8007284 <LL_ADC_REG_IsConversionOngoing>
 8007952:	4603      	mov	r3, r0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d11a      	bne.n	800798e <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	685a      	ldr	r2, [r3, #4]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f022 020c 	bic.w	r2, r2, #12
 8007966:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800796c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007978:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800797c:	2b00      	cmp	r3, #0
 800797e:	d112      	bne.n	80079a6 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007984:	f043 0201 	orr.w	r2, r3, #1
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800798c:	e00b      	b.n	80079a6 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007992:	f043 0210 	orr.w	r2, r3, #16
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800799e:	f043 0201 	orr.w	r2, r3, #1
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f00e fa34 	bl	8015e14 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	220c      	movs	r2, #12
 80079b2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	f003 0320 	and.w	r3, r3, #32
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d004      	beq.n	80079c8 <HAL_ADC_IRQHandler+0x19c>
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	f003 0320 	and.w	r3, r3, #32
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d10b      	bne.n	80079e0 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f000 809e 	beq.w	8007b10 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f000 8098 	beq.w	8007b10 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079e4:	f003 0310 	and.w	r3, r3, #16
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d105      	bne.n	80079f8 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079f0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7ff fafe 	bl	8006ffe <LL_ADC_INJ_IsTriggerSourceSWStart>
 8007a02:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7ff fab9 	bl	8006f80 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007a0e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a11      	ldr	r2, [pc, #68]	@ (8007a5c <HAL_ADC_IRQHandler+0x230>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d002      	beq.n	8007a20 <HAL_ADC_IRQHandler+0x1f4>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	e001      	b.n	8007a24 <HAL_ADC_IRQHandler+0x1f8>
 8007a20:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	6812      	ldr	r2, [r2, #0]
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d008      	beq.n	8007a3e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d005      	beq.n	8007a3e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	2b06      	cmp	r3, #6
 8007a36:	d002      	beq.n	8007a3e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	2b07      	cmp	r3, #7
 8007a3c:	d104      	bne.n	8007a48 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	623b      	str	r3, [r7, #32]
 8007a46:	e011      	b.n	8007a6c <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a03      	ldr	r2, [pc, #12]	@ (8007a5c <HAL_ADC_IRQHandler+0x230>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d006      	beq.n	8007a60 <HAL_ADC_IRQHandler+0x234>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	e005      	b.n	8007a64 <HAL_ADC_IRQHandler+0x238>
 8007a58:	50000300 	.word	0x50000300
 8007a5c:	50000100 	.word	0x50000100
 8007a60:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8007a64:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d047      	beq.n	8007b02 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8007a72:	6a3b      	ldr	r3, [r7, #32]
 8007a74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d007      	beq.n	8007a8c <HAL_ADC_IRQHandler+0x260>
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d03f      	beq.n	8007b02 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8007a82:	6a3b      	ldr	r3, [r7, #32]
 8007a84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d13a      	bne.n	8007b02 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a96:	2b40      	cmp	r3, #64	@ 0x40
 8007a98:	d133      	bne.n	8007b02 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8007a9a:	6a3b      	ldr	r3, [r7, #32]
 8007a9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d12e      	bne.n	8007b02 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7ff fc12 	bl	80072d2 <LL_ADC_INJ_IsConversionOngoing>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d11a      	bne.n	8007aea <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	685a      	ldr	r2, [r3, #4]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007ac2:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ac8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d112      	bne.n	8007b02 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ae0:	f043 0201 	orr.w	r2, r3, #1
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007ae8:	e00b      	b.n	8007b02 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007aee:	f043 0210 	orr.w	r2, r3, #16
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007afa:	f043 0201 	orr.w	r2, r3, #1
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 ff7e 	bl	8008a04 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2260      	movs	r2, #96	@ 0x60
 8007b0e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d011      	beq.n	8007b3e <HAL_ADC_IRQHandler+0x312>
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00c      	beq.n	8007b3e <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b28:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 f89f 	bl	8007c74 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2280      	movs	r2, #128	@ 0x80
 8007b3c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d012      	beq.n	8007b6e <HAL_ADC_IRQHandler+0x342>
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00d      	beq.n	8007b6e <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b56:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 ff64 	bl	8008a2c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007b6c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d012      	beq.n	8007b9e <HAL_ADC_IRQHandler+0x372>
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00d      	beq.n	8007b9e <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b86:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 ff56 	bl	8008a40 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b9c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	f003 0310 	and.w	r3, r3, #16
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d036      	beq.n	8007c16 <HAL_ADC_IRQHandler+0x3ea>
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	f003 0310 	and.w	r3, r3, #16
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d031      	beq.n	8007c16 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d102      	bne.n	8007bc0 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bbe:	e014      	b.n	8007bea <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d008      	beq.n	8007bd8 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8007bc6:	4825      	ldr	r0, [pc, #148]	@ (8007c5c <HAL_ADC_IRQHandler+0x430>)
 8007bc8:	f7ff fa8a 	bl	80070e0 <LL_ADC_GetMultiDMATransfer>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00b      	beq.n	8007bea <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bd6:	e008      	b.n	8007bea <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	f003 0301 	and.w	r3, r3, #1
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d001      	beq.n	8007bea <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8007be6:	2301      	movs	r3, #1
 8007be8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8007bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d10e      	bne.n	8007c0e <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bf4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c00:	f043 0202 	orr.w	r2, r3, #2
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 f83d 	bl	8007c88 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	2210      	movs	r2, #16
 8007c14:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d018      	beq.n	8007c52 <HAL_ADC_IRQHandler+0x426>
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d013      	beq.n	8007c52 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c2e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c3a:	f043 0208 	orr.w	r2, r3, #8
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007c4a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 fee3 	bl	8008a18 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8007c52:	bf00      	nop
 8007c54:	3728      	adds	r7, #40	@ 0x28
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	50000300 	.word	0x50000300

08007c60 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007c68:	bf00      	nop
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8007c7c:	bf00      	nop
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007c90:	bf00      	nop
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b0b6      	sub	sp, #216	@ 0xd8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8007cac:	2300      	movs	r3, #0
 8007cae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d101      	bne.n	8007cbe <HAL_ADC_ConfigChannel+0x22>
 8007cba:	2302      	movs	r3, #2
 8007cbc:	e3c8      	b.n	8008450 <HAL_ADC_ConfigChannel+0x7b4>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7ff fada 	bl	8007284 <LL_ADC_REG_IsConversionOngoing>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	f040 83ad 	bne.w	8008432 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6818      	ldr	r0, [r3, #0]
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	6859      	ldr	r1, [r3, #4]
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	f7ff f95e 	bl	8006fa6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7ff fac8 	bl	8007284 <LL_ADC_REG_IsConversionOngoing>
 8007cf4:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f7ff fae8 	bl	80072d2 <LL_ADC_INJ_IsConversionOngoing>
 8007d02:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007d06:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	f040 81d9 	bne.w	80080c2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007d10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	f040 81d4 	bne.w	80080c2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d22:	d10f      	bne.n	8007d44 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6818      	ldr	r0, [r3, #0]
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	4619      	mov	r1, r3
 8007d30:	f7ff f978 	bl	8007024 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7ff f90c 	bl	8006f5a <LL_ADC_SetSamplingTimeCommonConfig>
 8007d42:	e00e      	b.n	8007d62 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6818      	ldr	r0, [r3, #0]
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	6819      	ldr	r1, [r3, #0]
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	461a      	mov	r2, r3
 8007d52:	f7ff f967 	bl	8007024 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2100      	movs	r1, #0
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7ff f8fc 	bl	8006f5a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	695a      	ldr	r2, [r3, #20]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	08db      	lsrs	r3, r3, #3
 8007d6e:	f003 0303 	and.w	r3, r3, #3
 8007d72:	005b      	lsls	r3, r3, #1
 8007d74:	fa02 f303 	lsl.w	r3, r2, r3
 8007d78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	2b04      	cmp	r3, #4
 8007d82:	d022      	beq.n	8007dca <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6818      	ldr	r0, [r3, #0]
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	6919      	ldr	r1, [r3, #16]
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007d94:	f7ff f856 	bl	8006e44 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6818      	ldr	r0, [r3, #0]
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	6919      	ldr	r1, [r3, #16]
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	461a      	mov	r2, r3
 8007da6:	f7ff f8a2 	bl	8006eee <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6818      	ldr	r0, [r3, #0]
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d102      	bne.n	8007dc0 <HAL_ADC_ConfigChannel+0x124>
 8007dba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007dbe:	e000      	b.n	8007dc2 <HAL_ADC_ConfigChannel+0x126>
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	f7ff f8ae 	bl	8006f24 <LL_ADC_SetOffsetSaturation>
 8007dc8:	e17b      	b.n	80080c2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2100      	movs	r1, #0
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7ff f85b 	bl	8006e8c <LL_ADC_GetOffsetChannel>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d10a      	bne.n	8007df6 <HAL_ADC_ConfigChannel+0x15a>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2100      	movs	r1, #0
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7ff f850 	bl	8006e8c <LL_ADC_GetOffsetChannel>
 8007dec:	4603      	mov	r3, r0
 8007dee:	0e9b      	lsrs	r3, r3, #26
 8007df0:	f003 021f 	and.w	r2, r3, #31
 8007df4:	e01e      	b.n	8007e34 <HAL_ADC_ConfigChannel+0x198>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f7ff f845 	bl	8006e8c <LL_ADC_GetOffsetChannel>
 8007e02:	4603      	mov	r3, r0
 8007e04:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007e0c:	fa93 f3a3 	rbit	r3, r3
 8007e10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007e14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007e18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007e1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d101      	bne.n	8007e28 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8007e24:	2320      	movs	r3, #32
 8007e26:	e004      	b.n	8007e32 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8007e28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007e2c:	fab3 f383 	clz	r3, r3
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d105      	bne.n	8007e4c <HAL_ADC_ConfigChannel+0x1b0>
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	0e9b      	lsrs	r3, r3, #26
 8007e46:	f003 031f 	and.w	r3, r3, #31
 8007e4a:	e018      	b.n	8007e7e <HAL_ADC_ConfigChannel+0x1e2>
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007e58:	fa93 f3a3 	rbit	r3, r3
 8007e5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8007e60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8007e68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d101      	bne.n	8007e74 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8007e70:	2320      	movs	r3, #32
 8007e72:	e004      	b.n	8007e7e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8007e74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007e78:	fab3 f383 	clz	r3, r3
 8007e7c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d106      	bne.n	8007e90 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	2200      	movs	r2, #0
 8007e88:	2100      	movs	r1, #0
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7ff f814 	bl	8006eb8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2101      	movs	r1, #1
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7fe fff8 	bl	8006e8c <LL_ADC_GetOffsetChannel>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d10a      	bne.n	8007ebc <HAL_ADC_ConfigChannel+0x220>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2101      	movs	r1, #1
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7fe ffed 	bl	8006e8c <LL_ADC_GetOffsetChannel>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	0e9b      	lsrs	r3, r3, #26
 8007eb6:	f003 021f 	and.w	r2, r3, #31
 8007eba:	e01e      	b.n	8007efa <HAL_ADC_ConfigChannel+0x25e>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2101      	movs	r1, #1
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7fe ffe2 	bl	8006e8c <LL_ADC_GetOffsetChannel>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ece:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007ed2:	fa93 f3a3 	rbit	r3, r3
 8007ed6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8007eda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007ede:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8007ee2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d101      	bne.n	8007eee <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8007eea:	2320      	movs	r3, #32
 8007eec:	e004      	b.n	8007ef8 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8007eee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007ef2:	fab3 f383 	clz	r3, r3
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d105      	bne.n	8007f12 <HAL_ADC_ConfigChannel+0x276>
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	0e9b      	lsrs	r3, r3, #26
 8007f0c:	f003 031f 	and.w	r3, r3, #31
 8007f10:	e018      	b.n	8007f44 <HAL_ADC_ConfigChannel+0x2a8>
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f1e:	fa93 f3a3 	rbit	r3, r3
 8007f22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8007f26:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007f2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8007f2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d101      	bne.n	8007f3a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8007f36:	2320      	movs	r3, #32
 8007f38:	e004      	b.n	8007f44 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8007f3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f3e:	fab3 f383 	clz	r3, r3
 8007f42:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d106      	bne.n	8007f56 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	2101      	movs	r1, #1
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7fe ffb1 	bl	8006eb8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2102      	movs	r1, #2
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f7fe ff95 	bl	8006e8c <LL_ADC_GetOffsetChannel>
 8007f62:	4603      	mov	r3, r0
 8007f64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d10a      	bne.n	8007f82 <HAL_ADC_ConfigChannel+0x2e6>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2102      	movs	r1, #2
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7fe ff8a 	bl	8006e8c <LL_ADC_GetOffsetChannel>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	0e9b      	lsrs	r3, r3, #26
 8007f7c:	f003 021f 	and.w	r2, r3, #31
 8007f80:	e01e      	b.n	8007fc0 <HAL_ADC_ConfigChannel+0x324>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	2102      	movs	r1, #2
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f7fe ff7f 	bl	8006e8c <LL_ADC_GetOffsetChannel>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f98:	fa93 f3a3 	rbit	r3, r3
 8007f9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8007fa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007fa4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8007fa8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d101      	bne.n	8007fb4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8007fb0:	2320      	movs	r3, #32
 8007fb2:	e004      	b.n	8007fbe <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8007fb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007fb8:	fab3 f383 	clz	r3, r3
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d105      	bne.n	8007fd8 <HAL_ADC_ConfigChannel+0x33c>
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	0e9b      	lsrs	r3, r3, #26
 8007fd2:	f003 031f 	and.w	r3, r3, #31
 8007fd6:	e016      	b.n	8008006 <HAL_ADC_ConfigChannel+0x36a>
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fe0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007fe4:	fa93 f3a3 	rbit	r3, r3
 8007fe8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8007fea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007fec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8007ff0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d101      	bne.n	8007ffc <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8007ff8:	2320      	movs	r3, #32
 8007ffa:	e004      	b.n	8008006 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8007ffc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008000:	fab3 f383 	clz	r3, r3
 8008004:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008006:	429a      	cmp	r2, r3
 8008008:	d106      	bne.n	8008018 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2200      	movs	r2, #0
 8008010:	2102      	movs	r1, #2
 8008012:	4618      	mov	r0, r3
 8008014:	f7fe ff50 	bl	8006eb8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2103      	movs	r1, #3
 800801e:	4618      	mov	r0, r3
 8008020:	f7fe ff34 	bl	8006e8c <LL_ADC_GetOffsetChannel>
 8008024:	4603      	mov	r3, r0
 8008026:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800802a:	2b00      	cmp	r3, #0
 800802c:	d10a      	bne.n	8008044 <HAL_ADC_ConfigChannel+0x3a8>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2103      	movs	r1, #3
 8008034:	4618      	mov	r0, r3
 8008036:	f7fe ff29 	bl	8006e8c <LL_ADC_GetOffsetChannel>
 800803a:	4603      	mov	r3, r0
 800803c:	0e9b      	lsrs	r3, r3, #26
 800803e:	f003 021f 	and.w	r2, r3, #31
 8008042:	e017      	b.n	8008074 <HAL_ADC_ConfigChannel+0x3d8>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2103      	movs	r1, #3
 800804a:	4618      	mov	r0, r3
 800804c:	f7fe ff1e 	bl	8006e8c <LL_ADC_GetOffsetChannel>
 8008050:	4603      	mov	r3, r0
 8008052:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008054:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008056:	fa93 f3a3 	rbit	r3, r3
 800805a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800805c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800805e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8008060:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008062:	2b00      	cmp	r3, #0
 8008064:	d101      	bne.n	800806a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8008066:	2320      	movs	r3, #32
 8008068:	e003      	b.n	8008072 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800806a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800806c:	fab3 f383 	clz	r3, r3
 8008070:	b2db      	uxtb	r3, r3
 8008072:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800807c:	2b00      	cmp	r3, #0
 800807e:	d105      	bne.n	800808c <HAL_ADC_ConfigChannel+0x3f0>
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	0e9b      	lsrs	r3, r3, #26
 8008086:	f003 031f 	and.w	r3, r3, #31
 800808a:	e011      	b.n	80080b0 <HAL_ADC_ConfigChannel+0x414>
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008092:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008094:	fa93 f3a3 	rbit	r3, r3
 8008098:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800809a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800809c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800809e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d101      	bne.n	80080a8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80080a4:	2320      	movs	r3, #32
 80080a6:	e003      	b.n	80080b0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80080a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080aa:	fab3 f383 	clz	r3, r3
 80080ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d106      	bne.n	80080c2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2200      	movs	r2, #0
 80080ba:	2103      	movs	r1, #3
 80080bc:	4618      	mov	r0, r3
 80080be:	f7fe fefb 	bl	8006eb8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7ff f88e 	bl	80071e8 <LL_ADC_IsEnabled>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	f040 8140 	bne.w	8008354 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6818      	ldr	r0, [r3, #0]
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	6819      	ldr	r1, [r3, #0]
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	461a      	mov	r2, r3
 80080e2:	f7fe ffcb 	bl	800707c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	4a8f      	ldr	r2, [pc, #572]	@ (8008328 <HAL_ADC_ConfigChannel+0x68c>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	f040 8131 	bne.w	8008354 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d10b      	bne.n	800811a <HAL_ADC_ConfigChannel+0x47e>
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	0e9b      	lsrs	r3, r3, #26
 8008108:	3301      	adds	r3, #1
 800810a:	f003 031f 	and.w	r3, r3, #31
 800810e:	2b09      	cmp	r3, #9
 8008110:	bf94      	ite	ls
 8008112:	2301      	movls	r3, #1
 8008114:	2300      	movhi	r3, #0
 8008116:	b2db      	uxtb	r3, r3
 8008118:	e019      	b.n	800814e <HAL_ADC_ConfigChannel+0x4b2>
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008120:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008122:	fa93 f3a3 	rbit	r3, r3
 8008126:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8008128:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800812a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800812c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800812e:	2b00      	cmp	r3, #0
 8008130:	d101      	bne.n	8008136 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8008132:	2320      	movs	r3, #32
 8008134:	e003      	b.n	800813e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8008136:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008138:	fab3 f383 	clz	r3, r3
 800813c:	b2db      	uxtb	r3, r3
 800813e:	3301      	adds	r3, #1
 8008140:	f003 031f 	and.w	r3, r3, #31
 8008144:	2b09      	cmp	r3, #9
 8008146:	bf94      	ite	ls
 8008148:	2301      	movls	r3, #1
 800814a:	2300      	movhi	r3, #0
 800814c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800814e:	2b00      	cmp	r3, #0
 8008150:	d079      	beq.n	8008246 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800815a:	2b00      	cmp	r3, #0
 800815c:	d107      	bne.n	800816e <HAL_ADC_ConfigChannel+0x4d2>
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	0e9b      	lsrs	r3, r3, #26
 8008164:	3301      	adds	r3, #1
 8008166:	069b      	lsls	r3, r3, #26
 8008168:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800816c:	e015      	b.n	800819a <HAL_ADC_ConfigChannel+0x4fe>
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008174:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008176:	fa93 f3a3 	rbit	r3, r3
 800817a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800817c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800817e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8008180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008182:	2b00      	cmp	r3, #0
 8008184:	d101      	bne.n	800818a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8008186:	2320      	movs	r3, #32
 8008188:	e003      	b.n	8008192 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800818a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800818c:	fab3 f383 	clz	r3, r3
 8008190:	b2db      	uxtb	r3, r3
 8008192:	3301      	adds	r3, #1
 8008194:	069b      	lsls	r3, r3, #26
 8008196:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d109      	bne.n	80081ba <HAL_ADC_ConfigChannel+0x51e>
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	0e9b      	lsrs	r3, r3, #26
 80081ac:	3301      	adds	r3, #1
 80081ae:	f003 031f 	and.w	r3, r3, #31
 80081b2:	2101      	movs	r1, #1
 80081b4:	fa01 f303 	lsl.w	r3, r1, r3
 80081b8:	e017      	b.n	80081ea <HAL_ADC_ConfigChannel+0x54e>
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80081c2:	fa93 f3a3 	rbit	r3, r3
 80081c6:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80081c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80081ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80081cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d101      	bne.n	80081d6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80081d2:	2320      	movs	r3, #32
 80081d4:	e003      	b.n	80081de <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80081d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081d8:	fab3 f383 	clz	r3, r3
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	3301      	adds	r3, #1
 80081e0:	f003 031f 	and.w	r3, r3, #31
 80081e4:	2101      	movs	r1, #1
 80081e6:	fa01 f303 	lsl.w	r3, r1, r3
 80081ea:	ea42 0103 	orr.w	r1, r2, r3
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d10a      	bne.n	8008210 <HAL_ADC_ConfigChannel+0x574>
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	0e9b      	lsrs	r3, r3, #26
 8008200:	3301      	adds	r3, #1
 8008202:	f003 021f 	and.w	r2, r3, #31
 8008206:	4613      	mov	r3, r2
 8008208:	005b      	lsls	r3, r3, #1
 800820a:	4413      	add	r3, r2
 800820c:	051b      	lsls	r3, r3, #20
 800820e:	e018      	b.n	8008242 <HAL_ADC_ConfigChannel+0x5a6>
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008218:	fa93 f3a3 	rbit	r3, r3
 800821c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800821e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008220:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8008222:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008224:	2b00      	cmp	r3, #0
 8008226:	d101      	bne.n	800822c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8008228:	2320      	movs	r3, #32
 800822a:	e003      	b.n	8008234 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800822c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800822e:	fab3 f383 	clz	r3, r3
 8008232:	b2db      	uxtb	r3, r3
 8008234:	3301      	adds	r3, #1
 8008236:	f003 021f 	and.w	r2, r3, #31
 800823a:	4613      	mov	r3, r2
 800823c:	005b      	lsls	r3, r3, #1
 800823e:	4413      	add	r3, r2
 8008240:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008242:	430b      	orrs	r3, r1
 8008244:	e081      	b.n	800834a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800824e:	2b00      	cmp	r3, #0
 8008250:	d107      	bne.n	8008262 <HAL_ADC_ConfigChannel+0x5c6>
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	0e9b      	lsrs	r3, r3, #26
 8008258:	3301      	adds	r3, #1
 800825a:	069b      	lsls	r3, r3, #26
 800825c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008260:	e015      	b.n	800828e <HAL_ADC_ConfigChannel+0x5f2>
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800826a:	fa93 f3a3 	rbit	r3, r3
 800826e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8008270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008272:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8008274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008276:	2b00      	cmp	r3, #0
 8008278:	d101      	bne.n	800827e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800827a:	2320      	movs	r3, #32
 800827c:	e003      	b.n	8008286 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800827e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008280:	fab3 f383 	clz	r3, r3
 8008284:	b2db      	uxtb	r3, r3
 8008286:	3301      	adds	r3, #1
 8008288:	069b      	lsls	r3, r3, #26
 800828a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008296:	2b00      	cmp	r3, #0
 8008298:	d109      	bne.n	80082ae <HAL_ADC_ConfigChannel+0x612>
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	0e9b      	lsrs	r3, r3, #26
 80082a0:	3301      	adds	r3, #1
 80082a2:	f003 031f 	and.w	r3, r3, #31
 80082a6:	2101      	movs	r1, #1
 80082a8:	fa01 f303 	lsl.w	r3, r1, r3
 80082ac:	e017      	b.n	80082de <HAL_ADC_ConfigChannel+0x642>
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082b4:	6a3b      	ldr	r3, [r7, #32]
 80082b6:	fa93 f3a3 	rbit	r3, r3
 80082ba:	61fb      	str	r3, [r7, #28]
  return result;
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80082c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d101      	bne.n	80082ca <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80082c6:	2320      	movs	r3, #32
 80082c8:	e003      	b.n	80082d2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80082ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082cc:	fab3 f383 	clz	r3, r3
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	3301      	adds	r3, #1
 80082d4:	f003 031f 	and.w	r3, r3, #31
 80082d8:	2101      	movs	r1, #1
 80082da:	fa01 f303 	lsl.w	r3, r1, r3
 80082de:	ea42 0103 	orr.w	r1, r2, r3
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d10d      	bne.n	800830a <HAL_ADC_ConfigChannel+0x66e>
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	0e9b      	lsrs	r3, r3, #26
 80082f4:	3301      	adds	r3, #1
 80082f6:	f003 021f 	and.w	r2, r3, #31
 80082fa:	4613      	mov	r3, r2
 80082fc:	005b      	lsls	r3, r3, #1
 80082fe:	4413      	add	r3, r2
 8008300:	3b1e      	subs	r3, #30
 8008302:	051b      	lsls	r3, r3, #20
 8008304:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008308:	e01e      	b.n	8008348 <HAL_ADC_ConfigChannel+0x6ac>
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	fa93 f3a3 	rbit	r3, r3
 8008316:	613b      	str	r3, [r7, #16]
  return result;
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d104      	bne.n	800832c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8008322:	2320      	movs	r3, #32
 8008324:	e006      	b.n	8008334 <HAL_ADC_ConfigChannel+0x698>
 8008326:	bf00      	nop
 8008328:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	fab3 f383 	clz	r3, r3
 8008332:	b2db      	uxtb	r3, r3
 8008334:	3301      	adds	r3, #1
 8008336:	f003 021f 	and.w	r2, r3, #31
 800833a:	4613      	mov	r3, r2
 800833c:	005b      	lsls	r3, r3, #1
 800833e:	4413      	add	r3, r2
 8008340:	3b1e      	subs	r3, #30
 8008342:	051b      	lsls	r3, r3, #20
 8008344:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008348:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800834a:	683a      	ldr	r2, [r7, #0]
 800834c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800834e:	4619      	mov	r1, r3
 8008350:	f7fe fe68 	bl	8007024 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	4b3f      	ldr	r3, [pc, #252]	@ (8008458 <HAL_ADC_ConfigChannel+0x7bc>)
 800835a:	4013      	ands	r3, r2
 800835c:	2b00      	cmp	r3, #0
 800835e:	d071      	beq.n	8008444 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008360:	483e      	ldr	r0, [pc, #248]	@ (800845c <HAL_ADC_ConfigChannel+0x7c0>)
 8008362:	f7fe fd61 	bl	8006e28 <LL_ADC_GetCommonPathInternalCh>
 8008366:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a3c      	ldr	r2, [pc, #240]	@ (8008460 <HAL_ADC_ConfigChannel+0x7c4>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d004      	beq.n	800837e <HAL_ADC_ConfigChannel+0x6e2>
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a3a      	ldr	r2, [pc, #232]	@ (8008464 <HAL_ADC_ConfigChannel+0x7c8>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d127      	bne.n	80083ce <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800837e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008382:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008386:	2b00      	cmp	r3, #0
 8008388:	d121      	bne.n	80083ce <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008392:	d157      	bne.n	8008444 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008394:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008398:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800839c:	4619      	mov	r1, r3
 800839e:	482f      	ldr	r0, [pc, #188]	@ (800845c <HAL_ADC_ConfigChannel+0x7c0>)
 80083a0:	f7fe fd2f 	bl	8006e02 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80083a4:	4b30      	ldr	r3, [pc, #192]	@ (8008468 <HAL_ADC_ConfigChannel+0x7cc>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	099b      	lsrs	r3, r3, #6
 80083aa:	4a30      	ldr	r2, [pc, #192]	@ (800846c <HAL_ADC_ConfigChannel+0x7d0>)
 80083ac:	fba2 2303 	umull	r2, r3, r2, r3
 80083b0:	099b      	lsrs	r3, r3, #6
 80083b2:	1c5a      	adds	r2, r3, #1
 80083b4:	4613      	mov	r3, r2
 80083b6:	005b      	lsls	r3, r3, #1
 80083b8:	4413      	add	r3, r2
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80083be:	e002      	b.n	80083c6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	3b01      	subs	r3, #1
 80083c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d1f9      	bne.n	80083c0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80083cc:	e03a      	b.n	8008444 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a27      	ldr	r2, [pc, #156]	@ (8008470 <HAL_ADC_ConfigChannel+0x7d4>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d113      	bne.n	8008400 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80083d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80083dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d10d      	bne.n	8008400 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a22      	ldr	r2, [pc, #136]	@ (8008474 <HAL_ADC_ConfigChannel+0x7d8>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d02a      	beq.n	8008444 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80083ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80083f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80083f6:	4619      	mov	r1, r3
 80083f8:	4818      	ldr	r0, [pc, #96]	@ (800845c <HAL_ADC_ConfigChannel+0x7c0>)
 80083fa:	f7fe fd02 	bl	8006e02 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80083fe:	e021      	b.n	8008444 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a1c      	ldr	r2, [pc, #112]	@ (8008478 <HAL_ADC_ConfigChannel+0x7dc>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d11c      	bne.n	8008444 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800840a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800840e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008412:	2b00      	cmp	r3, #0
 8008414:	d116      	bne.n	8008444 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a16      	ldr	r2, [pc, #88]	@ (8008474 <HAL_ADC_ConfigChannel+0x7d8>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d011      	beq.n	8008444 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008420:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008424:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008428:	4619      	mov	r1, r3
 800842a:	480c      	ldr	r0, [pc, #48]	@ (800845c <HAL_ADC_ConfigChannel+0x7c0>)
 800842c:	f7fe fce9 	bl	8006e02 <LL_ADC_SetCommonPathInternalCh>
 8008430:	e008      	b.n	8008444 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008436:	f043 0220 	orr.w	r2, r3, #32
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800844c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8008450:	4618      	mov	r0, r3
 8008452:	37d8      	adds	r7, #216	@ 0xd8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	80080000 	.word	0x80080000
 800845c:	50000300 	.word	0x50000300
 8008460:	c3210000 	.word	0xc3210000
 8008464:	90c00010 	.word	0x90c00010
 8008468:	20000004 	.word	0x20000004
 800846c:	053e2d63 	.word	0x053e2d63
 8008470:	c7520000 	.word	0xc7520000
 8008474:	50000100 	.word	0x50000100
 8008478:	cb840000 	.word	0xcb840000

0800847c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b088      	sub	sp, #32
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8008486:	2300      	movs	r3, #0
 8008488:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4618      	mov	r0, r3
 8008494:	f7fe fef6 	bl	8007284 <LL_ADC_REG_IsConversionOngoing>
 8008498:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4618      	mov	r0, r3
 80084a0:	f7fe ff17 	bl	80072d2 <LL_ADC_INJ_IsConversionOngoing>
 80084a4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d103      	bne.n	80084b4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	f000 8098 	beq.w	80085e4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d02a      	beq.n	8008518 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	7f5b      	ldrb	r3, [r3, #29]
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d126      	bne.n	8008518 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	7f1b      	ldrb	r3, [r3, #28]
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d122      	bne.n	8008518 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80084d2:	2301      	movs	r3, #1
 80084d4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80084d6:	e014      	b.n	8008502 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	4a45      	ldr	r2, [pc, #276]	@ (80085f0 <ADC_ConversionStop+0x174>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d90d      	bls.n	80084fc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084e4:	f043 0210 	orr.w	r2, r3, #16
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084f0:	f043 0201 	orr.w	r2, r3, #1
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80084f8:	2301      	movs	r3, #1
 80084fa:	e074      	b.n	80085e6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	3301      	adds	r3, #1
 8008500:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800850c:	2b40      	cmp	r3, #64	@ 0x40
 800850e:	d1e3      	bne.n	80084d8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2240      	movs	r2, #64	@ 0x40
 8008516:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8008518:	69bb      	ldr	r3, [r7, #24]
 800851a:	2b02      	cmp	r3, #2
 800851c:	d014      	beq.n	8008548 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4618      	mov	r0, r3
 8008524:	f7fe feae 	bl	8007284 <LL_ADC_REG_IsConversionOngoing>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d00c      	beq.n	8008548 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4618      	mov	r0, r3
 8008534:	f7fe fe6b 	bl	800720e <LL_ADC_IsDisableOngoing>
 8008538:	4603      	mov	r3, r0
 800853a:	2b00      	cmp	r3, #0
 800853c:	d104      	bne.n	8008548 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4618      	mov	r0, r3
 8008544:	f7fe fe8a 	bl	800725c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	2b01      	cmp	r3, #1
 800854c:	d014      	beq.n	8008578 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4618      	mov	r0, r3
 8008554:	f7fe febd 	bl	80072d2 <LL_ADC_INJ_IsConversionOngoing>
 8008558:	4603      	mov	r3, r0
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00c      	beq.n	8008578 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4618      	mov	r0, r3
 8008564:	f7fe fe53 	bl	800720e <LL_ADC_IsDisableOngoing>
 8008568:	4603      	mov	r3, r0
 800856a:	2b00      	cmp	r3, #0
 800856c:	d104      	bne.n	8008578 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4618      	mov	r0, r3
 8008574:	f7fe fe99 	bl	80072aa <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	2b02      	cmp	r3, #2
 800857c:	d005      	beq.n	800858a <ADC_ConversionStop+0x10e>
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	2b03      	cmp	r3, #3
 8008582:	d105      	bne.n	8008590 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8008584:	230c      	movs	r3, #12
 8008586:	617b      	str	r3, [r7, #20]
        break;
 8008588:	e005      	b.n	8008596 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800858a:	2308      	movs	r3, #8
 800858c:	617b      	str	r3, [r7, #20]
        break;
 800858e:	e002      	b.n	8008596 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8008590:	2304      	movs	r3, #4
 8008592:	617b      	str	r3, [r7, #20]
        break;
 8008594:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8008596:	f7fe fbf3 	bl	8006d80 <HAL_GetTick>
 800859a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800859c:	e01b      	b.n	80085d6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800859e:	f7fe fbef 	bl	8006d80 <HAL_GetTick>
 80085a2:	4602      	mov	r2, r0
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	1ad3      	subs	r3, r2, r3
 80085a8:	2b05      	cmp	r3, #5
 80085aa:	d914      	bls.n	80085d6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	689a      	ldr	r2, [r3, #8]
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	4013      	ands	r3, r2
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00d      	beq.n	80085d6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085be:	f043 0210 	orr.w	r2, r3, #16
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085ca:	f043 0201 	orr.w	r2, r3, #1
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	e007      	b.n	80085e6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	689a      	ldr	r2, [r3, #8]
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	4013      	ands	r3, r2
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d1dc      	bne.n	800859e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3720      	adds	r7, #32
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	a33fffff 	.word	0xa33fffff

080085f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80085fc:	2300      	movs	r3, #0
 80085fe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4618      	mov	r0, r3
 8008606:	f7fe fdef 	bl	80071e8 <LL_ADC_IsEnabled>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d169      	bne.n	80086e4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	689a      	ldr	r2, [r3, #8]
 8008616:	4b36      	ldr	r3, [pc, #216]	@ (80086f0 <ADC_Enable+0xfc>)
 8008618:	4013      	ands	r3, r2
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00d      	beq.n	800863a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008622:	f043 0210 	orr.w	r2, r3, #16
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800862e:	f043 0201 	orr.w	r2, r3, #1
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	e055      	b.n	80086e6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4618      	mov	r0, r3
 8008640:	f7fe fdaa 	bl	8007198 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8008644:	482b      	ldr	r0, [pc, #172]	@ (80086f4 <ADC_Enable+0x100>)
 8008646:	f7fe fbef 	bl	8006e28 <LL_ADC_GetCommonPathInternalCh>
 800864a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800864c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8008650:	2b00      	cmp	r3, #0
 8008652:	d013      	beq.n	800867c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008654:	4b28      	ldr	r3, [pc, #160]	@ (80086f8 <ADC_Enable+0x104>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	099b      	lsrs	r3, r3, #6
 800865a:	4a28      	ldr	r2, [pc, #160]	@ (80086fc <ADC_Enable+0x108>)
 800865c:	fba2 2303 	umull	r2, r3, r2, r3
 8008660:	099b      	lsrs	r3, r3, #6
 8008662:	1c5a      	adds	r2, r3, #1
 8008664:	4613      	mov	r3, r2
 8008666:	005b      	lsls	r3, r3, #1
 8008668:	4413      	add	r3, r2
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800866e:	e002      	b.n	8008676 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	3b01      	subs	r3, #1
 8008674:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d1f9      	bne.n	8008670 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800867c:	f7fe fb80 	bl	8006d80 <HAL_GetTick>
 8008680:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008682:	e028      	b.n	80086d6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4618      	mov	r0, r3
 800868a:	f7fe fdad 	bl	80071e8 <LL_ADC_IsEnabled>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d104      	bne.n	800869e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4618      	mov	r0, r3
 800869a:	f7fe fd7d 	bl	8007198 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800869e:	f7fe fb6f 	bl	8006d80 <HAL_GetTick>
 80086a2:	4602      	mov	r2, r0
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	1ad3      	subs	r3, r2, r3
 80086a8:	2b02      	cmp	r3, #2
 80086aa:	d914      	bls.n	80086d6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f003 0301 	and.w	r3, r3, #1
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d00d      	beq.n	80086d6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086be:	f043 0210 	orr.w	r2, r3, #16
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086ca:	f043 0201 	orr.w	r2, r3, #1
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	e007      	b.n	80086e6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f003 0301 	and.w	r3, r3, #1
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d1cf      	bne.n	8008684 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3710      	adds	r7, #16
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	8000003f 	.word	0x8000003f
 80086f4:	50000300 	.word	0x50000300
 80086f8:	20000004 	.word	0x20000004
 80086fc:	053e2d63 	.word	0x053e2d63

08008700 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4618      	mov	r0, r3
 800870e:	f7fe fd7e 	bl	800720e <LL_ADC_IsDisableOngoing>
 8008712:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4618      	mov	r0, r3
 800871a:	f7fe fd65 	bl	80071e8 <LL_ADC_IsEnabled>
 800871e:	4603      	mov	r3, r0
 8008720:	2b00      	cmp	r3, #0
 8008722:	d047      	beq.n	80087b4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d144      	bne.n	80087b4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	f003 030d 	and.w	r3, r3, #13
 8008734:	2b01      	cmp	r3, #1
 8008736:	d10c      	bne.n	8008752 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4618      	mov	r0, r3
 800873e:	f7fe fd3f 	bl	80071c0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2203      	movs	r2, #3
 8008748:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800874a:	f7fe fb19 	bl	8006d80 <HAL_GetTick>
 800874e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008750:	e029      	b.n	80087a6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008756:	f043 0210 	orr.w	r2, r3, #16
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008762:	f043 0201 	orr.w	r2, r3, #1
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	e023      	b.n	80087b6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800876e:	f7fe fb07 	bl	8006d80 <HAL_GetTick>
 8008772:	4602      	mov	r2, r0
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	1ad3      	subs	r3, r2, r3
 8008778:	2b02      	cmp	r3, #2
 800877a:	d914      	bls.n	80087a6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	f003 0301 	and.w	r3, r3, #1
 8008786:	2b00      	cmp	r3, #0
 8008788:	d00d      	beq.n	80087a6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800878e:	f043 0210 	orr.w	r2, r3, #16
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800879a:	f043 0201 	orr.w	r2, r3, #1
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	e007      	b.n	80087b6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	f003 0301 	and.w	r3, r3, #1
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d1dc      	bne.n	800876e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}

080087be <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b084      	sub	sp, #16
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ca:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087d0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d14b      	bne.n	8008870 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087dc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f003 0308 	and.w	r3, r3, #8
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d021      	beq.n	8008836 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7fe fbc2 	bl	8006f80 <LL_ADC_REG_IsTriggerSourceSWStart>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d032      	beq.n	8008868 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800880c:	2b00      	cmp	r3, #0
 800880e:	d12b      	bne.n	8008868 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008814:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008820:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008824:	2b00      	cmp	r3, #0
 8008826:	d11f      	bne.n	8008868 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800882c:	f043 0201 	orr.w	r2, r3, #1
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008834:	e018      	b.n	8008868 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	f003 0302 	and.w	r3, r3, #2
 8008840:	2b00      	cmp	r3, #0
 8008842:	d111      	bne.n	8008868 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008848:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008854:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008858:	2b00      	cmp	r3, #0
 800885a:	d105      	bne.n	8008868 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008860:	f043 0201 	orr.w	r2, r3, #1
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f00d fad3 	bl	8015e14 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800886e:	e00e      	b.n	800888e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008874:	f003 0310 	and.w	r3, r3, #16
 8008878:	2b00      	cmp	r3, #0
 800887a:	d003      	beq.n	8008884 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800887c:	68f8      	ldr	r0, [r7, #12]
 800887e:	f7ff fa03 	bl	8007c88 <HAL_ADC_ErrorCallback>
}
 8008882:	e004      	b.n	800888e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	4798      	blx	r3
}
 800888e:	bf00      	nop
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b084      	sub	sp, #16
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088a2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80088a4:	68f8      	ldr	r0, [r7, #12]
 80088a6:	f7ff f9db 	bl	8007c60 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80088aa:	bf00      	nop
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}

080088b2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b084      	sub	sp, #16
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088be:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088c4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088d0:	f043 0204 	orr.w	r2, r3, #4
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80088d8:	68f8      	ldr	r0, [r7, #12]
 80088da:	f7ff f9d5 	bl	8007c88 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80088de:	bf00      	nop
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <LL_ADC_StartCalibration>:
{
 80088e6:	b480      	push	{r7}
 80088e8:	b083      	sub	sp, #12
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
 80088ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80088f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80088fc:	683a      	ldr	r2, [r7, #0]
 80088fe:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8008902:	4313      	orrs	r3, r2
 8008904:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	609a      	str	r2, [r3, #8]
}
 800890c:	bf00      	nop
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <LL_ADC_IsCalibrationOnGoing>:
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008928:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800892c:	d101      	bne.n	8008932 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800892e:	2301      	movs	r3, #1
 8008930:	e000      	b.n	8008934 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	370c      	adds	r7, #12
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800894a:	2300      	movs	r3, #0
 800894c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8008954:	2b01      	cmp	r3, #1
 8008956:	d101      	bne.n	800895c <HAL_ADCEx_Calibration_Start+0x1c>
 8008958:	2302      	movs	r3, #2
 800895a:	e04d      	b.n	80089f8 <HAL_ADCEx_Calibration_Start+0xb8>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f7ff fecb 	bl	8008700 <ADC_Disable>
 800896a:	4603      	mov	r3, r0
 800896c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800896e:	7bfb      	ldrb	r3, [r7, #15]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d136      	bne.n	80089e2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008978:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800897c:	f023 0302 	bic.w	r3, r3, #2
 8008980:	f043 0202 	orr.w	r2, r3, #2
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	6839      	ldr	r1, [r7, #0]
 800898e:	4618      	mov	r0, r3
 8008990:	f7ff ffa9 	bl	80088e6 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008994:	e014      	b.n	80089c0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	3301      	adds	r3, #1
 800899a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	4a18      	ldr	r2, [pc, #96]	@ (8008a00 <HAL_ADCEx_Calibration_Start+0xc0>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d90d      	bls.n	80089c0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089a8:	f023 0312 	bic.w	r3, r3, #18
 80089ac:	f043 0210 	orr.w	r2, r3, #16
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80089bc:	2301      	movs	r3, #1
 80089be:	e01b      	b.n	80089f8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4618      	mov	r0, r3
 80089c6:	f7ff ffa7 	bl	8008918 <LL_ADC_IsCalibrationOnGoing>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d1e2      	bne.n	8008996 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089d4:	f023 0303 	bic.w	r3, r3, #3
 80089d8:	f043 0201 	orr.w	r2, r3, #1
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	65da      	str	r2, [r3, #92]	@ 0x5c
 80089e0:	e005      	b.n	80089ee <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089e6:	f043 0210 	orr.w	r2, r3, #16
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80089f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	0004de01 	.word	0x0004de01

08008a04 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b083      	sub	sp, #12
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8008a0c:	bf00      	nop
 8008a0e:	370c      	adds	r7, #12
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr

08008a18 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8008a20:	bf00      	nop
 8008a22:	370c      	adds	r7, #12
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8008a34:	bf00      	nop
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8008a48:	bf00      	nop
 8008a4a:	370c      	adds	r7, #12
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr

08008a54 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8008a5c:	bf00      	nop
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <__NVIC_SetPriorityGrouping>:
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b085      	sub	sp, #20
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f003 0307 	and.w	r3, r3, #7
 8008a76:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008a78:	4b0c      	ldr	r3, [pc, #48]	@ (8008aac <__NVIC_SetPriorityGrouping+0x44>)
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008a7e:	68ba      	ldr	r2, [r7, #8]
 8008a80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008a84:	4013      	ands	r3, r2
 8008a86:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008a90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008a9a:	4a04      	ldr	r2, [pc, #16]	@ (8008aac <__NVIC_SetPriorityGrouping+0x44>)
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	60d3      	str	r3, [r2, #12]
}
 8008aa0:	bf00      	nop
 8008aa2:	3714      	adds	r7, #20
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr
 8008aac:	e000ed00 	.word	0xe000ed00

08008ab0 <__NVIC_GetPriorityGrouping>:
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008ab4:	4b04      	ldr	r3, [pc, #16]	@ (8008ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	0a1b      	lsrs	r3, r3, #8
 8008aba:	f003 0307 	and.w	r3, r3, #7
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr
 8008ac8:	e000ed00 	.word	0xe000ed00

08008acc <__NVIC_EnableIRQ>:
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	db0b      	blt.n	8008af6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008ade:	79fb      	ldrb	r3, [r7, #7]
 8008ae0:	f003 021f 	and.w	r2, r3, #31
 8008ae4:	4907      	ldr	r1, [pc, #28]	@ (8008b04 <__NVIC_EnableIRQ+0x38>)
 8008ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008aea:	095b      	lsrs	r3, r3, #5
 8008aec:	2001      	movs	r0, #1
 8008aee:	fa00 f202 	lsl.w	r2, r0, r2
 8008af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008af6:	bf00      	nop
 8008af8:	370c      	adds	r7, #12
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr
 8008b02:	bf00      	nop
 8008b04:	e000e100 	.word	0xe000e100

08008b08 <__NVIC_SetPriority>:
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	4603      	mov	r3, r0
 8008b10:	6039      	str	r1, [r7, #0]
 8008b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	db0a      	blt.n	8008b32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	b2da      	uxtb	r2, r3
 8008b20:	490c      	ldr	r1, [pc, #48]	@ (8008b54 <__NVIC_SetPriority+0x4c>)
 8008b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b26:	0112      	lsls	r2, r2, #4
 8008b28:	b2d2      	uxtb	r2, r2
 8008b2a:	440b      	add	r3, r1
 8008b2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008b30:	e00a      	b.n	8008b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	b2da      	uxtb	r2, r3
 8008b36:	4908      	ldr	r1, [pc, #32]	@ (8008b58 <__NVIC_SetPriority+0x50>)
 8008b38:	79fb      	ldrb	r3, [r7, #7]
 8008b3a:	f003 030f 	and.w	r3, r3, #15
 8008b3e:	3b04      	subs	r3, #4
 8008b40:	0112      	lsls	r2, r2, #4
 8008b42:	b2d2      	uxtb	r2, r2
 8008b44:	440b      	add	r3, r1
 8008b46:	761a      	strb	r2, [r3, #24]
}
 8008b48:	bf00      	nop
 8008b4a:	370c      	adds	r7, #12
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr
 8008b54:	e000e100 	.word	0xe000e100
 8008b58:	e000ed00 	.word	0xe000ed00

08008b5c <NVIC_EncodePriority>:
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b089      	sub	sp, #36	@ 0x24
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f003 0307 	and.w	r3, r3, #7
 8008b6e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	f1c3 0307 	rsb	r3, r3, #7
 8008b76:	2b04      	cmp	r3, #4
 8008b78:	bf28      	it	cs
 8008b7a:	2304      	movcs	r3, #4
 8008b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	3304      	adds	r3, #4
 8008b82:	2b06      	cmp	r3, #6
 8008b84:	d902      	bls.n	8008b8c <NVIC_EncodePriority+0x30>
 8008b86:	69fb      	ldr	r3, [r7, #28]
 8008b88:	3b03      	subs	r3, #3
 8008b8a:	e000      	b.n	8008b8e <NVIC_EncodePriority+0x32>
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	fa02 f303 	lsl.w	r3, r2, r3
 8008b9a:	43da      	mvns	r2, r3
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	401a      	ands	r2, r3
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008ba4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	fa01 f303 	lsl.w	r3, r1, r3
 8008bae:	43d9      	mvns	r1, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008bb4:	4313      	orrs	r3, r2
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3724      	adds	r7, #36	@ 0x24
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr

08008bc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b082      	sub	sp, #8
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f7ff ff4c 	bl	8008a68 <__NVIC_SetPriorityGrouping>
}
 8008bd0:	bf00      	nop
 8008bd2:	3708      	adds	r7, #8
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b086      	sub	sp, #24
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	4603      	mov	r3, r0
 8008be0:	60b9      	str	r1, [r7, #8]
 8008be2:	607a      	str	r2, [r7, #4]
 8008be4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008be6:	f7ff ff63 	bl	8008ab0 <__NVIC_GetPriorityGrouping>
 8008bea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	68b9      	ldr	r1, [r7, #8]
 8008bf0:	6978      	ldr	r0, [r7, #20]
 8008bf2:	f7ff ffb3 	bl	8008b5c <NVIC_EncodePriority>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bfc:	4611      	mov	r1, r2
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7ff ff82 	bl	8008b08 <__NVIC_SetPriority>
}
 8008c04:	bf00      	nop
 8008c06:	3718      	adds	r7, #24
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	4603      	mov	r3, r0
 8008c14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7ff ff56 	bl	8008acc <__NVIC_EnableIRQ>
}
 8008c20:	bf00      	nop
 8008c22:	3708      	adds	r7, #8
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d101      	bne.n	8008c3a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8008c36:	2301      	movs	r3, #1
 8008c38:	e014      	b.n	8008c64 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	791b      	ldrb	r3, [r3, #4]
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d105      	bne.n	8008c50 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f7fb fdae 	bl	80047ac <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2202      	movs	r2, #2
 8008c54:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8008c62:	2300      	movs	r3, #0
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3708      	adds	r7, #8
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b08a      	sub	sp, #40	@ 0x28
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	60b9      	str	r1, [r7, #8]
 8008c76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d002      	beq.n	8008c88 <HAL_DAC_ConfigChannel+0x1c>
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d101      	bne.n	8008c8c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e19e      	b.n	8008fca <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	795b      	ldrb	r3, [r3, #5]
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d101      	bne.n	8008c98 <HAL_DAC_ConfigChannel+0x2c>
 8008c94:	2302      	movs	r3, #2
 8008c96:	e198      	b.n	8008fca <HAL_DAC_ConfigChannel+0x35e>
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2202      	movs	r2, #2
 8008ca2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	2b04      	cmp	r3, #4
 8008caa:	d17a      	bne.n	8008da2 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8008cac:	f7fe f868 	bl	8006d80 <HAL_GetTick>
 8008cb0:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d13d      	bne.n	8008d34 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008cb8:	e018      	b.n	8008cec <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008cba:	f7fe f861 	bl	8006d80 <HAL_GetTick>
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	69bb      	ldr	r3, [r7, #24]
 8008cc2:	1ad3      	subs	r3, r2, r3
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d911      	bls.n	8008cec <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d00a      	beq.n	8008cec <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	691b      	ldr	r3, [r3, #16]
 8008cda:	f043 0208 	orr.w	r2, r3, #8
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2203      	movs	r2, #3
 8008ce6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8008ce8:	2303      	movs	r3, #3
 8008cea:	e16e      	b.n	8008fca <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cf2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d1df      	bne.n	8008cba <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	68ba      	ldr	r2, [r7, #8]
 8008d00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008d02:	641a      	str	r2, [r3, #64]	@ 0x40
 8008d04:	e020      	b.n	8008d48 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008d06:	f7fe f83b 	bl	8006d80 <HAL_GetTick>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	69bb      	ldr	r3, [r7, #24]
 8008d0e:	1ad3      	subs	r3, r2, r3
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d90f      	bls.n	8008d34 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	da0a      	bge.n	8008d34 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	691b      	ldr	r3, [r3, #16]
 8008d22:	f043 0208 	orr.w	r2, r3, #8
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2203      	movs	r2, #3
 8008d2e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8008d30:	2303      	movs	r3, #3
 8008d32:	e14a      	b.n	8008fca <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	dbe3      	blt.n	8008d06 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	68ba      	ldr	r2, [r7, #8]
 8008d44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008d46:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f003 0310 	and.w	r3, r3, #16
 8008d54:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8008d58:	fa01 f303 	lsl.w	r3, r1, r3
 8008d5c:	43db      	mvns	r3, r3
 8008d5e:	ea02 0103 	and.w	r1, r2, r3
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f003 0310 	and.w	r3, r3, #16
 8008d6c:	409a      	lsls	r2, r3
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	430a      	orrs	r2, r1
 8008d74:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f003 0310 	and.w	r3, r3, #16
 8008d82:	21ff      	movs	r1, #255	@ 0xff
 8008d84:	fa01 f303 	lsl.w	r3, r1, r3
 8008d88:	43db      	mvns	r3, r3
 8008d8a:	ea02 0103 	and.w	r1, r2, r3
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f003 0310 	and.w	r3, r3, #16
 8008d98:	409a      	lsls	r2, r3
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	430a      	orrs	r2, r1
 8008da0:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	69db      	ldr	r3, [r3, #28]
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d11d      	bne.n	8008de6 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008db0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f003 0310 	and.w	r3, r3, #16
 8008db8:	221f      	movs	r2, #31
 8008dba:	fa02 f303 	lsl.w	r3, r2, r3
 8008dbe:	43db      	mvns	r3, r3
 8008dc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008dc2:	4013      	ands	r3, r2
 8008dc4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	6a1b      	ldr	r3, [r3, #32]
 8008dca:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f003 0310 	and.w	r3, r3, #16
 8008dd2:	697a      	ldr	r2, [r7, #20]
 8008dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8008dd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008de4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dec:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f003 0310 	and.w	r3, r3, #16
 8008df4:	2207      	movs	r2, #7
 8008df6:	fa02 f303 	lsl.w	r3, r2, r3
 8008dfa:	43db      	mvns	r3, r3
 8008dfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008dfe:	4013      	ands	r3, r2
 8008e00:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	699b      	ldr	r3, [r3, #24]
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d102      	bne.n	8008e10 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	623b      	str	r3, [r7, #32]
 8008e0e:	e00f      	b.n	8008e30 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	699b      	ldr	r3, [r3, #24]
 8008e14:	2b02      	cmp	r3, #2
 8008e16:	d102      	bne.n	8008e1e <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	623b      	str	r3, [r7, #32]
 8008e1c:	e008      	b.n	8008e30 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	695b      	ldr	r3, [r3, #20]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d102      	bne.n	8008e2c <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8008e26:	2301      	movs	r3, #1
 8008e28:	623b      	str	r3, [r7, #32]
 8008e2a:	e001      	b.n	8008e30 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	689a      	ldr	r2, [r3, #8]
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	695b      	ldr	r3, [r3, #20]
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	6a3a      	ldr	r2, [r7, #32]
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f003 0310 	and.w	r3, r3, #16
 8008e46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e4e:	43db      	mvns	r3, r3
 8008e50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e52:	4013      	ands	r3, r2
 8008e54:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	791b      	ldrb	r3, [r3, #4]
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d102      	bne.n	8008e64 <HAL_DAC_ConfigChannel+0x1f8>
 8008e5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008e62:	e000      	b.n	8008e66 <HAL_DAC_ConfigChannel+0x1fa>
 8008e64:	2300      	movs	r3, #0
 8008e66:	697a      	ldr	r2, [r7, #20]
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f003 0310 	and.w	r3, r3, #16
 8008e72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008e76:	fa02 f303 	lsl.w	r3, r2, r3
 8008e7a:	43db      	mvns	r3, r3
 8008e7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e7e:	4013      	ands	r3, r2
 8008e80:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	795b      	ldrb	r3, [r3, #5]
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d102      	bne.n	8008e90 <HAL_DAC_ConfigChannel+0x224>
 8008e8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008e8e:	e000      	b.n	8008e92 <HAL_DAC_ConfigChannel+0x226>
 8008e90:	2300      	movs	r3, #0
 8008e92:	697a      	ldr	r2, [r7, #20]
 8008e94:	4313      	orrs	r3, r2
 8008e96:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8008e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e9a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8008e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	2b02      	cmp	r3, #2
 8008ea6:	d114      	bne.n	8008ed2 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8008ea8:	f002 f8aa 	bl	800b000 <HAL_RCC_GetHCLKFreq>
 8008eac:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	4a48      	ldr	r2, [pc, #288]	@ (8008fd4 <HAL_DAC_ConfigChannel+0x368>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d904      	bls.n	8008ec0 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8008eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ebc:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ebe:	e00f      	b.n	8008ee0 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	4a45      	ldr	r2, [pc, #276]	@ (8008fd8 <HAL_DAC_ConfigChannel+0x36c>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d90a      	bls.n	8008ede <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8008ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008ece:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ed0:	e006      	b.n	8008ee0 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	627b      	str	r3, [r7, #36]	@ 0x24
 8008edc:	e000      	b.n	8008ee0 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8008ede:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f003 0310 	and.w	r3, r3, #16
 8008ee6:	697a      	ldr	r2, [r7, #20]
 8008ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8008eec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ef8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	6819      	ldr	r1, [r3, #0]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f003 0310 	and.w	r3, r3, #16
 8008f06:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8008f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f0e:	43da      	mvns	r2, r3
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	400a      	ands	r2, r1
 8008f16:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f003 0310 	and.w	r3, r3, #16
 8008f26:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8008f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f2e:	43db      	mvns	r3, r3
 8008f30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f32:	4013      	ands	r3, r2
 8008f34:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f003 0310 	and.w	r3, r3, #16
 8008f42:	697a      	ldr	r2, [r7, #20]
 8008f44:	fa02 f303 	lsl.w	r3, r2, r3
 8008f48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f54:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	6819      	ldr	r1, [r3, #0]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f003 0310 	and.w	r3, r3, #16
 8008f62:	22c0      	movs	r2, #192	@ 0xc0
 8008f64:	fa02 f303 	lsl.w	r3, r2, r3
 8008f68:	43da      	mvns	r2, r3
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	400a      	ands	r2, r1
 8008f70:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	68db      	ldr	r3, [r3, #12]
 8008f76:	089b      	lsrs	r3, r3, #2
 8008f78:	f003 030f 	and.w	r3, r3, #15
 8008f7c:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	691b      	ldr	r3, [r3, #16]
 8008f82:	089b      	lsrs	r3, r3, #2
 8008f84:	021b      	lsls	r3, r3, #8
 8008f86:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008f8a:	697a      	ldr	r2, [r7, #20]
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f003 0310 	and.w	r3, r3, #16
 8008f9c:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8008fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8008fa4:	43db      	mvns	r3, r3
 8008fa6:	ea02 0103 	and.w	r1, r2, r3
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f003 0310 	and.w	r3, r3, #16
 8008fb0:	697a      	ldr	r2, [r7, #20]
 8008fb2:	409a      	lsls	r2, r3
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	430a      	orrs	r2, r1
 8008fba:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8008fc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3728      	adds	r7, #40	@ 0x28
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	09896800 	.word	0x09896800
 8008fd8:	04c4b400 	.word	0x04c4b400

08008fdc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d101      	bne.n	8008fee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008fea:	2301      	movs	r3, #1
 8008fec:	e08d      	b.n	800910a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	4b47      	ldr	r3, [pc, #284]	@ (8009114 <HAL_DMA_Init+0x138>)
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d80f      	bhi.n	800901a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	461a      	mov	r2, r3
 8009000:	4b45      	ldr	r3, [pc, #276]	@ (8009118 <HAL_DMA_Init+0x13c>)
 8009002:	4413      	add	r3, r2
 8009004:	4a45      	ldr	r2, [pc, #276]	@ (800911c <HAL_DMA_Init+0x140>)
 8009006:	fba2 2303 	umull	r2, r3, r2, r3
 800900a:	091b      	lsrs	r3, r3, #4
 800900c:	009a      	lsls	r2, r3, #2
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4a42      	ldr	r2, [pc, #264]	@ (8009120 <HAL_DMA_Init+0x144>)
 8009016:	641a      	str	r2, [r3, #64]	@ 0x40
 8009018:	e00e      	b.n	8009038 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	461a      	mov	r2, r3
 8009020:	4b40      	ldr	r3, [pc, #256]	@ (8009124 <HAL_DMA_Init+0x148>)
 8009022:	4413      	add	r3, r2
 8009024:	4a3d      	ldr	r2, [pc, #244]	@ (800911c <HAL_DMA_Init+0x140>)
 8009026:	fba2 2303 	umull	r2, r3, r2, r3
 800902a:	091b      	lsrs	r3, r3, #4
 800902c:	009a      	lsls	r2, r3, #2
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4a3c      	ldr	r2, [pc, #240]	@ (8009128 <HAL_DMA_Init+0x14c>)
 8009036:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2202      	movs	r2, #2
 800903c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800904e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009052:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800905c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	691b      	ldr	r3, [r3, #16]
 8009062:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009068:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	699b      	ldr	r3, [r3, #24]
 800906e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009074:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6a1b      	ldr	r3, [r3, #32]
 800907a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	4313      	orrs	r3, r2
 8009080:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	68fa      	ldr	r2, [r7, #12]
 8009088:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 fa76 	bl	800957c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009098:	d102      	bne.n	80090a0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	685a      	ldr	r2, [r3, #4]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090a8:	b2d2      	uxtb	r2, r2
 80090aa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80090b4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d010      	beq.n	80090e0 <HAL_DMA_Init+0x104>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	2b04      	cmp	r3, #4
 80090c4:	d80c      	bhi.n	80090e0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 fa96 	bl	80095f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090d0:	2200      	movs	r2, #0
 80090d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80090dc:	605a      	str	r2, [r3, #4]
 80090de:	e008      	b.n	80090f2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2201      	movs	r2, #1
 80090fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	40020407 	.word	0x40020407
 8009118:	bffdfff8 	.word	0xbffdfff8
 800911c:	cccccccd 	.word	0xcccccccd
 8009120:	40020000 	.word	0x40020000
 8009124:	bffdfbf8 	.word	0xbffdfbf8
 8009128:	40020400 	.word	0x40020400

0800912c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b086      	sub	sp, #24
 8009130:	af00      	add	r7, sp, #0
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	607a      	str	r2, [r7, #4]
 8009138:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800913a:	2300      	movs	r3, #0
 800913c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009144:	2b01      	cmp	r3, #1
 8009146:	d101      	bne.n	800914c <HAL_DMA_Start_IT+0x20>
 8009148:	2302      	movs	r3, #2
 800914a:	e066      	b.n	800921a <HAL_DMA_Start_IT+0xee>
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2201      	movs	r2, #1
 8009150:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800915a:	b2db      	uxtb	r3, r3
 800915c:	2b01      	cmp	r3, #1
 800915e:	d155      	bne.n	800920c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2202      	movs	r2, #2
 8009164:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2200      	movs	r2, #0
 800916c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f022 0201 	bic.w	r2, r2, #1
 800917c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	68b9      	ldr	r1, [r7, #8]
 8009184:	68f8      	ldr	r0, [r7, #12]
 8009186:	f000 f9bb 	bl	8009500 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800918e:	2b00      	cmp	r3, #0
 8009190:	d008      	beq.n	80091a4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f042 020e 	orr.w	r2, r2, #14
 80091a0:	601a      	str	r2, [r3, #0]
 80091a2:	e00f      	b.n	80091c4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f022 0204 	bic.w	r2, r2, #4
 80091b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f042 020a 	orr.w	r2, r2, #10
 80091c2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d007      	beq.n	80091e2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80091dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80091e0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d007      	beq.n	80091fa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80091f8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f042 0201 	orr.w	r2, r2, #1
 8009208:	601a      	str	r2, [r3, #0]
 800920a:	e005      	b.n	8009218 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2200      	movs	r2, #0
 8009210:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009214:	2302      	movs	r3, #2
 8009216:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009218:	7dfb      	ldrb	r3, [r7, #23]
}
 800921a:	4618      	mov	r0, r3
 800921c:	3718      	adds	r7, #24
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009222:	b480      	push	{r7}
 8009224:	b085      	sub	sp, #20
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800922a:	2300      	movs	r3, #0
 800922c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8009234:	b2db      	uxtb	r3, r3
 8009236:	2b02      	cmp	r3, #2
 8009238:	d005      	beq.n	8009246 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2204      	movs	r2, #4
 800923e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	73fb      	strb	r3, [r7, #15]
 8009244:	e037      	b.n	80092b6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f022 020e 	bic.w	r2, r2, #14
 8009254:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009260:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009264:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f022 0201 	bic.w	r2, r2, #1
 8009274:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800927a:	f003 021f 	and.w	r2, r3, #31
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009282:	2101      	movs	r1, #1
 8009284:	fa01 f202 	lsl.w	r2, r1, r2
 8009288:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009292:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009298:	2b00      	cmp	r3, #0
 800929a:	d00c      	beq.n	80092b6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80092aa:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80092b4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2201      	movs	r2, #1
 80092ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80092c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3714      	adds	r7, #20
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092dc:	2300      	movs	r3, #0
 80092de:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	2b02      	cmp	r3, #2
 80092ea:	d00d      	beq.n	8009308 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2204      	movs	r2, #4
 80092f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2201      	movs	r2, #1
 80092f6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2200      	movs	r2, #0
 80092fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	73fb      	strb	r3, [r7, #15]
 8009306:	e047      	b.n	8009398 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f022 020e 	bic.w	r2, r2, #14
 8009316:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f022 0201 	bic.w	r2, r2, #1
 8009326:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009332:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009336:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800933c:	f003 021f 	and.w	r2, r3, #31
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009344:	2101      	movs	r1, #1
 8009346:	fa01 f202 	lsl.w	r2, r1, r2
 800934a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009354:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800935a:	2b00      	cmp	r3, #0
 800935c:	d00c      	beq.n	8009378 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009368:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800936c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8009376:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800938c:	2b00      	cmp	r3, #0
 800938e:	d003      	beq.n	8009398 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	4798      	blx	r3
    }
  }
  return status;
 8009398:	7bfb      	ldrb	r3, [r7, #15]
}
 800939a:	4618      	mov	r0, r3
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}

080093a2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b084      	sub	sp, #16
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093be:	f003 031f 	and.w	r3, r3, #31
 80093c2:	2204      	movs	r2, #4
 80093c4:	409a      	lsls	r2, r3
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	4013      	ands	r3, r2
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d026      	beq.n	800941c <HAL_DMA_IRQHandler+0x7a>
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	f003 0304 	and.w	r3, r3, #4
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d021      	beq.n	800941c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f003 0320 	and.w	r3, r3, #32
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d107      	bne.n	80093f6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f022 0204 	bic.w	r2, r2, #4
 80093f4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093fa:	f003 021f 	and.w	r2, r3, #31
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009402:	2104      	movs	r1, #4
 8009404:	fa01 f202 	lsl.w	r2, r1, r2
 8009408:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800940e:	2b00      	cmp	r3, #0
 8009410:	d071      	beq.n	80094f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800941a:	e06c      	b.n	80094f6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009420:	f003 031f 	and.w	r3, r3, #31
 8009424:	2202      	movs	r2, #2
 8009426:	409a      	lsls	r2, r3
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	4013      	ands	r3, r2
 800942c:	2b00      	cmp	r3, #0
 800942e:	d02e      	beq.n	800948e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	f003 0302 	and.w	r3, r3, #2
 8009436:	2b00      	cmp	r3, #0
 8009438:	d029      	beq.n	800948e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f003 0320 	and.w	r3, r3, #32
 8009444:	2b00      	cmp	r3, #0
 8009446:	d10b      	bne.n	8009460 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f022 020a 	bic.w	r2, r2, #10
 8009456:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2201      	movs	r2, #1
 800945c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009464:	f003 021f 	and.w	r2, r3, #31
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800946c:	2102      	movs	r1, #2
 800946e:	fa01 f202 	lsl.w	r2, r1, r2
 8009472:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2200      	movs	r2, #0
 8009478:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009480:	2b00      	cmp	r3, #0
 8009482:	d038      	beq.n	80094f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800948c:	e033      	b.n	80094f6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009492:	f003 031f 	and.w	r3, r3, #31
 8009496:	2208      	movs	r2, #8
 8009498:	409a      	lsls	r2, r3
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	4013      	ands	r3, r2
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d02a      	beq.n	80094f8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	f003 0308 	and.w	r3, r3, #8
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d025      	beq.n	80094f8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f022 020e 	bic.w	r2, r2, #14
 80094ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094c0:	f003 021f 	and.w	r2, r3, #31
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094c8:	2101      	movs	r1, #1
 80094ca:	fa01 f202 	lsl.w	r2, r1, r2
 80094ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2201      	movs	r2, #1
 80094d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2201      	movs	r2, #1
 80094da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d004      	beq.n	80094f8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80094f6:	bf00      	nop
 80094f8:	bf00      	nop
}
 80094fa:	3710      	adds	r7, #16
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009500:	b480      	push	{r7}
 8009502:	b085      	sub	sp, #20
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	607a      	str	r2, [r7, #4]
 800950c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009512:	68fa      	ldr	r2, [r7, #12]
 8009514:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009516:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800951c:	2b00      	cmp	r3, #0
 800951e:	d004      	beq.n	800952a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009524:	68fa      	ldr	r2, [r7, #12]
 8009526:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8009528:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800952e:	f003 021f 	and.w	r2, r3, #31
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009536:	2101      	movs	r1, #1
 8009538:	fa01 f202 	lsl.w	r2, r1, r2
 800953c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	683a      	ldr	r2, [r7, #0]
 8009544:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	689b      	ldr	r3, [r3, #8]
 800954a:	2b10      	cmp	r3, #16
 800954c:	d108      	bne.n	8009560 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	68ba      	ldr	r2, [r7, #8]
 800955c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800955e:	e007      	b.n	8009570 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	68ba      	ldr	r2, [r7, #8]
 8009566:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	60da      	str	r2, [r3, #12]
}
 8009570:	bf00      	nop
 8009572:	3714      	adds	r7, #20
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800957c:	b480      	push	{r7}
 800957e:	b087      	sub	sp, #28
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	461a      	mov	r2, r3
 800958a:	4b16      	ldr	r3, [pc, #88]	@ (80095e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800958c:	429a      	cmp	r2, r3
 800958e:	d802      	bhi.n	8009596 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8009590:	4b15      	ldr	r3, [pc, #84]	@ (80095e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8009592:	617b      	str	r3, [r7, #20]
 8009594:	e001      	b.n	800959a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8009596:	4b15      	ldr	r3, [pc, #84]	@ (80095ec <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8009598:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	3b08      	subs	r3, #8
 80095a6:	4a12      	ldr	r2, [pc, #72]	@ (80095f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80095a8:	fba2 2303 	umull	r2, r3, r2, r3
 80095ac:	091b      	lsrs	r3, r3, #4
 80095ae:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095b4:	089b      	lsrs	r3, r3, #2
 80095b6:	009a      	lsls	r2, r3, #2
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	4413      	add	r3, r2
 80095bc:	461a      	mov	r2, r3
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	4a0b      	ldr	r2, [pc, #44]	@ (80095f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80095c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f003 031f 	and.w	r3, r3, #31
 80095ce:	2201      	movs	r2, #1
 80095d0:	409a      	lsls	r2, r3
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80095d6:	bf00      	nop
 80095d8:	371c      	adds	r7, #28
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr
 80095e2:	bf00      	nop
 80095e4:	40020407 	.word	0x40020407
 80095e8:	40020800 	.word	0x40020800
 80095ec:	40020820 	.word	0x40020820
 80095f0:	cccccccd 	.word	0xcccccccd
 80095f4:	40020880 	.word	0x40020880

080095f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	b2db      	uxtb	r3, r3
 8009606:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009608:	68fa      	ldr	r2, [r7, #12]
 800960a:	4b0b      	ldr	r3, [pc, #44]	@ (8009638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800960c:	4413      	add	r3, r2
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	461a      	mov	r2, r3
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4a08      	ldr	r2, [pc, #32]	@ (800963c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800961a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	3b01      	subs	r3, #1
 8009620:	f003 031f 	and.w	r3, r3, #31
 8009624:	2201      	movs	r2, #1
 8009626:	409a      	lsls	r2, r3
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800962c:	bf00      	nop
 800962e:	3714      	adds	r7, #20
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr
 8009638:	1000823f 	.word	0x1000823f
 800963c:	40020940 	.word	0x40020940

08009640 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009640:	b480      	push	{r7}
 8009642:	b087      	sub	sp, #28
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800964a:	2300      	movs	r3, #0
 800964c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800964e:	e15a      	b.n	8009906 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	2101      	movs	r1, #1
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	fa01 f303 	lsl.w	r3, r1, r3
 800965c:	4013      	ands	r3, r2
 800965e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2b00      	cmp	r3, #0
 8009664:	f000 814c 	beq.w	8009900 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	f003 0303 	and.w	r3, r3, #3
 8009670:	2b01      	cmp	r3, #1
 8009672:	d005      	beq.n	8009680 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800967c:	2b02      	cmp	r3, #2
 800967e:	d130      	bne.n	80096e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	005b      	lsls	r3, r3, #1
 800968a:	2203      	movs	r2, #3
 800968c:	fa02 f303 	lsl.w	r3, r2, r3
 8009690:	43db      	mvns	r3, r3
 8009692:	693a      	ldr	r2, [r7, #16]
 8009694:	4013      	ands	r3, r2
 8009696:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	68da      	ldr	r2, [r3, #12]
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	005b      	lsls	r3, r3, #1
 80096a0:	fa02 f303 	lsl.w	r3, r2, r3
 80096a4:	693a      	ldr	r2, [r7, #16]
 80096a6:	4313      	orrs	r3, r2
 80096a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	693a      	ldr	r2, [r7, #16]
 80096ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80096b6:	2201      	movs	r2, #1
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	fa02 f303 	lsl.w	r3, r2, r3
 80096be:	43db      	mvns	r3, r3
 80096c0:	693a      	ldr	r2, [r7, #16]
 80096c2:	4013      	ands	r3, r2
 80096c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	091b      	lsrs	r3, r3, #4
 80096cc:	f003 0201 	and.w	r2, r3, #1
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	fa02 f303 	lsl.w	r3, r2, r3
 80096d6:	693a      	ldr	r2, [r7, #16]
 80096d8:	4313      	orrs	r3, r2
 80096da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	693a      	ldr	r2, [r7, #16]
 80096e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	f003 0303 	and.w	r3, r3, #3
 80096ea:	2b03      	cmp	r3, #3
 80096ec:	d017      	beq.n	800971e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	68db      	ldr	r3, [r3, #12]
 80096f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	005b      	lsls	r3, r3, #1
 80096f8:	2203      	movs	r2, #3
 80096fa:	fa02 f303 	lsl.w	r3, r2, r3
 80096fe:	43db      	mvns	r3, r3
 8009700:	693a      	ldr	r2, [r7, #16]
 8009702:	4013      	ands	r3, r2
 8009704:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	689a      	ldr	r2, [r3, #8]
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	005b      	lsls	r3, r3, #1
 800970e:	fa02 f303 	lsl.w	r3, r2, r3
 8009712:	693a      	ldr	r2, [r7, #16]
 8009714:	4313      	orrs	r3, r2
 8009716:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	693a      	ldr	r2, [r7, #16]
 800971c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	f003 0303 	and.w	r3, r3, #3
 8009726:	2b02      	cmp	r3, #2
 8009728:	d123      	bne.n	8009772 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	08da      	lsrs	r2, r3, #3
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	3208      	adds	r2, #8
 8009732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009736:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	f003 0307 	and.w	r3, r3, #7
 800973e:	009b      	lsls	r3, r3, #2
 8009740:	220f      	movs	r2, #15
 8009742:	fa02 f303 	lsl.w	r3, r2, r3
 8009746:	43db      	mvns	r3, r3
 8009748:	693a      	ldr	r2, [r7, #16]
 800974a:	4013      	ands	r3, r2
 800974c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	691a      	ldr	r2, [r3, #16]
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	f003 0307 	and.w	r3, r3, #7
 8009758:	009b      	lsls	r3, r3, #2
 800975a:	fa02 f303 	lsl.w	r3, r2, r3
 800975e:	693a      	ldr	r2, [r7, #16]
 8009760:	4313      	orrs	r3, r2
 8009762:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	08da      	lsrs	r2, r3, #3
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	3208      	adds	r2, #8
 800976c:	6939      	ldr	r1, [r7, #16]
 800976e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	005b      	lsls	r3, r3, #1
 800977c:	2203      	movs	r2, #3
 800977e:	fa02 f303 	lsl.w	r3, r2, r3
 8009782:	43db      	mvns	r3, r3
 8009784:	693a      	ldr	r2, [r7, #16]
 8009786:	4013      	ands	r3, r2
 8009788:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	f003 0203 	and.w	r2, r3, #3
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	005b      	lsls	r3, r3, #1
 8009796:	fa02 f303 	lsl.w	r3, r2, r3
 800979a:	693a      	ldr	r2, [r7, #16]
 800979c:	4313      	orrs	r3, r2
 800979e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	693a      	ldr	r2, [r7, #16]
 80097a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	f000 80a6 	beq.w	8009900 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80097b4:	4b5b      	ldr	r3, [pc, #364]	@ (8009924 <HAL_GPIO_Init+0x2e4>)
 80097b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097b8:	4a5a      	ldr	r2, [pc, #360]	@ (8009924 <HAL_GPIO_Init+0x2e4>)
 80097ba:	f043 0301 	orr.w	r3, r3, #1
 80097be:	6613      	str	r3, [r2, #96]	@ 0x60
 80097c0:	4b58      	ldr	r3, [pc, #352]	@ (8009924 <HAL_GPIO_Init+0x2e4>)
 80097c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097c4:	f003 0301 	and.w	r3, r3, #1
 80097c8:	60bb      	str	r3, [r7, #8]
 80097ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80097cc:	4a56      	ldr	r2, [pc, #344]	@ (8009928 <HAL_GPIO_Init+0x2e8>)
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	089b      	lsrs	r3, r3, #2
 80097d2:	3302      	adds	r3, #2
 80097d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	f003 0303 	and.w	r3, r3, #3
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	220f      	movs	r2, #15
 80097e4:	fa02 f303 	lsl.w	r3, r2, r3
 80097e8:	43db      	mvns	r3, r3
 80097ea:	693a      	ldr	r2, [r7, #16]
 80097ec:	4013      	ands	r3, r2
 80097ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80097f6:	d01f      	beq.n	8009838 <HAL_GPIO_Init+0x1f8>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	4a4c      	ldr	r2, [pc, #304]	@ (800992c <HAL_GPIO_Init+0x2ec>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d019      	beq.n	8009834 <HAL_GPIO_Init+0x1f4>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	4a4b      	ldr	r2, [pc, #300]	@ (8009930 <HAL_GPIO_Init+0x2f0>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d013      	beq.n	8009830 <HAL_GPIO_Init+0x1f0>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	4a4a      	ldr	r2, [pc, #296]	@ (8009934 <HAL_GPIO_Init+0x2f4>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d00d      	beq.n	800982c <HAL_GPIO_Init+0x1ec>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4a49      	ldr	r2, [pc, #292]	@ (8009938 <HAL_GPIO_Init+0x2f8>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d007      	beq.n	8009828 <HAL_GPIO_Init+0x1e8>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a48      	ldr	r2, [pc, #288]	@ (800993c <HAL_GPIO_Init+0x2fc>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d101      	bne.n	8009824 <HAL_GPIO_Init+0x1e4>
 8009820:	2305      	movs	r3, #5
 8009822:	e00a      	b.n	800983a <HAL_GPIO_Init+0x1fa>
 8009824:	2306      	movs	r3, #6
 8009826:	e008      	b.n	800983a <HAL_GPIO_Init+0x1fa>
 8009828:	2304      	movs	r3, #4
 800982a:	e006      	b.n	800983a <HAL_GPIO_Init+0x1fa>
 800982c:	2303      	movs	r3, #3
 800982e:	e004      	b.n	800983a <HAL_GPIO_Init+0x1fa>
 8009830:	2302      	movs	r3, #2
 8009832:	e002      	b.n	800983a <HAL_GPIO_Init+0x1fa>
 8009834:	2301      	movs	r3, #1
 8009836:	e000      	b.n	800983a <HAL_GPIO_Init+0x1fa>
 8009838:	2300      	movs	r3, #0
 800983a:	697a      	ldr	r2, [r7, #20]
 800983c:	f002 0203 	and.w	r2, r2, #3
 8009840:	0092      	lsls	r2, r2, #2
 8009842:	4093      	lsls	r3, r2
 8009844:	693a      	ldr	r2, [r7, #16]
 8009846:	4313      	orrs	r3, r2
 8009848:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800984a:	4937      	ldr	r1, [pc, #220]	@ (8009928 <HAL_GPIO_Init+0x2e8>)
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	089b      	lsrs	r3, r3, #2
 8009850:	3302      	adds	r3, #2
 8009852:	693a      	ldr	r2, [r7, #16]
 8009854:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009858:	4b39      	ldr	r3, [pc, #228]	@ (8009940 <HAL_GPIO_Init+0x300>)
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	43db      	mvns	r3, r3
 8009862:	693a      	ldr	r2, [r7, #16]
 8009864:	4013      	ands	r3, r2
 8009866:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009870:	2b00      	cmp	r3, #0
 8009872:	d003      	beq.n	800987c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8009874:	693a      	ldr	r2, [r7, #16]
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	4313      	orrs	r3, r2
 800987a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800987c:	4a30      	ldr	r2, [pc, #192]	@ (8009940 <HAL_GPIO_Init+0x300>)
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009882:	4b2f      	ldr	r3, [pc, #188]	@ (8009940 <HAL_GPIO_Init+0x300>)
 8009884:	68db      	ldr	r3, [r3, #12]
 8009886:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	43db      	mvns	r3, r3
 800988c:	693a      	ldr	r2, [r7, #16]
 800988e:	4013      	ands	r3, r2
 8009890:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800989a:	2b00      	cmp	r3, #0
 800989c:	d003      	beq.n	80098a6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800989e:	693a      	ldr	r2, [r7, #16]
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	4313      	orrs	r3, r2
 80098a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80098a6:	4a26      	ldr	r2, [pc, #152]	@ (8009940 <HAL_GPIO_Init+0x300>)
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80098ac:	4b24      	ldr	r3, [pc, #144]	@ (8009940 <HAL_GPIO_Init+0x300>)
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	43db      	mvns	r3, r3
 80098b6:	693a      	ldr	r2, [r7, #16]
 80098b8:	4013      	ands	r3, r2
 80098ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d003      	beq.n	80098d0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80098c8:	693a      	ldr	r2, [r7, #16]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	4313      	orrs	r3, r2
 80098ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80098d0:	4a1b      	ldr	r2, [pc, #108]	@ (8009940 <HAL_GPIO_Init+0x300>)
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80098d6:	4b1a      	ldr	r3, [pc, #104]	@ (8009940 <HAL_GPIO_Init+0x300>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	43db      	mvns	r3, r3
 80098e0:	693a      	ldr	r2, [r7, #16]
 80098e2:	4013      	ands	r3, r2
 80098e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d003      	beq.n	80098fa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80098f2:	693a      	ldr	r2, [r7, #16]
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	4313      	orrs	r3, r2
 80098f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80098fa:	4a11      	ldr	r2, [pc, #68]	@ (8009940 <HAL_GPIO_Init+0x300>)
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	3301      	adds	r3, #1
 8009904:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	fa22 f303 	lsr.w	r3, r2, r3
 8009910:	2b00      	cmp	r3, #0
 8009912:	f47f ae9d 	bne.w	8009650 <HAL_GPIO_Init+0x10>
  }
}
 8009916:	bf00      	nop
 8009918:	bf00      	nop
 800991a:	371c      	adds	r7, #28
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr
 8009924:	40021000 	.word	0x40021000
 8009928:	40010000 	.word	0x40010000
 800992c:	48000400 	.word	0x48000400
 8009930:	48000800 	.word	0x48000800
 8009934:	48000c00 	.word	0x48000c00
 8009938:	48001000 	.word	0x48001000
 800993c:	48001400 	.word	0x48001400
 8009940:	40010400 	.word	0x40010400

08009944 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	4603      	mov	r3, r0
 800994c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800994e:	4b08      	ldr	r3, [pc, #32]	@ (8009970 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009950:	695a      	ldr	r2, [r3, #20]
 8009952:	88fb      	ldrh	r3, [r7, #6]
 8009954:	4013      	ands	r3, r2
 8009956:	2b00      	cmp	r3, #0
 8009958:	d006      	beq.n	8009968 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800995a:	4a05      	ldr	r2, [pc, #20]	@ (8009970 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800995c:	88fb      	ldrh	r3, [r7, #6]
 800995e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009960:	88fb      	ldrh	r3, [r7, #6]
 8009962:	4618      	mov	r0, r3
 8009964:	f000 f806 	bl	8009974 <HAL_GPIO_EXTI_Callback>
  }
}
 8009968:	bf00      	nop
 800996a:	3708      	adds	r7, #8
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}
 8009970:	40010400 	.word	0x40010400

08009974 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	4603      	mov	r3, r0
 800997c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800997e:	bf00      	nop
 8009980:	370c      	adds	r7, #12
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr

0800998a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800998a:	b580      	push	{r7, lr}
 800998c:	b082      	sub	sp, #8
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d101      	bne.n	800999c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009998:	2301      	movs	r3, #1
 800999a:	e08d      	b.n	8009ab8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80099a2:	b2db      	uxtb	r3, r3
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d106      	bne.n	80099b6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2200      	movs	r2, #0
 80099ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f7fb f905 	bl	8004bc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2224      	movs	r2, #36	@ 0x24
 80099ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f022 0201 	bic.w	r2, r2, #1
 80099cc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	685a      	ldr	r2, [r3, #4]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80099da:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	689a      	ldr	r2, [r3, #8]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80099ea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	68db      	ldr	r3, [r3, #12]
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d107      	bne.n	8009a04 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	689a      	ldr	r2, [r3, #8]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009a00:	609a      	str	r2, [r3, #8]
 8009a02:	e006      	b.n	8009a12 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	689a      	ldr	r2, [r3, #8]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8009a10:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	68db      	ldr	r3, [r3, #12]
 8009a16:	2b02      	cmp	r3, #2
 8009a18:	d108      	bne.n	8009a2c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	685a      	ldr	r2, [r3, #4]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009a28:	605a      	str	r2, [r3, #4]
 8009a2a:	e007      	b.n	8009a3c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	685a      	ldr	r2, [r3, #4]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009a3a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	6812      	ldr	r2, [r2, #0]
 8009a46:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009a4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a4e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	68da      	ldr	r2, [r3, #12]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009a5e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	691a      	ldr	r2, [r3, #16]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	695b      	ldr	r3, [r3, #20]
 8009a68:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	699b      	ldr	r3, [r3, #24]
 8009a70:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	430a      	orrs	r2, r1
 8009a78:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	69d9      	ldr	r1, [r3, #28]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6a1a      	ldr	r2, [r3, #32]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	430a      	orrs	r2, r1
 8009a88:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f042 0201 	orr.w	r2, r2, #1
 8009a98:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2220      	movs	r2, #32
 8009aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009ab6:	2300      	movs	r3, #0
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3708      	adds	r7, #8
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b088      	sub	sp, #32
 8009ac4:	af02      	add	r7, sp, #8
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	607a      	str	r2, [r7, #4]
 8009aca:	461a      	mov	r2, r3
 8009acc:	460b      	mov	r3, r1
 8009ace:	817b      	strh	r3, [r7, #10]
 8009ad0:	4613      	mov	r3, r2
 8009ad2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	2b20      	cmp	r3, #32
 8009ade:	f040 80fd 	bne.w	8009cdc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d101      	bne.n	8009af0 <HAL_I2C_Master_Transmit+0x30>
 8009aec:	2302      	movs	r3, #2
 8009aee:	e0f6      	b.n	8009cde <HAL_I2C_Master_Transmit+0x21e>
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2201      	movs	r2, #1
 8009af4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009af8:	f7fd f942 	bl	8006d80 <HAL_GetTick>
 8009afc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	9300      	str	r3, [sp, #0]
 8009b02:	2319      	movs	r3, #25
 8009b04:	2201      	movs	r2, #1
 8009b06:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009b0a:	68f8      	ldr	r0, [r7, #12]
 8009b0c:	f000 fa0a 	bl	8009f24 <I2C_WaitOnFlagUntilTimeout>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d001      	beq.n	8009b1a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8009b16:	2301      	movs	r3, #1
 8009b18:	e0e1      	b.n	8009cde <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2221      	movs	r2, #33	@ 0x21
 8009b1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2210      	movs	r2, #16
 8009b26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	893a      	ldrh	r2, [r7, #8]
 8009b3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	2bff      	cmp	r3, #255	@ 0xff
 8009b4a:	d906      	bls.n	8009b5a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	22ff      	movs	r2, #255	@ 0xff
 8009b50:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8009b52:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009b56:	617b      	str	r3, [r7, #20]
 8009b58:	e007      	b.n	8009b6a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b5e:	b29a      	uxth	r2, r3
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009b64:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009b68:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d024      	beq.n	8009bbc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b76:	781a      	ldrb	r2, [r3, #0]
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b82:	1c5a      	adds	r2, r3, #1
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	3b01      	subs	r3, #1
 8009b90:	b29a      	uxth	r2, r3
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b9a:	3b01      	subs	r3, #1
 8009b9c:	b29a      	uxth	r2, r3
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ba6:	b2db      	uxtb	r3, r3
 8009ba8:	3301      	adds	r3, #1
 8009baa:	b2da      	uxtb	r2, r3
 8009bac:	8979      	ldrh	r1, [r7, #10]
 8009bae:	4b4e      	ldr	r3, [pc, #312]	@ (8009ce8 <HAL_I2C_Master_Transmit+0x228>)
 8009bb0:	9300      	str	r3, [sp, #0]
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	68f8      	ldr	r0, [r7, #12]
 8009bb6:	f000 fc05 	bl	800a3c4 <I2C_TransferConfig>
 8009bba:	e066      	b.n	8009c8a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009bc0:	b2da      	uxtb	r2, r3
 8009bc2:	8979      	ldrh	r1, [r7, #10]
 8009bc4:	4b48      	ldr	r3, [pc, #288]	@ (8009ce8 <HAL_I2C_Master_Transmit+0x228>)
 8009bc6:	9300      	str	r3, [sp, #0]
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	68f8      	ldr	r0, [r7, #12]
 8009bcc:	f000 fbfa 	bl	800a3c4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8009bd0:	e05b      	b.n	8009c8a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009bd2:	693a      	ldr	r2, [r7, #16]
 8009bd4:	6a39      	ldr	r1, [r7, #32]
 8009bd6:	68f8      	ldr	r0, [r7, #12]
 8009bd8:	f000 f9fd 	bl	8009fd6 <I2C_WaitOnTXISFlagUntilTimeout>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d001      	beq.n	8009be6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8009be2:	2301      	movs	r3, #1
 8009be4:	e07b      	b.n	8009cde <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bea:	781a      	ldrb	r2, [r3, #0]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bf6:	1c5a      	adds	r2, r3, #1
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	3b01      	subs	r3, #1
 8009c04:	b29a      	uxth	r2, r3
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c0e:	3b01      	subs	r3, #1
 8009c10:	b29a      	uxth	r2, r3
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d034      	beq.n	8009c8a <HAL_I2C_Master_Transmit+0x1ca>
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d130      	bne.n	8009c8a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	9300      	str	r3, [sp, #0]
 8009c2c:	6a3b      	ldr	r3, [r7, #32]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	2180      	movs	r1, #128	@ 0x80
 8009c32:	68f8      	ldr	r0, [r7, #12]
 8009c34:	f000 f976 	bl	8009f24 <I2C_WaitOnFlagUntilTimeout>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d001      	beq.n	8009c42 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	e04d      	b.n	8009cde <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	2bff      	cmp	r3, #255	@ 0xff
 8009c4a:	d90e      	bls.n	8009c6a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	22ff      	movs	r2, #255	@ 0xff
 8009c50:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c56:	b2da      	uxtb	r2, r3
 8009c58:	8979      	ldrh	r1, [r7, #10]
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	9300      	str	r3, [sp, #0]
 8009c5e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009c62:	68f8      	ldr	r0, [r7, #12]
 8009c64:	f000 fbae 	bl	800a3c4 <I2C_TransferConfig>
 8009c68:	e00f      	b.n	8009c8a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c6e:	b29a      	uxth	r2, r3
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c78:	b2da      	uxtb	r2, r3
 8009c7a:	8979      	ldrh	r1, [r7, #10]
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	9300      	str	r3, [sp, #0]
 8009c80:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009c84:	68f8      	ldr	r0, [r7, #12]
 8009c86:	f000 fb9d 	bl	800a3c4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d19e      	bne.n	8009bd2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c94:	693a      	ldr	r2, [r7, #16]
 8009c96:	6a39      	ldr	r1, [r7, #32]
 8009c98:	68f8      	ldr	r0, [r7, #12]
 8009c9a:	f000 f9e3 	bl	800a064 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d001      	beq.n	8009ca8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	e01a      	b.n	8009cde <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2220      	movs	r2, #32
 8009cae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	6859      	ldr	r1, [r3, #4]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	4b0c      	ldr	r3, [pc, #48]	@ (8009cec <HAL_I2C_Master_Transmit+0x22c>)
 8009cbc:	400b      	ands	r3, r1
 8009cbe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2220      	movs	r2, #32
 8009cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	e000      	b.n	8009cde <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8009cdc:	2302      	movs	r3, #2
  }
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3718      	adds	r7, #24
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	80002000 	.word	0x80002000
 8009cec:	fe00e800 	.word	0xfe00e800

08009cf0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b088      	sub	sp, #32
 8009cf4:	af02      	add	r7, sp, #8
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	607a      	str	r2, [r7, #4]
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	817b      	strh	r3, [r7, #10]
 8009d00:	4613      	mov	r3, r2
 8009d02:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d0a:	b2db      	uxtb	r3, r3
 8009d0c:	2b20      	cmp	r3, #32
 8009d0e:	f040 80db 	bne.w	8009ec8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	d101      	bne.n	8009d20 <HAL_I2C_Master_Receive+0x30>
 8009d1c:	2302      	movs	r3, #2
 8009d1e:	e0d4      	b.n	8009eca <HAL_I2C_Master_Receive+0x1da>
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2201      	movs	r2, #1
 8009d24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009d28:	f7fd f82a 	bl	8006d80 <HAL_GetTick>
 8009d2c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	9300      	str	r3, [sp, #0]
 8009d32:	2319      	movs	r3, #25
 8009d34:	2201      	movs	r2, #1
 8009d36:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009d3a:	68f8      	ldr	r0, [r7, #12]
 8009d3c:	f000 f8f2 	bl	8009f24 <I2C_WaitOnFlagUntilTimeout>
 8009d40:	4603      	mov	r3, r0
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d001      	beq.n	8009d4a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8009d46:	2301      	movs	r3, #1
 8009d48:	e0bf      	b.n	8009eca <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2222      	movs	r2, #34	@ 0x22
 8009d4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	2210      	movs	r2, #16
 8009d56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	687a      	ldr	r2, [r7, #4]
 8009d64:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	893a      	ldrh	r2, [r7, #8]
 8009d6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	2bff      	cmp	r3, #255	@ 0xff
 8009d7a:	d90e      	bls.n	8009d9a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	22ff      	movs	r2, #255	@ 0xff
 8009d80:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d86:	b2da      	uxtb	r2, r3
 8009d88:	8979      	ldrh	r1, [r7, #10]
 8009d8a:	4b52      	ldr	r3, [pc, #328]	@ (8009ed4 <HAL_I2C_Master_Receive+0x1e4>)
 8009d8c:	9300      	str	r3, [sp, #0]
 8009d8e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009d92:	68f8      	ldr	r0, [r7, #12]
 8009d94:	f000 fb16 	bl	800a3c4 <I2C_TransferConfig>
 8009d98:	e06d      	b.n	8009e76 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d9e:	b29a      	uxth	r2, r3
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009da8:	b2da      	uxtb	r2, r3
 8009daa:	8979      	ldrh	r1, [r7, #10]
 8009dac:	4b49      	ldr	r3, [pc, #292]	@ (8009ed4 <HAL_I2C_Master_Receive+0x1e4>)
 8009dae:	9300      	str	r3, [sp, #0]
 8009db0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009db4:	68f8      	ldr	r0, [r7, #12]
 8009db6:	f000 fb05 	bl	800a3c4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8009dba:	e05c      	b.n	8009e76 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009dbc:	697a      	ldr	r2, [r7, #20]
 8009dbe:	6a39      	ldr	r1, [r7, #32]
 8009dc0:	68f8      	ldr	r0, [r7, #12]
 8009dc2:	f000 f993 	bl	800a0ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d001      	beq.n	8009dd0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	e07c      	b.n	8009eca <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dda:	b2d2      	uxtb	r2, r2
 8009ddc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009de2:	1c5a      	adds	r2, r3, #1
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009dec:	3b01      	subs	r3, #1
 8009dee:	b29a      	uxth	r2, r3
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	3b01      	subs	r3, #1
 8009dfc:	b29a      	uxth	r2, r3
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d034      	beq.n	8009e76 <HAL_I2C_Master_Receive+0x186>
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d130      	bne.n	8009e76 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	9300      	str	r3, [sp, #0]
 8009e18:	6a3b      	ldr	r3, [r7, #32]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	2180      	movs	r1, #128	@ 0x80
 8009e1e:	68f8      	ldr	r0, [r7, #12]
 8009e20:	f000 f880 	bl	8009f24 <I2C_WaitOnFlagUntilTimeout>
 8009e24:	4603      	mov	r3, r0
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d001      	beq.n	8009e2e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	e04d      	b.n	8009eca <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e32:	b29b      	uxth	r3, r3
 8009e34:	2bff      	cmp	r3, #255	@ 0xff
 8009e36:	d90e      	bls.n	8009e56 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	22ff      	movs	r2, #255	@ 0xff
 8009e3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e42:	b2da      	uxtb	r2, r3
 8009e44:	8979      	ldrh	r1, [r7, #10]
 8009e46:	2300      	movs	r3, #0
 8009e48:	9300      	str	r3, [sp, #0]
 8009e4a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009e4e:	68f8      	ldr	r0, [r7, #12]
 8009e50:	f000 fab8 	bl	800a3c4 <I2C_TransferConfig>
 8009e54:	e00f      	b.n	8009e76 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e5a:	b29a      	uxth	r2, r3
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e64:	b2da      	uxtb	r2, r3
 8009e66:	8979      	ldrh	r1, [r7, #10]
 8009e68:	2300      	movs	r3, #0
 8009e6a:	9300      	str	r3, [sp, #0]
 8009e6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009e70:	68f8      	ldr	r0, [r7, #12]
 8009e72:	f000 faa7 	bl	800a3c4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d19d      	bne.n	8009dbc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e80:	697a      	ldr	r2, [r7, #20]
 8009e82:	6a39      	ldr	r1, [r7, #32]
 8009e84:	68f8      	ldr	r0, [r7, #12]
 8009e86:	f000 f8ed 	bl	800a064 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d001      	beq.n	8009e94 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8009e90:	2301      	movs	r3, #1
 8009e92:	e01a      	b.n	8009eca <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	2220      	movs	r2, #32
 8009e9a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	6859      	ldr	r1, [r3, #4]
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681a      	ldr	r2, [r3, #0]
 8009ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8009ed8 <HAL_I2C_Master_Receive+0x1e8>)
 8009ea8:	400b      	ands	r3, r1
 8009eaa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2220      	movs	r2, #32
 8009eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	e000      	b.n	8009eca <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009ec8:	2302      	movs	r3, #2
  }
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3718      	adds	r7, #24
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	80002400 	.word	0x80002400
 8009ed8:	fe00e800 	.word	0xfe00e800

08009edc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	699b      	ldr	r3, [r3, #24]
 8009eea:	f003 0302 	and.w	r3, r3, #2
 8009eee:	2b02      	cmp	r3, #2
 8009ef0:	d103      	bne.n	8009efa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	699b      	ldr	r3, [r3, #24]
 8009f00:	f003 0301 	and.w	r3, r3, #1
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d007      	beq.n	8009f18 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	699a      	ldr	r2, [r3, #24]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f042 0201 	orr.w	r2, r2, #1
 8009f16:	619a      	str	r2, [r3, #24]
  }
}
 8009f18:	bf00      	nop
 8009f1a:	370c      	adds	r7, #12
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr

08009f24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	60b9      	str	r1, [r7, #8]
 8009f2e:	603b      	str	r3, [r7, #0]
 8009f30:	4613      	mov	r3, r2
 8009f32:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009f34:	e03b      	b.n	8009fae <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f36:	69ba      	ldr	r2, [r7, #24]
 8009f38:	6839      	ldr	r1, [r7, #0]
 8009f3a:	68f8      	ldr	r0, [r7, #12]
 8009f3c:	f000 f962 	bl	800a204 <I2C_IsErrorOccurred>
 8009f40:	4603      	mov	r3, r0
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d001      	beq.n	8009f4a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009f46:	2301      	movs	r3, #1
 8009f48:	e041      	b.n	8009fce <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009f50:	d02d      	beq.n	8009fae <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f52:	f7fc ff15 	bl	8006d80 <HAL_GetTick>
 8009f56:	4602      	mov	r2, r0
 8009f58:	69bb      	ldr	r3, [r7, #24]
 8009f5a:	1ad3      	subs	r3, r2, r3
 8009f5c:	683a      	ldr	r2, [r7, #0]
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d302      	bcc.n	8009f68 <I2C_WaitOnFlagUntilTimeout+0x44>
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d122      	bne.n	8009fae <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	699a      	ldr	r2, [r3, #24]
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	4013      	ands	r3, r2
 8009f72:	68ba      	ldr	r2, [r7, #8]
 8009f74:	429a      	cmp	r2, r3
 8009f76:	bf0c      	ite	eq
 8009f78:	2301      	moveq	r3, #1
 8009f7a:	2300      	movne	r3, #0
 8009f7c:	b2db      	uxtb	r3, r3
 8009f7e:	461a      	mov	r2, r3
 8009f80:	79fb      	ldrb	r3, [r7, #7]
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d113      	bne.n	8009fae <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f8a:	f043 0220 	orr.w	r2, r3, #32
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2220      	movs	r2, #32
 8009f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8009faa:	2301      	movs	r3, #1
 8009fac:	e00f      	b.n	8009fce <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	699a      	ldr	r2, [r3, #24]
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	4013      	ands	r3, r2
 8009fb8:	68ba      	ldr	r2, [r7, #8]
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	bf0c      	ite	eq
 8009fbe:	2301      	moveq	r3, #1
 8009fc0:	2300      	movne	r3, #0
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	79fb      	ldrb	r3, [r7, #7]
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d0b4      	beq.n	8009f36 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009fcc:	2300      	movs	r3, #0
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3710      	adds	r7, #16
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}

08009fd6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009fd6:	b580      	push	{r7, lr}
 8009fd8:	b084      	sub	sp, #16
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	60f8      	str	r0, [r7, #12]
 8009fde:	60b9      	str	r1, [r7, #8]
 8009fe0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009fe2:	e033      	b.n	800a04c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009fe4:	687a      	ldr	r2, [r7, #4]
 8009fe6:	68b9      	ldr	r1, [r7, #8]
 8009fe8:	68f8      	ldr	r0, [r7, #12]
 8009fea:	f000 f90b 	bl	800a204 <I2C_IsErrorOccurred>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d001      	beq.n	8009ff8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	e031      	b.n	800a05c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ffe:	d025      	beq.n	800a04c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a000:	f7fc febe 	bl	8006d80 <HAL_GetTick>
 800a004:	4602      	mov	r2, r0
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	1ad3      	subs	r3, r2, r3
 800a00a:	68ba      	ldr	r2, [r7, #8]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d302      	bcc.n	800a016 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d11a      	bne.n	800a04c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	699b      	ldr	r3, [r3, #24]
 800a01c:	f003 0302 	and.w	r3, r3, #2
 800a020:	2b02      	cmp	r3, #2
 800a022:	d013      	beq.n	800a04c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a028:	f043 0220 	orr.w	r2, r3, #32
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2220      	movs	r2, #32
 800a034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2200      	movs	r2, #0
 800a03c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2200      	movs	r2, #0
 800a044:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a048:	2301      	movs	r3, #1
 800a04a:	e007      	b.n	800a05c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	699b      	ldr	r3, [r3, #24]
 800a052:	f003 0302 	and.w	r3, r3, #2
 800a056:	2b02      	cmp	r3, #2
 800a058:	d1c4      	bne.n	8009fe4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a05a:	2300      	movs	r3, #0
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3710      	adds	r7, #16
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b084      	sub	sp, #16
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a070:	e02f      	b.n	800a0d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	68b9      	ldr	r1, [r7, #8]
 800a076:	68f8      	ldr	r0, [r7, #12]
 800a078:	f000 f8c4 	bl	800a204 <I2C_IsErrorOccurred>
 800a07c:	4603      	mov	r3, r0
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d001      	beq.n	800a086 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a082:	2301      	movs	r3, #1
 800a084:	e02d      	b.n	800a0e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a086:	f7fc fe7b 	bl	8006d80 <HAL_GetTick>
 800a08a:	4602      	mov	r2, r0
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	1ad3      	subs	r3, r2, r3
 800a090:	68ba      	ldr	r2, [r7, #8]
 800a092:	429a      	cmp	r2, r3
 800a094:	d302      	bcc.n	800a09c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d11a      	bne.n	800a0d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	699b      	ldr	r3, [r3, #24]
 800a0a2:	f003 0320 	and.w	r3, r3, #32
 800a0a6:	2b20      	cmp	r3, #32
 800a0a8:	d013      	beq.n	800a0d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0ae:	f043 0220 	orr.w	r2, r3, #32
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2220      	movs	r2, #32
 800a0ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	e007      	b.n	800a0e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	699b      	ldr	r3, [r3, #24]
 800a0d8:	f003 0320 	and.w	r3, r3, #32
 800a0dc:	2b20      	cmp	r3, #32
 800a0de:	d1c8      	bne.n	800a072 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a0e0:	2300      	movs	r3, #0
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3710      	adds	r7, #16
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
	...

0800a0ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b086      	sub	sp, #24
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	60b9      	str	r1, [r7, #8]
 800a0f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800a0fc:	e071      	b.n	800a1e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	68b9      	ldr	r1, [r7, #8]
 800a102:	68f8      	ldr	r0, [r7, #12]
 800a104:	f000 f87e 	bl	800a204 <I2C_IsErrorOccurred>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d001      	beq.n	800a112 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800a10e:	2301      	movs	r3, #1
 800a110:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	699b      	ldr	r3, [r3, #24]
 800a118:	f003 0320 	and.w	r3, r3, #32
 800a11c:	2b20      	cmp	r3, #32
 800a11e:	d13b      	bne.n	800a198 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800a120:	7dfb      	ldrb	r3, [r7, #23]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d138      	bne.n	800a198 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	699b      	ldr	r3, [r3, #24]
 800a12c:	f003 0304 	and.w	r3, r3, #4
 800a130:	2b04      	cmp	r3, #4
 800a132:	d105      	bne.n	800a140 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d001      	beq.n	800a140 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800a13c:	2300      	movs	r3, #0
 800a13e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	699b      	ldr	r3, [r3, #24]
 800a146:	f003 0310 	and.w	r3, r3, #16
 800a14a:	2b10      	cmp	r3, #16
 800a14c:	d121      	bne.n	800a192 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	2210      	movs	r2, #16
 800a154:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2204      	movs	r2, #4
 800a15a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	2220      	movs	r2, #32
 800a162:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	6859      	ldr	r1, [r3, #4]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	4b24      	ldr	r3, [pc, #144]	@ (800a200 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800a170:	400b      	ands	r3, r1
 800a172:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2220      	movs	r2, #32
 800a178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2200      	movs	r2, #0
 800a180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2200      	movs	r2, #0
 800a188:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800a18c:	2301      	movs	r3, #1
 800a18e:	75fb      	strb	r3, [r7, #23]
 800a190:	e002      	b.n	800a198 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2200      	movs	r2, #0
 800a196:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800a198:	f7fc fdf2 	bl	8006d80 <HAL_GetTick>
 800a19c:	4602      	mov	r2, r0
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	1ad3      	subs	r3, r2, r3
 800a1a2:	68ba      	ldr	r2, [r7, #8]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d302      	bcc.n	800a1ae <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d119      	bne.n	800a1e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800a1ae:	7dfb      	ldrb	r3, [r7, #23]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d116      	bne.n	800a1e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	699b      	ldr	r3, [r3, #24]
 800a1ba:	f003 0304 	and.w	r3, r3, #4
 800a1be:	2b04      	cmp	r3, #4
 800a1c0:	d00f      	beq.n	800a1e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1c6:	f043 0220 	orr.w	r2, r3, #32
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2220      	movs	r2, #32
 800a1d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	699b      	ldr	r3, [r3, #24]
 800a1e8:	f003 0304 	and.w	r3, r3, #4
 800a1ec:	2b04      	cmp	r3, #4
 800a1ee:	d002      	beq.n	800a1f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800a1f0:	7dfb      	ldrb	r3, [r7, #23]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d083      	beq.n	800a0fe <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800a1f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3718      	adds	r7, #24
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	fe00e800 	.word	0xfe00e800

0800a204 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b08a      	sub	sp, #40	@ 0x28
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a210:	2300      	movs	r3, #0
 800a212:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	699b      	ldr	r3, [r3, #24]
 800a21c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a21e:	2300      	movs	r3, #0
 800a220:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a226:	69bb      	ldr	r3, [r7, #24]
 800a228:	f003 0310 	and.w	r3, r3, #16
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d068      	beq.n	800a302 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	2210      	movs	r2, #16
 800a236:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a238:	e049      	b.n	800a2ce <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a240:	d045      	beq.n	800a2ce <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a242:	f7fc fd9d 	bl	8006d80 <HAL_GetTick>
 800a246:	4602      	mov	r2, r0
 800a248:	69fb      	ldr	r3, [r7, #28]
 800a24a:	1ad3      	subs	r3, r2, r3
 800a24c:	68ba      	ldr	r2, [r7, #8]
 800a24e:	429a      	cmp	r2, r3
 800a250:	d302      	bcc.n	800a258 <I2C_IsErrorOccurred+0x54>
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d13a      	bne.n	800a2ce <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a262:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a26a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	699b      	ldr	r3, [r3, #24]
 800a272:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a276:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a27a:	d121      	bne.n	800a2c0 <I2C_IsErrorOccurred+0xbc>
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a282:	d01d      	beq.n	800a2c0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800a284:	7cfb      	ldrb	r3, [r7, #19]
 800a286:	2b20      	cmp	r3, #32
 800a288:	d01a      	beq.n	800a2c0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	685a      	ldr	r2, [r3, #4]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a298:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a29a:	f7fc fd71 	bl	8006d80 <HAL_GetTick>
 800a29e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a2a0:	e00e      	b.n	800a2c0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a2a2:	f7fc fd6d 	bl	8006d80 <HAL_GetTick>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	69fb      	ldr	r3, [r7, #28]
 800a2aa:	1ad3      	subs	r3, r2, r3
 800a2ac:	2b19      	cmp	r3, #25
 800a2ae:	d907      	bls.n	800a2c0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800a2b0:	6a3b      	ldr	r3, [r7, #32]
 800a2b2:	f043 0320 	orr.w	r3, r3, #32
 800a2b6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800a2be:	e006      	b.n	800a2ce <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	699b      	ldr	r3, [r3, #24]
 800a2c6:	f003 0320 	and.w	r3, r3, #32
 800a2ca:	2b20      	cmp	r3, #32
 800a2cc:	d1e9      	bne.n	800a2a2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	699b      	ldr	r3, [r3, #24]
 800a2d4:	f003 0320 	and.w	r3, r3, #32
 800a2d8:	2b20      	cmp	r3, #32
 800a2da:	d003      	beq.n	800a2e4 <I2C_IsErrorOccurred+0xe0>
 800a2dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d0aa      	beq.n	800a23a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a2e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d103      	bne.n	800a2f4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	2220      	movs	r2, #32
 800a2f2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a2f4:	6a3b      	ldr	r3, [r7, #32]
 800a2f6:	f043 0304 	orr.w	r3, r3, #4
 800a2fa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	699b      	ldr	r3, [r3, #24]
 800a308:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a310:	2b00      	cmp	r3, #0
 800a312:	d00b      	beq.n	800a32c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a314:	6a3b      	ldr	r3, [r7, #32]
 800a316:	f043 0301 	orr.w	r3, r3, #1
 800a31a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a324:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a32c:	69bb      	ldr	r3, [r7, #24]
 800a32e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a332:	2b00      	cmp	r3, #0
 800a334:	d00b      	beq.n	800a34e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a336:	6a3b      	ldr	r3, [r7, #32]
 800a338:	f043 0308 	orr.w	r3, r3, #8
 800a33c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a346:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a348:	2301      	movs	r3, #1
 800a34a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a34e:	69bb      	ldr	r3, [r7, #24]
 800a350:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a354:	2b00      	cmp	r3, #0
 800a356:	d00b      	beq.n	800a370 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a358:	6a3b      	ldr	r3, [r7, #32]
 800a35a:	f043 0302 	orr.w	r3, r3, #2
 800a35e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a368:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a36a:	2301      	movs	r3, #1
 800a36c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800a370:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a374:	2b00      	cmp	r3, #0
 800a376:	d01c      	beq.n	800a3b2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a378:	68f8      	ldr	r0, [r7, #12]
 800a37a:	f7ff fdaf 	bl	8009edc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	6859      	ldr	r1, [r3, #4]
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681a      	ldr	r2, [r3, #0]
 800a388:	4b0d      	ldr	r3, [pc, #52]	@ (800a3c0 <I2C_IsErrorOccurred+0x1bc>)
 800a38a:	400b      	ands	r3, r1
 800a38c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a392:	6a3b      	ldr	r3, [r7, #32]
 800a394:	431a      	orrs	r2, r3
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	2220      	movs	r2, #32
 800a39e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800a3b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3728      	adds	r7, #40	@ 0x28
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	fe00e800 	.word	0xfe00e800

0800a3c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b087      	sub	sp, #28
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	60f8      	str	r0, [r7, #12]
 800a3cc:	607b      	str	r3, [r7, #4]
 800a3ce:	460b      	mov	r3, r1
 800a3d0:	817b      	strh	r3, [r7, #10]
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a3d6:	897b      	ldrh	r3, [r7, #10]
 800a3d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a3dc:	7a7b      	ldrb	r3, [r7, #9]
 800a3de:	041b      	lsls	r3, r3, #16
 800a3e0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a3e4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a3ea:	6a3b      	ldr	r3, [r7, #32]
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a3f2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	685a      	ldr	r2, [r3, #4]
 800a3fa:	6a3b      	ldr	r3, [r7, #32]
 800a3fc:	0d5b      	lsrs	r3, r3, #21
 800a3fe:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800a402:	4b08      	ldr	r3, [pc, #32]	@ (800a424 <I2C_TransferConfig+0x60>)
 800a404:	430b      	orrs	r3, r1
 800a406:	43db      	mvns	r3, r3
 800a408:	ea02 0103 	and.w	r1, r2, r3
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	697a      	ldr	r2, [r7, #20]
 800a412:	430a      	orrs	r2, r1
 800a414:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a416:	bf00      	nop
 800a418:	371c      	adds	r7, #28
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr
 800a422:	bf00      	nop
 800a424:	03ff63ff 	.word	0x03ff63ff

0800a428 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	2b20      	cmp	r3, #32
 800a43c:	d138      	bne.n	800a4b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a444:	2b01      	cmp	r3, #1
 800a446:	d101      	bne.n	800a44c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a448:	2302      	movs	r3, #2
 800a44a:	e032      	b.n	800a4b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2201      	movs	r2, #1
 800a450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2224      	movs	r2, #36	@ 0x24
 800a458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	681a      	ldr	r2, [r3, #0]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f022 0201 	bic.w	r2, r2, #1
 800a46a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a47a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	6819      	ldr	r1, [r3, #0]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	683a      	ldr	r2, [r7, #0]
 800a488:	430a      	orrs	r2, r1
 800a48a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f042 0201 	orr.w	r2, r2, #1
 800a49a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2220      	movs	r2, #32
 800a4a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	e000      	b.n	800a4b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a4b0:	2302      	movs	r3, #2
  }
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	370c      	adds	r7, #12
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr

0800a4be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a4be:	b480      	push	{r7}
 800a4c0:	b085      	sub	sp, #20
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
 800a4c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	2b20      	cmp	r3, #32
 800a4d2:	d139      	bne.n	800a548 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	d101      	bne.n	800a4e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a4de:	2302      	movs	r3, #2
 800a4e0:	e033      	b.n	800a54a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2224      	movs	r2, #36	@ 0x24
 800a4ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f022 0201 	bic.w	r2, r2, #1
 800a500:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a510:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	021b      	lsls	r3, r3, #8
 800a516:	68fa      	ldr	r2, [r7, #12]
 800a518:	4313      	orrs	r3, r2
 800a51a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	68fa      	ldr	r2, [r7, #12]
 800a522:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	681a      	ldr	r2, [r3, #0]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f042 0201 	orr.w	r2, r2, #1
 800a532:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2220      	movs	r2, #32
 800a538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2200      	movs	r2, #0
 800a540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a544:	2300      	movs	r3, #0
 800a546:	e000      	b.n	800a54a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a548:	2302      	movs	r3, #2
  }
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3714      	adds	r7, #20
 800a54e:	46bd      	mov	sp, r7
 800a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a554:	4770      	bx	lr
	...

0800a558 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a558:	b480      	push	{r7}
 800a55a:	b085      	sub	sp, #20
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d141      	bne.n	800a5ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a566:	4b4b      	ldr	r3, [pc, #300]	@ (800a694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a56e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a572:	d131      	bne.n	800a5d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a574:	4b47      	ldr	r3, [pc, #284]	@ (800a694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a576:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a57a:	4a46      	ldr	r2, [pc, #280]	@ (800a694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a57c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a580:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a584:	4b43      	ldr	r3, [pc, #268]	@ (800a694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800a58c:	4a41      	ldr	r2, [pc, #260]	@ (800a694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a58e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a592:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a594:	4b40      	ldr	r3, [pc, #256]	@ (800a698 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	2232      	movs	r2, #50	@ 0x32
 800a59a:	fb02 f303 	mul.w	r3, r2, r3
 800a59e:	4a3f      	ldr	r2, [pc, #252]	@ (800a69c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a5a0:	fba2 2303 	umull	r2, r3, r2, r3
 800a5a4:	0c9b      	lsrs	r3, r3, #18
 800a5a6:	3301      	adds	r3, #1
 800a5a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a5aa:	e002      	b.n	800a5b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	3b01      	subs	r3, #1
 800a5b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a5b2:	4b38      	ldr	r3, [pc, #224]	@ (800a694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a5b4:	695b      	ldr	r3, [r3, #20]
 800a5b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a5ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a5be:	d102      	bne.n	800a5c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d1f2      	bne.n	800a5ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a5c6:	4b33      	ldr	r3, [pc, #204]	@ (800a694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a5c8:	695b      	ldr	r3, [r3, #20]
 800a5ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a5ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a5d2:	d158      	bne.n	800a686 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a5d4:	2303      	movs	r3, #3
 800a5d6:	e057      	b.n	800a688 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a5d8:	4b2e      	ldr	r3, [pc, #184]	@ (800a694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a5da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5de:	4a2d      	ldr	r2, [pc, #180]	@ (800a694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a5e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a5e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800a5e8:	e04d      	b.n	800a686 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a5f0:	d141      	bne.n	800a676 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a5f2:	4b28      	ldr	r3, [pc, #160]	@ (800a694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a5fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a5fe:	d131      	bne.n	800a664 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a600:	4b24      	ldr	r3, [pc, #144]	@ (800a694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a602:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a606:	4a23      	ldr	r2, [pc, #140]	@ (800a694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a608:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a60c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a610:	4b20      	ldr	r3, [pc, #128]	@ (800a694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800a618:	4a1e      	ldr	r2, [pc, #120]	@ (800a694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a61a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a61e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a620:	4b1d      	ldr	r3, [pc, #116]	@ (800a698 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	2232      	movs	r2, #50	@ 0x32
 800a626:	fb02 f303 	mul.w	r3, r2, r3
 800a62a:	4a1c      	ldr	r2, [pc, #112]	@ (800a69c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a62c:	fba2 2303 	umull	r2, r3, r2, r3
 800a630:	0c9b      	lsrs	r3, r3, #18
 800a632:	3301      	adds	r3, #1
 800a634:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a636:	e002      	b.n	800a63e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	3b01      	subs	r3, #1
 800a63c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a63e:	4b15      	ldr	r3, [pc, #84]	@ (800a694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a640:	695b      	ldr	r3, [r3, #20]
 800a642:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a646:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a64a:	d102      	bne.n	800a652 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d1f2      	bne.n	800a638 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a652:	4b10      	ldr	r3, [pc, #64]	@ (800a694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a654:	695b      	ldr	r3, [r3, #20]
 800a656:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a65a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a65e:	d112      	bne.n	800a686 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a660:	2303      	movs	r3, #3
 800a662:	e011      	b.n	800a688 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a664:	4b0b      	ldr	r3, [pc, #44]	@ (800a694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a666:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a66a:	4a0a      	ldr	r2, [pc, #40]	@ (800a694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a66c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a670:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800a674:	e007      	b.n	800a686 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a676:	4b07      	ldr	r3, [pc, #28]	@ (800a694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800a67e:	4a05      	ldr	r2, [pc, #20]	@ (800a694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a680:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a684:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800a686:	2300      	movs	r3, #0
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3714      	adds	r7, #20
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr
 800a694:	40007000 	.word	0x40007000
 800a698:	20000004 	.word	0x20000004
 800a69c:	431bde83 	.word	0x431bde83

0800a6a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b088      	sub	sp, #32
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d101      	bne.n	800a6b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	e2fe      	b.n	800acb0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f003 0301 	and.w	r3, r3, #1
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d075      	beq.n	800a7aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a6be:	4b97      	ldr	r3, [pc, #604]	@ (800a91c <HAL_RCC_OscConfig+0x27c>)
 800a6c0:	689b      	ldr	r3, [r3, #8]
 800a6c2:	f003 030c 	and.w	r3, r3, #12
 800a6c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a6c8:	4b94      	ldr	r3, [pc, #592]	@ (800a91c <HAL_RCC_OscConfig+0x27c>)
 800a6ca:	68db      	ldr	r3, [r3, #12]
 800a6cc:	f003 0303 	and.w	r3, r3, #3
 800a6d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800a6d2:	69bb      	ldr	r3, [r7, #24]
 800a6d4:	2b0c      	cmp	r3, #12
 800a6d6:	d102      	bne.n	800a6de <HAL_RCC_OscConfig+0x3e>
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	2b03      	cmp	r3, #3
 800a6dc:	d002      	beq.n	800a6e4 <HAL_RCC_OscConfig+0x44>
 800a6de:	69bb      	ldr	r3, [r7, #24]
 800a6e0:	2b08      	cmp	r3, #8
 800a6e2:	d10b      	bne.n	800a6fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a6e4:	4b8d      	ldr	r3, [pc, #564]	@ (800a91c <HAL_RCC_OscConfig+0x27c>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d05b      	beq.n	800a7a8 <HAL_RCC_OscConfig+0x108>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d157      	bne.n	800a7a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	e2d9      	b.n	800acb0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a704:	d106      	bne.n	800a714 <HAL_RCC_OscConfig+0x74>
 800a706:	4b85      	ldr	r3, [pc, #532]	@ (800a91c <HAL_RCC_OscConfig+0x27c>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4a84      	ldr	r2, [pc, #528]	@ (800a91c <HAL_RCC_OscConfig+0x27c>)
 800a70c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a710:	6013      	str	r3, [r2, #0]
 800a712:	e01d      	b.n	800a750 <HAL_RCC_OscConfig+0xb0>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a71c:	d10c      	bne.n	800a738 <HAL_RCC_OscConfig+0x98>
 800a71e:	4b7f      	ldr	r3, [pc, #508]	@ (800a91c <HAL_RCC_OscConfig+0x27c>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a7e      	ldr	r2, [pc, #504]	@ (800a91c <HAL_RCC_OscConfig+0x27c>)
 800a724:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a728:	6013      	str	r3, [r2, #0]
 800a72a:	4b7c      	ldr	r3, [pc, #496]	@ (800a91c <HAL_RCC_OscConfig+0x27c>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4a7b      	ldr	r2, [pc, #492]	@ (800a91c <HAL_RCC_OscConfig+0x27c>)
 800a730:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a734:	6013      	str	r3, [r2, #0]
 800a736:	e00b      	b.n	800a750 <HAL_RCC_OscConfig+0xb0>
 800a738:	4b78      	ldr	r3, [pc, #480]	@ (800a91c <HAL_RCC_OscConfig+0x27c>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4a77      	ldr	r2, [pc, #476]	@ (800a91c <HAL_RCC_OscConfig+0x27c>)
 800a73e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a742:	6013      	str	r3, [r2, #0]
 800a744:	4b75      	ldr	r3, [pc, #468]	@ (800a91c <HAL_RCC_OscConfig+0x27c>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a74      	ldr	r2, [pc, #464]	@ (800a91c <HAL_RCC_OscConfig+0x27c>)
 800a74a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a74e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d013      	beq.n	800a780 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a758:	f7fc fb12 	bl	8006d80 <HAL_GetTick>
 800a75c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a75e:	e008      	b.n	800a772 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a760:	f7fc fb0e 	bl	8006d80 <HAL_GetTick>
 800a764:	4602      	mov	r2, r0
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	1ad3      	subs	r3, r2, r3
 800a76a:	2b64      	cmp	r3, #100	@ 0x64
 800a76c:	d901      	bls.n	800a772 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a76e:	2303      	movs	r3, #3
 800a770:	e29e      	b.n	800acb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a772:	4b6a      	ldr	r3, [pc, #424]	@ (800a91c <HAL_RCC_OscConfig+0x27c>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d0f0      	beq.n	800a760 <HAL_RCC_OscConfig+0xc0>
 800a77e:	e014      	b.n	800a7aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a780:	f7fc fafe 	bl	8006d80 <HAL_GetTick>
 800a784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a786:	e008      	b.n	800a79a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a788:	f7fc fafa 	bl	8006d80 <HAL_GetTick>
 800a78c:	4602      	mov	r2, r0
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	1ad3      	subs	r3, r2, r3
 800a792:	2b64      	cmp	r3, #100	@ 0x64
 800a794:	d901      	bls.n	800a79a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a796:	2303      	movs	r3, #3
 800a798:	e28a      	b.n	800acb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a79a:	4b60      	ldr	r3, [pc, #384]	@ (800a91c <HAL_RCC_OscConfig+0x27c>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d1f0      	bne.n	800a788 <HAL_RCC_OscConfig+0xe8>
 800a7a6:	e000      	b.n	800a7aa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a7a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f003 0302 	and.w	r3, r3, #2
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d075      	beq.n	800a8a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a7b6:	4b59      	ldr	r3, [pc, #356]	@ (800a91c <HAL_RCC_OscConfig+0x27c>)
 800a7b8:	689b      	ldr	r3, [r3, #8]
 800a7ba:	f003 030c 	and.w	r3, r3, #12
 800a7be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a7c0:	4b56      	ldr	r3, [pc, #344]	@ (800a91c <HAL_RCC_OscConfig+0x27c>)
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	f003 0303 	and.w	r3, r3, #3
 800a7c8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800a7ca:	69bb      	ldr	r3, [r7, #24]
 800a7cc:	2b0c      	cmp	r3, #12
 800a7ce:	d102      	bne.n	800a7d6 <HAL_RCC_OscConfig+0x136>
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	2b02      	cmp	r3, #2
 800a7d4:	d002      	beq.n	800a7dc <HAL_RCC_OscConfig+0x13c>
 800a7d6:	69bb      	ldr	r3, [r7, #24]
 800a7d8:	2b04      	cmp	r3, #4
 800a7da:	d11f      	bne.n	800a81c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a7dc:	4b4f      	ldr	r3, [pc, #316]	@ (800a91c <HAL_RCC_OscConfig+0x27c>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d005      	beq.n	800a7f4 <HAL_RCC_OscConfig+0x154>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d101      	bne.n	800a7f4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	e25d      	b.n	800acb0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a7f4:	4b49      	ldr	r3, [pc, #292]	@ (800a91c <HAL_RCC_OscConfig+0x27c>)
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	691b      	ldr	r3, [r3, #16]
 800a800:	061b      	lsls	r3, r3, #24
 800a802:	4946      	ldr	r1, [pc, #280]	@ (800a91c <HAL_RCC_OscConfig+0x27c>)
 800a804:	4313      	orrs	r3, r2
 800a806:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a808:	4b45      	ldr	r3, [pc, #276]	@ (800a920 <HAL_RCC_OscConfig+0x280>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	4618      	mov	r0, r3
 800a80e:	f7fa fbcb 	bl	8004fa8 <HAL_InitTick>
 800a812:	4603      	mov	r3, r0
 800a814:	2b00      	cmp	r3, #0
 800a816:	d043      	beq.n	800a8a0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800a818:	2301      	movs	r3, #1
 800a81a:	e249      	b.n	800acb0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	68db      	ldr	r3, [r3, #12]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d023      	beq.n	800a86c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a824:	4b3d      	ldr	r3, [pc, #244]	@ (800a91c <HAL_RCC_OscConfig+0x27c>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4a3c      	ldr	r2, [pc, #240]	@ (800a91c <HAL_RCC_OscConfig+0x27c>)
 800a82a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a82e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a830:	f7fc faa6 	bl	8006d80 <HAL_GetTick>
 800a834:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a836:	e008      	b.n	800a84a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a838:	f7fc faa2 	bl	8006d80 <HAL_GetTick>
 800a83c:	4602      	mov	r2, r0
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	1ad3      	subs	r3, r2, r3
 800a842:	2b02      	cmp	r3, #2
 800a844:	d901      	bls.n	800a84a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a846:	2303      	movs	r3, #3
 800a848:	e232      	b.n	800acb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a84a:	4b34      	ldr	r3, [pc, #208]	@ (800a91c <HAL_RCC_OscConfig+0x27c>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a852:	2b00      	cmp	r3, #0
 800a854:	d0f0      	beq.n	800a838 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a856:	4b31      	ldr	r3, [pc, #196]	@ (800a91c <HAL_RCC_OscConfig+0x27c>)
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	691b      	ldr	r3, [r3, #16]
 800a862:	061b      	lsls	r3, r3, #24
 800a864:	492d      	ldr	r1, [pc, #180]	@ (800a91c <HAL_RCC_OscConfig+0x27c>)
 800a866:	4313      	orrs	r3, r2
 800a868:	604b      	str	r3, [r1, #4]
 800a86a:	e01a      	b.n	800a8a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a86c:	4b2b      	ldr	r3, [pc, #172]	@ (800a91c <HAL_RCC_OscConfig+0x27c>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a2a      	ldr	r2, [pc, #168]	@ (800a91c <HAL_RCC_OscConfig+0x27c>)
 800a872:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a876:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a878:	f7fc fa82 	bl	8006d80 <HAL_GetTick>
 800a87c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a87e:	e008      	b.n	800a892 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a880:	f7fc fa7e 	bl	8006d80 <HAL_GetTick>
 800a884:	4602      	mov	r2, r0
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	1ad3      	subs	r3, r2, r3
 800a88a:	2b02      	cmp	r3, #2
 800a88c:	d901      	bls.n	800a892 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800a88e:	2303      	movs	r3, #3
 800a890:	e20e      	b.n	800acb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a892:	4b22      	ldr	r3, [pc, #136]	@ (800a91c <HAL_RCC_OscConfig+0x27c>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d1f0      	bne.n	800a880 <HAL_RCC_OscConfig+0x1e0>
 800a89e:	e000      	b.n	800a8a2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a8a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f003 0308 	and.w	r3, r3, #8
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d041      	beq.n	800a932 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	695b      	ldr	r3, [r3, #20]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d01c      	beq.n	800a8f0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a8b6:	4b19      	ldr	r3, [pc, #100]	@ (800a91c <HAL_RCC_OscConfig+0x27c>)
 800a8b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a8bc:	4a17      	ldr	r2, [pc, #92]	@ (800a91c <HAL_RCC_OscConfig+0x27c>)
 800a8be:	f043 0301 	orr.w	r3, r3, #1
 800a8c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8c6:	f7fc fa5b 	bl	8006d80 <HAL_GetTick>
 800a8ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a8cc:	e008      	b.n	800a8e0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a8ce:	f7fc fa57 	bl	8006d80 <HAL_GetTick>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	1ad3      	subs	r3, r2, r3
 800a8d8:	2b02      	cmp	r3, #2
 800a8da:	d901      	bls.n	800a8e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a8dc:	2303      	movs	r3, #3
 800a8de:	e1e7      	b.n	800acb0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a8e0:	4b0e      	ldr	r3, [pc, #56]	@ (800a91c <HAL_RCC_OscConfig+0x27c>)
 800a8e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a8e6:	f003 0302 	and.w	r3, r3, #2
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d0ef      	beq.n	800a8ce <HAL_RCC_OscConfig+0x22e>
 800a8ee:	e020      	b.n	800a932 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a8f0:	4b0a      	ldr	r3, [pc, #40]	@ (800a91c <HAL_RCC_OscConfig+0x27c>)
 800a8f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a8f6:	4a09      	ldr	r2, [pc, #36]	@ (800a91c <HAL_RCC_OscConfig+0x27c>)
 800a8f8:	f023 0301 	bic.w	r3, r3, #1
 800a8fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a900:	f7fc fa3e 	bl	8006d80 <HAL_GetTick>
 800a904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a906:	e00d      	b.n	800a924 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a908:	f7fc fa3a 	bl	8006d80 <HAL_GetTick>
 800a90c:	4602      	mov	r2, r0
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	1ad3      	subs	r3, r2, r3
 800a912:	2b02      	cmp	r3, #2
 800a914:	d906      	bls.n	800a924 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a916:	2303      	movs	r3, #3
 800a918:	e1ca      	b.n	800acb0 <HAL_RCC_OscConfig+0x610>
 800a91a:	bf00      	nop
 800a91c:	40021000 	.word	0x40021000
 800a920:	20000138 	.word	0x20000138
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a924:	4b8c      	ldr	r3, [pc, #560]	@ (800ab58 <HAL_RCC_OscConfig+0x4b8>)
 800a926:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a92a:	f003 0302 	and.w	r3, r3, #2
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d1ea      	bne.n	800a908 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f003 0304 	and.w	r3, r3, #4
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	f000 80a6 	beq.w	800aa8c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a940:	2300      	movs	r3, #0
 800a942:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a944:	4b84      	ldr	r3, [pc, #528]	@ (800ab58 <HAL_RCC_OscConfig+0x4b8>)
 800a946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a948:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d101      	bne.n	800a954 <HAL_RCC_OscConfig+0x2b4>
 800a950:	2301      	movs	r3, #1
 800a952:	e000      	b.n	800a956 <HAL_RCC_OscConfig+0x2b6>
 800a954:	2300      	movs	r3, #0
 800a956:	2b00      	cmp	r3, #0
 800a958:	d00d      	beq.n	800a976 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a95a:	4b7f      	ldr	r3, [pc, #508]	@ (800ab58 <HAL_RCC_OscConfig+0x4b8>)
 800a95c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a95e:	4a7e      	ldr	r2, [pc, #504]	@ (800ab58 <HAL_RCC_OscConfig+0x4b8>)
 800a960:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a964:	6593      	str	r3, [r2, #88]	@ 0x58
 800a966:	4b7c      	ldr	r3, [pc, #496]	@ (800ab58 <HAL_RCC_OscConfig+0x4b8>)
 800a968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a96a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a96e:	60fb      	str	r3, [r7, #12]
 800a970:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a972:	2301      	movs	r3, #1
 800a974:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a976:	4b79      	ldr	r3, [pc, #484]	@ (800ab5c <HAL_RCC_OscConfig+0x4bc>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d118      	bne.n	800a9b4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a982:	4b76      	ldr	r3, [pc, #472]	@ (800ab5c <HAL_RCC_OscConfig+0x4bc>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	4a75      	ldr	r2, [pc, #468]	@ (800ab5c <HAL_RCC_OscConfig+0x4bc>)
 800a988:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a98c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a98e:	f7fc f9f7 	bl	8006d80 <HAL_GetTick>
 800a992:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a994:	e008      	b.n	800a9a8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a996:	f7fc f9f3 	bl	8006d80 <HAL_GetTick>
 800a99a:	4602      	mov	r2, r0
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	1ad3      	subs	r3, r2, r3
 800a9a0:	2b02      	cmp	r3, #2
 800a9a2:	d901      	bls.n	800a9a8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800a9a4:	2303      	movs	r3, #3
 800a9a6:	e183      	b.n	800acb0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a9a8:	4b6c      	ldr	r3, [pc, #432]	@ (800ab5c <HAL_RCC_OscConfig+0x4bc>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d0f0      	beq.n	800a996 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	689b      	ldr	r3, [r3, #8]
 800a9b8:	2b01      	cmp	r3, #1
 800a9ba:	d108      	bne.n	800a9ce <HAL_RCC_OscConfig+0x32e>
 800a9bc:	4b66      	ldr	r3, [pc, #408]	@ (800ab58 <HAL_RCC_OscConfig+0x4b8>)
 800a9be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9c2:	4a65      	ldr	r2, [pc, #404]	@ (800ab58 <HAL_RCC_OscConfig+0x4b8>)
 800a9c4:	f043 0301 	orr.w	r3, r3, #1
 800a9c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a9cc:	e024      	b.n	800aa18 <HAL_RCC_OscConfig+0x378>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	689b      	ldr	r3, [r3, #8]
 800a9d2:	2b05      	cmp	r3, #5
 800a9d4:	d110      	bne.n	800a9f8 <HAL_RCC_OscConfig+0x358>
 800a9d6:	4b60      	ldr	r3, [pc, #384]	@ (800ab58 <HAL_RCC_OscConfig+0x4b8>)
 800a9d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9dc:	4a5e      	ldr	r2, [pc, #376]	@ (800ab58 <HAL_RCC_OscConfig+0x4b8>)
 800a9de:	f043 0304 	orr.w	r3, r3, #4
 800a9e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a9e6:	4b5c      	ldr	r3, [pc, #368]	@ (800ab58 <HAL_RCC_OscConfig+0x4b8>)
 800a9e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9ec:	4a5a      	ldr	r2, [pc, #360]	@ (800ab58 <HAL_RCC_OscConfig+0x4b8>)
 800a9ee:	f043 0301 	orr.w	r3, r3, #1
 800a9f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a9f6:	e00f      	b.n	800aa18 <HAL_RCC_OscConfig+0x378>
 800a9f8:	4b57      	ldr	r3, [pc, #348]	@ (800ab58 <HAL_RCC_OscConfig+0x4b8>)
 800a9fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9fe:	4a56      	ldr	r2, [pc, #344]	@ (800ab58 <HAL_RCC_OscConfig+0x4b8>)
 800aa00:	f023 0301 	bic.w	r3, r3, #1
 800aa04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800aa08:	4b53      	ldr	r3, [pc, #332]	@ (800ab58 <HAL_RCC_OscConfig+0x4b8>)
 800aa0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa0e:	4a52      	ldr	r2, [pc, #328]	@ (800ab58 <HAL_RCC_OscConfig+0x4b8>)
 800aa10:	f023 0304 	bic.w	r3, r3, #4
 800aa14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	689b      	ldr	r3, [r3, #8]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d016      	beq.n	800aa4e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa20:	f7fc f9ae 	bl	8006d80 <HAL_GetTick>
 800aa24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aa26:	e00a      	b.n	800aa3e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa28:	f7fc f9aa 	bl	8006d80 <HAL_GetTick>
 800aa2c:	4602      	mov	r2, r0
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	1ad3      	subs	r3, r2, r3
 800aa32:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d901      	bls.n	800aa3e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800aa3a:	2303      	movs	r3, #3
 800aa3c:	e138      	b.n	800acb0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aa3e:	4b46      	ldr	r3, [pc, #280]	@ (800ab58 <HAL_RCC_OscConfig+0x4b8>)
 800aa40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa44:	f003 0302 	and.w	r3, r3, #2
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d0ed      	beq.n	800aa28 <HAL_RCC_OscConfig+0x388>
 800aa4c:	e015      	b.n	800aa7a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa4e:	f7fc f997 	bl	8006d80 <HAL_GetTick>
 800aa52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800aa54:	e00a      	b.n	800aa6c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa56:	f7fc f993 	bl	8006d80 <HAL_GetTick>
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	1ad3      	subs	r3, r2, r3
 800aa60:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d901      	bls.n	800aa6c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800aa68:	2303      	movs	r3, #3
 800aa6a:	e121      	b.n	800acb0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800aa6c:	4b3a      	ldr	r3, [pc, #232]	@ (800ab58 <HAL_RCC_OscConfig+0x4b8>)
 800aa6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa72:	f003 0302 	and.w	r3, r3, #2
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d1ed      	bne.n	800aa56 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800aa7a:	7ffb      	ldrb	r3, [r7, #31]
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d105      	bne.n	800aa8c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aa80:	4b35      	ldr	r3, [pc, #212]	@ (800ab58 <HAL_RCC_OscConfig+0x4b8>)
 800aa82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa84:	4a34      	ldr	r2, [pc, #208]	@ (800ab58 <HAL_RCC_OscConfig+0x4b8>)
 800aa86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aa8a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f003 0320 	and.w	r3, r3, #32
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d03c      	beq.n	800ab12 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	699b      	ldr	r3, [r3, #24]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d01c      	beq.n	800aada <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800aaa0:	4b2d      	ldr	r3, [pc, #180]	@ (800ab58 <HAL_RCC_OscConfig+0x4b8>)
 800aaa2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800aaa6:	4a2c      	ldr	r2, [pc, #176]	@ (800ab58 <HAL_RCC_OscConfig+0x4b8>)
 800aaa8:	f043 0301 	orr.w	r3, r3, #1
 800aaac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aab0:	f7fc f966 	bl	8006d80 <HAL_GetTick>
 800aab4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800aab6:	e008      	b.n	800aaca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aab8:	f7fc f962 	bl	8006d80 <HAL_GetTick>
 800aabc:	4602      	mov	r2, r0
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	1ad3      	subs	r3, r2, r3
 800aac2:	2b02      	cmp	r3, #2
 800aac4:	d901      	bls.n	800aaca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800aac6:	2303      	movs	r3, #3
 800aac8:	e0f2      	b.n	800acb0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800aaca:	4b23      	ldr	r3, [pc, #140]	@ (800ab58 <HAL_RCC_OscConfig+0x4b8>)
 800aacc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800aad0:	f003 0302 	and.w	r3, r3, #2
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d0ef      	beq.n	800aab8 <HAL_RCC_OscConfig+0x418>
 800aad8:	e01b      	b.n	800ab12 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800aada:	4b1f      	ldr	r3, [pc, #124]	@ (800ab58 <HAL_RCC_OscConfig+0x4b8>)
 800aadc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800aae0:	4a1d      	ldr	r2, [pc, #116]	@ (800ab58 <HAL_RCC_OscConfig+0x4b8>)
 800aae2:	f023 0301 	bic.w	r3, r3, #1
 800aae6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aaea:	f7fc f949 	bl	8006d80 <HAL_GetTick>
 800aaee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800aaf0:	e008      	b.n	800ab04 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aaf2:	f7fc f945 	bl	8006d80 <HAL_GetTick>
 800aaf6:	4602      	mov	r2, r0
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	1ad3      	subs	r3, r2, r3
 800aafc:	2b02      	cmp	r3, #2
 800aafe:	d901      	bls.n	800ab04 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800ab00:	2303      	movs	r3, #3
 800ab02:	e0d5      	b.n	800acb0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ab04:	4b14      	ldr	r3, [pc, #80]	@ (800ab58 <HAL_RCC_OscConfig+0x4b8>)
 800ab06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ab0a:	f003 0302 	and.w	r3, r3, #2
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d1ef      	bne.n	800aaf2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	69db      	ldr	r3, [r3, #28]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	f000 80c9 	beq.w	800acae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ab1c:	4b0e      	ldr	r3, [pc, #56]	@ (800ab58 <HAL_RCC_OscConfig+0x4b8>)
 800ab1e:	689b      	ldr	r3, [r3, #8]
 800ab20:	f003 030c 	and.w	r3, r3, #12
 800ab24:	2b0c      	cmp	r3, #12
 800ab26:	f000 8083 	beq.w	800ac30 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	69db      	ldr	r3, [r3, #28]
 800ab2e:	2b02      	cmp	r3, #2
 800ab30:	d15e      	bne.n	800abf0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab32:	4b09      	ldr	r3, [pc, #36]	@ (800ab58 <HAL_RCC_OscConfig+0x4b8>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	4a08      	ldr	r2, [pc, #32]	@ (800ab58 <HAL_RCC_OscConfig+0x4b8>)
 800ab38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ab3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab3e:	f7fc f91f 	bl	8006d80 <HAL_GetTick>
 800ab42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ab44:	e00c      	b.n	800ab60 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab46:	f7fc f91b 	bl	8006d80 <HAL_GetTick>
 800ab4a:	4602      	mov	r2, r0
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	1ad3      	subs	r3, r2, r3
 800ab50:	2b02      	cmp	r3, #2
 800ab52:	d905      	bls.n	800ab60 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800ab54:	2303      	movs	r3, #3
 800ab56:	e0ab      	b.n	800acb0 <HAL_RCC_OscConfig+0x610>
 800ab58:	40021000 	.word	0x40021000
 800ab5c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ab60:	4b55      	ldr	r3, [pc, #340]	@ (800acb8 <HAL_RCC_OscConfig+0x618>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d1ec      	bne.n	800ab46 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ab6c:	4b52      	ldr	r3, [pc, #328]	@ (800acb8 <HAL_RCC_OscConfig+0x618>)
 800ab6e:	68da      	ldr	r2, [r3, #12]
 800ab70:	4b52      	ldr	r3, [pc, #328]	@ (800acbc <HAL_RCC_OscConfig+0x61c>)
 800ab72:	4013      	ands	r3, r2
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	6a11      	ldr	r1, [r2, #32]
 800ab78:	687a      	ldr	r2, [r7, #4]
 800ab7a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ab7c:	3a01      	subs	r2, #1
 800ab7e:	0112      	lsls	r2, r2, #4
 800ab80:	4311      	orrs	r1, r2
 800ab82:	687a      	ldr	r2, [r7, #4]
 800ab84:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800ab86:	0212      	lsls	r2, r2, #8
 800ab88:	4311      	orrs	r1, r2
 800ab8a:	687a      	ldr	r2, [r7, #4]
 800ab8c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800ab8e:	0852      	lsrs	r2, r2, #1
 800ab90:	3a01      	subs	r2, #1
 800ab92:	0552      	lsls	r2, r2, #21
 800ab94:	4311      	orrs	r1, r2
 800ab96:	687a      	ldr	r2, [r7, #4]
 800ab98:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800ab9a:	0852      	lsrs	r2, r2, #1
 800ab9c:	3a01      	subs	r2, #1
 800ab9e:	0652      	lsls	r2, r2, #25
 800aba0:	4311      	orrs	r1, r2
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800aba6:	06d2      	lsls	r2, r2, #27
 800aba8:	430a      	orrs	r2, r1
 800abaa:	4943      	ldr	r1, [pc, #268]	@ (800acb8 <HAL_RCC_OscConfig+0x618>)
 800abac:	4313      	orrs	r3, r2
 800abae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800abb0:	4b41      	ldr	r3, [pc, #260]	@ (800acb8 <HAL_RCC_OscConfig+0x618>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	4a40      	ldr	r2, [pc, #256]	@ (800acb8 <HAL_RCC_OscConfig+0x618>)
 800abb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800abba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800abbc:	4b3e      	ldr	r3, [pc, #248]	@ (800acb8 <HAL_RCC_OscConfig+0x618>)
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	4a3d      	ldr	r2, [pc, #244]	@ (800acb8 <HAL_RCC_OscConfig+0x618>)
 800abc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800abc6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abc8:	f7fc f8da 	bl	8006d80 <HAL_GetTick>
 800abcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800abce:	e008      	b.n	800abe2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800abd0:	f7fc f8d6 	bl	8006d80 <HAL_GetTick>
 800abd4:	4602      	mov	r2, r0
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	1ad3      	subs	r3, r2, r3
 800abda:	2b02      	cmp	r3, #2
 800abdc:	d901      	bls.n	800abe2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800abde:	2303      	movs	r3, #3
 800abe0:	e066      	b.n	800acb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800abe2:	4b35      	ldr	r3, [pc, #212]	@ (800acb8 <HAL_RCC_OscConfig+0x618>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800abea:	2b00      	cmp	r3, #0
 800abec:	d0f0      	beq.n	800abd0 <HAL_RCC_OscConfig+0x530>
 800abee:	e05e      	b.n	800acae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800abf0:	4b31      	ldr	r3, [pc, #196]	@ (800acb8 <HAL_RCC_OscConfig+0x618>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	4a30      	ldr	r2, [pc, #192]	@ (800acb8 <HAL_RCC_OscConfig+0x618>)
 800abf6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800abfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abfc:	f7fc f8c0 	bl	8006d80 <HAL_GetTick>
 800ac00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ac02:	e008      	b.n	800ac16 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac04:	f7fc f8bc 	bl	8006d80 <HAL_GetTick>
 800ac08:	4602      	mov	r2, r0
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	1ad3      	subs	r3, r2, r3
 800ac0e:	2b02      	cmp	r3, #2
 800ac10:	d901      	bls.n	800ac16 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800ac12:	2303      	movs	r3, #3
 800ac14:	e04c      	b.n	800acb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ac16:	4b28      	ldr	r3, [pc, #160]	@ (800acb8 <HAL_RCC_OscConfig+0x618>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d1f0      	bne.n	800ac04 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800ac22:	4b25      	ldr	r3, [pc, #148]	@ (800acb8 <HAL_RCC_OscConfig+0x618>)
 800ac24:	68da      	ldr	r2, [r3, #12]
 800ac26:	4924      	ldr	r1, [pc, #144]	@ (800acb8 <HAL_RCC_OscConfig+0x618>)
 800ac28:	4b25      	ldr	r3, [pc, #148]	@ (800acc0 <HAL_RCC_OscConfig+0x620>)
 800ac2a:	4013      	ands	r3, r2
 800ac2c:	60cb      	str	r3, [r1, #12]
 800ac2e:	e03e      	b.n	800acae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	69db      	ldr	r3, [r3, #28]
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	d101      	bne.n	800ac3c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	e039      	b.n	800acb0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800ac3c:	4b1e      	ldr	r3, [pc, #120]	@ (800acb8 <HAL_RCC_OscConfig+0x618>)
 800ac3e:	68db      	ldr	r3, [r3, #12]
 800ac40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	f003 0203 	and.w	r2, r3, #3
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6a1b      	ldr	r3, [r3, #32]
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d12c      	bne.n	800acaa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac5a:	3b01      	subs	r3, #1
 800ac5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d123      	bne.n	800acaa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d11b      	bne.n	800acaa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac7c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d113      	bne.n	800acaa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac8c:	085b      	lsrs	r3, r3, #1
 800ac8e:	3b01      	subs	r3, #1
 800ac90:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d109      	bne.n	800acaa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aca0:	085b      	lsrs	r3, r3, #1
 800aca2:	3b01      	subs	r3, #1
 800aca4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d001      	beq.n	800acae <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800acaa:	2301      	movs	r3, #1
 800acac:	e000      	b.n	800acb0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800acae:	2300      	movs	r3, #0
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3720      	adds	r7, #32
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}
 800acb8:	40021000 	.word	0x40021000
 800acbc:	019f800c 	.word	0x019f800c
 800acc0:	feeefffc 	.word	0xfeeefffc

0800acc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b086      	sub	sp, #24
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800acce:	2300      	movs	r3, #0
 800acd0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d101      	bne.n	800acdc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800acd8:	2301      	movs	r3, #1
 800acda:	e11e      	b.n	800af1a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800acdc:	4b91      	ldr	r3, [pc, #580]	@ (800af24 <HAL_RCC_ClockConfig+0x260>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f003 030f 	and.w	r3, r3, #15
 800ace4:	683a      	ldr	r2, [r7, #0]
 800ace6:	429a      	cmp	r2, r3
 800ace8:	d910      	bls.n	800ad0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800acea:	4b8e      	ldr	r3, [pc, #568]	@ (800af24 <HAL_RCC_ClockConfig+0x260>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f023 020f 	bic.w	r2, r3, #15
 800acf2:	498c      	ldr	r1, [pc, #560]	@ (800af24 <HAL_RCC_ClockConfig+0x260>)
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	4313      	orrs	r3, r2
 800acf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800acfa:	4b8a      	ldr	r3, [pc, #552]	@ (800af24 <HAL_RCC_ClockConfig+0x260>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f003 030f 	and.w	r3, r3, #15
 800ad02:	683a      	ldr	r2, [r7, #0]
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d001      	beq.n	800ad0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800ad08:	2301      	movs	r3, #1
 800ad0a:	e106      	b.n	800af1a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f003 0301 	and.w	r3, r3, #1
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d073      	beq.n	800ae00 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	2b03      	cmp	r3, #3
 800ad1e:	d129      	bne.n	800ad74 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ad20:	4b81      	ldr	r3, [pc, #516]	@ (800af28 <HAL_RCC_ClockConfig+0x264>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d101      	bne.n	800ad30 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	e0f4      	b.n	800af1a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800ad30:	f000 f9d0 	bl	800b0d4 <RCC_GetSysClockFreqFromPLLSource>
 800ad34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	4a7c      	ldr	r2, [pc, #496]	@ (800af2c <HAL_RCC_ClockConfig+0x268>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d93f      	bls.n	800adbe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800ad3e:	4b7a      	ldr	r3, [pc, #488]	@ (800af28 <HAL_RCC_ClockConfig+0x264>)
 800ad40:	689b      	ldr	r3, [r3, #8]
 800ad42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d009      	beq.n	800ad5e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d033      	beq.n	800adbe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d12f      	bne.n	800adbe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ad5e:	4b72      	ldr	r3, [pc, #456]	@ (800af28 <HAL_RCC_ClockConfig+0x264>)
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ad66:	4a70      	ldr	r2, [pc, #448]	@ (800af28 <HAL_RCC_ClockConfig+0x264>)
 800ad68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad6c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800ad6e:	2380      	movs	r3, #128	@ 0x80
 800ad70:	617b      	str	r3, [r7, #20]
 800ad72:	e024      	b.n	800adbe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	685b      	ldr	r3, [r3, #4]
 800ad78:	2b02      	cmp	r3, #2
 800ad7a:	d107      	bne.n	800ad8c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ad7c:	4b6a      	ldr	r3, [pc, #424]	@ (800af28 <HAL_RCC_ClockConfig+0x264>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d109      	bne.n	800ad9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	e0c6      	b.n	800af1a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ad8c:	4b66      	ldr	r3, [pc, #408]	@ (800af28 <HAL_RCC_ClockConfig+0x264>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d101      	bne.n	800ad9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800ad98:	2301      	movs	r3, #1
 800ad9a:	e0be      	b.n	800af1a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800ad9c:	f000 f8ce 	bl	800af3c <HAL_RCC_GetSysClockFreq>
 800ada0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	4a61      	ldr	r2, [pc, #388]	@ (800af2c <HAL_RCC_ClockConfig+0x268>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d909      	bls.n	800adbe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800adaa:	4b5f      	ldr	r3, [pc, #380]	@ (800af28 <HAL_RCC_ClockConfig+0x264>)
 800adac:	689b      	ldr	r3, [r3, #8]
 800adae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800adb2:	4a5d      	ldr	r2, [pc, #372]	@ (800af28 <HAL_RCC_ClockConfig+0x264>)
 800adb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adb8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800adba:	2380      	movs	r3, #128	@ 0x80
 800adbc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800adbe:	4b5a      	ldr	r3, [pc, #360]	@ (800af28 <HAL_RCC_ClockConfig+0x264>)
 800adc0:	689b      	ldr	r3, [r3, #8]
 800adc2:	f023 0203 	bic.w	r2, r3, #3
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	685b      	ldr	r3, [r3, #4]
 800adca:	4957      	ldr	r1, [pc, #348]	@ (800af28 <HAL_RCC_ClockConfig+0x264>)
 800adcc:	4313      	orrs	r3, r2
 800adce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800add0:	f7fb ffd6 	bl	8006d80 <HAL_GetTick>
 800add4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800add6:	e00a      	b.n	800adee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800add8:	f7fb ffd2 	bl	8006d80 <HAL_GetTick>
 800addc:	4602      	mov	r2, r0
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	1ad3      	subs	r3, r2, r3
 800ade2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d901      	bls.n	800adee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800adea:	2303      	movs	r3, #3
 800adec:	e095      	b.n	800af1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800adee:	4b4e      	ldr	r3, [pc, #312]	@ (800af28 <HAL_RCC_ClockConfig+0x264>)
 800adf0:	689b      	ldr	r3, [r3, #8]
 800adf2:	f003 020c 	and.w	r2, r3, #12
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	009b      	lsls	r3, r3, #2
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d1eb      	bne.n	800add8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f003 0302 	and.w	r3, r3, #2
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d023      	beq.n	800ae54 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f003 0304 	and.w	r3, r3, #4
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d005      	beq.n	800ae24 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ae18:	4b43      	ldr	r3, [pc, #268]	@ (800af28 <HAL_RCC_ClockConfig+0x264>)
 800ae1a:	689b      	ldr	r3, [r3, #8]
 800ae1c:	4a42      	ldr	r2, [pc, #264]	@ (800af28 <HAL_RCC_ClockConfig+0x264>)
 800ae1e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800ae22:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f003 0308 	and.w	r3, r3, #8
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d007      	beq.n	800ae40 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800ae30:	4b3d      	ldr	r3, [pc, #244]	@ (800af28 <HAL_RCC_ClockConfig+0x264>)
 800ae32:	689b      	ldr	r3, [r3, #8]
 800ae34:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ae38:	4a3b      	ldr	r2, [pc, #236]	@ (800af28 <HAL_RCC_ClockConfig+0x264>)
 800ae3a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800ae3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ae40:	4b39      	ldr	r3, [pc, #228]	@ (800af28 <HAL_RCC_ClockConfig+0x264>)
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	4936      	ldr	r1, [pc, #216]	@ (800af28 <HAL_RCC_ClockConfig+0x264>)
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	608b      	str	r3, [r1, #8]
 800ae52:	e008      	b.n	800ae66 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	2b80      	cmp	r3, #128	@ 0x80
 800ae58:	d105      	bne.n	800ae66 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800ae5a:	4b33      	ldr	r3, [pc, #204]	@ (800af28 <HAL_RCC_ClockConfig+0x264>)
 800ae5c:	689b      	ldr	r3, [r3, #8]
 800ae5e:	4a32      	ldr	r2, [pc, #200]	@ (800af28 <HAL_RCC_ClockConfig+0x264>)
 800ae60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ae64:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ae66:	4b2f      	ldr	r3, [pc, #188]	@ (800af24 <HAL_RCC_ClockConfig+0x260>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f003 030f 	and.w	r3, r3, #15
 800ae6e:	683a      	ldr	r2, [r7, #0]
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d21d      	bcs.n	800aeb0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae74:	4b2b      	ldr	r3, [pc, #172]	@ (800af24 <HAL_RCC_ClockConfig+0x260>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f023 020f 	bic.w	r2, r3, #15
 800ae7c:	4929      	ldr	r1, [pc, #164]	@ (800af24 <HAL_RCC_ClockConfig+0x260>)
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	4313      	orrs	r3, r2
 800ae82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800ae84:	f7fb ff7c 	bl	8006d80 <HAL_GetTick>
 800ae88:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae8a:	e00a      	b.n	800aea2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae8c:	f7fb ff78 	bl	8006d80 <HAL_GetTick>
 800ae90:	4602      	mov	r2, r0
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	1ad3      	subs	r3, r2, r3
 800ae96:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d901      	bls.n	800aea2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800ae9e:	2303      	movs	r3, #3
 800aea0:	e03b      	b.n	800af1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aea2:	4b20      	ldr	r3, [pc, #128]	@ (800af24 <HAL_RCC_ClockConfig+0x260>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f003 030f 	and.w	r3, r3, #15
 800aeaa:	683a      	ldr	r2, [r7, #0]
 800aeac:	429a      	cmp	r2, r3
 800aeae:	d1ed      	bne.n	800ae8c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f003 0304 	and.w	r3, r3, #4
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d008      	beq.n	800aece <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aebc:	4b1a      	ldr	r3, [pc, #104]	@ (800af28 <HAL_RCC_ClockConfig+0x264>)
 800aebe:	689b      	ldr	r3, [r3, #8]
 800aec0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	68db      	ldr	r3, [r3, #12]
 800aec8:	4917      	ldr	r1, [pc, #92]	@ (800af28 <HAL_RCC_ClockConfig+0x264>)
 800aeca:	4313      	orrs	r3, r2
 800aecc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f003 0308 	and.w	r3, r3, #8
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d009      	beq.n	800aeee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800aeda:	4b13      	ldr	r3, [pc, #76]	@ (800af28 <HAL_RCC_ClockConfig+0x264>)
 800aedc:	689b      	ldr	r3, [r3, #8]
 800aede:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	691b      	ldr	r3, [r3, #16]
 800aee6:	00db      	lsls	r3, r3, #3
 800aee8:	490f      	ldr	r1, [pc, #60]	@ (800af28 <HAL_RCC_ClockConfig+0x264>)
 800aeea:	4313      	orrs	r3, r2
 800aeec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800aeee:	f000 f825 	bl	800af3c <HAL_RCC_GetSysClockFreq>
 800aef2:	4602      	mov	r2, r0
 800aef4:	4b0c      	ldr	r3, [pc, #48]	@ (800af28 <HAL_RCC_ClockConfig+0x264>)
 800aef6:	689b      	ldr	r3, [r3, #8]
 800aef8:	091b      	lsrs	r3, r3, #4
 800aefa:	f003 030f 	and.w	r3, r3, #15
 800aefe:	490c      	ldr	r1, [pc, #48]	@ (800af30 <HAL_RCC_ClockConfig+0x26c>)
 800af00:	5ccb      	ldrb	r3, [r1, r3]
 800af02:	f003 031f 	and.w	r3, r3, #31
 800af06:	fa22 f303 	lsr.w	r3, r2, r3
 800af0a:	4a0a      	ldr	r2, [pc, #40]	@ (800af34 <HAL_RCC_ClockConfig+0x270>)
 800af0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800af0e:	4b0a      	ldr	r3, [pc, #40]	@ (800af38 <HAL_RCC_ClockConfig+0x274>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	4618      	mov	r0, r3
 800af14:	f7fa f848 	bl	8004fa8 <HAL_InitTick>
 800af18:	4603      	mov	r3, r0
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3718      	adds	r7, #24
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop
 800af24:	40022000 	.word	0x40022000
 800af28:	40021000 	.word	0x40021000
 800af2c:	04c4b400 	.word	0x04c4b400
 800af30:	080187e4 	.word	0x080187e4
 800af34:	20000004 	.word	0x20000004
 800af38:	20000138 	.word	0x20000138

0800af3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800af3c:	b480      	push	{r7}
 800af3e:	b087      	sub	sp, #28
 800af40:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800af42:	4b2c      	ldr	r3, [pc, #176]	@ (800aff4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800af44:	689b      	ldr	r3, [r3, #8]
 800af46:	f003 030c 	and.w	r3, r3, #12
 800af4a:	2b04      	cmp	r3, #4
 800af4c:	d102      	bne.n	800af54 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800af4e:	4b2a      	ldr	r3, [pc, #168]	@ (800aff8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800af50:	613b      	str	r3, [r7, #16]
 800af52:	e047      	b.n	800afe4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800af54:	4b27      	ldr	r3, [pc, #156]	@ (800aff4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800af56:	689b      	ldr	r3, [r3, #8]
 800af58:	f003 030c 	and.w	r3, r3, #12
 800af5c:	2b08      	cmp	r3, #8
 800af5e:	d102      	bne.n	800af66 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800af60:	4b26      	ldr	r3, [pc, #152]	@ (800affc <HAL_RCC_GetSysClockFreq+0xc0>)
 800af62:	613b      	str	r3, [r7, #16]
 800af64:	e03e      	b.n	800afe4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800af66:	4b23      	ldr	r3, [pc, #140]	@ (800aff4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800af68:	689b      	ldr	r3, [r3, #8]
 800af6a:	f003 030c 	and.w	r3, r3, #12
 800af6e:	2b0c      	cmp	r3, #12
 800af70:	d136      	bne.n	800afe0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800af72:	4b20      	ldr	r3, [pc, #128]	@ (800aff4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800af74:	68db      	ldr	r3, [r3, #12]
 800af76:	f003 0303 	and.w	r3, r3, #3
 800af7a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800af7c:	4b1d      	ldr	r3, [pc, #116]	@ (800aff4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800af7e:	68db      	ldr	r3, [r3, #12]
 800af80:	091b      	lsrs	r3, r3, #4
 800af82:	f003 030f 	and.w	r3, r3, #15
 800af86:	3301      	adds	r3, #1
 800af88:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2b03      	cmp	r3, #3
 800af8e:	d10c      	bne.n	800afaa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800af90:	4a1a      	ldr	r2, [pc, #104]	@ (800affc <HAL_RCC_GetSysClockFreq+0xc0>)
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	fbb2 f3f3 	udiv	r3, r2, r3
 800af98:	4a16      	ldr	r2, [pc, #88]	@ (800aff4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800af9a:	68d2      	ldr	r2, [r2, #12]
 800af9c:	0a12      	lsrs	r2, r2, #8
 800af9e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800afa2:	fb02 f303 	mul.w	r3, r2, r3
 800afa6:	617b      	str	r3, [r7, #20]
      break;
 800afa8:	e00c      	b.n	800afc4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800afaa:	4a13      	ldr	r2, [pc, #76]	@ (800aff8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	fbb2 f3f3 	udiv	r3, r2, r3
 800afb2:	4a10      	ldr	r2, [pc, #64]	@ (800aff4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800afb4:	68d2      	ldr	r2, [r2, #12]
 800afb6:	0a12      	lsrs	r2, r2, #8
 800afb8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800afbc:	fb02 f303 	mul.w	r3, r2, r3
 800afc0:	617b      	str	r3, [r7, #20]
      break;
 800afc2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800afc4:	4b0b      	ldr	r3, [pc, #44]	@ (800aff4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	0e5b      	lsrs	r3, r3, #25
 800afca:	f003 0303 	and.w	r3, r3, #3
 800afce:	3301      	adds	r3, #1
 800afd0:	005b      	lsls	r3, r3, #1
 800afd2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800afd4:	697a      	ldr	r2, [r7, #20]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	fbb2 f3f3 	udiv	r3, r2, r3
 800afdc:	613b      	str	r3, [r7, #16]
 800afde:	e001      	b.n	800afe4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800afe0:	2300      	movs	r3, #0
 800afe2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800afe4:	693b      	ldr	r3, [r7, #16]
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	371c      	adds	r7, #28
 800afea:	46bd      	mov	sp, r7
 800afec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff0:	4770      	bx	lr
 800aff2:	bf00      	nop
 800aff4:	40021000 	.word	0x40021000
 800aff8:	00f42400 	.word	0x00f42400
 800affc:	007a1200 	.word	0x007a1200

0800b000 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b000:	b480      	push	{r7}
 800b002:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b004:	4b03      	ldr	r3, [pc, #12]	@ (800b014 <HAL_RCC_GetHCLKFreq+0x14>)
 800b006:	681b      	ldr	r3, [r3, #0]
}
 800b008:	4618      	mov	r0, r3
 800b00a:	46bd      	mov	sp, r7
 800b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b010:	4770      	bx	lr
 800b012:	bf00      	nop
 800b014:	20000004 	.word	0x20000004

0800b018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b01c:	f7ff fff0 	bl	800b000 <HAL_RCC_GetHCLKFreq>
 800b020:	4602      	mov	r2, r0
 800b022:	4b06      	ldr	r3, [pc, #24]	@ (800b03c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b024:	689b      	ldr	r3, [r3, #8]
 800b026:	0a1b      	lsrs	r3, r3, #8
 800b028:	f003 0307 	and.w	r3, r3, #7
 800b02c:	4904      	ldr	r1, [pc, #16]	@ (800b040 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b02e:	5ccb      	ldrb	r3, [r1, r3]
 800b030:	f003 031f 	and.w	r3, r3, #31
 800b034:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b038:	4618      	mov	r0, r3
 800b03a:	bd80      	pop	{r7, pc}
 800b03c:	40021000 	.word	0x40021000
 800b040:	080187f4 	.word	0x080187f4

0800b044 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b048:	f7ff ffda 	bl	800b000 <HAL_RCC_GetHCLKFreq>
 800b04c:	4602      	mov	r2, r0
 800b04e:	4b06      	ldr	r3, [pc, #24]	@ (800b068 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b050:	689b      	ldr	r3, [r3, #8]
 800b052:	0adb      	lsrs	r3, r3, #11
 800b054:	f003 0307 	and.w	r3, r3, #7
 800b058:	4904      	ldr	r1, [pc, #16]	@ (800b06c <HAL_RCC_GetPCLK2Freq+0x28>)
 800b05a:	5ccb      	ldrb	r3, [r1, r3]
 800b05c:	f003 031f 	and.w	r3, r3, #31
 800b060:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b064:	4618      	mov	r0, r3
 800b066:	bd80      	pop	{r7, pc}
 800b068:	40021000 	.word	0x40021000
 800b06c:	080187f4 	.word	0x080187f4

0800b070 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b070:	b480      	push	{r7}
 800b072:	b083      	sub	sp, #12
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
 800b078:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	220f      	movs	r2, #15
 800b07e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800b080:	4b12      	ldr	r3, [pc, #72]	@ (800b0cc <HAL_RCC_GetClockConfig+0x5c>)
 800b082:	689b      	ldr	r3, [r3, #8]
 800b084:	f003 0203 	and.w	r2, r3, #3
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800b08c:	4b0f      	ldr	r3, [pc, #60]	@ (800b0cc <HAL_RCC_GetClockConfig+0x5c>)
 800b08e:	689b      	ldr	r3, [r3, #8]
 800b090:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800b098:	4b0c      	ldr	r3, [pc, #48]	@ (800b0cc <HAL_RCC_GetClockConfig+0x5c>)
 800b09a:	689b      	ldr	r3, [r3, #8]
 800b09c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800b0a4:	4b09      	ldr	r3, [pc, #36]	@ (800b0cc <HAL_RCC_GetClockConfig+0x5c>)
 800b0a6:	689b      	ldr	r3, [r3, #8]
 800b0a8:	08db      	lsrs	r3, r3, #3
 800b0aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800b0b2:	4b07      	ldr	r3, [pc, #28]	@ (800b0d0 <HAL_RCC_GetClockConfig+0x60>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f003 020f 	and.w	r2, r3, #15
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	601a      	str	r2, [r3, #0]
}
 800b0be:	bf00      	nop
 800b0c0:	370c      	adds	r7, #12
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c8:	4770      	bx	lr
 800b0ca:	bf00      	nop
 800b0cc:	40021000 	.word	0x40021000
 800b0d0:	40022000 	.word	0x40022000

0800b0d4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b087      	sub	sp, #28
 800b0d8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b0da:	4b1e      	ldr	r3, [pc, #120]	@ (800b154 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b0dc:	68db      	ldr	r3, [r3, #12]
 800b0de:	f003 0303 	and.w	r3, r3, #3
 800b0e2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b0e4:	4b1b      	ldr	r3, [pc, #108]	@ (800b154 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b0e6:	68db      	ldr	r3, [r3, #12]
 800b0e8:	091b      	lsrs	r3, r3, #4
 800b0ea:	f003 030f 	and.w	r3, r3, #15
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	2b03      	cmp	r3, #3
 800b0f6:	d10c      	bne.n	800b112 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b0f8:	4a17      	ldr	r2, [pc, #92]	@ (800b158 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b100:	4a14      	ldr	r2, [pc, #80]	@ (800b154 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b102:	68d2      	ldr	r2, [r2, #12]
 800b104:	0a12      	lsrs	r2, r2, #8
 800b106:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800b10a:	fb02 f303 	mul.w	r3, r2, r3
 800b10e:	617b      	str	r3, [r7, #20]
    break;
 800b110:	e00c      	b.n	800b12c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b112:	4a12      	ldr	r2, [pc, #72]	@ (800b15c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	fbb2 f3f3 	udiv	r3, r2, r3
 800b11a:	4a0e      	ldr	r2, [pc, #56]	@ (800b154 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b11c:	68d2      	ldr	r2, [r2, #12]
 800b11e:	0a12      	lsrs	r2, r2, #8
 800b120:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800b124:	fb02 f303 	mul.w	r3, r2, r3
 800b128:	617b      	str	r3, [r7, #20]
    break;
 800b12a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b12c:	4b09      	ldr	r3, [pc, #36]	@ (800b154 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b12e:	68db      	ldr	r3, [r3, #12]
 800b130:	0e5b      	lsrs	r3, r3, #25
 800b132:	f003 0303 	and.w	r3, r3, #3
 800b136:	3301      	adds	r3, #1
 800b138:	005b      	lsls	r3, r3, #1
 800b13a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800b13c:	697a      	ldr	r2, [r7, #20]
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	fbb2 f3f3 	udiv	r3, r2, r3
 800b144:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800b146:	687b      	ldr	r3, [r7, #4]
}
 800b148:	4618      	mov	r0, r3
 800b14a:	371c      	adds	r7, #28
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr
 800b154:	40021000 	.word	0x40021000
 800b158:	007a1200 	.word	0x007a1200
 800b15c:	00f42400 	.word	0x00f42400

0800b160 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b086      	sub	sp, #24
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b168:	2300      	movs	r3, #0
 800b16a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b16c:	2300      	movs	r3, #0
 800b16e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b178:	2b00      	cmp	r3, #0
 800b17a:	f000 8098 	beq.w	800b2ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b17e:	2300      	movs	r3, #0
 800b180:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b182:	4b43      	ldr	r3, [pc, #268]	@ (800b290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d10d      	bne.n	800b1aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b18e:	4b40      	ldr	r3, [pc, #256]	@ (800b290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b192:	4a3f      	ldr	r2, [pc, #252]	@ (800b290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b198:	6593      	str	r3, [r2, #88]	@ 0x58
 800b19a:	4b3d      	ldr	r3, [pc, #244]	@ (800b290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b19c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b19e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b1a2:	60bb      	str	r3, [r7, #8]
 800b1a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b1aa:	4b3a      	ldr	r3, [pc, #232]	@ (800b294 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	4a39      	ldr	r2, [pc, #228]	@ (800b294 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b1b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b1b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b1b6:	f7fb fde3 	bl	8006d80 <HAL_GetTick>
 800b1ba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b1bc:	e009      	b.n	800b1d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b1be:	f7fb fddf 	bl	8006d80 <HAL_GetTick>
 800b1c2:	4602      	mov	r2, r0
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	1ad3      	subs	r3, r2, r3
 800b1c8:	2b02      	cmp	r3, #2
 800b1ca:	d902      	bls.n	800b1d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800b1cc:	2303      	movs	r3, #3
 800b1ce:	74fb      	strb	r3, [r7, #19]
        break;
 800b1d0:	e005      	b.n	800b1de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b1d2:	4b30      	ldr	r3, [pc, #192]	@ (800b294 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d0ef      	beq.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800b1de:	7cfb      	ldrb	r3, [r7, #19]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d159      	bne.n	800b298 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b1e4:	4b2a      	ldr	r3, [pc, #168]	@ (800b290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b1e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b1ee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d01e      	beq.n	800b234 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1fa:	697a      	ldr	r2, [r7, #20]
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d019      	beq.n	800b234 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b200:	4b23      	ldr	r3, [pc, #140]	@ (800b290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b206:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b20a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b20c:	4b20      	ldr	r3, [pc, #128]	@ (800b290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b20e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b212:	4a1f      	ldr	r2, [pc, #124]	@ (800b290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b218:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b21c:	4b1c      	ldr	r3, [pc, #112]	@ (800b290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b21e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b222:	4a1b      	ldr	r2, [pc, #108]	@ (800b290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b224:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b228:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b22c:	4a18      	ldr	r2, [pc, #96]	@ (800b290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	f003 0301 	and.w	r3, r3, #1
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d016      	beq.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b23e:	f7fb fd9f 	bl	8006d80 <HAL_GetTick>
 800b242:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b244:	e00b      	b.n	800b25e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b246:	f7fb fd9b 	bl	8006d80 <HAL_GetTick>
 800b24a:	4602      	mov	r2, r0
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	1ad3      	subs	r3, r2, r3
 800b250:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b254:	4293      	cmp	r3, r2
 800b256:	d902      	bls.n	800b25e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800b258:	2303      	movs	r3, #3
 800b25a:	74fb      	strb	r3, [r7, #19]
            break;
 800b25c:	e006      	b.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b25e:	4b0c      	ldr	r3, [pc, #48]	@ (800b290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b264:	f003 0302 	and.w	r3, r3, #2
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d0ec      	beq.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800b26c:	7cfb      	ldrb	r3, [r7, #19]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d10b      	bne.n	800b28a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b272:	4b07      	ldr	r3, [pc, #28]	@ (800b290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b274:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b278:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b280:	4903      	ldr	r1, [pc, #12]	@ (800b290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b282:	4313      	orrs	r3, r2
 800b284:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800b288:	e008      	b.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b28a:	7cfb      	ldrb	r3, [r7, #19]
 800b28c:	74bb      	strb	r3, [r7, #18]
 800b28e:	e005      	b.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800b290:	40021000 	.word	0x40021000
 800b294:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b298:	7cfb      	ldrb	r3, [r7, #19]
 800b29a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b29c:	7c7b      	ldrb	r3, [r7, #17]
 800b29e:	2b01      	cmp	r3, #1
 800b2a0:	d105      	bne.n	800b2ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b2a2:	4ba6      	ldr	r3, [pc, #664]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b2a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b2a6:	4aa5      	ldr	r2, [pc, #660]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b2a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b2ac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f003 0301 	and.w	r3, r3, #1
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d00a      	beq.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b2ba:	4ba0      	ldr	r3, [pc, #640]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b2bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2c0:	f023 0203 	bic.w	r2, r3, #3
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	499c      	ldr	r1, [pc, #624]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b2ca:	4313      	orrs	r3, r2
 800b2cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f003 0302 	and.w	r3, r3, #2
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d00a      	beq.n	800b2f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b2dc:	4b97      	ldr	r3, [pc, #604]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b2de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2e2:	f023 020c 	bic.w	r2, r3, #12
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	689b      	ldr	r3, [r3, #8]
 800b2ea:	4994      	ldr	r1, [pc, #592]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f003 0304 	and.w	r3, r3, #4
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d00a      	beq.n	800b314 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b2fe:	4b8f      	ldr	r3, [pc, #572]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b304:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	68db      	ldr	r3, [r3, #12]
 800b30c:	498b      	ldr	r1, [pc, #556]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b30e:	4313      	orrs	r3, r2
 800b310:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f003 0308 	and.w	r3, r3, #8
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d00a      	beq.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b320:	4b86      	ldr	r3, [pc, #536]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b326:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	691b      	ldr	r3, [r3, #16]
 800b32e:	4983      	ldr	r1, [pc, #524]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b330:	4313      	orrs	r3, r2
 800b332:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f003 0320 	and.w	r3, r3, #32
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d00a      	beq.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b342:	4b7e      	ldr	r3, [pc, #504]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b344:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b348:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	695b      	ldr	r3, [r3, #20]
 800b350:	497a      	ldr	r1, [pc, #488]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b352:	4313      	orrs	r3, r2
 800b354:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b360:	2b00      	cmp	r3, #0
 800b362:	d00a      	beq.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b364:	4b75      	ldr	r3, [pc, #468]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b36a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	699b      	ldr	r3, [r3, #24]
 800b372:	4972      	ldr	r1, [pc, #456]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b374:	4313      	orrs	r3, r2
 800b376:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b382:	2b00      	cmp	r3, #0
 800b384:	d00a      	beq.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b386:	4b6d      	ldr	r3, [pc, #436]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b388:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b38c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	69db      	ldr	r3, [r3, #28]
 800b394:	4969      	ldr	r1, [pc, #420]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b396:	4313      	orrs	r3, r2
 800b398:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d00a      	beq.n	800b3be <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b3a8:	4b64      	ldr	r3, [pc, #400]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b3aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3ae:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6a1b      	ldr	r3, [r3, #32]
 800b3b6:	4961      	ldr	r1, [pc, #388]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b3b8:	4313      	orrs	r3, r2
 800b3ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d00a      	beq.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b3ca:	4b5c      	ldr	r3, [pc, #368]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b3cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3d0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3d8:	4958      	ldr	r1, [pc, #352]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d015      	beq.n	800b418 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b3ec:	4b53      	ldr	r3, [pc, #332]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b3ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3fa:	4950      	ldr	r1, [pc, #320]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b3fc:	4313      	orrs	r3, r2
 800b3fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b406:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b40a:	d105      	bne.n	800b418 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b40c:	4b4b      	ldr	r3, [pc, #300]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b40e:	68db      	ldr	r3, [r3, #12]
 800b410:	4a4a      	ldr	r2, [pc, #296]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b412:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b416:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b420:	2b00      	cmp	r3, #0
 800b422:	d015      	beq.n	800b450 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b424:	4b45      	ldr	r3, [pc, #276]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b42a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b432:	4942      	ldr	r1, [pc, #264]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b434:	4313      	orrs	r3, r2
 800b436:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b43e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b442:	d105      	bne.n	800b450 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b444:	4b3d      	ldr	r3, [pc, #244]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b446:	68db      	ldr	r3, [r3, #12]
 800b448:	4a3c      	ldr	r2, [pc, #240]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b44a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b44e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d015      	beq.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b45c:	4b37      	ldr	r3, [pc, #220]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b45e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b462:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b46a:	4934      	ldr	r1, [pc, #208]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b46c:	4313      	orrs	r3, r2
 800b46e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b476:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b47a:	d105      	bne.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b47c:	4b2f      	ldr	r3, [pc, #188]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b47e:	68db      	ldr	r3, [r3, #12]
 800b480:	4a2e      	ldr	r2, [pc, #184]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b482:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b486:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b490:	2b00      	cmp	r3, #0
 800b492:	d015      	beq.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b494:	4b29      	ldr	r3, [pc, #164]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b49a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4a2:	4926      	ldr	r1, [pc, #152]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b4a4:	4313      	orrs	r3, r2
 800b4a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b4b2:	d105      	bne.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b4b4:	4b21      	ldr	r3, [pc, #132]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b4b6:	68db      	ldr	r3, [r3, #12]
 800b4b8:	4a20      	ldr	r2, [pc, #128]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b4ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b4be:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d015      	beq.n	800b4f8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b4cc:	4b1b      	ldr	r3, [pc, #108]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b4ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4da:	4918      	ldr	r1, [pc, #96]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b4ea:	d105      	bne.n	800b4f8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b4ec:	4b13      	ldr	r3, [pc, #76]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b4ee:	68db      	ldr	r3, [r3, #12]
 800b4f0:	4a12      	ldr	r2, [pc, #72]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b4f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b4f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b500:	2b00      	cmp	r3, #0
 800b502:	d015      	beq.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800b504:	4b0d      	ldr	r3, [pc, #52]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b50a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b512:	490a      	ldr	r1, [pc, #40]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b514:	4313      	orrs	r3, r2
 800b516:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b51e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b522:	d105      	bne.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b524:	4b05      	ldr	r3, [pc, #20]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b526:	68db      	ldr	r3, [r3, #12]
 800b528:	4a04      	ldr	r2, [pc, #16]	@ (800b53c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b52a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b52e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800b530:	7cbb      	ldrb	r3, [r7, #18]
}
 800b532:	4618      	mov	r0, r3
 800b534:	3718      	adds	r7, #24
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	bf00      	nop
 800b53c:	40021000 	.word	0x40021000

0800b540 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b082      	sub	sp, #8
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d101      	bne.n	800b552 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b54e:	2301      	movs	r3, #1
 800b550:	e054      	b.n	800b5fc <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d111      	bne.n	800b582 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2200      	movs	r2, #0
 800b562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f001 fcd2 	bl	800cf10 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b570:	2b00      	cmp	r3, #0
 800b572:	d102      	bne.n	800b57a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	4a23      	ldr	r2, [pc, #140]	@ (800b604 <HAL_TIM_Base_Init+0xc4>)
 800b578:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2202      	movs	r2, #2
 800b586:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681a      	ldr	r2, [r3, #0]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	3304      	adds	r3, #4
 800b592:	4619      	mov	r1, r3
 800b594:	4610      	mov	r0, r2
 800b596:	f001 f867 	bl	800c668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2201      	movs	r2, #1
 800b59e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2201      	movs	r2, #1
 800b5a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2201      	movs	r2, #1
 800b5ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2201      	movs	r2, #1
 800b5b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2201      	movs	r2, #1
 800b5be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2201      	movs	r2, #1
 800b5ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2201      	movs	r2, #1
 800b5d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2201      	movs	r2, #1
 800b5de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2201      	movs	r2, #1
 800b5ee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2201      	movs	r2, #1
 800b5f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b5fa:	2300      	movs	r3, #0
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3708      	adds	r7, #8
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}
 800b604:	080056a5 	.word	0x080056a5

0800b608 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b608:	b480      	push	{r7}
 800b60a:	b085      	sub	sp, #20
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b616:	b2db      	uxtb	r3, r3
 800b618:	2b01      	cmp	r3, #1
 800b61a:	d001      	beq.n	800b620 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b61c:	2301      	movs	r3, #1
 800b61e:	e042      	b.n	800b6a6 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2202      	movs	r2, #2
 800b624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4a21      	ldr	r2, [pc, #132]	@ (800b6b4 <HAL_TIM_Base_Start+0xac>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d018      	beq.n	800b664 <HAL_TIM_Base_Start+0x5c>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b63a:	d013      	beq.n	800b664 <HAL_TIM_Base_Start+0x5c>
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	4a1d      	ldr	r2, [pc, #116]	@ (800b6b8 <HAL_TIM_Base_Start+0xb0>)
 800b642:	4293      	cmp	r3, r2
 800b644:	d00e      	beq.n	800b664 <HAL_TIM_Base_Start+0x5c>
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	4a1c      	ldr	r2, [pc, #112]	@ (800b6bc <HAL_TIM_Base_Start+0xb4>)
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d009      	beq.n	800b664 <HAL_TIM_Base_Start+0x5c>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	4a1a      	ldr	r2, [pc, #104]	@ (800b6c0 <HAL_TIM_Base_Start+0xb8>)
 800b656:	4293      	cmp	r3, r2
 800b658:	d004      	beq.n	800b664 <HAL_TIM_Base_Start+0x5c>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	4a19      	ldr	r2, [pc, #100]	@ (800b6c4 <HAL_TIM_Base_Start+0xbc>)
 800b660:	4293      	cmp	r3, r2
 800b662:	d115      	bne.n	800b690 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	689a      	ldr	r2, [r3, #8]
 800b66a:	4b17      	ldr	r3, [pc, #92]	@ (800b6c8 <HAL_TIM_Base_Start+0xc0>)
 800b66c:	4013      	ands	r3, r2
 800b66e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	2b06      	cmp	r3, #6
 800b674:	d015      	beq.n	800b6a2 <HAL_TIM_Base_Start+0x9a>
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b67c:	d011      	beq.n	800b6a2 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	681a      	ldr	r2, [r3, #0]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f042 0201 	orr.w	r2, r2, #1
 800b68c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b68e:	e008      	b.n	800b6a2 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f042 0201 	orr.w	r2, r2, #1
 800b69e:	601a      	str	r2, [r3, #0]
 800b6a0:	e000      	b.n	800b6a4 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b6a4:	2300      	movs	r3, #0
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3714      	adds	r7, #20
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b0:	4770      	bx	lr
 800b6b2:	bf00      	nop
 800b6b4:	40012c00 	.word	0x40012c00
 800b6b8:	40000400 	.word	0x40000400
 800b6bc:	40000800 	.word	0x40000800
 800b6c0:	40013400 	.word	0x40013400
 800b6c4:	40014000 	.word	0x40014000
 800b6c8:	00010007 	.word	0x00010007

0800b6cc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b083      	sub	sp, #12
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	6a1a      	ldr	r2, [r3, #32]
 800b6da:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b6de:	4013      	ands	r3, r2
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d10f      	bne.n	800b704 <HAL_TIM_Base_Stop+0x38>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	6a1a      	ldr	r2, [r3, #32]
 800b6ea:	f244 4344 	movw	r3, #17476	@ 0x4444
 800b6ee:	4013      	ands	r3, r2
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d107      	bne.n	800b704 <HAL_TIM_Base_Stop+0x38>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	681a      	ldr	r2, [r3, #0]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f022 0201 	bic.w	r2, r2, #1
 800b702:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2201      	movs	r2, #1
 800b708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800b70c:	2300      	movs	r3, #0
}
 800b70e:	4618      	mov	r0, r3
 800b710:	370c      	adds	r7, #12
 800b712:	46bd      	mov	sp, r7
 800b714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b718:	4770      	bx	lr
	...

0800b71c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b085      	sub	sp, #20
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b72a:	b2db      	uxtb	r3, r3
 800b72c:	2b01      	cmp	r3, #1
 800b72e:	d001      	beq.n	800b734 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b730:	2301      	movs	r3, #1
 800b732:	e04a      	b.n	800b7ca <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2202      	movs	r2, #2
 800b738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	68da      	ldr	r2, [r3, #12]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f042 0201 	orr.w	r2, r2, #1
 800b74a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	4a21      	ldr	r2, [pc, #132]	@ (800b7d8 <HAL_TIM_Base_Start_IT+0xbc>)
 800b752:	4293      	cmp	r3, r2
 800b754:	d018      	beq.n	800b788 <HAL_TIM_Base_Start_IT+0x6c>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b75e:	d013      	beq.n	800b788 <HAL_TIM_Base_Start_IT+0x6c>
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	4a1d      	ldr	r2, [pc, #116]	@ (800b7dc <HAL_TIM_Base_Start_IT+0xc0>)
 800b766:	4293      	cmp	r3, r2
 800b768:	d00e      	beq.n	800b788 <HAL_TIM_Base_Start_IT+0x6c>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	4a1c      	ldr	r2, [pc, #112]	@ (800b7e0 <HAL_TIM_Base_Start_IT+0xc4>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d009      	beq.n	800b788 <HAL_TIM_Base_Start_IT+0x6c>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	4a1a      	ldr	r2, [pc, #104]	@ (800b7e4 <HAL_TIM_Base_Start_IT+0xc8>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d004      	beq.n	800b788 <HAL_TIM_Base_Start_IT+0x6c>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	4a19      	ldr	r2, [pc, #100]	@ (800b7e8 <HAL_TIM_Base_Start_IT+0xcc>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d115      	bne.n	800b7b4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	689a      	ldr	r2, [r3, #8]
 800b78e:	4b17      	ldr	r3, [pc, #92]	@ (800b7ec <HAL_TIM_Base_Start_IT+0xd0>)
 800b790:	4013      	ands	r3, r2
 800b792:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	2b06      	cmp	r3, #6
 800b798:	d015      	beq.n	800b7c6 <HAL_TIM_Base_Start_IT+0xaa>
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b7a0:	d011      	beq.n	800b7c6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	681a      	ldr	r2, [r3, #0]
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f042 0201 	orr.w	r2, r2, #1
 800b7b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7b2:	e008      	b.n	800b7c6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f042 0201 	orr.w	r2, r2, #1
 800b7c2:	601a      	str	r2, [r3, #0]
 800b7c4:	e000      	b.n	800b7c8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b7c8:	2300      	movs	r3, #0
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3714      	adds	r7, #20
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d4:	4770      	bx	lr
 800b7d6:	bf00      	nop
 800b7d8:	40012c00 	.word	0x40012c00
 800b7dc:	40000400 	.word	0x40000400
 800b7e0:	40000800 	.word	0x40000800
 800b7e4:	40013400 	.word	0x40013400
 800b7e8:	40014000 	.word	0x40014000
 800b7ec:	00010007 	.word	0x00010007

0800b7f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b082      	sub	sp, #8
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d101      	bne.n	800b802 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b7fe:	2301      	movs	r3, #1
 800b800:	e054      	b.n	800b8ac <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b808:	b2db      	uxtb	r3, r3
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d111      	bne.n	800b832 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2200      	movs	r2, #0
 800b812:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f001 fb7a 	bl	800cf10 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b820:	2b00      	cmp	r3, #0
 800b822:	d102      	bne.n	800b82a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	4a23      	ldr	r2, [pc, #140]	@ (800b8b4 <HAL_TIM_PWM_Init+0xc4>)
 800b828:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2202      	movs	r2, #2
 800b836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681a      	ldr	r2, [r3, #0]
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	3304      	adds	r3, #4
 800b842:	4619      	mov	r1, r3
 800b844:	4610      	mov	r0, r2
 800b846:	f000 ff0f 	bl	800c668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2201      	movs	r2, #1
 800b84e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2201      	movs	r2, #1
 800b856:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2201      	movs	r2, #1
 800b85e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2201      	movs	r2, #1
 800b866:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2201      	movs	r2, #1
 800b86e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2201      	movs	r2, #1
 800b876:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2201      	movs	r2, #1
 800b87e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2201      	movs	r2, #1
 800b886:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2201      	movs	r2, #1
 800b88e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2201      	movs	r2, #1
 800b896:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2201      	movs	r2, #1
 800b89e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2201      	movs	r2, #1
 800b8a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b8aa:	2300      	movs	r3, #0
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3708      	adds	r7, #8
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}
 800b8b4:	08005715 	.word	0x08005715

0800b8b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b084      	sub	sp, #16
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d109      	bne.n	800b8dc <HAL_TIM_PWM_Start+0x24>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b8ce:	b2db      	uxtb	r3, r3
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	bf14      	ite	ne
 800b8d4:	2301      	movne	r3, #1
 800b8d6:	2300      	moveq	r3, #0
 800b8d8:	b2db      	uxtb	r3, r3
 800b8da:	e03c      	b.n	800b956 <HAL_TIM_PWM_Start+0x9e>
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	2b04      	cmp	r3, #4
 800b8e0:	d109      	bne.n	800b8f6 <HAL_TIM_PWM_Start+0x3e>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b8e8:	b2db      	uxtb	r3, r3
 800b8ea:	2b01      	cmp	r3, #1
 800b8ec:	bf14      	ite	ne
 800b8ee:	2301      	movne	r3, #1
 800b8f0:	2300      	moveq	r3, #0
 800b8f2:	b2db      	uxtb	r3, r3
 800b8f4:	e02f      	b.n	800b956 <HAL_TIM_PWM_Start+0x9e>
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	2b08      	cmp	r3, #8
 800b8fa:	d109      	bne.n	800b910 <HAL_TIM_PWM_Start+0x58>
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b902:	b2db      	uxtb	r3, r3
 800b904:	2b01      	cmp	r3, #1
 800b906:	bf14      	ite	ne
 800b908:	2301      	movne	r3, #1
 800b90a:	2300      	moveq	r3, #0
 800b90c:	b2db      	uxtb	r3, r3
 800b90e:	e022      	b.n	800b956 <HAL_TIM_PWM_Start+0x9e>
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	2b0c      	cmp	r3, #12
 800b914:	d109      	bne.n	800b92a <HAL_TIM_PWM_Start+0x72>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b91c:	b2db      	uxtb	r3, r3
 800b91e:	2b01      	cmp	r3, #1
 800b920:	bf14      	ite	ne
 800b922:	2301      	movne	r3, #1
 800b924:	2300      	moveq	r3, #0
 800b926:	b2db      	uxtb	r3, r3
 800b928:	e015      	b.n	800b956 <HAL_TIM_PWM_Start+0x9e>
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	2b10      	cmp	r3, #16
 800b92e:	d109      	bne.n	800b944 <HAL_TIM_PWM_Start+0x8c>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b936:	b2db      	uxtb	r3, r3
 800b938:	2b01      	cmp	r3, #1
 800b93a:	bf14      	ite	ne
 800b93c:	2301      	movne	r3, #1
 800b93e:	2300      	moveq	r3, #0
 800b940:	b2db      	uxtb	r3, r3
 800b942:	e008      	b.n	800b956 <HAL_TIM_PWM_Start+0x9e>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b94a:	b2db      	uxtb	r3, r3
 800b94c:	2b01      	cmp	r3, #1
 800b94e:	bf14      	ite	ne
 800b950:	2301      	movne	r3, #1
 800b952:	2300      	moveq	r3, #0
 800b954:	b2db      	uxtb	r3, r3
 800b956:	2b00      	cmp	r3, #0
 800b958:	d001      	beq.n	800b95e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b95a:	2301      	movs	r3, #1
 800b95c:	e097      	b.n	800ba8e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d104      	bne.n	800b96e <HAL_TIM_PWM_Start+0xb6>
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2202      	movs	r2, #2
 800b968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b96c:	e023      	b.n	800b9b6 <HAL_TIM_PWM_Start+0xfe>
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	2b04      	cmp	r3, #4
 800b972:	d104      	bne.n	800b97e <HAL_TIM_PWM_Start+0xc6>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2202      	movs	r2, #2
 800b978:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b97c:	e01b      	b.n	800b9b6 <HAL_TIM_PWM_Start+0xfe>
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	2b08      	cmp	r3, #8
 800b982:	d104      	bne.n	800b98e <HAL_TIM_PWM_Start+0xd6>
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2202      	movs	r2, #2
 800b988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b98c:	e013      	b.n	800b9b6 <HAL_TIM_PWM_Start+0xfe>
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	2b0c      	cmp	r3, #12
 800b992:	d104      	bne.n	800b99e <HAL_TIM_PWM_Start+0xe6>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2202      	movs	r2, #2
 800b998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b99c:	e00b      	b.n	800b9b6 <HAL_TIM_PWM_Start+0xfe>
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	2b10      	cmp	r3, #16
 800b9a2:	d104      	bne.n	800b9ae <HAL_TIM_PWM_Start+0xf6>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2202      	movs	r2, #2
 800b9a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b9ac:	e003      	b.n	800b9b6 <HAL_TIM_PWM_Start+0xfe>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2202      	movs	r2, #2
 800b9b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	6839      	ldr	r1, [r7, #0]
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f001 fa80 	bl	800cec4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4a33      	ldr	r2, [pc, #204]	@ (800ba98 <HAL_TIM_PWM_Start+0x1e0>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d013      	beq.n	800b9f6 <HAL_TIM_PWM_Start+0x13e>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	4a32      	ldr	r2, [pc, #200]	@ (800ba9c <HAL_TIM_PWM_Start+0x1e4>)
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d00e      	beq.n	800b9f6 <HAL_TIM_PWM_Start+0x13e>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4a30      	ldr	r2, [pc, #192]	@ (800baa0 <HAL_TIM_PWM_Start+0x1e8>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d009      	beq.n	800b9f6 <HAL_TIM_PWM_Start+0x13e>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	4a2f      	ldr	r2, [pc, #188]	@ (800baa4 <HAL_TIM_PWM_Start+0x1ec>)
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d004      	beq.n	800b9f6 <HAL_TIM_PWM_Start+0x13e>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	4a2d      	ldr	r2, [pc, #180]	@ (800baa8 <HAL_TIM_PWM_Start+0x1f0>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d101      	bne.n	800b9fa <HAL_TIM_PWM_Start+0x142>
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	e000      	b.n	800b9fc <HAL_TIM_PWM_Start+0x144>
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d007      	beq.n	800ba10 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ba0e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	4a20      	ldr	r2, [pc, #128]	@ (800ba98 <HAL_TIM_PWM_Start+0x1e0>)
 800ba16:	4293      	cmp	r3, r2
 800ba18:	d018      	beq.n	800ba4c <HAL_TIM_PWM_Start+0x194>
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba22:	d013      	beq.n	800ba4c <HAL_TIM_PWM_Start+0x194>
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	4a20      	ldr	r2, [pc, #128]	@ (800baac <HAL_TIM_PWM_Start+0x1f4>)
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	d00e      	beq.n	800ba4c <HAL_TIM_PWM_Start+0x194>
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	4a1f      	ldr	r2, [pc, #124]	@ (800bab0 <HAL_TIM_PWM_Start+0x1f8>)
 800ba34:	4293      	cmp	r3, r2
 800ba36:	d009      	beq.n	800ba4c <HAL_TIM_PWM_Start+0x194>
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	4a17      	ldr	r2, [pc, #92]	@ (800ba9c <HAL_TIM_PWM_Start+0x1e4>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d004      	beq.n	800ba4c <HAL_TIM_PWM_Start+0x194>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	4a16      	ldr	r2, [pc, #88]	@ (800baa0 <HAL_TIM_PWM_Start+0x1e8>)
 800ba48:	4293      	cmp	r3, r2
 800ba4a:	d115      	bne.n	800ba78 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	689a      	ldr	r2, [r3, #8]
 800ba52:	4b18      	ldr	r3, [pc, #96]	@ (800bab4 <HAL_TIM_PWM_Start+0x1fc>)
 800ba54:	4013      	ands	r3, r2
 800ba56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	2b06      	cmp	r3, #6
 800ba5c:	d015      	beq.n	800ba8a <HAL_TIM_PWM_Start+0x1d2>
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba64:	d011      	beq.n	800ba8a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	681a      	ldr	r2, [r3, #0]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f042 0201 	orr.w	r2, r2, #1
 800ba74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba76:	e008      	b.n	800ba8a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	681a      	ldr	r2, [r3, #0]
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f042 0201 	orr.w	r2, r2, #1
 800ba86:	601a      	str	r2, [r3, #0]
 800ba88:	e000      	b.n	800ba8c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ba8c:	2300      	movs	r3, #0
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3710      	adds	r7, #16
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}
 800ba96:	bf00      	nop
 800ba98:	40012c00 	.word	0x40012c00
 800ba9c:	40013400 	.word	0x40013400
 800baa0:	40014000 	.word	0x40014000
 800baa4:	40014400 	.word	0x40014400
 800baa8:	40014800 	.word	0x40014800
 800baac:	40000400 	.word	0x40000400
 800bab0:	40000800 	.word	0x40000800
 800bab4:	00010007 	.word	0x00010007

0800bab8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b082      	sub	sp, #8
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	2200      	movs	r2, #0
 800bac8:	6839      	ldr	r1, [r7, #0]
 800baca:	4618      	mov	r0, r3
 800bacc:	f001 f9fa 	bl	800cec4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	4a3e      	ldr	r2, [pc, #248]	@ (800bbd0 <HAL_TIM_PWM_Stop+0x118>)
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d013      	beq.n	800bb02 <HAL_TIM_PWM_Stop+0x4a>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	4a3d      	ldr	r2, [pc, #244]	@ (800bbd4 <HAL_TIM_PWM_Stop+0x11c>)
 800bae0:	4293      	cmp	r3, r2
 800bae2:	d00e      	beq.n	800bb02 <HAL_TIM_PWM_Stop+0x4a>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	4a3b      	ldr	r2, [pc, #236]	@ (800bbd8 <HAL_TIM_PWM_Stop+0x120>)
 800baea:	4293      	cmp	r3, r2
 800baec:	d009      	beq.n	800bb02 <HAL_TIM_PWM_Stop+0x4a>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	4a3a      	ldr	r2, [pc, #232]	@ (800bbdc <HAL_TIM_PWM_Stop+0x124>)
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d004      	beq.n	800bb02 <HAL_TIM_PWM_Stop+0x4a>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	4a38      	ldr	r2, [pc, #224]	@ (800bbe0 <HAL_TIM_PWM_Stop+0x128>)
 800bafe:	4293      	cmp	r3, r2
 800bb00:	d101      	bne.n	800bb06 <HAL_TIM_PWM_Stop+0x4e>
 800bb02:	2301      	movs	r3, #1
 800bb04:	e000      	b.n	800bb08 <HAL_TIM_PWM_Stop+0x50>
 800bb06:	2300      	movs	r3, #0
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d017      	beq.n	800bb3c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	6a1a      	ldr	r2, [r3, #32]
 800bb12:	f241 1311 	movw	r3, #4369	@ 0x1111
 800bb16:	4013      	ands	r3, r2
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d10f      	bne.n	800bb3c <HAL_TIM_PWM_Stop+0x84>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	6a1a      	ldr	r2, [r3, #32]
 800bb22:	f244 4344 	movw	r3, #17476	@ 0x4444
 800bb26:	4013      	ands	r3, r2
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d107      	bne.n	800bb3c <HAL_TIM_PWM_Stop+0x84>
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800bb3a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	6a1a      	ldr	r2, [r3, #32]
 800bb42:	f241 1311 	movw	r3, #4369	@ 0x1111
 800bb46:	4013      	ands	r3, r2
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d10f      	bne.n	800bb6c <HAL_TIM_PWM_Stop+0xb4>
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	6a1a      	ldr	r2, [r3, #32]
 800bb52:	f244 4344 	movw	r3, #17476	@ 0x4444
 800bb56:	4013      	ands	r3, r2
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d107      	bne.n	800bb6c <HAL_TIM_PWM_Stop+0xb4>
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	681a      	ldr	r2, [r3, #0]
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f022 0201 	bic.w	r2, r2, #1
 800bb6a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d104      	bne.n	800bb7c <HAL_TIM_PWM_Stop+0xc4>
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2201      	movs	r2, #1
 800bb76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bb7a:	e023      	b.n	800bbc4 <HAL_TIM_PWM_Stop+0x10c>
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	2b04      	cmp	r3, #4
 800bb80:	d104      	bne.n	800bb8c <HAL_TIM_PWM_Stop+0xd4>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2201      	movs	r2, #1
 800bb86:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bb8a:	e01b      	b.n	800bbc4 <HAL_TIM_PWM_Stop+0x10c>
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	2b08      	cmp	r3, #8
 800bb90:	d104      	bne.n	800bb9c <HAL_TIM_PWM_Stop+0xe4>
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2201      	movs	r2, #1
 800bb96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bb9a:	e013      	b.n	800bbc4 <HAL_TIM_PWM_Stop+0x10c>
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	2b0c      	cmp	r3, #12
 800bba0:	d104      	bne.n	800bbac <HAL_TIM_PWM_Stop+0xf4>
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2201      	movs	r2, #1
 800bba6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bbaa:	e00b      	b.n	800bbc4 <HAL_TIM_PWM_Stop+0x10c>
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	2b10      	cmp	r3, #16
 800bbb0:	d104      	bne.n	800bbbc <HAL_TIM_PWM_Stop+0x104>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2201      	movs	r2, #1
 800bbb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bbba:	e003      	b.n	800bbc4 <HAL_TIM_PWM_Stop+0x10c>
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800bbc4:	2300      	movs	r3, #0
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3708      	adds	r7, #8
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}
 800bbce:	bf00      	nop
 800bbd0:	40012c00 	.word	0x40012c00
 800bbd4:	40013400 	.word	0x40013400
 800bbd8:	40014000 	.word	0x40014000
 800bbdc:	40014400 	.word	0x40014400
 800bbe0:	40014800 	.word	0x40014800

0800bbe4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b084      	sub	sp, #16
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	68db      	ldr	r3, [r3, #12]
 800bbf2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	691b      	ldr	r3, [r3, #16]
 800bbfa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	f003 0302 	and.w	r3, r3, #2
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d026      	beq.n	800bc54 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	f003 0302 	and.w	r3, r3, #2
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d021      	beq.n	800bc54 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f06f 0202 	mvn.w	r2, #2
 800bc18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2201      	movs	r2, #1
 800bc1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	699b      	ldr	r3, [r3, #24]
 800bc26:	f003 0303 	and.w	r3, r3, #3
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d005      	beq.n	800bc3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	4798      	blx	r3
 800bc38:	e009      	b.n	800bc4e <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2200      	movs	r2, #0
 800bc52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	f003 0304 	and.w	r3, r3, #4
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d026      	beq.n	800bcac <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	f003 0304 	and.w	r3, r3, #4
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d021      	beq.n	800bcac <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f06f 0204 	mvn.w	r2, #4
 800bc70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2202      	movs	r2, #2
 800bc76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	699b      	ldr	r3, [r3, #24]
 800bc7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d005      	beq.n	800bc92 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	4798      	blx	r3
 800bc90:	e009      	b.n	800bca6 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	f003 0308 	and.w	r3, r3, #8
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d026      	beq.n	800bd04 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	f003 0308 	and.w	r3, r3, #8
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d021      	beq.n	800bd04 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f06f 0208 	mvn.w	r2, #8
 800bcc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2204      	movs	r2, #4
 800bcce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	69db      	ldr	r3, [r3, #28]
 800bcd6:	f003 0303 	and.w	r3, r3, #3
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d005      	beq.n	800bcea <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	4798      	blx	r3
 800bce8:	e009      	b.n	800bcfe <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2200      	movs	r2, #0
 800bd02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	f003 0310 	and.w	r3, r3, #16
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d026      	beq.n	800bd5c <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	f003 0310 	and.w	r3, r3, #16
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d021      	beq.n	800bd5c <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f06f 0210 	mvn.w	r2, #16
 800bd20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2208      	movs	r2, #8
 800bd26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	69db      	ldr	r3, [r3, #28]
 800bd2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d005      	beq.n	800bd42 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	4798      	blx	r3
 800bd40:	e009      	b.n	800bd56 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	f003 0301 	and.w	r3, r3, #1
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d00e      	beq.n	800bd84 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	f003 0301 	and.w	r3, r3, #1
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d009      	beq.n	800bd84 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f06f 0201 	mvn.w	r2, #1
 800bd78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d104      	bne.n	800bd98 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d00e      	beq.n	800bdb6 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d009      	beq.n	800bdb6 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800bdaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d00e      	beq.n	800bdde <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d009      	beq.n	800bdde <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bdd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d00e      	beq.n	800be06 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d009      	beq.n	800be06 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bdfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	f003 0320 	and.w	r3, r3, #32
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d00e      	beq.n	800be2e <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f003 0320 	and.w	r3, r3, #32
 800be16:	2b00      	cmp	r3, #0
 800be18:	d009      	beq.n	800be2e <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	f06f 0220 	mvn.w	r2, #32
 800be22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800be34:	2b00      	cmp	r3, #0
 800be36:	d00e      	beq.n	800be56 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d009      	beq.n	800be56 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800be4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d00e      	beq.n	800be7e <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800be66:	2b00      	cmp	r3, #0
 800be68:	d009      	beq.n	800be7e <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800be72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800be84:	2b00      	cmp	r3, #0
 800be86:	d00e      	beq.n	800bea6 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d009      	beq.n	800bea6 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800be9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800beac:	2b00      	cmp	r3, #0
 800beae:	d00e      	beq.n	800bece <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d009      	beq.n	800bece <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800bec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bece:	bf00      	nop
 800bed0:	3710      	adds	r7, #16
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}
	...

0800bed8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b086      	sub	sp, #24
 800bedc:	af00      	add	r7, sp, #0
 800bede:	60f8      	str	r0, [r7, #12]
 800bee0:	60b9      	str	r1, [r7, #8]
 800bee2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bee4:	2300      	movs	r3, #0
 800bee6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800beee:	2b01      	cmp	r3, #1
 800bef0:	d101      	bne.n	800bef6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bef2:	2302      	movs	r3, #2
 800bef4:	e0ff      	b.n	800c0f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2201      	movs	r2, #1
 800befa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2b14      	cmp	r3, #20
 800bf02:	f200 80f0 	bhi.w	800c0e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bf06:	a201      	add	r2, pc, #4	@ (adr r2, 800bf0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bf08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf0c:	0800bf61 	.word	0x0800bf61
 800bf10:	0800c0e7 	.word	0x0800c0e7
 800bf14:	0800c0e7 	.word	0x0800c0e7
 800bf18:	0800c0e7 	.word	0x0800c0e7
 800bf1c:	0800bfa1 	.word	0x0800bfa1
 800bf20:	0800c0e7 	.word	0x0800c0e7
 800bf24:	0800c0e7 	.word	0x0800c0e7
 800bf28:	0800c0e7 	.word	0x0800c0e7
 800bf2c:	0800bfe3 	.word	0x0800bfe3
 800bf30:	0800c0e7 	.word	0x0800c0e7
 800bf34:	0800c0e7 	.word	0x0800c0e7
 800bf38:	0800c0e7 	.word	0x0800c0e7
 800bf3c:	0800c023 	.word	0x0800c023
 800bf40:	0800c0e7 	.word	0x0800c0e7
 800bf44:	0800c0e7 	.word	0x0800c0e7
 800bf48:	0800c0e7 	.word	0x0800c0e7
 800bf4c:	0800c065 	.word	0x0800c065
 800bf50:	0800c0e7 	.word	0x0800c0e7
 800bf54:	0800c0e7 	.word	0x0800c0e7
 800bf58:	0800c0e7 	.word	0x0800c0e7
 800bf5c:	0800c0a5 	.word	0x0800c0a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	68b9      	ldr	r1, [r7, #8]
 800bf66:	4618      	mov	r0, r3
 800bf68:	f000 fc1a 	bl	800c7a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	699a      	ldr	r2, [r3, #24]
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f042 0208 	orr.w	r2, r2, #8
 800bf7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	699a      	ldr	r2, [r3, #24]
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f022 0204 	bic.w	r2, r2, #4
 800bf8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	6999      	ldr	r1, [r3, #24]
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	691a      	ldr	r2, [r3, #16]
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	430a      	orrs	r2, r1
 800bf9c:	619a      	str	r2, [r3, #24]
      break;
 800bf9e:	e0a5      	b.n	800c0ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	68b9      	ldr	r1, [r7, #8]
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f000 fc8a 	bl	800c8c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	699a      	ldr	r2, [r3, #24]
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bfba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	699a      	ldr	r2, [r3, #24]
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bfca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	6999      	ldr	r1, [r3, #24]
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	691b      	ldr	r3, [r3, #16]
 800bfd6:	021a      	lsls	r2, r3, #8
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	430a      	orrs	r2, r1
 800bfde:	619a      	str	r2, [r3, #24]
      break;
 800bfe0:	e084      	b.n	800c0ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	68b9      	ldr	r1, [r7, #8]
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f000 fcf3 	bl	800c9d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	69da      	ldr	r2, [r3, #28]
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f042 0208 	orr.w	r2, r2, #8
 800bffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	69da      	ldr	r2, [r3, #28]
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f022 0204 	bic.w	r2, r2, #4
 800c00c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	69d9      	ldr	r1, [r3, #28]
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	691a      	ldr	r2, [r3, #16]
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	430a      	orrs	r2, r1
 800c01e:	61da      	str	r2, [r3, #28]
      break;
 800c020:	e064      	b.n	800c0ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	68b9      	ldr	r1, [r7, #8]
 800c028:	4618      	mov	r0, r3
 800c02a:	f000 fd5b 	bl	800cae4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	69da      	ldr	r2, [r3, #28]
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c03c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	69da      	ldr	r2, [r3, #28]
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c04c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	69d9      	ldr	r1, [r3, #28]
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	691b      	ldr	r3, [r3, #16]
 800c058:	021a      	lsls	r2, r3, #8
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	430a      	orrs	r2, r1
 800c060:	61da      	str	r2, [r3, #28]
      break;
 800c062:	e043      	b.n	800c0ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	68b9      	ldr	r1, [r7, #8]
 800c06a:	4618      	mov	r0, r3
 800c06c:	f000 fdc4 	bl	800cbf8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f042 0208 	orr.w	r2, r2, #8
 800c07e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	f022 0204 	bic.w	r2, r2, #4
 800c08e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	691a      	ldr	r2, [r3, #16]
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	430a      	orrs	r2, r1
 800c0a0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800c0a2:	e023      	b.n	800c0ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	68b9      	ldr	r1, [r7, #8]
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f000 fe08 	bl	800ccc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c0be:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c0ce:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	691b      	ldr	r3, [r3, #16]
 800c0da:	021a      	lsls	r2, r3, #8
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	430a      	orrs	r2, r1
 800c0e2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800c0e4:	e002      	b.n	800c0ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	75fb      	strb	r3, [r7, #23]
      break;
 800c0ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c0f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	3718      	adds	r7, #24
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}
 800c0fe:	bf00      	nop

0800c100 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b084      	sub	sp, #16
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c10a:	2300      	movs	r3, #0
 800c10c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c114:	2b01      	cmp	r3, #1
 800c116:	d101      	bne.n	800c11c <HAL_TIM_ConfigClockSource+0x1c>
 800c118:	2302      	movs	r3, #2
 800c11a:	e0de      	b.n	800c2da <HAL_TIM_ConfigClockSource+0x1da>
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2201      	movs	r2, #1
 800c120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2202      	movs	r2, #2
 800c128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	689b      	ldr	r3, [r3, #8]
 800c132:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800c13a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c13e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c146:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	68ba      	ldr	r2, [r7, #8]
 800c14e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	4a63      	ldr	r2, [pc, #396]	@ (800c2e4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c156:	4293      	cmp	r3, r2
 800c158:	f000 80a9 	beq.w	800c2ae <HAL_TIM_ConfigClockSource+0x1ae>
 800c15c:	4a61      	ldr	r2, [pc, #388]	@ (800c2e4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c15e:	4293      	cmp	r3, r2
 800c160:	f200 80ae 	bhi.w	800c2c0 <HAL_TIM_ConfigClockSource+0x1c0>
 800c164:	4a60      	ldr	r2, [pc, #384]	@ (800c2e8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c166:	4293      	cmp	r3, r2
 800c168:	f000 80a1 	beq.w	800c2ae <HAL_TIM_ConfigClockSource+0x1ae>
 800c16c:	4a5e      	ldr	r2, [pc, #376]	@ (800c2e8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c16e:	4293      	cmp	r3, r2
 800c170:	f200 80a6 	bhi.w	800c2c0 <HAL_TIM_ConfigClockSource+0x1c0>
 800c174:	4a5d      	ldr	r2, [pc, #372]	@ (800c2ec <HAL_TIM_ConfigClockSource+0x1ec>)
 800c176:	4293      	cmp	r3, r2
 800c178:	f000 8099 	beq.w	800c2ae <HAL_TIM_ConfigClockSource+0x1ae>
 800c17c:	4a5b      	ldr	r2, [pc, #364]	@ (800c2ec <HAL_TIM_ConfigClockSource+0x1ec>)
 800c17e:	4293      	cmp	r3, r2
 800c180:	f200 809e 	bhi.w	800c2c0 <HAL_TIM_ConfigClockSource+0x1c0>
 800c184:	4a5a      	ldr	r2, [pc, #360]	@ (800c2f0 <HAL_TIM_ConfigClockSource+0x1f0>)
 800c186:	4293      	cmp	r3, r2
 800c188:	f000 8091 	beq.w	800c2ae <HAL_TIM_ConfigClockSource+0x1ae>
 800c18c:	4a58      	ldr	r2, [pc, #352]	@ (800c2f0 <HAL_TIM_ConfigClockSource+0x1f0>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	f200 8096 	bhi.w	800c2c0 <HAL_TIM_ConfigClockSource+0x1c0>
 800c194:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c198:	f000 8089 	beq.w	800c2ae <HAL_TIM_ConfigClockSource+0x1ae>
 800c19c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c1a0:	f200 808e 	bhi.w	800c2c0 <HAL_TIM_ConfigClockSource+0x1c0>
 800c1a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c1a8:	d03e      	beq.n	800c228 <HAL_TIM_ConfigClockSource+0x128>
 800c1aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c1ae:	f200 8087 	bhi.w	800c2c0 <HAL_TIM_ConfigClockSource+0x1c0>
 800c1b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c1b6:	f000 8086 	beq.w	800c2c6 <HAL_TIM_ConfigClockSource+0x1c6>
 800c1ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c1be:	d87f      	bhi.n	800c2c0 <HAL_TIM_ConfigClockSource+0x1c0>
 800c1c0:	2b70      	cmp	r3, #112	@ 0x70
 800c1c2:	d01a      	beq.n	800c1fa <HAL_TIM_ConfigClockSource+0xfa>
 800c1c4:	2b70      	cmp	r3, #112	@ 0x70
 800c1c6:	d87b      	bhi.n	800c2c0 <HAL_TIM_ConfigClockSource+0x1c0>
 800c1c8:	2b60      	cmp	r3, #96	@ 0x60
 800c1ca:	d050      	beq.n	800c26e <HAL_TIM_ConfigClockSource+0x16e>
 800c1cc:	2b60      	cmp	r3, #96	@ 0x60
 800c1ce:	d877      	bhi.n	800c2c0 <HAL_TIM_ConfigClockSource+0x1c0>
 800c1d0:	2b50      	cmp	r3, #80	@ 0x50
 800c1d2:	d03c      	beq.n	800c24e <HAL_TIM_ConfigClockSource+0x14e>
 800c1d4:	2b50      	cmp	r3, #80	@ 0x50
 800c1d6:	d873      	bhi.n	800c2c0 <HAL_TIM_ConfigClockSource+0x1c0>
 800c1d8:	2b40      	cmp	r3, #64	@ 0x40
 800c1da:	d058      	beq.n	800c28e <HAL_TIM_ConfigClockSource+0x18e>
 800c1dc:	2b40      	cmp	r3, #64	@ 0x40
 800c1de:	d86f      	bhi.n	800c2c0 <HAL_TIM_ConfigClockSource+0x1c0>
 800c1e0:	2b30      	cmp	r3, #48	@ 0x30
 800c1e2:	d064      	beq.n	800c2ae <HAL_TIM_ConfigClockSource+0x1ae>
 800c1e4:	2b30      	cmp	r3, #48	@ 0x30
 800c1e6:	d86b      	bhi.n	800c2c0 <HAL_TIM_ConfigClockSource+0x1c0>
 800c1e8:	2b20      	cmp	r3, #32
 800c1ea:	d060      	beq.n	800c2ae <HAL_TIM_ConfigClockSource+0x1ae>
 800c1ec:	2b20      	cmp	r3, #32
 800c1ee:	d867      	bhi.n	800c2c0 <HAL_TIM_ConfigClockSource+0x1c0>
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d05c      	beq.n	800c2ae <HAL_TIM_ConfigClockSource+0x1ae>
 800c1f4:	2b10      	cmp	r3, #16
 800c1f6:	d05a      	beq.n	800c2ae <HAL_TIM_ConfigClockSource+0x1ae>
 800c1f8:	e062      	b.n	800c2c0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c20a:	f000 fe3b 	bl	800ce84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	689b      	ldr	r3, [r3, #8]
 800c214:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c21c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	68ba      	ldr	r2, [r7, #8]
 800c224:	609a      	str	r2, [r3, #8]
      break;
 800c226:	e04f      	b.n	800c2c8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c238:	f000 fe24 	bl	800ce84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	689a      	ldr	r2, [r3, #8]
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c24a:	609a      	str	r2, [r3, #8]
      break;
 800c24c:	e03c      	b.n	800c2c8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c25a:	461a      	mov	r2, r3
 800c25c:	f000 fd96 	bl	800cd8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	2150      	movs	r1, #80	@ 0x50
 800c266:	4618      	mov	r0, r3
 800c268:	f000 fdef 	bl	800ce4a <TIM_ITRx_SetConfig>
      break;
 800c26c:	e02c      	b.n	800c2c8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c27a:	461a      	mov	r2, r3
 800c27c:	f000 fdb5 	bl	800cdea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	2160      	movs	r1, #96	@ 0x60
 800c286:	4618      	mov	r0, r3
 800c288:	f000 fddf 	bl	800ce4a <TIM_ITRx_SetConfig>
      break;
 800c28c:	e01c      	b.n	800c2c8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c29a:	461a      	mov	r2, r3
 800c29c:	f000 fd76 	bl	800cd8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	2140      	movs	r1, #64	@ 0x40
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f000 fdcf 	bl	800ce4a <TIM_ITRx_SetConfig>
      break;
 800c2ac:	e00c      	b.n	800c2c8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681a      	ldr	r2, [r3, #0]
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	4619      	mov	r1, r3
 800c2b8:	4610      	mov	r0, r2
 800c2ba:	f000 fdc6 	bl	800ce4a <TIM_ITRx_SetConfig>
      break;
 800c2be:	e003      	b.n	800c2c8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	73fb      	strb	r3, [r7, #15]
      break;
 800c2c4:	e000      	b.n	800c2c8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800c2c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c2d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3710      	adds	r7, #16
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}
 800c2e2:	bf00      	nop
 800c2e4:	00100070 	.word	0x00100070
 800c2e8:	00100040 	.word	0x00100040
 800c2ec:	00100030 	.word	0x00100030
 800c2f0:	00100020 	.word	0x00100020

0800c2f4 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b083      	sub	sp, #12
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800c2fc:	bf00      	nop
 800c2fe:	370c      	adds	r7, #12
 800c300:	46bd      	mov	sp, r7
 800c302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c306:	4770      	bx	lr

0800c308 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c308:	b480      	push	{r7}
 800c30a:	b083      	sub	sp, #12
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c310:	bf00      	nop
 800c312:	370c      	adds	r7, #12
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr

0800c31c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b083      	sub	sp, #12
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c324:	bf00      	nop
 800c326:	370c      	adds	r7, #12
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr

0800c330 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c330:	b480      	push	{r7}
 800c332:	b083      	sub	sp, #12
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800c338:	bf00      	nop
 800c33a:	370c      	adds	r7, #12
 800c33c:	46bd      	mov	sp, r7
 800c33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c342:	4770      	bx	lr

0800c344 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c344:	b480      	push	{r7}
 800c346:	b083      	sub	sp, #12
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c34c:	bf00      	nop
 800c34e:	370c      	adds	r7, #12
 800c350:	46bd      	mov	sp, r7
 800c352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c356:	4770      	bx	lr

0800c358 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c358:	b480      	push	{r7}
 800c35a:	b083      	sub	sp, #12
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800c360:	bf00      	nop
 800c362:	370c      	adds	r7, #12
 800c364:	46bd      	mov	sp, r7
 800c366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36a:	4770      	bx	lr

0800c36c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c36c:	b480      	push	{r7}
 800c36e:	b083      	sub	sp, #12
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c374:	bf00      	nop
 800c376:	370c      	adds	r7, #12
 800c378:	46bd      	mov	sp, r7
 800c37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37e:	4770      	bx	lr

0800c380 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c380:	b480      	push	{r7}
 800c382:	b083      	sub	sp, #12
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800c388:	bf00      	nop
 800c38a:	370c      	adds	r7, #12
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr

0800c394 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800c394:	b480      	push	{r7}
 800c396:	b083      	sub	sp, #12
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800c39c:	bf00      	nop
 800c39e:	370c      	adds	r7, #12
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr

0800c3a8 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b087      	sub	sp, #28
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	60f8      	str	r0, [r7, #12]
 800c3b0:	460b      	mov	r3, r1
 800c3b2:	607a      	str	r2, [r7, #4]
 800c3b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d101      	bne.n	800c3c4 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	e14a      	b.n	800c65a <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c3ca:	b2db      	uxtb	r3, r3
 800c3cc:	2b01      	cmp	r3, #1
 800c3ce:	f040 80dd 	bne.w	800c58c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800c3d2:	7afb      	ldrb	r3, [r7, #11]
 800c3d4:	2b1f      	cmp	r3, #31
 800c3d6:	f200 80d6 	bhi.w	800c586 <HAL_TIM_RegisterCallback+0x1de>
 800c3da:	a201      	add	r2, pc, #4	@ (adr r2, 800c3e0 <HAL_TIM_RegisterCallback+0x38>)
 800c3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3e0:	0800c461 	.word	0x0800c461
 800c3e4:	0800c469 	.word	0x0800c469
 800c3e8:	0800c471 	.word	0x0800c471
 800c3ec:	0800c479 	.word	0x0800c479
 800c3f0:	0800c481 	.word	0x0800c481
 800c3f4:	0800c489 	.word	0x0800c489
 800c3f8:	0800c491 	.word	0x0800c491
 800c3fc:	0800c499 	.word	0x0800c499
 800c400:	0800c4a1 	.word	0x0800c4a1
 800c404:	0800c4a9 	.word	0x0800c4a9
 800c408:	0800c4b1 	.word	0x0800c4b1
 800c40c:	0800c4b9 	.word	0x0800c4b9
 800c410:	0800c4c1 	.word	0x0800c4c1
 800c414:	0800c4c9 	.word	0x0800c4c9
 800c418:	0800c4d3 	.word	0x0800c4d3
 800c41c:	0800c4dd 	.word	0x0800c4dd
 800c420:	0800c4e7 	.word	0x0800c4e7
 800c424:	0800c4f1 	.word	0x0800c4f1
 800c428:	0800c4fb 	.word	0x0800c4fb
 800c42c:	0800c505 	.word	0x0800c505
 800c430:	0800c50f 	.word	0x0800c50f
 800c434:	0800c519 	.word	0x0800c519
 800c438:	0800c523 	.word	0x0800c523
 800c43c:	0800c52d 	.word	0x0800c52d
 800c440:	0800c537 	.word	0x0800c537
 800c444:	0800c541 	.word	0x0800c541
 800c448:	0800c54b 	.word	0x0800c54b
 800c44c:	0800c555 	.word	0x0800c555
 800c450:	0800c55f 	.word	0x0800c55f
 800c454:	0800c569 	.word	0x0800c569
 800c458:	0800c573 	.word	0x0800c573
 800c45c:	0800c57d 	.word	0x0800c57d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	687a      	ldr	r2, [r7, #4]
 800c464:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800c466:	e0f7      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	687a      	ldr	r2, [r7, #4]
 800c46c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800c46e:	e0f3      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	687a      	ldr	r2, [r7, #4]
 800c474:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800c476:	e0ef      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	687a      	ldr	r2, [r7, #4]
 800c47c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800c47e:	e0eb      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	687a      	ldr	r2, [r7, #4]
 800c484:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800c486:	e0e7      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	687a      	ldr	r2, [r7, #4]
 800c48c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800c48e:	e0e3      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	687a      	ldr	r2, [r7, #4]
 800c494:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800c496:	e0df      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	687a      	ldr	r2, [r7, #4]
 800c49c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800c49e:	e0db      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	687a      	ldr	r2, [r7, #4]
 800c4a4:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800c4a6:	e0d7      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	687a      	ldr	r2, [r7, #4]
 800c4ac:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800c4ae:	e0d3      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	687a      	ldr	r2, [r7, #4]
 800c4b4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800c4b6:	e0cf      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	687a      	ldr	r2, [r7, #4]
 800c4bc:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800c4be:	e0cb      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	687a      	ldr	r2, [r7, #4]
 800c4c4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800c4c6:	e0c7      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	687a      	ldr	r2, [r7, #4]
 800c4cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800c4d0:	e0c2      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	687a      	ldr	r2, [r7, #4]
 800c4d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800c4da:	e0bd      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	687a      	ldr	r2, [r7, #4]
 800c4e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800c4e4:	e0b8      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	687a      	ldr	r2, [r7, #4]
 800c4ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800c4ee:	e0b3      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	687a      	ldr	r2, [r7, #4]
 800c4f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800c4f8:	e0ae      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	687a      	ldr	r2, [r7, #4]
 800c4fe:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800c502:	e0a9      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	687a      	ldr	r2, [r7, #4]
 800c508:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800c50c:	e0a4      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	687a      	ldr	r2, [r7, #4]
 800c512:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800c516:	e09f      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	687a      	ldr	r2, [r7, #4]
 800c51c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800c520:	e09a      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800c52a:	e095      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	687a      	ldr	r2, [r7, #4]
 800c530:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800c534:	e090      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	687a      	ldr	r2, [r7, #4]
 800c53a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800c53e:	e08b      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	687a      	ldr	r2, [r7, #4]
 800c544:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800c548:	e086      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	687a      	ldr	r2, [r7, #4]
 800c54e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800c552:	e081      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	687a      	ldr	r2, [r7, #4]
 800c558:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800c55c:	e07c      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	687a      	ldr	r2, [r7, #4]
 800c562:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800c566:	e077      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	687a      	ldr	r2, [r7, #4]
 800c56c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800c570:	e072      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	687a      	ldr	r2, [r7, #4]
 800c576:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800c57a:	e06d      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	687a      	ldr	r2, [r7, #4]
 800c580:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800c584:	e068      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800c586:	2301      	movs	r3, #1
 800c588:	75fb      	strb	r3, [r7, #23]
        break;
 800c58a:	e065      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c592:	b2db      	uxtb	r3, r3
 800c594:	2b00      	cmp	r3, #0
 800c596:	d15d      	bne.n	800c654 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800c598:	7afb      	ldrb	r3, [r7, #11]
 800c59a:	2b0d      	cmp	r3, #13
 800c59c:	d857      	bhi.n	800c64e <HAL_TIM_RegisterCallback+0x2a6>
 800c59e:	a201      	add	r2, pc, #4	@ (adr r2, 800c5a4 <HAL_TIM_RegisterCallback+0x1fc>)
 800c5a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5a4:	0800c5dd 	.word	0x0800c5dd
 800c5a8:	0800c5e5 	.word	0x0800c5e5
 800c5ac:	0800c5ed 	.word	0x0800c5ed
 800c5b0:	0800c5f5 	.word	0x0800c5f5
 800c5b4:	0800c5fd 	.word	0x0800c5fd
 800c5b8:	0800c605 	.word	0x0800c605
 800c5bc:	0800c60d 	.word	0x0800c60d
 800c5c0:	0800c615 	.word	0x0800c615
 800c5c4:	0800c61d 	.word	0x0800c61d
 800c5c8:	0800c625 	.word	0x0800c625
 800c5cc:	0800c62d 	.word	0x0800c62d
 800c5d0:	0800c635 	.word	0x0800c635
 800c5d4:	0800c63d 	.word	0x0800c63d
 800c5d8:	0800c645 	.word	0x0800c645
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	687a      	ldr	r2, [r7, #4]
 800c5e0:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800c5e2:	e039      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	687a      	ldr	r2, [r7, #4]
 800c5e8:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800c5ea:	e035      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	687a      	ldr	r2, [r7, #4]
 800c5f0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800c5f2:	e031      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	687a      	ldr	r2, [r7, #4]
 800c5f8:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800c5fa:	e02d      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	687a      	ldr	r2, [r7, #4]
 800c600:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800c602:	e029      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	687a      	ldr	r2, [r7, #4]
 800c608:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800c60a:	e025      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	687a      	ldr	r2, [r7, #4]
 800c610:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800c612:	e021      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	687a      	ldr	r2, [r7, #4]
 800c618:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800c61a:	e01d      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	687a      	ldr	r2, [r7, #4]
 800c620:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800c622:	e019      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	687a      	ldr	r2, [r7, #4]
 800c628:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800c62a:	e015      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	687a      	ldr	r2, [r7, #4]
 800c630:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800c632:	e011      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	687a      	ldr	r2, [r7, #4]
 800c638:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800c63a:	e00d      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	687a      	ldr	r2, [r7, #4]
 800c640:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800c642:	e009      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	687a      	ldr	r2, [r7, #4]
 800c648:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800c64c:	e004      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800c64e:	2301      	movs	r3, #1
 800c650:	75fb      	strb	r3, [r7, #23]
        break;
 800c652:	e001      	b.n	800c658 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800c654:	2301      	movs	r3, #1
 800c656:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800c658:	7dfb      	ldrb	r3, [r7, #23]
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	371c      	adds	r7, #28
 800c65e:	46bd      	mov	sp, r7
 800c660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c664:	4770      	bx	lr
 800c666:	bf00      	nop

0800c668 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c668:	b480      	push	{r7}
 800c66a:	b085      	sub	sp, #20
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
 800c670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	4a42      	ldr	r2, [pc, #264]	@ (800c784 <TIM_Base_SetConfig+0x11c>)
 800c67c:	4293      	cmp	r3, r2
 800c67e:	d00f      	beq.n	800c6a0 <TIM_Base_SetConfig+0x38>
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c686:	d00b      	beq.n	800c6a0 <TIM_Base_SetConfig+0x38>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	4a3f      	ldr	r2, [pc, #252]	@ (800c788 <TIM_Base_SetConfig+0x120>)
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d007      	beq.n	800c6a0 <TIM_Base_SetConfig+0x38>
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	4a3e      	ldr	r2, [pc, #248]	@ (800c78c <TIM_Base_SetConfig+0x124>)
 800c694:	4293      	cmp	r3, r2
 800c696:	d003      	beq.n	800c6a0 <TIM_Base_SetConfig+0x38>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	4a3d      	ldr	r2, [pc, #244]	@ (800c790 <TIM_Base_SetConfig+0x128>)
 800c69c:	4293      	cmp	r3, r2
 800c69e:	d108      	bne.n	800c6b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	685b      	ldr	r3, [r3, #4]
 800c6ac:	68fa      	ldr	r2, [r7, #12]
 800c6ae:	4313      	orrs	r3, r2
 800c6b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	4a33      	ldr	r2, [pc, #204]	@ (800c784 <TIM_Base_SetConfig+0x11c>)
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	d01b      	beq.n	800c6f2 <TIM_Base_SetConfig+0x8a>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6c0:	d017      	beq.n	800c6f2 <TIM_Base_SetConfig+0x8a>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	4a30      	ldr	r2, [pc, #192]	@ (800c788 <TIM_Base_SetConfig+0x120>)
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	d013      	beq.n	800c6f2 <TIM_Base_SetConfig+0x8a>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	4a2f      	ldr	r2, [pc, #188]	@ (800c78c <TIM_Base_SetConfig+0x124>)
 800c6ce:	4293      	cmp	r3, r2
 800c6d0:	d00f      	beq.n	800c6f2 <TIM_Base_SetConfig+0x8a>
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	4a2e      	ldr	r2, [pc, #184]	@ (800c790 <TIM_Base_SetConfig+0x128>)
 800c6d6:	4293      	cmp	r3, r2
 800c6d8:	d00b      	beq.n	800c6f2 <TIM_Base_SetConfig+0x8a>
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	4a2d      	ldr	r2, [pc, #180]	@ (800c794 <TIM_Base_SetConfig+0x12c>)
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	d007      	beq.n	800c6f2 <TIM_Base_SetConfig+0x8a>
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	4a2c      	ldr	r2, [pc, #176]	@ (800c798 <TIM_Base_SetConfig+0x130>)
 800c6e6:	4293      	cmp	r3, r2
 800c6e8:	d003      	beq.n	800c6f2 <TIM_Base_SetConfig+0x8a>
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	4a2b      	ldr	r2, [pc, #172]	@ (800c79c <TIM_Base_SetConfig+0x134>)
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	d108      	bne.n	800c704 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c6f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	68db      	ldr	r3, [r3, #12]
 800c6fe:	68fa      	ldr	r2, [r7, #12]
 800c700:	4313      	orrs	r3, r2
 800c702:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	695b      	ldr	r3, [r3, #20]
 800c70e:	4313      	orrs	r3, r2
 800c710:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	68fa      	ldr	r2, [r7, #12]
 800c716:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	689a      	ldr	r2, [r3, #8]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	681a      	ldr	r2, [r3, #0]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	4a16      	ldr	r2, [pc, #88]	@ (800c784 <TIM_Base_SetConfig+0x11c>)
 800c72c:	4293      	cmp	r3, r2
 800c72e:	d00f      	beq.n	800c750 <TIM_Base_SetConfig+0xe8>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	4a17      	ldr	r2, [pc, #92]	@ (800c790 <TIM_Base_SetConfig+0x128>)
 800c734:	4293      	cmp	r3, r2
 800c736:	d00b      	beq.n	800c750 <TIM_Base_SetConfig+0xe8>
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	4a16      	ldr	r2, [pc, #88]	@ (800c794 <TIM_Base_SetConfig+0x12c>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d007      	beq.n	800c750 <TIM_Base_SetConfig+0xe8>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	4a15      	ldr	r2, [pc, #84]	@ (800c798 <TIM_Base_SetConfig+0x130>)
 800c744:	4293      	cmp	r3, r2
 800c746:	d003      	beq.n	800c750 <TIM_Base_SetConfig+0xe8>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	4a14      	ldr	r2, [pc, #80]	@ (800c79c <TIM_Base_SetConfig+0x134>)
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d103      	bne.n	800c758 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	691a      	ldr	r2, [r3, #16]
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2201      	movs	r2, #1
 800c75c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	691b      	ldr	r3, [r3, #16]
 800c762:	f003 0301 	and.w	r3, r3, #1
 800c766:	2b01      	cmp	r3, #1
 800c768:	d105      	bne.n	800c776 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	691b      	ldr	r3, [r3, #16]
 800c76e:	f023 0201 	bic.w	r2, r3, #1
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	611a      	str	r2, [r3, #16]
  }
}
 800c776:	bf00      	nop
 800c778:	3714      	adds	r7, #20
 800c77a:	46bd      	mov	sp, r7
 800c77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c780:	4770      	bx	lr
 800c782:	bf00      	nop
 800c784:	40012c00 	.word	0x40012c00
 800c788:	40000400 	.word	0x40000400
 800c78c:	40000800 	.word	0x40000800
 800c790:	40013400 	.word	0x40013400
 800c794:	40014000 	.word	0x40014000
 800c798:	40014400 	.word	0x40014400
 800c79c:	40014800 	.word	0x40014800

0800c7a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b087      	sub	sp, #28
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
 800c7a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6a1b      	ldr	r3, [r3, #32]
 800c7ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6a1b      	ldr	r3, [r3, #32]
 800c7b4:	f023 0201 	bic.w	r2, r3, #1
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	685b      	ldr	r3, [r3, #4]
 800c7c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	699b      	ldr	r3, [r3, #24]
 800c7c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c7ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	f023 0303 	bic.w	r3, r3, #3
 800c7da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	68fa      	ldr	r2, [r7, #12]
 800c7e2:	4313      	orrs	r3, r2
 800c7e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	f023 0302 	bic.w	r3, r3, #2
 800c7ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	689b      	ldr	r3, [r3, #8]
 800c7f2:	697a      	ldr	r2, [r7, #20]
 800c7f4:	4313      	orrs	r3, r2
 800c7f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	4a2c      	ldr	r2, [pc, #176]	@ (800c8ac <TIM_OC1_SetConfig+0x10c>)
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d00f      	beq.n	800c820 <TIM_OC1_SetConfig+0x80>
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	4a2b      	ldr	r2, [pc, #172]	@ (800c8b0 <TIM_OC1_SetConfig+0x110>)
 800c804:	4293      	cmp	r3, r2
 800c806:	d00b      	beq.n	800c820 <TIM_OC1_SetConfig+0x80>
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	4a2a      	ldr	r2, [pc, #168]	@ (800c8b4 <TIM_OC1_SetConfig+0x114>)
 800c80c:	4293      	cmp	r3, r2
 800c80e:	d007      	beq.n	800c820 <TIM_OC1_SetConfig+0x80>
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	4a29      	ldr	r2, [pc, #164]	@ (800c8b8 <TIM_OC1_SetConfig+0x118>)
 800c814:	4293      	cmp	r3, r2
 800c816:	d003      	beq.n	800c820 <TIM_OC1_SetConfig+0x80>
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	4a28      	ldr	r2, [pc, #160]	@ (800c8bc <TIM_OC1_SetConfig+0x11c>)
 800c81c:	4293      	cmp	r3, r2
 800c81e:	d10c      	bne.n	800c83a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	f023 0308 	bic.w	r3, r3, #8
 800c826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	68db      	ldr	r3, [r3, #12]
 800c82c:	697a      	ldr	r2, [r7, #20]
 800c82e:	4313      	orrs	r3, r2
 800c830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c832:	697b      	ldr	r3, [r7, #20]
 800c834:	f023 0304 	bic.w	r3, r3, #4
 800c838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	4a1b      	ldr	r2, [pc, #108]	@ (800c8ac <TIM_OC1_SetConfig+0x10c>)
 800c83e:	4293      	cmp	r3, r2
 800c840:	d00f      	beq.n	800c862 <TIM_OC1_SetConfig+0xc2>
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	4a1a      	ldr	r2, [pc, #104]	@ (800c8b0 <TIM_OC1_SetConfig+0x110>)
 800c846:	4293      	cmp	r3, r2
 800c848:	d00b      	beq.n	800c862 <TIM_OC1_SetConfig+0xc2>
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	4a19      	ldr	r2, [pc, #100]	@ (800c8b4 <TIM_OC1_SetConfig+0x114>)
 800c84e:	4293      	cmp	r3, r2
 800c850:	d007      	beq.n	800c862 <TIM_OC1_SetConfig+0xc2>
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	4a18      	ldr	r2, [pc, #96]	@ (800c8b8 <TIM_OC1_SetConfig+0x118>)
 800c856:	4293      	cmp	r3, r2
 800c858:	d003      	beq.n	800c862 <TIM_OC1_SetConfig+0xc2>
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	4a17      	ldr	r2, [pc, #92]	@ (800c8bc <TIM_OC1_SetConfig+0x11c>)
 800c85e:	4293      	cmp	r3, r2
 800c860:	d111      	bne.n	800c886 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c862:	693b      	ldr	r3, [r7, #16]
 800c864:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c86a:	693b      	ldr	r3, [r7, #16]
 800c86c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	695b      	ldr	r3, [r3, #20]
 800c876:	693a      	ldr	r2, [r7, #16]
 800c878:	4313      	orrs	r3, r2
 800c87a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	699b      	ldr	r3, [r3, #24]
 800c880:	693a      	ldr	r2, [r7, #16]
 800c882:	4313      	orrs	r3, r2
 800c884:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	693a      	ldr	r2, [r7, #16]
 800c88a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	68fa      	ldr	r2, [r7, #12]
 800c890:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	685a      	ldr	r2, [r3, #4]
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	697a      	ldr	r2, [r7, #20]
 800c89e:	621a      	str	r2, [r3, #32]
}
 800c8a0:	bf00      	nop
 800c8a2:	371c      	adds	r7, #28
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8aa:	4770      	bx	lr
 800c8ac:	40012c00 	.word	0x40012c00
 800c8b0:	40013400 	.word	0x40013400
 800c8b4:	40014000 	.word	0x40014000
 800c8b8:	40014400 	.word	0x40014400
 800c8bc:	40014800 	.word	0x40014800

0800c8c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c8c0:	b480      	push	{r7}
 800c8c2:	b087      	sub	sp, #28
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
 800c8c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6a1b      	ldr	r3, [r3, #32]
 800c8ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	6a1b      	ldr	r3, [r3, #32]
 800c8d4:	f023 0210 	bic.w	r2, r3, #16
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	685b      	ldr	r3, [r3, #4]
 800c8e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	699b      	ldr	r3, [r3, #24]
 800c8e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c8ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c8f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c8fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	021b      	lsls	r3, r3, #8
 800c902:	68fa      	ldr	r2, [r7, #12]
 800c904:	4313      	orrs	r3, r2
 800c906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	f023 0320 	bic.w	r3, r3, #32
 800c90e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	689b      	ldr	r3, [r3, #8]
 800c914:	011b      	lsls	r3, r3, #4
 800c916:	697a      	ldr	r2, [r7, #20]
 800c918:	4313      	orrs	r3, r2
 800c91a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	4a28      	ldr	r2, [pc, #160]	@ (800c9c0 <TIM_OC2_SetConfig+0x100>)
 800c920:	4293      	cmp	r3, r2
 800c922:	d003      	beq.n	800c92c <TIM_OC2_SetConfig+0x6c>
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	4a27      	ldr	r2, [pc, #156]	@ (800c9c4 <TIM_OC2_SetConfig+0x104>)
 800c928:	4293      	cmp	r3, r2
 800c92a:	d10d      	bne.n	800c948 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c932:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	68db      	ldr	r3, [r3, #12]
 800c938:	011b      	lsls	r3, r3, #4
 800c93a:	697a      	ldr	r2, [r7, #20]
 800c93c:	4313      	orrs	r3, r2
 800c93e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c940:	697b      	ldr	r3, [r7, #20]
 800c942:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c946:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	4a1d      	ldr	r2, [pc, #116]	@ (800c9c0 <TIM_OC2_SetConfig+0x100>)
 800c94c:	4293      	cmp	r3, r2
 800c94e:	d00f      	beq.n	800c970 <TIM_OC2_SetConfig+0xb0>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	4a1c      	ldr	r2, [pc, #112]	@ (800c9c4 <TIM_OC2_SetConfig+0x104>)
 800c954:	4293      	cmp	r3, r2
 800c956:	d00b      	beq.n	800c970 <TIM_OC2_SetConfig+0xb0>
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	4a1b      	ldr	r2, [pc, #108]	@ (800c9c8 <TIM_OC2_SetConfig+0x108>)
 800c95c:	4293      	cmp	r3, r2
 800c95e:	d007      	beq.n	800c970 <TIM_OC2_SetConfig+0xb0>
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	4a1a      	ldr	r2, [pc, #104]	@ (800c9cc <TIM_OC2_SetConfig+0x10c>)
 800c964:	4293      	cmp	r3, r2
 800c966:	d003      	beq.n	800c970 <TIM_OC2_SetConfig+0xb0>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	4a19      	ldr	r2, [pc, #100]	@ (800c9d0 <TIM_OC2_SetConfig+0x110>)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d113      	bne.n	800c998 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c976:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c978:	693b      	ldr	r3, [r7, #16]
 800c97a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c97e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	695b      	ldr	r3, [r3, #20]
 800c984:	009b      	lsls	r3, r3, #2
 800c986:	693a      	ldr	r2, [r7, #16]
 800c988:	4313      	orrs	r3, r2
 800c98a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	699b      	ldr	r3, [r3, #24]
 800c990:	009b      	lsls	r3, r3, #2
 800c992:	693a      	ldr	r2, [r7, #16]
 800c994:	4313      	orrs	r3, r2
 800c996:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	693a      	ldr	r2, [r7, #16]
 800c99c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	68fa      	ldr	r2, [r7, #12]
 800c9a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	685a      	ldr	r2, [r3, #4]
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	697a      	ldr	r2, [r7, #20]
 800c9b0:	621a      	str	r2, [r3, #32]
}
 800c9b2:	bf00      	nop
 800c9b4:	371c      	adds	r7, #28
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9bc:	4770      	bx	lr
 800c9be:	bf00      	nop
 800c9c0:	40012c00 	.word	0x40012c00
 800c9c4:	40013400 	.word	0x40013400
 800c9c8:	40014000 	.word	0x40014000
 800c9cc:	40014400 	.word	0x40014400
 800c9d0:	40014800 	.word	0x40014800

0800c9d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b087      	sub	sp, #28
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
 800c9dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	6a1b      	ldr	r3, [r3, #32]
 800c9e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6a1b      	ldr	r3, [r3, #32]
 800c9e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	685b      	ldr	r3, [r3, #4]
 800c9f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	69db      	ldr	r3, [r3, #28]
 800c9fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ca02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	f023 0303 	bic.w	r3, r3, #3
 800ca0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	68fa      	ldr	r2, [r7, #12]
 800ca16:	4313      	orrs	r3, r2
 800ca18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ca20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	689b      	ldr	r3, [r3, #8]
 800ca26:	021b      	lsls	r3, r3, #8
 800ca28:	697a      	ldr	r2, [r7, #20]
 800ca2a:	4313      	orrs	r3, r2
 800ca2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	4a27      	ldr	r2, [pc, #156]	@ (800cad0 <TIM_OC3_SetConfig+0xfc>)
 800ca32:	4293      	cmp	r3, r2
 800ca34:	d003      	beq.n	800ca3e <TIM_OC3_SetConfig+0x6a>
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	4a26      	ldr	r2, [pc, #152]	@ (800cad4 <TIM_OC3_SetConfig+0x100>)
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	d10d      	bne.n	800ca5a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ca44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	68db      	ldr	r3, [r3, #12]
 800ca4a:	021b      	lsls	r3, r3, #8
 800ca4c:	697a      	ldr	r2, [r7, #20]
 800ca4e:	4313      	orrs	r3, r2
 800ca50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ca58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	4a1c      	ldr	r2, [pc, #112]	@ (800cad0 <TIM_OC3_SetConfig+0xfc>)
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d00f      	beq.n	800ca82 <TIM_OC3_SetConfig+0xae>
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	4a1b      	ldr	r2, [pc, #108]	@ (800cad4 <TIM_OC3_SetConfig+0x100>)
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d00b      	beq.n	800ca82 <TIM_OC3_SetConfig+0xae>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	4a1a      	ldr	r2, [pc, #104]	@ (800cad8 <TIM_OC3_SetConfig+0x104>)
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d007      	beq.n	800ca82 <TIM_OC3_SetConfig+0xae>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	4a19      	ldr	r2, [pc, #100]	@ (800cadc <TIM_OC3_SetConfig+0x108>)
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d003      	beq.n	800ca82 <TIM_OC3_SetConfig+0xae>
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	4a18      	ldr	r2, [pc, #96]	@ (800cae0 <TIM_OC3_SetConfig+0x10c>)
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	d113      	bne.n	800caaa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ca88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ca8a:	693b      	ldr	r3, [r7, #16]
 800ca8c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ca90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	695b      	ldr	r3, [r3, #20]
 800ca96:	011b      	lsls	r3, r3, #4
 800ca98:	693a      	ldr	r2, [r7, #16]
 800ca9a:	4313      	orrs	r3, r2
 800ca9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	699b      	ldr	r3, [r3, #24]
 800caa2:	011b      	lsls	r3, r3, #4
 800caa4:	693a      	ldr	r2, [r7, #16]
 800caa6:	4313      	orrs	r3, r2
 800caa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	693a      	ldr	r2, [r7, #16]
 800caae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	68fa      	ldr	r2, [r7, #12]
 800cab4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	685a      	ldr	r2, [r3, #4]
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	697a      	ldr	r2, [r7, #20]
 800cac2:	621a      	str	r2, [r3, #32]
}
 800cac4:	bf00      	nop
 800cac6:	371c      	adds	r7, #28
 800cac8:	46bd      	mov	sp, r7
 800caca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cace:	4770      	bx	lr
 800cad0:	40012c00 	.word	0x40012c00
 800cad4:	40013400 	.word	0x40013400
 800cad8:	40014000 	.word	0x40014000
 800cadc:	40014400 	.word	0x40014400
 800cae0:	40014800 	.word	0x40014800

0800cae4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cae4:	b480      	push	{r7}
 800cae6:	b087      	sub	sp, #28
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6a1b      	ldr	r3, [r3, #32]
 800caf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	6a1b      	ldr	r3, [r3, #32]
 800caf8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	685b      	ldr	r3, [r3, #4]
 800cb04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	69db      	ldr	r3, [r3, #28]
 800cb0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cb12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cb1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	021b      	lsls	r3, r3, #8
 800cb26:	68fa      	ldr	r2, [r7, #12]
 800cb28:	4313      	orrs	r3, r2
 800cb2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cb2c:	697b      	ldr	r3, [r7, #20]
 800cb2e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cb32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	689b      	ldr	r3, [r3, #8]
 800cb38:	031b      	lsls	r3, r3, #12
 800cb3a:	697a      	ldr	r2, [r7, #20]
 800cb3c:	4313      	orrs	r3, r2
 800cb3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	4a28      	ldr	r2, [pc, #160]	@ (800cbe4 <TIM_OC4_SetConfig+0x100>)
 800cb44:	4293      	cmp	r3, r2
 800cb46:	d003      	beq.n	800cb50 <TIM_OC4_SetConfig+0x6c>
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	4a27      	ldr	r2, [pc, #156]	@ (800cbe8 <TIM_OC4_SetConfig+0x104>)
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	d10d      	bne.n	800cb6c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800cb56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	68db      	ldr	r3, [r3, #12]
 800cb5c:	031b      	lsls	r3, r3, #12
 800cb5e:	697a      	ldr	r2, [r7, #20]
 800cb60:	4313      	orrs	r3, r2
 800cb62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cb6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	4a1d      	ldr	r2, [pc, #116]	@ (800cbe4 <TIM_OC4_SetConfig+0x100>)
 800cb70:	4293      	cmp	r3, r2
 800cb72:	d00f      	beq.n	800cb94 <TIM_OC4_SetConfig+0xb0>
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	4a1c      	ldr	r2, [pc, #112]	@ (800cbe8 <TIM_OC4_SetConfig+0x104>)
 800cb78:	4293      	cmp	r3, r2
 800cb7a:	d00b      	beq.n	800cb94 <TIM_OC4_SetConfig+0xb0>
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	4a1b      	ldr	r2, [pc, #108]	@ (800cbec <TIM_OC4_SetConfig+0x108>)
 800cb80:	4293      	cmp	r3, r2
 800cb82:	d007      	beq.n	800cb94 <TIM_OC4_SetConfig+0xb0>
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	4a1a      	ldr	r2, [pc, #104]	@ (800cbf0 <TIM_OC4_SetConfig+0x10c>)
 800cb88:	4293      	cmp	r3, r2
 800cb8a:	d003      	beq.n	800cb94 <TIM_OC4_SetConfig+0xb0>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	4a19      	ldr	r2, [pc, #100]	@ (800cbf4 <TIM_OC4_SetConfig+0x110>)
 800cb90:	4293      	cmp	r3, r2
 800cb92:	d113      	bne.n	800cbbc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cb9a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800cb9c:	693b      	ldr	r3, [r7, #16]
 800cb9e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800cba2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	695b      	ldr	r3, [r3, #20]
 800cba8:	019b      	lsls	r3, r3, #6
 800cbaa:	693a      	ldr	r2, [r7, #16]
 800cbac:	4313      	orrs	r3, r2
 800cbae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	699b      	ldr	r3, [r3, #24]
 800cbb4:	019b      	lsls	r3, r3, #6
 800cbb6:	693a      	ldr	r2, [r7, #16]
 800cbb8:	4313      	orrs	r3, r2
 800cbba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	693a      	ldr	r2, [r7, #16]
 800cbc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	68fa      	ldr	r2, [r7, #12]
 800cbc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	685a      	ldr	r2, [r3, #4]
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	697a      	ldr	r2, [r7, #20]
 800cbd4:	621a      	str	r2, [r3, #32]
}
 800cbd6:	bf00      	nop
 800cbd8:	371c      	adds	r7, #28
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe0:	4770      	bx	lr
 800cbe2:	bf00      	nop
 800cbe4:	40012c00 	.word	0x40012c00
 800cbe8:	40013400 	.word	0x40013400
 800cbec:	40014000 	.word	0x40014000
 800cbf0:	40014400 	.word	0x40014400
 800cbf4:	40014800 	.word	0x40014800

0800cbf8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b087      	sub	sp, #28
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
 800cc00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6a1b      	ldr	r3, [r3, #32]
 800cc06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	6a1b      	ldr	r3, [r3, #32]
 800cc0c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	685b      	ldr	r3, [r3, #4]
 800cc18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cc26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	68fa      	ldr	r2, [r7, #12]
 800cc32:	4313      	orrs	r3, r2
 800cc34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800cc3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	689b      	ldr	r3, [r3, #8]
 800cc42:	041b      	lsls	r3, r3, #16
 800cc44:	693a      	ldr	r2, [r7, #16]
 800cc46:	4313      	orrs	r3, r2
 800cc48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	4a17      	ldr	r2, [pc, #92]	@ (800ccac <TIM_OC5_SetConfig+0xb4>)
 800cc4e:	4293      	cmp	r3, r2
 800cc50:	d00f      	beq.n	800cc72 <TIM_OC5_SetConfig+0x7a>
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	4a16      	ldr	r2, [pc, #88]	@ (800ccb0 <TIM_OC5_SetConfig+0xb8>)
 800cc56:	4293      	cmp	r3, r2
 800cc58:	d00b      	beq.n	800cc72 <TIM_OC5_SetConfig+0x7a>
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	4a15      	ldr	r2, [pc, #84]	@ (800ccb4 <TIM_OC5_SetConfig+0xbc>)
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d007      	beq.n	800cc72 <TIM_OC5_SetConfig+0x7a>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	4a14      	ldr	r2, [pc, #80]	@ (800ccb8 <TIM_OC5_SetConfig+0xc0>)
 800cc66:	4293      	cmp	r3, r2
 800cc68:	d003      	beq.n	800cc72 <TIM_OC5_SetConfig+0x7a>
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	4a13      	ldr	r2, [pc, #76]	@ (800ccbc <TIM_OC5_SetConfig+0xc4>)
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	d109      	bne.n	800cc86 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cc78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	695b      	ldr	r3, [r3, #20]
 800cc7e:	021b      	lsls	r3, r3, #8
 800cc80:	697a      	ldr	r2, [r7, #20]
 800cc82:	4313      	orrs	r3, r2
 800cc84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	697a      	ldr	r2, [r7, #20]
 800cc8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	68fa      	ldr	r2, [r7, #12]
 800cc90:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	685a      	ldr	r2, [r3, #4]
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	693a      	ldr	r2, [r7, #16]
 800cc9e:	621a      	str	r2, [r3, #32]
}
 800cca0:	bf00      	nop
 800cca2:	371c      	adds	r7, #28
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr
 800ccac:	40012c00 	.word	0x40012c00
 800ccb0:	40013400 	.word	0x40013400
 800ccb4:	40014000 	.word	0x40014000
 800ccb8:	40014400 	.word	0x40014400
 800ccbc:	40014800 	.word	0x40014800

0800ccc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b087      	sub	sp, #28
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
 800ccc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6a1b      	ldr	r3, [r3, #32]
 800ccce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6a1b      	ldr	r3, [r3, #32]
 800ccd4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	685b      	ldr	r3, [r3, #4]
 800cce0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ccee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ccf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	021b      	lsls	r3, r3, #8
 800ccfa:	68fa      	ldr	r2, [r7, #12]
 800ccfc:	4313      	orrs	r3, r2
 800ccfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cd06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	689b      	ldr	r3, [r3, #8]
 800cd0c:	051b      	lsls	r3, r3, #20
 800cd0e:	693a      	ldr	r2, [r7, #16]
 800cd10:	4313      	orrs	r3, r2
 800cd12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	4a18      	ldr	r2, [pc, #96]	@ (800cd78 <TIM_OC6_SetConfig+0xb8>)
 800cd18:	4293      	cmp	r3, r2
 800cd1a:	d00f      	beq.n	800cd3c <TIM_OC6_SetConfig+0x7c>
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	4a17      	ldr	r2, [pc, #92]	@ (800cd7c <TIM_OC6_SetConfig+0xbc>)
 800cd20:	4293      	cmp	r3, r2
 800cd22:	d00b      	beq.n	800cd3c <TIM_OC6_SetConfig+0x7c>
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	4a16      	ldr	r2, [pc, #88]	@ (800cd80 <TIM_OC6_SetConfig+0xc0>)
 800cd28:	4293      	cmp	r3, r2
 800cd2a:	d007      	beq.n	800cd3c <TIM_OC6_SetConfig+0x7c>
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	4a15      	ldr	r2, [pc, #84]	@ (800cd84 <TIM_OC6_SetConfig+0xc4>)
 800cd30:	4293      	cmp	r3, r2
 800cd32:	d003      	beq.n	800cd3c <TIM_OC6_SetConfig+0x7c>
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	4a14      	ldr	r2, [pc, #80]	@ (800cd88 <TIM_OC6_SetConfig+0xc8>)
 800cd38:	4293      	cmp	r3, r2
 800cd3a:	d109      	bne.n	800cd50 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cd42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	695b      	ldr	r3, [r3, #20]
 800cd48:	029b      	lsls	r3, r3, #10
 800cd4a:	697a      	ldr	r2, [r7, #20]
 800cd4c:	4313      	orrs	r3, r2
 800cd4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	697a      	ldr	r2, [r7, #20]
 800cd54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	68fa      	ldr	r2, [r7, #12]
 800cd5a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	685a      	ldr	r2, [r3, #4]
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	693a      	ldr	r2, [r7, #16]
 800cd68:	621a      	str	r2, [r3, #32]
}
 800cd6a:	bf00      	nop
 800cd6c:	371c      	adds	r7, #28
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd74:	4770      	bx	lr
 800cd76:	bf00      	nop
 800cd78:	40012c00 	.word	0x40012c00
 800cd7c:	40013400 	.word	0x40013400
 800cd80:	40014000 	.word	0x40014000
 800cd84:	40014400 	.word	0x40014400
 800cd88:	40014800 	.word	0x40014800

0800cd8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cd8c:	b480      	push	{r7}
 800cd8e:	b087      	sub	sp, #28
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	60f8      	str	r0, [r7, #12]
 800cd94:	60b9      	str	r1, [r7, #8]
 800cd96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	6a1b      	ldr	r3, [r3, #32]
 800cd9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	6a1b      	ldr	r3, [r3, #32]
 800cda2:	f023 0201 	bic.w	r2, r3, #1
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	699b      	ldr	r3, [r3, #24]
 800cdae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cdb0:	693b      	ldr	r3, [r7, #16]
 800cdb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cdb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	011b      	lsls	r3, r3, #4
 800cdbc:	693a      	ldr	r2, [r7, #16]
 800cdbe:	4313      	orrs	r3, r2
 800cdc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	f023 030a 	bic.w	r3, r3, #10
 800cdc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cdca:	697a      	ldr	r2, [r7, #20]
 800cdcc:	68bb      	ldr	r3, [r7, #8]
 800cdce:	4313      	orrs	r3, r2
 800cdd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	693a      	ldr	r2, [r7, #16]
 800cdd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	697a      	ldr	r2, [r7, #20]
 800cddc:	621a      	str	r2, [r3, #32]
}
 800cdde:	bf00      	nop
 800cde0:	371c      	adds	r7, #28
 800cde2:	46bd      	mov	sp, r7
 800cde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde8:	4770      	bx	lr

0800cdea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cdea:	b480      	push	{r7}
 800cdec:	b087      	sub	sp, #28
 800cdee:	af00      	add	r7, sp, #0
 800cdf0:	60f8      	str	r0, [r7, #12]
 800cdf2:	60b9      	str	r1, [r7, #8]
 800cdf4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	6a1b      	ldr	r3, [r3, #32]
 800cdfa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	6a1b      	ldr	r3, [r3, #32]
 800ce00:	f023 0210 	bic.w	r2, r3, #16
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	699b      	ldr	r3, [r3, #24]
 800ce0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ce14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	031b      	lsls	r3, r3, #12
 800ce1a:	693a      	ldr	r2, [r7, #16]
 800ce1c:	4313      	orrs	r3, r2
 800ce1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ce20:	697b      	ldr	r3, [r7, #20]
 800ce22:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ce26:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ce28:	68bb      	ldr	r3, [r7, #8]
 800ce2a:	011b      	lsls	r3, r3, #4
 800ce2c:	697a      	ldr	r2, [r7, #20]
 800ce2e:	4313      	orrs	r3, r2
 800ce30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	693a      	ldr	r2, [r7, #16]
 800ce36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	697a      	ldr	r2, [r7, #20]
 800ce3c:	621a      	str	r2, [r3, #32]
}
 800ce3e:	bf00      	nop
 800ce40:	371c      	adds	r7, #28
 800ce42:	46bd      	mov	sp, r7
 800ce44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce48:	4770      	bx	lr

0800ce4a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ce4a:	b480      	push	{r7}
 800ce4c:	b085      	sub	sp, #20
 800ce4e:	af00      	add	r7, sp, #0
 800ce50:	6078      	str	r0, [r7, #4]
 800ce52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	689b      	ldr	r3, [r3, #8]
 800ce58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800ce60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ce66:	683a      	ldr	r2, [r7, #0]
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	4313      	orrs	r3, r2
 800ce6c:	f043 0307 	orr.w	r3, r3, #7
 800ce70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	68fa      	ldr	r2, [r7, #12]
 800ce76:	609a      	str	r2, [r3, #8]
}
 800ce78:	bf00      	nop
 800ce7a:	3714      	adds	r7, #20
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce82:	4770      	bx	lr

0800ce84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ce84:	b480      	push	{r7}
 800ce86:	b087      	sub	sp, #28
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	60f8      	str	r0, [r7, #12]
 800ce8c:	60b9      	str	r1, [r7, #8]
 800ce8e:	607a      	str	r2, [r7, #4]
 800ce90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	689b      	ldr	r3, [r3, #8]
 800ce96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ce9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	021a      	lsls	r2, r3, #8
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	431a      	orrs	r2, r3
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	4313      	orrs	r3, r2
 800ceac:	697a      	ldr	r2, [r7, #20]
 800ceae:	4313      	orrs	r3, r2
 800ceb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	697a      	ldr	r2, [r7, #20]
 800ceb6:	609a      	str	r2, [r3, #8]
}
 800ceb8:	bf00      	nop
 800ceba:	371c      	adds	r7, #28
 800cebc:	46bd      	mov	sp, r7
 800cebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec2:	4770      	bx	lr

0800cec4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cec4:	b480      	push	{r7}
 800cec6:	b087      	sub	sp, #28
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	60f8      	str	r0, [r7, #12]
 800cecc:	60b9      	str	r1, [r7, #8]
 800cece:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	f003 031f 	and.w	r3, r3, #31
 800ced6:	2201      	movs	r2, #1
 800ced8:	fa02 f303 	lsl.w	r3, r2, r3
 800cedc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	6a1a      	ldr	r2, [r3, #32]
 800cee2:	697b      	ldr	r3, [r7, #20]
 800cee4:	43db      	mvns	r3, r3
 800cee6:	401a      	ands	r2, r3
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	6a1a      	ldr	r2, [r3, #32]
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	f003 031f 	and.w	r3, r3, #31
 800cef6:	6879      	ldr	r1, [r7, #4]
 800cef8:	fa01 f303 	lsl.w	r3, r1, r3
 800cefc:	431a      	orrs	r2, r3
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	621a      	str	r2, [r3, #32]
}
 800cf02:	bf00      	nop
 800cf04:	371c      	adds	r7, #28
 800cf06:	46bd      	mov	sp, r7
 800cf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0c:	4770      	bx	lr
	...

0800cf10 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800cf10:	b480      	push	{r7}
 800cf12:	b083      	sub	sp, #12
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	4a26      	ldr	r2, [pc, #152]	@ (800cfb4 <TIM_ResetCallback+0xa4>)
 800cf1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	4a25      	ldr	r2, [pc, #148]	@ (800cfb8 <TIM_ResetCallback+0xa8>)
 800cf24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	4a24      	ldr	r2, [pc, #144]	@ (800cfbc <TIM_ResetCallback+0xac>)
 800cf2c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	4a23      	ldr	r2, [pc, #140]	@ (800cfc0 <TIM_ResetCallback+0xb0>)
 800cf34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	4a22      	ldr	r2, [pc, #136]	@ (800cfc4 <TIM_ResetCallback+0xb4>)
 800cf3c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	4a21      	ldr	r2, [pc, #132]	@ (800cfc8 <TIM_ResetCallback+0xb8>)
 800cf44:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	4a20      	ldr	r2, [pc, #128]	@ (800cfcc <TIM_ResetCallback+0xbc>)
 800cf4c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	4a1f      	ldr	r2, [pc, #124]	@ (800cfd0 <TIM_ResetCallback+0xc0>)
 800cf54:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	4a1e      	ldr	r2, [pc, #120]	@ (800cfd4 <TIM_ResetCallback+0xc4>)
 800cf5c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	4a1d      	ldr	r2, [pc, #116]	@ (800cfd8 <TIM_ResetCallback+0xc8>)
 800cf64:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	4a1c      	ldr	r2, [pc, #112]	@ (800cfdc <TIM_ResetCallback+0xcc>)
 800cf6c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	4a1b      	ldr	r2, [pc, #108]	@ (800cfe0 <TIM_ResetCallback+0xd0>)
 800cf74:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	4a1a      	ldr	r2, [pc, #104]	@ (800cfe4 <TIM_ResetCallback+0xd4>)
 800cf7c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	4a19      	ldr	r2, [pc, #100]	@ (800cfe8 <TIM_ResetCallback+0xd8>)
 800cf84:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	4a18      	ldr	r2, [pc, #96]	@ (800cfec <TIM_ResetCallback+0xdc>)
 800cf8c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	4a17      	ldr	r2, [pc, #92]	@ (800cff0 <TIM_ResetCallback+0xe0>)
 800cf94:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	4a16      	ldr	r2, [pc, #88]	@ (800cff4 <TIM_ResetCallback+0xe4>)
 800cf9c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	4a15      	ldr	r2, [pc, #84]	@ (800cff8 <TIM_ResetCallback+0xe8>)
 800cfa4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800cfa8:	bf00      	nop
 800cfaa:	370c      	adds	r7, #12
 800cfac:	46bd      	mov	sp, r7
 800cfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb2:	4770      	bx	lr
 800cfb4:	08004f01 	.word	0x08004f01
 800cfb8:	0800c2f5 	.word	0x0800c2f5
 800cfbc:	0800c36d 	.word	0x0800c36d
 800cfc0:	0800c381 	.word	0x0800c381
 800cfc4:	0800c31d 	.word	0x0800c31d
 800cfc8:	0800c331 	.word	0x0800c331
 800cfcc:	0800c309 	.word	0x0800c309
 800cfd0:	0800c345 	.word	0x0800c345
 800cfd4:	0800c359 	.word	0x0800c359
 800cfd8:	0800c395 	.word	0x0800c395
 800cfdc:	0800d101 	.word	0x0800d101
 800cfe0:	0800d115 	.word	0x0800d115
 800cfe4:	0800d129 	.word	0x0800d129
 800cfe8:	0800d13d 	.word	0x0800d13d
 800cfec:	0800d151 	.word	0x0800d151
 800cff0:	0800d165 	.word	0x0800d165
 800cff4:	0800d179 	.word	0x0800d179
 800cff8:	0800d18d 	.word	0x0800d18d

0800cffc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cffc:	b480      	push	{r7}
 800cffe:	b085      	sub	sp, #20
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d00c:	2b01      	cmp	r3, #1
 800d00e:	d101      	bne.n	800d014 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d010:	2302      	movs	r3, #2
 800d012:	e065      	b.n	800d0e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2201      	movs	r2, #1
 800d018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2202      	movs	r2, #2
 800d020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	685b      	ldr	r3, [r3, #4]
 800d02a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	689b      	ldr	r3, [r3, #8]
 800d032:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	4a2c      	ldr	r2, [pc, #176]	@ (800d0ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d03a:	4293      	cmp	r3, r2
 800d03c:	d004      	beq.n	800d048 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	4a2b      	ldr	r2, [pc, #172]	@ (800d0f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d044:	4293      	cmp	r3, r2
 800d046:	d108      	bne.n	800d05a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d04e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	685b      	ldr	r3, [r3, #4]
 800d054:	68fa      	ldr	r2, [r7, #12]
 800d056:	4313      	orrs	r3, r2
 800d058:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800d060:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d064:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	68fa      	ldr	r2, [r7, #12]
 800d06c:	4313      	orrs	r3, r2
 800d06e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	68fa      	ldr	r2, [r7, #12]
 800d076:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	4a1b      	ldr	r2, [pc, #108]	@ (800d0ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d07e:	4293      	cmp	r3, r2
 800d080:	d018      	beq.n	800d0b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d08a:	d013      	beq.n	800d0b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4a18      	ldr	r2, [pc, #96]	@ (800d0f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800d092:	4293      	cmp	r3, r2
 800d094:	d00e      	beq.n	800d0b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	4a17      	ldr	r2, [pc, #92]	@ (800d0f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d009      	beq.n	800d0b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	4a12      	ldr	r2, [pc, #72]	@ (800d0f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d004      	beq.n	800d0b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	4a13      	ldr	r2, [pc, #76]	@ (800d0fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d0b0:	4293      	cmp	r3, r2
 800d0b2:	d10c      	bne.n	800d0ce <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d0ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	689b      	ldr	r3, [r3, #8]
 800d0c0:	68ba      	ldr	r2, [r7, #8]
 800d0c2:	4313      	orrs	r3, r2
 800d0c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	68ba      	ldr	r2, [r7, #8]
 800d0cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2201      	movs	r2, #1
 800d0d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d0de:	2300      	movs	r3, #0
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3714      	adds	r7, #20
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ea:	4770      	bx	lr
 800d0ec:	40012c00 	.word	0x40012c00
 800d0f0:	40013400 	.word	0x40013400
 800d0f4:	40000400 	.word	0x40000400
 800d0f8:	40000800 	.word	0x40000800
 800d0fc:	40014000 	.word	0x40014000

0800d100 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d100:	b480      	push	{r7}
 800d102:	b083      	sub	sp, #12
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d108:	bf00      	nop
 800d10a:	370c      	adds	r7, #12
 800d10c:	46bd      	mov	sp, r7
 800d10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d112:	4770      	bx	lr

0800d114 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800d114:	b480      	push	{r7}
 800d116:	b083      	sub	sp, #12
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800d11c:	bf00      	nop
 800d11e:	370c      	adds	r7, #12
 800d120:	46bd      	mov	sp, r7
 800d122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d126:	4770      	bx	lr

0800d128 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d128:	b480      	push	{r7}
 800d12a:	b083      	sub	sp, #12
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d130:	bf00      	nop
 800d132:	370c      	adds	r7, #12
 800d134:	46bd      	mov	sp, r7
 800d136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13a:	4770      	bx	lr

0800d13c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d13c:	b480      	push	{r7}
 800d13e:	b083      	sub	sp, #12
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d144:	bf00      	nop
 800d146:	370c      	adds	r7, #12
 800d148:	46bd      	mov	sp, r7
 800d14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14e:	4770      	bx	lr

0800d150 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800d150:	b480      	push	{r7}
 800d152:	b083      	sub	sp, #12
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800d158:	bf00      	nop
 800d15a:	370c      	adds	r7, #12
 800d15c:	46bd      	mov	sp, r7
 800d15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d162:	4770      	bx	lr

0800d164 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800d164:	b480      	push	{r7}
 800d166:	b083      	sub	sp, #12
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800d16c:	bf00      	nop
 800d16e:	370c      	adds	r7, #12
 800d170:	46bd      	mov	sp, r7
 800d172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d176:	4770      	bx	lr

0800d178 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800d178:	b480      	push	{r7}
 800d17a:	b083      	sub	sp, #12
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800d180:	bf00      	nop
 800d182:	370c      	adds	r7, #12
 800d184:	46bd      	mov	sp, r7
 800d186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18a:	4770      	bx	lr

0800d18c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800d18c:	b480      	push	{r7}
 800d18e:	b083      	sub	sp, #12
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800d194:	bf00      	nop
 800d196:	370c      	adds	r7, #12
 800d198:	46bd      	mov	sp, r7
 800d19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19e:	4770      	bx	lr

0800d1a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b082      	sub	sp, #8
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d101      	bne.n	800d1b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	e042      	b.n	800d238 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d106      	bne.n	800d1ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2200      	movs	r2, #0
 800d1c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d1c4:	6878      	ldr	r0, [r7, #4]
 800d1c6:	f7f8 fe75 	bl	8005eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2224      	movs	r2, #36	@ 0x24
 800d1ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	681a      	ldr	r2, [r3, #0]
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f022 0201 	bic.w	r2, r2, #1
 800d1e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d002      	beq.n	800d1f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f000 ff30 	bl	800e050 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f000 fc61 	bl	800dab8 <UART_SetConfig>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	2b01      	cmp	r3, #1
 800d1fa:	d101      	bne.n	800d200 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	e01b      	b.n	800d238 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	685a      	ldr	r2, [r3, #4]
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d20e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	689a      	ldr	r2, [r3, #8]
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d21e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	681a      	ldr	r2, [r3, #0]
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	f042 0201 	orr.w	r2, r2, #1
 800d22e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	f000 ffaf 	bl	800e194 <UART_CheckIdleState>
 800d236:	4603      	mov	r3, r0
}
 800d238:	4618      	mov	r0, r3
 800d23a:	3708      	adds	r7, #8
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}

0800d240 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b08a      	sub	sp, #40	@ 0x28
 800d244:	af02      	add	r7, sp, #8
 800d246:	60f8      	str	r0, [r7, #12]
 800d248:	60b9      	str	r1, [r7, #8]
 800d24a:	603b      	str	r3, [r7, #0]
 800d24c:	4613      	mov	r3, r2
 800d24e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d256:	2b20      	cmp	r3, #32
 800d258:	d17b      	bne.n	800d352 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d002      	beq.n	800d266 <HAL_UART_Transmit+0x26>
 800d260:	88fb      	ldrh	r3, [r7, #6]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d101      	bne.n	800d26a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d266:	2301      	movs	r3, #1
 800d268:	e074      	b.n	800d354 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	2200      	movs	r2, #0
 800d26e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	2221      	movs	r2, #33	@ 0x21
 800d276:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d27a:	f7f9 fd81 	bl	8006d80 <HAL_GetTick>
 800d27e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	88fa      	ldrh	r2, [r7, #6]
 800d284:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	88fa      	ldrh	r2, [r7, #6]
 800d28c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	689b      	ldr	r3, [r3, #8]
 800d294:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d298:	d108      	bne.n	800d2ac <HAL_UART_Transmit+0x6c>
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	691b      	ldr	r3, [r3, #16]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d104      	bne.n	800d2ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	61bb      	str	r3, [r7, #24]
 800d2aa:	e003      	b.n	800d2b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d2b4:	e030      	b.n	800d318 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	9300      	str	r3, [sp, #0]
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	2200      	movs	r2, #0
 800d2be:	2180      	movs	r1, #128	@ 0x80
 800d2c0:	68f8      	ldr	r0, [r7, #12]
 800d2c2:	f001 f811 	bl	800e2e8 <UART_WaitOnFlagUntilTimeout>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d005      	beq.n	800d2d8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	2220      	movs	r2, #32
 800d2d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800d2d4:	2303      	movs	r3, #3
 800d2d6:	e03d      	b.n	800d354 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d2d8:	69fb      	ldr	r3, [r7, #28]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d10b      	bne.n	800d2f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d2de:	69bb      	ldr	r3, [r7, #24]
 800d2e0:	881b      	ldrh	r3, [r3, #0]
 800d2e2:	461a      	mov	r2, r3
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d2ec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800d2ee:	69bb      	ldr	r3, [r7, #24]
 800d2f0:	3302      	adds	r3, #2
 800d2f2:	61bb      	str	r3, [r7, #24]
 800d2f4:	e007      	b.n	800d306 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d2f6:	69fb      	ldr	r3, [r7, #28]
 800d2f8:	781a      	ldrb	r2, [r3, #0]
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800d300:	69fb      	ldr	r3, [r7, #28]
 800d302:	3301      	adds	r3, #1
 800d304:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d30c:	b29b      	uxth	r3, r3
 800d30e:	3b01      	subs	r3, #1
 800d310:	b29a      	uxth	r2, r3
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d31e:	b29b      	uxth	r3, r3
 800d320:	2b00      	cmp	r3, #0
 800d322:	d1c8      	bne.n	800d2b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	9300      	str	r3, [sp, #0]
 800d328:	697b      	ldr	r3, [r7, #20]
 800d32a:	2200      	movs	r2, #0
 800d32c:	2140      	movs	r1, #64	@ 0x40
 800d32e:	68f8      	ldr	r0, [r7, #12]
 800d330:	f000 ffda 	bl	800e2e8 <UART_WaitOnFlagUntilTimeout>
 800d334:	4603      	mov	r3, r0
 800d336:	2b00      	cmp	r3, #0
 800d338:	d005      	beq.n	800d346 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	2220      	movs	r2, #32
 800d33e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800d342:	2303      	movs	r3, #3
 800d344:	e006      	b.n	800d354 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	2220      	movs	r2, #32
 800d34a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800d34e:	2300      	movs	r3, #0
 800d350:	e000      	b.n	800d354 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d352:	2302      	movs	r3, #2
  }
}
 800d354:	4618      	mov	r0, r3
 800d356:	3720      	adds	r7, #32
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}

0800d35c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b08a      	sub	sp, #40	@ 0x28
 800d360:	af00      	add	r7, sp, #0
 800d362:	60f8      	str	r0, [r7, #12]
 800d364:	60b9      	str	r1, [r7, #8]
 800d366:	4613      	mov	r3, r2
 800d368:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d370:	2b20      	cmp	r3, #32
 800d372:	d137      	bne.n	800d3e4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d002      	beq.n	800d380 <HAL_UART_Receive_IT+0x24>
 800d37a:	88fb      	ldrh	r3, [r7, #6]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d101      	bne.n	800d384 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800d380:	2301      	movs	r3, #1
 800d382:	e030      	b.n	800d3e6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	2200      	movs	r2, #0
 800d388:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	4a18      	ldr	r2, [pc, #96]	@ (800d3f0 <HAL_UART_Receive_IT+0x94>)
 800d390:	4293      	cmp	r3, r2
 800d392:	d01f      	beq.n	800d3d4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	685b      	ldr	r3, [r3, #4]
 800d39a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d018      	beq.n	800d3d4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3a8:	697b      	ldr	r3, [r7, #20]
 800d3aa:	e853 3f00 	ldrex	r3, [r3]
 800d3ae:	613b      	str	r3, [r7, #16]
   return(result);
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d3b6:	627b      	str	r3, [r7, #36]	@ 0x24
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	461a      	mov	r2, r3
 800d3be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3c0:	623b      	str	r3, [r7, #32]
 800d3c2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3c4:	69f9      	ldr	r1, [r7, #28]
 800d3c6:	6a3a      	ldr	r2, [r7, #32]
 800d3c8:	e841 2300 	strex	r3, r2, [r1]
 800d3cc:	61bb      	str	r3, [r7, #24]
   return(result);
 800d3ce:	69bb      	ldr	r3, [r7, #24]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d1e6      	bne.n	800d3a2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d3d4:	88fb      	ldrh	r3, [r7, #6]
 800d3d6:	461a      	mov	r2, r3
 800d3d8:	68b9      	ldr	r1, [r7, #8]
 800d3da:	68f8      	ldr	r0, [r7, #12]
 800d3dc:	f000 fff2 	bl	800e3c4 <UART_Start_Receive_IT>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	e000      	b.n	800d3e6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d3e4:	2302      	movs	r3, #2
  }
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3728      	adds	r7, #40	@ 0x28
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}
 800d3ee:	bf00      	nop
 800d3f0:	40008000 	.word	0x40008000

0800d3f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b0ba      	sub	sp, #232	@ 0xe8
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	69db      	ldr	r3, [r3, #28]
 800d402:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	689b      	ldr	r3, [r3, #8]
 800d416:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d41a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800d41e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800d422:	4013      	ands	r3, r2
 800d424:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800d428:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d11b      	bne.n	800d468 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d434:	f003 0320 	and.w	r3, r3, #32
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d015      	beq.n	800d468 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d43c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d440:	f003 0320 	and.w	r3, r3, #32
 800d444:	2b00      	cmp	r3, #0
 800d446:	d105      	bne.n	800d454 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d448:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d44c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d450:	2b00      	cmp	r3, #0
 800d452:	d009      	beq.n	800d468 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d458:	2b00      	cmp	r3, #0
 800d45a:	f000 8300 	beq.w	800da5e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d462:	6878      	ldr	r0, [r7, #4]
 800d464:	4798      	blx	r3
      }
      return;
 800d466:	e2fa      	b.n	800da5e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d468:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	f000 8123 	beq.w	800d6b8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d472:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d476:	4b8d      	ldr	r3, [pc, #564]	@ (800d6ac <HAL_UART_IRQHandler+0x2b8>)
 800d478:	4013      	ands	r3, r2
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d106      	bne.n	800d48c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d47e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800d482:	4b8b      	ldr	r3, [pc, #556]	@ (800d6b0 <HAL_UART_IRQHandler+0x2bc>)
 800d484:	4013      	ands	r3, r2
 800d486:	2b00      	cmp	r3, #0
 800d488:	f000 8116 	beq.w	800d6b8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d48c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d490:	f003 0301 	and.w	r3, r3, #1
 800d494:	2b00      	cmp	r3, #0
 800d496:	d011      	beq.n	800d4bc <HAL_UART_IRQHandler+0xc8>
 800d498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d49c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d00b      	beq.n	800d4bc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	2201      	movs	r2, #1
 800d4aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d4b2:	f043 0201 	orr.w	r2, r3, #1
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d4bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d4c0:	f003 0302 	and.w	r3, r3, #2
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d011      	beq.n	800d4ec <HAL_UART_IRQHandler+0xf8>
 800d4c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d4cc:	f003 0301 	and.w	r3, r3, #1
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d00b      	beq.n	800d4ec <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	2202      	movs	r2, #2
 800d4da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d4e2:	f043 0204 	orr.w	r2, r3, #4
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d4ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d4f0:	f003 0304 	and.w	r3, r3, #4
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d011      	beq.n	800d51c <HAL_UART_IRQHandler+0x128>
 800d4f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d4fc:	f003 0301 	and.w	r3, r3, #1
 800d500:	2b00      	cmp	r3, #0
 800d502:	d00b      	beq.n	800d51c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	2204      	movs	r2, #4
 800d50a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d512:	f043 0202 	orr.w	r2, r3, #2
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d51c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d520:	f003 0308 	and.w	r3, r3, #8
 800d524:	2b00      	cmp	r3, #0
 800d526:	d017      	beq.n	800d558 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d52c:	f003 0320 	and.w	r3, r3, #32
 800d530:	2b00      	cmp	r3, #0
 800d532:	d105      	bne.n	800d540 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d534:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d538:	4b5c      	ldr	r3, [pc, #368]	@ (800d6ac <HAL_UART_IRQHandler+0x2b8>)
 800d53a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d00b      	beq.n	800d558 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	2208      	movs	r2, #8
 800d546:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d54e:	f043 0208 	orr.w	r2, r3, #8
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d55c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d560:	2b00      	cmp	r3, #0
 800d562:	d012      	beq.n	800d58a <HAL_UART_IRQHandler+0x196>
 800d564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d568:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d00c      	beq.n	800d58a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d578:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d580:	f043 0220 	orr.w	r2, r3, #32
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d590:	2b00      	cmp	r3, #0
 800d592:	f000 8266 	beq.w	800da62 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d59a:	f003 0320 	and.w	r3, r3, #32
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d013      	beq.n	800d5ca <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d5a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d5a6:	f003 0320 	and.w	r3, r3, #32
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d105      	bne.n	800d5ba <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d5ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d5b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d007      	beq.n	800d5ca <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d003      	beq.n	800d5ca <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d5d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	689b      	ldr	r3, [r3, #8]
 800d5da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5de:	2b40      	cmp	r3, #64	@ 0x40
 800d5e0:	d005      	beq.n	800d5ee <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d5e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d5e6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d054      	beq.n	800d698 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f001 f80a 	bl	800e608 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	689b      	ldr	r3, [r3, #8]
 800d5fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5fe:	2b40      	cmp	r3, #64	@ 0x40
 800d600:	d146      	bne.n	800d690 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	3308      	adds	r3, #8
 800d608:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d60c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d610:	e853 3f00 	ldrex	r3, [r3]
 800d614:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d618:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d61c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d620:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	3308      	adds	r3, #8
 800d62a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d62e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d632:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d636:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d63a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d63e:	e841 2300 	strex	r3, r2, [r1]
 800d642:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d646:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d1d9      	bne.n	800d602 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d654:	2b00      	cmp	r3, #0
 800d656:	d017      	beq.n	800d688 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d65e:	4a15      	ldr	r2, [pc, #84]	@ (800d6b4 <HAL_UART_IRQHandler+0x2c0>)
 800d660:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d668:	4618      	mov	r0, r3
 800d66a:	f7fb fe33 	bl	80092d4 <HAL_DMA_Abort_IT>
 800d66e:	4603      	mov	r3, r0
 800d670:	2b00      	cmp	r3, #0
 800d672:	d019      	beq.n	800d6a8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d67a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d67c:	687a      	ldr	r2, [r7, #4]
 800d67e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800d682:	4610      	mov	r0, r2
 800d684:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d686:	e00f      	b.n	800d6a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d688:	6878      	ldr	r0, [r7, #4]
 800d68a:	f000 f9ff 	bl	800da8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d68e:	e00b      	b.n	800d6a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f000 f9fb 	bl	800da8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d696:	e007      	b.n	800d6a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	f000 f9f7 	bl	800da8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800d6a6:	e1dc      	b.n	800da62 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6a8:	bf00      	nop
    return;
 800d6aa:	e1da      	b.n	800da62 <HAL_UART_IRQHandler+0x66e>
 800d6ac:	10000001 	.word	0x10000001
 800d6b0:	04000120 	.word	0x04000120
 800d6b4:	0800e6d5 	.word	0x0800e6d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d6bc:	2b01      	cmp	r3, #1
 800d6be:	f040 8170 	bne.w	800d9a2 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d6c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d6c6:	f003 0310 	and.w	r3, r3, #16
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	f000 8169 	beq.w	800d9a2 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d6d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d6d4:	f003 0310 	and.w	r3, r3, #16
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	f000 8162 	beq.w	800d9a2 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	2210      	movs	r2, #16
 800d6e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	689b      	ldr	r3, [r3, #8]
 800d6ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6f0:	2b40      	cmp	r3, #64	@ 0x40
 800d6f2:	f040 80d8 	bne.w	800d8a6 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	685b      	ldr	r3, [r3, #4]
 800d700:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d704:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d708:	2b00      	cmp	r3, #0
 800d70a:	f000 80af 	beq.w	800d86c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d714:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d718:	429a      	cmp	r2, r3
 800d71a:	f080 80a7 	bcs.w	800d86c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d724:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	f003 0320 	and.w	r3, r3, #32
 800d736:	2b00      	cmp	r3, #0
 800d738:	f040 8087 	bne.w	800d84a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d744:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d748:	e853 3f00 	ldrex	r3, [r3]
 800d74c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d750:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d754:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d758:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	461a      	mov	r2, r3
 800d762:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d766:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d76a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d76e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d772:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d776:	e841 2300 	strex	r3, r2, [r1]
 800d77a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d77e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d782:	2b00      	cmp	r3, #0
 800d784:	d1da      	bne.n	800d73c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	3308      	adds	r3, #8
 800d78c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d78e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d790:	e853 3f00 	ldrex	r3, [r3]
 800d794:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d796:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d798:	f023 0301 	bic.w	r3, r3, #1
 800d79c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	3308      	adds	r3, #8
 800d7a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d7aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d7ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d7b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d7b6:	e841 2300 	strex	r3, r2, [r1]
 800d7ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d7bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d1e1      	bne.n	800d786 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	3308      	adds	r3, #8
 800d7c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d7cc:	e853 3f00 	ldrex	r3, [r3]
 800d7d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d7d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d7d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d7d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	3308      	adds	r3, #8
 800d7e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d7e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d7e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d7ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d7ee:	e841 2300 	strex	r3, r2, [r1]
 800d7f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d7f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d1e3      	bne.n	800d7c2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2220      	movs	r2, #32
 800d7fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2200      	movs	r2, #0
 800d806:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d80e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d810:	e853 3f00 	ldrex	r3, [r3]
 800d814:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d816:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d818:	f023 0310 	bic.w	r3, r3, #16
 800d81c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	461a      	mov	r2, r3
 800d826:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d82a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d82c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d82e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d830:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d832:	e841 2300 	strex	r3, r2, [r1]
 800d836:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d838:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d1e4      	bne.n	800d808 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d844:	4618      	mov	r0, r3
 800d846:	f7fb fcec 	bl	8009222 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2202      	movs	r2, #2
 800d84e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d85c:	b29b      	uxth	r3, r3
 800d85e:	1ad3      	subs	r3, r2, r3
 800d860:	b29b      	uxth	r3, r3
 800d862:	4619      	mov	r1, r3
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f000 f91b 	bl	800daa0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800d86a:	e0fc      	b.n	800da66 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d872:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d876:	429a      	cmp	r2, r3
 800d878:	f040 80f5 	bne.w	800da66 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	f003 0320 	and.w	r3, r3, #32
 800d88a:	2b20      	cmp	r3, #32
 800d88c:	f040 80eb 	bne.w	800da66 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2202      	movs	r2, #2
 800d894:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d89c:	4619      	mov	r1, r3
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f000 f8fe 	bl	800daa0 <HAL_UARTEx_RxEventCallback>
      return;
 800d8a4:	e0df      	b.n	800da66 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d8b2:	b29b      	uxth	r3, r3
 800d8b4:	1ad3      	subs	r3, r2, r3
 800d8b6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d8c0:	b29b      	uxth	r3, r3
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	f000 80d1 	beq.w	800da6a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800d8c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	f000 80cc 	beq.w	800da6a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8da:	e853 3f00 	ldrex	r3, [r3]
 800d8de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d8e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d8e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	461a      	mov	r2, r3
 800d8f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d8f4:	647b      	str	r3, [r7, #68]	@ 0x44
 800d8f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d8fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d8fc:	e841 2300 	strex	r3, r2, [r1]
 800d900:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d904:	2b00      	cmp	r3, #0
 800d906:	d1e4      	bne.n	800d8d2 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	3308      	adds	r3, #8
 800d90e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d912:	e853 3f00 	ldrex	r3, [r3]
 800d916:	623b      	str	r3, [r7, #32]
   return(result);
 800d918:	6a3b      	ldr	r3, [r7, #32]
 800d91a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d91e:	f023 0301 	bic.w	r3, r3, #1
 800d922:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	3308      	adds	r3, #8
 800d92c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d930:	633a      	str	r2, [r7, #48]	@ 0x30
 800d932:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d934:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d936:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d938:	e841 2300 	strex	r3, r2, [r1]
 800d93c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d93e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d940:	2b00      	cmp	r3, #0
 800d942:	d1e1      	bne.n	800d908 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2220      	movs	r2, #32
 800d948:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2200      	movs	r2, #0
 800d950:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	2200      	movs	r2, #0
 800d956:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d95e:	693b      	ldr	r3, [r7, #16]
 800d960:	e853 3f00 	ldrex	r3, [r3]
 800d964:	60fb      	str	r3, [r7, #12]
   return(result);
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	f023 0310 	bic.w	r3, r3, #16
 800d96c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	461a      	mov	r2, r3
 800d976:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d97a:	61fb      	str	r3, [r7, #28]
 800d97c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d97e:	69b9      	ldr	r1, [r7, #24]
 800d980:	69fa      	ldr	r2, [r7, #28]
 800d982:	e841 2300 	strex	r3, r2, [r1]
 800d986:	617b      	str	r3, [r7, #20]
   return(result);
 800d988:	697b      	ldr	r3, [r7, #20]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d1e4      	bne.n	800d958 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	2202      	movs	r2, #2
 800d992:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d994:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d998:	4619      	mov	r1, r3
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f000 f880 	bl	800daa0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d9a0:	e063      	b.n	800da6a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d9a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d9a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d00e      	beq.n	800d9cc <HAL_UART_IRQHandler+0x5d8>
 800d9ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d9b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d008      	beq.n	800d9cc <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d9c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d9c4:	6878      	ldr	r0, [r7, #4]
 800d9c6:	f001 fbe7 	bl	800f198 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d9ca:	e051      	b.n	800da70 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d9cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d9d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d014      	beq.n	800da02 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d9d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d9dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d105      	bne.n	800d9f0 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d9e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d9e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d008      	beq.n	800da02 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d03a      	beq.n	800da6e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	4798      	blx	r3
    }
    return;
 800da00:	e035      	b.n	800da6e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800da02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d009      	beq.n	800da22 <HAL_UART_IRQHandler+0x62e>
 800da0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800da12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da16:	2b00      	cmp	r3, #0
 800da18:	d003      	beq.n	800da22 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f000 fe70 	bl	800e700 <UART_EndTransmit_IT>
    return;
 800da20:	e026      	b.n	800da70 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800da22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d009      	beq.n	800da42 <HAL_UART_IRQHandler+0x64e>
 800da2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800da32:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800da36:	2b00      	cmp	r3, #0
 800da38:	d003      	beq.n	800da42 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	f001 fbc0 	bl	800f1c0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800da40:	e016      	b.n	800da70 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800da42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da46:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d010      	beq.n	800da70 <HAL_UART_IRQHandler+0x67c>
 800da4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800da52:	2b00      	cmp	r3, #0
 800da54:	da0c      	bge.n	800da70 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800da56:	6878      	ldr	r0, [r7, #4]
 800da58:	f001 fba8 	bl	800f1ac <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800da5c:	e008      	b.n	800da70 <HAL_UART_IRQHandler+0x67c>
      return;
 800da5e:	bf00      	nop
 800da60:	e006      	b.n	800da70 <HAL_UART_IRQHandler+0x67c>
    return;
 800da62:	bf00      	nop
 800da64:	e004      	b.n	800da70 <HAL_UART_IRQHandler+0x67c>
      return;
 800da66:	bf00      	nop
 800da68:	e002      	b.n	800da70 <HAL_UART_IRQHandler+0x67c>
      return;
 800da6a:	bf00      	nop
 800da6c:	e000      	b.n	800da70 <HAL_UART_IRQHandler+0x67c>
    return;
 800da6e:	bf00      	nop
  }
}
 800da70:	37e8      	adds	r7, #232	@ 0xe8
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}
 800da76:	bf00      	nop

0800da78 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800da78:	b480      	push	{r7}
 800da7a:	b083      	sub	sp, #12
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800da80:	bf00      	nop
 800da82:	370c      	adds	r7, #12
 800da84:	46bd      	mov	sp, r7
 800da86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8a:	4770      	bx	lr

0800da8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800da8c:	b480      	push	{r7}
 800da8e:	b083      	sub	sp, #12
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800da94:	bf00      	nop
 800da96:	370c      	adds	r7, #12
 800da98:	46bd      	mov	sp, r7
 800da9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9e:	4770      	bx	lr

0800daa0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800daa0:	b480      	push	{r7}
 800daa2:	b083      	sub	sp, #12
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
 800daa8:	460b      	mov	r3, r1
 800daaa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800daac:	bf00      	nop
 800daae:	370c      	adds	r7, #12
 800dab0:	46bd      	mov	sp, r7
 800dab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab6:	4770      	bx	lr

0800dab8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dabc:	b08c      	sub	sp, #48	@ 0x30
 800dabe:	af00      	add	r7, sp, #0
 800dac0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dac2:	2300      	movs	r3, #0
 800dac4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dac8:	697b      	ldr	r3, [r7, #20]
 800daca:	689a      	ldr	r2, [r3, #8]
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	691b      	ldr	r3, [r3, #16]
 800dad0:	431a      	orrs	r2, r3
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	695b      	ldr	r3, [r3, #20]
 800dad6:	431a      	orrs	r2, r3
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	69db      	ldr	r3, [r3, #28]
 800dadc:	4313      	orrs	r3, r2
 800dade:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	681a      	ldr	r2, [r3, #0]
 800dae6:	4bab      	ldr	r3, [pc, #684]	@ (800dd94 <UART_SetConfig+0x2dc>)
 800dae8:	4013      	ands	r3, r2
 800daea:	697a      	ldr	r2, [r7, #20]
 800daec:	6812      	ldr	r2, [r2, #0]
 800daee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800daf0:	430b      	orrs	r3, r1
 800daf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800daf4:	697b      	ldr	r3, [r7, #20]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	685b      	ldr	r3, [r3, #4]
 800dafa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800dafe:	697b      	ldr	r3, [r7, #20]
 800db00:	68da      	ldr	r2, [r3, #12]
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	430a      	orrs	r2, r1
 800db08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800db0a:	697b      	ldr	r3, [r7, #20]
 800db0c:	699b      	ldr	r3, [r3, #24]
 800db0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800db10:	697b      	ldr	r3, [r7, #20]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	4aa0      	ldr	r2, [pc, #640]	@ (800dd98 <UART_SetConfig+0x2e0>)
 800db16:	4293      	cmp	r3, r2
 800db18:	d004      	beq.n	800db24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	6a1b      	ldr	r3, [r3, #32]
 800db1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800db20:	4313      	orrs	r3, r2
 800db22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800db24:	697b      	ldr	r3, [r7, #20]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	689b      	ldr	r3, [r3, #8]
 800db2a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800db2e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800db32:	697a      	ldr	r2, [r7, #20]
 800db34:	6812      	ldr	r2, [r2, #0]
 800db36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800db38:	430b      	orrs	r3, r1
 800db3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800db3c:	697b      	ldr	r3, [r7, #20]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db42:	f023 010f 	bic.w	r1, r3, #15
 800db46:	697b      	ldr	r3, [r7, #20]
 800db48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	430a      	orrs	r2, r1
 800db50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800db52:	697b      	ldr	r3, [r7, #20]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	4a91      	ldr	r2, [pc, #580]	@ (800dd9c <UART_SetConfig+0x2e4>)
 800db58:	4293      	cmp	r3, r2
 800db5a:	d125      	bne.n	800dba8 <UART_SetConfig+0xf0>
 800db5c:	4b90      	ldr	r3, [pc, #576]	@ (800dda0 <UART_SetConfig+0x2e8>)
 800db5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800db62:	f003 0303 	and.w	r3, r3, #3
 800db66:	2b03      	cmp	r3, #3
 800db68:	d81a      	bhi.n	800dba0 <UART_SetConfig+0xe8>
 800db6a:	a201      	add	r2, pc, #4	@ (adr r2, 800db70 <UART_SetConfig+0xb8>)
 800db6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db70:	0800db81 	.word	0x0800db81
 800db74:	0800db91 	.word	0x0800db91
 800db78:	0800db89 	.word	0x0800db89
 800db7c:	0800db99 	.word	0x0800db99
 800db80:	2301      	movs	r3, #1
 800db82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800db86:	e0d6      	b.n	800dd36 <UART_SetConfig+0x27e>
 800db88:	2302      	movs	r3, #2
 800db8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800db8e:	e0d2      	b.n	800dd36 <UART_SetConfig+0x27e>
 800db90:	2304      	movs	r3, #4
 800db92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800db96:	e0ce      	b.n	800dd36 <UART_SetConfig+0x27e>
 800db98:	2308      	movs	r3, #8
 800db9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800db9e:	e0ca      	b.n	800dd36 <UART_SetConfig+0x27e>
 800dba0:	2310      	movs	r3, #16
 800dba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dba6:	e0c6      	b.n	800dd36 <UART_SetConfig+0x27e>
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	4a7d      	ldr	r2, [pc, #500]	@ (800dda4 <UART_SetConfig+0x2ec>)
 800dbae:	4293      	cmp	r3, r2
 800dbb0:	d138      	bne.n	800dc24 <UART_SetConfig+0x16c>
 800dbb2:	4b7b      	ldr	r3, [pc, #492]	@ (800dda0 <UART_SetConfig+0x2e8>)
 800dbb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dbb8:	f003 030c 	and.w	r3, r3, #12
 800dbbc:	2b0c      	cmp	r3, #12
 800dbbe:	d82d      	bhi.n	800dc1c <UART_SetConfig+0x164>
 800dbc0:	a201      	add	r2, pc, #4	@ (adr r2, 800dbc8 <UART_SetConfig+0x110>)
 800dbc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbc6:	bf00      	nop
 800dbc8:	0800dbfd 	.word	0x0800dbfd
 800dbcc:	0800dc1d 	.word	0x0800dc1d
 800dbd0:	0800dc1d 	.word	0x0800dc1d
 800dbd4:	0800dc1d 	.word	0x0800dc1d
 800dbd8:	0800dc0d 	.word	0x0800dc0d
 800dbdc:	0800dc1d 	.word	0x0800dc1d
 800dbe0:	0800dc1d 	.word	0x0800dc1d
 800dbe4:	0800dc1d 	.word	0x0800dc1d
 800dbe8:	0800dc05 	.word	0x0800dc05
 800dbec:	0800dc1d 	.word	0x0800dc1d
 800dbf0:	0800dc1d 	.word	0x0800dc1d
 800dbf4:	0800dc1d 	.word	0x0800dc1d
 800dbf8:	0800dc15 	.word	0x0800dc15
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dc02:	e098      	b.n	800dd36 <UART_SetConfig+0x27e>
 800dc04:	2302      	movs	r3, #2
 800dc06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dc0a:	e094      	b.n	800dd36 <UART_SetConfig+0x27e>
 800dc0c:	2304      	movs	r3, #4
 800dc0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dc12:	e090      	b.n	800dd36 <UART_SetConfig+0x27e>
 800dc14:	2308      	movs	r3, #8
 800dc16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dc1a:	e08c      	b.n	800dd36 <UART_SetConfig+0x27e>
 800dc1c:	2310      	movs	r3, #16
 800dc1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dc22:	e088      	b.n	800dd36 <UART_SetConfig+0x27e>
 800dc24:	697b      	ldr	r3, [r7, #20]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	4a5f      	ldr	r2, [pc, #380]	@ (800dda8 <UART_SetConfig+0x2f0>)
 800dc2a:	4293      	cmp	r3, r2
 800dc2c:	d125      	bne.n	800dc7a <UART_SetConfig+0x1c2>
 800dc2e:	4b5c      	ldr	r3, [pc, #368]	@ (800dda0 <UART_SetConfig+0x2e8>)
 800dc30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dc34:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800dc38:	2b30      	cmp	r3, #48	@ 0x30
 800dc3a:	d016      	beq.n	800dc6a <UART_SetConfig+0x1b2>
 800dc3c:	2b30      	cmp	r3, #48	@ 0x30
 800dc3e:	d818      	bhi.n	800dc72 <UART_SetConfig+0x1ba>
 800dc40:	2b20      	cmp	r3, #32
 800dc42:	d00a      	beq.n	800dc5a <UART_SetConfig+0x1a2>
 800dc44:	2b20      	cmp	r3, #32
 800dc46:	d814      	bhi.n	800dc72 <UART_SetConfig+0x1ba>
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d002      	beq.n	800dc52 <UART_SetConfig+0x19a>
 800dc4c:	2b10      	cmp	r3, #16
 800dc4e:	d008      	beq.n	800dc62 <UART_SetConfig+0x1aa>
 800dc50:	e00f      	b.n	800dc72 <UART_SetConfig+0x1ba>
 800dc52:	2300      	movs	r3, #0
 800dc54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dc58:	e06d      	b.n	800dd36 <UART_SetConfig+0x27e>
 800dc5a:	2302      	movs	r3, #2
 800dc5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dc60:	e069      	b.n	800dd36 <UART_SetConfig+0x27e>
 800dc62:	2304      	movs	r3, #4
 800dc64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dc68:	e065      	b.n	800dd36 <UART_SetConfig+0x27e>
 800dc6a:	2308      	movs	r3, #8
 800dc6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dc70:	e061      	b.n	800dd36 <UART_SetConfig+0x27e>
 800dc72:	2310      	movs	r3, #16
 800dc74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dc78:	e05d      	b.n	800dd36 <UART_SetConfig+0x27e>
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	4a4b      	ldr	r2, [pc, #300]	@ (800ddac <UART_SetConfig+0x2f4>)
 800dc80:	4293      	cmp	r3, r2
 800dc82:	d125      	bne.n	800dcd0 <UART_SetConfig+0x218>
 800dc84:	4b46      	ldr	r3, [pc, #280]	@ (800dda0 <UART_SetConfig+0x2e8>)
 800dc86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dc8a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800dc8e:	2bc0      	cmp	r3, #192	@ 0xc0
 800dc90:	d016      	beq.n	800dcc0 <UART_SetConfig+0x208>
 800dc92:	2bc0      	cmp	r3, #192	@ 0xc0
 800dc94:	d818      	bhi.n	800dcc8 <UART_SetConfig+0x210>
 800dc96:	2b80      	cmp	r3, #128	@ 0x80
 800dc98:	d00a      	beq.n	800dcb0 <UART_SetConfig+0x1f8>
 800dc9a:	2b80      	cmp	r3, #128	@ 0x80
 800dc9c:	d814      	bhi.n	800dcc8 <UART_SetConfig+0x210>
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d002      	beq.n	800dca8 <UART_SetConfig+0x1f0>
 800dca2:	2b40      	cmp	r3, #64	@ 0x40
 800dca4:	d008      	beq.n	800dcb8 <UART_SetConfig+0x200>
 800dca6:	e00f      	b.n	800dcc8 <UART_SetConfig+0x210>
 800dca8:	2300      	movs	r3, #0
 800dcaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dcae:	e042      	b.n	800dd36 <UART_SetConfig+0x27e>
 800dcb0:	2302      	movs	r3, #2
 800dcb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dcb6:	e03e      	b.n	800dd36 <UART_SetConfig+0x27e>
 800dcb8:	2304      	movs	r3, #4
 800dcba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dcbe:	e03a      	b.n	800dd36 <UART_SetConfig+0x27e>
 800dcc0:	2308      	movs	r3, #8
 800dcc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dcc6:	e036      	b.n	800dd36 <UART_SetConfig+0x27e>
 800dcc8:	2310      	movs	r3, #16
 800dcca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dcce:	e032      	b.n	800dd36 <UART_SetConfig+0x27e>
 800dcd0:	697b      	ldr	r3, [r7, #20]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	4a30      	ldr	r2, [pc, #192]	@ (800dd98 <UART_SetConfig+0x2e0>)
 800dcd6:	4293      	cmp	r3, r2
 800dcd8:	d12a      	bne.n	800dd30 <UART_SetConfig+0x278>
 800dcda:	4b31      	ldr	r3, [pc, #196]	@ (800dda0 <UART_SetConfig+0x2e8>)
 800dcdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dce0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800dce4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800dce8:	d01a      	beq.n	800dd20 <UART_SetConfig+0x268>
 800dcea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800dcee:	d81b      	bhi.n	800dd28 <UART_SetConfig+0x270>
 800dcf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dcf4:	d00c      	beq.n	800dd10 <UART_SetConfig+0x258>
 800dcf6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dcfa:	d815      	bhi.n	800dd28 <UART_SetConfig+0x270>
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d003      	beq.n	800dd08 <UART_SetConfig+0x250>
 800dd00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dd04:	d008      	beq.n	800dd18 <UART_SetConfig+0x260>
 800dd06:	e00f      	b.n	800dd28 <UART_SetConfig+0x270>
 800dd08:	2300      	movs	r3, #0
 800dd0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dd0e:	e012      	b.n	800dd36 <UART_SetConfig+0x27e>
 800dd10:	2302      	movs	r3, #2
 800dd12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dd16:	e00e      	b.n	800dd36 <UART_SetConfig+0x27e>
 800dd18:	2304      	movs	r3, #4
 800dd1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dd1e:	e00a      	b.n	800dd36 <UART_SetConfig+0x27e>
 800dd20:	2308      	movs	r3, #8
 800dd22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dd26:	e006      	b.n	800dd36 <UART_SetConfig+0x27e>
 800dd28:	2310      	movs	r3, #16
 800dd2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dd2e:	e002      	b.n	800dd36 <UART_SetConfig+0x27e>
 800dd30:	2310      	movs	r3, #16
 800dd32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dd36:	697b      	ldr	r3, [r7, #20]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	4a17      	ldr	r2, [pc, #92]	@ (800dd98 <UART_SetConfig+0x2e0>)
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	f040 80a8 	bne.w	800de92 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dd42:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800dd46:	2b08      	cmp	r3, #8
 800dd48:	d834      	bhi.n	800ddb4 <UART_SetConfig+0x2fc>
 800dd4a:	a201      	add	r2, pc, #4	@ (adr r2, 800dd50 <UART_SetConfig+0x298>)
 800dd4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd50:	0800dd75 	.word	0x0800dd75
 800dd54:	0800ddb5 	.word	0x0800ddb5
 800dd58:	0800dd7d 	.word	0x0800dd7d
 800dd5c:	0800ddb5 	.word	0x0800ddb5
 800dd60:	0800dd83 	.word	0x0800dd83
 800dd64:	0800ddb5 	.word	0x0800ddb5
 800dd68:	0800ddb5 	.word	0x0800ddb5
 800dd6c:	0800ddb5 	.word	0x0800ddb5
 800dd70:	0800dd8b 	.word	0x0800dd8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dd74:	f7fd f950 	bl	800b018 <HAL_RCC_GetPCLK1Freq>
 800dd78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800dd7a:	e021      	b.n	800ddc0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dd7c:	4b0c      	ldr	r3, [pc, #48]	@ (800ddb0 <UART_SetConfig+0x2f8>)
 800dd7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800dd80:	e01e      	b.n	800ddc0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dd82:	f7fd f8db 	bl	800af3c <HAL_RCC_GetSysClockFreq>
 800dd86:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800dd88:	e01a      	b.n	800ddc0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dd8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dd8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800dd90:	e016      	b.n	800ddc0 <UART_SetConfig+0x308>
 800dd92:	bf00      	nop
 800dd94:	cfff69f3 	.word	0xcfff69f3
 800dd98:	40008000 	.word	0x40008000
 800dd9c:	40013800 	.word	0x40013800
 800dda0:	40021000 	.word	0x40021000
 800dda4:	40004400 	.word	0x40004400
 800dda8:	40004800 	.word	0x40004800
 800ddac:	40004c00 	.word	0x40004c00
 800ddb0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ddb8:	2301      	movs	r3, #1
 800ddba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ddbe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ddc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	f000 812a 	beq.w	800e01c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddcc:	4a9e      	ldr	r2, [pc, #632]	@ (800e048 <UART_SetConfig+0x590>)
 800ddce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ddd2:	461a      	mov	r2, r3
 800ddd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddd6:	fbb3 f3f2 	udiv	r3, r3, r2
 800ddda:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dddc:	697b      	ldr	r3, [r7, #20]
 800ddde:	685a      	ldr	r2, [r3, #4]
 800dde0:	4613      	mov	r3, r2
 800dde2:	005b      	lsls	r3, r3, #1
 800dde4:	4413      	add	r3, r2
 800dde6:	69ba      	ldr	r2, [r7, #24]
 800dde8:	429a      	cmp	r2, r3
 800ddea:	d305      	bcc.n	800ddf8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ddec:	697b      	ldr	r3, [r7, #20]
 800ddee:	685b      	ldr	r3, [r3, #4]
 800ddf0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ddf2:	69ba      	ldr	r2, [r7, #24]
 800ddf4:	429a      	cmp	r2, r3
 800ddf6:	d903      	bls.n	800de00 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800ddf8:	2301      	movs	r3, #1
 800ddfa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ddfe:	e10d      	b.n	800e01c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de02:	2200      	movs	r2, #0
 800de04:	60bb      	str	r3, [r7, #8]
 800de06:	60fa      	str	r2, [r7, #12]
 800de08:	697b      	ldr	r3, [r7, #20]
 800de0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de0c:	4a8e      	ldr	r2, [pc, #568]	@ (800e048 <UART_SetConfig+0x590>)
 800de0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de12:	b29b      	uxth	r3, r3
 800de14:	2200      	movs	r2, #0
 800de16:	603b      	str	r3, [r7, #0]
 800de18:	607a      	str	r2, [r7, #4]
 800de1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800de22:	f7f6 f9db 	bl	80041dc <__aeabi_uldivmod>
 800de26:	4602      	mov	r2, r0
 800de28:	460b      	mov	r3, r1
 800de2a:	4610      	mov	r0, r2
 800de2c:	4619      	mov	r1, r3
 800de2e:	f04f 0200 	mov.w	r2, #0
 800de32:	f04f 0300 	mov.w	r3, #0
 800de36:	020b      	lsls	r3, r1, #8
 800de38:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800de3c:	0202      	lsls	r2, r0, #8
 800de3e:	6979      	ldr	r1, [r7, #20]
 800de40:	6849      	ldr	r1, [r1, #4]
 800de42:	0849      	lsrs	r1, r1, #1
 800de44:	2000      	movs	r0, #0
 800de46:	460c      	mov	r4, r1
 800de48:	4605      	mov	r5, r0
 800de4a:	eb12 0804 	adds.w	r8, r2, r4
 800de4e:	eb43 0905 	adc.w	r9, r3, r5
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	685b      	ldr	r3, [r3, #4]
 800de56:	2200      	movs	r2, #0
 800de58:	469a      	mov	sl, r3
 800de5a:	4693      	mov	fp, r2
 800de5c:	4652      	mov	r2, sl
 800de5e:	465b      	mov	r3, fp
 800de60:	4640      	mov	r0, r8
 800de62:	4649      	mov	r1, r9
 800de64:	f7f6 f9ba 	bl	80041dc <__aeabi_uldivmod>
 800de68:	4602      	mov	r2, r0
 800de6a:	460b      	mov	r3, r1
 800de6c:	4613      	mov	r3, r2
 800de6e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800de70:	6a3b      	ldr	r3, [r7, #32]
 800de72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800de76:	d308      	bcc.n	800de8a <UART_SetConfig+0x3d2>
 800de78:	6a3b      	ldr	r3, [r7, #32]
 800de7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800de7e:	d204      	bcs.n	800de8a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	6a3a      	ldr	r2, [r7, #32]
 800de86:	60da      	str	r2, [r3, #12]
 800de88:	e0c8      	b.n	800e01c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800de8a:	2301      	movs	r3, #1
 800de8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800de90:	e0c4      	b.n	800e01c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800de92:	697b      	ldr	r3, [r7, #20]
 800de94:	69db      	ldr	r3, [r3, #28]
 800de96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800de9a:	d167      	bne.n	800df6c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800de9c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800dea0:	2b08      	cmp	r3, #8
 800dea2:	d828      	bhi.n	800def6 <UART_SetConfig+0x43e>
 800dea4:	a201      	add	r2, pc, #4	@ (adr r2, 800deac <UART_SetConfig+0x3f4>)
 800dea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deaa:	bf00      	nop
 800deac:	0800ded1 	.word	0x0800ded1
 800deb0:	0800ded9 	.word	0x0800ded9
 800deb4:	0800dee1 	.word	0x0800dee1
 800deb8:	0800def7 	.word	0x0800def7
 800debc:	0800dee7 	.word	0x0800dee7
 800dec0:	0800def7 	.word	0x0800def7
 800dec4:	0800def7 	.word	0x0800def7
 800dec8:	0800def7 	.word	0x0800def7
 800decc:	0800deef 	.word	0x0800deef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ded0:	f7fd f8a2 	bl	800b018 <HAL_RCC_GetPCLK1Freq>
 800ded4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ded6:	e014      	b.n	800df02 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ded8:	f7fd f8b4 	bl	800b044 <HAL_RCC_GetPCLK2Freq>
 800dedc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800dede:	e010      	b.n	800df02 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dee0:	4b5a      	ldr	r3, [pc, #360]	@ (800e04c <UART_SetConfig+0x594>)
 800dee2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800dee4:	e00d      	b.n	800df02 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dee6:	f7fd f829 	bl	800af3c <HAL_RCC_GetSysClockFreq>
 800deea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800deec:	e009      	b.n	800df02 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800deee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800def2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800def4:	e005      	b.n	800df02 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800def6:	2300      	movs	r3, #0
 800def8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800defa:	2301      	movs	r3, #1
 800defc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800df00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800df02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df04:	2b00      	cmp	r3, #0
 800df06:	f000 8089 	beq.w	800e01c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df0e:	4a4e      	ldr	r2, [pc, #312]	@ (800e048 <UART_SetConfig+0x590>)
 800df10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df14:	461a      	mov	r2, r3
 800df16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df18:	fbb3 f3f2 	udiv	r3, r3, r2
 800df1c:	005a      	lsls	r2, r3, #1
 800df1e:	697b      	ldr	r3, [r7, #20]
 800df20:	685b      	ldr	r3, [r3, #4]
 800df22:	085b      	lsrs	r3, r3, #1
 800df24:	441a      	add	r2, r3
 800df26:	697b      	ldr	r3, [r7, #20]
 800df28:	685b      	ldr	r3, [r3, #4]
 800df2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800df2e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800df30:	6a3b      	ldr	r3, [r7, #32]
 800df32:	2b0f      	cmp	r3, #15
 800df34:	d916      	bls.n	800df64 <UART_SetConfig+0x4ac>
 800df36:	6a3b      	ldr	r3, [r7, #32]
 800df38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800df3c:	d212      	bcs.n	800df64 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800df3e:	6a3b      	ldr	r3, [r7, #32]
 800df40:	b29b      	uxth	r3, r3
 800df42:	f023 030f 	bic.w	r3, r3, #15
 800df46:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800df48:	6a3b      	ldr	r3, [r7, #32]
 800df4a:	085b      	lsrs	r3, r3, #1
 800df4c:	b29b      	uxth	r3, r3
 800df4e:	f003 0307 	and.w	r3, r3, #7
 800df52:	b29a      	uxth	r2, r3
 800df54:	8bfb      	ldrh	r3, [r7, #30]
 800df56:	4313      	orrs	r3, r2
 800df58:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800df5a:	697b      	ldr	r3, [r7, #20]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	8bfa      	ldrh	r2, [r7, #30]
 800df60:	60da      	str	r2, [r3, #12]
 800df62:	e05b      	b.n	800e01c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800df64:	2301      	movs	r3, #1
 800df66:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800df6a:	e057      	b.n	800e01c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800df6c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800df70:	2b08      	cmp	r3, #8
 800df72:	d828      	bhi.n	800dfc6 <UART_SetConfig+0x50e>
 800df74:	a201      	add	r2, pc, #4	@ (adr r2, 800df7c <UART_SetConfig+0x4c4>)
 800df76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df7a:	bf00      	nop
 800df7c:	0800dfa1 	.word	0x0800dfa1
 800df80:	0800dfa9 	.word	0x0800dfa9
 800df84:	0800dfb1 	.word	0x0800dfb1
 800df88:	0800dfc7 	.word	0x0800dfc7
 800df8c:	0800dfb7 	.word	0x0800dfb7
 800df90:	0800dfc7 	.word	0x0800dfc7
 800df94:	0800dfc7 	.word	0x0800dfc7
 800df98:	0800dfc7 	.word	0x0800dfc7
 800df9c:	0800dfbf 	.word	0x0800dfbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dfa0:	f7fd f83a 	bl	800b018 <HAL_RCC_GetPCLK1Freq>
 800dfa4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800dfa6:	e014      	b.n	800dfd2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dfa8:	f7fd f84c 	bl	800b044 <HAL_RCC_GetPCLK2Freq>
 800dfac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800dfae:	e010      	b.n	800dfd2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dfb0:	4b26      	ldr	r3, [pc, #152]	@ (800e04c <UART_SetConfig+0x594>)
 800dfb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800dfb4:	e00d      	b.n	800dfd2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dfb6:	f7fc ffc1 	bl	800af3c <HAL_RCC_GetSysClockFreq>
 800dfba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800dfbc:	e009      	b.n	800dfd2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dfbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dfc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800dfc4:	e005      	b.n	800dfd2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800dfca:	2301      	movs	r3, #1
 800dfcc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800dfd0:	bf00      	nop
    }

    if (pclk != 0U)
 800dfd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d021      	beq.n	800e01c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dfd8:	697b      	ldr	r3, [r7, #20]
 800dfda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfdc:	4a1a      	ldr	r2, [pc, #104]	@ (800e048 <UART_SetConfig+0x590>)
 800dfde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dfe2:	461a      	mov	r2, r3
 800dfe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfe6:	fbb3 f2f2 	udiv	r2, r3, r2
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	685b      	ldr	r3, [r3, #4]
 800dfee:	085b      	lsrs	r3, r3, #1
 800dff0:	441a      	add	r2, r3
 800dff2:	697b      	ldr	r3, [r7, #20]
 800dff4:	685b      	ldr	r3, [r3, #4]
 800dff6:	fbb2 f3f3 	udiv	r3, r2, r3
 800dffa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dffc:	6a3b      	ldr	r3, [r7, #32]
 800dffe:	2b0f      	cmp	r3, #15
 800e000:	d909      	bls.n	800e016 <UART_SetConfig+0x55e>
 800e002:	6a3b      	ldr	r3, [r7, #32]
 800e004:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e008:	d205      	bcs.n	800e016 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e00a:	6a3b      	ldr	r3, [r7, #32]
 800e00c:	b29a      	uxth	r2, r3
 800e00e:	697b      	ldr	r3, [r7, #20]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	60da      	str	r2, [r3, #12]
 800e014:	e002      	b.n	800e01c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800e016:	2301      	movs	r3, #1
 800e018:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e01c:	697b      	ldr	r3, [r7, #20]
 800e01e:	2201      	movs	r2, #1
 800e020:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e024:	697b      	ldr	r3, [r7, #20]
 800e026:	2201      	movs	r2, #1
 800e028:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e02c:	697b      	ldr	r3, [r7, #20]
 800e02e:	2200      	movs	r2, #0
 800e030:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e032:	697b      	ldr	r3, [r7, #20]
 800e034:	2200      	movs	r2, #0
 800e036:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e038:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	3730      	adds	r7, #48	@ 0x30
 800e040:	46bd      	mov	sp, r7
 800e042:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e046:	bf00      	nop
 800e048:	08018804 	.word	0x08018804
 800e04c:	00f42400 	.word	0x00f42400

0800e050 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e050:	b480      	push	{r7}
 800e052:	b083      	sub	sp, #12
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e05c:	f003 0308 	and.w	r3, r3, #8
 800e060:	2b00      	cmp	r3, #0
 800e062:	d00a      	beq.n	800e07a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	685b      	ldr	r3, [r3, #4]
 800e06a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	430a      	orrs	r2, r1
 800e078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e07e:	f003 0301 	and.w	r3, r3, #1
 800e082:	2b00      	cmp	r3, #0
 800e084:	d00a      	beq.n	800e09c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	685b      	ldr	r3, [r3, #4]
 800e08c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	430a      	orrs	r2, r1
 800e09a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0a0:	f003 0302 	and.w	r3, r3, #2
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d00a      	beq.n	800e0be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	685b      	ldr	r3, [r3, #4]
 800e0ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	430a      	orrs	r2, r1
 800e0bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0c2:	f003 0304 	and.w	r3, r3, #4
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d00a      	beq.n	800e0e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	685b      	ldr	r3, [r3, #4]
 800e0d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	430a      	orrs	r2, r1
 800e0de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0e4:	f003 0310 	and.w	r3, r3, #16
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d00a      	beq.n	800e102 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	689b      	ldr	r3, [r3, #8]
 800e0f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	430a      	orrs	r2, r1
 800e100:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e106:	f003 0320 	and.w	r3, r3, #32
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d00a      	beq.n	800e124 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	689b      	ldr	r3, [r3, #8]
 800e114:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	430a      	orrs	r2, r1
 800e122:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d01a      	beq.n	800e166 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	685b      	ldr	r3, [r3, #4]
 800e136:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	430a      	orrs	r2, r1
 800e144:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e14a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e14e:	d10a      	bne.n	800e166 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	685b      	ldr	r3, [r3, #4]
 800e156:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	430a      	orrs	r2, r1
 800e164:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e16a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d00a      	beq.n	800e188 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	685b      	ldr	r3, [r3, #4]
 800e178:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	430a      	orrs	r2, r1
 800e186:	605a      	str	r2, [r3, #4]
  }
}
 800e188:	bf00      	nop
 800e18a:	370c      	adds	r7, #12
 800e18c:	46bd      	mov	sp, r7
 800e18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e192:	4770      	bx	lr

0800e194 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b098      	sub	sp, #96	@ 0x60
 800e198:	af02      	add	r7, sp, #8
 800e19a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2200      	movs	r2, #0
 800e1a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e1a4:	f7f8 fdec 	bl	8006d80 <HAL_GetTick>
 800e1a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	f003 0308 	and.w	r3, r3, #8
 800e1b4:	2b08      	cmp	r3, #8
 800e1b6:	d12f      	bne.n	800e218 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e1b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e1bc:	9300      	str	r3, [sp, #0]
 800e1be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e1c6:	6878      	ldr	r0, [r7, #4]
 800e1c8:	f000 f88e 	bl	800e2e8 <UART_WaitOnFlagUntilTimeout>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d022      	beq.n	800e218 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1da:	e853 3f00 	ldrex	r3, [r3]
 800e1de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e1e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e1e6:	653b      	str	r3, [r7, #80]	@ 0x50
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	461a      	mov	r2, r3
 800e1ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e1f0:	647b      	str	r3, [r7, #68]	@ 0x44
 800e1f2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e1f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e1f8:	e841 2300 	strex	r3, r2, [r1]
 800e1fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e1fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e200:	2b00      	cmp	r3, #0
 800e202:	d1e6      	bne.n	800e1d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2220      	movs	r2, #32
 800e208:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	2200      	movs	r2, #0
 800e210:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e214:	2303      	movs	r3, #3
 800e216:	e063      	b.n	800e2e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	f003 0304 	and.w	r3, r3, #4
 800e222:	2b04      	cmp	r3, #4
 800e224:	d149      	bne.n	800e2ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e226:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e22a:	9300      	str	r3, [sp, #0]
 800e22c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e22e:	2200      	movs	r2, #0
 800e230:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e234:	6878      	ldr	r0, [r7, #4]
 800e236:	f000 f857 	bl	800e2e8 <UART_WaitOnFlagUntilTimeout>
 800e23a:	4603      	mov	r3, r0
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d03c      	beq.n	800e2ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e248:	e853 3f00 	ldrex	r3, [r3]
 800e24c:	623b      	str	r3, [r7, #32]
   return(result);
 800e24e:	6a3b      	ldr	r3, [r7, #32]
 800e250:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e254:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	461a      	mov	r2, r3
 800e25c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e25e:	633b      	str	r3, [r7, #48]	@ 0x30
 800e260:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e262:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e264:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e266:	e841 2300 	strex	r3, r2, [r1]
 800e26a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e26c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d1e6      	bne.n	800e240 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	3308      	adds	r3, #8
 800e278:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e27a:	693b      	ldr	r3, [r7, #16]
 800e27c:	e853 3f00 	ldrex	r3, [r3]
 800e280:	60fb      	str	r3, [r7, #12]
   return(result);
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	f023 0301 	bic.w	r3, r3, #1
 800e288:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	3308      	adds	r3, #8
 800e290:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e292:	61fa      	str	r2, [r7, #28]
 800e294:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e296:	69b9      	ldr	r1, [r7, #24]
 800e298:	69fa      	ldr	r2, [r7, #28]
 800e29a:	e841 2300 	strex	r3, r2, [r1]
 800e29e:	617b      	str	r3, [r7, #20]
   return(result);
 800e2a0:	697b      	ldr	r3, [r7, #20]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d1e5      	bne.n	800e272 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2220      	movs	r2, #32
 800e2aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e2b6:	2303      	movs	r3, #3
 800e2b8:	e012      	b.n	800e2e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	2220      	movs	r2, #32
 800e2be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2220      	movs	r2, #32
 800e2c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	2200      	movs	r2, #0
 800e2da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e2de:	2300      	movs	r3, #0
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3758      	adds	r7, #88	@ 0x58
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}

0800e2e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b084      	sub	sp, #16
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	60f8      	str	r0, [r7, #12]
 800e2f0:	60b9      	str	r1, [r7, #8]
 800e2f2:	603b      	str	r3, [r7, #0]
 800e2f4:	4613      	mov	r3, r2
 800e2f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e2f8:	e04f      	b.n	800e39a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e2fa:	69bb      	ldr	r3, [r7, #24]
 800e2fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e300:	d04b      	beq.n	800e39a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e302:	f7f8 fd3d 	bl	8006d80 <HAL_GetTick>
 800e306:	4602      	mov	r2, r0
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	1ad3      	subs	r3, r2, r3
 800e30c:	69ba      	ldr	r2, [r7, #24]
 800e30e:	429a      	cmp	r2, r3
 800e310:	d302      	bcc.n	800e318 <UART_WaitOnFlagUntilTimeout+0x30>
 800e312:	69bb      	ldr	r3, [r7, #24]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d101      	bne.n	800e31c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e318:	2303      	movs	r3, #3
 800e31a:	e04e      	b.n	800e3ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	f003 0304 	and.w	r3, r3, #4
 800e326:	2b00      	cmp	r3, #0
 800e328:	d037      	beq.n	800e39a <UART_WaitOnFlagUntilTimeout+0xb2>
 800e32a:	68bb      	ldr	r3, [r7, #8]
 800e32c:	2b80      	cmp	r3, #128	@ 0x80
 800e32e:	d034      	beq.n	800e39a <UART_WaitOnFlagUntilTimeout+0xb2>
 800e330:	68bb      	ldr	r3, [r7, #8]
 800e332:	2b40      	cmp	r3, #64	@ 0x40
 800e334:	d031      	beq.n	800e39a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	69db      	ldr	r3, [r3, #28]
 800e33c:	f003 0308 	and.w	r3, r3, #8
 800e340:	2b08      	cmp	r3, #8
 800e342:	d110      	bne.n	800e366 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	2208      	movs	r2, #8
 800e34a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e34c:	68f8      	ldr	r0, [r7, #12]
 800e34e:	f000 f95b 	bl	800e608 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	2208      	movs	r2, #8
 800e356:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	2200      	movs	r2, #0
 800e35e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e362:	2301      	movs	r3, #1
 800e364:	e029      	b.n	800e3ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	69db      	ldr	r3, [r3, #28]
 800e36c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e370:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e374:	d111      	bne.n	800e39a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e37e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e380:	68f8      	ldr	r0, [r7, #12]
 800e382:	f000 f941 	bl	800e608 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	2220      	movs	r2, #32
 800e38a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	2200      	movs	r2, #0
 800e392:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e396:	2303      	movs	r3, #3
 800e398:	e00f      	b.n	800e3ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	69da      	ldr	r2, [r3, #28]
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	4013      	ands	r3, r2
 800e3a4:	68ba      	ldr	r2, [r7, #8]
 800e3a6:	429a      	cmp	r2, r3
 800e3a8:	bf0c      	ite	eq
 800e3aa:	2301      	moveq	r3, #1
 800e3ac:	2300      	movne	r3, #0
 800e3ae:	b2db      	uxtb	r3, r3
 800e3b0:	461a      	mov	r2, r3
 800e3b2:	79fb      	ldrb	r3, [r7, #7]
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d0a0      	beq.n	800e2fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e3b8:	2300      	movs	r3, #0
}
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	3710      	adds	r7, #16
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bd80      	pop	{r7, pc}
	...

0800e3c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e3c4:	b480      	push	{r7}
 800e3c6:	b0a3      	sub	sp, #140	@ 0x8c
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	60f8      	str	r0, [r7, #12]
 800e3cc:	60b9      	str	r1, [r7, #8]
 800e3ce:	4613      	mov	r3, r2
 800e3d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	68ba      	ldr	r2, [r7, #8]
 800e3d6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	88fa      	ldrh	r2, [r7, #6]
 800e3dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	88fa      	ldrh	r2, [r7, #6]
 800e3e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	689b      	ldr	r3, [r3, #8]
 800e3f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e3f6:	d10e      	bne.n	800e416 <UART_Start_Receive_IT+0x52>
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	691b      	ldr	r3, [r3, #16]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d105      	bne.n	800e40c <UART_Start_Receive_IT+0x48>
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800e406:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e40a:	e02d      	b.n	800e468 <UART_Start_Receive_IT+0xa4>
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	22ff      	movs	r2, #255	@ 0xff
 800e410:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e414:	e028      	b.n	800e468 <UART_Start_Receive_IT+0xa4>
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	689b      	ldr	r3, [r3, #8]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d10d      	bne.n	800e43a <UART_Start_Receive_IT+0x76>
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	691b      	ldr	r3, [r3, #16]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d104      	bne.n	800e430 <UART_Start_Receive_IT+0x6c>
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	22ff      	movs	r2, #255	@ 0xff
 800e42a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e42e:	e01b      	b.n	800e468 <UART_Start_Receive_IT+0xa4>
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	227f      	movs	r2, #127	@ 0x7f
 800e434:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e438:	e016      	b.n	800e468 <UART_Start_Receive_IT+0xa4>
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	689b      	ldr	r3, [r3, #8]
 800e43e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e442:	d10d      	bne.n	800e460 <UART_Start_Receive_IT+0x9c>
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	691b      	ldr	r3, [r3, #16]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d104      	bne.n	800e456 <UART_Start_Receive_IT+0x92>
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	227f      	movs	r2, #127	@ 0x7f
 800e450:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e454:	e008      	b.n	800e468 <UART_Start_Receive_IT+0xa4>
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	223f      	movs	r2, #63	@ 0x3f
 800e45a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e45e:	e003      	b.n	800e468 <UART_Start_Receive_IT+0xa4>
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	2200      	movs	r2, #0
 800e464:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	2200      	movs	r2, #0
 800e46c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	2222      	movs	r2, #34	@ 0x22
 800e474:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	3308      	adds	r3, #8
 800e47e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e480:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e482:	e853 3f00 	ldrex	r3, [r3]
 800e486:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800e488:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e48a:	f043 0301 	orr.w	r3, r3, #1
 800e48e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	3308      	adds	r3, #8
 800e498:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e49c:	673a      	str	r2, [r7, #112]	@ 0x70
 800e49e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4a0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800e4a2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800e4a4:	e841 2300 	strex	r3, r2, [r1]
 800e4a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800e4aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d1e3      	bne.n	800e478 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e4b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e4b8:	d14f      	bne.n	800e55a <UART_Start_Receive_IT+0x196>
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e4c0:	88fa      	ldrh	r2, [r7, #6]
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	d349      	bcc.n	800e55a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	689b      	ldr	r3, [r3, #8]
 800e4ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e4ce:	d107      	bne.n	800e4e0 <UART_Start_Receive_IT+0x11c>
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	691b      	ldr	r3, [r3, #16]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d103      	bne.n	800e4e0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	4a47      	ldr	r2, [pc, #284]	@ (800e5f8 <UART_Start_Receive_IT+0x234>)
 800e4dc:	675a      	str	r2, [r3, #116]	@ 0x74
 800e4de:	e002      	b.n	800e4e6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	4a46      	ldr	r2, [pc, #280]	@ (800e5fc <UART_Start_Receive_IT+0x238>)
 800e4e4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	691b      	ldr	r3, [r3, #16]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d01a      	beq.n	800e524 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e4f6:	e853 3f00 	ldrex	r3, [r3]
 800e4fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e4fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e4fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e502:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	461a      	mov	r2, r3
 800e50c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e510:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e512:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e514:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e516:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e518:	e841 2300 	strex	r3, r2, [r1]
 800e51c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800e51e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e520:	2b00      	cmp	r3, #0
 800e522:	d1e4      	bne.n	800e4ee <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	3308      	adds	r3, #8
 800e52a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e52c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e52e:	e853 3f00 	ldrex	r3, [r3]
 800e532:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e536:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e53a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	3308      	adds	r3, #8
 800e542:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e544:	64ba      	str	r2, [r7, #72]	@ 0x48
 800e546:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e548:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e54a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e54c:	e841 2300 	strex	r3, r2, [r1]
 800e550:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800e552:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e554:	2b00      	cmp	r3, #0
 800e556:	d1e5      	bne.n	800e524 <UART_Start_Receive_IT+0x160>
 800e558:	e046      	b.n	800e5e8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	689b      	ldr	r3, [r3, #8]
 800e55e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e562:	d107      	bne.n	800e574 <UART_Start_Receive_IT+0x1b0>
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	691b      	ldr	r3, [r3, #16]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d103      	bne.n	800e574 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	4a24      	ldr	r2, [pc, #144]	@ (800e600 <UART_Start_Receive_IT+0x23c>)
 800e570:	675a      	str	r2, [r3, #116]	@ 0x74
 800e572:	e002      	b.n	800e57a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	4a23      	ldr	r2, [pc, #140]	@ (800e604 <UART_Start_Receive_IT+0x240>)
 800e578:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	691b      	ldr	r3, [r3, #16]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d019      	beq.n	800e5b6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e58a:	e853 3f00 	ldrex	r3, [r3]
 800e58e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e592:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800e596:	677b      	str	r3, [r7, #116]	@ 0x74
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	461a      	mov	r2, r3
 800e59e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e5a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800e5a2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e5a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e5a8:	e841 2300 	strex	r3, r2, [r1]
 800e5ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e5ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d1e6      	bne.n	800e582 <UART_Start_Receive_IT+0x1be>
 800e5b4:	e018      	b.n	800e5e8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5bc:	697b      	ldr	r3, [r7, #20]
 800e5be:	e853 3f00 	ldrex	r3, [r3]
 800e5c2:	613b      	str	r3, [r7, #16]
   return(result);
 800e5c4:	693b      	ldr	r3, [r7, #16]
 800e5c6:	f043 0320 	orr.w	r3, r3, #32
 800e5ca:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	461a      	mov	r2, r3
 800e5d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e5d4:	623b      	str	r3, [r7, #32]
 800e5d6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5d8:	69f9      	ldr	r1, [r7, #28]
 800e5da:	6a3a      	ldr	r2, [r7, #32]
 800e5dc:	e841 2300 	strex	r3, r2, [r1]
 800e5e0:	61bb      	str	r3, [r7, #24]
   return(result);
 800e5e2:	69bb      	ldr	r3, [r7, #24]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d1e6      	bne.n	800e5b6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800e5e8:	2300      	movs	r3, #0
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	378c      	adds	r7, #140	@ 0x8c
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f4:	4770      	bx	lr
 800e5f6:	bf00      	nop
 800e5f8:	0800ee2d 	.word	0x0800ee2d
 800e5fc:	0800eac9 	.word	0x0800eac9
 800e600:	0800e911 	.word	0x0800e911
 800e604:	0800e759 	.word	0x0800e759

0800e608 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e608:	b480      	push	{r7}
 800e60a:	b095      	sub	sp, #84	@ 0x54
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e618:	e853 3f00 	ldrex	r3, [r3]
 800e61c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e61e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e620:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e624:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	461a      	mov	r2, r3
 800e62c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e62e:	643b      	str	r3, [r7, #64]	@ 0x40
 800e630:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e632:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e634:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e636:	e841 2300 	strex	r3, r2, [r1]
 800e63a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e63c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d1e6      	bne.n	800e610 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	3308      	adds	r3, #8
 800e648:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e64a:	6a3b      	ldr	r3, [r7, #32]
 800e64c:	e853 3f00 	ldrex	r3, [r3]
 800e650:	61fb      	str	r3, [r7, #28]
   return(result);
 800e652:	69fb      	ldr	r3, [r7, #28]
 800e654:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e658:	f023 0301 	bic.w	r3, r3, #1
 800e65c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	3308      	adds	r3, #8
 800e664:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e666:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e668:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e66a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e66c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e66e:	e841 2300 	strex	r3, r2, [r1]
 800e672:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e676:	2b00      	cmp	r3, #0
 800e678:	d1e3      	bne.n	800e642 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e67e:	2b01      	cmp	r3, #1
 800e680:	d118      	bne.n	800e6b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	e853 3f00 	ldrex	r3, [r3]
 800e68e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e690:	68bb      	ldr	r3, [r7, #8]
 800e692:	f023 0310 	bic.w	r3, r3, #16
 800e696:	647b      	str	r3, [r7, #68]	@ 0x44
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	461a      	mov	r2, r3
 800e69e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e6a0:	61bb      	str	r3, [r7, #24]
 800e6a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6a4:	6979      	ldr	r1, [r7, #20]
 800e6a6:	69ba      	ldr	r2, [r7, #24]
 800e6a8:	e841 2300 	strex	r3, r2, [r1]
 800e6ac:	613b      	str	r3, [r7, #16]
   return(result);
 800e6ae:	693b      	ldr	r3, [r7, #16]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d1e6      	bne.n	800e682 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2220      	movs	r2, #32
 800e6b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2200      	movs	r2, #0
 800e6c0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e6c8:	bf00      	nop
 800e6ca:	3754      	adds	r7, #84	@ 0x54
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d2:	4770      	bx	lr

0800e6d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b084      	sub	sp, #16
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e6f2:	68f8      	ldr	r0, [r7, #12]
 800e6f4:	f7ff f9ca 	bl	800da8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e6f8:	bf00      	nop
 800e6fa:	3710      	adds	r7, #16
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}

0800e700 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b088      	sub	sp, #32
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	e853 3f00 	ldrex	r3, [r3]
 800e714:	60bb      	str	r3, [r7, #8]
   return(result);
 800e716:	68bb      	ldr	r3, [r7, #8]
 800e718:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e71c:	61fb      	str	r3, [r7, #28]
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	461a      	mov	r2, r3
 800e724:	69fb      	ldr	r3, [r7, #28]
 800e726:	61bb      	str	r3, [r7, #24]
 800e728:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e72a:	6979      	ldr	r1, [r7, #20]
 800e72c:	69ba      	ldr	r2, [r7, #24]
 800e72e:	e841 2300 	strex	r3, r2, [r1]
 800e732:	613b      	str	r3, [r7, #16]
   return(result);
 800e734:	693b      	ldr	r3, [r7, #16]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d1e6      	bne.n	800e708 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	2220      	movs	r2, #32
 800e73e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	2200      	movs	r2, #0
 800e746:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e748:	6878      	ldr	r0, [r7, #4]
 800e74a:	f7ff f995 	bl	800da78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e74e:	bf00      	nop
 800e750:	3720      	adds	r7, #32
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}
	...

0800e758 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b09c      	sub	sp, #112	@ 0x70
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e766:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e770:	2b22      	cmp	r3, #34	@ 0x22
 800e772:	f040 80be 	bne.w	800e8f2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e77c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e780:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800e784:	b2d9      	uxtb	r1, r3
 800e786:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800e78a:	b2da      	uxtb	r2, r3
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e790:	400a      	ands	r2, r1
 800e792:	b2d2      	uxtb	r2, r2
 800e794:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e79a:	1c5a      	adds	r2, r3, #1
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e7a6:	b29b      	uxth	r3, r3
 800e7a8:	3b01      	subs	r3, #1
 800e7aa:	b29a      	uxth	r2, r3
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e7b8:	b29b      	uxth	r3, r3
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	f040 80a1 	bne.w	800e902 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e7c8:	e853 3f00 	ldrex	r3, [r3]
 800e7cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e7ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e7d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e7d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	461a      	mov	r2, r3
 800e7dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e7de:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e7e0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e7e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e7e6:	e841 2300 	strex	r3, r2, [r1]
 800e7ea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e7ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d1e6      	bne.n	800e7c0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	3308      	adds	r3, #8
 800e7f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7fc:	e853 3f00 	ldrex	r3, [r3]
 800e800:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e804:	f023 0301 	bic.w	r3, r3, #1
 800e808:	667b      	str	r3, [r7, #100]	@ 0x64
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	3308      	adds	r3, #8
 800e810:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e812:	647a      	str	r2, [r7, #68]	@ 0x44
 800e814:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e816:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e818:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e81a:	e841 2300 	strex	r3, r2, [r1]
 800e81e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e822:	2b00      	cmp	r3, #0
 800e824:	d1e5      	bne.n	800e7f2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	2220      	movs	r2, #32
 800e82a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	2200      	movs	r2, #0
 800e832:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2200      	movs	r2, #0
 800e838:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	4a33      	ldr	r2, [pc, #204]	@ (800e90c <UART_RxISR_8BIT+0x1b4>)
 800e840:	4293      	cmp	r3, r2
 800e842:	d01f      	beq.n	800e884 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	685b      	ldr	r3, [r3, #4]
 800e84a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d018      	beq.n	800e884 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e85a:	e853 3f00 	ldrex	r3, [r3]
 800e85e:	623b      	str	r3, [r7, #32]
   return(result);
 800e860:	6a3b      	ldr	r3, [r7, #32]
 800e862:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e866:	663b      	str	r3, [r7, #96]	@ 0x60
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	461a      	mov	r2, r3
 800e86e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e870:	633b      	str	r3, [r7, #48]	@ 0x30
 800e872:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e874:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e876:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e878:	e841 2300 	strex	r3, r2, [r1]
 800e87c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e87e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e880:	2b00      	cmp	r3, #0
 800e882:	d1e6      	bne.n	800e852 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e888:	2b01      	cmp	r3, #1
 800e88a:	d12e      	bne.n	800e8ea <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	2200      	movs	r2, #0
 800e890:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e898:	693b      	ldr	r3, [r7, #16]
 800e89a:	e853 3f00 	ldrex	r3, [r3]
 800e89e:	60fb      	str	r3, [r7, #12]
   return(result);
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	f023 0310 	bic.w	r3, r3, #16
 800e8a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	461a      	mov	r2, r3
 800e8ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e8b0:	61fb      	str	r3, [r7, #28]
 800e8b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8b4:	69b9      	ldr	r1, [r7, #24]
 800e8b6:	69fa      	ldr	r2, [r7, #28]
 800e8b8:	e841 2300 	strex	r3, r2, [r1]
 800e8bc:	617b      	str	r3, [r7, #20]
   return(result);
 800e8be:	697b      	ldr	r3, [r7, #20]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d1e6      	bne.n	800e892 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	69db      	ldr	r3, [r3, #28]
 800e8ca:	f003 0310 	and.w	r3, r3, #16
 800e8ce:	2b10      	cmp	r3, #16
 800e8d0:	d103      	bne.n	800e8da <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	2210      	movs	r2, #16
 800e8d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e8e0:	4619      	mov	r1, r3
 800e8e2:	6878      	ldr	r0, [r7, #4]
 800e8e4:	f7ff f8dc 	bl	800daa0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e8e8:	e00b      	b.n	800e902 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800e8ea:	6878      	ldr	r0, [r7, #4]
 800e8ec:	f007 fa6a 	bl	8015dc4 <HAL_UART_RxCpltCallback>
}
 800e8f0:	e007      	b.n	800e902 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	699a      	ldr	r2, [r3, #24]
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	f042 0208 	orr.w	r2, r2, #8
 800e900:	619a      	str	r2, [r3, #24]
}
 800e902:	bf00      	nop
 800e904:	3770      	adds	r7, #112	@ 0x70
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}
 800e90a:	bf00      	nop
 800e90c:	40008000 	.word	0x40008000

0800e910 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b09c      	sub	sp, #112	@ 0x70
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e91e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e928:	2b22      	cmp	r3, #34	@ 0x22
 800e92a:	f040 80be 	bne.w	800eaaa <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e934:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e93c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800e93e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800e942:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800e946:	4013      	ands	r3, r2
 800e948:	b29a      	uxth	r2, r3
 800e94a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e94c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e952:	1c9a      	adds	r2, r3, #2
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e95e:	b29b      	uxth	r3, r3
 800e960:	3b01      	subs	r3, #1
 800e962:	b29a      	uxth	r2, r3
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e970:	b29b      	uxth	r3, r3
 800e972:	2b00      	cmp	r3, #0
 800e974:	f040 80a1 	bne.w	800eaba <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e97e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e980:	e853 3f00 	ldrex	r3, [r3]
 800e984:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e986:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e988:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e98c:	667b      	str	r3, [r7, #100]	@ 0x64
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	461a      	mov	r2, r3
 800e994:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e996:	657b      	str	r3, [r7, #84]	@ 0x54
 800e998:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e99a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e99c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e99e:	e841 2300 	strex	r3, r2, [r1]
 800e9a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e9a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d1e6      	bne.n	800e978 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	3308      	adds	r3, #8
 800e9b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9b4:	e853 3f00 	ldrex	r3, [r3]
 800e9b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e9ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9bc:	f023 0301 	bic.w	r3, r3, #1
 800e9c0:	663b      	str	r3, [r7, #96]	@ 0x60
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	3308      	adds	r3, #8
 800e9c8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e9ca:	643a      	str	r2, [r7, #64]	@ 0x40
 800e9cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e9d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e9d2:	e841 2300 	strex	r3, r2, [r1]
 800e9d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e9d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d1e5      	bne.n	800e9aa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	2220      	movs	r2, #32
 800e9e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	4a33      	ldr	r2, [pc, #204]	@ (800eac4 <UART_RxISR_16BIT+0x1b4>)
 800e9f8:	4293      	cmp	r3, r2
 800e9fa:	d01f      	beq.n	800ea3c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	685b      	ldr	r3, [r3, #4]
 800ea02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d018      	beq.n	800ea3c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea10:	6a3b      	ldr	r3, [r7, #32]
 800ea12:	e853 3f00 	ldrex	r3, [r3]
 800ea16:	61fb      	str	r3, [r7, #28]
   return(result);
 800ea18:	69fb      	ldr	r3, [r7, #28]
 800ea1a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ea1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	461a      	mov	r2, r3
 800ea26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ea28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ea2a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ea2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ea30:	e841 2300 	strex	r3, r2, [r1]
 800ea34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ea36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d1e6      	bne.n	800ea0a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ea40:	2b01      	cmp	r3, #1
 800ea42:	d12e      	bne.n	800eaa2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	2200      	movs	r2, #0
 800ea48:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	e853 3f00 	ldrex	r3, [r3]
 800ea56:	60bb      	str	r3, [r7, #8]
   return(result);
 800ea58:	68bb      	ldr	r3, [r7, #8]
 800ea5a:	f023 0310 	bic.w	r3, r3, #16
 800ea5e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	461a      	mov	r2, r3
 800ea66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ea68:	61bb      	str	r3, [r7, #24]
 800ea6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea6c:	6979      	ldr	r1, [r7, #20]
 800ea6e:	69ba      	ldr	r2, [r7, #24]
 800ea70:	e841 2300 	strex	r3, r2, [r1]
 800ea74:	613b      	str	r3, [r7, #16]
   return(result);
 800ea76:	693b      	ldr	r3, [r7, #16]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d1e6      	bne.n	800ea4a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	69db      	ldr	r3, [r3, #28]
 800ea82:	f003 0310 	and.w	r3, r3, #16
 800ea86:	2b10      	cmp	r3, #16
 800ea88:	d103      	bne.n	800ea92 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	2210      	movs	r2, #16
 800ea90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ea98:	4619      	mov	r1, r3
 800ea9a:	6878      	ldr	r0, [r7, #4]
 800ea9c:	f7ff f800 	bl	800daa0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800eaa0:	e00b      	b.n	800eaba <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800eaa2:	6878      	ldr	r0, [r7, #4]
 800eaa4:	f007 f98e 	bl	8015dc4 <HAL_UART_RxCpltCallback>
}
 800eaa8:	e007      	b.n	800eaba <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	699a      	ldr	r2, [r3, #24]
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	f042 0208 	orr.w	r2, r2, #8
 800eab8:	619a      	str	r2, [r3, #24]
}
 800eaba:	bf00      	nop
 800eabc:	3770      	adds	r7, #112	@ 0x70
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}
 800eac2:	bf00      	nop
 800eac4:	40008000 	.word	0x40008000

0800eac8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b0ac      	sub	sp, #176	@ 0xb0
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ead6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	69db      	ldr	r3, [r3, #28]
 800eae0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	689b      	ldr	r3, [r3, #8]
 800eaf4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800eafe:	2b22      	cmp	r3, #34	@ 0x22
 800eb00:	f040 8183 	bne.w	800ee0a <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800eb0a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800eb0e:	e126      	b.n	800ed5e <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb16:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800eb1a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800eb1e:	b2d9      	uxtb	r1, r3
 800eb20:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800eb24:	b2da      	uxtb	r2, r3
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eb2a:	400a      	ands	r2, r1
 800eb2c:	b2d2      	uxtb	r2, r2
 800eb2e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eb34:	1c5a      	adds	r2, r3, #1
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800eb40:	b29b      	uxth	r3, r3
 800eb42:	3b01      	subs	r3, #1
 800eb44:	b29a      	uxth	r2, r3
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	69db      	ldr	r3, [r3, #28]
 800eb52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800eb56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eb5a:	f003 0307 	and.w	r3, r3, #7
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d053      	beq.n	800ec0a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800eb62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eb66:	f003 0301 	and.w	r3, r3, #1
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d011      	beq.n	800eb92 <UART_RxISR_8BIT_FIFOEN+0xca>
 800eb6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800eb72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d00b      	beq.n	800eb92 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	2201      	movs	r2, #1
 800eb80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eb88:	f043 0201 	orr.w	r2, r3, #1
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eb92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eb96:	f003 0302 	and.w	r3, r3, #2
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d011      	beq.n	800ebc2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800eb9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800eba2:	f003 0301 	and.w	r3, r3, #1
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d00b      	beq.n	800ebc2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	2202      	movs	r2, #2
 800ebb0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ebb8:	f043 0204 	orr.w	r2, r3, #4
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ebc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ebc6:	f003 0304 	and.w	r3, r3, #4
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d011      	beq.n	800ebf2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800ebce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ebd2:	f003 0301 	and.w	r3, r3, #1
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d00b      	beq.n	800ebf2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	2204      	movs	r2, #4
 800ebe0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ebe8:	f043 0202 	orr.w	r2, r3, #2
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d006      	beq.n	800ec0a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ebfc:	6878      	ldr	r0, [r7, #4]
 800ebfe:	f7fe ff45 	bl	800da8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	2200      	movs	r2, #0
 800ec06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ec10:	b29b      	uxth	r3, r3
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	f040 80a3 	bne.w	800ed5e <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ec20:	e853 3f00 	ldrex	r3, [r3]
 800ec24:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800ec26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ec28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ec2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	461a      	mov	r2, r3
 800ec36:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ec3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ec3c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec3e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800ec40:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ec42:	e841 2300 	strex	r3, r2, [r1]
 800ec46:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800ec48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d1e4      	bne.n	800ec18 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	3308      	adds	r3, #8
 800ec54:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ec58:	e853 3f00 	ldrex	r3, [r3]
 800ec5c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800ec5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ec60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ec64:	f023 0301 	bic.w	r3, r3, #1
 800ec68:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	3308      	adds	r3, #8
 800ec72:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ec76:	66ba      	str	r2, [r7, #104]	@ 0x68
 800ec78:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec7a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ec7c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ec7e:	e841 2300 	strex	r3, r2, [r1]
 800ec82:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ec84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d1e1      	bne.n	800ec4e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	2220      	movs	r2, #32
 800ec8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	2200      	movs	r2, #0
 800ec96:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	4a60      	ldr	r2, [pc, #384]	@ (800ee24 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800eca4:	4293      	cmp	r3, r2
 800eca6:	d021      	beq.n	800ecec <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	685b      	ldr	r3, [r3, #4]
 800ecae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d01a      	beq.n	800ecec <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ecbe:	e853 3f00 	ldrex	r3, [r3]
 800ecc2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ecc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecc6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ecca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	461a      	mov	r2, r3
 800ecd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ecd8:	657b      	str	r3, [r7, #84]	@ 0x54
 800ecda:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecdc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ecde:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ece0:	e841 2300 	strex	r3, r2, [r1]
 800ece4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ece6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d1e4      	bne.n	800ecb6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ecf0:	2b01      	cmp	r3, #1
 800ecf2:	d130      	bne.n	800ed56 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed02:	e853 3f00 	ldrex	r3, [r3]
 800ed06:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ed08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed0a:	f023 0310 	bic.w	r3, r3, #16
 800ed0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	461a      	mov	r2, r3
 800ed18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ed1c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ed1e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ed22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ed24:	e841 2300 	strex	r3, r2, [r1]
 800ed28:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ed2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d1e4      	bne.n	800ecfa <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	69db      	ldr	r3, [r3, #28]
 800ed36:	f003 0310 	and.w	r3, r3, #16
 800ed3a:	2b10      	cmp	r3, #16
 800ed3c:	d103      	bne.n	800ed46 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	2210      	movs	r2, #16
 800ed44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ed4c:	4619      	mov	r1, r3
 800ed4e:	6878      	ldr	r0, [r7, #4]
 800ed50:	f7fe fea6 	bl	800daa0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800ed54:	e00e      	b.n	800ed74 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800ed56:	6878      	ldr	r0, [r7, #4]
 800ed58:	f007 f834 	bl	8015dc4 <HAL_UART_RxCpltCallback>
        break;
 800ed5c:	e00a      	b.n	800ed74 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ed5e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d006      	beq.n	800ed74 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800ed66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ed6a:	f003 0320 	and.w	r3, r3, #32
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	f47f aece 	bne.w	800eb10 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ed7a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ed7e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d049      	beq.n	800ee1a <UART_RxISR_8BIT_FIFOEN+0x352>
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ed8c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800ed90:	429a      	cmp	r2, r3
 800ed92:	d242      	bcs.n	800ee1a <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	3308      	adds	r3, #8
 800ed9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed9c:	6a3b      	ldr	r3, [r7, #32]
 800ed9e:	e853 3f00 	ldrex	r3, [r3]
 800eda2:	61fb      	str	r3, [r7, #28]
   return(result);
 800eda4:	69fb      	ldr	r3, [r7, #28]
 800eda6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800edaa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	3308      	adds	r3, #8
 800edb4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800edb8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800edba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800edbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800edc0:	e841 2300 	strex	r3, r2, [r1]
 800edc4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800edc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d1e3      	bne.n	800ed94 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	4a16      	ldr	r2, [pc, #88]	@ (800ee28 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800edd0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	e853 3f00 	ldrex	r3, [r3]
 800edde:	60bb      	str	r3, [r7, #8]
   return(result);
 800ede0:	68bb      	ldr	r3, [r7, #8]
 800ede2:	f043 0320 	orr.w	r3, r3, #32
 800ede6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	461a      	mov	r2, r3
 800edf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800edf4:	61bb      	str	r3, [r7, #24]
 800edf6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edf8:	6979      	ldr	r1, [r7, #20]
 800edfa:	69ba      	ldr	r2, [r7, #24]
 800edfc:	e841 2300 	strex	r3, r2, [r1]
 800ee00:	613b      	str	r3, [r7, #16]
   return(result);
 800ee02:	693b      	ldr	r3, [r7, #16]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d1e4      	bne.n	800edd2 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ee08:	e007      	b.n	800ee1a <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	699a      	ldr	r2, [r3, #24]
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	f042 0208 	orr.w	r2, r2, #8
 800ee18:	619a      	str	r2, [r3, #24]
}
 800ee1a:	bf00      	nop
 800ee1c:	37b0      	adds	r7, #176	@ 0xb0
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	bd80      	pop	{r7, pc}
 800ee22:	bf00      	nop
 800ee24:	40008000 	.word	0x40008000
 800ee28:	0800e759 	.word	0x0800e759

0800ee2c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b0ae      	sub	sp, #184	@ 0xb8
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ee3a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	69db      	ldr	r3, [r3, #28]
 800ee44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	689b      	ldr	r3, [r3, #8]
 800ee58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ee62:	2b22      	cmp	r3, #34	@ 0x22
 800ee64:	f040 8187 	bne.w	800f176 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ee6e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ee72:	e12a      	b.n	800f0ca <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee7a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800ee86:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800ee8a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800ee8e:	4013      	ands	r3, r2
 800ee90:	b29a      	uxth	r2, r3
 800ee92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ee96:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee9c:	1c9a      	adds	r2, r3, #2
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800eea8:	b29b      	uxth	r3, r3
 800eeaa:	3b01      	subs	r3, #1
 800eeac:	b29a      	uxth	r2, r3
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	69db      	ldr	r3, [r3, #28]
 800eeba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800eebe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800eec2:	f003 0307 	and.w	r3, r3, #7
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d053      	beq.n	800ef72 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800eeca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800eece:	f003 0301 	and.w	r3, r3, #1
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d011      	beq.n	800eefa <UART_RxISR_16BIT_FIFOEN+0xce>
 800eed6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eeda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d00b      	beq.n	800eefa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	2201      	movs	r2, #1
 800eee8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eef0:	f043 0201 	orr.w	r2, r3, #1
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eefa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800eefe:	f003 0302 	and.w	r3, r3, #2
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d011      	beq.n	800ef2a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800ef06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ef0a:	f003 0301 	and.w	r3, r3, #1
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d00b      	beq.n	800ef2a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	2202      	movs	r2, #2
 800ef18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ef20:	f043 0204 	orr.w	r2, r3, #4
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ef2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ef2e:	f003 0304 	and.w	r3, r3, #4
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d011      	beq.n	800ef5a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ef36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ef3a:	f003 0301 	and.w	r3, r3, #1
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d00b      	beq.n	800ef5a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	2204      	movs	r2, #4
 800ef48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ef50:	f043 0202 	orr.w	r2, r3, #2
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d006      	beq.n	800ef72 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ef64:	6878      	ldr	r0, [r7, #4]
 800ef66:	f7fe fd91 	bl	800da8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ef78:	b29b      	uxth	r3, r3
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	f040 80a5 	bne.w	800f0ca <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ef88:	e853 3f00 	ldrex	r3, [r3]
 800ef8c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ef8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ef90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ef94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	461a      	mov	r2, r3
 800ef9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800efa2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800efa6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efa8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800efaa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800efae:	e841 2300 	strex	r3, r2, [r1]
 800efb2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800efb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d1e2      	bne.n	800ef80 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	3308      	adds	r3, #8
 800efc0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800efc4:	e853 3f00 	ldrex	r3, [r3]
 800efc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800efca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800efcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800efd0:	f023 0301 	bic.w	r3, r3, #1
 800efd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	3308      	adds	r3, #8
 800efde:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800efe2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800efe4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efe6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800efe8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800efea:	e841 2300 	strex	r3, r2, [r1]
 800efee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800eff0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d1e1      	bne.n	800efba <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	2220      	movs	r2, #32
 800effa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	2200      	movs	r2, #0
 800f002:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2200      	movs	r2, #0
 800f008:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	4a60      	ldr	r2, [pc, #384]	@ (800f190 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800f010:	4293      	cmp	r3, r2
 800f012:	d021      	beq.n	800f058 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	685b      	ldr	r3, [r3, #4]
 800f01a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d01a      	beq.n	800f058 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f028:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f02a:	e853 3f00 	ldrex	r3, [r3]
 800f02e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f030:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f032:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f036:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	461a      	mov	r2, r3
 800f040:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f044:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f046:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f048:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f04a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f04c:	e841 2300 	strex	r3, r2, [r1]
 800f050:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f052:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f054:	2b00      	cmp	r3, #0
 800f056:	d1e4      	bne.n	800f022 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f05c:	2b01      	cmp	r3, #1
 800f05e:	d130      	bne.n	800f0c2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2200      	movs	r2, #0
 800f064:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f06c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f06e:	e853 3f00 	ldrex	r3, [r3]
 800f072:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f076:	f023 0310 	bic.w	r3, r3, #16
 800f07a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	461a      	mov	r2, r3
 800f084:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f088:	647b      	str	r3, [r7, #68]	@ 0x44
 800f08a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f08c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f08e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f090:	e841 2300 	strex	r3, r2, [r1]
 800f094:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d1e4      	bne.n	800f066 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	69db      	ldr	r3, [r3, #28]
 800f0a2:	f003 0310 	and.w	r3, r3, #16
 800f0a6:	2b10      	cmp	r3, #16
 800f0a8:	d103      	bne.n	800f0b2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	2210      	movs	r2, #16
 800f0b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f0b8:	4619      	mov	r1, r3
 800f0ba:	6878      	ldr	r0, [r7, #4]
 800f0bc:	f7fe fcf0 	bl	800daa0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800f0c0:	e00e      	b.n	800f0e0 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800f0c2:	6878      	ldr	r0, [r7, #4]
 800f0c4:	f006 fe7e 	bl	8015dc4 <HAL_UART_RxCpltCallback>
        break;
 800f0c8:	e00a      	b.n	800f0e0 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f0ca:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d006      	beq.n	800f0e0 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800f0d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f0d6:	f003 0320 	and.w	r3, r3, #32
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	f47f aeca 	bne.w	800ee74 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f0e6:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f0ea:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d049      	beq.n	800f186 <UART_RxISR_16BIT_FIFOEN+0x35a>
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f0f8:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800f0fc:	429a      	cmp	r2, r3
 800f0fe:	d242      	bcs.n	800f186 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	3308      	adds	r3, #8
 800f106:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f10a:	e853 3f00 	ldrex	r3, [r3]
 800f10e:	623b      	str	r3, [r7, #32]
   return(result);
 800f110:	6a3b      	ldr	r3, [r7, #32]
 800f112:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f116:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	3308      	adds	r3, #8
 800f120:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800f124:	633a      	str	r2, [r7, #48]	@ 0x30
 800f126:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f128:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f12a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f12c:	e841 2300 	strex	r3, r2, [r1]
 800f130:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f134:	2b00      	cmp	r3, #0
 800f136:	d1e3      	bne.n	800f100 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	4a16      	ldr	r2, [pc, #88]	@ (800f194 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800f13c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f144:	693b      	ldr	r3, [r7, #16]
 800f146:	e853 3f00 	ldrex	r3, [r3]
 800f14a:	60fb      	str	r3, [r7, #12]
   return(result);
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	f043 0320 	orr.w	r3, r3, #32
 800f152:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	461a      	mov	r2, r3
 800f15c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f160:	61fb      	str	r3, [r7, #28]
 800f162:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f164:	69b9      	ldr	r1, [r7, #24]
 800f166:	69fa      	ldr	r2, [r7, #28]
 800f168:	e841 2300 	strex	r3, r2, [r1]
 800f16c:	617b      	str	r3, [r7, #20]
   return(result);
 800f16e:	697b      	ldr	r3, [r7, #20]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d1e4      	bne.n	800f13e <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f174:	e007      	b.n	800f186 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	699a      	ldr	r2, [r3, #24]
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	f042 0208 	orr.w	r2, r2, #8
 800f184:	619a      	str	r2, [r3, #24]
}
 800f186:	bf00      	nop
 800f188:	37b8      	adds	r7, #184	@ 0xb8
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bd80      	pop	{r7, pc}
 800f18e:	bf00      	nop
 800f190:	40008000 	.word	0x40008000
 800f194:	0800e911 	.word	0x0800e911

0800f198 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f198:	b480      	push	{r7}
 800f19a:	b083      	sub	sp, #12
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f1a0:	bf00      	nop
 800f1a2:	370c      	adds	r7, #12
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1aa:	4770      	bx	lr

0800f1ac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f1ac:	b480      	push	{r7}
 800f1ae:	b083      	sub	sp, #12
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f1b4:	bf00      	nop
 800f1b6:	370c      	adds	r7, #12
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1be:	4770      	bx	lr

0800f1c0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f1c0:	b480      	push	{r7}
 800f1c2:	b083      	sub	sp, #12
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f1c8:	bf00      	nop
 800f1ca:	370c      	adds	r7, #12
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d2:	4770      	bx	lr

0800f1d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f1d4:	b480      	push	{r7}
 800f1d6:	b085      	sub	sp, #20
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f1e2:	2b01      	cmp	r3, #1
 800f1e4:	d101      	bne.n	800f1ea <HAL_UARTEx_DisableFifoMode+0x16>
 800f1e6:	2302      	movs	r3, #2
 800f1e8:	e027      	b.n	800f23a <HAL_UARTEx_DisableFifoMode+0x66>
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	2201      	movs	r2, #1
 800f1ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	2224      	movs	r2, #36	@ 0x24
 800f1f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	681a      	ldr	r2, [r3, #0]
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	f022 0201 	bic.w	r2, r2, #1
 800f210:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f218:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	2200      	movs	r2, #0
 800f21e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	68fa      	ldr	r2, [r7, #12]
 800f226:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2220      	movs	r2, #32
 800f22c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2200      	movs	r2, #0
 800f234:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f238:	2300      	movs	r3, #0
}
 800f23a:	4618      	mov	r0, r3
 800f23c:	3714      	adds	r7, #20
 800f23e:	46bd      	mov	sp, r7
 800f240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f244:	4770      	bx	lr

0800f246 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f246:	b580      	push	{r7, lr}
 800f248:	b084      	sub	sp, #16
 800f24a:	af00      	add	r7, sp, #0
 800f24c:	6078      	str	r0, [r7, #4]
 800f24e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f256:	2b01      	cmp	r3, #1
 800f258:	d101      	bne.n	800f25e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f25a:	2302      	movs	r3, #2
 800f25c:	e02d      	b.n	800f2ba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2201      	movs	r2, #1
 800f262:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	2224      	movs	r2, #36	@ 0x24
 800f26a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	681a      	ldr	r2, [r3, #0]
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	f022 0201 	bic.w	r2, r2, #1
 800f284:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	689b      	ldr	r3, [r3, #8]
 800f28c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	683a      	ldr	r2, [r7, #0]
 800f296:	430a      	orrs	r2, r1
 800f298:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f29a:	6878      	ldr	r0, [r7, #4]
 800f29c:	f000 f850 	bl	800f340 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	68fa      	ldr	r2, [r7, #12]
 800f2a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2220      	movs	r2, #32
 800f2ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f2b8:	2300      	movs	r3, #0
}
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	3710      	adds	r7, #16
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	bd80      	pop	{r7, pc}

0800f2c2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f2c2:	b580      	push	{r7, lr}
 800f2c4:	b084      	sub	sp, #16
 800f2c6:	af00      	add	r7, sp, #0
 800f2c8:	6078      	str	r0, [r7, #4]
 800f2ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f2d2:	2b01      	cmp	r3, #1
 800f2d4:	d101      	bne.n	800f2da <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f2d6:	2302      	movs	r3, #2
 800f2d8:	e02d      	b.n	800f336 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	2201      	movs	r2, #1
 800f2de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	2224      	movs	r2, #36	@ 0x24
 800f2e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	681a      	ldr	r2, [r3, #0]
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	f022 0201 	bic.w	r2, r2, #1
 800f300:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	689b      	ldr	r3, [r3, #8]
 800f308:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	683a      	ldr	r2, [r7, #0]
 800f312:	430a      	orrs	r2, r1
 800f314:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f316:	6878      	ldr	r0, [r7, #4]
 800f318:	f000 f812 	bl	800f340 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	68fa      	ldr	r2, [r7, #12]
 800f322:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	2220      	movs	r2, #32
 800f328:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2200      	movs	r2, #0
 800f330:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f334:	2300      	movs	r3, #0
}
 800f336:	4618      	mov	r0, r3
 800f338:	3710      	adds	r7, #16
 800f33a:	46bd      	mov	sp, r7
 800f33c:	bd80      	pop	{r7, pc}
	...

0800f340 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f340:	b480      	push	{r7}
 800f342:	b085      	sub	sp, #20
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d108      	bne.n	800f362 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	2201      	movs	r2, #1
 800f354:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2201      	movs	r2, #1
 800f35c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f360:	e031      	b.n	800f3c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f362:	2308      	movs	r3, #8
 800f364:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f366:	2308      	movs	r3, #8
 800f368:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	689b      	ldr	r3, [r3, #8]
 800f370:	0e5b      	lsrs	r3, r3, #25
 800f372:	b2db      	uxtb	r3, r3
 800f374:	f003 0307 	and.w	r3, r3, #7
 800f378:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	689b      	ldr	r3, [r3, #8]
 800f380:	0f5b      	lsrs	r3, r3, #29
 800f382:	b2db      	uxtb	r3, r3
 800f384:	f003 0307 	and.w	r3, r3, #7
 800f388:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f38a:	7bbb      	ldrb	r3, [r7, #14]
 800f38c:	7b3a      	ldrb	r2, [r7, #12]
 800f38e:	4911      	ldr	r1, [pc, #68]	@ (800f3d4 <UARTEx_SetNbDataToProcess+0x94>)
 800f390:	5c8a      	ldrb	r2, [r1, r2]
 800f392:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f396:	7b3a      	ldrb	r2, [r7, #12]
 800f398:	490f      	ldr	r1, [pc, #60]	@ (800f3d8 <UARTEx_SetNbDataToProcess+0x98>)
 800f39a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f39c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f3a0:	b29a      	uxth	r2, r3
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f3a8:	7bfb      	ldrb	r3, [r7, #15]
 800f3aa:	7b7a      	ldrb	r2, [r7, #13]
 800f3ac:	4909      	ldr	r1, [pc, #36]	@ (800f3d4 <UARTEx_SetNbDataToProcess+0x94>)
 800f3ae:	5c8a      	ldrb	r2, [r1, r2]
 800f3b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f3b4:	7b7a      	ldrb	r2, [r7, #13]
 800f3b6:	4908      	ldr	r1, [pc, #32]	@ (800f3d8 <UARTEx_SetNbDataToProcess+0x98>)
 800f3b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f3ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800f3be:	b29a      	uxth	r2, r3
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f3c6:	bf00      	nop
 800f3c8:	3714      	adds	r7, #20
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d0:	4770      	bx	lr
 800f3d2:	bf00      	nop
 800f3d4:	0801881c 	.word	0x0801881c
 800f3d8:	08018824 	.word	0x08018824

0800f3dc <LL_DMA_ConfigTransfer>:
{
 800f3dc:	b480      	push	{r7}
 800f3de:	b087      	sub	sp, #28
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	60f8      	str	r0, [r7, #12]
 800f3e4:	60b9      	str	r1, [r7, #8]
 800f3e6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 800f3ec:	4a0e      	ldr	r2, [pc, #56]	@ (800f428 <LL_DMA_ConfigTransfer+0x4c>)
 800f3ee:	68bb      	ldr	r3, [r7, #8]
 800f3f0:	4413      	add	r3, r2
 800f3f2:	781b      	ldrb	r3, [r3, #0]
 800f3f4:	461a      	mov	r2, r3
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	4413      	add	r3, r2
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800f400:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f404:	4908      	ldr	r1, [pc, #32]	@ (800f428 <LL_DMA_ConfigTransfer+0x4c>)
 800f406:	68ba      	ldr	r2, [r7, #8]
 800f408:	440a      	add	r2, r1
 800f40a:	7812      	ldrb	r2, [r2, #0]
 800f40c:	4611      	mov	r1, r2
 800f40e:	697a      	ldr	r2, [r7, #20]
 800f410:	440a      	add	r2, r1
 800f412:	4611      	mov	r1, r2
 800f414:	687a      	ldr	r2, [r7, #4]
 800f416:	4313      	orrs	r3, r2
 800f418:	600b      	str	r3, [r1, #0]
}
 800f41a:	bf00      	nop
 800f41c:	371c      	adds	r7, #28
 800f41e:	46bd      	mov	sp, r7
 800f420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f424:	4770      	bx	lr
 800f426:	bf00      	nop
 800f428:	0801882c 	.word	0x0801882c

0800f42c <LL_DMA_SetDataLength>:
{
 800f42c:	b480      	push	{r7}
 800f42e:	b087      	sub	sp, #28
 800f430:	af00      	add	r7, sp, #0
 800f432:	60f8      	str	r0, [r7, #12]
 800f434:	60b9      	str	r1, [r7, #8]
 800f436:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 800f43c:	4a0d      	ldr	r2, [pc, #52]	@ (800f474 <LL_DMA_SetDataLength+0x48>)
 800f43e:	68bb      	ldr	r3, [r7, #8]
 800f440:	4413      	add	r3, r2
 800f442:	781b      	ldrb	r3, [r3, #0]
 800f444:	461a      	mov	r2, r3
 800f446:	697b      	ldr	r3, [r7, #20]
 800f448:	4413      	add	r3, r2
 800f44a:	685b      	ldr	r3, [r3, #4]
 800f44c:	0c1b      	lsrs	r3, r3, #16
 800f44e:	041b      	lsls	r3, r3, #16
 800f450:	4908      	ldr	r1, [pc, #32]	@ (800f474 <LL_DMA_SetDataLength+0x48>)
 800f452:	68ba      	ldr	r2, [r7, #8]
 800f454:	440a      	add	r2, r1
 800f456:	7812      	ldrb	r2, [r2, #0]
 800f458:	4611      	mov	r1, r2
 800f45a:	697a      	ldr	r2, [r7, #20]
 800f45c:	440a      	add	r2, r1
 800f45e:	4611      	mov	r1, r2
 800f460:	687a      	ldr	r2, [r7, #4]
 800f462:	4313      	orrs	r3, r2
 800f464:	604b      	str	r3, [r1, #4]
}
 800f466:	bf00      	nop
 800f468:	371c      	adds	r7, #28
 800f46a:	46bd      	mov	sp, r7
 800f46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f470:	4770      	bx	lr
 800f472:	bf00      	nop
 800f474:	0801882c 	.word	0x0801882c

0800f478 <LL_DMA_SetMemoryAddress>:
{
 800f478:	b480      	push	{r7}
 800f47a:	b087      	sub	sp, #28
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	60f8      	str	r0, [r7, #12]
 800f480:	60b9      	str	r1, [r7, #8]
 800f482:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 800f488:	4a07      	ldr	r2, [pc, #28]	@ (800f4a8 <LL_DMA_SetMemoryAddress+0x30>)
 800f48a:	68bb      	ldr	r3, [r7, #8]
 800f48c:	4413      	add	r3, r2
 800f48e:	781b      	ldrb	r3, [r3, #0]
 800f490:	461a      	mov	r2, r3
 800f492:	697b      	ldr	r3, [r7, #20]
 800f494:	4413      	add	r3, r2
 800f496:	461a      	mov	r2, r3
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	60d3      	str	r3, [r2, #12]
}
 800f49c:	bf00      	nop
 800f49e:	371c      	adds	r7, #28
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a6:	4770      	bx	lr
 800f4a8:	0801882c 	.word	0x0801882c

0800f4ac <LL_DMA_SetPeriphAddress>:
{
 800f4ac:	b480      	push	{r7}
 800f4ae:	b087      	sub	sp, #28
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	60f8      	str	r0, [r7, #12]
 800f4b4:	60b9      	str	r1, [r7, #8]
 800f4b6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 800f4bc:	4a07      	ldr	r2, [pc, #28]	@ (800f4dc <LL_DMA_SetPeriphAddress+0x30>)
 800f4be:	68bb      	ldr	r3, [r7, #8]
 800f4c0:	4413      	add	r3, r2
 800f4c2:	781b      	ldrb	r3, [r3, #0]
 800f4c4:	461a      	mov	r2, r3
 800f4c6:	697b      	ldr	r3, [r7, #20]
 800f4c8:	4413      	add	r3, r2
 800f4ca:	461a      	mov	r2, r3
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	6093      	str	r3, [r2, #8]
}
 800f4d0:	bf00      	nop
 800f4d2:	371c      	adds	r7, #28
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4da:	4770      	bx	lr
 800f4dc:	0801882c 	.word	0x0801882c

0800f4e0 <LL_DMA_SetPeriphRequest>:
{
 800f4e0:	b480      	push	{r7}
 800f4e2:	b087      	sub	sp, #28
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	60f8      	str	r0, [r7, #12]
 800f4e8:	60b9      	str	r1, [r7, #8]
 800f4ea:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	0a9b      	lsrs	r3, r3, #10
 800f4f0:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800f4f4:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
 800f4f8:	00db      	lsls	r3, r3, #3
 800f4fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 800f4fc:	68ba      	ldr	r2, [r7, #8]
 800f4fe:	697b      	ldr	r3, [r7, #20]
 800f500:	4413      	add	r3, r2
 800f502:	009b      	lsls	r3, r3, #2
 800f504:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f508:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800f512:	68ba      	ldr	r2, [r7, #8]
 800f514:	697b      	ldr	r3, [r7, #20]
 800f516:	4413      	add	r3, r2
 800f518:	009b      	lsls	r3, r3, #2
 800f51a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f51e:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800f522:	687a      	ldr	r2, [r7, #4]
 800f524:	430a      	orrs	r2, r1
 800f526:	601a      	str	r2, [r3, #0]
}
 800f528:	bf00      	nop
 800f52a:	371c      	adds	r7, #28
 800f52c:	46bd      	mov	sp, r7
 800f52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f532:	4770      	bx	lr

0800f534 <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b084      	sub	sp, #16
 800f538:	af00      	add	r7, sp, #0
 800f53a:	60f8      	str	r0, [r7, #12]
 800f53c:	60b9      	str	r1, [r7, #8]
 800f53e:	607a      	str	r2, [r7, #4]
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	689a      	ldr	r2, [r3, #8]
                        DMA_InitStruct->Mode                   | \
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	68db      	ldr	r3, [r3, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800f548:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->Mode                   | \
 800f54e:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	695b      	ldr	r3, [r3, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800f554:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	699b      	ldr	r3, [r3, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800f55a:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	69db      	ldr	r3, [r3, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800f560:	431a      	orrs	r2, r3
                        DMA_InitStruct->Priority);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800f566:	4313      	orrs	r3, r2
 800f568:	461a      	mov	r2, r3
 800f56a:	68b9      	ldr	r1, [r7, #8]
 800f56c:	68f8      	ldr	r0, [r7, #12]
 800f56e:	f7ff ff35 	bl	800f3dc <LL_DMA_ConfigTransfer>

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	685b      	ldr	r3, [r3, #4]
 800f576:	461a      	mov	r2, r3
 800f578:	68b9      	ldr	r1, [r7, #8]
 800f57a:	68f8      	ldr	r0, [r7, #12]
 800f57c:	f7ff ff7c 	bl	800f478 <LL_DMA_SetMemoryAddress>

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	461a      	mov	r2, r3
 800f586:	68b9      	ldr	r1, [r7, #8]
 800f588:	68f8      	ldr	r0, [r7, #12]
 800f58a:	f7ff ff8f 	bl	800f4ac <LL_DMA_SetPeriphAddress>

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	6a1b      	ldr	r3, [r3, #32]
 800f592:	461a      	mov	r2, r3
 800f594:	68b9      	ldr	r1, [r7, #8]
 800f596:	68f8      	ldr	r0, [r7, #12]
 800f598:	f7ff ff48 	bl	800f42c <LL_DMA_SetDataLength>

  /*--------------------------- DMAMUXx CCR Configuration ----------------------
   * Configure the DMA request for DMA Channels on DMAMUX Channel x with parameter :
   * - PeriphRequest: DMA_CxCR[7:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5a0:	461a      	mov	r2, r3
 800f5a2:	68b9      	ldr	r1, [r7, #8]
 800f5a4:	68f8      	ldr	r0, [r7, #12]
 800f5a6:	f7ff ff9b 	bl	800f4e0 <LL_DMA_SetPeriphRequest>

  return (uint32_t)SUCCESS;
 800f5aa:	2300      	movs	r3, #0
}
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	3710      	adds	r7, #16
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	bd80      	pop	{r7, pc}

0800f5b4 <LL_DMA_StructInit>:
  * @brief  Set each @ref LL_DMA_InitTypeDef field to default value.
  * @param  DMA_InitStruct Pointer to a @ref LL_DMA_InitTypeDef structure.
  * @retval None
  */
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800f5b4:	b480      	push	{r7}
 800f5b6:	b083      	sub	sp, #12
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
  /* Set DMA_InitStruct fields to default values */
  DMA_InitStruct->PeriphOrM2MSrcAddress  = (uint32_t)0x00000000U;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	2200      	movs	r2, #0
 800f5c0:	601a      	str	r2, [r3, #0]
  DMA_InitStruct->MemoryOrM2MDstAddress  = (uint32_t)0x00000000U;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	605a      	str	r2, [r3, #4]
  DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	609a      	str	r2, [r3, #8]
  DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	60da      	str	r2, [r3, #12]
  DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	611a      	str	r2, [r3, #16]
  DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	2200      	movs	r2, #0
 800f5de:	615a      	str	r2, [r3, #20]
  DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	619a      	str	r2, [r3, #24]
  DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	61da      	str	r2, [r3, #28]
  DMA_InitStruct->NbData                 = (uint32_t)0x00000000U;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	621a      	str	r2, [r3, #32]
  DMA_InitStruct->PeriphRequest          = LL_DMAMUX_REQ_MEM2MEM;
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	2200      	movs	r2, #0
 800f5f6:	625a      	str	r2, [r3, #36]	@ 0x24
  DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800f5fe:	bf00      	nop
 800f600:	370c      	adds	r7, #12
 800f602:	46bd      	mov	sp, r7
 800f604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f608:	4770      	bx	lr

0800f60a <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800f60a:	b480      	push	{r7}
 800f60c:	b08b      	sub	sp, #44	@ 0x2c
 800f60e:	af00      	add	r7, sp, #0
 800f610:	60f8      	str	r0, [r7, #12]
 800f612:	60b9      	str	r1, [r7, #8]
 800f614:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	681a      	ldr	r2, [r3, #0]
 800f61a:	68bb      	ldr	r3, [r7, #8]
 800f61c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f61e:	697b      	ldr	r3, [r7, #20]
 800f620:	fa93 f3a3 	rbit	r3, r3
 800f624:	613b      	str	r3, [r7, #16]
  return result;
 800f626:	693b      	ldr	r3, [r7, #16]
 800f628:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800f62a:	69bb      	ldr	r3, [r7, #24]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d101      	bne.n	800f634 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800f630:	2320      	movs	r3, #32
 800f632:	e003      	b.n	800f63c <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800f634:	69bb      	ldr	r3, [r7, #24]
 800f636:	fab3 f383 	clz	r3, r3
 800f63a:	b2db      	uxtb	r3, r3
 800f63c:	005b      	lsls	r3, r3, #1
 800f63e:	2103      	movs	r1, #3
 800f640:	fa01 f303 	lsl.w	r3, r1, r3
 800f644:	43db      	mvns	r3, r3
 800f646:	401a      	ands	r2, r3
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f64c:	6a3b      	ldr	r3, [r7, #32]
 800f64e:	fa93 f3a3 	rbit	r3, r3
 800f652:	61fb      	str	r3, [r7, #28]
  return result;
 800f654:	69fb      	ldr	r3, [r7, #28]
 800f656:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800f658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d101      	bne.n	800f662 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800f65e:	2320      	movs	r3, #32
 800f660:	e003      	b.n	800f66a <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800f662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f664:	fab3 f383 	clz	r3, r3
 800f668:	b2db      	uxtb	r3, r3
 800f66a:	005b      	lsls	r3, r3, #1
 800f66c:	6879      	ldr	r1, [r7, #4]
 800f66e:	fa01 f303 	lsl.w	r3, r1, r3
 800f672:	431a      	orrs	r2, r3
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	601a      	str	r2, [r3, #0]
}
 800f678:	bf00      	nop
 800f67a:	372c      	adds	r7, #44	@ 0x2c
 800f67c:	46bd      	mov	sp, r7
 800f67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f682:	4770      	bx	lr

0800f684 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800f684:	b480      	push	{r7}
 800f686:	b085      	sub	sp, #20
 800f688:	af00      	add	r7, sp, #0
 800f68a:	60f8      	str	r0, [r7, #12]
 800f68c:	60b9      	str	r1, [r7, #8]
 800f68e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	685a      	ldr	r2, [r3, #4]
 800f694:	68bb      	ldr	r3, [r7, #8]
 800f696:	43db      	mvns	r3, r3
 800f698:	401a      	ands	r2, r3
 800f69a:	68bb      	ldr	r3, [r7, #8]
 800f69c:	6879      	ldr	r1, [r7, #4]
 800f69e:	fb01 f303 	mul.w	r3, r1, r3
 800f6a2:	431a      	orrs	r2, r3
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	605a      	str	r2, [r3, #4]
}
 800f6a8:	bf00      	nop
 800f6aa:	3714      	adds	r7, #20
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b2:	4770      	bx	lr

0800f6b4 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800f6b4:	b480      	push	{r7}
 800f6b6:	b08b      	sub	sp, #44	@ 0x2c
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	60f8      	str	r0, [r7, #12]
 800f6bc:	60b9      	str	r1, [r7, #8]
 800f6be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	689a      	ldr	r2, [r3, #8]
 800f6c4:	68bb      	ldr	r3, [r7, #8]
 800f6c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f6c8:	697b      	ldr	r3, [r7, #20]
 800f6ca:	fa93 f3a3 	rbit	r3, r3
 800f6ce:	613b      	str	r3, [r7, #16]
  return result;
 800f6d0:	693b      	ldr	r3, [r7, #16]
 800f6d2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800f6d4:	69bb      	ldr	r3, [r7, #24]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d101      	bne.n	800f6de <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800f6da:	2320      	movs	r3, #32
 800f6dc:	e003      	b.n	800f6e6 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800f6de:	69bb      	ldr	r3, [r7, #24]
 800f6e0:	fab3 f383 	clz	r3, r3
 800f6e4:	b2db      	uxtb	r3, r3
 800f6e6:	005b      	lsls	r3, r3, #1
 800f6e8:	2103      	movs	r1, #3
 800f6ea:	fa01 f303 	lsl.w	r3, r1, r3
 800f6ee:	43db      	mvns	r3, r3
 800f6f0:	401a      	ands	r2, r3
 800f6f2:	68bb      	ldr	r3, [r7, #8]
 800f6f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f6f6:	6a3b      	ldr	r3, [r7, #32]
 800f6f8:	fa93 f3a3 	rbit	r3, r3
 800f6fc:	61fb      	str	r3, [r7, #28]
  return result;
 800f6fe:	69fb      	ldr	r3, [r7, #28]
 800f700:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800f702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f704:	2b00      	cmp	r3, #0
 800f706:	d101      	bne.n	800f70c <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800f708:	2320      	movs	r3, #32
 800f70a:	e003      	b.n	800f714 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800f70c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f70e:	fab3 f383 	clz	r3, r3
 800f712:	b2db      	uxtb	r3, r3
 800f714:	005b      	lsls	r3, r3, #1
 800f716:	6879      	ldr	r1, [r7, #4]
 800f718:	fa01 f303 	lsl.w	r3, r1, r3
 800f71c:	431a      	orrs	r2, r3
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800f722:	bf00      	nop
 800f724:	372c      	adds	r7, #44	@ 0x2c
 800f726:	46bd      	mov	sp, r7
 800f728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72c:	4770      	bx	lr

0800f72e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800f72e:	b480      	push	{r7}
 800f730:	b08b      	sub	sp, #44	@ 0x2c
 800f732:	af00      	add	r7, sp, #0
 800f734:	60f8      	str	r0, [r7, #12]
 800f736:	60b9      	str	r1, [r7, #8]
 800f738:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	68da      	ldr	r2, [r3, #12]
 800f73e:	68bb      	ldr	r3, [r7, #8]
 800f740:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f742:	697b      	ldr	r3, [r7, #20]
 800f744:	fa93 f3a3 	rbit	r3, r3
 800f748:	613b      	str	r3, [r7, #16]
  return result;
 800f74a:	693b      	ldr	r3, [r7, #16]
 800f74c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800f74e:	69bb      	ldr	r3, [r7, #24]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d101      	bne.n	800f758 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800f754:	2320      	movs	r3, #32
 800f756:	e003      	b.n	800f760 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800f758:	69bb      	ldr	r3, [r7, #24]
 800f75a:	fab3 f383 	clz	r3, r3
 800f75e:	b2db      	uxtb	r3, r3
 800f760:	005b      	lsls	r3, r3, #1
 800f762:	2103      	movs	r1, #3
 800f764:	fa01 f303 	lsl.w	r3, r1, r3
 800f768:	43db      	mvns	r3, r3
 800f76a:	401a      	ands	r2, r3
 800f76c:	68bb      	ldr	r3, [r7, #8]
 800f76e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f770:	6a3b      	ldr	r3, [r7, #32]
 800f772:	fa93 f3a3 	rbit	r3, r3
 800f776:	61fb      	str	r3, [r7, #28]
  return result;
 800f778:	69fb      	ldr	r3, [r7, #28]
 800f77a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800f77c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d101      	bne.n	800f786 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800f782:	2320      	movs	r3, #32
 800f784:	e003      	b.n	800f78e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800f786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f788:	fab3 f383 	clz	r3, r3
 800f78c:	b2db      	uxtb	r3, r3
 800f78e:	005b      	lsls	r3, r3, #1
 800f790:	6879      	ldr	r1, [r7, #4]
 800f792:	fa01 f303 	lsl.w	r3, r1, r3
 800f796:	431a      	orrs	r2, r3
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	60da      	str	r2, [r3, #12]
}
 800f79c:	bf00      	nop
 800f79e:	372c      	adds	r7, #44	@ 0x2c
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a6:	4770      	bx	lr

0800f7a8 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800f7a8:	b480      	push	{r7}
 800f7aa:	b08b      	sub	sp, #44	@ 0x2c
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	60f8      	str	r0, [r7, #12]
 800f7b0:	60b9      	str	r1, [r7, #8]
 800f7b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	6a1a      	ldr	r2, [r3, #32]
 800f7b8:	68bb      	ldr	r3, [r7, #8]
 800f7ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f7bc:	697b      	ldr	r3, [r7, #20]
 800f7be:	fa93 f3a3 	rbit	r3, r3
 800f7c2:	613b      	str	r3, [r7, #16]
  return result;
 800f7c4:	693b      	ldr	r3, [r7, #16]
 800f7c6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800f7c8:	69bb      	ldr	r3, [r7, #24]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d101      	bne.n	800f7d2 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800f7ce:	2320      	movs	r3, #32
 800f7d0:	e003      	b.n	800f7da <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800f7d2:	69bb      	ldr	r3, [r7, #24]
 800f7d4:	fab3 f383 	clz	r3, r3
 800f7d8:	b2db      	uxtb	r3, r3
 800f7da:	009b      	lsls	r3, r3, #2
 800f7dc:	210f      	movs	r1, #15
 800f7de:	fa01 f303 	lsl.w	r3, r1, r3
 800f7e2:	43db      	mvns	r3, r3
 800f7e4:	401a      	ands	r2, r3
 800f7e6:	68bb      	ldr	r3, [r7, #8]
 800f7e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f7ea:	6a3b      	ldr	r3, [r7, #32]
 800f7ec:	fa93 f3a3 	rbit	r3, r3
 800f7f0:	61fb      	str	r3, [r7, #28]
  return result;
 800f7f2:	69fb      	ldr	r3, [r7, #28]
 800f7f4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800f7f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d101      	bne.n	800f800 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800f7fc:	2320      	movs	r3, #32
 800f7fe:	e003      	b.n	800f808 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800f800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f802:	fab3 f383 	clz	r3, r3
 800f806:	b2db      	uxtb	r3, r3
 800f808:	009b      	lsls	r3, r3, #2
 800f80a:	6879      	ldr	r1, [r7, #4]
 800f80c:	fa01 f303 	lsl.w	r3, r1, r3
 800f810:	431a      	orrs	r2, r3
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800f816:	bf00      	nop
 800f818:	372c      	adds	r7, #44	@ 0x2c
 800f81a:	46bd      	mov	sp, r7
 800f81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f820:	4770      	bx	lr

0800f822 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800f822:	b480      	push	{r7}
 800f824:	b08b      	sub	sp, #44	@ 0x2c
 800f826:	af00      	add	r7, sp, #0
 800f828:	60f8      	str	r0, [r7, #12]
 800f82a:	60b9      	str	r1, [r7, #8]
 800f82c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f832:	68bb      	ldr	r3, [r7, #8]
 800f834:	0a1b      	lsrs	r3, r3, #8
 800f836:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f838:	697b      	ldr	r3, [r7, #20]
 800f83a:	fa93 f3a3 	rbit	r3, r3
 800f83e:	613b      	str	r3, [r7, #16]
  return result;
 800f840:	693b      	ldr	r3, [r7, #16]
 800f842:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800f844:	69bb      	ldr	r3, [r7, #24]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d101      	bne.n	800f84e <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800f84a:	2320      	movs	r3, #32
 800f84c:	e003      	b.n	800f856 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800f84e:	69bb      	ldr	r3, [r7, #24]
 800f850:	fab3 f383 	clz	r3, r3
 800f854:	b2db      	uxtb	r3, r3
 800f856:	009b      	lsls	r3, r3, #2
 800f858:	210f      	movs	r1, #15
 800f85a:	fa01 f303 	lsl.w	r3, r1, r3
 800f85e:	43db      	mvns	r3, r3
 800f860:	401a      	ands	r2, r3
 800f862:	68bb      	ldr	r3, [r7, #8]
 800f864:	0a1b      	lsrs	r3, r3, #8
 800f866:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f868:	6a3b      	ldr	r3, [r7, #32]
 800f86a:	fa93 f3a3 	rbit	r3, r3
 800f86e:	61fb      	str	r3, [r7, #28]
  return result;
 800f870:	69fb      	ldr	r3, [r7, #28]
 800f872:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800f874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f876:	2b00      	cmp	r3, #0
 800f878:	d101      	bne.n	800f87e <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800f87a:	2320      	movs	r3, #32
 800f87c:	e003      	b.n	800f886 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800f87e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f880:	fab3 f383 	clz	r3, r3
 800f884:	b2db      	uxtb	r3, r3
 800f886:	009b      	lsls	r3, r3, #2
 800f888:	6879      	ldr	r1, [r7, #4]
 800f88a:	fa01 f303 	lsl.w	r3, r1, r3
 800f88e:	431a      	orrs	r2, r3
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800f894:	bf00      	nop
 800f896:	372c      	adds	r7, #44	@ 0x2c
 800f898:	46bd      	mov	sp, r7
 800f89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89e:	4770      	bx	lr

0800f8a0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b088      	sub	sp, #32
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
 800f8a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800f8aa:	683b      	ldr	r3, [r7, #0]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f8b0:	693b      	ldr	r3, [r7, #16]
 800f8b2:	fa93 f3a3 	rbit	r3, r3
 800f8b6:	60fb      	str	r3, [r7, #12]
  return result;
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800f8bc:	697b      	ldr	r3, [r7, #20]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d101      	bne.n	800f8c6 <LL_GPIO_Init+0x26>
    return 32U;
 800f8c2:	2320      	movs	r3, #32
 800f8c4:	e003      	b.n	800f8ce <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800f8c6:	697b      	ldr	r3, [r7, #20]
 800f8c8:	fab3 f383 	clz	r3, r3
 800f8cc:	b2db      	uxtb	r3, r3
 800f8ce:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800f8d0:	e048      	b.n	800f964 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800f8d2:	683b      	ldr	r3, [r7, #0]
 800f8d4:	681a      	ldr	r2, [r3, #0]
 800f8d6:	2101      	movs	r1, #1
 800f8d8:	69fb      	ldr	r3, [r7, #28]
 800f8da:	fa01 f303 	lsl.w	r3, r1, r3
 800f8de:	4013      	ands	r3, r2
 800f8e0:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800f8e2:	69bb      	ldr	r3, [r7, #24]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d03a      	beq.n	800f95e <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	685b      	ldr	r3, [r3, #4]
 800f8ec:	2b01      	cmp	r3, #1
 800f8ee:	d003      	beq.n	800f8f8 <LL_GPIO_Init+0x58>
 800f8f0:	683b      	ldr	r3, [r7, #0]
 800f8f2:	685b      	ldr	r3, [r3, #4]
 800f8f4:	2b02      	cmp	r3, #2
 800f8f6:	d10e      	bne.n	800f916 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	689b      	ldr	r3, [r3, #8]
 800f8fc:	461a      	mov	r2, r3
 800f8fe:	69b9      	ldr	r1, [r7, #24]
 800f900:	6878      	ldr	r0, [r7, #4]
 800f902:	f7ff fed7 	bl	800f6b4 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800f906:	683b      	ldr	r3, [r7, #0]
 800f908:	6819      	ldr	r1, [r3, #0]
 800f90a:	683b      	ldr	r3, [r7, #0]
 800f90c:	68db      	ldr	r3, [r3, #12]
 800f90e:	461a      	mov	r2, r3
 800f910:	6878      	ldr	r0, [r7, #4]
 800f912:	f7ff feb7 	bl	800f684 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	691b      	ldr	r3, [r3, #16]
 800f91a:	461a      	mov	r2, r3
 800f91c:	69b9      	ldr	r1, [r7, #24]
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	f7ff ff05 	bl	800f72e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800f924:	683b      	ldr	r3, [r7, #0]
 800f926:	685b      	ldr	r3, [r3, #4]
 800f928:	2b02      	cmp	r3, #2
 800f92a:	d111      	bne.n	800f950 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800f92c:	69bb      	ldr	r3, [r7, #24]
 800f92e:	2bff      	cmp	r3, #255	@ 0xff
 800f930:	d807      	bhi.n	800f942 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800f932:	683b      	ldr	r3, [r7, #0]
 800f934:	695b      	ldr	r3, [r3, #20]
 800f936:	461a      	mov	r2, r3
 800f938:	69b9      	ldr	r1, [r7, #24]
 800f93a:	6878      	ldr	r0, [r7, #4]
 800f93c:	f7ff ff34 	bl	800f7a8 <LL_GPIO_SetAFPin_0_7>
 800f940:	e006      	b.n	800f950 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	695b      	ldr	r3, [r3, #20]
 800f946:	461a      	mov	r2, r3
 800f948:	69b9      	ldr	r1, [r7, #24]
 800f94a:	6878      	ldr	r0, [r7, #4]
 800f94c:	f7ff ff69 	bl	800f822 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800f950:	683b      	ldr	r3, [r7, #0]
 800f952:	685b      	ldr	r3, [r3, #4]
 800f954:	461a      	mov	r2, r3
 800f956:	69b9      	ldr	r1, [r7, #24]
 800f958:	6878      	ldr	r0, [r7, #4]
 800f95a:	f7ff fe56 	bl	800f60a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800f95e:	69fb      	ldr	r3, [r7, #28]
 800f960:	3301      	adds	r3, #1
 800f962:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800f964:	683b      	ldr	r3, [r7, #0]
 800f966:	681a      	ldr	r2, [r3, #0]
 800f968:	69fb      	ldr	r3, [r7, #28]
 800f96a:	fa22 f303 	lsr.w	r3, r2, r3
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d1af      	bne.n	800f8d2 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 800f972:	2300      	movs	r3, #0
}
 800f974:	4618      	mov	r0, r3
 800f976:	3720      	adds	r7, #32
 800f978:	46bd      	mov	sp, r7
 800f97a:	bd80      	pop	{r7, pc}

0800f97c <LL_UCPD_Disable>:
  * @rmtoll CFG1          UCPDEN           LL_UCPD_Disable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_Disable(UCPD_TypeDef *UCPDx)
{
 800f97c:	b480      	push	{r7}
 800f97e:	b083      	sub	sp, #12
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	601a      	str	r2, [r3, #0]
}
 800f990:	bf00      	nop
 800f992:	370c      	adds	r7, #12
 800f994:	46bd      	mov	sp, r7
 800f996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99a:	4770      	bx	lr

0800f99c <LL_APB1_GRP2_EnableClock>:
{
 800f99c:	b480      	push	{r7}
 800f99e:	b085      	sub	sp, #20
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 800f9a4:	4b08      	ldr	r3, [pc, #32]	@ (800f9c8 <LL_APB1_GRP2_EnableClock+0x2c>)
 800f9a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f9a8:	4907      	ldr	r1, [pc, #28]	@ (800f9c8 <LL_APB1_GRP2_EnableClock+0x2c>)
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	4313      	orrs	r3, r2
 800f9ae:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800f9b0:	4b05      	ldr	r3, [pc, #20]	@ (800f9c8 <LL_APB1_GRP2_EnableClock+0x2c>)
 800f9b2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	4013      	ands	r3, r2
 800f9b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800f9ba:	68fb      	ldr	r3, [r7, #12]
}
 800f9bc:	bf00      	nop
 800f9be:	3714      	adds	r7, #20
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c6:	4770      	bx	lr
 800f9c8:	40021000 	.word	0x40021000

0800f9cc <LL_UCPD_Init>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure that contains
  *         the configuration information for the UCPD peripheral.
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_UCPD_Init(UCPD_TypeDef *UCPDx, const LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b082      	sub	sp, #8
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
 800f9d4:	6039      	str	r1, [r7, #0]
  /* Check the ucpd Instance UCPDx*/
  assert_param(IS_UCPD_ALL_INSTANCE(UCPDx));

  if (UCPD1 == UCPDx)
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	4a11      	ldr	r2, [pc, #68]	@ (800fa20 <LL_UCPD_Init+0x54>)
 800f9da:	4293      	cmp	r3, r2
 800f9dc:	d103      	bne.n	800f9e6 <LL_UCPD_Init+0x1a>
  {
    LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 800f9de:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800f9e2:	f7ff ffdb 	bl	800f99c <LL_APB1_GRP2_EnableClock>
  }


  LL_UCPD_Disable(UCPDx);
 800f9e6:	6878      	ldr	r0, [r7, #4]
 800f9e8:	f7ff ffc8 	bl	800f97c <LL_UCPD_Disable>

  /*---------------------------- UCPDx CFG1 Configuration ------------------------*/
  MODIFY_REG(UCPDx->CFG1,
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681a      	ldr	r2, [r3, #0]
 800f9f0:	4b0c      	ldr	r3, [pc, #48]	@ (800fa24 <LL_UCPD_Init+0x58>)
 800f9f2:	4013      	ands	r3, r2
 800f9f4:	683a      	ldr	r2, [r7, #0]
 800f9f6:	6811      	ldr	r1, [r2, #0]
 800f9f8:	683a      	ldr	r2, [r7, #0]
 800f9fa:	6852      	ldr	r2, [r2, #4]
 800f9fc:	02d2      	lsls	r2, r2, #11
 800f9fe:	4311      	orrs	r1, r2
 800fa00:	683a      	ldr	r2, [r7, #0]
 800fa02:	6892      	ldr	r2, [r2, #8]
 800fa04:	0192      	lsls	r2, r2, #6
 800fa06:	4311      	orrs	r1, r2
 800fa08:	683a      	ldr	r2, [r7, #0]
 800fa0a:	68d2      	ldr	r2, [r2, #12]
 800fa0c:	430a      	orrs	r2, r1
 800fa0e:	431a      	orrs	r2, r3
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	601a      	str	r2, [r3, #0]
             UCPD_CFG1_PSC_UCPDCLK | UCPD_CFG1_TRANSWIN | UCPD_CFG1_IFRGAP | UCPD_CFG1_HBITCLKDIV,
             UCPD_InitStruct->psc_ucpdclk | (UCPD_InitStruct->transwin  << UCPD_CFG1_TRANSWIN_Pos) |
             (UCPD_InitStruct->IfrGap << UCPD_CFG1_IFRGAP_Pos) | UCPD_InitStruct->HbitClockDiv);

  return SUCCESS;
 800fa14:	2300      	movs	r3, #0
}
 800fa16:	4618      	mov	r0, r3
 800fa18:	3708      	adds	r7, #8
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	bd80      	pop	{r7, pc}
 800fa1e:	bf00      	nop
 800fa20:	4000a000 	.word	0x4000a000
 800fa24:	fff10000 	.word	0xfff10000

0800fa28 <LL_UCPD_StructInit>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure
  *         whose fields will be set to default values.
  * @retval None
  */
void LL_UCPD_StructInit(LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 800fa28:	b480      	push	{r7}
 800fa2a:	b083      	sub	sp, #12
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
  /* Set UCPD_InitStruct fields to default values */
  UCPD_InitStruct->psc_ucpdclk  = LL_UCPD_PSC_DIV2;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800fa36:	601a      	str	r2, [r3, #0]
  UCPD_InitStruct->transwin     = 0x7;   /* Divide by 8                     */
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	2207      	movs	r2, #7
 800fa3c:	605a      	str	r2, [r3, #4]
  UCPD_InitStruct->IfrGap       = 0x10;  /* Divide by 17                    */
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	2210      	movs	r2, #16
 800fa42:	609a      	str	r2, [r3, #8]
  UCPD_InitStruct->HbitClockDiv = 0x0D;  /* Divide by 14 to produce HBITCLK */
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	220d      	movs	r2, #13
 800fa48:	60da      	str	r2, [r3, #12]
}
 800fa4a:	bf00      	nop
 800fa4c:	370c      	adds	r7, #12
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa54:	4770      	bx	lr
	...

0800fa58 <__NVIC_EnableIRQ>:
{
 800fa58:	b480      	push	{r7}
 800fa5a:	b083      	sub	sp, #12
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	4603      	mov	r3, r0
 800fa60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fa62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	db0b      	blt.n	800fa82 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800fa6a:	79fb      	ldrb	r3, [r7, #7]
 800fa6c:	f003 021f 	and.w	r2, r3, #31
 800fa70:	4907      	ldr	r1, [pc, #28]	@ (800fa90 <__NVIC_EnableIRQ+0x38>)
 800fa72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fa76:	095b      	lsrs	r3, r3, #5
 800fa78:	2001      	movs	r0, #1
 800fa7a:	fa00 f202 	lsl.w	r2, r0, r2
 800fa7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800fa82:	bf00      	nop
 800fa84:	370c      	adds	r7, #12
 800fa86:	46bd      	mov	sp, r7
 800fa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8c:	4770      	bx	lr
 800fa8e:	bf00      	nop
 800fa90:	e000e100 	.word	0xe000e100

0800fa94 <__NVIC_SetPriority>:
{
 800fa94:	b480      	push	{r7}
 800fa96:	b083      	sub	sp, #12
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	6039      	str	r1, [r7, #0]
 800fa9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800faa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	db0a      	blt.n	800fabe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800faa8:	683b      	ldr	r3, [r7, #0]
 800faaa:	b2da      	uxtb	r2, r3
 800faac:	490c      	ldr	r1, [pc, #48]	@ (800fae0 <__NVIC_SetPriority+0x4c>)
 800faae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fab2:	0112      	lsls	r2, r2, #4
 800fab4:	b2d2      	uxtb	r2, r2
 800fab6:	440b      	add	r3, r1
 800fab8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800fabc:	e00a      	b.n	800fad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fabe:	683b      	ldr	r3, [r7, #0]
 800fac0:	b2da      	uxtb	r2, r3
 800fac2:	4908      	ldr	r1, [pc, #32]	@ (800fae4 <__NVIC_SetPriority+0x50>)
 800fac4:	79fb      	ldrb	r3, [r7, #7]
 800fac6:	f003 030f 	and.w	r3, r3, #15
 800faca:	3b04      	subs	r3, #4
 800facc:	0112      	lsls	r2, r2, #4
 800face:	b2d2      	uxtb	r2, r2
 800fad0:	440b      	add	r3, r1
 800fad2:	761a      	strb	r2, [r3, #24]
}
 800fad4:	bf00      	nop
 800fad6:	370c      	adds	r7, #12
 800fad8:	46bd      	mov	sp, r7
 800fada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fade:	4770      	bx	lr
 800fae0:	e000e100 	.word	0xe000e100
 800fae4:	e000ed00 	.word	0xe000ed00

0800fae8 <LL_AHB2_GRP1_EnableClock>:
{
 800fae8:	b480      	push	{r7}
 800faea:	b085      	sub	sp, #20
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800faf0:	4b08      	ldr	r3, [pc, #32]	@ (800fb14 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800faf2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800faf4:	4907      	ldr	r1, [pc, #28]	@ (800fb14 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	4313      	orrs	r3, r2
 800fafa:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800fafc:	4b05      	ldr	r3, [pc, #20]	@ (800fb14 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800fafe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	4013      	ands	r3, r2
 800fb04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800fb06:	68fb      	ldr	r3, [r7, #12]
}
 800fb08:	bf00      	nop
 800fb0a:	3714      	adds	r7, #20
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb12:	4770      	bx	lr
 800fb14:	40021000 	.word	0x40021000

0800fb18 <LL_GPIO_SetPinMode>:
{
 800fb18:	b480      	push	{r7}
 800fb1a:	b08b      	sub	sp, #44	@ 0x2c
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	60f8      	str	r0, [r7, #12]
 800fb20:	60b9      	str	r1, [r7, #8]
 800fb22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	681a      	ldr	r2, [r3, #0]
 800fb28:	68bb      	ldr	r3, [r7, #8]
 800fb2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fb2c:	697b      	ldr	r3, [r7, #20]
 800fb2e:	fa93 f3a3 	rbit	r3, r3
 800fb32:	613b      	str	r3, [r7, #16]
  return result;
 800fb34:	693b      	ldr	r3, [r7, #16]
 800fb36:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800fb38:	69bb      	ldr	r3, [r7, #24]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d101      	bne.n	800fb42 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800fb3e:	2320      	movs	r3, #32
 800fb40:	e003      	b.n	800fb4a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800fb42:	69bb      	ldr	r3, [r7, #24]
 800fb44:	fab3 f383 	clz	r3, r3
 800fb48:	b2db      	uxtb	r3, r3
 800fb4a:	005b      	lsls	r3, r3, #1
 800fb4c:	2103      	movs	r1, #3
 800fb4e:	fa01 f303 	lsl.w	r3, r1, r3
 800fb52:	43db      	mvns	r3, r3
 800fb54:	401a      	ands	r2, r3
 800fb56:	68bb      	ldr	r3, [r7, #8]
 800fb58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fb5a:	6a3b      	ldr	r3, [r7, #32]
 800fb5c:	fa93 f3a3 	rbit	r3, r3
 800fb60:	61fb      	str	r3, [r7, #28]
  return result;
 800fb62:	69fb      	ldr	r3, [r7, #28]
 800fb64:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800fb66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d101      	bne.n	800fb70 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800fb6c:	2320      	movs	r3, #32
 800fb6e:	e003      	b.n	800fb78 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800fb70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb72:	fab3 f383 	clz	r3, r3
 800fb76:	b2db      	uxtb	r3, r3
 800fb78:	005b      	lsls	r3, r3, #1
 800fb7a:	6879      	ldr	r1, [r7, #4]
 800fb7c:	fa01 f303 	lsl.w	r3, r1, r3
 800fb80:	431a      	orrs	r2, r3
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	601a      	str	r2, [r3, #0]
}
 800fb86:	bf00      	nop
 800fb88:	372c      	adds	r7, #44	@ 0x2c
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb90:	4770      	bx	lr

0800fb92 <LL_GPIO_SetPinPull>:
{
 800fb92:	b480      	push	{r7}
 800fb94:	b08b      	sub	sp, #44	@ 0x2c
 800fb96:	af00      	add	r7, sp, #0
 800fb98:	60f8      	str	r0, [r7, #12]
 800fb9a:	60b9      	str	r1, [r7, #8]
 800fb9c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	68da      	ldr	r2, [r3, #12]
 800fba2:	68bb      	ldr	r3, [r7, #8]
 800fba4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fba6:	697b      	ldr	r3, [r7, #20]
 800fba8:	fa93 f3a3 	rbit	r3, r3
 800fbac:	613b      	str	r3, [r7, #16]
  return result;
 800fbae:	693b      	ldr	r3, [r7, #16]
 800fbb0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800fbb2:	69bb      	ldr	r3, [r7, #24]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d101      	bne.n	800fbbc <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800fbb8:	2320      	movs	r3, #32
 800fbba:	e003      	b.n	800fbc4 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800fbbc:	69bb      	ldr	r3, [r7, #24]
 800fbbe:	fab3 f383 	clz	r3, r3
 800fbc2:	b2db      	uxtb	r3, r3
 800fbc4:	005b      	lsls	r3, r3, #1
 800fbc6:	2103      	movs	r1, #3
 800fbc8:	fa01 f303 	lsl.w	r3, r1, r3
 800fbcc:	43db      	mvns	r3, r3
 800fbce:	401a      	ands	r2, r3
 800fbd0:	68bb      	ldr	r3, [r7, #8]
 800fbd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fbd4:	6a3b      	ldr	r3, [r7, #32]
 800fbd6:	fa93 f3a3 	rbit	r3, r3
 800fbda:	61fb      	str	r3, [r7, #28]
  return result;
 800fbdc:	69fb      	ldr	r3, [r7, #28]
 800fbde:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800fbe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d101      	bne.n	800fbea <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800fbe6:	2320      	movs	r3, #32
 800fbe8:	e003      	b.n	800fbf2 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800fbea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbec:	fab3 f383 	clz	r3, r3
 800fbf0:	b2db      	uxtb	r3, r3
 800fbf2:	005b      	lsls	r3, r3, #1
 800fbf4:	6879      	ldr	r1, [r7, #4]
 800fbf6:	fa01 f303 	lsl.w	r3, r1, r3
 800fbfa:	431a      	orrs	r2, r3
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	60da      	str	r2, [r3, #12]
}
 800fc00:	bf00      	nop
 800fc02:	372c      	adds	r7, #44	@ 0x2c
 800fc04:	46bd      	mov	sp, r7
 800fc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0a:	4770      	bx	lr

0800fc0c <LL_UCPD_Enable>:
{
 800fc0c:	b480      	push	{r7}
 800fc0e:	b083      	sub	sp, #12
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	601a      	str	r2, [r3, #0]
}
 800fc20:	bf00      	nop
 800fc22:	370c      	adds	r7, #12
 800fc24:	46bd      	mov	sp, r7
 800fc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2a:	4770      	bx	lr

0800fc2c <LL_UCPD_SetRxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT1
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetRxOrderSet(UCPD_TypeDef *UCPDx, uint32_t OrderSet)
{
 800fc2c:	b480      	push	{r7}
 800fc2e:	b083      	sub	sp, #12
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
 800fc34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CFG1, UCPD_CFG1_RXORDSETEN, OrderSet);
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800fc3e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800fc42:	683a      	ldr	r2, [r7, #0]
 800fc44:	431a      	orrs	r2, r3
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	601a      	str	r2, [r3, #0]
}
 800fc4a:	bf00      	nop
 800fc4c:	370c      	adds	r7, #12
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc54:	4770      	bx	lr

0800fc56 <LL_UCPD_SetccEnable>:
  *         @arg @ref LL_UCPD_CCENABLE_CC2
  *         @arg @ref LL_UCPD_CCENABLE_CC1CC2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetccEnable(UCPD_TypeDef *UCPDx, uint32_t CCEnable)
{
 800fc56:	b480      	push	{r7}
 800fc58:	b083      	sub	sp, #12
 800fc5a:	af00      	add	r7, sp, #0
 800fc5c:	6078      	str	r0, [r7, #4]
 800fc5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	68db      	ldr	r3, [r3, #12]
 800fc64:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	431a      	orrs	r2, r3
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	60da      	str	r2, [r3, #12]
}
 800fc70:	bf00      	nop
 800fc72:	370c      	adds	r7, #12
 800fc74:	46bd      	mov	sp, r7
 800fc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7a:	4770      	bx	lr

0800fc7c <LL_UCPD_EnableIT_TypeCEventCC2>:
  * @rmtoll IMR          TYPECEVT2IE        LL_UCPD_EnableIT_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 800fc7c:	b480      	push	{r7}
 800fc7e:	b083      	sub	sp, #12
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT2IE);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	691b      	ldr	r3, [r3, #16]
 800fc88:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	611a      	str	r2, [r3, #16]
}
 800fc90:	bf00      	nop
 800fc92:	370c      	adds	r7, #12
 800fc94:	46bd      	mov	sp, r7
 800fc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9a:	4770      	bx	lr

0800fc9c <LL_UCPD_EnableIT_TypeCEventCC1>:
  * @rmtoll IMR          TYPECEVT1IE        LL_UCPD_EnableIT_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 800fc9c:	b480      	push	{r7}
 800fc9e:	b083      	sub	sp, #12
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT1IE);
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	691b      	ldr	r3, [r3, #16]
 800fca8:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	611a      	str	r2, [r3, #16]
}
 800fcb0:	bf00      	nop
 800fcb2:	370c      	adds	r7, #12
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcba:	4770      	bx	lr

0800fcbc <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 800fcbc:	b480      	push	{r7}
 800fcbe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800fcc0:	4b05      	ldr	r3, [pc, #20]	@ (800fcd8 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800fcc2:	689b      	ldr	r3, [r3, #8]
 800fcc4:	4a04      	ldr	r2, [pc, #16]	@ (800fcd8 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800fcc6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800fcca:	6093      	str	r3, [r2, #8]
}
 800fccc:	bf00      	nop
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd4:	4770      	bx	lr
 800fcd6:	bf00      	nop
 800fcd8:	40007000 	.word	0x40007000

0800fcdc <CAD_Init>:
  * @param  pParams       Pointer on PD parameters based on @ref USBPD_ParamsTypeDef
  * @param  WakeUp        Wake-up callback function used for waking up CAD
  * @retval None
  */
void CAD_Init(uint8_t PortNum, USBPD_SettingsTypeDef *pSettings, USBPD_ParamsTypeDef *pParams,  void (*WakeUp)(void))
{
 800fcdc:	b590      	push	{r4, r7, lr}
 800fcde:	b08b      	sub	sp, #44	@ 0x2c
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	60b9      	str	r1, [r7, #8]
 800fce4:	607a      	str	r2, [r7, #4]
 800fce6:	603b      	str	r3, [r7, #0]
 800fce8:	4603      	mov	r3, r0
 800fcea:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800fcec:	7bfa      	ldrb	r2, [r7, #15]
 800fcee:	4613      	mov	r3, r2
 800fcf0:	005b      	lsls	r3, r3, #1
 800fcf2:	4413      	add	r3, r2
 800fcf4:	009b      	lsls	r3, r3, #2
 800fcf6:	4a75      	ldr	r2, [pc, #468]	@ (800fecc <CAD_Init+0x1f0>)
 800fcf8:	4413      	add	r3, r2
 800fcfa:	627b      	str	r3, [r7, #36]	@ 0x24
  LL_UCPD_InitTypeDef settings;

  Ports[PortNum].params = pParams;
 800fcfc:	7bfa      	ldrb	r2, [r7, #15]
 800fcfe:	4974      	ldr	r1, [pc, #464]	@ (800fed0 <CAD_Init+0x1f4>)
 800fd00:	4613      	mov	r3, r2
 800fd02:	011b      	lsls	r3, r3, #4
 800fd04:	1a9b      	subs	r3, r3, r2
 800fd06:	009b      	lsls	r3, r3, #2
 800fd08:	440b      	add	r3, r1
 800fd0a:	3310      	adds	r3, #16
 800fd0c:	687a      	ldr	r2, [r7, #4]
 800fd0e:	601a      	str	r2, [r3, #0]
  Ports[PortNum].settings = pSettings;
 800fd10:	7bfa      	ldrb	r2, [r7, #15]
 800fd12:	496f      	ldr	r1, [pc, #444]	@ (800fed0 <CAD_Init+0x1f4>)
 800fd14:	4613      	mov	r3, r2
 800fd16:	011b      	lsls	r3, r3, #4
 800fd18:	1a9b      	subs	r3, r3, r2
 800fd1a:	009b      	lsls	r3, r3, #2
 800fd1c:	440b      	add	r3, r1
 800fd1e:	330c      	adds	r3, #12
 800fd20:	68ba      	ldr	r2, [r7, #8]
 800fd22:	601a      	str	r2, [r3, #0]
  Ports[PortNum].params->RpResistor = Ports[PortNum].settings->CAD_DefaultResistor;
 800fd24:	7bfa      	ldrb	r2, [r7, #15]
 800fd26:	496a      	ldr	r1, [pc, #424]	@ (800fed0 <CAD_Init+0x1f4>)
 800fd28:	4613      	mov	r3, r2
 800fd2a:	011b      	lsls	r3, r3, #4
 800fd2c:	1a9b      	subs	r3, r3, r2
 800fd2e:	009b      	lsls	r3, r3, #2
 800fd30:	440b      	add	r3, r1
 800fd32:	330c      	adds	r3, #12
 800fd34:	6819      	ldr	r1, [r3, #0]
 800fd36:	7bfa      	ldrb	r2, [r7, #15]
 800fd38:	4865      	ldr	r0, [pc, #404]	@ (800fed0 <CAD_Init+0x1f4>)
 800fd3a:	4613      	mov	r3, r2
 800fd3c:	011b      	lsls	r3, r3, #4
 800fd3e:	1a9b      	subs	r3, r3, r2
 800fd40:	009b      	lsls	r3, r3, #2
 800fd42:	4403      	add	r3, r0
 800fd44:	3310      	adds	r3, #16
 800fd46:	681a      	ldr	r2, [r3, #0]
 800fd48:	794b      	ldrb	r3, [r1, #5]
 800fd4a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800fd4e:	b2d9      	uxtb	r1, r3
 800fd50:	7893      	ldrb	r3, [r2, #2]
 800fd52:	f361 0301 	bfi	r3, r1, #0, #2
 800fd56:	7093      	strb	r3, [r2, #2]
  Ports[PortNum].params->SNKExposedRP_AtAttach = vRd_Undefined;
 800fd58:	7bfa      	ldrb	r2, [r7, #15]
 800fd5a:	495d      	ldr	r1, [pc, #372]	@ (800fed0 <CAD_Init+0x1f4>)
 800fd5c:	4613      	mov	r3, r2
 800fd5e:	011b      	lsls	r3, r3, #4
 800fd60:	1a9b      	subs	r3, r3, r2
 800fd62:	009b      	lsls	r3, r3, #2
 800fd64:	440b      	add	r3, r1
 800fd66:	3310      	adds	r3, #16
 800fd68:	681a      	ldr	r2, [r3, #0]
 800fd6a:	7893      	ldrb	r3, [r2, #2]
 800fd6c:	f36f 0383 	bfc	r3, #2, #2
 800fd70:	7093      	strb	r3, [r2, #2]

  /* Reset handle */
  memset(_handle, 0, sizeof(CAD_HW_HandleTypeDef));
 800fd72:	220c      	movs	r2, #12
 800fd74:	2100      	movs	r1, #0
 800fd76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fd78:	f007 f854 	bl	8016e24 <memset>

  /* Register CAD wake up callback */
  Ports[PortNum].USBPD_CAD_WakeUp = WakeUp;
 800fd7c:	7bfa      	ldrb	r2, [r7, #15]
 800fd7e:	4954      	ldr	r1, [pc, #336]	@ (800fed0 <CAD_Init+0x1f4>)
 800fd80:	4613      	mov	r3, r2
 800fd82:	011b      	lsls	r3, r3, #4
 800fd84:	1a9b      	subs	r3, r3, r2
 800fd86:	009b      	lsls	r3, r3, #2
 800fd88:	440b      	add	r3, r1
 800fd8a:	332c      	adds	r3, #44	@ 0x2c
 800fd8c:	683a      	ldr	r2, [r7, #0]
 800fd8e:	601a      	str	r2, [r3, #0]

  /* Initialize the USBPD_IP */
  Ports[PortNum].husbpd = USBPD_HW_GetUSPDInstance(PortNum);
 800fd90:	7bfc      	ldrb	r4, [r7, #15]
 800fd92:	7bfb      	ldrb	r3, [r7, #15]
 800fd94:	4618      	mov	r0, r3
 800fd96:	f000 fcd1 	bl	801073c <USBPD_HW_GetUSPDInstance>
 800fd9a:	4602      	mov	r2, r0
 800fd9c:	494c      	ldr	r1, [pc, #304]	@ (800fed0 <CAD_Init+0x1f4>)
 800fd9e:	4623      	mov	r3, r4
 800fda0:	011b      	lsls	r3, r3, #4
 800fda2:	1b1b      	subs	r3, r3, r4
 800fda4:	009b      	lsls	r3, r3, #2
 800fda6:	440b      	add	r3, r1
 800fda8:	601a      	str	r2, [r3, #0]

  /* Initialize UCPD */
  LL_UCPD_StructInit(&settings);
 800fdaa:	f107 0314 	add.w	r3, r7, #20
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f7ff fe3a 	bl	800fa28 <LL_UCPD_StructInit>
  (void)LL_UCPD_Init(Ports[PortNum].husbpd, &settings);
 800fdb4:	7bfa      	ldrb	r2, [r7, #15]
 800fdb6:	4946      	ldr	r1, [pc, #280]	@ (800fed0 <CAD_Init+0x1f4>)
 800fdb8:	4613      	mov	r3, r2
 800fdba:	011b      	lsls	r3, r3, #4
 800fdbc:	1a9b      	subs	r3, r3, r2
 800fdbe:	009b      	lsls	r3, r3, #2
 800fdc0:	440b      	add	r3, r1
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	f107 0214 	add.w	r2, r7, #20
 800fdc8:	4611      	mov	r1, r2
 800fdca:	4618      	mov	r0, r3
 800fdcc:	f7ff fdfe 	bl	800f9cc <LL_UCPD_Init>
  LL_UCPD_SetRxOrderSet(Ports[PortNum].husbpd,
 800fdd0:	7bfa      	ldrb	r2, [r7, #15]
 800fdd2:	493f      	ldr	r1, [pc, #252]	@ (800fed0 <CAD_Init+0x1f4>)
 800fdd4:	4613      	mov	r3, r2
 800fdd6:	011b      	lsls	r3, r3, #4
 800fdd8:	1a9b      	subs	r3, r3, r2
 800fdda:	009b      	lsls	r3, r3, #2
 800fddc:	440b      	add	r3, r1
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 800fde4:	4618      	mov	r0, r3
 800fde6:	f7ff ff21 	bl	800fc2c <LL_UCPD_SetRxOrderSet>
                        LL_UCPD_ORDERSET_SOP | LL_UCPD_ORDERSET_SOP1 | LL_UCPD_ORDERSET_SOP2 |
                        LL_UCPD_ORDERSET_CABLERST | LL_UCPD_ORDERSET_HARDRST);
  /* Controls whether pull-ups and pull-downs controls related to ANAMODE and ANASUBMODE
     should be applied to CC1 and CC2 analog PHYs */
  /* Should be done when UCPDEN is 1 */
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 800fdea:	7bfa      	ldrb	r2, [r7, #15]
 800fdec:	4938      	ldr	r1, [pc, #224]	@ (800fed0 <CAD_Init+0x1f4>)
 800fdee:	4613      	mov	r3, r2
 800fdf0:	011b      	lsls	r3, r3, #4
 800fdf2:	1a9b      	subs	r3, r3, r2
 800fdf4:	009b      	lsls	r3, r3, #2
 800fdf6:	440b      	add	r3, r1
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 800fdfe:	4618      	mov	r0, r3
 800fe00:	f7ff ff29 	bl	800fc56 <LL_UCPD_SetccEnable>
#ifdef _LOW_POWER
  LL_UCPD_WakeUpEnable(Ports[PortNum].husbpd);
#endif /* _LOW_POWER */

  /* Disable dead battery */
  LL_PWR_DisableUCPDDeadBattery(); /* PWR->CR3 |= (1 << 14); */
 800fe04:	f7ff ff5a 	bl	800fcbc <LL_PWR_DisableUCPDDeadBattery>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB); /* GPIOB enable RCC->AHB2ENR |= 2; */
 800fe08:	2002      	movs	r0, #2
 800fe0a:	f7ff fe6d 	bl	800fae8 <LL_AHB2_GRP1_EnableClock>

  /* Set by default UCPD1_CC1 & UCPD1_CC2 in analog mode */
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_6, LL_GPIO_MODE_ANALOG); /* PB6 mode = GP analog => CC1 */
 800fe0e:	2203      	movs	r2, #3
 800fe10:	2140      	movs	r1, #64	@ 0x40
 800fe12:	4830      	ldr	r0, [pc, #192]	@ (800fed4 <CAD_Init+0x1f8>)
 800fe14:	f7ff fe80 	bl	800fb18 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_4, LL_GPIO_MODE_ANALOG); /* PB4 mode = GP analog => CC2 */
 800fe18:	2203      	movs	r2, #3
 800fe1a:	2110      	movs	r1, #16
 800fe1c:	482d      	ldr	r0, [pc, #180]	@ (800fed4 <CAD_Init+0x1f8>)
 800fe1e:	f7ff fe7b 	bl	800fb18 <LL_GPIO_SetPinMode>

  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_6, LL_GPIO_PULL_NO);
 800fe22:	2200      	movs	r2, #0
 800fe24:	2140      	movs	r1, #64	@ 0x40
 800fe26:	482b      	ldr	r0, [pc, #172]	@ (800fed4 <CAD_Init+0x1f8>)
 800fe28:	f7ff feb3 	bl	800fb92 <LL_GPIO_SetPinPull>
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_4, LL_GPIO_PULL_NO);
 800fe2c:	2200      	movs	r2, #0
 800fe2e:	2110      	movs	r1, #16
 800fe30:	4828      	ldr	r0, [pc, #160]	@ (800fed4 <CAD_Init+0x1f8>)
 800fe32:	f7ff feae 	bl	800fb92 <LL_GPIO_SetPinPull>

  /* Init power */
  BSP_USBPD_PWR_Init(PortNum);
 800fe36:	7bfb      	ldrb	r3, [r7, #15]
 800fe38:	4618      	mov	r0, r3
 800fe3a:	f005 fdc3 	bl	80159c4 <BSP_USBPD_PWR_Init>
  /* Register VBUS detect callback */
  BSP_USBPD_PWR_RegisterVBUSDetectCallback(PortNum, CAD_HW_IF_VBUSDetectCallback);
#endif /* TCPP0203_SUPPORT */

  /* Enable USBPD IP */
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 800fe3e:	7bfa      	ldrb	r2, [r7, #15]
 800fe40:	4923      	ldr	r1, [pc, #140]	@ (800fed0 <CAD_Init+0x1f4>)
 800fe42:	4613      	mov	r3, r2
 800fe44:	011b      	lsls	r3, r3, #4
 800fe46:	1a9b      	subs	r3, r3, r2
 800fe48:	009b      	lsls	r3, r3, #2
 800fe4a:	440b      	add	r3, r1
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f7ff fedc 	bl	800fc0c <LL_UCPD_Enable>

#if defined(_SRC) || defined(_DRP)
  /* Initialize usbpd interrupt */
  if (USBPD_PORTPOWERROLE_SRC == Ports[PortNum].params->PE_PowerRole)
 800fe54:	7bfa      	ldrb	r2, [r7, #15]
 800fe56:	491e      	ldr	r1, [pc, #120]	@ (800fed0 <CAD_Init+0x1f4>)
 800fe58:	4613      	mov	r3, r2
 800fe5a:	011b      	lsls	r3, r3, #4
 800fe5c:	1a9b      	subs	r3, r3, r2
 800fe5e:	009b      	lsls	r3, r3, #2
 800fe60:	440b      	add	r3, r1
 800fe62:	3310      	adds	r3, #16
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	781b      	ldrb	r3, [r3, #0]
 800fe68:	f003 0304 	and.w	r3, r3, #4
 800fe6c:	b2db      	uxtb	r3, r3
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d003      	beq.n	800fe7a <CAD_Init+0x19e>
  {
    USBPDM1_AssertRp(PortNum);
 800fe72:	7bfb      	ldrb	r3, [r7, #15]
 800fe74:	4618      	mov	r0, r3
 800fe76:	f001 fca7 	bl	80117c8 <USBPDM1_AssertRp>
  else
#endif /* _DRP */
  {
#if defined(_SRC)
    /* If default role is source */
    if (USBPD_PORTPOWERROLE_SRC == Ports[PortNum].settings->PE_DefaultRole)
 800fe7a:	7bfa      	ldrb	r2, [r7, #15]
 800fe7c:	4914      	ldr	r1, [pc, #80]	@ (800fed0 <CAD_Init+0x1f4>)
 800fe7e:	4613      	mov	r3, r2
 800fe80:	011b      	lsls	r3, r3, #4
 800fe82:	1a9b      	subs	r3, r3, r2
 800fe84:	009b      	lsls	r3, r3, #2
 800fe86:	440b      	add	r3, r1
 800fe88:	330c      	adds	r3, #12
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	791b      	ldrb	r3, [r3, #4]
 800fe8e:	f003 0304 	and.w	r3, r3, #4
 800fe92:	b2db      	uxtb	r3, r3
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d014      	beq.n	800fec2 <CAD_Init+0x1e6>
    {
      /* Set current state machine to SRC state machine */
      _handle->CAD_PtrStateMachine = CAD_StateMachine_SRC;
 800fe98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe9a:	4a0f      	ldr	r2, [pc, #60]	@ (800fed8 <CAD_Init+0x1fc>)
 800fe9c:	609a      	str	r2, [r3, #8]
      _handle->CAD_Accessory_SRC = Ports[PortNum].settings->CAD_AccesorySupport;
 800fe9e:	7bfa      	ldrb	r2, [r7, #15]
 800fea0:	490b      	ldr	r1, [pc, #44]	@ (800fed0 <CAD_Init+0x1f4>)
 800fea2:	4613      	mov	r3, r2
 800fea4:	011b      	lsls	r3, r3, #4
 800fea6:	1a9b      	subs	r3, r3, r2
 800fea8:	009b      	lsls	r3, r3, #2
 800feaa:	440b      	add	r3, r1
 800feac:	330c      	adds	r3, #12
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	795b      	ldrb	r3, [r3, #5]
 800feb2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800feb6:	b2d9      	uxtb	r1, r3
 800feb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800feba:	7853      	ldrb	r3, [r2, #1]
 800febc:	f361 1386 	bfi	r3, r1, #6, #1
 800fec0:	7053      	strb	r3, [r2, #1]
    _handle->CAD_VPD_SNK = Ports[PortNum].settings->CAD_VPDSupport;
#endif /* USBPDCORE_VPD */
#endif /* _SNK */
  }
#endif  /* USBPDCORE_LIB_NO_PD */
}
 800fec2:	bf00      	nop
 800fec4:	372c      	adds	r7, #44	@ 0x2c
 800fec6:	46bd      	mov	sp, r7
 800fec8:	bd90      	pop	{r4, r7, pc}
 800feca:	bf00      	nop
 800fecc:	20000a78 	.word	0x20000a78
 800fed0:	20000a90 	.word	0x20000a90
 800fed4:	48000400 	.word	0x48000400
 800fed8:	0800ffb5 	.word	0x0800ffb5

0800fedc <CAD_Enter_ErrorRecovery>:
  * @brief  Function to force CAD state machine into error recovery state
  * @param  PortNum Index of current used port
  * @retval None
  */
void CAD_Enter_ErrorRecovery(uint8_t PortNum)
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	b082      	sub	sp, #8
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	4603      	mov	r3, r0
 800fee4:	71fb      	strb	r3, [r7, #7]
  /* Remove the ucpd resistor */
  USBPDM1_EnterErrorRecovery(PortNum);
 800fee6:	79fb      	ldrb	r3, [r7, #7]
 800fee8:	4618      	mov	r0, r3
 800feea:	f001 fda1 	bl	8011a30 <USBPDM1_EnterErrorRecovery>
  /* Set the error recovery flag to allow the stack to switch into errorRecovery Flag */
  CAD_HW_Handles[PortNum].CAD_ErrorRecoveryflag = USBPD_TRUE;
 800feee:	79fa      	ldrb	r2, [r7, #7]
 800fef0:	490b      	ldr	r1, [pc, #44]	@ (800ff20 <CAD_Enter_ErrorRecovery+0x44>)
 800fef2:	4613      	mov	r3, r2
 800fef4:	005b      	lsls	r3, r3, #1
 800fef6:	4413      	add	r3, r2
 800fef8:	009b      	lsls	r3, r3, #2
 800fefa:	18ca      	adds	r2, r1, r3
 800fefc:	7813      	ldrb	r3, [r2, #0]
 800fefe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ff02:	7013      	strb	r3, [r2, #0]
  /* Wake up CAD task */
  Ports[PortNum].USBPD_CAD_WakeUp();
 800ff04:	79fa      	ldrb	r2, [r7, #7]
 800ff06:	4907      	ldr	r1, [pc, #28]	@ (800ff24 <CAD_Enter_ErrorRecovery+0x48>)
 800ff08:	4613      	mov	r3, r2
 800ff0a:	011b      	lsls	r3, r3, #4
 800ff0c:	1a9b      	subs	r3, r3, r2
 800ff0e:	009b      	lsls	r3, r3, #2
 800ff10:	440b      	add	r3, r1
 800ff12:	332c      	adds	r3, #44	@ 0x2c
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	4798      	blx	r3
}
 800ff18:	bf00      	nop
 800ff1a:	3708      	adds	r7, #8
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	bd80      	pop	{r7, pc}
 800ff20:	20000a78 	.word	0x20000a78
 800ff24:	20000a90 	.word	0x20000a90

0800ff28 <CAD_SRC_Set_ResistorRp>:
  * @param  PortNum Index of current used port
  * @param  RpValue RP value to set in devices based on @ref CAD_RP_Source_Current_Adv_Typedef
  * @retval 0 success else error
  */
uint32_t CAD_SRC_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b082      	sub	sp, #8
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	4603      	mov	r3, r0
 800ff30:	6039      	str	r1, [r7, #0]
 800ff32:	71fb      	strb	r3, [r7, #7]
  /* Update the information about the default resistor value presented in detach mode */
  Ports[PortNum].params->RpResistor = RpValue;
 800ff34:	79fa      	ldrb	r2, [r7, #7]
 800ff36:	4915      	ldr	r1, [pc, #84]	@ (800ff8c <CAD_SRC_Set_ResistorRp+0x64>)
 800ff38:	4613      	mov	r3, r2
 800ff3a:	011b      	lsls	r3, r3, #4
 800ff3c:	1a9b      	subs	r3, r3, r2
 800ff3e:	009b      	lsls	r3, r3, #2
 800ff40:	440b      	add	r3, r1
 800ff42:	3310      	adds	r3, #16
 800ff44:	681a      	ldr	r2, [r3, #0]
 800ff46:	683b      	ldr	r3, [r7, #0]
 800ff48:	f003 0303 	and.w	r3, r3, #3
 800ff4c:	b2d9      	uxtb	r1, r3
 800ff4e:	7893      	ldrb	r3, [r2, #2]
 800ff50:	f361 0301 	bfi	r3, r1, #0, #2
 800ff54:	7093      	strb	r3, [r2, #2]

  /* Inform state machine about a resistor update */
  CAD_HW_Handles[PortNum].CAD_ResistorUpdateflag = USBPD_TRUE;
 800ff56:	79fa      	ldrb	r2, [r7, #7]
 800ff58:	490d      	ldr	r1, [pc, #52]	@ (800ff90 <CAD_SRC_Set_ResistorRp+0x68>)
 800ff5a:	4613      	mov	r3, r2
 800ff5c:	005b      	lsls	r3, r3, #1
 800ff5e:	4413      	add	r3, r2
 800ff60:	009b      	lsls	r3, r3, #2
 800ff62:	18ca      	adds	r2, r1, r3
 800ff64:	7853      	ldrb	r3, [r2, #1]
 800ff66:	f043 0301 	orr.w	r3, r3, #1
 800ff6a:	7053      	strb	r3, [r2, #1]
  /* Wake up CAD task */
  Ports[PortNum].USBPD_CAD_WakeUp();
 800ff6c:	79fa      	ldrb	r2, [r7, #7]
 800ff6e:	4907      	ldr	r1, [pc, #28]	@ (800ff8c <CAD_SRC_Set_ResistorRp+0x64>)
 800ff70:	4613      	mov	r3, r2
 800ff72:	011b      	lsls	r3, r3, #4
 800ff74:	1a9b      	subs	r3, r3, r2
 800ff76:	009b      	lsls	r3, r3, #2
 800ff78:	440b      	add	r3, r1
 800ff7a:	332c      	adds	r3, #44	@ 0x2c
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	4798      	blx	r3
  return 0;
 800ff80:	2300      	movs	r3, #0
}
 800ff82:	4618      	mov	r0, r3
 800ff84:	3708      	adds	r7, #8
 800ff86:	46bd      	mov	sp, r7
 800ff88:	bd80      	pop	{r7, pc}
 800ff8a:	bf00      	nop
 800ff8c:	20000a90 	.word	0x20000a90
 800ff90:	20000a78 	.word	0x20000a78

0800ff94 <CAD_Set_ResistorRp>:

/* Keep for legacy */
uint32_t CAD_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b082      	sub	sp, #8
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	6039      	str	r1, [r7, #0]
 800ff9e:	71fb      	strb	r3, [r7, #7]
  return CAD_SRC_Set_ResistorRp(PortNum, RpValue);
 800ffa0:	79fb      	ldrb	r3, [r7, #7]
 800ffa2:	6839      	ldr	r1, [r7, #0]
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	f7ff ffbf 	bl	800ff28 <CAD_SRC_Set_ResistorRp>
 800ffaa:	4603      	mov	r3, r0
}
 800ffac:	4618      	mov	r0, r3
 800ffae:	3708      	adds	r7, #8
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	bd80      	pop	{r7, pc}

0800ffb4 <CAD_StateMachine_SRC>:
  * @param  pEvent  Pointer on CAD event based on @ref USBPD_CAD_EVENT
  * @param  pCCXX   Pointer on CC Pin based on @ref CCxPin_TypeDef
  * @retval Timeout value
  */
uint32_t CAD_StateMachine_SRC(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b086      	sub	sp, #24
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	4603      	mov	r3, r0
 800ffbc:	60b9      	str	r1, [r7, #8]
 800ffbe:	607a      	str	r2, [r7, #4]
 800ffc0:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800ffc2:	7bfa      	ldrb	r2, [r7, #15]
 800ffc4:	4613      	mov	r3, r2
 800ffc6:	005b      	lsls	r3, r3, #1
 800ffc8:	4413      	add	r3, r2
 800ffca:	009b      	lsls	r3, r3, #2
 800ffcc:	4a2d      	ldr	r2, [pc, #180]	@ (8010084 <CAD_StateMachine_SRC+0xd0>)
 800ffce:	4413      	add	r3, r2
 800ffd0:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800ffd2:	2302      	movs	r3, #2
 800ffd4:	617b      	str	r3, [r7, #20]

  /*Check CAD STATE*/
  switch (_handle->cstate)
 800ffd6:	693b      	ldr	r3, [r7, #16]
 800ffd8:	785b      	ldrb	r3, [r3, #1]
 800ffda:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800ffde:	b2db      	uxtb	r3, r3
 800ffe0:	3b01      	subs	r3, #1
 800ffe2:	2b0a      	cmp	r3, #10
 800ffe4:	d847      	bhi.n	8010076 <CAD_StateMachine_SRC+0xc2>
 800ffe6:	a201      	add	r2, pc, #4	@ (adr r2, 800ffec <CAD_StateMachine_SRC+0x38>)
 800ffe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffec:	0801003b 	.word	0x0801003b
 800fff0:	08010047 	.word	0x08010047
 800fff4:	08010067 	.word	0x08010067
 800fff8:	08010057 	.word	0x08010057
 800fffc:	08010067 	.word	0x08010067
 8010000:	08010077 	.word	0x08010077
 8010004:	08010077 	.word	0x08010077
 8010008:	08010077 	.word	0x08010077
 801000c:	0801003b 	.word	0x0801003b
 8010010:	08010077 	.word	0x08010077
 8010014:	08010019 	.word	0x08010019
#if defined(_VCONN_SUPPORT)
      /* DeInitialize Vconn management */
      (void)BSP_USBPD_PWR_VCONNDeInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */
      /* DeInitialise VBUS power */
      (void)BSP_USBPD_PWR_VBUSDeInit(PortNum);
 8010018:	7bfb      	ldrb	r3, [r7, #15]
 801001a:	4618      	mov	r0, r3
 801001c:	f005 fcf8 	bl	8015a10 <BSP_USBPD_PWR_VBUSDeInit>
      /* Reset the resistor */
      USBPDM1_AssertRp(PortNum);
 8010020:	7bfb      	ldrb	r3, [r7, #15]
 8010022:	4618      	mov	r0, r3
 8010024:	f001 fbd0 	bl	80117c8 <USBPDM1_AssertRp>
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 8010028:	693a      	ldr	r2, [r7, #16]
 801002a:	7853      	ldrb	r3, [r2, #1]
 801002c:	2101      	movs	r1, #1
 801002e:	f361 0345 	bfi	r3, r1, #1, #5
 8010032:	7053      	strb	r3, [r2, #1]
      _timing = 0;
 8010034:	2300      	movs	r3, #0
 8010036:	617b      	str	r3, [r7, #20]
      break;
 8010038:	e01e      	b.n	8010078 <CAD_StateMachine_SRC+0xc4>
    }

    case USBPD_CAD_STATE_SWITCH_TO_SNK :
    case USBPD_CAD_STATE_DETACHED:
    {
      _timing = ManageStateDetached_SRC(PortNum);
 801003a:	7bfb      	ldrb	r3, [r7, #15]
 801003c:	4618      	mov	r0, r3
 801003e:	f000 f959 	bl	80102f4 <ManageStateDetached_SRC>
 8010042:	6178      	str	r0, [r7, #20]
      break;
 8010044:	e018      	b.n	8010078 <CAD_StateMachine_SRC+0xc4>
    }

    case USBPD_CAD_STATE_ATTACHED_WAIT:
    {
      _timing = ManageStateAttachedWait_SRC(PortNum, pEvent, pCCXX);
 8010046:	7bfb      	ldrb	r3, [r7, #15]
 8010048:	687a      	ldr	r2, [r7, #4]
 801004a:	68b9      	ldr	r1, [r7, #8]
 801004c:	4618      	mov	r0, r3
 801004e:	f000 f9a7 	bl	80103a0 <ManageStateAttachedWait_SRC>
 8010052:	6178      	str	r0, [r7, #20]
      break;
 8010054:	e010      	b.n	8010078 <CAD_StateMachine_SRC+0xc4>
    }
#endif /* _ACCESSORY_SRC */

    case USBPD_CAD_STATE_EMC :
    {
      _timing = ManageStateEMC(PortNum, pEvent, pCCXX);
 8010056:	7bfb      	ldrb	r3, [r7, #15]
 8010058:	687a      	ldr	r2, [r7, #4]
 801005a:	68b9      	ldr	r1, [r7, #8]
 801005c:	4618      	mov	r0, r3
 801005e:	f000 fa7b 	bl	8010558 <ManageStateEMC>
 8010062:	6178      	str	r0, [r7, #20]
      break;
 8010064:	e008      	b.n	8010078 <CAD_StateMachine_SRC+0xc4>

    /*CAD electronic cable with Sink ATTACHED*/
    case USBPD_CAD_STATE_ATTEMC:
    case USBPD_CAD_STATE_ATTACHED:
    {
      _timing = ManageStateAttached_SRC(PortNum, pEvent, pCCXX);
 8010066:	7bfb      	ldrb	r3, [r7, #15]
 8010068:	687a      	ldr	r2, [r7, #4]
 801006a:	68b9      	ldr	r1, [r7, #8]
 801006c:	4618      	mov	r0, r3
 801006e:	f000 fabd 	bl	80105ec <ManageStateAttached_SRC>
 8010072:	6178      	str	r0, [r7, #20]
      break;
 8010074:	e000      	b.n	8010078 <CAD_StateMachine_SRC+0xc4>
    }

    default :
    {
      break;
 8010076:	bf00      	nop
    }
  }

  return _timing;
 8010078:	697b      	ldr	r3, [r7, #20]
}
 801007a:	4618      	mov	r0, r3
 801007c:	3718      	adds	r7, #24
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}
 8010082:	bf00      	nop
 8010084:	20000a78 	.word	0x20000a78

08010088 <CAD_StateMachine>:
  * @param  pEvent  Pointer on CAD event based on @ref USBPD_CAD_EVENT
  * @param  pCCXX   Pointer on CC Pin based on @ref CCxPin_TypeDef
  * @retval Timeout value
  */
uint32_t CAD_StateMachine(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b086      	sub	sp, #24
 801008c:	af00      	add	r7, sp, #0
 801008e:	4603      	mov	r3, r0
 8010090:	60b9      	str	r1, [r7, #8]
 8010092:	607a      	str	r2, [r7, #4]
 8010094:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8010096:	7bfa      	ldrb	r2, [r7, #15]
 8010098:	4613      	mov	r3, r2
 801009a:	005b      	lsls	r3, r3, #1
 801009c:	4413      	add	r3, r2
 801009e:	009b      	lsls	r3, r3, #2
 80100a0:	4a59      	ldr	r2, [pc, #356]	@ (8010208 <CAD_StateMachine+0x180>)
 80100a2:	4413      	add	r3, r2
 80100a4:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 80100a6:	2302      	movs	r3, #2
 80100a8:	617b      	str	r3, [r7, #20]

  /* Set by default event to none */
  *pEvent = USBPD_CAD_EVENT_NONE;
 80100aa:	68bb      	ldr	r3, [r7, #8]
 80100ac:	2200      	movs	r2, #0
 80100ae:	701a      	strb	r2, [r3, #0]

  /* If a swap is on going, return default timing */
  if (USBPD_TRUE == Ports[PortNum].params->PE_SwapOngoing)
 80100b0:	7bfa      	ldrb	r2, [r7, #15]
 80100b2:	4956      	ldr	r1, [pc, #344]	@ (801020c <CAD_StateMachine+0x184>)
 80100b4:	4613      	mov	r3, r2
 80100b6:	011b      	lsls	r3, r3, #4
 80100b8:	1a9b      	subs	r3, r3, r2
 80100ba:	009b      	lsls	r3, r3, #2
 80100bc:	440b      	add	r3, r1
 80100be:	3310      	adds	r3, #16
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	781b      	ldrb	r3, [r3, #0]
 80100c4:	f003 0310 	and.w	r3, r3, #16
 80100c8:	b2db      	uxtb	r3, r3
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d001      	beq.n	80100d2 <CAD_StateMachine+0x4a>
  {
    return _timing;
 80100ce:	697b      	ldr	r3, [r7, #20]
 80100d0:	e096      	b.n	8010200 <CAD_StateMachine+0x178>
  }

  if (_handle->CAD_ErrorRecoveryflag == USBPD_TRUE)
 80100d2:	693b      	ldr	r3, [r7, #16]
 80100d4:	781b      	ldrb	r3, [r3, #0]
 80100d6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80100da:	b2db      	uxtb	r3, r3
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d00a      	beq.n	80100f6 <CAD_StateMachine+0x6e>
  {
    /* Force the state error recovery */
    _handle->CAD_ErrorRecoveryflag = USBPD_FALSE;
 80100e0:	693a      	ldr	r2, [r7, #16]
 80100e2:	7813      	ldrb	r3, [r2, #0]
 80100e4:	f36f 13c7 	bfc	r3, #7, #1
 80100e8:	7013      	strb	r3, [r2, #0]
    _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY;
 80100ea:	693a      	ldr	r2, [r7, #16]
 80100ec:	7853      	ldrb	r3, [r2, #1]
 80100ee:	210c      	movs	r1, #12
 80100f0:	f361 0345 	bfi	r3, r1, #1, #5
 80100f4:	7053      	strb	r3, [r2, #1]
#if defined(_TRACE)
    USBPD_TRACE_Add(USBPD_TRACE_CAD_LOW, PortNum, (uint8_t)_handle->cstate, NULL, 0);
#endif /* _TRACE */
  }

  switch (_handle->cstate)
 80100f6:	693b      	ldr	r3, [r7, #16]
 80100f8:	785b      	ldrb	r3, [r3, #1]
 80100fa:	f3c3 0344 	ubfx	r3, r3, #1, #5
 80100fe:	b2db      	uxtb	r3, r3
 8010100:	2b0d      	cmp	r3, #13
 8010102:	d051      	beq.n	80101a8 <CAD_StateMachine+0x120>
 8010104:	2b0d      	cmp	r3, #13
 8010106:	dc71      	bgt.n	80101ec <CAD_StateMachine+0x164>
 8010108:	2b00      	cmp	r3, #0
 801010a:	d002      	beq.n	8010112 <CAD_StateMachine+0x8a>
 801010c:	2b0c      	cmp	r3, #12
 801010e:	d024      	beq.n	801015a <CAD_StateMachine+0xd2>
 8010110:	e06c      	b.n	80101ec <CAD_StateMachine+0x164>
  {
    case USBPD_CAD_STATE_RESET:
    {
#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
      /* Enable TypeCEvents Interrupts */
      LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
 8010112:	7bfa      	ldrb	r2, [r7, #15]
 8010114:	493d      	ldr	r1, [pc, #244]	@ (801020c <CAD_StateMachine+0x184>)
 8010116:	4613      	mov	r3, r2
 8010118:	011b      	lsls	r3, r3, #4
 801011a:	1a9b      	subs	r3, r3, r2
 801011c:	009b      	lsls	r3, r3, #2
 801011e:	440b      	add	r3, r1
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	4618      	mov	r0, r3
 8010124:	f7ff fdaa 	bl	800fc7c <LL_UCPD_EnableIT_TypeCEventCC2>
      LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
 8010128:	7bfa      	ldrb	r2, [r7, #15]
 801012a:	4938      	ldr	r1, [pc, #224]	@ (801020c <CAD_StateMachine+0x184>)
 801012c:	4613      	mov	r3, r2
 801012e:	011b      	lsls	r3, r3, #4
 8010130:	1a9b      	subs	r3, r3, r2
 8010132:	009b      	lsls	r3, r3, #2
 8010134:	440b      	add	r3, r1
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	4618      	mov	r0, r3
 801013a:	f7ff fdaf 	bl	800fc9c <LL_UCPD_EnableIT_TypeCEventCC1>
        LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
      }
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

      /* Enable IRQ */
      UCPD_INSTANCE0_ENABLEIRQ;
 801013e:	2104      	movs	r1, #4
 8010140:	203f      	movs	r0, #63	@ 0x3f
 8010142:	f7ff fca7 	bl	800fa94 <__NVIC_SetPriority>
 8010146:	203f      	movs	r0, #63	@ 0x3f
 8010148:	f7ff fc86 	bl	800fa58 <__NVIC_EnableIRQ>
#if defined(_DRP) || defined(_ACCESSORY_SNK)
      _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 801014c:	693a      	ldr	r2, [r7, #16]
 801014e:	7853      	ldrb	r3, [r2, #1]
 8010150:	2101      	movs	r1, #1
 8010152:	f361 0345 	bfi	r3, r1, #1, #5
 8010156:	7053      	strb	r3, [r2, #1]
      break;
 8010158:	e051      	b.n	80101fe <CAD_StateMachine+0x176>

    case USBPD_CAD_STATE_ERRORRECOVERY :
    {
      /* Remove the resistor */
      /* Enter recovery = Switch to SRC with no resistor */
      USBPDM1_EnterErrorRecovery(PortNum);
 801015a:	7bfb      	ldrb	r3, [r7, #15]
 801015c:	4618      	mov	r0, r3
 801015e:	f001 fc67 	bl	8011a30 <USBPDM1_EnterErrorRecovery>

      /* Forward detach event to DPM */
      Ports[PortNum].CCx = CCNONE;
 8010162:	7bfa      	ldrb	r2, [r7, #15]
 8010164:	4929      	ldr	r1, [pc, #164]	@ (801020c <CAD_StateMachine+0x184>)
 8010166:	4613      	mov	r3, r2
 8010168:	011b      	lsls	r3, r3, #4
 801016a:	1a9b      	subs	r3, r3, r2
 801016c:	009b      	lsls	r3, r3, #2
 801016e:	440b      	add	r3, r1
 8010170:	3334      	adds	r3, #52	@ 0x34
 8010172:	2200      	movs	r2, #0
 8010174:	601a      	str	r2, [r3, #0]
      *pCCXX = CCNONE;
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	2200      	movs	r2, #0
 801017a:	601a      	str	r2, [r3, #0]
      _handle->cc = CCNONE;
 801017c:	693a      	ldr	r2, [r7, #16]
 801017e:	7813      	ldrb	r3, [r2, #0]
 8010180:	f36f 0301 	bfc	r3, #0, #2
 8010184:	7013      	strb	r3, [r2, #0]
      *pEvent = USBPD_CAD_EVENT_DETACHED;
 8010186:	68bb      	ldr	r3, [r7, #8]
 8010188:	2201      	movs	r2, #1
 801018a:	701a      	strb	r2, [r3, #0]

      /* Start tErrorRecovery timeout */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 801018c:	f7f6 fdf8 	bl	8006d80 <HAL_GetTick>
 8010190:	4602      	mov	r2, r0
 8010192:	693b      	ldr	r3, [r7, #16]
 8010194:	605a      	str	r2, [r3, #4]
      _timing = CAD_TERROR_RECOVERY_TIME;
 8010196:	231a      	movs	r3, #26
 8010198:	617b      	str	r3, [r7, #20]
      _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY_EXIT;
 801019a:	693a      	ldr	r2, [r7, #16]
 801019c:	7853      	ldrb	r3, [r2, #1]
 801019e:	210d      	movs	r1, #13
 80101a0:	f361 0345 	bfi	r3, r1, #1, #5
 80101a4:	7053      	strb	r3, [r2, #1]
      break;
 80101a6:	e02a      	b.n	80101fe <CAD_StateMachine+0x176>
    }

    case USBPD_CAD_STATE_ERRORRECOVERY_EXIT :
    {
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start) >  CAD_TERROR_RECOVERY_TIME)
 80101a8:	f7f6 fdea 	bl	8006d80 <HAL_GetTick>
 80101ac:	4602      	mov	r2, r0
 80101ae:	693b      	ldr	r3, [r7, #16]
 80101b0:	685b      	ldr	r3, [r3, #4]
 80101b2:	1ad3      	subs	r3, r2, r3
 80101b4:	2b1a      	cmp	r3, #26
 80101b6:	d921      	bls.n	80101fc <CAD_StateMachine+0x174>
        port source  to src
        port snk     to snk
        port drp     to src   */

#if defined(_SRC) || defined(_DRP)
        if (USBPD_PORTPOWERROLE_SRC == Ports[PortNum].params->PE_PowerRole)
 80101b8:	7bfa      	ldrb	r2, [r7, #15]
 80101ba:	4914      	ldr	r1, [pc, #80]	@ (801020c <CAD_StateMachine+0x184>)
 80101bc:	4613      	mov	r3, r2
 80101be:	011b      	lsls	r3, r3, #4
 80101c0:	1a9b      	subs	r3, r3, r2
 80101c2:	009b      	lsls	r3, r3, #2
 80101c4:	440b      	add	r3, r1
 80101c6:	3310      	adds	r3, #16
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	781b      	ldrb	r3, [r3, #0]
 80101cc:	f003 0304 	and.w	r3, r3, #4
 80101d0:	b2db      	uxtb	r3, r3
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d003      	beq.n	80101de <CAD_StateMachine+0x156>
        {
          USBPDM1_AssertRp(PortNum);
 80101d6:	7bfb      	ldrb	r3, [r7, #15]
 80101d8:	4618      	mov	r0, r3
 80101da:	f001 faf5 	bl	80117c8 <USBPDM1_AssertRp>
#endif /* _SNK || _DRP */
        /* Switch to state detach */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
        _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
        _handle->cstate = USBPD_CAD_STATE_DETACHED;
 80101de:	693a      	ldr	r2, [r7, #16]
 80101e0:	7853      	ldrb	r3, [r2, #1]
 80101e2:	2101      	movs	r1, #1
 80101e4:	f361 0345 	bfi	r3, r1, #1, #5
 80101e8:	7053      	strb	r3, [r2, #1]
      }
      break;
 80101ea:	e007      	b.n	80101fc <CAD_StateMachine+0x174>
    }

    default:
    {
      /* Call the state machine corresponding to the port SNK or SRC or DRP */
      _timing = _handle->CAD_PtrStateMachine(PortNum, pEvent, pCCXX);
 80101ec:	693b      	ldr	r3, [r7, #16]
 80101ee:	689b      	ldr	r3, [r3, #8]
 80101f0:	7bf8      	ldrb	r0, [r7, #15]
 80101f2:	687a      	ldr	r2, [r7, #4]
 80101f4:	68b9      	ldr	r1, [r7, #8]
 80101f6:	4798      	blx	r3
 80101f8:	6178      	str	r0, [r7, #20]
      break;
 80101fa:	e000      	b.n	80101fe <CAD_StateMachine+0x176>
      break;
 80101fc:	bf00      	nop
    }
#endif /* CAD_DEBUG_TRACE */
  }
#endif /* _TRACE */

  return _timing;
 80101fe:	697b      	ldr	r3, [r7, #20]
}
 8010200:	4618      	mov	r0, r3
 8010202:	3718      	adds	r7, #24
 8010204:	46bd      	mov	sp, r7
 8010206:	bd80      	pop	{r7, pc}
 8010208:	20000a78 	.word	0x20000a78
 801020c:	20000a90 	.word	0x20000a90

08010210 <CAD_Check_HW_SRC>:
  * @brief  Check CCx HW condition
  * @param  PortNum Port
  * @retval none
  */
void CAD_Check_HW_SRC(uint8_t PortNum)
{
 8010210:	b4b0      	push	{r4, r5, r7}
 8010212:	b093      	sub	sp, #76	@ 0x4c
 8010214:	af00      	add	r7, sp, #0
 8010216:	4603      	mov	r3, r0
 8010218:	71fb      	strb	r3, [r7, #7]
#if !defined(_RTOS)
  uint32_t CC1_value_temp;
  uint32_t CC2_value_temp;
#endif /* !_RTOS */
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 801021a:	79fa      	ldrb	r2, [r7, #7]
 801021c:	4613      	mov	r3, r2
 801021e:	005b      	lsls	r3, r3, #1
 8010220:	4413      	add	r3, r2
 8010222:	009b      	lsls	r3, r3, #2
 8010224:	4a2f      	ldr	r2, [pc, #188]	@ (80102e4 <CAD_Check_HW_SRC+0xd4>)
 8010226:	4413      	add	r3, r2
 8010228:	647b      	str	r3, [r7, #68]	@ 0x44
  CC2_value = (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;

  /* Disable the C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#else
  CC1_value = (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) >> UCPD_SR_TYPEC_VSTATE_CC1_Pos;
 801022a:	79fa      	ldrb	r2, [r7, #7]
 801022c:	492e      	ldr	r1, [pc, #184]	@ (80102e8 <CAD_Check_HW_SRC+0xd8>)
 801022e:	4613      	mov	r3, r2
 8010230:	011b      	lsls	r3, r3, #4
 8010232:	1a9b      	subs	r3, r3, r2
 8010234:	009b      	lsls	r3, r3, #2
 8010236:	440b      	add	r3, r1
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	695b      	ldr	r3, [r3, #20]
 801023c:	0c1b      	lsrs	r3, r3, #16
 801023e:	f003 0303 	and.w	r3, r3, #3
 8010242:	643b      	str	r3, [r7, #64]	@ 0x40
  CC2_value = (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;
 8010244:	79fa      	ldrb	r2, [r7, #7]
 8010246:	4928      	ldr	r1, [pc, #160]	@ (80102e8 <CAD_Check_HW_SRC+0xd8>)
 8010248:	4613      	mov	r3, r2
 801024a:	011b      	lsls	r3, r3, #4
 801024c:	1a9b      	subs	r3, r3, r2
 801024e:	009b      	lsls	r3, r3, #2
 8010250:	440b      	add	r3, r1
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	695b      	ldr	r3, [r3, #20]
 8010256:	0c9b      	lsrs	r3, r3, #18
 8010258:	f003 0303 	and.w	r3, r3, #3
 801025c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  {
    return;
  }
#endif /* !_RTOS */

  const CCxPin_TypeDef table_cc[] =
 801025e:	4b23      	ldr	r3, [pc, #140]	@ (80102ec <CAD_Check_HW_SRC+0xdc>)
 8010260:	f107 0418 	add.w	r4, r7, #24
 8010264:	461d      	mov	r5, r3
 8010266:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801026a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801026c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801026e:	682b      	ldr	r3, [r5, #0]
 8010270:	6023      	str	r3, [r4, #0]
    CCNONE,  CC2,       CC2,
    CC1,     CCNONE,   CC1,
    CC1,     CC2,       CCNONE
  };

  const CAD_HW_Condition_TypeDef table_CurrentHWcondition[] =
 8010272:	4a1f      	ldr	r2, [pc, #124]	@ (80102f0 <CAD_Check_HW_SRC+0xe0>)
 8010274:	f107 030c 	add.w	r3, r7, #12
 8010278:	ca07      	ldmia	r2, {r0, r1, r2}
 801027a:	c303      	stmia	r3!, {r0, r1}
 801027c:	701a      	strb	r2, [r3, #0]
    HW_AudioAdapter_Attachment,  HW_PwrCable_Sink_Attachment, HW_PwrCable_NoSink_Attachment,
    HW_PwrCable_Sink_Attachment,         HW_Debug_Attachment,                 HW_Attachment,
    HW_PwrCable_NoSink_Attachment,             HW_Attachment,                 HW_Detachment
  };

  if (CC1_value * 3 + CC2_value < 9)
 801027e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010280:	4613      	mov	r3, r2
 8010282:	005b      	lsls	r3, r3, #1
 8010284:	441a      	add	r2, r3
 8010286:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010288:	4413      	add	r3, r2
 801028a:	2b08      	cmp	r3, #8
 801028c:	d824      	bhi.n	80102d8 <CAD_Check_HW_SRC+0xc8>
  {
    _handle->cc  = table_cc[CC1_value * 3 + CC2_value];
 801028e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010290:	4613      	mov	r3, r2
 8010292:	005b      	lsls	r3, r3, #1
 8010294:	441a      	add	r2, r3
 8010296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010298:	4413      	add	r3, r2
 801029a:	009b      	lsls	r3, r3, #2
 801029c:	3348      	adds	r3, #72	@ 0x48
 801029e:	443b      	add	r3, r7
 80102a0:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80102a4:	f003 0303 	and.w	r3, r3, #3
 80102a8:	b2d9      	uxtb	r1, r3
 80102aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80102ac:	7813      	ldrb	r3, [r2, #0]
 80102ae:	f361 0301 	bfi	r3, r1, #0, #2
 80102b2:	7013      	strb	r3, [r2, #0]
    _handle->CurrentHWcondition     = table_CurrentHWcondition[CC1_value * 3 + CC2_value];
 80102b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80102b6:	4613      	mov	r3, r2
 80102b8:	005b      	lsls	r3, r3, #1
 80102ba:	441a      	add	r2, r3
 80102bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102be:	4413      	add	r3, r2
 80102c0:	3348      	adds	r3, #72	@ 0x48
 80102c2:	443b      	add	r3, r7
 80102c4:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80102c8:	f003 0307 	and.w	r3, r3, #7
 80102cc:	b2d9      	uxtb	r1, r3
 80102ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80102d0:	7813      	ldrb	r3, [r2, #0]
 80102d2:	f361 0384 	bfi	r3, r1, #2, #3
 80102d6:	7013      	strb	r3, [r2, #0]
  }
}
 80102d8:	bf00      	nop
 80102da:	374c      	adds	r7, #76	@ 0x4c
 80102dc:	46bd      	mov	sp, r7
 80102de:	bcb0      	pop	{r4, r5, r7}
 80102e0:	4770      	bx	lr
 80102e2:	bf00      	nop
 80102e4:	20000a78 	.word	0x20000a78
 80102e8:	20000a90 	.word	0x20000a90
 80102ec:	080181a4 	.word	0x080181a4
 80102f0:	080181c8 	.word	0x080181c8

080102f4 <ManageStateDetached_SRC>:
  * @brief  Manage the detached state for source role
  * @param  PortNum Port
  * @retval Timeout value
  */
static uint32_t ManageStateDetached_SRC(uint8_t PortNum)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b084      	sub	sp, #16
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	4603      	mov	r3, r0
 80102fc:	71fb      	strb	r3, [r7, #7]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80102fe:	79fa      	ldrb	r2, [r7, #7]
 8010300:	4613      	mov	r3, r2
 8010302:	005b      	lsls	r3, r3, #1
 8010304:	4413      	add	r3, r2
 8010306:	009b      	lsls	r3, r3, #2
 8010308:	4a24      	ldr	r2, [pc, #144]	@ (801039c <ManageStateDetached_SRC+0xa8>)
 801030a:	4413      	add	r3, r2
 801030c:	60bb      	str	r3, [r7, #8]
  uint32_t _timing = CAD_DEFAULT_TIME;
 801030e:	2302      	movs	r3, #2
 8010310:	60fb      	str	r3, [r7, #12]

  if (_handle->CAD_ResistorUpdateflag == USBPD_TRUE)
 8010312:	68bb      	ldr	r3, [r7, #8]
 8010314:	785b      	ldrb	r3, [r3, #1]
 8010316:	f003 0301 	and.w	r3, r3, #1
 801031a:	b2db      	uxtb	r3, r3
 801031c:	2b00      	cmp	r3, #0
 801031e:	d00b      	beq.n	8010338 <ManageStateDetached_SRC+0x44>
  {
    /* Update the resistor value */
    USBPDM1_AssertRp(PortNum);
 8010320:	79fb      	ldrb	r3, [r7, #7]
 8010322:	4618      	mov	r0, r3
 8010324:	f001 fa50 	bl	80117c8 <USBPDM1_AssertRp>
    _handle->CAD_ResistorUpdateflag = USBPD_FALSE;
 8010328:	68ba      	ldr	r2, [r7, #8]
 801032a:	7853      	ldrb	r3, [r2, #1]
 801032c:	f36f 0300 	bfc	r3, #0, #1
 8010330:	7053      	strb	r3, [r2, #1]

    /* Let time to internal state machine update */
    HAL_Delay(1);
 8010332:	2001      	movs	r0, #1
 8010334:	f7f6 fd30 	bl	8006d98 <HAL_Delay>
  }

  CAD_Check_HW_SRC(PortNum);
 8010338:	79fb      	ldrb	r3, [r7, #7]
 801033a:	4618      	mov	r0, r3
 801033c:	f7ff ff68 	bl	8010210 <CAD_Check_HW_SRC>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  if (_handle->CurrentHWcondition == HW_Detachment)
 8010340:	68bb      	ldr	r3, [r7, #8]
 8010342:	781b      	ldrb	r3, [r3, #0]
 8010344:	f003 031c 	and.w	r3, r3, #28
 8010348:	b2db      	uxtb	r3, r3
 801034a:	2b00      	cmp	r3, #0
 801034c:	d103      	bne.n	8010356 <ManageStateDetached_SRC+0x62>
  {
#if defined(_LOW_POWER)
    /* Value returned for a SRC */
    _timing = CAD_DETACH_POLLING;
#else
    _timing = CAD_INFINITE_TIME;
 801034e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010352:	60fb      	str	r3, [r7, #12]
 8010354:	e01c      	b.n	8010390 <ManageStateDetached_SRC+0x9c>
#endif /* _LOW_POWER */
  }
  else
  {
    if (_handle->CurrentHWcondition == HW_PwrCable_NoSink_Attachment)
 8010356:	68bb      	ldr	r3, [r7, #8]
 8010358:	781b      	ldrb	r3, [r3, #0]
 801035a:	f003 031c 	and.w	r3, r3, #28
 801035e:	b2db      	uxtb	r3, r3
 8010360:	2b08      	cmp	r3, #8
 8010362:	d106      	bne.n	8010372 <ManageStateDetached_SRC+0x7e>
    {
      _handle->cstate = USBPD_CAD_STATE_EMC;
 8010364:	68ba      	ldr	r2, [r7, #8]
 8010366:	7853      	ldrb	r3, [r2, #1]
 8010368:	2104      	movs	r1, #4
 801036a:	f361 0345 	bfi	r3, r1, #1, #5
 801036e:	7053      	strb	r3, [r2, #1]
 8010370:	e00e      	b.n	8010390 <ManageStateDetached_SRC+0x9c>
    }
    else
    {
      /* Get the time of this event */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 8010372:	f7f6 fd05 	bl	8006d80 <HAL_GetTick>
 8010376:	4602      	mov	r2, r0
 8010378:	68bb      	ldr	r3, [r7, #8]
 801037a:	605a      	str	r2, [r3, #4]
      _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 801037c:	68ba      	ldr	r2, [r7, #8]
 801037e:	7853      	ldrb	r3, [r2, #1]
 8010380:	2102      	movs	r1, #2
 8010382:	f361 0345 	bfi	r3, r1, #1, #5
 8010386:	7053      	strb	r3, [r2, #1]

      BSP_USBPD_PWR_VBUSInit(PortNum);
 8010388:	79fb      	ldrb	r3, [r7, #7]
 801038a:	4618      	mov	r0, r3
 801038c:	f005 fb2d 	bl	80159ea <BSP_USBPD_PWR_VBUSInit>
    }
  }
  return _timing;
 8010390:	68fb      	ldr	r3, [r7, #12]
}
 8010392:	4618      	mov	r0, r3
 8010394:	3710      	adds	r7, #16
 8010396:	46bd      	mov	sp, r7
 8010398:	bd80      	pop	{r7, pc}
 801039a:	bf00      	nop
 801039c:	20000a78 	.word	0x20000a78

080103a0 <ManageStateAttachedWait_SRC>:
  * @param  pEvent  Pointer on CAD event based on @ref USBPD_CAD_EVENT
  * @param  pCCXX   Pointer on CC Pin based on @ref CCxPin_TypeDef
  * @retval Timeout value
  */
static uint32_t ManageStateAttachedWait_SRC(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 80103a0:	b580      	push	{r7, lr}
 80103a2:	b088      	sub	sp, #32
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	4603      	mov	r3, r0
 80103a8:	60b9      	str	r1, [r7, #8]
 80103aa:	607a      	str	r2, [r7, #4]
 80103ac:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80103ae:	7bfa      	ldrb	r2, [r7, #15]
 80103b0:	4613      	mov	r3, r2
 80103b2:	005b      	lsls	r3, r3, #1
 80103b4:	4413      	add	r3, r2
 80103b6:	009b      	lsls	r3, r3, #2
 80103b8:	4a66      	ldr	r2, [pc, #408]	@ (8010554 <ManageStateAttachedWait_SRC+0x1b4>)
 80103ba:	4413      	add	r3, r2
 80103bc:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 80103be:	2302      	movs	r3, #2
 80103c0:	61fb      	str	r3, [r7, #28]

  /* Evaluate elapsed time in Attach_Wait state */
  uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 80103c2:	f7f6 fcdd 	bl	8006d80 <HAL_GetTick>
 80103c6:	4602      	mov	r2, r0
 80103c8:	69bb      	ldr	r3, [r7, #24]
 80103ca:	685b      	ldr	r3, [r3, #4]
 80103cc:	1ad3      	subs	r3, r2, r3
 80103ce:	617b      	str	r3, [r7, #20]
  CAD_Check_HW_SRC(PortNum);
 80103d0:	7bfb      	ldrb	r3, [r7, #15]
 80103d2:	4618      	mov	r0, r3
 80103d4:	f7ff ff1c 	bl	8010210 <CAD_Check_HW_SRC>

  if ((_handle->CurrentHWcondition != HW_Detachment) && (_handle->CurrentHWcondition != HW_PwrCable_NoSink_Attachment))
 80103d8:	69bb      	ldr	r3, [r7, #24]
 80103da:	781b      	ldrb	r3, [r3, #0]
 80103dc:	f003 031c 	and.w	r3, r3, #28
 80103e0:	b2db      	uxtb	r3, r3
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	f000 8086 	beq.w	80104f4 <ManageStateAttachedWait_SRC+0x154>
 80103e8:	69bb      	ldr	r3, [r7, #24]
 80103ea:	781b      	ldrb	r3, [r3, #0]
 80103ec:	f003 031c 	and.w	r3, r3, #28
 80103f0:	b2db      	uxtb	r3, r3
 80103f2:	2b08      	cmp	r3, #8
 80103f4:	d07e      	beq.n	80104f4 <ManageStateAttachedWait_SRC+0x154>
  {
    if (USBPD_FALSE == USBPD_PWR_IF_GetVBUSStatus(PortNum, USBPD_PWR_BELOWVSAFE0V))
 80103f6:	7bfb      	ldrb	r3, [r7, #15]
 80103f8:	2100      	movs	r1, #0
 80103fa:	4618      	mov	r0, r3
 80103fc:	f005 faa6 	bl	801594c <USBPD_PWR_IF_GetVBUSStatus>
 8010400:	4603      	mov	r3, r0
 8010402:	2b00      	cmp	r3, #0
 8010404:	d106      	bne.n	8010414 <ManageStateAttachedWait_SRC+0x74>
    {
      /* Reset the timing because VBUS threshold not yet reach */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 8010406:	f7f6 fcbb 	bl	8006d80 <HAL_GetTick>
 801040a:	4602      	mov	r2, r0
 801040c:	69bb      	ldr	r3, [r7, #24]
 801040e:	605a      	str	r2, [r3, #4]
      return CAD_TCCDEBOUNCE_THRESHOLD;
 8010410:	2378      	movs	r3, #120	@ 0x78
 8010412:	e09b      	b.n	801054c <ManageStateAttachedWait_SRC+0x1ac>
    }

    /* Check tCCDebounce */
    if (CAD_tDebounce > CAD_TCCDEBOUNCE_THRESHOLD)
 8010414:	697b      	ldr	r3, [r7, #20]
 8010416:	2b78      	cmp	r3, #120	@ 0x78
 8010418:	d966      	bls.n	80104e8 <ManageStateAttachedWait_SRC+0x148>
    {
      switch (_handle->CurrentHWcondition)
 801041a:	69bb      	ldr	r3, [r7, #24]
 801041c:	781b      	ldrb	r3, [r3, #0]
 801041e:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8010422:	b2db      	uxtb	r3, r3
 8010424:	2b03      	cmp	r3, #3
 8010426:	d023      	beq.n	8010470 <ManageStateAttachedWait_SRC+0xd0>
 8010428:	2b03      	cmp	r3, #3
 801042a:	dc4c      	bgt.n	80104c6 <ManageStateAttachedWait_SRC+0x126>
 801042c:	2b01      	cmp	r3, #1
 801042e:	d002      	beq.n	8010436 <ManageStateAttachedWait_SRC+0x96>
 8010430:	2b02      	cmp	r3, #2
 8010432:	d032      	beq.n	801049a <ManageStateAttachedWait_SRC+0xfa>
 8010434:	e047      	b.n	80104c6 <ManageStateAttachedWait_SRC+0x126>
      {
        case HW_Attachment:
          HW_SignalAttachement(PortNum, _handle->cc);
 8010436:	69bb      	ldr	r3, [r7, #24]
 8010438:	781b      	ldrb	r3, [r3, #0]
 801043a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 801043e:	b2db      	uxtb	r3, r3
 8010440:	461a      	mov	r2, r3
 8010442:	7bfb      	ldrb	r3, [r7, #15]
 8010444:	4611      	mov	r1, r2
 8010446:	4618      	mov	r0, r3
 8010448:	f001 fb66 	bl	8011b18 <HW_SignalAttachement>
          _handle->cstate = USBPD_CAD_STATE_ATTACHED;
 801044c:	69ba      	ldr	r2, [r7, #24]
 801044e:	7853      	ldrb	r3, [r2, #1]
 8010450:	2103      	movs	r1, #3
 8010452:	f361 0345 	bfi	r3, r1, #1, #5
 8010456:	7053      	strb	r3, [r2, #1]
          *pEvent = USBPD_CAD_EVENT_ATTACHED;
 8010458:	68bb      	ldr	r3, [r7, #8]
 801045a:	2202      	movs	r2, #2
 801045c:	701a      	strb	r2, [r3, #0]
          *pCCXX = _handle->cc;
 801045e:	69bb      	ldr	r3, [r7, #24]
 8010460:	781b      	ldrb	r3, [r3, #0]
 8010462:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8010466:	b2db      	uxtb	r3, r3
 8010468:	461a      	mov	r2, r3
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	601a      	str	r2, [r3, #0]
          break;
 801046e:	e031      	b.n	80104d4 <ManageStateAttachedWait_SRC+0x134>

        case HW_PwrCable_Sink_Attachment:
          HW_SignalAttachement(PortNum, _handle->cc);
 8010470:	69bb      	ldr	r3, [r7, #24]
 8010472:	781b      	ldrb	r3, [r3, #0]
 8010474:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8010478:	b2db      	uxtb	r3, r3
 801047a:	461a      	mov	r2, r3
 801047c:	7bfb      	ldrb	r3, [r7, #15]
 801047e:	4611      	mov	r1, r2
 8010480:	4618      	mov	r0, r3
 8010482:	f001 fb49 	bl	8011b18 <HW_SignalAttachement>
          _handle->cstate = USBPD_CAD_STATE_ATTEMC;
 8010486:	69ba      	ldr	r2, [r7, #24]
 8010488:	7853      	ldrb	r3, [r2, #1]
 801048a:	2105      	movs	r1, #5
 801048c:	f361 0345 	bfi	r3, r1, #1, #5
 8010490:	7053      	strb	r3, [r2, #1]
          *pEvent = USBPD_CAD_EVENT_ATTEMC;
 8010492:	68bb      	ldr	r3, [r7, #8]
 8010494:	2204      	movs	r2, #4
 8010496:	701a      	strb	r2, [r3, #0]
          break;
 8010498:	e01c      	b.n	80104d4 <ManageStateAttachedWait_SRC+0x134>

        case HW_PwrCable_NoSink_Attachment:
          BSP_USBPD_PWR_VBUSDeInit(PortNum);
 801049a:	7bfb      	ldrb	r3, [r7, #15]
 801049c:	4618      	mov	r0, r3
 801049e:	f005 fab7 	bl	8015a10 <BSP_USBPD_PWR_VBUSDeInit>
          _handle->cstate = USBPD_CAD_STATE_EMC;
 80104a2:	69ba      	ldr	r2, [r7, #24]
 80104a4:	7853      	ldrb	r3, [r2, #1]
 80104a6:	2104      	movs	r1, #4
 80104a8:	f361 0345 	bfi	r3, r1, #1, #5
 80104ac:	7053      	strb	r3, [r2, #1]
          *pEvent = USBPD_CAD_EVENT_EMC;
 80104ae:	68bb      	ldr	r3, [r7, #8]
 80104b0:	2203      	movs	r2, #3
 80104b2:	701a      	strb	r2, [r3, #0]
          *pCCXX = _handle->cc;
 80104b4:	69bb      	ldr	r3, [r7, #24]
 80104b6:	781b      	ldrb	r3, [r3, #0]
 80104b8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80104bc:	b2db      	uxtb	r3, r3
 80104be:	461a      	mov	r2, r3
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	601a      	str	r2, [r3, #0]
          break;
 80104c4:	e006      	b.n	80104d4 <ManageStateAttachedWait_SRC+0x134>
#endif /* _ACCESSORY_SRC */

        case HW_Detachment:
        default:
#if !defined(_ACCESSORY_SRC)
          _handle->cstate             = USBPD_CAD_STATE_DETACH_SRC;
 80104c6:	69ba      	ldr	r2, [r7, #24]
 80104c8:	7853      	ldrb	r3, [r2, #1]
 80104ca:	210b      	movs	r1, #11
 80104cc:	f361 0345 	bfi	r3, r1, #1, #5
 80104d0:	7053      	strb	r3, [r2, #1]
#endif /* _ACCESSORY_SRC */
          break;
 80104d2:	bf00      	nop
      } /* End of switch */
      *pCCXX = _handle->cc;
 80104d4:	69bb      	ldr	r3, [r7, #24]
 80104d6:	781b      	ldrb	r3, [r3, #0]
 80104d8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80104dc:	b2db      	uxtb	r3, r3
 80104de:	461a      	mov	r2, r3
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	601a      	str	r2, [r3, #0]
      _timing = CAD_DEFAULT_TIME;
 80104e4:	2302      	movs	r3, #2
 80104e6:	61fb      	str	r3, [r7, #28]
    }
    /* Reset the flag for CAD_tDebounce */
    _handle->CAD_tDebounce_flag = USBPD_FALSE;
 80104e8:	69ba      	ldr	r2, [r7, #24]
 80104ea:	7813      	ldrb	r3, [r2, #0]
 80104ec:	f36f 1345 	bfc	r3, #5, #1
 80104f0:	7013      	strb	r3, [r2, #0]
 80104f2:	e02a      	b.n	801054a <ManageStateAttachedWait_SRC+0x1aa>
  }
  else /* CAD_HW_Condition[PortNum] = HW_Detachment */
  {
    /* Start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 80104f4:	69bb      	ldr	r3, [r7, #24]
 80104f6:	781b      	ldrb	r3, [r3, #0]
 80104f8:	f003 0320 	and.w	r3, r3, #32
 80104fc:	b2db      	uxtb	r3, r3
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d10c      	bne.n	801051c <ManageStateAttachedWait_SRC+0x17c>
    {
      _handle->CAD_tDebounce_start  = HAL_GetTick();
 8010502:	f7f6 fc3d 	bl	8006d80 <HAL_GetTick>
 8010506:	4602      	mov	r2, r0
 8010508:	69bb      	ldr	r3, [r7, #24]
 801050a:	605a      	str	r2, [r3, #4]
      _handle->CAD_tDebounce_flag   = USBPD_TRUE;
 801050c:	69ba      	ldr	r2, [r7, #24]
 801050e:	7813      	ldrb	r3, [r2, #0]
 8010510:	f043 0320 	orr.w	r3, r3, #32
 8010514:	7013      	strb	r3, [r2, #0]
      _timing                       = CAD_TSRCDISCONNECT_THRESHOLD;
 8010516:	2302      	movs	r3, #2
 8010518:	61fb      	str	r3, [r7, #28]
 801051a:	e016      	b.n	801054a <ManageStateAttachedWait_SRC+0x1aa>
    }
    else /* CAD_tDebounce already running */
    {
      /* Evaluate CAD_tDebounce */
      CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 801051c:	f7f6 fc30 	bl	8006d80 <HAL_GetTick>
 8010520:	4602      	mov	r2, r0
 8010522:	69bb      	ldr	r3, [r7, #24]
 8010524:	685b      	ldr	r3, [r3, #4]
 8010526:	1ad3      	subs	r3, r2, r3
 8010528:	617b      	str	r3, [r7, #20]
      if (CAD_tDebounce > CAD_TSRCDISCONNECT_THRESHOLD)
 801052a:	697b      	ldr	r3, [r7, #20]
 801052c:	2b02      	cmp	r3, #2
 801052e:	d90c      	bls.n	801054a <ManageStateAttachedWait_SRC+0x1aa>
      {
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 8010530:	69ba      	ldr	r2, [r7, #24]
 8010532:	7813      	ldrb	r3, [r2, #0]
 8010534:	f36f 1345 	bfc	r3, #5, #1
 8010538:	7013      	strb	r3, [r2, #0]
        _handle->cstate             = USBPD_CAD_STATE_DETACH_SRC;
 801053a:	69ba      	ldr	r2, [r7, #24]
 801053c:	7853      	ldrb	r3, [r2, #1]
 801053e:	210b      	movs	r1, #11
 8010540:	f361 0345 	bfi	r3, r1, #1, #5
 8010544:	7053      	strb	r3, [r2, #1]
        _timing = 0;
 8010546:	2300      	movs	r3, #0
 8010548:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  return _timing;
 801054a:	69fb      	ldr	r3, [r7, #28]
}
 801054c:	4618      	mov	r0, r3
 801054e:	3720      	adds	r7, #32
 8010550:	46bd      	mov	sp, r7
 8010552:	bd80      	pop	{r7, pc}
 8010554:	20000a78 	.word	0x20000a78

08010558 <ManageStateEMC>:
#endif /* _DRP || _SRC || (_ACCESSORY && _SNK) */

#if defined(_DRP) || defined(_SRC)
static uint32_t ManageStateEMC(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b086      	sub	sp, #24
 801055c:	af00      	add	r7, sp, #0
 801055e:	4603      	mov	r3, r0
 8010560:	60b9      	str	r1, [r7, #8]
 8010562:	607a      	str	r2, [r7, #4]
 8010564:	73fb      	strb	r3, [r7, #15]
  uint32_t _timing = CAD_INFINITE_TIME;
 8010566:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801056a:	617b      	str	r3, [r7, #20]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 801056c:	7bfa      	ldrb	r2, [r7, #15]
 801056e:	4613      	mov	r3, r2
 8010570:	005b      	lsls	r3, r3, #1
 8010572:	4413      	add	r3, r2
 8010574:	009b      	lsls	r3, r3, #2
 8010576:	4a1c      	ldr	r2, [pc, #112]	@ (80105e8 <ManageStateEMC+0x90>)
 8010578:	4413      	add	r3, r2
 801057a:	613b      	str	r3, [r7, #16]

  CAD_Check_HW_SRC(PortNum);
 801057c:	7bfb      	ldrb	r3, [r7, #15]
 801057e:	4618      	mov	r0, r3
 8010580:	f7ff fe46 	bl	8010210 <CAD_Check_HW_SRC>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  switch (_handle->CurrentHWcondition)
 8010584:	693b      	ldr	r3, [r7, #16]
 8010586:	781b      	ldrb	r3, [r3, #0]
 8010588:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801058c:	b2db      	uxtb	r3, r3
 801058e:	2b03      	cmp	r3, #3
 8010590:	d00f      	beq.n	80105b2 <ManageStateEMC+0x5a>
 8010592:	2b03      	cmp	r3, #3
 8010594:	dc20      	bgt.n	80105d8 <ManageStateEMC+0x80>
 8010596:	2b00      	cmp	r3, #0
 8010598:	d002      	beq.n	80105a0 <ManageStateEMC+0x48>
 801059a:	2b01      	cmp	r3, #1
 801059c:	d009      	beq.n	80105b2 <ManageStateEMC+0x5a>
 801059e:	e01b      	b.n	80105d8 <ManageStateEMC+0x80>
  {
    case HW_Detachment :
      _handle->cstate = USBPD_CAD_STATE_SWITCH_TO_SNK;
 80105a0:	693a      	ldr	r2, [r7, #16]
 80105a2:	7853      	ldrb	r3, [r2, #1]
 80105a4:	2109      	movs	r1, #9
 80105a6:	f361 0345 	bfi	r3, r1, #1, #5
 80105aa:	7053      	strb	r3, [r2, #1]
      _timing = 1;
 80105ac:	2301      	movs	r3, #1
 80105ae:	617b      	str	r3, [r7, #20]
      break;
 80105b0:	e015      	b.n	80105de <ManageStateEMC+0x86>
    case HW_PwrCable_Sink_Attachment:
    case HW_Attachment :
      _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 80105b2:	693a      	ldr	r2, [r7, #16]
 80105b4:	7853      	ldrb	r3, [r2, #1]
 80105b6:	2102      	movs	r1, #2
 80105b8:	f361 0345 	bfi	r3, r1, #1, #5
 80105bc:	7053      	strb	r3, [r2, #1]
      _handle->CAD_tDebounce_start = HAL_GetTick() - 5u;  /* This is only to check cable presence */
 80105be:	f7f6 fbdf 	bl	8006d80 <HAL_GetTick>
 80105c2:	4603      	mov	r3, r0
 80105c4:	1f5a      	subs	r2, r3, #5
 80105c6:	693b      	ldr	r3, [r7, #16]
 80105c8:	605a      	str	r2, [r3, #4]
      BSP_USBPD_PWR_VBUSInit(PortNum);
 80105ca:	7bfb      	ldrb	r3, [r7, #15]
 80105cc:	4618      	mov	r0, r3
 80105ce:	f005 fa0c 	bl	80159ea <BSP_USBPD_PWR_VBUSInit>
      _timing = CAD_DEFAULT_TIME;
 80105d2:	2302      	movs	r3, #2
 80105d4:	617b      	str	r3, [r7, #20]
      break;
 80105d6:	e002      	b.n	80105de <ManageStateEMC+0x86>
          _handle->cstate = USBPD_CAD_STATE_SWITCH_TO_SNK;
        }
        _timing = 0;
      }
#else
      _timing = CAD_DEFAULT_TIME;
 80105d8:	2302      	movs	r3, #2
 80105da:	617b      	str	r3, [r7, #20]
#endif /* _DRP */
      break;
 80105dc:	bf00      	nop
  }
  return _timing;
 80105de:	697b      	ldr	r3, [r7, #20]
}
 80105e0:	4618      	mov	r0, r3
 80105e2:	3718      	adds	r7, #24
 80105e4:	46bd      	mov	sp, r7
 80105e6:	bd80      	pop	{r7, pc}
 80105e8:	20000a78 	.word	0x20000a78

080105ec <ManageStateAttached_SRC>:
  * @param  pEvent  Pointer on CAD event based on @ref USBPD_CAD_EVENT
  * @param  pCCXX   Pointer on CC Pin based on @ref CCxPin_TypeDef
  * @retval Timeout value
  */
static uint32_t ManageStateAttached_SRC(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b08a      	sub	sp, #40	@ 0x28
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	4603      	mov	r3, r0
 80105f4:	60b9      	str	r1, [r7, #8]
 80105f6:	607a      	str	r2, [r7, #4]
 80105f8:	73fb      	strb	r3, [r7, #15]
  for (int32_t index = 0; index < CAD_DELAY_READ_CC_STATUS; index++)
  {
    __DSB();
  };
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80105fa:	7bfa      	ldrb	r2, [r7, #15]
 80105fc:	4613      	mov	r3, r2
 80105fe:	005b      	lsls	r3, r3, #1
 8010600:	4413      	add	r3, r2
 8010602:	009b      	lsls	r3, r3, #2
 8010604:	4a3f      	ldr	r2, [pc, #252]	@ (8010704 <ManageStateAttached_SRC+0x118>)
 8010606:	4413      	add	r3, r2
 8010608:	623b      	str	r3, [r7, #32]
  uint32_t _timing = CAD_DEFAULT_TIME;
 801060a:	2302      	movs	r3, #2
 801060c:	627b      	str	r3, [r7, #36]	@ 0x24

  uint32_t ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) :
 801060e:	7bfa      	ldrb	r2, [r7, #15]
 8010610:	493d      	ldr	r1, [pc, #244]	@ (8010708 <ManageStateAttached_SRC+0x11c>)
 8010612:	4613      	mov	r3, r2
 8010614:	011b      	lsls	r3, r3, #4
 8010616:	1a9b      	subs	r3, r3, r2
 8010618:	009b      	lsls	r3, r3, #2
 801061a:	440b      	add	r3, r1
 801061c:	3334      	adds	r3, #52	@ 0x34
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	2b01      	cmp	r3, #1
 8010622:	d10b      	bne.n	801063c <ManageStateAttached_SRC+0x50>
 8010624:	7bfa      	ldrb	r2, [r7, #15]
 8010626:	4938      	ldr	r1, [pc, #224]	@ (8010708 <ManageStateAttached_SRC+0x11c>)
 8010628:	4613      	mov	r3, r2
 801062a:	011b      	lsls	r3, r3, #4
 801062c:	1a9b      	subs	r3, r3, r2
 801062e:	009b      	lsls	r3, r3, #2
 8010630:	440b      	add	r3, r1
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	695b      	ldr	r3, [r3, #20]
 8010636:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801063a:	e00a      	b.n	8010652 <ManageStateAttached_SRC+0x66>
                  (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 801063c:	7bfa      	ldrb	r2, [r7, #15]
 801063e:	4932      	ldr	r1, [pc, #200]	@ (8010708 <ManageStateAttached_SRC+0x11c>)
 8010640:	4613      	mov	r3, r2
 8010642:	011b      	lsls	r3, r3, #4
 8010644:	1a9b      	subs	r3, r3, r2
 8010646:	009b      	lsls	r3, r3, #2
 8010648:	440b      	add	r3, r1
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	695b      	ldr	r3, [r3, #20]
  uint32_t ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) :
 801064e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8010652:	61fb      	str	r3, [r7, #28]
  uint32_t comp = (Ports[PortNum].CCx == CC1) ? LL_UCPD_SRC_CC1_VRD : LL_UCPD_SRC_CC2_VRD;
 8010654:	7bfa      	ldrb	r2, [r7, #15]
 8010656:	492c      	ldr	r1, [pc, #176]	@ (8010708 <ManageStateAttached_SRC+0x11c>)
 8010658:	4613      	mov	r3, r2
 801065a:	011b      	lsls	r3, r3, #4
 801065c:	1a9b      	subs	r3, r3, r2
 801065e:	009b      	lsls	r3, r3, #2
 8010660:	440b      	add	r3, r1
 8010662:	3334      	adds	r3, #52	@ 0x34
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	2b01      	cmp	r3, #1
 8010668:	d102      	bne.n	8010670 <ManageStateAttached_SRC+0x84>
 801066a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801066e:	e001      	b.n	8010674 <ManageStateAttached_SRC+0x88>
 8010670:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8010674:	61bb      	str	r3, [r7, #24]

  /* Check if CC lines is opened or switch to debug accessory */
  if (comp != ccx)
 8010676:	69ba      	ldr	r2, [r7, #24]
 8010678:	69fb      	ldr	r3, [r7, #28]
 801067a:	429a      	cmp	r2, r3
 801067c:	d035      	beq.n	80106ea <ManageStateAttached_SRC+0xfe>
  {
    /* Start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 801067e:	6a3b      	ldr	r3, [r7, #32]
 8010680:	781b      	ldrb	r3, [r3, #0]
 8010682:	f003 0320 	and.w	r3, r3, #32
 8010686:	b2db      	uxtb	r3, r3
 8010688:	2b00      	cmp	r3, #0
 801068a:	d10c      	bne.n	80106a6 <ManageStateAttached_SRC+0xba>
    {
      _handle->CAD_tDebounce_flag   = USBPD_TRUE;
 801068c:	6a3a      	ldr	r2, [r7, #32]
 801068e:	7813      	ldrb	r3, [r2, #0]
 8010690:	f043 0320 	orr.w	r3, r3, #32
 8010694:	7013      	strb	r3, [r2, #0]
      _handle->CAD_tDebounce_start  = HAL_GetTick();
 8010696:	f7f6 fb73 	bl	8006d80 <HAL_GetTick>
 801069a:	4602      	mov	r2, r0
 801069c:	6a3b      	ldr	r3, [r7, #32]
 801069e:	605a      	str	r2, [r3, #4]
      _timing                       = CAD_TSRCDISCONNECT_THRESHOLD;
 80106a0:	2302      	movs	r3, #2
 80106a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80106a4:	e029      	b.n	80106fa <ManageStateAttached_SRC+0x10e>
    }
    else /* CAD_tDebounce already running */
    {
      /* Evaluate CAD_tDebounce */
      uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 80106a6:	f7f6 fb6b 	bl	8006d80 <HAL_GetTick>
 80106aa:	4602      	mov	r2, r0
 80106ac:	6a3b      	ldr	r3, [r7, #32]
 80106ae:	685b      	ldr	r3, [r3, #4]
 80106b0:	1ad3      	subs	r3, r2, r3
 80106b2:	617b      	str	r3, [r7, #20]
      if (CAD_tDebounce > CAD_TSRCDISCONNECT_THRESHOLD)
 80106b4:	697b      	ldr	r3, [r7, #20]
 80106b6:	2b02      	cmp	r3, #2
 80106b8:	d91f      	bls.n	80106fa <ManageStateAttached_SRC+0x10e>
      {
        HW_SignalDetachment(PortNum);
 80106ba:	7bfb      	ldrb	r3, [r7, #15]
 80106bc:	4618      	mov	r0, r3
 80106be:	f001 fb77 	bl	8011db0 <HW_SignalDetachment>
        if (USBPD_TRUE == Ports[PortNum].settings->CAD_RoleToggle)
        {
          USBPDM1_AssertRd(PortNum);
        }
#endif /* _DRP */
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 80106c2:	6a3a      	ldr	r2, [r7, #32]
 80106c4:	7813      	ldrb	r3, [r2, #0]
 80106c6:	f36f 1345 	bfc	r3, #5, #1
 80106ca:	7013      	strb	r3, [r2, #0]
        /* Move inside state DETACH to avoid wrong VCONN level*/
        _handle->cstate             = USBPD_CAD_STATE_DETACH_SRC;
 80106cc:	6a3a      	ldr	r2, [r7, #32]
 80106ce:	7853      	ldrb	r3, [r2, #1]
 80106d0:	210b      	movs	r1, #11
 80106d2:	f361 0345 	bfi	r3, r1, #1, #5
 80106d6:	7053      	strb	r3, [r2, #1]
        *pEvent                     = USBPD_CAD_EVENT_DETACHED;
 80106d8:	68bb      	ldr	r3, [r7, #8]
 80106da:	2201      	movs	r2, #1
 80106dc:	701a      	strb	r2, [r3, #0]
        *pCCXX                      = CCNONE;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	2200      	movs	r2, #0
 80106e2:	601a      	str	r2, [r3, #0]
        _timing                     = 0;
 80106e4:	2300      	movs	r3, #0
 80106e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80106e8:	e007      	b.n	80106fa <ManageStateAttached_SRC+0x10e>
    }
  }
  else
  {
    /* Reset tPDDebounce flag*/
    _handle->CAD_tDebounce_flag   = USBPD_FALSE;
 80106ea:	6a3a      	ldr	r2, [r7, #32]
 80106ec:	7813      	ldrb	r3, [r2, #0]
 80106ee:	f36f 1345 	bfc	r3, #5, #1
 80106f2:	7013      	strb	r3, [r2, #0]
#if  defined(_LOW_POWER)
    _timing = CAD_VBUS_POLLING_TIME;
#else
    _timing = CAD_INFINITE_TIME;
 80106f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80106f8:	627b      	str	r3, [r7, #36]	@ 0x24
#endif /* _LOW_POWER */
  }

  return _timing;
 80106fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80106fc:	4618      	mov	r0, r3
 80106fe:	3728      	adds	r7, #40	@ 0x28
 8010700:	46bd      	mov	sp, r7
 8010702:	bd80      	pop	{r7, pc}
 8010704:	20000a78 	.word	0x20000a78
 8010708:	20000a90 	.word	0x20000a90

0801070c <LL_AHB1_GRP1_EnableClock>:
{
 801070c:	b480      	push	{r7}
 801070e:	b085      	sub	sp, #20
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8010714:	4b08      	ldr	r3, [pc, #32]	@ (8010738 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8010716:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010718:	4907      	ldr	r1, [pc, #28]	@ (8010738 <LL_AHB1_GRP1_EnableClock+0x2c>)
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	4313      	orrs	r3, r2
 801071e:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8010720:	4b05      	ldr	r3, [pc, #20]	@ (8010738 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8010722:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	4013      	ands	r3, r2
 8010728:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801072a:	68fb      	ldr	r3, [r7, #12]
}
 801072c:	bf00      	nop
 801072e:	3714      	adds	r7, #20
 8010730:	46bd      	mov	sp, r7
 8010732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010736:	4770      	bx	lr
 8010738:	40021000 	.word	0x40021000

0801073c <USBPD_HW_GetUSPDInstance>:
/* Variable containing ADC conversions results */
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

UCPD_TypeDef *USBPD_HW_GetUSPDInstance(uint8_t PortNum)
{
 801073c:	b480      	push	{r7}
 801073e:	b083      	sub	sp, #12
 8010740:	af00      	add	r7, sp, #0
 8010742:	4603      	mov	r3, r0
 8010744:	71fb      	strb	r3, [r7, #7]
  return UCPD_INSTANCE0;
 8010746:	4b03      	ldr	r3, [pc, #12]	@ (8010754 <USBPD_HW_GetUSPDInstance+0x18>)
}
 8010748:	4618      	mov	r0, r3
 801074a:	370c      	adds	r7, #12
 801074c:	46bd      	mov	sp, r7
 801074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010752:	4770      	bx	lr
 8010754:	4000a000 	.word	0x4000a000

08010758 <USBPD_HW_Init_DMARxInstance>:

#if !defined(USBPDCORE_LIB_NO_PD)
DMA_Channel_TypeDef *USBPD_HW_Init_DMARxInstance(uint8_t PortNum)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b08e      	sub	sp, #56	@ 0x38
 801075c:	af00      	add	r7, sp, #0
 801075e:	4603      	mov	r3, r0
 8010760:	71fb      	strb	r3, [r7, #7]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 8010762:	f107 030c 	add.w	r3, r7, #12
 8010766:	4618      	mov	r0, r3
 8010768:	f7fe ff24 	bl	800f5b4 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 801076c:	2300      	movs	r3, #0
 801076e:	617b      	str	r3, [r7, #20]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 8010770:	2300      	movs	r3, #0
 8010772:	61bb      	str	r3, [r7, #24]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 8010774:	2300      	movs	r3, #0
 8010776:	61fb      	str	r3, [r7, #28]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 8010778:	2380      	movs	r3, #128	@ 0x80
 801077a:	623b      	str	r3, [r7, #32]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 801077c:	2300      	movs	r3, #0
 801077e:	627b      	str	r3, [r7, #36]	@ 0x24
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 8010780:	2300      	movs	r3, #0
 8010782:	62bb      	str	r3, [r7, #40]	@ 0x28
  DMA_InitStruct.NbData = 0;
 8010784:	2300      	movs	r3, #0
 8010786:	62fb      	str	r3, [r7, #44]	@ 0x2c
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 8010788:	2300      	movs	r3, #0
 801078a:	613b      	str	r3, [r7, #16]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 801078c:	2300      	movs	r3, #0
 801078e:	60fb      	str	r3, [r7, #12]
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_HIGH;
 8010790:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010794:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Enable the clock */
  UCPDDMA_INSTANCE0_CLOCKENABLE_RX;
 8010796:	2001      	movs	r0, #1
 8010798:	f7ff ffb8 	bl	801070c <LL_AHB1_GRP1_EnableClock>

  /* Initialise the DMA */
  DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_RX;
 801079c:	2372      	movs	r3, #114	@ 0x72
 801079e:	633b      	str	r3, [r7, #48]	@ 0x30

  (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_RX, UCPDDMA_INSTANCE0_LL_CHANNEL_RX, &DMA_InitStruct);
 80107a0:	f107 030c 	add.w	r3, r7, #12
 80107a4:	461a      	mov	r2, r3
 80107a6:	2100      	movs	r1, #0
 80107a8:	4803      	ldr	r0, [pc, #12]	@ (80107b8 <USBPD_HW_Init_DMARxInstance+0x60>)
 80107aa:	f7fe fec3 	bl	800f534 <LL_DMA_Init>
  return UCPDDMA_INSTANCE0_CHANNEL_RX;
 80107ae:	4b03      	ldr	r3, [pc, #12]	@ (80107bc <USBPD_HW_Init_DMARxInstance+0x64>)
}
 80107b0:	4618      	mov	r0, r3
 80107b2:	3738      	adds	r7, #56	@ 0x38
 80107b4:	46bd      	mov	sp, r7
 80107b6:	bd80      	pop	{r7, pc}
 80107b8:	40020000 	.word	0x40020000
 80107bc:	40020008 	.word	0x40020008

080107c0 <USBPD_HW_DeInit_DMARxInstance>:

void USBPD_HW_DeInit_DMARxInstance(uint8_t PortNum)
{
 80107c0:	b480      	push	{r7}
 80107c2:	b083      	sub	sp, #12
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	4603      	mov	r3, r0
 80107c8:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
}
 80107ca:	bf00      	nop
 80107cc:	370c      	adds	r7, #12
 80107ce:	46bd      	mov	sp, r7
 80107d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d4:	4770      	bx	lr
	...

080107d8 <USBPD_HW_Init_DMATxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMATxInstance(uint8_t PortNum)
{
 80107d8:	b580      	push	{r7, lr}
 80107da:	b08e      	sub	sp, #56	@ 0x38
 80107dc:	af00      	add	r7, sp, #0
 80107de:	4603      	mov	r3, r0
 80107e0:	71fb      	strb	r3, [r7, #7]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 80107e2:	f107 030c 	add.w	r3, r7, #12
 80107e6:	4618      	mov	r0, r3
 80107e8:	f7fe fee4 	bl	800f5b4 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 80107ec:	2310      	movs	r3, #16
 80107ee:	617b      	str	r3, [r7, #20]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 80107f0:	2300      	movs	r3, #0
 80107f2:	61bb      	str	r3, [r7, #24]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 80107f4:	2300      	movs	r3, #0
 80107f6:	61fb      	str	r3, [r7, #28]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 80107f8:	2380      	movs	r3, #128	@ 0x80
 80107fa:	623b      	str	r3, [r7, #32]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 80107fc:	2300      	movs	r3, #0
 80107fe:	627b      	str	r3, [r7, #36]	@ 0x24
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 8010800:	2300      	movs	r3, #0
 8010802:	62bb      	str	r3, [r7, #40]	@ 0x28
  DMA_InitStruct.NbData = 0;
 8010804:	2300      	movs	r3, #0
 8010806:	62fb      	str	r3, [r7, #44]	@ 0x2c
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 8010808:	2300      	movs	r3, #0
 801080a:	613b      	str	r3, [r7, #16]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 801080c:	2300      	movs	r3, #0
 801080e:	60fb      	str	r3, [r7, #12]

  /* Enable the clock */
  UCPDDMA_INSTANCE0_CLOCKENABLE_TX;
 8010810:	2001      	movs	r0, #1
 8010812:	f7ff ff7b 	bl	801070c <LL_AHB1_GRP1_EnableClock>

  DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_TX;
 8010816:	2373      	movs	r3, #115	@ 0x73
 8010818:	633b      	str	r3, [r7, #48]	@ 0x30
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
 801081a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801081e:	637b      	str	r3, [r7, #52]	@ 0x34
  (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_TX, UCPDDMA_INSTANCE0_LL_CHANNEL_TX, &DMA_InitStruct);
 8010820:	f107 030c 	add.w	r3, r7, #12
 8010824:	461a      	mov	r2, r3
 8010826:	2101      	movs	r1, #1
 8010828:	4803      	ldr	r0, [pc, #12]	@ (8010838 <USBPD_HW_Init_DMATxInstance+0x60>)
 801082a:	f7fe fe83 	bl	800f534 <LL_DMA_Init>
  return UCPDDMA_INSTANCE0_CHANNEL_TX;
 801082e:	4b03      	ldr	r3, [pc, #12]	@ (801083c <USBPD_HW_Init_DMATxInstance+0x64>)
}
 8010830:	4618      	mov	r0, r3
 8010832:	3738      	adds	r7, #56	@ 0x38
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}
 8010838:	40020000 	.word	0x40020000
 801083c:	4002001c 	.word	0x4002001c

08010840 <USBPD_HW_DeInit_DMATxInstance>:

void USBPD_HW_DeInit_DMATxInstance(uint8_t PortNum)
{
 8010840:	b480      	push	{r7}
 8010842:	b083      	sub	sp, #12
 8010844:	af00      	add	r7, sp, #0
 8010846:	4603      	mov	r3, r0
 8010848:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
}
 801084a:	bf00      	nop
 801084c:	370c      	adds	r7, #12
 801084e:	46bd      	mov	sp, r7
 8010850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010854:	4770      	bx	lr

08010856 <USBPD_HW_SetFRSSignalling>:
  (void)PortNum;
  return LL_UCPD_RESISTOR_3_0A;
}

void USBPD_HW_SetFRSSignalling(uint8_t PortNum, uint8_t cc)
{
 8010856:	b480      	push	{r7}
 8010858:	b083      	sub	sp, #12
 801085a:	af00      	add	r7, sp, #0
 801085c:	4603      	mov	r3, r0
 801085e:	460a      	mov	r2, r1
 8010860:	71fb      	strb	r3, [r7, #7]
 8010862:	4613      	mov	r3, r2
 8010864:	71bb      	strb	r3, [r7, #6]
  else
  {
    /* FRS_TX common */
    UCPDFRS_INSTANCE0_FRSCC2;
  }
}
 8010866:	bf00      	nop
 8010868:	370c      	adds	r7, #12
 801086a:	46bd      	mov	sp, r7
 801086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010870:	4770      	bx	lr

08010872 <LL_UCPD_ClearFlag_TypeCEventCC2>:
  * @rmtoll IIMR          TYPECEVT2IE        LL_UCPD_ClearFlag_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 8010872:	b480      	push	{r7}
 8010874:	b083      	sub	sp, #12
 8010876:	af00      	add	r7, sp, #0
 8010878:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT2CF);
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	699b      	ldr	r3, [r3, #24]
 801087e:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	619a      	str	r2, [r3, #24]
}
 8010886:	bf00      	nop
 8010888:	370c      	adds	r7, #12
 801088a:	46bd      	mov	sp, r7
 801088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010890:	4770      	bx	lr

08010892 <LL_UCPD_ClearFlag_TypeCEventCC1>:
  * @rmtoll IIMR          TYPECEVT1IE        LL_UCPD_ClearFlag_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 8010892:	b480      	push	{r7}
 8010894:	b083      	sub	sp, #12
 8010896:	af00      	add	r7, sp, #0
 8010898:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT1CF);
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	699b      	ldr	r3, [r3, #24]
 801089e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	619a      	str	r2, [r3, #24]
}
 80108a6:	bf00      	nop
 80108a8:	370c      	adds	r7, #12
 80108aa:	46bd      	mov	sp, r7
 80108ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b0:	4770      	bx	lr

080108b2 <LL_UCPD_ClearFlag_RxMsgEnd>:
  * @rmtoll ICR          RXMSGENDIE         LL_UCPD_ClearFlag_RxMsgEnd
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxMsgEnd(UCPD_TypeDef *UCPDx)
{
 80108b2:	b480      	push	{r7}
 80108b4:	b083      	sub	sp, #12
 80108b6:	af00      	add	r7, sp, #0
 80108b8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXMSGENDCF);
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	699b      	ldr	r3, [r3, #24]
 80108be:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	619a      	str	r2, [r3, #24]
}
 80108c6:	bf00      	nop
 80108c8:	370c      	adds	r7, #12
 80108ca:	46bd      	mov	sp, r7
 80108cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d0:	4770      	bx	lr

080108d2 <LL_UCPD_ClearFlag_RxOvr>:
  * @rmtoll ICR          RXOVRIE         LL_UCPD_ClearFlag_RxOvr
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOvr(UCPD_TypeDef *UCPDx)
{
 80108d2:	b480      	push	{r7}
 80108d4:	b083      	sub	sp, #12
 80108d6:	af00      	add	r7, sp, #0
 80108d8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXOVRCF);
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	699b      	ldr	r3, [r3, #24]
 80108de:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	619a      	str	r2, [r3, #24]
}
 80108e6:	bf00      	nop
 80108e8:	370c      	adds	r7, #12
 80108ea:	46bd      	mov	sp, r7
 80108ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f0:	4770      	bx	lr

080108f2 <LL_UCPD_ClearFlag_RxHRST>:
  * @rmtoll ICR          RXHRSTDETIE         LL_UCPD_ClearFlag_RxHRST
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxHRST(UCPD_TypeDef *UCPDx)
{
 80108f2:	b480      	push	{r7}
 80108f4:	b083      	sub	sp, #12
 80108f6:	af00      	add	r7, sp, #0
 80108f8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXHRSTDETCF);
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	699b      	ldr	r3, [r3, #24]
 80108fe:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	619a      	str	r2, [r3, #24]
}
 8010906:	bf00      	nop
 8010908:	370c      	adds	r7, #12
 801090a:	46bd      	mov	sp, r7
 801090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010910:	4770      	bx	lr

08010912 <LL_UCPD_ClearFlag_RxOrderSet>:
  * @rmtoll ICR          RXORDDETIE         LL_UCPD_ClearFlag_RxOrderSet
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOrderSet(UCPD_TypeDef *UCPDx)
{
 8010912:	b480      	push	{r7}
 8010914:	b083      	sub	sp, #12
 8010916:	af00      	add	r7, sp, #0
 8010918:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXORDDETCF);
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	699b      	ldr	r3, [r3, #24]
 801091e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	619a      	str	r2, [r3, #24]
}
 8010926:	bf00      	nop
 8010928:	370c      	adds	r7, #12
 801092a:	46bd      	mov	sp, r7
 801092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010930:	4770      	bx	lr

08010932 <LL_UCPD_ClearFlag_TxUND>:
  * @rmtoll ICR          TXUNDIE         LL_UCPD_ClearFlag_TxUND
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxUND(UCPD_TypeDef *UCPDx)
{
 8010932:	b480      	push	{r7}
 8010934:	b083      	sub	sp, #12
 8010936:	af00      	add	r7, sp, #0
 8010938:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXUNDCF);
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	699b      	ldr	r3, [r3, #24]
 801093e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	619a      	str	r2, [r3, #24]
}
 8010946:	bf00      	nop
 8010948:	370c      	adds	r7, #12
 801094a:	46bd      	mov	sp, r7
 801094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010950:	4770      	bx	lr

08010952 <LL_UCPD_ClearFlag_TxHRSTSENT>:
  * @rmtoll ICR          HRSTSENTIE         LL_UCPD_ClearFlag_TxHRSTSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTSENT(UCPD_TypeDef *UCPDx)
{
 8010952:	b480      	push	{r7}
 8010954:	b083      	sub	sp, #12
 8010956:	af00      	add	r7, sp, #0
 8010958:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTSENTCF);
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	699b      	ldr	r3, [r3, #24]
 801095e:	f043 0220 	orr.w	r2, r3, #32
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	619a      	str	r2, [r3, #24]
}
 8010966:	bf00      	nop
 8010968:	370c      	adds	r7, #12
 801096a:	46bd      	mov	sp, r7
 801096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010970:	4770      	bx	lr

08010972 <LL_UCPD_ClearFlag_TxHRSTDISC>:
  * @rmtoll ICR          HRSTDISCIE         LL_UCPD_ClearFlag_TxHRSTDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTDISC(UCPD_TypeDef *UCPDx)
{
 8010972:	b480      	push	{r7}
 8010974:	b083      	sub	sp, #12
 8010976:	af00      	add	r7, sp, #0
 8010978:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTDISCCF);
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	699b      	ldr	r3, [r3, #24]
 801097e:	f043 0210 	orr.w	r2, r3, #16
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	619a      	str	r2, [r3, #24]
}
 8010986:	bf00      	nop
 8010988:	370c      	adds	r7, #12
 801098a:	46bd      	mov	sp, r7
 801098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010990:	4770      	bx	lr

08010992 <LL_UCPD_ClearFlag_TxMSGABT>:
  * @rmtoll ICR          TXMSGABTIE         LL_UCPD_ClearFlag_TxMSGABT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGABT(UCPD_TypeDef *UCPDx)
{
 8010992:	b480      	push	{r7}
 8010994:	b083      	sub	sp, #12
 8010996:	af00      	add	r7, sp, #0
 8010998:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGABTCF);
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	699b      	ldr	r3, [r3, #24]
 801099e:	f043 0208 	orr.w	r2, r3, #8
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	619a      	str	r2, [r3, #24]
}
 80109a6:	bf00      	nop
 80109a8:	370c      	adds	r7, #12
 80109aa:	46bd      	mov	sp, r7
 80109ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b0:	4770      	bx	lr

080109b2 <LL_UCPD_ClearFlag_TxMSGSENT>:
  * @rmtoll ICR          TXMSGSENTIE         LL_UCPD_ClearFlag_TxMSGSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGSENT(UCPD_TypeDef *UCPDx)
{
 80109b2:	b480      	push	{r7}
 80109b4:	b083      	sub	sp, #12
 80109b6:	af00      	add	r7, sp, #0
 80109b8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGSENTCF);
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	699b      	ldr	r3, [r3, #24]
 80109be:	f043 0204 	orr.w	r2, r3, #4
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	619a      	str	r2, [r3, #24]
}
 80109c6:	bf00      	nop
 80109c8:	370c      	adds	r7, #12
 80109ca:	46bd      	mov	sp, r7
 80109cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d0:	4770      	bx	lr

080109d2 <LL_UCPD_ClearFlag_TxMSGDISC>:
  * @rmtoll ICR          TXMSGDISCIE         LL_UCPD_ClearFlag_TxMSGDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGDISC(UCPD_TypeDef *UCPDx)
{
 80109d2:	b480      	push	{r7}
 80109d4:	b083      	sub	sp, #12
 80109d6:	af00      	add	r7, sp, #0
 80109d8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGDISCCF);
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	699b      	ldr	r3, [r3, #24]
 80109de:	f043 0202 	orr.w	r2, r3, #2
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	619a      	str	r2, [r3, #24]
}
 80109e6:	bf00      	nop
 80109e8:	370c      	adds	r7, #12
 80109ea:	46bd      	mov	sp, r7
 80109ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f0:	4770      	bx	lr

080109f2 <USBPD_PORT0_IRQHandler>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
void PORTx_IRQHandler(uint8_t PortNum);

void USBPD_PORT0_IRQHandler(void)
{
 80109f2:	b580      	push	{r7, lr}
 80109f4:	af00      	add	r7, sp, #0
  PORTx_IRQHandler(USBPD_PORT_0);
 80109f6:	2000      	movs	r0, #0
 80109f8:	f000 f802 	bl	8010a00 <PORTx_IRQHandler>
}
 80109fc:	bf00      	nop
 80109fe:	bd80      	pop	{r7, pc}

08010a00 <PORTx_IRQHandler>:

void PORTx_IRQHandler(uint8_t PortNum)
{
 8010a00:	b580      	push	{r7, lr}
 8010a02:	b084      	sub	sp, #16
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	4603      	mov	r3, r0
 8010a08:	71fb      	strb	r3, [r7, #7]
  UCPD_TypeDef *hucpd = Ports[PortNum].husbpd;
 8010a0a:	79fa      	ldrb	r2, [r7, #7]
 8010a0c:	4998      	ldr	r1, [pc, #608]	@ (8010c70 <PORTx_IRQHandler+0x270>)
 8010a0e:	4613      	mov	r3, r2
 8010a10:	011b      	lsls	r3, r3, #4
 8010a12:	1a9b      	subs	r3, r3, r2
 8010a14:	009b      	lsls	r3, r3, #2
 8010a16:	440b      	add	r3, r1
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	60fb      	str	r3, [r7, #12]
  uint32_t _interrupt = LL_UCPD_ReadReg(hucpd, SR);
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	695b      	ldr	r3, [r3, #20]
 8010a20:	60bb      	str	r3, [r7, #8]
  static uint8_t ovrflag = 0;

  if ((hucpd->IMR & _interrupt) != 0u)
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	691a      	ldr	r2, [r3, #16]
 8010a26:	68bb      	ldr	r3, [r7, #8]
 8010a28:	4013      	ands	r3, r2
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	f000 81ca 	beq.w	8010dc4 <PORTx_IRQHandler+0x3c4>
  {
    /* TXIS no need to enable it all the transfer are done by DMA */
    if (UCPD_SR_TXMSGDISC == (_interrupt & UCPD_SR_TXMSGDISC))
 8010a30:	68bb      	ldr	r3, [r7, #8]
 8010a32:	f003 0302 	and.w	r3, r3, #2
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d035      	beq.n	8010aa6 <PORTx_IRQHandler+0xa6>
    {
      /* Message has been discarded */
      LL_UCPD_ClearFlag_TxMSGDISC(hucpd);
 8010a3a:	68f8      	ldr	r0, [r7, #12]
 8010a3c:	f7ff ffc9 	bl	80109d2 <LL_UCPD_ClearFlag_TxMSGDISC>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8010a40:	79fa      	ldrb	r2, [r7, #7]
 8010a42:	498b      	ldr	r1, [pc, #556]	@ (8010c70 <PORTx_IRQHandler+0x270>)
 8010a44:	4613      	mov	r3, r2
 8010a46:	011b      	lsls	r3, r3, #4
 8010a48:	1a9b      	subs	r3, r3, r2
 8010a4a:	009b      	lsls	r3, r3, #2
 8010a4c:	440b      	add	r3, r1
 8010a4e:	3304      	adds	r3, #4
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	6819      	ldr	r1, [r3, #0]
 8010a54:	79fa      	ldrb	r2, [r7, #7]
 8010a56:	4886      	ldr	r0, [pc, #536]	@ (8010c70 <PORTx_IRQHandler+0x270>)
 8010a58:	4613      	mov	r3, r2
 8010a5a:	011b      	lsls	r3, r3, #4
 8010a5c:	1a9b      	subs	r3, r3, r2
 8010a5e:	009b      	lsls	r3, r3, #2
 8010a60:	4403      	add	r3, r0
 8010a62:	3304      	adds	r3, #4
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	f021 0201 	bic.w	r2, r1, #1
 8010a6a:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8010a6c:	bf00      	nop
 8010a6e:	79fa      	ldrb	r2, [r7, #7]
 8010a70:	497f      	ldr	r1, [pc, #508]	@ (8010c70 <PORTx_IRQHandler+0x270>)
 8010a72:	4613      	mov	r3, r2
 8010a74:	011b      	lsls	r3, r3, #4
 8010a76:	1a9b      	subs	r3, r3, r2
 8010a78:	009b      	lsls	r3, r3, #2
 8010a7a:	440b      	add	r3, r1
 8010a7c:	3304      	adds	r3, #4
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	f003 0301 	and.w	r3, r3, #1
 8010a86:	2b01      	cmp	r3, #1
 8010a88:	d0f1      	beq.n	8010a6e <PORTx_IRQHandler+0x6e>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 1);
 8010a8a:	79fa      	ldrb	r2, [r7, #7]
 8010a8c:	4978      	ldr	r1, [pc, #480]	@ (8010c70 <PORTx_IRQHandler+0x270>)
 8010a8e:	4613      	mov	r3, r2
 8010a90:	011b      	lsls	r3, r3, #4
 8010a92:	1a9b      	subs	r3, r3, r2
 8010a94:	009b      	lsls	r3, r3, #2
 8010a96:	440b      	add	r3, r1
 8010a98:	3314      	adds	r3, #20
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	79fa      	ldrb	r2, [r7, #7]
 8010a9e:	2101      	movs	r1, #1
 8010aa0:	4610      	mov	r0, r2
 8010aa2:	4798      	blx	r3
      return;
 8010aa4:	e18e      	b.n	8010dc4 <PORTx_IRQHandler+0x3c4>
    }

    if (UCPD_SR_TXMSGSENT == (_interrupt & UCPD_SR_TXMSGSENT))
 8010aa6:	68bb      	ldr	r3, [r7, #8]
 8010aa8:	f003 0304 	and.w	r3, r3, #4
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d035      	beq.n	8010b1c <PORTx_IRQHandler+0x11c>
    {
      /* Message has been fully transferred */
      LL_UCPD_ClearFlag_TxMSGSENT(hucpd);
 8010ab0:	68f8      	ldr	r0, [r7, #12]
 8010ab2:	f7ff ff7e 	bl	80109b2 <LL_UCPD_ClearFlag_TxMSGSENT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8010ab6:	79fa      	ldrb	r2, [r7, #7]
 8010ab8:	496d      	ldr	r1, [pc, #436]	@ (8010c70 <PORTx_IRQHandler+0x270>)
 8010aba:	4613      	mov	r3, r2
 8010abc:	011b      	lsls	r3, r3, #4
 8010abe:	1a9b      	subs	r3, r3, r2
 8010ac0:	009b      	lsls	r3, r3, #2
 8010ac2:	440b      	add	r3, r1
 8010ac4:	3304      	adds	r3, #4
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	6819      	ldr	r1, [r3, #0]
 8010aca:	79fa      	ldrb	r2, [r7, #7]
 8010acc:	4868      	ldr	r0, [pc, #416]	@ (8010c70 <PORTx_IRQHandler+0x270>)
 8010ace:	4613      	mov	r3, r2
 8010ad0:	011b      	lsls	r3, r3, #4
 8010ad2:	1a9b      	subs	r3, r3, r2
 8010ad4:	009b      	lsls	r3, r3, #2
 8010ad6:	4403      	add	r3, r0
 8010ad8:	3304      	adds	r3, #4
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	f021 0201 	bic.w	r2, r1, #1
 8010ae0:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8010ae2:	bf00      	nop
 8010ae4:	79fa      	ldrb	r2, [r7, #7]
 8010ae6:	4962      	ldr	r1, [pc, #392]	@ (8010c70 <PORTx_IRQHandler+0x270>)
 8010ae8:	4613      	mov	r3, r2
 8010aea:	011b      	lsls	r3, r3, #4
 8010aec:	1a9b      	subs	r3, r3, r2
 8010aee:	009b      	lsls	r3, r3, #2
 8010af0:	440b      	add	r3, r1
 8010af2:	3304      	adds	r3, #4
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	f003 0301 	and.w	r3, r3, #1
 8010afc:	2b01      	cmp	r3, #1
 8010afe:	d0f1      	beq.n	8010ae4 <PORTx_IRQHandler+0xe4>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 0);
 8010b00:	79fa      	ldrb	r2, [r7, #7]
 8010b02:	495b      	ldr	r1, [pc, #364]	@ (8010c70 <PORTx_IRQHandler+0x270>)
 8010b04:	4613      	mov	r3, r2
 8010b06:	011b      	lsls	r3, r3, #4
 8010b08:	1a9b      	subs	r3, r3, r2
 8010b0a:	009b      	lsls	r3, r3, #2
 8010b0c:	440b      	add	r3, r1
 8010b0e:	3314      	adds	r3, #20
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	79fa      	ldrb	r2, [r7, #7]
 8010b14:	2100      	movs	r1, #0
 8010b16:	4610      	mov	r0, r2
 8010b18:	4798      	blx	r3

#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */
      return;
 8010b1a:	e153      	b.n	8010dc4 <PORTx_IRQHandler+0x3c4>
    }

    if (UCPD_SR_TXMSGABT == (_interrupt & UCPD_SR_TXMSGABT))
 8010b1c:	68bb      	ldr	r3, [r7, #8]
 8010b1e:	f003 0308 	and.w	r3, r3, #8
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d035      	beq.n	8010b92 <PORTx_IRQHandler+0x192>
    {
      LL_UCPD_ClearFlag_TxMSGABT(hucpd);
 8010b26:	68f8      	ldr	r0, [r7, #12]
 8010b28:	f7ff ff33 	bl	8010992 <LL_UCPD_ClearFlag_TxMSGABT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8010b2c:	79fa      	ldrb	r2, [r7, #7]
 8010b2e:	4950      	ldr	r1, [pc, #320]	@ (8010c70 <PORTx_IRQHandler+0x270>)
 8010b30:	4613      	mov	r3, r2
 8010b32:	011b      	lsls	r3, r3, #4
 8010b34:	1a9b      	subs	r3, r3, r2
 8010b36:	009b      	lsls	r3, r3, #2
 8010b38:	440b      	add	r3, r1
 8010b3a:	3304      	adds	r3, #4
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	6819      	ldr	r1, [r3, #0]
 8010b40:	79fa      	ldrb	r2, [r7, #7]
 8010b42:	484b      	ldr	r0, [pc, #300]	@ (8010c70 <PORTx_IRQHandler+0x270>)
 8010b44:	4613      	mov	r3, r2
 8010b46:	011b      	lsls	r3, r3, #4
 8010b48:	1a9b      	subs	r3, r3, r2
 8010b4a:	009b      	lsls	r3, r3, #2
 8010b4c:	4403      	add	r3, r0
 8010b4e:	3304      	adds	r3, #4
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	f021 0201 	bic.w	r2, r1, #1
 8010b56:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 8010b58:	bf00      	nop
 8010b5a:	79fa      	ldrb	r2, [r7, #7]
 8010b5c:	4944      	ldr	r1, [pc, #272]	@ (8010c70 <PORTx_IRQHandler+0x270>)
 8010b5e:	4613      	mov	r3, r2
 8010b60:	011b      	lsls	r3, r3, #4
 8010b62:	1a9b      	subs	r3, r3, r2
 8010b64:	009b      	lsls	r3, r3, #2
 8010b66:	440b      	add	r3, r1
 8010b68:	3304      	adds	r3, #4
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	f003 0301 	and.w	r3, r3, #1
 8010b72:	2b01      	cmp	r3, #1
 8010b74:	d0f1      	beq.n	8010b5a <PORTx_IRQHandler+0x15a>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 2);
 8010b76:	79fa      	ldrb	r2, [r7, #7]
 8010b78:	493d      	ldr	r1, [pc, #244]	@ (8010c70 <PORTx_IRQHandler+0x270>)
 8010b7a:	4613      	mov	r3, r2
 8010b7c:	011b      	lsls	r3, r3, #4
 8010b7e:	1a9b      	subs	r3, r3, r2
 8010b80:	009b      	lsls	r3, r3, #2
 8010b82:	440b      	add	r3, r1
 8010b84:	3314      	adds	r3, #20
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	79fa      	ldrb	r2, [r7, #7]
 8010b8a:	2102      	movs	r1, #2
 8010b8c:	4610      	mov	r0, r2
 8010b8e:	4798      	blx	r3
      return;
 8010b90:	e118      	b.n	8010dc4 <PORTx_IRQHandler+0x3c4>
    }

    /* HRSTDISC : hard reset sending has been discarded */
    if (UCPD_SR_HRSTDISC == (_interrupt & UCPD_SR_HRSTDISC))
 8010b92:	68bb      	ldr	r3, [r7, #8]
 8010b94:	f003 0310 	and.w	r3, r3, #16
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d003      	beq.n	8010ba4 <PORTx_IRQHandler+0x1a4>
    {
      LL_UCPD_ClearFlag_TxHRSTDISC(hucpd);
 8010b9c:	68f8      	ldr	r0, [r7, #12]
 8010b9e:	f7ff fee8 	bl	8010972 <LL_UCPD_ClearFlag_TxHRSTDISC>
      return;
 8010ba2:	e10f      	b.n	8010dc4 <PORTx_IRQHandler+0x3c4>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_HRSTSENT == (_interrupt & UCPD_SR_HRSTSENT))
 8010ba4:	68bb      	ldr	r3, [r7, #8]
 8010ba6:	f003 0320 	and.w	r3, r3, #32
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d010      	beq.n	8010bd0 <PORTx_IRQHandler+0x1d0>
    {
      /* Answer not expected by the stack */
      LL_UCPD_ClearFlag_TxHRSTSENT(hucpd);
 8010bae:	68f8      	ldr	r0, [r7, #12]
 8010bb0:	f7ff fecf 	bl	8010952 <LL_UCPD_ClearFlag_TxHRSTSENT>
      Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted(PortNum, USBPD_SOPTYPE_HARD_RESET);
 8010bb4:	79fa      	ldrb	r2, [r7, #7]
 8010bb6:	492e      	ldr	r1, [pc, #184]	@ (8010c70 <PORTx_IRQHandler+0x270>)
 8010bb8:	4613      	mov	r3, r2
 8010bba:	011b      	lsls	r3, r3, #4
 8010bbc:	1a9b      	subs	r3, r3, r2
 8010bbe:	009b      	lsls	r3, r3, #2
 8010bc0:	440b      	add	r3, r1
 8010bc2:	3324      	adds	r3, #36	@ 0x24
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	79fa      	ldrb	r2, [r7, #7]
 8010bc8:	2105      	movs	r1, #5
 8010bca:	4610      	mov	r0, r2
 8010bcc:	4798      	blx	r3
      return;
 8010bce:	e0f9      	b.n	8010dc4 <PORTx_IRQHandler+0x3c4>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_TXUND == (_interrupt & UCPD_SR_TXUND))
 8010bd0:	68bb      	ldr	r3, [r7, #8]
 8010bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d003      	beq.n	8010be2 <PORTx_IRQHandler+0x1e2>
    {
      /* Nothing to do.
         The port partner checks the message integrity with CRC, so PRL will repeat the sending.
         Can be used for debugging purpose */
      LL_UCPD_ClearFlag_TxUND(hucpd);
 8010bda:	68f8      	ldr	r0, [r7, #12]
 8010bdc:	f7ff fea9 	bl	8010932 <LL_UCPD_ClearFlag_TxUND>
      return;
 8010be0:	e0f0      	b.n	8010dc4 <PORTx_IRQHandler+0x3c4>
    }

    /* RXNE : not needed the stack only perform transfer by DMA */
    /* RXORDDET: not needed so stack will not enabled this interrupt */
    if (UCPD_SR_RXORDDET == (_interrupt & UCPD_SR_RXORDDET))
 8010be2:	68bb      	ldr	r3, [r7, #8]
 8010be4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d01e      	beq.n	8010c2a <PORTx_IRQHandler+0x22a>
    {
      if (LL_UCPD_RXORDSET_CABLE_RESET == hucpd->RX_ORDSET)
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010bf0:	2b05      	cmp	r3, #5
 8010bf2:	d10c      	bne.n	8010c0e <PORTx_IRQHandler+0x20e>
      {
        /* Cable reset detected */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 8010bf4:	79fa      	ldrb	r2, [r7, #7]
 8010bf6:	491e      	ldr	r1, [pc, #120]	@ (8010c70 <PORTx_IRQHandler+0x270>)
 8010bf8:	4613      	mov	r3, r2
 8010bfa:	011b      	lsls	r3, r3, #4
 8010bfc:	1a9b      	subs	r3, r3, r2
 8010bfe:	009b      	lsls	r3, r3, #2
 8010c00:	440b      	add	r3, r1
 8010c02:	331c      	adds	r3, #28
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	79fa      	ldrb	r2, [r7, #7]
 8010c08:	2106      	movs	r1, #6
 8010c0a:	4610      	mov	r0, r2
 8010c0c:	4798      	blx	r3
      }
      LL_UCPD_ClearFlag_RxOrderSet(hucpd);
 8010c0e:	68f8      	ldr	r0, [r7, #12]
 8010c10:	f7ff fe7f 	bl	8010912 <LL_UCPD_ClearFlag_RxOrderSet>
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */

      /* Forbid message sending */
      Ports[PortNum].RXStatus = USBPD_TRUE;
 8010c14:	79fa      	ldrb	r2, [r7, #7]
 8010c16:	4916      	ldr	r1, [pc, #88]	@ (8010c70 <PORTx_IRQHandler+0x270>)
 8010c18:	4613      	mov	r3, r2
 8010c1a:	011b      	lsls	r3, r3, #4
 8010c1c:	1a9b      	subs	r3, r3, r2
 8010c1e:	009b      	lsls	r3, r3, #2
 8010c20:	440b      	add	r3, r1
 8010c22:	3338      	adds	r3, #56	@ 0x38
 8010c24:	2201      	movs	r2, #1
 8010c26:	701a      	strb	r2, [r3, #0]
      return;
 8010c28:	e0cc      	b.n	8010dc4 <PORTx_IRQHandler+0x3c4>
    }

    /* Check RXHRSTDET */
    if (UCPD_SR_RXHRSTDET == (_interrupt & UCPD_SR_RXHRSTDET))
 8010c2a:	68bb      	ldr	r3, [r7, #8]
 8010c2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d010      	beq.n	8010c56 <PORTx_IRQHandler+0x256>
    {
      Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_HARD_RESET);
 8010c34:	79fa      	ldrb	r2, [r7, #7]
 8010c36:	490e      	ldr	r1, [pc, #56]	@ (8010c70 <PORTx_IRQHandler+0x270>)
 8010c38:	4613      	mov	r3, r2
 8010c3a:	011b      	lsls	r3, r3, #4
 8010c3c:	1a9b      	subs	r3, r3, r2
 8010c3e:	009b      	lsls	r3, r3, #2
 8010c40:	440b      	add	r3, r1
 8010c42:	331c      	adds	r3, #28
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	79fa      	ldrb	r2, [r7, #7]
 8010c48:	2105      	movs	r1, #5
 8010c4a:	4610      	mov	r0, r2
 8010c4c:	4798      	blx	r3
      LL_UCPD_ClearFlag_RxHRST(hucpd);
 8010c4e:	68f8      	ldr	r0, [r7, #12]
 8010c50:	f7ff fe4f 	bl	80108f2 <LL_UCPD_ClearFlag_RxHRST>
      return;
 8010c54:	e0b6      	b.n	8010dc4 <PORTx_IRQHandler+0x3c4>
    }

    /* Check RXOVR */
    if (UCPD_SR_RXOVR == (_interrupt & UCPD_SR_RXOVR))
 8010c56:	68bb      	ldr	r3, [r7, #8]
 8010c58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d00b      	beq.n	8010c78 <PORTx_IRQHandler+0x278>
    {
      /* Nothing to do, the message will be discarded and port Partner will try sending again. */
      ovrflag = 1;
 8010c60:	4b04      	ldr	r3, [pc, #16]	@ (8010c74 <PORTx_IRQHandler+0x274>)
 8010c62:	2201      	movs	r2, #1
 8010c64:	701a      	strb	r2, [r3, #0]
      LL_UCPD_ClearFlag_RxOvr(hucpd);
 8010c66:	68f8      	ldr	r0, [r7, #12]
 8010c68:	f7ff fe33 	bl	80108d2 <LL_UCPD_ClearFlag_RxOvr>
      return;
 8010c6c:	e0aa      	b.n	8010dc4 <PORTx_IRQHandler+0x3c4>
 8010c6e:	bf00      	nop
 8010c70:	20000a90 	.word	0x20000a90
 8010c74:	20000a84 	.word	0x20000a84
    }

    /* Check RXMSGEND an Rx message has been received */
    if (UCPD_SR_RXMSGEND == (_interrupt & UCPD_SR_RXMSGEND))
 8010c78:	68bb      	ldr	r3, [r7, #8]
 8010c7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	f000 8085 	beq.w	8010d8e <PORTx_IRQHandler+0x38e>
    {
      Ports[PortNum].RXStatus = USBPD_FALSE;
 8010c84:	79fa      	ldrb	r2, [r7, #7]
 8010c86:	4951      	ldr	r1, [pc, #324]	@ (8010dcc <PORTx_IRQHandler+0x3cc>)
 8010c88:	4613      	mov	r3, r2
 8010c8a:	011b      	lsls	r3, r3, #4
 8010c8c:	1a9b      	subs	r3, r3, r2
 8010c8e:	009b      	lsls	r3, r3, #2
 8010c90:	440b      	add	r3, r1
 8010c92:	3338      	adds	r3, #56	@ 0x38
 8010c94:	2200      	movs	r2, #0
 8010c96:	701a      	strb	r2, [r3, #0]

      /* For DMA mode, add a check to ensure the number of data received matches
         the number of data received by UCPD */
      LL_UCPD_ClearFlag_RxMsgEnd(hucpd);
 8010c98:	68f8      	ldr	r0, [r7, #12]
 8010c9a:	f7ff fe0a 	bl	80108b2 <LL_UCPD_ClearFlag_RxMsgEnd>

      /* Disable DMA */
      CLEAR_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 8010c9e:	79fa      	ldrb	r2, [r7, #7]
 8010ca0:	494a      	ldr	r1, [pc, #296]	@ (8010dcc <PORTx_IRQHandler+0x3cc>)
 8010ca2:	4613      	mov	r3, r2
 8010ca4:	011b      	lsls	r3, r3, #4
 8010ca6:	1a9b      	subs	r3, r3, r2
 8010ca8:	009b      	lsls	r3, r3, #2
 8010caa:	440b      	add	r3, r1
 8010cac:	3308      	adds	r3, #8
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	6819      	ldr	r1, [r3, #0]
 8010cb2:	79fa      	ldrb	r2, [r7, #7]
 8010cb4:	4845      	ldr	r0, [pc, #276]	@ (8010dcc <PORTx_IRQHandler+0x3cc>)
 8010cb6:	4613      	mov	r3, r2
 8010cb8:	011b      	lsls	r3, r3, #4
 8010cba:	1a9b      	subs	r3, r3, r2
 8010cbc:	009b      	lsls	r3, r3, #2
 8010cbe:	4403      	add	r3, r0
 8010cc0:	3308      	adds	r3, #8
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	f021 0201 	bic.w	r2, r1, #1
 8010cc8:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmarx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8010cca:	bf00      	nop
 8010ccc:	79fa      	ldrb	r2, [r7, #7]
 8010cce:	493f      	ldr	r1, [pc, #252]	@ (8010dcc <PORTx_IRQHandler+0x3cc>)
 8010cd0:	4613      	mov	r3, r2
 8010cd2:	011b      	lsls	r3, r3, #4
 8010cd4:	1a9b      	subs	r3, r3, r2
 8010cd6:	009b      	lsls	r3, r3, #2
 8010cd8:	440b      	add	r3, r1
 8010cda:	3308      	adds	r3, #8
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	f003 0301 	and.w	r3, r3, #1
 8010ce4:	2b01      	cmp	r3, #1
 8010ce6:	d0f1      	beq.n	8010ccc <PORTx_IRQHandler+0x2cc>

      /* Ready for next transaction */
      WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 8010ce8:	79fa      	ldrb	r2, [r7, #7]
 8010cea:	4938      	ldr	r1, [pc, #224]	@ (8010dcc <PORTx_IRQHandler+0x3cc>)
 8010cec:	4613      	mov	r3, r2
 8010cee:	011b      	lsls	r3, r3, #4
 8010cf0:	1a9b      	subs	r3, r3, r2
 8010cf2:	009b      	lsls	r3, r3, #2
 8010cf4:	440b      	add	r3, r1
 8010cf6:	3330      	adds	r3, #48	@ 0x30
 8010cf8:	6818      	ldr	r0, [r3, #0]
 8010cfa:	79fa      	ldrb	r2, [r7, #7]
 8010cfc:	4933      	ldr	r1, [pc, #204]	@ (8010dcc <PORTx_IRQHandler+0x3cc>)
 8010cfe:	4613      	mov	r3, r2
 8010d00:	011b      	lsls	r3, r3, #4
 8010d02:	1a9b      	subs	r3, r3, r2
 8010d04:	009b      	lsls	r3, r3, #2
 8010d06:	440b      	add	r3, r1
 8010d08:	3308      	adds	r3, #8
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	4602      	mov	r2, r0
 8010d0e:	60da      	str	r2, [r3, #12]
      WRITE_REG(Ports[PortNum].hdmarx->CNDTR, SIZE_MAX_PD_TRANSACTION_UNCHUNK);
 8010d10:	79fa      	ldrb	r2, [r7, #7]
 8010d12:	492e      	ldr	r1, [pc, #184]	@ (8010dcc <PORTx_IRQHandler+0x3cc>)
 8010d14:	4613      	mov	r3, r2
 8010d16:	011b      	lsls	r3, r3, #4
 8010d18:	1a9b      	subs	r3, r3, r2
 8010d1a:	009b      	lsls	r3, r3, #2
 8010d1c:	440b      	add	r3, r1
 8010d1e:	3308      	adds	r3, #8
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8010d26:	605a      	str	r2, [r3, #4]

      /* Enable the DMA */
      SET_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 8010d28:	79fa      	ldrb	r2, [r7, #7]
 8010d2a:	4928      	ldr	r1, [pc, #160]	@ (8010dcc <PORTx_IRQHandler+0x3cc>)
 8010d2c:	4613      	mov	r3, r2
 8010d2e:	011b      	lsls	r3, r3, #4
 8010d30:	1a9b      	subs	r3, r3, r2
 8010d32:	009b      	lsls	r3, r3, #2
 8010d34:	440b      	add	r3, r1
 8010d36:	3308      	adds	r3, #8
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	6819      	ldr	r1, [r3, #0]
 8010d3c:	79fa      	ldrb	r2, [r7, #7]
 8010d3e:	4823      	ldr	r0, [pc, #140]	@ (8010dcc <PORTx_IRQHandler+0x3cc>)
 8010d40:	4613      	mov	r3, r2
 8010d42:	011b      	lsls	r3, r3, #4
 8010d44:	1a9b      	subs	r3, r3, r2
 8010d46:	009b      	lsls	r3, r3, #2
 8010d48:	4403      	add	r3, r0
 8010d4a:	3308      	adds	r3, #8
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	f041 0201 	orr.w	r2, r1, #1
 8010d52:	601a      	str	r2, [r3, #0]
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */

      if (((_interrupt & UCPD_SR_RXERR) == 0u) && (ovrflag == 0u))
 8010d54:	68bb      	ldr	r3, [r7, #8]
 8010d56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d113      	bne.n	8010d86 <PORTx_IRQHandler+0x386>
 8010d5e:	4b1c      	ldr	r3, [pc, #112]	@ (8010dd0 <PORTx_IRQHandler+0x3d0>)
 8010d60:	781b      	ldrb	r3, [r3, #0]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d10f      	bne.n	8010d86 <PORTx_IRQHandler+0x386>
      {
        /* Rx message has been received without error */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed(PortNum, hucpd->RX_ORDSET & UCPD_RX_ORDSET_RXORDSET);
 8010d66:	79fa      	ldrb	r2, [r7, #7]
 8010d68:	4918      	ldr	r1, [pc, #96]	@ (8010dcc <PORTx_IRQHandler+0x3cc>)
 8010d6a:	4613      	mov	r3, r2
 8010d6c:	011b      	lsls	r3, r3, #4
 8010d6e:	1a9b      	subs	r3, r3, r2
 8010d70:	009b      	lsls	r3, r3, #2
 8010d72:	440b      	add	r3, r1
 8010d74:	3320      	adds	r3, #32
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	68fa      	ldr	r2, [r7, #12]
 8010d7a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8010d7c:	f002 0107 	and.w	r1, r2, #7
 8010d80:	79fa      	ldrb	r2, [r7, #7]
 8010d82:	4610      	mov	r0, r2
 8010d84:	4798      	blx	r3
      }
      ovrflag = 0;
 8010d86:	4b12      	ldr	r3, [pc, #72]	@ (8010dd0 <PORTx_IRQHandler+0x3d0>)
 8010d88:	2200      	movs	r2, #0
 8010d8a:	701a      	strb	r2, [r3, #0]
      return;
 8010d8c:	e01a      	b.n	8010dc4 <PORTx_IRQHandler+0x3c4>
    }

    /* Check TYPECEVT1IE/TYPECEVT1IE || check TYPECEVT2IE/TYPECEVT2IE */
    if ((UCPD_SR_TYPECEVT1 == (_interrupt & UCPD_SR_TYPECEVT1))
 8010d8e:	68bb      	ldr	r3, [r7, #8]
 8010d90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d104      	bne.n	8010da2 <PORTx_IRQHandler+0x3a2>
        || (UCPD_SR_TYPECEVT2 == (_interrupt & UCPD_SR_TYPECEVT2)))
 8010d98:	68bb      	ldr	r3, [r7, #8]
 8010d9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d010      	beq.n	8010dc4 <PORTx_IRQHandler+0x3c4>
    {
      /* Clear both interrupt */
      LL_UCPD_ClearFlag_TypeCEventCC1(hucpd);
 8010da2:	68f8      	ldr	r0, [r7, #12]
 8010da4:	f7ff fd75 	bl	8010892 <LL_UCPD_ClearFlag_TypeCEventCC1>
      LL_UCPD_ClearFlag_TypeCEventCC2(hucpd);
 8010da8:	68f8      	ldr	r0, [r7, #12]
 8010daa:	f7ff fd62 	bl	8010872 <LL_UCPD_ClearFlag_TypeCEventCC2>
      Ports[PortNum].USBPD_CAD_WakeUp();
 8010dae:	79fa      	ldrb	r2, [r7, #7]
 8010db0:	4906      	ldr	r1, [pc, #24]	@ (8010dcc <PORTx_IRQHandler+0x3cc>)
 8010db2:	4613      	mov	r3, r2
 8010db4:	011b      	lsls	r3, r3, #4
 8010db6:	1a9b      	subs	r3, r3, r2
 8010db8:	009b      	lsls	r3, r3, #2
 8010dba:	440b      	add	r3, r1
 8010dbc:	332c      	adds	r3, #44	@ 0x2c
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	4798      	blx	r3
      /* Wakeup CAD to check the detection event */
      return;
 8010dc2:	bf00      	nop
        }
      }
    }
#endif /* _FRS */
  }
}
 8010dc4:	3710      	adds	r7, #16
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	bd80      	pop	{r7, pc}
 8010dca:	bf00      	nop
 8010dcc:	20000a90 	.word	0x20000a90
 8010dd0:	20000a84 	.word	0x20000a84

08010dd4 <USBPD_PHY_Init>:
  * @param  SupportedSOP  bit field of the supported SOP
  * @retval status        @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Init(uint8_t PortNum, const USBPD_PHY_Callbacks *pCallbacks, uint8_t *pRxBuffer,
                                   USBPD_PortPowerRole_TypeDef PowerRole, uint32_t SupportedSOP)
{
 8010dd4:	b480      	push	{r7}
 8010dd6:	b085      	sub	sp, #20
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	60b9      	str	r1, [r7, #8]
 8010ddc:	607a      	str	r2, [r7, #4]
 8010dde:	603b      	str	r3, [r7, #0]
 8010de0:	4603      	mov	r3, r0
 8010de2:	73fb      	strb	r3, [r7, #15]
  (void)PowerRole;

  /* Set all callbacks */
  Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted            = pCallbacks->USBPD_PHY_TxCompleted;
 8010de4:	7bfa      	ldrb	r2, [r7, #15]
 8010de6:	68bb      	ldr	r3, [r7, #8]
 8010de8:	6919      	ldr	r1, [r3, #16]
 8010dea:	482d      	ldr	r0, [pc, #180]	@ (8010ea0 <USBPD_PHY_Init+0xcc>)
 8010dec:	4613      	mov	r3, r2
 8010dee:	011b      	lsls	r3, r3, #4
 8010df0:	1a9b      	subs	r3, r3, r2
 8010df2:	009b      	lsls	r3, r3, #2
 8010df4:	4403      	add	r3, r0
 8010df6:	3314      	adds	r3, #20
 8010df8:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_BistCompleted          = pCallbacks->USBPD_PHY_BistCompleted;
 8010dfa:	7bfa      	ldrb	r2, [r7, #15]
 8010dfc:	68bb      	ldr	r3, [r7, #8]
 8010dfe:	68d9      	ldr	r1, [r3, #12]
 8010e00:	4827      	ldr	r0, [pc, #156]	@ (8010ea0 <USBPD_PHY_Init+0xcc>)
 8010e02:	4613      	mov	r3, r2
 8010e04:	011b      	lsls	r3, r3, #4
 8010e06:	1a9b      	subs	r3, r3, r2
 8010e08:	009b      	lsls	r3, r3, #2
 8010e0a:	4403      	add	r3, r0
 8010e0c:	3318      	adds	r3, #24
 8010e0e:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication     = pCallbacks->USBPD_PHY_ResetIndication;
 8010e10:	7bfa      	ldrb	r2, [r7, #15]
 8010e12:	68bb      	ldr	r3, [r7, #8]
 8010e14:	6859      	ldr	r1, [r3, #4]
 8010e16:	4822      	ldr	r0, [pc, #136]	@ (8010ea0 <USBPD_PHY_Init+0xcc>)
 8010e18:	4613      	mov	r3, r2
 8010e1a:	011b      	lsls	r3, r3, #4
 8010e1c:	1a9b      	subs	r3, r3, r2
 8010e1e:	009b      	lsls	r3, r3, #2
 8010e20:	4403      	add	r3, r0
 8010e22:	331c      	adds	r3, #28
 8010e24:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed           = PHY_Rx_Completed;
 8010e26:	7bfa      	ldrb	r2, [r7, #15]
 8010e28:	491d      	ldr	r1, [pc, #116]	@ (8010ea0 <USBPD_PHY_Init+0xcc>)
 8010e2a:	4613      	mov	r3, r2
 8010e2c:	011b      	lsls	r3, r3, #4
 8010e2e:	1a9b      	subs	r3, r3, r2
 8010e30:	009b      	lsls	r3, r3, #2
 8010e32:	440b      	add	r3, r1
 8010e34:	3320      	adds	r3, #32
 8010e36:	4a1b      	ldr	r2, [pc, #108]	@ (8010ea4 <USBPD_PHY_Init+0xd0>)
 8010e38:	601a      	str	r2, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted  = pCallbacks->USBPD_PHY_ResetCompleted;
 8010e3a:	7bfa      	ldrb	r2, [r7, #15]
 8010e3c:	68bb      	ldr	r3, [r7, #8]
 8010e3e:	6899      	ldr	r1, [r3, #8]
 8010e40:	4817      	ldr	r0, [pc, #92]	@ (8010ea0 <USBPD_PHY_Init+0xcc>)
 8010e42:	4613      	mov	r3, r2
 8010e44:	011b      	lsls	r3, r3, #4
 8010e46:	1a9b      	subs	r3, r3, r2
 8010e48:	009b      	lsls	r3, r3, #2
 8010e4a:	4403      	add	r3, r0
 8010e4c:	3324      	adds	r3, #36	@ 0x24
 8010e4e:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_FRSReception        = pCallbacks->USBPD_PHY_FastRoleSwapReception;
 8010e50:	7bfa      	ldrb	r2, [r7, #15]
 8010e52:	68bb      	ldr	r3, [r7, #8]
 8010e54:	6959      	ldr	r1, [r3, #20]
 8010e56:	4812      	ldr	r0, [pc, #72]	@ (8010ea0 <USBPD_PHY_Init+0xcc>)
 8010e58:	4613      	mov	r3, r2
 8010e5a:	011b      	lsls	r3, r3, #4
 8010e5c:	1a9b      	subs	r3, r3, r2
 8010e5e:	009b      	lsls	r3, r3, #2
 8010e60:	4403      	add	r3, r0
 8010e62:	3328      	adds	r3, #40	@ 0x28
 8010e64:	6019      	str	r1, [r3, #0]
  /* Initialize the hardware for the port */
  Ports[PortNum].ptr_RxBuff = pRxBuffer;
 8010e66:	7bfa      	ldrb	r2, [r7, #15]
 8010e68:	490d      	ldr	r1, [pc, #52]	@ (8010ea0 <USBPD_PHY_Init+0xcc>)
 8010e6a:	4613      	mov	r3, r2
 8010e6c:	011b      	lsls	r3, r3, #4
 8010e6e:	1a9b      	subs	r3, r3, r2
 8010e70:	009b      	lsls	r3, r3, #2
 8010e72:	440b      	add	r3, r1
 8010e74:	3330      	adds	r3, #48	@ 0x30
 8010e76:	687a      	ldr	r2, [r7, #4]
 8010e78:	601a      	str	r2, [r3, #0]

  /* Initialize port related functionalities inside this layer */
  PHY_Ports[PortNum].SupportedSOP = SupportedSOP;
 8010e7a:	7bfb      	ldrb	r3, [r7, #15]
 8010e7c:	4a0a      	ldr	r2, [pc, #40]	@ (8010ea8 <USBPD_PHY_Init+0xd4>)
 8010e7e:	00db      	lsls	r3, r3, #3
 8010e80:	4413      	add	r3, r2
 8010e82:	69ba      	ldr	r2, [r7, #24]
 8010e84:	605a      	str	r2, [r3, #4]
  PHY_Ports[PortNum].USBPD_PHY_MessageReceived = pCallbacks->USBPD_PHY_MessageReceived;
 8010e86:	7bfb      	ldrb	r3, [r7, #15]
 8010e88:	68ba      	ldr	r2, [r7, #8]
 8010e8a:	6812      	ldr	r2, [r2, #0]
 8010e8c:	4906      	ldr	r1, [pc, #24]	@ (8010ea8 <USBPD_PHY_Init+0xd4>)
 8010e8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

  return USBPD_OK;
 8010e92:	2300      	movs	r3, #0
}
 8010e94:	4618      	mov	r0, r3
 8010e96:	3714      	adds	r7, #20
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9e:	4770      	bx	lr
 8010ea0:	20000a90 	.word	0x20000a90
 8010ea4:	0801101d 	.word	0x0801101d
 8010ea8:	20000a88 	.word	0x20000a88

08010eac <USBPD_PHY_GetRetryTimerValue>:
  * @note   time used to determine when the protocol layer must re-send a message not acknowledged by a goodCRC
  * @param  PortNum    Number of the port.
  * @retval retry counter value in us.
  */
uint16_t USBPD_PHY_GetRetryTimerValue(uint8_t PortNum)
{
 8010eac:	b480      	push	{r7}
 8010eae:	b083      	sub	sp, #12
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	4603      	mov	r3, r0
 8010eb4:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
  return 905u;
 8010eb6:	f240 3389 	movw	r3, #905	@ 0x389
}
 8010eba:	4618      	mov	r0, r3
 8010ebc:	370c      	adds	r7, #12
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec4:	4770      	bx	lr

08010ec6 <USBPD_PHY_GetMinGOODCRCTimerValue>:
  * @note   time used to guarantee the min time of 26us between two PD message.
  * @param  PortNum    Number of the port.
  * @retval value in us.
  */
uint16_t USBPD_PHY_GetMinGOODCRCTimerValue(uint8_t PortNum)
{
 8010ec6:	b480      	push	{r7}
 8010ec8:	b083      	sub	sp, #12
 8010eca:	af00      	add	r7, sp, #0
 8010ecc:	4603      	mov	r3, r0
 8010ece:	71fb      	strb	r3, [r7, #7]
  return 30u;
 8010ed0:	231e      	movs	r3, #30
}
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	370c      	adds	r7, #12
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010edc:	4770      	bx	lr

08010ede <USBPD_PHY_Reset>:
  * @brief  Reset the PHY of a specified port.
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_Reset(uint8_t PortNum)
{
 8010ede:	b480      	push	{r7}
 8010ee0:	b083      	sub	sp, #12
 8010ee2:	af00      	add	r7, sp, #0
 8010ee4:	4603      	mov	r3, r0
 8010ee6:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
  /* Reset PHY layer   */
  /* Reset HW_IF layer */
}
 8010ee8:	bf00      	nop
 8010eea:	370c      	adds	r7, #12
 8010eec:	46bd      	mov	sp, r7
 8010eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef2:	4770      	bx	lr

08010ef4 <USBPD_PHY_ResetRequest>:
  * @param  PortNum Number of the port
  * @param  Type    Type of reset (hard or cable reset) @ref USBPD_SOPTYPE_HARD_RESET or @ref USBPD_SOPTYPE_CABLE_RESET
  * @retval status  @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_ResetRequest(uint8_t PortNum, USBPD_SOPType_TypeDef Type)
{
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b082      	sub	sp, #8
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	4603      	mov	r3, r0
 8010efc:	460a      	mov	r2, r1
 8010efe:	71fb      	strb	r3, [r7, #7]
 8010f00:	4613      	mov	r3, r2
 8010f02:	71bb      	strb	r3, [r7, #6]
  /* Send the requested reset */
  return USBPD_PHY_SendMessage(PortNum, Type, NULL, 0);
 8010f04:	79b9      	ldrb	r1, [r7, #6]
 8010f06:	79f8      	ldrb	r0, [r7, #7]
 8010f08:	2300      	movs	r3, #0
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	f000 f805 	bl	8010f1a <USBPD_PHY_SendMessage>
 8010f10:	4603      	mov	r3, r0
}
 8010f12:	4618      	mov	r0, r3
 8010f14:	3708      	adds	r7, #8
 8010f16:	46bd      	mov	sp, r7
 8010f18:	bd80      	pop	{r7, pc}

08010f1a <USBPD_PHY_SendMessage>:
  * @param  pBuffer   Pointer to the buffer to be transmitted
  * @param  Size      Size of the buffer (bytes)
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_SendMessage(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint16_t Size)
{
 8010f1a:	b580      	push	{r7, lr}
 8010f1c:	b082      	sub	sp, #8
 8010f1e:	af00      	add	r7, sp, #0
 8010f20:	603a      	str	r2, [r7, #0]
 8010f22:	461a      	mov	r2, r3
 8010f24:	4603      	mov	r3, r0
 8010f26:	71fb      	strb	r3, [r7, #7]
 8010f28:	460b      	mov	r3, r1
 8010f2a:	71bb      	strb	r3, [r7, #6]
 8010f2c:	4613      	mov	r3, r2
 8010f2e:	80bb      	strh	r3, [r7, #4]
  /* Trace to track message */
  return USBPD_HW_IF_SendBuffer(PortNum, Type, pBuffer,  Size);
 8010f30:	88bb      	ldrh	r3, [r7, #4]
 8010f32:	79b9      	ldrb	r1, [r7, #6]
 8010f34:	79f8      	ldrb	r0, [r7, #7]
 8010f36:	683a      	ldr	r2, [r7, #0]
 8010f38:	f000 fade 	bl	80114f8 <USBPD_HW_IF_SendBuffer>
 8010f3c:	4603      	mov	r3, r0
}
 8010f3e:	4618      	mov	r0, r3
 8010f40:	3708      	adds	r7, #8
 8010f42:	46bd      	mov	sp, r7
 8010f44:	bd80      	pop	{r7, pc}

08010f46 <USBPD_PHY_Send_BIST_Pattern>:
  * @brief  Send BIST pattern.
  * @param  PortNum   Number of the port
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Send_BIST_Pattern(uint8_t PortNum)
{
 8010f46:	b580      	push	{r7, lr}
 8010f48:	b082      	sub	sp, #8
 8010f4a:	af00      	add	r7, sp, #0
 8010f4c:	4603      	mov	r3, r0
 8010f4e:	71fb      	strb	r3, [r7, #7]
  /* Call the low-level function (HW_IF) to accomplish the BIST Carrier Mode Transmission */
  USBPD_HW_IF_Send_BIST_Pattern(PortNum);
 8010f50:	79fb      	ldrb	r3, [r7, #7]
 8010f52:	4618      	mov	r0, r3
 8010f54:	f000 fc16 	bl	8011784 <USBPD_HW_IF_Send_BIST_Pattern>
  return USBPD_OK;
 8010f58:	2300      	movs	r3, #0
}
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	3708      	adds	r7, #8
 8010f5e:	46bd      	mov	sp, r7
 8010f60:	bd80      	pop	{r7, pc}

08010f62 <USBPD_PHY_ExitTransmit>:
  * @param  PortNum port number value
  * @param  mode    SOP BIST MODE 2
  * @retval USBPD   status
  */
USBPD_StatusTypeDef USBPD_PHY_ExitTransmit(uint8_t PortNum, USBPD_SOPType_TypeDef mode)
{
 8010f62:	b580      	push	{r7, lr}
 8010f64:	b082      	sub	sp, #8
 8010f66:	af00      	add	r7, sp, #0
 8010f68:	4603      	mov	r3, r0
 8010f6a:	460a      	mov	r2, r1
 8010f6c:	71fb      	strb	r3, [r7, #7]
 8010f6e:	4613      	mov	r3, r2
 8010f70:	71bb      	strb	r3, [r7, #6]
  if (USBPD_SOPTYPE_BIST_MODE_2 == mode)
 8010f72:	79bb      	ldrb	r3, [r7, #6]
 8010f74:	2b07      	cmp	r3, #7
 8010f76:	d103      	bne.n	8010f80 <USBPD_PHY_ExitTransmit+0x1e>
  {
    USBPD_HW_IF_StopBISTMode2(PortNum);
 8010f78:	79fb      	ldrb	r3, [r7, #7]
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	f000 fa84 	bl	8011488 <USBPD_HW_IF_StopBISTMode2>
  }
  return USBPD_OK;
 8010f80:	2300      	movs	r3, #0
}
 8010f82:	4618      	mov	r0, r3
 8010f84:	3708      	adds	r7, #8
 8010f86:	46bd      	mov	sp, r7
 8010f88:	bd80      	pop	{r7, pc}

08010f8a <USBPD_PHY_SetResistor_SinkTxNG>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port
  * @retval None
  */
void USBPD_PHY_SetResistor_SinkTxNG(uint8_t PortNum)
{
 8010f8a:	b580      	push	{r7, lr}
 8010f8c:	b082      	sub	sp, #8
 8010f8e:	af00      	add	r7, sp, #0
 8010f90:	4603      	mov	r3, r0
 8010f92:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_SetResistor_SinkTxNG(PortNum);
 8010f94:	79fb      	ldrb	r3, [r7, #7]
 8010f96:	4618      	mov	r0, r3
 8010f98:	f000 ff90 	bl	8011ebc <USBPD_HW_IF_SetResistor_SinkTxNG>
}
 8010f9c:	bf00      	nop
 8010f9e:	3708      	adds	r7, #8
 8010fa0:	46bd      	mov	sp, r7
 8010fa2:	bd80      	pop	{r7, pc}

08010fa4 <USBPD_PHY_SetResistor_SinkTxOK>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval none.
  */
void USBPD_PHY_SetResistor_SinkTxOK(uint8_t PortNum)
{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b082      	sub	sp, #8
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	4603      	mov	r3, r0
 8010fac:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_SetResistor_SinkTxOK(PortNum);
 8010fae:	79fb      	ldrb	r3, [r7, #7]
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	f000 ff9b 	bl	8011eec <USBPD_HW_IF_SetResistor_SinkTxOK>
}
 8010fb6:	bf00      	nop
 8010fb8:	3708      	adds	r7, #8
 8010fba:	46bd      	mov	sp, r7
 8010fbc:	bd80      	pop	{r7, pc}
	...

08010fc0 <USBPD_PHY_SOPSupported>:
  * @param  PortNum  Number of the port.
  * @param  SOPSupported  List of the supported SOP
  * @retval None.
  */
void USBPD_PHY_SOPSupported(uint8_t PortNum, uint32_t SOPSupported)
{
 8010fc0:	b480      	push	{r7}
 8010fc2:	b083      	sub	sp, #12
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	4603      	mov	r3, r0
 8010fc8:	6039      	str	r1, [r7, #0]
 8010fca:	71fb      	strb	r3, [r7, #7]
  PHY_Ports[PortNum].SupportedSOP = SOPSupported;
 8010fcc:	79fb      	ldrb	r3, [r7, #7]
 8010fce:	4a05      	ldr	r2, [pc, #20]	@ (8010fe4 <USBPD_PHY_SOPSupported+0x24>)
 8010fd0:	00db      	lsls	r3, r3, #3
 8010fd2:	4413      	add	r3, r2
 8010fd4:	683a      	ldr	r2, [r7, #0]
 8010fd6:	605a      	str	r2, [r3, #4]
}
 8010fd8:	bf00      	nop
 8010fda:	370c      	adds	r7, #12
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe2:	4770      	bx	lr
 8010fe4:	20000a88 	.word	0x20000a88

08010fe8 <USBPD_PHY_EnableRX>:
  * @brief  function used to enable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_EnableRX(uint8_t PortNum)
{
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b082      	sub	sp, #8
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	4603      	mov	r3, r0
 8010ff0:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_EnableRX(PortNum);
 8010ff2:	79fb      	ldrb	r3, [r7, #7]
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	f000 fd63 	bl	8011ac0 <USBPD_HW_IF_EnableRX>
}
 8010ffa:	bf00      	nop
 8010ffc:	3708      	adds	r7, #8
 8010ffe:	46bd      	mov	sp, r7
 8011000:	bd80      	pop	{r7, pc}

08011002 <USBPD_PHY_DisableRX>:
  * @brief  function used to disable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_DisableRX(uint8_t PortNum)
{
 8011002:	b580      	push	{r7, lr}
 8011004:	b082      	sub	sp, #8
 8011006:	af00      	add	r7, sp, #0
 8011008:	4603      	mov	r3, r0
 801100a:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_DisableRX(PortNum);
 801100c:	79fb      	ldrb	r3, [r7, #7]
 801100e:	4618      	mov	r0, r3
 8011010:	f000 fd6c 	bl	8011aec <USBPD_HW_IF_DisableRX>
}
 8011014:	bf00      	nop
 8011016:	3708      	adds	r7, #8
 8011018:	46bd      	mov	sp, r7
 801101a:	bd80      	pop	{r7, pc}

0801101c <PHY_Rx_Completed>:
  * @param  PortNum   Number of the port.
  * @param  MsgType   SOP Message Type
  * @retval None.
  */
void PHY_Rx_Completed(uint8_t PortNum, uint32_t MsgType)
{
 801101c:	b580      	push	{r7, lr}
 801101e:	b084      	sub	sp, #16
 8011020:	af00      	add	r7, sp, #0
 8011022:	4603      	mov	r3, r0
 8011024:	6039      	str	r1, [r7, #0]
 8011026:	71fb      	strb	r3, [r7, #7]
  const USBPD_SOPType_TypeDef tab_sop_value[] =
 8011028:	4a28      	ldr	r2, [pc, #160]	@ (80110cc <PHY_Rx_Completed+0xb0>)
 801102a:	f107 0308 	add.w	r3, r7, #8
 801102e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011032:	6018      	str	r0, [r3, #0]
 8011034:	3304      	adds	r3, #4
 8011036:	8019      	strh	r1, [r3, #0]
    USBPD_SOPTYPE_SOP, USBPD_SOPTYPE_SOP1, USBPD_SOPTYPE_SOP2,
    USBPD_SOPTYPE_SOP1_DEBUG, USBPD_SOPTYPE_SOP2_DEBUG, USBPD_SOPTYPE_CABLE_RESET
  };
  USBPD_SOPType_TypeDef _msgtype;

  _msgtype = tab_sop_value[MsgType];
 8011038:	f107 0208 	add.w	r2, r7, #8
 801103c:	683b      	ldr	r3, [r7, #0]
 801103e:	4413      	add	r3, r2
 8011040:	781b      	ldrb	r3, [r3, #0]
 8011042:	73fb      	strb	r3, [r7, #15]

  /* Check if the message must be forwarded to usbpd stack */
  switch (_msgtype)
 8011044:	7bfb      	ldrb	r3, [r7, #15]
 8011046:	2b04      	cmp	r3, #4
 8011048:	dc02      	bgt.n	8011050 <PHY_Rx_Completed+0x34>
 801104a:	2b00      	cmp	r3, #0
 801104c:	da19      	bge.n	8011082 <PHY_Rx_Completed+0x66>
                        2u + (header_rx.b.NumberOfDataObjects * 4u));
      }
#endif /* DEBUG_NOTFWD */
      break;
    default :
      break;
 801104e:	e034      	b.n	80110ba <PHY_Rx_Completed+0x9e>
  switch (_msgtype)
 8011050:	2b06      	cmp	r3, #6
 8011052:	d132      	bne.n	80110ba <PHY_Rx_Completed+0x9e>
      if (0x1Eu == (PHY_Ports[PortNum].SupportedSOP & 0x1Eu))
 8011054:	79fb      	ldrb	r3, [r7, #7]
 8011056:	4a1e      	ldr	r2, [pc, #120]	@ (80110d0 <PHY_Rx_Completed+0xb4>)
 8011058:	00db      	lsls	r3, r3, #3
 801105a:	4413      	add	r3, r2
 801105c:	685b      	ldr	r3, [r3, #4]
 801105e:	f003 031e 	and.w	r3, r3, #30
 8011062:	2b1e      	cmp	r3, #30
 8011064:	d12b      	bne.n	80110be <PHY_Rx_Completed+0xa2>
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 8011066:	79fa      	ldrb	r2, [r7, #7]
 8011068:	491a      	ldr	r1, [pc, #104]	@ (80110d4 <PHY_Rx_Completed+0xb8>)
 801106a:	4613      	mov	r3, r2
 801106c:	011b      	lsls	r3, r3, #4
 801106e:	1a9b      	subs	r3, r3, r2
 8011070:	009b      	lsls	r3, r3, #2
 8011072:	440b      	add	r3, r1
 8011074:	331c      	adds	r3, #28
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	79fa      	ldrb	r2, [r7, #7]
 801107a:	2106      	movs	r1, #6
 801107c:	4610      	mov	r0, r2
 801107e:	4798      	blx	r3
      break;
 8011080:	e01d      	b.n	80110be <PHY_Rx_Completed+0xa2>
      if (!((uint8_t)(0x1u << _msgtype) != (PHY_Ports[PortNum].SupportedSOP & (uint8_t)(0x1u << _msgtype))))
 8011082:	7bfb      	ldrb	r3, [r7, #15]
 8011084:	2201      	movs	r2, #1
 8011086:	fa02 f303 	lsl.w	r3, r2, r3
 801108a:	b2db      	uxtb	r3, r3
 801108c:	4618      	mov	r0, r3
 801108e:	79fb      	ldrb	r3, [r7, #7]
 8011090:	4a0f      	ldr	r2, [pc, #60]	@ (80110d0 <PHY_Rx_Completed+0xb4>)
 8011092:	00db      	lsls	r3, r3, #3
 8011094:	4413      	add	r3, r2
 8011096:	685b      	ldr	r3, [r3, #4]
 8011098:	7bfa      	ldrb	r2, [r7, #15]
 801109a:	2101      	movs	r1, #1
 801109c:	fa01 f202 	lsl.w	r2, r1, r2
 80110a0:	b2d2      	uxtb	r2, r2
 80110a2:	4013      	ands	r3, r2
 80110a4:	4298      	cmp	r0, r3
 80110a6:	d10c      	bne.n	80110c2 <PHY_Rx_Completed+0xa6>
        PHY_Ports[PortNum].USBPD_PHY_MessageReceived(PortNum, _msgtype);
 80110a8:	79fb      	ldrb	r3, [r7, #7]
 80110aa:	4a09      	ldr	r2, [pc, #36]	@ (80110d0 <PHY_Rx_Completed+0xb4>)
 80110ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80110b0:	7bf9      	ldrb	r1, [r7, #15]
 80110b2:	79fa      	ldrb	r2, [r7, #7]
 80110b4:	4610      	mov	r0, r2
 80110b6:	4798      	blx	r3
      break;
 80110b8:	e003      	b.n	80110c2 <PHY_Rx_Completed+0xa6>
      break;
 80110ba:	bf00      	nop
 80110bc:	e002      	b.n	80110c4 <PHY_Rx_Completed+0xa8>
      break;
 80110be:	bf00      	nop
 80110c0:	e000      	b.n	80110c4 <PHY_Rx_Completed+0xa8>
      break;
 80110c2:	bf00      	nop
  }
}
 80110c4:	bf00      	nop
 80110c6:	3710      	adds	r7, #16
 80110c8:	46bd      	mov	sp, r7
 80110ca:	bd80      	pop	{r7, pc}
 80110cc:	080181d4 	.word	0x080181d4
 80110d0:	20000a88 	.word	0x20000a88
 80110d4:	20000a90 	.word	0x20000a90

080110d8 <LL_AHB1_GRP1_EnableClock>:
{
 80110d8:	b480      	push	{r7}
 80110da:	b085      	sub	sp, #20
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80110e0:	4b08      	ldr	r3, [pc, #32]	@ (8011104 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80110e2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80110e4:	4907      	ldr	r1, [pc, #28]	@ (8011104 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	4313      	orrs	r3, r2
 80110ea:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80110ec:	4b05      	ldr	r3, [pc, #20]	@ (8011104 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80110ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	4013      	ands	r3, r2
 80110f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80110f6:	68fb      	ldr	r3, [r7, #12]
}
 80110f8:	bf00      	nop
 80110fa:	3714      	adds	r7, #20
 80110fc:	46bd      	mov	sp, r7
 80110fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011102:	4770      	bx	lr
 8011104:	40021000 	.word	0x40021000

08011108 <LL_APB1_GRP1_EnableClock>:
{
 8011108:	b480      	push	{r7}
 801110a:	b085      	sub	sp, #20
 801110c:	af00      	add	r7, sp, #0
 801110e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8011110:	4b08      	ldr	r3, [pc, #32]	@ (8011134 <LL_APB1_GRP1_EnableClock+0x2c>)
 8011112:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011114:	4907      	ldr	r1, [pc, #28]	@ (8011134 <LL_APB1_GRP1_EnableClock+0x2c>)
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	4313      	orrs	r3, r2
 801111a:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 801111c:	4b05      	ldr	r3, [pc, #20]	@ (8011134 <LL_APB1_GRP1_EnableClock+0x2c>)
 801111e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	4013      	ands	r3, r2
 8011124:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011126:	68fb      	ldr	r3, [r7, #12]
}
 8011128:	bf00      	nop
 801112a:	3714      	adds	r7, #20
 801112c:	46bd      	mov	sp, r7
 801112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011132:	4770      	bx	lr
 8011134:	40021000 	.word	0x40021000

08011138 <LL_UCPD_Enable>:
{
 8011138:	b480      	push	{r7}
 801113a:	b083      	sub	sp, #12
 801113c:	af00      	add	r7, sp, #0
 801113e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	601a      	str	r2, [r3, #0]
}
 801114c:	bf00      	nop
 801114e:	370c      	adds	r7, #12
 8011150:	46bd      	mov	sp, r7
 8011152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011156:	4770      	bx	lr

08011158 <LL_UCPD_Disable>:
{
 8011158:	b480      	push	{r7}
 801115a:	b083      	sub	sp, #12
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	601a      	str	r2, [r3, #0]
}
 801116c:	bf00      	nop
 801116e:	370c      	adds	r7, #12
 8011170:	46bd      	mov	sp, r7
 8011172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011176:	4770      	bx	lr

08011178 <LL_UCPD_TypeCDetectionCC2Enable>:
{
 8011178:	b480      	push	{r7}
 801117a:	b083      	sub	sp, #12
 801117c:	af00      	add	r7, sp, #0
 801117e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	68db      	ldr	r3, [r3, #12]
 8011184:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	60da      	str	r2, [r3, #12]
}
 801118c:	bf00      	nop
 801118e:	370c      	adds	r7, #12
 8011190:	46bd      	mov	sp, r7
 8011192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011196:	4770      	bx	lr

08011198 <LL_UCPD_TypeCDetectionCC2Disable>:
{
 8011198:	b480      	push	{r7}
 801119a:	b083      	sub	sp, #12
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	68db      	ldr	r3, [r3, #12]
 80111a4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	60da      	str	r2, [r3, #12]
}
 80111ac:	bf00      	nop
 80111ae:	370c      	adds	r7, #12
 80111b0:	46bd      	mov	sp, r7
 80111b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b6:	4770      	bx	lr

080111b8 <LL_UCPD_TypeCDetectionCC1Enable>:
{
 80111b8:	b480      	push	{r7}
 80111ba:	b083      	sub	sp, #12
 80111bc:	af00      	add	r7, sp, #0
 80111be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	68db      	ldr	r3, [r3, #12]
 80111c4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	60da      	str	r2, [r3, #12]
}
 80111cc:	bf00      	nop
 80111ce:	370c      	adds	r7, #12
 80111d0:	46bd      	mov	sp, r7
 80111d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d6:	4770      	bx	lr

080111d8 <LL_UCPD_TypeCDetectionCC1Disable>:
{
 80111d8:	b480      	push	{r7}
 80111da:	b083      	sub	sp, #12
 80111dc:	af00      	add	r7, sp, #0
 80111de:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	68db      	ldr	r3, [r3, #12]
 80111e4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	60da      	str	r2, [r3, #12]
}
 80111ec:	bf00      	nop
 80111ee:	370c      	adds	r7, #12
 80111f0:	46bd      	mov	sp, r7
 80111f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f6:	4770      	bx	lr

080111f8 <LL_UCPD_FRSDetectionEnable>:
{
 80111f8:	b480      	push	{r7}
 80111fa:	b083      	sub	sp, #12
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	68db      	ldr	r3, [r3, #12]
 8011204:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	60da      	str	r2, [r3, #12]
}
 801120c:	bf00      	nop
 801120e:	370c      	adds	r7, #12
 8011210:	46bd      	mov	sp, r7
 8011212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011216:	4770      	bx	lr

08011218 <LL_UCPD_FRSDetectionDisable>:
{
 8011218:	b480      	push	{r7}
 801121a:	b083      	sub	sp, #12
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	68db      	ldr	r3, [r3, #12]
 8011224:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	60da      	str	r2, [r3, #12]
}
 801122c:	bf00      	nop
 801122e:	370c      	adds	r7, #12
 8011230:	46bd      	mov	sp, r7
 8011232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011236:	4770      	bx	lr

08011238 <LL_UCPD_SetccEnable>:
{
 8011238:	b480      	push	{r7}
 801123a:	b083      	sub	sp, #12
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
 8011240:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	68db      	ldr	r3, [r3, #12]
 8011246:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801124a:	683b      	ldr	r3, [r7, #0]
 801124c:	431a      	orrs	r2, r3
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	60da      	str	r2, [r3, #12]
}
 8011252:	bf00      	nop
 8011254:	370c      	adds	r7, #12
 8011256:	46bd      	mov	sp, r7
 8011258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801125c:	4770      	bx	lr

0801125e <LL_UCPD_SetSNKRole>:
{
 801125e:	b480      	push	{r7}
 8011260:	b083      	sub	sp, #12
 8011262:	af00      	add	r7, sp, #0
 8011264:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	68db      	ldr	r3, [r3, #12]
 801126a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	60da      	str	r2, [r3, #12]
}
 8011272:	bf00      	nop
 8011274:	370c      	adds	r7, #12
 8011276:	46bd      	mov	sp, r7
 8011278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127c:	4770      	bx	lr

0801127e <LL_UCPD_SetSRCRole>:
{
 801127e:	b480      	push	{r7}
 8011280:	b083      	sub	sp, #12
 8011282:	af00      	add	r7, sp, #0
 8011284:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	68db      	ldr	r3, [r3, #12]
 801128a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	60da      	str	r2, [r3, #12]
}
 8011292:	bf00      	nop
 8011294:	370c      	adds	r7, #12
 8011296:	46bd      	mov	sp, r7
 8011298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801129c:	4770      	bx	lr

0801129e <LL_UCPD_SetRpResistor>:
{
 801129e:	b480      	push	{r7}
 80112a0:	b083      	sub	sp, #12
 80112a2:	af00      	add	r7, sp, #0
 80112a4:	6078      	str	r0, [r7, #4]
 80112a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_ANASUBMODE,  Resistor);
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	68db      	ldr	r3, [r3, #12]
 80112ac:	f423 72c0 	bic.w	r2, r3, #384	@ 0x180
 80112b0:	683b      	ldr	r3, [r7, #0]
 80112b2:	431a      	orrs	r2, r3
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	60da      	str	r2, [r3, #12]
}
 80112b8:	bf00      	nop
 80112ba:	370c      	adds	r7, #12
 80112bc:	46bd      	mov	sp, r7
 80112be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c2:	4770      	bx	lr

080112c4 <LL_UCPD_SetCCPin>:
{
 80112c4:	b480      	push	{r7}
 80112c6:	b083      	sub	sp, #12
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]
 80112cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_PHYCCSEL,  CCPin);
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	68db      	ldr	r3, [r3, #12]
 80112d2:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80112d6:	683b      	ldr	r3, [r7, #0]
 80112d8:	431a      	orrs	r2, r3
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	60da      	str	r2, [r3, #12]
}
 80112de:	bf00      	nop
 80112e0:	370c      	adds	r7, #12
 80112e2:	46bd      	mov	sp, r7
 80112e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e8:	4770      	bx	lr

080112ea <LL_UCPD_RxEnable>:
{
 80112ea:	b480      	push	{r7}
 80112ec:	b083      	sub	sp, #12
 80112ee:	af00      	add	r7, sp, #0
 80112f0:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	68db      	ldr	r3, [r3, #12]
 80112f6:	f043 0220 	orr.w	r2, r3, #32
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	60da      	str	r2, [r3, #12]
}
 80112fe:	bf00      	nop
 8011300:	370c      	adds	r7, #12
 8011302:	46bd      	mov	sp, r7
 8011304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011308:	4770      	bx	lr

0801130a <LL_UCPD_RxDisable>:
{
 801130a:	b480      	push	{r7}
 801130c:	b083      	sub	sp, #12
 801130e:	af00      	add	r7, sp, #0
 8011310:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	68db      	ldr	r3, [r3, #12]
 8011316:	f023 0220 	bic.w	r2, r3, #32
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	60da      	str	r2, [r3, #12]
}
 801131e:	bf00      	nop
 8011320:	370c      	adds	r7, #12
 8011322:	46bd      	mov	sp, r7
 8011324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011328:	4770      	bx	lr

0801132a <LL_UCPD_SetRxMode>:
{
 801132a:	b480      	push	{r7}
 801132c:	b083      	sub	sp, #12
 801132e:	af00      	add	r7, sp, #0
 8011330:	6078      	str	r0, [r7, #4]
 8011332:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_RXMODE, RxMode);
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	68db      	ldr	r3, [r3, #12]
 8011338:	f023 0210 	bic.w	r2, r3, #16
 801133c:	683b      	ldr	r3, [r7, #0]
 801133e:	431a      	orrs	r2, r3
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	60da      	str	r2, [r3, #12]
}
 8011344:	bf00      	nop
 8011346:	370c      	adds	r7, #12
 8011348:	46bd      	mov	sp, r7
 801134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801134e:	4770      	bx	lr

08011350 <LL_UCPD_SendHardReset>:
{
 8011350:	b480      	push	{r7}
 8011352:	b083      	sub	sp, #12
 8011354:	af00      	add	r7, sp, #0
 8011356:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXHRST);
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	68db      	ldr	r3, [r3, #12]
 801135c:	f043 0208 	orr.w	r2, r3, #8
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	60da      	str	r2, [r3, #12]
}
 8011364:	bf00      	nop
 8011366:	370c      	adds	r7, #12
 8011368:	46bd      	mov	sp, r7
 801136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801136e:	4770      	bx	lr

08011370 <LL_UCPD_SendMessage>:
{
 8011370:	b480      	push	{r7}
 8011372:	b083      	sub	sp, #12
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXSEND);
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	68db      	ldr	r3, [r3, #12]
 801137c:	f043 0204 	orr.w	r2, r3, #4
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	60da      	str	r2, [r3, #12]
}
 8011384:	bf00      	nop
 8011386:	370c      	adds	r7, #12
 8011388:	46bd      	mov	sp, r7
 801138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138e:	4770      	bx	lr

08011390 <LL_UCPD_SetTxMode>:
{
 8011390:	b480      	push	{r7}
 8011392:	b083      	sub	sp, #12
 8011394:	af00      	add	r7, sp, #0
 8011396:	6078      	str	r0, [r7, #4]
 8011398:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_TXMODE, TxMode);
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	68db      	ldr	r3, [r3, #12]
 801139e:	f023 0203 	bic.w	r2, r3, #3
 80113a2:	683b      	ldr	r3, [r7, #0]
 80113a4:	431a      	orrs	r2, r3
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	60da      	str	r2, [r3, #12]
}
 80113aa:	bf00      	nop
 80113ac:	370c      	adds	r7, #12
 80113ae:	46bd      	mov	sp, r7
 80113b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b4:	4770      	bx	lr

080113b6 <LL_UCPD_RxDMAEnable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMAEnable(UCPD_TypeDef *UCPDx)
{
 80113b6:	b480      	push	{r7}
 80113b8:	b083      	sub	sp, #12
 80113ba:	af00      	add	r7, sp, #0
 80113bc:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	601a      	str	r2, [r3, #0]
}
 80113ca:	bf00      	nop
 80113cc:	370c      	adds	r7, #12
 80113ce:	46bd      	mov	sp, r7
 80113d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d4:	4770      	bx	lr

080113d6 <LL_UCPD_RxDMADisable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMADisable(UCPD_TypeDef *UCPDx)
{
 80113d6:	b480      	push	{r7}
 80113d8:	b083      	sub	sp, #12
 80113da:	af00      	add	r7, sp, #0
 80113dc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	601a      	str	r2, [r3, #0]
}
 80113ea:	bf00      	nop
 80113ec:	370c      	adds	r7, #12
 80113ee:	46bd      	mov	sp, r7
 80113f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f4:	4770      	bx	lr

080113f6 <LL_UCPD_TxDMAEnable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMAEnable(UCPD_TypeDef *UCPDx)
{
 80113f6:	b480      	push	{r7}
 80113f8:	b083      	sub	sp, #12
 80113fa:	af00      	add	r7, sp, #0
 80113fc:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	601a      	str	r2, [r3, #0]
}
 801140a:	bf00      	nop
 801140c:	370c      	adds	r7, #12
 801140e:	46bd      	mov	sp, r7
 8011410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011414:	4770      	bx	lr

08011416 <LL_UCPD_TxDMADisable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMADisable(UCPD_TypeDef *UCPDx)
{
 8011416:	b480      	push	{r7}
 8011418:	b083      	sub	sp, #12
 801141a:	af00      	add	r7, sp, #0
 801141c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	601a      	str	r2, [r3, #0]
}
 801142a:	bf00      	nop
 801142c:	370c      	adds	r7, #12
 801142e:	46bd      	mov	sp, r7
 8011430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011434:	4770      	bx	lr

08011436 <LL_UCPD_WriteTxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP1_DEBUG
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP2_DEBUG
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_WriteTxOrderSet(UCPD_TypeDef *UCPDx, uint32_t TxOrderSet)
{
 8011436:	b480      	push	{r7}
 8011438:	b083      	sub	sp, #12
 801143a:	af00      	add	r7, sp, #0
 801143c:	6078      	str	r0, [r7, #4]
 801143e:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_ORDSET, TxOrderSet);
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	683a      	ldr	r2, [r7, #0]
 8011444:	61da      	str	r2, [r3, #28]
}
 8011446:	bf00      	nop
 8011448:	370c      	adds	r7, #12
 801144a:	46bd      	mov	sp, r7
 801144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011450:	4770      	bx	lr

08011452 <LL_UCPD_WriteTxPaySize>:
  * @param  UCPDx UCPD Instance
  * @param  TxPaySize
  * @retval None.
  */
__STATIC_INLINE void LL_UCPD_WriteTxPaySize(UCPD_TypeDef *UCPDx, uint32_t TxPaySize)
{
 8011452:	b480      	push	{r7}
 8011454:	b083      	sub	sp, #12
 8011456:	af00      	add	r7, sp, #0
 8011458:	6078      	str	r0, [r7, #4]
 801145a:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_PAYSZ, TxPaySize);
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	683a      	ldr	r2, [r7, #0]
 8011460:	621a      	str	r2, [r3, #32]
}
 8011462:	bf00      	nop
 8011464:	370c      	adds	r7, #12
 8011466:	46bd      	mov	sp, r7
 8011468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146c:	4770      	bx	lr

0801146e <USBPD_HW_IF_GlobalHwInit>:

/* Private functions ---------------------------------------------------------*/


void USBPD_HW_IF_GlobalHwInit(void)
{
 801146e:	b580      	push	{r7, lr}
 8011470:	af00      	add	r7, sp, #0
  /* PWR register access (for disabling dead battery feature) */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8011472:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8011476:	f7ff fe47 	bl	8011108 <LL_APB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 801147a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 801147e:	f7ff fe2b 	bl	80110d8 <LL_AHB1_GRP1_EnableClock>

}
 8011482:	bf00      	nop
 8011484:	bd80      	pop	{r7, pc}
	...

08011488 <USBPD_HW_IF_StopBISTMode2>:

#if !defined(USBPDCORE_LIB_NO_PD)
void USBPD_HW_IF_StopBISTMode2(uint8_t PortNum)
{
 8011488:	b580      	push	{r7, lr}
 801148a:	b084      	sub	sp, #16
 801148c:	af00      	add	r7, sp, #0
 801148e:	4603      	mov	r3, r0
 8011490:	71fb      	strb	r3, [r7, #7]
  uint32_t  _cr = READ_REG(Ports[PortNum].husbpd->CR) & ~(UCPD_CR_TXMODE | UCPD_CR_TXSEND);
 8011492:	79fa      	ldrb	r2, [r7, #7]
 8011494:	4917      	ldr	r1, [pc, #92]	@ (80114f4 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 8011496:	4613      	mov	r3, r2
 8011498:	011b      	lsls	r3, r3, #4
 801149a:	1a9b      	subs	r3, r3, r2
 801149c:	009b      	lsls	r3, r3, #2
 801149e:	440b      	add	r3, r1
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	68db      	ldr	r3, [r3, #12]
 80114a4:	f023 0307 	bic.w	r3, r3, #7
 80114a8:	60fb      	str	r3, [r7, #12]

  LL_UCPD_Disable(Ports[PortNum].husbpd);
 80114aa:	79fa      	ldrb	r2, [r7, #7]
 80114ac:	4911      	ldr	r1, [pc, #68]	@ (80114f4 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 80114ae:	4613      	mov	r3, r2
 80114b0:	011b      	lsls	r3, r3, #4
 80114b2:	1a9b      	subs	r3, r3, r2
 80114b4:	009b      	lsls	r3, r3, #2
 80114b6:	440b      	add	r3, r1
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	4618      	mov	r0, r3
 80114bc:	f7ff fe4c 	bl	8011158 <LL_UCPD_Disable>
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 80114c0:	79fa      	ldrb	r2, [r7, #7]
 80114c2:	490c      	ldr	r1, [pc, #48]	@ (80114f4 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 80114c4:	4613      	mov	r3, r2
 80114c6:	011b      	lsls	r3, r3, #4
 80114c8:	1a9b      	subs	r3, r3, r2
 80114ca:	009b      	lsls	r3, r3, #2
 80114cc:	440b      	add	r3, r1
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	4618      	mov	r0, r3
 80114d2:	f7ff fe31 	bl	8011138 <LL_UCPD_Enable>

  Ports[PortNum].husbpd->CR = _cr;
 80114d6:	79fa      	ldrb	r2, [r7, #7]
 80114d8:	4906      	ldr	r1, [pc, #24]	@ (80114f4 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 80114da:	4613      	mov	r3, r2
 80114dc:	011b      	lsls	r3, r3, #4
 80114de:	1a9b      	subs	r3, r3, r2
 80114e0:	009b      	lsls	r3, r3, #2
 80114e2:	440b      	add	r3, r1
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	68fa      	ldr	r2, [r7, #12]
 80114e8:	60da      	str	r2, [r3, #12]
}
 80114ea:	bf00      	nop
 80114ec:	3710      	adds	r7, #16
 80114ee:	46bd      	mov	sp, r7
 80114f0:	bd80      	pop	{r7, pc}
 80114f2:	bf00      	nop
 80114f4:	20000a90 	.word	0x20000a90

080114f8 <USBPD_HW_IF_SendBuffer>:

USBPD_StatusTypeDef USBPD_HW_IF_SendBuffer(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint32_t Size)
{
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b08a      	sub	sp, #40	@ 0x28
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	60ba      	str	r2, [r7, #8]
 8011500:	607b      	str	r3, [r7, #4]
 8011502:	4603      	mov	r3, r0
 8011504:	73fb      	strb	r3, [r7, #15]
 8011506:	460b      	mov	r3, r1
 8011508:	73bb      	strb	r3, [r7, #14]
  USBPD_StatusTypeDef _status = USBPD_OK;
 801150a:	2300      	movs	r3, #0
 801150c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (USBPD_SOPTYPE_HARD_RESET == Type)
 8011510:	7bbb      	ldrb	r3, [r7, #14]
 8011512:	2b05      	cmp	r3, #5
 8011514:	d10b      	bne.n	801152e <USBPD_HW_IF_SendBuffer+0x36>
  {
    LL_UCPD_SendHardReset(Ports[PortNum].husbpd);
 8011516:	7bfa      	ldrb	r2, [r7, #15]
 8011518:	4996      	ldr	r1, [pc, #600]	@ (8011774 <USBPD_HW_IF_SendBuffer+0x27c>)
 801151a:	4613      	mov	r3, r2
 801151c:	011b      	lsls	r3, r3, #4
 801151e:	1a9b      	subs	r3, r3, r2
 8011520:	009b      	lsls	r3, r3, #2
 8011522:	440b      	add	r3, r1
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	4618      	mov	r0, r3
 8011528:	f7ff ff12 	bl	8011350 <LL_UCPD_SendHardReset>
 801152c:	e11b      	b.n	8011766 <USBPD_HW_IF_SendBuffer+0x26e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801152e:	f3ef 8310 	mrs	r3, PRIMASK
 8011532:	61fb      	str	r3, [r7, #28]
  return(result);
 8011534:	69fb      	ldr	r3, [r7, #28]
  }
  else
  {
    PHY_ENTER_CRITICAL_SECTION()
 8011536:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8011538:	b672      	cpsid	i
}
 801153a:	bf00      	nop

    /* If RX is ongoing or if a DMA transfer is active then discard the buffer sending */
    if ((Ports[PortNum].RXStatus == USBPD_TRUE) || ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN))
 801153c:	7bfa      	ldrb	r2, [r7, #15]
 801153e:	498d      	ldr	r1, [pc, #564]	@ (8011774 <USBPD_HW_IF_SendBuffer+0x27c>)
 8011540:	4613      	mov	r3, r2
 8011542:	011b      	lsls	r3, r3, #4
 8011544:	1a9b      	subs	r3, r3, r2
 8011546:	009b      	lsls	r3, r3, #2
 8011548:	440b      	add	r3, r1
 801154a:	3338      	adds	r3, #56	@ 0x38
 801154c:	781b      	ldrb	r3, [r3, #0]
 801154e:	b2db      	uxtb	r3, r3
 8011550:	2b01      	cmp	r3, #1
 8011552:	d00d      	beq.n	8011570 <USBPD_HW_IF_SendBuffer+0x78>
 8011554:	7bfa      	ldrb	r2, [r7, #15]
 8011556:	4987      	ldr	r1, [pc, #540]	@ (8011774 <USBPD_HW_IF_SendBuffer+0x27c>)
 8011558:	4613      	mov	r3, r2
 801155a:	011b      	lsls	r3, r3, #4
 801155c:	1a9b      	subs	r3, r3, r2
 801155e:	009b      	lsls	r3, r3, #2
 8011560:	440b      	add	r3, r1
 8011562:	3304      	adds	r3, #4
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	f003 0301 	and.w	r3, r3, #1
 801156c:	2b01      	cmp	r3, #1
 801156e:	d109      	bne.n	8011584 <USBPD_HW_IF_SendBuffer+0x8c>
 8011570:	6a3b      	ldr	r3, [r7, #32]
 8011572:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011574:	69bb      	ldr	r3, [r7, #24]
 8011576:	f383 8810 	msr	PRIMASK, r3
}
 801157a:	bf00      	nop
    {
      PHY_LEAVE_CRITICAL_SECTION()
      _status = USBPD_ERROR;
 801157c:	2302      	movs	r3, #2
 801157e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011582:	e0f0      	b.n	8011766 <USBPD_HW_IF_SendBuffer+0x26e>
 8011584:	6a3b      	ldr	r3, [r7, #32]
 8011586:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011588:	697b      	ldr	r3, [r7, #20]
 801158a:	f383 8810 	msr	PRIMASK, r3
}
 801158e:	bf00      	nop
    }
    else
    {
      PHY_LEAVE_CRITICAL_SECTION()

      switch (Type)
 8011590:	7bbb      	ldrb	r3, [r7, #14]
 8011592:	2b07      	cmp	r3, #7
 8011594:	d877      	bhi.n	8011686 <USBPD_HW_IF_SendBuffer+0x18e>
 8011596:	a201      	add	r2, pc, #4	@ (adr r2, 801159c <USBPD_HW_IF_SendBuffer+0xa4>)
 8011598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801159c:	080115bd 	.word	0x080115bd
 80115a0:	080115ef 	.word	0x080115ef
 80115a4:	08011621 	.word	0x08011621
 80115a8:	08011687 	.word	0x08011687
 80115ac:	08011687 	.word	0x08011687
 80115b0:	08011687 	.word	0x08011687
 80115b4:	08011653 	.word	0x08011653
 80115b8:	0801166d 	.word	0x0801166d
      {
        case USBPD_SOPTYPE_SOP :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP);
 80115bc:	7bfa      	ldrb	r2, [r7, #15]
 80115be:	496d      	ldr	r1, [pc, #436]	@ (8011774 <USBPD_HW_IF_SendBuffer+0x27c>)
 80115c0:	4613      	mov	r3, r2
 80115c2:	011b      	lsls	r3, r3, #4
 80115c4:	1a9b      	subs	r3, r3, r2
 80115c6:	009b      	lsls	r3, r3, #2
 80115c8:	440b      	add	r3, r1
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	496a      	ldr	r1, [pc, #424]	@ (8011778 <USBPD_HW_IF_SendBuffer+0x280>)
 80115ce:	4618      	mov	r0, r3
 80115d0:	f7ff ff31 	bl	8011436 <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 80115d4:	7bfa      	ldrb	r2, [r7, #15]
 80115d6:	4967      	ldr	r1, [pc, #412]	@ (8011774 <USBPD_HW_IF_SendBuffer+0x27c>)
 80115d8:	4613      	mov	r3, r2
 80115da:	011b      	lsls	r3, r3, #4
 80115dc:	1a9b      	subs	r3, r3, r2
 80115de:	009b      	lsls	r3, r3, #2
 80115e0:	440b      	add	r3, r1
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	2100      	movs	r1, #0
 80115e6:	4618      	mov	r0, r3
 80115e8:	f7ff fed2 	bl	8011390 <LL_UCPD_SetTxMode>
          break;
 80115ec:	e04f      	b.n	801168e <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_SOP1 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP1);
 80115ee:	7bfa      	ldrb	r2, [r7, #15]
 80115f0:	4960      	ldr	r1, [pc, #384]	@ (8011774 <USBPD_HW_IF_SendBuffer+0x27c>)
 80115f2:	4613      	mov	r3, r2
 80115f4:	011b      	lsls	r3, r3, #4
 80115f6:	1a9b      	subs	r3, r3, r2
 80115f8:	009b      	lsls	r3, r3, #2
 80115fa:	440b      	add	r3, r1
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	495f      	ldr	r1, [pc, #380]	@ (801177c <USBPD_HW_IF_SendBuffer+0x284>)
 8011600:	4618      	mov	r0, r3
 8011602:	f7ff ff18 	bl	8011436 <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 8011606:	7bfa      	ldrb	r2, [r7, #15]
 8011608:	495a      	ldr	r1, [pc, #360]	@ (8011774 <USBPD_HW_IF_SendBuffer+0x27c>)
 801160a:	4613      	mov	r3, r2
 801160c:	011b      	lsls	r3, r3, #4
 801160e:	1a9b      	subs	r3, r3, r2
 8011610:	009b      	lsls	r3, r3, #2
 8011612:	440b      	add	r3, r1
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	2100      	movs	r1, #0
 8011618:	4618      	mov	r0, r3
 801161a:	f7ff feb9 	bl	8011390 <LL_UCPD_SetTxMode>
          break;
 801161e:	e036      	b.n	801168e <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_SOP2 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP2);
 8011620:	7bfa      	ldrb	r2, [r7, #15]
 8011622:	4954      	ldr	r1, [pc, #336]	@ (8011774 <USBPD_HW_IF_SendBuffer+0x27c>)
 8011624:	4613      	mov	r3, r2
 8011626:	011b      	lsls	r3, r3, #4
 8011628:	1a9b      	subs	r3, r3, r2
 801162a:	009b      	lsls	r3, r3, #2
 801162c:	440b      	add	r3, r1
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	4953      	ldr	r1, [pc, #332]	@ (8011780 <USBPD_HW_IF_SendBuffer+0x288>)
 8011632:	4618      	mov	r0, r3
 8011634:	f7ff feff 	bl	8011436 <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 8011638:	7bfa      	ldrb	r2, [r7, #15]
 801163a:	494e      	ldr	r1, [pc, #312]	@ (8011774 <USBPD_HW_IF_SendBuffer+0x27c>)
 801163c:	4613      	mov	r3, r2
 801163e:	011b      	lsls	r3, r3, #4
 8011640:	1a9b      	subs	r3, r3, r2
 8011642:	009b      	lsls	r3, r3, #2
 8011644:	440b      	add	r3, r1
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	2100      	movs	r1, #0
 801164a:	4618      	mov	r0, r3
 801164c:	f7ff fea0 	bl	8011390 <LL_UCPD_SetTxMode>
          break;
 8011650:	e01d      	b.n	801168e <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_CABLE_RESET :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_CABLE_RESET);
 8011652:	7bfa      	ldrb	r2, [r7, #15]
 8011654:	4947      	ldr	r1, [pc, #284]	@ (8011774 <USBPD_HW_IF_SendBuffer+0x27c>)
 8011656:	4613      	mov	r3, r2
 8011658:	011b      	lsls	r3, r3, #4
 801165a:	1a9b      	subs	r3, r3, r2
 801165c:	009b      	lsls	r3, r3, #2
 801165e:	440b      	add	r3, r1
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	2101      	movs	r1, #1
 8011664:	4618      	mov	r0, r3
 8011666:	f7ff fe93 	bl	8011390 <LL_UCPD_SetTxMode>
          break;
 801166a:	e010      	b.n	801168e <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_BIST_MODE_2 :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 801166c:	7bfa      	ldrb	r2, [r7, #15]
 801166e:	4941      	ldr	r1, [pc, #260]	@ (8011774 <USBPD_HW_IF_SendBuffer+0x27c>)
 8011670:	4613      	mov	r3, r2
 8011672:	011b      	lsls	r3, r3, #4
 8011674:	1a9b      	subs	r3, r3, r2
 8011676:	009b      	lsls	r3, r3, #2
 8011678:	440b      	add	r3, r1
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	2102      	movs	r1, #2
 801167e:	4618      	mov	r0, r3
 8011680:	f7ff fe86 	bl	8011390 <LL_UCPD_SetTxMode>
          break;
 8011684:	e003      	b.n	801168e <USBPD_HW_IF_SendBuffer+0x196>
        }
        default :
          _status = USBPD_ERROR;
 8011686:	2302      	movs	r3, #2
 8011688:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 801168c:	bf00      	nop
      }

      if (USBPD_OK == _status)
 801168e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011692:	2b00      	cmp	r3, #0
 8011694:	d167      	bne.n	8011766 <USBPD_HW_IF_SendBuffer+0x26e>
      {
#if defined(_LOW_POWER)
        UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */
        CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8011696:	7bfa      	ldrb	r2, [r7, #15]
 8011698:	4936      	ldr	r1, [pc, #216]	@ (8011774 <USBPD_HW_IF_SendBuffer+0x27c>)
 801169a:	4613      	mov	r3, r2
 801169c:	011b      	lsls	r3, r3, #4
 801169e:	1a9b      	subs	r3, r3, r2
 80116a0:	009b      	lsls	r3, r3, #2
 80116a2:	440b      	add	r3, r1
 80116a4:	3304      	adds	r3, #4
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	6819      	ldr	r1, [r3, #0]
 80116aa:	7bfa      	ldrb	r2, [r7, #15]
 80116ac:	4831      	ldr	r0, [pc, #196]	@ (8011774 <USBPD_HW_IF_SendBuffer+0x27c>)
 80116ae:	4613      	mov	r3, r2
 80116b0:	011b      	lsls	r3, r3, #4
 80116b2:	1a9b      	subs	r3, r3, r2
 80116b4:	009b      	lsls	r3, r3, #2
 80116b6:	4403      	add	r3, r0
 80116b8:	3304      	adds	r3, #4
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	f021 0201 	bic.w	r2, r1, #1
 80116c0:	601a      	str	r2, [r3, #0]
        while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 80116c2:	bf00      	nop
 80116c4:	7bfa      	ldrb	r2, [r7, #15]
 80116c6:	492b      	ldr	r1, [pc, #172]	@ (8011774 <USBPD_HW_IF_SendBuffer+0x27c>)
 80116c8:	4613      	mov	r3, r2
 80116ca:	011b      	lsls	r3, r3, #4
 80116cc:	1a9b      	subs	r3, r3, r2
 80116ce:	009b      	lsls	r3, r3, #2
 80116d0:	440b      	add	r3, r1
 80116d2:	3304      	adds	r3, #4
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	f003 0301 	and.w	r3, r3, #1
 80116dc:	2b01      	cmp	r3, #1
 80116de:	d0f1      	beq.n	80116c4 <USBPD_HW_IF_SendBuffer+0x1cc>

        WRITE_REG(Ports[PortNum].hdmatx->CMAR, (uint32_t)pBuffer);
 80116e0:	7bfa      	ldrb	r2, [r7, #15]
 80116e2:	4924      	ldr	r1, [pc, #144]	@ (8011774 <USBPD_HW_IF_SendBuffer+0x27c>)
 80116e4:	4613      	mov	r3, r2
 80116e6:	011b      	lsls	r3, r3, #4
 80116e8:	1a9b      	subs	r3, r3, r2
 80116ea:	009b      	lsls	r3, r3, #2
 80116ec:	440b      	add	r3, r1
 80116ee:	3304      	adds	r3, #4
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	68ba      	ldr	r2, [r7, #8]
 80116f4:	60da      	str	r2, [r3, #12]
        WRITE_REG(Ports[PortNum].hdmatx->CNDTR, Size);
 80116f6:	7bfa      	ldrb	r2, [r7, #15]
 80116f8:	491e      	ldr	r1, [pc, #120]	@ (8011774 <USBPD_HW_IF_SendBuffer+0x27c>)
 80116fa:	4613      	mov	r3, r2
 80116fc:	011b      	lsls	r3, r3, #4
 80116fe:	1a9b      	subs	r3, r3, r2
 8011700:	009b      	lsls	r3, r3, #2
 8011702:	440b      	add	r3, r1
 8011704:	3304      	adds	r3, #4
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	687a      	ldr	r2, [r7, #4]
 801170a:	605a      	str	r2, [r3, #4]
        SET_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 801170c:	7bfa      	ldrb	r2, [r7, #15]
 801170e:	4919      	ldr	r1, [pc, #100]	@ (8011774 <USBPD_HW_IF_SendBuffer+0x27c>)
 8011710:	4613      	mov	r3, r2
 8011712:	011b      	lsls	r3, r3, #4
 8011714:	1a9b      	subs	r3, r3, r2
 8011716:	009b      	lsls	r3, r3, #2
 8011718:	440b      	add	r3, r1
 801171a:	3304      	adds	r3, #4
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	6819      	ldr	r1, [r3, #0]
 8011720:	7bfa      	ldrb	r2, [r7, #15]
 8011722:	4814      	ldr	r0, [pc, #80]	@ (8011774 <USBPD_HW_IF_SendBuffer+0x27c>)
 8011724:	4613      	mov	r3, r2
 8011726:	011b      	lsls	r3, r3, #4
 8011728:	1a9b      	subs	r3, r3, r2
 801172a:	009b      	lsls	r3, r3, #2
 801172c:	4403      	add	r3, r0
 801172e:	3304      	adds	r3, #4
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	f041 0201 	orr.w	r2, r1, #1
 8011736:	601a      	str	r2, [r3, #0]

        LL_UCPD_WriteTxPaySize(Ports[PortNum].husbpd, Size);
 8011738:	7bfa      	ldrb	r2, [r7, #15]
 801173a:	490e      	ldr	r1, [pc, #56]	@ (8011774 <USBPD_HW_IF_SendBuffer+0x27c>)
 801173c:	4613      	mov	r3, r2
 801173e:	011b      	lsls	r3, r3, #4
 8011740:	1a9b      	subs	r3, r3, r2
 8011742:	009b      	lsls	r3, r3, #2
 8011744:	440b      	add	r3, r1
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	6879      	ldr	r1, [r7, #4]
 801174a:	4618      	mov	r0, r3
 801174c:	f7ff fe81 	bl	8011452 <LL_UCPD_WriteTxPaySize>
        LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 8011750:	7bfa      	ldrb	r2, [r7, #15]
 8011752:	4908      	ldr	r1, [pc, #32]	@ (8011774 <USBPD_HW_IF_SendBuffer+0x27c>)
 8011754:	4613      	mov	r3, r2
 8011756:	011b      	lsls	r3, r3, #4
 8011758:	1a9b      	subs	r3, r3, r2
 801175a:	009b      	lsls	r3, r3, #2
 801175c:	440b      	add	r3, r1
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	4618      	mov	r0, r3
 8011762:	f7ff fe05 	bl	8011370 <LL_UCPD_SendMessage>
      }
    }
  }
  return _status;
 8011766:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801176a:	4618      	mov	r0, r3
 801176c:	3728      	adds	r7, #40	@ 0x28
 801176e:	46bd      	mov	sp, r7
 8011770:	bd80      	pop	{r7, pc}
 8011772:	bf00      	nop
 8011774:	20000a90 	.word	0x20000a90
 8011778:	0008e318 	.word	0x0008e318
 801177c:	00031b18 	.word	0x00031b18
 8011780:	000360d8 	.word	0x000360d8

08011784 <USBPD_HW_IF_Send_BIST_Pattern>:

void USBPD_HW_IF_Send_BIST_Pattern(uint8_t PortNum)
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b082      	sub	sp, #8
 8011788:	af00      	add	r7, sp, #0
 801178a:	4603      	mov	r3, r0
 801178c:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 801178e:	79fa      	ldrb	r2, [r7, #7]
 8011790:	490c      	ldr	r1, [pc, #48]	@ (80117c4 <USBPD_HW_IF_Send_BIST_Pattern+0x40>)
 8011792:	4613      	mov	r3, r2
 8011794:	011b      	lsls	r3, r3, #4
 8011796:	1a9b      	subs	r3, r3, r2
 8011798:	009b      	lsls	r3, r3, #2
 801179a:	440b      	add	r3, r1
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	2102      	movs	r1, #2
 80117a0:	4618      	mov	r0, r3
 80117a2:	f7ff fdf5 	bl	8011390 <LL_UCPD_SetTxMode>
  LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 80117a6:	79fa      	ldrb	r2, [r7, #7]
 80117a8:	4906      	ldr	r1, [pc, #24]	@ (80117c4 <USBPD_HW_IF_Send_BIST_Pattern+0x40>)
 80117aa:	4613      	mov	r3, r2
 80117ac:	011b      	lsls	r3, r3, #4
 80117ae:	1a9b      	subs	r3, r3, r2
 80117b0:	009b      	lsls	r3, r3, #2
 80117b2:	440b      	add	r3, r1
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	4618      	mov	r0, r3
 80117b8:	f7ff fdda 	bl	8011370 <LL_UCPD_SendMessage>
}
 80117bc:	bf00      	nop
 80117be:	3708      	adds	r7, #8
 80117c0:	46bd      	mov	sp, r7
 80117c2:	bd80      	pop	{r7, pc}
 80117c4:	20000a90 	.word	0x20000a90

080117c8 <USBPDM1_AssertRp>:
  * @brief  Assert Rp resistors
  * @param  PortNum Port
  * @retval None
  */
void USBPDM1_AssertRp(uint8_t PortNum)
{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	b082      	sub	sp, #8
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	4603      	mov	r3, r0
 80117d0:	71fb      	strb	r3, [r7, #7]
  switch (Ports[PortNum].params->RpResistor)
 80117d2:	79fa      	ldrb	r2, [r7, #7]
 80117d4:	4946      	ldr	r1, [pc, #280]	@ (80118f0 <USBPDM1_AssertRp+0x128>)
 80117d6:	4613      	mov	r3, r2
 80117d8:	011b      	lsls	r3, r3, #4
 80117da:	1a9b      	subs	r3, r3, r2
 80117dc:	009b      	lsls	r3, r3, #2
 80117de:	440b      	add	r3, r1
 80117e0:	3310      	adds	r3, #16
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	789b      	ldrb	r3, [r3, #2]
 80117e6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80117ea:	b2db      	uxtb	r3, r3
 80117ec:	2b02      	cmp	r3, #2
 80117ee:	d021      	beq.n	8011834 <USBPDM1_AssertRp+0x6c>
 80117f0:	2b02      	cmp	r3, #2
 80117f2:	dc2d      	bgt.n	8011850 <USBPDM1_AssertRp+0x88>
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d002      	beq.n	80117fe <USBPDM1_AssertRp+0x36>
 80117f8:	2b01      	cmp	r3, #1
 80117fa:	d00d      	beq.n	8011818 <USBPDM1_AssertRp+0x50>
      break;
    case vRp_3_0A:
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
      break;
    default:
      break;
 80117fc:	e028      	b.n	8011850 <USBPDM1_AssertRp+0x88>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_DEFAULT);
 80117fe:	79fa      	ldrb	r2, [r7, #7]
 8011800:	493b      	ldr	r1, [pc, #236]	@ (80118f0 <USBPDM1_AssertRp+0x128>)
 8011802:	4613      	mov	r3, r2
 8011804:	011b      	lsls	r3, r3, #4
 8011806:	1a9b      	subs	r3, r3, r2
 8011808:	009b      	lsls	r3, r3, #2
 801180a:	440b      	add	r3, r1
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	2180      	movs	r1, #128	@ 0x80
 8011810:	4618      	mov	r0, r3
 8011812:	f7ff fd44 	bl	801129e <LL_UCPD_SetRpResistor>
      break;
 8011816:	e01c      	b.n	8011852 <USBPDM1_AssertRp+0x8a>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 8011818:	79fa      	ldrb	r2, [r7, #7]
 801181a:	4935      	ldr	r1, [pc, #212]	@ (80118f0 <USBPDM1_AssertRp+0x128>)
 801181c:	4613      	mov	r3, r2
 801181e:	011b      	lsls	r3, r3, #4
 8011820:	1a9b      	subs	r3, r3, r2
 8011822:	009b      	lsls	r3, r3, #2
 8011824:	440b      	add	r3, r1
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801182c:	4618      	mov	r0, r3
 801182e:	f7ff fd36 	bl	801129e <LL_UCPD_SetRpResistor>
      break;
 8011832:	e00e      	b.n	8011852 <USBPDM1_AssertRp+0x8a>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 8011834:	79fa      	ldrb	r2, [r7, #7]
 8011836:	492e      	ldr	r1, [pc, #184]	@ (80118f0 <USBPDM1_AssertRp+0x128>)
 8011838:	4613      	mov	r3, r2
 801183a:	011b      	lsls	r3, r3, #4
 801183c:	1a9b      	subs	r3, r3, r2
 801183e:	009b      	lsls	r3, r3, #2
 8011840:	440b      	add	r3, r1
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8011848:	4618      	mov	r0, r3
 801184a:	f7ff fd28 	bl	801129e <LL_UCPD_SetRpResistor>
      break;
 801184e:	e000      	b.n	8011852 <USBPDM1_AssertRp+0x8a>
      break;
 8011850:	bf00      	nop
  }
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8011852:	79fa      	ldrb	r2, [r7, #7]
 8011854:	4926      	ldr	r1, [pc, #152]	@ (80118f0 <USBPDM1_AssertRp+0x128>)
 8011856:	4613      	mov	r3, r2
 8011858:	011b      	lsls	r3, r3, #4
 801185a:	1a9b      	subs	r3, r3, r2
 801185c:	009b      	lsls	r3, r3, #2
 801185e:	440b      	add	r3, r1
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	2100      	movs	r1, #0
 8011864:	4618      	mov	r0, r3
 8011866:	f7ff fce7 	bl	8011238 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 801186a:	79fa      	ldrb	r2, [r7, #7]
 801186c:	4920      	ldr	r1, [pc, #128]	@ (80118f0 <USBPDM1_AssertRp+0x128>)
 801186e:	4613      	mov	r3, r2
 8011870:	011b      	lsls	r3, r3, #4
 8011872:	1a9b      	subs	r3, r3, r2
 8011874:	009b      	lsls	r3, r3, #2
 8011876:	440b      	add	r3, r1
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	4618      	mov	r0, r3
 801187c:	f7ff fcff 	bl	801127e <LL_UCPD_SetSRCRole>
  if (CCNONE == Ports[PortNum].CCx)
 8011880:	79fa      	ldrb	r2, [r7, #7]
 8011882:	491b      	ldr	r1, [pc, #108]	@ (80118f0 <USBPDM1_AssertRp+0x128>)
 8011884:	4613      	mov	r3, r2
 8011886:	011b      	lsls	r3, r3, #4
 8011888:	1a9b      	subs	r3, r3, r2
 801188a:	009b      	lsls	r3, r3, #2
 801188c:	440b      	add	r3, r1
 801188e:	3334      	adds	r3, #52	@ 0x34
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d10d      	bne.n	80118b2 <USBPDM1_AssertRp+0xea>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8011896:	79fa      	ldrb	r2, [r7, #7]
 8011898:	4915      	ldr	r1, [pc, #84]	@ (80118f0 <USBPDM1_AssertRp+0x128>)
 801189a:	4613      	mov	r3, r2
 801189c:	011b      	lsls	r3, r3, #4
 801189e:	1a9b      	subs	r3, r3, r2
 80118a0:	009b      	lsls	r3, r3, #2
 80118a2:	440b      	add	r3, r1
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 80118aa:	4618      	mov	r0, r3
 80118ac:	f7ff fcc4 	bl	8011238 <LL_UCPD_SetccEnable>
  }

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SOURCE);
#endif /* TCPP0203_SUPPORT */
}
 80118b0:	e01a      	b.n	80118e8 <USBPDM1_AssertRp+0x120>
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 80118b2:	79fa      	ldrb	r2, [r7, #7]
 80118b4:	490e      	ldr	r1, [pc, #56]	@ (80118f0 <USBPDM1_AssertRp+0x128>)
 80118b6:	4613      	mov	r3, r2
 80118b8:	011b      	lsls	r3, r3, #4
 80118ba:	1a9b      	subs	r3, r3, r2
 80118bc:	009b      	lsls	r3, r3, #2
 80118be:	440b      	add	r3, r1
 80118c0:	6818      	ldr	r0, [r3, #0]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 80118c2:	79fa      	ldrb	r2, [r7, #7]
 80118c4:	490a      	ldr	r1, [pc, #40]	@ (80118f0 <USBPDM1_AssertRp+0x128>)
 80118c6:	4613      	mov	r3, r2
 80118c8:	011b      	lsls	r3, r3, #4
 80118ca:	1a9b      	subs	r3, r3, r2
 80118cc:	009b      	lsls	r3, r3, #2
 80118ce:	440b      	add	r3, r1
 80118d0:	3334      	adds	r3, #52	@ 0x34
 80118d2:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 80118d4:	2b01      	cmp	r3, #1
 80118d6:	d102      	bne.n	80118de <USBPDM1_AssertRp+0x116>
 80118d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80118dc:	e001      	b.n	80118e2 <USBPDM1_AssertRp+0x11a>
 80118de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80118e2:	4619      	mov	r1, r3
 80118e4:	f7ff fca8 	bl	8011238 <LL_UCPD_SetccEnable>
}
 80118e8:	bf00      	nop
 80118ea:	3708      	adds	r7, #8
 80118ec:	46bd      	mov	sp, r7
 80118ee:	bd80      	pop	{r7, pc}
 80118f0:	20000a90 	.word	0x20000a90

080118f4 <USBPDM1_DeAssertRp>:
  * @brief  De-assert Rp resistors
  * @param  PortNum Port
  * @retval None
  */
void USBPDM1_DeAssertRp(uint8_t PortNum)
{
 80118f4:	b480      	push	{r7}
 80118f6:	b083      	sub	sp, #12
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	4603      	mov	r3, r0
 80118fc:	71fb      	strb	r3, [r7, #7]
  /* Not needed on STM32G4xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 80118fe:	bf00      	nop
 8011900:	370c      	adds	r7, #12
 8011902:	46bd      	mov	sp, r7
 8011904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011908:	4770      	bx	lr
	...

0801190c <USBPDM1_AssertRd>:
  * @brief  Assert Rd resistors
  * @param  PortNum Port
  * @retval None
  */
void USBPDM1_AssertRd(uint8_t PortNum)
{
 801190c:	b580      	push	{r7, lr}
 801190e:	b082      	sub	sp, #8
 8011910:	af00      	add	r7, sp, #0
 8011912:	4603      	mov	r3, r0
 8011914:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_TypeCDetectionCC2Disable(Ports[PortNum].husbpd);
 8011916:	79fa      	ldrb	r2, [r7, #7]
 8011918:	493e      	ldr	r1, [pc, #248]	@ (8011a14 <USBPDM1_AssertRd+0x108>)
 801191a:	4613      	mov	r3, r2
 801191c:	011b      	lsls	r3, r3, #4
 801191e:	1a9b      	subs	r3, r3, r2
 8011920:	009b      	lsls	r3, r3, #2
 8011922:	440b      	add	r3, r1
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	4618      	mov	r0, r3
 8011928:	f7ff fc36 	bl	8011198 <LL_UCPD_TypeCDetectionCC2Disable>
  LL_UCPD_TypeCDetectionCC1Disable(Ports[PortNum].husbpd);
 801192c:	79fa      	ldrb	r2, [r7, #7]
 801192e:	4939      	ldr	r1, [pc, #228]	@ (8011a14 <USBPDM1_AssertRd+0x108>)
 8011930:	4613      	mov	r3, r2
 8011932:	011b      	lsls	r3, r3, #4
 8011934:	1a9b      	subs	r3, r3, r2
 8011936:	009b      	lsls	r3, r3, #2
 8011938:	440b      	add	r3, r1
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	4618      	mov	r0, r3
 801193e:	f7ff fc4b 	bl	80111d8 <LL_UCPD_TypeCDetectionCC1Disable>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8011942:	79fa      	ldrb	r2, [r7, #7]
 8011944:	4933      	ldr	r1, [pc, #204]	@ (8011a14 <USBPDM1_AssertRd+0x108>)
 8011946:	4613      	mov	r3, r2
 8011948:	011b      	lsls	r3, r3, #4
 801194a:	1a9b      	subs	r3, r3, r2
 801194c:	009b      	lsls	r3, r3, #2
 801194e:	440b      	add	r3, r1
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	2100      	movs	r1, #0
 8011954:	4618      	mov	r0, r3
 8011956:	f7ff fc6f 	bl	8011238 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSNKRole(Ports[PortNum].husbpd);
 801195a:	79fa      	ldrb	r2, [r7, #7]
 801195c:	492d      	ldr	r1, [pc, #180]	@ (8011a14 <USBPDM1_AssertRd+0x108>)
 801195e:	4613      	mov	r3, r2
 8011960:	011b      	lsls	r3, r3, #4
 8011962:	1a9b      	subs	r3, r3, r2
 8011964:	009b      	lsls	r3, r3, #2
 8011966:	440b      	add	r3, r1
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	4618      	mov	r0, r3
 801196c:	f7ff fc77 	bl	801125e <LL_UCPD_SetSNKRole>
  if (CCNONE == Ports[PortNum].CCx)
 8011970:	79fa      	ldrb	r2, [r7, #7]
 8011972:	4928      	ldr	r1, [pc, #160]	@ (8011a14 <USBPDM1_AssertRd+0x108>)
 8011974:	4613      	mov	r3, r2
 8011976:	011b      	lsls	r3, r3, #4
 8011978:	1a9b      	subs	r3, r3, r2
 801197a:	009b      	lsls	r3, r3, #2
 801197c:	440b      	add	r3, r1
 801197e:	3334      	adds	r3, #52	@ 0x34
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	2b00      	cmp	r3, #0
 8011984:	d10d      	bne.n	80119a2 <USBPDM1_AssertRd+0x96>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8011986:	79fa      	ldrb	r2, [r7, #7]
 8011988:	4922      	ldr	r1, [pc, #136]	@ (8011a14 <USBPDM1_AssertRd+0x108>)
 801198a:	4613      	mov	r3, r2
 801198c:	011b      	lsls	r3, r3, #4
 801198e:	1a9b      	subs	r3, r3, r2
 8011990:	009b      	lsls	r3, r3, #2
 8011992:	440b      	add	r3, r1
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 801199a:	4618      	mov	r0, r3
 801199c:	f7ff fc4c 	bl	8011238 <LL_UCPD_SetccEnable>
 80119a0:	e01a      	b.n	80119d8 <USBPDM1_AssertRd+0xcc>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 80119a2:	79fa      	ldrb	r2, [r7, #7]
 80119a4:	491b      	ldr	r1, [pc, #108]	@ (8011a14 <USBPDM1_AssertRd+0x108>)
 80119a6:	4613      	mov	r3, r2
 80119a8:	011b      	lsls	r3, r3, #4
 80119aa:	1a9b      	subs	r3, r3, r2
 80119ac:	009b      	lsls	r3, r3, #2
 80119ae:	440b      	add	r3, r1
 80119b0:	6818      	ldr	r0, [r3, #0]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 80119b2:	79fa      	ldrb	r2, [r7, #7]
 80119b4:	4917      	ldr	r1, [pc, #92]	@ (8011a14 <USBPDM1_AssertRd+0x108>)
 80119b6:	4613      	mov	r3, r2
 80119b8:	011b      	lsls	r3, r3, #4
 80119ba:	1a9b      	subs	r3, r3, r2
 80119bc:	009b      	lsls	r3, r3, #2
 80119be:	440b      	add	r3, r1
 80119c0:	3334      	adds	r3, #52	@ 0x34
 80119c2:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 80119c4:	2b01      	cmp	r3, #1
 80119c6:	d102      	bne.n	80119ce <USBPDM1_AssertRd+0xc2>
 80119c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80119cc:	e001      	b.n	80119d2 <USBPDM1_AssertRd+0xc6>
 80119ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80119d2:	4619      	mov	r1, r3
 80119d4:	f7ff fc30 	bl	8011238 <LL_UCPD_SetccEnable>
  }

  HAL_Delay(1);
 80119d8:	2001      	movs	r0, #1
 80119da:	f7f5 f9dd 	bl	8006d98 <HAL_Delay>

#ifndef _LOW_POWER
  LL_UCPD_TypeCDetectionCC2Enable(Ports[PortNum].husbpd);
 80119de:	79fa      	ldrb	r2, [r7, #7]
 80119e0:	490c      	ldr	r1, [pc, #48]	@ (8011a14 <USBPDM1_AssertRd+0x108>)
 80119e2:	4613      	mov	r3, r2
 80119e4:	011b      	lsls	r3, r3, #4
 80119e6:	1a9b      	subs	r3, r3, r2
 80119e8:	009b      	lsls	r3, r3, #2
 80119ea:	440b      	add	r3, r1
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	4618      	mov	r0, r3
 80119f0:	f7ff fbc2 	bl	8011178 <LL_UCPD_TypeCDetectionCC2Enable>
  LL_UCPD_TypeCDetectionCC1Enable(Ports[PortNum].husbpd);
 80119f4:	79fa      	ldrb	r2, [r7, #7]
 80119f6:	4907      	ldr	r1, [pc, #28]	@ (8011a14 <USBPDM1_AssertRd+0x108>)
 80119f8:	4613      	mov	r3, r2
 80119fa:	011b      	lsls	r3, r3, #4
 80119fc:	1a9b      	subs	r3, r3, r2
 80119fe:	009b      	lsls	r3, r3, #2
 8011a00:	440b      	add	r3, r1
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	4618      	mov	r0, r3
 8011a06:	f7ff fbd7 	bl	80111b8 <LL_UCPD_TypeCDetectionCC1Enable>
#endif /* _LOW_POWER */

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SINK);
#endif /* TCPP0203_SUPPORT */
}
 8011a0a:	bf00      	nop
 8011a0c:	3708      	adds	r7, #8
 8011a0e:	46bd      	mov	sp, r7
 8011a10:	bd80      	pop	{r7, pc}
 8011a12:	bf00      	nop
 8011a14:	20000a90 	.word	0x20000a90

08011a18 <USBPDM1_DeAssertRd>:
  * @brief  Assert Rd resistors
  * @param  PortNum Port
  * @retval none
  */
void USBPDM1_DeAssertRd(uint8_t PortNum)
{
 8011a18:	b480      	push	{r7}
 8011a1a:	b083      	sub	sp, #12
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	4603      	mov	r3, r0
 8011a20:	71fb      	strb	r3, [r7, #7]
  /* Not needed on STM32G4xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 8011a22:	bf00      	nop
 8011a24:	370c      	adds	r7, #12
 8011a26:	46bd      	mov	sp, r7
 8011a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a2c:	4770      	bx	lr
	...

08011a30 <USBPDM1_EnterErrorRecovery>:
  * @brief  Enter error recovery
  * @param  PortNum Port
  * @retval None
  */
void USBPDM1_EnterErrorRecovery(uint8_t PortNum)
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b082      	sub	sp, #8
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	4603      	mov	r3, r0
 8011a38:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 8011a3a:	79fa      	ldrb	r2, [r7, #7]
 8011a3c:	491f      	ldr	r1, [pc, #124]	@ (8011abc <USBPDM1_EnterErrorRecovery+0x8c>)
 8011a3e:	4613      	mov	r3, r2
 8011a40:	011b      	lsls	r3, r3, #4
 8011a42:	1a9b      	subs	r3, r3, r2
 8011a44:	009b      	lsls	r3, r3, #2
 8011a46:	440b      	add	r3, r1
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	f7ff fc17 	bl	801127e <LL_UCPD_SetSRCRole>
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_NONE);
 8011a50:	79fa      	ldrb	r2, [r7, #7]
 8011a52:	491a      	ldr	r1, [pc, #104]	@ (8011abc <USBPDM1_EnterErrorRecovery+0x8c>)
 8011a54:	4613      	mov	r3, r2
 8011a56:	011b      	lsls	r3, r3, #4
 8011a58:	1a9b      	subs	r3, r3, r2
 8011a5a:	009b      	lsls	r3, r3, #2
 8011a5c:	440b      	add	r3, r1
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	2100      	movs	r1, #0
 8011a62:	4618      	mov	r0, r3
 8011a64:	f7ff fc1b 	bl	801129e <LL_UCPD_SetRpResistor>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8011a68:	79fa      	ldrb	r2, [r7, #7]
 8011a6a:	4914      	ldr	r1, [pc, #80]	@ (8011abc <USBPDM1_EnterErrorRecovery+0x8c>)
 8011a6c:	4613      	mov	r3, r2
 8011a6e:	011b      	lsls	r3, r3, #4
 8011a70:	1a9b      	subs	r3, r3, r2
 8011a72:	009b      	lsls	r3, r3, #2
 8011a74:	440b      	add	r3, r1
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	4618      	mov	r0, r3
 8011a7a:	f7ff fc46 	bl	801130a <LL_UCPD_RxDisable>

#if !defined(USBPDCORE_LIB_NO_PD)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 8011a7e:	79fa      	ldrb	r2, [r7, #7]
 8011a80:	490e      	ldr	r1, [pc, #56]	@ (8011abc <USBPDM1_EnterErrorRecovery+0x8c>)
 8011a82:	4613      	mov	r3, r2
 8011a84:	011b      	lsls	r3, r3, #4
 8011a86:	1a9b      	subs	r3, r3, r2
 8011a88:	009b      	lsls	r3, r3, #2
 8011a8a:	440b      	add	r3, r1
 8011a8c:	330c      	adds	r3, #12
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	7a1b      	ldrb	r3, [r3, #8]
 8011a92:	f003 0302 	and.w	r3, r3, #2
 8011a96:	b2db      	uxtb	r3, r3
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d00a      	beq.n	8011ab2 <USBPDM1_EnterErrorRecovery+0x82>
  {
    /* Set GPIO to disallow the FRS RX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 8011a9c:	79fa      	ldrb	r2, [r7, #7]
 8011a9e:	4907      	ldr	r1, [pc, #28]	@ (8011abc <USBPDM1_EnterErrorRecovery+0x8c>)
 8011aa0:	4613      	mov	r3, r2
 8011aa2:	011b      	lsls	r3, r3, #4
 8011aa4:	1a9b      	subs	r3, r3, r2
 8011aa6:	009b      	lsls	r3, r3, #2
 8011aa8:	440b      	add	r3, r1
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	4618      	mov	r0, r3
 8011aae:	f7ff fbb3 	bl	8011218 <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPDCORE_LIB_NO_PD */
}
 8011ab2:	bf00      	nop
 8011ab4:	3708      	adds	r7, #8
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	bd80      	pop	{r7, pc}
 8011aba:	bf00      	nop
 8011abc:	20000a90 	.word	0x20000a90

08011ac0 <USBPD_HW_IF_EnableRX>:
  * @brief  Enable RX
  * @param  PortNum Port
  * @retval None
  */
void USBPD_HW_IF_EnableRX(uint8_t PortNum)
{
 8011ac0:	b580      	push	{r7, lr}
 8011ac2:	b082      	sub	sp, #8
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	4603      	mov	r3, r0
 8011ac8:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_RxEnable(Ports[PortNum].husbpd);
 8011aca:	79fa      	ldrb	r2, [r7, #7]
 8011acc:	4906      	ldr	r1, [pc, #24]	@ (8011ae8 <USBPD_HW_IF_EnableRX+0x28>)
 8011ace:	4613      	mov	r3, r2
 8011ad0:	011b      	lsls	r3, r3, #4
 8011ad2:	1a9b      	subs	r3, r3, r2
 8011ad4:	009b      	lsls	r3, r3, #2
 8011ad6:	440b      	add	r3, r1
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	4618      	mov	r0, r3
 8011adc:	f7ff fc05 	bl	80112ea <LL_UCPD_RxEnable>
}
 8011ae0:	bf00      	nop
 8011ae2:	3708      	adds	r7, #8
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	bd80      	pop	{r7, pc}
 8011ae8:	20000a90 	.word	0x20000a90

08011aec <USBPD_HW_IF_DisableRX>:
  * @brief  Disable RX
  * @param  PortNum Port
  * @retval None
  */
void USBPD_HW_IF_DisableRX(uint8_t PortNum)
{
 8011aec:	b580      	push	{r7, lr}
 8011aee:	b082      	sub	sp, #8
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	4603      	mov	r3, r0
 8011af4:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8011af6:	79fa      	ldrb	r2, [r7, #7]
 8011af8:	4906      	ldr	r1, [pc, #24]	@ (8011b14 <USBPD_HW_IF_DisableRX+0x28>)
 8011afa:	4613      	mov	r3, r2
 8011afc:	011b      	lsls	r3, r3, #4
 8011afe:	1a9b      	subs	r3, r3, r2
 8011b00:	009b      	lsls	r3, r3, #2
 8011b02:	440b      	add	r3, r1
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	4618      	mov	r0, r3
 8011b08:	f7ff fbff 	bl	801130a <LL_UCPD_RxDisable>
}
 8011b0c:	bf00      	nop
 8011b0e:	3708      	adds	r7, #8
 8011b10:	46bd      	mov	sp, r7
 8011b12:	bd80      	pop	{r7, pc}
 8011b14:	20000a90 	.word	0x20000a90

08011b18 <HW_SignalAttachement>:

void HW_SignalAttachement(uint8_t PortNum, CCxPin_TypeDef cc)
{
 8011b18:	b590      	push	{r4, r7, lr}
 8011b1a:	b085      	sub	sp, #20
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	4603      	mov	r3, r0
 8011b20:	6039      	str	r1, [r7, #0]
 8011b22:	71fb      	strb	r3, [r7, #7]
#if !defined(USBPDCORE_LIB_NO_PD)
  uint32_t _temp;

  /* Init timer to detect the reception of goodCRC */
  USBPD_TIM_Init();
 8011b24:	f000 fbf8 	bl	8012318 <USBPD_TIM_Init>

  /* Prepare ucpd to handle PD message
            RX message start listen
            TX prepare the DMA to be transfer ready
            Detection listen only the line corresponding CC=Rd for SRC/SNK */
  Ports[PortNum].hdmatx = USBPD_HW_Init_DMATxInstance(PortNum);
 8011b28:	79fc      	ldrb	r4, [r7, #7]
 8011b2a:	79fb      	ldrb	r3, [r7, #7]
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	f7fe fe53 	bl	80107d8 <USBPD_HW_Init_DMATxInstance>
 8011b32:	4602      	mov	r2, r0
 8011b34:	499d      	ldr	r1, [pc, #628]	@ (8011dac <HW_SignalAttachement+0x294>)
 8011b36:	4623      	mov	r3, r4
 8011b38:	011b      	lsls	r3, r3, #4
 8011b3a:	1b1b      	subs	r3, r3, r4
 8011b3c:	009b      	lsls	r3, r3, #2
 8011b3e:	440b      	add	r3, r1
 8011b40:	3304      	adds	r3, #4
 8011b42:	601a      	str	r2, [r3, #0]
  Ports[PortNum].hdmarx = USBPD_HW_Init_DMARxInstance(PortNum);
 8011b44:	79fc      	ldrb	r4, [r7, #7]
 8011b46:	79fb      	ldrb	r3, [r7, #7]
 8011b48:	4618      	mov	r0, r3
 8011b4a:	f7fe fe05 	bl	8010758 <USBPD_HW_Init_DMARxInstance>
 8011b4e:	4602      	mov	r2, r0
 8011b50:	4996      	ldr	r1, [pc, #600]	@ (8011dac <HW_SignalAttachement+0x294>)
 8011b52:	4623      	mov	r3, r4
 8011b54:	011b      	lsls	r3, r3, #4
 8011b56:	1b1b      	subs	r3, r3, r4
 8011b58:	009b      	lsls	r3, r3, #2
 8011b5a:	440b      	add	r3, r1
 8011b5c:	3308      	adds	r3, #8
 8011b5e:	601a      	str	r2, [r3, #0]

  /* Set the RX dma to allow reception */
  _temp = (uint32_t)&Ports[PortNum].husbpd->RXDR;
 8011b60:	79fa      	ldrb	r2, [r7, #7]
 8011b62:	4992      	ldr	r1, [pc, #584]	@ (8011dac <HW_SignalAttachement+0x294>)
 8011b64:	4613      	mov	r3, r2
 8011b66:	011b      	lsls	r3, r3, #4
 8011b68:	1a9b      	subs	r3, r3, r2
 8011b6a:	009b      	lsls	r3, r3, #2
 8011b6c:	440b      	add	r3, r1
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	3330      	adds	r3, #48	@ 0x30
 8011b72:	60fb      	str	r3, [r7, #12]
  WRITE_REG(Ports[PortNum].hdmarx->CPAR, _temp);
 8011b74:	79fa      	ldrb	r2, [r7, #7]
 8011b76:	498d      	ldr	r1, [pc, #564]	@ (8011dac <HW_SignalAttachement+0x294>)
 8011b78:	4613      	mov	r3, r2
 8011b7a:	011b      	lsls	r3, r3, #4
 8011b7c:	1a9b      	subs	r3, r3, r2
 8011b7e:	009b      	lsls	r3, r3, #2
 8011b80:	440b      	add	r3, r1
 8011b82:	3308      	adds	r3, #8
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	68fa      	ldr	r2, [r7, #12]
 8011b88:	609a      	str	r2, [r3, #8]
  WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 8011b8a:	79fa      	ldrb	r2, [r7, #7]
 8011b8c:	4987      	ldr	r1, [pc, #540]	@ (8011dac <HW_SignalAttachement+0x294>)
 8011b8e:	4613      	mov	r3, r2
 8011b90:	011b      	lsls	r3, r3, #4
 8011b92:	1a9b      	subs	r3, r3, r2
 8011b94:	009b      	lsls	r3, r3, #2
 8011b96:	440b      	add	r3, r1
 8011b98:	3330      	adds	r3, #48	@ 0x30
 8011b9a:	6818      	ldr	r0, [r3, #0]
 8011b9c:	79fa      	ldrb	r2, [r7, #7]
 8011b9e:	4983      	ldr	r1, [pc, #524]	@ (8011dac <HW_SignalAttachement+0x294>)
 8011ba0:	4613      	mov	r3, r2
 8011ba2:	011b      	lsls	r3, r3, #4
 8011ba4:	1a9b      	subs	r3, r3, r2
 8011ba6:	009b      	lsls	r3, r3, #2
 8011ba8:	440b      	add	r3, r1
 8011baa:	3308      	adds	r3, #8
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	4602      	mov	r2, r0
 8011bb0:	60da      	str	r2, [r3, #12]
  Ports[PortNum].hdmarx->CNDTR = SIZE_MAX_PD_TRANSACTION_UNCHUNK;
 8011bb2:	79fa      	ldrb	r2, [r7, #7]
 8011bb4:	497d      	ldr	r1, [pc, #500]	@ (8011dac <HW_SignalAttachement+0x294>)
 8011bb6:	4613      	mov	r3, r2
 8011bb8:	011b      	lsls	r3, r3, #4
 8011bba:	1a9b      	subs	r3, r3, r2
 8011bbc:	009b      	lsls	r3, r3, #2
 8011bbe:	440b      	add	r3, r1
 8011bc0:	3308      	adds	r3, #8
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8011bc8:	605a      	str	r2, [r3, #4]
  Ports[PortNum].hdmarx->CCR |= DMA_CCR_EN;
 8011bca:	79fa      	ldrb	r2, [r7, #7]
 8011bcc:	4977      	ldr	r1, [pc, #476]	@ (8011dac <HW_SignalAttachement+0x294>)
 8011bce:	4613      	mov	r3, r2
 8011bd0:	011b      	lsls	r3, r3, #4
 8011bd2:	1a9b      	subs	r3, r3, r2
 8011bd4:	009b      	lsls	r3, r3, #2
 8011bd6:	440b      	add	r3, r1
 8011bd8:	3308      	adds	r3, #8
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	6819      	ldr	r1, [r3, #0]
 8011bde:	79fa      	ldrb	r2, [r7, #7]
 8011be0:	4872      	ldr	r0, [pc, #456]	@ (8011dac <HW_SignalAttachement+0x294>)
 8011be2:	4613      	mov	r3, r2
 8011be4:	011b      	lsls	r3, r3, #4
 8011be6:	1a9b      	subs	r3, r3, r2
 8011be8:	009b      	lsls	r3, r3, #2
 8011bea:	4403      	add	r3, r0
 8011bec:	3308      	adds	r3, #8
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	f041 0201 	orr.w	r2, r1, #1
 8011bf4:	601a      	str	r2, [r3, #0]

  /* Set the TX dma only UCPD address */
  _temp = (uint32_t)&Ports[PortNum].husbpd->TXDR;
 8011bf6:	79fa      	ldrb	r2, [r7, #7]
 8011bf8:	496c      	ldr	r1, [pc, #432]	@ (8011dac <HW_SignalAttachement+0x294>)
 8011bfa:	4613      	mov	r3, r2
 8011bfc:	011b      	lsls	r3, r3, #4
 8011bfe:	1a9b      	subs	r3, r3, r2
 8011c00:	009b      	lsls	r3, r3, #2
 8011c02:	440b      	add	r3, r1
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	3324      	adds	r3, #36	@ 0x24
 8011c08:	60fb      	str	r3, [r7, #12]
  Ports[PortNum].hdmatx->CPAR = _temp;
 8011c0a:	79fa      	ldrb	r2, [r7, #7]
 8011c0c:	4967      	ldr	r1, [pc, #412]	@ (8011dac <HW_SignalAttachement+0x294>)
 8011c0e:	4613      	mov	r3, r2
 8011c10:	011b      	lsls	r3, r3, #4
 8011c12:	1a9b      	subs	r3, r3, r2
 8011c14:	009b      	lsls	r3, r3, #2
 8011c16:	440b      	add	r3, r1
 8011c18:	3304      	adds	r3, #4
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	68fa      	ldr	r2, [r7, #12]
 8011c1e:	609a      	str	r2, [r3, #8]
  /* Disabled non Rd line set CC line enable */
#define INTERRUPT_MASK  UCPD_IMR_TXMSGDISCIE | UCPD_IMR_TXMSGSENTIE | UCPD_IMR_HRSTDISCIE  | UCPD_IMR_HRSTSENTIE |  \
  UCPD_IMR_TXMSGABTIE  | UCPD_IMR_TXUNDIE     | UCPD_IMR_RXORDDETIE  | UCPD_IMR_RXHRSTDETIE | \
  UCPD_IMR_RXOVRIE     | UCPD_IMR_RXMSGENDIE

  MODIFY_REG(Ports[PortNum].husbpd->IMR, INTERRUPT_MASK, INTERRUPT_MASK);
 8011c20:	79fa      	ldrb	r2, [r7, #7]
 8011c22:	4962      	ldr	r1, [pc, #392]	@ (8011dac <HW_SignalAttachement+0x294>)
 8011c24:	4613      	mov	r3, r2
 8011c26:	011b      	lsls	r3, r3, #4
 8011c28:	1a9b      	subs	r3, r3, r2
 8011c2a:	009b      	lsls	r3, r3, #2
 8011c2c:	440b      	add	r3, r1
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	6919      	ldr	r1, [r3, #16]
 8011c32:	79fa      	ldrb	r2, [r7, #7]
 8011c34:	485d      	ldr	r0, [pc, #372]	@ (8011dac <HW_SignalAttachement+0x294>)
 8011c36:	4613      	mov	r3, r2
 8011c38:	011b      	lsls	r3, r3, #4
 8011c3a:	1a9b      	subs	r3, r3, r2
 8011c3c:	009b      	lsls	r3, r3, #2
 8011c3e:	4403      	add	r3, r0
 8011c40:	681a      	ldr	r2, [r3, #0]
 8011c42:	f441 53f3 	orr.w	r3, r1, #7776	@ 0x1e60
 8011c46:	f043 031e 	orr.w	r3, r3, #30
 8011c4a:	6113      	str	r3, [r2, #16]
#endif /* !USBPDCORE_LIB_NO_PD */

  /* Handle CC enable */
  Ports[PortNum].CCx = cc;
 8011c4c:	79fa      	ldrb	r2, [r7, #7]
 8011c4e:	4957      	ldr	r1, [pc, #348]	@ (8011dac <HW_SignalAttachement+0x294>)
 8011c50:	4613      	mov	r3, r2
 8011c52:	011b      	lsls	r3, r3, #4
 8011c54:	1a9b      	subs	r3, r3, r2
 8011c56:	009b      	lsls	r3, r3, #2
 8011c58:	440b      	add	r3, r1
 8011c5a:	3334      	adds	r3, #52	@ 0x34
 8011c5c:	683a      	ldr	r2, [r7, #0]
 8011c5e:	601a      	str	r2, [r3, #0]

#if !defined(USBPDCORE_LIB_NO_PD)
  /* Set CC pin for PD message */
  LL_UCPD_SetCCPin(Ports[PortNum].husbpd, (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCPIN_CC1 : LL_UCPD_CCPIN_CC2);
 8011c60:	79fa      	ldrb	r2, [r7, #7]
 8011c62:	4952      	ldr	r1, [pc, #328]	@ (8011dac <HW_SignalAttachement+0x294>)
 8011c64:	4613      	mov	r3, r2
 8011c66:	011b      	lsls	r3, r3, #4
 8011c68:	1a9b      	subs	r3, r3, r2
 8011c6a:	009b      	lsls	r3, r3, #2
 8011c6c:	440b      	add	r3, r1
 8011c6e:	6818      	ldr	r0, [r3, #0]
 8011c70:	79fa      	ldrb	r2, [r7, #7]
 8011c72:	494e      	ldr	r1, [pc, #312]	@ (8011dac <HW_SignalAttachement+0x294>)
 8011c74:	4613      	mov	r3, r2
 8011c76:	011b      	lsls	r3, r3, #4
 8011c78:	1a9b      	subs	r3, r3, r2
 8011c7a:	009b      	lsls	r3, r3, #2
 8011c7c:	440b      	add	r3, r1
 8011c7e:	3334      	adds	r3, #52	@ 0x34
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	2b01      	cmp	r3, #1
 8011c84:	d101      	bne.n	8011c8a <HW_SignalAttachement+0x172>
 8011c86:	2300      	movs	r3, #0
 8011c88:	e000      	b.n	8011c8c <HW_SignalAttachement+0x174>
 8011c8a:	2340      	movs	r3, #64	@ 0x40
 8011c8c:	4619      	mov	r1, r3
 8011c8e:	f7ff fb19 	bl	80112c4 <LL_UCPD_SetCCPin>
#if defined(_VCONN_SUPPORT)
  /* Initialize Vconn management */
  (void)BSP_USBPD_PWR_VCONNInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */

  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 8011c92:	79fa      	ldrb	r2, [r7, #7]
 8011c94:	4945      	ldr	r1, [pc, #276]	@ (8011dac <HW_SignalAttachement+0x294>)
 8011c96:	4613      	mov	r3, r2
 8011c98:	011b      	lsls	r3, r3, #4
 8011c9a:	1a9b      	subs	r3, r3, r2
 8011c9c:	009b      	lsls	r3, r3, #2
 8011c9e:	440b      	add	r3, r1
 8011ca0:	330c      	adds	r3, #12
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	7a1b      	ldrb	r3, [r3, #8]
 8011ca6:	f003 0302 	and.w	r3, r3, #2
 8011caa:	b2db      	uxtb	r3, r3
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d031      	beq.n	8011d14 <HW_SignalAttachement+0x1fc>
  {
    /* Set GPIO to allow the FRS TX handling */
    USBPD_HW_SetFRSSignalling(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
 8011cb0:	79fa      	ldrb	r2, [r7, #7]
 8011cb2:	493e      	ldr	r1, [pc, #248]	@ (8011dac <HW_SignalAttachement+0x294>)
 8011cb4:	4613      	mov	r3, r2
 8011cb6:	011b      	lsls	r3, r3, #4
 8011cb8:	1a9b      	subs	r3, r3, r2
 8011cba:	009b      	lsls	r3, r3, #2
 8011cbc:	440b      	add	r3, r1
 8011cbe:	3334      	adds	r3, #52	@ 0x34
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	2b01      	cmp	r3, #1
 8011cc4:	d101      	bne.n	8011cca <HW_SignalAttachement+0x1b2>
 8011cc6:	2201      	movs	r2, #1
 8011cc8:	e000      	b.n	8011ccc <HW_SignalAttachement+0x1b4>
 8011cca:	2202      	movs	r2, #2
 8011ccc:	79fb      	ldrb	r3, [r7, #7]
 8011cce:	4611      	mov	r1, r2
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	f7fe fdc0 	bl	8010856 <USBPD_HW_SetFRSSignalling>
    /* Enable FRS RX */
    LL_UCPD_FRSDetectionEnable(Ports[PortNum].husbpd);
 8011cd6:	79fa      	ldrb	r2, [r7, #7]
 8011cd8:	4934      	ldr	r1, [pc, #208]	@ (8011dac <HW_SignalAttachement+0x294>)
 8011cda:	4613      	mov	r3, r2
 8011cdc:	011b      	lsls	r3, r3, #4
 8011cde:	1a9b      	subs	r3, r3, r2
 8011ce0:	009b      	lsls	r3, r3, #2
 8011ce2:	440b      	add	r3, r1
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	f7ff fa86 	bl	80111f8 <LL_UCPD_FRSDetectionEnable>
    Ports[PortNum].husbpd->IMR |= UCPD_IMR_FRSEVTIE;
 8011cec:	79fa      	ldrb	r2, [r7, #7]
 8011cee:	492f      	ldr	r1, [pc, #188]	@ (8011dac <HW_SignalAttachement+0x294>)
 8011cf0:	4613      	mov	r3, r2
 8011cf2:	011b      	lsls	r3, r3, #4
 8011cf4:	1a9b      	subs	r3, r3, r2
 8011cf6:	009b      	lsls	r3, r3, #2
 8011cf8:	440b      	add	r3, r1
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	6919      	ldr	r1, [r3, #16]
 8011cfe:	79fa      	ldrb	r2, [r7, #7]
 8011d00:	482a      	ldr	r0, [pc, #168]	@ (8011dac <HW_SignalAttachement+0x294>)
 8011d02:	4613      	mov	r3, r2
 8011d04:	011b      	lsls	r3, r3, #4
 8011d06:	1a9b      	subs	r3, r3, r2
 8011d08:	009b      	lsls	r3, r3, #2
 8011d0a:	4403      	add	r3, r0
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	f441 1280 	orr.w	r2, r1, #1048576	@ 0x100000
 8011d12:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Resistor on Vconn PIN */
  if (Ports[PortNum].CCx == CC1)
 8011d14:	79fa      	ldrb	r2, [r7, #7]
 8011d16:	4925      	ldr	r1, [pc, #148]	@ (8011dac <HW_SignalAttachement+0x294>)
 8011d18:	4613      	mov	r3, r2
 8011d1a:	011b      	lsls	r3, r3, #4
 8011d1c:	1a9b      	subs	r3, r3, r2
 8011d1e:	009b      	lsls	r3, r3, #2
 8011d20:	440b      	add	r3, r1
 8011d22:	3334      	adds	r3, #52	@ 0x34
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	2b01      	cmp	r3, #1
 8011d28:	d10d      	bne.n	8011d46 <HW_SignalAttachement+0x22e>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1);
 8011d2a:	79fa      	ldrb	r2, [r7, #7]
 8011d2c:	491f      	ldr	r1, [pc, #124]	@ (8011dac <HW_SignalAttachement+0x294>)
 8011d2e:	4613      	mov	r3, r2
 8011d30:	011b      	lsls	r3, r3, #4
 8011d32:	1a9b      	subs	r3, r3, r2
 8011d34:	009b      	lsls	r3, r3, #2
 8011d36:	440b      	add	r3, r1
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8011d3e:	4618      	mov	r0, r3
 8011d40:	f7ff fa7a 	bl	8011238 <LL_UCPD_SetccEnable>
 8011d44:	e00c      	b.n	8011d60 <HW_SignalAttachement+0x248>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC2);
 8011d46:	79fa      	ldrb	r2, [r7, #7]
 8011d48:	4918      	ldr	r1, [pc, #96]	@ (8011dac <HW_SignalAttachement+0x294>)
 8011d4a:	4613      	mov	r3, r2
 8011d4c:	011b      	lsls	r3, r3, #4
 8011d4e:	1a9b      	subs	r3, r3, r2
 8011d50:	009b      	lsls	r3, r3, #2
 8011d52:	440b      	add	r3, r1
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	f7ff fa6c 	bl	8011238 <LL_UCPD_SetccEnable>
  }

  /* Prepare the rx processing */
  LL_UCPD_SetRxMode(Ports[PortNum].husbpd, LL_UCPD_RXMODE_NORMAL);
 8011d60:	79fa      	ldrb	r2, [r7, #7]
 8011d62:	4912      	ldr	r1, [pc, #72]	@ (8011dac <HW_SignalAttachement+0x294>)
 8011d64:	4613      	mov	r3, r2
 8011d66:	011b      	lsls	r3, r3, #4
 8011d68:	1a9b      	subs	r3, r3, r2
 8011d6a:	009b      	lsls	r3, r3, #2
 8011d6c:	440b      	add	r3, r1
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	2100      	movs	r1, #0
 8011d72:	4618      	mov	r0, r3
 8011d74:	f7ff fad9 	bl	801132a <LL_UCPD_SetRxMode>
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
 8011d78:	79fa      	ldrb	r2, [r7, #7]
 8011d7a:	490c      	ldr	r1, [pc, #48]	@ (8011dac <HW_SignalAttachement+0x294>)
 8011d7c:	4613      	mov	r3, r2
 8011d7e:	011b      	lsls	r3, r3, #4
 8011d80:	1a9b      	subs	r3, r3, r2
 8011d82:	009b      	lsls	r3, r3, #2
 8011d84:	440b      	add	r3, r1
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	4618      	mov	r0, r3
 8011d8a:	f7ff fb14 	bl	80113b6 <LL_UCPD_RxDMAEnable>
  LL_UCPD_TxDMAEnable(Ports[PortNum].husbpd);
 8011d8e:	79fa      	ldrb	r2, [r7, #7]
 8011d90:	4906      	ldr	r1, [pc, #24]	@ (8011dac <HW_SignalAttachement+0x294>)
 8011d92:	4613      	mov	r3, r2
 8011d94:	011b      	lsls	r3, r3, #4
 8011d96:	1a9b      	subs	r3, r3, r2
 8011d98:	009b      	lsls	r3, r3, #2
 8011d9a:	440b      	add	r3, r1
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	4618      	mov	r0, r3
 8011da0:	f7ff fb29 	bl	80113f6 <LL_UCPD_TxDMAEnable>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 8011da4:	bf00      	nop
 8011da6:	3714      	adds	r7, #20
 8011da8:	46bd      	mov	sp, r7
 8011daa:	bd90      	pop	{r4, r7, pc}
 8011dac:	20000a90 	.word	0x20000a90

08011db0 <HW_SignalDetachment>:


void HW_SignalDetachment(uint8_t PortNum)
{
 8011db0:	b580      	push	{r7, lr}
 8011db2:	b082      	sub	sp, #8
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	4603      	mov	r3, r0
 8011db8:	71fb      	strb	r3, [r7, #7]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* Stop DMA RX/TX */
  LL_UCPD_RxDMADisable(Ports[PortNum].husbpd);
 8011dba:	79fa      	ldrb	r2, [r7, #7]
 8011dbc:	493e      	ldr	r1, [pc, #248]	@ (8011eb8 <HW_SignalDetachment+0x108>)
 8011dbe:	4613      	mov	r3, r2
 8011dc0:	011b      	lsls	r3, r3, #4
 8011dc2:	1a9b      	subs	r3, r3, r2
 8011dc4:	009b      	lsls	r3, r3, #2
 8011dc6:	440b      	add	r3, r1
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	4618      	mov	r0, r3
 8011dcc:	f7ff fb03 	bl	80113d6 <LL_UCPD_RxDMADisable>
  LL_UCPD_TxDMADisable(Ports[PortNum].husbpd);
 8011dd0:	79fa      	ldrb	r2, [r7, #7]
 8011dd2:	4939      	ldr	r1, [pc, #228]	@ (8011eb8 <HW_SignalDetachment+0x108>)
 8011dd4:	4613      	mov	r3, r2
 8011dd6:	011b      	lsls	r3, r3, #4
 8011dd8:	1a9b      	subs	r3, r3, r2
 8011dda:	009b      	lsls	r3, r3, #2
 8011ddc:	440b      	add	r3, r1
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	4618      	mov	r0, r3
 8011de2:	f7ff fb18 	bl	8011416 <LL_UCPD_TxDMADisable>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8011de6:	79fa      	ldrb	r2, [r7, #7]
 8011de8:	4933      	ldr	r1, [pc, #204]	@ (8011eb8 <HW_SignalDetachment+0x108>)
 8011dea:	4613      	mov	r3, r2
 8011dec:	011b      	lsls	r3, r3, #4
 8011dee:	1a9b      	subs	r3, r3, r2
 8011df0:	009b      	lsls	r3, r3, #2
 8011df2:	440b      	add	r3, r1
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	4618      	mov	r0, r3
 8011df8:	f7ff fa87 	bl	801130a <LL_UCPD_RxDisable>

#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Enable only detection interrupt */
  WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
 8011dfc:	79fa      	ldrb	r2, [r7, #7]
 8011dfe:	492e      	ldr	r1, [pc, #184]	@ (8011eb8 <HW_SignalDetachment+0x108>)
 8011e00:	4613      	mov	r3, r2
 8011e02:	011b      	lsls	r3, r3, #4
 8011e04:	1a9b      	subs	r3, r3, r2
 8011e06:	009b      	lsls	r3, r3, #2
 8011e08:	440b      	add	r3, r1
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8011e10:	611a      	str	r2, [r3, #16]
    WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
  }
#endif /* !_DRP */
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

  USBPD_HW_DeInit_DMATxInstance(PortNum);
 8011e12:	79fb      	ldrb	r3, [r7, #7]
 8011e14:	4618      	mov	r0, r3
 8011e16:	f7fe fd13 	bl	8010840 <USBPD_HW_DeInit_DMATxInstance>
  USBPD_HW_DeInit_DMARxInstance(PortNum);
 8011e1a:	79fb      	ldrb	r3, [r7, #7]
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	f7fe fccf 	bl	80107c0 <USBPD_HW_DeInit_DMARxInstance>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8011e22:	79fa      	ldrb	r2, [r7, #7]
 8011e24:	4924      	ldr	r1, [pc, #144]	@ (8011eb8 <HW_SignalDetachment+0x108>)
 8011e26:	4613      	mov	r3, r2
 8011e28:	011b      	lsls	r3, r3, #4
 8011e2a:	1a9b      	subs	r3, r3, r2
 8011e2c:	009b      	lsls	r3, r3, #2
 8011e2e:	440b      	add	r3, r1
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8011e36:	4618      	mov	r0, r3
 8011e38:	f7ff f9fe 	bl	8011238 <LL_UCPD_SetccEnable>

  if (USBPD_PORTPOWERROLE_SNK == Ports[PortNum].params->PE_PowerRole)
 8011e3c:	79fa      	ldrb	r2, [r7, #7]
 8011e3e:	491e      	ldr	r1, [pc, #120]	@ (8011eb8 <HW_SignalDetachment+0x108>)
 8011e40:	4613      	mov	r3, r2
 8011e42:	011b      	lsls	r3, r3, #4
 8011e44:	1a9b      	subs	r3, r3, r2
 8011e46:	009b      	lsls	r3, r3, #2
 8011e48:	440b      	add	r3, r1
 8011e4a:	3310      	adds	r3, #16
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	781b      	ldrb	r3, [r3, #0]
 8011e50:	f003 0304 	and.w	r3, r3, #4
 8011e54:	b2db      	uxtb	r3, r3
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d103      	bne.n	8011e62 <HW_SignalDetachment+0xb2>
#if defined(_VCONN_SUPPORT)
    /* DeInitialize Vconn management */
    (void)BSP_USBPD_PWR_VCONNDeInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */
    /* DeInitialise VBUS power */
    (void)BSP_USBPD_PWR_VBUSDeInit(PortNum);
 8011e5a:	79fb      	ldrb	r3, [r7, #7]
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	f003 fdd7 	bl	8015a10 <BSP_USBPD_PWR_VBUSDeInit>
  }

  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 8011e62:	79fa      	ldrb	r2, [r7, #7]
 8011e64:	4914      	ldr	r1, [pc, #80]	@ (8011eb8 <HW_SignalDetachment+0x108>)
 8011e66:	4613      	mov	r3, r2
 8011e68:	011b      	lsls	r3, r3, #4
 8011e6a:	1a9b      	subs	r3, r3, r2
 8011e6c:	009b      	lsls	r3, r3, #2
 8011e6e:	440b      	add	r3, r1
 8011e70:	330c      	adds	r3, #12
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	7a1b      	ldrb	r3, [r3, #8]
 8011e76:	f003 0302 	and.w	r3, r3, #2
 8011e7a:	b2db      	uxtb	r3, r3
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d00a      	beq.n	8011e96 <HW_SignalDetachment+0xe6>
  {
    /* Set GPIO to disallow the FRS RX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 8011e80:	79fa      	ldrb	r2, [r7, #7]
 8011e82:	490d      	ldr	r1, [pc, #52]	@ (8011eb8 <HW_SignalDetachment+0x108>)
 8011e84:	4613      	mov	r3, r2
 8011e86:	011b      	lsls	r3, r3, #4
 8011e88:	1a9b      	subs	r3, r3, r2
 8011e8a:	009b      	lsls	r3, r3, #2
 8011e8c:	440b      	add	r3, r1
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	4618      	mov	r0, r3
 8011e92:	f7ff f9c1 	bl	8011218 <LL_UCPD_FRSDetectionDisable>
  }

#endif /* !USBPDCORE_LIB_NO_PD */
  Ports[PortNum].CCx = CCNONE;
 8011e96:	79fa      	ldrb	r2, [r7, #7]
 8011e98:	4907      	ldr	r1, [pc, #28]	@ (8011eb8 <HW_SignalDetachment+0x108>)
 8011e9a:	4613      	mov	r3, r2
 8011e9c:	011b      	lsls	r3, r3, #4
 8011e9e:	1a9b      	subs	r3, r3, r2
 8011ea0:	009b      	lsls	r3, r3, #2
 8011ea2:	440b      	add	r3, r1
 8011ea4:	3334      	adds	r3, #52	@ 0x34
 8011ea6:	2200      	movs	r2, #0
 8011ea8:	601a      	str	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* DeInit timer to detect the reception of goodCRC */
  USBPD_TIM_DeInit();
 8011eaa:	f000 fabd 	bl	8012428 <USBPD_TIM_DeInit>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 8011eae:	bf00      	nop
 8011eb0:	3708      	adds	r7, #8
 8011eb2:	46bd      	mov	sp, r7
 8011eb4:	bd80      	pop	{r7, pc}
 8011eb6:	bf00      	nop
 8011eb8:	20000a90 	.word	0x20000a90

08011ebc <USBPD_HW_IF_SetResistor_SinkTxNG>:
  * @brief  Set resistors to SinkTxNG
  * @param  PortNum Port
  * @retval None
  */
void USBPD_HW_IF_SetResistor_SinkTxNG(uint8_t PortNum)
{
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	b082      	sub	sp, #8
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	4603      	mov	r3, r0
 8011ec4:	71fb      	strb	r3, [r7, #7]
  /* Set the resistor SinkTxNG 1.5A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 8011ec6:	79fa      	ldrb	r2, [r7, #7]
 8011ec8:	4907      	ldr	r1, [pc, #28]	@ (8011ee8 <USBPD_HW_IF_SetResistor_SinkTxNG+0x2c>)
 8011eca:	4613      	mov	r3, r2
 8011ecc:	011b      	lsls	r3, r3, #4
 8011ece:	1a9b      	subs	r3, r3, r2
 8011ed0:	009b      	lsls	r3, r3, #2
 8011ed2:	440b      	add	r3, r1
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011eda:	4618      	mov	r0, r3
 8011edc:	f7ff f9df 	bl	801129e <LL_UCPD_SetRpResistor>
}
 8011ee0:	bf00      	nop
 8011ee2:	3708      	adds	r7, #8
 8011ee4:	46bd      	mov	sp, r7
 8011ee6:	bd80      	pop	{r7, pc}
 8011ee8:	20000a90 	.word	0x20000a90

08011eec <USBPD_HW_IF_SetResistor_SinkTxOK>:
  * @brief  Set resistors to SinkTxOk
  * @param  PortNum Port
  * @retval None
  */
void USBPD_HW_IF_SetResistor_SinkTxOK(uint8_t PortNum)
{
 8011eec:	b580      	push	{r7, lr}
 8011eee:	b082      	sub	sp, #8
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	4603      	mov	r3, r0
 8011ef4:	71fb      	strb	r3, [r7, #7]
  /* Set the resistor SinkTxNG 3.0A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 8011ef6:	79fa      	ldrb	r2, [r7, #7]
 8011ef8:	4907      	ldr	r1, [pc, #28]	@ (8011f18 <USBPD_HW_IF_SetResistor_SinkTxOK+0x2c>)
 8011efa:	4613      	mov	r3, r2
 8011efc:	011b      	lsls	r3, r3, #4
 8011efe:	1a9b      	subs	r3, r3, r2
 8011f00:	009b      	lsls	r3, r3, #2
 8011f02:	440b      	add	r3, r1
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	f7ff f9c7 	bl	801129e <LL_UCPD_SetRpResistor>
}
 8011f10:	bf00      	nop
 8011f12:	3708      	adds	r7, #8
 8011f14:	46bd      	mov	sp, r7
 8011f16:	bd80      	pop	{r7, pc}
 8011f18:	20000a90 	.word	0x20000a90

08011f1c <HW_IF_PWR_GetVoltage>:
  UNUSED(voltage);
  return USBPD_OK;
}

uint16_t HW_IF_PWR_GetVoltage(uint8_t PortNum)
{
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b084      	sub	sp, #16
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	4603      	mov	r3, r0
 8011f24:	71fb      	strb	r3, [r7, #7]
  uint32_t _voltage;
  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 8011f26:	79fb      	ldrb	r3, [r7, #7]
 8011f28:	f107 020c 	add.w	r2, r7, #12
 8011f2c:	4611      	mov	r1, r2
 8011f2e:	4618      	mov	r0, r3
 8011f30:	f003 fd82 	bl	8015a38 <BSP_USBPD_PWR_VBUSGetVoltage>
  return (uint16_t)_voltage;
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	b29b      	uxth	r3, r3
}
 8011f38:	4618      	mov	r0, r3
 8011f3a:	3710      	adds	r7, #16
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	bd80      	pop	{r7, pc}

08011f40 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8011f40:	b480      	push	{r7}
 8011f42:	b085      	sub	sp, #20
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8011f48:	4b08      	ldr	r3, [pc, #32]	@ (8011f6c <LL_APB2_GRP1_EnableClock+0x2c>)
 8011f4a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8011f4c:	4907      	ldr	r1, [pc, #28]	@ (8011f6c <LL_APB2_GRP1_EnableClock+0x2c>)
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	4313      	orrs	r3, r2
 8011f52:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8011f54:	4b05      	ldr	r3, [pc, #20]	@ (8011f6c <LL_APB2_GRP1_EnableClock+0x2c>)
 8011f56:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	4013      	ands	r3, r2
 8011f5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011f5e:	68fb      	ldr	r3, [r7, #12]
}
 8011f60:	bf00      	nop
 8011f62:	3714      	adds	r7, #20
 8011f64:	46bd      	mov	sp, r7
 8011f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f6a:	4770      	bx	lr
 8011f6c:	40021000 	.word	0x40021000

08011f70 <LL_APB2_GRP1_DisableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8011f70:	b480      	push	{r7}
 8011f72:	b083      	sub	sp, #12
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8011f78:	4b06      	ldr	r3, [pc, #24]	@ (8011f94 <LL_APB2_GRP1_DisableClock+0x24>)
 8011f7a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	43db      	mvns	r3, r3
 8011f80:	4904      	ldr	r1, [pc, #16]	@ (8011f94 <LL_APB2_GRP1_DisableClock+0x24>)
 8011f82:	4013      	ands	r3, r2
 8011f84:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8011f86:	bf00      	nop
 8011f88:	370c      	adds	r7, #12
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f90:	4770      	bx	lr
 8011f92:	bf00      	nop
 8011f94:	40021000 	.word	0x40021000

08011f98 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8011f98:	b480      	push	{r7}
 8011f9a:	b083      	sub	sp, #12
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	f043 0201 	orr.w	r2, r3, #1
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	601a      	str	r2, [r3, #0]
}
 8011fac:	bf00      	nop
 8011fae:	370c      	adds	r7, #12
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb6:	4770      	bx	lr

08011fb8 <LL_TIM_SetCounterMode>:
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
{
 8011fb8:	b480      	push	{r7}
 8011fba:	b083      	sub	sp, #12
 8011fbc:	af00      	add	r7, sp, #0
 8011fbe:	6078      	str	r0, [r7, #4]
 8011fc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011fca:	683b      	ldr	r3, [r7, #0]
 8011fcc:	431a      	orrs	r2, r3
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	601a      	str	r2, [r3, #0]
}
 8011fd2:	bf00      	nop
 8011fd4:	370c      	adds	r7, #12
 8011fd6:	46bd      	mov	sp, r7
 8011fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fdc:	4770      	bx	lr

08011fde <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8011fde:	b480      	push	{r7}
 8011fe0:	b083      	sub	sp, #12
 8011fe2:	af00      	add	r7, sp, #0
 8011fe4:	6078      	str	r0, [r7, #4]
 8011fe6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	683a      	ldr	r2, [r7, #0]
 8011fec:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8011fee:	bf00      	nop
 8011ff0:	370c      	adds	r7, #12
 8011ff2:	46bd      	mov	sp, r7
 8011ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff8:	4770      	bx	lr

08011ffa <LL_TIM_GetPrescaler>:
  * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
  * @param  TIMx Timer instance
  * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
  */
__STATIC_INLINE uint32_t LL_TIM_GetPrescaler(const TIM_TypeDef *TIMx)
{
 8011ffa:	b480      	push	{r7}
 8011ffc:	b083      	sub	sp, #12
 8011ffe:	af00      	add	r7, sp, #0
 8012000:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->PSC));
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8012006:	4618      	mov	r0, r3
 8012008:	370c      	adds	r7, #12
 801200a:	46bd      	mov	sp, r7
 801200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012010:	4770      	bx	lr

08012012 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8012012:	b480      	push	{r7}
 8012014:	b083      	sub	sp, #12
 8012016:	af00      	add	r7, sp, #0
 8012018:	6078      	str	r0, [r7, #4]
 801201a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	683a      	ldr	r2, [r7, #0]
 8012020:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8012022:	bf00      	nop
 8012024:	370c      	adds	r7, #12
 8012026:	46bd      	mov	sp, r7
 8012028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801202c:	4770      	bx	lr
	...

08012030 <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_PULSE_ON_COMPARE   (for channel 3 or channel 4 only)
  *         @arg @ref LL_TIM_OCMODE_DIRECTION_OUTPUT   (for channel 3 or channel 4 only)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 8012030:	b480      	push	{r7}
 8012032:	b087      	sub	sp, #28
 8012034:	af00      	add	r7, sp, #0
 8012036:	60f8      	str	r0, [r7, #12]
 8012038:	60b9      	str	r1, [r7, #8]
 801203a:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 801203c:	68bb      	ldr	r3, [r7, #8]
 801203e:	2b01      	cmp	r3, #1
 8012040:	d02e      	beq.n	80120a0 <LL_TIM_OC_SetMode+0x70>
 8012042:	68bb      	ldr	r3, [r7, #8]
 8012044:	2b04      	cmp	r3, #4
 8012046:	d029      	beq.n	801209c <LL_TIM_OC_SetMode+0x6c>
 8012048:	68bb      	ldr	r3, [r7, #8]
 801204a:	2b10      	cmp	r3, #16
 801204c:	d024      	beq.n	8012098 <LL_TIM_OC_SetMode+0x68>
 801204e:	68bb      	ldr	r3, [r7, #8]
 8012050:	2b40      	cmp	r3, #64	@ 0x40
 8012052:	d01f      	beq.n	8012094 <LL_TIM_OC_SetMode+0x64>
 8012054:	68bb      	ldr	r3, [r7, #8]
 8012056:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801205a:	d019      	beq.n	8012090 <LL_TIM_OC_SetMode+0x60>
 801205c:	68bb      	ldr	r3, [r7, #8]
 801205e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012062:	d013      	beq.n	801208c <LL_TIM_OC_SetMode+0x5c>
 8012064:	68bb      	ldr	r3, [r7, #8]
 8012066:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801206a:	d00d      	beq.n	8012088 <LL_TIM_OC_SetMode+0x58>
 801206c:	68bb      	ldr	r3, [r7, #8]
 801206e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012072:	d007      	beq.n	8012084 <LL_TIM_OC_SetMode+0x54>
 8012074:	68bb      	ldr	r3, [r7, #8]
 8012076:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801207a:	d101      	bne.n	8012080 <LL_TIM_OC_SetMode+0x50>
 801207c:	2308      	movs	r3, #8
 801207e:	e010      	b.n	80120a2 <LL_TIM_OC_SetMode+0x72>
 8012080:	2309      	movs	r3, #9
 8012082:	e00e      	b.n	80120a2 <LL_TIM_OC_SetMode+0x72>
 8012084:	2307      	movs	r3, #7
 8012086:	e00c      	b.n	80120a2 <LL_TIM_OC_SetMode+0x72>
 8012088:	2306      	movs	r3, #6
 801208a:	e00a      	b.n	80120a2 <LL_TIM_OC_SetMode+0x72>
 801208c:	2305      	movs	r3, #5
 801208e:	e008      	b.n	80120a2 <LL_TIM_OC_SetMode+0x72>
 8012090:	2304      	movs	r3, #4
 8012092:	e006      	b.n	80120a2 <LL_TIM_OC_SetMode+0x72>
 8012094:	2303      	movs	r3, #3
 8012096:	e004      	b.n	80120a2 <LL_TIM_OC_SetMode+0x72>
 8012098:	2302      	movs	r3, #2
 801209a:	e002      	b.n	80120a2 <LL_TIM_OC_SetMode+0x72>
 801209c:	2301      	movs	r3, #1
 801209e:	e000      	b.n	80120a2 <LL_TIM_OC_SetMode+0x72>
 80120a0:	2300      	movs	r3, #0
 80120a2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	3318      	adds	r3, #24
 80120a8:	4619      	mov	r1, r3
 80120aa:	7dfb      	ldrb	r3, [r7, #23]
 80120ac:	4a0e      	ldr	r2, [pc, #56]	@ (80120e8 <LL_TIM_OC_SetMode+0xb8>)
 80120ae:	5cd3      	ldrb	r3, [r2, r3]
 80120b0:	440b      	add	r3, r1
 80120b2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80120b4:	693b      	ldr	r3, [r7, #16]
 80120b6:	681a      	ldr	r2, [r3, #0]
 80120b8:	7dfb      	ldrb	r3, [r7, #23]
 80120ba:	490c      	ldr	r1, [pc, #48]	@ (80120ec <LL_TIM_OC_SetMode+0xbc>)
 80120bc:	5ccb      	ldrb	r3, [r1, r3]
 80120be:	4619      	mov	r1, r3
 80120c0:	4b0b      	ldr	r3, [pc, #44]	@ (80120f0 <LL_TIM_OC_SetMode+0xc0>)
 80120c2:	408b      	lsls	r3, r1
 80120c4:	43db      	mvns	r3, r3
 80120c6:	401a      	ands	r2, r3
 80120c8:	7dfb      	ldrb	r3, [r7, #23]
 80120ca:	4908      	ldr	r1, [pc, #32]	@ (80120ec <LL_TIM_OC_SetMode+0xbc>)
 80120cc:	5ccb      	ldrb	r3, [r1, r3]
 80120ce:	4619      	mov	r1, r3
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	408b      	lsls	r3, r1
 80120d4:	431a      	orrs	r2, r3
 80120d6:	693b      	ldr	r3, [r7, #16]
 80120d8:	601a      	str	r2, [r3, #0]
}
 80120da:	bf00      	nop
 80120dc:	371c      	adds	r7, #28
 80120de:	46bd      	mov	sp, r7
 80120e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e4:	4770      	bx	lr
 80120e6:	bf00      	nop
 80120e8:	08018834 	.word	0x08018834
 80120ec:	08018840 	.word	0x08018840
 80120f0:	00010073 	.word	0x00010073

080120f4 <LL_TIM_OC_SetPolarity>:
  *         @arg @ref LL_TIM_OCPOLARITY_HIGH
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
 80120f4:	b480      	push	{r7}
 80120f6:	b087      	sub	sp, #28
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	60f8      	str	r0, [r7, #12]
 80120fc:	60b9      	str	r1, [r7, #8]
 80120fe:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8012100:	68bb      	ldr	r3, [r7, #8]
 8012102:	2b01      	cmp	r3, #1
 8012104:	d02e      	beq.n	8012164 <LL_TIM_OC_SetPolarity+0x70>
 8012106:	68bb      	ldr	r3, [r7, #8]
 8012108:	2b04      	cmp	r3, #4
 801210a:	d029      	beq.n	8012160 <LL_TIM_OC_SetPolarity+0x6c>
 801210c:	68bb      	ldr	r3, [r7, #8]
 801210e:	2b10      	cmp	r3, #16
 8012110:	d024      	beq.n	801215c <LL_TIM_OC_SetPolarity+0x68>
 8012112:	68bb      	ldr	r3, [r7, #8]
 8012114:	2b40      	cmp	r3, #64	@ 0x40
 8012116:	d01f      	beq.n	8012158 <LL_TIM_OC_SetPolarity+0x64>
 8012118:	68bb      	ldr	r3, [r7, #8]
 801211a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801211e:	d019      	beq.n	8012154 <LL_TIM_OC_SetPolarity+0x60>
 8012120:	68bb      	ldr	r3, [r7, #8]
 8012122:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012126:	d013      	beq.n	8012150 <LL_TIM_OC_SetPolarity+0x5c>
 8012128:	68bb      	ldr	r3, [r7, #8]
 801212a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801212e:	d00d      	beq.n	801214c <LL_TIM_OC_SetPolarity+0x58>
 8012130:	68bb      	ldr	r3, [r7, #8]
 8012132:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012136:	d007      	beq.n	8012148 <LL_TIM_OC_SetPolarity+0x54>
 8012138:	68bb      	ldr	r3, [r7, #8]
 801213a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801213e:	d101      	bne.n	8012144 <LL_TIM_OC_SetPolarity+0x50>
 8012140:	2308      	movs	r3, #8
 8012142:	e010      	b.n	8012166 <LL_TIM_OC_SetPolarity+0x72>
 8012144:	2309      	movs	r3, #9
 8012146:	e00e      	b.n	8012166 <LL_TIM_OC_SetPolarity+0x72>
 8012148:	2307      	movs	r3, #7
 801214a:	e00c      	b.n	8012166 <LL_TIM_OC_SetPolarity+0x72>
 801214c:	2306      	movs	r3, #6
 801214e:	e00a      	b.n	8012166 <LL_TIM_OC_SetPolarity+0x72>
 8012150:	2305      	movs	r3, #5
 8012152:	e008      	b.n	8012166 <LL_TIM_OC_SetPolarity+0x72>
 8012154:	2304      	movs	r3, #4
 8012156:	e006      	b.n	8012166 <LL_TIM_OC_SetPolarity+0x72>
 8012158:	2303      	movs	r3, #3
 801215a:	e004      	b.n	8012166 <LL_TIM_OC_SetPolarity+0x72>
 801215c:	2302      	movs	r3, #2
 801215e:	e002      	b.n	8012166 <LL_TIM_OC_SetPolarity+0x72>
 8012160:	2301      	movs	r3, #1
 8012162:	e000      	b.n	8012166 <LL_TIM_OC_SetPolarity+0x72>
 8012164:	2300      	movs	r3, #0
 8012166:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	6a1a      	ldr	r2, [r3, #32]
 801216c:	7dfb      	ldrb	r3, [r7, #23]
 801216e:	490b      	ldr	r1, [pc, #44]	@ (801219c <LL_TIM_OC_SetPolarity+0xa8>)
 8012170:	5ccb      	ldrb	r3, [r1, r3]
 8012172:	4619      	mov	r1, r3
 8012174:	2302      	movs	r3, #2
 8012176:	408b      	lsls	r3, r1
 8012178:	43db      	mvns	r3, r3
 801217a:	401a      	ands	r2, r3
 801217c:	7dfb      	ldrb	r3, [r7, #23]
 801217e:	4907      	ldr	r1, [pc, #28]	@ (801219c <LL_TIM_OC_SetPolarity+0xa8>)
 8012180:	5ccb      	ldrb	r3, [r1, r3]
 8012182:	4619      	mov	r1, r3
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	408b      	lsls	r3, r1
 8012188:	431a      	orrs	r2, r3
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	621a      	str	r2, [r3, #32]
}
 801218e:	bf00      	nop
 8012190:	371c      	adds	r7, #28
 8012192:	46bd      	mov	sp, r7
 8012194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012198:	4770      	bx	lr
 801219a:	bf00      	nop
 801219c:	0801884c 	.word	0x0801884c

080121a0 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80121a0:	b480      	push	{r7}
 80121a2:	b083      	sub	sp, #12
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
 80121a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	683a      	ldr	r2, [r7, #0]
 80121ae:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80121b0:	bf00      	nop
 80121b2:	370c      	adds	r7, #12
 80121b4:	46bd      	mov	sp, r7
 80121b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ba:	4770      	bx	lr

080121bc <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80121bc:	b480      	push	{r7}
 80121be:	b083      	sub	sp, #12
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	6078      	str	r0, [r7, #4]
 80121c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	683a      	ldr	r2, [r7, #0]
 80121ca:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80121cc:	bf00      	nop
 80121ce:	370c      	adds	r7, #12
 80121d0:	46bd      	mov	sp, r7
 80121d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d6:	4770      	bx	lr

080121d8 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80121d8:	b480      	push	{r7}
 80121da:	b083      	sub	sp, #12
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
 80121e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	683a      	ldr	r2, [r7, #0]
 80121e6:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80121e8:	bf00      	nop
 80121ea:	370c      	adds	r7, #12
 80121ec:	46bd      	mov	sp, r7
 80121ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f2:	4770      	bx	lr

080121f4 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80121f4:	b480      	push	{r7}
 80121f6:	b083      	sub	sp, #12
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	6078      	str	r0, [r7, #4]
 80121fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	683a      	ldr	r2, [r7, #0]
 8012202:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8012204:	bf00      	nop
 8012206:	370c      	adds	r7, #12
 8012208:	46bd      	mov	sp, r7
 801220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801220e:	4770      	bx	lr

08012210 <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 8012210:	b480      	push	{r7}
 8012212:	b083      	sub	sp, #12
 8012214:	af00      	add	r7, sp, #0
 8012216:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	f06f 0202 	mvn.w	r2, #2
 801221e:	611a      	str	r2, [r3, #16]
}
 8012220:	bf00      	nop
 8012222:	370c      	adds	r7, #12
 8012224:	46bd      	mov	sp, r7
 8012226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801222a:	4770      	bx	lr

0801222c <LL_TIM_IsActiveFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_IsActiveFlag_CC1
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(const TIM_TypeDef *TIMx)
{
 801222c:	b480      	push	{r7}
 801222e:	b083      	sub	sp, #12
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	691b      	ldr	r3, [r3, #16]
 8012238:	f003 0302 	and.w	r3, r3, #2
 801223c:	2b02      	cmp	r3, #2
 801223e:	d101      	bne.n	8012244 <LL_TIM_IsActiveFlag_CC1+0x18>
 8012240:	2301      	movs	r3, #1
 8012242:	e000      	b.n	8012246 <LL_TIM_IsActiveFlag_CC1+0x1a>
 8012244:	2300      	movs	r3, #0
}
 8012246:	4618      	mov	r0, r3
 8012248:	370c      	adds	r7, #12
 801224a:	46bd      	mov	sp, r7
 801224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012250:	4770      	bx	lr

08012252 <LL_TIM_ClearFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_ClearFlag_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC2(TIM_TypeDef *TIMx)
{
 8012252:	b480      	push	{r7}
 8012254:	b083      	sub	sp, #12
 8012256:	af00      	add	r7, sp, #0
 8012258:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	f06f 0204 	mvn.w	r2, #4
 8012260:	611a      	str	r2, [r3, #16]
}
 8012262:	bf00      	nop
 8012264:	370c      	adds	r7, #12
 8012266:	46bd      	mov	sp, r7
 8012268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801226c:	4770      	bx	lr

0801226e <LL_TIM_IsActiveFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_IsActiveFlag_CC2
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC2(const TIM_TypeDef *TIMx)
{
 801226e:	b480      	push	{r7}
 8012270:	b083      	sub	sp, #12
 8012272:	af00      	add	r7, sp, #0
 8012274:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	691b      	ldr	r3, [r3, #16]
 801227a:	f003 0304 	and.w	r3, r3, #4
 801227e:	2b04      	cmp	r3, #4
 8012280:	d101      	bne.n	8012286 <LL_TIM_IsActiveFlag_CC2+0x18>
 8012282:	2301      	movs	r3, #1
 8012284:	e000      	b.n	8012288 <LL_TIM_IsActiveFlag_CC2+0x1a>
 8012286:	2300      	movs	r3, #0
}
 8012288:	4618      	mov	r0, r3
 801228a:	370c      	adds	r7, #12
 801228c:	46bd      	mov	sp, r7
 801228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012292:	4770      	bx	lr

08012294 <LL_TIM_ClearFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_ClearFlag_CC3
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC3(TIM_TypeDef *TIMx)
{
 8012294:	b480      	push	{r7}
 8012296:	b083      	sub	sp, #12
 8012298:	af00      	add	r7, sp, #0
 801229a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	f06f 0208 	mvn.w	r2, #8
 80122a2:	611a      	str	r2, [r3, #16]
}
 80122a4:	bf00      	nop
 80122a6:	370c      	adds	r7, #12
 80122a8:	46bd      	mov	sp, r7
 80122aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ae:	4770      	bx	lr

080122b0 <LL_TIM_IsActiveFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_IsActiveFlag_CC3
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC3(const TIM_TypeDef *TIMx)
{
 80122b0:	b480      	push	{r7}
 80122b2:	b083      	sub	sp, #12
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF)) ? 1UL : 0UL);
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	691b      	ldr	r3, [r3, #16]
 80122bc:	f003 0308 	and.w	r3, r3, #8
 80122c0:	2b08      	cmp	r3, #8
 80122c2:	d101      	bne.n	80122c8 <LL_TIM_IsActiveFlag_CC3+0x18>
 80122c4:	2301      	movs	r3, #1
 80122c6:	e000      	b.n	80122ca <LL_TIM_IsActiveFlag_CC3+0x1a>
 80122c8:	2300      	movs	r3, #0
}
 80122ca:	4618      	mov	r0, r3
 80122cc:	370c      	adds	r7, #12
 80122ce:	46bd      	mov	sp, r7
 80122d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d4:	4770      	bx	lr

080122d6 <LL_TIM_ClearFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_ClearFlag_CC4
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC4(TIM_TypeDef *TIMx)
{
 80122d6:	b480      	push	{r7}
 80122d8:	b083      	sub	sp, #12
 80122da:	af00      	add	r7, sp, #0
 80122dc:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	f06f 0210 	mvn.w	r2, #16
 80122e4:	611a      	str	r2, [r3, #16]
}
 80122e6:	bf00      	nop
 80122e8:	370c      	adds	r7, #12
 80122ea:	46bd      	mov	sp, r7
 80122ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f0:	4770      	bx	lr

080122f2 <LL_TIM_IsActiveFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_IsActiveFlag_CC4
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC4(const TIM_TypeDef *TIMx)
{
 80122f2:	b480      	push	{r7}
 80122f4:	b083      	sub	sp, #12
 80122f6:	af00      	add	r7, sp, #0
 80122f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	691b      	ldr	r3, [r3, #16]
 80122fe:	f003 0310 	and.w	r3, r3, #16
 8012302:	2b10      	cmp	r3, #16
 8012304:	d101      	bne.n	801230a <LL_TIM_IsActiveFlag_CC4+0x18>
 8012306:	2301      	movs	r3, #1
 8012308:	e000      	b.n	801230c <LL_TIM_IsActiveFlag_CC4+0x1a>
 801230a:	2300      	movs	r3, #0
}
 801230c:	4618      	mov	r0, r3
 801230e:	370c      	adds	r7, #12
 8012310:	46bd      	mov	sp, r7
 8012312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012316:	4770      	bx	lr

08012318 <USBPD_TIM_Init>:
/**
  * @brief  Initialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_Init(void)
{
 8012318:	b598      	push	{r3, r4, r7, lr}
 801231a:	af00      	add	r7, sp, #0
  if (0 == timer_initcounter)
 801231c:	4b3d      	ldr	r3, [pc, #244]	@ (8012414 <USBPD_TIM_Init+0xfc>)
 801231e:	f993 3000 	ldrsb.w	r3, [r3]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d16a      	bne.n	80123fc <USBPD_TIM_Init+0xe4>
  {
    TIMX_CLK_ENABLE;
 8012326:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 801232a:	f7ff fe09 	bl	8011f40 <LL_APB2_GRP1_EnableClock>
    /***************************/
    /* Time base configuration */
    /***************************/
    /* Counter mode: select up-counting mode */
    LL_TIM_SetCounterMode(TIMX, LL_TIM_COUNTERMODE_UP);
 801232e:	2100      	movs	r1, #0
 8012330:	4839      	ldr	r0, [pc, #228]	@ (8012418 <USBPD_TIM_Init+0x100>)
 8012332:	f7ff fe41 	bl	8011fb8 <LL_TIM_SetCounterMode>

    /* Set the auto-reload value to have a counter frequency of 100Hz */
    LL_TIM_SetAutoReload(TIMX, __LL_TIM_CALC_ARR(TIMX_CLK_FREQ, LL_TIM_GetPrescaler(TIMX), 100u));
#else
    /* Set the pre-scaler value to have TIMx counter clock equal to 1 MHz */
    LL_TIM_SetPrescaler(TIMX, __LL_TIM_CALC_PSC(SystemCoreClock, 1000000u));
 8012336:	4b39      	ldr	r3, [pc, #228]	@ (801241c <USBPD_TIM_Init+0x104>)
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	4a39      	ldr	r2, [pc, #228]	@ (8012420 <USBPD_TIM_Init+0x108>)
 801233c:	4293      	cmp	r3, r2
 801233e:	d90b      	bls.n	8012358 <USBPD_TIM_Init+0x40>
 8012340:	4b36      	ldr	r3, [pc, #216]	@ (801241c <USBPD_TIM_Init+0x104>)
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	f503 23f4 	add.w	r3, r3, #499712	@ 0x7a000
 8012348:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 801234c:	4a35      	ldr	r2, [pc, #212]	@ (8012424 <USBPD_TIM_Init+0x10c>)
 801234e:	fba2 2303 	umull	r2, r3, r2, r3
 8012352:	0c9b      	lsrs	r3, r3, #18
 8012354:	3b01      	subs	r3, #1
 8012356:	e000      	b.n	801235a <USBPD_TIM_Init+0x42>
 8012358:	2300      	movs	r3, #0
 801235a:	4619      	mov	r1, r3
 801235c:	482e      	ldr	r0, [pc, #184]	@ (8012418 <USBPD_TIM_Init+0x100>)
 801235e:	f7ff fe3e 	bl	8011fde <LL_TIM_SetPrescaler>

    /* Set the auto-reload value to have a counter frequency of 100Hz */
    LL_TIM_SetAutoReload(TIMX, __LL_TIM_CALC_ARR(SystemCoreClock, LL_TIM_GetPrescaler(TIMX), 100u));
 8012362:	4b2e      	ldr	r3, [pc, #184]	@ (801241c <USBPD_TIM_Init+0x104>)
 8012364:	681c      	ldr	r4, [r3, #0]
 8012366:	482c      	ldr	r0, [pc, #176]	@ (8012418 <USBPD_TIM_Init+0x100>)
 8012368:	f7ff fe47 	bl	8011ffa <LL_TIM_GetPrescaler>
 801236c:	4603      	mov	r3, r0
 801236e:	3301      	adds	r3, #1
 8012370:	fbb4 f3f3 	udiv	r3, r4, r3
 8012374:	2b63      	cmp	r3, #99	@ 0x63
 8012376:	d90d      	bls.n	8012394 <USBPD_TIM_Init+0x7c>
 8012378:	4b28      	ldr	r3, [pc, #160]	@ (801241c <USBPD_TIM_Init+0x104>)
 801237a:	681c      	ldr	r4, [r3, #0]
 801237c:	4826      	ldr	r0, [pc, #152]	@ (8012418 <USBPD_TIM_Init+0x100>)
 801237e:	f7ff fe3c 	bl	8011ffa <LL_TIM_GetPrescaler>
 8012382:	4603      	mov	r3, r0
 8012384:	3301      	adds	r3, #1
 8012386:	2264      	movs	r2, #100	@ 0x64
 8012388:	fb02 f303 	mul.w	r3, r2, r3
 801238c:	fbb4 f3f3 	udiv	r3, r4, r3
 8012390:	3b01      	subs	r3, #1
 8012392:	e000      	b.n	8012396 <USBPD_TIM_Init+0x7e>
 8012394:	2300      	movs	r3, #0
 8012396:	4619      	mov	r1, r3
 8012398:	481f      	ldr	r0, [pc, #124]	@ (8012418 <USBPD_TIM_Init+0x100>)
 801239a:	f7ff fe3a 	bl	8012012 <LL_TIM_SetAutoReload>

    /*********************************/
    /* Output waveform configuration */
    /*********************************/
    /* Set output compare mode: TOGGLE */
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCMODE_TOGGLE);
 801239e:	2230      	movs	r2, #48	@ 0x30
 80123a0:	2101      	movs	r1, #1
 80123a2:	481d      	ldr	r0, [pc, #116]	@ (8012418 <USBPD_TIM_Init+0x100>)
 80123a4:	f7ff fe44 	bl	8012030 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCMODE_TOGGLE);
 80123a8:	2230      	movs	r2, #48	@ 0x30
 80123aa:	2110      	movs	r1, #16
 80123ac:	481a      	ldr	r0, [pc, #104]	@ (8012418 <USBPD_TIM_Init+0x100>)
 80123ae:	f7ff fe3f 	bl	8012030 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCMODE_TOGGLE);
 80123b2:	2230      	movs	r2, #48	@ 0x30
 80123b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80123b8:	4817      	ldr	r0, [pc, #92]	@ (8012418 <USBPD_TIM_Init+0x100>)
 80123ba:	f7ff fe39 	bl	8012030 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCMODE_TOGGLE);
 80123be:	2230      	movs	r2, #48	@ 0x30
 80123c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80123c4:	4814      	ldr	r0, [pc, #80]	@ (8012418 <USBPD_TIM_Init+0x100>)
 80123c6:	f7ff fe33 	bl	8012030 <LL_TIM_OC_SetMode>

    /* Set output channel polarity: OC is active high */
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);
 80123ca:	2200      	movs	r2, #0
 80123cc:	2101      	movs	r1, #1
 80123ce:	4812      	ldr	r0, [pc, #72]	@ (8012418 <USBPD_TIM_Init+0x100>)
 80123d0:	f7ff fe90 	bl	80120f4 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCPOLARITY_HIGH);
 80123d4:	2200      	movs	r2, #0
 80123d6:	2110      	movs	r1, #16
 80123d8:	480f      	ldr	r0, [pc, #60]	@ (8012418 <USBPD_TIM_Init+0x100>)
 80123da:	f7ff fe8b 	bl	80120f4 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCPOLARITY_HIGH);
 80123de:	2200      	movs	r2, #0
 80123e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80123e4:	480c      	ldr	r0, [pc, #48]	@ (8012418 <USBPD_TIM_Init+0x100>)
 80123e6:	f7ff fe85 	bl	80120f4 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCPOLARITY_HIGH);
 80123ea:	2200      	movs	r2, #0
 80123ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80123f0:	4809      	ldr	r0, [pc, #36]	@ (8012418 <USBPD_TIM_Init+0x100>)
 80123f2:	f7ff fe7f 	bl	80120f4 <LL_TIM_OC_SetPolarity>

    /* Enable counter */
    LL_TIM_EnableCounter(TIMX);
 80123f6:	4808      	ldr	r0, [pc, #32]	@ (8012418 <USBPD_TIM_Init+0x100>)
 80123f8:	f7ff fdce 	bl	8011f98 <LL_TIM_EnableCounter>
  }

  /* Enable the timer counter */
  timer_initcounter++;
 80123fc:	4b05      	ldr	r3, [pc, #20]	@ (8012414 <USBPD_TIM_Init+0xfc>)
 80123fe:	f993 3000 	ldrsb.w	r3, [r3]
 8012402:	b2db      	uxtb	r3, r3
 8012404:	3301      	adds	r3, #1
 8012406:	b2db      	uxtb	r3, r3
 8012408:	b25a      	sxtb	r2, r3
 801240a:	4b02      	ldr	r3, [pc, #8]	@ (8012414 <USBPD_TIM_Init+0xfc>)
 801240c:	701a      	strb	r2, [r3, #0]
}
 801240e:	bf00      	nop
 8012410:	bd98      	pop	{r3, r4, r7, pc}
 8012412:	bf00      	nop
 8012414:	20000acc 	.word	0x20000acc
 8012418:	40012c00 	.word	0x40012c00
 801241c:	20000004 	.word	0x20000004
 8012420:	000f423f 	.word	0x000f423f
 8012424:	431bde83 	.word	0x431bde83

08012428 <USBPD_TIM_DeInit>:
/**
  * @brief  UnInitialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_DeInit(void)
{
 8012428:	b580      	push	{r7, lr}
 801242a:	af00      	add	r7, sp, #0
  timer_initcounter--;
 801242c:	4b09      	ldr	r3, [pc, #36]	@ (8012454 <USBPD_TIM_DeInit+0x2c>)
 801242e:	f993 3000 	ldrsb.w	r3, [r3]
 8012432:	b2db      	uxtb	r3, r3
 8012434:	3b01      	subs	r3, #1
 8012436:	b2db      	uxtb	r3, r3
 8012438:	b25a      	sxtb	r2, r3
 801243a:	4b06      	ldr	r3, [pc, #24]	@ (8012454 <USBPD_TIM_DeInit+0x2c>)
 801243c:	701a      	strb	r2, [r3, #0]
  if (0 == timer_initcounter)
 801243e:	4b05      	ldr	r3, [pc, #20]	@ (8012454 <USBPD_TIM_DeInit+0x2c>)
 8012440:	f993 3000 	ldrsb.w	r3, [r3]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d103      	bne.n	8012450 <USBPD_TIM_DeInit+0x28>
  {
    TIMX_CLK_DISABLE;
 8012448:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 801244c:	f7ff fd90 	bl	8011f70 <LL_APB2_GRP1_DisableClock>
  }
}
 8012450:	bf00      	nop
 8012452:	bd80      	pop	{r7, pc}
 8012454:	20000acc 	.word	0x20000acc

08012458 <USBPD_TIM_Start>:
  * @param  timer id @TIM_identifier
  * @param  time in us
  * @retval None
  */
void USBPD_TIM_Start(TIM_identifier Id, uint32_t TimeUs)
{
 8012458:	b580      	push	{r7, lr}
 801245a:	b082      	sub	sp, #8
 801245c:	af00      	add	r7, sp, #0
 801245e:	4603      	mov	r3, r0
 8012460:	6039      	str	r1, [r7, #0]
 8012462:	71fb      	strb	r3, [r7, #7]
  /* Positionne l'evenement pour sa detection */
  switch (Id)
 8012464:	79fb      	ldrb	r3, [r7, #7]
 8012466:	2b03      	cmp	r3, #3
 8012468:	d85e      	bhi.n	8012528 <USBPD_TIM_Start+0xd0>
 801246a:	a201      	add	r2, pc, #4	@ (adr r2, 8012470 <USBPD_TIM_Start+0x18>)
 801246c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012470:	08012481 	.word	0x08012481
 8012474:	080124ab 	.word	0x080124ab
 8012478:	080124d5 	.word	0x080124d5
 801247c:	080124ff 	.word	0x080124ff
  {
    case TIM_PORT0_CRC:
      TIMX_CHANNEL1_SETEVENT;
 8012480:	4b2c      	ldr	r3, [pc, #176]	@ (8012534 <USBPD_TIM_Start+0xdc>)
 8012482:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012484:	683b      	ldr	r3, [r7, #0]
 8012486:	441a      	add	r2, r3
 8012488:	4b2b      	ldr	r3, [pc, #172]	@ (8012538 <USBPD_TIM_Start+0xe0>)
 801248a:	fba3 1302 	umull	r1, r3, r3, r2
 801248e:	0b5b      	lsrs	r3, r3, #13
 8012490:	f242 7110 	movw	r1, #10000	@ 0x2710
 8012494:	fb01 f303 	mul.w	r3, r1, r3
 8012498:	1ad3      	subs	r3, r2, r3
 801249a:	4619      	mov	r1, r3
 801249c:	4825      	ldr	r0, [pc, #148]	@ (8012534 <USBPD_TIM_Start+0xdc>)
 801249e:	f7ff fe7f 	bl	80121a0 <LL_TIM_OC_SetCompareCH1>
 80124a2:	4824      	ldr	r0, [pc, #144]	@ (8012534 <USBPD_TIM_Start+0xdc>)
 80124a4:	f7ff feb4 	bl	8012210 <LL_TIM_ClearFlag_CC1>
      break;
 80124a8:	e03f      	b.n	801252a <USBPD_TIM_Start+0xd2>
    case TIM_PORT0_RETRY:
      TIMX_CHANNEL2_SETEVENT;
 80124aa:	4b22      	ldr	r3, [pc, #136]	@ (8012534 <USBPD_TIM_Start+0xdc>)
 80124ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80124ae:	683b      	ldr	r3, [r7, #0]
 80124b0:	441a      	add	r2, r3
 80124b2:	4b21      	ldr	r3, [pc, #132]	@ (8012538 <USBPD_TIM_Start+0xe0>)
 80124b4:	fba3 1302 	umull	r1, r3, r3, r2
 80124b8:	0b5b      	lsrs	r3, r3, #13
 80124ba:	f242 7110 	movw	r1, #10000	@ 0x2710
 80124be:	fb01 f303 	mul.w	r3, r1, r3
 80124c2:	1ad3      	subs	r3, r2, r3
 80124c4:	4619      	mov	r1, r3
 80124c6:	481b      	ldr	r0, [pc, #108]	@ (8012534 <USBPD_TIM_Start+0xdc>)
 80124c8:	f7ff fe78 	bl	80121bc <LL_TIM_OC_SetCompareCH2>
 80124cc:	4819      	ldr	r0, [pc, #100]	@ (8012534 <USBPD_TIM_Start+0xdc>)
 80124ce:	f7ff fec0 	bl	8012252 <LL_TIM_ClearFlag_CC2>
      break;
 80124d2:	e02a      	b.n	801252a <USBPD_TIM_Start+0xd2>
    case TIM_PORT1_CRC:
      TIMX_CHANNEL3_SETEVENT;
 80124d4:	4b17      	ldr	r3, [pc, #92]	@ (8012534 <USBPD_TIM_Start+0xdc>)
 80124d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80124d8:	683b      	ldr	r3, [r7, #0]
 80124da:	441a      	add	r2, r3
 80124dc:	4b16      	ldr	r3, [pc, #88]	@ (8012538 <USBPD_TIM_Start+0xe0>)
 80124de:	fba3 1302 	umull	r1, r3, r3, r2
 80124e2:	0b5b      	lsrs	r3, r3, #13
 80124e4:	f242 7110 	movw	r1, #10000	@ 0x2710
 80124e8:	fb01 f303 	mul.w	r3, r1, r3
 80124ec:	1ad3      	subs	r3, r2, r3
 80124ee:	4619      	mov	r1, r3
 80124f0:	4810      	ldr	r0, [pc, #64]	@ (8012534 <USBPD_TIM_Start+0xdc>)
 80124f2:	f7ff fe71 	bl	80121d8 <LL_TIM_OC_SetCompareCH3>
 80124f6:	480f      	ldr	r0, [pc, #60]	@ (8012534 <USBPD_TIM_Start+0xdc>)
 80124f8:	f7ff fecc 	bl	8012294 <LL_TIM_ClearFlag_CC3>
      break;
 80124fc:	e015      	b.n	801252a <USBPD_TIM_Start+0xd2>
    case TIM_PORT1_RETRY:
      TIMX_CHANNEL4_SETEVENT;
 80124fe:	4b0d      	ldr	r3, [pc, #52]	@ (8012534 <USBPD_TIM_Start+0xdc>)
 8012500:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012502:	683b      	ldr	r3, [r7, #0]
 8012504:	441a      	add	r2, r3
 8012506:	4b0c      	ldr	r3, [pc, #48]	@ (8012538 <USBPD_TIM_Start+0xe0>)
 8012508:	fba3 1302 	umull	r1, r3, r3, r2
 801250c:	0b5b      	lsrs	r3, r3, #13
 801250e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8012512:	fb01 f303 	mul.w	r3, r1, r3
 8012516:	1ad3      	subs	r3, r2, r3
 8012518:	4619      	mov	r1, r3
 801251a:	4806      	ldr	r0, [pc, #24]	@ (8012534 <USBPD_TIM_Start+0xdc>)
 801251c:	f7ff fe6a 	bl	80121f4 <LL_TIM_OC_SetCompareCH4>
 8012520:	4804      	ldr	r0, [pc, #16]	@ (8012534 <USBPD_TIM_Start+0xdc>)
 8012522:	f7ff fed8 	bl	80122d6 <LL_TIM_ClearFlag_CC4>
      break;
 8012526:	e000      	b.n	801252a <USBPD_TIM_Start+0xd2>
    default:
      break;
 8012528:	bf00      	nop
  }
}
 801252a:	bf00      	nop
 801252c:	3708      	adds	r7, #8
 801252e:	46bd      	mov	sp, r7
 8012530:	bd80      	pop	{r7, pc}
 8012532:	bf00      	nop
 8012534:	40012c00 	.word	0x40012c00
 8012538:	d1b71759 	.word	0xd1b71759

0801253c <USBPD_TIM_IsExpired>:
  * @brief  check timer expiration
  * @param  timer id @TIM_identifier
  * @retval None
  */
uint32_t USBPD_TIM_IsExpired(TIM_identifier Id)
{
 801253c:	b580      	push	{r7, lr}
 801253e:	b084      	sub	sp, #16
 8012540:	af00      	add	r7, sp, #0
 8012542:	4603      	mov	r3, r0
 8012544:	71fb      	strb	r3, [r7, #7]
  uint32_t _expired = 1u;
 8012546:	2301      	movs	r3, #1
 8012548:	60fb      	str	r3, [r7, #12]
  switch (Id)
 801254a:	79fb      	ldrb	r3, [r7, #7]
 801254c:	2b03      	cmp	r3, #3
 801254e:	d81f      	bhi.n	8012590 <USBPD_TIM_IsExpired+0x54>
 8012550:	a201      	add	r2, pc, #4	@ (adr r2, 8012558 <USBPD_TIM_IsExpired+0x1c>)
 8012552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012556:	bf00      	nop
 8012558:	08012569 	.word	0x08012569
 801255c:	08012573 	.word	0x08012573
 8012560:	0801257d 	.word	0x0801257d
 8012564:	08012587 	.word	0x08012587
  {
    case TIM_PORT0_CRC:
      _expired = TIMX_CHANNEL1_GETFLAG(TIMX);
 8012568:	480c      	ldr	r0, [pc, #48]	@ (801259c <USBPD_TIM_IsExpired+0x60>)
 801256a:	f7ff fe5f 	bl	801222c <LL_TIM_IsActiveFlag_CC1>
 801256e:	60f8      	str	r0, [r7, #12]
      break;
 8012570:	e00f      	b.n	8012592 <USBPD_TIM_IsExpired+0x56>
    case TIM_PORT0_RETRY:
      _expired = TIMX_CHANNEL2_GETFLAG(TIMX);
 8012572:	480a      	ldr	r0, [pc, #40]	@ (801259c <USBPD_TIM_IsExpired+0x60>)
 8012574:	f7ff fe7b 	bl	801226e <LL_TIM_IsActiveFlag_CC2>
 8012578:	60f8      	str	r0, [r7, #12]
      break;
 801257a:	e00a      	b.n	8012592 <USBPD_TIM_IsExpired+0x56>
    case TIM_PORT1_CRC:
      _expired = TIMX_CHANNEL3_GETFLAG(TIMX);
 801257c:	4807      	ldr	r0, [pc, #28]	@ (801259c <USBPD_TIM_IsExpired+0x60>)
 801257e:	f7ff fe97 	bl	80122b0 <LL_TIM_IsActiveFlag_CC3>
 8012582:	60f8      	str	r0, [r7, #12]
      break;
 8012584:	e005      	b.n	8012592 <USBPD_TIM_IsExpired+0x56>
    case TIM_PORT1_RETRY:
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
 8012586:	4805      	ldr	r0, [pc, #20]	@ (801259c <USBPD_TIM_IsExpired+0x60>)
 8012588:	f7ff feb3 	bl	80122f2 <LL_TIM_IsActiveFlag_CC4>
 801258c:	60f8      	str	r0, [r7, #12]
      break;
 801258e:	e000      	b.n	8012592 <USBPD_TIM_IsExpired+0x56>
    default:
      break;
 8012590:	bf00      	nop
  }
  return _expired;
 8012592:	68fb      	ldr	r3, [r7, #12]
}
 8012594:	4618      	mov	r0, r3
 8012596:	3710      	adds	r7, #16
 8012598:	46bd      	mov	sp, r7
 801259a:	bd80      	pop	{r7, pc}
 801259c:	40012c00 	.word	0x40012c00

080125a0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80125a0:	b480      	push	{r7}
 80125a2:	b085      	sub	sp, #20
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	4603      	mov	r3, r0
 80125a8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80125aa:	2300      	movs	r3, #0
 80125ac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80125ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80125b2:	2b84      	cmp	r3, #132	@ 0x84
 80125b4:	d005      	beq.n	80125c2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80125b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	4413      	add	r3, r2
 80125be:	3303      	adds	r3, #3
 80125c0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80125c2:	68fb      	ldr	r3, [r7, #12]
}
 80125c4:	4618      	mov	r0, r3
 80125c6:	3714      	adds	r7, #20
 80125c8:	46bd      	mov	sp, r7
 80125ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ce:	4770      	bx	lr

080125d0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80125d0:	b480      	push	{r7}
 80125d2:	b083      	sub	sp, #12
 80125d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80125d6:	f3ef 8305 	mrs	r3, IPSR
 80125da:	607b      	str	r3, [r7, #4]
  return(result);
 80125dc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80125de:	2b00      	cmp	r3, #0
 80125e0:	bf14      	ite	ne
 80125e2:	2301      	movne	r3, #1
 80125e4:	2300      	moveq	r3, #0
 80125e6:	b2db      	uxtb	r3, r3
}
 80125e8:	4618      	mov	r0, r3
 80125ea:	370c      	adds	r7, #12
 80125ec:	46bd      	mov	sp, r7
 80125ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f2:	4770      	bx	lr

080125f4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80125f4:	b580      	push	{r7, lr}
 80125f6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80125f8:	f001 fadc 	bl	8013bb4 <vTaskStartScheduler>
  
  return osOK;
 80125fc:	2300      	movs	r3, #0
}
 80125fe:	4618      	mov	r0, r3
 8012600:	bd80      	pop	{r7, pc}

08012602 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8012602:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012604:	b087      	sub	sp, #28
 8012606:	af02      	add	r7, sp, #8
 8012608:	6078      	str	r0, [r7, #4]
 801260a:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	685c      	ldr	r4, [r3, #4]
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012618:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012620:	4618      	mov	r0, r3
 8012622:	f7ff ffbd 	bl	80125a0 <makeFreeRtosPriority>
 8012626:	4602      	mov	r2, r0
 8012628:	f107 030c 	add.w	r3, r7, #12
 801262c:	9301      	str	r3, [sp, #4]
 801262e:	9200      	str	r2, [sp, #0]
 8012630:	683b      	ldr	r3, [r7, #0]
 8012632:	4632      	mov	r2, r6
 8012634:	4629      	mov	r1, r5
 8012636:	4620      	mov	r0, r4
 8012638:	f001 f834 	bl	80136a4 <xTaskCreate>
 801263c:	4603      	mov	r3, r0
 801263e:	2b01      	cmp	r3, #1
 8012640:	d001      	beq.n	8012646 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8012642:	2300      	movs	r3, #0
 8012644:	e000      	b.n	8012648 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8012646:	68fb      	ldr	r3, [r7, #12]
}
 8012648:	4618      	mov	r0, r3
 801264a:	3714      	adds	r7, #20
 801264c:	46bd      	mov	sp, r7
 801264e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012650 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8012650:	b580      	push	{r7, lr}
 8012652:	b082      	sub	sp, #8
 8012654:	af00      	add	r7, sp, #0
 8012656:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8012658:	6878      	ldr	r0, [r7, #4]
 801265a:	f001 f97d 	bl	8013958 <vTaskDelete>
  return osOK;
 801265e:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8012660:	4618      	mov	r0, r3
 8012662:	3708      	adds	r7, #8
 8012664:	46bd      	mov	sp, r7
 8012666:	bd80      	pop	{r7, pc}

08012668 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8012668:	b580      	push	{r7, lr}
 801266a:	b084      	sub	sp, #16
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d001      	beq.n	801267e <osDelay+0x16>
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	e000      	b.n	8012680 <osDelay+0x18>
 801267e:	2301      	movs	r3, #1
 8012680:	4618      	mov	r0, r3
 8012682:	f001 f9f9 	bl	8013a78 <vTaskDelay>
  
  return osOK;
 8012686:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8012688:	4618      	mov	r0, r3
 801268a:	3710      	adds	r7, #16
 801268c:	46bd      	mov	sp, r7
 801268e:	bd80      	pop	{r7, pc}

08012690 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8012690:	b580      	push	{r7, lr}
 8012692:	b082      	sub	sp, #8
 8012694:	af00      	add	r7, sp, #0
 8012696:	6078      	str	r0, [r7, #4]
 8012698:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	6818      	ldr	r0, [r3, #0]
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	685b      	ldr	r3, [r3, #4]
 80126a2:	2200      	movs	r2, #0
 80126a4:	4619      	mov	r1, r3
 80126a6:	f000 f9d7 	bl	8012a58 <xQueueGenericCreate>
 80126aa:	4603      	mov	r3, r0
#endif
}
 80126ac:	4618      	mov	r0, r3
 80126ae:	3708      	adds	r7, #8
 80126b0:	46bd      	mov	sp, r7
 80126b2:	bd80      	pop	{r7, pc}

080126b4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80126b4:	b580      	push	{r7, lr}
 80126b6:	b086      	sub	sp, #24
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	60f8      	str	r0, [r7, #12]
 80126bc:	60b9      	str	r1, [r7, #8]
 80126be:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80126c0:	2300      	movs	r3, #0
 80126c2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80126c8:	697b      	ldr	r3, [r7, #20]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d101      	bne.n	80126d2 <osMessagePut+0x1e>
    ticks = 1;
 80126ce:	2301      	movs	r3, #1
 80126d0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80126d2:	f7ff ff7d 	bl	80125d0 <inHandlerMode>
 80126d6:	4603      	mov	r3, r0
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d018      	beq.n	801270e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80126dc:	f107 0210 	add.w	r2, r7, #16
 80126e0:	f107 0108 	add.w	r1, r7, #8
 80126e4:	2300      	movs	r3, #0
 80126e6:	68f8      	ldr	r0, [r7, #12]
 80126e8:	f000 fb12 	bl	8012d10 <xQueueGenericSendFromISR>
 80126ec:	4603      	mov	r3, r0
 80126ee:	2b01      	cmp	r3, #1
 80126f0:	d001      	beq.n	80126f6 <osMessagePut+0x42>
      return osErrorOS;
 80126f2:	23ff      	movs	r3, #255	@ 0xff
 80126f4:	e018      	b.n	8012728 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80126f6:	693b      	ldr	r3, [r7, #16]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d014      	beq.n	8012726 <osMessagePut+0x72>
 80126fc:	4b0c      	ldr	r3, [pc, #48]	@ (8012730 <osMessagePut+0x7c>)
 80126fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012702:	601a      	str	r2, [r3, #0]
 8012704:	f3bf 8f4f 	dsb	sy
 8012708:	f3bf 8f6f 	isb	sy
 801270c:	e00b      	b.n	8012726 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801270e:	f107 0108 	add.w	r1, r7, #8
 8012712:	2300      	movs	r3, #0
 8012714:	697a      	ldr	r2, [r7, #20]
 8012716:	68f8      	ldr	r0, [r7, #12]
 8012718:	f000 f9f8 	bl	8012b0c <xQueueGenericSend>
 801271c:	4603      	mov	r3, r0
 801271e:	2b01      	cmp	r3, #1
 8012720:	d001      	beq.n	8012726 <osMessagePut+0x72>
      return osErrorOS;
 8012722:	23ff      	movs	r3, #255	@ 0xff
 8012724:	e000      	b.n	8012728 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8012726:	2300      	movs	r3, #0
}
 8012728:	4618      	mov	r0, r3
 801272a:	3718      	adds	r7, #24
 801272c:	46bd      	mov	sp, r7
 801272e:	bd80      	pop	{r7, pc}
 8012730:	e000ed04 	.word	0xe000ed04

08012734 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8012734:	b590      	push	{r4, r7, lr}
 8012736:	b08b      	sub	sp, #44	@ 0x2c
 8012738:	af00      	add	r7, sp, #0
 801273a:	60f8      	str	r0, [r7, #12]
 801273c:	60b9      	str	r1, [r7, #8]
 801273e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8012740:	68bb      	ldr	r3, [r7, #8]
 8012742:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8012744:	2300      	movs	r3, #0
 8012746:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8012748:	68bb      	ldr	r3, [r7, #8]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d10a      	bne.n	8012764 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801274e:	2380      	movs	r3, #128	@ 0x80
 8012750:	617b      	str	r3, [r7, #20]
    return event;
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	461c      	mov	r4, r3
 8012756:	f107 0314 	add.w	r3, r7, #20
 801275a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801275e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012762:	e054      	b.n	801280e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8012764:	2300      	movs	r3, #0
 8012766:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8012768:	2300      	movs	r3, #0
 801276a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012772:	d103      	bne.n	801277c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8012774:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012778:	627b      	str	r3, [r7, #36]	@ 0x24
 801277a:	e009      	b.n	8012790 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	2b00      	cmp	r3, #0
 8012780:	d006      	beq.n	8012790 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8012786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012788:	2b00      	cmp	r3, #0
 801278a:	d101      	bne.n	8012790 <osMessageGet+0x5c>
      ticks = 1;
 801278c:	2301      	movs	r3, #1
 801278e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8012790:	f7ff ff1e 	bl	80125d0 <inHandlerMode>
 8012794:	4603      	mov	r3, r0
 8012796:	2b00      	cmp	r3, #0
 8012798:	d01c      	beq.n	80127d4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 801279a:	f107 0220 	add.w	r2, r7, #32
 801279e:	f107 0314 	add.w	r3, r7, #20
 80127a2:	3304      	adds	r3, #4
 80127a4:	4619      	mov	r1, r3
 80127a6:	68b8      	ldr	r0, [r7, #8]
 80127a8:	f000 fdd2 	bl	8013350 <xQueueReceiveFromISR>
 80127ac:	4603      	mov	r3, r0
 80127ae:	2b01      	cmp	r3, #1
 80127b0:	d102      	bne.n	80127b8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80127b2:	2310      	movs	r3, #16
 80127b4:	617b      	str	r3, [r7, #20]
 80127b6:	e001      	b.n	80127bc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80127b8:	2300      	movs	r3, #0
 80127ba:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80127bc:	6a3b      	ldr	r3, [r7, #32]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d01d      	beq.n	80127fe <osMessageGet+0xca>
 80127c2:	4b15      	ldr	r3, [pc, #84]	@ (8012818 <osMessageGet+0xe4>)
 80127c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80127c8:	601a      	str	r2, [r3, #0]
 80127ca:	f3bf 8f4f 	dsb	sy
 80127ce:	f3bf 8f6f 	isb	sy
 80127d2:	e014      	b.n	80127fe <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80127d4:	f107 0314 	add.w	r3, r7, #20
 80127d8:	3304      	adds	r3, #4
 80127da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80127dc:	4619      	mov	r1, r3
 80127de:	68b8      	ldr	r0, [r7, #8]
 80127e0:	f000 fbc4 	bl	8012f6c <xQueueReceive>
 80127e4:	4603      	mov	r3, r0
 80127e6:	2b01      	cmp	r3, #1
 80127e8:	d102      	bne.n	80127f0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80127ea:	2310      	movs	r3, #16
 80127ec:	617b      	str	r3, [r7, #20]
 80127ee:	e006      	b.n	80127fe <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80127f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d101      	bne.n	80127fa <osMessageGet+0xc6>
 80127f6:	2300      	movs	r3, #0
 80127f8:	e000      	b.n	80127fc <osMessageGet+0xc8>
 80127fa:	2340      	movs	r3, #64	@ 0x40
 80127fc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	461c      	mov	r4, r3
 8012802:	f107 0314 	add.w	r3, r7, #20
 8012806:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801280a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801280e:	68f8      	ldr	r0, [r7, #12]
 8012810:	372c      	adds	r7, #44	@ 0x2c
 8012812:	46bd      	mov	sp, r7
 8012814:	bd90      	pop	{r4, r7, pc}
 8012816:	bf00      	nop
 8012818:	e000ed04 	.word	0xe000ed04

0801281c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801281c:	b480      	push	{r7}
 801281e:	b083      	sub	sp, #12
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	f103 0208 	add.w	r2, r3, #8
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012834:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	f103 0208 	add.w	r2, r3, #8
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	f103 0208 	add.w	r2, r3, #8
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	2200      	movs	r2, #0
 801284e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012850:	bf00      	nop
 8012852:	370c      	adds	r7, #12
 8012854:	46bd      	mov	sp, r7
 8012856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801285a:	4770      	bx	lr

0801285c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801285c:	b480      	push	{r7}
 801285e:	b083      	sub	sp, #12
 8012860:	af00      	add	r7, sp, #0
 8012862:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	2200      	movs	r2, #0
 8012868:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801286a:	bf00      	nop
 801286c:	370c      	adds	r7, #12
 801286e:	46bd      	mov	sp, r7
 8012870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012874:	4770      	bx	lr

08012876 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012876:	b480      	push	{r7}
 8012878:	b085      	sub	sp, #20
 801287a:	af00      	add	r7, sp, #0
 801287c:	6078      	str	r0, [r7, #4]
 801287e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	685b      	ldr	r3, [r3, #4]
 8012884:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012886:	683b      	ldr	r3, [r7, #0]
 8012888:	68fa      	ldr	r2, [r7, #12]
 801288a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	689a      	ldr	r2, [r3, #8]
 8012890:	683b      	ldr	r3, [r7, #0]
 8012892:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	689b      	ldr	r3, [r3, #8]
 8012898:	683a      	ldr	r2, [r7, #0]
 801289a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	683a      	ldr	r2, [r7, #0]
 80128a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80128a2:	683b      	ldr	r3, [r7, #0]
 80128a4:	687a      	ldr	r2, [r7, #4]
 80128a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	1c5a      	adds	r2, r3, #1
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	601a      	str	r2, [r3, #0]
}
 80128b2:	bf00      	nop
 80128b4:	3714      	adds	r7, #20
 80128b6:	46bd      	mov	sp, r7
 80128b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128bc:	4770      	bx	lr

080128be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80128be:	b480      	push	{r7}
 80128c0:	b085      	sub	sp, #20
 80128c2:	af00      	add	r7, sp, #0
 80128c4:	6078      	str	r0, [r7, #4]
 80128c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80128c8:	683b      	ldr	r3, [r7, #0]
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80128ce:	68bb      	ldr	r3, [r7, #8]
 80128d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80128d4:	d103      	bne.n	80128de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	691b      	ldr	r3, [r3, #16]
 80128da:	60fb      	str	r3, [r7, #12]
 80128dc:	e00c      	b.n	80128f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	3308      	adds	r3, #8
 80128e2:	60fb      	str	r3, [r7, #12]
 80128e4:	e002      	b.n	80128ec <vListInsert+0x2e>
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	685b      	ldr	r3, [r3, #4]
 80128ea:	60fb      	str	r3, [r7, #12]
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	685b      	ldr	r3, [r3, #4]
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	68ba      	ldr	r2, [r7, #8]
 80128f4:	429a      	cmp	r2, r3
 80128f6:	d2f6      	bcs.n	80128e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	685a      	ldr	r2, [r3, #4]
 80128fc:	683b      	ldr	r3, [r7, #0]
 80128fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012900:	683b      	ldr	r3, [r7, #0]
 8012902:	685b      	ldr	r3, [r3, #4]
 8012904:	683a      	ldr	r2, [r7, #0]
 8012906:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012908:	683b      	ldr	r3, [r7, #0]
 801290a:	68fa      	ldr	r2, [r7, #12]
 801290c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801290e:	68fb      	ldr	r3, [r7, #12]
 8012910:	683a      	ldr	r2, [r7, #0]
 8012912:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012914:	683b      	ldr	r3, [r7, #0]
 8012916:	687a      	ldr	r2, [r7, #4]
 8012918:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	1c5a      	adds	r2, r3, #1
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	601a      	str	r2, [r3, #0]
}
 8012924:	bf00      	nop
 8012926:	3714      	adds	r7, #20
 8012928:	46bd      	mov	sp, r7
 801292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801292e:	4770      	bx	lr

08012930 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012930:	b480      	push	{r7}
 8012932:	b085      	sub	sp, #20
 8012934:	af00      	add	r7, sp, #0
 8012936:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	691b      	ldr	r3, [r3, #16]
 801293c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	685b      	ldr	r3, [r3, #4]
 8012942:	687a      	ldr	r2, [r7, #4]
 8012944:	6892      	ldr	r2, [r2, #8]
 8012946:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	689b      	ldr	r3, [r3, #8]
 801294c:	687a      	ldr	r2, [r7, #4]
 801294e:	6852      	ldr	r2, [r2, #4]
 8012950:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	685b      	ldr	r3, [r3, #4]
 8012956:	687a      	ldr	r2, [r7, #4]
 8012958:	429a      	cmp	r2, r3
 801295a:	d103      	bne.n	8012964 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	689a      	ldr	r2, [r3, #8]
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	2200      	movs	r2, #0
 8012968:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	1e5a      	subs	r2, r3, #1
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	681b      	ldr	r3, [r3, #0]
}
 8012978:	4618      	mov	r0, r3
 801297a:	3714      	adds	r7, #20
 801297c:	46bd      	mov	sp, r7
 801297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012982:	4770      	bx	lr

08012984 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012984:	b580      	push	{r7, lr}
 8012986:	b084      	sub	sp, #16
 8012988:	af00      	add	r7, sp, #0
 801298a:	6078      	str	r0, [r7, #4]
 801298c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	2b00      	cmp	r3, #0
 8012996:	d10b      	bne.n	80129b0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801299c:	f383 8811 	msr	BASEPRI, r3
 80129a0:	f3bf 8f6f 	isb	sy
 80129a4:	f3bf 8f4f 	dsb	sy
 80129a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80129aa:	bf00      	nop
 80129ac:	bf00      	nop
 80129ae:	e7fd      	b.n	80129ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80129b0:	f002 f98a 	bl	8014cc8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	681a      	ldr	r2, [r3, #0]
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80129bc:	68f9      	ldr	r1, [r7, #12]
 80129be:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80129c0:	fb01 f303 	mul.w	r3, r1, r3
 80129c4:	441a      	add	r2, r3
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	2200      	movs	r2, #0
 80129ce:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	681a      	ldr	r2, [r3, #0]
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	681a      	ldr	r2, [r3, #0]
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80129e0:	3b01      	subs	r3, #1
 80129e2:	68f9      	ldr	r1, [r7, #12]
 80129e4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80129e6:	fb01 f303 	mul.w	r3, r1, r3
 80129ea:	441a      	add	r2, r3
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	22ff      	movs	r2, #255	@ 0xff
 80129f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	22ff      	movs	r2, #255	@ 0xff
 80129fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8012a00:	683b      	ldr	r3, [r7, #0]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d114      	bne.n	8012a30 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	691b      	ldr	r3, [r3, #16]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d01a      	beq.n	8012a44 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	3310      	adds	r3, #16
 8012a12:	4618      	mov	r0, r3
 8012a14:	f001 fb2c 	bl	8014070 <xTaskRemoveFromEventList>
 8012a18:	4603      	mov	r3, r0
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d012      	beq.n	8012a44 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8012a54 <xQueueGenericReset+0xd0>)
 8012a20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012a24:	601a      	str	r2, [r3, #0]
 8012a26:	f3bf 8f4f 	dsb	sy
 8012a2a:	f3bf 8f6f 	isb	sy
 8012a2e:	e009      	b.n	8012a44 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	3310      	adds	r3, #16
 8012a34:	4618      	mov	r0, r3
 8012a36:	f7ff fef1 	bl	801281c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	3324      	adds	r3, #36	@ 0x24
 8012a3e:	4618      	mov	r0, r3
 8012a40:	f7ff feec 	bl	801281c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012a44:	f002 f972 	bl	8014d2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012a48:	2301      	movs	r3, #1
}
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	3710      	adds	r7, #16
 8012a4e:	46bd      	mov	sp, r7
 8012a50:	bd80      	pop	{r7, pc}
 8012a52:	bf00      	nop
 8012a54:	e000ed04 	.word	0xe000ed04

08012a58 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	b08a      	sub	sp, #40	@ 0x28
 8012a5c:	af02      	add	r7, sp, #8
 8012a5e:	60f8      	str	r0, [r7, #12]
 8012a60:	60b9      	str	r1, [r7, #8]
 8012a62:	4613      	mov	r3, r2
 8012a64:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d10b      	bne.n	8012a84 <xQueueGenericCreate+0x2c>
	__asm volatile
 8012a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a70:	f383 8811 	msr	BASEPRI, r3
 8012a74:	f3bf 8f6f 	isb	sy
 8012a78:	f3bf 8f4f 	dsb	sy
 8012a7c:	613b      	str	r3, [r7, #16]
}
 8012a7e:	bf00      	nop
 8012a80:	bf00      	nop
 8012a82:	e7fd      	b.n	8012a80 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	68ba      	ldr	r2, [r7, #8]
 8012a88:	fb02 f303 	mul.w	r3, r2, r3
 8012a8c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012a8e:	69fb      	ldr	r3, [r7, #28]
 8012a90:	3350      	adds	r3, #80	@ 0x50
 8012a92:	4618      	mov	r0, r3
 8012a94:	f002 fa3a 	bl	8014f0c <pvPortMalloc>
 8012a98:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012a9a:	69bb      	ldr	r3, [r7, #24]
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d00d      	beq.n	8012abc <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012aa0:	69bb      	ldr	r3, [r7, #24]
 8012aa2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012aa4:	697b      	ldr	r3, [r7, #20]
 8012aa6:	3350      	adds	r3, #80	@ 0x50
 8012aa8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012aaa:	79fa      	ldrb	r2, [r7, #7]
 8012aac:	69bb      	ldr	r3, [r7, #24]
 8012aae:	9300      	str	r3, [sp, #0]
 8012ab0:	4613      	mov	r3, r2
 8012ab2:	697a      	ldr	r2, [r7, #20]
 8012ab4:	68b9      	ldr	r1, [r7, #8]
 8012ab6:	68f8      	ldr	r0, [r7, #12]
 8012ab8:	f000 f805 	bl	8012ac6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012abc:	69bb      	ldr	r3, [r7, #24]
	}
 8012abe:	4618      	mov	r0, r3
 8012ac0:	3720      	adds	r7, #32
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	bd80      	pop	{r7, pc}

08012ac6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012ac6:	b580      	push	{r7, lr}
 8012ac8:	b084      	sub	sp, #16
 8012aca:	af00      	add	r7, sp, #0
 8012acc:	60f8      	str	r0, [r7, #12]
 8012ace:	60b9      	str	r1, [r7, #8]
 8012ad0:	607a      	str	r2, [r7, #4]
 8012ad2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012ad4:	68bb      	ldr	r3, [r7, #8]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d103      	bne.n	8012ae2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012ada:	69bb      	ldr	r3, [r7, #24]
 8012adc:	69ba      	ldr	r2, [r7, #24]
 8012ade:	601a      	str	r2, [r3, #0]
 8012ae0:	e002      	b.n	8012ae8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012ae2:	69bb      	ldr	r3, [r7, #24]
 8012ae4:	687a      	ldr	r2, [r7, #4]
 8012ae6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012ae8:	69bb      	ldr	r3, [r7, #24]
 8012aea:	68fa      	ldr	r2, [r7, #12]
 8012aec:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012aee:	69bb      	ldr	r3, [r7, #24]
 8012af0:	68ba      	ldr	r2, [r7, #8]
 8012af2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012af4:	2101      	movs	r1, #1
 8012af6:	69b8      	ldr	r0, [r7, #24]
 8012af8:	f7ff ff44 	bl	8012984 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8012afc:	69bb      	ldr	r3, [r7, #24]
 8012afe:	78fa      	ldrb	r2, [r7, #3]
 8012b00:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012b04:	bf00      	nop
 8012b06:	3710      	adds	r7, #16
 8012b08:	46bd      	mov	sp, r7
 8012b0a:	bd80      	pop	{r7, pc}

08012b0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b08e      	sub	sp, #56	@ 0x38
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	60f8      	str	r0, [r7, #12]
 8012b14:	60b9      	str	r1, [r7, #8]
 8012b16:	607a      	str	r2, [r7, #4]
 8012b18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012b1a:	2300      	movs	r3, #0
 8012b1c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8012b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d10b      	bne.n	8012b40 <xQueueGenericSend+0x34>
	__asm volatile
 8012b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b2c:	f383 8811 	msr	BASEPRI, r3
 8012b30:	f3bf 8f6f 	isb	sy
 8012b34:	f3bf 8f4f 	dsb	sy
 8012b38:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8012b3a:	bf00      	nop
 8012b3c:	bf00      	nop
 8012b3e:	e7fd      	b.n	8012b3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012b40:	68bb      	ldr	r3, [r7, #8]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d103      	bne.n	8012b4e <xQueueGenericSend+0x42>
 8012b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d101      	bne.n	8012b52 <xQueueGenericSend+0x46>
 8012b4e:	2301      	movs	r3, #1
 8012b50:	e000      	b.n	8012b54 <xQueueGenericSend+0x48>
 8012b52:	2300      	movs	r3, #0
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d10b      	bne.n	8012b70 <xQueueGenericSend+0x64>
	__asm volatile
 8012b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b5c:	f383 8811 	msr	BASEPRI, r3
 8012b60:	f3bf 8f6f 	isb	sy
 8012b64:	f3bf 8f4f 	dsb	sy
 8012b68:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012b6a:	bf00      	nop
 8012b6c:	bf00      	nop
 8012b6e:	e7fd      	b.n	8012b6c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012b70:	683b      	ldr	r3, [r7, #0]
 8012b72:	2b02      	cmp	r3, #2
 8012b74:	d103      	bne.n	8012b7e <xQueueGenericSend+0x72>
 8012b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012b7a:	2b01      	cmp	r3, #1
 8012b7c:	d101      	bne.n	8012b82 <xQueueGenericSend+0x76>
 8012b7e:	2301      	movs	r3, #1
 8012b80:	e000      	b.n	8012b84 <xQueueGenericSend+0x78>
 8012b82:	2300      	movs	r3, #0
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d10b      	bne.n	8012ba0 <xQueueGenericSend+0x94>
	__asm volatile
 8012b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b8c:	f383 8811 	msr	BASEPRI, r3
 8012b90:	f3bf 8f6f 	isb	sy
 8012b94:	f3bf 8f4f 	dsb	sy
 8012b98:	623b      	str	r3, [r7, #32]
}
 8012b9a:	bf00      	nop
 8012b9c:	bf00      	nop
 8012b9e:	e7fd      	b.n	8012b9c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012ba0:	f001 fc0c 	bl	80143bc <xTaskGetSchedulerState>
 8012ba4:	4603      	mov	r3, r0
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d102      	bne.n	8012bb0 <xQueueGenericSend+0xa4>
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d101      	bne.n	8012bb4 <xQueueGenericSend+0xa8>
 8012bb0:	2301      	movs	r3, #1
 8012bb2:	e000      	b.n	8012bb6 <xQueueGenericSend+0xaa>
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d10b      	bne.n	8012bd2 <xQueueGenericSend+0xc6>
	__asm volatile
 8012bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bbe:	f383 8811 	msr	BASEPRI, r3
 8012bc2:	f3bf 8f6f 	isb	sy
 8012bc6:	f3bf 8f4f 	dsb	sy
 8012bca:	61fb      	str	r3, [r7, #28]
}
 8012bcc:	bf00      	nop
 8012bce:	bf00      	nop
 8012bd0:	e7fd      	b.n	8012bce <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012bd2:	f002 f879 	bl	8014cc8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012bde:	429a      	cmp	r2, r3
 8012be0:	d302      	bcc.n	8012be8 <xQueueGenericSend+0xdc>
 8012be2:	683b      	ldr	r3, [r7, #0]
 8012be4:	2b02      	cmp	r3, #2
 8012be6:	d129      	bne.n	8012c3c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012be8:	683a      	ldr	r2, [r7, #0]
 8012bea:	68b9      	ldr	r1, [r7, #8]
 8012bec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012bee:	f000 fc49 	bl	8013484 <prvCopyDataToQueue>
 8012bf2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d010      	beq.n	8012c1e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bfe:	3324      	adds	r3, #36	@ 0x24
 8012c00:	4618      	mov	r0, r3
 8012c02:	f001 fa35 	bl	8014070 <xTaskRemoveFromEventList>
 8012c06:	4603      	mov	r3, r0
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d013      	beq.n	8012c34 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012c0c:	4b3f      	ldr	r3, [pc, #252]	@ (8012d0c <xQueueGenericSend+0x200>)
 8012c0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012c12:	601a      	str	r2, [r3, #0]
 8012c14:	f3bf 8f4f 	dsb	sy
 8012c18:	f3bf 8f6f 	isb	sy
 8012c1c:	e00a      	b.n	8012c34 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d007      	beq.n	8012c34 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012c24:	4b39      	ldr	r3, [pc, #228]	@ (8012d0c <xQueueGenericSend+0x200>)
 8012c26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012c2a:	601a      	str	r2, [r3, #0]
 8012c2c:	f3bf 8f4f 	dsb	sy
 8012c30:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012c34:	f002 f87a 	bl	8014d2c <vPortExitCritical>
				return pdPASS;
 8012c38:	2301      	movs	r3, #1
 8012c3a:	e063      	b.n	8012d04 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d103      	bne.n	8012c4a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012c42:	f002 f873 	bl	8014d2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012c46:	2300      	movs	r3, #0
 8012c48:	e05c      	b.n	8012d04 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012c4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d106      	bne.n	8012c5e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012c50:	f107 0314 	add.w	r3, r7, #20
 8012c54:	4618      	mov	r0, r3
 8012c56:	f001 fa6f 	bl	8014138 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012c5a:	2301      	movs	r3, #1
 8012c5c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012c5e:	f002 f865 	bl	8014d2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012c62:	f000 fffb 	bl	8013c5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012c66:	f002 f82f 	bl	8014cc8 <vPortEnterCritical>
 8012c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012c70:	b25b      	sxtb	r3, r3
 8012c72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012c76:	d103      	bne.n	8012c80 <xQueueGenericSend+0x174>
 8012c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c7a:	2200      	movs	r2, #0
 8012c7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012c86:	b25b      	sxtb	r3, r3
 8012c88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012c8c:	d103      	bne.n	8012c96 <xQueueGenericSend+0x18a>
 8012c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c90:	2200      	movs	r2, #0
 8012c92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012c96:	f002 f849 	bl	8014d2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012c9a:	1d3a      	adds	r2, r7, #4
 8012c9c:	f107 0314 	add.w	r3, r7, #20
 8012ca0:	4611      	mov	r1, r2
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	f001 fa5e 	bl	8014164 <xTaskCheckForTimeOut>
 8012ca8:	4603      	mov	r3, r0
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d124      	bne.n	8012cf8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012cae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012cb0:	f000 fce0 	bl	8013674 <prvIsQueueFull>
 8012cb4:	4603      	mov	r3, r0
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d018      	beq.n	8012cec <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cbc:	3310      	adds	r3, #16
 8012cbe:	687a      	ldr	r2, [r7, #4]
 8012cc0:	4611      	mov	r1, r2
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	f001 f9ae 	bl	8014024 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012cc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012cca:	f000 fc6b 	bl	80135a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012cce:	f000 ffd3 	bl	8013c78 <xTaskResumeAll>
 8012cd2:	4603      	mov	r3, r0
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	f47f af7c 	bne.w	8012bd2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8012cda:	4b0c      	ldr	r3, [pc, #48]	@ (8012d0c <xQueueGenericSend+0x200>)
 8012cdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012ce0:	601a      	str	r2, [r3, #0]
 8012ce2:	f3bf 8f4f 	dsb	sy
 8012ce6:	f3bf 8f6f 	isb	sy
 8012cea:	e772      	b.n	8012bd2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012cec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012cee:	f000 fc59 	bl	80135a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012cf2:	f000 ffc1 	bl	8013c78 <xTaskResumeAll>
 8012cf6:	e76c      	b.n	8012bd2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012cf8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012cfa:	f000 fc53 	bl	80135a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012cfe:	f000 ffbb 	bl	8013c78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012d02:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012d04:	4618      	mov	r0, r3
 8012d06:	3738      	adds	r7, #56	@ 0x38
 8012d08:	46bd      	mov	sp, r7
 8012d0a:	bd80      	pop	{r7, pc}
 8012d0c:	e000ed04 	.word	0xe000ed04

08012d10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012d10:	b580      	push	{r7, lr}
 8012d12:	b090      	sub	sp, #64	@ 0x40
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	60f8      	str	r0, [r7, #12]
 8012d18:	60b9      	str	r1, [r7, #8]
 8012d1a:	607a      	str	r2, [r7, #4]
 8012d1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8012d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d10b      	bne.n	8012d40 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8012d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d2c:	f383 8811 	msr	BASEPRI, r3
 8012d30:	f3bf 8f6f 	isb	sy
 8012d34:	f3bf 8f4f 	dsb	sy
 8012d38:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8012d3a:	bf00      	nop
 8012d3c:	bf00      	nop
 8012d3e:	e7fd      	b.n	8012d3c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012d40:	68bb      	ldr	r3, [r7, #8]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d103      	bne.n	8012d4e <xQueueGenericSendFromISR+0x3e>
 8012d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d101      	bne.n	8012d52 <xQueueGenericSendFromISR+0x42>
 8012d4e:	2301      	movs	r3, #1
 8012d50:	e000      	b.n	8012d54 <xQueueGenericSendFromISR+0x44>
 8012d52:	2300      	movs	r3, #0
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d10b      	bne.n	8012d70 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8012d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d5c:	f383 8811 	msr	BASEPRI, r3
 8012d60:	f3bf 8f6f 	isb	sy
 8012d64:	f3bf 8f4f 	dsb	sy
 8012d68:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012d6a:	bf00      	nop
 8012d6c:	bf00      	nop
 8012d6e:	e7fd      	b.n	8012d6c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012d70:	683b      	ldr	r3, [r7, #0]
 8012d72:	2b02      	cmp	r3, #2
 8012d74:	d103      	bne.n	8012d7e <xQueueGenericSendFromISR+0x6e>
 8012d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012d7a:	2b01      	cmp	r3, #1
 8012d7c:	d101      	bne.n	8012d82 <xQueueGenericSendFromISR+0x72>
 8012d7e:	2301      	movs	r3, #1
 8012d80:	e000      	b.n	8012d84 <xQueueGenericSendFromISR+0x74>
 8012d82:	2300      	movs	r3, #0
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d10b      	bne.n	8012da0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8012d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d8c:	f383 8811 	msr	BASEPRI, r3
 8012d90:	f3bf 8f6f 	isb	sy
 8012d94:	f3bf 8f4f 	dsb	sy
 8012d98:	623b      	str	r3, [r7, #32]
}
 8012d9a:	bf00      	nop
 8012d9c:	bf00      	nop
 8012d9e:	e7fd      	b.n	8012d9c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012da0:	f002 f872 	bl	8014e88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012da4:	f3ef 8211 	mrs	r2, BASEPRI
 8012da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012dac:	f383 8811 	msr	BASEPRI, r3
 8012db0:	f3bf 8f6f 	isb	sy
 8012db4:	f3bf 8f4f 	dsb	sy
 8012db8:	61fa      	str	r2, [r7, #28]
 8012dba:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012dbc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012dbe:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012dc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012dc8:	429a      	cmp	r2, r3
 8012dca:	d302      	bcc.n	8012dd2 <xQueueGenericSendFromISR+0xc2>
 8012dcc:	683b      	ldr	r3, [r7, #0]
 8012dce:	2b02      	cmp	r3, #2
 8012dd0:	d12f      	bne.n	8012e32 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012dd4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012dd8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012de2:	683a      	ldr	r2, [r7, #0]
 8012de4:	68b9      	ldr	r1, [r7, #8]
 8012de6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012de8:	f000 fb4c 	bl	8013484 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012dec:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8012df0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012df4:	d112      	bne.n	8012e1c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d016      	beq.n	8012e2c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e00:	3324      	adds	r3, #36	@ 0x24
 8012e02:	4618      	mov	r0, r3
 8012e04:	f001 f934 	bl	8014070 <xTaskRemoveFromEventList>
 8012e08:	4603      	mov	r3, r0
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d00e      	beq.n	8012e2c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d00b      	beq.n	8012e2c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	2201      	movs	r2, #1
 8012e18:	601a      	str	r2, [r3, #0]
 8012e1a:	e007      	b.n	8012e2c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012e1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8012e20:	3301      	adds	r3, #1
 8012e22:	b2db      	uxtb	r3, r3
 8012e24:	b25a      	sxtb	r2, r3
 8012e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8012e2c:	2301      	movs	r3, #1
 8012e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8012e30:	e001      	b.n	8012e36 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012e32:	2300      	movs	r3, #0
 8012e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012e38:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012e3a:	697b      	ldr	r3, [r7, #20]
 8012e3c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012e40:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012e42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8012e44:	4618      	mov	r0, r3
 8012e46:	3740      	adds	r7, #64	@ 0x40
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	bd80      	pop	{r7, pc}

08012e4c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012e4c:	b580      	push	{r7, lr}
 8012e4e:	b08e      	sub	sp, #56	@ 0x38
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	6078      	str	r0, [r7, #4]
 8012e54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8012e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d10b      	bne.n	8012e78 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8012e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e64:	f383 8811 	msr	BASEPRI, r3
 8012e68:	f3bf 8f6f 	isb	sy
 8012e6c:	f3bf 8f4f 	dsb	sy
 8012e70:	623b      	str	r3, [r7, #32]
}
 8012e72:	bf00      	nop
 8012e74:	bf00      	nop
 8012e76:	e7fd      	b.n	8012e74 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d00b      	beq.n	8012e98 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8012e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e84:	f383 8811 	msr	BASEPRI, r3
 8012e88:	f3bf 8f6f 	isb	sy
 8012e8c:	f3bf 8f4f 	dsb	sy
 8012e90:	61fb      	str	r3, [r7, #28]
}
 8012e92:	bf00      	nop
 8012e94:	bf00      	nop
 8012e96:	e7fd      	b.n	8012e94 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d103      	bne.n	8012ea8 <xQueueGiveFromISR+0x5c>
 8012ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ea2:	689b      	ldr	r3, [r3, #8]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d101      	bne.n	8012eac <xQueueGiveFromISR+0x60>
 8012ea8:	2301      	movs	r3, #1
 8012eaa:	e000      	b.n	8012eae <xQueueGiveFromISR+0x62>
 8012eac:	2300      	movs	r3, #0
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d10b      	bne.n	8012eca <xQueueGiveFromISR+0x7e>
	__asm volatile
 8012eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012eb6:	f383 8811 	msr	BASEPRI, r3
 8012eba:	f3bf 8f6f 	isb	sy
 8012ebe:	f3bf 8f4f 	dsb	sy
 8012ec2:	61bb      	str	r3, [r7, #24]
}
 8012ec4:	bf00      	nop
 8012ec6:	bf00      	nop
 8012ec8:	e7fd      	b.n	8012ec6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012eca:	f001 ffdd 	bl	8014e88 <vPortValidateInterruptPriority>
	__asm volatile
 8012ece:	f3ef 8211 	mrs	r2, BASEPRI
 8012ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ed6:	f383 8811 	msr	BASEPRI, r3
 8012eda:	f3bf 8f6f 	isb	sy
 8012ede:	f3bf 8f4f 	dsb	sy
 8012ee2:	617a      	str	r2, [r7, #20]
 8012ee4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8012ee6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012eee:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012ef4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012ef6:	429a      	cmp	r2, r3
 8012ef8:	d22b      	bcs.n	8012f52 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012efc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012f00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f06:	1c5a      	adds	r2, r3, #1
 8012f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f0a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012f0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8012f10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012f14:	d112      	bne.n	8012f3c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d016      	beq.n	8012f4c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f20:	3324      	adds	r3, #36	@ 0x24
 8012f22:	4618      	mov	r0, r3
 8012f24:	f001 f8a4 	bl	8014070 <xTaskRemoveFromEventList>
 8012f28:	4603      	mov	r3, r0
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d00e      	beq.n	8012f4c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012f2e:	683b      	ldr	r3, [r7, #0]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d00b      	beq.n	8012f4c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012f34:	683b      	ldr	r3, [r7, #0]
 8012f36:	2201      	movs	r2, #1
 8012f38:	601a      	str	r2, [r3, #0]
 8012f3a:	e007      	b.n	8012f4c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012f3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012f40:	3301      	adds	r3, #1
 8012f42:	b2db      	uxtb	r3, r3
 8012f44:	b25a      	sxtb	r2, r3
 8012f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8012f4c:	2301      	movs	r3, #1
 8012f4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8012f50:	e001      	b.n	8012f56 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012f52:	2300      	movs	r3, #0
 8012f54:	637b      	str	r3, [r7, #52]	@ 0x34
 8012f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f58:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	f383 8811 	msr	BASEPRI, r3
}
 8012f60:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8012f64:	4618      	mov	r0, r3
 8012f66:	3738      	adds	r7, #56	@ 0x38
 8012f68:	46bd      	mov	sp, r7
 8012f6a:	bd80      	pop	{r7, pc}

08012f6c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012f6c:	b580      	push	{r7, lr}
 8012f6e:	b08c      	sub	sp, #48	@ 0x30
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	60f8      	str	r0, [r7, #12]
 8012f74:	60b9      	str	r1, [r7, #8]
 8012f76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012f78:	2300      	movs	r3, #0
 8012f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d10b      	bne.n	8012f9e <xQueueReceive+0x32>
	__asm volatile
 8012f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f8a:	f383 8811 	msr	BASEPRI, r3
 8012f8e:	f3bf 8f6f 	isb	sy
 8012f92:	f3bf 8f4f 	dsb	sy
 8012f96:	623b      	str	r3, [r7, #32]
}
 8012f98:	bf00      	nop
 8012f9a:	bf00      	nop
 8012f9c:	e7fd      	b.n	8012f9a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012f9e:	68bb      	ldr	r3, [r7, #8]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d103      	bne.n	8012fac <xQueueReceive+0x40>
 8012fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d101      	bne.n	8012fb0 <xQueueReceive+0x44>
 8012fac:	2301      	movs	r3, #1
 8012fae:	e000      	b.n	8012fb2 <xQueueReceive+0x46>
 8012fb0:	2300      	movs	r3, #0
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d10b      	bne.n	8012fce <xQueueReceive+0x62>
	__asm volatile
 8012fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012fba:	f383 8811 	msr	BASEPRI, r3
 8012fbe:	f3bf 8f6f 	isb	sy
 8012fc2:	f3bf 8f4f 	dsb	sy
 8012fc6:	61fb      	str	r3, [r7, #28]
}
 8012fc8:	bf00      	nop
 8012fca:	bf00      	nop
 8012fcc:	e7fd      	b.n	8012fca <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012fce:	f001 f9f5 	bl	80143bc <xTaskGetSchedulerState>
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d102      	bne.n	8012fde <xQueueReceive+0x72>
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d101      	bne.n	8012fe2 <xQueueReceive+0x76>
 8012fde:	2301      	movs	r3, #1
 8012fe0:	e000      	b.n	8012fe4 <xQueueReceive+0x78>
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d10b      	bne.n	8013000 <xQueueReceive+0x94>
	__asm volatile
 8012fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012fec:	f383 8811 	msr	BASEPRI, r3
 8012ff0:	f3bf 8f6f 	isb	sy
 8012ff4:	f3bf 8f4f 	dsb	sy
 8012ff8:	61bb      	str	r3, [r7, #24]
}
 8012ffa:	bf00      	nop
 8012ffc:	bf00      	nop
 8012ffe:	e7fd      	b.n	8012ffc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013000:	f001 fe62 	bl	8014cc8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013008:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801300a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801300c:	2b00      	cmp	r3, #0
 801300e:	d01f      	beq.n	8013050 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013010:	68b9      	ldr	r1, [r7, #8]
 8013012:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013014:	f000 faa0 	bl	8013558 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801301a:	1e5a      	subs	r2, r3, #1
 801301c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801301e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013022:	691b      	ldr	r3, [r3, #16]
 8013024:	2b00      	cmp	r3, #0
 8013026:	d00f      	beq.n	8013048 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801302a:	3310      	adds	r3, #16
 801302c:	4618      	mov	r0, r3
 801302e:	f001 f81f 	bl	8014070 <xTaskRemoveFromEventList>
 8013032:	4603      	mov	r3, r0
 8013034:	2b00      	cmp	r3, #0
 8013036:	d007      	beq.n	8013048 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013038:	4b3c      	ldr	r3, [pc, #240]	@ (801312c <xQueueReceive+0x1c0>)
 801303a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801303e:	601a      	str	r2, [r3, #0]
 8013040:	f3bf 8f4f 	dsb	sy
 8013044:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013048:	f001 fe70 	bl	8014d2c <vPortExitCritical>
				return pdPASS;
 801304c:	2301      	movs	r3, #1
 801304e:	e069      	b.n	8013124 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d103      	bne.n	801305e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013056:	f001 fe69 	bl	8014d2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801305a:	2300      	movs	r3, #0
 801305c:	e062      	b.n	8013124 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801305e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013060:	2b00      	cmp	r3, #0
 8013062:	d106      	bne.n	8013072 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013064:	f107 0310 	add.w	r3, r7, #16
 8013068:	4618      	mov	r0, r3
 801306a:	f001 f865 	bl	8014138 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801306e:	2301      	movs	r3, #1
 8013070:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013072:	f001 fe5b 	bl	8014d2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013076:	f000 fdf1 	bl	8013c5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801307a:	f001 fe25 	bl	8014cc8 <vPortEnterCritical>
 801307e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013080:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013084:	b25b      	sxtb	r3, r3
 8013086:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801308a:	d103      	bne.n	8013094 <xQueueReceive+0x128>
 801308c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801308e:	2200      	movs	r2, #0
 8013090:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013096:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801309a:	b25b      	sxtb	r3, r3
 801309c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80130a0:	d103      	bne.n	80130aa <xQueueReceive+0x13e>
 80130a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130a4:	2200      	movs	r2, #0
 80130a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80130aa:	f001 fe3f 	bl	8014d2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80130ae:	1d3a      	adds	r2, r7, #4
 80130b0:	f107 0310 	add.w	r3, r7, #16
 80130b4:	4611      	mov	r1, r2
 80130b6:	4618      	mov	r0, r3
 80130b8:	f001 f854 	bl	8014164 <xTaskCheckForTimeOut>
 80130bc:	4603      	mov	r3, r0
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d123      	bne.n	801310a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80130c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80130c4:	f000 fac0 	bl	8013648 <prvIsQueueEmpty>
 80130c8:	4603      	mov	r3, r0
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d017      	beq.n	80130fe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80130ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130d0:	3324      	adds	r3, #36	@ 0x24
 80130d2:	687a      	ldr	r2, [r7, #4]
 80130d4:	4611      	mov	r1, r2
 80130d6:	4618      	mov	r0, r3
 80130d8:	f000 ffa4 	bl	8014024 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80130dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80130de:	f000 fa61 	bl	80135a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80130e2:	f000 fdc9 	bl	8013c78 <xTaskResumeAll>
 80130e6:	4603      	mov	r3, r0
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d189      	bne.n	8013000 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80130ec:	4b0f      	ldr	r3, [pc, #60]	@ (801312c <xQueueReceive+0x1c0>)
 80130ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80130f2:	601a      	str	r2, [r3, #0]
 80130f4:	f3bf 8f4f 	dsb	sy
 80130f8:	f3bf 8f6f 	isb	sy
 80130fc:	e780      	b.n	8013000 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80130fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013100:	f000 fa50 	bl	80135a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013104:	f000 fdb8 	bl	8013c78 <xTaskResumeAll>
 8013108:	e77a      	b.n	8013000 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801310a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801310c:	f000 fa4a 	bl	80135a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013110:	f000 fdb2 	bl	8013c78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013114:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013116:	f000 fa97 	bl	8013648 <prvIsQueueEmpty>
 801311a:	4603      	mov	r3, r0
 801311c:	2b00      	cmp	r3, #0
 801311e:	f43f af6f 	beq.w	8013000 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013122:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013124:	4618      	mov	r0, r3
 8013126:	3730      	adds	r7, #48	@ 0x30
 8013128:	46bd      	mov	sp, r7
 801312a:	bd80      	pop	{r7, pc}
 801312c:	e000ed04 	.word	0xe000ed04

08013130 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013130:	b580      	push	{r7, lr}
 8013132:	b08e      	sub	sp, #56	@ 0x38
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
 8013138:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801313a:	2300      	movs	r3, #0
 801313c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8013142:	2300      	movs	r3, #0
 8013144:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013148:	2b00      	cmp	r3, #0
 801314a:	d10b      	bne.n	8013164 <xQueueSemaphoreTake+0x34>
	__asm volatile
 801314c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013150:	f383 8811 	msr	BASEPRI, r3
 8013154:	f3bf 8f6f 	isb	sy
 8013158:	f3bf 8f4f 	dsb	sy
 801315c:	623b      	str	r3, [r7, #32]
}
 801315e:	bf00      	nop
 8013160:	bf00      	nop
 8013162:	e7fd      	b.n	8013160 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013168:	2b00      	cmp	r3, #0
 801316a:	d00b      	beq.n	8013184 <xQueueSemaphoreTake+0x54>
	__asm volatile
 801316c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013170:	f383 8811 	msr	BASEPRI, r3
 8013174:	f3bf 8f6f 	isb	sy
 8013178:	f3bf 8f4f 	dsb	sy
 801317c:	61fb      	str	r3, [r7, #28]
}
 801317e:	bf00      	nop
 8013180:	bf00      	nop
 8013182:	e7fd      	b.n	8013180 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013184:	f001 f91a 	bl	80143bc <xTaskGetSchedulerState>
 8013188:	4603      	mov	r3, r0
 801318a:	2b00      	cmp	r3, #0
 801318c:	d102      	bne.n	8013194 <xQueueSemaphoreTake+0x64>
 801318e:	683b      	ldr	r3, [r7, #0]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d101      	bne.n	8013198 <xQueueSemaphoreTake+0x68>
 8013194:	2301      	movs	r3, #1
 8013196:	e000      	b.n	801319a <xQueueSemaphoreTake+0x6a>
 8013198:	2300      	movs	r3, #0
 801319a:	2b00      	cmp	r3, #0
 801319c:	d10b      	bne.n	80131b6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 801319e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131a2:	f383 8811 	msr	BASEPRI, r3
 80131a6:	f3bf 8f6f 	isb	sy
 80131aa:	f3bf 8f4f 	dsb	sy
 80131ae:	61bb      	str	r3, [r7, #24]
}
 80131b0:	bf00      	nop
 80131b2:	bf00      	nop
 80131b4:	e7fd      	b.n	80131b2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80131b6:	f001 fd87 	bl	8014cc8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80131ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80131be:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80131c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d024      	beq.n	8013210 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80131c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131c8:	1e5a      	subs	r2, r3, #1
 80131ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131cc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80131ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d104      	bne.n	80131e0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80131d6:	f001 fa9d 	bl	8014714 <pvTaskIncrementMutexHeldCount>
 80131da:	4602      	mov	r2, r0
 80131dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131de:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80131e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131e2:	691b      	ldr	r3, [r3, #16]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d00f      	beq.n	8013208 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80131e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131ea:	3310      	adds	r3, #16
 80131ec:	4618      	mov	r0, r3
 80131ee:	f000 ff3f 	bl	8014070 <xTaskRemoveFromEventList>
 80131f2:	4603      	mov	r3, r0
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d007      	beq.n	8013208 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80131f8:	4b54      	ldr	r3, [pc, #336]	@ (801334c <xQueueSemaphoreTake+0x21c>)
 80131fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80131fe:	601a      	str	r2, [r3, #0]
 8013200:	f3bf 8f4f 	dsb	sy
 8013204:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013208:	f001 fd90 	bl	8014d2c <vPortExitCritical>
				return pdPASS;
 801320c:	2301      	movs	r3, #1
 801320e:	e098      	b.n	8013342 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013210:	683b      	ldr	r3, [r7, #0]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d112      	bne.n	801323c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8013216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013218:	2b00      	cmp	r3, #0
 801321a:	d00b      	beq.n	8013234 <xQueueSemaphoreTake+0x104>
	__asm volatile
 801321c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013220:	f383 8811 	msr	BASEPRI, r3
 8013224:	f3bf 8f6f 	isb	sy
 8013228:	f3bf 8f4f 	dsb	sy
 801322c:	617b      	str	r3, [r7, #20]
}
 801322e:	bf00      	nop
 8013230:	bf00      	nop
 8013232:	e7fd      	b.n	8013230 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8013234:	f001 fd7a 	bl	8014d2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013238:	2300      	movs	r3, #0
 801323a:	e082      	b.n	8013342 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 801323c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801323e:	2b00      	cmp	r3, #0
 8013240:	d106      	bne.n	8013250 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013242:	f107 030c 	add.w	r3, r7, #12
 8013246:	4618      	mov	r0, r3
 8013248:	f000 ff76 	bl	8014138 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801324c:	2301      	movs	r3, #1
 801324e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013250:	f001 fd6c 	bl	8014d2c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013254:	f000 fd02 	bl	8013c5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013258:	f001 fd36 	bl	8014cc8 <vPortEnterCritical>
 801325c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801325e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013262:	b25b      	sxtb	r3, r3
 8013264:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013268:	d103      	bne.n	8013272 <xQueueSemaphoreTake+0x142>
 801326a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801326c:	2200      	movs	r2, #0
 801326e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013274:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013278:	b25b      	sxtb	r3, r3
 801327a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801327e:	d103      	bne.n	8013288 <xQueueSemaphoreTake+0x158>
 8013280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013282:	2200      	movs	r2, #0
 8013284:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013288:	f001 fd50 	bl	8014d2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801328c:	463a      	mov	r2, r7
 801328e:	f107 030c 	add.w	r3, r7, #12
 8013292:	4611      	mov	r1, r2
 8013294:	4618      	mov	r0, r3
 8013296:	f000 ff65 	bl	8014164 <xTaskCheckForTimeOut>
 801329a:	4603      	mov	r3, r0
 801329c:	2b00      	cmp	r3, #0
 801329e:	d132      	bne.n	8013306 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80132a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80132a2:	f000 f9d1 	bl	8013648 <prvIsQueueEmpty>
 80132a6:	4603      	mov	r3, r0
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d026      	beq.n	80132fa <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80132ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d109      	bne.n	80132c8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80132b4:	f001 fd08 	bl	8014cc8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80132b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132ba:	689b      	ldr	r3, [r3, #8]
 80132bc:	4618      	mov	r0, r3
 80132be:	f001 f89b 	bl	80143f8 <xTaskPriorityInherit>
 80132c2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80132c4:	f001 fd32 	bl	8014d2c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80132c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132ca:	3324      	adds	r3, #36	@ 0x24
 80132cc:	683a      	ldr	r2, [r7, #0]
 80132ce:	4611      	mov	r1, r2
 80132d0:	4618      	mov	r0, r3
 80132d2:	f000 fea7 	bl	8014024 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80132d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80132d8:	f000 f964 	bl	80135a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80132dc:	f000 fccc 	bl	8013c78 <xTaskResumeAll>
 80132e0:	4603      	mov	r3, r0
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	f47f af67 	bne.w	80131b6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80132e8:	4b18      	ldr	r3, [pc, #96]	@ (801334c <xQueueSemaphoreTake+0x21c>)
 80132ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80132ee:	601a      	str	r2, [r3, #0]
 80132f0:	f3bf 8f4f 	dsb	sy
 80132f4:	f3bf 8f6f 	isb	sy
 80132f8:	e75d      	b.n	80131b6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80132fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80132fc:	f000 f952 	bl	80135a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013300:	f000 fcba 	bl	8013c78 <xTaskResumeAll>
 8013304:	e757      	b.n	80131b6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8013306:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013308:	f000 f94c 	bl	80135a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801330c:	f000 fcb4 	bl	8013c78 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013310:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013312:	f000 f999 	bl	8013648 <prvIsQueueEmpty>
 8013316:	4603      	mov	r3, r0
 8013318:	2b00      	cmp	r3, #0
 801331a:	f43f af4c 	beq.w	80131b6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801331e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013320:	2b00      	cmp	r3, #0
 8013322:	d00d      	beq.n	8013340 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8013324:	f001 fcd0 	bl	8014cc8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013328:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801332a:	f000 f893 	bl	8013454 <prvGetDisinheritPriorityAfterTimeout>
 801332e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013332:	689b      	ldr	r3, [r3, #8]
 8013334:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013336:	4618      	mov	r0, r3
 8013338:	f001 f95c 	bl	80145f4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801333c:	f001 fcf6 	bl	8014d2c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013340:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013342:	4618      	mov	r0, r3
 8013344:	3738      	adds	r7, #56	@ 0x38
 8013346:	46bd      	mov	sp, r7
 8013348:	bd80      	pop	{r7, pc}
 801334a:	bf00      	nop
 801334c:	e000ed04 	.word	0xe000ed04

08013350 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013350:	b580      	push	{r7, lr}
 8013352:	b08e      	sub	sp, #56	@ 0x38
 8013354:	af00      	add	r7, sp, #0
 8013356:	60f8      	str	r0, [r7, #12]
 8013358:	60b9      	str	r1, [r7, #8]
 801335a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8013360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013362:	2b00      	cmp	r3, #0
 8013364:	d10b      	bne.n	801337e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8013366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801336a:	f383 8811 	msr	BASEPRI, r3
 801336e:	f3bf 8f6f 	isb	sy
 8013372:	f3bf 8f4f 	dsb	sy
 8013376:	623b      	str	r3, [r7, #32]
}
 8013378:	bf00      	nop
 801337a:	bf00      	nop
 801337c:	e7fd      	b.n	801337a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801337e:	68bb      	ldr	r3, [r7, #8]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d103      	bne.n	801338c <xQueueReceiveFromISR+0x3c>
 8013384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013388:	2b00      	cmp	r3, #0
 801338a:	d101      	bne.n	8013390 <xQueueReceiveFromISR+0x40>
 801338c:	2301      	movs	r3, #1
 801338e:	e000      	b.n	8013392 <xQueueReceiveFromISR+0x42>
 8013390:	2300      	movs	r3, #0
 8013392:	2b00      	cmp	r3, #0
 8013394:	d10b      	bne.n	80133ae <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8013396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801339a:	f383 8811 	msr	BASEPRI, r3
 801339e:	f3bf 8f6f 	isb	sy
 80133a2:	f3bf 8f4f 	dsb	sy
 80133a6:	61fb      	str	r3, [r7, #28]
}
 80133a8:	bf00      	nop
 80133aa:	bf00      	nop
 80133ac:	e7fd      	b.n	80133aa <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80133ae:	f001 fd6b 	bl	8014e88 <vPortValidateInterruptPriority>
	__asm volatile
 80133b2:	f3ef 8211 	mrs	r2, BASEPRI
 80133b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133ba:	f383 8811 	msr	BASEPRI, r3
 80133be:	f3bf 8f6f 	isb	sy
 80133c2:	f3bf 8f4f 	dsb	sy
 80133c6:	61ba      	str	r2, [r7, #24]
 80133c8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80133ca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80133cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80133ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80133d2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80133d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d02f      	beq.n	801343a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80133da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80133e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80133e4:	68b9      	ldr	r1, [r7, #8]
 80133e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80133e8:	f000 f8b6 	bl	8013558 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80133ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133ee:	1e5a      	subs	r2, r3, #1
 80133f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133f2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80133f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80133f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80133fc:	d112      	bne.n	8013424 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80133fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013400:	691b      	ldr	r3, [r3, #16]
 8013402:	2b00      	cmp	r3, #0
 8013404:	d016      	beq.n	8013434 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013408:	3310      	adds	r3, #16
 801340a:	4618      	mov	r0, r3
 801340c:	f000 fe30 	bl	8014070 <xTaskRemoveFromEventList>
 8013410:	4603      	mov	r3, r0
 8013412:	2b00      	cmp	r3, #0
 8013414:	d00e      	beq.n	8013434 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	2b00      	cmp	r3, #0
 801341a:	d00b      	beq.n	8013434 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	2201      	movs	r2, #1
 8013420:	601a      	str	r2, [r3, #0]
 8013422:	e007      	b.n	8013434 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013424:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013428:	3301      	adds	r3, #1
 801342a:	b2db      	uxtb	r3, r3
 801342c:	b25a      	sxtb	r2, r3
 801342e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013430:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8013434:	2301      	movs	r3, #1
 8013436:	637b      	str	r3, [r7, #52]	@ 0x34
 8013438:	e001      	b.n	801343e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 801343a:	2300      	movs	r3, #0
 801343c:	637b      	str	r3, [r7, #52]	@ 0x34
 801343e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013440:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013442:	693b      	ldr	r3, [r7, #16]
 8013444:	f383 8811 	msr	BASEPRI, r3
}
 8013448:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801344a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801344c:	4618      	mov	r0, r3
 801344e:	3738      	adds	r7, #56	@ 0x38
 8013450:	46bd      	mov	sp, r7
 8013452:	bd80      	pop	{r7, pc}

08013454 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8013454:	b480      	push	{r7}
 8013456:	b085      	sub	sp, #20
 8013458:	af00      	add	r7, sp, #0
 801345a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013460:	2b00      	cmp	r3, #0
 8013462:	d006      	beq.n	8013472 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	f1c3 0307 	rsb	r3, r3, #7
 801346e:	60fb      	str	r3, [r7, #12]
 8013470:	e001      	b.n	8013476 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8013472:	2300      	movs	r3, #0
 8013474:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8013476:	68fb      	ldr	r3, [r7, #12]
	}
 8013478:	4618      	mov	r0, r3
 801347a:	3714      	adds	r7, #20
 801347c:	46bd      	mov	sp, r7
 801347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013482:	4770      	bx	lr

08013484 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013484:	b580      	push	{r7, lr}
 8013486:	b086      	sub	sp, #24
 8013488:	af00      	add	r7, sp, #0
 801348a:	60f8      	str	r0, [r7, #12]
 801348c:	60b9      	str	r1, [r7, #8]
 801348e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013490:	2300      	movs	r3, #0
 8013492:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013498:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d10d      	bne.n	80134be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d14d      	bne.n	8013546 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	689b      	ldr	r3, [r3, #8]
 80134ae:	4618      	mov	r0, r3
 80134b0:	f001 f818 	bl	80144e4 <xTaskPriorityDisinherit>
 80134b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	2200      	movs	r2, #0
 80134ba:	609a      	str	r2, [r3, #8]
 80134bc:	e043      	b.n	8013546 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d119      	bne.n	80134f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	6858      	ldr	r0, [r3, #4]
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80134cc:	461a      	mov	r2, r3
 80134ce:	68b9      	ldr	r1, [r7, #8]
 80134d0:	f003 fd46 	bl	8016f60 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	685a      	ldr	r2, [r3, #4]
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80134dc:	441a      	add	r2, r3
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	685a      	ldr	r2, [r3, #4]
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	689b      	ldr	r3, [r3, #8]
 80134ea:	429a      	cmp	r2, r3
 80134ec:	d32b      	bcc.n	8013546 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	681a      	ldr	r2, [r3, #0]
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	605a      	str	r2, [r3, #4]
 80134f6:	e026      	b.n	8013546 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	68d8      	ldr	r0, [r3, #12]
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013500:	461a      	mov	r2, r3
 8013502:	68b9      	ldr	r1, [r7, #8]
 8013504:	f003 fd2c 	bl	8016f60 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	68da      	ldr	r2, [r3, #12]
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013510:	425b      	negs	r3, r3
 8013512:	441a      	add	r2, r3
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	68da      	ldr	r2, [r3, #12]
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	429a      	cmp	r2, r3
 8013522:	d207      	bcs.n	8013534 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	689a      	ldr	r2, [r3, #8]
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801352c:	425b      	negs	r3, r3
 801352e:	441a      	add	r2, r3
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	2b02      	cmp	r3, #2
 8013538:	d105      	bne.n	8013546 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801353a:	693b      	ldr	r3, [r7, #16]
 801353c:	2b00      	cmp	r3, #0
 801353e:	d002      	beq.n	8013546 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013540:	693b      	ldr	r3, [r7, #16]
 8013542:	3b01      	subs	r3, #1
 8013544:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013546:	693b      	ldr	r3, [r7, #16]
 8013548:	1c5a      	adds	r2, r3, #1
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801354e:	697b      	ldr	r3, [r7, #20]
}
 8013550:	4618      	mov	r0, r3
 8013552:	3718      	adds	r7, #24
 8013554:	46bd      	mov	sp, r7
 8013556:	bd80      	pop	{r7, pc}

08013558 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013558:	b580      	push	{r7, lr}
 801355a:	b082      	sub	sp, #8
 801355c:	af00      	add	r7, sp, #0
 801355e:	6078      	str	r0, [r7, #4]
 8013560:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013566:	2b00      	cmp	r3, #0
 8013568:	d018      	beq.n	801359c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	68da      	ldr	r2, [r3, #12]
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013572:	441a      	add	r2, r3
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	68da      	ldr	r2, [r3, #12]
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	689b      	ldr	r3, [r3, #8]
 8013580:	429a      	cmp	r2, r3
 8013582:	d303      	bcc.n	801358c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	681a      	ldr	r2, [r3, #0]
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	68d9      	ldr	r1, [r3, #12]
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013594:	461a      	mov	r2, r3
 8013596:	6838      	ldr	r0, [r7, #0]
 8013598:	f003 fce2 	bl	8016f60 <memcpy>
	}
}
 801359c:	bf00      	nop
 801359e:	3708      	adds	r7, #8
 80135a0:	46bd      	mov	sp, r7
 80135a2:	bd80      	pop	{r7, pc}

080135a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80135a4:	b580      	push	{r7, lr}
 80135a6:	b084      	sub	sp, #16
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80135ac:	f001 fb8c 	bl	8014cc8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80135b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80135b8:	e011      	b.n	80135de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d012      	beq.n	80135e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	3324      	adds	r3, #36	@ 0x24
 80135c6:	4618      	mov	r0, r3
 80135c8:	f000 fd52 	bl	8014070 <xTaskRemoveFromEventList>
 80135cc:	4603      	mov	r3, r0
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d001      	beq.n	80135d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80135d2:	f000 fe2b 	bl	801422c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80135d6:	7bfb      	ldrb	r3, [r7, #15]
 80135d8:	3b01      	subs	r3, #1
 80135da:	b2db      	uxtb	r3, r3
 80135dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80135de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	dce9      	bgt.n	80135ba <prvUnlockQueue+0x16>
 80135e6:	e000      	b.n	80135ea <prvUnlockQueue+0x46>
					break;
 80135e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	22ff      	movs	r2, #255	@ 0xff
 80135ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80135f2:	f001 fb9b 	bl	8014d2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80135f6:	f001 fb67 	bl	8014cc8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013600:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013602:	e011      	b.n	8013628 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	691b      	ldr	r3, [r3, #16]
 8013608:	2b00      	cmp	r3, #0
 801360a:	d012      	beq.n	8013632 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	3310      	adds	r3, #16
 8013610:	4618      	mov	r0, r3
 8013612:	f000 fd2d 	bl	8014070 <xTaskRemoveFromEventList>
 8013616:	4603      	mov	r3, r0
 8013618:	2b00      	cmp	r3, #0
 801361a:	d001      	beq.n	8013620 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801361c:	f000 fe06 	bl	801422c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013620:	7bbb      	ldrb	r3, [r7, #14]
 8013622:	3b01      	subs	r3, #1
 8013624:	b2db      	uxtb	r3, r3
 8013626:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013628:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801362c:	2b00      	cmp	r3, #0
 801362e:	dce9      	bgt.n	8013604 <prvUnlockQueue+0x60>
 8013630:	e000      	b.n	8013634 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013632:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	22ff      	movs	r2, #255	@ 0xff
 8013638:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 801363c:	f001 fb76 	bl	8014d2c <vPortExitCritical>
}
 8013640:	bf00      	nop
 8013642:	3710      	adds	r7, #16
 8013644:	46bd      	mov	sp, r7
 8013646:	bd80      	pop	{r7, pc}

08013648 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013648:	b580      	push	{r7, lr}
 801364a:	b084      	sub	sp, #16
 801364c:	af00      	add	r7, sp, #0
 801364e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013650:	f001 fb3a 	bl	8014cc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013658:	2b00      	cmp	r3, #0
 801365a:	d102      	bne.n	8013662 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801365c:	2301      	movs	r3, #1
 801365e:	60fb      	str	r3, [r7, #12]
 8013660:	e001      	b.n	8013666 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013662:	2300      	movs	r3, #0
 8013664:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013666:	f001 fb61 	bl	8014d2c <vPortExitCritical>

	return xReturn;
 801366a:	68fb      	ldr	r3, [r7, #12]
}
 801366c:	4618      	mov	r0, r3
 801366e:	3710      	adds	r7, #16
 8013670:	46bd      	mov	sp, r7
 8013672:	bd80      	pop	{r7, pc}

08013674 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013674:	b580      	push	{r7, lr}
 8013676:	b084      	sub	sp, #16
 8013678:	af00      	add	r7, sp, #0
 801367a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801367c:	f001 fb24 	bl	8014cc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013688:	429a      	cmp	r2, r3
 801368a:	d102      	bne.n	8013692 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801368c:	2301      	movs	r3, #1
 801368e:	60fb      	str	r3, [r7, #12]
 8013690:	e001      	b.n	8013696 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013692:	2300      	movs	r3, #0
 8013694:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013696:	f001 fb49 	bl	8014d2c <vPortExitCritical>

	return xReturn;
 801369a:	68fb      	ldr	r3, [r7, #12]
}
 801369c:	4618      	mov	r0, r3
 801369e:	3710      	adds	r7, #16
 80136a0:	46bd      	mov	sp, r7
 80136a2:	bd80      	pop	{r7, pc}

080136a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80136a4:	b580      	push	{r7, lr}
 80136a6:	b08c      	sub	sp, #48	@ 0x30
 80136a8:	af04      	add	r7, sp, #16
 80136aa:	60f8      	str	r0, [r7, #12]
 80136ac:	60b9      	str	r1, [r7, #8]
 80136ae:	603b      	str	r3, [r7, #0]
 80136b0:	4613      	mov	r3, r2
 80136b2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80136b4:	88fb      	ldrh	r3, [r7, #6]
 80136b6:	009b      	lsls	r3, r3, #2
 80136b8:	4618      	mov	r0, r3
 80136ba:	f001 fc27 	bl	8014f0c <pvPortMalloc>
 80136be:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80136c0:	697b      	ldr	r3, [r7, #20]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d00e      	beq.n	80136e4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80136c6:	20ac      	movs	r0, #172	@ 0xac
 80136c8:	f001 fc20 	bl	8014f0c <pvPortMalloc>
 80136cc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80136ce:	69fb      	ldr	r3, [r7, #28]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d003      	beq.n	80136dc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80136d4:	69fb      	ldr	r3, [r7, #28]
 80136d6:	697a      	ldr	r2, [r7, #20]
 80136d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80136da:	e005      	b.n	80136e8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80136dc:	6978      	ldr	r0, [r7, #20]
 80136de:	f001 fce3 	bl	80150a8 <vPortFree>
 80136e2:	e001      	b.n	80136e8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80136e4:	2300      	movs	r3, #0
 80136e6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80136e8:	69fb      	ldr	r3, [r7, #28]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d013      	beq.n	8013716 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80136ee:	88fa      	ldrh	r2, [r7, #6]
 80136f0:	2300      	movs	r3, #0
 80136f2:	9303      	str	r3, [sp, #12]
 80136f4:	69fb      	ldr	r3, [r7, #28]
 80136f6:	9302      	str	r3, [sp, #8]
 80136f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136fa:	9301      	str	r3, [sp, #4]
 80136fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136fe:	9300      	str	r3, [sp, #0]
 8013700:	683b      	ldr	r3, [r7, #0]
 8013702:	68b9      	ldr	r1, [r7, #8]
 8013704:	68f8      	ldr	r0, [r7, #12]
 8013706:	f000 f80f 	bl	8013728 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801370a:	69f8      	ldr	r0, [r7, #28]
 801370c:	f000 f8b6 	bl	801387c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013710:	2301      	movs	r3, #1
 8013712:	61bb      	str	r3, [r7, #24]
 8013714:	e002      	b.n	801371c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013716:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801371a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801371c:	69bb      	ldr	r3, [r7, #24]
	}
 801371e:	4618      	mov	r0, r3
 8013720:	3720      	adds	r7, #32
 8013722:	46bd      	mov	sp, r7
 8013724:	bd80      	pop	{r7, pc}
	...

08013728 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013728:	b580      	push	{r7, lr}
 801372a:	b088      	sub	sp, #32
 801372c:	af00      	add	r7, sp, #0
 801372e:	60f8      	str	r0, [r7, #12]
 8013730:	60b9      	str	r1, [r7, #8]
 8013732:	607a      	str	r2, [r7, #4]
 8013734:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013738:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	009b      	lsls	r3, r3, #2
 801373e:	461a      	mov	r2, r3
 8013740:	21a5      	movs	r1, #165	@ 0xa5
 8013742:	f003 fb6f 	bl	8016e24 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013748:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8013750:	3b01      	subs	r3, #1
 8013752:	009b      	lsls	r3, r3, #2
 8013754:	4413      	add	r3, r2
 8013756:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013758:	69bb      	ldr	r3, [r7, #24]
 801375a:	f023 0307 	bic.w	r3, r3, #7
 801375e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013760:	69bb      	ldr	r3, [r7, #24]
 8013762:	f003 0307 	and.w	r3, r3, #7
 8013766:	2b00      	cmp	r3, #0
 8013768:	d00b      	beq.n	8013782 <prvInitialiseNewTask+0x5a>
	__asm volatile
 801376a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801376e:	f383 8811 	msr	BASEPRI, r3
 8013772:	f3bf 8f6f 	isb	sy
 8013776:	f3bf 8f4f 	dsb	sy
 801377a:	617b      	str	r3, [r7, #20]
}
 801377c:	bf00      	nop
 801377e:	bf00      	nop
 8013780:	e7fd      	b.n	801377e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013782:	68bb      	ldr	r3, [r7, #8]
 8013784:	2b00      	cmp	r3, #0
 8013786:	d01f      	beq.n	80137c8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013788:	2300      	movs	r3, #0
 801378a:	61fb      	str	r3, [r7, #28]
 801378c:	e012      	b.n	80137b4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801378e:	68ba      	ldr	r2, [r7, #8]
 8013790:	69fb      	ldr	r3, [r7, #28]
 8013792:	4413      	add	r3, r2
 8013794:	7819      	ldrb	r1, [r3, #0]
 8013796:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013798:	69fb      	ldr	r3, [r7, #28]
 801379a:	4413      	add	r3, r2
 801379c:	3334      	adds	r3, #52	@ 0x34
 801379e:	460a      	mov	r2, r1
 80137a0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80137a2:	68ba      	ldr	r2, [r7, #8]
 80137a4:	69fb      	ldr	r3, [r7, #28]
 80137a6:	4413      	add	r3, r2
 80137a8:	781b      	ldrb	r3, [r3, #0]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d006      	beq.n	80137bc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80137ae:	69fb      	ldr	r3, [r7, #28]
 80137b0:	3301      	adds	r3, #1
 80137b2:	61fb      	str	r3, [r7, #28]
 80137b4:	69fb      	ldr	r3, [r7, #28]
 80137b6:	2b0f      	cmp	r3, #15
 80137b8:	d9e9      	bls.n	801378e <prvInitialiseNewTask+0x66>
 80137ba:	e000      	b.n	80137be <prvInitialiseNewTask+0x96>
			{
				break;
 80137bc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80137be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137c0:	2200      	movs	r2, #0
 80137c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80137c6:	e003      	b.n	80137d0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80137c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137ca:	2200      	movs	r2, #0
 80137cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80137d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137d2:	2b06      	cmp	r3, #6
 80137d4:	d901      	bls.n	80137da <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80137d6:	2306      	movs	r3, #6
 80137d8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80137da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80137de:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80137e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80137e4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80137e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137e8:	2200      	movs	r2, #0
 80137ea:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80137ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137ee:	3304      	adds	r3, #4
 80137f0:	4618      	mov	r0, r3
 80137f2:	f7ff f833 	bl	801285c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80137f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137f8:	3318      	adds	r3, #24
 80137fa:	4618      	mov	r0, r3
 80137fc:	f7ff f82e 	bl	801285c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013802:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013804:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013808:	f1c3 0207 	rsb	r2, r3, #7
 801380c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801380e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013812:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013814:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8013816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013818:	2200      	movs	r2, #0
 801381a:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801381c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801381e:	2200      	movs	r2, #0
 8013820:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013826:	2200      	movs	r2, #0
 8013828:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801382c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801382e:	3358      	adds	r3, #88	@ 0x58
 8013830:	224c      	movs	r2, #76	@ 0x4c
 8013832:	2100      	movs	r1, #0
 8013834:	4618      	mov	r0, r3
 8013836:	f003 faf5 	bl	8016e24 <memset>
 801383a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801383c:	4a0c      	ldr	r2, [pc, #48]	@ (8013870 <prvInitialiseNewTask+0x148>)
 801383e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8013840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013842:	4a0c      	ldr	r2, [pc, #48]	@ (8013874 <prvInitialiseNewTask+0x14c>)
 8013844:	661a      	str	r2, [r3, #96]	@ 0x60
 8013846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013848:	4a0b      	ldr	r2, [pc, #44]	@ (8013878 <prvInitialiseNewTask+0x150>)
 801384a:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801384c:	683a      	ldr	r2, [r7, #0]
 801384e:	68f9      	ldr	r1, [r7, #12]
 8013850:	69b8      	ldr	r0, [r7, #24]
 8013852:	f001 f90b 	bl	8014a6c <pxPortInitialiseStack>
 8013856:	4602      	mov	r2, r0
 8013858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801385a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801385c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801385e:	2b00      	cmp	r3, #0
 8013860:	d002      	beq.n	8013868 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013864:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013866:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013868:	bf00      	nop
 801386a:	3720      	adds	r7, #32
 801386c:	46bd      	mov	sp, r7
 801386e:	bd80      	pop	{r7, pc}
 8013870:	20005b88 	.word	0x20005b88
 8013874:	20005bf0 	.word	0x20005bf0
 8013878:	20005c58 	.word	0x20005c58

0801387c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801387c:	b580      	push	{r7, lr}
 801387e:	b082      	sub	sp, #8
 8013880:	af00      	add	r7, sp, #0
 8013882:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013884:	f001 fa20 	bl	8014cc8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013888:	4b2c      	ldr	r3, [pc, #176]	@ (801393c <prvAddNewTaskToReadyList+0xc0>)
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	3301      	adds	r3, #1
 801388e:	4a2b      	ldr	r2, [pc, #172]	@ (801393c <prvAddNewTaskToReadyList+0xc0>)
 8013890:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013892:	4b2b      	ldr	r3, [pc, #172]	@ (8013940 <prvAddNewTaskToReadyList+0xc4>)
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	2b00      	cmp	r3, #0
 8013898:	d109      	bne.n	80138ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801389a:	4a29      	ldr	r2, [pc, #164]	@ (8013940 <prvAddNewTaskToReadyList+0xc4>)
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80138a0:	4b26      	ldr	r3, [pc, #152]	@ (801393c <prvAddNewTaskToReadyList+0xc0>)
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	2b01      	cmp	r3, #1
 80138a6:	d110      	bne.n	80138ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80138a8:	f000 fce4 	bl	8014274 <prvInitialiseTaskLists>
 80138ac:	e00d      	b.n	80138ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80138ae:	4b25      	ldr	r3, [pc, #148]	@ (8013944 <prvAddNewTaskToReadyList+0xc8>)
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d109      	bne.n	80138ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80138b6:	4b22      	ldr	r3, [pc, #136]	@ (8013940 <prvAddNewTaskToReadyList+0xc4>)
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138c0:	429a      	cmp	r2, r3
 80138c2:	d802      	bhi.n	80138ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80138c4:	4a1e      	ldr	r2, [pc, #120]	@ (8013940 <prvAddNewTaskToReadyList+0xc4>)
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80138ca:	4b1f      	ldr	r3, [pc, #124]	@ (8013948 <prvAddNewTaskToReadyList+0xcc>)
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	3301      	adds	r3, #1
 80138d0:	4a1d      	ldr	r2, [pc, #116]	@ (8013948 <prvAddNewTaskToReadyList+0xcc>)
 80138d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80138d4:	4b1c      	ldr	r3, [pc, #112]	@ (8013948 <prvAddNewTaskToReadyList+0xcc>)
 80138d6:	681a      	ldr	r2, [r3, #0]
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138e0:	2201      	movs	r2, #1
 80138e2:	409a      	lsls	r2, r3
 80138e4:	4b19      	ldr	r3, [pc, #100]	@ (801394c <prvAddNewTaskToReadyList+0xd0>)
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	4313      	orrs	r3, r2
 80138ea:	4a18      	ldr	r2, [pc, #96]	@ (801394c <prvAddNewTaskToReadyList+0xd0>)
 80138ec:	6013      	str	r3, [r2, #0]
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80138f2:	4613      	mov	r3, r2
 80138f4:	009b      	lsls	r3, r3, #2
 80138f6:	4413      	add	r3, r2
 80138f8:	009b      	lsls	r3, r3, #2
 80138fa:	4a15      	ldr	r2, [pc, #84]	@ (8013950 <prvAddNewTaskToReadyList+0xd4>)
 80138fc:	441a      	add	r2, r3
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	3304      	adds	r3, #4
 8013902:	4619      	mov	r1, r3
 8013904:	4610      	mov	r0, r2
 8013906:	f7fe ffb6 	bl	8012876 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801390a:	f001 fa0f 	bl	8014d2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801390e:	4b0d      	ldr	r3, [pc, #52]	@ (8013944 <prvAddNewTaskToReadyList+0xc8>)
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	2b00      	cmp	r3, #0
 8013914:	d00e      	beq.n	8013934 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013916:	4b0a      	ldr	r3, [pc, #40]	@ (8013940 <prvAddNewTaskToReadyList+0xc4>)
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013920:	429a      	cmp	r2, r3
 8013922:	d207      	bcs.n	8013934 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013924:	4b0b      	ldr	r3, [pc, #44]	@ (8013954 <prvAddNewTaskToReadyList+0xd8>)
 8013926:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801392a:	601a      	str	r2, [r3, #0]
 801392c:	f3bf 8f4f 	dsb	sy
 8013930:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013934:	bf00      	nop
 8013936:	3708      	adds	r7, #8
 8013938:	46bd      	mov	sp, r7
 801393a:	bd80      	pop	{r7, pc}
 801393c:	20000bd0 	.word	0x20000bd0
 8013940:	20000ad0 	.word	0x20000ad0
 8013944:	20000bdc 	.word	0x20000bdc
 8013948:	20000bec 	.word	0x20000bec
 801394c:	20000bd8 	.word	0x20000bd8
 8013950:	20000ad4 	.word	0x20000ad4
 8013954:	e000ed04 	.word	0xe000ed04

08013958 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8013958:	b580      	push	{r7, lr}
 801395a:	b084      	sub	sp, #16
 801395c:	af00      	add	r7, sp, #0
 801395e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8013960:	f001 f9b2 	bl	8014cc8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d102      	bne.n	8013970 <vTaskDelete+0x18>
 801396a:	4b39      	ldr	r3, [pc, #228]	@ (8013a50 <vTaskDelete+0xf8>)
 801396c:	681b      	ldr	r3, [r3, #0]
 801396e:	e000      	b.n	8013972 <vTaskDelete+0x1a>
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	3304      	adds	r3, #4
 8013978:	4618      	mov	r0, r3
 801397a:	f7fe ffd9 	bl	8012930 <uxListRemove>
 801397e:	4603      	mov	r3, r0
 8013980:	2b00      	cmp	r3, #0
 8013982:	d115      	bne.n	80139b0 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013988:	4932      	ldr	r1, [pc, #200]	@ (8013a54 <vTaskDelete+0xfc>)
 801398a:	4613      	mov	r3, r2
 801398c:	009b      	lsls	r3, r3, #2
 801398e:	4413      	add	r3, r2
 8013990:	009b      	lsls	r3, r3, #2
 8013992:	440b      	add	r3, r1
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	2b00      	cmp	r3, #0
 8013998:	d10a      	bne.n	80139b0 <vTaskDelete+0x58>
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801399e:	2201      	movs	r2, #1
 80139a0:	fa02 f303 	lsl.w	r3, r2, r3
 80139a4:	43da      	mvns	r2, r3
 80139a6:	4b2c      	ldr	r3, [pc, #176]	@ (8013a58 <vTaskDelete+0x100>)
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	4013      	ands	r3, r2
 80139ac:	4a2a      	ldr	r2, [pc, #168]	@ (8013a58 <vTaskDelete+0x100>)
 80139ae:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d004      	beq.n	80139c2 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	3318      	adds	r3, #24
 80139bc:	4618      	mov	r0, r3
 80139be:	f7fe ffb7 	bl	8012930 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80139c2:	4b26      	ldr	r3, [pc, #152]	@ (8013a5c <vTaskDelete+0x104>)
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	3301      	adds	r3, #1
 80139c8:	4a24      	ldr	r2, [pc, #144]	@ (8013a5c <vTaskDelete+0x104>)
 80139ca:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80139cc:	4b20      	ldr	r3, [pc, #128]	@ (8013a50 <vTaskDelete+0xf8>)
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	68fa      	ldr	r2, [r7, #12]
 80139d2:	429a      	cmp	r2, r3
 80139d4:	d10b      	bne.n	80139ee <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	3304      	adds	r3, #4
 80139da:	4619      	mov	r1, r3
 80139dc:	4820      	ldr	r0, [pc, #128]	@ (8013a60 <vTaskDelete+0x108>)
 80139de:	f7fe ff4a 	bl	8012876 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80139e2:	4b20      	ldr	r3, [pc, #128]	@ (8013a64 <vTaskDelete+0x10c>)
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	3301      	adds	r3, #1
 80139e8:	4a1e      	ldr	r2, [pc, #120]	@ (8013a64 <vTaskDelete+0x10c>)
 80139ea:	6013      	str	r3, [r2, #0]
 80139ec:	e009      	b.n	8013a02 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80139ee:	4b1e      	ldr	r3, [pc, #120]	@ (8013a68 <vTaskDelete+0x110>)
 80139f0:	681b      	ldr	r3, [r3, #0]
 80139f2:	3b01      	subs	r3, #1
 80139f4:	4a1c      	ldr	r2, [pc, #112]	@ (8013a68 <vTaskDelete+0x110>)
 80139f6:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80139f8:	68f8      	ldr	r0, [r7, #12]
 80139fa:	f000 fca9 	bl	8014350 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80139fe:	f000 fcbd 	bl	801437c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8013a02:	f001 f993 	bl	8014d2c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8013a06:	4b19      	ldr	r3, [pc, #100]	@ (8013a6c <vTaskDelete+0x114>)
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d01c      	beq.n	8013a48 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 8013a0e:	4b10      	ldr	r3, [pc, #64]	@ (8013a50 <vTaskDelete+0xf8>)
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	68fa      	ldr	r2, [r7, #12]
 8013a14:	429a      	cmp	r2, r3
 8013a16:	d117      	bne.n	8013a48 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8013a18:	4b15      	ldr	r3, [pc, #84]	@ (8013a70 <vTaskDelete+0x118>)
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d00b      	beq.n	8013a38 <vTaskDelete+0xe0>
	__asm volatile
 8013a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a24:	f383 8811 	msr	BASEPRI, r3
 8013a28:	f3bf 8f6f 	isb	sy
 8013a2c:	f3bf 8f4f 	dsb	sy
 8013a30:	60bb      	str	r3, [r7, #8]
}
 8013a32:	bf00      	nop
 8013a34:	bf00      	nop
 8013a36:	e7fd      	b.n	8013a34 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8013a38:	4b0e      	ldr	r3, [pc, #56]	@ (8013a74 <vTaskDelete+0x11c>)
 8013a3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013a3e:	601a      	str	r2, [r3, #0]
 8013a40:	f3bf 8f4f 	dsb	sy
 8013a44:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013a48:	bf00      	nop
 8013a4a:	3710      	adds	r7, #16
 8013a4c:	46bd      	mov	sp, r7
 8013a4e:	bd80      	pop	{r7, pc}
 8013a50:	20000ad0 	.word	0x20000ad0
 8013a54:	20000ad4 	.word	0x20000ad4
 8013a58:	20000bd8 	.word	0x20000bd8
 8013a5c:	20000bec 	.word	0x20000bec
 8013a60:	20000ba4 	.word	0x20000ba4
 8013a64:	20000bb8 	.word	0x20000bb8
 8013a68:	20000bd0 	.word	0x20000bd0
 8013a6c:	20000bdc 	.word	0x20000bdc
 8013a70:	20000bf8 	.word	0x20000bf8
 8013a74:	e000ed04 	.word	0xe000ed04

08013a78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013a78:	b580      	push	{r7, lr}
 8013a7a:	b084      	sub	sp, #16
 8013a7c:	af00      	add	r7, sp, #0
 8013a7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013a80:	2300      	movs	r3, #0
 8013a82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d018      	beq.n	8013abc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013a8a:	4b14      	ldr	r3, [pc, #80]	@ (8013adc <vTaskDelay+0x64>)
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d00b      	beq.n	8013aaa <vTaskDelay+0x32>
	__asm volatile
 8013a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a96:	f383 8811 	msr	BASEPRI, r3
 8013a9a:	f3bf 8f6f 	isb	sy
 8013a9e:	f3bf 8f4f 	dsb	sy
 8013aa2:	60bb      	str	r3, [r7, #8]
}
 8013aa4:	bf00      	nop
 8013aa6:	bf00      	nop
 8013aa8:	e7fd      	b.n	8013aa6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8013aaa:	f000 f8d7 	bl	8013c5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013aae:	2100      	movs	r1, #0
 8013ab0:	6878      	ldr	r0, [r7, #4]
 8013ab2:	f000 ff75 	bl	80149a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013ab6:	f000 f8df 	bl	8013c78 <xTaskResumeAll>
 8013aba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d107      	bne.n	8013ad2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8013ac2:	4b07      	ldr	r3, [pc, #28]	@ (8013ae0 <vTaskDelay+0x68>)
 8013ac4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013ac8:	601a      	str	r2, [r3, #0]
 8013aca:	f3bf 8f4f 	dsb	sy
 8013ace:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013ad2:	bf00      	nop
 8013ad4:	3710      	adds	r7, #16
 8013ad6:	46bd      	mov	sp, r7
 8013ad8:	bd80      	pop	{r7, pc}
 8013ada:	bf00      	nop
 8013adc:	20000bf8 	.word	0x20000bf8
 8013ae0:	e000ed04 	.word	0xe000ed04

08013ae4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8013ae4:	b580      	push	{r7, lr}
 8013ae6:	b088      	sub	sp, #32
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8013af0:	69bb      	ldr	r3, [r7, #24]
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d10b      	bne.n	8013b0e <eTaskGetState+0x2a>
	__asm volatile
 8013af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013afa:	f383 8811 	msr	BASEPRI, r3
 8013afe:	f3bf 8f6f 	isb	sy
 8013b02:	f3bf 8f4f 	dsb	sy
 8013b06:	60bb      	str	r3, [r7, #8]
}
 8013b08:	bf00      	nop
 8013b0a:	bf00      	nop
 8013b0c:	e7fd      	b.n	8013b0a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8013b0e:	4b24      	ldr	r3, [pc, #144]	@ (8013ba0 <eTaskGetState+0xbc>)
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	69ba      	ldr	r2, [r7, #24]
 8013b14:	429a      	cmp	r2, r3
 8013b16:	d102      	bne.n	8013b1e <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8013b18:	2300      	movs	r3, #0
 8013b1a:	77fb      	strb	r3, [r7, #31]
 8013b1c:	e03a      	b.n	8013b94 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 8013b1e:	f001 f8d3 	bl	8014cc8 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8013b22:	69bb      	ldr	r3, [r7, #24]
 8013b24:	695b      	ldr	r3, [r3, #20]
 8013b26:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8013b28:	4b1e      	ldr	r3, [pc, #120]	@ (8013ba4 <eTaskGetState+0xc0>)
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8013b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8013ba8 <eTaskGetState+0xc4>)
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8013b34:	f001 f8fa 	bl	8014d2c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8013b38:	697a      	ldr	r2, [r7, #20]
 8013b3a:	693b      	ldr	r3, [r7, #16]
 8013b3c:	429a      	cmp	r2, r3
 8013b3e:	d003      	beq.n	8013b48 <eTaskGetState+0x64>
 8013b40:	697a      	ldr	r2, [r7, #20]
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	429a      	cmp	r2, r3
 8013b46:	d102      	bne.n	8013b4e <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8013b48:	2302      	movs	r3, #2
 8013b4a:	77fb      	strb	r3, [r7, #31]
 8013b4c:	e022      	b.n	8013b94 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8013b4e:	697b      	ldr	r3, [r7, #20]
 8013b50:	4a16      	ldr	r2, [pc, #88]	@ (8013bac <eTaskGetState+0xc8>)
 8013b52:	4293      	cmp	r3, r2
 8013b54:	d112      	bne.n	8013b7c <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8013b56:	69bb      	ldr	r3, [r7, #24]
 8013b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d10b      	bne.n	8013b76 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8013b5e:	69bb      	ldr	r3, [r7, #24]
 8013b60:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8013b64:	b2db      	uxtb	r3, r3
 8013b66:	2b01      	cmp	r3, #1
 8013b68:	d102      	bne.n	8013b70 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 8013b6a:	2302      	movs	r3, #2
 8013b6c:	77fb      	strb	r3, [r7, #31]
 8013b6e:	e011      	b.n	8013b94 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8013b70:	2303      	movs	r3, #3
 8013b72:	77fb      	strb	r3, [r7, #31]
 8013b74:	e00e      	b.n	8013b94 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8013b76:	2302      	movs	r3, #2
 8013b78:	77fb      	strb	r3, [r7, #31]
 8013b7a:	e00b      	b.n	8013b94 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8013b7c:	697b      	ldr	r3, [r7, #20]
 8013b7e:	4a0c      	ldr	r2, [pc, #48]	@ (8013bb0 <eTaskGetState+0xcc>)
 8013b80:	4293      	cmp	r3, r2
 8013b82:	d002      	beq.n	8013b8a <eTaskGetState+0xa6>
 8013b84:	697b      	ldr	r3, [r7, #20]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d102      	bne.n	8013b90 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8013b8a:	2304      	movs	r3, #4
 8013b8c:	77fb      	strb	r3, [r7, #31]
 8013b8e:	e001      	b.n	8013b94 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8013b90:	2301      	movs	r3, #1
 8013b92:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8013b94:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8013b96:	4618      	mov	r0, r3
 8013b98:	3720      	adds	r7, #32
 8013b9a:	46bd      	mov	sp, r7
 8013b9c:	bd80      	pop	{r7, pc}
 8013b9e:	bf00      	nop
 8013ba0:	20000ad0 	.word	0x20000ad0
 8013ba4:	20000b88 	.word	0x20000b88
 8013ba8:	20000b8c 	.word	0x20000b8c
 8013bac:	20000bbc 	.word	0x20000bbc
 8013bb0:	20000ba4 	.word	0x20000ba4

08013bb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013bb4:	b580      	push	{r7, lr}
 8013bb6:	b086      	sub	sp, #24
 8013bb8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8013bba:	4b20      	ldr	r3, [pc, #128]	@ (8013c3c <vTaskStartScheduler+0x88>)
 8013bbc:	9301      	str	r3, [sp, #4]
 8013bbe:	2300      	movs	r3, #0
 8013bc0:	9300      	str	r3, [sp, #0]
 8013bc2:	2300      	movs	r3, #0
 8013bc4:	2280      	movs	r2, #128	@ 0x80
 8013bc6:	491e      	ldr	r1, [pc, #120]	@ (8013c40 <vTaskStartScheduler+0x8c>)
 8013bc8:	481e      	ldr	r0, [pc, #120]	@ (8013c44 <vTaskStartScheduler+0x90>)
 8013bca:	f7ff fd6b 	bl	80136a4 <xTaskCreate>
 8013bce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	2b01      	cmp	r3, #1
 8013bd4:	d11d      	bne.n	8013c12 <vTaskStartScheduler+0x5e>
	__asm volatile
 8013bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bda:	f383 8811 	msr	BASEPRI, r3
 8013bde:	f3bf 8f6f 	isb	sy
 8013be2:	f3bf 8f4f 	dsb	sy
 8013be6:	60bb      	str	r3, [r7, #8]
}
 8013be8:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013bea:	4b17      	ldr	r3, [pc, #92]	@ (8013c48 <vTaskStartScheduler+0x94>)
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	3358      	adds	r3, #88	@ 0x58
 8013bf0:	4a16      	ldr	r2, [pc, #88]	@ (8013c4c <vTaskStartScheduler+0x98>)
 8013bf2:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013bf4:	4b16      	ldr	r3, [pc, #88]	@ (8013c50 <vTaskStartScheduler+0x9c>)
 8013bf6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013bfa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013bfc:	4b15      	ldr	r3, [pc, #84]	@ (8013c54 <vTaskStartScheduler+0xa0>)
 8013bfe:	2201      	movs	r2, #1
 8013c00:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013c02:	4b15      	ldr	r3, [pc, #84]	@ (8013c58 <vTaskStartScheduler+0xa4>)
 8013c04:	2200      	movs	r2, #0
 8013c06:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8013c08:	f7f0 fd64 	bl	80046d4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013c0c:	f000 ffb8 	bl	8014b80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013c10:	e00f      	b.n	8013c32 <vTaskStartScheduler+0x7e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013c18:	d10b      	bne.n	8013c32 <vTaskStartScheduler+0x7e>
	__asm volatile
 8013c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c1e:	f383 8811 	msr	BASEPRI, r3
 8013c22:	f3bf 8f6f 	isb	sy
 8013c26:	f3bf 8f4f 	dsb	sy
 8013c2a:	607b      	str	r3, [r7, #4]
}
 8013c2c:	bf00      	nop
 8013c2e:	bf00      	nop
 8013c30:	e7fd      	b.n	8013c2e <vTaskStartScheduler+0x7a>
}
 8013c32:	bf00      	nop
 8013c34:	3710      	adds	r7, #16
 8013c36:	46bd      	mov	sp, r7
 8013c38:	bd80      	pop	{r7, pc}
 8013c3a:	bf00      	nop
 8013c3c:	20000bf4 	.word	0x20000bf4
 8013c40:	080181dc 	.word	0x080181dc
 8013c44:	08014245 	.word	0x08014245
 8013c48:	20000ad0 	.word	0x20000ad0
 8013c4c:	200002c0 	.word	0x200002c0
 8013c50:	20000bf0 	.word	0x20000bf0
 8013c54:	20000bdc 	.word	0x20000bdc
 8013c58:	20000bd4 	.word	0x20000bd4

08013c5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013c5c:	b480      	push	{r7}
 8013c5e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8013c60:	4b04      	ldr	r3, [pc, #16]	@ (8013c74 <vTaskSuspendAll+0x18>)
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	3301      	adds	r3, #1
 8013c66:	4a03      	ldr	r2, [pc, #12]	@ (8013c74 <vTaskSuspendAll+0x18>)
 8013c68:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8013c6a:	bf00      	nop
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c72:	4770      	bx	lr
 8013c74:	20000bf8 	.word	0x20000bf8

08013c78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013c78:	b580      	push	{r7, lr}
 8013c7a:	b084      	sub	sp, #16
 8013c7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013c7e:	2300      	movs	r3, #0
 8013c80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013c82:	2300      	movs	r3, #0
 8013c84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013c86:	4b42      	ldr	r3, [pc, #264]	@ (8013d90 <xTaskResumeAll+0x118>)
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d10b      	bne.n	8013ca6 <xTaskResumeAll+0x2e>
	__asm volatile
 8013c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c92:	f383 8811 	msr	BASEPRI, r3
 8013c96:	f3bf 8f6f 	isb	sy
 8013c9a:	f3bf 8f4f 	dsb	sy
 8013c9e:	603b      	str	r3, [r7, #0]
}
 8013ca0:	bf00      	nop
 8013ca2:	bf00      	nop
 8013ca4:	e7fd      	b.n	8013ca2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013ca6:	f001 f80f 	bl	8014cc8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013caa:	4b39      	ldr	r3, [pc, #228]	@ (8013d90 <xTaskResumeAll+0x118>)
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	3b01      	subs	r3, #1
 8013cb0:	4a37      	ldr	r2, [pc, #220]	@ (8013d90 <xTaskResumeAll+0x118>)
 8013cb2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013cb4:	4b36      	ldr	r3, [pc, #216]	@ (8013d90 <xTaskResumeAll+0x118>)
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d161      	bne.n	8013d80 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013cbc:	4b35      	ldr	r3, [pc, #212]	@ (8013d94 <xTaskResumeAll+0x11c>)
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d05d      	beq.n	8013d80 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013cc4:	e02e      	b.n	8013d24 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013cc6:	4b34      	ldr	r3, [pc, #208]	@ (8013d98 <xTaskResumeAll+0x120>)
 8013cc8:	68db      	ldr	r3, [r3, #12]
 8013cca:	68db      	ldr	r3, [r3, #12]
 8013ccc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	3318      	adds	r3, #24
 8013cd2:	4618      	mov	r0, r3
 8013cd4:	f7fe fe2c 	bl	8012930 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	3304      	adds	r3, #4
 8013cdc:	4618      	mov	r0, r3
 8013cde:	f7fe fe27 	bl	8012930 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ce6:	2201      	movs	r2, #1
 8013ce8:	409a      	lsls	r2, r3
 8013cea:	4b2c      	ldr	r3, [pc, #176]	@ (8013d9c <xTaskResumeAll+0x124>)
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	4313      	orrs	r3, r2
 8013cf0:	4a2a      	ldr	r2, [pc, #168]	@ (8013d9c <xTaskResumeAll+0x124>)
 8013cf2:	6013      	str	r3, [r2, #0]
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013cf8:	4613      	mov	r3, r2
 8013cfa:	009b      	lsls	r3, r3, #2
 8013cfc:	4413      	add	r3, r2
 8013cfe:	009b      	lsls	r3, r3, #2
 8013d00:	4a27      	ldr	r2, [pc, #156]	@ (8013da0 <xTaskResumeAll+0x128>)
 8013d02:	441a      	add	r2, r3
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	3304      	adds	r3, #4
 8013d08:	4619      	mov	r1, r3
 8013d0a:	4610      	mov	r0, r2
 8013d0c:	f7fe fdb3 	bl	8012876 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013d14:	4b23      	ldr	r3, [pc, #140]	@ (8013da4 <xTaskResumeAll+0x12c>)
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d1a:	429a      	cmp	r2, r3
 8013d1c:	d302      	bcc.n	8013d24 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8013d1e:	4b22      	ldr	r3, [pc, #136]	@ (8013da8 <xTaskResumeAll+0x130>)
 8013d20:	2201      	movs	r2, #1
 8013d22:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013d24:	4b1c      	ldr	r3, [pc, #112]	@ (8013d98 <xTaskResumeAll+0x120>)
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d1cc      	bne.n	8013cc6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013d2c:	68fb      	ldr	r3, [r7, #12]
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d001      	beq.n	8013d36 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013d32:	f000 fb23 	bl	801437c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8013d36:	4b1d      	ldr	r3, [pc, #116]	@ (8013dac <xTaskResumeAll+0x134>)
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d010      	beq.n	8013d64 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013d42:	f000 f837 	bl	8013db4 <xTaskIncrementTick>
 8013d46:	4603      	mov	r3, r0
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d002      	beq.n	8013d52 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8013d4c:	4b16      	ldr	r3, [pc, #88]	@ (8013da8 <xTaskResumeAll+0x130>)
 8013d4e:	2201      	movs	r2, #1
 8013d50:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	3b01      	subs	r3, #1
 8013d56:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d1f1      	bne.n	8013d42 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8013d5e:	4b13      	ldr	r3, [pc, #76]	@ (8013dac <xTaskResumeAll+0x134>)
 8013d60:	2200      	movs	r2, #0
 8013d62:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013d64:	4b10      	ldr	r3, [pc, #64]	@ (8013da8 <xTaskResumeAll+0x130>)
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d009      	beq.n	8013d80 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013d6c:	2301      	movs	r3, #1
 8013d6e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013d70:	4b0f      	ldr	r3, [pc, #60]	@ (8013db0 <xTaskResumeAll+0x138>)
 8013d72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013d76:	601a      	str	r2, [r3, #0]
 8013d78:	f3bf 8f4f 	dsb	sy
 8013d7c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013d80:	f000 ffd4 	bl	8014d2c <vPortExitCritical>

	return xAlreadyYielded;
 8013d84:	68bb      	ldr	r3, [r7, #8]
}
 8013d86:	4618      	mov	r0, r3
 8013d88:	3710      	adds	r7, #16
 8013d8a:	46bd      	mov	sp, r7
 8013d8c:	bd80      	pop	{r7, pc}
 8013d8e:	bf00      	nop
 8013d90:	20000bf8 	.word	0x20000bf8
 8013d94:	20000bd0 	.word	0x20000bd0
 8013d98:	20000b90 	.word	0x20000b90
 8013d9c:	20000bd8 	.word	0x20000bd8
 8013da0:	20000ad4 	.word	0x20000ad4
 8013da4:	20000ad0 	.word	0x20000ad0
 8013da8:	20000be4 	.word	0x20000be4
 8013dac:	20000be0 	.word	0x20000be0
 8013db0:	e000ed04 	.word	0xe000ed04

08013db4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013db4:	b580      	push	{r7, lr}
 8013db6:	b086      	sub	sp, #24
 8013db8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013dba:	2300      	movs	r3, #0
 8013dbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013dbe:	4b4f      	ldr	r3, [pc, #316]	@ (8013efc <xTaskIncrementTick+0x148>)
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	f040 808f 	bne.w	8013ee6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013dc8:	4b4d      	ldr	r3, [pc, #308]	@ (8013f00 <xTaskIncrementTick+0x14c>)
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	3301      	adds	r3, #1
 8013dce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013dd0:	4a4b      	ldr	r2, [pc, #300]	@ (8013f00 <xTaskIncrementTick+0x14c>)
 8013dd2:	693b      	ldr	r3, [r7, #16]
 8013dd4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013dd6:	693b      	ldr	r3, [r7, #16]
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d121      	bne.n	8013e20 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8013ddc:	4b49      	ldr	r3, [pc, #292]	@ (8013f04 <xTaskIncrementTick+0x150>)
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d00b      	beq.n	8013dfe <xTaskIncrementTick+0x4a>
	__asm volatile
 8013de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013dea:	f383 8811 	msr	BASEPRI, r3
 8013dee:	f3bf 8f6f 	isb	sy
 8013df2:	f3bf 8f4f 	dsb	sy
 8013df6:	603b      	str	r3, [r7, #0]
}
 8013df8:	bf00      	nop
 8013dfa:	bf00      	nop
 8013dfc:	e7fd      	b.n	8013dfa <xTaskIncrementTick+0x46>
 8013dfe:	4b41      	ldr	r3, [pc, #260]	@ (8013f04 <xTaskIncrementTick+0x150>)
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	60fb      	str	r3, [r7, #12]
 8013e04:	4b40      	ldr	r3, [pc, #256]	@ (8013f08 <xTaskIncrementTick+0x154>)
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	4a3e      	ldr	r2, [pc, #248]	@ (8013f04 <xTaskIncrementTick+0x150>)
 8013e0a:	6013      	str	r3, [r2, #0]
 8013e0c:	4a3e      	ldr	r2, [pc, #248]	@ (8013f08 <xTaskIncrementTick+0x154>)
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	6013      	str	r3, [r2, #0]
 8013e12:	4b3e      	ldr	r3, [pc, #248]	@ (8013f0c <xTaskIncrementTick+0x158>)
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	3301      	adds	r3, #1
 8013e18:	4a3c      	ldr	r2, [pc, #240]	@ (8013f0c <xTaskIncrementTick+0x158>)
 8013e1a:	6013      	str	r3, [r2, #0]
 8013e1c:	f000 faae 	bl	801437c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013e20:	4b3b      	ldr	r3, [pc, #236]	@ (8013f10 <xTaskIncrementTick+0x15c>)
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	693a      	ldr	r2, [r7, #16]
 8013e26:	429a      	cmp	r2, r3
 8013e28:	d348      	bcc.n	8013ebc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013e2a:	4b36      	ldr	r3, [pc, #216]	@ (8013f04 <xTaskIncrementTick+0x150>)
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d104      	bne.n	8013e3e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013e34:	4b36      	ldr	r3, [pc, #216]	@ (8013f10 <xTaskIncrementTick+0x15c>)
 8013e36:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013e3a:	601a      	str	r2, [r3, #0]
					break;
 8013e3c:	e03e      	b.n	8013ebc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013e3e:	4b31      	ldr	r3, [pc, #196]	@ (8013f04 <xTaskIncrementTick+0x150>)
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	68db      	ldr	r3, [r3, #12]
 8013e44:	68db      	ldr	r3, [r3, #12]
 8013e46:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013e48:	68bb      	ldr	r3, [r7, #8]
 8013e4a:	685b      	ldr	r3, [r3, #4]
 8013e4c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013e4e:	693a      	ldr	r2, [r7, #16]
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	429a      	cmp	r2, r3
 8013e54:	d203      	bcs.n	8013e5e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013e56:	4a2e      	ldr	r2, [pc, #184]	@ (8013f10 <xTaskIncrementTick+0x15c>)
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013e5c:	e02e      	b.n	8013ebc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013e5e:	68bb      	ldr	r3, [r7, #8]
 8013e60:	3304      	adds	r3, #4
 8013e62:	4618      	mov	r0, r3
 8013e64:	f7fe fd64 	bl	8012930 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013e68:	68bb      	ldr	r3, [r7, #8]
 8013e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d004      	beq.n	8013e7a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013e70:	68bb      	ldr	r3, [r7, #8]
 8013e72:	3318      	adds	r3, #24
 8013e74:	4618      	mov	r0, r3
 8013e76:	f7fe fd5b 	bl	8012930 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013e7a:	68bb      	ldr	r3, [r7, #8]
 8013e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e7e:	2201      	movs	r2, #1
 8013e80:	409a      	lsls	r2, r3
 8013e82:	4b24      	ldr	r3, [pc, #144]	@ (8013f14 <xTaskIncrementTick+0x160>)
 8013e84:	681b      	ldr	r3, [r3, #0]
 8013e86:	4313      	orrs	r3, r2
 8013e88:	4a22      	ldr	r2, [pc, #136]	@ (8013f14 <xTaskIncrementTick+0x160>)
 8013e8a:	6013      	str	r3, [r2, #0]
 8013e8c:	68bb      	ldr	r3, [r7, #8]
 8013e8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013e90:	4613      	mov	r3, r2
 8013e92:	009b      	lsls	r3, r3, #2
 8013e94:	4413      	add	r3, r2
 8013e96:	009b      	lsls	r3, r3, #2
 8013e98:	4a1f      	ldr	r2, [pc, #124]	@ (8013f18 <xTaskIncrementTick+0x164>)
 8013e9a:	441a      	add	r2, r3
 8013e9c:	68bb      	ldr	r3, [r7, #8]
 8013e9e:	3304      	adds	r3, #4
 8013ea0:	4619      	mov	r1, r3
 8013ea2:	4610      	mov	r0, r2
 8013ea4:	f7fe fce7 	bl	8012876 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013ea8:	68bb      	ldr	r3, [r7, #8]
 8013eaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013eac:	4b1b      	ldr	r3, [pc, #108]	@ (8013f1c <xTaskIncrementTick+0x168>)
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013eb2:	429a      	cmp	r2, r3
 8013eb4:	d3b9      	bcc.n	8013e2a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8013eb6:	2301      	movs	r3, #1
 8013eb8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013eba:	e7b6      	b.n	8013e2a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013ebc:	4b17      	ldr	r3, [pc, #92]	@ (8013f1c <xTaskIncrementTick+0x168>)
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013ec2:	4915      	ldr	r1, [pc, #84]	@ (8013f18 <xTaskIncrementTick+0x164>)
 8013ec4:	4613      	mov	r3, r2
 8013ec6:	009b      	lsls	r3, r3, #2
 8013ec8:	4413      	add	r3, r2
 8013eca:	009b      	lsls	r3, r3, #2
 8013ecc:	440b      	add	r3, r1
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	2b01      	cmp	r3, #1
 8013ed2:	d901      	bls.n	8013ed8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8013ed4:	2301      	movs	r3, #1
 8013ed6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8013ed8:	4b11      	ldr	r3, [pc, #68]	@ (8013f20 <xTaskIncrementTick+0x16c>)
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d007      	beq.n	8013ef0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8013ee0:	2301      	movs	r3, #1
 8013ee2:	617b      	str	r3, [r7, #20]
 8013ee4:	e004      	b.n	8013ef0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8013ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8013f24 <xTaskIncrementTick+0x170>)
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	3301      	adds	r3, #1
 8013eec:	4a0d      	ldr	r2, [pc, #52]	@ (8013f24 <xTaskIncrementTick+0x170>)
 8013eee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8013ef0:	697b      	ldr	r3, [r7, #20]
}
 8013ef2:	4618      	mov	r0, r3
 8013ef4:	3718      	adds	r7, #24
 8013ef6:	46bd      	mov	sp, r7
 8013ef8:	bd80      	pop	{r7, pc}
 8013efa:	bf00      	nop
 8013efc:	20000bf8 	.word	0x20000bf8
 8013f00:	20000bd4 	.word	0x20000bd4
 8013f04:	20000b88 	.word	0x20000b88
 8013f08:	20000b8c 	.word	0x20000b8c
 8013f0c:	20000be8 	.word	0x20000be8
 8013f10:	20000bf0 	.word	0x20000bf0
 8013f14:	20000bd8 	.word	0x20000bd8
 8013f18:	20000ad4 	.word	0x20000ad4
 8013f1c:	20000ad0 	.word	0x20000ad0
 8013f20:	20000be4 	.word	0x20000be4
 8013f24:	20000be0 	.word	0x20000be0

08013f28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013f28:	b580      	push	{r7, lr}
 8013f2a:	b086      	sub	sp, #24
 8013f2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013f2e:	4b35      	ldr	r3, [pc, #212]	@ (8014004 <vTaskSwitchContext+0xdc>)
 8013f30:	681b      	ldr	r3, [r3, #0]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d003      	beq.n	8013f3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013f36:	4b34      	ldr	r3, [pc, #208]	@ (8014008 <vTaskSwitchContext+0xe0>)
 8013f38:	2201      	movs	r2, #1
 8013f3a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013f3c:	e05e      	b.n	8013ffc <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 8013f3e:	4b32      	ldr	r3, [pc, #200]	@ (8014008 <vTaskSwitchContext+0xe0>)
 8013f40:	2200      	movs	r2, #0
 8013f42:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8013f44:	f7f0 fbcd 	bl	80046e2 <getRunTimeCounterValue>
 8013f48:	4603      	mov	r3, r0
 8013f4a:	4a30      	ldr	r2, [pc, #192]	@ (801400c <vTaskSwitchContext+0xe4>)
 8013f4c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8013f4e:	4b2f      	ldr	r3, [pc, #188]	@ (801400c <vTaskSwitchContext+0xe4>)
 8013f50:	681a      	ldr	r2, [r3, #0]
 8013f52:	4b2f      	ldr	r3, [pc, #188]	@ (8014010 <vTaskSwitchContext+0xe8>)
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	429a      	cmp	r2, r3
 8013f58:	d909      	bls.n	8013f6e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8013f5a:	4b2e      	ldr	r3, [pc, #184]	@ (8014014 <vTaskSwitchContext+0xec>)
 8013f5c:	681b      	ldr	r3, [r3, #0]
 8013f5e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8013f60:	4a2a      	ldr	r2, [pc, #168]	@ (801400c <vTaskSwitchContext+0xe4>)
 8013f62:	6810      	ldr	r0, [r2, #0]
 8013f64:	4a2a      	ldr	r2, [pc, #168]	@ (8014010 <vTaskSwitchContext+0xe8>)
 8013f66:	6812      	ldr	r2, [r2, #0]
 8013f68:	1a82      	subs	r2, r0, r2
 8013f6a:	440a      	add	r2, r1
 8013f6c:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8013f6e:	4b27      	ldr	r3, [pc, #156]	@ (801400c <vTaskSwitchContext+0xe4>)
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	4a27      	ldr	r2, [pc, #156]	@ (8014010 <vTaskSwitchContext+0xe8>)
 8013f74:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f76:	4b28      	ldr	r3, [pc, #160]	@ (8014018 <vTaskSwitchContext+0xf0>)
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	fab3 f383 	clz	r3, r3
 8013f82:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8013f84:	7afb      	ldrb	r3, [r7, #11]
 8013f86:	f1c3 031f 	rsb	r3, r3, #31
 8013f8a:	617b      	str	r3, [r7, #20]
 8013f8c:	4923      	ldr	r1, [pc, #140]	@ (801401c <vTaskSwitchContext+0xf4>)
 8013f8e:	697a      	ldr	r2, [r7, #20]
 8013f90:	4613      	mov	r3, r2
 8013f92:	009b      	lsls	r3, r3, #2
 8013f94:	4413      	add	r3, r2
 8013f96:	009b      	lsls	r3, r3, #2
 8013f98:	440b      	add	r3, r1
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d10b      	bne.n	8013fb8 <vTaskSwitchContext+0x90>
	__asm volatile
 8013fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013fa4:	f383 8811 	msr	BASEPRI, r3
 8013fa8:	f3bf 8f6f 	isb	sy
 8013fac:	f3bf 8f4f 	dsb	sy
 8013fb0:	607b      	str	r3, [r7, #4]
}
 8013fb2:	bf00      	nop
 8013fb4:	bf00      	nop
 8013fb6:	e7fd      	b.n	8013fb4 <vTaskSwitchContext+0x8c>
 8013fb8:	697a      	ldr	r2, [r7, #20]
 8013fba:	4613      	mov	r3, r2
 8013fbc:	009b      	lsls	r3, r3, #2
 8013fbe:	4413      	add	r3, r2
 8013fc0:	009b      	lsls	r3, r3, #2
 8013fc2:	4a16      	ldr	r2, [pc, #88]	@ (801401c <vTaskSwitchContext+0xf4>)
 8013fc4:	4413      	add	r3, r2
 8013fc6:	613b      	str	r3, [r7, #16]
 8013fc8:	693b      	ldr	r3, [r7, #16]
 8013fca:	685b      	ldr	r3, [r3, #4]
 8013fcc:	685a      	ldr	r2, [r3, #4]
 8013fce:	693b      	ldr	r3, [r7, #16]
 8013fd0:	605a      	str	r2, [r3, #4]
 8013fd2:	693b      	ldr	r3, [r7, #16]
 8013fd4:	685a      	ldr	r2, [r3, #4]
 8013fd6:	693b      	ldr	r3, [r7, #16]
 8013fd8:	3308      	adds	r3, #8
 8013fda:	429a      	cmp	r2, r3
 8013fdc:	d104      	bne.n	8013fe8 <vTaskSwitchContext+0xc0>
 8013fde:	693b      	ldr	r3, [r7, #16]
 8013fe0:	685b      	ldr	r3, [r3, #4]
 8013fe2:	685a      	ldr	r2, [r3, #4]
 8013fe4:	693b      	ldr	r3, [r7, #16]
 8013fe6:	605a      	str	r2, [r3, #4]
 8013fe8:	693b      	ldr	r3, [r7, #16]
 8013fea:	685b      	ldr	r3, [r3, #4]
 8013fec:	68db      	ldr	r3, [r3, #12]
 8013fee:	4a09      	ldr	r2, [pc, #36]	@ (8014014 <vTaskSwitchContext+0xec>)
 8013ff0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013ff2:	4b08      	ldr	r3, [pc, #32]	@ (8014014 <vTaskSwitchContext+0xec>)
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	3358      	adds	r3, #88	@ 0x58
 8013ff8:	4a09      	ldr	r2, [pc, #36]	@ (8014020 <vTaskSwitchContext+0xf8>)
 8013ffa:	6013      	str	r3, [r2, #0]
}
 8013ffc:	bf00      	nop
 8013ffe:	3718      	adds	r7, #24
 8014000:	46bd      	mov	sp, r7
 8014002:	bd80      	pop	{r7, pc}
 8014004:	20000bf8 	.word	0x20000bf8
 8014008:	20000be4 	.word	0x20000be4
 801400c:	20000c00 	.word	0x20000c00
 8014010:	20000bfc 	.word	0x20000bfc
 8014014:	20000ad0 	.word	0x20000ad0
 8014018:	20000bd8 	.word	0x20000bd8
 801401c:	20000ad4 	.word	0x20000ad4
 8014020:	200002c0 	.word	0x200002c0

08014024 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014024:	b580      	push	{r7, lr}
 8014026:	b084      	sub	sp, #16
 8014028:	af00      	add	r7, sp, #0
 801402a:	6078      	str	r0, [r7, #4]
 801402c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	2b00      	cmp	r3, #0
 8014032:	d10b      	bne.n	801404c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8014034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014038:	f383 8811 	msr	BASEPRI, r3
 801403c:	f3bf 8f6f 	isb	sy
 8014040:	f3bf 8f4f 	dsb	sy
 8014044:	60fb      	str	r3, [r7, #12]
}
 8014046:	bf00      	nop
 8014048:	bf00      	nop
 801404a:	e7fd      	b.n	8014048 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801404c:	4b07      	ldr	r3, [pc, #28]	@ (801406c <vTaskPlaceOnEventList+0x48>)
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	3318      	adds	r3, #24
 8014052:	4619      	mov	r1, r3
 8014054:	6878      	ldr	r0, [r7, #4]
 8014056:	f7fe fc32 	bl	80128be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801405a:	2101      	movs	r1, #1
 801405c:	6838      	ldr	r0, [r7, #0]
 801405e:	f000 fc9f 	bl	80149a0 <prvAddCurrentTaskToDelayedList>
}
 8014062:	bf00      	nop
 8014064:	3710      	adds	r7, #16
 8014066:	46bd      	mov	sp, r7
 8014068:	bd80      	pop	{r7, pc}
 801406a:	bf00      	nop
 801406c:	20000ad0 	.word	0x20000ad0

08014070 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014070:	b580      	push	{r7, lr}
 8014072:	b086      	sub	sp, #24
 8014074:	af00      	add	r7, sp, #0
 8014076:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	68db      	ldr	r3, [r3, #12]
 801407c:	68db      	ldr	r3, [r3, #12]
 801407e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014080:	693b      	ldr	r3, [r7, #16]
 8014082:	2b00      	cmp	r3, #0
 8014084:	d10b      	bne.n	801409e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8014086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801408a:	f383 8811 	msr	BASEPRI, r3
 801408e:	f3bf 8f6f 	isb	sy
 8014092:	f3bf 8f4f 	dsb	sy
 8014096:	60fb      	str	r3, [r7, #12]
}
 8014098:	bf00      	nop
 801409a:	bf00      	nop
 801409c:	e7fd      	b.n	801409a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801409e:	693b      	ldr	r3, [r7, #16]
 80140a0:	3318      	adds	r3, #24
 80140a2:	4618      	mov	r0, r3
 80140a4:	f7fe fc44 	bl	8012930 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80140a8:	4b1d      	ldr	r3, [pc, #116]	@ (8014120 <xTaskRemoveFromEventList+0xb0>)
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d11c      	bne.n	80140ea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80140b0:	693b      	ldr	r3, [r7, #16]
 80140b2:	3304      	adds	r3, #4
 80140b4:	4618      	mov	r0, r3
 80140b6:	f7fe fc3b 	bl	8012930 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80140ba:	693b      	ldr	r3, [r7, #16]
 80140bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80140be:	2201      	movs	r2, #1
 80140c0:	409a      	lsls	r2, r3
 80140c2:	4b18      	ldr	r3, [pc, #96]	@ (8014124 <xTaskRemoveFromEventList+0xb4>)
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	4313      	orrs	r3, r2
 80140c8:	4a16      	ldr	r2, [pc, #88]	@ (8014124 <xTaskRemoveFromEventList+0xb4>)
 80140ca:	6013      	str	r3, [r2, #0]
 80140cc:	693b      	ldr	r3, [r7, #16]
 80140ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80140d0:	4613      	mov	r3, r2
 80140d2:	009b      	lsls	r3, r3, #2
 80140d4:	4413      	add	r3, r2
 80140d6:	009b      	lsls	r3, r3, #2
 80140d8:	4a13      	ldr	r2, [pc, #76]	@ (8014128 <xTaskRemoveFromEventList+0xb8>)
 80140da:	441a      	add	r2, r3
 80140dc:	693b      	ldr	r3, [r7, #16]
 80140de:	3304      	adds	r3, #4
 80140e0:	4619      	mov	r1, r3
 80140e2:	4610      	mov	r0, r2
 80140e4:	f7fe fbc7 	bl	8012876 <vListInsertEnd>
 80140e8:	e005      	b.n	80140f6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80140ea:	693b      	ldr	r3, [r7, #16]
 80140ec:	3318      	adds	r3, #24
 80140ee:	4619      	mov	r1, r3
 80140f0:	480e      	ldr	r0, [pc, #56]	@ (801412c <xTaskRemoveFromEventList+0xbc>)
 80140f2:	f7fe fbc0 	bl	8012876 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80140f6:	693b      	ldr	r3, [r7, #16]
 80140f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80140fa:	4b0d      	ldr	r3, [pc, #52]	@ (8014130 <xTaskRemoveFromEventList+0xc0>)
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014100:	429a      	cmp	r2, r3
 8014102:	d905      	bls.n	8014110 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014104:	2301      	movs	r3, #1
 8014106:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014108:	4b0a      	ldr	r3, [pc, #40]	@ (8014134 <xTaskRemoveFromEventList+0xc4>)
 801410a:	2201      	movs	r2, #1
 801410c:	601a      	str	r2, [r3, #0]
 801410e:	e001      	b.n	8014114 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8014110:	2300      	movs	r3, #0
 8014112:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014114:	697b      	ldr	r3, [r7, #20]
}
 8014116:	4618      	mov	r0, r3
 8014118:	3718      	adds	r7, #24
 801411a:	46bd      	mov	sp, r7
 801411c:	bd80      	pop	{r7, pc}
 801411e:	bf00      	nop
 8014120:	20000bf8 	.word	0x20000bf8
 8014124:	20000bd8 	.word	0x20000bd8
 8014128:	20000ad4 	.word	0x20000ad4
 801412c:	20000b90 	.word	0x20000b90
 8014130:	20000ad0 	.word	0x20000ad0
 8014134:	20000be4 	.word	0x20000be4

08014138 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014138:	b480      	push	{r7}
 801413a:	b083      	sub	sp, #12
 801413c:	af00      	add	r7, sp, #0
 801413e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014140:	4b06      	ldr	r3, [pc, #24]	@ (801415c <vTaskInternalSetTimeOutState+0x24>)
 8014142:	681a      	ldr	r2, [r3, #0]
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014148:	4b05      	ldr	r3, [pc, #20]	@ (8014160 <vTaskInternalSetTimeOutState+0x28>)
 801414a:	681a      	ldr	r2, [r3, #0]
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	605a      	str	r2, [r3, #4]
}
 8014150:	bf00      	nop
 8014152:	370c      	adds	r7, #12
 8014154:	46bd      	mov	sp, r7
 8014156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801415a:	4770      	bx	lr
 801415c:	20000be8 	.word	0x20000be8
 8014160:	20000bd4 	.word	0x20000bd4

08014164 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014164:	b580      	push	{r7, lr}
 8014166:	b088      	sub	sp, #32
 8014168:	af00      	add	r7, sp, #0
 801416a:	6078      	str	r0, [r7, #4]
 801416c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d10b      	bne.n	801418c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8014174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014178:	f383 8811 	msr	BASEPRI, r3
 801417c:	f3bf 8f6f 	isb	sy
 8014180:	f3bf 8f4f 	dsb	sy
 8014184:	613b      	str	r3, [r7, #16]
}
 8014186:	bf00      	nop
 8014188:	bf00      	nop
 801418a:	e7fd      	b.n	8014188 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801418c:	683b      	ldr	r3, [r7, #0]
 801418e:	2b00      	cmp	r3, #0
 8014190:	d10b      	bne.n	80141aa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8014192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014196:	f383 8811 	msr	BASEPRI, r3
 801419a:	f3bf 8f6f 	isb	sy
 801419e:	f3bf 8f4f 	dsb	sy
 80141a2:	60fb      	str	r3, [r7, #12]
}
 80141a4:	bf00      	nop
 80141a6:	bf00      	nop
 80141a8:	e7fd      	b.n	80141a6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80141aa:	f000 fd8d 	bl	8014cc8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80141ae:	4b1d      	ldr	r3, [pc, #116]	@ (8014224 <xTaskCheckForTimeOut+0xc0>)
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	685b      	ldr	r3, [r3, #4]
 80141b8:	69ba      	ldr	r2, [r7, #24]
 80141ba:	1ad3      	subs	r3, r2, r3
 80141bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80141be:	683b      	ldr	r3, [r7, #0]
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80141c6:	d102      	bne.n	80141ce <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80141c8:	2300      	movs	r3, #0
 80141ca:	61fb      	str	r3, [r7, #28]
 80141cc:	e023      	b.n	8014216 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	681a      	ldr	r2, [r3, #0]
 80141d2:	4b15      	ldr	r3, [pc, #84]	@ (8014228 <xTaskCheckForTimeOut+0xc4>)
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	429a      	cmp	r2, r3
 80141d8:	d007      	beq.n	80141ea <xTaskCheckForTimeOut+0x86>
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	685b      	ldr	r3, [r3, #4]
 80141de:	69ba      	ldr	r2, [r7, #24]
 80141e0:	429a      	cmp	r2, r3
 80141e2:	d302      	bcc.n	80141ea <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80141e4:	2301      	movs	r3, #1
 80141e6:	61fb      	str	r3, [r7, #28]
 80141e8:	e015      	b.n	8014216 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80141ea:	683b      	ldr	r3, [r7, #0]
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	697a      	ldr	r2, [r7, #20]
 80141f0:	429a      	cmp	r2, r3
 80141f2:	d20b      	bcs.n	801420c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80141f4:	683b      	ldr	r3, [r7, #0]
 80141f6:	681a      	ldr	r2, [r3, #0]
 80141f8:	697b      	ldr	r3, [r7, #20]
 80141fa:	1ad2      	subs	r2, r2, r3
 80141fc:	683b      	ldr	r3, [r7, #0]
 80141fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014200:	6878      	ldr	r0, [r7, #4]
 8014202:	f7ff ff99 	bl	8014138 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014206:	2300      	movs	r3, #0
 8014208:	61fb      	str	r3, [r7, #28]
 801420a:	e004      	b.n	8014216 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 801420c:	683b      	ldr	r3, [r7, #0]
 801420e:	2200      	movs	r2, #0
 8014210:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014212:	2301      	movs	r3, #1
 8014214:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014216:	f000 fd89 	bl	8014d2c <vPortExitCritical>

	return xReturn;
 801421a:	69fb      	ldr	r3, [r7, #28]
}
 801421c:	4618      	mov	r0, r3
 801421e:	3720      	adds	r7, #32
 8014220:	46bd      	mov	sp, r7
 8014222:	bd80      	pop	{r7, pc}
 8014224:	20000bd4 	.word	0x20000bd4
 8014228:	20000be8 	.word	0x20000be8

0801422c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801422c:	b480      	push	{r7}
 801422e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014230:	4b03      	ldr	r3, [pc, #12]	@ (8014240 <vTaskMissedYield+0x14>)
 8014232:	2201      	movs	r2, #1
 8014234:	601a      	str	r2, [r3, #0]
}
 8014236:	bf00      	nop
 8014238:	46bd      	mov	sp, r7
 801423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801423e:	4770      	bx	lr
 8014240:	20000be4 	.word	0x20000be4

08014244 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014244:	b580      	push	{r7, lr}
 8014246:	b082      	sub	sp, #8
 8014248:	af00      	add	r7, sp, #0
 801424a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801424c:	f000 f852 	bl	80142f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014250:	4b06      	ldr	r3, [pc, #24]	@ (801426c <prvIdleTask+0x28>)
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	2b01      	cmp	r3, #1
 8014256:	d9f9      	bls.n	801424c <prvIdleTask+0x8>
			{
				taskYIELD();
 8014258:	4b05      	ldr	r3, [pc, #20]	@ (8014270 <prvIdleTask+0x2c>)
 801425a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801425e:	601a      	str	r2, [r3, #0]
 8014260:	f3bf 8f4f 	dsb	sy
 8014264:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014268:	e7f0      	b.n	801424c <prvIdleTask+0x8>
 801426a:	bf00      	nop
 801426c:	20000ad4 	.word	0x20000ad4
 8014270:	e000ed04 	.word	0xe000ed04

08014274 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014274:	b580      	push	{r7, lr}
 8014276:	b082      	sub	sp, #8
 8014278:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801427a:	2300      	movs	r3, #0
 801427c:	607b      	str	r3, [r7, #4]
 801427e:	e00c      	b.n	801429a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014280:	687a      	ldr	r2, [r7, #4]
 8014282:	4613      	mov	r3, r2
 8014284:	009b      	lsls	r3, r3, #2
 8014286:	4413      	add	r3, r2
 8014288:	009b      	lsls	r3, r3, #2
 801428a:	4a12      	ldr	r2, [pc, #72]	@ (80142d4 <prvInitialiseTaskLists+0x60>)
 801428c:	4413      	add	r3, r2
 801428e:	4618      	mov	r0, r3
 8014290:	f7fe fac4 	bl	801281c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	3301      	adds	r3, #1
 8014298:	607b      	str	r3, [r7, #4]
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	2b06      	cmp	r3, #6
 801429e:	d9ef      	bls.n	8014280 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80142a0:	480d      	ldr	r0, [pc, #52]	@ (80142d8 <prvInitialiseTaskLists+0x64>)
 80142a2:	f7fe fabb 	bl	801281c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80142a6:	480d      	ldr	r0, [pc, #52]	@ (80142dc <prvInitialiseTaskLists+0x68>)
 80142a8:	f7fe fab8 	bl	801281c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80142ac:	480c      	ldr	r0, [pc, #48]	@ (80142e0 <prvInitialiseTaskLists+0x6c>)
 80142ae:	f7fe fab5 	bl	801281c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80142b2:	480c      	ldr	r0, [pc, #48]	@ (80142e4 <prvInitialiseTaskLists+0x70>)
 80142b4:	f7fe fab2 	bl	801281c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80142b8:	480b      	ldr	r0, [pc, #44]	@ (80142e8 <prvInitialiseTaskLists+0x74>)
 80142ba:	f7fe faaf 	bl	801281c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80142be:	4b0b      	ldr	r3, [pc, #44]	@ (80142ec <prvInitialiseTaskLists+0x78>)
 80142c0:	4a05      	ldr	r2, [pc, #20]	@ (80142d8 <prvInitialiseTaskLists+0x64>)
 80142c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80142c4:	4b0a      	ldr	r3, [pc, #40]	@ (80142f0 <prvInitialiseTaskLists+0x7c>)
 80142c6:	4a05      	ldr	r2, [pc, #20]	@ (80142dc <prvInitialiseTaskLists+0x68>)
 80142c8:	601a      	str	r2, [r3, #0]
}
 80142ca:	bf00      	nop
 80142cc:	3708      	adds	r7, #8
 80142ce:	46bd      	mov	sp, r7
 80142d0:	bd80      	pop	{r7, pc}
 80142d2:	bf00      	nop
 80142d4:	20000ad4 	.word	0x20000ad4
 80142d8:	20000b60 	.word	0x20000b60
 80142dc:	20000b74 	.word	0x20000b74
 80142e0:	20000b90 	.word	0x20000b90
 80142e4:	20000ba4 	.word	0x20000ba4
 80142e8:	20000bbc 	.word	0x20000bbc
 80142ec:	20000b88 	.word	0x20000b88
 80142f0:	20000b8c 	.word	0x20000b8c

080142f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b082      	sub	sp, #8
 80142f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80142fa:	e019      	b.n	8014330 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80142fc:	f000 fce4 	bl	8014cc8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014300:	4b10      	ldr	r3, [pc, #64]	@ (8014344 <prvCheckTasksWaitingTermination+0x50>)
 8014302:	68db      	ldr	r3, [r3, #12]
 8014304:	68db      	ldr	r3, [r3, #12]
 8014306:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	3304      	adds	r3, #4
 801430c:	4618      	mov	r0, r3
 801430e:	f7fe fb0f 	bl	8012930 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014312:	4b0d      	ldr	r3, [pc, #52]	@ (8014348 <prvCheckTasksWaitingTermination+0x54>)
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	3b01      	subs	r3, #1
 8014318:	4a0b      	ldr	r2, [pc, #44]	@ (8014348 <prvCheckTasksWaitingTermination+0x54>)
 801431a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801431c:	4b0b      	ldr	r3, [pc, #44]	@ (801434c <prvCheckTasksWaitingTermination+0x58>)
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	3b01      	subs	r3, #1
 8014322:	4a0a      	ldr	r2, [pc, #40]	@ (801434c <prvCheckTasksWaitingTermination+0x58>)
 8014324:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014326:	f000 fd01 	bl	8014d2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801432a:	6878      	ldr	r0, [r7, #4]
 801432c:	f000 f810 	bl	8014350 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014330:	4b06      	ldr	r3, [pc, #24]	@ (801434c <prvCheckTasksWaitingTermination+0x58>)
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	2b00      	cmp	r3, #0
 8014336:	d1e1      	bne.n	80142fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014338:	bf00      	nop
 801433a:	bf00      	nop
 801433c:	3708      	adds	r7, #8
 801433e:	46bd      	mov	sp, r7
 8014340:	bd80      	pop	{r7, pc}
 8014342:	bf00      	nop
 8014344:	20000ba4 	.word	0x20000ba4
 8014348:	20000bd0 	.word	0x20000bd0
 801434c:	20000bb8 	.word	0x20000bb8

08014350 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014350:	b580      	push	{r7, lr}
 8014352:	b082      	sub	sp, #8
 8014354:	af00      	add	r7, sp, #0
 8014356:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	3358      	adds	r3, #88	@ 0x58
 801435c:	4618      	mov	r0, r3
 801435e:	f002 fd69 	bl	8016e34 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014366:	4618      	mov	r0, r3
 8014368:	f000 fe9e 	bl	80150a8 <vPortFree>
			vPortFree( pxTCB );
 801436c:	6878      	ldr	r0, [r7, #4]
 801436e:	f000 fe9b 	bl	80150a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014372:	bf00      	nop
 8014374:	3708      	adds	r7, #8
 8014376:	46bd      	mov	sp, r7
 8014378:	bd80      	pop	{r7, pc}
	...

0801437c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801437c:	b480      	push	{r7}
 801437e:	b083      	sub	sp, #12
 8014380:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014382:	4b0c      	ldr	r3, [pc, #48]	@ (80143b4 <prvResetNextTaskUnblockTime+0x38>)
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	2b00      	cmp	r3, #0
 801438a:	d104      	bne.n	8014396 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801438c:	4b0a      	ldr	r3, [pc, #40]	@ (80143b8 <prvResetNextTaskUnblockTime+0x3c>)
 801438e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014392:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014394:	e008      	b.n	80143a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014396:	4b07      	ldr	r3, [pc, #28]	@ (80143b4 <prvResetNextTaskUnblockTime+0x38>)
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	68db      	ldr	r3, [r3, #12]
 801439c:	68db      	ldr	r3, [r3, #12]
 801439e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	685b      	ldr	r3, [r3, #4]
 80143a4:	4a04      	ldr	r2, [pc, #16]	@ (80143b8 <prvResetNextTaskUnblockTime+0x3c>)
 80143a6:	6013      	str	r3, [r2, #0]
}
 80143a8:	bf00      	nop
 80143aa:	370c      	adds	r7, #12
 80143ac:	46bd      	mov	sp, r7
 80143ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143b2:	4770      	bx	lr
 80143b4:	20000b88 	.word	0x20000b88
 80143b8:	20000bf0 	.word	0x20000bf0

080143bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80143bc:	b480      	push	{r7}
 80143be:	b083      	sub	sp, #12
 80143c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80143c2:	4b0b      	ldr	r3, [pc, #44]	@ (80143f0 <xTaskGetSchedulerState+0x34>)
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d102      	bne.n	80143d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80143ca:	2301      	movs	r3, #1
 80143cc:	607b      	str	r3, [r7, #4]
 80143ce:	e008      	b.n	80143e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80143d0:	4b08      	ldr	r3, [pc, #32]	@ (80143f4 <xTaskGetSchedulerState+0x38>)
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d102      	bne.n	80143de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80143d8:	2302      	movs	r3, #2
 80143da:	607b      	str	r3, [r7, #4]
 80143dc:	e001      	b.n	80143e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80143de:	2300      	movs	r3, #0
 80143e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80143e2:	687b      	ldr	r3, [r7, #4]
	}
 80143e4:	4618      	mov	r0, r3
 80143e6:	370c      	adds	r7, #12
 80143e8:	46bd      	mov	sp, r7
 80143ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ee:	4770      	bx	lr
 80143f0:	20000bdc 	.word	0x20000bdc
 80143f4:	20000bf8 	.word	0x20000bf8

080143f8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80143f8:	b580      	push	{r7, lr}
 80143fa:	b084      	sub	sp, #16
 80143fc:	af00      	add	r7, sp, #0
 80143fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014404:	2300      	movs	r3, #0
 8014406:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d05e      	beq.n	80144cc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801440e:	68bb      	ldr	r3, [r7, #8]
 8014410:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014412:	4b31      	ldr	r3, [pc, #196]	@ (80144d8 <xTaskPriorityInherit+0xe0>)
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014418:	429a      	cmp	r2, r3
 801441a:	d24e      	bcs.n	80144ba <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801441c:	68bb      	ldr	r3, [r7, #8]
 801441e:	699b      	ldr	r3, [r3, #24]
 8014420:	2b00      	cmp	r3, #0
 8014422:	db06      	blt.n	8014432 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014424:	4b2c      	ldr	r3, [pc, #176]	@ (80144d8 <xTaskPriorityInherit+0xe0>)
 8014426:	681b      	ldr	r3, [r3, #0]
 8014428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801442a:	f1c3 0207 	rsb	r2, r3, #7
 801442e:	68bb      	ldr	r3, [r7, #8]
 8014430:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8014432:	68bb      	ldr	r3, [r7, #8]
 8014434:	6959      	ldr	r1, [r3, #20]
 8014436:	68bb      	ldr	r3, [r7, #8]
 8014438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801443a:	4613      	mov	r3, r2
 801443c:	009b      	lsls	r3, r3, #2
 801443e:	4413      	add	r3, r2
 8014440:	009b      	lsls	r3, r3, #2
 8014442:	4a26      	ldr	r2, [pc, #152]	@ (80144dc <xTaskPriorityInherit+0xe4>)
 8014444:	4413      	add	r3, r2
 8014446:	4299      	cmp	r1, r3
 8014448:	d12f      	bne.n	80144aa <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801444a:	68bb      	ldr	r3, [r7, #8]
 801444c:	3304      	adds	r3, #4
 801444e:	4618      	mov	r0, r3
 8014450:	f7fe fa6e 	bl	8012930 <uxListRemove>
 8014454:	4603      	mov	r3, r0
 8014456:	2b00      	cmp	r3, #0
 8014458:	d10a      	bne.n	8014470 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 801445a:	68bb      	ldr	r3, [r7, #8]
 801445c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801445e:	2201      	movs	r2, #1
 8014460:	fa02 f303 	lsl.w	r3, r2, r3
 8014464:	43da      	mvns	r2, r3
 8014466:	4b1e      	ldr	r3, [pc, #120]	@ (80144e0 <xTaskPriorityInherit+0xe8>)
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	4013      	ands	r3, r2
 801446c:	4a1c      	ldr	r2, [pc, #112]	@ (80144e0 <xTaskPriorityInherit+0xe8>)
 801446e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014470:	4b19      	ldr	r3, [pc, #100]	@ (80144d8 <xTaskPriorityInherit+0xe0>)
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014476:	68bb      	ldr	r3, [r7, #8]
 8014478:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801447a:	68bb      	ldr	r3, [r7, #8]
 801447c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801447e:	2201      	movs	r2, #1
 8014480:	409a      	lsls	r2, r3
 8014482:	4b17      	ldr	r3, [pc, #92]	@ (80144e0 <xTaskPriorityInherit+0xe8>)
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	4313      	orrs	r3, r2
 8014488:	4a15      	ldr	r2, [pc, #84]	@ (80144e0 <xTaskPriorityInherit+0xe8>)
 801448a:	6013      	str	r3, [r2, #0]
 801448c:	68bb      	ldr	r3, [r7, #8]
 801448e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014490:	4613      	mov	r3, r2
 8014492:	009b      	lsls	r3, r3, #2
 8014494:	4413      	add	r3, r2
 8014496:	009b      	lsls	r3, r3, #2
 8014498:	4a10      	ldr	r2, [pc, #64]	@ (80144dc <xTaskPriorityInherit+0xe4>)
 801449a:	441a      	add	r2, r3
 801449c:	68bb      	ldr	r3, [r7, #8]
 801449e:	3304      	adds	r3, #4
 80144a0:	4619      	mov	r1, r3
 80144a2:	4610      	mov	r0, r2
 80144a4:	f7fe f9e7 	bl	8012876 <vListInsertEnd>
 80144a8:	e004      	b.n	80144b4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80144aa:	4b0b      	ldr	r3, [pc, #44]	@ (80144d8 <xTaskPriorityInherit+0xe0>)
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80144b0:	68bb      	ldr	r3, [r7, #8]
 80144b2:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80144b4:	2301      	movs	r3, #1
 80144b6:	60fb      	str	r3, [r7, #12]
 80144b8:	e008      	b.n	80144cc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80144ba:	68bb      	ldr	r3, [r7, #8]
 80144bc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80144be:	4b06      	ldr	r3, [pc, #24]	@ (80144d8 <xTaskPriorityInherit+0xe0>)
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144c4:	429a      	cmp	r2, r3
 80144c6:	d201      	bcs.n	80144cc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80144c8:	2301      	movs	r3, #1
 80144ca:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80144cc:	68fb      	ldr	r3, [r7, #12]
	}
 80144ce:	4618      	mov	r0, r3
 80144d0:	3710      	adds	r7, #16
 80144d2:	46bd      	mov	sp, r7
 80144d4:	bd80      	pop	{r7, pc}
 80144d6:	bf00      	nop
 80144d8:	20000ad0 	.word	0x20000ad0
 80144dc:	20000ad4 	.word	0x20000ad4
 80144e0:	20000bd8 	.word	0x20000bd8

080144e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80144e4:	b580      	push	{r7, lr}
 80144e6:	b086      	sub	sp, #24
 80144e8:	af00      	add	r7, sp, #0
 80144ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80144f0:	2300      	movs	r3, #0
 80144f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d070      	beq.n	80145dc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80144fa:	4b3b      	ldr	r3, [pc, #236]	@ (80145e8 <xTaskPriorityDisinherit+0x104>)
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	693a      	ldr	r2, [r7, #16]
 8014500:	429a      	cmp	r2, r3
 8014502:	d00b      	beq.n	801451c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8014504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014508:	f383 8811 	msr	BASEPRI, r3
 801450c:	f3bf 8f6f 	isb	sy
 8014510:	f3bf 8f4f 	dsb	sy
 8014514:	60fb      	str	r3, [r7, #12]
}
 8014516:	bf00      	nop
 8014518:	bf00      	nop
 801451a:	e7fd      	b.n	8014518 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801451c:	693b      	ldr	r3, [r7, #16]
 801451e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014520:	2b00      	cmp	r3, #0
 8014522:	d10b      	bne.n	801453c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8014524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014528:	f383 8811 	msr	BASEPRI, r3
 801452c:	f3bf 8f6f 	isb	sy
 8014530:	f3bf 8f4f 	dsb	sy
 8014534:	60bb      	str	r3, [r7, #8]
}
 8014536:	bf00      	nop
 8014538:	bf00      	nop
 801453a:	e7fd      	b.n	8014538 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 801453c:	693b      	ldr	r3, [r7, #16]
 801453e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014540:	1e5a      	subs	r2, r3, #1
 8014542:	693b      	ldr	r3, [r7, #16]
 8014544:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014546:	693b      	ldr	r3, [r7, #16]
 8014548:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801454a:	693b      	ldr	r3, [r7, #16]
 801454c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801454e:	429a      	cmp	r2, r3
 8014550:	d044      	beq.n	80145dc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014552:	693b      	ldr	r3, [r7, #16]
 8014554:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014556:	2b00      	cmp	r3, #0
 8014558:	d140      	bne.n	80145dc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801455a:	693b      	ldr	r3, [r7, #16]
 801455c:	3304      	adds	r3, #4
 801455e:	4618      	mov	r0, r3
 8014560:	f7fe f9e6 	bl	8012930 <uxListRemove>
 8014564:	4603      	mov	r3, r0
 8014566:	2b00      	cmp	r3, #0
 8014568:	d115      	bne.n	8014596 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801456a:	693b      	ldr	r3, [r7, #16]
 801456c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801456e:	491f      	ldr	r1, [pc, #124]	@ (80145ec <xTaskPriorityDisinherit+0x108>)
 8014570:	4613      	mov	r3, r2
 8014572:	009b      	lsls	r3, r3, #2
 8014574:	4413      	add	r3, r2
 8014576:	009b      	lsls	r3, r3, #2
 8014578:	440b      	add	r3, r1
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	2b00      	cmp	r3, #0
 801457e:	d10a      	bne.n	8014596 <xTaskPriorityDisinherit+0xb2>
 8014580:	693b      	ldr	r3, [r7, #16]
 8014582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014584:	2201      	movs	r2, #1
 8014586:	fa02 f303 	lsl.w	r3, r2, r3
 801458a:	43da      	mvns	r2, r3
 801458c:	4b18      	ldr	r3, [pc, #96]	@ (80145f0 <xTaskPriorityDisinherit+0x10c>)
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	4013      	ands	r3, r2
 8014592:	4a17      	ldr	r2, [pc, #92]	@ (80145f0 <xTaskPriorityDisinherit+0x10c>)
 8014594:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014596:	693b      	ldr	r3, [r7, #16]
 8014598:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801459a:	693b      	ldr	r3, [r7, #16]
 801459c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801459e:	693b      	ldr	r3, [r7, #16]
 80145a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145a2:	f1c3 0207 	rsb	r2, r3, #7
 80145a6:	693b      	ldr	r3, [r7, #16]
 80145a8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80145aa:	693b      	ldr	r3, [r7, #16]
 80145ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145ae:	2201      	movs	r2, #1
 80145b0:	409a      	lsls	r2, r3
 80145b2:	4b0f      	ldr	r3, [pc, #60]	@ (80145f0 <xTaskPriorityDisinherit+0x10c>)
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	4313      	orrs	r3, r2
 80145b8:	4a0d      	ldr	r2, [pc, #52]	@ (80145f0 <xTaskPriorityDisinherit+0x10c>)
 80145ba:	6013      	str	r3, [r2, #0]
 80145bc:	693b      	ldr	r3, [r7, #16]
 80145be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80145c0:	4613      	mov	r3, r2
 80145c2:	009b      	lsls	r3, r3, #2
 80145c4:	4413      	add	r3, r2
 80145c6:	009b      	lsls	r3, r3, #2
 80145c8:	4a08      	ldr	r2, [pc, #32]	@ (80145ec <xTaskPriorityDisinherit+0x108>)
 80145ca:	441a      	add	r2, r3
 80145cc:	693b      	ldr	r3, [r7, #16]
 80145ce:	3304      	adds	r3, #4
 80145d0:	4619      	mov	r1, r3
 80145d2:	4610      	mov	r0, r2
 80145d4:	f7fe f94f 	bl	8012876 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80145d8:	2301      	movs	r3, #1
 80145da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80145dc:	697b      	ldr	r3, [r7, #20]
	}
 80145de:	4618      	mov	r0, r3
 80145e0:	3718      	adds	r7, #24
 80145e2:	46bd      	mov	sp, r7
 80145e4:	bd80      	pop	{r7, pc}
 80145e6:	bf00      	nop
 80145e8:	20000ad0 	.word	0x20000ad0
 80145ec:	20000ad4 	.word	0x20000ad4
 80145f0:	20000bd8 	.word	0x20000bd8

080145f4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80145f4:	b580      	push	{r7, lr}
 80145f6:	b088      	sub	sp, #32
 80145f8:	af00      	add	r7, sp, #0
 80145fa:	6078      	str	r0, [r7, #4]
 80145fc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8014602:	2301      	movs	r3, #1
 8014604:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	2b00      	cmp	r3, #0
 801460a:	d079      	beq.n	8014700 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801460c:	69bb      	ldr	r3, [r7, #24]
 801460e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014610:	2b00      	cmp	r3, #0
 8014612:	d10b      	bne.n	801462c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8014614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014618:	f383 8811 	msr	BASEPRI, r3
 801461c:	f3bf 8f6f 	isb	sy
 8014620:	f3bf 8f4f 	dsb	sy
 8014624:	60fb      	str	r3, [r7, #12]
}
 8014626:	bf00      	nop
 8014628:	bf00      	nop
 801462a:	e7fd      	b.n	8014628 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801462c:	69bb      	ldr	r3, [r7, #24]
 801462e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014630:	683a      	ldr	r2, [r7, #0]
 8014632:	429a      	cmp	r2, r3
 8014634:	d902      	bls.n	801463c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014636:	683b      	ldr	r3, [r7, #0]
 8014638:	61fb      	str	r3, [r7, #28]
 801463a:	e002      	b.n	8014642 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801463c:	69bb      	ldr	r3, [r7, #24]
 801463e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014640:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014642:	69bb      	ldr	r3, [r7, #24]
 8014644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014646:	69fa      	ldr	r2, [r7, #28]
 8014648:	429a      	cmp	r2, r3
 801464a:	d059      	beq.n	8014700 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801464c:	69bb      	ldr	r3, [r7, #24]
 801464e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014650:	697a      	ldr	r2, [r7, #20]
 8014652:	429a      	cmp	r2, r3
 8014654:	d154      	bne.n	8014700 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8014656:	4b2c      	ldr	r3, [pc, #176]	@ (8014708 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	69ba      	ldr	r2, [r7, #24]
 801465c:	429a      	cmp	r2, r3
 801465e:	d10b      	bne.n	8014678 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8014660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014664:	f383 8811 	msr	BASEPRI, r3
 8014668:	f3bf 8f6f 	isb	sy
 801466c:	f3bf 8f4f 	dsb	sy
 8014670:	60bb      	str	r3, [r7, #8]
}
 8014672:	bf00      	nop
 8014674:	bf00      	nop
 8014676:	e7fd      	b.n	8014674 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014678:	69bb      	ldr	r3, [r7, #24]
 801467a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801467c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801467e:	69bb      	ldr	r3, [r7, #24]
 8014680:	69fa      	ldr	r2, [r7, #28]
 8014682:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014684:	69bb      	ldr	r3, [r7, #24]
 8014686:	699b      	ldr	r3, [r3, #24]
 8014688:	2b00      	cmp	r3, #0
 801468a:	db04      	blt.n	8014696 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801468c:	69fb      	ldr	r3, [r7, #28]
 801468e:	f1c3 0207 	rsb	r2, r3, #7
 8014692:	69bb      	ldr	r3, [r7, #24]
 8014694:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014696:	69bb      	ldr	r3, [r7, #24]
 8014698:	6959      	ldr	r1, [r3, #20]
 801469a:	693a      	ldr	r2, [r7, #16]
 801469c:	4613      	mov	r3, r2
 801469e:	009b      	lsls	r3, r3, #2
 80146a0:	4413      	add	r3, r2
 80146a2:	009b      	lsls	r3, r3, #2
 80146a4:	4a19      	ldr	r2, [pc, #100]	@ (801470c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80146a6:	4413      	add	r3, r2
 80146a8:	4299      	cmp	r1, r3
 80146aa:	d129      	bne.n	8014700 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80146ac:	69bb      	ldr	r3, [r7, #24]
 80146ae:	3304      	adds	r3, #4
 80146b0:	4618      	mov	r0, r3
 80146b2:	f7fe f93d 	bl	8012930 <uxListRemove>
 80146b6:	4603      	mov	r3, r0
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d10a      	bne.n	80146d2 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80146bc:	69bb      	ldr	r3, [r7, #24]
 80146be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146c0:	2201      	movs	r2, #1
 80146c2:	fa02 f303 	lsl.w	r3, r2, r3
 80146c6:	43da      	mvns	r2, r3
 80146c8:	4b11      	ldr	r3, [pc, #68]	@ (8014710 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	4013      	ands	r3, r2
 80146ce:	4a10      	ldr	r2, [pc, #64]	@ (8014710 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80146d0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80146d2:	69bb      	ldr	r3, [r7, #24]
 80146d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146d6:	2201      	movs	r2, #1
 80146d8:	409a      	lsls	r2, r3
 80146da:	4b0d      	ldr	r3, [pc, #52]	@ (8014710 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	4313      	orrs	r3, r2
 80146e0:	4a0b      	ldr	r2, [pc, #44]	@ (8014710 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80146e2:	6013      	str	r3, [r2, #0]
 80146e4:	69bb      	ldr	r3, [r7, #24]
 80146e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80146e8:	4613      	mov	r3, r2
 80146ea:	009b      	lsls	r3, r3, #2
 80146ec:	4413      	add	r3, r2
 80146ee:	009b      	lsls	r3, r3, #2
 80146f0:	4a06      	ldr	r2, [pc, #24]	@ (801470c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80146f2:	441a      	add	r2, r3
 80146f4:	69bb      	ldr	r3, [r7, #24]
 80146f6:	3304      	adds	r3, #4
 80146f8:	4619      	mov	r1, r3
 80146fa:	4610      	mov	r0, r2
 80146fc:	f7fe f8bb 	bl	8012876 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014700:	bf00      	nop
 8014702:	3720      	adds	r7, #32
 8014704:	46bd      	mov	sp, r7
 8014706:	bd80      	pop	{r7, pc}
 8014708:	20000ad0 	.word	0x20000ad0
 801470c:	20000ad4 	.word	0x20000ad4
 8014710:	20000bd8 	.word	0x20000bd8

08014714 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8014714:	b480      	push	{r7}
 8014716:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8014718:	4b07      	ldr	r3, [pc, #28]	@ (8014738 <pvTaskIncrementMutexHeldCount+0x24>)
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	2b00      	cmp	r3, #0
 801471e:	d004      	beq.n	801472a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014720:	4b05      	ldr	r3, [pc, #20]	@ (8014738 <pvTaskIncrementMutexHeldCount+0x24>)
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014726:	3201      	adds	r2, #1
 8014728:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 801472a:	4b03      	ldr	r3, [pc, #12]	@ (8014738 <pvTaskIncrementMutexHeldCount+0x24>)
 801472c:	681b      	ldr	r3, [r3, #0]
	}
 801472e:	4618      	mov	r0, r3
 8014730:	46bd      	mov	sp, r7
 8014732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014736:	4770      	bx	lr
 8014738:	20000ad0 	.word	0x20000ad0

0801473c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 801473c:	b580      	push	{r7, lr}
 801473e:	b084      	sub	sp, #16
 8014740:	af00      	add	r7, sp, #0
 8014742:	6078      	str	r0, [r7, #4]
 8014744:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8014746:	f000 fabf 	bl	8014cc8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 801474a:	4b20      	ldr	r3, [pc, #128]	@ (80147cc <ulTaskNotifyTake+0x90>)
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014752:	2b00      	cmp	r3, #0
 8014754:	d113      	bne.n	801477e <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8014756:	4b1d      	ldr	r3, [pc, #116]	@ (80147cc <ulTaskNotifyTake+0x90>)
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	2201      	movs	r2, #1
 801475c:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8

				if( xTicksToWait > ( TickType_t ) 0 )
 8014760:	683b      	ldr	r3, [r7, #0]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d00b      	beq.n	801477e <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014766:	2101      	movs	r1, #1
 8014768:	6838      	ldr	r0, [r7, #0]
 801476a:	f000 f919 	bl	80149a0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801476e:	4b18      	ldr	r3, [pc, #96]	@ (80147d0 <ulTaskNotifyTake+0x94>)
 8014770:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014774:	601a      	str	r2, [r3, #0]
 8014776:	f3bf 8f4f 	dsb	sy
 801477a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801477e:	f000 fad5 	bl	8014d2c <vPortExitCritical>

		taskENTER_CRITICAL();
 8014782:	f000 faa1 	bl	8014cc8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8014786:	4b11      	ldr	r3, [pc, #68]	@ (80147cc <ulTaskNotifyTake+0x90>)
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801478e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8014790:	68fb      	ldr	r3, [r7, #12]
 8014792:	2b00      	cmp	r3, #0
 8014794:	d00e      	beq.n	80147b4 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	2b00      	cmp	r3, #0
 801479a:	d005      	beq.n	80147a8 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 801479c:	4b0b      	ldr	r3, [pc, #44]	@ (80147cc <ulTaskNotifyTake+0x90>)
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	2200      	movs	r2, #0
 80147a2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 80147a6:	e005      	b.n	80147b4 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80147a8:	4b08      	ldr	r3, [pc, #32]	@ (80147cc <ulTaskNotifyTake+0x90>)
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	68fa      	ldr	r2, [r7, #12]
 80147ae:	3a01      	subs	r2, #1
 80147b0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80147b4:	4b05      	ldr	r3, [pc, #20]	@ (80147cc <ulTaskNotifyTake+0x90>)
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	2200      	movs	r2, #0
 80147ba:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
		}
		taskEXIT_CRITICAL();
 80147be:	f000 fab5 	bl	8014d2c <vPortExitCritical>

		return ulReturn;
 80147c2:	68fb      	ldr	r3, [r7, #12]
	}
 80147c4:	4618      	mov	r0, r3
 80147c6:	3710      	adds	r7, #16
 80147c8:	46bd      	mov	sp, r7
 80147ca:	bd80      	pop	{r7, pc}
 80147cc:	20000ad0 	.word	0x20000ad0
 80147d0:	e000ed04 	.word	0xe000ed04

080147d4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80147d4:	b580      	push	{r7, lr}
 80147d6:	b08e      	sub	sp, #56	@ 0x38
 80147d8:	af00      	add	r7, sp, #0
 80147da:	60f8      	str	r0, [r7, #12]
 80147dc:	60b9      	str	r1, [r7, #8]
 80147de:	603b      	str	r3, [r7, #0]
 80147e0:	4613      	mov	r3, r2
 80147e2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80147e4:	2301      	movs	r3, #1
 80147e6:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80147e8:	68fb      	ldr	r3, [r7, #12]
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d10b      	bne.n	8014806 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 80147ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80147f2:	f383 8811 	msr	BASEPRI, r3
 80147f6:	f3bf 8f6f 	isb	sy
 80147fa:	f3bf 8f4f 	dsb	sy
 80147fe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8014800:	bf00      	nop
 8014802:	bf00      	nop
 8014804:	e7fd      	b.n	8014802 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014806:	f000 fb3f 	bl	8014e88 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 801480e:	f3ef 8211 	mrs	r2, BASEPRI
 8014812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014816:	f383 8811 	msr	BASEPRI, r3
 801481a:	f3bf 8f6f 	isb	sy
 801481e:	f3bf 8f4f 	dsb	sy
 8014822:	623a      	str	r2, [r7, #32]
 8014824:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8014826:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014828:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 801482a:	683b      	ldr	r3, [r7, #0]
 801482c:	2b00      	cmp	r3, #0
 801482e:	d004      	beq.n	801483a <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014832:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8014836:	683b      	ldr	r3, [r7, #0]
 8014838:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801483a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801483c:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8014840:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8014844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014846:	2202      	movs	r2, #2
 8014848:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8

			switch( eAction )
 801484c:	79fb      	ldrb	r3, [r7, #7]
 801484e:	2b04      	cmp	r3, #4
 8014850:	d82e      	bhi.n	80148b0 <xTaskGenericNotifyFromISR+0xdc>
 8014852:	a201      	add	r2, pc, #4	@ (adr r2, 8014858 <xTaskGenericNotifyFromISR+0x84>)
 8014854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014858:	080148d5 	.word	0x080148d5
 801485c:	0801486d 	.word	0x0801486d
 8014860:	0801487f 	.word	0x0801487f
 8014864:	0801488f 	.word	0x0801488f
 8014868:	08014899 	.word	0x08014899
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801486c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801486e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8014872:	68bb      	ldr	r3, [r7, #8]
 8014874:	431a      	orrs	r2, r3
 8014876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014878:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					break;
 801487c:	e02d      	b.n	80148da <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801487e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014880:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014884:	1c5a      	adds	r2, r3, #1
 8014886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014888:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					break;
 801488c:	e025      	b.n	80148da <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801488e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014890:	68ba      	ldr	r2, [r7, #8]
 8014892:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					break;
 8014896:	e020      	b.n	80148da <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8014898:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801489c:	2b02      	cmp	r3, #2
 801489e:	d004      	beq.n	80148aa <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80148a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80148a2:	68ba      	ldr	r2, [r7, #8]
 80148a4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80148a8:	e017      	b.n	80148da <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 80148aa:	2300      	movs	r3, #0
 80148ac:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 80148ae:	e014      	b.n	80148da <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80148b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80148b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80148b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80148ba:	d00d      	beq.n	80148d8 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 80148bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80148c0:	f383 8811 	msr	BASEPRI, r3
 80148c4:	f3bf 8f6f 	isb	sy
 80148c8:	f3bf 8f4f 	dsb	sy
 80148cc:	61bb      	str	r3, [r7, #24]
}
 80148ce:	bf00      	nop
 80148d0:	bf00      	nop
 80148d2:	e7fd      	b.n	80148d0 <xTaskGenericNotifyFromISR+0xfc>
					break;
 80148d4:	bf00      	nop
 80148d6:	e000      	b.n	80148da <xTaskGenericNotifyFromISR+0x106>
					break;
 80148d8:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80148da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80148de:	2b01      	cmp	r3, #1
 80148e0:	d146      	bne.n	8014970 <xTaskGenericNotifyFromISR+0x19c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80148e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80148e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d00b      	beq.n	8014902 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 80148ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80148ee:	f383 8811 	msr	BASEPRI, r3
 80148f2:	f3bf 8f6f 	isb	sy
 80148f6:	f3bf 8f4f 	dsb	sy
 80148fa:	617b      	str	r3, [r7, #20]
}
 80148fc:	bf00      	nop
 80148fe:	bf00      	nop
 8014900:	e7fd      	b.n	80148fe <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014902:	4b21      	ldr	r3, [pc, #132]	@ (8014988 <xTaskGenericNotifyFromISR+0x1b4>)
 8014904:	681b      	ldr	r3, [r3, #0]
 8014906:	2b00      	cmp	r3, #0
 8014908:	d11c      	bne.n	8014944 <xTaskGenericNotifyFromISR+0x170>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801490a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801490c:	3304      	adds	r3, #4
 801490e:	4618      	mov	r0, r3
 8014910:	f7fe f80e 	bl	8012930 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014918:	2201      	movs	r2, #1
 801491a:	409a      	lsls	r2, r3
 801491c:	4b1b      	ldr	r3, [pc, #108]	@ (801498c <xTaskGenericNotifyFromISR+0x1b8>)
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	4313      	orrs	r3, r2
 8014922:	4a1a      	ldr	r2, [pc, #104]	@ (801498c <xTaskGenericNotifyFromISR+0x1b8>)
 8014924:	6013      	str	r3, [r2, #0]
 8014926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014928:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801492a:	4613      	mov	r3, r2
 801492c:	009b      	lsls	r3, r3, #2
 801492e:	4413      	add	r3, r2
 8014930:	009b      	lsls	r3, r3, #2
 8014932:	4a17      	ldr	r2, [pc, #92]	@ (8014990 <xTaskGenericNotifyFromISR+0x1bc>)
 8014934:	441a      	add	r2, r3
 8014936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014938:	3304      	adds	r3, #4
 801493a:	4619      	mov	r1, r3
 801493c:	4610      	mov	r0, r2
 801493e:	f7fd ff9a 	bl	8012876 <vListInsertEnd>
 8014942:	e005      	b.n	8014950 <xTaskGenericNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8014944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014946:	3318      	adds	r3, #24
 8014948:	4619      	mov	r1, r3
 801494a:	4812      	ldr	r0, [pc, #72]	@ (8014994 <xTaskGenericNotifyFromISR+0x1c0>)
 801494c:	f7fd ff93 	bl	8012876 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014954:	4b10      	ldr	r3, [pc, #64]	@ (8014998 <xTaskGenericNotifyFromISR+0x1c4>)
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801495a:	429a      	cmp	r2, r3
 801495c:	d908      	bls.n	8014970 <xTaskGenericNotifyFromISR+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 801495e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014960:	2b00      	cmp	r3, #0
 8014962:	d002      	beq.n	801496a <xTaskGenericNotifyFromISR+0x196>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8014964:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014966:	2201      	movs	r2, #1
 8014968:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 801496a:	4b0c      	ldr	r3, [pc, #48]	@ (801499c <xTaskGenericNotifyFromISR+0x1c8>)
 801496c:	2201      	movs	r2, #1
 801496e:	601a      	str	r2, [r3, #0]
 8014970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014972:	613b      	str	r3, [r7, #16]
	__asm volatile
 8014974:	693b      	ldr	r3, [r7, #16]
 8014976:	f383 8811 	msr	BASEPRI, r3
}
 801497a:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 801497c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 801497e:	4618      	mov	r0, r3
 8014980:	3738      	adds	r7, #56	@ 0x38
 8014982:	46bd      	mov	sp, r7
 8014984:	bd80      	pop	{r7, pc}
 8014986:	bf00      	nop
 8014988:	20000bf8 	.word	0x20000bf8
 801498c:	20000bd8 	.word	0x20000bd8
 8014990:	20000ad4 	.word	0x20000ad4
 8014994:	20000b90 	.word	0x20000b90
 8014998:	20000ad0 	.word	0x20000ad0
 801499c:	20000be4 	.word	0x20000be4

080149a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80149a0:	b580      	push	{r7, lr}
 80149a2:	b084      	sub	sp, #16
 80149a4:	af00      	add	r7, sp, #0
 80149a6:	6078      	str	r0, [r7, #4]
 80149a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80149aa:	4b29      	ldr	r3, [pc, #164]	@ (8014a50 <prvAddCurrentTaskToDelayedList+0xb0>)
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80149b0:	4b28      	ldr	r3, [pc, #160]	@ (8014a54 <prvAddCurrentTaskToDelayedList+0xb4>)
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	3304      	adds	r3, #4
 80149b6:	4618      	mov	r0, r3
 80149b8:	f7fd ffba 	bl	8012930 <uxListRemove>
 80149bc:	4603      	mov	r3, r0
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d10b      	bne.n	80149da <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80149c2:	4b24      	ldr	r3, [pc, #144]	@ (8014a54 <prvAddCurrentTaskToDelayedList+0xb4>)
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80149c8:	2201      	movs	r2, #1
 80149ca:	fa02 f303 	lsl.w	r3, r2, r3
 80149ce:	43da      	mvns	r2, r3
 80149d0:	4b21      	ldr	r3, [pc, #132]	@ (8014a58 <prvAddCurrentTaskToDelayedList+0xb8>)
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	4013      	ands	r3, r2
 80149d6:	4a20      	ldr	r2, [pc, #128]	@ (8014a58 <prvAddCurrentTaskToDelayedList+0xb8>)
 80149d8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80149e0:	d10a      	bne.n	80149f8 <prvAddCurrentTaskToDelayedList+0x58>
 80149e2:	683b      	ldr	r3, [r7, #0]
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d007      	beq.n	80149f8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80149e8:	4b1a      	ldr	r3, [pc, #104]	@ (8014a54 <prvAddCurrentTaskToDelayedList+0xb4>)
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	3304      	adds	r3, #4
 80149ee:	4619      	mov	r1, r3
 80149f0:	481a      	ldr	r0, [pc, #104]	@ (8014a5c <prvAddCurrentTaskToDelayedList+0xbc>)
 80149f2:	f7fd ff40 	bl	8012876 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80149f6:	e026      	b.n	8014a46 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80149f8:	68fa      	ldr	r2, [r7, #12]
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	4413      	add	r3, r2
 80149fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014a00:	4b14      	ldr	r3, [pc, #80]	@ (8014a54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	68ba      	ldr	r2, [r7, #8]
 8014a06:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014a08:	68ba      	ldr	r2, [r7, #8]
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	429a      	cmp	r2, r3
 8014a0e:	d209      	bcs.n	8014a24 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014a10:	4b13      	ldr	r3, [pc, #76]	@ (8014a60 <prvAddCurrentTaskToDelayedList+0xc0>)
 8014a12:	681a      	ldr	r2, [r3, #0]
 8014a14:	4b0f      	ldr	r3, [pc, #60]	@ (8014a54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	3304      	adds	r3, #4
 8014a1a:	4619      	mov	r1, r3
 8014a1c:	4610      	mov	r0, r2
 8014a1e:	f7fd ff4e 	bl	80128be <vListInsert>
}
 8014a22:	e010      	b.n	8014a46 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014a24:	4b0f      	ldr	r3, [pc, #60]	@ (8014a64 <prvAddCurrentTaskToDelayedList+0xc4>)
 8014a26:	681a      	ldr	r2, [r3, #0]
 8014a28:	4b0a      	ldr	r3, [pc, #40]	@ (8014a54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	3304      	adds	r3, #4
 8014a2e:	4619      	mov	r1, r3
 8014a30:	4610      	mov	r0, r2
 8014a32:	f7fd ff44 	bl	80128be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014a36:	4b0c      	ldr	r3, [pc, #48]	@ (8014a68 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	68ba      	ldr	r2, [r7, #8]
 8014a3c:	429a      	cmp	r2, r3
 8014a3e:	d202      	bcs.n	8014a46 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014a40:	4a09      	ldr	r2, [pc, #36]	@ (8014a68 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014a42:	68bb      	ldr	r3, [r7, #8]
 8014a44:	6013      	str	r3, [r2, #0]
}
 8014a46:	bf00      	nop
 8014a48:	3710      	adds	r7, #16
 8014a4a:	46bd      	mov	sp, r7
 8014a4c:	bd80      	pop	{r7, pc}
 8014a4e:	bf00      	nop
 8014a50:	20000bd4 	.word	0x20000bd4
 8014a54:	20000ad0 	.word	0x20000ad0
 8014a58:	20000bd8 	.word	0x20000bd8
 8014a5c:	20000bbc 	.word	0x20000bbc
 8014a60:	20000b8c 	.word	0x20000b8c
 8014a64:	20000b88 	.word	0x20000b88
 8014a68:	20000bf0 	.word	0x20000bf0

08014a6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014a6c:	b480      	push	{r7}
 8014a6e:	b085      	sub	sp, #20
 8014a70:	af00      	add	r7, sp, #0
 8014a72:	60f8      	str	r0, [r7, #12]
 8014a74:	60b9      	str	r1, [r7, #8]
 8014a76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	3b04      	subs	r3, #4
 8014a7c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014a7e:	68fb      	ldr	r3, [r7, #12]
 8014a80:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8014a84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	3b04      	subs	r3, #4
 8014a8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014a8c:	68bb      	ldr	r3, [r7, #8]
 8014a8e:	f023 0201 	bic.w	r2, r3, #1
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	3b04      	subs	r3, #4
 8014a9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014a9c:	4a0c      	ldr	r2, [pc, #48]	@ (8014ad0 <pxPortInitialiseStack+0x64>)
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	3b14      	subs	r3, #20
 8014aa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014aa8:	687a      	ldr	r2, [r7, #4]
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	3b04      	subs	r3, #4
 8014ab2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	f06f 0202 	mvn.w	r2, #2
 8014aba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	3b20      	subs	r3, #32
 8014ac0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014ac2:	68fb      	ldr	r3, [r7, #12]
}
 8014ac4:	4618      	mov	r0, r3
 8014ac6:	3714      	adds	r7, #20
 8014ac8:	46bd      	mov	sp, r7
 8014aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ace:	4770      	bx	lr
 8014ad0:	08014ad5 	.word	0x08014ad5

08014ad4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014ad4:	b480      	push	{r7}
 8014ad6:	b085      	sub	sp, #20
 8014ad8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014ada:	2300      	movs	r3, #0
 8014adc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014ade:	4b13      	ldr	r3, [pc, #76]	@ (8014b2c <prvTaskExitError+0x58>)
 8014ae0:	681b      	ldr	r3, [r3, #0]
 8014ae2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014ae6:	d00b      	beq.n	8014b00 <prvTaskExitError+0x2c>
	__asm volatile
 8014ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014aec:	f383 8811 	msr	BASEPRI, r3
 8014af0:	f3bf 8f6f 	isb	sy
 8014af4:	f3bf 8f4f 	dsb	sy
 8014af8:	60fb      	str	r3, [r7, #12]
}
 8014afa:	bf00      	nop
 8014afc:	bf00      	nop
 8014afe:	e7fd      	b.n	8014afc <prvTaskExitError+0x28>
	__asm volatile
 8014b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b04:	f383 8811 	msr	BASEPRI, r3
 8014b08:	f3bf 8f6f 	isb	sy
 8014b0c:	f3bf 8f4f 	dsb	sy
 8014b10:	60bb      	str	r3, [r7, #8]
}
 8014b12:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014b14:	bf00      	nop
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d0fc      	beq.n	8014b16 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014b1c:	bf00      	nop
 8014b1e:	bf00      	nop
 8014b20:	3714      	adds	r7, #20
 8014b22:	46bd      	mov	sp, r7
 8014b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b28:	4770      	bx	lr
 8014b2a:	bf00      	nop
 8014b2c:	20000140 	.word	0x20000140

08014b30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014b30:	4b07      	ldr	r3, [pc, #28]	@ (8014b50 <pxCurrentTCBConst2>)
 8014b32:	6819      	ldr	r1, [r3, #0]
 8014b34:	6808      	ldr	r0, [r1, #0]
 8014b36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b3a:	f380 8809 	msr	PSP, r0
 8014b3e:	f3bf 8f6f 	isb	sy
 8014b42:	f04f 0000 	mov.w	r0, #0
 8014b46:	f380 8811 	msr	BASEPRI, r0
 8014b4a:	4770      	bx	lr
 8014b4c:	f3af 8000 	nop.w

08014b50 <pxCurrentTCBConst2>:
 8014b50:	20000ad0 	.word	0x20000ad0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014b54:	bf00      	nop
 8014b56:	bf00      	nop

08014b58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014b58:	4808      	ldr	r0, [pc, #32]	@ (8014b7c <prvPortStartFirstTask+0x24>)
 8014b5a:	6800      	ldr	r0, [r0, #0]
 8014b5c:	6800      	ldr	r0, [r0, #0]
 8014b5e:	f380 8808 	msr	MSP, r0
 8014b62:	f04f 0000 	mov.w	r0, #0
 8014b66:	f380 8814 	msr	CONTROL, r0
 8014b6a:	b662      	cpsie	i
 8014b6c:	b661      	cpsie	f
 8014b6e:	f3bf 8f4f 	dsb	sy
 8014b72:	f3bf 8f6f 	isb	sy
 8014b76:	df00      	svc	0
 8014b78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014b7a:	bf00      	nop
 8014b7c:	e000ed08 	.word	0xe000ed08

08014b80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014b80:	b580      	push	{r7, lr}
 8014b82:	b086      	sub	sp, #24
 8014b84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014b86:	4b47      	ldr	r3, [pc, #284]	@ (8014ca4 <xPortStartScheduler+0x124>)
 8014b88:	681b      	ldr	r3, [r3, #0]
 8014b8a:	4a47      	ldr	r2, [pc, #284]	@ (8014ca8 <xPortStartScheduler+0x128>)
 8014b8c:	4293      	cmp	r3, r2
 8014b8e:	d10b      	bne.n	8014ba8 <xPortStartScheduler+0x28>
	__asm volatile
 8014b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b94:	f383 8811 	msr	BASEPRI, r3
 8014b98:	f3bf 8f6f 	isb	sy
 8014b9c:	f3bf 8f4f 	dsb	sy
 8014ba0:	613b      	str	r3, [r7, #16]
}
 8014ba2:	bf00      	nop
 8014ba4:	bf00      	nop
 8014ba6:	e7fd      	b.n	8014ba4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014ba8:	4b3e      	ldr	r3, [pc, #248]	@ (8014ca4 <xPortStartScheduler+0x124>)
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	4a3f      	ldr	r2, [pc, #252]	@ (8014cac <xPortStartScheduler+0x12c>)
 8014bae:	4293      	cmp	r3, r2
 8014bb0:	d10b      	bne.n	8014bca <xPortStartScheduler+0x4a>
	__asm volatile
 8014bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014bb6:	f383 8811 	msr	BASEPRI, r3
 8014bba:	f3bf 8f6f 	isb	sy
 8014bbe:	f3bf 8f4f 	dsb	sy
 8014bc2:	60fb      	str	r3, [r7, #12]
}
 8014bc4:	bf00      	nop
 8014bc6:	bf00      	nop
 8014bc8:	e7fd      	b.n	8014bc6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014bca:	4b39      	ldr	r3, [pc, #228]	@ (8014cb0 <xPortStartScheduler+0x130>)
 8014bcc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014bce:	697b      	ldr	r3, [r7, #20]
 8014bd0:	781b      	ldrb	r3, [r3, #0]
 8014bd2:	b2db      	uxtb	r3, r3
 8014bd4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014bd6:	697b      	ldr	r3, [r7, #20]
 8014bd8:	22ff      	movs	r2, #255	@ 0xff
 8014bda:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014bdc:	697b      	ldr	r3, [r7, #20]
 8014bde:	781b      	ldrb	r3, [r3, #0]
 8014be0:	b2db      	uxtb	r3, r3
 8014be2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014be4:	78fb      	ldrb	r3, [r7, #3]
 8014be6:	b2db      	uxtb	r3, r3
 8014be8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8014bec:	b2da      	uxtb	r2, r3
 8014bee:	4b31      	ldr	r3, [pc, #196]	@ (8014cb4 <xPortStartScheduler+0x134>)
 8014bf0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014bf2:	4b31      	ldr	r3, [pc, #196]	@ (8014cb8 <xPortStartScheduler+0x138>)
 8014bf4:	2207      	movs	r2, #7
 8014bf6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014bf8:	e009      	b.n	8014c0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8014bfa:	4b2f      	ldr	r3, [pc, #188]	@ (8014cb8 <xPortStartScheduler+0x138>)
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	3b01      	subs	r3, #1
 8014c00:	4a2d      	ldr	r2, [pc, #180]	@ (8014cb8 <xPortStartScheduler+0x138>)
 8014c02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014c04:	78fb      	ldrb	r3, [r7, #3]
 8014c06:	b2db      	uxtb	r3, r3
 8014c08:	005b      	lsls	r3, r3, #1
 8014c0a:	b2db      	uxtb	r3, r3
 8014c0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014c0e:	78fb      	ldrb	r3, [r7, #3]
 8014c10:	b2db      	uxtb	r3, r3
 8014c12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014c16:	2b80      	cmp	r3, #128	@ 0x80
 8014c18:	d0ef      	beq.n	8014bfa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014c1a:	4b27      	ldr	r3, [pc, #156]	@ (8014cb8 <xPortStartScheduler+0x138>)
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	f1c3 0307 	rsb	r3, r3, #7
 8014c22:	2b04      	cmp	r3, #4
 8014c24:	d00b      	beq.n	8014c3e <xPortStartScheduler+0xbe>
	__asm volatile
 8014c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c2a:	f383 8811 	msr	BASEPRI, r3
 8014c2e:	f3bf 8f6f 	isb	sy
 8014c32:	f3bf 8f4f 	dsb	sy
 8014c36:	60bb      	str	r3, [r7, #8]
}
 8014c38:	bf00      	nop
 8014c3a:	bf00      	nop
 8014c3c:	e7fd      	b.n	8014c3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8014cb8 <xPortStartScheduler+0x138>)
 8014c40:	681b      	ldr	r3, [r3, #0]
 8014c42:	021b      	lsls	r3, r3, #8
 8014c44:	4a1c      	ldr	r2, [pc, #112]	@ (8014cb8 <xPortStartScheduler+0x138>)
 8014c46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014c48:	4b1b      	ldr	r3, [pc, #108]	@ (8014cb8 <xPortStartScheduler+0x138>)
 8014c4a:	681b      	ldr	r3, [r3, #0]
 8014c4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8014c50:	4a19      	ldr	r2, [pc, #100]	@ (8014cb8 <xPortStartScheduler+0x138>)
 8014c52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	b2da      	uxtb	r2, r3
 8014c58:	697b      	ldr	r3, [r7, #20]
 8014c5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014c5c:	4b17      	ldr	r3, [pc, #92]	@ (8014cbc <xPortStartScheduler+0x13c>)
 8014c5e:	681b      	ldr	r3, [r3, #0]
 8014c60:	4a16      	ldr	r2, [pc, #88]	@ (8014cbc <xPortStartScheduler+0x13c>)
 8014c62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8014c66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014c68:	4b14      	ldr	r3, [pc, #80]	@ (8014cbc <xPortStartScheduler+0x13c>)
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	4a13      	ldr	r2, [pc, #76]	@ (8014cbc <xPortStartScheduler+0x13c>)
 8014c6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8014c72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014c74:	f000 f8da 	bl	8014e2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014c78:	4b11      	ldr	r3, [pc, #68]	@ (8014cc0 <xPortStartScheduler+0x140>)
 8014c7a:	2200      	movs	r2, #0
 8014c7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014c7e:	f000 f8f9 	bl	8014e74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014c82:	4b10      	ldr	r3, [pc, #64]	@ (8014cc4 <xPortStartScheduler+0x144>)
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	4a0f      	ldr	r2, [pc, #60]	@ (8014cc4 <xPortStartScheduler+0x144>)
 8014c88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8014c8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014c8e:	f7ff ff63 	bl	8014b58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014c92:	f7ff f949 	bl	8013f28 <vTaskSwitchContext>
	prvTaskExitError();
 8014c96:	f7ff ff1d 	bl	8014ad4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014c9a:	2300      	movs	r3, #0
}
 8014c9c:	4618      	mov	r0, r3
 8014c9e:	3718      	adds	r7, #24
 8014ca0:	46bd      	mov	sp, r7
 8014ca2:	bd80      	pop	{r7, pc}
 8014ca4:	e000ed00 	.word	0xe000ed00
 8014ca8:	410fc271 	.word	0x410fc271
 8014cac:	410fc270 	.word	0x410fc270
 8014cb0:	e000e400 	.word	0xe000e400
 8014cb4:	20000c04 	.word	0x20000c04
 8014cb8:	20000c08 	.word	0x20000c08
 8014cbc:	e000ed20 	.word	0xe000ed20
 8014cc0:	20000140 	.word	0x20000140
 8014cc4:	e000ef34 	.word	0xe000ef34

08014cc8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014cc8:	b480      	push	{r7}
 8014cca:	b083      	sub	sp, #12
 8014ccc:	af00      	add	r7, sp, #0
	__asm volatile
 8014cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014cd2:	f383 8811 	msr	BASEPRI, r3
 8014cd6:	f3bf 8f6f 	isb	sy
 8014cda:	f3bf 8f4f 	dsb	sy
 8014cde:	607b      	str	r3, [r7, #4]
}
 8014ce0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014ce2:	4b10      	ldr	r3, [pc, #64]	@ (8014d24 <vPortEnterCritical+0x5c>)
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	3301      	adds	r3, #1
 8014ce8:	4a0e      	ldr	r2, [pc, #56]	@ (8014d24 <vPortEnterCritical+0x5c>)
 8014cea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014cec:	4b0d      	ldr	r3, [pc, #52]	@ (8014d24 <vPortEnterCritical+0x5c>)
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	2b01      	cmp	r3, #1
 8014cf2:	d110      	bne.n	8014d16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8014d28 <vPortEnterCritical+0x60>)
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	b2db      	uxtb	r3, r3
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d00b      	beq.n	8014d16 <vPortEnterCritical+0x4e>
	__asm volatile
 8014cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d02:	f383 8811 	msr	BASEPRI, r3
 8014d06:	f3bf 8f6f 	isb	sy
 8014d0a:	f3bf 8f4f 	dsb	sy
 8014d0e:	603b      	str	r3, [r7, #0]
}
 8014d10:	bf00      	nop
 8014d12:	bf00      	nop
 8014d14:	e7fd      	b.n	8014d12 <vPortEnterCritical+0x4a>
	}
}
 8014d16:	bf00      	nop
 8014d18:	370c      	adds	r7, #12
 8014d1a:	46bd      	mov	sp, r7
 8014d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d20:	4770      	bx	lr
 8014d22:	bf00      	nop
 8014d24:	20000140 	.word	0x20000140
 8014d28:	e000ed04 	.word	0xe000ed04

08014d2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014d2c:	b480      	push	{r7}
 8014d2e:	b083      	sub	sp, #12
 8014d30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014d32:	4b12      	ldr	r3, [pc, #72]	@ (8014d7c <vPortExitCritical+0x50>)
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d10b      	bne.n	8014d52 <vPortExitCritical+0x26>
	__asm volatile
 8014d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d3e:	f383 8811 	msr	BASEPRI, r3
 8014d42:	f3bf 8f6f 	isb	sy
 8014d46:	f3bf 8f4f 	dsb	sy
 8014d4a:	607b      	str	r3, [r7, #4]
}
 8014d4c:	bf00      	nop
 8014d4e:	bf00      	nop
 8014d50:	e7fd      	b.n	8014d4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014d52:	4b0a      	ldr	r3, [pc, #40]	@ (8014d7c <vPortExitCritical+0x50>)
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	3b01      	subs	r3, #1
 8014d58:	4a08      	ldr	r2, [pc, #32]	@ (8014d7c <vPortExitCritical+0x50>)
 8014d5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014d5c:	4b07      	ldr	r3, [pc, #28]	@ (8014d7c <vPortExitCritical+0x50>)
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d105      	bne.n	8014d70 <vPortExitCritical+0x44>
 8014d64:	2300      	movs	r3, #0
 8014d66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014d68:	683b      	ldr	r3, [r7, #0]
 8014d6a:	f383 8811 	msr	BASEPRI, r3
}
 8014d6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014d70:	bf00      	nop
 8014d72:	370c      	adds	r7, #12
 8014d74:	46bd      	mov	sp, r7
 8014d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d7a:	4770      	bx	lr
 8014d7c:	20000140 	.word	0x20000140

08014d80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014d80:	f3ef 8009 	mrs	r0, PSP
 8014d84:	f3bf 8f6f 	isb	sy
 8014d88:	4b15      	ldr	r3, [pc, #84]	@ (8014de0 <pxCurrentTCBConst>)
 8014d8a:	681a      	ldr	r2, [r3, #0]
 8014d8c:	f01e 0f10 	tst.w	lr, #16
 8014d90:	bf08      	it	eq
 8014d92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014d96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d9a:	6010      	str	r0, [r2, #0]
 8014d9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014da0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8014da4:	f380 8811 	msr	BASEPRI, r0
 8014da8:	f3bf 8f4f 	dsb	sy
 8014dac:	f3bf 8f6f 	isb	sy
 8014db0:	f7ff f8ba 	bl	8013f28 <vTaskSwitchContext>
 8014db4:	f04f 0000 	mov.w	r0, #0
 8014db8:	f380 8811 	msr	BASEPRI, r0
 8014dbc:	bc09      	pop	{r0, r3}
 8014dbe:	6819      	ldr	r1, [r3, #0]
 8014dc0:	6808      	ldr	r0, [r1, #0]
 8014dc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dc6:	f01e 0f10 	tst.w	lr, #16
 8014dca:	bf08      	it	eq
 8014dcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014dd0:	f380 8809 	msr	PSP, r0
 8014dd4:	f3bf 8f6f 	isb	sy
 8014dd8:	4770      	bx	lr
 8014dda:	bf00      	nop
 8014ddc:	f3af 8000 	nop.w

08014de0 <pxCurrentTCBConst>:
 8014de0:	20000ad0 	.word	0x20000ad0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014de4:	bf00      	nop
 8014de6:	bf00      	nop

08014de8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014de8:	b580      	push	{r7, lr}
 8014dea:	b082      	sub	sp, #8
 8014dec:	af00      	add	r7, sp, #0
	__asm volatile
 8014dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014df2:	f383 8811 	msr	BASEPRI, r3
 8014df6:	f3bf 8f6f 	isb	sy
 8014dfa:	f3bf 8f4f 	dsb	sy
 8014dfe:	607b      	str	r3, [r7, #4]
}
 8014e00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014e02:	f7fe ffd7 	bl	8013db4 <xTaskIncrementTick>
 8014e06:	4603      	mov	r3, r0
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d003      	beq.n	8014e14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014e0c:	4b06      	ldr	r3, [pc, #24]	@ (8014e28 <SysTick_Handler+0x40>)
 8014e0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014e12:	601a      	str	r2, [r3, #0]
 8014e14:	2300      	movs	r3, #0
 8014e16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014e18:	683b      	ldr	r3, [r7, #0]
 8014e1a:	f383 8811 	msr	BASEPRI, r3
}
 8014e1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014e20:	bf00      	nop
 8014e22:	3708      	adds	r7, #8
 8014e24:	46bd      	mov	sp, r7
 8014e26:	bd80      	pop	{r7, pc}
 8014e28:	e000ed04 	.word	0xe000ed04

08014e2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014e2c:	b480      	push	{r7}
 8014e2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014e30:	4b0b      	ldr	r3, [pc, #44]	@ (8014e60 <vPortSetupTimerInterrupt+0x34>)
 8014e32:	2200      	movs	r2, #0
 8014e34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014e36:	4b0b      	ldr	r3, [pc, #44]	@ (8014e64 <vPortSetupTimerInterrupt+0x38>)
 8014e38:	2200      	movs	r2, #0
 8014e3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8014e68 <vPortSetupTimerInterrupt+0x3c>)
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	4a0a      	ldr	r2, [pc, #40]	@ (8014e6c <vPortSetupTimerInterrupt+0x40>)
 8014e42:	fba2 2303 	umull	r2, r3, r2, r3
 8014e46:	099b      	lsrs	r3, r3, #6
 8014e48:	4a09      	ldr	r2, [pc, #36]	@ (8014e70 <vPortSetupTimerInterrupt+0x44>)
 8014e4a:	3b01      	subs	r3, #1
 8014e4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014e4e:	4b04      	ldr	r3, [pc, #16]	@ (8014e60 <vPortSetupTimerInterrupt+0x34>)
 8014e50:	2207      	movs	r2, #7
 8014e52:	601a      	str	r2, [r3, #0]
}
 8014e54:	bf00      	nop
 8014e56:	46bd      	mov	sp, r7
 8014e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e5c:	4770      	bx	lr
 8014e5e:	bf00      	nop
 8014e60:	e000e010 	.word	0xe000e010
 8014e64:	e000e018 	.word	0xe000e018
 8014e68:	20000004 	.word	0x20000004
 8014e6c:	10624dd3 	.word	0x10624dd3
 8014e70:	e000e014 	.word	0xe000e014

08014e74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014e74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8014e84 <vPortEnableVFP+0x10>
 8014e78:	6801      	ldr	r1, [r0, #0]
 8014e7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8014e7e:	6001      	str	r1, [r0, #0]
 8014e80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014e82:	bf00      	nop
 8014e84:	e000ed88 	.word	0xe000ed88

08014e88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014e88:	b480      	push	{r7}
 8014e8a:	b085      	sub	sp, #20
 8014e8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014e8e:	f3ef 8305 	mrs	r3, IPSR
 8014e92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014e94:	68fb      	ldr	r3, [r7, #12]
 8014e96:	2b0f      	cmp	r3, #15
 8014e98:	d915      	bls.n	8014ec6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014e9a:	4a18      	ldr	r2, [pc, #96]	@ (8014efc <vPortValidateInterruptPriority+0x74>)
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	4413      	add	r3, r2
 8014ea0:	781b      	ldrb	r3, [r3, #0]
 8014ea2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014ea4:	4b16      	ldr	r3, [pc, #88]	@ (8014f00 <vPortValidateInterruptPriority+0x78>)
 8014ea6:	781b      	ldrb	r3, [r3, #0]
 8014ea8:	7afa      	ldrb	r2, [r7, #11]
 8014eaa:	429a      	cmp	r2, r3
 8014eac:	d20b      	bcs.n	8014ec6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8014eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014eb2:	f383 8811 	msr	BASEPRI, r3
 8014eb6:	f3bf 8f6f 	isb	sy
 8014eba:	f3bf 8f4f 	dsb	sy
 8014ebe:	607b      	str	r3, [r7, #4]
}
 8014ec0:	bf00      	nop
 8014ec2:	bf00      	nop
 8014ec4:	e7fd      	b.n	8014ec2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8014f04 <vPortValidateInterruptPriority+0x7c>)
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8014ece:	4b0e      	ldr	r3, [pc, #56]	@ (8014f08 <vPortValidateInterruptPriority+0x80>)
 8014ed0:	681b      	ldr	r3, [r3, #0]
 8014ed2:	429a      	cmp	r2, r3
 8014ed4:	d90b      	bls.n	8014eee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8014ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014eda:	f383 8811 	msr	BASEPRI, r3
 8014ede:	f3bf 8f6f 	isb	sy
 8014ee2:	f3bf 8f4f 	dsb	sy
 8014ee6:	603b      	str	r3, [r7, #0]
}
 8014ee8:	bf00      	nop
 8014eea:	bf00      	nop
 8014eec:	e7fd      	b.n	8014eea <vPortValidateInterruptPriority+0x62>
	}
 8014eee:	bf00      	nop
 8014ef0:	3714      	adds	r7, #20
 8014ef2:	46bd      	mov	sp, r7
 8014ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ef8:	4770      	bx	lr
 8014efa:	bf00      	nop
 8014efc:	e000e3f0 	.word	0xe000e3f0
 8014f00:	20000c04 	.word	0x20000c04
 8014f04:	e000ed0c 	.word	0xe000ed0c
 8014f08:	20000c08 	.word	0x20000c08

08014f0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014f0c:	b580      	push	{r7, lr}
 8014f0e:	b08a      	sub	sp, #40	@ 0x28
 8014f10:	af00      	add	r7, sp, #0
 8014f12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014f14:	2300      	movs	r3, #0
 8014f16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014f18:	f7fe fea0 	bl	8013c5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014f1c:	4b5c      	ldr	r3, [pc, #368]	@ (8015090 <pvPortMalloc+0x184>)
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d101      	bne.n	8014f28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014f24:	f000 f924 	bl	8015170 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014f28:	4b5a      	ldr	r3, [pc, #360]	@ (8015094 <pvPortMalloc+0x188>)
 8014f2a:	681a      	ldr	r2, [r3, #0]
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	4013      	ands	r3, r2
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	f040 8095 	bne.w	8015060 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d01e      	beq.n	8014f7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8014f3c:	2208      	movs	r2, #8
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	4413      	add	r3, r2
 8014f42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	f003 0307 	and.w	r3, r3, #7
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d015      	beq.n	8014f7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	f023 0307 	bic.w	r3, r3, #7
 8014f54:	3308      	adds	r3, #8
 8014f56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	f003 0307 	and.w	r3, r3, #7
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d00b      	beq.n	8014f7a <pvPortMalloc+0x6e>
	__asm volatile
 8014f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f66:	f383 8811 	msr	BASEPRI, r3
 8014f6a:	f3bf 8f6f 	isb	sy
 8014f6e:	f3bf 8f4f 	dsb	sy
 8014f72:	617b      	str	r3, [r7, #20]
}
 8014f74:	bf00      	nop
 8014f76:	bf00      	nop
 8014f78:	e7fd      	b.n	8014f76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d06f      	beq.n	8015060 <pvPortMalloc+0x154>
 8014f80:	4b45      	ldr	r3, [pc, #276]	@ (8015098 <pvPortMalloc+0x18c>)
 8014f82:	681b      	ldr	r3, [r3, #0]
 8014f84:	687a      	ldr	r2, [r7, #4]
 8014f86:	429a      	cmp	r2, r3
 8014f88:	d86a      	bhi.n	8015060 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014f8a:	4b44      	ldr	r3, [pc, #272]	@ (801509c <pvPortMalloc+0x190>)
 8014f8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014f8e:	4b43      	ldr	r3, [pc, #268]	@ (801509c <pvPortMalloc+0x190>)
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014f94:	e004      	b.n	8014fa0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8014f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f9c:	681b      	ldr	r3, [r3, #0]
 8014f9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fa2:	685b      	ldr	r3, [r3, #4]
 8014fa4:	687a      	ldr	r2, [r7, #4]
 8014fa6:	429a      	cmp	r2, r3
 8014fa8:	d903      	bls.n	8014fb2 <pvPortMalloc+0xa6>
 8014faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d1f1      	bne.n	8014f96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014fb2:	4b37      	ldr	r3, [pc, #220]	@ (8015090 <pvPortMalloc+0x184>)
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014fb8:	429a      	cmp	r2, r3
 8014fba:	d051      	beq.n	8015060 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014fbc:	6a3b      	ldr	r3, [r7, #32]
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	2208      	movs	r2, #8
 8014fc2:	4413      	add	r3, r2
 8014fc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fc8:	681a      	ldr	r2, [r3, #0]
 8014fca:	6a3b      	ldr	r3, [r7, #32]
 8014fcc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fd0:	685a      	ldr	r2, [r3, #4]
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	1ad2      	subs	r2, r2, r3
 8014fd6:	2308      	movs	r3, #8
 8014fd8:	005b      	lsls	r3, r3, #1
 8014fda:	429a      	cmp	r2, r3
 8014fdc:	d920      	bls.n	8015020 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	4413      	add	r3, r2
 8014fe4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014fe6:	69bb      	ldr	r3, [r7, #24]
 8014fe8:	f003 0307 	and.w	r3, r3, #7
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d00b      	beq.n	8015008 <pvPortMalloc+0xfc>
	__asm volatile
 8014ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ff4:	f383 8811 	msr	BASEPRI, r3
 8014ff8:	f3bf 8f6f 	isb	sy
 8014ffc:	f3bf 8f4f 	dsb	sy
 8015000:	613b      	str	r3, [r7, #16]
}
 8015002:	bf00      	nop
 8015004:	bf00      	nop
 8015006:	e7fd      	b.n	8015004 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801500a:	685a      	ldr	r2, [r3, #4]
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	1ad2      	subs	r2, r2, r3
 8015010:	69bb      	ldr	r3, [r7, #24]
 8015012:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015016:	687a      	ldr	r2, [r7, #4]
 8015018:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801501a:	69b8      	ldr	r0, [r7, #24]
 801501c:	f000 f90a 	bl	8015234 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015020:	4b1d      	ldr	r3, [pc, #116]	@ (8015098 <pvPortMalloc+0x18c>)
 8015022:	681a      	ldr	r2, [r3, #0]
 8015024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015026:	685b      	ldr	r3, [r3, #4]
 8015028:	1ad3      	subs	r3, r2, r3
 801502a:	4a1b      	ldr	r2, [pc, #108]	@ (8015098 <pvPortMalloc+0x18c>)
 801502c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801502e:	4b1a      	ldr	r3, [pc, #104]	@ (8015098 <pvPortMalloc+0x18c>)
 8015030:	681a      	ldr	r2, [r3, #0]
 8015032:	4b1b      	ldr	r3, [pc, #108]	@ (80150a0 <pvPortMalloc+0x194>)
 8015034:	681b      	ldr	r3, [r3, #0]
 8015036:	429a      	cmp	r2, r3
 8015038:	d203      	bcs.n	8015042 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801503a:	4b17      	ldr	r3, [pc, #92]	@ (8015098 <pvPortMalloc+0x18c>)
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	4a18      	ldr	r2, [pc, #96]	@ (80150a0 <pvPortMalloc+0x194>)
 8015040:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015044:	685a      	ldr	r2, [r3, #4]
 8015046:	4b13      	ldr	r3, [pc, #76]	@ (8015094 <pvPortMalloc+0x188>)
 8015048:	681b      	ldr	r3, [r3, #0]
 801504a:	431a      	orrs	r2, r3
 801504c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801504e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015052:	2200      	movs	r2, #0
 8015054:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015056:	4b13      	ldr	r3, [pc, #76]	@ (80150a4 <pvPortMalloc+0x198>)
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	3301      	adds	r3, #1
 801505c:	4a11      	ldr	r2, [pc, #68]	@ (80150a4 <pvPortMalloc+0x198>)
 801505e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015060:	f7fe fe0a 	bl	8013c78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015064:	69fb      	ldr	r3, [r7, #28]
 8015066:	f003 0307 	and.w	r3, r3, #7
 801506a:	2b00      	cmp	r3, #0
 801506c:	d00b      	beq.n	8015086 <pvPortMalloc+0x17a>
	__asm volatile
 801506e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015072:	f383 8811 	msr	BASEPRI, r3
 8015076:	f3bf 8f6f 	isb	sy
 801507a:	f3bf 8f4f 	dsb	sy
 801507e:	60fb      	str	r3, [r7, #12]
}
 8015080:	bf00      	nop
 8015082:	bf00      	nop
 8015084:	e7fd      	b.n	8015082 <pvPortMalloc+0x176>
	return pvReturn;
 8015086:	69fb      	ldr	r3, [r7, #28]
}
 8015088:	4618      	mov	r0, r3
 801508a:	3728      	adds	r7, #40	@ 0x28
 801508c:	46bd      	mov	sp, r7
 801508e:	bd80      	pop	{r7, pc}
 8015090:	20005a34 	.word	0x20005a34
 8015094:	20005a48 	.word	0x20005a48
 8015098:	20005a38 	.word	0x20005a38
 801509c:	20005a2c 	.word	0x20005a2c
 80150a0:	20005a3c 	.word	0x20005a3c
 80150a4:	20005a40 	.word	0x20005a40

080150a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80150a8:	b580      	push	{r7, lr}
 80150aa:	b086      	sub	sp, #24
 80150ac:	af00      	add	r7, sp, #0
 80150ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d04f      	beq.n	801515a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80150ba:	2308      	movs	r3, #8
 80150bc:	425b      	negs	r3, r3
 80150be:	697a      	ldr	r2, [r7, #20]
 80150c0:	4413      	add	r3, r2
 80150c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80150c4:	697b      	ldr	r3, [r7, #20]
 80150c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80150c8:	693b      	ldr	r3, [r7, #16]
 80150ca:	685a      	ldr	r2, [r3, #4]
 80150cc:	4b25      	ldr	r3, [pc, #148]	@ (8015164 <vPortFree+0xbc>)
 80150ce:	681b      	ldr	r3, [r3, #0]
 80150d0:	4013      	ands	r3, r2
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d10b      	bne.n	80150ee <vPortFree+0x46>
	__asm volatile
 80150d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80150da:	f383 8811 	msr	BASEPRI, r3
 80150de:	f3bf 8f6f 	isb	sy
 80150e2:	f3bf 8f4f 	dsb	sy
 80150e6:	60fb      	str	r3, [r7, #12]
}
 80150e8:	bf00      	nop
 80150ea:	bf00      	nop
 80150ec:	e7fd      	b.n	80150ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80150ee:	693b      	ldr	r3, [r7, #16]
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d00b      	beq.n	801510e <vPortFree+0x66>
	__asm volatile
 80150f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80150fa:	f383 8811 	msr	BASEPRI, r3
 80150fe:	f3bf 8f6f 	isb	sy
 8015102:	f3bf 8f4f 	dsb	sy
 8015106:	60bb      	str	r3, [r7, #8]
}
 8015108:	bf00      	nop
 801510a:	bf00      	nop
 801510c:	e7fd      	b.n	801510a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801510e:	693b      	ldr	r3, [r7, #16]
 8015110:	685a      	ldr	r2, [r3, #4]
 8015112:	4b14      	ldr	r3, [pc, #80]	@ (8015164 <vPortFree+0xbc>)
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	4013      	ands	r3, r2
 8015118:	2b00      	cmp	r3, #0
 801511a:	d01e      	beq.n	801515a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801511c:	693b      	ldr	r3, [r7, #16]
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	2b00      	cmp	r3, #0
 8015122:	d11a      	bne.n	801515a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015124:	693b      	ldr	r3, [r7, #16]
 8015126:	685a      	ldr	r2, [r3, #4]
 8015128:	4b0e      	ldr	r3, [pc, #56]	@ (8015164 <vPortFree+0xbc>)
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	43db      	mvns	r3, r3
 801512e:	401a      	ands	r2, r3
 8015130:	693b      	ldr	r3, [r7, #16]
 8015132:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015134:	f7fe fd92 	bl	8013c5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015138:	693b      	ldr	r3, [r7, #16]
 801513a:	685a      	ldr	r2, [r3, #4]
 801513c:	4b0a      	ldr	r3, [pc, #40]	@ (8015168 <vPortFree+0xc0>)
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	4413      	add	r3, r2
 8015142:	4a09      	ldr	r2, [pc, #36]	@ (8015168 <vPortFree+0xc0>)
 8015144:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015146:	6938      	ldr	r0, [r7, #16]
 8015148:	f000 f874 	bl	8015234 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801514c:	4b07      	ldr	r3, [pc, #28]	@ (801516c <vPortFree+0xc4>)
 801514e:	681b      	ldr	r3, [r3, #0]
 8015150:	3301      	adds	r3, #1
 8015152:	4a06      	ldr	r2, [pc, #24]	@ (801516c <vPortFree+0xc4>)
 8015154:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8015156:	f7fe fd8f 	bl	8013c78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801515a:	bf00      	nop
 801515c:	3718      	adds	r7, #24
 801515e:	46bd      	mov	sp, r7
 8015160:	bd80      	pop	{r7, pc}
 8015162:	bf00      	nop
 8015164:	20005a48 	.word	0x20005a48
 8015168:	20005a38 	.word	0x20005a38
 801516c:	20005a44 	.word	0x20005a44

08015170 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015170:	b480      	push	{r7}
 8015172:	b085      	sub	sp, #20
 8015174:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015176:	f644 6320 	movw	r3, #20000	@ 0x4e20
 801517a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801517c:	4b27      	ldr	r3, [pc, #156]	@ (801521c <prvHeapInit+0xac>)
 801517e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	f003 0307 	and.w	r3, r3, #7
 8015186:	2b00      	cmp	r3, #0
 8015188:	d00c      	beq.n	80151a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	3307      	adds	r3, #7
 801518e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	f023 0307 	bic.w	r3, r3, #7
 8015196:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015198:	68ba      	ldr	r2, [r7, #8]
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	1ad3      	subs	r3, r2, r3
 801519e:	4a1f      	ldr	r2, [pc, #124]	@ (801521c <prvHeapInit+0xac>)
 80151a0:	4413      	add	r3, r2
 80151a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80151a8:	4a1d      	ldr	r2, [pc, #116]	@ (8015220 <prvHeapInit+0xb0>)
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80151ae:	4b1c      	ldr	r3, [pc, #112]	@ (8015220 <prvHeapInit+0xb0>)
 80151b0:	2200      	movs	r2, #0
 80151b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	68ba      	ldr	r2, [r7, #8]
 80151b8:	4413      	add	r3, r2
 80151ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80151bc:	2208      	movs	r2, #8
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	1a9b      	subs	r3, r3, r2
 80151c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	f023 0307 	bic.w	r3, r3, #7
 80151ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	4a15      	ldr	r2, [pc, #84]	@ (8015224 <prvHeapInit+0xb4>)
 80151d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80151d2:	4b14      	ldr	r3, [pc, #80]	@ (8015224 <prvHeapInit+0xb4>)
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	2200      	movs	r2, #0
 80151d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80151da:	4b12      	ldr	r3, [pc, #72]	@ (8015224 <prvHeapInit+0xb4>)
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	2200      	movs	r2, #0
 80151e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80151e6:	683b      	ldr	r3, [r7, #0]
 80151e8:	68fa      	ldr	r2, [r7, #12]
 80151ea:	1ad2      	subs	r2, r2, r3
 80151ec:	683b      	ldr	r3, [r7, #0]
 80151ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80151f0:	4b0c      	ldr	r3, [pc, #48]	@ (8015224 <prvHeapInit+0xb4>)
 80151f2:	681a      	ldr	r2, [r3, #0]
 80151f4:	683b      	ldr	r3, [r7, #0]
 80151f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80151f8:	683b      	ldr	r3, [r7, #0]
 80151fa:	685b      	ldr	r3, [r3, #4]
 80151fc:	4a0a      	ldr	r2, [pc, #40]	@ (8015228 <prvHeapInit+0xb8>)
 80151fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015200:	683b      	ldr	r3, [r7, #0]
 8015202:	685b      	ldr	r3, [r3, #4]
 8015204:	4a09      	ldr	r2, [pc, #36]	@ (801522c <prvHeapInit+0xbc>)
 8015206:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015208:	4b09      	ldr	r3, [pc, #36]	@ (8015230 <prvHeapInit+0xc0>)
 801520a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801520e:	601a      	str	r2, [r3, #0]
}
 8015210:	bf00      	nop
 8015212:	3714      	adds	r7, #20
 8015214:	46bd      	mov	sp, r7
 8015216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801521a:	4770      	bx	lr
 801521c:	20000c0c 	.word	0x20000c0c
 8015220:	20005a2c 	.word	0x20005a2c
 8015224:	20005a34 	.word	0x20005a34
 8015228:	20005a3c 	.word	0x20005a3c
 801522c:	20005a38 	.word	0x20005a38
 8015230:	20005a48 	.word	0x20005a48

08015234 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015234:	b480      	push	{r7}
 8015236:	b085      	sub	sp, #20
 8015238:	af00      	add	r7, sp, #0
 801523a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801523c:	4b28      	ldr	r3, [pc, #160]	@ (80152e0 <prvInsertBlockIntoFreeList+0xac>)
 801523e:	60fb      	str	r3, [r7, #12]
 8015240:	e002      	b.n	8015248 <prvInsertBlockIntoFreeList+0x14>
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	681b      	ldr	r3, [r3, #0]
 8015246:	60fb      	str	r3, [r7, #12]
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	681b      	ldr	r3, [r3, #0]
 801524c:	687a      	ldr	r2, [r7, #4]
 801524e:	429a      	cmp	r2, r3
 8015250:	d8f7      	bhi.n	8015242 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	685b      	ldr	r3, [r3, #4]
 801525a:	68ba      	ldr	r2, [r7, #8]
 801525c:	4413      	add	r3, r2
 801525e:	687a      	ldr	r2, [r7, #4]
 8015260:	429a      	cmp	r2, r3
 8015262:	d108      	bne.n	8015276 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015264:	68fb      	ldr	r3, [r7, #12]
 8015266:	685a      	ldr	r2, [r3, #4]
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	685b      	ldr	r3, [r3, #4]
 801526c:	441a      	add	r2, r3
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015272:	68fb      	ldr	r3, [r7, #12]
 8015274:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	685b      	ldr	r3, [r3, #4]
 801527e:	68ba      	ldr	r2, [r7, #8]
 8015280:	441a      	add	r2, r3
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	681b      	ldr	r3, [r3, #0]
 8015286:	429a      	cmp	r2, r3
 8015288:	d118      	bne.n	80152bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	681a      	ldr	r2, [r3, #0]
 801528e:	4b15      	ldr	r3, [pc, #84]	@ (80152e4 <prvInsertBlockIntoFreeList+0xb0>)
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	429a      	cmp	r2, r3
 8015294:	d00d      	beq.n	80152b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	685a      	ldr	r2, [r3, #4]
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	685b      	ldr	r3, [r3, #4]
 80152a0:	441a      	add	r2, r3
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	681a      	ldr	r2, [r3, #0]
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	601a      	str	r2, [r3, #0]
 80152b0:	e008      	b.n	80152c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80152b2:	4b0c      	ldr	r3, [pc, #48]	@ (80152e4 <prvInsertBlockIntoFreeList+0xb0>)
 80152b4:	681a      	ldr	r2, [r3, #0]
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	601a      	str	r2, [r3, #0]
 80152ba:	e003      	b.n	80152c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	681a      	ldr	r2, [r3, #0]
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80152c4:	68fa      	ldr	r2, [r7, #12]
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	429a      	cmp	r2, r3
 80152ca:	d002      	beq.n	80152d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	687a      	ldr	r2, [r7, #4]
 80152d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80152d2:	bf00      	nop
 80152d4:	3714      	adds	r7, #20
 80152d6:	46bd      	mov	sp, r7
 80152d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152dc:	4770      	bx	lr
 80152de:	bf00      	nop
 80152e0:	20005a2c 	.word	0x20005a2c
 80152e4:	20005a34 	.word	0x20005a34

080152e8 <MX_USBPD_Init>:

/* USER CODE BEGIN 2 */
/* USER CODE END 2 */
/* USBPD init function */
void MX_USBPD_Init(void)
{
 80152e8:	b580      	push	{r7, lr}
 80152ea:	af00      	add	r7, sp, #0

  /* Global Init of USBPD HW */
  USBPD_HW_IF_GlobalHwInit();
 80152ec:	f7fc f8bf 	bl	801146e <USBPD_HW_IF_GlobalHwInit>

  /* Initialize the Device Policy Manager */
  if (USBPD_OK != USBPD_DPM_InitCore())
 80152f0:	f000 f818 	bl	8015324 <USBPD_DPM_InitCore>
 80152f4:	4603      	mov	r3, r0
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d001      	beq.n	80152fe <MX_USBPD_Init+0x16>
  {
    while(1);
 80152fa:	bf00      	nop
 80152fc:	e7fd      	b.n	80152fa <MX_USBPD_Init+0x12>
  }

  /* Initialise the DPM application */
  if (USBPD_OK != USBPD_DPM_UserInit())
 80152fe:	f000 fa01 	bl	8015704 <USBPD_DPM_UserInit>
 8015302:	4603      	mov	r3, r0
 8015304:	2b00      	cmp	r3, #0
 8015306:	d001      	beq.n	801530c <MX_USBPD_Init+0x24>
  {
    while(1);
 8015308:	bf00      	nop
 801530a:	e7fd      	b.n	8015308 <MX_USBPD_Init+0x20>
  }

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

  if (USBPD_OK != USBPD_DPM_InitOS())
 801530c:	f000 f8b8 	bl	8015480 <USBPD_DPM_InitOS>
 8015310:	4603      	mov	r3, r0
 8015312:	2b00      	cmp	r3, #0
 8015314:	d001      	beq.n	801531a <MX_USBPD_Init+0x32>
  {
    while(1);
 8015316:	bf00      	nop
 8015318:	e7fd      	b.n	8015316 <MX_USBPD_Init+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
 801531a:	b662      	cpsie	i
}
 801531c:	bf00      	nop
  /* USER CODE BEGIN EnableIRQ */
  /* Enable IRQ which has been disabled by FreeRTOS services */
  __enable_irq();
  /* USER CODE END EnableIRQ */

}
 801531e:	bf00      	nop
 8015320:	bd80      	pop	{r7, pc}
	...

08015324 <USBPD_DPM_InitCore>:
/**
  * @brief  Initialize the core stack (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitCore(void)
{
 8015324:	b580      	push	{r7, lr}
 8015326:	b082      	sub	sp, #8
 8015328:	af00      	add	r7, sp, #0
  /* variable to get dynamique memory allocated by usbpd stack */
  uint32_t stack_dynamemsize;
  USBPD_StatusTypeDef _retr = USBPD_OK;
 801532a:	2300      	movs	r3, #0
 801532c:	71fb      	strb	r3, [r7, #7]
    USBPD_DPM_CADCallback,
    USBPD_DPM_CADTaskWakeUp
  };

  /* Check the lib selected */
  if (USBPD_TRUE != USBPD_PE_CheckLIB(_LIB_ID))
 801532e:	484f      	ldr	r0, [pc, #316]	@ (801546c <USBPD_DPM_InitCore+0x148>)
 8015330:	f7eb fd37 	bl	8000da2 <USBPD_PE_CheckLIB>
 8015334:	4603      	mov	r3, r0
 8015336:	2b01      	cmp	r3, #1
 8015338:	d001      	beq.n	801533e <USBPD_DPM_InitCore+0x1a>
  {
    return USBPD_ERROR;
 801533a:	2302      	movs	r3, #2
 801533c:	e092      	b.n	8015464 <USBPD_DPM_InitCore+0x140>
  }

  /* to get how much memory are dynamically allocated by the stack
     the memory return is corresponding to 2 ports so if the application
     managed only one port divide the value return by 2                   */
  stack_dynamemsize = USBPD_PE_GetMemoryConsumption();
 801533e:	f7eb fd3b 	bl	8000db8 <USBPD_PE_GetMemoryConsumption>
 8015342:	6038      	str	r0, [r7, #0]

  /* done to avoid warning */
  (void)stack_dynamemsize;

  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 8015344:	2300      	movs	r3, #0
 8015346:	71bb      	strb	r3, [r7, #6]
 8015348:	e087      	b.n	801545a <USBPD_DPM_InitCore+0x136>
  {
    /* Variable to be sure that DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_FALSE;
 801534a:	79bb      	ldrb	r3, [r7, #6]
 801534c:	4a48      	ldr	r2, [pc, #288]	@ (8015470 <USBPD_DPM_InitCore+0x14c>)
 801534e:	009b      	lsls	r3, r3, #2
 8015350:	4413      	add	r3, r2
 8015352:	785a      	ldrb	r2, [r3, #1]
 8015354:	f36f 02c3 	bfc	r2, #3, #1
 8015358:	705a      	strb	r2, [r3, #1]

    /* check the stack settings */
    DPM_Params[_port_index].PE_SpecRevision  = DPM_Settings[_port_index].PE_SpecRevision;
 801535a:	79b9      	ldrb	r1, [r7, #6]
 801535c:	79ba      	ldrb	r2, [r7, #6]
 801535e:	4845      	ldr	r0, [pc, #276]	@ (8015474 <USBPD_DPM_InitCore+0x150>)
 8015360:	460b      	mov	r3, r1
 8015362:	005b      	lsls	r3, r3, #1
 8015364:	440b      	add	r3, r1
 8015366:	009b      	lsls	r3, r3, #2
 8015368:	4403      	add	r3, r0
 801536a:	791b      	ldrb	r3, [r3, #4]
 801536c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8015370:	b2d8      	uxtb	r0, r3
 8015372:	493f      	ldr	r1, [pc, #252]	@ (8015470 <USBPD_DPM_InitCore+0x14c>)
 8015374:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8015378:	f360 0301 	bfi	r3, r0, #0, #2
 801537c:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].PE_PowerRole     = DPM_Settings[_port_index].PE_DefaultRole;
 8015380:	79b9      	ldrb	r1, [r7, #6]
 8015382:	79ba      	ldrb	r2, [r7, #6]
 8015384:	483b      	ldr	r0, [pc, #236]	@ (8015474 <USBPD_DPM_InitCore+0x150>)
 8015386:	460b      	mov	r3, r1
 8015388:	005b      	lsls	r3, r3, #1
 801538a:	440b      	add	r3, r1
 801538c:	009b      	lsls	r3, r3, #2
 801538e:	4403      	add	r3, r0
 8015390:	791b      	ldrb	r3, [r3, #4]
 8015392:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8015396:	b2d8      	uxtb	r0, r3
 8015398:	4935      	ldr	r1, [pc, #212]	@ (8015470 <USBPD_DPM_InitCore+0x14c>)
 801539a:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 801539e:	f360 0382 	bfi	r3, r0, #2, #1
 80153a2:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].PE_SwapOngoing   = USBPD_FALSE;
 80153a6:	79ba      	ldrb	r2, [r7, #6]
 80153a8:	4931      	ldr	r1, [pc, #196]	@ (8015470 <USBPD_DPM_InitCore+0x14c>)
 80153aa:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 80153ae:	f36f 1304 	bfc	r3, #4, #1
 80153b2:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].ActiveCCIs       = CCNONE;
 80153b6:	79ba      	ldrb	r2, [r7, #6]
 80153b8:	492d      	ldr	r1, [pc, #180]	@ (8015470 <USBPD_DPM_InitCore+0x14c>)
 80153ba:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 80153be:	f36f 1387 	bfc	r3, #6, #2
 80153c2:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].VconnCCIs        = CCNONE;
 80153c6:	79bb      	ldrb	r3, [r7, #6]
 80153c8:	4a29      	ldr	r2, [pc, #164]	@ (8015470 <USBPD_DPM_InitCore+0x14c>)
 80153ca:	009b      	lsls	r3, r3, #2
 80153cc:	4413      	add	r3, r2
 80153ce:	785a      	ldrb	r2, [r3, #1]
 80153d0:	f36f 1246 	bfc	r2, #5, #2
 80153d4:	705a      	strb	r2, [r3, #1]
    DPM_Params[_port_index].VconnStatus      = USBPD_FALSE;
 80153d6:	79bb      	ldrb	r3, [r7, #6]
 80153d8:	4a25      	ldr	r2, [pc, #148]	@ (8015470 <USBPD_DPM_InitCore+0x14c>)
 80153da:	009b      	lsls	r3, r3, #2
 80153dc:	4413      	add	r3, r2
 80153de:	785a      	ldrb	r2, [r3, #1]
 80153e0:	f36f 12c7 	bfc	r2, #7, #1
 80153e4:	705a      	strb	r2, [r3, #1]

    /* CAD SET UP : Port 0 */
    CHECK_CAD_FUNCTION_CALL(USBPD_CAD_Init(_port_index, (USBPD_CAD_Callbacks *)&CAD_cbs,
 80153e6:	79ba      	ldrb	r2, [r7, #6]
 80153e8:	4613      	mov	r3, r2
 80153ea:	005b      	lsls	r3, r3, #1
 80153ec:	4413      	add	r3, r2
 80153ee:	009b      	lsls	r3, r3, #2
 80153f0:	4a20      	ldr	r2, [pc, #128]	@ (8015474 <USBPD_DPM_InitCore+0x150>)
 80153f2:	441a      	add	r2, r3
 80153f4:	79bb      	ldrb	r3, [r7, #6]
 80153f6:	009b      	lsls	r3, r3, #2
 80153f8:	491d      	ldr	r1, [pc, #116]	@ (8015470 <USBPD_DPM_InitCore+0x14c>)
 80153fa:	440b      	add	r3, r1
 80153fc:	79b8      	ldrb	r0, [r7, #6]
 80153fe:	491e      	ldr	r1, [pc, #120]	@ (8015478 <USBPD_DPM_InitCore+0x154>)
 8015400:	f7ea ff0e 	bl	8000220 <USBPD_CAD_Init>
 8015404:	4603      	mov	r3, r0
 8015406:	2b00      	cmp	r3, #0
 8015408:	d001      	beq.n	801540e <USBPD_DPM_InitCore+0xea>
 801540a:	2302      	movs	r3, #2
 801540c:	e02a      	b.n	8015464 <USBPD_DPM_InitCore+0x140>
                                           (USBPD_SettingsTypeDef *)&DPM_Settings[_port_index], &DPM_Params[_port_index]));

    /* PE SET UP : Port 0 */
    CHECK_PE_FUNCTION_CALL(USBPD_PE_Init(_port_index, (USBPD_SettingsTypeDef *)&DPM_Settings[_port_index],
 801540e:	79ba      	ldrb	r2, [r7, #6]
 8015410:	4613      	mov	r3, r2
 8015412:	005b      	lsls	r3, r3, #1
 8015414:	4413      	add	r3, r2
 8015416:	009b      	lsls	r3, r3, #2
 8015418:	4a16      	ldr	r2, [pc, #88]	@ (8015474 <USBPD_DPM_InitCore+0x150>)
 801541a:	1899      	adds	r1, r3, r2
 801541c:	79bb      	ldrb	r3, [r7, #6]
 801541e:	009b      	lsls	r3, r3, #2
 8015420:	4a13      	ldr	r2, [pc, #76]	@ (8015470 <USBPD_DPM_InitCore+0x14c>)
 8015422:	441a      	add	r2, r3
 8015424:	79b8      	ldrb	r0, [r7, #6]
 8015426:	4b15      	ldr	r3, [pc, #84]	@ (801547c <USBPD_DPM_InitCore+0x158>)
 8015428:	f7ea ffc8 	bl	80003bc <USBPD_PE_Init>
 801542c:	4603      	mov	r3, r0
 801542e:	71fb      	strb	r3, [r7, #7]
 8015430:	79fb      	ldrb	r3, [r7, #7]
 8015432:	2b00      	cmp	r3, #0
 8015434:	d001      	beq.n	801543a <USBPD_DPM_InitCore+0x116>
 8015436:	79fb      	ldrb	r3, [r7, #7]
 8015438:	e014      	b.n	8015464 <USBPD_DPM_InitCore+0x140>
                                         &DPM_Params[_port_index], &dpmCallbacks));

  /* DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_TRUE;
 801543a:	79bb      	ldrb	r3, [r7, #6]
 801543c:	4a0c      	ldr	r2, [pc, #48]	@ (8015470 <USBPD_DPM_InitCore+0x14c>)
 801543e:	009b      	lsls	r3, r3, #2
 8015440:	4413      	add	r3, r2
 8015442:	785a      	ldrb	r2, [r3, #1]
 8015444:	f042 0208 	orr.w	r2, r2, #8
 8015448:	705a      	strb	r2, [r3, #1]

    /* Enable CAD on Port 0 */
  USBPD_CAD_PortEnable(_port_index, USBPD_CAD_ENABLE);
 801544a:	79bb      	ldrb	r3, [r7, #6]
 801544c:	2101      	movs	r1, #1
 801544e:	4618      	mov	r0, r3
 8015450:	f7ea ff0e 	bl	8000270 <USBPD_CAD_PortEnable>
  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 8015454:	79bb      	ldrb	r3, [r7, #6]
 8015456:	3301      	adds	r3, #1
 8015458:	71bb      	strb	r3, [r7, #6]
 801545a:	79bb      	ldrb	r3, [r7, #6]
 801545c:	2b00      	cmp	r3, #0
 801545e:	f43f af74 	beq.w	801534a <USBPD_DPM_InitCore+0x26>
  }

  return _retr;
 8015462:	79fb      	ldrb	r3, [r7, #7]
}
 8015464:	4618      	mov	r0, r3
 8015466:	3708      	adds	r7, #8
 8015468:	46bd      	mov	sp, r7
 801546a:	bd80      	pop	{r7, pc}
 801546c:	30410002 	.word	0x30410002
 8015470:	20005aac 	.word	0x20005aac
 8015474:	20000144 	.word	0x20000144
 8015478:	080188a4 	.word	0x080188a4
 801547c:	080188ac 	.word	0x080188ac

08015480 <USBPD_DPM_InitOS>:
/**
  * @brief  Initialize the OS parts (task, queue,... )
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitOS(void)
{
 8015480:	b580      	push	{r7, lr}
 8015482:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  CADQueueId = osMessageCreate(osMessageQ(queueCAD), NULL);
 8015484:	2100      	movs	r1, #0
 8015486:	480e      	ldr	r0, [pc, #56]	@ (80154c0 <USBPD_DPM_InitOS+0x40>)
 8015488:	f7fd f902 	bl	8012690 <osMessageCreate>
 801548c:	4603      	mov	r3, r0
 801548e:	4a0d      	ldr	r2, [pc, #52]	@ (80154c4 <USBPD_DPM_InitOS+0x44>)
 8015490:	6013      	str	r3, [r2, #0]
  if (osThreadCreate(osThread(CAD), NULL) == NULL)
 8015492:	2100      	movs	r1, #0
 8015494:	480c      	ldr	r0, [pc, #48]	@ (80154c8 <USBPD_DPM_InitOS+0x48>)
 8015496:	f7fd f8b4 	bl	8012602 <osThreadCreate>
 801549a:	4603      	mov	r3, r0
 801549c:	2b00      	cmp	r3, #0
 801549e:	d101      	bne.n	80154a4 <USBPD_DPM_InitOS+0x24>
#else
  CADQueueId = osMessageQueueNew (2, sizeof(uint16_t), NULL);
  if (NULL == osThreadNew(USBPD_CAD_Task, &CADQueueId, &CAD_Thread_Atrr))
#endif /* osCMSIS < 0x20000U */
  {
    return USBPD_ERROR;
 80154a0:	2302      	movs	r3, #2
 80154a2:	e00a      	b.n	80154ba <USBPD_DPM_InitOS+0x3a>
  }

  /* Create the queue corresponding to PE task */
#if (osCMSIS < 0x20000U)
  PEQueueId[0] = osMessageCreate(osMessageQ(queuePE), NULL);
 80154a4:	2100      	movs	r1, #0
 80154a6:	4809      	ldr	r0, [pc, #36]	@ (80154cc <USBPD_DPM_InitOS+0x4c>)
 80154a8:	f7fd f8f2 	bl	8012690 <osMessageCreate>
 80154ac:	4603      	mov	r3, r0
 80154ae:	4a08      	ldr	r2, [pc, #32]	@ (80154d0 <USBPD_DPM_InitOS+0x50>)
 80154b0:	6013      	str	r3, [r2, #0]
  PEQueueId[1] = osMessageQueueNew (1, sizeof(uint16_t), NULL);
#endif /* USBPD_PORT_COUNT == 2 */
#endif /* osCMSIS < 0x20000U */

  /* PE task to be created on attachment */
  DPM_PEThreadId_Table[USBPD_PORT_0] = NULL;
 80154b2:	4b08      	ldr	r3, [pc, #32]	@ (80154d4 <USBPD_DPM_InitOS+0x54>)
 80154b4:	2200      	movs	r2, #0
 80154b6:	601a      	str	r2, [r3, #0]
#if USBPD_PORT_COUNT == 2
  DPM_PEThreadId_Table[USBPD_PORT_1] = NULL;
#endif /* USBPD_PORT_COUNT == 2 */

  return USBPD_OK;
 80154b8:	2300      	movs	r3, #0
}
 80154ba:	4618      	mov	r0, r3
 80154bc:	bd80      	pop	{r7, pc}
 80154be:	bf00      	nop
 80154c0:	0801889c 	.word	0x0801889c
 80154c4:	20005aa0 	.word	0x20005aa0
 80154c8:	08018888 	.word	0x08018888
 80154cc:	08018880 	.word	0x08018880
 80154d0:	20005aa8 	.word	0x20005aa8
 80154d4:	20005aa4 	.word	0x20005aa4

080154d8 <USBPD_PE_TaskWakeUp>:
  * @brief  WakeUp PE task
  * @param  PortNum port number
  * @retval None
  */
static void USBPD_PE_TaskWakeUp(uint8_t PortNum)
{
 80154d8:	b580      	push	{r7, lr}
 80154da:	b082      	sub	sp, #8
 80154dc:	af00      	add	r7, sp, #0
 80154de:	4603      	mov	r3, r0
 80154e0:	71fb      	strb	r3, [r7, #7]
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(PEQueueId[PortNum], 0xFFFF, 0);
 80154e2:	79fb      	ldrb	r3, [r7, #7]
 80154e4:	4a06      	ldr	r2, [pc, #24]	@ (8015500 <USBPD_PE_TaskWakeUp+0x28>)
 80154e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80154ea:	2200      	movs	r2, #0
 80154ec:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80154f0:	4618      	mov	r0, r3
 80154f2:	f7fd f8df 	bl	80126b4 <osMessagePut>
#else
  uint32_t event = 0xFFFFU;
  (void)osMessageQueuePut(PEQueueId[PortNum], &event, 0U, 0U);
#endif /* osCMSIS < 0x20000U */
}
 80154f6:	bf00      	nop
 80154f8:	3708      	adds	r7, #8
 80154fa:	46bd      	mov	sp, r7
 80154fc:	bd80      	pop	{r7, pc}
 80154fe:	bf00      	nop
 8015500:	20005aa8 	.word	0x20005aa8

08015504 <USBPD_DPM_CADTaskWakeUp>:
/**
  * @brief  WakeUp CAD task
  * @retval None
  */
static void USBPD_DPM_CADTaskWakeUp(void)
{
 8015504:	b580      	push	{r7, lr}
 8015506:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(CADQueueId, 0xFFFF, 0);
 8015508:	4b04      	ldr	r3, [pc, #16]	@ (801551c <USBPD_DPM_CADTaskWakeUp+0x18>)
 801550a:	681b      	ldr	r3, [r3, #0]
 801550c:	2200      	movs	r2, #0
 801550e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8015512:	4618      	mov	r0, r3
 8015514:	f7fd f8ce 	bl	80126b4 <osMessagePut>
#else
  uint32_t event = 0xFFFFU;
  (void)osMessageQueuePut(CADQueueId, &event, 0U, 0U);
#endif /* osCMSIS < 0x20000U */
}
 8015518:	bf00      	nop
 801551a:	bd80      	pop	{r7, pc}
 801551c:	20005aa0 	.word	0x20005aa0

08015520 <USBPD_PE_Task>:
  * @brief  Main task for PE layer
  * @param  argument Not used
  * @retval None
  */
void USBPD_PE_Task(void const *argument)
{
 8015520:	b580      	push	{r7, lr}
 8015522:	b088      	sub	sp, #32
 8015524:	af00      	add	r7, sp, #0
 8015526:	6178      	str	r0, [r7, #20]
  uint8_t _port = (uint32_t)argument;
 8015528:	697b      	ldr	r3, [r7, #20]
 801552a:	77fb      	strb	r3, [r7, #31]
  uint32_t _timing;

  for(;;)
  {
    _timing = USBPD_PE_StateMachine_SRC(_port);
 801552c:	7ffb      	ldrb	r3, [r7, #31]
 801552e:	4618      	mov	r0, r3
 8015530:	f7eb ff0a 	bl	8001348 <USBPD_PE_StateMachine_SRC>
 8015534:	61b8      	str	r0, [r7, #24]
    osMessageGet(PEQueueId[_port],_timing);
 8015536:	7ffb      	ldrb	r3, [r7, #31]
 8015538:	4a04      	ldr	r2, [pc, #16]	@ (801554c <USBPD_PE_Task+0x2c>)
 801553a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801553e:	463b      	mov	r3, r7
 8015540:	69ba      	ldr	r2, [r7, #24]
 8015542:	4618      	mov	r0, r3
 8015544:	f7fd f8f6 	bl	8012734 <osMessageGet>
    _timing = USBPD_PE_StateMachine_SRC(_port);
 8015548:	bf00      	nop
 801554a:	e7ef      	b.n	801552c <USBPD_PE_Task+0xc>
 801554c:	20005aa8 	.word	0x20005aa8

08015550 <USBPD_CAD_Task>:
#if (osCMSIS < 0x20000U)
void USBPD_CAD_Task(void const *argument)
#else
void USBPD_CAD_Task(void *argument)
#endif /* osCMSIS < 0x20000U */
{
 8015550:	b590      	push	{r4, r7, lr}
 8015552:	b087      	sub	sp, #28
 8015554:	af00      	add	r7, sp, #0
 8015556:	6178      	str	r0, [r7, #20]
  for (;;)
  {
#if (osCMSIS < 0x20000U)
    osMessageGet(CADQueueId, USBPD_CAD_Process());
 8015558:	4b05      	ldr	r3, [pc, #20]	@ (8015570 <USBPD_CAD_Task+0x20>)
 801555a:	681c      	ldr	r4, [r3, #0]
 801555c:	f7ea fe8f 	bl	800027e <USBPD_CAD_Process>
 8015560:	4602      	mov	r2, r0
 8015562:	463b      	mov	r3, r7
 8015564:	4621      	mov	r1, r4
 8015566:	4618      	mov	r0, r3
 8015568:	f7fd f8e4 	bl	8012734 <osMessageGet>
 801556c:	e7f4      	b.n	8015558 <USBPD_CAD_Task+0x8>
 801556e:	bf00      	nop
 8015570:	20005aa0 	.word	0x20005aa0

08015574 <USBPD_DPM_CADCallback>:
  * @param  State     CAD state
  * @param  Cc        The Communication Channel for the USBPD communication
  * @retval None
  */
void USBPD_DPM_CADCallback(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 8015574:	b580      	push	{r7, lr}
 8015576:	b084      	sub	sp, #16
 8015578:	af00      	add	r7, sp, #0
 801557a:	4603      	mov	r3, r0
 801557c:	603a      	str	r2, [r7, #0]
 801557e:	71fb      	strb	r3, [r7, #7]
 8015580:	460b      	mov	r3, r1
 8015582:	71bb      	strb	r3, [r7, #6]

  switch (State)
 8015584:	79bb      	ldrb	r3, [r7, #6]
 8015586:	3b01      	subs	r3, #1
 8015588:	2b03      	cmp	r3, #3
 801558a:	d867      	bhi.n	801565c <USBPD_DPM_CADCallback+0xe8>
 801558c:	a201      	add	r2, pc, #4	@ (adr r2, 8015594 <USBPD_DPM_CADCallback+0x20>)
 801558e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015592:	bf00      	nop
 8015594:	080155c1 	.word	0x080155c1
 8015598:	080155b3 	.word	0x080155b3
 801559c:	080155c1 	.word	0x080155c1
 80155a0:	080155a5 	.word	0x080155a5
    case USBPD_CAD_EVENT_ATTEMC :
    {
#ifdef _VCONN_SUPPORT
      DPM_Params[PortNum].VconnStatus = USBPD_TRUE;
#endif /* _VCONN_SUPPORT */
      DPM_ManageAttachedState(PortNum, State, Cc);
 80155a4:	79b9      	ldrb	r1, [r7, #6]
 80155a6:	79fb      	ldrb	r3, [r7, #7]
 80155a8:	683a      	ldr	r2, [r7, #0]
 80155aa:	4618      	mov	r0, r3
 80155ac:	f000 f860 	bl	8015670 <DPM_ManageAttachedState>
#ifdef _VCONN_SUPPORT
      DPM_CORE_DEBUG_TRACE(PortNum, "Note: VconnStatus=TRUE");
#endif /* _VCONN_SUPPORT */
      break;
 80155b0:	e055      	b.n	801565e <USBPD_DPM_CADCallback+0xea>
    }
    case USBPD_CAD_EVENT_ATTACHED :
      DPM_ManageAttachedState(PortNum, State, Cc);
 80155b2:	79b9      	ldrb	r1, [r7, #6]
 80155b4:	79fb      	ldrb	r3, [r7, #7]
 80155b6:	683a      	ldr	r2, [r7, #0]
 80155b8:	4618      	mov	r0, r3
 80155ba:	f000 f859 	bl	8015670 <DPM_ManageAttachedState>
      break;
 80155be:	e04e      	b.n	801565e <USBPD_DPM_CADCallback+0xea>
    case USBPD_CAD_EVENT_DETACHED :
    case USBPD_CAD_EVENT_EMC :
    {
      /* The ufp is detached */
      (void)USBPD_PE_IsCableConnected(PortNum, 0);
 80155c0:	79fb      	ldrb	r3, [r7, #7]
 80155c2:	2100      	movs	r1, #0
 80155c4:	4618      	mov	r0, r3
 80155c6:	f7ea ff78 	bl	80004ba <USBPD_PE_IsCableConnected>
      /* Terminate PE task */
      if (DPM_PEThreadId_Table[PortNum] != NULL)
 80155ca:	79fb      	ldrb	r3, [r7, #7]
 80155cc:	4a26      	ldr	r2, [pc, #152]	@ (8015668 <USBPD_DPM_CADCallback+0xf4>)
 80155ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d023      	beq.n	801561e <USBPD_DPM_CADCallback+0xaa>
      {
        uint8_t _timeout = 0;
 80155d6:	2300      	movs	r3, #0
 80155d8:	73fb      	strb	r3, [r7, #15]
        /* Let time to PE to complete the ongoing action */
        while (eBlocked != eTaskGetState(DPM_PEThreadId_Table[PortNum]))
 80155da:	e008      	b.n	80155ee <USBPD_DPM_CADCallback+0x7a>
        {
          osDelay(1);
 80155dc:	2001      	movs	r0, #1
 80155de:	f7fd f843 	bl	8012668 <osDelay>
          _timeout++;
 80155e2:	7bfb      	ldrb	r3, [r7, #15]
 80155e4:	3301      	adds	r3, #1
 80155e6:	73fb      	strb	r3, [r7, #15]
          if (_timeout > 30)
 80155e8:	7bfb      	ldrb	r3, [r7, #15]
 80155ea:	2b1e      	cmp	r3, #30
 80155ec:	d80a      	bhi.n	8015604 <USBPD_DPM_CADCallback+0x90>
        while (eBlocked != eTaskGetState(DPM_PEThreadId_Table[PortNum]))
 80155ee:	79fb      	ldrb	r3, [r7, #7]
 80155f0:	4a1d      	ldr	r2, [pc, #116]	@ (8015668 <USBPD_DPM_CADCallback+0xf4>)
 80155f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80155f6:	4618      	mov	r0, r3
 80155f8:	f7fe fa74 	bl	8013ae4 <eTaskGetState>
 80155fc:	4603      	mov	r3, r0
 80155fe:	2b02      	cmp	r3, #2
 8015600:	d1ec      	bne.n	80155dc <USBPD_DPM_CADCallback+0x68>
 8015602:	e000      	b.n	8015606 <USBPD_DPM_CADCallback+0x92>
          {
            break;
 8015604:	bf00      	nop
          }
        };

        /* Kill PE task */
        osThreadTerminate(DPM_PEThreadId_Table[PortNum]);
 8015606:	79fb      	ldrb	r3, [r7, #7]
 8015608:	4a17      	ldr	r2, [pc, #92]	@ (8015668 <USBPD_DPM_CADCallback+0xf4>)
 801560a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801560e:	4618      	mov	r0, r3
 8015610:	f7fd f81e 	bl	8012650 <osThreadTerminate>
        DPM_PEThreadId_Table[PortNum] = NULL;
 8015614:	79fb      	ldrb	r3, [r7, #7]
 8015616:	4a14      	ldr	r2, [pc, #80]	@ (8015668 <USBPD_DPM_CADCallback+0xf4>)
 8015618:	2100      	movs	r1, #0
 801561a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }
      DPM_Params[PortNum].PE_SwapOngoing = USBPD_FALSE;
 801561e:	79fa      	ldrb	r2, [r7, #7]
 8015620:	4912      	ldr	r1, [pc, #72]	@ (801566c <USBPD_DPM_CADCallback+0xf8>)
 8015622:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8015626:	f36f 1304 	bfc	r3, #4, #1
 801562a:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
      DPM_Params[PortNum].ActiveCCIs = CCNONE;
 801562e:	79fa      	ldrb	r2, [r7, #7]
 8015630:	490e      	ldr	r1, [pc, #56]	@ (801566c <USBPD_DPM_CADCallback+0xf8>)
 8015632:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8015636:	f36f 1387 	bfc	r3, #6, #2
 801563a:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
      DPM_Params[PortNum].PE_Power   = USBPD_POWER_NO;
 801563e:	79fb      	ldrb	r3, [r7, #7]
 8015640:	4a0a      	ldr	r2, [pc, #40]	@ (801566c <USBPD_DPM_CADCallback+0xf8>)
 8015642:	009b      	lsls	r3, r3, #2
 8015644:	4413      	add	r3, r2
 8015646:	785a      	ldrb	r2, [r3, #1]
 8015648:	f36f 0202 	bfc	r2, #0, #3
 801564c:	705a      	strb	r2, [r3, #1]
      USBPD_DPM_UserCableDetection(PortNum, State);
 801564e:	79ba      	ldrb	r2, [r7, #6]
 8015650:	79fb      	ldrb	r3, [r7, #7]
 8015652:	4611      	mov	r1, r2
 8015654:	4618      	mov	r0, r3
 8015656:	f000 f85d 	bl	8015714 <USBPD_DPM_UserCableDetection>
#ifdef _VCONN_SUPPORT
      DPM_Params[PortNum].VconnCCIs = CCNONE;
      DPM_Params[PortNum].VconnStatus = USBPD_FALSE;
      DPM_CORE_DEBUG_TRACE(PortNum, "Note: VconnStatus=FALSE");
#endif /* _VCONN_SUPPORT */
      break;
 801565a:	e000      	b.n	801565e <USBPD_DPM_CADCallback+0xea>
    }
    default :
      /* nothing to do */
      break;
 801565c:	bf00      	nop
  }
}
 801565e:	bf00      	nop
 8015660:	3710      	adds	r7, #16
 8015662:	46bd      	mov	sp, r7
 8015664:	bd80      	pop	{r7, pc}
 8015666:	bf00      	nop
 8015668:	20005aa4 	.word	0x20005aa4
 801566c:	20005aac 	.word	0x20005aac

08015670 <DPM_ManageAttachedState>:

static void DPM_ManageAttachedState(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 8015670:	b590      	push	{r4, r7, lr}
 8015672:	b083      	sub	sp, #12
 8015674:	af00      	add	r7, sp, #0
 8015676:	4603      	mov	r3, r0
 8015678:	603a      	str	r2, [r7, #0]
 801567a:	71fb      	strb	r3, [r7, #7]
 801567c:	460b      	mov	r3, r1
 801567e:	71bb      	strb	r3, [r7, #6]
  if (CC2 == Cc)
  {
    DPM_Params[PortNum].VconnCCIs = CC1;
  }
#endif /* _VCONN_SUPPORT */
  DPM_Params[PortNum].ActiveCCIs = Cc;
 8015680:	79fa      	ldrb	r2, [r7, #7]
 8015682:	683b      	ldr	r3, [r7, #0]
 8015684:	f003 0303 	and.w	r3, r3, #3
 8015688:	b2d8      	uxtb	r0, r3
 801568a:	491a      	ldr	r1, [pc, #104]	@ (80156f4 <DPM_ManageAttachedState+0x84>)
 801568c:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8015690:	f360 1387 	bfi	r3, r0, #6, #2
 8015694:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
  (void)USBPD_PE_IsCableConnected(PortNum, 1);
 8015698:	79fb      	ldrb	r3, [r7, #7]
 801569a:	2101      	movs	r1, #1
 801569c:	4618      	mov	r0, r3
 801569e:	f7ea ff0c 	bl	80004ba <USBPD_PE_IsCableConnected>

  USBPD_DPM_UserCableDetection(PortNum, State);
 80156a2:	79ba      	ldrb	r2, [r7, #6]
 80156a4:	79fb      	ldrb	r3, [r7, #7]
 80156a6:	4611      	mov	r1, r2
 80156a8:	4618      	mov	r0, r3
 80156aa:	f000 f833 	bl	8015714 <USBPD_DPM_UserCableDetection>

  /* Create PE task */
  if (DPM_PEThreadId_Table[PortNum] == NULL)
 80156ae:	79fb      	ldrb	r3, [r7, #7]
 80156b0:	4a11      	ldr	r2, [pc, #68]	@ (80156f8 <DPM_ManageAttachedState+0x88>)
 80156b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d117      	bne.n	80156ea <DPM_ManageAttachedState+0x7a>
  {
#if (osCMSIS < 0x20000U)
    DPM_PEThreadId_Table[PortNum] = osThreadCreate(OSTHREAD_PE(PortNum), (void *)((uint32_t)PortNum));
 80156ba:	79fb      	ldrb	r3, [r7, #7]
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d101      	bne.n	80156c4 <DPM_ManageAttachedState+0x54>
 80156c0:	4b0e      	ldr	r3, [pc, #56]	@ (80156fc <DPM_ManageAttachedState+0x8c>)
 80156c2:	e000      	b.n	80156c6 <DPM_ManageAttachedState+0x56>
 80156c4:	4b0e      	ldr	r3, [pc, #56]	@ (8015700 <DPM_ManageAttachedState+0x90>)
 80156c6:	79fa      	ldrb	r2, [r7, #7]
 80156c8:	79fc      	ldrb	r4, [r7, #7]
 80156ca:	4611      	mov	r1, r2
 80156cc:	4618      	mov	r0, r3
 80156ce:	f7fc ff98 	bl	8012602 <osThreadCreate>
 80156d2:	4603      	mov	r3, r0
 80156d4:	4a08      	ldr	r2, [pc, #32]	@ (80156f8 <DPM_ManageAttachedState+0x88>)
 80156d6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
#else
    DPM_PEThreadId_Table[PortNum] = osThreadNew(OSTHREAD_PE(PortNum), NULL, OSTHREAD_PE_ATTR(PortNum));
#endif /* osCMSIS < 0x20000U */
    if (DPM_PEThreadId_Table[PortNum] == NULL)
 80156da:	79fb      	ldrb	r3, [r7, #7]
 80156dc:	4a06      	ldr	r2, [pc, #24]	@ (80156f8 <DPM_ManageAttachedState+0x88>)
 80156de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d101      	bne.n	80156ea <DPM_ManageAttachedState+0x7a>
    {
      /* should not occur. May be an issue with FreeRTOS heap size too small */
      while (1);
 80156e6:	bf00      	nop
 80156e8:	e7fd      	b.n	80156e6 <DPM_ManageAttachedState+0x76>
    }
  }
}
 80156ea:	bf00      	nop
 80156ec:	370c      	adds	r7, #12
 80156ee:	46bd      	mov	sp, r7
 80156f0:	bd90      	pop	{r4, r7, pc}
 80156f2:	bf00      	nop
 80156f4:	20005aac 	.word	0x20005aac
 80156f8:	20005aa4 	.word	0x20005aa4
 80156fc:	08018858 	.word	0x08018858
 8015700:	0801886c 	.word	0x0801886c

08015704 <USBPD_DPM_UserInit>:
/**
  * @brief  Initialize DPM (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_UserInit(void)
{
 8015704:	b480      	push	{r7}
 8015706:	af00      	add	r7, sp, #0
/* USER CODE BEGIN USBPD_DPM_UserInit */
  return USBPD_OK;
 8015708:	2300      	movs	r3, #0
/* USER CODE END USBPD_DPM_UserInit */
}
 801570a:	4618      	mov	r0, r3
 801570c:	46bd      	mov	sp, r7
 801570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015712:	4770      	bx	lr

08015714 <USBPD_DPM_UserCableDetection>:
  * @param  PortNum The handle of the port
  * @param  State CAD state
  * @retval None
  */
void USBPD_DPM_UserCableDetection(uint8_t PortNum, USBPD_CAD_EVENT State)
{
 8015714:	b480      	push	{r7}
 8015716:	b083      	sub	sp, #12
 8015718:	af00      	add	r7, sp, #0
 801571a:	4603      	mov	r3, r0
 801571c:	460a      	mov	r2, r1
 801571e:	71fb      	strb	r3, [r7, #7]
 8015720:	4613      	mov	r3, r2
 8015722:	71bb      	strb	r3, [r7, #6]
      // }
      // break;
    // }
  // }
/* USER CODE END USBPD_DPM_UserCableDetection */
}
 8015724:	bf00      	nop
 8015726:	370c      	adds	r7, #12
 8015728:	46bd      	mov	sp, r7
 801572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801572e:	4770      	bx	lr

08015730 <USBPD_DPM_Notification>:
  * @param  PortNum The current port number
  * @param  EventVal @ref USBPD_NotifyEventValue_TypeDef
  * @retval None
  */
void USBPD_DPM_Notification(uint8_t PortNum, USBPD_NotifyEventValue_TypeDef EventVal)
{
 8015730:	b480      	push	{r7}
 8015732:	b083      	sub	sp, #12
 8015734:	af00      	add	r7, sp, #0
 8015736:	4603      	mov	r3, r0
 8015738:	460a      	mov	r2, r1
 801573a:	71fb      	strb	r3, [r7, #7]
 801573c:	4613      	mov	r3, r2
 801573e:	71bb      	strb	r3, [r7, #6]
//      break;
//    case USBPD_NOTIFY_DATAROLESWAP_UFP :
//      break;
    default:
      DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: USBPD_DPM_Notification:%d", EventVal);
      break;
 8015740:	bf00      	nop
  }
/* USER CODE END USBPD_DPM_Notification */
}
 8015742:	bf00      	nop
 8015744:	370c      	adds	r7, #12
 8015746:	46bd      	mov	sp, r7
 8015748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801574c:	4770      	bx	lr

0801574e <USBPD_DPM_HardReset>:
  * @param  CurrentRole the current role
  * @param  Status status on hard reset event
  * @retval None
  */
void USBPD_DPM_HardReset(uint8_t PortNum, USBPD_PortPowerRole_TypeDef CurrentRole, USBPD_HR_Status_TypeDef Status)
{
 801574e:	b480      	push	{r7}
 8015750:	b083      	sub	sp, #12
 8015752:	af00      	add	r7, sp, #0
 8015754:	4603      	mov	r3, r0
 8015756:	6039      	str	r1, [r7, #0]
 8015758:	71fb      	strb	r3, [r7, #7]
 801575a:	4613      	mov	r3, r2
 801575c:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_DPM_HardReset */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_HardReset");
/* USER CODE END USBPD_DPM_HardReset */
}
 801575e:	bf00      	nop
 8015760:	370c      	adds	r7, #12
 8015762:	46bd      	mov	sp, r7
 8015764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015768:	4770      	bx	lr

0801576a <USBPD_DPM_SetupNewPower>:
  * @brief  Request the DPM to setup the new power level.
  * @param  PortNum The current port number
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_SetupNewPower(uint8_t PortNum)
{
 801576a:	b580      	push	{r7, lr}
 801576c:	b082      	sub	sp, #8
 801576e:	af00      	add	r7, sp, #0
 8015770:	4603      	mov	r3, r0
 8015772:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_DPM_SetupNewPower */
  return USBPD_PWR_IF_SetProfile(PortNum);
 8015774:	79fb      	ldrb	r3, [r7, #7]
 8015776:	4618      	mov	r0, r3
 8015778:	f000 f8aa 	bl	80158d0 <USBPD_PWR_IF_SetProfile>
 801577c:	4603      	mov	r3, r0
/* USER CODE END USBPD_DPM_SetupNewPower */
}
 801577e:	4618      	mov	r0, r3
 8015780:	3708      	adds	r7, #8
 8015782:	46bd      	mov	sp, r7
 8015784:	bd80      	pop	{r7, pc}

08015786 <USBPD_DPM_GetDataInfo>:
  * @param  Ptr     Pointer on address where DPM data should be written (u8 pointer)
  * @param  Size    Pointer on nb of u8 written by DPM
  * @retval None
  */
void USBPD_DPM_GetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 8015786:	b480      	push	{r7}
 8015788:	b085      	sub	sp, #20
 801578a:	af00      	add	r7, sp, #0
 801578c:	60ba      	str	r2, [r7, #8]
 801578e:	607b      	str	r3, [r7, #4]
 8015790:	4603      	mov	r3, r0
 8015792:	73fb      	strb	r3, [r7, #15]
 8015794:	460b      	mov	r3, r1
 8015796:	73bb      	strb	r3, [r7, #14]
    // break;
//  case USBPD_CORE_BATTERY_CAPABILITY:         /*!< Retrieve of Battery capability message content      */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_GetDataInfo:%d", DataId);
    break;
 8015798:	bf00      	nop
  }
/* USER CODE END USBPD_DPM_GetDataInfo */
}
 801579a:	bf00      	nop
 801579c:	3714      	adds	r7, #20
 801579e:	46bd      	mov	sp, r7
 80157a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a4:	4770      	bx	lr

080157a6 <USBPD_DPM_SetDataInfo>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in DPM
  * @retval None
  */
void USBPD_DPM_SetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t Size)
{
 80157a6:	b480      	push	{r7}
 80157a8:	b085      	sub	sp, #20
 80157aa:	af00      	add	r7, sp, #0
 80157ac:	60ba      	str	r2, [r7, #8]
 80157ae:	607b      	str	r3, [r7, #4]
 80157b0:	4603      	mov	r3, r0
 80157b2:	73fb      	strb	r3, [r7, #15]
 80157b4:	460b      	mov	r3, r1
 80157b6:	73bb      	strb	r3, [r7, #14]
    // break;
//  case USBPD_CORE_SNK_EXTENDED_CAPA:          /*!< Storing of Sink Extended capability message content       */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SetDataInfo:%d", DataId);
    break;
 80157b8:	bf00      	nop
  }
/* USER CODE END USBPD_DPM_SetDataInfo */

}
 80157ba:	bf00      	nop
 80157bc:	3714      	adds	r7, #20
 80157be:	46bd      	mov	sp, r7
 80157c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157c4:	4770      	bx	lr

080157c6 <USBPD_DPM_EvaluateRequest>:
  * @param  PortNum Port number
  * @param  PtrPowerObject  Pointer on the power data object
  * @retval USBPD status : USBPD_ACCEPT, USBPD_REJECT, USBPD_WAIT, USBPD_GOTOMIN
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluateRequest(uint8_t PortNum, USBPD_CORE_PDO_Type_TypeDef *PtrPowerObject)
{
 80157c6:	b480      	push	{r7}
 80157c8:	b083      	sub	sp, #12
 80157ca:	af00      	add	r7, sp, #0
 80157cc:	4603      	mov	r3, r0
 80157ce:	6039      	str	r1, [r7, #0]
 80157d0:	71fb      	strb	r3, [r7, #7]
    Set power data object to initialize value.
    This parameter is used by the stack to start or not tPPSTimeout
    (in case of USBPD_CORE_PDO_TYPE_APDO, stack will wait for periodic request
    from the port partner in PPS mode).
  */
  *PtrPowerObject = USBPD_CORE_PDO_TYPE_FIXED;
 80157d2:	683b      	ldr	r3, [r7, #0]
 80157d4:	2200      	movs	r2, #0
 80157d6:	601a      	str	r2, [r3, #0]

  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_EvaluateRequest");
  return USBPD_REJECT;
 80157d8:	230c      	movs	r3, #12
/* USER CODE END USBPD_DPM_EvaluateRequest */
}
 80157da:	4618      	mov	r0, r3
 80157dc:	370c      	adds	r7, #12
 80157de:	46bd      	mov	sp, r7
 80157e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157e4:	4770      	bx	lr

080157e6 <USBPD_DPM_ExtendedMessageReceived>:
  * @param  ptrData   Pointer on address Extended Message data could be read (u8 pointer)
  * @param  DataSize  Nb of u8 that compose Extended message
  * @retval None
  */
void USBPD_DPM_ExtendedMessageReceived(uint8_t PortNum, USBPD_ExtendedMsg_TypeDef MsgType, uint8_t *ptrData, uint16_t DataSize)
{
 80157e6:	b480      	push	{r7}
 80157e8:	b083      	sub	sp, #12
 80157ea:	af00      	add	r7, sp, #0
 80157ec:	603a      	str	r2, [r7, #0]
 80157ee:	461a      	mov	r2, r3
 80157f0:	4603      	mov	r3, r0
 80157f2:	71fb      	strb	r3, [r7, #7]
 80157f4:	460b      	mov	r3, r1
 80157f6:	71bb      	strb	r3, [r7, #6]
 80157f8:	4613      	mov	r3, r2
 80157fa:	80bb      	strh	r3, [r7, #4]
/* USER CODE BEGIN USBPD_DPM_ExtendedMessageReceived */

/* USER CODE END USBPD_DPM_ExtendedMessageReceived */
}
 80157fc:	bf00      	nop
 80157fe:	370c      	adds	r7, #12
 8015800:	46bd      	mov	sp, r7
 8015802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015806:	4770      	bx	lr

08015808 <USBPD_DPM_EnterErrorRecovery>:
  * @brief  DPM callback to allow PE to enter ERROR_RECOVERY state.
  * @param  PortNum Port number
  * @retval None
  */
void USBPD_DPM_EnterErrorRecovery(uint8_t PortNum)
{
 8015808:	b580      	push	{r7, lr}
 801580a:	b082      	sub	sp, #8
 801580c:	af00      	add	r7, sp, #0
 801580e:	4603      	mov	r3, r0
 8015810:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_DPM_EnterErrorRecovery */
  /* Inform CAD to enter recovery mode */
  USBPD_CAD_EnterErrorRecovery(PortNum);
 8015812:	79fb      	ldrb	r3, [r7, #7]
 8015814:	4618      	mov	r0, r3
 8015816:	f7ea fdc3 	bl	80003a0 <USBPD_CAD_EnterErrorRecovery>
/* USER CODE END USBPD_DPM_EnterErrorRecovery */
}
 801581a:	bf00      	nop
 801581c:	3708      	adds	r7, #8
 801581e:	46bd      	mov	sp, r7
 8015820:	bd80      	pop	{r7, pc}
	...

08015824 <USBPD_DPM_EvaluateDataRoleSwap>:
            @ref USBPD_ACCEPT if DRS can be accepted
            @ref USBPD_REJECT if DRS is not accepted in one data role (DFP or UFP) or in PD2.0 config
            @ref USBPD_NOTSUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluateDataRoleSwap(uint8_t PortNum)
{
 8015824:	b480      	push	{r7}
 8015826:	b085      	sub	sp, #20
 8015828:	af00      	add	r7, sp, #0
 801582a:	4603      	mov	r3, r0
 801582c:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_DPM_EvaluateDataRoleSwap */
  USBPD_StatusTypeDef status = USBPD_REJECT;
 801582e:	230c      	movs	r3, #12
 8015830:	73fb      	strb	r3, [r7, #15]
  {
    /* ACCEPT DRS if at least supported by 1 data role */
    if (((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP) && (USBPD_PORTDATAROLE_UFP == DPM_Params[PortNum].PE_DataRole))
 8015832:	79fb      	ldrb	r3, [r7, #7]
 8015834:	4a18      	ldr	r2, [pc, #96]	@ (8015898 <USBPD_DPM_EvaluateDataRoleSwap+0x74>)
 8015836:	2154      	movs	r1, #84	@ 0x54
 8015838:	fb01 f303 	mul.w	r3, r1, r3
 801583c:	4413      	add	r3, r2
 801583e:	781b      	ldrb	r3, [r3, #0]
 8015840:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8015844:	b2db      	uxtb	r3, r3
 8015846:	2b01      	cmp	r3, #1
 8015848:	d108      	bne.n	801585c <USBPD_DPM_EvaluateDataRoleSwap+0x38>
 801584a:	79fb      	ldrb	r3, [r7, #7]
 801584c:	4a13      	ldr	r2, [pc, #76]	@ (801589c <USBPD_DPM_EvaluateDataRoleSwap+0x78>)
 801584e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8015852:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8015856:	b2db      	uxtb	r3, r3
 8015858:	2b00      	cmp	r3, #0
 801585a:	d014      	beq.n	8015886 <USBPD_DPM_EvaluateDataRoleSwap+0x62>
       || ((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP) && (USBPD_PORTDATAROLE_DFP == DPM_Params[PortNum].PE_DataRole)))
 801585c:	79fb      	ldrb	r3, [r7, #7]
 801585e:	4a0e      	ldr	r2, [pc, #56]	@ (8015898 <USBPD_DPM_EvaluateDataRoleSwap+0x74>)
 8015860:	2154      	movs	r1, #84	@ 0x54
 8015862:	fb01 f303 	mul.w	r3, r1, r3
 8015866:	4413      	add	r3, r2
 8015868:	781b      	ldrb	r3, [r3, #0]
 801586a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801586e:	b2db      	uxtb	r3, r3
 8015870:	2b01      	cmp	r3, #1
 8015872:	d10a      	bne.n	801588a <USBPD_DPM_EvaluateDataRoleSwap+0x66>
 8015874:	79fb      	ldrb	r3, [r7, #7]
 8015876:	4a09      	ldr	r2, [pc, #36]	@ (801589c <USBPD_DPM_EvaluateDataRoleSwap+0x78>)
 8015878:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 801587c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8015880:	b2db      	uxtb	r3, r3
 8015882:	2b01      	cmp	r3, #1
 8015884:	d101      	bne.n	801588a <USBPD_DPM_EvaluateDataRoleSwap+0x66>
    {
      status = USBPD_ACCEPT;
 8015886:	230a      	movs	r3, #10
 8015888:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 801588a:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_DPM_EvaluateDataRoleSwap */
}
 801588c:	4618      	mov	r0, r3
 801588e:	3714      	adds	r7, #20
 8015890:	46bd      	mov	sp, r7
 8015892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015896:	4770      	bx	lr
 8015898:	20005a4c 	.word	0x20005a4c
 801589c:	20005aac 	.word	0x20005aac

080158a0 <USBPD_DPM_IsPowerReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD_DISABLE or USBPD_ENABLE
  */
USBPD_FunctionalState USBPD_DPM_IsPowerReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 80158a0:	b580      	push	{r7, lr}
 80158a2:	b082      	sub	sp, #8
 80158a4:	af00      	add	r7, sp, #0
 80158a6:	4603      	mov	r3, r0
 80158a8:	460a      	mov	r2, r1
 80158aa:	71fb      	strb	r3, [r7, #7]
 80158ac:	4613      	mov	r3, r2
 80158ae:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_DPM_IsPowerReady */
  return ((USBPD_OK == USBPD_PWR_IF_SupplyReady(PortNum, Vsafe)) ? USBPD_ENABLE : USBPD_DISABLE);
 80158b0:	79ba      	ldrb	r2, [r7, #6]
 80158b2:	79fb      	ldrb	r3, [r7, #7]
 80158b4:	4611      	mov	r1, r2
 80158b6:	4618      	mov	r0, r3
 80158b8:	f000 f818 	bl	80158ec <USBPD_PWR_IF_SupplyReady>
 80158bc:	4603      	mov	r3, r0
 80158be:	2b00      	cmp	r3, #0
 80158c0:	bf0c      	ite	eq
 80158c2:	2301      	moveq	r3, #1
 80158c4:	2300      	movne	r3, #0
 80158c6:	b2db      	uxtb	r3, r3
/* USER CODE END USBPD_DPM_IsPowerReady */
}
 80158c8:	4618      	mov	r0, r3
 80158ca:	3708      	adds	r7, #8
 80158cc:	46bd      	mov	sp, r7
 80158ce:	bd80      	pop	{r7, pc}

080158d0 <USBPD_PWR_IF_SetProfile>:
  * @brief  Sets the required power profile, now it works only with Fixed ones
  * @param  PortNum Port number
  * @retval USBPD status
*/
USBPD_StatusTypeDef USBPD_PWR_IF_SetProfile(uint8_t PortNum)
{
 80158d0:	b480      	push	{r7}
 80158d2:	b085      	sub	sp, #20
 80158d4:	af00      	add	r7, sp, #0
 80158d6:	4603      	mov	r3, r0
 80158d8:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_PWR_IF_SetProfile */
  USBPD_StatusTypeDef      _status = USBPD_ERROR;
 80158da:	2302      	movs	r3, #2
 80158dc:	73fb      	strb	r3, [r7, #15]
/*   if (BSP_ERROR_NONE == BSP_USBPD_PWR_VBUSSetVoltage_Fixed(PortNum, 5000, 3000, 3000))
  {
     _status = USBPD_OK;
  }
 */
  return _status;
 80158de:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_PWR_IF_SetProfile */
}
 80158e0:	4618      	mov	r0, r3
 80158e2:	3714      	adds	r7, #20
 80158e4:	46bd      	mov	sp, r7
 80158e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ea:	4770      	bx	lr

080158ec <USBPD_PWR_IF_SupplyReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_PWR_IF_SupplyReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 80158ec:	b580      	push	{r7, lr}
 80158ee:	b084      	sub	sp, #16
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	4603      	mov	r3, r0
 80158f4:	460a      	mov	r2, r1
 80158f6:	71fb      	strb	r3, [r7, #7]
 80158f8:	4613      	mov	r3, r2
 80158fa:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_PWR_IF_SupplyReady */
  USBPD_StatusTypeDef status = USBPD_ERROR;
 80158fc:	2302      	movs	r3, #2
 80158fe:	73fb      	strb	r3, [r7, #15]
  uint32_t _voltage;

  /* check for valid port */
  if (!USBPD_PORT_IsValid(PortNum))
 8015900:	79fb      	ldrb	r3, [r7, #7]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d001      	beq.n	801590a <USBPD_PWR_IF_SupplyReady+0x1e>
  {
    return USBPD_ERROR;
 8015906:	2302      	movs	r3, #2
 8015908:	e01c      	b.n	8015944 <USBPD_PWR_IF_SupplyReady+0x58>
  }

  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 801590a:	79fb      	ldrb	r3, [r7, #7]
 801590c:	f107 0208 	add.w	r2, r7, #8
 8015910:	4611      	mov	r1, r2
 8015912:	4618      	mov	r0, r3
 8015914:	f000 f890 	bl	8015a38 <BSP_USBPD_PWR_VBUSGetVoltage>
  if (USBPD_VSAFE_0V == Vsafe)
 8015918:	79bb      	ldrb	r3, [r7, #6]
 801591a:	2b00      	cmp	r3, #0
 801591c:	d109      	bne.n	8015932 <USBPD_PWR_IF_SupplyReady+0x46>
  {
    /* Vsafe0V */
    status = ((_voltage < USBPD_PWR_LOW_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 801591e:	68bb      	ldr	r3, [r7, #8]
 8015920:	f240 22ed 	movw	r2, #749	@ 0x2ed
 8015924:	4293      	cmp	r3, r2
 8015926:	d801      	bhi.n	801592c <USBPD_PWR_IF_SupplyReady+0x40>
 8015928:	2300      	movs	r3, #0
 801592a:	e000      	b.n	801592e <USBPD_PWR_IF_SupplyReady+0x42>
 801592c:	2302      	movs	r3, #2
 801592e:	73fb      	strb	r3, [r7, #15]
 8015930:	e007      	b.n	8015942 <USBPD_PWR_IF_SupplyReady+0x56>
  }
  else
  {
    /* Vsafe5V */
    status = ((_voltage > USBPD_PWR_HIGH_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 8015932:	68bb      	ldr	r3, [r7, #8]
 8015934:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 8015938:	d901      	bls.n	801593e <USBPD_PWR_IF_SupplyReady+0x52>
 801593a:	2300      	movs	r3, #0
 801593c:	e000      	b.n	8015940 <USBPD_PWR_IF_SupplyReady+0x54>
 801593e:	2302      	movs	r3, #2
 8015940:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8015942:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_PWR_IF_SupplyReady */
}
 8015944:	4618      	mov	r0, r3
 8015946:	3710      	adds	r7, #16
 8015948:	46bd      	mov	sp, r7
 801594a:	bd80      	pop	{r7, pc}

0801594c <USBPD_PWR_IF_GetVBUSStatus>:
  * @param PortNum Port number
  * @param PowerTypeStatus  Power type status based on @ref USBPD_VBUSPOWER_STATUS
  * @retval UBBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PWR_IF_GetVBUSStatus(uint8_t PortNum, USBPD_VBUSPOWER_STATUS PowerTypeStatus)
{
 801594c:	b580      	push	{r7, lr}
 801594e:	b084      	sub	sp, #16
 8015950:	af00      	add	r7, sp, #0
 8015952:	4603      	mov	r3, r0
 8015954:	460a      	mov	r2, r1
 8015956:	71fb      	strb	r3, [r7, #7]
 8015958:	4613      	mov	r3, r2
 801595a:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_PWR_IF_GetVBUSStatus */
  uint8_t _status = USBPD_FALSE;
 801595c:	2300      	movs	r3, #0
 801595e:	73fb      	strb	r3, [r7, #15]
  uint32_t _vbus = HW_IF_PWR_GetVoltage(PortNum);
 8015960:	79fb      	ldrb	r3, [r7, #7]
 8015962:	4618      	mov	r0, r3
 8015964:	f7fc fada 	bl	8011f1c <HW_IF_PWR_GetVoltage>
 8015968:	4603      	mov	r3, r0
 801596a:	60bb      	str	r3, [r7, #8]

  switch(PowerTypeStatus)
 801596c:	79bb      	ldrb	r3, [r7, #6]
 801596e:	2b02      	cmp	r3, #2
 8015970:	d015      	beq.n	801599e <USBPD_PWR_IF_GetVBUSStatus+0x52>
 8015972:	2b02      	cmp	r3, #2
 8015974:	dc1a      	bgt.n	80159ac <USBPD_PWR_IF_GetVBUSStatus+0x60>
 8015976:	2b00      	cmp	r3, #0
 8015978:	d002      	beq.n	8015980 <USBPD_PWR_IF_GetVBUSStatus+0x34>
 801597a:	2b01      	cmp	r3, #1
 801597c:	d008      	beq.n	8015990 <USBPD_PWR_IF_GetVBUSStatus+0x44>
    break;
  case USBPD_PWR_SNKDETACH:
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
    break;
  default :
    break;
 801597e:	e015      	b.n	80159ac <USBPD_PWR_IF_GetVBUSStatus+0x60>
    if (_vbus < USBPD_PWR_LOW_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8015980:	68bb      	ldr	r3, [r7, #8]
 8015982:	f240 22ed 	movw	r2, #749	@ 0x2ed
 8015986:	4293      	cmp	r3, r2
 8015988:	d812      	bhi.n	80159b0 <USBPD_PWR_IF_GetVBUSStatus+0x64>
 801598a:	2301      	movs	r3, #1
 801598c:	73fb      	strb	r3, [r7, #15]
    break;
 801598e:	e00f      	b.n	80159b0 <USBPD_PWR_IF_GetVBUSStatus+0x64>
    if (_vbus >= USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8015990:	68bb      	ldr	r3, [r7, #8]
 8015992:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 8015996:	d30d      	bcc.n	80159b4 <USBPD_PWR_IF_GetVBUSStatus+0x68>
 8015998:	2301      	movs	r3, #1
 801599a:	73fb      	strb	r3, [r7, #15]
    break;
 801599c:	e00a      	b.n	80159b4 <USBPD_PWR_IF_GetVBUSStatus+0x68>
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 801599e:	68bb      	ldr	r3, [r7, #8]
 80159a0:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 80159a4:	d208      	bcs.n	80159b8 <USBPD_PWR_IF_GetVBUSStatus+0x6c>
 80159a6:	2301      	movs	r3, #1
 80159a8:	73fb      	strb	r3, [r7, #15]
    break;
 80159aa:	e005      	b.n	80159b8 <USBPD_PWR_IF_GetVBUSStatus+0x6c>
    break;
 80159ac:	bf00      	nop
 80159ae:	e004      	b.n	80159ba <USBPD_PWR_IF_GetVBUSStatus+0x6e>
    break;
 80159b0:	bf00      	nop
 80159b2:	e002      	b.n	80159ba <USBPD_PWR_IF_GetVBUSStatus+0x6e>
    break;
 80159b4:	bf00      	nop
 80159b6:	e000      	b.n	80159ba <USBPD_PWR_IF_GetVBUSStatus+0x6e>
    break;
 80159b8:	bf00      	nop
  }
  return _status;
 80159ba:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_PWR_IF_GetVBUSStatus */
}
 80159bc:	4618      	mov	r0, r3
 80159be:	3710      	adds	r7, #16
 80159c0:	46bd      	mov	sp, r7
 80159c2:	bd80      	pop	{r7, pc}

080159c4 <BSP_USBPD_PWR_Init>:
  *         This parameter can be take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_Init(uint32_t Instance)
{
 80159c4:	b480      	push	{r7}
 80159c6:	b085      	sub	sp, #20
 80159c8:	af00      	add	r7, sp, #0
 80159ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_Init */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 80159cc:	2300      	movs	r3, #0
 80159ce:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d002      	beq.n	80159dc <BSP_USBPD_PWR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80159d6:	f06f 0301 	mvn.w	r3, #1
 80159da:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 80159dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_Init */
}
 80159de:	4618      	mov	r0, r3
 80159e0:	3714      	adds	r7, #20
 80159e2:	46bd      	mov	sp, r7
 80159e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e8:	4770      	bx	lr

080159ea <BSP_USBPD_PWR_VBUSInit>:
  *         This parameter can be take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSInit(uint32_t Instance)
{
 80159ea:	b480      	push	{r7}
 80159ec:	b085      	sub	sp, #20
 80159ee:	af00      	add	r7, sp, #0
 80159f0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 80159f2:	2300      	movs	r3, #0
 80159f4:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d002      	beq.n	8015a02 <BSP_USBPD_PWR_VBUSInit+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80159fc:	f06f 0301 	mvn.w	r3, #1
 8015a00:	60fb      	str	r3, [r7, #12]
  else
  {
    PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSInit");
  }

  return ret;
 8015a02:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSInit */
}
 8015a04:	4618      	mov	r0, r3
 8015a06:	3714      	adds	r7, #20
 8015a08:	46bd      	mov	sp, r7
 8015a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a0e:	4770      	bx	lr

08015a10 <BSP_USBPD_PWR_VBUSDeInit>:
  *         This parameter can be take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSDeInit(uint32_t Instance)
{
 8015a10:	b480      	push	{r7}
 8015a12:	b085      	sub	sp, #20
 8015a14:	af00      	add	r7, sp, #0
 8015a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSDeInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8015a18:	f06f 030a 	mvn.w	r3, #10
 8015a1c:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d002      	beq.n	8015a2a <BSP_USBPD_PWR_VBUSDeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8015a24:	f06f 0301 	mvn.w	r3, #1
 8015a28:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8015a2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSDeInit */
}
 8015a2c:	4618      	mov	r0, r3
 8015a2e:	3714      	adds	r7, #20
 8015a30:	46bd      	mov	sp, r7
 8015a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a36:	4770      	bx	lr

08015a38 <BSP_USBPD_PWR_VBUSGetVoltage>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @param  pVoltage Pointer on measured voltage level (in mV)
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSGetVoltage(uint32_t Instance, uint32_t *pVoltage)
{
 8015a38:	b480      	push	{r7}
 8015a3a:	b085      	sub	sp, #20
 8015a3c:	af00      	add	r7, sp, #0
 8015a3e:	6078      	str	r0, [r7, #4]
 8015a40:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSGetVoltage */
  /* Check if instance is valid       */
  int32_t ret;
  uint32_t val = 0U;
 8015a42:	2300      	movs	r3, #0
 8015a44:	60bb      	str	r3, [r7, #8]

  if ((Instance >= USBPD_PWR_INSTANCES_NBR) || (NULL == pVoltage))
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d102      	bne.n	8015a52 <BSP_USBPD_PWR_VBUSGetVoltage+0x1a>
 8015a4c:	683b      	ldr	r3, [r7, #0]
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d103      	bne.n	8015a5a <BSP_USBPD_PWR_VBUSGetVoltage+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8015a52:	f06f 0301 	mvn.w	r3, #1
 8015a56:	60fb      	str	r3, [r7, #12]
 8015a58:	e002      	b.n	8015a60 <BSP_USBPD_PWR_VBUSGetVoltage+0x28>
  }
  else
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8015a5a:	f06f 030a 	mvn.w	r3, #10
 8015a5e:	60fb      	str	r3, [r7, #12]
    PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSGetVoltage");
  }
  *pVoltage = val;
 8015a60:	683b      	ldr	r3, [r7, #0]
 8015a62:	68ba      	ldr	r2, [r7, #8]
 8015a64:	601a      	str	r2, [r3, #0]
  return ret;
 8015a66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSGetVoltage */
}
 8015a68:	4618      	mov	r0, r3
 8015a6a:	3714      	adds	r7, #20
 8015a6c:	46bd      	mov	sp, r7
 8015a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a72:	4770      	bx	lr

08015a74 <asserv_init>:
extern uint16_t adc2_asserv_VAL[2];

int16_t I_cons_1 = 0;
int16_t I_cons_2 = 0;

void asserv_init(void){
 8015a74:	b480      	push	{r7}
 8015a76:	af00      	add	r7, sp, #0

}
 8015a78:	bf00      	nop
 8015a7a:	46bd      	mov	sp, r7
 8015a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a80:	4770      	bx	lr
	...

08015a84 <asserv_courant_run>:
/************ ASSERV COURANT ************/
void asserv_courant_run(void*){
 8015a84:	b580      	push	{r7, lr}
 8015a86:	b086      	sub	sp, #24
 8015a88:	af00      	add	r7, sp, #0
 8015a8a:	6078      	str	r0, [r7, #4]

	for(;;){

		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8015a8c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8015a90:	2001      	movs	r0, #1
 8015a92:	f7fe fe53 	bl	801473c <ulTaskNotifyTake>
		// --> Varaiation DE 250mV de 0% a 100%duty cycle  ET  450mV de -100% a 0% duty cycle
		printf("\r\nADC CHANNEL 1:%i\t\tADC CHANNEL 2:%i\r\n",(int16_t)adc2_asserv_VAL[0],(int16_t)adc2_asserv_VAL[1]);
 8015a96:	4b1c      	ldr	r3, [pc, #112]	@ (8015b08 <asserv_courant_run+0x84>)
 8015a98:	881b      	ldrh	r3, [r3, #0]
 8015a9a:	b21b      	sxth	r3, r3
 8015a9c:	4619      	mov	r1, r3
 8015a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8015b08 <asserv_courant_run+0x84>)
 8015aa0:	885b      	ldrh	r3, [r3, #2]
 8015aa2:	b21b      	sxth	r3, r3
 8015aa4:	461a      	mov	r2, r3
 8015aa6:	4819      	ldr	r0, [pc, #100]	@ (8015b0c <asserv_courant_run+0x88>)
 8015aa8:	f001 f8f0 	bl	8016c8c <iprintf>
		int16_t I_1_mA = (int16_t)adc2_asserv_VAL[0] /(R_SHUNT * GAIN_NCS199A2R); //RSHUNT EN mOhm --> I en mA
 8015aac:	4b16      	ldr	r3, [pc, #88]	@ (8015b08 <asserv_courant_run+0x84>)
 8015aae:	881b      	ldrh	r3, [r3, #0]
 8015ab0:	b21b      	sxth	r3, r3
 8015ab2:	4a17      	ldr	r2, [pc, #92]	@ (8015b10 <asserv_courant_run+0x8c>)
 8015ab4:	fb82 1203 	smull	r1, r2, r2, r3
 8015ab8:	1192      	asrs	r2, r2, #6
 8015aba:	17db      	asrs	r3, r3, #31
 8015abc:	1ad3      	subs	r3, r2, r3
 8015abe:	82fb      	strh	r3, [r7, #22]
		int16_t I_2_mA = (int16_t)adc2_asserv_VAL[1] /(R_SHUNT * GAIN_NCS199A2R); //RSHUNT EN mOhm --> I en mA
 8015ac0:	4b11      	ldr	r3, [pc, #68]	@ (8015b08 <asserv_courant_run+0x84>)
 8015ac2:	885b      	ldrh	r3, [r3, #2]
 8015ac4:	b21b      	sxth	r3, r3
 8015ac6:	4a12      	ldr	r2, [pc, #72]	@ (8015b10 <asserv_courant_run+0x8c>)
 8015ac8:	fb82 1203 	smull	r1, r2, r2, r3
 8015acc:	1192      	asrs	r2, r2, #6
 8015ace:	17db      	asrs	r3, r3, #31
 8015ad0:	1ad3      	subs	r3, r2, r3
 8015ad2:	82bb      	strh	r3, [r7, #20]
		printf("Courant Driver1: %i (mA)\t\tCourant Driver2: %i (mA)\r\n",I_1_mA,I_2_mA);
 8015ad4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015ad8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8015adc:	4619      	mov	r1, r3
 8015ade:	480d      	ldr	r0, [pc, #52]	@ (8015b14 <asserv_courant_run+0x90>)
 8015ae0:	f001 f8d4 	bl	8016c8c <iprintf>
		//** Fonction de Transfert **//
		int32_t erreur_1= I_cons_1 - I_1_mA;
 8015ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8015b18 <asserv_courant_run+0x94>)
 8015ae6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015aea:	461a      	mov	r2, r3
 8015aec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015af0:	1ad3      	subs	r3, r2, r3
 8015af2:	613b      	str	r3, [r7, #16]
		int32_t erreur_2= I_cons_1 - I_2_mA;
 8015af4:	4b08      	ldr	r3, [pc, #32]	@ (8015b18 <asserv_courant_run+0x94>)
 8015af6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015afa:	461a      	mov	r2, r3
 8015afc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8015b00:	1ad3      	subs	r3, r2, r3
 8015b02:	60fb      	str	r3, [r7, #12]
	for(;;){
 8015b04:	bf00      	nop
 8015b06:	e7c1      	b.n	8015a8c <asserv_courant_run+0x8>
 8015b08:	20005b00 	.word	0x20005b00
 8015b0c:	08018220 	.word	0x08018220
 8015b10:	10624dd3 	.word	0x10624dd3
 8015b14:	08018248 	.word	0x08018248
 8015b18:	20005ab0 	.word	0x20005ab0

08015b1c <asserv_position_run>:
extern XYZ_t accXYZ;
extern XYZ_t vitXYZ;
extern XYZ_t posXYZ;

/************ ASSERV POSITION ************/
void asserv_position_run(void*){
 8015b1c:	b590      	push	{r4, r7, lr}
 8015b1e:	b097      	sub	sp, #92	@ 0x5c
 8015b20:	af00      	add	r7, sp, #0
 8015b22:	6178      	str	r0, [r7, #20]
	uint8_t fifo_status = 0;
 8015b24:	2300      	movs	r3, #0
 8015b26:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	for(;;){

		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8015b2a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8015b2e:	2001      	movs	r0, #1
 8015b30:	f7fe fe04 	bl	801473c <ulTaskNotifyTake>

		ADXL343_ReadRegister(0x00, &fifo_status, 1) != HAL_OK ?
 8015b34:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8015b38:	2201      	movs	r2, #1
 8015b3a:	4619      	mov	r1, r3
 8015b3c:	2000      	movs	r0, #0
 8015b3e:	f7f0 fd8f 	bl	8006660 <ADXL343_ReadRegister>
 8015b42:	4603      	mov	r3, r0
				debug(D_ERROR, "I2C READ in IT") : (void) 0;
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d003      	beq.n	8015b50 <asserv_position_run+0x34>
 8015b48:	493d      	ldr	r1, [pc, #244]	@ (8015c40 <asserv_position_run+0x124>)
 8015b4a:	483e      	ldr	r0, [pc, #248]	@ (8015c44 <asserv_position_run+0x128>)
 8015b4c:	f000 fe8e 	bl	801686c <debug>
		if (fifo_status >> 7) {
 8015b50:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8015b54:	b25b      	sxtb	r3, r3
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	dae7      	bge.n	8015b2a <asserv_position_run+0xe>
			//GET POSITION VIA DERIVATION
			XYZ_t accPREV = accXYZ;
 8015b5a:	4a3b      	ldr	r2, [pc, #236]	@ (8015c48 <asserv_position_run+0x12c>)
 8015b5c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8015b60:	ca07      	ldmia	r2, {r0, r1, r2}
 8015b62:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			XYZ_t vitPREV = vitXYZ;
 8015b66:	4a39      	ldr	r2, [pc, #228]	@ (8015c4c <asserv_position_run+0x130>)
 8015b68:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8015b6c:	ca07      	ldmia	r2, {r0, r1, r2}
 8015b6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			XYZ_t posPREV = posXYZ;
 8015b72:	4a37      	ldr	r2, [pc, #220]	@ (8015c50 <asserv_position_run+0x134>)
 8015b74:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8015b78:	ca07      	ldmia	r2, {r0, r1, r2}
 8015b7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

			accXYZ = ADXL343_getAcc();
 8015b7e:	4c32      	ldr	r4, [pc, #200]	@ (8015c48 <asserv_position_run+0x12c>)
 8015b80:	463b      	mov	r3, r7
 8015b82:	4618      	mov	r0, r3
 8015b84:	f7f0 fcce 	bl	8006524 <ADXL343_getAcc>
 8015b88:	463b      	mov	r3, r7
 8015b8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015b8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

			vitXYZ = (XYZ_t ) {(vitPREV.X - accPREV.X*10)/1000, accPREV.Y - accXYZ.Y,
 8015b92:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015b94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015b96:	f06f 0109 	mvn.w	r1, #9
 8015b9a:	fb01 f303 	mul.w	r3, r1, r3
 8015b9e:	4413      	add	r3, r2
 8015ba0:	4a2c      	ldr	r2, [pc, #176]	@ (8015c54 <asserv_position_run+0x138>)
 8015ba2:	fb82 1203 	smull	r1, r2, r2, r3
 8015ba6:	1192      	asrs	r2, r2, #6
 8015ba8:	17db      	asrs	r3, r3, #31
 8015baa:	1ad1      	subs	r1, r2, r3
 8015bac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015bae:	4b26      	ldr	r3, [pc, #152]	@ (8015c48 <asserv_position_run+0x12c>)
 8015bb0:	685b      	ldr	r3, [r3, #4]
 8015bb2:	1ad2      	subs	r2, r2, r3
				accPREV.Z - accXYZ.Z }; //   mm/s
 8015bb4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8015bb6:	4b24      	ldr	r3, [pc, #144]	@ (8015c48 <asserv_position_run+0x12c>)
 8015bb8:	689b      	ldr	r3, [r3, #8]
 8015bba:	1ac3      	subs	r3, r0, r3
			vitXYZ = (XYZ_t ) {(vitPREV.X - accPREV.X*10)/1000, accPREV.Y - accXYZ.Y,
 8015bbc:	4823      	ldr	r0, [pc, #140]	@ (8015c4c <asserv_position_run+0x130>)
 8015bbe:	6001      	str	r1, [r0, #0]
 8015bc0:	4922      	ldr	r1, [pc, #136]	@ (8015c4c <asserv_position_run+0x130>)
 8015bc2:	604a      	str	r2, [r1, #4]
 8015bc4:	4a21      	ldr	r2, [pc, #132]	@ (8015c4c <asserv_position_run+0x130>)
 8015bc6:	6093      	str	r3, [r2, #8]

			posXYZ = (XYZ_t ) {(posPREV.X - vitXYZ.X*10)/1000, posPREV.Y - vitPREV.Y,
 8015bc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015bca:	4b20      	ldr	r3, [pc, #128]	@ (8015c4c <asserv_position_run+0x130>)
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	f06f 0109 	mvn.w	r1, #9
 8015bd2:	fb01 f303 	mul.w	r3, r1, r3
 8015bd6:	4413      	add	r3, r2
 8015bd8:	4a1e      	ldr	r2, [pc, #120]	@ (8015c54 <asserv_position_run+0x138>)
 8015bda:	fb82 1203 	smull	r1, r2, r2, r3
 8015bde:	1192      	asrs	r2, r2, #6
 8015be0:	17db      	asrs	r3, r3, #31
 8015be2:	1ad1      	subs	r1, r2, r3
 8015be4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015be6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015be8:	1ad2      	subs	r2, r2, r3
				posPREV.Z - vitPREV.Z }; // m&m
 8015bea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8015bec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015bee:	1ac3      	subs	r3, r0, r3
			posXYZ = (XYZ_t ) {(posPREV.X - vitXYZ.X*10)/1000, posPREV.Y - vitPREV.Y,
 8015bf0:	4817      	ldr	r0, [pc, #92]	@ (8015c50 <asserv_position_run+0x134>)
 8015bf2:	6001      	str	r1, [r0, #0]
 8015bf4:	4916      	ldr	r1, [pc, #88]	@ (8015c50 <asserv_position_run+0x134>)
 8015bf6:	604a      	str	r2, [r1, #4]
 8015bf8:	4a15      	ldr	r2, [pc, #84]	@ (8015c50 <asserv_position_run+0x134>)
 8015bfa:	6093      	str	r3, [r2, #8]




			printf("accX (mm.s-2): %-24li| accY: %-24li| accZ: %-24li\r\n", accXYZ.X,
 8015bfc:	4b12      	ldr	r3, [pc, #72]	@ (8015c48 <asserv_position_run+0x12c>)
 8015bfe:	6819      	ldr	r1, [r3, #0]
 8015c00:	4b11      	ldr	r3, [pc, #68]	@ (8015c48 <asserv_position_run+0x12c>)
 8015c02:	685a      	ldr	r2, [r3, #4]
 8015c04:	4b10      	ldr	r3, [pc, #64]	@ (8015c48 <asserv_position_run+0x12c>)
 8015c06:	689b      	ldr	r3, [r3, #8]
 8015c08:	4813      	ldr	r0, [pc, #76]	@ (8015c58 <asserv_position_run+0x13c>)
 8015c0a:	f001 f83f 	bl	8016c8c <iprintf>
					accXYZ.Y, accXYZ.Z);
			printf("vitX (mm.s-1): %-20li| vitY: %-20li| vitZ: %-20li\r\n",
 8015c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8015c4c <asserv_position_run+0x130>)
 8015c10:	6819      	ldr	r1, [r3, #0]
 8015c12:	4b0e      	ldr	r3, [pc, #56]	@ (8015c4c <asserv_position_run+0x130>)
 8015c14:	685a      	ldr	r2, [r3, #4]
 8015c16:	4b0d      	ldr	r3, [pc, #52]	@ (8015c4c <asserv_position_run+0x130>)
 8015c18:	689b      	ldr	r3, [r3, #8]
 8015c1a:	4810      	ldr	r0, [pc, #64]	@ (8015c5c <asserv_position_run+0x140>)
 8015c1c:	f001 f836 	bl	8016c8c <iprintf>
					vitXYZ.X, vitXYZ.Y, vitXYZ.Z);
			printf("posX (mm): %-20li| posY: %-20li| posZ: %-20li\r\n",
 8015c20:	4b0b      	ldr	r3, [pc, #44]	@ (8015c50 <asserv_position_run+0x134>)
 8015c22:	6819      	ldr	r1, [r3, #0]
 8015c24:	4b0a      	ldr	r3, [pc, #40]	@ (8015c50 <asserv_position_run+0x134>)
 8015c26:	685a      	ldr	r2, [r3, #4]
 8015c28:	4b09      	ldr	r3, [pc, #36]	@ (8015c50 <asserv_position_run+0x134>)
 8015c2a:	689b      	ldr	r3, [r3, #8]
 8015c2c:	480c      	ldr	r0, [pc, #48]	@ (8015c60 <asserv_position_run+0x144>)
 8015c2e:	f001 f82d 	bl	8016c8c <iprintf>
					posXYZ.X, posXYZ.Y, posXYZ.Z);
			printf(separator);
 8015c32:	480c      	ldr	r0, [pc, #48]	@ (8015c64 <asserv_position_run+0x148>)
 8015c34:	f001 f892 	bl	8016d5c <puts>


			fifo_status = 0;
 8015c38:	2300      	movs	r3, #0
 8015c3a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8015c3e:	e774      	b.n	8015b2a <asserv_position_run+0xe>
 8015c40:	08018280 	.word	0x08018280
 8015c44:	08018290 	.word	0x08018290
 8015c48:	20000a14 	.word	0x20000a14
 8015c4c:	20000a20 	.word	0x20000a20
 8015c50:	20000a2c 	.word	0x20000a2c
 8015c54:	10624dd3 	.word	0x10624dd3
 8015c58:	0801829c 	.word	0x0801829c
 8015c5c:	080182d0 	.word	0x080182d0
 8015c60:	08018304 	.word	0x08018304
 8015c64:	08018334 	.word	0x08018334

08015c68 <CUSTOM_TIM_PeriodElapsedCallback>:
/*
 * We must declared here a function CUSTOM_ because main.c already use this callback
 */

/*********** PREEMPTION PRIORITY 14 ***********/
void CUSTOM_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8015c68:	b580      	push	{r7, lr}
 8015c6a:	b084      	sub	sp, #16
 8015c6c:	af00      	add	r7, sp, #0
 8015c6e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM15) { //Every 1ms
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	4a48      	ldr	r2, [pc, #288]	@ (8015d98 <CUSTOM_TIM_PeriodElapsedCallback+0x130>)
 8015c76:	4293      	cmp	r3, r2
 8015c78:	f040 8089 	bne.w	8015d8e <CUSTOM_TIM_PeriodElapsedCallback+0x126>
		if (isSeeIMU) {
 8015c7c:	4b47      	ldr	r3, [pc, #284]	@ (8015d9c <CUSTOM_TIM_PeriodElapsedCallback+0x134>)
 8015c7e:	681b      	ldr	r3, [r3, #0]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d017      	beq.n	8015cb4 <CUSTOM_TIM_PeriodElapsedCallback+0x4c>
			uint8_t ret_ADXL;
			uint8_t ret_GPIO;
			ADXL343_ReadRegister(0x2B, &ret_ADXL, 1);
 8015c84:	f107 030e 	add.w	r3, r7, #14
 8015c88:	2201      	movs	r2, #1
 8015c8a:	4619      	mov	r1, r3
 8015c8c:	202b      	movs	r0, #43	@ 0x2b
 8015c8e:	f7f0 fce7 	bl	8006660 <ADXL343_ReadRegister>
			TCA9555_ReadRegister(0x01, &ret_GPIO, 1);
 8015c92:	f107 030d 	add.w	r3, r7, #13
 8015c96:	2201      	movs	r2, #1
 8015c98:	4619      	mov	r1, r3
 8015c9a:	2001      	movs	r0, #1
 8015c9c:	f7f0 fe7c 	bl	8006998 <TCA9555_ReadRegister>
			printf("READ - ACP_TAP_STATUS :0x%02X\r\n",ret_ADXL);
 8015ca0:	7bbb      	ldrb	r3, [r7, #14]
 8015ca2:	4619      	mov	r1, r3
 8015ca4:	483e      	ldr	r0, [pc, #248]	@ (8015da0 <CUSTOM_TIM_PeriodElapsedCallback+0x138>)
 8015ca6:	f000 fff1 	bl	8016c8c <iprintf>
			printf("READ - OUTPUT Port Registers :0x%02X\r\n",ret_GPIO);
 8015caa:	7b7b      	ldrb	r3, [r7, #13]
 8015cac:	4619      	mov	r1, r3
 8015cae:	483d      	ldr	r0, [pc, #244]	@ (8015da4 <CUSTOM_TIM_PeriodElapsedCallback+0x13c>)
 8015cb0:	f000 ffec 	bl	8016c8c <iprintf>
					eSetBits,
					&pxHigherPriorityTaskWoken);
			portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
			 */
		}
		if (isSpeedInit) {
 8015cb4:	4b3c      	ldr	r3, [pc, #240]	@ (8015da8 <CUSTOM_TIM_PeriodElapsedCallback+0x140>)
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d068      	beq.n	8015d8e <CUSTOM_TIM_PeriodElapsedCallback+0x126>

			/*** SMOOTH SPEED CHANGE ***/
			uint8_t isSMOOTHspeed = 0;
 8015cbc:	2300      	movs	r3, #0
 8015cbe:	73fb      	strb	r3, [r7, #15]
			isSMOOTHspeed |= MDriver1.FWD.pulseGoal != *(MDriver1.FWD.CCR_Channel) ? 1: 0; //Stocke sur un bit si on doit changer une valeur de pulse
 8015cc0:	4b3a      	ldr	r3, [pc, #232]	@ (8015dac <CUSTOM_TIM_PeriodElapsedCallback+0x144>)
 8015cc2:	68da      	ldr	r2, [r3, #12]
 8015cc4:	4b39      	ldr	r3, [pc, #228]	@ (8015dac <CUSTOM_TIM_PeriodElapsedCallback+0x144>)
 8015cc6:	689b      	ldr	r3, [r3, #8]
 8015cc8:	681b      	ldr	r3, [r3, #0]
 8015cca:	429a      	cmp	r2, r3
 8015ccc:	bf14      	ite	ne
 8015cce:	2301      	movne	r3, #1
 8015cd0:	2300      	moveq	r3, #0
 8015cd2:	b2db      	uxtb	r3, r3
 8015cd4:	b25a      	sxtb	r2, r3
 8015cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015cda:	4313      	orrs	r3, r2
 8015cdc:	b25b      	sxtb	r3, r3
 8015cde:	73fb      	strb	r3, [r7, #15]
			isSMOOTHspeed |= MDriver1.REV.pulseGoal != *(MDriver1.REV.CCR_Channel) ? 1<<1: 0;
 8015ce0:	4b32      	ldr	r3, [pc, #200]	@ (8015dac <CUSTOM_TIM_PeriodElapsedCallback+0x144>)
 8015ce2:	699a      	ldr	r2, [r3, #24]
 8015ce4:	4b31      	ldr	r3, [pc, #196]	@ (8015dac <CUSTOM_TIM_PeriodElapsedCallback+0x144>)
 8015ce6:	695b      	ldr	r3, [r3, #20]
 8015ce8:	681b      	ldr	r3, [r3, #0]
 8015cea:	429a      	cmp	r2, r3
 8015cec:	d001      	beq.n	8015cf2 <CUSTOM_TIM_PeriodElapsedCallback+0x8a>
 8015cee:	2302      	movs	r3, #2
 8015cf0:	e000      	b.n	8015cf4 <CUSTOM_TIM_PeriodElapsedCallback+0x8c>
 8015cf2:	2300      	movs	r3, #0
 8015cf4:	b25a      	sxtb	r2, r3
 8015cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015cfa:	4313      	orrs	r3, r2
 8015cfc:	b25b      	sxtb	r3, r3
 8015cfe:	73fb      	strb	r3, [r7, #15]
			isSMOOTHspeed |= MDriver2.FWD.pulseGoal != *(MDriver2.FWD.CCR_Channel) ? 1<<2: 0;
 8015d00:	4b2b      	ldr	r3, [pc, #172]	@ (8015db0 <CUSTOM_TIM_PeriodElapsedCallback+0x148>)
 8015d02:	68da      	ldr	r2, [r3, #12]
 8015d04:	4b2a      	ldr	r3, [pc, #168]	@ (8015db0 <CUSTOM_TIM_PeriodElapsedCallback+0x148>)
 8015d06:	689b      	ldr	r3, [r3, #8]
 8015d08:	681b      	ldr	r3, [r3, #0]
 8015d0a:	429a      	cmp	r2, r3
 8015d0c:	d001      	beq.n	8015d12 <CUSTOM_TIM_PeriodElapsedCallback+0xaa>
 8015d0e:	2304      	movs	r3, #4
 8015d10:	e000      	b.n	8015d14 <CUSTOM_TIM_PeriodElapsedCallback+0xac>
 8015d12:	2300      	movs	r3, #0
 8015d14:	b25a      	sxtb	r2, r3
 8015d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015d1a:	4313      	orrs	r3, r2
 8015d1c:	b25b      	sxtb	r3, r3
 8015d1e:	73fb      	strb	r3, [r7, #15]
			isSMOOTHspeed |= MDriver2.REV.pulseGoal != *(MDriver2.REV.CCR_Channel) ? 1<<3: 0;
 8015d20:	4b23      	ldr	r3, [pc, #140]	@ (8015db0 <CUSTOM_TIM_PeriodElapsedCallback+0x148>)
 8015d22:	699a      	ldr	r2, [r3, #24]
 8015d24:	4b22      	ldr	r3, [pc, #136]	@ (8015db0 <CUSTOM_TIM_PeriodElapsedCallback+0x148>)
 8015d26:	695b      	ldr	r3, [r3, #20]
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	429a      	cmp	r2, r3
 8015d2c:	d001      	beq.n	8015d32 <CUSTOM_TIM_PeriodElapsedCallback+0xca>
 8015d2e:	2308      	movs	r3, #8
 8015d30:	e000      	b.n	8015d34 <CUSTOM_TIM_PeriodElapsedCallback+0xcc>
 8015d32:	2300      	movs	r3, #0
 8015d34:	b25a      	sxtb	r2, r3
 8015d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015d3a:	4313      	orrs	r3, r2
 8015d3c:	b25b      	sxtb	r3, r3
 8015d3e:	73fb      	strb	r3, [r7, #15]


			if(isSMOOTHspeed){ // Si un seul 1 est présent aloir la condition est vrai
 8015d40:	7bfb      	ldrb	r3, [r7, #15]
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d023      	beq.n	8015d8e <CUSTOM_TIM_PeriodElapsedCallback+0x126>
				(isSMOOTHspeed & 0b1)>> 0 ? // Si on a detecter une erreur
 8015d46:	7bfb      	ldrb	r3, [r7, #15]
 8015d48:	f003 0301 	and.w	r3, r3, #1
						IT_ZXB5210_speed_UPDATE(&MDriver1, &MDriver1.FWD):(void)0;
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d003      	beq.n	8015d58 <CUSTOM_TIM_PeriodElapsedCallback+0xf0>
 8015d50:	4918      	ldr	r1, [pc, #96]	@ (8015db4 <CUSTOM_TIM_PeriodElapsedCallback+0x14c>)
 8015d52:	4816      	ldr	r0, [pc, #88]	@ (8015dac <CUSTOM_TIM_PeriodElapsedCallback+0x144>)
 8015d54:	f7f0 ff6e 	bl	8006c34 <IT_ZXB5210_speed_UPDATE>
				(isSMOOTHspeed & 0b10)>> 1 ?
 8015d58:	7bfb      	ldrb	r3, [r7, #15]
 8015d5a:	f003 0302 	and.w	r3, r3, #2
						IT_ZXB5210_speed_UPDATE(&MDriver1, &MDriver1.REV):(void)0;
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d003      	beq.n	8015d6a <CUSTOM_TIM_PeriodElapsedCallback+0x102>
 8015d62:	4915      	ldr	r1, [pc, #84]	@ (8015db8 <CUSTOM_TIM_PeriodElapsedCallback+0x150>)
 8015d64:	4811      	ldr	r0, [pc, #68]	@ (8015dac <CUSTOM_TIM_PeriodElapsedCallback+0x144>)
 8015d66:	f7f0 ff65 	bl	8006c34 <IT_ZXB5210_speed_UPDATE>
				(isSMOOTHspeed & 0b100)>> 2 ?
 8015d6a:	7bfb      	ldrb	r3, [r7, #15]
 8015d6c:	f003 0304 	and.w	r3, r3, #4
						IT_ZXB5210_speed_UPDATE(&MDriver2, &MDriver2.FWD):(void)0;
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d003      	beq.n	8015d7c <CUSTOM_TIM_PeriodElapsedCallback+0x114>
 8015d74:	4911      	ldr	r1, [pc, #68]	@ (8015dbc <CUSTOM_TIM_PeriodElapsedCallback+0x154>)
 8015d76:	480e      	ldr	r0, [pc, #56]	@ (8015db0 <CUSTOM_TIM_PeriodElapsedCallback+0x148>)
 8015d78:	f7f0 ff5c 	bl	8006c34 <IT_ZXB5210_speed_UPDATE>
				(isSMOOTHspeed & 0b1000)>> 3 ?
 8015d7c:	7bfb      	ldrb	r3, [r7, #15]
 8015d7e:	f003 0308 	and.w	r3, r3, #8
						IT_ZXB5210_speed_UPDATE(&MDriver2, &MDriver2.REV):(void)0;
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d003      	beq.n	8015d8e <CUSTOM_TIM_PeriodElapsedCallback+0x126>
 8015d86:	490e      	ldr	r1, [pc, #56]	@ (8015dc0 <CUSTOM_TIM_PeriodElapsedCallback+0x158>)
 8015d88:	4809      	ldr	r0, [pc, #36]	@ (8015db0 <CUSTOM_TIM_PeriodElapsedCallback+0x148>)
 8015d8a:	f7f0 ff53 	bl	8006c34 <IT_ZXB5210_speed_UPDATE>
			}
		}
	}
}
 8015d8e:	bf00      	nop
 8015d90:	3710      	adds	r7, #16
 8015d92:	46bd      	mov	sp, r7
 8015d94:	bd80      	pop	{r7, pc}
 8015d96:	bf00      	nop
 8015d98:	40014000 	.word	0x40014000
 8015d9c:	20005b74 	.word	0x20005b74
 8015da0:	08018380 	.word	0x08018380
 8015da4:	080183a0 	.word	0x080183a0
 8015da8:	20000a70 	.word	0x20000a70
 8015dac:	20000a38 	.word	0x20000a38
 8015db0:	20000a54 	.word	0x20000a54
 8015db4:	20000a3c 	.word	0x20000a3c
 8015db8:	20000a48 	.word	0x20000a48
 8015dbc:	20000a58 	.word	0x20000a58
 8015dc0:	20000a64 	.word	0x20000a64

08015dc4 <HAL_UART_RxCpltCallback>:
/*********** PREEMPTION PRIORITY 5 ***********/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8015dc4:	b580      	push	{r7, lr}
 8015dc6:	b084      	sub	sp, #16
 8015dc8:	af00      	add	r7, sp, #0
 8015dca:	6078      	str	r0, [r7, #4]
	/** SHELL INTERRUPTIONS **/
	if (huart->Instance == USART1) {
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	4a0d      	ldr	r2, [pc, #52]	@ (8015e08 <HAL_UART_RxCpltCallback+0x44>)
 8015dd2:	4293      	cmp	r3, r2
 8015dd4:	d114      	bne.n	8015e00 <HAL_UART_RxCpltCallback+0x3c>
		BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8015dd6:	2300      	movs	r3, #0
 8015dd8:	60fb      	str	r3, [r7, #12]
		xSemaphoreGiveFromISR(sem_uart_read, &pxHigherPriorityTaskWoken);
 8015dda:	4b0c      	ldr	r3, [pc, #48]	@ (8015e0c <HAL_UART_RxCpltCallback+0x48>)
 8015ddc:	681b      	ldr	r3, [r3, #0]
 8015dde:	f107 020c 	add.w	r2, r7, #12
 8015de2:	4611      	mov	r1, r2
 8015de4:	4618      	mov	r0, r3
 8015de6:	f7fd f831 	bl	8012e4c <xQueueGiveFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8015dea:	68fb      	ldr	r3, [r7, #12]
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d007      	beq.n	8015e00 <HAL_UART_RxCpltCallback+0x3c>
 8015df0:	4b07      	ldr	r3, [pc, #28]	@ (8015e10 <HAL_UART_RxCpltCallback+0x4c>)
 8015df2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015df6:	601a      	str	r2, [r3, #0]
 8015df8:	f3bf 8f4f 	dsb	sy
 8015dfc:	f3bf 8f6f 	isb	sy
	}
}
 8015e00:	bf00      	nop
 8015e02:	3710      	adds	r7, #16
 8015e04:	46bd      	mov	sp, r7
 8015e06:	bd80      	pop	{r7, pc}
 8015e08:	40013800 	.word	0x40013800
 8015e0c:	20005ab4 	.word	0x20005ab4
 8015e10:	e000ed04 	.word	0xe000ed04

08015e14 <HAL_ADC_ConvCpltCallback>:
/*********** PREEMPTION PRIORITY 5 ***********/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8015e14:	b580      	push	{r7, lr}
 8015e16:	b086      	sub	sp, #24
 8015e18:	af02      	add	r7, sp, #8
 8015e1a:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC2) {
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	4a0e      	ldr	r2, [pc, #56]	@ (8015e5c <HAL_ADC_ConvCpltCallback+0x48>)
 8015e22:	4293      	cmp	r3, r2
 8015e24:	d116      	bne.n	8015e54 <HAL_ADC_ConvCpltCallback+0x40>
		BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8015e26:	2300      	movs	r3, #0
 8015e28:	60fb      	str	r3, [r7, #12]
		xTaskNotifyFromISR(h_task_asserv_I,
 8015e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8015e60 <HAL_ADC_ConvCpltCallback+0x4c>)
 8015e2c:	6818      	ldr	r0, [r3, #0]
 8015e2e:	f107 030c 	add.w	r3, r7, #12
 8015e32:	9300      	str	r3, [sp, #0]
 8015e34:	2300      	movs	r3, #0
 8015e36:	2201      	movs	r2, #1
 8015e38:	2101      	movs	r1, #1
 8015e3a:	f7fe fccb 	bl	80147d4 <xTaskGenericNotifyFromISR>
				1,
				eSetBits,
				&pxHigherPriorityTaskWoken);
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8015e3e:	68fb      	ldr	r3, [r7, #12]
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d007      	beq.n	8015e54 <HAL_ADC_ConvCpltCallback+0x40>
 8015e44:	4b07      	ldr	r3, [pc, #28]	@ (8015e64 <HAL_ADC_ConvCpltCallback+0x50>)
 8015e46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015e4a:	601a      	str	r2, [r3, #0]
 8015e4c:	f3bf 8f4f 	dsb	sy
 8015e50:	f3bf 8f6f 	isb	sy
	}
}
 8015e54:	bf00      	nop
 8015e56:	3710      	adds	r7, #16
 8015e58:	46bd      	mov	sp, r7
 8015e5a:	bd80      	pop	{r7, pc}
 8015e5c:	50000100 	.word	0x50000100
 8015e60:	200004e0 	.word	0x200004e0
 8015e64:	e000ed04 	.word	0xe000ed04

08015e68 <changeMode_run>:
#include "components/TCA9555.h"
#include "components/LP5812.h"
#include "components/ADXL343.h"

int  workMode =0;
void changeMode_run(void*){
 8015e68:	b580      	push	{r7, lr}
 8015e6a:	b084      	sub	sp, #16
 8015e6c:	af00      	add	r7, sp, #0
 8015e6e:	6078      	str	r0, [r7, #4]
	for(;;){
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8015e70:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8015e74:	2001      	movs	r0, #1
 8015e76:	f7fe fc61 	bl	801473c <ulTaskNotifyTake>

		// Lire dans les registre du Ge
		uint8_t ret=0;
 8015e7a:	2300      	movs	r3, #0
 8015e7c:	73bb      	strb	r3, [r7, #14]
		TCA9555_ReadRegister(0x03,&ret,1);
 8015e7e:	f107 030e 	add.w	r3, r7, #14
 8015e82:	2201      	movs	r2, #1
 8015e84:	4619      	mov	r1, r3
 8015e86:	2003      	movs	r0, #3
 8015e88:	f7f0 fd86 	bl	8006998 <TCA9555_ReadRegister>
		uint8_t INT_IMU2 =  (ret >> 7) & 0b1;
 8015e8c:	7bbb      	ldrb	r3, [r7, #14]
 8015e8e:	09db      	lsrs	r3, r3, #7
 8015e90:	73fb      	strb	r3, [r7, #15]
		// Prendre decision
		if (INT_IMU2==1){
 8015e92:	7bfb      	ldrb	r3, [r7, #15]
 8015e94:	2b01      	cmp	r3, #1
 8015e96:	d109      	bne.n	8015eac <changeMode_run+0x44>
			workMode = workMode ==0 ? 1 : 0;
 8015e98:	4b14      	ldr	r3, [pc, #80]	@ (8015eec <changeMode_run+0x84>)
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	bf0c      	ite	eq
 8015ea0:	2301      	moveq	r3, #1
 8015ea2:	2300      	movne	r3, #0
 8015ea4:	b2db      	uxtb	r3, r3
 8015ea6:	461a      	mov	r2, r3
 8015ea8:	4b10      	ldr	r3, [pc, #64]	@ (8015eec <changeMode_run+0x84>)
 8015eaa:	601a      	str	r2, [r3, #0]
		}
		if (workMode){
 8015eac:	4b0f      	ldr	r3, [pc, #60]	@ (8015eec <changeMode_run+0x84>)
 8015eae:	681b      	ldr	r3, [r3, #0]
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d008      	beq.n	8015ec6 <changeMode_run+0x5e>
			LP5812_WriteRegister(0x044,125);
 8015eb4:	217d      	movs	r1, #125	@ 0x7d
 8015eb6:	2044      	movs	r0, #68	@ 0x44
 8015eb8:	f7f0 fccc 	bl	8006854 <LP5812_WriteRegister>
			LP5812_WriteRegister(0x049,0);
 8015ebc:	2100      	movs	r1, #0
 8015ebe:	2049      	movs	r0, #73	@ 0x49
 8015ec0:	f7f0 fcc8 	bl	8006854 <LP5812_WriteRegister>
 8015ec4:	e007      	b.n	8015ed6 <changeMode_run+0x6e>
		}
		else{
			LP5812_WriteRegister(0x049,125);
 8015ec6:	217d      	movs	r1, #125	@ 0x7d
 8015ec8:	2049      	movs	r0, #73	@ 0x49
 8015eca:	f7f0 fcc3 	bl	8006854 <LP5812_WriteRegister>
			LP5812_WriteRegister(0x044,0);
 8015ece:	2100      	movs	r1, #0
 8015ed0:	2044      	movs	r0, #68	@ 0x44
 8015ed2:	f7f0 fcbf 	bl	8006854 <LP5812_WriteRegister>
		}
		uint8_t retADXL=0;
 8015ed6:	2300      	movs	r3, #0
 8015ed8:	737b      	strb	r3, [r7, #13]
		ADXL343_ReadRegister(0x30,&retADXL,1);
 8015eda:	f107 030d 	add.w	r3, r7, #13
 8015ede:	2201      	movs	r2, #1
 8015ee0:	4619      	mov	r1, r3
 8015ee2:	2030      	movs	r0, #48	@ 0x30
 8015ee4:	f7f0 fbbc 	bl	8006660 <ADXL343_ReadRegister>
	for(;;){
 8015ee8:	e7c2      	b.n	8015e70 <changeMode_run+0x8>
 8015eea:	bf00      	nop
 8015eec:	20005ab8 	.word	0x20005ab8

08015ef0 <shell_init>:
int isStarted = 0;
int isADC_cplt =0;
uint8_t PWMLed = 255;


void shell_init(void) {
 8015ef0:	b580      	push	{r7, lr}
 8015ef2:	af00      	add	r7, sp, #0
	memset(argv, 0, MAX_ARGS * sizeof(char*));
 8015ef4:	2220      	movs	r2, #32
 8015ef6:	2100      	movs	r1, #0
 8015ef8:	481c      	ldr	r0, [pc, #112]	@ (8015f6c <shell_init+0x7c>)
 8015efa:	f000 ff93 	bl	8016e24 <memset>
	memset(cmdBuffer, 0, CMD_BUFFER_SIZE * sizeof(char));
 8015efe:	2240      	movs	r2, #64	@ 0x40
 8015f00:	2100      	movs	r1, #0
 8015f02:	481b      	ldr	r0, [pc, #108]	@ (8015f70 <shell_init+0x80>)
 8015f04:	f000 ff8e 	bl	8016e24 <memset>
	memset(uartRxBuffer, 0, UART_RX_BUFFER_SIZE * sizeof(char));
 8015f08:	4b1a      	ldr	r3, [pc, #104]	@ (8015f74 <shell_init+0x84>)
 8015f0a:	2200      	movs	r2, #0
 8015f0c:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer, 0, UART_TX_BUFFER_SIZE * sizeof(char));
 8015f0e:	2240      	movs	r2, #64	@ 0x40
 8015f10:	2100      	movs	r1, #0
 8015f12:	4819      	ldr	r0, [pc, #100]	@ (8015f78 <shell_init+0x88>)
 8015f14:	f000 ff86 	bl	8016e24 <memset>
	sem_uart_read = xSemaphoreCreateBinary();
 8015f18:	2203      	movs	r2, #3
 8015f1a:	2100      	movs	r1, #0
 8015f1c:	2001      	movs	r0, #1
 8015f1e:	f7fc fd9b 	bl	8012a58 <xQueueGenericCreate>
 8015f22:	4603      	mov	r3, r0
 8015f24:	4a15      	ldr	r2, [pc, #84]	@ (8015f7c <shell_init+0x8c>)
 8015f26:	6013      	str	r3, [r2, #0]
	sem_uart_read == NULL ? Error_Handler() : (void) 0;
 8015f28:	4b14      	ldr	r3, [pc, #80]	@ (8015f7c <shell_init+0x8c>)
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d101      	bne.n	8015f34 <shell_init+0x44>
 8015f30:	f7ee fffa 	bl	8004f28 <Error_Handler>

	HAL_UART_Transmit(&UART_DEVICE, started, strlen((char*) started),
 8015f34:	4812      	ldr	r0, [pc, #72]	@ (8015f80 <shell_init+0x90>)
 8015f36:	f7ed fcfd 	bl	8003934 <strlen>
 8015f3a:	4603      	mov	r3, r0
 8015f3c:	b29a      	uxth	r2, r3
 8015f3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015f42:	490f      	ldr	r1, [pc, #60]	@ (8015f80 <shell_init+0x90>)
 8015f44:	480f      	ldr	r0, [pc, #60]	@ (8015f84 <shell_init+0x94>)
 8015f46:	f7f7 f97b 	bl	800d240 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
	HAL_UART_Transmit(&UART_DEVICE, prompt, strlen((char*) prompt),
 8015f4a:	480f      	ldr	r0, [pc, #60]	@ (8015f88 <shell_init+0x98>)
 8015f4c:	f7ed fcf2 	bl	8003934 <strlen>
 8015f50:	4603      	mov	r3, r0
 8015f52:	b29a      	uxth	r2, r3
 8015f54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015f58:	490b      	ldr	r1, [pc, #44]	@ (8015f88 <shell_init+0x98>)
 8015f5a:	480a      	ldr	r0, [pc, #40]	@ (8015f84 <shell_init+0x94>)
 8015f5c:	f7f7 f970 	bl	800d240 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
	subfunct_start(0);
 8015f60:	2000      	movs	r0, #0
 8015f62:	f000 f947 	bl	80161f4 <subfunct_start>
}
 8015f66:	bf00      	nop
 8015f68:	bd80      	pop	{r7, pc}
 8015f6a:	bf00      	nop
 8015f6c:	20005b48 	.word	0x20005b48
 8015f70:	20005b04 	.word	0x20005b04
 8015f74:	20005abc 	.word	0x20005abc
 8015f78:	20005ac0 	.word	0x20005ac0
 8015f7c:	20005ab4 	.word	0x20005ab4
 8015f80:	20000210 	.word	0x20000210
 8015f84:	200008ec 	.word	0x200008ec
 8015f88:	20000294 	.word	0x20000294

08015f8c <shell_run>:

void shell_run(void*) {
 8015f8c:	b580      	push	{r7, lr}
 8015f8e:	b084      	sub	sp, #16
 8015f90:	af00      	add	r7, sp, #0
 8015f92:	6078      	str	r0, [r7, #4]
	int reading = 0;
 8015f94:	2300      	movs	r3, #0
 8015f96:	60fb      	str	r3, [r7, #12]
	for (;;) {
		reading = 1;
 8015f98:	2301      	movs	r3, #1
 8015f9a:	60fb      	str	r3, [r7, #12]
		idx_cmd = 0;
 8015f9c:	4b5d      	ldr	r3, [pc, #372]	@ (8016114 <shell_run+0x188>)
 8015f9e:	2200      	movs	r2, #0
 8015fa0:	601a      	str	r2, [r3, #0]
		while (reading) {
 8015fa2:	e070      	b.n	8016086 <shell_run+0xfa>
			HAL_UART_Receive_IT(&UART_DEVICE, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8015fa4:	2201      	movs	r2, #1
 8015fa6:	495c      	ldr	r1, [pc, #368]	@ (8016118 <shell_run+0x18c>)
 8015fa8:	485c      	ldr	r0, [pc, #368]	@ (801611c <shell_run+0x190>)
 8015faa:	f7f7 f9d7 	bl	800d35c <HAL_UART_Receive_IT>
			xSemaphoreTake(sem_uart_read, portMAX_DELAY)!=pdPASS ? Error_Handler():(void)0;
 8015fae:	4b5c      	ldr	r3, [pc, #368]	@ (8016120 <shell_run+0x194>)
 8015fb0:	681b      	ldr	r3, [r3, #0]
 8015fb2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8015fb6:	4618      	mov	r0, r3
 8015fb8:	f7fd f8ba 	bl	8013130 <xQueueSemaphoreTake>
 8015fbc:	4603      	mov	r3, r0
 8015fbe:	2b01      	cmp	r3, #1
 8015fc0:	d001      	beq.n	8015fc6 <shell_run+0x3a>
 8015fc2:	f7ee ffb1 	bl	8004f28 <Error_Handler>

			switch (uartRxBuffer[0]) {
 8015fc6:	4b54      	ldr	r3, [pc, #336]	@ (8016118 <shell_run+0x18c>)
 8015fc8:	781b      	ldrb	r3, [r3, #0]
 8015fca:	2b7f      	cmp	r3, #127	@ 0x7f
 8015fcc:	d035      	beq.n	801603a <shell_run+0xae>
 8015fce:	2b7f      	cmp	r3, #127	@ 0x7f
 8015fd0:	dc47      	bgt.n	8016062 <shell_run+0xd6>
 8015fd2:	2b08      	cmp	r3, #8
 8015fd4:	d031      	beq.n	801603a <shell_run+0xae>
 8015fd6:	2b0d      	cmp	r3, #13
 8015fd8:	d143      	bne.n	8016062 <shell_run+0xd6>
			case ASCII_CR: // Nouvelle ligne, instruction à traiter
				HAL_UART_Transmit(&UART_DEVICE, newline, sizeof(newline),
 8015fda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015fde:	2203      	movs	r2, #3
 8015fe0:	4950      	ldr	r1, [pc, #320]	@ (8016124 <shell_run+0x198>)
 8015fe2:	484e      	ldr	r0, [pc, #312]	@ (801611c <shell_run+0x190>)
 8015fe4:	f7f7 f92c 	bl	800d240 <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				//cmdBuffer[idx_cmd] = '\0';
				//On copie la commande dans l'historique
				//strcpy(cmdHistory[cmdHistory_index_save % CMD_HISTORY_SIZE], cmdBuffer);
				//cmdHistory_index_save++;
				argc = 0;
 8015fe8:	4b4f      	ldr	r3, [pc, #316]	@ (8016128 <shell_run+0x19c>)
 8015fea:	2200      	movs	r2, #0
 8015fec:	601a      	str	r2, [r3, #0]
				token = strtok(cmdBuffer, " ");
 8015fee:	494f      	ldr	r1, [pc, #316]	@ (801612c <shell_run+0x1a0>)
 8015ff0:	484f      	ldr	r0, [pc, #316]	@ (8016130 <shell_run+0x1a4>)
 8015ff2:	f000 febb 	bl	8016d6c <strtok>
 8015ff6:	4603      	mov	r3, r0
 8015ff8:	4a4e      	ldr	r2, [pc, #312]	@ (8016134 <shell_run+0x1a8>)
 8015ffa:	6013      	str	r3, [r2, #0]
				while (token != NULL) {
 8015ffc:	e010      	b.n	8016020 <shell_run+0x94>
					argv[argc++] = token;
 8015ffe:	4b4a      	ldr	r3, [pc, #296]	@ (8016128 <shell_run+0x19c>)
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	1c5a      	adds	r2, r3, #1
 8016004:	4948      	ldr	r1, [pc, #288]	@ (8016128 <shell_run+0x19c>)
 8016006:	600a      	str	r2, [r1, #0]
 8016008:	4a4a      	ldr	r2, [pc, #296]	@ (8016134 <shell_run+0x1a8>)
 801600a:	6812      	ldr	r2, [r2, #0]
 801600c:	494a      	ldr	r1, [pc, #296]	@ (8016138 <shell_run+0x1ac>)
 801600e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					token = strtok(NULL, " ");
 8016012:	4946      	ldr	r1, [pc, #280]	@ (801612c <shell_run+0x1a0>)
 8016014:	2000      	movs	r0, #0
 8016016:	f000 fea9 	bl	8016d6c <strtok>
 801601a:	4603      	mov	r3, r0
 801601c:	4a45      	ldr	r2, [pc, #276]	@ (8016134 <shell_run+0x1a8>)
 801601e:	6013      	str	r3, [r2, #0]
				while (token != NULL) {
 8016020:	4b44      	ldr	r3, [pc, #272]	@ (8016134 <shell_run+0x1a8>)
 8016022:	681b      	ldr	r3, [r3, #0]
 8016024:	2b00      	cmp	r3, #0
 8016026:	d1ea      	bne.n	8015ffe <shell_run+0x72>
				}
				idx_cmd = 0;
 8016028:	4b3a      	ldr	r3, [pc, #232]	@ (8016114 <shell_run+0x188>)
 801602a:	2200      	movs	r2, #0
 801602c:	601a      	str	r2, [r3, #0]
				reading = 0;        //exit read loop
 801602e:	2300      	movs	r3, #0
 8016030:	60fb      	str	r3, [r7, #12]
				newCmdReady = 1;
 8016032:	4b42      	ldr	r3, [pc, #264]	@ (801613c <shell_run+0x1b0>)
 8016034:	2201      	movs	r2, #1
 8016036:	601a      	str	r2, [r3, #0]
				break;
 8016038:	e025      	b.n	8016086 <shell_run+0xfa>
			case ASCII_BACK:
			case ASCII_BACK_BIS: // Suppression du dernier caractère
				if (idx_cmd == 0) {
 801603a:	4b36      	ldr	r3, [pc, #216]	@ (8016114 <shell_run+0x188>)
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	2b00      	cmp	r3, #0
 8016040:	d020      	beq.n	8016084 <shell_run+0xf8>
					break;
				}
				cmdBuffer[idx_cmd--] = '\0';
 8016042:	4b34      	ldr	r3, [pc, #208]	@ (8016114 <shell_run+0x188>)
 8016044:	681b      	ldr	r3, [r3, #0]
 8016046:	1e5a      	subs	r2, r3, #1
 8016048:	4932      	ldr	r1, [pc, #200]	@ (8016114 <shell_run+0x188>)
 801604a:	600a      	str	r2, [r1, #0]
 801604c:	4a38      	ldr	r2, [pc, #224]	@ (8016130 <shell_run+0x1a4>)
 801604e:	2100      	movs	r1, #0
 8016050:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit(&UART_DEVICE, backspace, sizeof(backspace),
 8016052:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016056:	2204      	movs	r2, #4
 8016058:	4939      	ldr	r1, [pc, #228]	@ (8016140 <shell_run+0x1b4>)
 801605a:	4830      	ldr	r0, [pc, #192]	@ (801611c <shell_run+0x190>)
 801605c:	f7f7 f8f0 	bl	800d240 <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				break;
 8016060:	e011      	b.n	8016086 <shell_run+0xfa>
			default:
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8016062:	4b2c      	ldr	r3, [pc, #176]	@ (8016114 <shell_run+0x188>)
 8016064:	681b      	ldr	r3, [r3, #0]
 8016066:	1c5a      	adds	r2, r3, #1
 8016068:	492a      	ldr	r1, [pc, #168]	@ (8016114 <shell_run+0x188>)
 801606a:	600a      	str	r2, [r1, #0]
 801606c:	4a2a      	ldr	r2, [pc, #168]	@ (8016118 <shell_run+0x18c>)
 801606e:	7811      	ldrb	r1, [r2, #0]
 8016070:	4a2f      	ldr	r2, [pc, #188]	@ (8016130 <shell_run+0x1a4>)
 8016072:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit(&UART_DEVICE, uartRxBuffer,
 8016074:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016078:	2201      	movs	r2, #1
 801607a:	4927      	ldr	r1, [pc, #156]	@ (8016118 <shell_run+0x18c>)
 801607c:	4827      	ldr	r0, [pc, #156]	@ (801611c <shell_run+0x190>)
 801607e:	f7f7 f8df 	bl	800d240 <HAL_UART_Transmit>
 8016082:	e000      	b.n	8016086 <shell_run+0xfa>
					break;
 8016084:	bf00      	nop
		while (reading) {
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	2b00      	cmp	r3, #0
 801608a:	d18b      	bne.n	8015fa4 <shell_run+0x18>
						UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
			}
		}
		if (newCmdReady) {
 801608c:	4b2b      	ldr	r3, [pc, #172]	@ (801613c <shell_run+0x1b0>)
 801608e:	681b      	ldr	r3, [r3, #0]
 8016090:	2b00      	cmp	r3, #0
 8016092:	d081      	beq.n	8015f98 <shell_run+0xc>
			for (int i = 0; i < sizeof(mapping) / sizeof(mapping[0]); i++) {
 8016094:	2300      	movs	r3, #0
 8016096:	60bb      	str	r3, [r7, #8]
 8016098:	e01b      	b.n	80160d2 <shell_run+0x146>
				if (strcmp(argv[0], mapping[i].name) == 0) {
 801609a:	4b27      	ldr	r3, [pc, #156]	@ (8016138 <shell_run+0x1ac>)
 801609c:	681a      	ldr	r2, [r3, #0]
 801609e:	4929      	ldr	r1, [pc, #164]	@ (8016144 <shell_run+0x1b8>)
 80160a0:	68bb      	ldr	r3, [r7, #8]
 80160a2:	011b      	lsls	r3, r3, #4
 80160a4:	440b      	add	r3, r1
 80160a6:	681b      	ldr	r3, [r3, #0]
 80160a8:	4619      	mov	r1, r3
 80160aa:	4610      	mov	r0, r2
 80160ac:	f7ed fc4a 	bl	8003944 <strcmp>
 80160b0:	4603      	mov	r3, r0
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d10a      	bne.n	80160cc <shell_run+0x140>
					isFind = 1;
 80160b6:	4b24      	ldr	r3, [pc, #144]	@ (8016148 <shell_run+0x1bc>)
 80160b8:	2201      	movs	r2, #1
 80160ba:	601a      	str	r2, [r3, #0]
					mapping[i].funct(argv);
 80160bc:	4a21      	ldr	r2, [pc, #132]	@ (8016144 <shell_run+0x1b8>)
 80160be:	68bb      	ldr	r3, [r7, #8]
 80160c0:	011b      	lsls	r3, r3, #4
 80160c2:	4413      	add	r3, r2
 80160c4:	330c      	adds	r3, #12
 80160c6:	681b      	ldr	r3, [r3, #0]
 80160c8:	481b      	ldr	r0, [pc, #108]	@ (8016138 <shell_run+0x1ac>)
 80160ca:	4798      	blx	r3
			for (int i = 0; i < sizeof(mapping) / sizeof(mapping[0]); i++) {
 80160cc:	68bb      	ldr	r3, [r7, #8]
 80160ce:	3301      	adds	r3, #1
 80160d0:	60bb      	str	r3, [r7, #8]
 80160d2:	68bb      	ldr	r3, [r7, #8]
 80160d4:	2b0b      	cmp	r3, #11
 80160d6:	d9e0      	bls.n	801609a <shell_run+0x10e>
				}
			}
			if (!isFind) {
 80160d8:	4b1b      	ldr	r3, [pc, #108]	@ (8016148 <shell_run+0x1bc>)
 80160da:	681b      	ldr	r3, [r3, #0]
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d106      	bne.n	80160ee <shell_run+0x162>
				HAL_UART_Transmit(&UART_DEVICE, cmdNotFound,
 80160e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80160e4:	2214      	movs	r2, #20
 80160e6:	4919      	ldr	r1, [pc, #100]	@ (801614c <shell_run+0x1c0>)
 80160e8:	480c      	ldr	r0, [pc, #48]	@ (801611c <shell_run+0x190>)
 80160ea:	f7f7 f8a9 	bl	800d240 <HAL_UART_Transmit>
						sizeof(cmdNotFound), HAL_MAX_DELAY);
			}

			HAL_UART_Transmit(&UART_DEVICE, prompt, sizeof(prompt),
 80160ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80160f2:	2212      	movs	r2, #18
 80160f4:	4916      	ldr	r1, [pc, #88]	@ (8016150 <shell_run+0x1c4>)
 80160f6:	4809      	ldr	r0, [pc, #36]	@ (801611c <shell_run+0x190>)
 80160f8:	f7f7 f8a2 	bl	800d240 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
			newCmdReady = 0;
 80160fc:	4b0f      	ldr	r3, [pc, #60]	@ (801613c <shell_run+0x1b0>)
 80160fe:	2200      	movs	r2, #0
 8016100:	601a      	str	r2, [r3, #0]
			isFind = 0;
 8016102:	4b11      	ldr	r3, [pc, #68]	@ (8016148 <shell_run+0x1bc>)
 8016104:	2200      	movs	r2, #0
 8016106:	601a      	str	r2, [r3, #0]
			memset(cmdBuffer, 0, MAX_ARGS * sizeof(char*));
 8016108:	2220      	movs	r2, #32
 801610a:	2100      	movs	r1, #0
 801610c:	4808      	ldr	r0, [pc, #32]	@ (8016130 <shell_run+0x1a4>)
 801610e:	f000 fe89 	bl	8016e24 <memset>
		reading = 1;
 8016112:	e741      	b.n	8015f98 <shell_run+0xc>
 8016114:	20005b44 	.word	0x20005b44
 8016118:	20005abc 	.word	0x20005abc
 801611c:	200008ec 	.word	0x200008ec
 8016120:	20005ab4 	.word	0x20005ab4
 8016124:	20000278 	.word	0x20000278
 8016128:	20005b68 	.word	0x20005b68
 801612c:	0801853c 	.word	0x0801853c
 8016130:	20005b04 	.word	0x20005b04
 8016134:	20005b6c 	.word	0x20005b6c
 8016138:	20005b48 	.word	0x20005b48
 801613c:	20005b70 	.word	0x20005b70
 8016140:	2000027c 	.word	0x2000027c
 8016144:	20000150 	.word	0x20000150
 8016148:	20005b7c 	.word	0x20005b7c
 801614c:	20000280 	.word	0x20000280
 8016150:	20000294 	.word	0x20000294

08016154 <subfunct_help>:

/*
 * ***********************************************************************************************
 * 										SUBFUNCTIONS
 *************************************************************************************************/
void subfunct_help(char **argv) {
 8016154:	b580      	push	{r7, lr}
 8016156:	b088      	sub	sp, #32
 8016158:	af04      	add	r7, sp, #16
 801615a:	6078      	str	r0, [r7, #4]
	printf("%s%-15s | %-30s | %-50s\r\n%s%s", GRAS, "Fonctions", "Params",
 801615c:	4b1a      	ldr	r3, [pc, #104]	@ (80161c8 <subfunct_help+0x74>)
 801615e:	9302      	str	r3, [sp, #8]
 8016160:	4b1a      	ldr	r3, [pc, #104]	@ (80161cc <subfunct_help+0x78>)
 8016162:	9301      	str	r3, [sp, #4]
 8016164:	4b1a      	ldr	r3, [pc, #104]	@ (80161d0 <subfunct_help+0x7c>)
 8016166:	9300      	str	r3, [sp, #0]
 8016168:	4b1a      	ldr	r3, [pc, #104]	@ (80161d4 <subfunct_help+0x80>)
 801616a:	4a1b      	ldr	r2, [pc, #108]	@ (80161d8 <subfunct_help+0x84>)
 801616c:	491b      	ldr	r1, [pc, #108]	@ (80161dc <subfunct_help+0x88>)
 801616e:	481c      	ldr	r0, [pc, #112]	@ (80161e0 <subfunct_help+0x8c>)
 8016170:	f000 fd8c 	bl	8016c8c <iprintf>
			"Description", D_RESET, separator);
	for (int i = 0; i < sizeof(mapping) / sizeof(mapping[0]); i++) {
 8016174:	2300      	movs	r3, #0
 8016176:	60fb      	str	r3, [r7, #12]
 8016178:	e01b      	b.n	80161b2 <subfunct_help+0x5e>
		printf("%s%-15s%s | %-30s | %-50s\r\n", FUNCTION, mapping[i].name,
 801617a:	4a1a      	ldr	r2, [pc, #104]	@ (80161e4 <subfunct_help+0x90>)
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	011b      	lsls	r3, r3, #4
 8016180:	4413      	add	r3, r2
 8016182:	6819      	ldr	r1, [r3, #0]
 8016184:	4a17      	ldr	r2, [pc, #92]	@ (80161e4 <subfunct_help+0x90>)
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	011b      	lsls	r3, r3, #4
 801618a:	4413      	add	r3, r2
 801618c:	3308      	adds	r3, #8
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	4814      	ldr	r0, [pc, #80]	@ (80161e4 <subfunct_help+0x90>)
 8016192:	68fa      	ldr	r2, [r7, #12]
 8016194:	0112      	lsls	r2, r2, #4
 8016196:	4402      	add	r2, r0
 8016198:	3204      	adds	r2, #4
 801619a:	6812      	ldr	r2, [r2, #0]
 801619c:	9201      	str	r2, [sp, #4]
 801619e:	9300      	str	r3, [sp, #0]
 80161a0:	4b0a      	ldr	r3, [pc, #40]	@ (80161cc <subfunct_help+0x78>)
 80161a2:	460a      	mov	r2, r1
 80161a4:	4910      	ldr	r1, [pc, #64]	@ (80161e8 <subfunct_help+0x94>)
 80161a6:	4811      	ldr	r0, [pc, #68]	@ (80161ec <subfunct_help+0x98>)
 80161a8:	f000 fd70 	bl	8016c8c <iprintf>
	for (int i = 0; i < sizeof(mapping) / sizeof(mapping[0]); i++) {
 80161ac:	68fb      	ldr	r3, [r7, #12]
 80161ae:	3301      	adds	r3, #1
 80161b0:	60fb      	str	r3, [r7, #12]
 80161b2:	68fb      	ldr	r3, [r7, #12]
 80161b4:	2b0b      	cmp	r3, #11
 80161b6:	d9e0      	bls.n	801617a <subfunct_help+0x26>
				D_RESET, mapping[i].params, mapping[i].resume);
	}
	printf(separator);
 80161b8:	480d      	ldr	r0, [pc, #52]	@ (80161f0 <subfunct_help+0x9c>)
 80161ba:	f000 fdcf 	bl	8016d5c <puts>
}
 80161be:	bf00      	nop
 80161c0:	3710      	adds	r7, #16
 80161c2:	46bd      	mov	sp, r7
 80161c4:	bd80      	pop	{r7, pc}
 80161c6:	bf00      	nop
 80161c8:	0801857c 	.word	0x0801857c
 80161cc:	080185cc 	.word	0x080185cc
 80161d0:	080185d4 	.word	0x080185d4
 80161d4:	08018540 	.word	0x08018540
 80161d8:	08018548 	.word	0x08018548
 80161dc:	08018554 	.word	0x08018554
 80161e0:	0801855c 	.word	0x0801855c
 80161e4:	20000150 	.word	0x20000150
 80161e8:	080185e0 	.word	0x080185e0
 80161ec:	080185e8 	.word	0x080185e8
 80161f0:	08018604 	.word	0x08018604

080161f4 <subfunct_start>:
void subfunct_start(char **argv) {
 80161f4:	b580      	push	{r7, lr}
 80161f6:	b082      	sub	sp, #8
 80161f8:	af00      	add	r7, sp, #0
 80161fa:	6078      	str	r0, [r7, #4]
	debug(START,"STARTING COMPONENT");
 80161fc:	4927      	ldr	r1, [pc, #156]	@ (801629c <subfunct_start+0xa8>)
 80161fe:	4828      	ldr	r0, [pc, #160]	@ (80162a0 <subfunct_start+0xac>)
 8016200:	f000 fb34 	bl	801686c <debug>

	LP5812_WriteRegister(0x049,0);
 8016204:	2100      	movs	r1, #0
 8016206:	2049      	movs	r0, #73	@ 0x49
 8016208:	f7f0 fb24 	bl	8006854 <LP5812_WriteRegister>
	LP5812_WriteRegister(0x044,0);
 801620c:	2100      	movs	r1, #0
 801620e:	2044      	movs	r0, #68	@ 0x44
 8016210:	f7f0 fb20 	bl	8006854 <LP5812_WriteRegister>
	HAL_TIM_Base_Start_IT(&htim15) == HAL_OK ?
 8016214:	4823      	ldr	r0, [pc, #140]	@ (80162a4 <subfunct_start+0xb0>)
 8016216:	f7f5 fa81 	bl	800b71c <HAL_TIM_Base_Start_IT>
 801621a:	4603      	mov	r3, r0
			debug(START, "TIMER 15 - CALCUL IMU") : (void) 0;
 801621c:	2b00      	cmp	r3, #0
 801621e:	d103      	bne.n	8016228 <subfunct_start+0x34>
 8016220:	4921      	ldr	r1, [pc, #132]	@ (80162a8 <subfunct_start+0xb4>)
 8016222:	481f      	ldr	r0, [pc, #124]	@ (80162a0 <subfunct_start+0xac>)
 8016224:	f000 fb22 	bl	801686c <debug>
	HAL_TIM_Base_Start(&htim2) == HAL_OK ?
 8016228:	4820      	ldr	r0, [pc, #128]	@ (80162ac <subfunct_start+0xb8>)
 801622a:	f7f5 f9ed 	bl	800b608 <HAL_TIM_Base_Start>
 801622e:	4603      	mov	r3, r0
			debug(START, "TIMER 2") : debug(D_ERROR, "TIMER 2");
 8016230:	2b00      	cmp	r3, #0
 8016232:	d104      	bne.n	801623e <subfunct_start+0x4a>
 8016234:	491e      	ldr	r1, [pc, #120]	@ (80162b0 <subfunct_start+0xbc>)
 8016236:	481a      	ldr	r0, [pc, #104]	@ (80162a0 <subfunct_start+0xac>)
 8016238:	f000 fb18 	bl	801686c <debug>
 801623c:	e003      	b.n	8016246 <subfunct_start+0x52>
 801623e:	491c      	ldr	r1, [pc, #112]	@ (80162b0 <subfunct_start+0xbc>)
 8016240:	481c      	ldr	r0, [pc, #112]	@ (80162b4 <subfunct_start+0xc0>)
 8016242:	f000 fb13 	bl	801686c <debug>
	HAL_TIM_Base_Start(&htim3) == HAL_OK ?
 8016246:	481c      	ldr	r0, [pc, #112]	@ (80162b8 <subfunct_start+0xc4>)
 8016248:	f7f5 f9de 	bl	800b608 <HAL_TIM_Base_Start>
 801624c:	4603      	mov	r3, r0
			debug(START, "TIMER 3") : debug(D_ERROR, "TIMER 3");
 801624e:	2b00      	cmp	r3, #0
 8016250:	d104      	bne.n	801625c <subfunct_start+0x68>
 8016252:	491a      	ldr	r1, [pc, #104]	@ (80162bc <subfunct_start+0xc8>)
 8016254:	4812      	ldr	r0, [pc, #72]	@ (80162a0 <subfunct_start+0xac>)
 8016256:	f000 fb09 	bl	801686c <debug>
 801625a:	e003      	b.n	8016264 <subfunct_start+0x70>
 801625c:	4917      	ldr	r1, [pc, #92]	@ (80162bc <subfunct_start+0xc8>)
 801625e:	4815      	ldr	r0, [pc, #84]	@ (80162b4 <subfunct_start+0xc0>)
 8016260:	f000 fb04 	bl	801686c <debug>
	HAL_ADCEx_Calibration_Start(&hadc2,ADC_SINGLE_ENDED) == HAL_OK ?
 8016264:	217f      	movs	r1, #127	@ 0x7f
 8016266:	4816      	ldr	r0, [pc, #88]	@ (80162c0 <subfunct_start+0xcc>)
 8016268:	f7f2 fb6a 	bl	8008940 <HAL_ADCEx_Calibration_Start>
 801626c:	4603      	mov	r3, r0
			debug(START, "ADC2 CALIBRATION") : debug(D_ERROR, "ADC2 CALIBRATION");
 801626e:	2b00      	cmp	r3, #0
 8016270:	d104      	bne.n	801627c <subfunct_start+0x88>
 8016272:	4914      	ldr	r1, [pc, #80]	@ (80162c4 <subfunct_start+0xd0>)
 8016274:	480a      	ldr	r0, [pc, #40]	@ (80162a0 <subfunct_start+0xac>)
 8016276:	f000 faf9 	bl	801686c <debug>
 801627a:	e003      	b.n	8016284 <subfunct_start+0x90>
 801627c:	4911      	ldr	r1, [pc, #68]	@ (80162c4 <subfunct_start+0xd0>)
 801627e:	480d      	ldr	r0, [pc, #52]	@ (80162b4 <subfunct_start+0xc0>)
 8016280:	f000 faf4 	bl	801686c <debug>
	TCA9555_init();
 8016284:	f7f0 fb12 	bl	80068ac <TCA9555_init>
	LP5812_Init();
 8016288:	f7f0 fa18 	bl	80066bc <LP5812_Init>
	ADXL343_init();
 801628c:	f7ef fed0 	bl	8006030 <ADXL343_init>
	ZXB5210_init();
 8016290:	f7f0 fbb0 	bl	80069f4 <ZXB5210_init>

	return;
 8016294:	bf00      	nop
}
 8016296:	3708      	adds	r7, #8
 8016298:	46bd      	mov	sp, r7
 801629a:	bd80      	pop	{r7, pc}
 801629c:	08018650 	.word	0x08018650
 80162a0:	08018664 	.word	0x08018664
 80162a4:	20000820 	.word	0x20000820
 80162a8:	08018670 	.word	0x08018670
 80162ac:	200005bc 	.word	0x200005bc
 80162b0:	08018688 	.word	0x08018688
 80162b4:	08018690 	.word	0x08018690
 80162b8:	20000688 	.word	0x20000688
 80162bc:	0801869c 	.word	0x0801869c
 80162c0:	20000350 	.word	0x20000350
 80162c4:	080186a4 	.word	0x080186a4

080162c8 <subfunct_stop>:
void subfunct_stop(char **argv) {
 80162c8:	b580      	push	{r7, lr}
 80162ca:	b082      	sub	sp, #8
 80162cc:	af00      	add	r7, sp, #0
 80162ce:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop(&htim15) == HAL_OK ?
 80162d0:	481e      	ldr	r0, [pc, #120]	@ (801634c <subfunct_stop+0x84>)
 80162d2:	f7f5 f9fb 	bl	800b6cc <HAL_TIM_Base_Stop>
 80162d6:	4603      	mov	r3, r0
			debug(STOP, "TIMER 15 - CALCUL IMU") : (void) 0;
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d103      	bne.n	80162e4 <subfunct_stop+0x1c>
 80162dc:	491c      	ldr	r1, [pc, #112]	@ (8016350 <subfunct_stop+0x88>)
 80162de:	481d      	ldr	r0, [pc, #116]	@ (8016354 <subfunct_stop+0x8c>)
 80162e0:	f000 fac4 	bl	801686c <debug>
	HAL_TIM_Base_Stop(&htim2) == HAL_OK ?
 80162e4:	481c      	ldr	r0, [pc, #112]	@ (8016358 <subfunct_stop+0x90>)
 80162e6:	f7f5 f9f1 	bl	800b6cc <HAL_TIM_Base_Stop>
 80162ea:	4603      	mov	r3, r0
			debug(STOP, "TIMER 2") : debug(D_ERROR, "TIMER 2");
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d104      	bne.n	80162fa <subfunct_stop+0x32>
 80162f0:	491a      	ldr	r1, [pc, #104]	@ (801635c <subfunct_stop+0x94>)
 80162f2:	4818      	ldr	r0, [pc, #96]	@ (8016354 <subfunct_stop+0x8c>)
 80162f4:	f000 faba 	bl	801686c <debug>
 80162f8:	e003      	b.n	8016302 <subfunct_stop+0x3a>
 80162fa:	4918      	ldr	r1, [pc, #96]	@ (801635c <subfunct_stop+0x94>)
 80162fc:	4818      	ldr	r0, [pc, #96]	@ (8016360 <subfunct_stop+0x98>)
 80162fe:	f000 fab5 	bl	801686c <debug>
	HAL_TIM_Base_Stop(&htim3) == HAL_OK ?
 8016302:	4818      	ldr	r0, [pc, #96]	@ (8016364 <subfunct_stop+0x9c>)
 8016304:	f7f5 f9e2 	bl	800b6cc <HAL_TIM_Base_Stop>
 8016308:	4603      	mov	r3, r0
			debug(STOP, "TIMER 3") : debug(D_ERROR, "TIMER 3");
 801630a:	2b00      	cmp	r3, #0
 801630c:	d104      	bne.n	8016318 <subfunct_stop+0x50>
 801630e:	4916      	ldr	r1, [pc, #88]	@ (8016368 <subfunct_stop+0xa0>)
 8016310:	4810      	ldr	r0, [pc, #64]	@ (8016354 <subfunct_stop+0x8c>)
 8016312:	f000 faab 	bl	801686c <debug>
 8016316:	e003      	b.n	8016320 <subfunct_stop+0x58>
 8016318:	4913      	ldr	r1, [pc, #76]	@ (8016368 <subfunct_stop+0xa0>)
 801631a:	4811      	ldr	r0, [pc, #68]	@ (8016360 <subfunct_stop+0x98>)
 801631c:	f000 faa6 	bl	801686c <debug>
	HAL_ADC_Stop_DMA(&hadc2) == HAL_OK ?
 8016320:	4812      	ldr	r0, [pc, #72]	@ (801636c <subfunct_stop+0xa4>)
 8016322:	f7f1 fa21 	bl	8007768 <HAL_ADC_Stop_DMA>
 8016326:	4603      	mov	r3, r0
			debug(STOP, "ADC DMA") : debug(D_ERROR, "ADC2 DMA");
 8016328:	2b00      	cmp	r3, #0
 801632a:	d104      	bne.n	8016336 <subfunct_stop+0x6e>
 801632c:	4910      	ldr	r1, [pc, #64]	@ (8016370 <subfunct_stop+0xa8>)
 801632e:	4809      	ldr	r0, [pc, #36]	@ (8016354 <subfunct_stop+0x8c>)
 8016330:	f000 fa9c 	bl	801686c <debug>
 8016334:	e003      	b.n	801633e <subfunct_stop+0x76>
 8016336:	490f      	ldr	r1, [pc, #60]	@ (8016374 <subfunct_stop+0xac>)
 8016338:	4809      	ldr	r0, [pc, #36]	@ (8016360 <subfunct_stop+0x98>)
 801633a:	f000 fa97 	bl	801686c <debug>
	ZXB5210_deinit();
 801633e:	f7f0 fbef 	bl	8006b20 <ZXB5210_deinit>
	return;
 8016342:	bf00      	nop
}
 8016344:	3708      	adds	r7, #8
 8016346:	46bd      	mov	sp, r7
 8016348:	bd80      	pop	{r7, pc}
 801634a:	bf00      	nop
 801634c:	20000820 	.word	0x20000820
 8016350:	08018670 	.word	0x08018670
 8016354:	080186b8 	.word	0x080186b8
 8016358:	200005bc 	.word	0x200005bc
 801635c:	08018688 	.word	0x08018688
 8016360:	08018690 	.word	0x08018690
 8016364:	20000688 	.word	0x20000688
 8016368:	0801869c 	.word	0x0801869c
 801636c:	20000350 	.word	0x20000350
 8016370:	080186c4 	.word	0x080186c4
 8016374:	080186cc 	.word	0x080186cc

08016378 <subfunct_speed>:
void subfunct_speed(char **argv) {
 8016378:	b580      	push	{r7, lr}
 801637a:	b084      	sub	sp, #16
 801637c:	af00      	add	r7, sp, #0
 801637e:	6078      	str	r0, [r7, #4]
	/*
	 * int:MotorID 	int:speed
	 * ex:	speed 1 90
	 */
	MDriver_t* MDriver;
    if (argv[1] == NULL || argv[2] == NULL) {
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	3304      	adds	r3, #4
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	2b00      	cmp	r3, #0
 8016388:	d004      	beq.n	8016394 <subfunct_speed+0x1c>
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	3308      	adds	r3, #8
 801638e:	681b      	ldr	r3, [r3, #0]
 8016390:	2b00      	cmp	r3, #0
 8016392:	d104      	bne.n	801639e <subfunct_speed+0x26>
    	debug(INFORMATION,"SPEED - ARGUMENTS NEEDED");
 8016394:	491a      	ldr	r1, [pc, #104]	@ (8016400 <subfunct_speed+0x88>)
 8016396:	481b      	ldr	r0, [pc, #108]	@ (8016404 <subfunct_speed+0x8c>)
 8016398:	f000 fa68 	bl	801686c <debug>
        return;
 801639c:	e02c      	b.n	80163f8 <subfunct_speed+0x80>
    }
	uint8_t driver_id = (uint8_t) strtol(argv[1], NULL, 10); // Base 10
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	3304      	adds	r3, #4
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	220a      	movs	r2, #10
 80163a6:	2100      	movs	r1, #0
 80163a8:	4618      	mov	r0, r3
 80163aa:	f000 fc47 	bl	8016c3c <strtol>
 80163ae:	4603      	mov	r3, r0
 80163b0:	73fb      	strb	r3, [r7, #15]
	int8_t s_alpha = (int8_t) strtol(argv[2], NULL, 10); //Prends des valeurs entre -128 et 127
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	3308      	adds	r3, #8
 80163b6:	681b      	ldr	r3, [r3, #0]
 80163b8:	220a      	movs	r2, #10
 80163ba:	2100      	movs	r1, #0
 80163bc:	4618      	mov	r0, r3
 80163be:	f000 fc3d 	bl	8016c3c <strtol>
 80163c2:	4603      	mov	r3, r0
 80163c4:	73bb      	strb	r3, [r7, #14]

	MDriver = driver_id==1 ? &MDriver1 : &MDriver2;
 80163c6:	7bfb      	ldrb	r3, [r7, #15]
 80163c8:	2b01      	cmp	r3, #1
 80163ca:	d101      	bne.n	80163d0 <subfunct_speed+0x58>
 80163cc:	4b0e      	ldr	r3, [pc, #56]	@ (8016408 <subfunct_speed+0x90>)
 80163ce:	e000      	b.n	80163d2 <subfunct_speed+0x5a>
 80163d0:	4b0e      	ldr	r3, [pc, #56]	@ (801640c <subfunct_speed+0x94>)
 80163d2:	60bb      	str	r3, [r7, #8]
	s_alpha > 0 ? ZXB5210_speed_FWD(MDriver, (uint8_t)s_alpha) : ZXB5210_speed_REV(MDriver, (uint8_t)-s_alpha);
 80163d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80163d8:	2b00      	cmp	r3, #0
 80163da:	dd05      	ble.n	80163e8 <subfunct_speed+0x70>
 80163dc:	7bbb      	ldrb	r3, [r7, #14]
 80163de:	4619      	mov	r1, r3
 80163e0:	68b8      	ldr	r0, [r7, #8]
 80163e2:	f7f0 fbeb 	bl	8006bbc <ZXB5210_speed_FWD>

	return;
 80163e6:	e006      	b.n	80163f6 <subfunct_speed+0x7e>
	s_alpha > 0 ? ZXB5210_speed_FWD(MDriver, (uint8_t)s_alpha) : ZXB5210_speed_REV(MDriver, (uint8_t)-s_alpha);
 80163e8:	7bbb      	ldrb	r3, [r7, #14]
 80163ea:	425b      	negs	r3, r3
 80163ec:	b2db      	uxtb	r3, r3
 80163ee:	4619      	mov	r1, r3
 80163f0:	68b8      	ldr	r0, [r7, #8]
 80163f2:	f7f0 fc01 	bl	8006bf8 <ZXB5210_speed_REV>
	return;
 80163f6:	bf00      	nop
}
 80163f8:	3710      	adds	r7, #16
 80163fa:	46bd      	mov	sp, r7
 80163fc:	bd80      	pop	{r7, pc}
 80163fe:	bf00      	nop
 8016400:	080186d8 	.word	0x080186d8
 8016404:	080186f4 	.word	0x080186f4
 8016408:	20000a38 	.word	0x20000a38
 801640c:	20000a54 	.word	0x20000a54

08016410 <subfunct_Iasserv>:
void subfunct_Iasserv(char **argv) {
 8016410:	b580      	push	{r7, lr}
 8016412:	b082      	sub	sp, #8
 8016414:	af00      	add	r7, sp, #0
 8016416:	6078      	str	r0, [r7, #4]
	/** THIS DMA REQUEST IS SYNC WITH THE TIM15 EVENT **/

	HAL_ADC_Start_DMA(&hadc2,(uint32_t*)adc2_asserv_VAL,NUM_CHANNEL_ADC2) == HAL_OK ?
 8016418:	2202      	movs	r2, #2
 801641a:	490a      	ldr	r1, [pc, #40]	@ (8016444 <subfunct_Iasserv+0x34>)
 801641c:	480a      	ldr	r0, [pc, #40]	@ (8016448 <subfunct_Iasserv+0x38>)
 801641e:	f7f1 f8ef 	bl	8007600 <HAL_ADC_Start_DMA>
 8016422:	4603      	mov	r3, r0
			debug(START, "ADC2 DMA") : debug(D_ERROR, "ADC2 DMA");
 8016424:	2b00      	cmp	r3, #0
 8016426:	d104      	bne.n	8016432 <subfunct_Iasserv+0x22>
 8016428:	4908      	ldr	r1, [pc, #32]	@ (801644c <subfunct_Iasserv+0x3c>)
 801642a:	4809      	ldr	r0, [pc, #36]	@ (8016450 <subfunct_Iasserv+0x40>)
 801642c:	f000 fa1e 	bl	801686c <debug>
	return;
 8016430:	e004      	b.n	801643c <subfunct_Iasserv+0x2c>
			debug(START, "ADC2 DMA") : debug(D_ERROR, "ADC2 DMA");
 8016432:	4906      	ldr	r1, [pc, #24]	@ (801644c <subfunct_Iasserv+0x3c>)
 8016434:	4807      	ldr	r0, [pc, #28]	@ (8016454 <subfunct_Iasserv+0x44>)
 8016436:	f000 fa19 	bl	801686c <debug>
	return;
 801643a:	bf00      	nop
}
 801643c:	3708      	adds	r7, #8
 801643e:	46bd      	mov	sp, r7
 8016440:	bd80      	pop	{r7, pc}
 8016442:	bf00      	nop
 8016444:	20005b00 	.word	0x20005b00
 8016448:	20000350 	.word	0x20000350
 801644c:	080186cc 	.word	0x080186cc
 8016450:	08018664 	.word	0x08018664
 8016454:	08018690 	.word	0x08018690

08016458 <subfunct_setLed>:
void subfunct_setLed(char **argv) {
 8016458:	b580      	push	{r7, lr}
 801645a:	b084      	sub	sp, #16
 801645c:	af00      	add	r7, sp, #0
 801645e:	6078      	str	r0, [r7, #4]
	 * int: LedId	int: %PWM(0-255)
	 */

	//uint8_t unused = argv[0];
	//uint8_t LedID = (uint8_t) strtol(argv[1], NULL, 10); // Base 10
	uint8_t PWM = (uint8_t) strtol(argv[2], NULL, 10); // Base 10
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	3308      	adds	r3, #8
 8016464:	681b      	ldr	r3, [r3, #0]
 8016466:	220a      	movs	r2, #10
 8016468:	2100      	movs	r1, #0
 801646a:	4618      	mov	r0, r3
 801646c:	f000 fbe6 	bl	8016c3c <strtol>
 8016470:	4603      	mov	r3, r0
 8016472:	73fb      	strb	r3, [r7, #15]
	/* Set chip_en = 1 to enable the device*/
	LP5812_WriteRegister(0x000, 0x01) == HAL_OK ?
 8016474:	2101      	movs	r1, #1
 8016476:	2000      	movs	r0, #0
 8016478:	f7f0 f9ec 	bl	8006854 <LP5812_WriteRegister>
 801647c:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 801647e:	2b00      	cmp	r3, #0
 8016480:	d103      	bne.n	801648a <subfunct_setLed+0x32>
 8016482:	4877      	ldr	r0, [pc, #476]	@ (8016660 <subfunct_setLed+0x208>)
 8016484:	f000 fc02 	bl	8016c8c <iprintf>
 8016488:	e002      	b.n	8016490 <subfunct_setLed+0x38>
 801648a:	4876      	ldr	r0, [pc, #472]	@ (8016664 <subfunct_setLed+0x20c>)
 801648c:	f000 fbfe 	bl	8016c8c <iprintf>
	/* Set led_mode = 4h to configure the LED drive mode as direct drive mode*/
	LP5812_WriteRegister(0x002, 0x40) == HAL_OK ?
 8016490:	2140      	movs	r1, #64	@ 0x40
 8016492:	2002      	movs	r0, #2
 8016494:	f7f0 f9de 	bl	8006854 <LP5812_WriteRegister>
 8016498:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 801649a:	2b00      	cmp	r3, #0
 801649c:	d103      	bne.n	80164a6 <subfunct_setLed+0x4e>
 801649e:	4870      	ldr	r0, [pc, #448]	@ (8016660 <subfunct_setLed+0x208>)
 80164a0:	f000 fbf4 	bl	8016c8c <iprintf>
 80164a4:	e002      	b.n	80164ac <subfunct_setLed+0x54>
 80164a6:	486f      	ldr	r0, [pc, #444]	@ (8016664 <subfunct_setLed+0x20c>)
 80164a8:	f000 fbf0 	bl	8016c8c <iprintf>
	/* Send update command to complete configuration settings*/
	LP5812_WriteRegister(0x010, 0x55) == HAL_OK ?
 80164ac:	2155      	movs	r1, #85	@ 0x55
 80164ae:	2010      	movs	r0, #16
 80164b0:	f7f0 f9d0 	bl	8006854 <LP5812_WriteRegister>
 80164b4:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d103      	bne.n	80164c2 <subfunct_setLed+0x6a>
 80164ba:	4869      	ldr	r0, [pc, #420]	@ (8016660 <subfunct_setLed+0x208>)
 80164bc:	f000 fbe6 	bl	8016c8c <iprintf>
 80164c0:	e002      	b.n	80164c8 <subfunct_setLed+0x70>
 80164c2:	4868      	ldr	r0, [pc, #416]	@ (8016664 <subfunct_setLed+0x20c>)
 80164c4:	f000 fbe2 	bl	8016c8c <iprintf>

	/* Set duty cycle for LEDs*/
	PWMLed = PWM < 255 ? 255 : 0;
 80164c8:	7bfb      	ldrb	r3, [r7, #15]
 80164ca:	2bff      	cmp	r3, #255	@ 0xff
 80164cc:	d001      	beq.n	80164d2 <subfunct_setLed+0x7a>
 80164ce:	22ff      	movs	r2, #255	@ 0xff
 80164d0:	e000      	b.n	80164d4 <subfunct_setLed+0x7c>
 80164d2:	2200      	movs	r2, #0
 80164d4:	4b64      	ldr	r3, [pc, #400]	@ (8016668 <subfunct_setLed+0x210>)
 80164d6:	701a      	strb	r2, [r3, #0]
	LP5812_WriteRegister(0x044, PWMLed) == HAL_OK ?
 80164d8:	4b63      	ldr	r3, [pc, #396]	@ (8016668 <subfunct_setLed+0x210>)
 80164da:	781b      	ldrb	r3, [r3, #0]
 80164dc:	4619      	mov	r1, r3
 80164de:	2044      	movs	r0, #68	@ 0x44
 80164e0:	f7f0 f9b8 	bl	8006854 <LP5812_WriteRegister>
 80164e4:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d103      	bne.n	80164f2 <subfunct_setLed+0x9a>
 80164ea:	485d      	ldr	r0, [pc, #372]	@ (8016660 <subfunct_setLed+0x208>)
 80164ec:	f000 fbce 	bl	8016c8c <iprintf>
 80164f0:	e002      	b.n	80164f8 <subfunct_setLed+0xa0>
 80164f2:	485c      	ldr	r0, [pc, #368]	@ (8016664 <subfunct_setLed+0x20c>)
 80164f4:	f000 fbca 	bl	8016c8c <iprintf>
	LP5812_WriteRegister(0x045, PWMLed) == HAL_OK ?
 80164f8:	4b5b      	ldr	r3, [pc, #364]	@ (8016668 <subfunct_setLed+0x210>)
 80164fa:	781b      	ldrb	r3, [r3, #0]
 80164fc:	4619      	mov	r1, r3
 80164fe:	2045      	movs	r0, #69	@ 0x45
 8016500:	f7f0 f9a8 	bl	8006854 <LP5812_WriteRegister>
 8016504:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 8016506:	2b00      	cmp	r3, #0
 8016508:	d103      	bne.n	8016512 <subfunct_setLed+0xba>
 801650a:	4855      	ldr	r0, [pc, #340]	@ (8016660 <subfunct_setLed+0x208>)
 801650c:	f000 fbbe 	bl	8016c8c <iprintf>
 8016510:	e002      	b.n	8016518 <subfunct_setLed+0xc0>
 8016512:	4854      	ldr	r0, [pc, #336]	@ (8016664 <subfunct_setLed+0x20c>)
 8016514:	f000 fbba 	bl	8016c8c <iprintf>
	LP5812_WriteRegister(0x046, PWMLed) == HAL_OK ?
 8016518:	4b53      	ldr	r3, [pc, #332]	@ (8016668 <subfunct_setLed+0x210>)
 801651a:	781b      	ldrb	r3, [r3, #0]
 801651c:	4619      	mov	r1, r3
 801651e:	2046      	movs	r0, #70	@ 0x46
 8016520:	f7f0 f998 	bl	8006854 <LP5812_WriteRegister>
 8016524:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 8016526:	2b00      	cmp	r3, #0
 8016528:	d103      	bne.n	8016532 <subfunct_setLed+0xda>
 801652a:	484d      	ldr	r0, [pc, #308]	@ (8016660 <subfunct_setLed+0x208>)
 801652c:	f000 fbae 	bl	8016c8c <iprintf>
 8016530:	e002      	b.n	8016538 <subfunct_setLed+0xe0>
 8016532:	484c      	ldr	r0, [pc, #304]	@ (8016664 <subfunct_setLed+0x20c>)
 8016534:	f000 fbaa 	bl	8016c8c <iprintf>
	LP5812_WriteRegister(0x047, PWMLed) == HAL_OK ?
 8016538:	4b4b      	ldr	r3, [pc, #300]	@ (8016668 <subfunct_setLed+0x210>)
 801653a:	781b      	ldrb	r3, [r3, #0]
 801653c:	4619      	mov	r1, r3
 801653e:	2047      	movs	r0, #71	@ 0x47
 8016540:	f7f0 f988 	bl	8006854 <LP5812_WriteRegister>
 8016544:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 8016546:	2b00      	cmp	r3, #0
 8016548:	d103      	bne.n	8016552 <subfunct_setLed+0xfa>
 801654a:	4845      	ldr	r0, [pc, #276]	@ (8016660 <subfunct_setLed+0x208>)
 801654c:	f000 fb9e 	bl	8016c8c <iprintf>
 8016550:	e002      	b.n	8016558 <subfunct_setLed+0x100>
 8016552:	4844      	ldr	r0, [pc, #272]	@ (8016664 <subfunct_setLed+0x20c>)
 8016554:	f000 fb9a 	bl	8016c8c <iprintf>
	LP5812_WriteRegister(0x048, PWMLed) == HAL_OK ?
 8016558:	4b43      	ldr	r3, [pc, #268]	@ (8016668 <subfunct_setLed+0x210>)
 801655a:	781b      	ldrb	r3, [r3, #0]
 801655c:	4619      	mov	r1, r3
 801655e:	2048      	movs	r0, #72	@ 0x48
 8016560:	f7f0 f978 	bl	8006854 <LP5812_WriteRegister>
 8016564:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 8016566:	2b00      	cmp	r3, #0
 8016568:	d103      	bne.n	8016572 <subfunct_setLed+0x11a>
 801656a:	483d      	ldr	r0, [pc, #244]	@ (8016660 <subfunct_setLed+0x208>)
 801656c:	f000 fb8e 	bl	8016c8c <iprintf>
 8016570:	e002      	b.n	8016578 <subfunct_setLed+0x120>
 8016572:	483c      	ldr	r0, [pc, #240]	@ (8016664 <subfunct_setLed+0x20c>)
 8016574:	f000 fb8a 	bl	8016c8c <iprintf>
	LP5812_WriteRegister(0x049, PWMLed) == HAL_OK ?
 8016578:	4b3b      	ldr	r3, [pc, #236]	@ (8016668 <subfunct_setLed+0x210>)
 801657a:	781b      	ldrb	r3, [r3, #0]
 801657c:	4619      	mov	r1, r3
 801657e:	2049      	movs	r0, #73	@ 0x49
 8016580:	f7f0 f968 	bl	8006854 <LP5812_WriteRegister>
 8016584:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 8016586:	2b00      	cmp	r3, #0
 8016588:	d103      	bne.n	8016592 <subfunct_setLed+0x13a>
 801658a:	4835      	ldr	r0, [pc, #212]	@ (8016660 <subfunct_setLed+0x208>)
 801658c:	f000 fb7e 	bl	8016c8c <iprintf>
 8016590:	e002      	b.n	8016598 <subfunct_setLed+0x140>
 8016592:	4834      	ldr	r0, [pc, #208]	@ (8016664 <subfunct_setLed+0x20c>)
 8016594:	f000 fb7a 	bl	8016c8c <iprintf>
	LP5812_WriteRegister(0x04A, PWMLed) == HAL_OK ?
 8016598:	4b33      	ldr	r3, [pc, #204]	@ (8016668 <subfunct_setLed+0x210>)
 801659a:	781b      	ldrb	r3, [r3, #0]
 801659c:	4619      	mov	r1, r3
 801659e:	204a      	movs	r0, #74	@ 0x4a
 80165a0:	f7f0 f958 	bl	8006854 <LP5812_WriteRegister>
 80165a4:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	d103      	bne.n	80165b2 <subfunct_setLed+0x15a>
 80165aa:	482d      	ldr	r0, [pc, #180]	@ (8016660 <subfunct_setLed+0x208>)
 80165ac:	f000 fb6e 	bl	8016c8c <iprintf>
 80165b0:	e002      	b.n	80165b8 <subfunct_setLed+0x160>
 80165b2:	482c      	ldr	r0, [pc, #176]	@ (8016664 <subfunct_setLed+0x20c>)
 80165b4:	f000 fb6a 	bl	8016c8c <iprintf>
	LP5812_WriteRegister(0x04B, PWMLed) == HAL_OK ?
 80165b8:	4b2b      	ldr	r3, [pc, #172]	@ (8016668 <subfunct_setLed+0x210>)
 80165ba:	781b      	ldrb	r3, [r3, #0]
 80165bc:	4619      	mov	r1, r3
 80165be:	204b      	movs	r0, #75	@ 0x4b
 80165c0:	f7f0 f948 	bl	8006854 <LP5812_WriteRegister>
 80165c4:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d103      	bne.n	80165d2 <subfunct_setLed+0x17a>
 80165ca:	4825      	ldr	r0, [pc, #148]	@ (8016660 <subfunct_setLed+0x208>)
 80165cc:	f000 fb5e 	bl	8016c8c <iprintf>
 80165d0:	e002      	b.n	80165d8 <subfunct_setLed+0x180>
 80165d2:	4824      	ldr	r0, [pc, #144]	@ (8016664 <subfunct_setLed+0x20c>)
 80165d4:	f000 fb5a 	bl	8016c8c <iprintf>
	LP5812_WriteRegister(0x04C, PWMLed) == HAL_OK ?
 80165d8:	4b23      	ldr	r3, [pc, #140]	@ (8016668 <subfunct_setLed+0x210>)
 80165da:	781b      	ldrb	r3, [r3, #0]
 80165dc:	4619      	mov	r1, r3
 80165de:	204c      	movs	r0, #76	@ 0x4c
 80165e0:	f7f0 f938 	bl	8006854 <LP5812_WriteRegister>
 80165e4:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d103      	bne.n	80165f2 <subfunct_setLed+0x19a>
 80165ea:	481d      	ldr	r0, [pc, #116]	@ (8016660 <subfunct_setLed+0x208>)
 80165ec:	f000 fb4e 	bl	8016c8c <iprintf>
 80165f0:	e002      	b.n	80165f8 <subfunct_setLed+0x1a0>
 80165f2:	481c      	ldr	r0, [pc, #112]	@ (8016664 <subfunct_setLed+0x20c>)
 80165f4:	f000 fb4a 	bl	8016c8c <iprintf>
	LP5812_WriteRegister(0x04D, PWMLed) == HAL_OK ?
 80165f8:	4b1b      	ldr	r3, [pc, #108]	@ (8016668 <subfunct_setLed+0x210>)
 80165fa:	781b      	ldrb	r3, [r3, #0]
 80165fc:	4619      	mov	r1, r3
 80165fe:	204d      	movs	r0, #77	@ 0x4d
 8016600:	f7f0 f928 	bl	8006854 <LP5812_WriteRegister>
 8016604:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 8016606:	2b00      	cmp	r3, #0
 8016608:	d103      	bne.n	8016612 <subfunct_setLed+0x1ba>
 801660a:	4815      	ldr	r0, [pc, #84]	@ (8016660 <subfunct_setLed+0x208>)
 801660c:	f000 fb3e 	bl	8016c8c <iprintf>
 8016610:	e002      	b.n	8016618 <subfunct_setLed+0x1c0>
 8016612:	4814      	ldr	r0, [pc, #80]	@ (8016664 <subfunct_setLed+0x20c>)
 8016614:	f000 fb3a 	bl	8016c8c <iprintf>
	LP5812_WriteRegister(0x04E, PWMLed) == HAL_OK ?
 8016618:	4b13      	ldr	r3, [pc, #76]	@ (8016668 <subfunct_setLed+0x210>)
 801661a:	781b      	ldrb	r3, [r3, #0]
 801661c:	4619      	mov	r1, r3
 801661e:	204e      	movs	r0, #78	@ 0x4e
 8016620:	f7f0 f918 	bl	8006854 <LP5812_WriteRegister>
 8016624:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 8016626:	2b00      	cmp	r3, #0
 8016628:	d103      	bne.n	8016632 <subfunct_setLed+0x1da>
 801662a:	480d      	ldr	r0, [pc, #52]	@ (8016660 <subfunct_setLed+0x208>)
 801662c:	f000 fb2e 	bl	8016c8c <iprintf>
 8016630:	e002      	b.n	8016638 <subfunct_setLed+0x1e0>
 8016632:	480c      	ldr	r0, [pc, #48]	@ (8016664 <subfunct_setLed+0x20c>)
 8016634:	f000 fb2a 	bl	8016c8c <iprintf>
	LP5812_WriteRegister(0x04F, PWMLed) == HAL_OK ?
 8016638:	4b0b      	ldr	r3, [pc, #44]	@ (8016668 <subfunct_setLed+0x210>)
 801663a:	781b      	ldrb	r3, [r3, #0]
 801663c:	4619      	mov	r1, r3
 801663e:	204f      	movs	r0, #79	@ 0x4f
 8016640:	f7f0 f908 	bl	8006854 <LP5812_WriteRegister>
 8016644:	4603      	mov	r3, r0
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 8016646:	2b00      	cmp	r3, #0
 8016648:	d103      	bne.n	8016652 <subfunct_setLed+0x1fa>
 801664a:	4805      	ldr	r0, [pc, #20]	@ (8016660 <subfunct_setLed+0x208>)
 801664c:	f000 fb1e 	bl	8016c8c <iprintf>
}
 8016650:	e002      	b.n	8016658 <subfunct_setLed+0x200>
			printf("I2C Ok\r\n") : printf("I2C Error\r\n");
 8016652:	4804      	ldr	r0, [pc, #16]	@ (8016664 <subfunct_setLed+0x20c>)
 8016654:	f000 fb1a 	bl	8016c8c <iprintf>
}
 8016658:	bf00      	nop
 801665a:	3710      	adds	r7, #16
 801665c:	46bd      	mov	sp, r7
 801665e:	bd80      	pop	{r7, pc}
 8016660:	08018708 	.word	0x08018708
 8016664:	08018714 	.word	0x08018714
 8016668:	200002b0 	.word	0x200002b0

0801666c <subfunct_seeIMU>:
void subfunct_seeIMU(char **argv) {
 801666c:	b480      	push	{r7}
 801666e:	b083      	sub	sp, #12
 8016670:	af00      	add	r7, sp, #0
 8016672:	6078      	str	r0, [r7, #4]
	/*
	 * argv None
	 */
	isSeeIMU = isSeeIMU == 1 ? 0 : 1;
 8016674:	4b07      	ldr	r3, [pc, #28]	@ (8016694 <subfunct_seeIMU+0x28>)
 8016676:	681b      	ldr	r3, [r3, #0]
 8016678:	2b01      	cmp	r3, #1
 801667a:	bf14      	ite	ne
 801667c:	2301      	movne	r3, #1
 801667e:	2300      	moveq	r3, #0
 8016680:	b2db      	uxtb	r3, r3
 8016682:	461a      	mov	r2, r3
 8016684:	4b03      	ldr	r3, [pc, #12]	@ (8016694 <subfunct_seeIMU+0x28>)
 8016686:	601a      	str	r2, [r3, #0]

	/* in main.c : TIM16 permet de faire calculer la vitesse et la position   */
}
 8016688:	bf00      	nop
 801668a:	370c      	adds	r7, #12
 801668c:	46bd      	mov	sp, r7
 801668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016692:	4770      	bx	lr
 8016694:	20005b74 	.word	0x20005b74

08016698 <subfunct_IMU_Update>:
void subfunct_IMU_Update(char **argv) {
 8016698:	b580      	push	{r7, lr}
 801669a:	b084      	sub	sp, #16
 801669c:	af00      	add	r7, sp, #0
 801669e:	6078      	str	r0, [r7, #4]
	/*
	 * argv None
	 */
	uint8_t startReg = 0x1D;
 80166a0:	231d      	movs	r3, #29
 80166a2:	72fb      	strb	r3, [r7, #11]
	uint8_t endReg = 0x39;
 80166a4:	2339      	movs	r3, #57	@ 0x39
 80166a6:	72bb      	strb	r3, [r7, #10]
	for (int i = 1; i <= endReg - startReg + 1; i++) {
 80166a8:	2301      	movs	r3, #1
 80166aa:	60fb      	str	r3, [r7, #12]
 80166ac:	e01d      	b.n	80166ea <subfunct_IMU_Update+0x52>
		uint8_t ret = 0;
 80166ae:	2300      	movs	r3, #0
 80166b0:	727b      	strb	r3, [r7, #9]
		ADXL343_ReadRegister(IMURegister[i].reg, &ret, 1);
 80166b2:	4a14      	ldr	r2, [pc, #80]	@ (8016704 <subfunct_IMU_Update+0x6c>)
 80166b4:	68fb      	ldr	r3, [r7, #12]
 80166b6:	00db      	lsls	r3, r3, #3
 80166b8:	4413      	add	r3, r2
 80166ba:	791b      	ldrb	r3, [r3, #4]
 80166bc:	f107 0109 	add.w	r1, r7, #9
 80166c0:	2201      	movs	r2, #1
 80166c2:	4618      	mov	r0, r3
 80166c4:	f7ef ffcc 	bl	8006660 <ADXL343_ReadRegister>
		printf("READ - 0x%02X (%s): 0x%02X\r\n", IMURegister[i].reg,
 80166c8:	4a0e      	ldr	r2, [pc, #56]	@ (8016704 <subfunct_IMU_Update+0x6c>)
 80166ca:	68fb      	ldr	r3, [r7, #12]
 80166cc:	00db      	lsls	r3, r3, #3
 80166ce:	4413      	add	r3, r2
 80166d0:	791b      	ldrb	r3, [r3, #4]
 80166d2:	4619      	mov	r1, r3
 80166d4:	4a0b      	ldr	r2, [pc, #44]	@ (8016704 <subfunct_IMU_Update+0x6c>)
 80166d6:	68fb      	ldr	r3, [r7, #12]
 80166d8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80166dc:	7a7b      	ldrb	r3, [r7, #9]
 80166de:	480a      	ldr	r0, [pc, #40]	@ (8016708 <subfunct_IMU_Update+0x70>)
 80166e0:	f000 fad4 	bl	8016c8c <iprintf>
	for (int i = 1; i <= endReg - startReg + 1; i++) {
 80166e4:	68fb      	ldr	r3, [r7, #12]
 80166e6:	3301      	adds	r3, #1
 80166e8:	60fb      	str	r3, [r7, #12]
 80166ea:	7aba      	ldrb	r2, [r7, #10]
 80166ec:	7afb      	ldrb	r3, [r7, #11]
 80166ee:	1ad3      	subs	r3, r2, r3
 80166f0:	3301      	adds	r3, #1
 80166f2:	68fa      	ldr	r2, [r7, #12]
 80166f4:	429a      	cmp	r2, r3
 80166f6:	ddda      	ble.n	80166ae <subfunct_IMU_Update+0x16>
				IMURegister[i].name, ret);
	}
	/* in main.c : TIM16 permet de faire calculer la vitesse et la position   */
}
 80166f8:	bf00      	nop
 80166fa:	bf00      	nop
 80166fc:	3710      	adds	r7, #16
 80166fe:	46bd      	mov	sp, r7
 8016700:	bd80      	pop	{r7, pc}
 8016702:	bf00      	nop
 8016704:	20000008 	.word	0x20000008
 8016708:	08018720 	.word	0x08018720

0801670c <subfunct_IMU_SelfTest>:
void subfunct_IMU_SelfTest(char **argv) {
 801670c:	b580      	push	{r7, lr}
 801670e:	b084      	sub	sp, #16
 8016710:	af00      	add	r7, sp, #0
 8016712:	6078      	str	r0, [r7, #4]
	/*
	 * argv None
	 */
	uint8_t ret;

	isSeeIMUFORCE = isSeeIMUFORCE == 1 ? 0 : 1;
 8016714:	4b1f      	ldr	r3, [pc, #124]	@ (8016794 <subfunct_IMU_SelfTest+0x88>)
 8016716:	681b      	ldr	r3, [r3, #0]
 8016718:	2b01      	cmp	r3, #1
 801671a:	bf14      	ite	ne
 801671c:	2301      	movne	r3, #1
 801671e:	2300      	moveq	r3, #0
 8016720:	b2db      	uxtb	r3, r3
 8016722:	461a      	mov	r2, r3
 8016724:	4b1b      	ldr	r3, [pc, #108]	@ (8016794 <subfunct_IMU_SelfTest+0x88>)
 8016726:	601a      	str	r2, [r3, #0]
	char *debugType = isSeeIMUFORCE == 1 ? START : STOP;
 8016728:	4b1a      	ldr	r3, [pc, #104]	@ (8016794 <subfunct_IMU_SelfTest+0x88>)
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	2b01      	cmp	r3, #1
 801672e:	d101      	bne.n	8016734 <subfunct_IMU_SelfTest+0x28>
 8016730:	4b19      	ldr	r3, [pc, #100]	@ (8016798 <subfunct_IMU_SelfTest+0x8c>)
 8016732:	e000      	b.n	8016736 <subfunct_IMU_SelfTest+0x2a>
 8016734:	4b19      	ldr	r3, [pc, #100]	@ (801679c <subfunct_IMU_SelfTest+0x90>)
 8016736:	60fb      	str	r3, [r7, #12]

	ADXL343_ReadRegister(0x31, &ret, 1) != HAL_OK ?
 8016738:	f107 030b 	add.w	r3, r7, #11
 801673c:	2201      	movs	r2, #1
 801673e:	4619      	mov	r1, r3
 8016740:	2031      	movs	r0, #49	@ 0x31
 8016742:	f7ef ff8d 	bl	8006660 <ADXL343_ReadRegister>
 8016746:	4603      	mov	r3, r0
			debug(D_ERROR, "I2C READ in IMUFORCE") : (void) 0;
 8016748:	2b00      	cmp	r3, #0
 801674a:	d003      	beq.n	8016754 <subfunct_IMU_SelfTest+0x48>
 801674c:	4914      	ldr	r1, [pc, #80]	@ (80167a0 <subfunct_IMU_SelfTest+0x94>)
 801674e:	4815      	ldr	r0, [pc, #84]	@ (80167a4 <subfunct_IMU_SelfTest+0x98>)
 8016750:	f000 f88c 	bl	801686c <debug>
	ADXL343_WriteRegister(0x31, ((isSeeIMUFORCE << 7) | (ret & 0x7F)))
 8016754:	4b0f      	ldr	r3, [pc, #60]	@ (8016794 <subfunct_IMU_SelfTest+0x88>)
 8016756:	681b      	ldr	r3, [r3, #0]
 8016758:	01db      	lsls	r3, r3, #7
 801675a:	b25a      	sxtb	r2, r3
 801675c:	7afb      	ldrb	r3, [r7, #11]
 801675e:	b25b      	sxtb	r3, r3
 8016760:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016764:	b25b      	sxtb	r3, r3
 8016766:	4313      	orrs	r3, r2
 8016768:	b25b      	sxtb	r3, r3
 801676a:	b2db      	uxtb	r3, r3
 801676c:	4619      	mov	r1, r3
 801676e:	2031      	movs	r0, #49	@ 0x31
 8016770:	f7ef ff58 	bl	8006624 <ADXL343_WriteRegister>
 8016774:	4603      	mov	r3, r0
	!= HAL_OK ? debug(D_ERROR, "I2C WRITE in IMUFORCE") : (void) 0;
 8016776:	2b00      	cmp	r3, #0
 8016778:	d003      	beq.n	8016782 <subfunct_IMU_SelfTest+0x76>
 801677a:	490b      	ldr	r1, [pc, #44]	@ (80167a8 <subfunct_IMU_SelfTest+0x9c>)
 801677c:	4809      	ldr	r0, [pc, #36]	@ (80167a4 <subfunct_IMU_SelfTest+0x98>)
 801677e:	f000 f875 	bl	801686c <debug>
	debug(debugType, "IMU FORCE - Self Test");
 8016782:	490a      	ldr	r1, [pc, #40]	@ (80167ac <subfunct_IMU_SelfTest+0xa0>)
 8016784:	68f8      	ldr	r0, [r7, #12]
 8016786:	f000 f871 	bl	801686c <debug>
	/* in main.c : TIM16 permet de calculer la vitesse et la position   */
}
 801678a:	bf00      	nop
 801678c:	3710      	adds	r7, #16
 801678e:	46bd      	mov	sp, r7
 8016790:	bd80      	pop	{r7, pc}
 8016792:	bf00      	nop
 8016794:	20005b78 	.word	0x20005b78
 8016798:	08018664 	.word	0x08018664
 801679c:	080186b8 	.word	0x080186b8
 80167a0:	08018740 	.word	0x08018740
 80167a4:	08018690 	.word	0x08018690
 80167a8:	08018758 	.word	0x08018758
 80167ac:	08018770 	.word	0x08018770

080167b0 <subfunct_IMU_GET>:
void subfunct_IMU_GET(char **argv) {
 80167b0:	b590      	push	{r4, r7, lr}
 80167b2:	b093      	sub	sp, #76	@ 0x4c
 80167b4:	af00      	add	r7, sp, #0
 80167b6:	6178      	str	r0, [r7, #20]
	/*
	 * argv None
	 */
	XYZ_t accPREV = accXYZ;
 80167b8:	4a1a      	ldr	r2, [pc, #104]	@ (8016824 <subfunct_IMU_GET+0x74>)
 80167ba:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80167be:	ca07      	ldmia	r2, {r0, r1, r2}
 80167c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	XYZ_t vitPREV = vitXYZ;
 80167c4:	4a18      	ldr	r2, [pc, #96]	@ (8016828 <subfunct_IMU_GET+0x78>)
 80167c6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80167ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80167cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	accXYZ = ADXL343_getAcc();
 80167d0:	4c14      	ldr	r4, [pc, #80]	@ (8016824 <subfunct_IMU_GET+0x74>)
 80167d2:	463b      	mov	r3, r7
 80167d4:	4618      	mov	r0, r3
 80167d6:	f7ef fea5 	bl	8006524 <ADXL343_getAcc>
 80167da:	463b      	mov	r3, r7
 80167dc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80167e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	vitXYZ = (XYZ_t ) { accPREV.X - accXYZ.X, accPREV.Y - accXYZ.Y, accPREV.Z
 80167e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80167e6:	4b0f      	ldr	r3, [pc, #60]	@ (8016824 <subfunct_IMU_GET+0x74>)
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	1ad1      	subs	r1, r2, r3
 80167ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80167ee:	4b0d      	ldr	r3, [pc, #52]	@ (8016824 <subfunct_IMU_GET+0x74>)
 80167f0:	685b      	ldr	r3, [r3, #4]
 80167f2:	1ad2      	subs	r2, r2, r3
 80167f4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
		- accXYZ.Z };
 80167f6:	4b0b      	ldr	r3, [pc, #44]	@ (8016824 <subfunct_IMU_GET+0x74>)
 80167f8:	689b      	ldr	r3, [r3, #8]
 80167fa:	1ac3      	subs	r3, r0, r3
	vitXYZ = (XYZ_t ) { accPREV.X - accXYZ.X, accPREV.Y - accXYZ.Y, accPREV.Z
 80167fc:	480a      	ldr	r0, [pc, #40]	@ (8016828 <subfunct_IMU_GET+0x78>)
 80167fe:	6001      	str	r1, [r0, #0]
 8016800:	4909      	ldr	r1, [pc, #36]	@ (8016828 <subfunct_IMU_GET+0x78>)
 8016802:	604a      	str	r2, [r1, #4]
 8016804:	4a08      	ldr	r2, [pc, #32]	@ (8016828 <subfunct_IMU_GET+0x78>)
 8016806:	6093      	str	r3, [r2, #8]
	posXYZ = (XYZ_t ) { vitPREV.X - vitPREV.X, vitPREV.Y - vitPREV.Y, vitPREV.Z
 8016808:	4b08      	ldr	r3, [pc, #32]	@ (801682c <subfunct_IMU_GET+0x7c>)
 801680a:	2200      	movs	r2, #0
 801680c:	601a      	str	r2, [r3, #0]
 801680e:	4b07      	ldr	r3, [pc, #28]	@ (801682c <subfunct_IMU_GET+0x7c>)
 8016810:	2200      	movs	r2, #0
 8016812:	605a      	str	r2, [r3, #4]
 8016814:	4b05      	ldr	r3, [pc, #20]	@ (801682c <subfunct_IMU_GET+0x7c>)
 8016816:	2200      	movs	r2, #0
 8016818:	609a      	str	r2, [r3, #8]
		- vitPREV.Z };
}
 801681a:	bf00      	nop
 801681c:	374c      	adds	r7, #76	@ 0x4c
 801681e:	46bd      	mov	sp, r7
 8016820:	bd90      	pop	{r4, r7, pc}
 8016822:	bf00      	nop
 8016824:	20000a14 	.word	0x20000a14
 8016828:	20000a20 	.word	0x20000a20
 801682c:	20000a2c 	.word	0x20000a2c

08016830 <subfunct_MIAOU>:
void subfunct_MIAOU(char **argv) {
 8016830:	b480      	push	{r7}
 8016832:	b083      	sub	sp, #12
 8016834:	af00      	add	r7, sp, #0
 8016836:	6078      	str	r0, [r7, #4]
	return;
 8016838:	bf00      	nop
}
 801683a:	370c      	adds	r7, #12
 801683c:	46bd      	mov	sp, r7
 801683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016842:	4770      	bx	lr

08016844 <subfunct_clear>:
void subfunct_clear(char **argv) {
 8016844:	b580      	push	{r7, lr}
 8016846:	b082      	sub	sp, #8
 8016848:	af00      	add	r7, sp, #0
 801684a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&UART_DEVICE, clear, sizeof(clear), HAL_MAX_DELAY);
 801684c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016850:	2208      	movs	r2, #8
 8016852:	4904      	ldr	r1, [pc, #16]	@ (8016864 <subfunct_clear+0x20>)
 8016854:	4804      	ldr	r0, [pc, #16]	@ (8016868 <subfunct_clear+0x24>)
 8016856:	f7f6 fcf3 	bl	800d240 <HAL_UART_Transmit>
}
 801685a:	bf00      	nop
 801685c:	3708      	adds	r7, #8
 801685e:	46bd      	mov	sp, r7
 8016860:	bd80      	pop	{r7, pc}
 8016862:	bf00      	nop
 8016864:	200002a8 	.word	0x200002a8
 8016868:	200008ec 	.word	0x200008ec

0801686c <debug>:

/************************************************************************************************
 * 										DEBUG
 *************************************************************************************************/

void debug(char *debugType, char *message) {
 801686c:	b580      	push	{r7, lr}
 801686e:	b082      	sub	sp, #8
 8016870:	af00      	add	r7, sp, #0
 8016872:	6078      	str	r0, [r7, #4]
 8016874:	6039      	str	r1, [r7, #0]

	printf("%-15s%s| %s\r\n", debugType, D_RESET, message);
 8016876:	683b      	ldr	r3, [r7, #0]
 8016878:	4a04      	ldr	r2, [pc, #16]	@ (801688c <debug+0x20>)
 801687a:	6879      	ldr	r1, [r7, #4]
 801687c:	4804      	ldr	r0, [pc, #16]	@ (8016890 <debug+0x24>)
 801687e:	f000 fa05 	bl	8016c8c <iprintf>

}
 8016882:	bf00      	nop
 8016884:	3708      	adds	r7, #8
 8016886:	46bd      	mov	sp, r7
 8016888:	bd80      	pop	{r7, pc}
 801688a:	bf00      	nop
 801688c:	080185cc 	.word	0x080185cc
 8016890:	08018788 	.word	0x08018788

08016894 <malloc>:
 8016894:	4b02      	ldr	r3, [pc, #8]	@ (80168a0 <malloc+0xc>)
 8016896:	4601      	mov	r1, r0
 8016898:	6818      	ldr	r0, [r3, #0]
 801689a:	f000 b825 	b.w	80168e8 <_malloc_r>
 801689e:	bf00      	nop
 80168a0:	200002c0 	.word	0x200002c0

080168a4 <sbrk_aligned>:
 80168a4:	b570      	push	{r4, r5, r6, lr}
 80168a6:	4e0f      	ldr	r6, [pc, #60]	@ (80168e4 <sbrk_aligned+0x40>)
 80168a8:	460c      	mov	r4, r1
 80168aa:	6831      	ldr	r1, [r6, #0]
 80168ac:	4605      	mov	r5, r0
 80168ae:	b911      	cbnz	r1, 80168b6 <sbrk_aligned+0x12>
 80168b0:	f000 fb16 	bl	8016ee0 <_sbrk_r>
 80168b4:	6030      	str	r0, [r6, #0]
 80168b6:	4621      	mov	r1, r4
 80168b8:	4628      	mov	r0, r5
 80168ba:	f000 fb11 	bl	8016ee0 <_sbrk_r>
 80168be:	1c43      	adds	r3, r0, #1
 80168c0:	d103      	bne.n	80168ca <sbrk_aligned+0x26>
 80168c2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80168c6:	4620      	mov	r0, r4
 80168c8:	bd70      	pop	{r4, r5, r6, pc}
 80168ca:	1cc4      	adds	r4, r0, #3
 80168cc:	f024 0403 	bic.w	r4, r4, #3
 80168d0:	42a0      	cmp	r0, r4
 80168d2:	d0f8      	beq.n	80168c6 <sbrk_aligned+0x22>
 80168d4:	1a21      	subs	r1, r4, r0
 80168d6:	4628      	mov	r0, r5
 80168d8:	f000 fb02 	bl	8016ee0 <_sbrk_r>
 80168dc:	3001      	adds	r0, #1
 80168de:	d1f2      	bne.n	80168c6 <sbrk_aligned+0x22>
 80168e0:	e7ef      	b.n	80168c2 <sbrk_aligned+0x1e>
 80168e2:	bf00      	nop
 80168e4:	20005b80 	.word	0x20005b80

080168e8 <_malloc_r>:
 80168e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80168ec:	1ccd      	adds	r5, r1, #3
 80168ee:	f025 0503 	bic.w	r5, r5, #3
 80168f2:	3508      	adds	r5, #8
 80168f4:	2d0c      	cmp	r5, #12
 80168f6:	bf38      	it	cc
 80168f8:	250c      	movcc	r5, #12
 80168fa:	2d00      	cmp	r5, #0
 80168fc:	4606      	mov	r6, r0
 80168fe:	db01      	blt.n	8016904 <_malloc_r+0x1c>
 8016900:	42a9      	cmp	r1, r5
 8016902:	d904      	bls.n	801690e <_malloc_r+0x26>
 8016904:	230c      	movs	r3, #12
 8016906:	6033      	str	r3, [r6, #0]
 8016908:	2000      	movs	r0, #0
 801690a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801690e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80169e4 <_malloc_r+0xfc>
 8016912:	f000 f869 	bl	80169e8 <__malloc_lock>
 8016916:	f8d8 3000 	ldr.w	r3, [r8]
 801691a:	461c      	mov	r4, r3
 801691c:	bb44      	cbnz	r4, 8016970 <_malloc_r+0x88>
 801691e:	4629      	mov	r1, r5
 8016920:	4630      	mov	r0, r6
 8016922:	f7ff ffbf 	bl	80168a4 <sbrk_aligned>
 8016926:	1c43      	adds	r3, r0, #1
 8016928:	4604      	mov	r4, r0
 801692a:	d158      	bne.n	80169de <_malloc_r+0xf6>
 801692c:	f8d8 4000 	ldr.w	r4, [r8]
 8016930:	4627      	mov	r7, r4
 8016932:	2f00      	cmp	r7, #0
 8016934:	d143      	bne.n	80169be <_malloc_r+0xd6>
 8016936:	2c00      	cmp	r4, #0
 8016938:	d04b      	beq.n	80169d2 <_malloc_r+0xea>
 801693a:	6823      	ldr	r3, [r4, #0]
 801693c:	4639      	mov	r1, r7
 801693e:	4630      	mov	r0, r6
 8016940:	eb04 0903 	add.w	r9, r4, r3
 8016944:	f000 facc 	bl	8016ee0 <_sbrk_r>
 8016948:	4581      	cmp	r9, r0
 801694a:	d142      	bne.n	80169d2 <_malloc_r+0xea>
 801694c:	6821      	ldr	r1, [r4, #0]
 801694e:	1a6d      	subs	r5, r5, r1
 8016950:	4629      	mov	r1, r5
 8016952:	4630      	mov	r0, r6
 8016954:	f7ff ffa6 	bl	80168a4 <sbrk_aligned>
 8016958:	3001      	adds	r0, #1
 801695a:	d03a      	beq.n	80169d2 <_malloc_r+0xea>
 801695c:	6823      	ldr	r3, [r4, #0]
 801695e:	442b      	add	r3, r5
 8016960:	6023      	str	r3, [r4, #0]
 8016962:	f8d8 3000 	ldr.w	r3, [r8]
 8016966:	685a      	ldr	r2, [r3, #4]
 8016968:	bb62      	cbnz	r2, 80169c4 <_malloc_r+0xdc>
 801696a:	f8c8 7000 	str.w	r7, [r8]
 801696e:	e00f      	b.n	8016990 <_malloc_r+0xa8>
 8016970:	6822      	ldr	r2, [r4, #0]
 8016972:	1b52      	subs	r2, r2, r5
 8016974:	d420      	bmi.n	80169b8 <_malloc_r+0xd0>
 8016976:	2a0b      	cmp	r2, #11
 8016978:	d917      	bls.n	80169aa <_malloc_r+0xc2>
 801697a:	1961      	adds	r1, r4, r5
 801697c:	42a3      	cmp	r3, r4
 801697e:	6025      	str	r5, [r4, #0]
 8016980:	bf18      	it	ne
 8016982:	6059      	strne	r1, [r3, #4]
 8016984:	6863      	ldr	r3, [r4, #4]
 8016986:	bf08      	it	eq
 8016988:	f8c8 1000 	streq.w	r1, [r8]
 801698c:	5162      	str	r2, [r4, r5]
 801698e:	604b      	str	r3, [r1, #4]
 8016990:	4630      	mov	r0, r6
 8016992:	f000 f82f 	bl	80169f4 <__malloc_unlock>
 8016996:	f104 000b 	add.w	r0, r4, #11
 801699a:	1d23      	adds	r3, r4, #4
 801699c:	f020 0007 	bic.w	r0, r0, #7
 80169a0:	1ac2      	subs	r2, r0, r3
 80169a2:	bf1c      	itt	ne
 80169a4:	1a1b      	subne	r3, r3, r0
 80169a6:	50a3      	strne	r3, [r4, r2]
 80169a8:	e7af      	b.n	801690a <_malloc_r+0x22>
 80169aa:	6862      	ldr	r2, [r4, #4]
 80169ac:	42a3      	cmp	r3, r4
 80169ae:	bf0c      	ite	eq
 80169b0:	f8c8 2000 	streq.w	r2, [r8]
 80169b4:	605a      	strne	r2, [r3, #4]
 80169b6:	e7eb      	b.n	8016990 <_malloc_r+0xa8>
 80169b8:	4623      	mov	r3, r4
 80169ba:	6864      	ldr	r4, [r4, #4]
 80169bc:	e7ae      	b.n	801691c <_malloc_r+0x34>
 80169be:	463c      	mov	r4, r7
 80169c0:	687f      	ldr	r7, [r7, #4]
 80169c2:	e7b6      	b.n	8016932 <_malloc_r+0x4a>
 80169c4:	461a      	mov	r2, r3
 80169c6:	685b      	ldr	r3, [r3, #4]
 80169c8:	42a3      	cmp	r3, r4
 80169ca:	d1fb      	bne.n	80169c4 <_malloc_r+0xdc>
 80169cc:	2300      	movs	r3, #0
 80169ce:	6053      	str	r3, [r2, #4]
 80169d0:	e7de      	b.n	8016990 <_malloc_r+0xa8>
 80169d2:	230c      	movs	r3, #12
 80169d4:	6033      	str	r3, [r6, #0]
 80169d6:	4630      	mov	r0, r6
 80169d8:	f000 f80c 	bl	80169f4 <__malloc_unlock>
 80169dc:	e794      	b.n	8016908 <_malloc_r+0x20>
 80169de:	6005      	str	r5, [r0, #0]
 80169e0:	e7d6      	b.n	8016990 <_malloc_r+0xa8>
 80169e2:	bf00      	nop
 80169e4:	20005b84 	.word	0x20005b84

080169e8 <__malloc_lock>:
 80169e8:	4801      	ldr	r0, [pc, #4]	@ (80169f0 <__malloc_lock+0x8>)
 80169ea:	f000 bab4 	b.w	8016f56 <__retarget_lock_acquire_recursive>
 80169ee:	bf00      	nop
 80169f0:	20005cc8 	.word	0x20005cc8

080169f4 <__malloc_unlock>:
 80169f4:	4801      	ldr	r0, [pc, #4]	@ (80169fc <__malloc_unlock+0x8>)
 80169f6:	f000 baaf 	b.w	8016f58 <__retarget_lock_release_recursive>
 80169fa:	bf00      	nop
 80169fc:	20005cc8 	.word	0x20005cc8

08016a00 <std>:
 8016a00:	2300      	movs	r3, #0
 8016a02:	b510      	push	{r4, lr}
 8016a04:	4604      	mov	r4, r0
 8016a06:	e9c0 3300 	strd	r3, r3, [r0]
 8016a0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016a0e:	6083      	str	r3, [r0, #8]
 8016a10:	8181      	strh	r1, [r0, #12]
 8016a12:	6643      	str	r3, [r0, #100]	@ 0x64
 8016a14:	81c2      	strh	r2, [r0, #14]
 8016a16:	6183      	str	r3, [r0, #24]
 8016a18:	4619      	mov	r1, r3
 8016a1a:	2208      	movs	r2, #8
 8016a1c:	305c      	adds	r0, #92	@ 0x5c
 8016a1e:	f000 fa01 	bl	8016e24 <memset>
 8016a22:	4b0d      	ldr	r3, [pc, #52]	@ (8016a58 <std+0x58>)
 8016a24:	6263      	str	r3, [r4, #36]	@ 0x24
 8016a26:	4b0d      	ldr	r3, [pc, #52]	@ (8016a5c <std+0x5c>)
 8016a28:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8016a60 <std+0x60>)
 8016a2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8016a64 <std+0x64>)
 8016a30:	6323      	str	r3, [r4, #48]	@ 0x30
 8016a32:	4b0d      	ldr	r3, [pc, #52]	@ (8016a68 <std+0x68>)
 8016a34:	6224      	str	r4, [r4, #32]
 8016a36:	429c      	cmp	r4, r3
 8016a38:	d006      	beq.n	8016a48 <std+0x48>
 8016a3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016a3e:	4294      	cmp	r4, r2
 8016a40:	d002      	beq.n	8016a48 <std+0x48>
 8016a42:	33d0      	adds	r3, #208	@ 0xd0
 8016a44:	429c      	cmp	r4, r3
 8016a46:	d105      	bne.n	8016a54 <std+0x54>
 8016a48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a50:	f000 ba80 	b.w	8016f54 <__retarget_lock_init_recursive>
 8016a54:	bd10      	pop	{r4, pc}
 8016a56:	bf00      	nop
 8016a58:	08017749 	.word	0x08017749
 8016a5c:	0801776b 	.word	0x0801776b
 8016a60:	080177a3 	.word	0x080177a3
 8016a64:	080177c7 	.word	0x080177c7
 8016a68:	20005b88 	.word	0x20005b88

08016a6c <stdio_exit_handler>:
 8016a6c:	4a02      	ldr	r2, [pc, #8]	@ (8016a78 <stdio_exit_handler+0xc>)
 8016a6e:	4903      	ldr	r1, [pc, #12]	@ (8016a7c <stdio_exit_handler+0x10>)
 8016a70:	4803      	ldr	r0, [pc, #12]	@ (8016a80 <stdio_exit_handler+0x14>)
 8016a72:	f000 b8ed 	b.w	8016c50 <_fwalk_sglue>
 8016a76:	bf00      	nop
 8016a78:	200002b4 	.word	0x200002b4
 8016a7c:	080176f9 	.word	0x080176f9
 8016a80:	200002c4 	.word	0x200002c4

08016a84 <cleanup_stdio>:
 8016a84:	6841      	ldr	r1, [r0, #4]
 8016a86:	4b0c      	ldr	r3, [pc, #48]	@ (8016ab8 <cleanup_stdio+0x34>)
 8016a88:	4299      	cmp	r1, r3
 8016a8a:	b510      	push	{r4, lr}
 8016a8c:	4604      	mov	r4, r0
 8016a8e:	d001      	beq.n	8016a94 <cleanup_stdio+0x10>
 8016a90:	f000 fe32 	bl	80176f8 <_fflush_r>
 8016a94:	68a1      	ldr	r1, [r4, #8]
 8016a96:	4b09      	ldr	r3, [pc, #36]	@ (8016abc <cleanup_stdio+0x38>)
 8016a98:	4299      	cmp	r1, r3
 8016a9a:	d002      	beq.n	8016aa2 <cleanup_stdio+0x1e>
 8016a9c:	4620      	mov	r0, r4
 8016a9e:	f000 fe2b 	bl	80176f8 <_fflush_r>
 8016aa2:	68e1      	ldr	r1, [r4, #12]
 8016aa4:	4b06      	ldr	r3, [pc, #24]	@ (8016ac0 <cleanup_stdio+0x3c>)
 8016aa6:	4299      	cmp	r1, r3
 8016aa8:	d004      	beq.n	8016ab4 <cleanup_stdio+0x30>
 8016aaa:	4620      	mov	r0, r4
 8016aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ab0:	f000 be22 	b.w	80176f8 <_fflush_r>
 8016ab4:	bd10      	pop	{r4, pc}
 8016ab6:	bf00      	nop
 8016ab8:	20005b88 	.word	0x20005b88
 8016abc:	20005bf0 	.word	0x20005bf0
 8016ac0:	20005c58 	.word	0x20005c58

08016ac4 <global_stdio_init.part.0>:
 8016ac4:	b510      	push	{r4, lr}
 8016ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8016af4 <global_stdio_init.part.0+0x30>)
 8016ac8:	4c0b      	ldr	r4, [pc, #44]	@ (8016af8 <global_stdio_init.part.0+0x34>)
 8016aca:	4a0c      	ldr	r2, [pc, #48]	@ (8016afc <global_stdio_init.part.0+0x38>)
 8016acc:	601a      	str	r2, [r3, #0]
 8016ace:	4620      	mov	r0, r4
 8016ad0:	2200      	movs	r2, #0
 8016ad2:	2104      	movs	r1, #4
 8016ad4:	f7ff ff94 	bl	8016a00 <std>
 8016ad8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016adc:	2201      	movs	r2, #1
 8016ade:	2109      	movs	r1, #9
 8016ae0:	f7ff ff8e 	bl	8016a00 <std>
 8016ae4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016ae8:	2202      	movs	r2, #2
 8016aea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016aee:	2112      	movs	r1, #18
 8016af0:	f7ff bf86 	b.w	8016a00 <std>
 8016af4:	20005cc0 	.word	0x20005cc0
 8016af8:	20005b88 	.word	0x20005b88
 8016afc:	08016a6d 	.word	0x08016a6d

08016b00 <__sfp_lock_acquire>:
 8016b00:	4801      	ldr	r0, [pc, #4]	@ (8016b08 <__sfp_lock_acquire+0x8>)
 8016b02:	f000 ba28 	b.w	8016f56 <__retarget_lock_acquire_recursive>
 8016b06:	bf00      	nop
 8016b08:	20005cc9 	.word	0x20005cc9

08016b0c <__sfp_lock_release>:
 8016b0c:	4801      	ldr	r0, [pc, #4]	@ (8016b14 <__sfp_lock_release+0x8>)
 8016b0e:	f000 ba23 	b.w	8016f58 <__retarget_lock_release_recursive>
 8016b12:	bf00      	nop
 8016b14:	20005cc9 	.word	0x20005cc9

08016b18 <__sinit>:
 8016b18:	b510      	push	{r4, lr}
 8016b1a:	4604      	mov	r4, r0
 8016b1c:	f7ff fff0 	bl	8016b00 <__sfp_lock_acquire>
 8016b20:	6a23      	ldr	r3, [r4, #32]
 8016b22:	b11b      	cbz	r3, 8016b2c <__sinit+0x14>
 8016b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b28:	f7ff bff0 	b.w	8016b0c <__sfp_lock_release>
 8016b2c:	4b04      	ldr	r3, [pc, #16]	@ (8016b40 <__sinit+0x28>)
 8016b2e:	6223      	str	r3, [r4, #32]
 8016b30:	4b04      	ldr	r3, [pc, #16]	@ (8016b44 <__sinit+0x2c>)
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d1f5      	bne.n	8016b24 <__sinit+0xc>
 8016b38:	f7ff ffc4 	bl	8016ac4 <global_stdio_init.part.0>
 8016b3c:	e7f2      	b.n	8016b24 <__sinit+0xc>
 8016b3e:	bf00      	nop
 8016b40:	08016a85 	.word	0x08016a85
 8016b44:	20005cc0 	.word	0x20005cc0

08016b48 <_strtol_l.constprop.0>:
 8016b48:	2b24      	cmp	r3, #36	@ 0x24
 8016b4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b4e:	4686      	mov	lr, r0
 8016b50:	4690      	mov	r8, r2
 8016b52:	d801      	bhi.n	8016b58 <_strtol_l.constprop.0+0x10>
 8016b54:	2b01      	cmp	r3, #1
 8016b56:	d106      	bne.n	8016b66 <_strtol_l.constprop.0+0x1e>
 8016b58:	f000 f9d2 	bl	8016f00 <__errno>
 8016b5c:	2316      	movs	r3, #22
 8016b5e:	6003      	str	r3, [r0, #0]
 8016b60:	2000      	movs	r0, #0
 8016b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b66:	4834      	ldr	r0, [pc, #208]	@ (8016c38 <_strtol_l.constprop.0+0xf0>)
 8016b68:	460d      	mov	r5, r1
 8016b6a:	462a      	mov	r2, r5
 8016b6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016b70:	5d06      	ldrb	r6, [r0, r4]
 8016b72:	f016 0608 	ands.w	r6, r6, #8
 8016b76:	d1f8      	bne.n	8016b6a <_strtol_l.constprop.0+0x22>
 8016b78:	2c2d      	cmp	r4, #45	@ 0x2d
 8016b7a:	d12d      	bne.n	8016bd8 <_strtol_l.constprop.0+0x90>
 8016b7c:	782c      	ldrb	r4, [r5, #0]
 8016b7e:	2601      	movs	r6, #1
 8016b80:	1c95      	adds	r5, r2, #2
 8016b82:	f033 0210 	bics.w	r2, r3, #16
 8016b86:	d109      	bne.n	8016b9c <_strtol_l.constprop.0+0x54>
 8016b88:	2c30      	cmp	r4, #48	@ 0x30
 8016b8a:	d12a      	bne.n	8016be2 <_strtol_l.constprop.0+0x9a>
 8016b8c:	782a      	ldrb	r2, [r5, #0]
 8016b8e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016b92:	2a58      	cmp	r2, #88	@ 0x58
 8016b94:	d125      	bne.n	8016be2 <_strtol_l.constprop.0+0x9a>
 8016b96:	786c      	ldrb	r4, [r5, #1]
 8016b98:	2310      	movs	r3, #16
 8016b9a:	3502      	adds	r5, #2
 8016b9c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8016ba0:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8016ba4:	2200      	movs	r2, #0
 8016ba6:	fbbc f9f3 	udiv	r9, ip, r3
 8016baa:	4610      	mov	r0, r2
 8016bac:	fb03 ca19 	mls	sl, r3, r9, ip
 8016bb0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8016bb4:	2f09      	cmp	r7, #9
 8016bb6:	d81b      	bhi.n	8016bf0 <_strtol_l.constprop.0+0xa8>
 8016bb8:	463c      	mov	r4, r7
 8016bba:	42a3      	cmp	r3, r4
 8016bbc:	dd27      	ble.n	8016c0e <_strtol_l.constprop.0+0xc6>
 8016bbe:	1c57      	adds	r7, r2, #1
 8016bc0:	d007      	beq.n	8016bd2 <_strtol_l.constprop.0+0x8a>
 8016bc2:	4581      	cmp	r9, r0
 8016bc4:	d320      	bcc.n	8016c08 <_strtol_l.constprop.0+0xc0>
 8016bc6:	d101      	bne.n	8016bcc <_strtol_l.constprop.0+0x84>
 8016bc8:	45a2      	cmp	sl, r4
 8016bca:	db1d      	blt.n	8016c08 <_strtol_l.constprop.0+0xc0>
 8016bcc:	fb00 4003 	mla	r0, r0, r3, r4
 8016bd0:	2201      	movs	r2, #1
 8016bd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016bd6:	e7eb      	b.n	8016bb0 <_strtol_l.constprop.0+0x68>
 8016bd8:	2c2b      	cmp	r4, #43	@ 0x2b
 8016bda:	bf04      	itt	eq
 8016bdc:	782c      	ldrbeq	r4, [r5, #0]
 8016bde:	1c95      	addeq	r5, r2, #2
 8016be0:	e7cf      	b.n	8016b82 <_strtol_l.constprop.0+0x3a>
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	d1da      	bne.n	8016b9c <_strtol_l.constprop.0+0x54>
 8016be6:	2c30      	cmp	r4, #48	@ 0x30
 8016be8:	bf0c      	ite	eq
 8016bea:	2308      	moveq	r3, #8
 8016bec:	230a      	movne	r3, #10
 8016bee:	e7d5      	b.n	8016b9c <_strtol_l.constprop.0+0x54>
 8016bf0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8016bf4:	2f19      	cmp	r7, #25
 8016bf6:	d801      	bhi.n	8016bfc <_strtol_l.constprop.0+0xb4>
 8016bf8:	3c37      	subs	r4, #55	@ 0x37
 8016bfa:	e7de      	b.n	8016bba <_strtol_l.constprop.0+0x72>
 8016bfc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8016c00:	2f19      	cmp	r7, #25
 8016c02:	d804      	bhi.n	8016c0e <_strtol_l.constprop.0+0xc6>
 8016c04:	3c57      	subs	r4, #87	@ 0x57
 8016c06:	e7d8      	b.n	8016bba <_strtol_l.constprop.0+0x72>
 8016c08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016c0c:	e7e1      	b.n	8016bd2 <_strtol_l.constprop.0+0x8a>
 8016c0e:	1c53      	adds	r3, r2, #1
 8016c10:	d108      	bne.n	8016c24 <_strtol_l.constprop.0+0xdc>
 8016c12:	2322      	movs	r3, #34	@ 0x22
 8016c14:	f8ce 3000 	str.w	r3, [lr]
 8016c18:	4660      	mov	r0, ip
 8016c1a:	f1b8 0f00 	cmp.w	r8, #0
 8016c1e:	d0a0      	beq.n	8016b62 <_strtol_l.constprop.0+0x1a>
 8016c20:	1e69      	subs	r1, r5, #1
 8016c22:	e006      	b.n	8016c32 <_strtol_l.constprop.0+0xea>
 8016c24:	b106      	cbz	r6, 8016c28 <_strtol_l.constprop.0+0xe0>
 8016c26:	4240      	negs	r0, r0
 8016c28:	f1b8 0f00 	cmp.w	r8, #0
 8016c2c:	d099      	beq.n	8016b62 <_strtol_l.constprop.0+0x1a>
 8016c2e:	2a00      	cmp	r2, #0
 8016c30:	d1f6      	bne.n	8016c20 <_strtol_l.constprop.0+0xd8>
 8016c32:	f8c8 1000 	str.w	r1, [r8]
 8016c36:	e794      	b.n	8016b62 <_strtol_l.constprop.0+0x1a>
 8016c38:	0801895e 	.word	0x0801895e

08016c3c <strtol>:
 8016c3c:	4613      	mov	r3, r2
 8016c3e:	460a      	mov	r2, r1
 8016c40:	4601      	mov	r1, r0
 8016c42:	4802      	ldr	r0, [pc, #8]	@ (8016c4c <strtol+0x10>)
 8016c44:	6800      	ldr	r0, [r0, #0]
 8016c46:	f7ff bf7f 	b.w	8016b48 <_strtol_l.constprop.0>
 8016c4a:	bf00      	nop
 8016c4c:	200002c0 	.word	0x200002c0

08016c50 <_fwalk_sglue>:
 8016c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016c54:	4607      	mov	r7, r0
 8016c56:	4688      	mov	r8, r1
 8016c58:	4614      	mov	r4, r2
 8016c5a:	2600      	movs	r6, #0
 8016c5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016c60:	f1b9 0901 	subs.w	r9, r9, #1
 8016c64:	d505      	bpl.n	8016c72 <_fwalk_sglue+0x22>
 8016c66:	6824      	ldr	r4, [r4, #0]
 8016c68:	2c00      	cmp	r4, #0
 8016c6a:	d1f7      	bne.n	8016c5c <_fwalk_sglue+0xc>
 8016c6c:	4630      	mov	r0, r6
 8016c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016c72:	89ab      	ldrh	r3, [r5, #12]
 8016c74:	2b01      	cmp	r3, #1
 8016c76:	d907      	bls.n	8016c88 <_fwalk_sglue+0x38>
 8016c78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016c7c:	3301      	adds	r3, #1
 8016c7e:	d003      	beq.n	8016c88 <_fwalk_sglue+0x38>
 8016c80:	4629      	mov	r1, r5
 8016c82:	4638      	mov	r0, r7
 8016c84:	47c0      	blx	r8
 8016c86:	4306      	orrs	r6, r0
 8016c88:	3568      	adds	r5, #104	@ 0x68
 8016c8a:	e7e9      	b.n	8016c60 <_fwalk_sglue+0x10>

08016c8c <iprintf>:
 8016c8c:	b40f      	push	{r0, r1, r2, r3}
 8016c8e:	b507      	push	{r0, r1, r2, lr}
 8016c90:	4906      	ldr	r1, [pc, #24]	@ (8016cac <iprintf+0x20>)
 8016c92:	ab04      	add	r3, sp, #16
 8016c94:	6808      	ldr	r0, [r1, #0]
 8016c96:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c9a:	6881      	ldr	r1, [r0, #8]
 8016c9c:	9301      	str	r3, [sp, #4]
 8016c9e:	f000 fa01 	bl	80170a4 <_vfiprintf_r>
 8016ca2:	b003      	add	sp, #12
 8016ca4:	f85d eb04 	ldr.w	lr, [sp], #4
 8016ca8:	b004      	add	sp, #16
 8016caa:	4770      	bx	lr
 8016cac:	200002c0 	.word	0x200002c0

08016cb0 <_puts_r>:
 8016cb0:	6a03      	ldr	r3, [r0, #32]
 8016cb2:	b570      	push	{r4, r5, r6, lr}
 8016cb4:	6884      	ldr	r4, [r0, #8]
 8016cb6:	4605      	mov	r5, r0
 8016cb8:	460e      	mov	r6, r1
 8016cba:	b90b      	cbnz	r3, 8016cc0 <_puts_r+0x10>
 8016cbc:	f7ff ff2c 	bl	8016b18 <__sinit>
 8016cc0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016cc2:	07db      	lsls	r3, r3, #31
 8016cc4:	d405      	bmi.n	8016cd2 <_puts_r+0x22>
 8016cc6:	89a3      	ldrh	r3, [r4, #12]
 8016cc8:	0598      	lsls	r0, r3, #22
 8016cca:	d402      	bmi.n	8016cd2 <_puts_r+0x22>
 8016ccc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016cce:	f000 f942 	bl	8016f56 <__retarget_lock_acquire_recursive>
 8016cd2:	89a3      	ldrh	r3, [r4, #12]
 8016cd4:	0719      	lsls	r1, r3, #28
 8016cd6:	d502      	bpl.n	8016cde <_puts_r+0x2e>
 8016cd8:	6923      	ldr	r3, [r4, #16]
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d135      	bne.n	8016d4a <_puts_r+0x9a>
 8016cde:	4621      	mov	r1, r4
 8016ce0:	4628      	mov	r0, r5
 8016ce2:	f000 fdc5 	bl	8017870 <__swsetup_r>
 8016ce6:	b380      	cbz	r0, 8016d4a <_puts_r+0x9a>
 8016ce8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8016cec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016cee:	07da      	lsls	r2, r3, #31
 8016cf0:	d405      	bmi.n	8016cfe <_puts_r+0x4e>
 8016cf2:	89a3      	ldrh	r3, [r4, #12]
 8016cf4:	059b      	lsls	r3, r3, #22
 8016cf6:	d402      	bmi.n	8016cfe <_puts_r+0x4e>
 8016cf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016cfa:	f000 f92d 	bl	8016f58 <__retarget_lock_release_recursive>
 8016cfe:	4628      	mov	r0, r5
 8016d00:	bd70      	pop	{r4, r5, r6, pc}
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	da04      	bge.n	8016d10 <_puts_r+0x60>
 8016d06:	69a2      	ldr	r2, [r4, #24]
 8016d08:	429a      	cmp	r2, r3
 8016d0a:	dc17      	bgt.n	8016d3c <_puts_r+0x8c>
 8016d0c:	290a      	cmp	r1, #10
 8016d0e:	d015      	beq.n	8016d3c <_puts_r+0x8c>
 8016d10:	6823      	ldr	r3, [r4, #0]
 8016d12:	1c5a      	adds	r2, r3, #1
 8016d14:	6022      	str	r2, [r4, #0]
 8016d16:	7019      	strb	r1, [r3, #0]
 8016d18:	68a3      	ldr	r3, [r4, #8]
 8016d1a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016d1e:	3b01      	subs	r3, #1
 8016d20:	60a3      	str	r3, [r4, #8]
 8016d22:	2900      	cmp	r1, #0
 8016d24:	d1ed      	bne.n	8016d02 <_puts_r+0x52>
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	da11      	bge.n	8016d4e <_puts_r+0x9e>
 8016d2a:	4622      	mov	r2, r4
 8016d2c:	210a      	movs	r1, #10
 8016d2e:	4628      	mov	r0, r5
 8016d30:	f000 fd60 	bl	80177f4 <__swbuf_r>
 8016d34:	3001      	adds	r0, #1
 8016d36:	d0d7      	beq.n	8016ce8 <_puts_r+0x38>
 8016d38:	250a      	movs	r5, #10
 8016d3a:	e7d7      	b.n	8016cec <_puts_r+0x3c>
 8016d3c:	4622      	mov	r2, r4
 8016d3e:	4628      	mov	r0, r5
 8016d40:	f000 fd58 	bl	80177f4 <__swbuf_r>
 8016d44:	3001      	adds	r0, #1
 8016d46:	d1e7      	bne.n	8016d18 <_puts_r+0x68>
 8016d48:	e7ce      	b.n	8016ce8 <_puts_r+0x38>
 8016d4a:	3e01      	subs	r6, #1
 8016d4c:	e7e4      	b.n	8016d18 <_puts_r+0x68>
 8016d4e:	6823      	ldr	r3, [r4, #0]
 8016d50:	1c5a      	adds	r2, r3, #1
 8016d52:	6022      	str	r2, [r4, #0]
 8016d54:	220a      	movs	r2, #10
 8016d56:	701a      	strb	r2, [r3, #0]
 8016d58:	e7ee      	b.n	8016d38 <_puts_r+0x88>
	...

08016d5c <puts>:
 8016d5c:	4b02      	ldr	r3, [pc, #8]	@ (8016d68 <puts+0xc>)
 8016d5e:	4601      	mov	r1, r0
 8016d60:	6818      	ldr	r0, [r3, #0]
 8016d62:	f7ff bfa5 	b.w	8016cb0 <_puts_r>
 8016d66:	bf00      	nop
 8016d68:	200002c0 	.word	0x200002c0

08016d6c <strtok>:
 8016d6c:	4b16      	ldr	r3, [pc, #88]	@ (8016dc8 <strtok+0x5c>)
 8016d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d72:	681f      	ldr	r7, [r3, #0]
 8016d74:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8016d76:	4605      	mov	r5, r0
 8016d78:	460e      	mov	r6, r1
 8016d7a:	b9ec      	cbnz	r4, 8016db8 <strtok+0x4c>
 8016d7c:	2050      	movs	r0, #80	@ 0x50
 8016d7e:	f7ff fd89 	bl	8016894 <malloc>
 8016d82:	4602      	mov	r2, r0
 8016d84:	6478      	str	r0, [r7, #68]	@ 0x44
 8016d86:	b920      	cbnz	r0, 8016d92 <strtok+0x26>
 8016d88:	4b10      	ldr	r3, [pc, #64]	@ (8016dcc <strtok+0x60>)
 8016d8a:	4811      	ldr	r0, [pc, #68]	@ (8016dd0 <strtok+0x64>)
 8016d8c:	215b      	movs	r1, #91	@ 0x5b
 8016d8e:	f000 f8f7 	bl	8016f80 <__assert_func>
 8016d92:	e9c0 4400 	strd	r4, r4, [r0]
 8016d96:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8016d9a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8016d9e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8016da2:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8016da6:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8016daa:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8016dae:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8016db2:	6184      	str	r4, [r0, #24]
 8016db4:	7704      	strb	r4, [r0, #28]
 8016db6:	6244      	str	r4, [r0, #36]	@ 0x24
 8016db8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016dba:	4631      	mov	r1, r6
 8016dbc:	4628      	mov	r0, r5
 8016dbe:	2301      	movs	r3, #1
 8016dc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016dc4:	f000 b806 	b.w	8016dd4 <__strtok_r>
 8016dc8:	200002c0 	.word	0x200002c0
 8016dcc:	080188ec 	.word	0x080188ec
 8016dd0:	08018903 	.word	0x08018903

08016dd4 <__strtok_r>:
 8016dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016dd6:	4604      	mov	r4, r0
 8016dd8:	b908      	cbnz	r0, 8016dde <__strtok_r+0xa>
 8016dda:	6814      	ldr	r4, [r2, #0]
 8016ddc:	b144      	cbz	r4, 8016df0 <__strtok_r+0x1c>
 8016dde:	4620      	mov	r0, r4
 8016de0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8016de4:	460f      	mov	r7, r1
 8016de6:	f817 6b01 	ldrb.w	r6, [r7], #1
 8016dea:	b91e      	cbnz	r6, 8016df4 <__strtok_r+0x20>
 8016dec:	b965      	cbnz	r5, 8016e08 <__strtok_r+0x34>
 8016dee:	6015      	str	r5, [r2, #0]
 8016df0:	2000      	movs	r0, #0
 8016df2:	e005      	b.n	8016e00 <__strtok_r+0x2c>
 8016df4:	42b5      	cmp	r5, r6
 8016df6:	d1f6      	bne.n	8016de6 <__strtok_r+0x12>
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d1f0      	bne.n	8016dde <__strtok_r+0xa>
 8016dfc:	6014      	str	r4, [r2, #0]
 8016dfe:	7003      	strb	r3, [r0, #0]
 8016e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e02:	461c      	mov	r4, r3
 8016e04:	e00c      	b.n	8016e20 <__strtok_r+0x4c>
 8016e06:	b915      	cbnz	r5, 8016e0e <__strtok_r+0x3a>
 8016e08:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016e0c:	460e      	mov	r6, r1
 8016e0e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8016e12:	42ab      	cmp	r3, r5
 8016e14:	d1f7      	bne.n	8016e06 <__strtok_r+0x32>
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d0f3      	beq.n	8016e02 <__strtok_r+0x2e>
 8016e1a:	2300      	movs	r3, #0
 8016e1c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8016e20:	6014      	str	r4, [r2, #0]
 8016e22:	e7ed      	b.n	8016e00 <__strtok_r+0x2c>

08016e24 <memset>:
 8016e24:	4402      	add	r2, r0
 8016e26:	4603      	mov	r3, r0
 8016e28:	4293      	cmp	r3, r2
 8016e2a:	d100      	bne.n	8016e2e <memset+0xa>
 8016e2c:	4770      	bx	lr
 8016e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8016e32:	e7f9      	b.n	8016e28 <memset+0x4>

08016e34 <_reclaim_reent>:
 8016e34:	4b29      	ldr	r3, [pc, #164]	@ (8016edc <_reclaim_reent+0xa8>)
 8016e36:	681b      	ldr	r3, [r3, #0]
 8016e38:	4283      	cmp	r3, r0
 8016e3a:	b570      	push	{r4, r5, r6, lr}
 8016e3c:	4604      	mov	r4, r0
 8016e3e:	d04b      	beq.n	8016ed8 <_reclaim_reent+0xa4>
 8016e40:	69c3      	ldr	r3, [r0, #28]
 8016e42:	b1ab      	cbz	r3, 8016e70 <_reclaim_reent+0x3c>
 8016e44:	68db      	ldr	r3, [r3, #12]
 8016e46:	b16b      	cbz	r3, 8016e64 <_reclaim_reent+0x30>
 8016e48:	2500      	movs	r5, #0
 8016e4a:	69e3      	ldr	r3, [r4, #28]
 8016e4c:	68db      	ldr	r3, [r3, #12]
 8016e4e:	5959      	ldr	r1, [r3, r5]
 8016e50:	2900      	cmp	r1, #0
 8016e52:	d13b      	bne.n	8016ecc <_reclaim_reent+0x98>
 8016e54:	3504      	adds	r5, #4
 8016e56:	2d80      	cmp	r5, #128	@ 0x80
 8016e58:	d1f7      	bne.n	8016e4a <_reclaim_reent+0x16>
 8016e5a:	69e3      	ldr	r3, [r4, #28]
 8016e5c:	4620      	mov	r0, r4
 8016e5e:	68d9      	ldr	r1, [r3, #12]
 8016e60:	f000 f8ac 	bl	8016fbc <_free_r>
 8016e64:	69e3      	ldr	r3, [r4, #28]
 8016e66:	6819      	ldr	r1, [r3, #0]
 8016e68:	b111      	cbz	r1, 8016e70 <_reclaim_reent+0x3c>
 8016e6a:	4620      	mov	r0, r4
 8016e6c:	f000 f8a6 	bl	8016fbc <_free_r>
 8016e70:	6961      	ldr	r1, [r4, #20]
 8016e72:	b111      	cbz	r1, 8016e7a <_reclaim_reent+0x46>
 8016e74:	4620      	mov	r0, r4
 8016e76:	f000 f8a1 	bl	8016fbc <_free_r>
 8016e7a:	69e1      	ldr	r1, [r4, #28]
 8016e7c:	b111      	cbz	r1, 8016e84 <_reclaim_reent+0x50>
 8016e7e:	4620      	mov	r0, r4
 8016e80:	f000 f89c 	bl	8016fbc <_free_r>
 8016e84:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016e86:	b111      	cbz	r1, 8016e8e <_reclaim_reent+0x5a>
 8016e88:	4620      	mov	r0, r4
 8016e8a:	f000 f897 	bl	8016fbc <_free_r>
 8016e8e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016e90:	b111      	cbz	r1, 8016e98 <_reclaim_reent+0x64>
 8016e92:	4620      	mov	r0, r4
 8016e94:	f000 f892 	bl	8016fbc <_free_r>
 8016e98:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8016e9a:	b111      	cbz	r1, 8016ea2 <_reclaim_reent+0x6e>
 8016e9c:	4620      	mov	r0, r4
 8016e9e:	f000 f88d 	bl	8016fbc <_free_r>
 8016ea2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8016ea4:	b111      	cbz	r1, 8016eac <_reclaim_reent+0x78>
 8016ea6:	4620      	mov	r0, r4
 8016ea8:	f000 f888 	bl	8016fbc <_free_r>
 8016eac:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8016eae:	b111      	cbz	r1, 8016eb6 <_reclaim_reent+0x82>
 8016eb0:	4620      	mov	r0, r4
 8016eb2:	f000 f883 	bl	8016fbc <_free_r>
 8016eb6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8016eb8:	b111      	cbz	r1, 8016ec0 <_reclaim_reent+0x8c>
 8016eba:	4620      	mov	r0, r4
 8016ebc:	f000 f87e 	bl	8016fbc <_free_r>
 8016ec0:	6a23      	ldr	r3, [r4, #32]
 8016ec2:	b14b      	cbz	r3, 8016ed8 <_reclaim_reent+0xa4>
 8016ec4:	4620      	mov	r0, r4
 8016ec6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016eca:	4718      	bx	r3
 8016ecc:	680e      	ldr	r6, [r1, #0]
 8016ece:	4620      	mov	r0, r4
 8016ed0:	f000 f874 	bl	8016fbc <_free_r>
 8016ed4:	4631      	mov	r1, r6
 8016ed6:	e7bb      	b.n	8016e50 <_reclaim_reent+0x1c>
 8016ed8:	bd70      	pop	{r4, r5, r6, pc}
 8016eda:	bf00      	nop
 8016edc:	200002c0 	.word	0x200002c0

08016ee0 <_sbrk_r>:
 8016ee0:	b538      	push	{r3, r4, r5, lr}
 8016ee2:	4d06      	ldr	r5, [pc, #24]	@ (8016efc <_sbrk_r+0x1c>)
 8016ee4:	2300      	movs	r3, #0
 8016ee6:	4604      	mov	r4, r0
 8016ee8:	4608      	mov	r0, r1
 8016eea:	602b      	str	r3, [r5, #0]
 8016eec:	f7ee f9fe 	bl	80052ec <_sbrk>
 8016ef0:	1c43      	adds	r3, r0, #1
 8016ef2:	d102      	bne.n	8016efa <_sbrk_r+0x1a>
 8016ef4:	682b      	ldr	r3, [r5, #0]
 8016ef6:	b103      	cbz	r3, 8016efa <_sbrk_r+0x1a>
 8016ef8:	6023      	str	r3, [r4, #0]
 8016efa:	bd38      	pop	{r3, r4, r5, pc}
 8016efc:	20005cc4 	.word	0x20005cc4

08016f00 <__errno>:
 8016f00:	4b01      	ldr	r3, [pc, #4]	@ (8016f08 <__errno+0x8>)
 8016f02:	6818      	ldr	r0, [r3, #0]
 8016f04:	4770      	bx	lr
 8016f06:	bf00      	nop
 8016f08:	200002c0 	.word	0x200002c0

08016f0c <__libc_init_array>:
 8016f0c:	b570      	push	{r4, r5, r6, lr}
 8016f0e:	4d0d      	ldr	r5, [pc, #52]	@ (8016f44 <__libc_init_array+0x38>)
 8016f10:	4c0d      	ldr	r4, [pc, #52]	@ (8016f48 <__libc_init_array+0x3c>)
 8016f12:	1b64      	subs	r4, r4, r5
 8016f14:	10a4      	asrs	r4, r4, #2
 8016f16:	2600      	movs	r6, #0
 8016f18:	42a6      	cmp	r6, r4
 8016f1a:	d109      	bne.n	8016f30 <__libc_init_array+0x24>
 8016f1c:	4d0b      	ldr	r5, [pc, #44]	@ (8016f4c <__libc_init_array+0x40>)
 8016f1e:	4c0c      	ldr	r4, [pc, #48]	@ (8016f50 <__libc_init_array+0x44>)
 8016f20:	f000 fe58 	bl	8017bd4 <_init>
 8016f24:	1b64      	subs	r4, r4, r5
 8016f26:	10a4      	asrs	r4, r4, #2
 8016f28:	2600      	movs	r6, #0
 8016f2a:	42a6      	cmp	r6, r4
 8016f2c:	d105      	bne.n	8016f3a <__libc_init_array+0x2e>
 8016f2e:	bd70      	pop	{r4, r5, r6, pc}
 8016f30:	f855 3b04 	ldr.w	r3, [r5], #4
 8016f34:	4798      	blx	r3
 8016f36:	3601      	adds	r6, #1
 8016f38:	e7ee      	b.n	8016f18 <__libc_init_array+0xc>
 8016f3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8016f3e:	4798      	blx	r3
 8016f40:	3601      	adds	r6, #1
 8016f42:	e7f2      	b.n	8016f2a <__libc_init_array+0x1e>
 8016f44:	08018ad8 	.word	0x08018ad8
 8016f48:	08018ad8 	.word	0x08018ad8
 8016f4c:	08018ad8 	.word	0x08018ad8
 8016f50:	08018adc 	.word	0x08018adc

08016f54 <__retarget_lock_init_recursive>:
 8016f54:	4770      	bx	lr

08016f56 <__retarget_lock_acquire_recursive>:
 8016f56:	4770      	bx	lr

08016f58 <__retarget_lock_release_recursive>:
 8016f58:	4770      	bx	lr

08016f5a <__aeabi_memclr>:
 8016f5a:	2200      	movs	r2, #0
 8016f5c:	f7ec bc9d 	b.w	800389a <__aeabi_memset>

08016f60 <memcpy>:
 8016f60:	440a      	add	r2, r1
 8016f62:	4291      	cmp	r1, r2
 8016f64:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8016f68:	d100      	bne.n	8016f6c <memcpy+0xc>
 8016f6a:	4770      	bx	lr
 8016f6c:	b510      	push	{r4, lr}
 8016f6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016f72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016f76:	4291      	cmp	r1, r2
 8016f78:	d1f9      	bne.n	8016f6e <memcpy+0xe>
 8016f7a:	bd10      	pop	{r4, pc}

08016f7c <__aeabi_memcpy>:
 8016f7c:	f7ff bff0 	b.w	8016f60 <memcpy>

08016f80 <__assert_func>:
 8016f80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016f82:	4614      	mov	r4, r2
 8016f84:	461a      	mov	r2, r3
 8016f86:	4b09      	ldr	r3, [pc, #36]	@ (8016fac <__assert_func+0x2c>)
 8016f88:	681b      	ldr	r3, [r3, #0]
 8016f8a:	4605      	mov	r5, r0
 8016f8c:	68d8      	ldr	r0, [r3, #12]
 8016f8e:	b954      	cbnz	r4, 8016fa6 <__assert_func+0x26>
 8016f90:	4b07      	ldr	r3, [pc, #28]	@ (8016fb0 <__assert_func+0x30>)
 8016f92:	461c      	mov	r4, r3
 8016f94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016f98:	9100      	str	r1, [sp, #0]
 8016f9a:	462b      	mov	r3, r5
 8016f9c:	4905      	ldr	r1, [pc, #20]	@ (8016fb4 <__assert_func+0x34>)
 8016f9e:	f000 fc17 	bl	80177d0 <fiprintf>
 8016fa2:	f000 fd85 	bl	8017ab0 <abort>
 8016fa6:	4b04      	ldr	r3, [pc, #16]	@ (8016fb8 <__assert_func+0x38>)
 8016fa8:	e7f4      	b.n	8016f94 <__assert_func+0x14>
 8016faa:	bf00      	nop
 8016fac:	200002c0 	.word	0x200002c0
 8016fb0:	08018a99 	.word	0x08018a99
 8016fb4:	08018a6b 	.word	0x08018a6b
 8016fb8:	08018a5e 	.word	0x08018a5e

08016fbc <_free_r>:
 8016fbc:	b538      	push	{r3, r4, r5, lr}
 8016fbe:	4605      	mov	r5, r0
 8016fc0:	2900      	cmp	r1, #0
 8016fc2:	d041      	beq.n	8017048 <_free_r+0x8c>
 8016fc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016fc8:	1f0c      	subs	r4, r1, #4
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	bfb8      	it	lt
 8016fce:	18e4      	addlt	r4, r4, r3
 8016fd0:	f7ff fd0a 	bl	80169e8 <__malloc_lock>
 8016fd4:	4a1d      	ldr	r2, [pc, #116]	@ (801704c <_free_r+0x90>)
 8016fd6:	6813      	ldr	r3, [r2, #0]
 8016fd8:	b933      	cbnz	r3, 8016fe8 <_free_r+0x2c>
 8016fda:	6063      	str	r3, [r4, #4]
 8016fdc:	6014      	str	r4, [r2, #0]
 8016fde:	4628      	mov	r0, r5
 8016fe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016fe4:	f7ff bd06 	b.w	80169f4 <__malloc_unlock>
 8016fe8:	42a3      	cmp	r3, r4
 8016fea:	d908      	bls.n	8016ffe <_free_r+0x42>
 8016fec:	6820      	ldr	r0, [r4, #0]
 8016fee:	1821      	adds	r1, r4, r0
 8016ff0:	428b      	cmp	r3, r1
 8016ff2:	bf01      	itttt	eq
 8016ff4:	6819      	ldreq	r1, [r3, #0]
 8016ff6:	685b      	ldreq	r3, [r3, #4]
 8016ff8:	1809      	addeq	r1, r1, r0
 8016ffa:	6021      	streq	r1, [r4, #0]
 8016ffc:	e7ed      	b.n	8016fda <_free_r+0x1e>
 8016ffe:	461a      	mov	r2, r3
 8017000:	685b      	ldr	r3, [r3, #4]
 8017002:	b10b      	cbz	r3, 8017008 <_free_r+0x4c>
 8017004:	42a3      	cmp	r3, r4
 8017006:	d9fa      	bls.n	8016ffe <_free_r+0x42>
 8017008:	6811      	ldr	r1, [r2, #0]
 801700a:	1850      	adds	r0, r2, r1
 801700c:	42a0      	cmp	r0, r4
 801700e:	d10b      	bne.n	8017028 <_free_r+0x6c>
 8017010:	6820      	ldr	r0, [r4, #0]
 8017012:	4401      	add	r1, r0
 8017014:	1850      	adds	r0, r2, r1
 8017016:	4283      	cmp	r3, r0
 8017018:	6011      	str	r1, [r2, #0]
 801701a:	d1e0      	bne.n	8016fde <_free_r+0x22>
 801701c:	6818      	ldr	r0, [r3, #0]
 801701e:	685b      	ldr	r3, [r3, #4]
 8017020:	6053      	str	r3, [r2, #4]
 8017022:	4408      	add	r0, r1
 8017024:	6010      	str	r0, [r2, #0]
 8017026:	e7da      	b.n	8016fde <_free_r+0x22>
 8017028:	d902      	bls.n	8017030 <_free_r+0x74>
 801702a:	230c      	movs	r3, #12
 801702c:	602b      	str	r3, [r5, #0]
 801702e:	e7d6      	b.n	8016fde <_free_r+0x22>
 8017030:	6820      	ldr	r0, [r4, #0]
 8017032:	1821      	adds	r1, r4, r0
 8017034:	428b      	cmp	r3, r1
 8017036:	bf04      	itt	eq
 8017038:	6819      	ldreq	r1, [r3, #0]
 801703a:	685b      	ldreq	r3, [r3, #4]
 801703c:	6063      	str	r3, [r4, #4]
 801703e:	bf04      	itt	eq
 8017040:	1809      	addeq	r1, r1, r0
 8017042:	6021      	streq	r1, [r4, #0]
 8017044:	6054      	str	r4, [r2, #4]
 8017046:	e7ca      	b.n	8016fde <_free_r+0x22>
 8017048:	bd38      	pop	{r3, r4, r5, pc}
 801704a:	bf00      	nop
 801704c:	20005b84 	.word	0x20005b84

08017050 <__sfputc_r>:
 8017050:	6893      	ldr	r3, [r2, #8]
 8017052:	3b01      	subs	r3, #1
 8017054:	2b00      	cmp	r3, #0
 8017056:	b410      	push	{r4}
 8017058:	6093      	str	r3, [r2, #8]
 801705a:	da08      	bge.n	801706e <__sfputc_r+0x1e>
 801705c:	6994      	ldr	r4, [r2, #24]
 801705e:	42a3      	cmp	r3, r4
 8017060:	db01      	blt.n	8017066 <__sfputc_r+0x16>
 8017062:	290a      	cmp	r1, #10
 8017064:	d103      	bne.n	801706e <__sfputc_r+0x1e>
 8017066:	f85d 4b04 	ldr.w	r4, [sp], #4
 801706a:	f000 bbc3 	b.w	80177f4 <__swbuf_r>
 801706e:	6813      	ldr	r3, [r2, #0]
 8017070:	1c58      	adds	r0, r3, #1
 8017072:	6010      	str	r0, [r2, #0]
 8017074:	7019      	strb	r1, [r3, #0]
 8017076:	4608      	mov	r0, r1
 8017078:	f85d 4b04 	ldr.w	r4, [sp], #4
 801707c:	4770      	bx	lr

0801707e <__sfputs_r>:
 801707e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017080:	4606      	mov	r6, r0
 8017082:	460f      	mov	r7, r1
 8017084:	4614      	mov	r4, r2
 8017086:	18d5      	adds	r5, r2, r3
 8017088:	42ac      	cmp	r4, r5
 801708a:	d101      	bne.n	8017090 <__sfputs_r+0x12>
 801708c:	2000      	movs	r0, #0
 801708e:	e007      	b.n	80170a0 <__sfputs_r+0x22>
 8017090:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017094:	463a      	mov	r2, r7
 8017096:	4630      	mov	r0, r6
 8017098:	f7ff ffda 	bl	8017050 <__sfputc_r>
 801709c:	1c43      	adds	r3, r0, #1
 801709e:	d1f3      	bne.n	8017088 <__sfputs_r+0xa>
 80170a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080170a4 <_vfiprintf_r>:
 80170a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170a8:	460d      	mov	r5, r1
 80170aa:	b09d      	sub	sp, #116	@ 0x74
 80170ac:	4614      	mov	r4, r2
 80170ae:	4698      	mov	r8, r3
 80170b0:	4606      	mov	r6, r0
 80170b2:	b118      	cbz	r0, 80170bc <_vfiprintf_r+0x18>
 80170b4:	6a03      	ldr	r3, [r0, #32]
 80170b6:	b90b      	cbnz	r3, 80170bc <_vfiprintf_r+0x18>
 80170b8:	f7ff fd2e 	bl	8016b18 <__sinit>
 80170bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80170be:	07d9      	lsls	r1, r3, #31
 80170c0:	d405      	bmi.n	80170ce <_vfiprintf_r+0x2a>
 80170c2:	89ab      	ldrh	r3, [r5, #12]
 80170c4:	059a      	lsls	r2, r3, #22
 80170c6:	d402      	bmi.n	80170ce <_vfiprintf_r+0x2a>
 80170c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80170ca:	f7ff ff44 	bl	8016f56 <__retarget_lock_acquire_recursive>
 80170ce:	89ab      	ldrh	r3, [r5, #12]
 80170d0:	071b      	lsls	r3, r3, #28
 80170d2:	d501      	bpl.n	80170d8 <_vfiprintf_r+0x34>
 80170d4:	692b      	ldr	r3, [r5, #16]
 80170d6:	b99b      	cbnz	r3, 8017100 <_vfiprintf_r+0x5c>
 80170d8:	4629      	mov	r1, r5
 80170da:	4630      	mov	r0, r6
 80170dc:	f000 fbc8 	bl	8017870 <__swsetup_r>
 80170e0:	b170      	cbz	r0, 8017100 <_vfiprintf_r+0x5c>
 80170e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80170e4:	07dc      	lsls	r4, r3, #31
 80170e6:	d504      	bpl.n	80170f2 <_vfiprintf_r+0x4e>
 80170e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80170ec:	b01d      	add	sp, #116	@ 0x74
 80170ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170f2:	89ab      	ldrh	r3, [r5, #12]
 80170f4:	0598      	lsls	r0, r3, #22
 80170f6:	d4f7      	bmi.n	80170e8 <_vfiprintf_r+0x44>
 80170f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80170fa:	f7ff ff2d 	bl	8016f58 <__retarget_lock_release_recursive>
 80170fe:	e7f3      	b.n	80170e8 <_vfiprintf_r+0x44>
 8017100:	2300      	movs	r3, #0
 8017102:	9309      	str	r3, [sp, #36]	@ 0x24
 8017104:	2320      	movs	r3, #32
 8017106:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801710a:	f8cd 800c 	str.w	r8, [sp, #12]
 801710e:	2330      	movs	r3, #48	@ 0x30
 8017110:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80172c0 <_vfiprintf_r+0x21c>
 8017114:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017118:	f04f 0901 	mov.w	r9, #1
 801711c:	4623      	mov	r3, r4
 801711e:	469a      	mov	sl, r3
 8017120:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017124:	b10a      	cbz	r2, 801712a <_vfiprintf_r+0x86>
 8017126:	2a25      	cmp	r2, #37	@ 0x25
 8017128:	d1f9      	bne.n	801711e <_vfiprintf_r+0x7a>
 801712a:	ebba 0b04 	subs.w	fp, sl, r4
 801712e:	d00b      	beq.n	8017148 <_vfiprintf_r+0xa4>
 8017130:	465b      	mov	r3, fp
 8017132:	4622      	mov	r2, r4
 8017134:	4629      	mov	r1, r5
 8017136:	4630      	mov	r0, r6
 8017138:	f7ff ffa1 	bl	801707e <__sfputs_r>
 801713c:	3001      	adds	r0, #1
 801713e:	f000 80a7 	beq.w	8017290 <_vfiprintf_r+0x1ec>
 8017142:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017144:	445a      	add	r2, fp
 8017146:	9209      	str	r2, [sp, #36]	@ 0x24
 8017148:	f89a 3000 	ldrb.w	r3, [sl]
 801714c:	2b00      	cmp	r3, #0
 801714e:	f000 809f 	beq.w	8017290 <_vfiprintf_r+0x1ec>
 8017152:	2300      	movs	r3, #0
 8017154:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017158:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801715c:	f10a 0a01 	add.w	sl, sl, #1
 8017160:	9304      	str	r3, [sp, #16]
 8017162:	9307      	str	r3, [sp, #28]
 8017164:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017168:	931a      	str	r3, [sp, #104]	@ 0x68
 801716a:	4654      	mov	r4, sl
 801716c:	2205      	movs	r2, #5
 801716e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017172:	4853      	ldr	r0, [pc, #332]	@ (80172c0 <_vfiprintf_r+0x21c>)
 8017174:	f7ec fbf4 	bl	8003960 <memchr>
 8017178:	9a04      	ldr	r2, [sp, #16]
 801717a:	b9d8      	cbnz	r0, 80171b4 <_vfiprintf_r+0x110>
 801717c:	06d1      	lsls	r1, r2, #27
 801717e:	bf44      	itt	mi
 8017180:	2320      	movmi	r3, #32
 8017182:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017186:	0713      	lsls	r3, r2, #28
 8017188:	bf44      	itt	mi
 801718a:	232b      	movmi	r3, #43	@ 0x2b
 801718c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017190:	f89a 3000 	ldrb.w	r3, [sl]
 8017194:	2b2a      	cmp	r3, #42	@ 0x2a
 8017196:	d015      	beq.n	80171c4 <_vfiprintf_r+0x120>
 8017198:	9a07      	ldr	r2, [sp, #28]
 801719a:	4654      	mov	r4, sl
 801719c:	2000      	movs	r0, #0
 801719e:	f04f 0c0a 	mov.w	ip, #10
 80171a2:	4621      	mov	r1, r4
 80171a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80171a8:	3b30      	subs	r3, #48	@ 0x30
 80171aa:	2b09      	cmp	r3, #9
 80171ac:	d94b      	bls.n	8017246 <_vfiprintf_r+0x1a2>
 80171ae:	b1b0      	cbz	r0, 80171de <_vfiprintf_r+0x13a>
 80171b0:	9207      	str	r2, [sp, #28]
 80171b2:	e014      	b.n	80171de <_vfiprintf_r+0x13a>
 80171b4:	eba0 0308 	sub.w	r3, r0, r8
 80171b8:	fa09 f303 	lsl.w	r3, r9, r3
 80171bc:	4313      	orrs	r3, r2
 80171be:	9304      	str	r3, [sp, #16]
 80171c0:	46a2      	mov	sl, r4
 80171c2:	e7d2      	b.n	801716a <_vfiprintf_r+0xc6>
 80171c4:	9b03      	ldr	r3, [sp, #12]
 80171c6:	1d19      	adds	r1, r3, #4
 80171c8:	681b      	ldr	r3, [r3, #0]
 80171ca:	9103      	str	r1, [sp, #12]
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	bfbb      	ittet	lt
 80171d0:	425b      	neglt	r3, r3
 80171d2:	f042 0202 	orrlt.w	r2, r2, #2
 80171d6:	9307      	strge	r3, [sp, #28]
 80171d8:	9307      	strlt	r3, [sp, #28]
 80171da:	bfb8      	it	lt
 80171dc:	9204      	strlt	r2, [sp, #16]
 80171de:	7823      	ldrb	r3, [r4, #0]
 80171e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80171e2:	d10a      	bne.n	80171fa <_vfiprintf_r+0x156>
 80171e4:	7863      	ldrb	r3, [r4, #1]
 80171e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80171e8:	d132      	bne.n	8017250 <_vfiprintf_r+0x1ac>
 80171ea:	9b03      	ldr	r3, [sp, #12]
 80171ec:	1d1a      	adds	r2, r3, #4
 80171ee:	681b      	ldr	r3, [r3, #0]
 80171f0:	9203      	str	r2, [sp, #12]
 80171f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80171f6:	3402      	adds	r4, #2
 80171f8:	9305      	str	r3, [sp, #20]
 80171fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80172d0 <_vfiprintf_r+0x22c>
 80171fe:	7821      	ldrb	r1, [r4, #0]
 8017200:	2203      	movs	r2, #3
 8017202:	4650      	mov	r0, sl
 8017204:	f7ec fbac 	bl	8003960 <memchr>
 8017208:	b138      	cbz	r0, 801721a <_vfiprintf_r+0x176>
 801720a:	9b04      	ldr	r3, [sp, #16]
 801720c:	eba0 000a 	sub.w	r0, r0, sl
 8017210:	2240      	movs	r2, #64	@ 0x40
 8017212:	4082      	lsls	r2, r0
 8017214:	4313      	orrs	r3, r2
 8017216:	3401      	adds	r4, #1
 8017218:	9304      	str	r3, [sp, #16]
 801721a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801721e:	4829      	ldr	r0, [pc, #164]	@ (80172c4 <_vfiprintf_r+0x220>)
 8017220:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017224:	2206      	movs	r2, #6
 8017226:	f7ec fb9b 	bl	8003960 <memchr>
 801722a:	2800      	cmp	r0, #0
 801722c:	d03f      	beq.n	80172ae <_vfiprintf_r+0x20a>
 801722e:	4b26      	ldr	r3, [pc, #152]	@ (80172c8 <_vfiprintf_r+0x224>)
 8017230:	bb1b      	cbnz	r3, 801727a <_vfiprintf_r+0x1d6>
 8017232:	9b03      	ldr	r3, [sp, #12]
 8017234:	3307      	adds	r3, #7
 8017236:	f023 0307 	bic.w	r3, r3, #7
 801723a:	3308      	adds	r3, #8
 801723c:	9303      	str	r3, [sp, #12]
 801723e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017240:	443b      	add	r3, r7
 8017242:	9309      	str	r3, [sp, #36]	@ 0x24
 8017244:	e76a      	b.n	801711c <_vfiprintf_r+0x78>
 8017246:	fb0c 3202 	mla	r2, ip, r2, r3
 801724a:	460c      	mov	r4, r1
 801724c:	2001      	movs	r0, #1
 801724e:	e7a8      	b.n	80171a2 <_vfiprintf_r+0xfe>
 8017250:	2300      	movs	r3, #0
 8017252:	3401      	adds	r4, #1
 8017254:	9305      	str	r3, [sp, #20]
 8017256:	4619      	mov	r1, r3
 8017258:	f04f 0c0a 	mov.w	ip, #10
 801725c:	4620      	mov	r0, r4
 801725e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017262:	3a30      	subs	r2, #48	@ 0x30
 8017264:	2a09      	cmp	r2, #9
 8017266:	d903      	bls.n	8017270 <_vfiprintf_r+0x1cc>
 8017268:	2b00      	cmp	r3, #0
 801726a:	d0c6      	beq.n	80171fa <_vfiprintf_r+0x156>
 801726c:	9105      	str	r1, [sp, #20]
 801726e:	e7c4      	b.n	80171fa <_vfiprintf_r+0x156>
 8017270:	fb0c 2101 	mla	r1, ip, r1, r2
 8017274:	4604      	mov	r4, r0
 8017276:	2301      	movs	r3, #1
 8017278:	e7f0      	b.n	801725c <_vfiprintf_r+0x1b8>
 801727a:	ab03      	add	r3, sp, #12
 801727c:	9300      	str	r3, [sp, #0]
 801727e:	462a      	mov	r2, r5
 8017280:	4b12      	ldr	r3, [pc, #72]	@ (80172cc <_vfiprintf_r+0x228>)
 8017282:	a904      	add	r1, sp, #16
 8017284:	4630      	mov	r0, r6
 8017286:	f3af 8000 	nop.w
 801728a:	4607      	mov	r7, r0
 801728c:	1c78      	adds	r0, r7, #1
 801728e:	d1d6      	bne.n	801723e <_vfiprintf_r+0x19a>
 8017290:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017292:	07d9      	lsls	r1, r3, #31
 8017294:	d405      	bmi.n	80172a2 <_vfiprintf_r+0x1fe>
 8017296:	89ab      	ldrh	r3, [r5, #12]
 8017298:	059a      	lsls	r2, r3, #22
 801729a:	d402      	bmi.n	80172a2 <_vfiprintf_r+0x1fe>
 801729c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801729e:	f7ff fe5b 	bl	8016f58 <__retarget_lock_release_recursive>
 80172a2:	89ab      	ldrh	r3, [r5, #12]
 80172a4:	065b      	lsls	r3, r3, #25
 80172a6:	f53f af1f 	bmi.w	80170e8 <_vfiprintf_r+0x44>
 80172aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80172ac:	e71e      	b.n	80170ec <_vfiprintf_r+0x48>
 80172ae:	ab03      	add	r3, sp, #12
 80172b0:	9300      	str	r3, [sp, #0]
 80172b2:	462a      	mov	r2, r5
 80172b4:	4b05      	ldr	r3, [pc, #20]	@ (80172cc <_vfiprintf_r+0x228>)
 80172b6:	a904      	add	r1, sp, #16
 80172b8:	4630      	mov	r0, r6
 80172ba:	f000 f879 	bl	80173b0 <_printf_i>
 80172be:	e7e4      	b.n	801728a <_vfiprintf_r+0x1e6>
 80172c0:	08018a9a 	.word	0x08018a9a
 80172c4:	08018aa4 	.word	0x08018aa4
 80172c8:	00000000 	.word	0x00000000
 80172cc:	0801707f 	.word	0x0801707f
 80172d0:	08018aa0 	.word	0x08018aa0

080172d4 <_printf_common>:
 80172d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80172d8:	4616      	mov	r6, r2
 80172da:	4698      	mov	r8, r3
 80172dc:	688a      	ldr	r2, [r1, #8]
 80172de:	690b      	ldr	r3, [r1, #16]
 80172e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80172e4:	4293      	cmp	r3, r2
 80172e6:	bfb8      	it	lt
 80172e8:	4613      	movlt	r3, r2
 80172ea:	6033      	str	r3, [r6, #0]
 80172ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80172f0:	4607      	mov	r7, r0
 80172f2:	460c      	mov	r4, r1
 80172f4:	b10a      	cbz	r2, 80172fa <_printf_common+0x26>
 80172f6:	3301      	adds	r3, #1
 80172f8:	6033      	str	r3, [r6, #0]
 80172fa:	6823      	ldr	r3, [r4, #0]
 80172fc:	0699      	lsls	r1, r3, #26
 80172fe:	bf42      	ittt	mi
 8017300:	6833      	ldrmi	r3, [r6, #0]
 8017302:	3302      	addmi	r3, #2
 8017304:	6033      	strmi	r3, [r6, #0]
 8017306:	6825      	ldr	r5, [r4, #0]
 8017308:	f015 0506 	ands.w	r5, r5, #6
 801730c:	d106      	bne.n	801731c <_printf_common+0x48>
 801730e:	f104 0a19 	add.w	sl, r4, #25
 8017312:	68e3      	ldr	r3, [r4, #12]
 8017314:	6832      	ldr	r2, [r6, #0]
 8017316:	1a9b      	subs	r3, r3, r2
 8017318:	42ab      	cmp	r3, r5
 801731a:	dc26      	bgt.n	801736a <_printf_common+0x96>
 801731c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017320:	6822      	ldr	r2, [r4, #0]
 8017322:	3b00      	subs	r3, #0
 8017324:	bf18      	it	ne
 8017326:	2301      	movne	r3, #1
 8017328:	0692      	lsls	r2, r2, #26
 801732a:	d42b      	bmi.n	8017384 <_printf_common+0xb0>
 801732c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017330:	4641      	mov	r1, r8
 8017332:	4638      	mov	r0, r7
 8017334:	47c8      	blx	r9
 8017336:	3001      	adds	r0, #1
 8017338:	d01e      	beq.n	8017378 <_printf_common+0xa4>
 801733a:	6823      	ldr	r3, [r4, #0]
 801733c:	6922      	ldr	r2, [r4, #16]
 801733e:	f003 0306 	and.w	r3, r3, #6
 8017342:	2b04      	cmp	r3, #4
 8017344:	bf02      	ittt	eq
 8017346:	68e5      	ldreq	r5, [r4, #12]
 8017348:	6833      	ldreq	r3, [r6, #0]
 801734a:	1aed      	subeq	r5, r5, r3
 801734c:	68a3      	ldr	r3, [r4, #8]
 801734e:	bf0c      	ite	eq
 8017350:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017354:	2500      	movne	r5, #0
 8017356:	4293      	cmp	r3, r2
 8017358:	bfc4      	itt	gt
 801735a:	1a9b      	subgt	r3, r3, r2
 801735c:	18ed      	addgt	r5, r5, r3
 801735e:	2600      	movs	r6, #0
 8017360:	341a      	adds	r4, #26
 8017362:	42b5      	cmp	r5, r6
 8017364:	d11a      	bne.n	801739c <_printf_common+0xc8>
 8017366:	2000      	movs	r0, #0
 8017368:	e008      	b.n	801737c <_printf_common+0xa8>
 801736a:	2301      	movs	r3, #1
 801736c:	4652      	mov	r2, sl
 801736e:	4641      	mov	r1, r8
 8017370:	4638      	mov	r0, r7
 8017372:	47c8      	blx	r9
 8017374:	3001      	adds	r0, #1
 8017376:	d103      	bne.n	8017380 <_printf_common+0xac>
 8017378:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801737c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017380:	3501      	adds	r5, #1
 8017382:	e7c6      	b.n	8017312 <_printf_common+0x3e>
 8017384:	18e1      	adds	r1, r4, r3
 8017386:	1c5a      	adds	r2, r3, #1
 8017388:	2030      	movs	r0, #48	@ 0x30
 801738a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801738e:	4422      	add	r2, r4
 8017390:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017394:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017398:	3302      	adds	r3, #2
 801739a:	e7c7      	b.n	801732c <_printf_common+0x58>
 801739c:	2301      	movs	r3, #1
 801739e:	4622      	mov	r2, r4
 80173a0:	4641      	mov	r1, r8
 80173a2:	4638      	mov	r0, r7
 80173a4:	47c8      	blx	r9
 80173a6:	3001      	adds	r0, #1
 80173a8:	d0e6      	beq.n	8017378 <_printf_common+0xa4>
 80173aa:	3601      	adds	r6, #1
 80173ac:	e7d9      	b.n	8017362 <_printf_common+0x8e>
	...

080173b0 <_printf_i>:
 80173b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80173b4:	7e0f      	ldrb	r7, [r1, #24]
 80173b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80173b8:	2f78      	cmp	r7, #120	@ 0x78
 80173ba:	4691      	mov	r9, r2
 80173bc:	4680      	mov	r8, r0
 80173be:	460c      	mov	r4, r1
 80173c0:	469a      	mov	sl, r3
 80173c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80173c6:	d807      	bhi.n	80173d8 <_printf_i+0x28>
 80173c8:	2f62      	cmp	r7, #98	@ 0x62
 80173ca:	d80a      	bhi.n	80173e2 <_printf_i+0x32>
 80173cc:	2f00      	cmp	r7, #0
 80173ce:	f000 80d2 	beq.w	8017576 <_printf_i+0x1c6>
 80173d2:	2f58      	cmp	r7, #88	@ 0x58
 80173d4:	f000 80b9 	beq.w	801754a <_printf_i+0x19a>
 80173d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80173dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80173e0:	e03a      	b.n	8017458 <_printf_i+0xa8>
 80173e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80173e6:	2b15      	cmp	r3, #21
 80173e8:	d8f6      	bhi.n	80173d8 <_printf_i+0x28>
 80173ea:	a101      	add	r1, pc, #4	@ (adr r1, 80173f0 <_printf_i+0x40>)
 80173ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80173f0:	08017449 	.word	0x08017449
 80173f4:	0801745d 	.word	0x0801745d
 80173f8:	080173d9 	.word	0x080173d9
 80173fc:	080173d9 	.word	0x080173d9
 8017400:	080173d9 	.word	0x080173d9
 8017404:	080173d9 	.word	0x080173d9
 8017408:	0801745d 	.word	0x0801745d
 801740c:	080173d9 	.word	0x080173d9
 8017410:	080173d9 	.word	0x080173d9
 8017414:	080173d9 	.word	0x080173d9
 8017418:	080173d9 	.word	0x080173d9
 801741c:	0801755d 	.word	0x0801755d
 8017420:	08017487 	.word	0x08017487
 8017424:	08017517 	.word	0x08017517
 8017428:	080173d9 	.word	0x080173d9
 801742c:	080173d9 	.word	0x080173d9
 8017430:	0801757f 	.word	0x0801757f
 8017434:	080173d9 	.word	0x080173d9
 8017438:	08017487 	.word	0x08017487
 801743c:	080173d9 	.word	0x080173d9
 8017440:	080173d9 	.word	0x080173d9
 8017444:	0801751f 	.word	0x0801751f
 8017448:	6833      	ldr	r3, [r6, #0]
 801744a:	1d1a      	adds	r2, r3, #4
 801744c:	681b      	ldr	r3, [r3, #0]
 801744e:	6032      	str	r2, [r6, #0]
 8017450:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017454:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017458:	2301      	movs	r3, #1
 801745a:	e09d      	b.n	8017598 <_printf_i+0x1e8>
 801745c:	6833      	ldr	r3, [r6, #0]
 801745e:	6820      	ldr	r0, [r4, #0]
 8017460:	1d19      	adds	r1, r3, #4
 8017462:	6031      	str	r1, [r6, #0]
 8017464:	0606      	lsls	r6, r0, #24
 8017466:	d501      	bpl.n	801746c <_printf_i+0xbc>
 8017468:	681d      	ldr	r5, [r3, #0]
 801746a:	e003      	b.n	8017474 <_printf_i+0xc4>
 801746c:	0645      	lsls	r5, r0, #25
 801746e:	d5fb      	bpl.n	8017468 <_printf_i+0xb8>
 8017470:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017474:	2d00      	cmp	r5, #0
 8017476:	da03      	bge.n	8017480 <_printf_i+0xd0>
 8017478:	232d      	movs	r3, #45	@ 0x2d
 801747a:	426d      	negs	r5, r5
 801747c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017480:	4859      	ldr	r0, [pc, #356]	@ (80175e8 <_printf_i+0x238>)
 8017482:	230a      	movs	r3, #10
 8017484:	e011      	b.n	80174aa <_printf_i+0xfa>
 8017486:	6821      	ldr	r1, [r4, #0]
 8017488:	6833      	ldr	r3, [r6, #0]
 801748a:	0608      	lsls	r0, r1, #24
 801748c:	f853 5b04 	ldr.w	r5, [r3], #4
 8017490:	d402      	bmi.n	8017498 <_printf_i+0xe8>
 8017492:	0649      	lsls	r1, r1, #25
 8017494:	bf48      	it	mi
 8017496:	b2ad      	uxthmi	r5, r5
 8017498:	2f6f      	cmp	r7, #111	@ 0x6f
 801749a:	4853      	ldr	r0, [pc, #332]	@ (80175e8 <_printf_i+0x238>)
 801749c:	6033      	str	r3, [r6, #0]
 801749e:	bf14      	ite	ne
 80174a0:	230a      	movne	r3, #10
 80174a2:	2308      	moveq	r3, #8
 80174a4:	2100      	movs	r1, #0
 80174a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80174aa:	6866      	ldr	r6, [r4, #4]
 80174ac:	60a6      	str	r6, [r4, #8]
 80174ae:	2e00      	cmp	r6, #0
 80174b0:	bfa2      	ittt	ge
 80174b2:	6821      	ldrge	r1, [r4, #0]
 80174b4:	f021 0104 	bicge.w	r1, r1, #4
 80174b8:	6021      	strge	r1, [r4, #0]
 80174ba:	b90d      	cbnz	r5, 80174c0 <_printf_i+0x110>
 80174bc:	2e00      	cmp	r6, #0
 80174be:	d04b      	beq.n	8017558 <_printf_i+0x1a8>
 80174c0:	4616      	mov	r6, r2
 80174c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80174c6:	fb03 5711 	mls	r7, r3, r1, r5
 80174ca:	5dc7      	ldrb	r7, [r0, r7]
 80174cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80174d0:	462f      	mov	r7, r5
 80174d2:	42bb      	cmp	r3, r7
 80174d4:	460d      	mov	r5, r1
 80174d6:	d9f4      	bls.n	80174c2 <_printf_i+0x112>
 80174d8:	2b08      	cmp	r3, #8
 80174da:	d10b      	bne.n	80174f4 <_printf_i+0x144>
 80174dc:	6823      	ldr	r3, [r4, #0]
 80174de:	07df      	lsls	r7, r3, #31
 80174e0:	d508      	bpl.n	80174f4 <_printf_i+0x144>
 80174e2:	6923      	ldr	r3, [r4, #16]
 80174e4:	6861      	ldr	r1, [r4, #4]
 80174e6:	4299      	cmp	r1, r3
 80174e8:	bfde      	ittt	le
 80174ea:	2330      	movle	r3, #48	@ 0x30
 80174ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80174f0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80174f4:	1b92      	subs	r2, r2, r6
 80174f6:	6122      	str	r2, [r4, #16]
 80174f8:	f8cd a000 	str.w	sl, [sp]
 80174fc:	464b      	mov	r3, r9
 80174fe:	aa03      	add	r2, sp, #12
 8017500:	4621      	mov	r1, r4
 8017502:	4640      	mov	r0, r8
 8017504:	f7ff fee6 	bl	80172d4 <_printf_common>
 8017508:	3001      	adds	r0, #1
 801750a:	d14a      	bne.n	80175a2 <_printf_i+0x1f2>
 801750c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017510:	b004      	add	sp, #16
 8017512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017516:	6823      	ldr	r3, [r4, #0]
 8017518:	f043 0320 	orr.w	r3, r3, #32
 801751c:	6023      	str	r3, [r4, #0]
 801751e:	4833      	ldr	r0, [pc, #204]	@ (80175ec <_printf_i+0x23c>)
 8017520:	2778      	movs	r7, #120	@ 0x78
 8017522:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017526:	6823      	ldr	r3, [r4, #0]
 8017528:	6831      	ldr	r1, [r6, #0]
 801752a:	061f      	lsls	r7, r3, #24
 801752c:	f851 5b04 	ldr.w	r5, [r1], #4
 8017530:	d402      	bmi.n	8017538 <_printf_i+0x188>
 8017532:	065f      	lsls	r7, r3, #25
 8017534:	bf48      	it	mi
 8017536:	b2ad      	uxthmi	r5, r5
 8017538:	6031      	str	r1, [r6, #0]
 801753a:	07d9      	lsls	r1, r3, #31
 801753c:	bf44      	itt	mi
 801753e:	f043 0320 	orrmi.w	r3, r3, #32
 8017542:	6023      	strmi	r3, [r4, #0]
 8017544:	b11d      	cbz	r5, 801754e <_printf_i+0x19e>
 8017546:	2310      	movs	r3, #16
 8017548:	e7ac      	b.n	80174a4 <_printf_i+0xf4>
 801754a:	4827      	ldr	r0, [pc, #156]	@ (80175e8 <_printf_i+0x238>)
 801754c:	e7e9      	b.n	8017522 <_printf_i+0x172>
 801754e:	6823      	ldr	r3, [r4, #0]
 8017550:	f023 0320 	bic.w	r3, r3, #32
 8017554:	6023      	str	r3, [r4, #0]
 8017556:	e7f6      	b.n	8017546 <_printf_i+0x196>
 8017558:	4616      	mov	r6, r2
 801755a:	e7bd      	b.n	80174d8 <_printf_i+0x128>
 801755c:	6833      	ldr	r3, [r6, #0]
 801755e:	6825      	ldr	r5, [r4, #0]
 8017560:	6961      	ldr	r1, [r4, #20]
 8017562:	1d18      	adds	r0, r3, #4
 8017564:	6030      	str	r0, [r6, #0]
 8017566:	062e      	lsls	r6, r5, #24
 8017568:	681b      	ldr	r3, [r3, #0]
 801756a:	d501      	bpl.n	8017570 <_printf_i+0x1c0>
 801756c:	6019      	str	r1, [r3, #0]
 801756e:	e002      	b.n	8017576 <_printf_i+0x1c6>
 8017570:	0668      	lsls	r0, r5, #25
 8017572:	d5fb      	bpl.n	801756c <_printf_i+0x1bc>
 8017574:	8019      	strh	r1, [r3, #0]
 8017576:	2300      	movs	r3, #0
 8017578:	6123      	str	r3, [r4, #16]
 801757a:	4616      	mov	r6, r2
 801757c:	e7bc      	b.n	80174f8 <_printf_i+0x148>
 801757e:	6833      	ldr	r3, [r6, #0]
 8017580:	1d1a      	adds	r2, r3, #4
 8017582:	6032      	str	r2, [r6, #0]
 8017584:	681e      	ldr	r6, [r3, #0]
 8017586:	6862      	ldr	r2, [r4, #4]
 8017588:	2100      	movs	r1, #0
 801758a:	4630      	mov	r0, r6
 801758c:	f7ec f9e8 	bl	8003960 <memchr>
 8017590:	b108      	cbz	r0, 8017596 <_printf_i+0x1e6>
 8017592:	1b80      	subs	r0, r0, r6
 8017594:	6060      	str	r0, [r4, #4]
 8017596:	6863      	ldr	r3, [r4, #4]
 8017598:	6123      	str	r3, [r4, #16]
 801759a:	2300      	movs	r3, #0
 801759c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80175a0:	e7aa      	b.n	80174f8 <_printf_i+0x148>
 80175a2:	6923      	ldr	r3, [r4, #16]
 80175a4:	4632      	mov	r2, r6
 80175a6:	4649      	mov	r1, r9
 80175a8:	4640      	mov	r0, r8
 80175aa:	47d0      	blx	sl
 80175ac:	3001      	adds	r0, #1
 80175ae:	d0ad      	beq.n	801750c <_printf_i+0x15c>
 80175b0:	6823      	ldr	r3, [r4, #0]
 80175b2:	079b      	lsls	r3, r3, #30
 80175b4:	d413      	bmi.n	80175de <_printf_i+0x22e>
 80175b6:	68e0      	ldr	r0, [r4, #12]
 80175b8:	9b03      	ldr	r3, [sp, #12]
 80175ba:	4298      	cmp	r0, r3
 80175bc:	bfb8      	it	lt
 80175be:	4618      	movlt	r0, r3
 80175c0:	e7a6      	b.n	8017510 <_printf_i+0x160>
 80175c2:	2301      	movs	r3, #1
 80175c4:	4632      	mov	r2, r6
 80175c6:	4649      	mov	r1, r9
 80175c8:	4640      	mov	r0, r8
 80175ca:	47d0      	blx	sl
 80175cc:	3001      	adds	r0, #1
 80175ce:	d09d      	beq.n	801750c <_printf_i+0x15c>
 80175d0:	3501      	adds	r5, #1
 80175d2:	68e3      	ldr	r3, [r4, #12]
 80175d4:	9903      	ldr	r1, [sp, #12]
 80175d6:	1a5b      	subs	r3, r3, r1
 80175d8:	42ab      	cmp	r3, r5
 80175da:	dcf2      	bgt.n	80175c2 <_printf_i+0x212>
 80175dc:	e7eb      	b.n	80175b6 <_printf_i+0x206>
 80175de:	2500      	movs	r5, #0
 80175e0:	f104 0619 	add.w	r6, r4, #25
 80175e4:	e7f5      	b.n	80175d2 <_printf_i+0x222>
 80175e6:	bf00      	nop
 80175e8:	08018aab 	.word	0x08018aab
 80175ec:	08018abc 	.word	0x08018abc

080175f0 <__sflush_r>:
 80175f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80175f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175f8:	0716      	lsls	r6, r2, #28
 80175fa:	4605      	mov	r5, r0
 80175fc:	460c      	mov	r4, r1
 80175fe:	d454      	bmi.n	80176aa <__sflush_r+0xba>
 8017600:	684b      	ldr	r3, [r1, #4]
 8017602:	2b00      	cmp	r3, #0
 8017604:	dc02      	bgt.n	801760c <__sflush_r+0x1c>
 8017606:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017608:	2b00      	cmp	r3, #0
 801760a:	dd48      	ble.n	801769e <__sflush_r+0xae>
 801760c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801760e:	2e00      	cmp	r6, #0
 8017610:	d045      	beq.n	801769e <__sflush_r+0xae>
 8017612:	2300      	movs	r3, #0
 8017614:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017618:	682f      	ldr	r7, [r5, #0]
 801761a:	6a21      	ldr	r1, [r4, #32]
 801761c:	602b      	str	r3, [r5, #0]
 801761e:	d030      	beq.n	8017682 <__sflush_r+0x92>
 8017620:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017622:	89a3      	ldrh	r3, [r4, #12]
 8017624:	0759      	lsls	r1, r3, #29
 8017626:	d505      	bpl.n	8017634 <__sflush_r+0x44>
 8017628:	6863      	ldr	r3, [r4, #4]
 801762a:	1ad2      	subs	r2, r2, r3
 801762c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801762e:	b10b      	cbz	r3, 8017634 <__sflush_r+0x44>
 8017630:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017632:	1ad2      	subs	r2, r2, r3
 8017634:	2300      	movs	r3, #0
 8017636:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017638:	6a21      	ldr	r1, [r4, #32]
 801763a:	4628      	mov	r0, r5
 801763c:	47b0      	blx	r6
 801763e:	1c43      	adds	r3, r0, #1
 8017640:	89a3      	ldrh	r3, [r4, #12]
 8017642:	d106      	bne.n	8017652 <__sflush_r+0x62>
 8017644:	6829      	ldr	r1, [r5, #0]
 8017646:	291d      	cmp	r1, #29
 8017648:	d82b      	bhi.n	80176a2 <__sflush_r+0xb2>
 801764a:	4a2a      	ldr	r2, [pc, #168]	@ (80176f4 <__sflush_r+0x104>)
 801764c:	410a      	asrs	r2, r1
 801764e:	07d6      	lsls	r6, r2, #31
 8017650:	d427      	bmi.n	80176a2 <__sflush_r+0xb2>
 8017652:	2200      	movs	r2, #0
 8017654:	6062      	str	r2, [r4, #4]
 8017656:	04d9      	lsls	r1, r3, #19
 8017658:	6922      	ldr	r2, [r4, #16]
 801765a:	6022      	str	r2, [r4, #0]
 801765c:	d504      	bpl.n	8017668 <__sflush_r+0x78>
 801765e:	1c42      	adds	r2, r0, #1
 8017660:	d101      	bne.n	8017666 <__sflush_r+0x76>
 8017662:	682b      	ldr	r3, [r5, #0]
 8017664:	b903      	cbnz	r3, 8017668 <__sflush_r+0x78>
 8017666:	6560      	str	r0, [r4, #84]	@ 0x54
 8017668:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801766a:	602f      	str	r7, [r5, #0]
 801766c:	b1b9      	cbz	r1, 801769e <__sflush_r+0xae>
 801766e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017672:	4299      	cmp	r1, r3
 8017674:	d002      	beq.n	801767c <__sflush_r+0x8c>
 8017676:	4628      	mov	r0, r5
 8017678:	f7ff fca0 	bl	8016fbc <_free_r>
 801767c:	2300      	movs	r3, #0
 801767e:	6363      	str	r3, [r4, #52]	@ 0x34
 8017680:	e00d      	b.n	801769e <__sflush_r+0xae>
 8017682:	2301      	movs	r3, #1
 8017684:	4628      	mov	r0, r5
 8017686:	47b0      	blx	r6
 8017688:	4602      	mov	r2, r0
 801768a:	1c50      	adds	r0, r2, #1
 801768c:	d1c9      	bne.n	8017622 <__sflush_r+0x32>
 801768e:	682b      	ldr	r3, [r5, #0]
 8017690:	2b00      	cmp	r3, #0
 8017692:	d0c6      	beq.n	8017622 <__sflush_r+0x32>
 8017694:	2b1d      	cmp	r3, #29
 8017696:	d001      	beq.n	801769c <__sflush_r+0xac>
 8017698:	2b16      	cmp	r3, #22
 801769a:	d11e      	bne.n	80176da <__sflush_r+0xea>
 801769c:	602f      	str	r7, [r5, #0]
 801769e:	2000      	movs	r0, #0
 80176a0:	e022      	b.n	80176e8 <__sflush_r+0xf8>
 80176a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80176a6:	b21b      	sxth	r3, r3
 80176a8:	e01b      	b.n	80176e2 <__sflush_r+0xf2>
 80176aa:	690f      	ldr	r7, [r1, #16]
 80176ac:	2f00      	cmp	r7, #0
 80176ae:	d0f6      	beq.n	801769e <__sflush_r+0xae>
 80176b0:	0793      	lsls	r3, r2, #30
 80176b2:	680e      	ldr	r6, [r1, #0]
 80176b4:	bf08      	it	eq
 80176b6:	694b      	ldreq	r3, [r1, #20]
 80176b8:	600f      	str	r7, [r1, #0]
 80176ba:	bf18      	it	ne
 80176bc:	2300      	movne	r3, #0
 80176be:	eba6 0807 	sub.w	r8, r6, r7
 80176c2:	608b      	str	r3, [r1, #8]
 80176c4:	f1b8 0f00 	cmp.w	r8, #0
 80176c8:	dde9      	ble.n	801769e <__sflush_r+0xae>
 80176ca:	6a21      	ldr	r1, [r4, #32]
 80176cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80176ce:	4643      	mov	r3, r8
 80176d0:	463a      	mov	r2, r7
 80176d2:	4628      	mov	r0, r5
 80176d4:	47b0      	blx	r6
 80176d6:	2800      	cmp	r0, #0
 80176d8:	dc08      	bgt.n	80176ec <__sflush_r+0xfc>
 80176da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80176de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80176e2:	81a3      	strh	r3, [r4, #12]
 80176e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80176e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176ec:	4407      	add	r7, r0
 80176ee:	eba8 0800 	sub.w	r8, r8, r0
 80176f2:	e7e7      	b.n	80176c4 <__sflush_r+0xd4>
 80176f4:	dfbffffe 	.word	0xdfbffffe

080176f8 <_fflush_r>:
 80176f8:	b538      	push	{r3, r4, r5, lr}
 80176fa:	690b      	ldr	r3, [r1, #16]
 80176fc:	4605      	mov	r5, r0
 80176fe:	460c      	mov	r4, r1
 8017700:	b913      	cbnz	r3, 8017708 <_fflush_r+0x10>
 8017702:	2500      	movs	r5, #0
 8017704:	4628      	mov	r0, r5
 8017706:	bd38      	pop	{r3, r4, r5, pc}
 8017708:	b118      	cbz	r0, 8017712 <_fflush_r+0x1a>
 801770a:	6a03      	ldr	r3, [r0, #32]
 801770c:	b90b      	cbnz	r3, 8017712 <_fflush_r+0x1a>
 801770e:	f7ff fa03 	bl	8016b18 <__sinit>
 8017712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017716:	2b00      	cmp	r3, #0
 8017718:	d0f3      	beq.n	8017702 <_fflush_r+0xa>
 801771a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801771c:	07d0      	lsls	r0, r2, #31
 801771e:	d404      	bmi.n	801772a <_fflush_r+0x32>
 8017720:	0599      	lsls	r1, r3, #22
 8017722:	d402      	bmi.n	801772a <_fflush_r+0x32>
 8017724:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017726:	f7ff fc16 	bl	8016f56 <__retarget_lock_acquire_recursive>
 801772a:	4628      	mov	r0, r5
 801772c:	4621      	mov	r1, r4
 801772e:	f7ff ff5f 	bl	80175f0 <__sflush_r>
 8017732:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017734:	07da      	lsls	r2, r3, #31
 8017736:	4605      	mov	r5, r0
 8017738:	d4e4      	bmi.n	8017704 <_fflush_r+0xc>
 801773a:	89a3      	ldrh	r3, [r4, #12]
 801773c:	059b      	lsls	r3, r3, #22
 801773e:	d4e1      	bmi.n	8017704 <_fflush_r+0xc>
 8017740:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017742:	f7ff fc09 	bl	8016f58 <__retarget_lock_release_recursive>
 8017746:	e7dd      	b.n	8017704 <_fflush_r+0xc>

08017748 <__sread>:
 8017748:	b510      	push	{r4, lr}
 801774a:	460c      	mov	r4, r1
 801774c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017750:	f000 f98a 	bl	8017a68 <_read_r>
 8017754:	2800      	cmp	r0, #0
 8017756:	bfab      	itete	ge
 8017758:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801775a:	89a3      	ldrhlt	r3, [r4, #12]
 801775c:	181b      	addge	r3, r3, r0
 801775e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017762:	bfac      	ite	ge
 8017764:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017766:	81a3      	strhlt	r3, [r4, #12]
 8017768:	bd10      	pop	{r4, pc}

0801776a <__swrite>:
 801776a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801776e:	461f      	mov	r7, r3
 8017770:	898b      	ldrh	r3, [r1, #12]
 8017772:	05db      	lsls	r3, r3, #23
 8017774:	4605      	mov	r5, r0
 8017776:	460c      	mov	r4, r1
 8017778:	4616      	mov	r6, r2
 801777a:	d505      	bpl.n	8017788 <__swrite+0x1e>
 801777c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017780:	2302      	movs	r3, #2
 8017782:	2200      	movs	r2, #0
 8017784:	f000 f95e 	bl	8017a44 <_lseek_r>
 8017788:	89a3      	ldrh	r3, [r4, #12]
 801778a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801778e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017792:	81a3      	strh	r3, [r4, #12]
 8017794:	4632      	mov	r2, r6
 8017796:	463b      	mov	r3, r7
 8017798:	4628      	mov	r0, r5
 801779a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801779e:	f000 b975 	b.w	8017a8c <_write_r>

080177a2 <__sseek>:
 80177a2:	b510      	push	{r4, lr}
 80177a4:	460c      	mov	r4, r1
 80177a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80177aa:	f000 f94b 	bl	8017a44 <_lseek_r>
 80177ae:	1c43      	adds	r3, r0, #1
 80177b0:	89a3      	ldrh	r3, [r4, #12]
 80177b2:	bf15      	itete	ne
 80177b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80177b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80177ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80177be:	81a3      	strheq	r3, [r4, #12]
 80177c0:	bf18      	it	ne
 80177c2:	81a3      	strhne	r3, [r4, #12]
 80177c4:	bd10      	pop	{r4, pc}

080177c6 <__sclose>:
 80177c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80177ca:	f000 b909 	b.w	80179e0 <_close_r>
	...

080177d0 <fiprintf>:
 80177d0:	b40e      	push	{r1, r2, r3}
 80177d2:	b503      	push	{r0, r1, lr}
 80177d4:	4601      	mov	r1, r0
 80177d6:	ab03      	add	r3, sp, #12
 80177d8:	4805      	ldr	r0, [pc, #20]	@ (80177f0 <fiprintf+0x20>)
 80177da:	f853 2b04 	ldr.w	r2, [r3], #4
 80177de:	6800      	ldr	r0, [r0, #0]
 80177e0:	9301      	str	r3, [sp, #4]
 80177e2:	f7ff fc5f 	bl	80170a4 <_vfiprintf_r>
 80177e6:	b002      	add	sp, #8
 80177e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80177ec:	b003      	add	sp, #12
 80177ee:	4770      	bx	lr
 80177f0:	200002c0 	.word	0x200002c0

080177f4 <__swbuf_r>:
 80177f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177f6:	460e      	mov	r6, r1
 80177f8:	4614      	mov	r4, r2
 80177fa:	4605      	mov	r5, r0
 80177fc:	b118      	cbz	r0, 8017806 <__swbuf_r+0x12>
 80177fe:	6a03      	ldr	r3, [r0, #32]
 8017800:	b90b      	cbnz	r3, 8017806 <__swbuf_r+0x12>
 8017802:	f7ff f989 	bl	8016b18 <__sinit>
 8017806:	69a3      	ldr	r3, [r4, #24]
 8017808:	60a3      	str	r3, [r4, #8]
 801780a:	89a3      	ldrh	r3, [r4, #12]
 801780c:	071a      	lsls	r2, r3, #28
 801780e:	d501      	bpl.n	8017814 <__swbuf_r+0x20>
 8017810:	6923      	ldr	r3, [r4, #16]
 8017812:	b943      	cbnz	r3, 8017826 <__swbuf_r+0x32>
 8017814:	4621      	mov	r1, r4
 8017816:	4628      	mov	r0, r5
 8017818:	f000 f82a 	bl	8017870 <__swsetup_r>
 801781c:	b118      	cbz	r0, 8017826 <__swbuf_r+0x32>
 801781e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8017822:	4638      	mov	r0, r7
 8017824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017826:	6823      	ldr	r3, [r4, #0]
 8017828:	6922      	ldr	r2, [r4, #16]
 801782a:	1a98      	subs	r0, r3, r2
 801782c:	6963      	ldr	r3, [r4, #20]
 801782e:	b2f6      	uxtb	r6, r6
 8017830:	4283      	cmp	r3, r0
 8017832:	4637      	mov	r7, r6
 8017834:	dc05      	bgt.n	8017842 <__swbuf_r+0x4e>
 8017836:	4621      	mov	r1, r4
 8017838:	4628      	mov	r0, r5
 801783a:	f7ff ff5d 	bl	80176f8 <_fflush_r>
 801783e:	2800      	cmp	r0, #0
 8017840:	d1ed      	bne.n	801781e <__swbuf_r+0x2a>
 8017842:	68a3      	ldr	r3, [r4, #8]
 8017844:	3b01      	subs	r3, #1
 8017846:	60a3      	str	r3, [r4, #8]
 8017848:	6823      	ldr	r3, [r4, #0]
 801784a:	1c5a      	adds	r2, r3, #1
 801784c:	6022      	str	r2, [r4, #0]
 801784e:	701e      	strb	r6, [r3, #0]
 8017850:	6962      	ldr	r2, [r4, #20]
 8017852:	1c43      	adds	r3, r0, #1
 8017854:	429a      	cmp	r2, r3
 8017856:	d004      	beq.n	8017862 <__swbuf_r+0x6e>
 8017858:	89a3      	ldrh	r3, [r4, #12]
 801785a:	07db      	lsls	r3, r3, #31
 801785c:	d5e1      	bpl.n	8017822 <__swbuf_r+0x2e>
 801785e:	2e0a      	cmp	r6, #10
 8017860:	d1df      	bne.n	8017822 <__swbuf_r+0x2e>
 8017862:	4621      	mov	r1, r4
 8017864:	4628      	mov	r0, r5
 8017866:	f7ff ff47 	bl	80176f8 <_fflush_r>
 801786a:	2800      	cmp	r0, #0
 801786c:	d0d9      	beq.n	8017822 <__swbuf_r+0x2e>
 801786e:	e7d6      	b.n	801781e <__swbuf_r+0x2a>

08017870 <__swsetup_r>:
 8017870:	b538      	push	{r3, r4, r5, lr}
 8017872:	4b29      	ldr	r3, [pc, #164]	@ (8017918 <__swsetup_r+0xa8>)
 8017874:	4605      	mov	r5, r0
 8017876:	6818      	ldr	r0, [r3, #0]
 8017878:	460c      	mov	r4, r1
 801787a:	b118      	cbz	r0, 8017884 <__swsetup_r+0x14>
 801787c:	6a03      	ldr	r3, [r0, #32]
 801787e:	b90b      	cbnz	r3, 8017884 <__swsetup_r+0x14>
 8017880:	f7ff f94a 	bl	8016b18 <__sinit>
 8017884:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017888:	0719      	lsls	r1, r3, #28
 801788a:	d422      	bmi.n	80178d2 <__swsetup_r+0x62>
 801788c:	06da      	lsls	r2, r3, #27
 801788e:	d407      	bmi.n	80178a0 <__swsetup_r+0x30>
 8017890:	2209      	movs	r2, #9
 8017892:	602a      	str	r2, [r5, #0]
 8017894:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017898:	81a3      	strh	r3, [r4, #12]
 801789a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801789e:	e033      	b.n	8017908 <__swsetup_r+0x98>
 80178a0:	0758      	lsls	r0, r3, #29
 80178a2:	d512      	bpl.n	80178ca <__swsetup_r+0x5a>
 80178a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80178a6:	b141      	cbz	r1, 80178ba <__swsetup_r+0x4a>
 80178a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80178ac:	4299      	cmp	r1, r3
 80178ae:	d002      	beq.n	80178b6 <__swsetup_r+0x46>
 80178b0:	4628      	mov	r0, r5
 80178b2:	f7ff fb83 	bl	8016fbc <_free_r>
 80178b6:	2300      	movs	r3, #0
 80178b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80178ba:	89a3      	ldrh	r3, [r4, #12]
 80178bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80178c0:	81a3      	strh	r3, [r4, #12]
 80178c2:	2300      	movs	r3, #0
 80178c4:	6063      	str	r3, [r4, #4]
 80178c6:	6923      	ldr	r3, [r4, #16]
 80178c8:	6023      	str	r3, [r4, #0]
 80178ca:	89a3      	ldrh	r3, [r4, #12]
 80178cc:	f043 0308 	orr.w	r3, r3, #8
 80178d0:	81a3      	strh	r3, [r4, #12]
 80178d2:	6923      	ldr	r3, [r4, #16]
 80178d4:	b94b      	cbnz	r3, 80178ea <__swsetup_r+0x7a>
 80178d6:	89a3      	ldrh	r3, [r4, #12]
 80178d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80178dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80178e0:	d003      	beq.n	80178ea <__swsetup_r+0x7a>
 80178e2:	4621      	mov	r1, r4
 80178e4:	4628      	mov	r0, r5
 80178e6:	f000 f83f 	bl	8017968 <__smakebuf_r>
 80178ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80178ee:	f013 0201 	ands.w	r2, r3, #1
 80178f2:	d00a      	beq.n	801790a <__swsetup_r+0x9a>
 80178f4:	2200      	movs	r2, #0
 80178f6:	60a2      	str	r2, [r4, #8]
 80178f8:	6962      	ldr	r2, [r4, #20]
 80178fa:	4252      	negs	r2, r2
 80178fc:	61a2      	str	r2, [r4, #24]
 80178fe:	6922      	ldr	r2, [r4, #16]
 8017900:	b942      	cbnz	r2, 8017914 <__swsetup_r+0xa4>
 8017902:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017906:	d1c5      	bne.n	8017894 <__swsetup_r+0x24>
 8017908:	bd38      	pop	{r3, r4, r5, pc}
 801790a:	0799      	lsls	r1, r3, #30
 801790c:	bf58      	it	pl
 801790e:	6962      	ldrpl	r2, [r4, #20]
 8017910:	60a2      	str	r2, [r4, #8]
 8017912:	e7f4      	b.n	80178fe <__swsetup_r+0x8e>
 8017914:	2000      	movs	r0, #0
 8017916:	e7f7      	b.n	8017908 <__swsetup_r+0x98>
 8017918:	200002c0 	.word	0x200002c0

0801791c <__swhatbuf_r>:
 801791c:	b570      	push	{r4, r5, r6, lr}
 801791e:	460c      	mov	r4, r1
 8017920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017924:	2900      	cmp	r1, #0
 8017926:	b096      	sub	sp, #88	@ 0x58
 8017928:	4615      	mov	r5, r2
 801792a:	461e      	mov	r6, r3
 801792c:	da0d      	bge.n	801794a <__swhatbuf_r+0x2e>
 801792e:	89a3      	ldrh	r3, [r4, #12]
 8017930:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017934:	f04f 0100 	mov.w	r1, #0
 8017938:	bf14      	ite	ne
 801793a:	2340      	movne	r3, #64	@ 0x40
 801793c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017940:	2000      	movs	r0, #0
 8017942:	6031      	str	r1, [r6, #0]
 8017944:	602b      	str	r3, [r5, #0]
 8017946:	b016      	add	sp, #88	@ 0x58
 8017948:	bd70      	pop	{r4, r5, r6, pc}
 801794a:	466a      	mov	r2, sp
 801794c:	f000 f858 	bl	8017a00 <_fstat_r>
 8017950:	2800      	cmp	r0, #0
 8017952:	dbec      	blt.n	801792e <__swhatbuf_r+0x12>
 8017954:	9901      	ldr	r1, [sp, #4]
 8017956:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801795a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801795e:	4259      	negs	r1, r3
 8017960:	4159      	adcs	r1, r3
 8017962:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017966:	e7eb      	b.n	8017940 <__swhatbuf_r+0x24>

08017968 <__smakebuf_r>:
 8017968:	898b      	ldrh	r3, [r1, #12]
 801796a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801796c:	079d      	lsls	r5, r3, #30
 801796e:	4606      	mov	r6, r0
 8017970:	460c      	mov	r4, r1
 8017972:	d507      	bpl.n	8017984 <__smakebuf_r+0x1c>
 8017974:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017978:	6023      	str	r3, [r4, #0]
 801797a:	6123      	str	r3, [r4, #16]
 801797c:	2301      	movs	r3, #1
 801797e:	6163      	str	r3, [r4, #20]
 8017980:	b003      	add	sp, #12
 8017982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017984:	ab01      	add	r3, sp, #4
 8017986:	466a      	mov	r2, sp
 8017988:	f7ff ffc8 	bl	801791c <__swhatbuf_r>
 801798c:	9f00      	ldr	r7, [sp, #0]
 801798e:	4605      	mov	r5, r0
 8017990:	4639      	mov	r1, r7
 8017992:	4630      	mov	r0, r6
 8017994:	f7fe ffa8 	bl	80168e8 <_malloc_r>
 8017998:	b948      	cbnz	r0, 80179ae <__smakebuf_r+0x46>
 801799a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801799e:	059a      	lsls	r2, r3, #22
 80179a0:	d4ee      	bmi.n	8017980 <__smakebuf_r+0x18>
 80179a2:	f023 0303 	bic.w	r3, r3, #3
 80179a6:	f043 0302 	orr.w	r3, r3, #2
 80179aa:	81a3      	strh	r3, [r4, #12]
 80179ac:	e7e2      	b.n	8017974 <__smakebuf_r+0xc>
 80179ae:	89a3      	ldrh	r3, [r4, #12]
 80179b0:	6020      	str	r0, [r4, #0]
 80179b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80179b6:	81a3      	strh	r3, [r4, #12]
 80179b8:	9b01      	ldr	r3, [sp, #4]
 80179ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80179be:	b15b      	cbz	r3, 80179d8 <__smakebuf_r+0x70>
 80179c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80179c4:	4630      	mov	r0, r6
 80179c6:	f000 f82d 	bl	8017a24 <_isatty_r>
 80179ca:	b128      	cbz	r0, 80179d8 <__smakebuf_r+0x70>
 80179cc:	89a3      	ldrh	r3, [r4, #12]
 80179ce:	f023 0303 	bic.w	r3, r3, #3
 80179d2:	f043 0301 	orr.w	r3, r3, #1
 80179d6:	81a3      	strh	r3, [r4, #12]
 80179d8:	89a3      	ldrh	r3, [r4, #12]
 80179da:	431d      	orrs	r5, r3
 80179dc:	81a5      	strh	r5, [r4, #12]
 80179de:	e7cf      	b.n	8017980 <__smakebuf_r+0x18>

080179e0 <_close_r>:
 80179e0:	b538      	push	{r3, r4, r5, lr}
 80179e2:	4d06      	ldr	r5, [pc, #24]	@ (80179fc <_close_r+0x1c>)
 80179e4:	2300      	movs	r3, #0
 80179e6:	4604      	mov	r4, r0
 80179e8:	4608      	mov	r0, r1
 80179ea:	602b      	str	r3, [r5, #0]
 80179ec:	f7ed fc4a 	bl	8005284 <_close>
 80179f0:	1c43      	adds	r3, r0, #1
 80179f2:	d102      	bne.n	80179fa <_close_r+0x1a>
 80179f4:	682b      	ldr	r3, [r5, #0]
 80179f6:	b103      	cbz	r3, 80179fa <_close_r+0x1a>
 80179f8:	6023      	str	r3, [r4, #0]
 80179fa:	bd38      	pop	{r3, r4, r5, pc}
 80179fc:	20005cc4 	.word	0x20005cc4

08017a00 <_fstat_r>:
 8017a00:	b538      	push	{r3, r4, r5, lr}
 8017a02:	4d07      	ldr	r5, [pc, #28]	@ (8017a20 <_fstat_r+0x20>)
 8017a04:	2300      	movs	r3, #0
 8017a06:	4604      	mov	r4, r0
 8017a08:	4608      	mov	r0, r1
 8017a0a:	4611      	mov	r1, r2
 8017a0c:	602b      	str	r3, [r5, #0]
 8017a0e:	f7ed fc45 	bl	800529c <_fstat>
 8017a12:	1c43      	adds	r3, r0, #1
 8017a14:	d102      	bne.n	8017a1c <_fstat_r+0x1c>
 8017a16:	682b      	ldr	r3, [r5, #0]
 8017a18:	b103      	cbz	r3, 8017a1c <_fstat_r+0x1c>
 8017a1a:	6023      	str	r3, [r4, #0]
 8017a1c:	bd38      	pop	{r3, r4, r5, pc}
 8017a1e:	bf00      	nop
 8017a20:	20005cc4 	.word	0x20005cc4

08017a24 <_isatty_r>:
 8017a24:	b538      	push	{r3, r4, r5, lr}
 8017a26:	4d06      	ldr	r5, [pc, #24]	@ (8017a40 <_isatty_r+0x1c>)
 8017a28:	2300      	movs	r3, #0
 8017a2a:	4604      	mov	r4, r0
 8017a2c:	4608      	mov	r0, r1
 8017a2e:	602b      	str	r3, [r5, #0]
 8017a30:	f7ed fc44 	bl	80052bc <_isatty>
 8017a34:	1c43      	adds	r3, r0, #1
 8017a36:	d102      	bne.n	8017a3e <_isatty_r+0x1a>
 8017a38:	682b      	ldr	r3, [r5, #0]
 8017a3a:	b103      	cbz	r3, 8017a3e <_isatty_r+0x1a>
 8017a3c:	6023      	str	r3, [r4, #0]
 8017a3e:	bd38      	pop	{r3, r4, r5, pc}
 8017a40:	20005cc4 	.word	0x20005cc4

08017a44 <_lseek_r>:
 8017a44:	b538      	push	{r3, r4, r5, lr}
 8017a46:	4d07      	ldr	r5, [pc, #28]	@ (8017a64 <_lseek_r+0x20>)
 8017a48:	4604      	mov	r4, r0
 8017a4a:	4608      	mov	r0, r1
 8017a4c:	4611      	mov	r1, r2
 8017a4e:	2200      	movs	r2, #0
 8017a50:	602a      	str	r2, [r5, #0]
 8017a52:	461a      	mov	r2, r3
 8017a54:	f7ed fc3d 	bl	80052d2 <_lseek>
 8017a58:	1c43      	adds	r3, r0, #1
 8017a5a:	d102      	bne.n	8017a62 <_lseek_r+0x1e>
 8017a5c:	682b      	ldr	r3, [r5, #0]
 8017a5e:	b103      	cbz	r3, 8017a62 <_lseek_r+0x1e>
 8017a60:	6023      	str	r3, [r4, #0]
 8017a62:	bd38      	pop	{r3, r4, r5, pc}
 8017a64:	20005cc4 	.word	0x20005cc4

08017a68 <_read_r>:
 8017a68:	b538      	push	{r3, r4, r5, lr}
 8017a6a:	4d07      	ldr	r5, [pc, #28]	@ (8017a88 <_read_r+0x20>)
 8017a6c:	4604      	mov	r4, r0
 8017a6e:	4608      	mov	r0, r1
 8017a70:	4611      	mov	r1, r2
 8017a72:	2200      	movs	r2, #0
 8017a74:	602a      	str	r2, [r5, #0]
 8017a76:	461a      	mov	r2, r3
 8017a78:	f7ed fbcb 	bl	8005212 <_read>
 8017a7c:	1c43      	adds	r3, r0, #1
 8017a7e:	d102      	bne.n	8017a86 <_read_r+0x1e>
 8017a80:	682b      	ldr	r3, [r5, #0]
 8017a82:	b103      	cbz	r3, 8017a86 <_read_r+0x1e>
 8017a84:	6023      	str	r3, [r4, #0]
 8017a86:	bd38      	pop	{r3, r4, r5, pc}
 8017a88:	20005cc4 	.word	0x20005cc4

08017a8c <_write_r>:
 8017a8c:	b538      	push	{r3, r4, r5, lr}
 8017a8e:	4d07      	ldr	r5, [pc, #28]	@ (8017aac <_write_r+0x20>)
 8017a90:	4604      	mov	r4, r0
 8017a92:	4608      	mov	r0, r1
 8017a94:	4611      	mov	r1, r2
 8017a96:	2200      	movs	r2, #0
 8017a98:	602a      	str	r2, [r5, #0]
 8017a9a:	461a      	mov	r2, r3
 8017a9c:	f7ed fbd6 	bl	800524c <_write>
 8017aa0:	1c43      	adds	r3, r0, #1
 8017aa2:	d102      	bne.n	8017aaa <_write_r+0x1e>
 8017aa4:	682b      	ldr	r3, [r5, #0]
 8017aa6:	b103      	cbz	r3, 8017aaa <_write_r+0x1e>
 8017aa8:	6023      	str	r3, [r4, #0]
 8017aaa:	bd38      	pop	{r3, r4, r5, pc}
 8017aac:	20005cc4 	.word	0x20005cc4

08017ab0 <abort>:
 8017ab0:	b508      	push	{r3, lr}
 8017ab2:	2006      	movs	r0, #6
 8017ab4:	f000 f82c 	bl	8017b10 <raise>
 8017ab8:	2001      	movs	r0, #1
 8017aba:	f7ed fb9f 	bl	80051fc <_exit>

08017abe <_raise_r>:
 8017abe:	291f      	cmp	r1, #31
 8017ac0:	b538      	push	{r3, r4, r5, lr}
 8017ac2:	4605      	mov	r5, r0
 8017ac4:	460c      	mov	r4, r1
 8017ac6:	d904      	bls.n	8017ad2 <_raise_r+0x14>
 8017ac8:	2316      	movs	r3, #22
 8017aca:	6003      	str	r3, [r0, #0]
 8017acc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017ad0:	bd38      	pop	{r3, r4, r5, pc}
 8017ad2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017ad4:	b112      	cbz	r2, 8017adc <_raise_r+0x1e>
 8017ad6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017ada:	b94b      	cbnz	r3, 8017af0 <_raise_r+0x32>
 8017adc:	4628      	mov	r0, r5
 8017ade:	f000 f831 	bl	8017b44 <_getpid_r>
 8017ae2:	4622      	mov	r2, r4
 8017ae4:	4601      	mov	r1, r0
 8017ae6:	4628      	mov	r0, r5
 8017ae8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017aec:	f000 b818 	b.w	8017b20 <_kill_r>
 8017af0:	2b01      	cmp	r3, #1
 8017af2:	d00a      	beq.n	8017b0a <_raise_r+0x4c>
 8017af4:	1c59      	adds	r1, r3, #1
 8017af6:	d103      	bne.n	8017b00 <_raise_r+0x42>
 8017af8:	2316      	movs	r3, #22
 8017afa:	6003      	str	r3, [r0, #0]
 8017afc:	2001      	movs	r0, #1
 8017afe:	e7e7      	b.n	8017ad0 <_raise_r+0x12>
 8017b00:	2100      	movs	r1, #0
 8017b02:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017b06:	4620      	mov	r0, r4
 8017b08:	4798      	blx	r3
 8017b0a:	2000      	movs	r0, #0
 8017b0c:	e7e0      	b.n	8017ad0 <_raise_r+0x12>
	...

08017b10 <raise>:
 8017b10:	4b02      	ldr	r3, [pc, #8]	@ (8017b1c <raise+0xc>)
 8017b12:	4601      	mov	r1, r0
 8017b14:	6818      	ldr	r0, [r3, #0]
 8017b16:	f7ff bfd2 	b.w	8017abe <_raise_r>
 8017b1a:	bf00      	nop
 8017b1c:	200002c0 	.word	0x200002c0

08017b20 <_kill_r>:
 8017b20:	b538      	push	{r3, r4, r5, lr}
 8017b22:	4d07      	ldr	r5, [pc, #28]	@ (8017b40 <_kill_r+0x20>)
 8017b24:	2300      	movs	r3, #0
 8017b26:	4604      	mov	r4, r0
 8017b28:	4608      	mov	r0, r1
 8017b2a:	4611      	mov	r1, r2
 8017b2c:	602b      	str	r3, [r5, #0]
 8017b2e:	f7ed fb55 	bl	80051dc <_kill>
 8017b32:	1c43      	adds	r3, r0, #1
 8017b34:	d102      	bne.n	8017b3c <_kill_r+0x1c>
 8017b36:	682b      	ldr	r3, [r5, #0]
 8017b38:	b103      	cbz	r3, 8017b3c <_kill_r+0x1c>
 8017b3a:	6023      	str	r3, [r4, #0]
 8017b3c:	bd38      	pop	{r3, r4, r5, pc}
 8017b3e:	bf00      	nop
 8017b40:	20005cc4 	.word	0x20005cc4

08017b44 <_getpid_r>:
 8017b44:	f7ed bb42 	b.w	80051cc <_getpid>

08017b48 <round>:
 8017b48:	ec51 0b10 	vmov	r0, r1, d0
 8017b4c:	b570      	push	{r4, r5, r6, lr}
 8017b4e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8017b52:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 8017b56:	2a13      	cmp	r2, #19
 8017b58:	460b      	mov	r3, r1
 8017b5a:	4605      	mov	r5, r0
 8017b5c:	dc1b      	bgt.n	8017b96 <round+0x4e>
 8017b5e:	2a00      	cmp	r2, #0
 8017b60:	da0b      	bge.n	8017b7a <round+0x32>
 8017b62:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8017b66:	3201      	adds	r2, #1
 8017b68:	bf04      	itt	eq
 8017b6a:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8017b6e:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8017b72:	2200      	movs	r2, #0
 8017b74:	4619      	mov	r1, r3
 8017b76:	4610      	mov	r0, r2
 8017b78:	e015      	b.n	8017ba6 <round+0x5e>
 8017b7a:	4c15      	ldr	r4, [pc, #84]	@ (8017bd0 <round+0x88>)
 8017b7c:	4114      	asrs	r4, r2
 8017b7e:	ea04 0601 	and.w	r6, r4, r1
 8017b82:	4306      	orrs	r6, r0
 8017b84:	d00f      	beq.n	8017ba6 <round+0x5e>
 8017b86:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8017b8a:	fa41 f202 	asr.w	r2, r1, r2
 8017b8e:	4413      	add	r3, r2
 8017b90:	ea23 0304 	bic.w	r3, r3, r4
 8017b94:	e7ed      	b.n	8017b72 <round+0x2a>
 8017b96:	2a33      	cmp	r2, #51	@ 0x33
 8017b98:	dd08      	ble.n	8017bac <round+0x64>
 8017b9a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8017b9e:	d102      	bne.n	8017ba6 <round+0x5e>
 8017ba0:	4602      	mov	r2, r0
 8017ba2:	f7eb ff33 	bl	8003a0c <__adddf3>
 8017ba6:	ec41 0b10 	vmov	d0, r0, r1
 8017baa:	bd70      	pop	{r4, r5, r6, pc}
 8017bac:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 8017bb0:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8017bb4:	40f4      	lsrs	r4, r6
 8017bb6:	4204      	tst	r4, r0
 8017bb8:	d0f5      	beq.n	8017ba6 <round+0x5e>
 8017bba:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8017bbe:	2201      	movs	r2, #1
 8017bc0:	408a      	lsls	r2, r1
 8017bc2:	1952      	adds	r2, r2, r5
 8017bc4:	bf28      	it	cs
 8017bc6:	3301      	addcs	r3, #1
 8017bc8:	ea22 0204 	bic.w	r2, r2, r4
 8017bcc:	e7d2      	b.n	8017b74 <round+0x2c>
 8017bce:	bf00      	nop
 8017bd0:	000fffff 	.word	0x000fffff

08017bd4 <_init>:
 8017bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017bd6:	bf00      	nop
 8017bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017bda:	bc08      	pop	{r3}
 8017bdc:	469e      	mov	lr, r3
 8017bde:	4770      	bx	lr

08017be0 <_fini>:
 8017be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017be2:	bf00      	nop
 8017be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017be6:	bc08      	pop	{r3}
 8017be8:	469e      	mov	lr, r3
 8017bea:	4770      	bx	lr
