
Driver_Lid_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000869c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  0800887c  0800887c  0000987c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d6c  08008d6c  0000a06c  2**0
                  CONTENTS
  4 .ARM          00000008  08008d6c  08008d6c  00009d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d74  08008d74  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d74  08008d74  00009d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d78  08008d78  00009d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08008d7c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006068  2000006c  08008de8  0000a06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200060d4  08008de8  0000a0d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000193c1  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c7d  00000000  00000000  0002345d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001730  00000000  00000000  000270e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011f7  00000000  00000000  00028810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021d00  00000000  00000000  00029a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bda9  00000000  00000000  0004b707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0f1d  00000000  00000000  000674b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001383cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006830  00000000  00000000  00138410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0013ec40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008864 	.word	0x08008864

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	08008864 	.word	0x08008864

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0

}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80005be:	b480      	push	{r7}
 80005c0:	af00      	add	r7, sp, #0
return 0;
 80005c2:	2300      	movs	r3, #0
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr

080005ce <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005ce:	b480      	push	{r7}
 80005d0:	b083      	sub	sp, #12
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
 80005d6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e4:	b5b0      	push	{r4, r5, r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005ea:	4b09      	ldr	r3, [pc, #36]	@ (8000610 <MX_FREERTOS_Init+0x2c>)
 80005ec:	1d3c      	adds	r4, r7, #4
 80005ee:	461d      	mov	r5, r3
 80005f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f4:	682b      	ldr	r3, [r5, #0]
 80005f6:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f005 ff4c 	bl	800649a <osThreadCreate>
 8000602:	4603      	mov	r3, r0
 8000604:	4a03      	ldr	r2, [pc, #12]	@ (8000614 <MX_FREERTOS_Init+0x30>)
 8000606:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000608:	bf00      	nop
 800060a:	3718      	adds	r7, #24
 800060c:	46bd      	mov	sp, r7
 800060e:	bdb0      	pop	{r4, r5, r7, pc}
 8000610:	08008888 	.word	0x08008888
 8000614:	20000088 	.word	0x20000088

08000618 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000620:	2001      	movs	r0, #1
 8000622:	f005 ff61 	bl	80064e8 <osDelay>
 8000626:	e7fb      	b.n	8000620 <StartDefaultTask+0x8>

08000628 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800062e:	4b12      	ldr	r3, [pc, #72]	@ (8000678 <MX_DMA_Init+0x50>)
 8000630:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000632:	4a11      	ldr	r2, [pc, #68]	@ (8000678 <MX_DMA_Init+0x50>)
 8000634:	f043 0304 	orr.w	r3, r3, #4
 8000638:	6493      	str	r3, [r2, #72]	@ 0x48
 800063a:	4b0f      	ldr	r3, [pc, #60]	@ (8000678 <MX_DMA_Init+0x50>)
 800063c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800063e:	f003 0304 	and.w	r3, r3, #4
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000646:	4b0c      	ldr	r3, [pc, #48]	@ (8000678 <MX_DMA_Init+0x50>)
 8000648:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800064a:	4a0b      	ldr	r2, [pc, #44]	@ (8000678 <MX_DMA_Init+0x50>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6493      	str	r3, [r2, #72]	@ 0x48
 8000652:	4b09      	ldr	r3, [pc, #36]	@ (8000678 <MX_DMA_Init+0x50>)
 8000654:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	603b      	str	r3, [r7, #0]
 800065c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	2105      	movs	r1, #5
 8000662:	200b      	movs	r0, #11
 8000664:	f000 ffb8 	bl	80015d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000668:	200b      	movs	r0, #11
 800066a:	f000 ffcf 	bl	800160c <HAL_NVIC_EnableIRQ>

}
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40021000 	.word	0x40021000

0800067c <LIDAR_start_scan_dma>:
    printf("Error code : %04X\r\n", h_LIDAR->health_stat.error_code);

    return 0;
}

int LIDAR_start_scan_dma(h_LIDAR_t *h_LIDAR) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
    uint8_t cmd_buff[CMD_BUFF_SIZE] = {CMD_BEGIN, CMD_START}; // Commande pour démarrer le scan
 8000684:	f246 03a5 	movw	r3, #24741	@ 0x60a5
 8000688:	81bb      	strh	r3, [r7, #12]

    // Envoi de la commande
    if (h_LIDAR->serial_drv.it_transmit(cmd_buff, CMD_BUFF_SIZE) != 0) {
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	68db      	ldr	r3, [r3, #12]
 800068e:	f107 020c 	add.w	r2, r7, #12
 8000692:	2102      	movs	r1, #2
 8000694:	4610      	mov	r0, r2
 8000696:	4798      	blx	r3
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d005      	beq.n	80006aa <LIDAR_start_scan_dma+0x2e>
        printf("Erreur lors de l'envoi de la commande de démarrage du scan.\r\n");
 800069e:	4810      	ldr	r0, [pc, #64]	@ (80006e0 <LIDAR_start_scan_dma+0x64>)
 80006a0:	f007 fa3a 	bl	8007b18 <puts>
        return -1;
 80006a4:	f04f 33ff 	mov.w	r3, #4294967295
 80006a8:	e015      	b.n	80006d6 <LIDAR_start_scan_dma+0x5a>
    }

    // Configurer la réception DMA en mode circulaire
    if (h_LIDAR->serial_drv.dma_receive(h_LIDAR->processing.receive_buff, DATA_BUFF_SIZE) != 0) {
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	691b      	ldr	r3, [r3, #16]
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	f502 620a 	add.w	r2, r2, #2208	@ 0x8a0
 80006b4:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 80006b8:	4610      	mov	r0, r2
 80006ba:	4798      	blx	r3
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d005      	beq.n	80006ce <LIDAR_start_scan_dma+0x52>
        printf("Erreur lors de la configuration de la réception DMA.\r\n");
 80006c2:	4808      	ldr	r0, [pc, #32]	@ (80006e4 <LIDAR_start_scan_dma+0x68>)
 80006c4:	f007 fa28 	bl	8007b18 <puts>
        return -2;
 80006c8:	f06f 0301 	mvn.w	r3, #1
 80006cc:	e003      	b.n	80006d6 <LIDAR_start_scan_dma+0x5a>
    }

    printf("Scan DMA demarre avec succes en mode circulaire.\r\n");
 80006ce:	4806      	ldr	r0, [pc, #24]	@ (80006e8 <LIDAR_start_scan_dma+0x6c>)
 80006d0:	f007 fa22 	bl	8007b18 <puts>
    return 0;
 80006d4:	2300      	movs	r3, #0
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	3710      	adds	r7, #16
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	08008acc 	.word	0x08008acc
 80006e4:	08008b0c 	.word	0x08008b0c
 80006e8:	08008b44 	.word	0x08008b44

080006ec <LIDAR_process_frame>:





void LIDAR_process_frame(h_LIDAR_t *LIDAR) {
 80006ec:	b480      	push	{r7}
 80006ee:	b08f      	sub	sp, #60	@ 0x3c
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
    uint8_t *buff = LIDAR->processing.frame_buff; // Buffer circulaire DMA
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	337f      	adds	r3, #127	@ 0x7f
 80006f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int buffer_size = FRAME_BUFF_SIZE;              // Taille totale du buffer
 80006fa:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80006fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    int start_idx = 0;                             // Indice de départ pour parcourir le buffer
 8000700:	2300      	movs	r3, #0
 8000702:	637b      	str	r3, [r7, #52]	@ 0x34




    while (start_idx < buffer_size) {
 8000704:	e0e8      	b.n	80008d8 <LIDAR_process_frame+0x1ec>

        if (buff[start_idx] == 0xAA && buff[(start_idx + 1) % buffer_size] == 0x55) {
 8000706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000708:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800070a:	4413      	add	r3, r2
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2baa      	cmp	r3, #170	@ 0xaa
 8000710:	f040 80df 	bne.w	80008d2 <LIDAR_process_frame+0x1e6>
 8000714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000716:	3301      	adds	r3, #1
 8000718:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800071a:	fb93 f2f2 	sdiv	r2, r3, r2
 800071e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000720:	fb01 f202 	mul.w	r2, r1, r2
 8000724:	1a9b      	subs	r3, r3, r2
 8000726:	461a      	mov	r2, r3
 8000728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800072a:	4413      	add	r3, r2
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b55      	cmp	r3, #85	@ 0x55
 8000730:	f040 80cf 	bne.w	80008d2 <LIDAR_process_frame+0x1e6>


            // L'entête est trouvé, extraire les métadonnées
            int header_idx = start_idx; // Index actuel pour début de trame
 8000734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000736:	627b      	str	r3, [r7, #36]	@ 0x24
            uint16_t FSA = (buff[(header_idx + 4) % buffer_size] |
 8000738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800073a:	3304      	adds	r3, #4
 800073c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800073e:	fb93 f2f2 	sdiv	r2, r3, r2
 8000742:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000744:	fb01 f202 	mul.w	r2, r1, r2
 8000748:	1a9b      	subs	r3, r3, r2
 800074a:	461a      	mov	r2, r3
 800074c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800074e:	4413      	add	r3, r2
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	4618      	mov	r0, r3
                            (buff[(header_idx + 5) % buffer_size] << 8)) >>
 8000754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000756:	3305      	adds	r3, #5
 8000758:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800075a:	fb93 f2f2 	sdiv	r2, r3, r2
 800075e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000760:	fb01 f202 	mul.w	r2, r1, r2
 8000764:	1a9b      	subs	r3, r3, r2
 8000766:	461a      	mov	r2, r3
 8000768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800076a:	4413      	add	r3, r2
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	021b      	lsls	r3, r3, #8
            uint16_t FSA = (buff[(header_idx + 4) % buffer_size] |
 8000770:	4303      	orrs	r3, r0
                            (buff[(header_idx + 5) % buffer_size] << 8)) >>
 8000772:	11db      	asrs	r3, r3, #7
            uint16_t FSA = (buff[(header_idx + 4) % buffer_size] |
 8000774:	847b      	strh	r3, [r7, #34]	@ 0x22
                           7; // Angle de départ (en degrés)
            uint16_t LSA = (buff[(header_idx + 6) % buffer_size] |
 8000776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000778:	3306      	adds	r3, #6
 800077a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800077c:	fb93 f2f2 	sdiv	r2, r3, r2
 8000780:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000782:	fb01 f202 	mul.w	r2, r1, r2
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	461a      	mov	r2, r3
 800078a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800078c:	4413      	add	r3, r2
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	4618      	mov	r0, r3
                            (buff[(header_idx + 7) % buffer_size] << 8)) >>
 8000792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000794:	3307      	adds	r3, #7
 8000796:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000798:	fb93 f2f2 	sdiv	r2, r3, r2
 800079c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800079e:	fb01 f202 	mul.w	r2, r1, r2
 80007a2:	1a9b      	subs	r3, r3, r2
 80007a4:	461a      	mov	r2, r3
 80007a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007a8:	4413      	add	r3, r2
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	021b      	lsls	r3, r3, #8
            uint16_t LSA = (buff[(header_idx + 6) % buffer_size] |
 80007ae:	4303      	orrs	r3, r0
                            (buff[(header_idx + 7) % buffer_size] << 8)) >>
 80007b0:	11db      	asrs	r3, r3, #7
            uint16_t LSA = (buff[(header_idx + 6) % buffer_size] |
 80007b2:	843b      	strh	r3, [r7, #32]
                           7; // Angle de fin (en degrés)
            uint8_t LSN = buff[(header_idx + 3) % buffer_size]; // Nombre de points
 80007b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007b6:	3303      	adds	r3, #3
 80007b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80007ba:	fb93 f2f2 	sdiv	r2, r3, r2
 80007be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80007c0:	fb01 f202 	mul.w	r2, r1, r2
 80007c4:	1a9b      	subs	r3, r3, r2
 80007c6:	461a      	mov	r2, r3
 80007c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007ca:	4413      	add	r3, r2
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	77fb      	strb	r3, [r7, #31]

            // Calcul de la taille totale attendue de la trame
            int frame_size = 10 + LSN * 2; // 10 octets d'entête + 2 octets par point
 80007d0:	7ffb      	ldrb	r3, [r7, #31]
 80007d2:	3305      	adds	r3, #5
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	61bb      	str	r3, [r7, #24]
            if (frame_size > buffer_size) {
 80007d8:	69ba      	ldr	r2, [r7, #24]
 80007da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007dc:	429a      	cmp	r2, r3
 80007de:	f300 8081 	bgt.w	80008e4 <LIDAR_process_frame+0x1f8>
//                printf("Erreur : Taille de la trame (%d) dépasse la taille du buffer (%d).\r\n", frame_size, buffer_size);
                break;
            }

            // Vérifier si toute la trame est contenue dans le buffer
            if ((start_idx + frame_size) % buffer_size < start_idx) {
 80007e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	4413      	add	r3, r2
 80007e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80007ea:	fb93 f2f2 	sdiv	r2, r3, r2
 80007ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80007f0:	fb01 f202 	mul.w	r2, r1, r2
 80007f4:	1a9b      	subs	r3, r3, r2
 80007f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80007f8:	429a      	cmp	r2, r3
 80007fa:	dc75      	bgt.n	80008e8 <LIDAR_process_frame+0x1fc>
//                continue;
//            }

            // Traiter les données de la trame

            for (int i = 0; i < LSN; i++) {
 80007fc:	2300      	movs	r3, #0
 80007fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8000800:	e05e      	b.n	80008c0 <LIDAR_process_frame+0x1d4>
                // Lecture de la distance brute
                uint16_t Si = buff[(header_idx + 10 + i * 2) % buffer_size] |
 8000802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000804:	f103 020a 	add.w	r2, r3, #10
 8000808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	4413      	add	r3, r2
 800080e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000810:	fb93 f2f2 	sdiv	r2, r3, r2
 8000814:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000816:	fb01 f202 	mul.w	r2, r1, r2
 800081a:	1a9b      	subs	r3, r3, r2
 800081c:	461a      	mov	r2, r3
 800081e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000820:	4413      	add	r3, r2
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	b21a      	sxth	r2, r3
                              (buff[(header_idx + 11 + i * 2) % buffer_size] << 8);
 8000826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000828:	f103 010b 	add.w	r1, r3, #11
 800082c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	440b      	add	r3, r1
 8000832:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000834:	fb93 f1f1 	sdiv	r1, r3, r1
 8000838:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800083a:	fb00 f101 	mul.w	r1, r0, r1
 800083e:	1a5b      	subs	r3, r3, r1
 8000840:	4619      	mov	r1, r3
 8000842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000844:	440b      	add	r3, r1
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	021b      	lsls	r3, r3, #8
                uint16_t Si = buff[(header_idx + 10 + i * 2) % buffer_size] |
 800084a:	b21b      	sxth	r3, r3
 800084c:	4313      	orrs	r3, r2
 800084e:	b21b      	sxth	r3, r3
 8000850:	82fb      	strh	r3, [r7, #22]
                int Di = Si / 4; // Distance réelle en mm
 8000852:	8afb      	ldrh	r3, [r7, #22]
 8000854:	089b      	lsrs	r3, r3, #2
 8000856:	b29b      	uxth	r3, r3
 8000858:	613b      	str	r3, [r7, #16]

                // Calcul de l'angle
                int Ai = i*abs(LSA-FSA)/(LSN-1) + FSA;
 800085a:	8c3a      	ldrh	r2, [r7, #32]
 800085c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800085e:	1ad3      	subs	r3, r2, r3
 8000860:	2b00      	cmp	r3, #0
 8000862:	bfb8      	it	lt
 8000864:	425b      	neglt	r3, r3
 8000866:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000868:	fb03 f202 	mul.w	r2, r3, r2
 800086c:	7ffb      	ldrb	r3, [r7, #31]
 800086e:	3b01      	subs	r3, #1
 8000870:	fb92 f2f3 	sdiv	r2, r2, r3
 8000874:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000876:	4413      	add	r3, r2
 8000878:	60fb      	str	r3, [r7, #12]

                if (Ai < 0 || Ai >= 360) {
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	2b00      	cmp	r3, #0
 800087e:	db1b      	blt.n	80008b8 <LIDAR_process_frame+0x1cc>
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000886:	da17      	bge.n	80008b8 <LIDAR_process_frame+0x1cc>
                    continue;
                }

                // Stockage dans le buffer des points
                if (Di < 0 || Di > 5000) {
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	2b00      	cmp	r3, #0
 800088c:	db04      	blt.n	8000898 <LIDAR_process_frame+0x1ac>
 800088e:	693b      	ldr	r3, [r7, #16]
 8000890:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000894:	4293      	cmp	r3, r2
 8000896:	dd07      	ble.n	80008a8 <LIDAR_process_frame+0x1bc>
                	LIDAR->processing.point_buff[Ai] = 0; // Distance hors plage
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	33be      	adds	r3, #190	@ 0xbe
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	4413      	add	r3, r2
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	e008      	b.n	80008ba <LIDAR_process_frame+0x1ce>
                } else {
                	LIDAR->processing.point_buff[Ai] = Di; // Distance valide
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	33be      	adds	r3, #190	@ 0xbe
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	4413      	add	r3, r2
 80008b2:	693a      	ldr	r2, [r7, #16]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	e000      	b.n	80008ba <LIDAR_process_frame+0x1ce>
                    continue;
 80008b8:	bf00      	nop
            for (int i = 0; i < LSN; i++) {
 80008ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008bc:	3301      	adds	r3, #1
 80008be:	633b      	str	r3, [r7, #48]	@ 0x30
 80008c0:	7ffb      	ldrb	r3, [r7, #31]
 80008c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80008c4:	429a      	cmp	r2, r3
 80008c6:	db9c      	blt.n	8000802 <LIDAR_process_frame+0x116>
            }

//            printf("Trame traitee : FSA=%d, LSA=%d, Points=%d\r\n", FSA, LSA, LSN);

            // Avancer dans le buffer jusqu'à la fin de la trame traitée
            start_idx += frame_size;
 80008c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80008ca:	69bb      	ldr	r3, [r7, #24]
 80008cc:	4413      	add	r3, r2
 80008ce:	637b      	str	r3, [r7, #52]	@ 0x34
        if (buff[start_idx] == 0xAA && buff[(start_idx + 1) % buffer_size] == 0x55) {
 80008d0:	e002      	b.n	80008d8 <LIDAR_process_frame+0x1ec>
        } else {
            // Avancer d'un octet si aucune entête valide n'est trouvée
            start_idx++;
 80008d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008d4:	3301      	adds	r3, #1
 80008d6:	637b      	str	r3, [r7, #52]	@ 0x34
    while (start_idx < buffer_size) {
 80008d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80008da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008dc:	429a      	cmp	r2, r3
 80008de:	f6ff af12 	blt.w	8000706 <LIDAR_process_frame+0x1a>
 80008e2:	e002      	b.n	80008ea <LIDAR_process_frame+0x1fe>
                break;
 80008e4:	bf00      	nop
 80008e6:	e000      	b.n	80008ea <LIDAR_process_frame+0x1fe>
                break;
 80008e8:	bf00      	nop
        }
    }

    LIDAR->rx_flag_dma = 0;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2200      	movs	r2, #0
 80008ee:	f883 2da1 	strb.w	r2, [r3, #3489]	@ 0xda1

}
 80008f2:	bf00      	nop
 80008f4:	373c      	adds	r7, #60	@ 0x3c
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
	...

08000900 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	@ 0x28
 8000904:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	4b2b      	ldr	r3, [pc, #172]	@ (80009c4 <MX_GPIO_Init+0xc4>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091a:	4a2a      	ldr	r2, [pc, #168]	@ (80009c4 <MX_GPIO_Init+0xc4>)
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000922:	4b28      	ldr	r3, [pc, #160]	@ (80009c4 <MX_GPIO_Init+0xc4>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800092e:	4b25      	ldr	r3, [pc, #148]	@ (80009c4 <MX_GPIO_Init+0xc4>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000932:	4a24      	ldr	r2, [pc, #144]	@ (80009c4 <MX_GPIO_Init+0xc4>)
 8000934:	f043 0320 	orr.w	r3, r3, #32
 8000938:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800093a:	4b22      	ldr	r3, [pc, #136]	@ (80009c4 <MX_GPIO_Init+0xc4>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093e:	f003 0320 	and.w	r3, r3, #32
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	4b1f      	ldr	r3, [pc, #124]	@ (80009c4 <MX_GPIO_Init+0xc4>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800094a:	4a1e      	ldr	r2, [pc, #120]	@ (80009c4 <MX_GPIO_Init+0xc4>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000952:	4b1c      	ldr	r3, [pc, #112]	@ (80009c4 <MX_GPIO_Init+0xc4>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095e:	4b19      	ldr	r3, [pc, #100]	@ (80009c4 <MX_GPIO_Init+0xc4>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000962:	4a18      	ldr	r2, [pc, #96]	@ (80009c4 <MX_GPIO_Init+0xc4>)
 8000964:	f043 0302 	orr.w	r3, r3, #2
 8000968:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800096a:	4b16      	ldr	r3, [pc, #88]	@ (80009c4 <MX_GPIO_Init+0xc4>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096e:	f003 0302 	and.w	r3, r3, #2
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	2120      	movs	r1, #32
 800097a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800097e:	f001 fb07 	bl	8001f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000982:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000988:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800098c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	4619      	mov	r1, r3
 8000998:	480b      	ldr	r0, [pc, #44]	@ (80009c8 <MX_GPIO_Init+0xc8>)
 800099a:	f001 f977 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800099e:	2320      	movs	r3, #32
 80009a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4619      	mov	r1, r3
 80009b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009b8:	f001 f968 	bl	8001c8c <HAL_GPIO_Init>

}
 80009bc:	bf00      	nop
 80009be:	3728      	adds	r7, #40	@ 0x28
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40021000 	.word	0x40021000
 80009c8:	48000800 	.word	0x48000800

080009cc <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */

int __io_putchar(int ch) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80009d4:	1d39      	adds	r1, r7, #4
 80009d6:	f04f 33ff 	mov.w	r3, #4294967295
 80009da:	2201      	movs	r2, #1
 80009dc:	4803      	ldr	r0, [pc, #12]	@ (80009ec <__io_putchar+0x20>)
 80009de:	f002 fe69 	bl	80036b4 <HAL_UART_Transmit>
	return ch;
 80009e2:	687b      	ldr	r3, [r7, #4]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000f14 	.word	0x20000f14

080009f0 <uart_transmit>:

// Définir les fonctions UART pour le mode polling
int uart_transmit(uint8_t *p_data, uint16_t size) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	460b      	mov	r3, r1
 80009fa:	807b      	strh	r3, [r7, #2]
    return HAL_UART_Transmit(&huart4, p_data, size, HAL_MAX_DELAY);
 80009fc:	887a      	ldrh	r2, [r7, #2]
 80009fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000a02:	6879      	ldr	r1, [r7, #4]
 8000a04:	4803      	ldr	r0, [pc, #12]	@ (8000a14 <uart_transmit+0x24>)
 8000a06:	f002 fe55 	bl	80036b4 <HAL_UART_Transmit>
 8000a0a:	4603      	mov	r3, r0
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000e80 	.word	0x20000e80

08000a18 <uart_poll_receive>:

int uart_poll_receive(uint8_t *p_data, uint16_t size) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	460b      	mov	r3, r1
 8000a22:	807b      	strh	r3, [r7, #2]
    return HAL_UART_Receive(&huart4, p_data, size, 100);
 8000a24:	887a      	ldrh	r2, [r7, #2]
 8000a26:	2364      	movs	r3, #100	@ 0x64
 8000a28:	6879      	ldr	r1, [r7, #4]
 8000a2a:	4804      	ldr	r0, [pc, #16]	@ (8000a3c <uart_poll_receive+0x24>)
 8000a2c:	f002 fed0 	bl	80037d0 <HAL_UART_Receive>
 8000a30:	4603      	mov	r3, r0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000e80 	.word	0x20000e80

08000a40 <uart_it_receive>:

int uart_it_receive(uint8_t *p_data, uint16_t size){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	460b      	mov	r3, r1
 8000a4a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive_IT(&huart4, p_data, size);
 8000a4c:	887b      	ldrh	r3, [r7, #2]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	6879      	ldr	r1, [r7, #4]
 8000a52:	4804      	ldr	r0, [pc, #16]	@ (8000a64 <uart_it_receive+0x24>)
 8000a54:	f003 f818 	bl	8003a88 <HAL_UART_Receive_IT>
	return 0;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000e80 	.word	0x20000e80

08000a68 <uart_it_transmit>:

int uart_it_transmit(uint8_t *p_data, uint16_t size){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	460b      	mov	r3, r1
 8000a72:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_IT(&huart4, p_data, size);
 8000a74:	887b      	ldrh	r3, [r7, #2]
 8000a76:	461a      	mov	r2, r3
 8000a78:	6879      	ldr	r1, [r7, #4]
 8000a7a:	4804      	ldr	r0, [pc, #16]	@ (8000a8c <uart_it_transmit+0x24>)
 8000a7c:	f002 ff70 	bl	8003960 <HAL_UART_Transmit_IT>
	return 0;
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000e80 	.word	0x20000e80

08000a90 <uart_dma_receive>:

int uart_dma_receive(uint8_t *p_data, uint16_t size){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	460b      	mov	r3, r1
 8000a9a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive_DMA(&huart4, p_data, size);
 8000a9c:	887b      	ldrh	r3, [r7, #2]
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	6879      	ldr	r1, [r7, #4]
 8000aa2:	4804      	ldr	r0, [pc, #16]	@ (8000ab4 <uart_dma_receive+0x24>)
 8000aa4:	f003 f8bc 	bl	8003c20 <HAL_UART_Receive_DMA>
	return 0;
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000e80 	.word	0x20000e80

08000ab8 <uart_dma_transmit>:

int uart_dma_transmit(uint8_t *p_data, uint16_t size){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_DMA(&huart4, p_data, size);
 8000ac4:	887b      	ldrh	r3, [r7, #2]
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	6879      	ldr	r1, [r7, #4]
 8000aca:	4804      	ldr	r0, [pc, #16]	@ (8000adc <uart_dma_transmit+0x24>)
 8000acc:	f003 f828 	bl	8003b20 <HAL_UART_Transmit_DMA>
	return 0;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000e80 	.word	0x20000e80

08000ae0 <counter>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void counter (void * pvParameters){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	char* s = pcTaskGetName(xTaskGetCurrentTaskHandle());
 8000ae8:	f006 fa6c 	bl	8006fc4 <xTaskGetCurrentTaskHandle>
 8000aec:	4603      	mov	r3, r0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f006 f834 	bl	8006b5c <pcTaskGetName>
 8000af4:	60f8      	str	r0, [r7, #12]

	int h = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
//		  printf("Failed to retrieve LIDAR health status.\r\n");
//	  }

//	vTaskDelay(500);

	  if (LIDAR_start_scan_dma(&lidar) == 0) {
 8000afa:	4824      	ldr	r0, [pc, #144]	@ (8000b8c <counter+0xac>)
 8000afc:	f7ff fdbe 	bl	800067c <LIDAR_start_scan_dma>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d103      	bne.n	8000b0e <counter+0x2e>
	      printf("LIDAR scanning started successfully.\r\n");
 8000b06:	4822      	ldr	r0, [pc, #136]	@ (8000b90 <counter+0xb0>)
 8000b08:	f007 f806 	bl	8007b18 <puts>
 8000b0c:	e002      	b.n	8000b14 <counter+0x34>
	  } else {
	      printf("Failed to start LIDAR scanning.\r\n");
 8000b0e:	4821      	ldr	r0, [pc, #132]	@ (8000b94 <counter+0xb4>)
 8000b10:	f007 f802 	bl	8007b18 <puts>
	  }

	while (1) {

		printf("Je suis la tache %s et je m'endors pour %d periodes\r\n", s, DUREE);
 8000b14:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b18:	68f9      	ldr	r1, [r7, #12]
 8000b1a:	481f      	ldr	r0, [pc, #124]	@ (8000b98 <counter+0xb8>)
 8000b1c:	f006 ff8c 	bl	8007a38 <iprintf>

		if(h >= 30){
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	2b1d      	cmp	r3, #29
 8000b24:	dd29      	ble.n	8000b7a <counter+0x9a>
			h=0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]

			printf("LIDAR Scan Results (Angle: Distance in mm):\r\n");
 8000b2a:	481c      	ldr	r0, [pc, #112]	@ (8000b9c <counter+0xbc>)
 8000b2c:	f006 fff4 	bl	8007b18 <puts>
	    for (int i = 0; i < 360; i++) {
 8000b30:	2300      	movs	r3, #0
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	e01a      	b.n	8000b6c <counter+0x8c>
	    		if (lidar.processing.point_buff[i] >= 0) { // Afficher uniquement les valeurs valides
 8000b36:	4a15      	ldr	r2, [pc, #84]	@ (8000b8c <counter+0xac>)
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	33be      	adds	r3, #190	@ 0xbe
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	4413      	add	r3, r2
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	db0b      	blt.n	8000b5e <counter+0x7e>
	    			printf("Angle %3d: %4d mm\r\n", i, lidar.processing.point_buff[i]);
 8000b46:	4a11      	ldr	r2, [pc, #68]	@ (8000b8c <counter+0xac>)
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	33be      	adds	r3, #190	@ 0xbe
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	4413      	add	r3, r2
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	461a      	mov	r2, r3
 8000b54:	6939      	ldr	r1, [r7, #16]
 8000b56:	4812      	ldr	r0, [pc, #72]	@ (8000ba0 <counter+0xc0>)
 8000b58:	f006 ff6e 	bl	8007a38 <iprintf>
 8000b5c:	e003      	b.n	8000b66 <counter+0x86>
	    		} else {
	    			printf("Angle %3d: --- mm (No Data)\r\n", i);
 8000b5e:	6939      	ldr	r1, [r7, #16]
 8000b60:	4810      	ldr	r0, [pc, #64]	@ (8000ba4 <counter+0xc4>)
 8000b62:	f006 ff69 	bl	8007a38 <iprintf>
	    for (int i = 0; i < 360; i++) {
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000b72:	dbe0      	blt.n	8000b36 <counter+0x56>
	    		}
	    }

	    printf("\n");
 8000b74:	200a      	movs	r0, #10
 8000b76:	f006 ff71 	bl	8007a5c <putchar>

		}

		h++;
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	617b      	str	r3, [r7, #20]
		vTaskDelay(DUREE);
 8000b80:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b84:	f005 febe 	bl	8006904 <vTaskDelay>
		printf("Je suis la tache %s et je m'endors pour %d periodes\r\n", s, DUREE);
 8000b88:	e7c4      	b.n	8000b14 <counter+0x34>
 8000b8a:	bf00      	nop
 8000b8c:	2000008c 	.word	0x2000008c
 8000b90:	08008b78 	.word	0x08008b78
 8000b94:	08008ba0 	.word	0x08008ba0
 8000b98:	08008bc4 	.word	0x08008bc4
 8000b9c:	08008bfc 	.word	0x08008bfc
 8000ba0:	08008c2c 	.word	0x08008c2c
 8000ba4:	08008c40 	.word	0x08008c40

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	BaseType_t xReturned;
	TaskHandle_t xHandle1 = NULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb2:	f000 fc22 	bl	80013fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb6:	f000 f855 	bl	8000c64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bba:	f7ff fea1 	bl	8000900 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bbe:	f7ff fd33 	bl	8000628 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000bc2:	f000 fad7 	bl	8001174 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8000bc6:	f000 fa89 	bl	80010dc <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  printf("=================== DRIVER LIDAR =================== \r\n");
 8000bca:	481a      	ldr	r0, [pc, #104]	@ (8000c34 <main+0x8c>)
 8000bcc:	f006 ffa4 	bl	8007b18 <puts>
   * Création des vérifications du lidar.
   */

	  // Déclaration et configuration de la structure h_LIDAR

	  lidar.serial_drv.transmit = uart_transmit;
 8000bd0:	4b19      	ldr	r3, [pc, #100]	@ (8000c38 <main+0x90>)
 8000bd2:	4a1a      	ldr	r2, [pc, #104]	@ (8000c3c <main+0x94>)
 8000bd4:	601a      	str	r2, [r3, #0]
	  lidar.serial_drv.poll_receive = uart_poll_receive;
 8000bd6:	4b18      	ldr	r3, [pc, #96]	@ (8000c38 <main+0x90>)
 8000bd8:	4a19      	ldr	r2, [pc, #100]	@ (8000c40 <main+0x98>)
 8000bda:	605a      	str	r2, [r3, #4]

	  lidar.serial_drv.it_receive=uart_it_receive;
 8000bdc:	4b16      	ldr	r3, [pc, #88]	@ (8000c38 <main+0x90>)
 8000bde:	4a19      	ldr	r2, [pc, #100]	@ (8000c44 <main+0x9c>)
 8000be0:	609a      	str	r2, [r3, #8]
	  lidar.serial_drv.it_transmit=uart_it_transmit;
 8000be2:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <main+0x90>)
 8000be4:	4a18      	ldr	r2, [pc, #96]	@ (8000c48 <main+0xa0>)
 8000be6:	60da      	str	r2, [r3, #12]

	  lidar.serial_drv.dma_receive=uart_dma_receive;
 8000be8:	4b13      	ldr	r3, [pc, #76]	@ (8000c38 <main+0x90>)
 8000bea:	4a18      	ldr	r2, [pc, #96]	@ (8000c4c <main+0xa4>)
 8000bec:	611a      	str	r2, [r3, #16]
	  lidar.serial_drv.dma_transmit=uart_dma_transmit;
 8000bee:	4b12      	ldr	r3, [pc, #72]	@ (8000c38 <main+0x90>)
 8000bf0:	4a17      	ldr	r2, [pc, #92]	@ (8000c50 <main+0xa8>)
 8000bf2:	615a      	str	r2, [r3, #20]

	xReturned = xTaskCreate(
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	9301      	str	r3, [sp, #4]
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	9300      	str	r3, [sp, #0]
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c02:	4914      	ldr	r1, [pc, #80]	@ (8000c54 <main+0xac>)
 8000c04:	4814      	ldr	r0, [pc, #80]	@ (8000c58 <main+0xb0>)
 8000c06:	f005 fd37 	bl	8006678 <xTaskCreate>
 8000c0a:	6078      	str	r0, [r7, #4]
			STACK_SIZE, // Stack size in words, not bytes.
			(void *) NULL, // Parameter passed into the task.
			tskIDLE_PRIORITY,// Priority at which the task is created.
			&xHandle1 ); // Used to pass out the created task's handle.

	if (xReturned != pdPASS)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d004      	beq.n	8000c1c <main+0x74>
	{
		printf("Error creating Task\r\n");
 8000c12:	4812      	ldr	r0, [pc, #72]	@ (8000c5c <main+0xb4>)
 8000c14:	f006 ff80 	bl	8007b18 <puts>
		Error_Handler();
 8000c18:	f000 f8d4 	bl	8000dc4 <Error_Handler>
	}

	printf("Tasks created\r\n");
 8000c1c:	4810      	ldr	r0, [pc, #64]	@ (8000c60 <main+0xb8>)
 8000c1e:	f006 ff7b 	bl	8007b18 <puts>

	vTaskStartScheduler();
 8000c22:	f005 fea5 	bl	8006970 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000c26:	f7ff fcdd 	bl	80005e4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c2a:	f005 fc2f 	bl	800648c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c2e:	bf00      	nop
 8000c30:	e7fd      	b.n	8000c2e <main+0x86>
 8000c32:	bf00      	nop
 8000c34:	08008c60 	.word	0x08008c60
 8000c38:	2000008c 	.word	0x2000008c
 8000c3c:	080009f1 	.word	0x080009f1
 8000c40:	08000a19 	.word	0x08000a19
 8000c44:	08000a41 	.word	0x08000a41
 8000c48:	08000a69 	.word	0x08000a69
 8000c4c:	08000a91 	.word	0x08000a91
 8000c50:	08000ab9 	.word	0x08000ab9
 8000c54:	08008c98 	.word	0x08008c98
 8000c58:	08000ae1 	.word	0x08000ae1
 8000c5c:	08008ca0 	.word	0x08008ca0
 8000c60:	08008cb8 	.word	0x08008cb8

08000c64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b094      	sub	sp, #80	@ 0x50
 8000c68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6a:	f107 0318 	add.w	r3, r7, #24
 8000c6e:	2238      	movs	r2, #56	@ 0x38
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f007 f830 	bl	8007cd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000c86:	2000      	movs	r0, #0
 8000c88:	f001 f99a 	bl	8001fc0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c94:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c96:	2340      	movs	r3, #64	@ 0x40
 8000c98:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000ca2:	2304      	movs	r3, #4
 8000ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000ca6:	2355      	movs	r3, #85	@ 0x55
 8000ca8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000caa:	2302      	movs	r3, #2
 8000cac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb6:	f107 0318 	add.w	r3, r7, #24
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f001 fa34 	bl	8002128 <HAL_RCC_OscConfig>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000cc6:	f000 f87d 	bl	8000dc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cca:	230f      	movs	r3, #15
 8000ccc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2104      	movs	r1, #4
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f001 fd32 	bl	800274c <HAL_RCC_ClockConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000cee:	f000 f869 	bl	8000dc4 <Error_Handler>
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	3750      	adds	r7, #80	@ 0x50
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <HAL_UART_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART4) {
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0e      	ldr	r2, [pc, #56]	@ (8000d44 <HAL_UART_RxHalfCpltCallback+0x48>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d116      	bne.n	8000d3c <HAL_UART_RxHalfCpltCallback+0x40>

    	if(lidar.rx_flag_dma == 0){
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <HAL_UART_RxHalfCpltCallback+0x4c>)
 8000d10:	f893 3da1 	ldrb.w	r3, [r3, #3489]	@ 0xda1
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d110      	bne.n	8000d3c <HAL_UART_RxHalfCpltCallback+0x40>
    		lidar.rx_flag_dma = 1;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <HAL_UART_RxHalfCpltCallback+0x4c>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	f883 2da1 	strb.w	r2, [r3, #3489]	@ 0xda1

			memcpy(lidar.processing.frame_buff, lidar.processing.receive_buff, 640);
 8000d22:	4b09      	ldr	r3, [pc, #36]	@ (8000d48 <HAL_UART_RxHalfCpltCallback+0x4c>)
 8000d24:	4a08      	ldr	r2, [pc, #32]	@ (8000d48 <HAL_UART_RxHalfCpltCallback+0x4c>)
 8000d26:	337f      	adds	r3, #127	@ 0x7f
 8000d28:	f502 610a 	add.w	r1, r2, #2208	@ 0x8a0
 8000d2c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000d30:	4618      	mov	r0, r3
 8000d32:	f007 f84c 	bl	8007dce <memcpy>

			// Traiter la première moitié du buffer
			LIDAR_process_frame(&lidar);
 8000d36:	4804      	ldr	r0, [pc, #16]	@ (8000d48 <HAL_UART_RxHalfCpltCallback+0x4c>)
 8000d38:	f7ff fcd8 	bl	80006ec <LIDAR_process_frame>
    	}
    }
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40004c00 	.word	0x40004c00
 8000d48:	2000008c 	.word	0x2000008c

08000d4c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART4){
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a0f      	ldr	r2, [pc, #60]	@ (8000d98 <HAL_UART_RxCpltCallback+0x4c>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d118      	bne.n	8000d90 <HAL_UART_RxCpltCallback+0x44>
    	if(lidar.rx_flag_dma == 0){
 8000d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d9c <HAL_UART_RxCpltCallback+0x50>)
 8000d60:	f893 3da1 	ldrb.w	r3, [r3, #3489]	@ 0xda1
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d112      	bne.n	8000d90 <HAL_UART_RxCpltCallback+0x44>
    		lidar.rx_flag_dma = 2;
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <HAL_UART_RxCpltCallback+0x50>)
 8000d6c:	2202      	movs	r2, #2
 8000d6e:	f883 2da1 	strb.w	r2, [r3, #3489]	@ 0xda1

			memcpy(lidar.processing.frame_buff, lidar.processing.receive_buff[640], 640);
 8000d72:	4b0a      	ldr	r3, [pc, #40]	@ (8000d9c <HAL_UART_RxCpltCallback+0x50>)
 8000d74:	f893 3b20 	ldrb.w	r3, [r3, #2848]	@ 0xb20
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <HAL_UART_RxCpltCallback+0x50>)
 8000d7c:	337f      	adds	r3, #127	@ 0x7f
 8000d7e:	4611      	mov	r1, r2
 8000d80:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000d84:	4618      	mov	r0, r3
 8000d86:	f007 f822 	bl	8007dce <memcpy>

			// Traiter la deuxième moitié du buffer
			LIDAR_process_frame(&lidar);
 8000d8a:	4804      	ldr	r0, [pc, #16]	@ (8000d9c <HAL_UART_RxCpltCallback+0x50>)
 8000d8c:	f7ff fcae 	bl	80006ec <LIDAR_process_frame>
    	}
    }
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40004c00 	.word	0x40004c00
 8000d9c:	2000008c 	.word	0x2000008c

08000da0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a04      	ldr	r2, [pc, #16]	@ (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d101      	bne.n	8000db6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000db2:	f000 fb3b 	bl	800142c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40001000 	.word	0x40001000

08000dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc8:	b672      	cpsid	i
}
 8000dca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <Error_Handler+0x8>

08000dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd6:	4b12      	ldr	r3, [pc, #72]	@ (8000e20 <HAL_MspInit+0x50>)
 8000dd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dda:	4a11      	ldr	r2, [pc, #68]	@ (8000e20 <HAL_MspInit+0x50>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000de2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e20 <HAL_MspInit+0x50>)
 8000de4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dee:	4b0c      	ldr	r3, [pc, #48]	@ (8000e20 <HAL_MspInit+0x50>)
 8000df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df2:	4a0b      	ldr	r2, [pc, #44]	@ (8000e20 <HAL_MspInit+0x50>)
 8000df4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000df8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dfa:	4b09      	ldr	r3, [pc, #36]	@ (8000e20 <HAL_MspInit+0x50>)
 8000dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	210f      	movs	r1, #15
 8000e0a:	f06f 0001 	mvn.w	r0, #1
 8000e0e:	f000 fbe3 	bl	80015d8 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000e12:	f001 f979 	bl	8002108 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40021000 	.word	0x40021000

08000e24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08c      	sub	sp, #48	@ 0x30
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e34:	4b2c      	ldr	r3, [pc, #176]	@ (8000ee8 <HAL_InitTick+0xc4>)
 8000e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e38:	4a2b      	ldr	r2, [pc, #172]	@ (8000ee8 <HAL_InitTick+0xc4>)
 8000e3a:	f043 0310 	orr.w	r3, r3, #16
 8000e3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e40:	4b29      	ldr	r3, [pc, #164]	@ (8000ee8 <HAL_InitTick+0xc4>)
 8000e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e44:	f003 0310 	and.w	r3, r3, #16
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e4c:	f107 020c 	add.w	r2, r7, #12
 8000e50:	f107 0310 	add.w	r3, r7, #16
 8000e54:	4611      	mov	r1, r2
 8000e56:	4618      	mov	r0, r3
 8000e58:	f001 fe4e 	bl	8002af8 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e5c:	f001 fe20 	bl	8002aa0 <HAL_RCC_GetPCLK1Freq>
 8000e60:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e64:	4a21      	ldr	r2, [pc, #132]	@ (8000eec <HAL_InitTick+0xc8>)
 8000e66:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6a:	0c9b      	lsrs	r3, r3, #18
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e70:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef0 <HAL_InitTick+0xcc>)
 8000e72:	4a20      	ldr	r2, [pc, #128]	@ (8000ef4 <HAL_InitTick+0xd0>)
 8000e74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e76:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef0 <HAL_InitTick+0xcc>)
 8000e78:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e7c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e7e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ef0 <HAL_InitTick+0xcc>)
 8000e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e82:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e84:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef0 <HAL_InitTick+0xcc>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8a:	4b19      	ldr	r3, [pc, #100]	@ (8000ef0 <HAL_InitTick+0xcc>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000e90:	4817      	ldr	r0, [pc, #92]	@ (8000ef0 <HAL_InitTick+0xcc>)
 8000e92:	f002 f899 	bl	8002fc8 <HAL_TIM_Base_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000e9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d11b      	bne.n	8000edc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ea4:	4812      	ldr	r0, [pc, #72]	@ (8000ef0 <HAL_InitTick+0xcc>)
 8000ea6:	f002 f8f1 	bl	800308c <HAL_TIM_Base_Start_IT>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000eb0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d111      	bne.n	8000edc <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000eb8:	2036      	movs	r0, #54	@ 0x36
 8000eba:	f000 fba7 	bl	800160c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b0f      	cmp	r3, #15
 8000ec2:	d808      	bhi.n	8000ed6 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	2036      	movs	r0, #54	@ 0x36
 8000eca:	f000 fb85 	bl	80015d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ece:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef8 <HAL_InitTick+0xd4>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6013      	str	r3, [r2, #0]
 8000ed4:	e002      	b.n	8000edc <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000edc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3730      	adds	r7, #48	@ 0x30
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	431bde83 	.word	0x431bde83
 8000ef0:	20000e30 	.word	0x20000e30
 8000ef4:	40001000 	.word	0x40001000
 8000ef8:	20000004 	.word	0x20000004

08000efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <NMI_Handler+0x4>

08000f04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <HardFault_Handler+0x4>

08000f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <MemManage_Handler+0x4>

08000f14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <BusFault_Handler+0x4>

08000f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <UsageFault_Handler+0x4>

08000f24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
	...

08000f34 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000f38:	4802      	ldr	r0, [pc, #8]	@ (8000f44 <DMA1_Channel1_IRQHandler+0x10>)
 8000f3a:	f000 fd58 	bl	80019ee <HAL_DMA_IRQHandler>
//
//  }


  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000fa8 	.word	0x20000fa8

08000f48 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000f4c:	4802      	ldr	r0, [pc, #8]	@ (8000f58 <UART4_IRQHandler+0x10>)
 8000f4e:	f002 feb3 	bl	8003cb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000e80 	.word	0x20000e80

08000f5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f60:	4802      	ldr	r0, [pc, #8]	@ (8000f6c <TIM6_DAC_IRQHandler+0x10>)
 8000f62:	f002 f8fd 	bl	8003160 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000e30 	.word	0x20000e30

08000f70 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	e00a      	b.n	8000f98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f82:	f3af 8000 	nop.w
 8000f86:	4601      	mov	r1, r0
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	1c5a      	adds	r2, r3, #1
 8000f8c:	60ba      	str	r2, [r7, #8]
 8000f8e:	b2ca      	uxtb	r2, r1
 8000f90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	3301      	adds	r3, #1
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697a      	ldr	r2, [r7, #20]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	dbf0      	blt.n	8000f82 <_read+0x12>
  }

  return len;
 8000fa0:	687b      	ldr	r3, [r7, #4]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b086      	sub	sp, #24
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	60f8      	str	r0, [r7, #12]
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	e009      	b.n	8000fd0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	1c5a      	adds	r2, r3, #1
 8000fc0:	60ba      	str	r2, [r7, #8]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fd01 	bl	80009cc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	697a      	ldr	r2, [r7, #20]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	dbf1      	blt.n	8000fbc <_write+0x12>
  }
  return len;
 8000fd8:	687b      	ldr	r3, [r7, #4]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <_close>:

int _close(int file)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800100a:	605a      	str	r2, [r3, #4]
  return 0;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <_isatty>:

int _isatty(int file)
{
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001022:	2301      	movs	r3, #1
}
 8001024:	4618      	mov	r0, r3
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001054:	4a14      	ldr	r2, [pc, #80]	@ (80010a8 <_sbrk+0x5c>)
 8001056:	4b15      	ldr	r3, [pc, #84]	@ (80010ac <_sbrk+0x60>)
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001060:	4b13      	ldr	r3, [pc, #76]	@ (80010b0 <_sbrk+0x64>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d102      	bne.n	800106e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001068:	4b11      	ldr	r3, [pc, #68]	@ (80010b0 <_sbrk+0x64>)
 800106a:	4a12      	ldr	r2, [pc, #72]	@ (80010b4 <_sbrk+0x68>)
 800106c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800106e:	4b10      	ldr	r3, [pc, #64]	@ (80010b0 <_sbrk+0x64>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	429a      	cmp	r2, r3
 800107a:	d207      	bcs.n	800108c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800107c:	f006 fe7a 	bl	8007d74 <__errno>
 8001080:	4603      	mov	r3, r0
 8001082:	220c      	movs	r2, #12
 8001084:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001086:	f04f 33ff 	mov.w	r3, #4294967295
 800108a:	e009      	b.n	80010a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800108c:	4b08      	ldr	r3, [pc, #32]	@ (80010b0 <_sbrk+0x64>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001092:	4b07      	ldr	r3, [pc, #28]	@ (80010b0 <_sbrk+0x64>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	4a05      	ldr	r2, [pc, #20]	@ (80010b0 <_sbrk+0x64>)
 800109c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800109e:	68fb      	ldr	r3, [r7, #12]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20008000 	.word	0x20008000
 80010ac:	00000400 	.word	0x00000400
 80010b0:	20000e7c 	.word	0x20000e7c
 80010b4:	200060d8 	.word	0x200060d8

080010b8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010bc:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <SystemInit+0x20>)
 80010be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010c2:	4a05      	ldr	r2, [pc, #20]	@ (80010d8 <SystemInit+0x20>)
 80010c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <MX_UART4_Init>:
UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_uart4_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80010e0:	4b22      	ldr	r3, [pc, #136]	@ (800116c <MX_UART4_Init+0x90>)
 80010e2:	4a23      	ldr	r2, [pc, #140]	@ (8001170 <MX_UART4_Init+0x94>)
 80010e4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 128000;
 80010e6:	4b21      	ldr	r3, [pc, #132]	@ (800116c <MX_UART4_Init+0x90>)
 80010e8:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 80010ec:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80010ee:	4b1f      	ldr	r3, [pc, #124]	@ (800116c <MX_UART4_Init+0x90>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80010f4:	4b1d      	ldr	r3, [pc, #116]	@ (800116c <MX_UART4_Init+0x90>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80010fa:	4b1c      	ldr	r3, [pc, #112]	@ (800116c <MX_UART4_Init+0x90>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001100:	4b1a      	ldr	r3, [pc, #104]	@ (800116c <MX_UART4_Init+0x90>)
 8001102:	220c      	movs	r2, #12
 8001104:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001106:	4b19      	ldr	r3, [pc, #100]	@ (800116c <MX_UART4_Init+0x90>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800110c:	4b17      	ldr	r3, [pc, #92]	@ (800116c <MX_UART4_Init+0x90>)
 800110e:	2200      	movs	r2, #0
 8001110:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001112:	4b16      	ldr	r3, [pc, #88]	@ (800116c <MX_UART4_Init+0x90>)
 8001114:	2200      	movs	r2, #0
 8001116:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001118:	4b14      	ldr	r3, [pc, #80]	@ (800116c <MX_UART4_Init+0x90>)
 800111a:	2200      	movs	r2, #0
 800111c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800111e:	4b13      	ldr	r3, [pc, #76]	@ (800116c <MX_UART4_Init+0x90>)
 8001120:	2200      	movs	r2, #0
 8001122:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001124:	4811      	ldr	r0, [pc, #68]	@ (800116c <MX_UART4_Init+0x90>)
 8001126:	f002 fa75 	bl	8003614 <HAL_UART_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001130:	f7ff fe48 	bl	8000dc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001134:	2100      	movs	r1, #0
 8001136:	480d      	ldr	r0, [pc, #52]	@ (800116c <MX_UART4_Init+0x90>)
 8001138:	f005 f8c5 	bl	80062c6 <HAL_UARTEx_SetTxFifoThreshold>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001142:	f7ff fe3f 	bl	8000dc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001146:	2100      	movs	r1, #0
 8001148:	4808      	ldr	r0, [pc, #32]	@ (800116c <MX_UART4_Init+0x90>)
 800114a:	f005 f8fa 	bl	8006342 <HAL_UARTEx_SetRxFifoThreshold>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001154:	f7ff fe36 	bl	8000dc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001158:	4804      	ldr	r0, [pc, #16]	@ (800116c <MX_UART4_Init+0x90>)
 800115a:	f005 f87b 	bl	8006254 <HAL_UARTEx_DisableFifoMode>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001164:	f7ff fe2e 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000e80 	.word	0x20000e80
 8001170:	40004c00 	.word	0x40004c00

08001174 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001178:	4b22      	ldr	r3, [pc, #136]	@ (8001204 <MX_USART2_UART_Init+0x90>)
 800117a:	4a23      	ldr	r2, [pc, #140]	@ (8001208 <MX_USART2_UART_Init+0x94>)
 800117c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800117e:	4b21      	ldr	r3, [pc, #132]	@ (8001204 <MX_USART2_UART_Init+0x90>)
 8001180:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001184:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001186:	4b1f      	ldr	r3, [pc, #124]	@ (8001204 <MX_USART2_UART_Init+0x90>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800118c:	4b1d      	ldr	r3, [pc, #116]	@ (8001204 <MX_USART2_UART_Init+0x90>)
 800118e:	2200      	movs	r2, #0
 8001190:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001192:	4b1c      	ldr	r3, [pc, #112]	@ (8001204 <MX_USART2_UART_Init+0x90>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001198:	4b1a      	ldr	r3, [pc, #104]	@ (8001204 <MX_USART2_UART_Init+0x90>)
 800119a:	220c      	movs	r2, #12
 800119c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119e:	4b19      	ldr	r3, [pc, #100]	@ (8001204 <MX_USART2_UART_Init+0x90>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a4:	4b17      	ldr	r3, [pc, #92]	@ (8001204 <MX_USART2_UART_Init+0x90>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011aa:	4b16      	ldr	r3, [pc, #88]	@ (8001204 <MX_USART2_UART_Init+0x90>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011b0:	4b14      	ldr	r3, [pc, #80]	@ (8001204 <MX_USART2_UART_Init+0x90>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011b6:	4b13      	ldr	r3, [pc, #76]	@ (8001204 <MX_USART2_UART_Init+0x90>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011bc:	4811      	ldr	r0, [pc, #68]	@ (8001204 <MX_USART2_UART_Init+0x90>)
 80011be:	f002 fa29 	bl	8003614 <HAL_UART_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80011c8:	f7ff fdfc 	bl	8000dc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011cc:	2100      	movs	r1, #0
 80011ce:	480d      	ldr	r0, [pc, #52]	@ (8001204 <MX_USART2_UART_Init+0x90>)
 80011d0:	f005 f879 	bl	80062c6 <HAL_UARTEx_SetTxFifoThreshold>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80011da:	f7ff fdf3 	bl	8000dc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011de:	2100      	movs	r1, #0
 80011e0:	4808      	ldr	r0, [pc, #32]	@ (8001204 <MX_USART2_UART_Init+0x90>)
 80011e2:	f005 f8ae 	bl	8006342 <HAL_UARTEx_SetRxFifoThreshold>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80011ec:	f7ff fdea 	bl	8000dc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80011f0:	4804      	ldr	r0, [pc, #16]	@ (8001204 <MX_USART2_UART_Init+0x90>)
 80011f2:	f005 f82f 	bl	8006254 <HAL_UARTEx_DisableFifoMode>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80011fc:	f7ff fde2 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000f14 	.word	0x20000f14
 8001208:	40004400 	.word	0x40004400

0800120c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b09c      	sub	sp, #112	@ 0x70
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001224:	f107 0318 	add.w	r3, r7, #24
 8001228:	2244      	movs	r2, #68	@ 0x44
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f006 fd53 	bl	8007cd8 <memset>
  if(uartHandle->Instance==UART4)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a56      	ldr	r2, [pc, #344]	@ (8001390 <HAL_UART_MspInit+0x184>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d169      	bne.n	8001310 <HAL_UART_MspInit+0x104>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800123c:	2308      	movs	r3, #8
 800123e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001240:	2300      	movs	r3, #0
 8001242:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001244:	f107 0318 	add.w	r3, r7, #24
 8001248:	4618      	mov	r0, r3
 800124a:	f001 fccd 	bl	8002be8 <HAL_RCCEx_PeriphCLKConfig>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001254:	f7ff fdb6 	bl	8000dc4 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001258:	4b4e      	ldr	r3, [pc, #312]	@ (8001394 <HAL_UART_MspInit+0x188>)
 800125a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800125c:	4a4d      	ldr	r2, [pc, #308]	@ (8001394 <HAL_UART_MspInit+0x188>)
 800125e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001262:	6593      	str	r3, [r2, #88]	@ 0x58
 8001264:	4b4b      	ldr	r3, [pc, #300]	@ (8001394 <HAL_UART_MspInit+0x188>)
 8001266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001268:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001270:	4b48      	ldr	r3, [pc, #288]	@ (8001394 <HAL_UART_MspInit+0x188>)
 8001272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001274:	4a47      	ldr	r2, [pc, #284]	@ (8001394 <HAL_UART_MspInit+0x188>)
 8001276:	f043 0304 	orr.w	r3, r3, #4
 800127a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800127c:	4b45      	ldr	r3, [pc, #276]	@ (8001394 <HAL_UART_MspInit+0x188>)
 800127e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001280:	f003 0304 	and.w	r3, r3, #4
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001288:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800128c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128e:	2302      	movs	r3, #2
 8001290:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	2300      	movs	r3, #0
 8001298:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 800129a:	2305      	movs	r3, #5
 800129c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80012a2:	4619      	mov	r1, r3
 80012a4:	483c      	ldr	r0, [pc, #240]	@ (8001398 <HAL_UART_MspInit+0x18c>)
 80012a6:	f000 fcf1 	bl	8001c8c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Channel1;
 80012aa:	4b3c      	ldr	r3, [pc, #240]	@ (800139c <HAL_UART_MspInit+0x190>)
 80012ac:	4a3c      	ldr	r2, [pc, #240]	@ (80013a0 <HAL_UART_MspInit+0x194>)
 80012ae:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80012b0:	4b3a      	ldr	r3, [pc, #232]	@ (800139c <HAL_UART_MspInit+0x190>)
 80012b2:	221e      	movs	r2, #30
 80012b4:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012b6:	4b39      	ldr	r3, [pc, #228]	@ (800139c <HAL_UART_MspInit+0x190>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012bc:	4b37      	ldr	r3, [pc, #220]	@ (800139c <HAL_UART_MspInit+0x190>)
 80012be:	2200      	movs	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012c2:	4b36      	ldr	r3, [pc, #216]	@ (800139c <HAL_UART_MspInit+0x190>)
 80012c4:	2280      	movs	r2, #128	@ 0x80
 80012c6:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012c8:	4b34      	ldr	r3, [pc, #208]	@ (800139c <HAL_UART_MspInit+0x190>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012ce:	4b33      	ldr	r3, [pc, #204]	@ (800139c <HAL_UART_MspInit+0x190>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80012d4:	4b31      	ldr	r3, [pc, #196]	@ (800139c <HAL_UART_MspInit+0x190>)
 80012d6:	2220      	movs	r2, #32
 80012d8:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012da:	4b30      	ldr	r3, [pc, #192]	@ (800139c <HAL_UART_MspInit+0x190>)
 80012dc:	2200      	movs	r2, #0
 80012de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80012e0:	482e      	ldr	r0, [pc, #184]	@ (800139c <HAL_UART_MspInit+0x190>)
 80012e2:	f000 f9a1 	bl	8001628 <HAL_DMA_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 80012ec:	f7ff fd6a 	bl	8000dc4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a2a      	ldr	r2, [pc, #168]	@ (800139c <HAL_UART_MspInit+0x190>)
 80012f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80012f8:	4a28      	ldr	r2, [pc, #160]	@ (800139c <HAL_UART_MspInit+0x190>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2105      	movs	r1, #5
 8001302:	2034      	movs	r0, #52	@ 0x34
 8001304:	f000 f968 	bl	80015d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001308:	2034      	movs	r0, #52	@ 0x34
 800130a:	f000 f97f 	bl	800160c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800130e:	e03b      	b.n	8001388 <HAL_UART_MspInit+0x17c>
  else if(uartHandle->Instance==USART2)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a23      	ldr	r2, [pc, #140]	@ (80013a4 <HAL_UART_MspInit+0x198>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d136      	bne.n	8001388 <HAL_UART_MspInit+0x17c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800131a:	2302      	movs	r3, #2
 800131c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800131e:	2300      	movs	r3, #0
 8001320:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001322:	f107 0318 	add.w	r3, r7, #24
 8001326:	4618      	mov	r0, r3
 8001328:	f001 fc5e 	bl	8002be8 <HAL_RCCEx_PeriphCLKConfig>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <HAL_UART_MspInit+0x12a>
      Error_Handler();
 8001332:	f7ff fd47 	bl	8000dc4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001336:	4b17      	ldr	r3, [pc, #92]	@ (8001394 <HAL_UART_MspInit+0x188>)
 8001338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800133a:	4a16      	ldr	r2, [pc, #88]	@ (8001394 <HAL_UART_MspInit+0x188>)
 800133c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001340:	6593      	str	r3, [r2, #88]	@ 0x58
 8001342:	4b14      	ldr	r3, [pc, #80]	@ (8001394 <HAL_UART_MspInit+0x188>)
 8001344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	4b11      	ldr	r3, [pc, #68]	@ (8001394 <HAL_UART_MspInit+0x188>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001352:	4a10      	ldr	r2, [pc, #64]	@ (8001394 <HAL_UART_MspInit+0x188>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800135a:	4b0e      	ldr	r3, [pc, #56]	@ (8001394 <HAL_UART_MspInit+0x188>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001366:	230c      	movs	r3, #12
 8001368:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001376:	2307      	movs	r3, #7
 8001378:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800137e:	4619      	mov	r1, r3
 8001380:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001384:	f000 fc82 	bl	8001c8c <HAL_GPIO_Init>
}
 8001388:	bf00      	nop
 800138a:	3770      	adds	r7, #112	@ 0x70
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40004c00 	.word	0x40004c00
 8001394:	40021000 	.word	0x40021000
 8001398:	48000800 	.word	0x48000800
 800139c:	20000fa8 	.word	0x20000fa8
 80013a0:	40020008 	.word	0x40020008
 80013a4:	40004400 	.word	0x40004400

080013a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013a8:	480d      	ldr	r0, [pc, #52]	@ (80013e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013aa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80013ac:	f7ff fe84 	bl	80010b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b0:	480c      	ldr	r0, [pc, #48]	@ (80013e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80013b2:	490d      	ldr	r1, [pc, #52]	@ (80013e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013b4:	4a0d      	ldr	r2, [pc, #52]	@ (80013ec <LoopForever+0xe>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80013b8:	e002      	b.n	80013c0 <LoopCopyDataInit>

080013ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013be:	3304      	adds	r3, #4

080013c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c4:	d3f9      	bcc.n	80013ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c6:	4a0a      	ldr	r2, [pc, #40]	@ (80013f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013c8:	4c0a      	ldr	r4, [pc, #40]	@ (80013f4 <LoopForever+0x16>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013cc:	e001      	b.n	80013d2 <LoopFillZerobss>

080013ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d0:	3204      	adds	r2, #4

080013d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d4:	d3fb      	bcc.n	80013ce <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80013d6:	f006 fcd3 	bl	8007d80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013da:	f7ff fbe5 	bl	8000ba8 <main>

080013de <LoopForever>:

LoopForever:
    b LoopForever
 80013de:	e7fe      	b.n	80013de <LoopForever>
  ldr   r0, =_estack
 80013e0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80013e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80013ec:	08008d7c 	.word	0x08008d7c
  ldr r2, =_sbss
 80013f0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80013f4:	200060d4 	.word	0x200060d4

080013f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013f8:	e7fe      	b.n	80013f8 <ADC1_2_IRQHandler>

080013fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001400:	2300      	movs	r3, #0
 8001402:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001404:	2003      	movs	r0, #3
 8001406:	f000 f8dc 	bl	80015c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800140a:	200f      	movs	r0, #15
 800140c:	f7ff fd0a 	bl	8000e24 <HAL_InitTick>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d002      	beq.n	800141c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	71fb      	strb	r3, [r7, #7]
 800141a:	e001      	b.n	8001420 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800141c:	f7ff fcd8 	bl	8000dd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001420:	79fb      	ldrb	r3, [r7, #7]

}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001430:	4b05      	ldr	r3, [pc, #20]	@ (8001448 <HAL_IncTick+0x1c>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4b05      	ldr	r3, [pc, #20]	@ (800144c <HAL_IncTick+0x20>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4413      	add	r3, r2
 800143a:	4a03      	ldr	r2, [pc, #12]	@ (8001448 <HAL_IncTick+0x1c>)
 800143c:	6013      	str	r3, [r2, #0]
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	20001008 	.word	0x20001008
 800144c:	20000008 	.word	0x20000008

08001450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return uwTick;
 8001454:	4b03      	ldr	r3, [pc, #12]	@ (8001464 <HAL_GetTick+0x14>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20001008 	.word	0x20001008

08001468 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001478:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <__NVIC_SetPriorityGrouping+0x44>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001484:	4013      	ands	r3, r2
 8001486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001490:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001494:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800149a:	4a04      	ldr	r2, [pc, #16]	@ (80014ac <__NVIC_SetPriorityGrouping+0x44>)
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	60d3      	str	r3, [r2, #12]
}
 80014a0:	bf00      	nop
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b4:	4b04      	ldr	r3, [pc, #16]	@ (80014c8 <__NVIC_GetPriorityGrouping+0x18>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	0a1b      	lsrs	r3, r3, #8
 80014ba:	f003 0307 	and.w	r3, r3, #7
}
 80014be:	4618      	mov	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	db0b      	blt.n	80014f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	f003 021f 	and.w	r2, r3, #31
 80014e4:	4907      	ldr	r1, [pc, #28]	@ (8001504 <__NVIC_EnableIRQ+0x38>)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	095b      	lsrs	r3, r3, #5
 80014ec:	2001      	movs	r0, #1
 80014ee:	fa00 f202 	lsl.w	r2, r0, r2
 80014f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000e100 	.word	0xe000e100

08001508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	6039      	str	r1, [r7, #0]
 8001512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001518:	2b00      	cmp	r3, #0
 800151a:	db0a      	blt.n	8001532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	b2da      	uxtb	r2, r3
 8001520:	490c      	ldr	r1, [pc, #48]	@ (8001554 <__NVIC_SetPriority+0x4c>)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	0112      	lsls	r2, r2, #4
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	440b      	add	r3, r1
 800152c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001530:	e00a      	b.n	8001548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	b2da      	uxtb	r2, r3
 8001536:	4908      	ldr	r1, [pc, #32]	@ (8001558 <__NVIC_SetPriority+0x50>)
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	f003 030f 	and.w	r3, r3, #15
 800153e:	3b04      	subs	r3, #4
 8001540:	0112      	lsls	r2, r2, #4
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	440b      	add	r3, r1
 8001546:	761a      	strb	r2, [r3, #24]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000e100 	.word	0xe000e100
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800155c:	b480      	push	{r7}
 800155e:	b089      	sub	sp, #36	@ 0x24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f1c3 0307 	rsb	r3, r3, #7
 8001576:	2b04      	cmp	r3, #4
 8001578:	bf28      	it	cs
 800157a:	2304      	movcs	r3, #4
 800157c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3304      	adds	r3, #4
 8001582:	2b06      	cmp	r3, #6
 8001584:	d902      	bls.n	800158c <NVIC_EncodePriority+0x30>
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3b03      	subs	r3, #3
 800158a:	e000      	b.n	800158e <NVIC_EncodePriority+0x32>
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001590:	f04f 32ff 	mov.w	r2, #4294967295
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43da      	mvns	r2, r3
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	401a      	ands	r2, r3
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a4:	f04f 31ff 	mov.w	r1, #4294967295
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	fa01 f303 	lsl.w	r3, r1, r3
 80015ae:	43d9      	mvns	r1, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b4:	4313      	orrs	r3, r2
         );
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3724      	adds	r7, #36	@ 0x24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff ff4c 	bl	8001468 <__NVIC_SetPriorityGrouping>
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
 80015e4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015e6:	f7ff ff63 	bl	80014b0 <__NVIC_GetPriorityGrouping>
 80015ea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	68b9      	ldr	r1, [r7, #8]
 80015f0:	6978      	ldr	r0, [r7, #20]
 80015f2:	f7ff ffb3 	bl	800155c <NVIC_EncodePriority>
 80015f6:	4602      	mov	r2, r0
 80015f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015fc:	4611      	mov	r1, r2
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff ff82 	bl	8001508 <__NVIC_SetPriority>
}
 8001604:	bf00      	nop
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff ff56 	bl	80014cc <__NVIC_EnableIRQ>
}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e08d      	b.n	8001756 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	461a      	mov	r2, r3
 8001640:	4b47      	ldr	r3, [pc, #284]	@ (8001760 <HAL_DMA_Init+0x138>)
 8001642:	429a      	cmp	r2, r3
 8001644:	d80f      	bhi.n	8001666 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	461a      	mov	r2, r3
 800164c:	4b45      	ldr	r3, [pc, #276]	@ (8001764 <HAL_DMA_Init+0x13c>)
 800164e:	4413      	add	r3, r2
 8001650:	4a45      	ldr	r2, [pc, #276]	@ (8001768 <HAL_DMA_Init+0x140>)
 8001652:	fba2 2303 	umull	r2, r3, r2, r3
 8001656:	091b      	lsrs	r3, r3, #4
 8001658:	009a      	lsls	r2, r3, #2
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a42      	ldr	r2, [pc, #264]	@ (800176c <HAL_DMA_Init+0x144>)
 8001662:	641a      	str	r2, [r3, #64]	@ 0x40
 8001664:	e00e      	b.n	8001684 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	461a      	mov	r2, r3
 800166c:	4b40      	ldr	r3, [pc, #256]	@ (8001770 <HAL_DMA_Init+0x148>)
 800166e:	4413      	add	r3, r2
 8001670:	4a3d      	ldr	r2, [pc, #244]	@ (8001768 <HAL_DMA_Init+0x140>)
 8001672:	fba2 2303 	umull	r2, r3, r2, r3
 8001676:	091b      	lsrs	r3, r3, #4
 8001678:	009a      	lsls	r2, r3, #2
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a3c      	ldr	r2, [pc, #240]	@ (8001774 <HAL_DMA_Init+0x14c>)
 8001682:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2202      	movs	r2, #2
 8001688:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800169a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800169e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80016a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a1b      	ldr	r3, [r3, #32]
 80016c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 fa76 	bl	8001bc8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80016e4:	d102      	bne.n	80016ec <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001700:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d010      	beq.n	800172c <HAL_DMA_Init+0x104>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b04      	cmp	r3, #4
 8001710:	d80c      	bhi.n	800172c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 fa96 	bl	8001c44 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	e008      	b.n	800173e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40020407 	.word	0x40020407
 8001764:	bffdfff8 	.word	0xbffdfff8
 8001768:	cccccccd 	.word	0xcccccccd
 800176c:	40020000 	.word	0x40020000
 8001770:	bffdfbf8 	.word	0xbffdfbf8
 8001774:	40020400 	.word	0x40020400

08001778 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
 8001784:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001786:	2300      	movs	r3, #0
 8001788:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001790:	2b01      	cmp	r3, #1
 8001792:	d101      	bne.n	8001798 <HAL_DMA_Start_IT+0x20>
 8001794:	2302      	movs	r3, #2
 8001796:	e066      	b.n	8001866 <HAL_DMA_Start_IT+0xee>
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d155      	bne.n	8001858 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2202      	movs	r2, #2
 80017b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2200      	movs	r2, #0
 80017b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f022 0201 	bic.w	r2, r2, #1
 80017c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	68b9      	ldr	r1, [r7, #8]
 80017d0:	68f8      	ldr	r0, [r7, #12]
 80017d2:	f000 f9bb 	bl	8001b4c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d008      	beq.n	80017f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f042 020e 	orr.w	r2, r2, #14
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	e00f      	b.n	8001810 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 0204 	bic.w	r2, r2, #4
 80017fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 020a 	orr.w	r2, r2, #10
 800180e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d007      	beq.n	800182e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001828:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800182c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001832:	2b00      	cmp	r3, #0
 8001834:	d007      	beq.n	8001846 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001840:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001844:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f042 0201 	orr.w	r2, r2, #1
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	e005      	b.n	8001864 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001860:	2302      	movs	r3, #2
 8001862:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001864:	7dfb      	ldrb	r3, [r7, #23]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800186e:	b480      	push	{r7}
 8001870:	b085      	sub	sp, #20
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001876:	2300      	movs	r3, #0
 8001878:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d005      	beq.n	8001892 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2204      	movs	r2, #4
 800188a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	73fb      	strb	r3, [r7, #15]
 8001890:	e037      	b.n	8001902 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f022 020e 	bic.w	r2, r2, #14
 80018a0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018b0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 0201 	bic.w	r2, r2, #1
 80018c0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c6:	f003 021f 	and.w	r2, r3, #31
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	2101      	movs	r1, #1
 80018d0:	fa01 f202 	lsl.w	r2, r1, r2
 80018d4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80018de:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d00c      	beq.n	8001902 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018f6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001900:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2201      	movs	r2, #1
 8001906:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001912:	7bfb      	ldrb	r3, [r7, #15]
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001928:	2300      	movs	r3, #0
 800192a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001932:	b2db      	uxtb	r3, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d00d      	beq.n	8001954 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2204      	movs	r2, #4
 800193c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	73fb      	strb	r3, [r7, #15]
 8001952:	e047      	b.n	80019e4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f022 020e 	bic.w	r2, r2, #14
 8001962:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f022 0201 	bic.w	r2, r2, #1
 8001972:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800197e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001982:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001988:	f003 021f 	and.w	r2, r3, #31
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001990:	2101      	movs	r1, #1
 8001992:	fa01 f202 	lsl.w	r2, r1, r2
 8001996:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80019a0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00c      	beq.n	80019c4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019b8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80019c2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	4798      	blx	r3
    }
  }
  return status;
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b084      	sub	sp, #16
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0a:	f003 031f 	and.w	r3, r3, #31
 8001a0e:	2204      	movs	r2, #4
 8001a10:	409a      	lsls	r2, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	4013      	ands	r3, r2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d026      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x7a>
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d021      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0320 	and.w	r3, r3, #32
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d107      	bne.n	8001a42 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 0204 	bic.w	r2, r2, #4
 8001a40:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a46:	f003 021f 	and.w	r2, r3, #31
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4e:	2104      	movs	r1, #4
 8001a50:	fa01 f202 	lsl.w	r2, r1, r2
 8001a54:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d071      	beq.n	8001b42 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001a66:	e06c      	b.n	8001b42 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6c:	f003 031f 	and.w	r3, r3, #31
 8001a70:	2202      	movs	r2, #2
 8001a72:	409a      	lsls	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d02e      	beq.n	8001ada <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d029      	beq.n	8001ada <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0320 	and.w	r3, r3, #32
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d10b      	bne.n	8001aac <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 020a 	bic.w	r2, r2, #10
 8001aa2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab0:	f003 021f 	and.w	r2, r3, #31
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab8:	2102      	movs	r1, #2
 8001aba:	fa01 f202 	lsl.w	r2, r1, r2
 8001abe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d038      	beq.n	8001b42 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001ad8:	e033      	b.n	8001b42 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ade:	f003 031f 	and.w	r3, r3, #31
 8001ae2:	2208      	movs	r2, #8
 8001ae4:	409a      	lsls	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d02a      	beq.n	8001b44 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	f003 0308 	and.w	r3, r3, #8
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d025      	beq.n	8001b44 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 020e 	bic.w	r2, r2, #14
 8001b06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0c:	f003 021f 	and.w	r2, r3, #31
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b14:	2101      	movs	r1, #1
 8001b16:	fa01 f202 	lsl.w	r2, r1, r2
 8001b1a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d004      	beq.n	8001b44 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001b42:	bf00      	nop
 8001b44:	bf00      	nop
}
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
 8001b58:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001b62:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d004      	beq.n	8001b76 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001b74:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7a:	f003 021f 	and.w	r2, r3, #31
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b82:	2101      	movs	r1, #1
 8001b84:	fa01 f202 	lsl.w	r2, r1, r2
 8001b88:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	2b10      	cmp	r3, #16
 8001b98:	d108      	bne.n	8001bac <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001baa:	e007      	b.n	8001bbc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68ba      	ldr	r2, [r7, #8]
 8001bb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	60da      	str	r2, [r3, #12]
}
 8001bbc:	bf00      	nop
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b087      	sub	sp, #28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4b16      	ldr	r3, [pc, #88]	@ (8001c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d802      	bhi.n	8001be2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001bdc:	4b15      	ldr	r3, [pc, #84]	@ (8001c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001bde:	617b      	str	r3, [r7, #20]
 8001be0:	e001      	b.n	8001be6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001be2:	4b15      	ldr	r3, [pc, #84]	@ (8001c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001be4:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	3b08      	subs	r3, #8
 8001bf2:	4a12      	ldr	r2, [pc, #72]	@ (8001c3c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf8:	091b      	lsrs	r3, r3, #4
 8001bfa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c00:	089b      	lsrs	r3, r3, #2
 8001c02:	009a      	lsls	r2, r3, #2
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	4413      	add	r3, r2
 8001c08:	461a      	mov	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a0b      	ldr	r2, [pc, #44]	@ (8001c40 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001c12:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f003 031f 	and.w	r3, r3, #31
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	409a      	lsls	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001c22:	bf00      	nop
 8001c24:	371c      	adds	r7, #28
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	40020407 	.word	0x40020407
 8001c34:	40020800 	.word	0x40020800
 8001c38:	40020820 	.word	0x40020820
 8001c3c:	cccccccd 	.word	0xcccccccd
 8001c40:	40020880 	.word	0x40020880

08001c44 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	4b0b      	ldr	r3, [pc, #44]	@ (8001c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001c58:	4413      	add	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a08      	ldr	r2, [pc, #32]	@ (8001c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001c66:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	f003 031f 	and.w	r3, r3, #31
 8001c70:	2201      	movs	r2, #1
 8001c72:	409a      	lsls	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001c78:	bf00      	nop
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	1000823f 	.word	0x1000823f
 8001c88:	40020940 	.word	0x40020940

08001c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b087      	sub	sp, #28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c9a:	e15a      	b.n	8001f52 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca8:	4013      	ands	r3, r2
 8001caa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 814c 	beq.w	8001f4c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 0303 	and.w	r3, r3, #3
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d005      	beq.n	8001ccc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d130      	bne.n	8001d2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	2203      	movs	r2, #3
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	68da      	ldr	r2, [r3, #12]
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d02:	2201      	movs	r2, #1
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	091b      	lsrs	r3, r3, #4
 8001d18:	f003 0201 	and.w	r2, r3, #1
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	2b03      	cmp	r3, #3
 8001d38:	d017      	beq.n	8001d6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	2203      	movs	r2, #3
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d123      	bne.n	8001dbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	08da      	lsrs	r2, r3, #3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3208      	adds	r2, #8
 8001d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	220f      	movs	r2, #15
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43db      	mvns	r3, r3
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	4013      	ands	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	691a      	ldr	r2, [r3, #16]
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	08da      	lsrs	r2, r3, #3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3208      	adds	r2, #8
 8001db8:	6939      	ldr	r1, [r7, #16]
 8001dba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	2203      	movs	r2, #3
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f003 0203 	and.w	r2, r3, #3
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 80a6 	beq.w	8001f4c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e00:	4b5b      	ldr	r3, [pc, #364]	@ (8001f70 <HAL_GPIO_Init+0x2e4>)
 8001e02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e04:	4a5a      	ldr	r2, [pc, #360]	@ (8001f70 <HAL_GPIO_Init+0x2e4>)
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e0c:	4b58      	ldr	r3, [pc, #352]	@ (8001f70 <HAL_GPIO_Init+0x2e4>)
 8001e0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e18:	4a56      	ldr	r2, [pc, #344]	@ (8001f74 <HAL_GPIO_Init+0x2e8>)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	089b      	lsrs	r3, r3, #2
 8001e1e:	3302      	adds	r3, #2
 8001e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f003 0303 	and.w	r3, r3, #3
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	220f      	movs	r2, #15
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e42:	d01f      	beq.n	8001e84 <HAL_GPIO_Init+0x1f8>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a4c      	ldr	r2, [pc, #304]	@ (8001f78 <HAL_GPIO_Init+0x2ec>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d019      	beq.n	8001e80 <HAL_GPIO_Init+0x1f4>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a4b      	ldr	r2, [pc, #300]	@ (8001f7c <HAL_GPIO_Init+0x2f0>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d013      	beq.n	8001e7c <HAL_GPIO_Init+0x1f0>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a4a      	ldr	r2, [pc, #296]	@ (8001f80 <HAL_GPIO_Init+0x2f4>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d00d      	beq.n	8001e78 <HAL_GPIO_Init+0x1ec>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a49      	ldr	r2, [pc, #292]	@ (8001f84 <HAL_GPIO_Init+0x2f8>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d007      	beq.n	8001e74 <HAL_GPIO_Init+0x1e8>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a48      	ldr	r2, [pc, #288]	@ (8001f88 <HAL_GPIO_Init+0x2fc>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d101      	bne.n	8001e70 <HAL_GPIO_Init+0x1e4>
 8001e6c:	2305      	movs	r3, #5
 8001e6e:	e00a      	b.n	8001e86 <HAL_GPIO_Init+0x1fa>
 8001e70:	2306      	movs	r3, #6
 8001e72:	e008      	b.n	8001e86 <HAL_GPIO_Init+0x1fa>
 8001e74:	2304      	movs	r3, #4
 8001e76:	e006      	b.n	8001e86 <HAL_GPIO_Init+0x1fa>
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e004      	b.n	8001e86 <HAL_GPIO_Init+0x1fa>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	e002      	b.n	8001e86 <HAL_GPIO_Init+0x1fa>
 8001e80:	2301      	movs	r3, #1
 8001e82:	e000      	b.n	8001e86 <HAL_GPIO_Init+0x1fa>
 8001e84:	2300      	movs	r3, #0
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	f002 0203 	and.w	r2, r2, #3
 8001e8c:	0092      	lsls	r2, r2, #2
 8001e8e:	4093      	lsls	r3, r2
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e96:	4937      	ldr	r1, [pc, #220]	@ (8001f74 <HAL_GPIO_Init+0x2e8>)
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	089b      	lsrs	r3, r3, #2
 8001e9c:	3302      	adds	r3, #2
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ea4:	4b39      	ldr	r3, [pc, #228]	@ (8001f8c <HAL_GPIO_Init+0x300>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	43db      	mvns	r3, r3
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ec8:	4a30      	ldr	r2, [pc, #192]	@ (8001f8c <HAL_GPIO_Init+0x300>)
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ece:	4b2f      	ldr	r3, [pc, #188]	@ (8001f8c <HAL_GPIO_Init+0x300>)
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	4013      	ands	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ef2:	4a26      	ldr	r2, [pc, #152]	@ (8001f8c <HAL_GPIO_Init+0x300>)
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001ef8:	4b24      	ldr	r3, [pc, #144]	@ (8001f8c <HAL_GPIO_Init+0x300>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	43db      	mvns	r3, r3
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4013      	ands	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f1c:	4a1b      	ldr	r2, [pc, #108]	@ (8001f8c <HAL_GPIO_Init+0x300>)
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f22:	4b1a      	ldr	r3, [pc, #104]	@ (8001f8c <HAL_GPIO_Init+0x300>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f46:	4a11      	ldr	r2, [pc, #68]	@ (8001f8c <HAL_GPIO_Init+0x300>)
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f47f ae9d 	bne.w	8001c9c <HAL_GPIO_Init+0x10>
  }
}
 8001f62:	bf00      	nop
 8001f64:	bf00      	nop
 8001f66:	371c      	adds	r7, #28
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	40021000 	.word	0x40021000
 8001f74:	40010000 	.word	0x40010000
 8001f78:	48000400 	.word	0x48000400
 8001f7c:	48000800 	.word	0x48000800
 8001f80:	48000c00 	.word	0x48000c00
 8001f84:	48001000 	.word	0x48001000
 8001f88:	48001400 	.word	0x48001400
 8001f8c:	40010400 	.word	0x40010400

08001f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	807b      	strh	r3, [r7, #2]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fa0:	787b      	ldrb	r3, [r7, #1]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fa6:	887a      	ldrh	r2, [r7, #2]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fac:	e002      	b.n	8001fb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fae:	887a      	ldrh	r2, [r7, #2]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d141      	bne.n	8002052 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fce:	4b4b      	ldr	r3, [pc, #300]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001fd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fda:	d131      	bne.n	8002040 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fdc:	4b47      	ldr	r3, [pc, #284]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fe2:	4a46      	ldr	r2, [pc, #280]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fe8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fec:	4b43      	ldr	r3, [pc, #268]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ff4:	4a41      	ldr	r2, [pc, #260]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ffa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ffc:	4b40      	ldr	r3, [pc, #256]	@ (8002100 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2232      	movs	r2, #50	@ 0x32
 8002002:	fb02 f303 	mul.w	r3, r2, r3
 8002006:	4a3f      	ldr	r2, [pc, #252]	@ (8002104 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002008:	fba2 2303 	umull	r2, r3, r2, r3
 800200c:	0c9b      	lsrs	r3, r3, #18
 800200e:	3301      	adds	r3, #1
 8002010:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002012:	e002      	b.n	800201a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	3b01      	subs	r3, #1
 8002018:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800201a:	4b38      	ldr	r3, [pc, #224]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002022:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002026:	d102      	bne.n	800202e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f2      	bne.n	8002014 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800202e:	4b33      	ldr	r3, [pc, #204]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002036:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800203a:	d158      	bne.n	80020ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e057      	b.n	80020f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002040:	4b2e      	ldr	r3, [pc, #184]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002042:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002046:	4a2d      	ldr	r2, [pc, #180]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002048:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800204c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002050:	e04d      	b.n	80020ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002058:	d141      	bne.n	80020de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800205a:	4b28      	ldr	r3, [pc, #160]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002062:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002066:	d131      	bne.n	80020cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002068:	4b24      	ldr	r3, [pc, #144]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800206a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800206e:	4a23      	ldr	r2, [pc, #140]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002070:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002074:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002078:	4b20      	ldr	r3, [pc, #128]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002080:	4a1e      	ldr	r2, [pc, #120]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002082:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002086:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002088:	4b1d      	ldr	r3, [pc, #116]	@ (8002100 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2232      	movs	r2, #50	@ 0x32
 800208e:	fb02 f303 	mul.w	r3, r2, r3
 8002092:	4a1c      	ldr	r2, [pc, #112]	@ (8002104 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002094:	fba2 2303 	umull	r2, r3, r2, r3
 8002098:	0c9b      	lsrs	r3, r3, #18
 800209a:	3301      	adds	r3, #1
 800209c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800209e:	e002      	b.n	80020a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020a6:	4b15      	ldr	r3, [pc, #84]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020b2:	d102      	bne.n	80020ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f2      	bne.n	80020a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020ba:	4b10      	ldr	r3, [pc, #64]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020c6:	d112      	bne.n	80020ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e011      	b.n	80020f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020cc:	4b0b      	ldr	r3, [pc, #44]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020d2:	4a0a      	ldr	r2, [pc, #40]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80020dc:	e007      	b.n	80020ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020de:	4b07      	ldr	r3, [pc, #28]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020e6:	4a05      	ldr	r2, [pc, #20]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020ec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	40007000 	.word	0x40007000
 8002100:	20000000 	.word	0x20000000
 8002104:	431bde83 	.word	0x431bde83

08002108 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800210c:	4b05      	ldr	r3, [pc, #20]	@ (8002124 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	4a04      	ldr	r2, [pc, #16]	@ (8002124 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002112:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002116:	6093      	str	r3, [r2, #8]
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	40007000 	.word	0x40007000

08002128 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b088      	sub	sp, #32
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e2fe      	b.n	8002738 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d075      	beq.n	8002232 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002146:	4b97      	ldr	r3, [pc, #604]	@ (80023a4 <HAL_RCC_OscConfig+0x27c>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 030c 	and.w	r3, r3, #12
 800214e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002150:	4b94      	ldr	r3, [pc, #592]	@ (80023a4 <HAL_RCC_OscConfig+0x27c>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	2b0c      	cmp	r3, #12
 800215e:	d102      	bne.n	8002166 <HAL_RCC_OscConfig+0x3e>
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	2b03      	cmp	r3, #3
 8002164:	d002      	beq.n	800216c <HAL_RCC_OscConfig+0x44>
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	2b08      	cmp	r3, #8
 800216a:	d10b      	bne.n	8002184 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800216c:	4b8d      	ldr	r3, [pc, #564]	@ (80023a4 <HAL_RCC_OscConfig+0x27c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d05b      	beq.n	8002230 <HAL_RCC_OscConfig+0x108>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d157      	bne.n	8002230 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e2d9      	b.n	8002738 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800218c:	d106      	bne.n	800219c <HAL_RCC_OscConfig+0x74>
 800218e:	4b85      	ldr	r3, [pc, #532]	@ (80023a4 <HAL_RCC_OscConfig+0x27c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a84      	ldr	r2, [pc, #528]	@ (80023a4 <HAL_RCC_OscConfig+0x27c>)
 8002194:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002198:	6013      	str	r3, [r2, #0]
 800219a:	e01d      	b.n	80021d8 <HAL_RCC_OscConfig+0xb0>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021a4:	d10c      	bne.n	80021c0 <HAL_RCC_OscConfig+0x98>
 80021a6:	4b7f      	ldr	r3, [pc, #508]	@ (80023a4 <HAL_RCC_OscConfig+0x27c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a7e      	ldr	r2, [pc, #504]	@ (80023a4 <HAL_RCC_OscConfig+0x27c>)
 80021ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	4b7c      	ldr	r3, [pc, #496]	@ (80023a4 <HAL_RCC_OscConfig+0x27c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a7b      	ldr	r2, [pc, #492]	@ (80023a4 <HAL_RCC_OscConfig+0x27c>)
 80021b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	e00b      	b.n	80021d8 <HAL_RCC_OscConfig+0xb0>
 80021c0:	4b78      	ldr	r3, [pc, #480]	@ (80023a4 <HAL_RCC_OscConfig+0x27c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a77      	ldr	r2, [pc, #476]	@ (80023a4 <HAL_RCC_OscConfig+0x27c>)
 80021c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021ca:	6013      	str	r3, [r2, #0]
 80021cc:	4b75      	ldr	r3, [pc, #468]	@ (80023a4 <HAL_RCC_OscConfig+0x27c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a74      	ldr	r2, [pc, #464]	@ (80023a4 <HAL_RCC_OscConfig+0x27c>)
 80021d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d013      	beq.n	8002208 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e0:	f7ff f936 	bl	8001450 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e8:	f7ff f932 	bl	8001450 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b64      	cmp	r3, #100	@ 0x64
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e29e      	b.n	8002738 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021fa:	4b6a      	ldr	r3, [pc, #424]	@ (80023a4 <HAL_RCC_OscConfig+0x27c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0f0      	beq.n	80021e8 <HAL_RCC_OscConfig+0xc0>
 8002206:	e014      	b.n	8002232 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002208:	f7ff f922 	bl	8001450 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002210:	f7ff f91e 	bl	8001450 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b64      	cmp	r3, #100	@ 0x64
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e28a      	b.n	8002738 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002222:	4b60      	ldr	r3, [pc, #384]	@ (80023a4 <HAL_RCC_OscConfig+0x27c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0xe8>
 800222e:	e000      	b.n	8002232 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d075      	beq.n	800232a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800223e:	4b59      	ldr	r3, [pc, #356]	@ (80023a4 <HAL_RCC_OscConfig+0x27c>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 030c 	and.w	r3, r3, #12
 8002246:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002248:	4b56      	ldr	r3, [pc, #344]	@ (80023a4 <HAL_RCC_OscConfig+0x27c>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	2b0c      	cmp	r3, #12
 8002256:	d102      	bne.n	800225e <HAL_RCC_OscConfig+0x136>
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	2b02      	cmp	r3, #2
 800225c:	d002      	beq.n	8002264 <HAL_RCC_OscConfig+0x13c>
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	2b04      	cmp	r3, #4
 8002262:	d11f      	bne.n	80022a4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002264:	4b4f      	ldr	r3, [pc, #316]	@ (80023a4 <HAL_RCC_OscConfig+0x27c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800226c:	2b00      	cmp	r3, #0
 800226e:	d005      	beq.n	800227c <HAL_RCC_OscConfig+0x154>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e25d      	b.n	8002738 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800227c:	4b49      	ldr	r3, [pc, #292]	@ (80023a4 <HAL_RCC_OscConfig+0x27c>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	061b      	lsls	r3, r3, #24
 800228a:	4946      	ldr	r1, [pc, #280]	@ (80023a4 <HAL_RCC_OscConfig+0x27c>)
 800228c:	4313      	orrs	r3, r2
 800228e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002290:	4b45      	ldr	r3, [pc, #276]	@ (80023a8 <HAL_RCC_OscConfig+0x280>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe fdc5 	bl	8000e24 <HAL_InitTick>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d043      	beq.n	8002328 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e249      	b.n	8002738 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d023      	beq.n	80022f4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022ac:	4b3d      	ldr	r3, [pc, #244]	@ (80023a4 <HAL_RCC_OscConfig+0x27c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a3c      	ldr	r2, [pc, #240]	@ (80023a4 <HAL_RCC_OscConfig+0x27c>)
 80022b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b8:	f7ff f8ca 	bl	8001450 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c0:	f7ff f8c6 	bl	8001450 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e232      	b.n	8002738 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022d2:	4b34      	ldr	r3, [pc, #208]	@ (80023a4 <HAL_RCC_OscConfig+0x27c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0f0      	beq.n	80022c0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022de:	4b31      	ldr	r3, [pc, #196]	@ (80023a4 <HAL_RCC_OscConfig+0x27c>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	061b      	lsls	r3, r3, #24
 80022ec:	492d      	ldr	r1, [pc, #180]	@ (80023a4 <HAL_RCC_OscConfig+0x27c>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	604b      	str	r3, [r1, #4]
 80022f2:	e01a      	b.n	800232a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022f4:	4b2b      	ldr	r3, [pc, #172]	@ (80023a4 <HAL_RCC_OscConfig+0x27c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a2a      	ldr	r2, [pc, #168]	@ (80023a4 <HAL_RCC_OscConfig+0x27c>)
 80022fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002300:	f7ff f8a6 	bl	8001450 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002308:	f7ff f8a2 	bl	8001450 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e20e      	b.n	8002738 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800231a:	4b22      	ldr	r3, [pc, #136]	@ (80023a4 <HAL_RCC_OscConfig+0x27c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f0      	bne.n	8002308 <HAL_RCC_OscConfig+0x1e0>
 8002326:	e000      	b.n	800232a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002328:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d041      	beq.n	80023ba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d01c      	beq.n	8002378 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800233e:	4b19      	ldr	r3, [pc, #100]	@ (80023a4 <HAL_RCC_OscConfig+0x27c>)
 8002340:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002344:	4a17      	ldr	r2, [pc, #92]	@ (80023a4 <HAL_RCC_OscConfig+0x27c>)
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234e:	f7ff f87f 	bl	8001450 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002356:	f7ff f87b 	bl	8001450 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e1e7      	b.n	8002738 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002368:	4b0e      	ldr	r3, [pc, #56]	@ (80023a4 <HAL_RCC_OscConfig+0x27c>)
 800236a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0ef      	beq.n	8002356 <HAL_RCC_OscConfig+0x22e>
 8002376:	e020      	b.n	80023ba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002378:	4b0a      	ldr	r3, [pc, #40]	@ (80023a4 <HAL_RCC_OscConfig+0x27c>)
 800237a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800237e:	4a09      	ldr	r2, [pc, #36]	@ (80023a4 <HAL_RCC_OscConfig+0x27c>)
 8002380:	f023 0301 	bic.w	r3, r3, #1
 8002384:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002388:	f7ff f862 	bl	8001450 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800238e:	e00d      	b.n	80023ac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002390:	f7ff f85e 	bl	8001450 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d906      	bls.n	80023ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e1ca      	b.n	8002738 <HAL_RCC_OscConfig+0x610>
 80023a2:	bf00      	nop
 80023a4:	40021000 	.word	0x40021000
 80023a8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023ac:	4b8c      	ldr	r3, [pc, #560]	@ (80025e0 <HAL_RCC_OscConfig+0x4b8>)
 80023ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1ea      	bne.n	8002390 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0304 	and.w	r3, r3, #4
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 80a6 	beq.w	8002514 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023c8:	2300      	movs	r3, #0
 80023ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023cc:	4b84      	ldr	r3, [pc, #528]	@ (80025e0 <HAL_RCC_OscConfig+0x4b8>)
 80023ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_RCC_OscConfig+0x2b4>
 80023d8:	2301      	movs	r3, #1
 80023da:	e000      	b.n	80023de <HAL_RCC_OscConfig+0x2b6>
 80023dc:	2300      	movs	r3, #0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00d      	beq.n	80023fe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	4b7f      	ldr	r3, [pc, #508]	@ (80025e0 <HAL_RCC_OscConfig+0x4b8>)
 80023e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e6:	4a7e      	ldr	r2, [pc, #504]	@ (80025e0 <HAL_RCC_OscConfig+0x4b8>)
 80023e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80023ee:	4b7c      	ldr	r3, [pc, #496]	@ (80025e0 <HAL_RCC_OscConfig+0x4b8>)
 80023f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80023fa:	2301      	movs	r3, #1
 80023fc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023fe:	4b79      	ldr	r3, [pc, #484]	@ (80025e4 <HAL_RCC_OscConfig+0x4bc>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002406:	2b00      	cmp	r3, #0
 8002408:	d118      	bne.n	800243c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800240a:	4b76      	ldr	r3, [pc, #472]	@ (80025e4 <HAL_RCC_OscConfig+0x4bc>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a75      	ldr	r2, [pc, #468]	@ (80025e4 <HAL_RCC_OscConfig+0x4bc>)
 8002410:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002414:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002416:	f7ff f81b 	bl	8001450 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800241e:	f7ff f817 	bl	8001450 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e183      	b.n	8002738 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002430:	4b6c      	ldr	r3, [pc, #432]	@ (80025e4 <HAL_RCC_OscConfig+0x4bc>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0f0      	beq.n	800241e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d108      	bne.n	8002456 <HAL_RCC_OscConfig+0x32e>
 8002444:	4b66      	ldr	r3, [pc, #408]	@ (80025e0 <HAL_RCC_OscConfig+0x4b8>)
 8002446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800244a:	4a65      	ldr	r2, [pc, #404]	@ (80025e0 <HAL_RCC_OscConfig+0x4b8>)
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002454:	e024      	b.n	80024a0 <HAL_RCC_OscConfig+0x378>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2b05      	cmp	r3, #5
 800245c:	d110      	bne.n	8002480 <HAL_RCC_OscConfig+0x358>
 800245e:	4b60      	ldr	r3, [pc, #384]	@ (80025e0 <HAL_RCC_OscConfig+0x4b8>)
 8002460:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002464:	4a5e      	ldr	r2, [pc, #376]	@ (80025e0 <HAL_RCC_OscConfig+0x4b8>)
 8002466:	f043 0304 	orr.w	r3, r3, #4
 800246a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800246e:	4b5c      	ldr	r3, [pc, #368]	@ (80025e0 <HAL_RCC_OscConfig+0x4b8>)
 8002470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002474:	4a5a      	ldr	r2, [pc, #360]	@ (80025e0 <HAL_RCC_OscConfig+0x4b8>)
 8002476:	f043 0301 	orr.w	r3, r3, #1
 800247a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800247e:	e00f      	b.n	80024a0 <HAL_RCC_OscConfig+0x378>
 8002480:	4b57      	ldr	r3, [pc, #348]	@ (80025e0 <HAL_RCC_OscConfig+0x4b8>)
 8002482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002486:	4a56      	ldr	r2, [pc, #344]	@ (80025e0 <HAL_RCC_OscConfig+0x4b8>)
 8002488:	f023 0301 	bic.w	r3, r3, #1
 800248c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002490:	4b53      	ldr	r3, [pc, #332]	@ (80025e0 <HAL_RCC_OscConfig+0x4b8>)
 8002492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002496:	4a52      	ldr	r2, [pc, #328]	@ (80025e0 <HAL_RCC_OscConfig+0x4b8>)
 8002498:	f023 0304 	bic.w	r3, r3, #4
 800249c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d016      	beq.n	80024d6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a8:	f7fe ffd2 	bl	8001450 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024ae:	e00a      	b.n	80024c6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b0:	f7fe ffce 	bl	8001450 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024be:	4293      	cmp	r3, r2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e138      	b.n	8002738 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024c6:	4b46      	ldr	r3, [pc, #280]	@ (80025e0 <HAL_RCC_OscConfig+0x4b8>)
 80024c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0ed      	beq.n	80024b0 <HAL_RCC_OscConfig+0x388>
 80024d4:	e015      	b.n	8002502 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d6:	f7fe ffbb 	bl	8001450 <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024dc:	e00a      	b.n	80024f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024de:	f7fe ffb7 	bl	8001450 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e121      	b.n	8002738 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024f4:	4b3a      	ldr	r3, [pc, #232]	@ (80025e0 <HAL_RCC_OscConfig+0x4b8>)
 80024f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1ed      	bne.n	80024de <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002502:	7ffb      	ldrb	r3, [r7, #31]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d105      	bne.n	8002514 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002508:	4b35      	ldr	r3, [pc, #212]	@ (80025e0 <HAL_RCC_OscConfig+0x4b8>)
 800250a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800250c:	4a34      	ldr	r2, [pc, #208]	@ (80025e0 <HAL_RCC_OscConfig+0x4b8>)
 800250e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002512:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0320 	and.w	r3, r3, #32
 800251c:	2b00      	cmp	r3, #0
 800251e:	d03c      	beq.n	800259a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d01c      	beq.n	8002562 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002528:	4b2d      	ldr	r3, [pc, #180]	@ (80025e0 <HAL_RCC_OscConfig+0x4b8>)
 800252a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800252e:	4a2c      	ldr	r2, [pc, #176]	@ (80025e0 <HAL_RCC_OscConfig+0x4b8>)
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002538:	f7fe ff8a 	bl	8001450 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002540:	f7fe ff86 	bl	8001450 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e0f2      	b.n	8002738 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002552:	4b23      	ldr	r3, [pc, #140]	@ (80025e0 <HAL_RCC_OscConfig+0x4b8>)
 8002554:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d0ef      	beq.n	8002540 <HAL_RCC_OscConfig+0x418>
 8002560:	e01b      	b.n	800259a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002562:	4b1f      	ldr	r3, [pc, #124]	@ (80025e0 <HAL_RCC_OscConfig+0x4b8>)
 8002564:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002568:	4a1d      	ldr	r2, [pc, #116]	@ (80025e0 <HAL_RCC_OscConfig+0x4b8>)
 800256a:	f023 0301 	bic.w	r3, r3, #1
 800256e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002572:	f7fe ff6d 	bl	8001450 <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800257a:	f7fe ff69 	bl	8001450 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e0d5      	b.n	8002738 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800258c:	4b14      	ldr	r3, [pc, #80]	@ (80025e0 <HAL_RCC_OscConfig+0x4b8>)
 800258e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1ef      	bne.n	800257a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 80c9 	beq.w	8002736 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025a4:	4b0e      	ldr	r3, [pc, #56]	@ (80025e0 <HAL_RCC_OscConfig+0x4b8>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f003 030c 	and.w	r3, r3, #12
 80025ac:	2b0c      	cmp	r3, #12
 80025ae:	f000 8083 	beq.w	80026b8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d15e      	bne.n	8002678 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ba:	4b09      	ldr	r3, [pc, #36]	@ (80025e0 <HAL_RCC_OscConfig+0x4b8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a08      	ldr	r2, [pc, #32]	@ (80025e0 <HAL_RCC_OscConfig+0x4b8>)
 80025c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c6:	f7fe ff43 	bl	8001450 <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025cc:	e00c      	b.n	80025e8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ce:	f7fe ff3f 	bl	8001450 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d905      	bls.n	80025e8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e0ab      	b.n	8002738 <HAL_RCC_OscConfig+0x610>
 80025e0:	40021000 	.word	0x40021000
 80025e4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025e8:	4b55      	ldr	r3, [pc, #340]	@ (8002740 <HAL_RCC_OscConfig+0x618>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1ec      	bne.n	80025ce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025f4:	4b52      	ldr	r3, [pc, #328]	@ (8002740 <HAL_RCC_OscConfig+0x618>)
 80025f6:	68da      	ldr	r2, [r3, #12]
 80025f8:	4b52      	ldr	r3, [pc, #328]	@ (8002744 <HAL_RCC_OscConfig+0x61c>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6a11      	ldr	r1, [r2, #32]
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002604:	3a01      	subs	r2, #1
 8002606:	0112      	lsls	r2, r2, #4
 8002608:	4311      	orrs	r1, r2
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800260e:	0212      	lsls	r2, r2, #8
 8002610:	4311      	orrs	r1, r2
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002616:	0852      	lsrs	r2, r2, #1
 8002618:	3a01      	subs	r2, #1
 800261a:	0552      	lsls	r2, r2, #21
 800261c:	4311      	orrs	r1, r2
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002622:	0852      	lsrs	r2, r2, #1
 8002624:	3a01      	subs	r2, #1
 8002626:	0652      	lsls	r2, r2, #25
 8002628:	4311      	orrs	r1, r2
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800262e:	06d2      	lsls	r2, r2, #27
 8002630:	430a      	orrs	r2, r1
 8002632:	4943      	ldr	r1, [pc, #268]	@ (8002740 <HAL_RCC_OscConfig+0x618>)
 8002634:	4313      	orrs	r3, r2
 8002636:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002638:	4b41      	ldr	r3, [pc, #260]	@ (8002740 <HAL_RCC_OscConfig+0x618>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a40      	ldr	r2, [pc, #256]	@ (8002740 <HAL_RCC_OscConfig+0x618>)
 800263e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002642:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002644:	4b3e      	ldr	r3, [pc, #248]	@ (8002740 <HAL_RCC_OscConfig+0x618>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	4a3d      	ldr	r2, [pc, #244]	@ (8002740 <HAL_RCC_OscConfig+0x618>)
 800264a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800264e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002650:	f7fe fefe 	bl	8001450 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002658:	f7fe fefa 	bl	8001450 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e066      	b.n	8002738 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800266a:	4b35      	ldr	r3, [pc, #212]	@ (8002740 <HAL_RCC_OscConfig+0x618>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0f0      	beq.n	8002658 <HAL_RCC_OscConfig+0x530>
 8002676:	e05e      	b.n	8002736 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002678:	4b31      	ldr	r3, [pc, #196]	@ (8002740 <HAL_RCC_OscConfig+0x618>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a30      	ldr	r2, [pc, #192]	@ (8002740 <HAL_RCC_OscConfig+0x618>)
 800267e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002684:	f7fe fee4 	bl	8001450 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268c:	f7fe fee0 	bl	8001450 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e04c      	b.n	8002738 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800269e:	4b28      	ldr	r3, [pc, #160]	@ (8002740 <HAL_RCC_OscConfig+0x618>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80026aa:	4b25      	ldr	r3, [pc, #148]	@ (8002740 <HAL_RCC_OscConfig+0x618>)
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	4924      	ldr	r1, [pc, #144]	@ (8002740 <HAL_RCC_OscConfig+0x618>)
 80026b0:	4b25      	ldr	r3, [pc, #148]	@ (8002748 <HAL_RCC_OscConfig+0x620>)
 80026b2:	4013      	ands	r3, r2
 80026b4:	60cb      	str	r3, [r1, #12]
 80026b6:	e03e      	b.n	8002736 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d101      	bne.n	80026c4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e039      	b.n	8002738 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80026c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002740 <HAL_RCC_OscConfig+0x618>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f003 0203 	and.w	r2, r3, #3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d12c      	bne.n	8002732 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e2:	3b01      	subs	r3, #1
 80026e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d123      	bne.n	8002732 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d11b      	bne.n	8002732 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002704:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002706:	429a      	cmp	r2, r3
 8002708:	d113      	bne.n	8002732 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002714:	085b      	lsrs	r3, r3, #1
 8002716:	3b01      	subs	r3, #1
 8002718:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800271a:	429a      	cmp	r2, r3
 800271c:	d109      	bne.n	8002732 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002728:	085b      	lsrs	r3, r3, #1
 800272a:	3b01      	subs	r3, #1
 800272c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800272e:	429a      	cmp	r2, r3
 8002730:	d001      	beq.n	8002736 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e000      	b.n	8002738 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3720      	adds	r7, #32
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40021000 	.word	0x40021000
 8002744:	019f800c 	.word	0x019f800c
 8002748:	feeefffc 	.word	0xfeeefffc

0800274c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002756:	2300      	movs	r3, #0
 8002758:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e11e      	b.n	80029a2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002764:	4b91      	ldr	r3, [pc, #580]	@ (80029ac <HAL_RCC_ClockConfig+0x260>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 030f 	and.w	r3, r3, #15
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	429a      	cmp	r2, r3
 8002770:	d910      	bls.n	8002794 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002772:	4b8e      	ldr	r3, [pc, #568]	@ (80029ac <HAL_RCC_ClockConfig+0x260>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f023 020f 	bic.w	r2, r3, #15
 800277a:	498c      	ldr	r1, [pc, #560]	@ (80029ac <HAL_RCC_ClockConfig+0x260>)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	4313      	orrs	r3, r2
 8002780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002782:	4b8a      	ldr	r3, [pc, #552]	@ (80029ac <HAL_RCC_ClockConfig+0x260>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	429a      	cmp	r2, r3
 800278e:	d001      	beq.n	8002794 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e106      	b.n	80029a2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b00      	cmp	r3, #0
 800279e:	d073      	beq.n	8002888 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b03      	cmp	r3, #3
 80027a6:	d129      	bne.n	80027fc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027a8:	4b81      	ldr	r3, [pc, #516]	@ (80029b0 <HAL_RCC_ClockConfig+0x264>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e0f4      	b.n	80029a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80027b8:	f000 f9d0 	bl	8002b5c <RCC_GetSysClockFreqFromPLLSource>
 80027bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	4a7c      	ldr	r2, [pc, #496]	@ (80029b4 <HAL_RCC_ClockConfig+0x268>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d93f      	bls.n	8002846 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80027c6:	4b7a      	ldr	r3, [pc, #488]	@ (80029b0 <HAL_RCC_ClockConfig+0x264>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d009      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d033      	beq.n	8002846 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d12f      	bne.n	8002846 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80027e6:	4b72      	ldr	r3, [pc, #456]	@ (80029b0 <HAL_RCC_ClockConfig+0x264>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027ee:	4a70      	ldr	r2, [pc, #448]	@ (80029b0 <HAL_RCC_ClockConfig+0x264>)
 80027f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80027f6:	2380      	movs	r3, #128	@ 0x80
 80027f8:	617b      	str	r3, [r7, #20]
 80027fa:	e024      	b.n	8002846 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b02      	cmp	r3, #2
 8002802:	d107      	bne.n	8002814 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002804:	4b6a      	ldr	r3, [pc, #424]	@ (80029b0 <HAL_RCC_ClockConfig+0x264>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d109      	bne.n	8002824 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0c6      	b.n	80029a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002814:	4b66      	ldr	r3, [pc, #408]	@ (80029b0 <HAL_RCC_ClockConfig+0x264>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e0be      	b.n	80029a2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002824:	f000 f8ce 	bl	80029c4 <HAL_RCC_GetSysClockFreq>
 8002828:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	4a61      	ldr	r2, [pc, #388]	@ (80029b4 <HAL_RCC_ClockConfig+0x268>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d909      	bls.n	8002846 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002832:	4b5f      	ldr	r3, [pc, #380]	@ (80029b0 <HAL_RCC_ClockConfig+0x264>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800283a:	4a5d      	ldr	r2, [pc, #372]	@ (80029b0 <HAL_RCC_ClockConfig+0x264>)
 800283c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002840:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002842:	2380      	movs	r3, #128	@ 0x80
 8002844:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002846:	4b5a      	ldr	r3, [pc, #360]	@ (80029b0 <HAL_RCC_ClockConfig+0x264>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f023 0203 	bic.w	r2, r3, #3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	4957      	ldr	r1, [pc, #348]	@ (80029b0 <HAL_RCC_ClockConfig+0x264>)
 8002854:	4313      	orrs	r3, r2
 8002856:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002858:	f7fe fdfa 	bl	8001450 <HAL_GetTick>
 800285c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285e:	e00a      	b.n	8002876 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002860:	f7fe fdf6 	bl	8001450 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800286e:	4293      	cmp	r3, r2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e095      	b.n	80029a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002876:	4b4e      	ldr	r3, [pc, #312]	@ (80029b0 <HAL_RCC_ClockConfig+0x264>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 020c 	and.w	r2, r3, #12
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	429a      	cmp	r2, r3
 8002886:	d1eb      	bne.n	8002860 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d023      	beq.n	80028dc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	d005      	beq.n	80028ac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028a0:	4b43      	ldr	r3, [pc, #268]	@ (80029b0 <HAL_RCC_ClockConfig+0x264>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	4a42      	ldr	r2, [pc, #264]	@ (80029b0 <HAL_RCC_ClockConfig+0x264>)
 80028a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80028aa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0308 	and.w	r3, r3, #8
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d007      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80028b8:	4b3d      	ldr	r3, [pc, #244]	@ (80029b0 <HAL_RCC_ClockConfig+0x264>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80028c0:	4a3b      	ldr	r2, [pc, #236]	@ (80029b0 <HAL_RCC_ClockConfig+0x264>)
 80028c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80028c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c8:	4b39      	ldr	r3, [pc, #228]	@ (80029b0 <HAL_RCC_ClockConfig+0x264>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	4936      	ldr	r1, [pc, #216]	@ (80029b0 <HAL_RCC_ClockConfig+0x264>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	608b      	str	r3, [r1, #8]
 80028da:	e008      	b.n	80028ee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	2b80      	cmp	r3, #128	@ 0x80
 80028e0:	d105      	bne.n	80028ee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80028e2:	4b33      	ldr	r3, [pc, #204]	@ (80029b0 <HAL_RCC_ClockConfig+0x264>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	4a32      	ldr	r2, [pc, #200]	@ (80029b0 <HAL_RCC_ClockConfig+0x264>)
 80028e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80028ec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028ee:	4b2f      	ldr	r3, [pc, #188]	@ (80029ac <HAL_RCC_ClockConfig+0x260>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d21d      	bcs.n	8002938 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fc:	4b2b      	ldr	r3, [pc, #172]	@ (80029ac <HAL_RCC_ClockConfig+0x260>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f023 020f 	bic.w	r2, r3, #15
 8002904:	4929      	ldr	r1, [pc, #164]	@ (80029ac <HAL_RCC_ClockConfig+0x260>)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	4313      	orrs	r3, r2
 800290a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800290c:	f7fe fda0 	bl	8001450 <HAL_GetTick>
 8002910:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002912:	e00a      	b.n	800292a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002914:	f7fe fd9c 	bl	8001450 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002922:	4293      	cmp	r3, r2
 8002924:	d901      	bls.n	800292a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e03b      	b.n	80029a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800292a:	4b20      	ldr	r3, [pc, #128]	@ (80029ac <HAL_RCC_ClockConfig+0x260>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	429a      	cmp	r2, r3
 8002936:	d1ed      	bne.n	8002914 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	d008      	beq.n	8002956 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002944:	4b1a      	ldr	r3, [pc, #104]	@ (80029b0 <HAL_RCC_ClockConfig+0x264>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	4917      	ldr	r1, [pc, #92]	@ (80029b0 <HAL_RCC_ClockConfig+0x264>)
 8002952:	4313      	orrs	r3, r2
 8002954:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b00      	cmp	r3, #0
 8002960:	d009      	beq.n	8002976 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002962:	4b13      	ldr	r3, [pc, #76]	@ (80029b0 <HAL_RCC_ClockConfig+0x264>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	490f      	ldr	r1, [pc, #60]	@ (80029b0 <HAL_RCC_ClockConfig+0x264>)
 8002972:	4313      	orrs	r3, r2
 8002974:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002976:	f000 f825 	bl	80029c4 <HAL_RCC_GetSysClockFreq>
 800297a:	4602      	mov	r2, r0
 800297c:	4b0c      	ldr	r3, [pc, #48]	@ (80029b0 <HAL_RCC_ClockConfig+0x264>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	091b      	lsrs	r3, r3, #4
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	490c      	ldr	r1, [pc, #48]	@ (80029b8 <HAL_RCC_ClockConfig+0x26c>)
 8002988:	5ccb      	ldrb	r3, [r1, r3]
 800298a:	f003 031f 	and.w	r3, r3, #31
 800298e:	fa22 f303 	lsr.w	r3, r2, r3
 8002992:	4a0a      	ldr	r2, [pc, #40]	@ (80029bc <HAL_RCC_ClockConfig+0x270>)
 8002994:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002996:	4b0a      	ldr	r3, [pc, #40]	@ (80029c0 <HAL_RCC_ClockConfig+0x274>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f7fe fa42 	bl	8000e24 <HAL_InitTick>
 80029a0:	4603      	mov	r3, r0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40022000 	.word	0x40022000
 80029b0:	40021000 	.word	0x40021000
 80029b4:	04c4b400 	.word	0x04c4b400
 80029b8:	08008cf8 	.word	0x08008cf8
 80029bc:	20000000 	.word	0x20000000
 80029c0:	20000004 	.word	0x20000004

080029c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b087      	sub	sp, #28
 80029c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80029ca:	4b2c      	ldr	r3, [pc, #176]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0xb8>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 030c 	and.w	r3, r3, #12
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d102      	bne.n	80029dc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002a80 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029d8:	613b      	str	r3, [r7, #16]
 80029da:	e047      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80029dc:	4b27      	ldr	r3, [pc, #156]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0xb8>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f003 030c 	and.w	r3, r3, #12
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d102      	bne.n	80029ee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029e8:	4b26      	ldr	r3, [pc, #152]	@ (8002a84 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029ea:	613b      	str	r3, [r7, #16]
 80029ec:	e03e      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80029ee:	4b23      	ldr	r3, [pc, #140]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0xb8>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 030c 	and.w	r3, r3, #12
 80029f6:	2b0c      	cmp	r3, #12
 80029f8:	d136      	bne.n	8002a68 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029fa:	4b20      	ldr	r3, [pc, #128]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0xb8>)
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a04:	4b1d      	ldr	r3, [pc, #116]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	091b      	lsrs	r3, r3, #4
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	3301      	adds	r3, #1
 8002a10:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2b03      	cmp	r3, #3
 8002a16:	d10c      	bne.n	8002a32 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a18:	4a1a      	ldr	r2, [pc, #104]	@ (8002a84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a20:	4a16      	ldr	r2, [pc, #88]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a22:	68d2      	ldr	r2, [r2, #12]
 8002a24:	0a12      	lsrs	r2, r2, #8
 8002a26:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a2a:	fb02 f303 	mul.w	r3, r2, r3
 8002a2e:	617b      	str	r3, [r7, #20]
      break;
 8002a30:	e00c      	b.n	8002a4c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a32:	4a13      	ldr	r2, [pc, #76]	@ (8002a80 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3a:	4a10      	ldr	r2, [pc, #64]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a3c:	68d2      	ldr	r2, [r2, #12]
 8002a3e:	0a12      	lsrs	r2, r2, #8
 8002a40:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a44:	fb02 f303 	mul.w	r3, r2, r3
 8002a48:	617b      	str	r3, [r7, #20]
      break;
 8002a4a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	0e5b      	lsrs	r3, r3, #25
 8002a52:	f003 0303 	and.w	r3, r3, #3
 8002a56:	3301      	adds	r3, #1
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a64:	613b      	str	r3, [r7, #16]
 8002a66:	e001      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002a6c:	693b      	ldr	r3, [r7, #16]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	371c      	adds	r7, #28
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	00f42400 	.word	0x00f42400
 8002a84:	016e3600 	.word	0x016e3600

08002a88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a8c:	4b03      	ldr	r3, [pc, #12]	@ (8002a9c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	20000000 	.word	0x20000000

08002aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002aa4:	f7ff fff0 	bl	8002a88 <HAL_RCC_GetHCLKFreq>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	4b06      	ldr	r3, [pc, #24]	@ (8002ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	0a1b      	lsrs	r3, r3, #8
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	4904      	ldr	r1, [pc, #16]	@ (8002ac8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ab6:	5ccb      	ldrb	r3, [r1, r3]
 8002ab8:	f003 031f 	and.w	r3, r3, #31
 8002abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	08008d08 	.word	0x08008d08

08002acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ad0:	f7ff ffda 	bl	8002a88 <HAL_RCC_GetHCLKFreq>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	4b06      	ldr	r3, [pc, #24]	@ (8002af0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	0adb      	lsrs	r3, r3, #11
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	4904      	ldr	r1, [pc, #16]	@ (8002af4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ae2:	5ccb      	ldrb	r3, [r1, r3]
 8002ae4:	f003 031f 	and.w	r3, r3, #31
 8002ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40021000 	.word	0x40021000
 8002af4:	08008d08 	.word	0x08008d08

08002af8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	220f      	movs	r2, #15
 8002b06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002b08:	4b12      	ldr	r3, [pc, #72]	@ (8002b54 <HAL_RCC_GetClockConfig+0x5c>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 0203 	and.w	r2, r3, #3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002b14:	4b0f      	ldr	r3, [pc, #60]	@ (8002b54 <HAL_RCC_GetClockConfig+0x5c>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002b20:	4b0c      	ldr	r3, [pc, #48]	@ (8002b54 <HAL_RCC_GetClockConfig+0x5c>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002b2c:	4b09      	ldr	r3, [pc, #36]	@ (8002b54 <HAL_RCC_GetClockConfig+0x5c>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	08db      	lsrs	r3, r3, #3
 8002b32:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002b3a:	4b07      	ldr	r3, [pc, #28]	@ (8002b58 <HAL_RCC_GetClockConfig+0x60>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 020f 	and.w	r2, r3, #15
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	601a      	str	r2, [r3, #0]
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	40021000 	.word	0x40021000
 8002b58:	40022000 	.word	0x40022000

08002b5c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b087      	sub	sp, #28
 8002b60:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b62:	4b1e      	ldr	r3, [pc, #120]	@ (8002bdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	091b      	lsrs	r3, r3, #4
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	3301      	adds	r3, #1
 8002b78:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	2b03      	cmp	r3, #3
 8002b7e:	d10c      	bne.n	8002b9a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b80:	4a17      	ldr	r2, [pc, #92]	@ (8002be0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b88:	4a14      	ldr	r2, [pc, #80]	@ (8002bdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b8a:	68d2      	ldr	r2, [r2, #12]
 8002b8c:	0a12      	lsrs	r2, r2, #8
 8002b8e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b92:	fb02 f303 	mul.w	r3, r2, r3
 8002b96:	617b      	str	r3, [r7, #20]
    break;
 8002b98:	e00c      	b.n	8002bb4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b9a:	4a12      	ldr	r2, [pc, #72]	@ (8002be4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba2:	4a0e      	ldr	r2, [pc, #56]	@ (8002bdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ba4:	68d2      	ldr	r2, [r2, #12]
 8002ba6:	0a12      	lsrs	r2, r2, #8
 8002ba8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002bac:	fb02 f303 	mul.w	r3, r2, r3
 8002bb0:	617b      	str	r3, [r7, #20]
    break;
 8002bb2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bb4:	4b09      	ldr	r3, [pc, #36]	@ (8002bdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	0e5b      	lsrs	r3, r3, #25
 8002bba:	f003 0303 	and.w	r3, r3, #3
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bcc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002bce:	687b      	ldr	r3, [r7, #4]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	371c      	adds	r7, #28
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	016e3600 	.word	0x016e3600
 8002be4:	00f42400 	.word	0x00f42400

08002be8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 8098 	beq.w	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c06:	2300      	movs	r3, #0
 8002c08:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c0a:	4b43      	ldr	r3, [pc, #268]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10d      	bne.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c16:	4b40      	ldr	r3, [pc, #256]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c1a:	4a3f      	ldr	r2, [pc, #252]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c20:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c22:	4b3d      	ldr	r3, [pc, #244]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c2a:	60bb      	str	r3, [r7, #8]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c32:	4b3a      	ldr	r3, [pc, #232]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a39      	ldr	r2, [pc, #228]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c3e:	f7fe fc07 	bl	8001450 <HAL_GetTick>
 8002c42:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c44:	e009      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c46:	f7fe fc03 	bl	8001450 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d902      	bls.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	74fb      	strb	r3, [r7, #19]
        break;
 8002c58:	e005      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c5a:	4b30      	ldr	r3, [pc, #192]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0ef      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002c66:	7cfb      	ldrb	r3, [r7, #19]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d159      	bne.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c6c:	4b2a      	ldr	r3, [pc, #168]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c76:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d01e      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d019      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c88:	4b23      	ldr	r3, [pc, #140]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c94:	4b20      	ldr	r3, [pc, #128]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c9a:	4a1f      	ldr	r2, [pc, #124]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ca0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ca4:	4b1c      	ldr	r3, [pc, #112]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002caa:	4a1b      	ldr	r2, [pc, #108]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cb4:	4a18      	ldr	r2, [pc, #96]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d016      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc6:	f7fe fbc3 	bl	8001450 <HAL_GetTick>
 8002cca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ccc:	e00b      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cce:	f7fe fbbf 	bl	8001450 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d902      	bls.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	74fb      	strb	r3, [r7, #19]
            break;
 8002ce4:	e006      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0ec      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002cf4:	7cfb      	ldrb	r3, [r7, #19]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10b      	bne.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cfa:	4b07      	ldr	r3, [pc, #28]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d08:	4903      	ldr	r1, [pc, #12]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002d10:	e008      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d12:	7cfb      	ldrb	r3, [r7, #19]
 8002d14:	74bb      	strb	r3, [r7, #18]
 8002d16:	e005      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d20:	7cfb      	ldrb	r3, [r7, #19]
 8002d22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d24:	7c7b      	ldrb	r3, [r7, #17]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d105      	bne.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d2a:	4ba6      	ldr	r3, [pc, #664]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d2e:	4aa5      	ldr	r2, [pc, #660]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d34:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00a      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d42:	4ba0      	ldr	r3, [pc, #640]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d48:	f023 0203 	bic.w	r2, r3, #3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	499c      	ldr	r1, [pc, #624]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00a      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d64:	4b97      	ldr	r3, [pc, #604]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d6a:	f023 020c 	bic.w	r2, r3, #12
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	4994      	ldr	r1, [pc, #592]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0304 	and.w	r3, r3, #4
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00a      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d86:	4b8f      	ldr	r3, [pc, #572]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d8c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	498b      	ldr	r1, [pc, #556]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0308 	and.w	r3, r3, #8
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00a      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002da8:	4b86      	ldr	r3, [pc, #536]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	4983      	ldr	r1, [pc, #524]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0320 	and.w	r3, r3, #32
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00a      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002dca:	4b7e      	ldr	r3, [pc, #504]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dd0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	497a      	ldr	r1, [pc, #488]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00a      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dec:	4b75      	ldr	r3, [pc, #468]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	4972      	ldr	r1, [pc, #456]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00a      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e0e:	4b6d      	ldr	r3, [pc, #436]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e14:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	4969      	ldr	r1, [pc, #420]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00a      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e30:	4b64      	ldr	r3, [pc, #400]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e36:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	4961      	ldr	r1, [pc, #388]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00a      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e52:	4b5c      	ldr	r3, [pc, #368]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e58:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e60:	4958      	ldr	r1, [pc, #352]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d015      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e74:	4b53      	ldr	r3, [pc, #332]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e7a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e82:	4950      	ldr	r1, [pc, #320]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e92:	d105      	bne.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e94:	4b4b      	ldr	r3, [pc, #300]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	4a4a      	ldr	r2, [pc, #296]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e9e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d015      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002eac:	4b45      	ldr	r3, [pc, #276]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eb2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eba:	4942      	ldr	r1, [pc, #264]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002eca:	d105      	bne.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ecc:	4b3d      	ldr	r3, [pc, #244]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	4a3c      	ldr	r2, [pc, #240]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ed2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ed6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d015      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ee4:	4b37      	ldr	r3, [pc, #220]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef2:	4934      	ldr	r1, [pc, #208]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f02:	d105      	bne.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f04:	4b2f      	ldr	r3, [pc, #188]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	4a2e      	ldr	r2, [pc, #184]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f0e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d015      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f1c:	4b29      	ldr	r3, [pc, #164]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f22:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f2a:	4926      	ldr	r1, [pc, #152]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f3a:	d105      	bne.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f3c:	4b21      	ldr	r3, [pc, #132]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	4a20      	ldr	r2, [pc, #128]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f46:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d015      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f54:	4b1b      	ldr	r3, [pc, #108]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f5a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f62:	4918      	ldr	r1, [pc, #96]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f72:	d105      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f74:	4b13      	ldr	r3, [pc, #76]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	4a12      	ldr	r2, [pc, #72]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f7e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d015      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f92:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f9a:	490a      	ldr	r1, [pc, #40]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002faa:	d105      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002fac:	4b05      	ldr	r3, [pc, #20]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	4a04      	ldr	r2, [pc, #16]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fb6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002fb8:	7cbb      	ldrb	r3, [r7, #18]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40021000 	.word	0x40021000

08002fc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e049      	b.n	800306e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d106      	bne.n	8002ff4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f841 	bl	8003076 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3304      	adds	r3, #4
 8003004:	4619      	mov	r1, r3
 8003006:	4610      	mov	r0, r2
 8003008:	f000 fa22 	bl	8003450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
	...

0800308c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b01      	cmp	r3, #1
 800309e:	d001      	beq.n	80030a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e04a      	b.n	800313a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0201 	orr.w	r2, r2, #1
 80030ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a21      	ldr	r2, [pc, #132]	@ (8003148 <HAL_TIM_Base_Start_IT+0xbc>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d018      	beq.n	80030f8 <HAL_TIM_Base_Start_IT+0x6c>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030ce:	d013      	beq.n	80030f8 <HAL_TIM_Base_Start_IT+0x6c>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a1d      	ldr	r2, [pc, #116]	@ (800314c <HAL_TIM_Base_Start_IT+0xc0>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d00e      	beq.n	80030f8 <HAL_TIM_Base_Start_IT+0x6c>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a1c      	ldr	r2, [pc, #112]	@ (8003150 <HAL_TIM_Base_Start_IT+0xc4>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d009      	beq.n	80030f8 <HAL_TIM_Base_Start_IT+0x6c>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a1a      	ldr	r2, [pc, #104]	@ (8003154 <HAL_TIM_Base_Start_IT+0xc8>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d004      	beq.n	80030f8 <HAL_TIM_Base_Start_IT+0x6c>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a19      	ldr	r2, [pc, #100]	@ (8003158 <HAL_TIM_Base_Start_IT+0xcc>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d115      	bne.n	8003124 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689a      	ldr	r2, [r3, #8]
 80030fe:	4b17      	ldr	r3, [pc, #92]	@ (800315c <HAL_TIM_Base_Start_IT+0xd0>)
 8003100:	4013      	ands	r3, r2
 8003102:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2b06      	cmp	r3, #6
 8003108:	d015      	beq.n	8003136 <HAL_TIM_Base_Start_IT+0xaa>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003110:	d011      	beq.n	8003136 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f042 0201 	orr.w	r2, r2, #1
 8003120:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003122:	e008      	b.n	8003136 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0201 	orr.w	r2, r2, #1
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	e000      	b.n	8003138 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003136:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	40012c00 	.word	0x40012c00
 800314c:	40000400 	.word	0x40000400
 8003150:	40000800 	.word	0x40000800
 8003154:	40013400 	.word	0x40013400
 8003158:	40014000 	.word	0x40014000
 800315c:	00010007 	.word	0x00010007

08003160 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d020      	beq.n	80031c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d01b      	beq.n	80031c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f06f 0202 	mvn.w	r2, #2
 8003194:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f931 	bl	8003412 <HAL_TIM_IC_CaptureCallback>
 80031b0:	e005      	b.n	80031be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f923 	bl	80033fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 f934 	bl	8003426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d020      	beq.n	8003210 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d01b      	beq.n	8003210 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f06f 0204 	mvn.w	r2, #4
 80031e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2202      	movs	r2, #2
 80031e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f90b 	bl	8003412 <HAL_TIM_IC_CaptureCallback>
 80031fc:	e005      	b.n	800320a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f8fd 	bl	80033fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 f90e 	bl	8003426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	2b00      	cmp	r3, #0
 8003218:	d020      	beq.n	800325c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f003 0308 	and.w	r3, r3, #8
 8003220:	2b00      	cmp	r3, #0
 8003222:	d01b      	beq.n	800325c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f06f 0208 	mvn.w	r2, #8
 800322c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2204      	movs	r2, #4
 8003232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f8e5 	bl	8003412 <HAL_TIM_IC_CaptureCallback>
 8003248:	e005      	b.n	8003256 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f8d7 	bl	80033fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 f8e8 	bl	8003426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	f003 0310 	and.w	r3, r3, #16
 8003262:	2b00      	cmp	r3, #0
 8003264:	d020      	beq.n	80032a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f003 0310 	and.w	r3, r3, #16
 800326c:	2b00      	cmp	r3, #0
 800326e:	d01b      	beq.n	80032a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f06f 0210 	mvn.w	r2, #16
 8003278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2208      	movs	r2, #8
 800327e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f8bf 	bl	8003412 <HAL_TIM_IC_CaptureCallback>
 8003294:	e005      	b.n	80032a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f8b1 	bl	80033fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f8c2 	bl	8003426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00c      	beq.n	80032cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d007      	beq.n	80032cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f06f 0201 	mvn.w	r2, #1
 80032c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7fd fd6a 	bl	8000da0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d104      	bne.n	80032e0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00c      	beq.n	80032fa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d007      	beq.n	80032fa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80032f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 f951 	bl	800359c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00c      	beq.n	800331e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800330a:	2b00      	cmp	r3, #0
 800330c:	d007      	beq.n	800331e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f949 	bl	80035b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00c      	beq.n	8003342 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800332e:	2b00      	cmp	r3, #0
 8003330:	d007      	beq.n	8003342 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800333a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 f87c 	bl	800343a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	f003 0320 	and.w	r3, r3, #32
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00c      	beq.n	8003366 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b00      	cmp	r3, #0
 8003354:	d007      	beq.n	8003366 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f06f 0220 	mvn.w	r2, #32
 800335e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 f911 	bl	8003588 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00c      	beq.n	800338a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d007      	beq.n	800338a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003382:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 f91d 	bl	80035c4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00c      	beq.n	80033ae <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d007      	beq.n	80033ae <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80033a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 f915 	bl	80035d8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00c      	beq.n	80033d2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d007      	beq.n	80033d2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80033ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 f90d 	bl	80035ec <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00c      	beq.n	80033f6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d007      	beq.n	80033f6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80033ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 f905 	bl	8003600 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033f6:	bf00      	nop
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003426:	b480      	push	{r7}
 8003428:	b083      	sub	sp, #12
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
	...

08003450 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a42      	ldr	r2, [pc, #264]	@ (800356c <TIM_Base_SetConfig+0x11c>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d00f      	beq.n	8003488 <TIM_Base_SetConfig+0x38>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800346e:	d00b      	beq.n	8003488 <TIM_Base_SetConfig+0x38>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a3f      	ldr	r2, [pc, #252]	@ (8003570 <TIM_Base_SetConfig+0x120>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d007      	beq.n	8003488 <TIM_Base_SetConfig+0x38>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a3e      	ldr	r2, [pc, #248]	@ (8003574 <TIM_Base_SetConfig+0x124>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d003      	beq.n	8003488 <TIM_Base_SetConfig+0x38>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a3d      	ldr	r2, [pc, #244]	@ (8003578 <TIM_Base_SetConfig+0x128>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d108      	bne.n	800349a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800348e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	4313      	orrs	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a33      	ldr	r2, [pc, #204]	@ (800356c <TIM_Base_SetConfig+0x11c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d01b      	beq.n	80034da <TIM_Base_SetConfig+0x8a>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034a8:	d017      	beq.n	80034da <TIM_Base_SetConfig+0x8a>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a30      	ldr	r2, [pc, #192]	@ (8003570 <TIM_Base_SetConfig+0x120>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d013      	beq.n	80034da <TIM_Base_SetConfig+0x8a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a2f      	ldr	r2, [pc, #188]	@ (8003574 <TIM_Base_SetConfig+0x124>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d00f      	beq.n	80034da <TIM_Base_SetConfig+0x8a>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a2e      	ldr	r2, [pc, #184]	@ (8003578 <TIM_Base_SetConfig+0x128>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d00b      	beq.n	80034da <TIM_Base_SetConfig+0x8a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a2d      	ldr	r2, [pc, #180]	@ (800357c <TIM_Base_SetConfig+0x12c>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d007      	beq.n	80034da <TIM_Base_SetConfig+0x8a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a2c      	ldr	r2, [pc, #176]	@ (8003580 <TIM_Base_SetConfig+0x130>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d003      	beq.n	80034da <TIM_Base_SetConfig+0x8a>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a2b      	ldr	r2, [pc, #172]	@ (8003584 <TIM_Base_SetConfig+0x134>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d108      	bne.n	80034ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a16      	ldr	r2, [pc, #88]	@ (800356c <TIM_Base_SetConfig+0x11c>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d00f      	beq.n	8003538 <TIM_Base_SetConfig+0xe8>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a17      	ldr	r2, [pc, #92]	@ (8003578 <TIM_Base_SetConfig+0x128>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d00b      	beq.n	8003538 <TIM_Base_SetConfig+0xe8>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a16      	ldr	r2, [pc, #88]	@ (800357c <TIM_Base_SetConfig+0x12c>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d007      	beq.n	8003538 <TIM_Base_SetConfig+0xe8>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a15      	ldr	r2, [pc, #84]	@ (8003580 <TIM_Base_SetConfig+0x130>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d003      	beq.n	8003538 <TIM_Base_SetConfig+0xe8>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a14      	ldr	r2, [pc, #80]	@ (8003584 <TIM_Base_SetConfig+0x134>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d103      	bne.n	8003540 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	691a      	ldr	r2, [r3, #16]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b01      	cmp	r3, #1
 8003550:	d105      	bne.n	800355e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	f023 0201 	bic.w	r2, r3, #1
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	611a      	str	r2, [r3, #16]
  }
}
 800355e:	bf00      	nop
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	40012c00 	.word	0x40012c00
 8003570:	40000400 	.word	0x40000400
 8003574:	40000800 	.word	0x40000800
 8003578:	40013400 	.word	0x40013400
 800357c:	40014000 	.word	0x40014000
 8003580:	40014400 	.word	0x40014400
 8003584:	40014800 	.word	0x40014800

08003588 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e042      	b.n	80036ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800362c:	2b00      	cmp	r3, #0
 800362e:	d106      	bne.n	800363e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f7fd fde7 	bl	800120c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2224      	movs	r2, #36	@ 0x24
 8003642:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0201 	bic.w	r2, r2, #1
 8003654:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800365a:	2b00      	cmp	r3, #0
 800365c:	d002      	beq.n	8003664 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f001 f962 	bl	8004928 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 fe93 	bl	8004390 <UART_SetConfig>
 800366a:	4603      	mov	r3, r0
 800366c:	2b01      	cmp	r3, #1
 800366e:	d101      	bne.n	8003674 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e01b      	b.n	80036ac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003682:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003692:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0201 	orr.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f001 f9e1 	bl	8004a6c <UART_CheckIdleState>
 80036aa:	4603      	mov	r3, r0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08a      	sub	sp, #40	@ 0x28
 80036b8:	af02      	add	r7, sp, #8
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	603b      	str	r3, [r7, #0]
 80036c0:	4613      	mov	r3, r2
 80036c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ca:	2b20      	cmp	r3, #32
 80036cc:	d17b      	bne.n	80037c6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d002      	beq.n	80036da <HAL_UART_Transmit+0x26>
 80036d4:	88fb      	ldrh	r3, [r7, #6]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e074      	b.n	80037c8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2221      	movs	r2, #33	@ 0x21
 80036ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036ee:	f7fd feaf 	bl	8001450 <HAL_GetTick>
 80036f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	88fa      	ldrh	r2, [r7, #6]
 80036f8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	88fa      	ldrh	r2, [r7, #6]
 8003700:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800370c:	d108      	bne.n	8003720 <HAL_UART_Transmit+0x6c>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d104      	bne.n	8003720 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003716:	2300      	movs	r3, #0
 8003718:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	61bb      	str	r3, [r7, #24]
 800371e:	e003      	b.n	8003728 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003724:	2300      	movs	r3, #0
 8003726:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003728:	e030      	b.n	800378c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2200      	movs	r2, #0
 8003732:	2180      	movs	r1, #128	@ 0x80
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f001 fa43 	bl	8004bc0 <UART_WaitOnFlagUntilTimeout>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2220      	movs	r2, #32
 8003744:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e03d      	b.n	80037c8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10b      	bne.n	800376a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	881b      	ldrh	r3, [r3, #0]
 8003756:	461a      	mov	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003760:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	3302      	adds	r3, #2
 8003766:	61bb      	str	r3, [r7, #24]
 8003768:	e007      	b.n	800377a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	781a      	ldrb	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	3301      	adds	r3, #1
 8003778:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003780:	b29b      	uxth	r3, r3
 8003782:	3b01      	subs	r3, #1
 8003784:	b29a      	uxth	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003792:	b29b      	uxth	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1c8      	bne.n	800372a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	2200      	movs	r2, #0
 80037a0:	2140      	movs	r1, #64	@ 0x40
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f001 fa0c 	bl	8004bc0 <UART_WaitOnFlagUntilTimeout>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d005      	beq.n	80037ba <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2220      	movs	r2, #32
 80037b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e006      	b.n	80037c8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2220      	movs	r2, #32
 80037be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80037c2:	2300      	movs	r3, #0
 80037c4:	e000      	b.n	80037c8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80037c6:	2302      	movs	r3, #2
  }
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3720      	adds	r7, #32
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b08a      	sub	sp, #40	@ 0x28
 80037d4:	af02      	add	r7, sp, #8
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	603b      	str	r3, [r7, #0]
 80037dc:	4613      	mov	r3, r2
 80037de:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037e6:	2b20      	cmp	r3, #32
 80037e8:	f040 80b5 	bne.w	8003956 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <HAL_UART_Receive+0x28>
 80037f2:	88fb      	ldrh	r3, [r7, #6]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e0ad      	b.n	8003958 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2222      	movs	r2, #34	@ 0x22
 8003808:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003812:	f7fd fe1d 	bl	8001450 <HAL_GetTick>
 8003816:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	88fa      	ldrh	r2, [r7, #6]
 800381c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	88fa      	ldrh	r2, [r7, #6]
 8003824:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003830:	d10e      	bne.n	8003850 <HAL_UART_Receive+0x80>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d105      	bne.n	8003846 <HAL_UART_Receive+0x76>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003840:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003844:	e02d      	b.n	80038a2 <HAL_UART_Receive+0xd2>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	22ff      	movs	r2, #255	@ 0xff
 800384a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800384e:	e028      	b.n	80038a2 <HAL_UART_Receive+0xd2>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10d      	bne.n	8003874 <HAL_UART_Receive+0xa4>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d104      	bne.n	800386a <HAL_UART_Receive+0x9a>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	22ff      	movs	r2, #255	@ 0xff
 8003864:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003868:	e01b      	b.n	80038a2 <HAL_UART_Receive+0xd2>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	227f      	movs	r2, #127	@ 0x7f
 800386e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003872:	e016      	b.n	80038a2 <HAL_UART_Receive+0xd2>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800387c:	d10d      	bne.n	800389a <HAL_UART_Receive+0xca>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d104      	bne.n	8003890 <HAL_UART_Receive+0xc0>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	227f      	movs	r2, #127	@ 0x7f
 800388a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800388e:	e008      	b.n	80038a2 <HAL_UART_Receive+0xd2>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	223f      	movs	r2, #63	@ 0x3f
 8003894:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003898:	e003      	b.n	80038a2 <HAL_UART_Receive+0xd2>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80038a8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038b2:	d108      	bne.n	80038c6 <HAL_UART_Receive+0xf6>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d104      	bne.n	80038c6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80038bc:	2300      	movs	r3, #0
 80038be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	61bb      	str	r3, [r7, #24]
 80038c4:	e003      	b.n	80038ce <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038ca:	2300      	movs	r3, #0
 80038cc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80038ce:	e036      	b.n	800393e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	2200      	movs	r2, #0
 80038d8:	2120      	movs	r1, #32
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f001 f970 	bl	8004bc0 <UART_WaitOnFlagUntilTimeout>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d005      	beq.n	80038f2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2220      	movs	r2, #32
 80038ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e032      	b.n	8003958 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10c      	bne.n	8003912 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fe:	b29a      	uxth	r2, r3
 8003900:	8a7b      	ldrh	r3, [r7, #18]
 8003902:	4013      	ands	r3, r2
 8003904:	b29a      	uxth	r2, r3
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	3302      	adds	r3, #2
 800390e:	61bb      	str	r3, [r7, #24]
 8003910:	e00c      	b.n	800392c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003918:	b2da      	uxtb	r2, r3
 800391a:	8a7b      	ldrh	r3, [r7, #18]
 800391c:	b2db      	uxtb	r3, r3
 800391e:	4013      	ands	r3, r2
 8003920:	b2da      	uxtb	r2, r3
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	3301      	adds	r3, #1
 800392a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003932:	b29b      	uxth	r3, r3
 8003934:	3b01      	subs	r3, #1
 8003936:	b29a      	uxth	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003944:	b29b      	uxth	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1c2      	bne.n	80038d0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2220      	movs	r2, #32
 800394e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8003952:	2300      	movs	r3, #0
 8003954:	e000      	b.n	8003958 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8003956:	2302      	movs	r3, #2
  }
}
 8003958:	4618      	mov	r0, r3
 800395a:	3720      	adds	r7, #32
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003960:	b480      	push	{r7}
 8003962:	b091      	sub	sp, #68	@ 0x44
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	4613      	mov	r3, r2
 800396c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003974:	2b20      	cmp	r3, #32
 8003976:	d178      	bne.n	8003a6a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d002      	beq.n	8003984 <HAL_UART_Transmit_IT+0x24>
 800397e:	88fb      	ldrh	r3, [r7, #6]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e071      	b.n	8003a6c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	88fa      	ldrh	r2, [r7, #6]
 8003992:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	88fa      	ldrh	r2, [r7, #6]
 800399a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2221      	movs	r2, #33	@ 0x21
 80039b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039bc:	d12a      	bne.n	8003a14 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039c6:	d107      	bne.n	80039d8 <HAL_UART_Transmit_IT+0x78>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d103      	bne.n	80039d8 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4a29      	ldr	r2, [pc, #164]	@ (8003a78 <HAL_UART_Transmit_IT+0x118>)
 80039d4:	679a      	str	r2, [r3, #120]	@ 0x78
 80039d6:	e002      	b.n	80039de <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4a28      	ldr	r2, [pc, #160]	@ (8003a7c <HAL_UART_Transmit_IT+0x11c>)
 80039dc:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	3308      	adds	r3, #8
 80039e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e8:	e853 3f00 	ldrex	r3, [r3]
 80039ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80039ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80039f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	3308      	adds	r3, #8
 80039fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80039fe:	637a      	str	r2, [r7, #52]	@ 0x34
 8003a00:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a02:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a06:	e841 2300 	strex	r3, r2, [r1]
 8003a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1e5      	bne.n	80039de <HAL_UART_Transmit_IT+0x7e>
 8003a12:	e028      	b.n	8003a66 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a1c:	d107      	bne.n	8003a2e <HAL_UART_Transmit_IT+0xce>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d103      	bne.n	8003a2e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	4a15      	ldr	r2, [pc, #84]	@ (8003a80 <HAL_UART_Transmit_IT+0x120>)
 8003a2a:	679a      	str	r2, [r3, #120]	@ 0x78
 8003a2c:	e002      	b.n	8003a34 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	4a14      	ldr	r2, [pc, #80]	@ (8003a84 <HAL_UART_Transmit_IT+0x124>)
 8003a32:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	e853 3f00 	ldrex	r3, [r3]
 8003a40:	613b      	str	r3, [r7, #16]
   return(result);
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a52:	623b      	str	r3, [r7, #32]
 8003a54:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a56:	69f9      	ldr	r1, [r7, #28]
 8003a58:	6a3a      	ldr	r2, [r7, #32]
 8003a5a:	e841 2300 	strex	r3, r2, [r1]
 8003a5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1e6      	bne.n	8003a34 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	e000      	b.n	8003a6c <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003a6a:	2302      	movs	r3, #2
  }
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3744      	adds	r7, #68	@ 0x44
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	08005699 	.word	0x08005699
 8003a7c:	080055b9 	.word	0x080055b9
 8003a80:	080054f7 	.word	0x080054f7
 8003a84:	0800543f 	.word	0x0800543f

08003a88 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b08a      	sub	sp, #40	@ 0x28
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	4613      	mov	r3, r2
 8003a94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a9c:	2b20      	cmp	r3, #32
 8003a9e:	d137      	bne.n	8003b10 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <HAL_UART_Receive_IT+0x24>
 8003aa6:	88fb      	ldrh	r3, [r7, #6]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d101      	bne.n	8003ab0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e030      	b.n	8003b12 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a18      	ldr	r2, [pc, #96]	@ (8003b1c <HAL_UART_Receive_IT+0x94>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d01f      	beq.n	8003b00 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d018      	beq.n	8003b00 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	e853 3f00 	ldrex	r3, [r3]
 8003ada:	613b      	str	r3, [r7, #16]
   return(result);
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ae2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aec:	623b      	str	r3, [r7, #32]
 8003aee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af0:	69f9      	ldr	r1, [r7, #28]
 8003af2:	6a3a      	ldr	r2, [r7, #32]
 8003af4:	e841 2300 	strex	r3, r2, [r1]
 8003af8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1e6      	bne.n	8003ace <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003b00:	88fb      	ldrh	r3, [r7, #6]
 8003b02:	461a      	mov	r2, r3
 8003b04:	68b9      	ldr	r1, [r7, #8]
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f001 f8c8 	bl	8004c9c <UART_Start_Receive_IT>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	e000      	b.n	8003b12 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b10:	2302      	movs	r3, #2
  }
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3728      	adds	r7, #40	@ 0x28
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40008000 	.word	0x40008000

08003b20 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b08a      	sub	sp, #40	@ 0x28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b34:	2b20      	cmp	r3, #32
 8003b36:	d167      	bne.n	8003c08 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d002      	beq.n	8003b44 <HAL_UART_Transmit_DMA+0x24>
 8003b3e:	88fb      	ldrh	r3, [r7, #6]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e060      	b.n	8003c0a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	88fa      	ldrh	r2, [r7, #6]
 8003b52:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	88fa      	ldrh	r2, [r7, #6]
 8003b5a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2221      	movs	r2, #33	@ 0x21
 8003b6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d028      	beq.n	8003bc8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b7a:	4a26      	ldr	r2, [pc, #152]	@ (8003c14 <HAL_UART_Transmit_DMA+0xf4>)
 8003b7c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b82:	4a25      	ldr	r2, [pc, #148]	@ (8003c18 <HAL_UART_Transmit_DMA+0xf8>)
 8003b84:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b8a:	4a24      	ldr	r2, [pc, #144]	@ (8003c1c <HAL_UART_Transmit_DMA+0xfc>)
 8003b8c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b92:	2200      	movs	r2, #0
 8003b94:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	3328      	adds	r3, #40	@ 0x28
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	88fb      	ldrh	r3, [r7, #6]
 8003baa:	f7fd fde5 	bl	8001778 <HAL_DMA_Start_IT>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d009      	beq.n	8003bc8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2210      	movs	r2, #16
 8003bb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e020      	b.n	8003c0a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2240      	movs	r2, #64	@ 0x40
 8003bce:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3308      	adds	r3, #8
 8003bd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	e853 3f00 	ldrex	r3, [r3]
 8003bde:	613b      	str	r3, [r7, #16]
   return(result);
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003be6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3308      	adds	r3, #8
 8003bee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bf0:	623a      	str	r2, [r7, #32]
 8003bf2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf4:	69f9      	ldr	r1, [r7, #28]
 8003bf6:	6a3a      	ldr	r2, [r7, #32]
 8003bf8:	e841 2300 	strex	r3, r2, [r1]
 8003bfc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1e5      	bne.n	8003bd0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8003c04:	2300      	movs	r3, #0
 8003c06:	e000      	b.n	8003c0a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003c08:	2302      	movs	r3, #2
  }
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3728      	adds	r7, #40	@ 0x28
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	0800517b 	.word	0x0800517b
 8003c18:	08005215 	.word	0x08005215
 8003c1c:	0800539b 	.word	0x0800539b

08003c20 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b08a      	sub	sp, #40	@ 0x28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c34:	2b20      	cmp	r3, #32
 8003c36:	d137      	bne.n	8003ca8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d002      	beq.n	8003c44 <HAL_UART_Receive_DMA+0x24>
 8003c3e:	88fb      	ldrh	r3, [r7, #6]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e030      	b.n	8003caa <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a18      	ldr	r2, [pc, #96]	@ (8003cb4 <HAL_UART_Receive_DMA+0x94>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d01f      	beq.n	8003c98 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d018      	beq.n	8003c98 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	e853 3f00 	ldrex	r3, [r3]
 8003c72:	613b      	str	r3, [r7, #16]
   return(result);
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	461a      	mov	r2, r3
 8003c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c84:	623b      	str	r3, [r7, #32]
 8003c86:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c88:	69f9      	ldr	r1, [r7, #28]
 8003c8a:	6a3a      	ldr	r2, [r7, #32]
 8003c8c:	e841 2300 	strex	r3, r2, [r1]
 8003c90:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1e6      	bne.n	8003c66 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003c98:	88fb      	ldrh	r3, [r7, #6]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	68b9      	ldr	r1, [r7, #8]
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f001 f91e 	bl	8004ee0 <UART_Start_Receive_DMA>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	e000      	b.n	8003caa <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ca8:	2302      	movs	r3, #2
  }
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3728      	adds	r7, #40	@ 0x28
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40008000 	.word	0x40008000

08003cb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b0ba      	sub	sp, #232	@ 0xe8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	69db      	ldr	r3, [r3, #28]
 8003cc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003cde:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003ce2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003cec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d11b      	bne.n	8003d2c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cf8:	f003 0320 	and.w	r3, r3, #32
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d015      	beq.n	8003d2c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d04:	f003 0320 	and.w	r3, r3, #32
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d105      	bne.n	8003d18 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003d0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d009      	beq.n	8003d2c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 8300 	beq.w	8004322 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	4798      	blx	r3
      }
      return;
 8003d2a:	e2fa      	b.n	8004322 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003d2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 8123 	beq.w	8003f7c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003d36:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003d3a:	4b8d      	ldr	r3, [pc, #564]	@ (8003f70 <HAL_UART_IRQHandler+0x2b8>)
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d106      	bne.n	8003d50 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003d42:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003d46:	4b8b      	ldr	r3, [pc, #556]	@ (8003f74 <HAL_UART_IRQHandler+0x2bc>)
 8003d48:	4013      	ands	r3, r2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 8116 	beq.w	8003f7c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d011      	beq.n	8003d80 <HAL_UART_IRQHandler+0xc8>
 8003d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00b      	beq.n	8003d80 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d76:	f043 0201 	orr.w	r2, r3, #1
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d011      	beq.n	8003db0 <HAL_UART_IRQHandler+0xf8>
 8003d8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00b      	beq.n	8003db0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da6:	f043 0204 	orr.w	r2, r3, #4
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d011      	beq.n	8003de0 <HAL_UART_IRQHandler+0x128>
 8003dbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00b      	beq.n	8003de0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2204      	movs	r2, #4
 8003dce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd6:	f043 0202 	orr.w	r2, r3, #2
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003de4:	f003 0308 	and.w	r3, r3, #8
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d017      	beq.n	8003e1c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003df0:	f003 0320 	and.w	r3, r3, #32
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d105      	bne.n	8003e04 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003df8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003dfc:	4b5c      	ldr	r3, [pc, #368]	@ (8003f70 <HAL_UART_IRQHandler+0x2b8>)
 8003dfe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00b      	beq.n	8003e1c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2208      	movs	r2, #8
 8003e0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e12:	f043 0208 	orr.w	r2, r3, #8
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d012      	beq.n	8003e4e <HAL_UART_IRQHandler+0x196>
 8003e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00c      	beq.n	8003e4e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e44:	f043 0220 	orr.w	r2, r3, #32
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 8266 	beq.w	8004326 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e5e:	f003 0320 	and.w	r3, r3, #32
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d013      	beq.n	8003e8e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003e66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e6a:	f003 0320 	and.w	r3, r3, #32
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d105      	bne.n	8003e7e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003e72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d007      	beq.n	8003e8e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e94:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ea2:	2b40      	cmp	r3, #64	@ 0x40
 8003ea4:	d005      	beq.n	8003eb2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003ea6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003eaa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d054      	beq.n	8003f5c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f001 f8fb 	bl	80050ae <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ec2:	2b40      	cmp	r3, #64	@ 0x40
 8003ec4:	d146      	bne.n	8003f54 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	3308      	adds	r3, #8
 8003ecc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ed4:	e853 3f00 	ldrex	r3, [r3]
 8003ed8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003edc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ee0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ee4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	3308      	adds	r3, #8
 8003eee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003ef2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003ef6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003efe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003f02:	e841 2300 	strex	r3, r2, [r1]
 8003f06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003f0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1d9      	bne.n	8003ec6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d017      	beq.n	8003f4c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f22:	4a15      	ldr	r2, [pc, #84]	@ (8003f78 <HAL_UART_IRQHandler+0x2c0>)
 8003f24:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7fd fcf7 	bl	8001920 <HAL_DMA_Abort_IT>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d019      	beq.n	8003f6c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8003f46:	4610      	mov	r0, r2
 8003f48:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f4a:	e00f      	b.n	8003f6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 fa09 	bl	8004364 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f52:	e00b      	b.n	8003f6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 fa05 	bl	8004364 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f5a:	e007      	b.n	8003f6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 fa01 	bl	8004364 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8003f6a:	e1dc      	b.n	8004326 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f6c:	bf00      	nop
    return;
 8003f6e:	e1da      	b.n	8004326 <HAL_UART_IRQHandler+0x66e>
 8003f70:	10000001 	.word	0x10000001
 8003f74:	04000120 	.word	0x04000120
 8003f78:	0800541b 	.word	0x0800541b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	f040 8170 	bne.w	8004266 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f8a:	f003 0310 	and.w	r3, r3, #16
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 8169 	beq.w	8004266 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f98:	f003 0310 	and.w	r3, r3, #16
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 8162 	beq.w	8004266 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2210      	movs	r2, #16
 8003fa8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb4:	2b40      	cmp	r3, #64	@ 0x40
 8003fb6:	f040 80d8 	bne.w	800416a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003fc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 80af 	beq.w	8004130 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003fd8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	f080 80a7 	bcs.w	8004130 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003fe8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0320 	and.w	r3, r3, #32
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f040 8087 	bne.w	800410e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004008:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800400c:	e853 3f00 	ldrex	r3, [r3]
 8004010:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004014:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004018:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800401c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	461a      	mov	r2, r3
 8004026:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800402a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800402e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004032:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004036:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800403a:	e841 2300 	strex	r3, r2, [r1]
 800403e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004042:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1da      	bne.n	8004000 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	3308      	adds	r3, #8
 8004050:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004052:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004054:	e853 3f00 	ldrex	r3, [r3]
 8004058:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800405a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800405c:	f023 0301 	bic.w	r3, r3, #1
 8004060:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	3308      	adds	r3, #8
 800406a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800406e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004072:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004074:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004076:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800407a:	e841 2300 	strex	r3, r2, [r1]
 800407e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004080:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1e1      	bne.n	800404a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	3308      	adds	r3, #8
 800408c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004090:	e853 3f00 	ldrex	r3, [r3]
 8004094:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004096:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004098:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800409c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3308      	adds	r3, #8
 80040a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80040aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80040ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80040b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80040b2:	e841 2300 	strex	r3, r2, [r1]
 80040b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80040b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1e3      	bne.n	8004086 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2220      	movs	r2, #32
 80040c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040d4:	e853 3f00 	ldrex	r3, [r3]
 80040d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80040da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040dc:	f023 0310 	bic.w	r3, r3, #16
 80040e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	461a      	mov	r2, r3
 80040ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80040f0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80040f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80040f6:	e841 2300 	strex	r3, r2, [r1]
 80040fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80040fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1e4      	bne.n	80040cc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004108:	4618      	mov	r0, r3
 800410a:	f7fd fbb0 	bl	800186e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2202      	movs	r2, #2
 8004112:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004120:	b29b      	uxth	r3, r3
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	b29b      	uxth	r3, r3
 8004126:	4619      	mov	r1, r3
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 f925 	bl	8004378 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800412e:	e0fc      	b.n	800432a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004136:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800413a:	429a      	cmp	r2, r3
 800413c:	f040 80f5 	bne.w	800432a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0320 	and.w	r3, r3, #32
 800414e:	2b20      	cmp	r3, #32
 8004150:	f040 80eb 	bne.w	800432a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2202      	movs	r2, #2
 8004158:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004160:	4619      	mov	r1, r3
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f908 	bl	8004378 <HAL_UARTEx_RxEventCallback>
      return;
 8004168:	e0df      	b.n	800432a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004176:	b29b      	uxth	r3, r3
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004184:	b29b      	uxth	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 80d1 	beq.w	800432e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800418c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 80cc 	beq.w	800432e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800419e:	e853 3f00 	ldrex	r3, [r3]
 80041a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	461a      	mov	r2, r3
 80041b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80041b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80041ba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041c0:	e841 2300 	strex	r3, r2, [r1]
 80041c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1e4      	bne.n	8004196 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3308      	adds	r3, #8
 80041d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d6:	e853 3f00 	ldrex	r3, [r3]
 80041da:	623b      	str	r3, [r7, #32]
   return(result);
 80041dc:	6a3b      	ldr	r3, [r7, #32]
 80041de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041e2:	f023 0301 	bic.w	r3, r3, #1
 80041e6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	3308      	adds	r3, #8
 80041f0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80041f4:	633a      	str	r2, [r7, #48]	@ 0x30
 80041f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041fc:	e841 2300 	strex	r3, r2, [r1]
 8004200:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1e1      	bne.n	80041cc <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2220      	movs	r2, #32
 800420c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	e853 3f00 	ldrex	r3, [r3]
 8004228:	60fb      	str	r3, [r7, #12]
   return(result);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f023 0310 	bic.w	r3, r3, #16
 8004230:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	461a      	mov	r2, r3
 800423a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800423e:	61fb      	str	r3, [r7, #28]
 8004240:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004242:	69b9      	ldr	r1, [r7, #24]
 8004244:	69fa      	ldr	r2, [r7, #28]
 8004246:	e841 2300 	strex	r3, r2, [r1]
 800424a:	617b      	str	r3, [r7, #20]
   return(result);
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1e4      	bne.n	800421c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2202      	movs	r2, #2
 8004256:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004258:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800425c:	4619      	mov	r1, r3
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f88a 	bl	8004378 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004264:	e063      	b.n	800432e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800426a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00e      	beq.n	8004290 <HAL_UART_IRQHandler+0x5d8>
 8004272:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004276:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d008      	beq.n	8004290 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004286:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f001 ffc5 	bl	8006218 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800428e:	e051      	b.n	8004334 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004294:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004298:	2b00      	cmp	r3, #0
 800429a:	d014      	beq.n	80042c6 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800429c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d105      	bne.n	80042b4 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80042a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d008      	beq.n	80042c6 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d03a      	beq.n	8004332 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	4798      	blx	r3
    }
    return;
 80042c4:	e035      	b.n	8004332 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80042c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d009      	beq.n	80042e6 <HAL_UART_IRQHandler+0x62e>
 80042d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f001 fa4f 	bl	8005782 <UART_EndTransmit_IT>
    return;
 80042e4:	e026      	b.n	8004334 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80042e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d009      	beq.n	8004306 <HAL_UART_IRQHandler+0x64e>
 80042f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042f6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f001 ff9e 	bl	8006240 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004304:	e016      	b.n	8004334 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800430a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d010      	beq.n	8004334 <HAL_UART_IRQHandler+0x67c>
 8004312:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004316:	2b00      	cmp	r3, #0
 8004318:	da0c      	bge.n	8004334 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f001 ff86 	bl	800622c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004320:	e008      	b.n	8004334 <HAL_UART_IRQHandler+0x67c>
      return;
 8004322:	bf00      	nop
 8004324:	e006      	b.n	8004334 <HAL_UART_IRQHandler+0x67c>
    return;
 8004326:	bf00      	nop
 8004328:	e004      	b.n	8004334 <HAL_UART_IRQHandler+0x67c>
      return;
 800432a:	bf00      	nop
 800432c:	e002      	b.n	8004334 <HAL_UART_IRQHandler+0x67c>
      return;
 800432e:	bf00      	nop
 8004330:	e000      	b.n	8004334 <HAL_UART_IRQHandler+0x67c>
    return;
 8004332:	bf00      	nop
  }
}
 8004334:	37e8      	adds	r7, #232	@ 0xe8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop

0800433c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	460b      	mov	r3, r1
 8004382:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004394:	b08c      	sub	sp, #48	@ 0x30
 8004396:	af00      	add	r7, sp, #0
 8004398:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800439a:	2300      	movs	r3, #0
 800439c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	431a      	orrs	r2, r3
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	431a      	orrs	r2, r3
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	69db      	ldr	r3, [r3, #28]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	4bab      	ldr	r3, [pc, #684]	@ (800466c <UART_SetConfig+0x2dc>)
 80043c0:	4013      	ands	r3, r2
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	6812      	ldr	r2, [r2, #0]
 80043c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043c8:	430b      	orrs	r3, r1
 80043ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4aa0      	ldr	r2, [pc, #640]	@ (8004670 <UART_SetConfig+0x2e0>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d004      	beq.n	80043fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043f8:	4313      	orrs	r3, r2
 80043fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004406:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	6812      	ldr	r2, [r2, #0]
 800440e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004410:	430b      	orrs	r3, r1
 8004412:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800441a:	f023 010f 	bic.w	r1, r3, #15
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	430a      	orrs	r2, r1
 8004428:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a91      	ldr	r2, [pc, #580]	@ (8004674 <UART_SetConfig+0x2e4>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d125      	bne.n	8004480 <UART_SetConfig+0xf0>
 8004434:	4b90      	ldr	r3, [pc, #576]	@ (8004678 <UART_SetConfig+0x2e8>)
 8004436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800443a:	f003 0303 	and.w	r3, r3, #3
 800443e:	2b03      	cmp	r3, #3
 8004440:	d81a      	bhi.n	8004478 <UART_SetConfig+0xe8>
 8004442:	a201      	add	r2, pc, #4	@ (adr r2, 8004448 <UART_SetConfig+0xb8>)
 8004444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004448:	08004459 	.word	0x08004459
 800444c:	08004469 	.word	0x08004469
 8004450:	08004461 	.word	0x08004461
 8004454:	08004471 	.word	0x08004471
 8004458:	2301      	movs	r3, #1
 800445a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800445e:	e0d6      	b.n	800460e <UART_SetConfig+0x27e>
 8004460:	2302      	movs	r3, #2
 8004462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004466:	e0d2      	b.n	800460e <UART_SetConfig+0x27e>
 8004468:	2304      	movs	r3, #4
 800446a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800446e:	e0ce      	b.n	800460e <UART_SetConfig+0x27e>
 8004470:	2308      	movs	r3, #8
 8004472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004476:	e0ca      	b.n	800460e <UART_SetConfig+0x27e>
 8004478:	2310      	movs	r3, #16
 800447a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800447e:	e0c6      	b.n	800460e <UART_SetConfig+0x27e>
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a7d      	ldr	r2, [pc, #500]	@ (800467c <UART_SetConfig+0x2ec>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d138      	bne.n	80044fc <UART_SetConfig+0x16c>
 800448a:	4b7b      	ldr	r3, [pc, #492]	@ (8004678 <UART_SetConfig+0x2e8>)
 800448c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004490:	f003 030c 	and.w	r3, r3, #12
 8004494:	2b0c      	cmp	r3, #12
 8004496:	d82d      	bhi.n	80044f4 <UART_SetConfig+0x164>
 8004498:	a201      	add	r2, pc, #4	@ (adr r2, 80044a0 <UART_SetConfig+0x110>)
 800449a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449e:	bf00      	nop
 80044a0:	080044d5 	.word	0x080044d5
 80044a4:	080044f5 	.word	0x080044f5
 80044a8:	080044f5 	.word	0x080044f5
 80044ac:	080044f5 	.word	0x080044f5
 80044b0:	080044e5 	.word	0x080044e5
 80044b4:	080044f5 	.word	0x080044f5
 80044b8:	080044f5 	.word	0x080044f5
 80044bc:	080044f5 	.word	0x080044f5
 80044c0:	080044dd 	.word	0x080044dd
 80044c4:	080044f5 	.word	0x080044f5
 80044c8:	080044f5 	.word	0x080044f5
 80044cc:	080044f5 	.word	0x080044f5
 80044d0:	080044ed 	.word	0x080044ed
 80044d4:	2300      	movs	r3, #0
 80044d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044da:	e098      	b.n	800460e <UART_SetConfig+0x27e>
 80044dc:	2302      	movs	r3, #2
 80044de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044e2:	e094      	b.n	800460e <UART_SetConfig+0x27e>
 80044e4:	2304      	movs	r3, #4
 80044e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044ea:	e090      	b.n	800460e <UART_SetConfig+0x27e>
 80044ec:	2308      	movs	r3, #8
 80044ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044f2:	e08c      	b.n	800460e <UART_SetConfig+0x27e>
 80044f4:	2310      	movs	r3, #16
 80044f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044fa:	e088      	b.n	800460e <UART_SetConfig+0x27e>
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a5f      	ldr	r2, [pc, #380]	@ (8004680 <UART_SetConfig+0x2f0>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d125      	bne.n	8004552 <UART_SetConfig+0x1c2>
 8004506:	4b5c      	ldr	r3, [pc, #368]	@ (8004678 <UART_SetConfig+0x2e8>)
 8004508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800450c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004510:	2b30      	cmp	r3, #48	@ 0x30
 8004512:	d016      	beq.n	8004542 <UART_SetConfig+0x1b2>
 8004514:	2b30      	cmp	r3, #48	@ 0x30
 8004516:	d818      	bhi.n	800454a <UART_SetConfig+0x1ba>
 8004518:	2b20      	cmp	r3, #32
 800451a:	d00a      	beq.n	8004532 <UART_SetConfig+0x1a2>
 800451c:	2b20      	cmp	r3, #32
 800451e:	d814      	bhi.n	800454a <UART_SetConfig+0x1ba>
 8004520:	2b00      	cmp	r3, #0
 8004522:	d002      	beq.n	800452a <UART_SetConfig+0x19a>
 8004524:	2b10      	cmp	r3, #16
 8004526:	d008      	beq.n	800453a <UART_SetConfig+0x1aa>
 8004528:	e00f      	b.n	800454a <UART_SetConfig+0x1ba>
 800452a:	2300      	movs	r3, #0
 800452c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004530:	e06d      	b.n	800460e <UART_SetConfig+0x27e>
 8004532:	2302      	movs	r3, #2
 8004534:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004538:	e069      	b.n	800460e <UART_SetConfig+0x27e>
 800453a:	2304      	movs	r3, #4
 800453c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004540:	e065      	b.n	800460e <UART_SetConfig+0x27e>
 8004542:	2308      	movs	r3, #8
 8004544:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004548:	e061      	b.n	800460e <UART_SetConfig+0x27e>
 800454a:	2310      	movs	r3, #16
 800454c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004550:	e05d      	b.n	800460e <UART_SetConfig+0x27e>
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a4b      	ldr	r2, [pc, #300]	@ (8004684 <UART_SetConfig+0x2f4>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d125      	bne.n	80045a8 <UART_SetConfig+0x218>
 800455c:	4b46      	ldr	r3, [pc, #280]	@ (8004678 <UART_SetConfig+0x2e8>)
 800455e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004562:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004566:	2bc0      	cmp	r3, #192	@ 0xc0
 8004568:	d016      	beq.n	8004598 <UART_SetConfig+0x208>
 800456a:	2bc0      	cmp	r3, #192	@ 0xc0
 800456c:	d818      	bhi.n	80045a0 <UART_SetConfig+0x210>
 800456e:	2b80      	cmp	r3, #128	@ 0x80
 8004570:	d00a      	beq.n	8004588 <UART_SetConfig+0x1f8>
 8004572:	2b80      	cmp	r3, #128	@ 0x80
 8004574:	d814      	bhi.n	80045a0 <UART_SetConfig+0x210>
 8004576:	2b00      	cmp	r3, #0
 8004578:	d002      	beq.n	8004580 <UART_SetConfig+0x1f0>
 800457a:	2b40      	cmp	r3, #64	@ 0x40
 800457c:	d008      	beq.n	8004590 <UART_SetConfig+0x200>
 800457e:	e00f      	b.n	80045a0 <UART_SetConfig+0x210>
 8004580:	2300      	movs	r3, #0
 8004582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004586:	e042      	b.n	800460e <UART_SetConfig+0x27e>
 8004588:	2302      	movs	r3, #2
 800458a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800458e:	e03e      	b.n	800460e <UART_SetConfig+0x27e>
 8004590:	2304      	movs	r3, #4
 8004592:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004596:	e03a      	b.n	800460e <UART_SetConfig+0x27e>
 8004598:	2308      	movs	r3, #8
 800459a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800459e:	e036      	b.n	800460e <UART_SetConfig+0x27e>
 80045a0:	2310      	movs	r3, #16
 80045a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045a6:	e032      	b.n	800460e <UART_SetConfig+0x27e>
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a30      	ldr	r2, [pc, #192]	@ (8004670 <UART_SetConfig+0x2e0>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d12a      	bne.n	8004608 <UART_SetConfig+0x278>
 80045b2:	4b31      	ldr	r3, [pc, #196]	@ (8004678 <UART_SetConfig+0x2e8>)
 80045b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80045bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045c0:	d01a      	beq.n	80045f8 <UART_SetConfig+0x268>
 80045c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045c6:	d81b      	bhi.n	8004600 <UART_SetConfig+0x270>
 80045c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045cc:	d00c      	beq.n	80045e8 <UART_SetConfig+0x258>
 80045ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045d2:	d815      	bhi.n	8004600 <UART_SetConfig+0x270>
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <UART_SetConfig+0x250>
 80045d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045dc:	d008      	beq.n	80045f0 <UART_SetConfig+0x260>
 80045de:	e00f      	b.n	8004600 <UART_SetConfig+0x270>
 80045e0:	2300      	movs	r3, #0
 80045e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045e6:	e012      	b.n	800460e <UART_SetConfig+0x27e>
 80045e8:	2302      	movs	r3, #2
 80045ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045ee:	e00e      	b.n	800460e <UART_SetConfig+0x27e>
 80045f0:	2304      	movs	r3, #4
 80045f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045f6:	e00a      	b.n	800460e <UART_SetConfig+0x27e>
 80045f8:	2308      	movs	r3, #8
 80045fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045fe:	e006      	b.n	800460e <UART_SetConfig+0x27e>
 8004600:	2310      	movs	r3, #16
 8004602:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004606:	e002      	b.n	800460e <UART_SetConfig+0x27e>
 8004608:	2310      	movs	r3, #16
 800460a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a17      	ldr	r2, [pc, #92]	@ (8004670 <UART_SetConfig+0x2e0>)
 8004614:	4293      	cmp	r3, r2
 8004616:	f040 80a8 	bne.w	800476a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800461a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800461e:	2b08      	cmp	r3, #8
 8004620:	d834      	bhi.n	800468c <UART_SetConfig+0x2fc>
 8004622:	a201      	add	r2, pc, #4	@ (adr r2, 8004628 <UART_SetConfig+0x298>)
 8004624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004628:	0800464d 	.word	0x0800464d
 800462c:	0800468d 	.word	0x0800468d
 8004630:	08004655 	.word	0x08004655
 8004634:	0800468d 	.word	0x0800468d
 8004638:	0800465b 	.word	0x0800465b
 800463c:	0800468d 	.word	0x0800468d
 8004640:	0800468d 	.word	0x0800468d
 8004644:	0800468d 	.word	0x0800468d
 8004648:	08004663 	.word	0x08004663
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800464c:	f7fe fa28 	bl	8002aa0 <HAL_RCC_GetPCLK1Freq>
 8004650:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004652:	e021      	b.n	8004698 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004654:	4b0c      	ldr	r3, [pc, #48]	@ (8004688 <UART_SetConfig+0x2f8>)
 8004656:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004658:	e01e      	b.n	8004698 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800465a:	f7fe f9b3 	bl	80029c4 <HAL_RCC_GetSysClockFreq>
 800465e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004660:	e01a      	b.n	8004698 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004662:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004666:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004668:	e016      	b.n	8004698 <UART_SetConfig+0x308>
 800466a:	bf00      	nop
 800466c:	cfff69f3 	.word	0xcfff69f3
 8004670:	40008000 	.word	0x40008000
 8004674:	40013800 	.word	0x40013800
 8004678:	40021000 	.word	0x40021000
 800467c:	40004400 	.word	0x40004400
 8004680:	40004800 	.word	0x40004800
 8004684:	40004c00 	.word	0x40004c00
 8004688:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004696:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 812a 	beq.w	80048f4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a4:	4a9e      	ldr	r2, [pc, #632]	@ (8004920 <UART_SetConfig+0x590>)
 80046a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046aa:	461a      	mov	r2, r3
 80046ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80046b2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	4613      	mov	r3, r2
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	4413      	add	r3, r2
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d305      	bcc.n	80046d0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d903      	bls.n	80046d8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80046d6:	e10d      	b.n	80048f4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046da:	2200      	movs	r2, #0
 80046dc:	60bb      	str	r3, [r7, #8]
 80046de:	60fa      	str	r2, [r7, #12]
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e4:	4a8e      	ldr	r2, [pc, #568]	@ (8004920 <UART_SetConfig+0x590>)
 80046e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	2200      	movs	r2, #0
 80046ee:	603b      	str	r3, [r7, #0]
 80046f0:	607a      	str	r2, [r7, #4]
 80046f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046fa:	f7fb fde1 	bl	80002c0 <__aeabi_uldivmod>
 80046fe:	4602      	mov	r2, r0
 8004700:	460b      	mov	r3, r1
 8004702:	4610      	mov	r0, r2
 8004704:	4619      	mov	r1, r3
 8004706:	f04f 0200 	mov.w	r2, #0
 800470a:	f04f 0300 	mov.w	r3, #0
 800470e:	020b      	lsls	r3, r1, #8
 8004710:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004714:	0202      	lsls	r2, r0, #8
 8004716:	6979      	ldr	r1, [r7, #20]
 8004718:	6849      	ldr	r1, [r1, #4]
 800471a:	0849      	lsrs	r1, r1, #1
 800471c:	2000      	movs	r0, #0
 800471e:	460c      	mov	r4, r1
 8004720:	4605      	mov	r5, r0
 8004722:	eb12 0804 	adds.w	r8, r2, r4
 8004726:	eb43 0905 	adc.w	r9, r3, r5
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	469a      	mov	sl, r3
 8004732:	4693      	mov	fp, r2
 8004734:	4652      	mov	r2, sl
 8004736:	465b      	mov	r3, fp
 8004738:	4640      	mov	r0, r8
 800473a:	4649      	mov	r1, r9
 800473c:	f7fb fdc0 	bl	80002c0 <__aeabi_uldivmod>
 8004740:	4602      	mov	r2, r0
 8004742:	460b      	mov	r3, r1
 8004744:	4613      	mov	r3, r2
 8004746:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800474e:	d308      	bcc.n	8004762 <UART_SetConfig+0x3d2>
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004756:	d204      	bcs.n	8004762 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6a3a      	ldr	r2, [r7, #32]
 800475e:	60da      	str	r2, [r3, #12]
 8004760:	e0c8      	b.n	80048f4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004768:	e0c4      	b.n	80048f4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004772:	d167      	bne.n	8004844 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004774:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004778:	2b08      	cmp	r3, #8
 800477a:	d828      	bhi.n	80047ce <UART_SetConfig+0x43e>
 800477c:	a201      	add	r2, pc, #4	@ (adr r2, 8004784 <UART_SetConfig+0x3f4>)
 800477e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004782:	bf00      	nop
 8004784:	080047a9 	.word	0x080047a9
 8004788:	080047b1 	.word	0x080047b1
 800478c:	080047b9 	.word	0x080047b9
 8004790:	080047cf 	.word	0x080047cf
 8004794:	080047bf 	.word	0x080047bf
 8004798:	080047cf 	.word	0x080047cf
 800479c:	080047cf 	.word	0x080047cf
 80047a0:	080047cf 	.word	0x080047cf
 80047a4:	080047c7 	.word	0x080047c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047a8:	f7fe f97a 	bl	8002aa0 <HAL_RCC_GetPCLK1Freq>
 80047ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047ae:	e014      	b.n	80047da <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047b0:	f7fe f98c 	bl	8002acc <HAL_RCC_GetPCLK2Freq>
 80047b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047b6:	e010      	b.n	80047da <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047b8:	4b5a      	ldr	r3, [pc, #360]	@ (8004924 <UART_SetConfig+0x594>)
 80047ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80047bc:	e00d      	b.n	80047da <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047be:	f7fe f901 	bl	80029c4 <HAL_RCC_GetSysClockFreq>
 80047c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047c4:	e009      	b.n	80047da <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80047cc:	e005      	b.n	80047da <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80047d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 8089 	beq.w	80048f4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e6:	4a4e      	ldr	r2, [pc, #312]	@ (8004920 <UART_SetConfig+0x590>)
 80047e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047ec:	461a      	mov	r2, r3
 80047ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80047f4:	005a      	lsls	r2, r3, #1
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	085b      	lsrs	r3, r3, #1
 80047fc:	441a      	add	r2, r3
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	fbb2 f3f3 	udiv	r3, r2, r3
 8004806:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	2b0f      	cmp	r3, #15
 800480c:	d916      	bls.n	800483c <UART_SetConfig+0x4ac>
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004814:	d212      	bcs.n	800483c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004816:	6a3b      	ldr	r3, [r7, #32]
 8004818:	b29b      	uxth	r3, r3
 800481a:	f023 030f 	bic.w	r3, r3, #15
 800481e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004820:	6a3b      	ldr	r3, [r7, #32]
 8004822:	085b      	lsrs	r3, r3, #1
 8004824:	b29b      	uxth	r3, r3
 8004826:	f003 0307 	and.w	r3, r3, #7
 800482a:	b29a      	uxth	r2, r3
 800482c:	8bfb      	ldrh	r3, [r7, #30]
 800482e:	4313      	orrs	r3, r2
 8004830:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	8bfa      	ldrh	r2, [r7, #30]
 8004838:	60da      	str	r2, [r3, #12]
 800483a:	e05b      	b.n	80048f4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004842:	e057      	b.n	80048f4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004844:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004848:	2b08      	cmp	r3, #8
 800484a:	d828      	bhi.n	800489e <UART_SetConfig+0x50e>
 800484c:	a201      	add	r2, pc, #4	@ (adr r2, 8004854 <UART_SetConfig+0x4c4>)
 800484e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004852:	bf00      	nop
 8004854:	08004879 	.word	0x08004879
 8004858:	08004881 	.word	0x08004881
 800485c:	08004889 	.word	0x08004889
 8004860:	0800489f 	.word	0x0800489f
 8004864:	0800488f 	.word	0x0800488f
 8004868:	0800489f 	.word	0x0800489f
 800486c:	0800489f 	.word	0x0800489f
 8004870:	0800489f 	.word	0x0800489f
 8004874:	08004897 	.word	0x08004897
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004878:	f7fe f912 	bl	8002aa0 <HAL_RCC_GetPCLK1Freq>
 800487c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800487e:	e014      	b.n	80048aa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004880:	f7fe f924 	bl	8002acc <HAL_RCC_GetPCLK2Freq>
 8004884:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004886:	e010      	b.n	80048aa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004888:	4b26      	ldr	r3, [pc, #152]	@ (8004924 <UART_SetConfig+0x594>)
 800488a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800488c:	e00d      	b.n	80048aa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800488e:	f7fe f899 	bl	80029c4 <HAL_RCC_GetSysClockFreq>
 8004892:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004894:	e009      	b.n	80048aa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004896:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800489a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800489c:	e005      	b.n	80048aa <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80048a8:	bf00      	nop
    }

    if (pclk != 0U)
 80048aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d021      	beq.n	80048f4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b4:	4a1a      	ldr	r2, [pc, #104]	@ (8004920 <UART_SetConfig+0x590>)
 80048b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048ba:	461a      	mov	r2, r3
 80048bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048be:	fbb3 f2f2 	udiv	r2, r3, r2
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	085b      	lsrs	r3, r3, #1
 80048c8:	441a      	add	r2, r3
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	2b0f      	cmp	r3, #15
 80048d8:	d909      	bls.n	80048ee <UART_SetConfig+0x55e>
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048e0:	d205      	bcs.n	80048ee <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048e2:	6a3b      	ldr	r3, [r7, #32]
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	60da      	str	r2, [r3, #12]
 80048ec:	e002      	b.n	80048f4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	2201      	movs	r2, #1
 8004900:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	2200      	movs	r2, #0
 8004908:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	2200      	movs	r2, #0
 800490e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004910:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004914:	4618      	mov	r0, r3
 8004916:	3730      	adds	r7, #48	@ 0x30
 8004918:	46bd      	mov	sp, r7
 800491a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800491e:	bf00      	nop
 8004920:	08008d10 	.word	0x08008d10
 8004924:	00f42400 	.word	0x00f42400

08004928 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004934:	f003 0308 	and.w	r3, r3, #8
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00a      	beq.n	8004952 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	430a      	orrs	r2, r1
 8004950:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00a      	beq.n	8004974 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	430a      	orrs	r2, r1
 8004972:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00a      	beq.n	8004996 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	430a      	orrs	r2, r1
 8004994:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800499a:	f003 0304 	and.w	r3, r3, #4
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00a      	beq.n	80049b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049bc:	f003 0310 	and.w	r3, r3, #16
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00a      	beq.n	80049da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049de:	f003 0320 	and.w	r3, r3, #32
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00a      	beq.n	80049fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d01a      	beq.n	8004a3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a26:	d10a      	bne.n	8004a3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	605a      	str	r2, [r3, #4]
  }
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b098      	sub	sp, #96	@ 0x60
 8004a70:	af02      	add	r7, sp, #8
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a7c:	f7fc fce8 	bl	8001450 <HAL_GetTick>
 8004a80:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0308 	and.w	r3, r3, #8
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	d12f      	bne.n	8004af0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f88e 	bl	8004bc0 <UART_WaitOnFlagUntilTimeout>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d022      	beq.n	8004af0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ab2:	e853 3f00 	ldrex	r3, [r3]
 8004ab6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004abe:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ac8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004aca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004acc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ace:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ad0:	e841 2300 	strex	r3, r2, [r1]
 8004ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1e6      	bne.n	8004aaa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e063      	b.n	8004bb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0304 	and.w	r3, r3, #4
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	d149      	bne.n	8004b92 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004afe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b06:	2200      	movs	r2, #0
 8004b08:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f857 	bl	8004bc0 <UART_WaitOnFlagUntilTimeout>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d03c      	beq.n	8004b92 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b20:	e853 3f00 	ldrex	r3, [r3]
 8004b24:	623b      	str	r3, [r7, #32]
   return(result);
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	461a      	mov	r2, r3
 8004b34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b36:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b38:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b3e:	e841 2300 	strex	r3, r2, [r1]
 8004b42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1e6      	bne.n	8004b18 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	3308      	adds	r3, #8
 8004b50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	e853 3f00 	ldrex	r3, [r3]
 8004b58:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f023 0301 	bic.w	r3, r3, #1
 8004b60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	3308      	adds	r3, #8
 8004b68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b6a:	61fa      	str	r2, [r7, #28]
 8004b6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6e:	69b9      	ldr	r1, [r7, #24]
 8004b70:	69fa      	ldr	r2, [r7, #28]
 8004b72:	e841 2300 	strex	r3, r2, [r1]
 8004b76:	617b      	str	r3, [r7, #20]
   return(result);
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1e5      	bne.n	8004b4a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2220      	movs	r2, #32
 8004b82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e012      	b.n	8004bb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2220      	movs	r2, #32
 8004b96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3758      	adds	r7, #88	@ 0x58
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	603b      	str	r3, [r7, #0]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bd0:	e04f      	b.n	8004c72 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd8:	d04b      	beq.n	8004c72 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bda:	f7fc fc39 	bl	8001450 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d302      	bcc.n	8004bf0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d101      	bne.n	8004bf4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e04e      	b.n	8004c92 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0304 	and.w	r3, r3, #4
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d037      	beq.n	8004c72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	2b80      	cmp	r3, #128	@ 0x80
 8004c06:	d034      	beq.n	8004c72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	2b40      	cmp	r3, #64	@ 0x40
 8004c0c:	d031      	beq.n	8004c72 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	69db      	ldr	r3, [r3, #28]
 8004c14:	f003 0308 	and.w	r3, r3, #8
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	d110      	bne.n	8004c3e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2208      	movs	r2, #8
 8004c22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f000 fa42 	bl	80050ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2208      	movs	r2, #8
 8004c2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e029      	b.n	8004c92 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	69db      	ldr	r3, [r3, #28]
 8004c44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c4c:	d111      	bne.n	8004c72 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 fa28 	bl	80050ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2220      	movs	r2, #32
 8004c62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e00f      	b.n	8004c92 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	69da      	ldr	r2, [r3, #28]
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	bf0c      	ite	eq
 8004c82:	2301      	moveq	r3, #1
 8004c84:	2300      	movne	r3, #0
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	461a      	mov	r2, r3
 8004c8a:	79fb      	ldrb	r3, [r7, #7]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d0a0      	beq.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
	...

08004c9c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b0a3      	sub	sp, #140	@ 0x8c
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	88fa      	ldrh	r2, [r7, #6]
 8004cb4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	88fa      	ldrh	r2, [r7, #6]
 8004cbc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cce:	d10e      	bne.n	8004cee <UART_Start_Receive_IT+0x52>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d105      	bne.n	8004ce4 <UART_Start_Receive_IT+0x48>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004cde:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004ce2:	e02d      	b.n	8004d40 <UART_Start_Receive_IT+0xa4>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	22ff      	movs	r2, #255	@ 0xff
 8004ce8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004cec:	e028      	b.n	8004d40 <UART_Start_Receive_IT+0xa4>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10d      	bne.n	8004d12 <UART_Start_Receive_IT+0x76>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d104      	bne.n	8004d08 <UART_Start_Receive_IT+0x6c>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	22ff      	movs	r2, #255	@ 0xff
 8004d02:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004d06:	e01b      	b.n	8004d40 <UART_Start_Receive_IT+0xa4>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	227f      	movs	r2, #127	@ 0x7f
 8004d0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004d10:	e016      	b.n	8004d40 <UART_Start_Receive_IT+0xa4>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d1a:	d10d      	bne.n	8004d38 <UART_Start_Receive_IT+0x9c>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d104      	bne.n	8004d2e <UART_Start_Receive_IT+0x92>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	227f      	movs	r2, #127	@ 0x7f
 8004d28:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004d2c:	e008      	b.n	8004d40 <UART_Start_Receive_IT+0xa4>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	223f      	movs	r2, #63	@ 0x3f
 8004d32:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004d36:	e003      	b.n	8004d40 <UART_Start_Receive_IT+0xa4>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2222      	movs	r2, #34	@ 0x22
 8004d4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	3308      	adds	r3, #8
 8004d56:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d5a:	e853 3f00 	ldrex	r3, [r3]
 8004d5e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8004d60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d62:	f043 0301 	orr.w	r3, r3, #1
 8004d66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	3308      	adds	r3, #8
 8004d70:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004d74:	673a      	str	r2, [r7, #112]	@ 0x70
 8004d76:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d78:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004d7a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004d7c:	e841 2300 	strex	r3, r2, [r1]
 8004d80:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8004d82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1e3      	bne.n	8004d50 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d90:	d14f      	bne.n	8004e32 <UART_Start_Receive_IT+0x196>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004d98:	88fa      	ldrh	r2, [r7, #6]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d349      	bcc.n	8004e32 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004da6:	d107      	bne.n	8004db8 <UART_Start_Receive_IT+0x11c>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d103      	bne.n	8004db8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4a47      	ldr	r2, [pc, #284]	@ (8004ed0 <UART_Start_Receive_IT+0x234>)
 8004db4:	675a      	str	r2, [r3, #116]	@ 0x74
 8004db6:	e002      	b.n	8004dbe <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	4a46      	ldr	r2, [pc, #280]	@ (8004ed4 <UART_Start_Receive_IT+0x238>)
 8004dbc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d01a      	beq.n	8004dfc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004dce:	e853 3f00 	ldrex	r3, [r3]
 8004dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004dd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	461a      	mov	r2, r3
 8004de4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004de8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004dea:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dec:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004dee:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004df0:	e841 2300 	strex	r3, r2, [r1]
 8004df4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004df6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1e4      	bne.n	8004dc6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	3308      	adds	r3, #8
 8004e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e06:	e853 3f00 	ldrex	r3, [r3]
 8004e0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e12:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	3308      	adds	r3, #8
 8004e1a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004e1c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004e1e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e20:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004e22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e24:	e841 2300 	strex	r3, r2, [r1]
 8004e28:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004e2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1e5      	bne.n	8004dfc <UART_Start_Receive_IT+0x160>
 8004e30:	e046      	b.n	8004ec0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e3a:	d107      	bne.n	8004e4c <UART_Start_Receive_IT+0x1b0>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d103      	bne.n	8004e4c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4a24      	ldr	r2, [pc, #144]	@ (8004ed8 <UART_Start_Receive_IT+0x23c>)
 8004e48:	675a      	str	r2, [r3, #116]	@ 0x74
 8004e4a:	e002      	b.n	8004e52 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4a23      	ldr	r2, [pc, #140]	@ (8004edc <UART_Start_Receive_IT+0x240>)
 8004e50:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d019      	beq.n	8004e8e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e62:	e853 3f00 	ldrex	r3, [r3]
 8004e66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004e6e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	461a      	mov	r2, r3
 8004e76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e78:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e7a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e80:	e841 2300 	strex	r3, r2, [r1]
 8004e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1e6      	bne.n	8004e5a <UART_Start_Receive_IT+0x1be>
 8004e8c:	e018      	b.n	8004ec0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	e853 3f00 	ldrex	r3, [r3]
 8004e9a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	f043 0320 	orr.w	r3, r3, #32
 8004ea2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004eac:	623b      	str	r3, [r7, #32]
 8004eae:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb0:	69f9      	ldr	r1, [r7, #28]
 8004eb2:	6a3a      	ldr	r2, [r7, #32]
 8004eb4:	e841 2300 	strex	r3, r2, [r1]
 8004eb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1e6      	bne.n	8004e8e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	378c      	adds	r7, #140	@ 0x8c
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	08005ead 	.word	0x08005ead
 8004ed4:	08005b49 	.word	0x08005b49
 8004ed8:	08005991 	.word	0x08005991
 8004edc:	080057d9 	.word	0x080057d9

08004ee0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b096      	sub	sp, #88	@ 0x58
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	4613      	mov	r3, r2
 8004eec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	88fa      	ldrh	r2, [r7, #6]
 8004ef8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2222      	movs	r2, #34	@ 0x22
 8004f08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d02d      	beq.n	8004f72 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f1c:	4a40      	ldr	r2, [pc, #256]	@ (8005020 <UART_Start_Receive_DMA+0x140>)
 8004f1e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f26:	4a3f      	ldr	r2, [pc, #252]	@ (8005024 <UART_Start_Receive_DMA+0x144>)
 8004f28:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f30:	4a3d      	ldr	r2, [pc, #244]	@ (8005028 <UART_Start_Receive_DMA+0x148>)
 8004f32:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	3324      	adds	r3, #36	@ 0x24
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f50:	461a      	mov	r2, r3
 8004f52:	88fb      	ldrh	r3, [r7, #6]
 8004f54:	f7fc fc10 	bl	8001778 <HAL_DMA_Start_IT>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d009      	beq.n	8004f72 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2210      	movs	r2, #16
 8004f62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2220      	movs	r2, #32
 8004f6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e051      	b.n	8005016 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d018      	beq.n	8004fac <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f82:	e853 3f00 	ldrex	r3, [r3]
 8004f86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	461a      	mov	r2, r3
 8004f96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f9a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004f9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fa0:	e841 2300 	strex	r3, r2, [r1]
 8004fa4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004fa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1e6      	bne.n	8004f7a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	3308      	adds	r3, #8
 8004fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb6:	e853 3f00 	ldrex	r3, [r3]
 8004fba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbe:	f043 0301 	orr.w	r3, r3, #1
 8004fc2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	3308      	adds	r3, #8
 8004fca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004fcc:	637a      	str	r2, [r7, #52]	@ 0x34
 8004fce:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004fd2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004fd4:	e841 2300 	strex	r3, r2, [r1]
 8004fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1e5      	bne.n	8004fac <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	3308      	adds	r3, #8
 8004fe6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	e853 3f00 	ldrex	r3, [r3]
 8004fee:	613b      	str	r3, [r7, #16]
   return(result);
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ff6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3308      	adds	r3, #8
 8004ffe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005000:	623a      	str	r2, [r7, #32]
 8005002:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005004:	69f9      	ldr	r1, [r7, #28]
 8005006:	6a3a      	ldr	r2, [r7, #32]
 8005008:	e841 2300 	strex	r3, r2, [r1]
 800500c:	61bb      	str	r3, [r7, #24]
   return(result);
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1e5      	bne.n	8004fe0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3758      	adds	r7, #88	@ 0x58
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	08005231 	.word	0x08005231
 8005024:	0800535d 	.word	0x0800535d
 8005028:	0800539b 	.word	0x0800539b

0800502c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800502c:	b480      	push	{r7}
 800502e:	b08f      	sub	sp, #60	@ 0x3c
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503a:	6a3b      	ldr	r3, [r7, #32]
 800503c:	e853 3f00 	ldrex	r3, [r3]
 8005040:	61fb      	str	r3, [r7, #28]
   return(result);
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005048:	637b      	str	r3, [r7, #52]	@ 0x34
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	461a      	mov	r2, r3
 8005050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005052:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005054:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005056:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005058:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800505a:	e841 2300 	strex	r3, r2, [r1]
 800505e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1e6      	bne.n	8005034 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3308      	adds	r3, #8
 800506c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	e853 3f00 	ldrex	r3, [r3]
 8005074:	60bb      	str	r3, [r7, #8]
   return(result);
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800507c:	633b      	str	r3, [r7, #48]	@ 0x30
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	3308      	adds	r3, #8
 8005084:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005086:	61ba      	str	r2, [r7, #24]
 8005088:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508a:	6979      	ldr	r1, [r7, #20]
 800508c:	69ba      	ldr	r2, [r7, #24]
 800508e:	e841 2300 	strex	r3, r2, [r1]
 8005092:	613b      	str	r3, [r7, #16]
   return(result);
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1e5      	bne.n	8005066 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2220      	movs	r2, #32
 800509e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80050a2:	bf00      	nop
 80050a4:	373c      	adds	r7, #60	@ 0x3c
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b095      	sub	sp, #84	@ 0x54
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050be:	e853 3f00 	ldrex	r3, [r3]
 80050c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80050c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	461a      	mov	r2, r3
 80050d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80050d6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050dc:	e841 2300 	strex	r3, r2, [r1]
 80050e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1e6      	bne.n	80050b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3308      	adds	r3, #8
 80050ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f0:	6a3b      	ldr	r3, [r7, #32]
 80050f2:	e853 3f00 	ldrex	r3, [r3]
 80050f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050fe:	f023 0301 	bic.w	r3, r3, #1
 8005102:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	3308      	adds	r3, #8
 800510a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800510c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800510e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005110:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005112:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005114:	e841 2300 	strex	r3, r2, [r1]
 8005118:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800511a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1e3      	bne.n	80050e8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005124:	2b01      	cmp	r3, #1
 8005126:	d118      	bne.n	800515a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	e853 3f00 	ldrex	r3, [r3]
 8005134:	60bb      	str	r3, [r7, #8]
   return(result);
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	f023 0310 	bic.w	r3, r3, #16
 800513c:	647b      	str	r3, [r7, #68]	@ 0x44
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	461a      	mov	r2, r3
 8005144:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005146:	61bb      	str	r3, [r7, #24]
 8005148:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514a:	6979      	ldr	r1, [r7, #20]
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	e841 2300 	strex	r3, r2, [r1]
 8005152:	613b      	str	r3, [r7, #16]
   return(result);
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1e6      	bne.n	8005128 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2220      	movs	r2, #32
 800515e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800516e:	bf00      	nop
 8005170:	3754      	adds	r7, #84	@ 0x54
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b090      	sub	sp, #64	@ 0x40
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005186:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0320 	and.w	r3, r3, #32
 8005192:	2b00      	cmp	r3, #0
 8005194:	d137      	bne.n	8005206 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8005196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005198:	2200      	movs	r2, #0
 800519a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800519e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	3308      	adds	r3, #8
 80051a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a8:	e853 3f00 	ldrex	r3, [r3]
 80051ac:	623b      	str	r3, [r7, #32]
   return(result);
 80051ae:	6a3b      	ldr	r3, [r7, #32]
 80051b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	3308      	adds	r3, #8
 80051bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80051be:	633a      	str	r2, [r7, #48]	@ 0x30
 80051c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051c6:	e841 2300 	strex	r3, r2, [r1]
 80051ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1e5      	bne.n	800519e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	e853 3f00 	ldrex	r3, [r3]
 80051de:	60fb      	str	r3, [r7, #12]
   return(result);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80051e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	461a      	mov	r2, r3
 80051ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051f0:	61fb      	str	r3, [r7, #28]
 80051f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f4:	69b9      	ldr	r1, [r7, #24]
 80051f6:	69fa      	ldr	r2, [r7, #28]
 80051f8:	e841 2300 	strex	r3, r2, [r1]
 80051fc:	617b      	str	r3, [r7, #20]
   return(result);
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1e6      	bne.n	80051d2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005204:	e002      	b.n	800520c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005206:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005208:	f7ff f898 	bl	800433c <HAL_UART_TxCpltCallback>
}
 800520c:	bf00      	nop
 800520e:	3740      	adds	r7, #64	@ 0x40
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005220:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f7ff f894 	bl	8004350 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005228:	bf00      	nop
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b09c      	sub	sp, #112	@ 0x70
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800523c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0320 	and.w	r3, r3, #32
 8005248:	2b00      	cmp	r3, #0
 800524a:	d171      	bne.n	8005330 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800524c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800524e:	2200      	movs	r2, #0
 8005250:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005254:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800525c:	e853 3f00 	ldrex	r3, [r3]
 8005260:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005262:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005264:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005268:	66bb      	str	r3, [r7, #104]	@ 0x68
 800526a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	461a      	mov	r2, r3
 8005270:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005272:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005274:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005276:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005278:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800527a:	e841 2300 	strex	r3, r2, [r1]
 800527e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005280:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1e6      	bne.n	8005254 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005286:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	3308      	adds	r3, #8
 800528c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005290:	e853 3f00 	ldrex	r3, [r3]
 8005294:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005298:	f023 0301 	bic.w	r3, r3, #1
 800529c:	667b      	str	r3, [r7, #100]	@ 0x64
 800529e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	3308      	adds	r3, #8
 80052a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80052a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80052a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80052ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052ae:	e841 2300 	strex	r3, r2, [r1]
 80052b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80052b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1e5      	bne.n	8005286 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	3308      	adds	r3, #8
 80052c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c4:	e853 3f00 	ldrex	r3, [r3]
 80052c8:	623b      	str	r3, [r7, #32]
   return(result);
 80052ca:	6a3b      	ldr	r3, [r7, #32]
 80052cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80052d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	3308      	adds	r3, #8
 80052d8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80052da:	633a      	str	r2, [r7, #48]	@ 0x30
 80052dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052e2:	e841 2300 	strex	r3, r2, [r1]
 80052e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1e5      	bne.n	80052ba <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80052ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052f0:	2220      	movs	r2, #32
 80052f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d118      	bne.n	8005330 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	e853 3f00 	ldrex	r3, [r3]
 800530a:	60fb      	str	r3, [r7, #12]
   return(result);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f023 0310 	bic.w	r3, r3, #16
 8005312:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005314:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	461a      	mov	r2, r3
 800531a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800531c:	61fb      	str	r3, [r7, #28]
 800531e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005320:	69b9      	ldr	r1, [r7, #24]
 8005322:	69fa      	ldr	r2, [r7, #28]
 8005324:	e841 2300 	strex	r3, r2, [r1]
 8005328:	617b      	str	r3, [r7, #20]
   return(result);
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1e6      	bne.n	80052fe <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005330:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005332:	2200      	movs	r2, #0
 8005334:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005336:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005338:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800533a:	2b01      	cmp	r3, #1
 800533c:	d107      	bne.n	800534e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800533e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005340:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005344:	4619      	mov	r1, r3
 8005346:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005348:	f7ff f816 	bl	8004378 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800534c:	e002      	b.n	8005354 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800534e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005350:	f7fb fcfc 	bl	8000d4c <HAL_UART_RxCpltCallback>
}
 8005354:	bf00      	nop
 8005356:	3770      	adds	r7, #112	@ 0x70
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005368:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2201      	movs	r2, #1
 800536e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005374:	2b01      	cmp	r3, #1
 8005376:	d109      	bne.n	800538c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800537e:	085b      	lsrs	r3, r3, #1
 8005380:	b29b      	uxth	r3, r3
 8005382:	4619      	mov	r1, r3
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f7fe fff7 	bl	8004378 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800538a:	e002      	b.n	8005392 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f7fb fcb5 	bl	8000cfc <HAL_UART_RxHalfCpltCallback>
}
 8005392:	bf00      	nop
 8005394:	3710      	adds	r7, #16
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b086      	sub	sp, #24
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ae:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80053b6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053c2:	2b80      	cmp	r3, #128	@ 0x80
 80053c4:	d109      	bne.n	80053da <UART_DMAError+0x40>
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	2b21      	cmp	r3, #33	@ 0x21
 80053ca:	d106      	bne.n	80053da <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80053d4:	6978      	ldr	r0, [r7, #20]
 80053d6:	f7ff fe29 	bl	800502c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053e4:	2b40      	cmp	r3, #64	@ 0x40
 80053e6:	d109      	bne.n	80053fc <UART_DMAError+0x62>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2b22      	cmp	r3, #34	@ 0x22
 80053ec:	d106      	bne.n	80053fc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80053f6:	6978      	ldr	r0, [r7, #20]
 80053f8:	f7ff fe59 	bl	80050ae <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005402:	f043 0210 	orr.w	r2, r3, #16
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800540c:	6978      	ldr	r0, [r7, #20]
 800540e:	f7fe ffa9 	bl	8004364 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005412:	bf00      	nop
 8005414:	3718      	adds	r7, #24
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b084      	sub	sp, #16
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005426:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	f7fe ff97 	bl	8004364 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005436:	bf00      	nop
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800543e:	b480      	push	{r7}
 8005440:	b08f      	sub	sp, #60	@ 0x3c
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800544c:	2b21      	cmp	r3, #33	@ 0x21
 800544e:	d14c      	bne.n	80054ea <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005456:	b29b      	uxth	r3, r3
 8005458:	2b00      	cmp	r3, #0
 800545a:	d132      	bne.n	80054c2 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005462:	6a3b      	ldr	r3, [r7, #32]
 8005464:	e853 3f00 	ldrex	r3, [r3]
 8005468:	61fb      	str	r3, [r7, #28]
   return(result);
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005470:	637b      	str	r3, [r7, #52]	@ 0x34
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	461a      	mov	r2, r3
 8005478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800547a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800547c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005480:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005482:	e841 2300 	strex	r3, r2, [r1]
 8005486:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1e6      	bne.n	800545c <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	e853 3f00 	ldrex	r3, [r3]
 800549a:	60bb      	str	r3, [r7, #8]
   return(result);
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	461a      	mov	r2, r3
 80054aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ac:	61bb      	str	r3, [r7, #24]
 80054ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b0:	6979      	ldr	r1, [r7, #20]
 80054b2:	69ba      	ldr	r2, [r7, #24]
 80054b4:	e841 2300 	strex	r3, r2, [r1]
 80054b8:	613b      	str	r3, [r7, #16]
   return(result);
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1e6      	bne.n	800548e <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80054c0:	e013      	b.n	80054ea <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054c6:	781a      	ldrb	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054d2:	1c5a      	adds	r2, r3, #1
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80054de:	b29b      	uxth	r3, r3
 80054e0:	3b01      	subs	r3, #1
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80054ea:	bf00      	nop
 80054ec:	373c      	adds	r7, #60	@ 0x3c
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80054f6:	b480      	push	{r7}
 80054f8:	b091      	sub	sp, #68	@ 0x44
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005504:	2b21      	cmp	r3, #33	@ 0x21
 8005506:	d151      	bne.n	80055ac <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800550e:	b29b      	uxth	r3, r3
 8005510:	2b00      	cmp	r3, #0
 8005512:	d132      	bne.n	800557a <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551c:	e853 3f00 	ldrex	r3, [r3]
 8005520:	623b      	str	r3, [r7, #32]
   return(result);
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005528:	63bb      	str	r3, [r7, #56]	@ 0x38
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	461a      	mov	r2, r3
 8005530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005532:	633b      	str	r3, [r7, #48]	@ 0x30
 8005534:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005536:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005538:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800553a:	e841 2300 	strex	r3, r2, [r1]
 800553e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1e6      	bne.n	8005514 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	e853 3f00 	ldrex	r3, [r3]
 8005552:	60fb      	str	r3, [r7, #12]
   return(result);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800555a:	637b      	str	r3, [r7, #52]	@ 0x34
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	461a      	mov	r2, r3
 8005562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005564:	61fb      	str	r3, [r7, #28]
 8005566:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005568:	69b9      	ldr	r1, [r7, #24]
 800556a:	69fa      	ldr	r2, [r7, #28]
 800556c:	e841 2300 	strex	r3, r2, [r1]
 8005570:	617b      	str	r3, [r7, #20]
   return(result);
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1e6      	bne.n	8005546 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005578:	e018      	b.n	80055ac <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800557e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005580:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005582:	881b      	ldrh	r3, [r3, #0]
 8005584:	461a      	mov	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800558e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005594:	1c9a      	adds	r2, r3, #2
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	3b01      	subs	r3, #1
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80055ac:	bf00      	nop
 80055ae:	3744      	adds	r7, #68	@ 0x44
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b091      	sub	sp, #68	@ 0x44
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055c6:	2b21      	cmp	r3, #33	@ 0x21
 80055c8:	d160      	bne.n	800568c <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80055d0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80055d2:	e057      	b.n	8005684 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80055da:	b29b      	uxth	r3, r3
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d133      	bne.n	8005648 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	3308      	adds	r3, #8
 80055e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ea:	e853 3f00 	ldrex	r3, [r3]
 80055ee:	623b      	str	r3, [r7, #32]
   return(result);
 80055f0:	6a3b      	ldr	r3, [r7, #32]
 80055f2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80055f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	3308      	adds	r3, #8
 80055fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005600:	633a      	str	r2, [r7, #48]	@ 0x30
 8005602:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005604:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005606:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005608:	e841 2300 	strex	r3, r2, [r1]
 800560c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800560e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1e5      	bne.n	80055e0 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	e853 3f00 	ldrex	r3, [r3]
 8005620:	60fb      	str	r3, [r7, #12]
   return(result);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005628:	637b      	str	r3, [r7, #52]	@ 0x34
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005632:	61fb      	str	r3, [r7, #28]
 8005634:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005636:	69b9      	ldr	r1, [r7, #24]
 8005638:	69fa      	ldr	r2, [r7, #28]
 800563a:	e841 2300 	strex	r3, r2, [r1]
 800563e:	617b      	str	r3, [r7, #20]
   return(result);
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1e6      	bne.n	8005614 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8005646:	e021      	b.n	800568c <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005652:	2b00      	cmp	r3, #0
 8005654:	d013      	beq.n	800567e <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800565a:	781a      	ldrb	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005666:	1c5a      	adds	r2, r3, #1
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005672:	b29b      	uxth	r3, r3
 8005674:	3b01      	subs	r3, #1
 8005676:	b29a      	uxth	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800567e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005680:	3b01      	subs	r3, #1
 8005682:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005684:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1a4      	bne.n	80055d4 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800568a:	e7ff      	b.n	800568c <UART_TxISR_8BIT_FIFOEN+0xd4>
 800568c:	bf00      	nop
 800568e:	3744      	adds	r7, #68	@ 0x44
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005698:	b480      	push	{r7}
 800569a:	b091      	sub	sp, #68	@ 0x44
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056a6:	2b21      	cmp	r3, #33	@ 0x21
 80056a8:	d165      	bne.n	8005776 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80056b0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80056b2:	e05c      	b.n	800576e <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d133      	bne.n	8005728 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	3308      	adds	r3, #8
 80056c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	e853 3f00 	ldrex	r3, [r3]
 80056ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80056d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	3308      	adds	r3, #8
 80056de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056e8:	e841 2300 	strex	r3, r2, [r1]
 80056ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80056ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1e5      	bne.n	80056c0 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	e853 3f00 	ldrex	r3, [r3]
 8005700:	60bb      	str	r3, [r7, #8]
   return(result);
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005708:	633b      	str	r3, [r7, #48]	@ 0x30
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	461a      	mov	r2, r3
 8005710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005712:	61bb      	str	r3, [r7, #24]
 8005714:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005716:	6979      	ldr	r1, [r7, #20]
 8005718:	69ba      	ldr	r2, [r7, #24]
 800571a:	e841 2300 	strex	r3, r2, [r1]
 800571e:	613b      	str	r3, [r7, #16]
   return(result);
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1e6      	bne.n	80056f4 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8005726:	e026      	b.n	8005776 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005732:	2b00      	cmp	r3, #0
 8005734:	d018      	beq.n	8005768 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800573a:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800573c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800573e:	881b      	ldrh	r3, [r3, #0]
 8005740:	461a      	mov	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800574a:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005750:	1c9a      	adds	r2, r3, #2
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800575c:	b29b      	uxth	r3, r3
 800575e:	3b01      	subs	r3, #1
 8005760:	b29a      	uxth	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005768:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800576a:	3b01      	subs	r3, #1
 800576c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800576e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005770:	2b00      	cmp	r3, #0
 8005772:	d19f      	bne.n	80056b4 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8005774:	e7ff      	b.n	8005776 <UART_TxISR_16BIT_FIFOEN+0xde>
 8005776:	bf00      	nop
 8005778:	3744      	adds	r7, #68	@ 0x44
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b088      	sub	sp, #32
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	e853 3f00 	ldrex	r3, [r3]
 8005796:	60bb      	str	r3, [r7, #8]
   return(result);
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800579e:	61fb      	str	r3, [r7, #28]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	461a      	mov	r2, r3
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	61bb      	str	r3, [r7, #24]
 80057aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ac:	6979      	ldr	r1, [r7, #20]
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	e841 2300 	strex	r3, r2, [r1]
 80057b4:	613b      	str	r3, [r7, #16]
   return(result);
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1e6      	bne.n	800578a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2220      	movs	r2, #32
 80057c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f7fe fdb6 	bl	800433c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057d0:	bf00      	nop
 80057d2:	3720      	adds	r7, #32
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b09c      	sub	sp, #112	@ 0x70
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80057e6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057f0:	2b22      	cmp	r3, #34	@ 0x22
 80057f2:	f040 80be 	bne.w	8005972 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005800:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005804:	b2d9      	uxtb	r1, r3
 8005806:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800580a:	b2da      	uxtb	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005810:	400a      	ands	r2, r1
 8005812:	b2d2      	uxtb	r2, r2
 8005814:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800581a:	1c5a      	adds	r2, r3, #1
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005826:	b29b      	uxth	r3, r3
 8005828:	3b01      	subs	r3, #1
 800582a:	b29a      	uxth	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005838:	b29b      	uxth	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	f040 80a1 	bne.w	8005982 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005846:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005848:	e853 3f00 	ldrex	r3, [r3]
 800584c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800584e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005850:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005854:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	461a      	mov	r2, r3
 800585c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800585e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005860:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005862:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005864:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005866:	e841 2300 	strex	r3, r2, [r1]
 800586a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800586c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1e6      	bne.n	8005840 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	3308      	adds	r3, #8
 8005878:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800587c:	e853 3f00 	ldrex	r3, [r3]
 8005880:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005884:	f023 0301 	bic.w	r3, r3, #1
 8005888:	667b      	str	r3, [r7, #100]	@ 0x64
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	3308      	adds	r3, #8
 8005890:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005892:	647a      	str	r2, [r7, #68]	@ 0x44
 8005894:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005896:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005898:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800589a:	e841 2300 	strex	r3, r2, [r1]
 800589e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80058a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1e5      	bne.n	8005872 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2220      	movs	r2, #32
 80058aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a33      	ldr	r2, [pc, #204]	@ (800598c <UART_RxISR_8BIT+0x1b4>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d01f      	beq.n	8005904 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d018      	beq.n	8005904 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058da:	e853 3f00 	ldrex	r3, [r3]
 80058de:	623b      	str	r3, [r7, #32]
   return(result);
 80058e0:	6a3b      	ldr	r3, [r7, #32]
 80058e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80058e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	461a      	mov	r2, r3
 80058ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80058f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80058f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058f8:	e841 2300 	strex	r3, r2, [r1]
 80058fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80058fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1e6      	bne.n	80058d2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005908:	2b01      	cmp	r3, #1
 800590a:	d12e      	bne.n	800596a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	e853 3f00 	ldrex	r3, [r3]
 800591e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f023 0310 	bic.w	r3, r3, #16
 8005926:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	461a      	mov	r2, r3
 800592e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005930:	61fb      	str	r3, [r7, #28]
 8005932:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005934:	69b9      	ldr	r1, [r7, #24]
 8005936:	69fa      	ldr	r2, [r7, #28]
 8005938:	e841 2300 	strex	r3, r2, [r1]
 800593c:	617b      	str	r3, [r7, #20]
   return(result);
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1e6      	bne.n	8005912 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	69db      	ldr	r3, [r3, #28]
 800594a:	f003 0310 	and.w	r3, r3, #16
 800594e:	2b10      	cmp	r3, #16
 8005950:	d103      	bne.n	800595a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2210      	movs	r2, #16
 8005958:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005960:	4619      	mov	r1, r3
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7fe fd08 	bl	8004378 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005968:	e00b      	b.n	8005982 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f7fb f9ee 	bl	8000d4c <HAL_UART_RxCpltCallback>
}
 8005970:	e007      	b.n	8005982 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	699a      	ldr	r2, [r3, #24]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f042 0208 	orr.w	r2, r2, #8
 8005980:	619a      	str	r2, [r3, #24]
}
 8005982:	bf00      	nop
 8005984:	3770      	adds	r7, #112	@ 0x70
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	40008000 	.word	0x40008000

08005990 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b09c      	sub	sp, #112	@ 0x70
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800599e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059a8:	2b22      	cmp	r3, #34	@ 0x22
 80059aa:	f040 80be 	bne.w	8005b2a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059bc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80059be:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80059c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80059c6:	4013      	ands	r3, r2
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80059cc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059d2:	1c9a      	adds	r2, r3, #2
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80059de:	b29b      	uxth	r3, r3
 80059e0:	3b01      	subs	r3, #1
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f040 80a1 	bne.w	8005b3a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a00:	e853 3f00 	ldrex	r3, [r3]
 8005a04:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005a06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a0c:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	461a      	mov	r2, r3
 8005a14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a16:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a18:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005a1c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005a1e:	e841 2300 	strex	r3, r2, [r1]
 8005a22:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005a24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1e6      	bne.n	80059f8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	3308      	adds	r3, #8
 8005a30:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a34:	e853 3f00 	ldrex	r3, [r3]
 8005a38:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a3c:	f023 0301 	bic.w	r3, r3, #1
 8005a40:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	3308      	adds	r3, #8
 8005a48:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005a4a:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a52:	e841 2300 	strex	r3, r2, [r1]
 8005a56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1e5      	bne.n	8005a2a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2220      	movs	r2, #32
 8005a62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a33      	ldr	r2, [pc, #204]	@ (8005b44 <UART_RxISR_16BIT+0x1b4>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d01f      	beq.n	8005abc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d018      	beq.n	8005abc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	e853 3f00 	ldrex	r3, [r3]
 8005a96:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005a9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005aaa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005aae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ab0:	e841 2300 	strex	r3, r2, [r1]
 8005ab4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1e6      	bne.n	8005a8a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d12e      	bne.n	8005b22 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	e853 3f00 	ldrex	r3, [r3]
 8005ad6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	f023 0310 	bic.w	r3, r3, #16
 8005ade:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ae8:	61bb      	str	r3, [r7, #24]
 8005aea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aec:	6979      	ldr	r1, [r7, #20]
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	e841 2300 	strex	r3, r2, [r1]
 8005af4:	613b      	str	r3, [r7, #16]
   return(result);
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1e6      	bne.n	8005aca <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	69db      	ldr	r3, [r3, #28]
 8005b02:	f003 0310 	and.w	r3, r3, #16
 8005b06:	2b10      	cmp	r3, #16
 8005b08:	d103      	bne.n	8005b12 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2210      	movs	r2, #16
 8005b10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005b18:	4619      	mov	r1, r3
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7fe fc2c 	bl	8004378 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b20:	e00b      	b.n	8005b3a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f7fb f912 	bl	8000d4c <HAL_UART_RxCpltCallback>
}
 8005b28:	e007      	b.n	8005b3a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	699a      	ldr	r2, [r3, #24]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f042 0208 	orr.w	r2, r2, #8
 8005b38:	619a      	str	r2, [r3, #24]
}
 8005b3a:	bf00      	nop
 8005b3c:	3770      	adds	r7, #112	@ 0x70
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	40008000 	.word	0x40008000

08005b48 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b0ac      	sub	sp, #176	@ 0xb0
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005b56:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	69db      	ldr	r3, [r3, #28]
 8005b60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b7e:	2b22      	cmp	r3, #34	@ 0x22
 8005b80:	f040 8183 	bne.w	8005e8a <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005b8a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005b8e:	e126      	b.n	8005dde <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b96:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005b9a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8005b9e:	b2d9      	uxtb	r1, r3
 8005ba0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005baa:	400a      	ands	r2, r1
 8005bac:	b2d2      	uxtb	r2, r2
 8005bae:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bb4:	1c5a      	adds	r2, r3, #1
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005bd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005bda:	f003 0307 	and.w	r3, r3, #7
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d053      	beq.n	8005c8a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005be2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d011      	beq.n	8005c12 <UART_RxISR_8BIT_FIFOEN+0xca>
 8005bee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00b      	beq.n	8005c12 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c08:	f043 0201 	orr.w	r2, r3, #1
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d011      	beq.n	8005c42 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005c1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00b      	beq.n	8005c42 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2202      	movs	r2, #2
 8005c30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c38:	f043 0204 	orr.w	r2, r3, #4
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c46:	f003 0304 	and.w	r3, r3, #4
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d011      	beq.n	8005c72 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005c4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00b      	beq.n	8005c72 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2204      	movs	r2, #4
 8005c60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c68:	f043 0202 	orr.w	r2, r3, #2
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d006      	beq.n	8005c8a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f7fe fb71 	bl	8004364 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f040 80a3 	bne.w	8005dde <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ca0:	e853 3f00 	ldrex	r3, [r3]
 8005ca4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8005ca6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ca8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005cba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005cbc:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cbe:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8005cc0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005cc2:	e841 2300 	strex	r3, r2, [r1]
 8005cc6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8005cc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1e4      	bne.n	8005c98 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	3308      	adds	r3, #8
 8005cd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005cd8:	e853 3f00 	ldrex	r3, [r3]
 8005cdc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8005cde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ce0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ce4:	f023 0301 	bic.w	r3, r3, #1
 8005ce8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3308      	adds	r3, #8
 8005cf2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005cf6:	66ba      	str	r2, [r7, #104]	@ 0x68
 8005cf8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfa:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8005cfc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005cfe:	e841 2300 	strex	r3, r2, [r1]
 8005d02:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8005d04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1e1      	bne.n	8005cce <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a60      	ldr	r2, [pc, #384]	@ (8005ea4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d021      	beq.n	8005d6c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d01a      	beq.n	8005d6c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d3e:	e853 3f00 	ldrex	r3, [r3]
 8005d42:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005d44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005d4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	461a      	mov	r2, r3
 8005d54:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005d58:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d5a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005d5e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005d60:	e841 2300 	strex	r3, r2, [r1]
 8005d64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005d66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d1e4      	bne.n	8005d36 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d130      	bne.n	8005dd6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d82:	e853 3f00 	ldrex	r3, [r3]
 8005d86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d8a:	f023 0310 	bic.w	r3, r3, #16
 8005d8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	461a      	mov	r2, r3
 8005d98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d9e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005da2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005da4:	e841 2300 	strex	r3, r2, [r1]
 8005da8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d1e4      	bne.n	8005d7a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	69db      	ldr	r3, [r3, #28]
 8005db6:	f003 0310 	and.w	r3, r3, #16
 8005dba:	2b10      	cmp	r3, #16
 8005dbc:	d103      	bne.n	8005dc6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2210      	movs	r2, #16
 8005dc4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005dcc:	4619      	mov	r1, r3
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f7fe fad2 	bl	8004378 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8005dd4:	e00e      	b.n	8005df4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7fa ffb8 	bl	8000d4c <HAL_UART_RxCpltCallback>
        break;
 8005ddc:	e00a      	b.n	8005df4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005dde:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d006      	beq.n	8005df4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8005de6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005dea:	f003 0320 	and.w	r3, r3, #32
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f47f aece 	bne.w	8005b90 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005dfa:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005dfe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d049      	beq.n	8005e9a <UART_RxISR_8BIT_FIFOEN+0x352>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005e0c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d242      	bcs.n	8005e9a <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	3308      	adds	r3, #8
 8005e1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	e853 3f00 	ldrex	r3, [r3]
 8005e22:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	3308      	adds	r3, #8
 8005e34:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005e38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e40:	e841 2300 	strex	r3, r2, [r1]
 8005e44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1e3      	bne.n	8005e14 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a16      	ldr	r2, [pc, #88]	@ (8005ea8 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8005e50:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	e853 3f00 	ldrex	r3, [r3]
 8005e5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	f043 0320 	orr.w	r3, r3, #32
 8005e66:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	461a      	mov	r2, r3
 8005e70:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005e74:	61bb      	str	r3, [r7, #24]
 8005e76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e78:	6979      	ldr	r1, [r7, #20]
 8005e7a:	69ba      	ldr	r2, [r7, #24]
 8005e7c:	e841 2300 	strex	r3, r2, [r1]
 8005e80:	613b      	str	r3, [r7, #16]
   return(result);
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1e4      	bne.n	8005e52 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e88:	e007      	b.n	8005e9a <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	699a      	ldr	r2, [r3, #24]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f042 0208 	orr.w	r2, r2, #8
 8005e98:	619a      	str	r2, [r3, #24]
}
 8005e9a:	bf00      	nop
 8005e9c:	37b0      	adds	r7, #176	@ 0xb0
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	40008000 	.word	0x40008000
 8005ea8:	080057d9 	.word	0x080057d9

08005eac <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b0ae      	sub	sp, #184	@ 0xb8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005eba:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	69db      	ldr	r3, [r3, #28]
 8005ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ee2:	2b22      	cmp	r3, #34	@ 0x22
 8005ee4:	f040 8187 	bne.w	80061f6 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005eee:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005ef2:	e12a      	b.n	800614a <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005efa:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8005f06:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8005f0a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8005f0e:	4013      	ands	r3, r2
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005f16:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f1c:	1c9a      	adds	r2, r3, #2
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	69db      	ldr	r3, [r3, #28]
 8005f3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005f3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005f42:	f003 0307 	and.w	r3, r3, #7
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d053      	beq.n	8005ff2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d011      	beq.n	8005f7a <UART_RxISR_16BIT_FIFOEN+0xce>
 8005f56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00b      	beq.n	8005f7a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2201      	movs	r2, #1
 8005f68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f70:	f043 0201 	orr.w	r2, r3, #1
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005f7e:	f003 0302 	and.w	r3, r3, #2
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d011      	beq.n	8005faa <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005f86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005f8a:	f003 0301 	and.w	r3, r3, #1
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00b      	beq.n	8005faa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2202      	movs	r2, #2
 8005f98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fa0:	f043 0204 	orr.w	r2, r3, #4
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005faa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005fae:	f003 0304 	and.w	r3, r3, #4
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d011      	beq.n	8005fda <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005fb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00b      	beq.n	8005fda <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2204      	movs	r2, #4
 8005fc8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fd0:	f043 0202 	orr.w	r2, r3, #2
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d006      	beq.n	8005ff2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f7fe f9bd 	bl	8004364 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f040 80a5 	bne.w	800614a <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006006:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006008:	e853 3f00 	ldrex	r3, [r3]
 800600c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800600e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006010:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006014:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	461a      	mov	r2, r3
 800601e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006022:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006026:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006028:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800602a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800602e:	e841 2300 	strex	r3, r2, [r1]
 8006032:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006034:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1e2      	bne.n	8006000 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	3308      	adds	r3, #8
 8006040:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006042:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006044:	e853 3f00 	ldrex	r3, [r3]
 8006048:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800604a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800604c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006050:	f023 0301 	bic.w	r3, r3, #1
 8006054:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	3308      	adds	r3, #8
 800605e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8006062:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006064:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006066:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006068:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800606a:	e841 2300 	strex	r3, r2, [r1]
 800606e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006070:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006072:	2b00      	cmp	r3, #0
 8006074:	d1e1      	bne.n	800603a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2220      	movs	r2, #32
 800607a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a60      	ldr	r2, [pc, #384]	@ (8006210 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d021      	beq.n	80060d8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d01a      	beq.n	80060d8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060aa:	e853 3f00 	ldrex	r3, [r3]
 80060ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80060b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80060b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	461a      	mov	r2, r3
 80060c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80060c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80060c6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80060ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80060cc:	e841 2300 	strex	r3, r2, [r1]
 80060d0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80060d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d1e4      	bne.n	80060a2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d130      	bne.n	8006142 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ee:	e853 3f00 	ldrex	r3, [r3]
 80060f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80060f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060f6:	f023 0310 	bic.w	r3, r3, #16
 80060fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	461a      	mov	r2, r3
 8006104:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006108:	647b      	str	r3, [r7, #68]	@ 0x44
 800610a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800610e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006110:	e841 2300 	strex	r3, r2, [r1]
 8006114:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1e4      	bne.n	80060e6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	f003 0310 	and.w	r3, r3, #16
 8006126:	2b10      	cmp	r3, #16
 8006128:	d103      	bne.n	8006132 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2210      	movs	r2, #16
 8006130:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006138:	4619      	mov	r1, r3
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7fe f91c 	bl	8004378 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8006140:	e00e      	b.n	8006160 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f7fa fe02 	bl	8000d4c <HAL_UART_RxCpltCallback>
        break;
 8006148:	e00a      	b.n	8006160 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800614a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800614e:	2b00      	cmp	r3, #0
 8006150:	d006      	beq.n	8006160 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8006152:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006156:	f003 0320 	and.w	r3, r3, #32
 800615a:	2b00      	cmp	r3, #0
 800615c:	f47f aeca 	bne.w	8005ef4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006166:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800616a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800616e:	2b00      	cmp	r3, #0
 8006170:	d049      	beq.n	8006206 <UART_RxISR_16BIT_FIFOEN+0x35a>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006178:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800617c:	429a      	cmp	r2, r3
 800617e:	d242      	bcs.n	8006206 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	3308      	adds	r3, #8
 8006186:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800618a:	e853 3f00 	ldrex	r3, [r3]
 800618e:	623b      	str	r3, [r7, #32]
   return(result);
 8006190:	6a3b      	ldr	r3, [r7, #32]
 8006192:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006196:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	3308      	adds	r3, #8
 80061a0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80061a4:	633a      	str	r2, [r7, #48]	@ 0x30
 80061a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061ac:	e841 2300 	strex	r3, r2, [r1]
 80061b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80061b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1e3      	bne.n	8006180 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a16      	ldr	r2, [pc, #88]	@ (8006214 <UART_RxISR_16BIT_FIFOEN+0x368>)
 80061bc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	e853 3f00 	ldrex	r3, [r3]
 80061ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f043 0320 	orr.w	r3, r3, #32
 80061d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	461a      	mov	r2, r3
 80061dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80061e0:	61fb      	str	r3, [r7, #28]
 80061e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e4:	69b9      	ldr	r1, [r7, #24]
 80061e6:	69fa      	ldr	r2, [r7, #28]
 80061e8:	e841 2300 	strex	r3, r2, [r1]
 80061ec:	617b      	str	r3, [r7, #20]
   return(result);
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1e4      	bne.n	80061be <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80061f4:	e007      	b.n	8006206 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	699a      	ldr	r2, [r3, #24]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f042 0208 	orr.w	r2, r2, #8
 8006204:	619a      	str	r2, [r3, #24]
}
 8006206:	bf00      	nop
 8006208:	37b8      	adds	r7, #184	@ 0xb8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	40008000 	.word	0x40008000
 8006214:	08005991 	.word	0x08005991

08006218 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006262:	2b01      	cmp	r3, #1
 8006264:	d101      	bne.n	800626a <HAL_UARTEx_DisableFifoMode+0x16>
 8006266:	2302      	movs	r3, #2
 8006268:	e027      	b.n	80062ba <HAL_UARTEx_DisableFifoMode+0x66>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2224      	movs	r2, #36	@ 0x24
 8006276:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f022 0201 	bic.w	r2, r2, #1
 8006290:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006298:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2220      	movs	r2, #32
 80062ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3714      	adds	r7, #20
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b084      	sub	sp, #16
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
 80062ce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d101      	bne.n	80062de <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80062da:	2302      	movs	r3, #2
 80062dc:	e02d      	b.n	800633a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2224      	movs	r2, #36	@ 0x24
 80062ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f022 0201 	bic.w	r2, r2, #1
 8006304:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 f850 	bl	80063c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2220      	movs	r2, #32
 800632c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006342:	b580      	push	{r7, lr}
 8006344:	b084      	sub	sp, #16
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
 800634a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006352:	2b01      	cmp	r3, #1
 8006354:	d101      	bne.n	800635a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006356:	2302      	movs	r3, #2
 8006358:	e02d      	b.n	80063b6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2224      	movs	r2, #36	@ 0x24
 8006366:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f022 0201 	bic.w	r2, r2, #1
 8006380:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	683a      	ldr	r2, [r7, #0]
 8006392:	430a      	orrs	r2, r1
 8006394:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f812 	bl	80063c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2220      	movs	r2, #32
 80063a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
	...

080063c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d108      	bne.n	80063e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80063e0:	e031      	b.n	8006446 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80063e2:	2308      	movs	r3, #8
 80063e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80063e6:	2308      	movs	r3, #8
 80063e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	0e5b      	lsrs	r3, r3, #25
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	f003 0307 	and.w	r3, r3, #7
 80063f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	0f5b      	lsrs	r3, r3, #29
 8006402:	b2db      	uxtb	r3, r3
 8006404:	f003 0307 	and.w	r3, r3, #7
 8006408:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800640a:	7bbb      	ldrb	r3, [r7, #14]
 800640c:	7b3a      	ldrb	r2, [r7, #12]
 800640e:	4911      	ldr	r1, [pc, #68]	@ (8006454 <UARTEx_SetNbDataToProcess+0x94>)
 8006410:	5c8a      	ldrb	r2, [r1, r2]
 8006412:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006416:	7b3a      	ldrb	r2, [r7, #12]
 8006418:	490f      	ldr	r1, [pc, #60]	@ (8006458 <UARTEx_SetNbDataToProcess+0x98>)
 800641a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800641c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006420:	b29a      	uxth	r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006428:	7bfb      	ldrb	r3, [r7, #15]
 800642a:	7b7a      	ldrb	r2, [r7, #13]
 800642c:	4909      	ldr	r1, [pc, #36]	@ (8006454 <UARTEx_SetNbDataToProcess+0x94>)
 800642e:	5c8a      	ldrb	r2, [r1, r2]
 8006430:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006434:	7b7a      	ldrb	r2, [r7, #13]
 8006436:	4908      	ldr	r1, [pc, #32]	@ (8006458 <UARTEx_SetNbDataToProcess+0x98>)
 8006438:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800643a:	fb93 f3f2 	sdiv	r3, r3, r2
 800643e:	b29a      	uxth	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006446:	bf00      	nop
 8006448:	3714      	adds	r7, #20
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	08008d28 	.word	0x08008d28
 8006458:	08008d30 	.word	0x08008d30

0800645c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	4603      	mov	r3, r0
 8006464:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006466:	2300      	movs	r3, #0
 8006468:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800646a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800646e:	2b84      	cmp	r3, #132	@ 0x84
 8006470:	d005      	beq.n	800647e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006472:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	4413      	add	r3, r2
 800647a:	3303      	adds	r3, #3
 800647c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800647e:	68fb      	ldr	r3, [r7, #12]
}
 8006480:	4618      	mov	r0, r3
 8006482:	3714      	adds	r7, #20
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006490:	f000 fa6e 	bl	8006970 <vTaskStartScheduler>
  
  return osOK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	bd80      	pop	{r7, pc}

0800649a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800649a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800649c:	b087      	sub	sp, #28
 800649e:	af02      	add	r7, sp, #8
 80064a0:	6078      	str	r0, [r7, #4]
 80064a2:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685c      	ldr	r4, [r3, #4]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80064b0:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7ff ffcf 	bl	800645c <makeFreeRtosPriority>
 80064be:	4602      	mov	r2, r0
 80064c0:	f107 030c 	add.w	r3, r7, #12
 80064c4:	9301      	str	r3, [sp, #4]
 80064c6:	9200      	str	r2, [sp, #0]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	4632      	mov	r2, r6
 80064cc:	4629      	mov	r1, r5
 80064ce:	4620      	mov	r0, r4
 80064d0:	f000 f8d2 	bl	8006678 <xTaskCreate>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d001      	beq.n	80064de <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80064da:	2300      	movs	r3, #0
 80064dc:	e000      	b.n	80064e0 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80064de:	68fb      	ldr	r3, [r7, #12]
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3714      	adds	r7, #20
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080064e8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d001      	beq.n	80064fe <osDelay+0x16>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	e000      	b.n	8006500 <osDelay+0x18>
 80064fe:	2301      	movs	r3, #1
 8006500:	4618      	mov	r0, r3
 8006502:	f000 f9ff 	bl	8006904 <vTaskDelay>
  
  return osOK;
 8006506:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006508:	4618      	mov	r0, r3
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f103 0208 	add.w	r2, r3, #8
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f04f 32ff 	mov.w	r2, #4294967295
 8006528:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f103 0208 	add.w	r2, r3, #8
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f103 0208 	add.w	r2, r3, #8
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800655e:	bf00      	nop
 8006560:	370c      	adds	r7, #12
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr

0800656a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800656a:	b480      	push	{r7}
 800656c:	b085      	sub	sp, #20
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
 8006572:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	689a      	ldr	r2, [r3, #8]
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	683a      	ldr	r2, [r7, #0]
 800658e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	683a      	ldr	r2, [r7, #0]
 8006594:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	1c5a      	adds	r2, r3, #1
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	601a      	str	r2, [r3, #0]
}
 80065a6:	bf00      	nop
 80065a8:	3714      	adds	r7, #20
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065b2:	b480      	push	{r7}
 80065b4:	b085      	sub	sp, #20
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
 80065ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c8:	d103      	bne.n	80065d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	60fb      	str	r3, [r7, #12]
 80065d0:	e00c      	b.n	80065ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	3308      	adds	r3, #8
 80065d6:	60fb      	str	r3, [r7, #12]
 80065d8:	e002      	b.n	80065e0 <vListInsert+0x2e>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	60fb      	str	r3, [r7, #12]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68ba      	ldr	r2, [r7, #8]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d2f6      	bcs.n	80065da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	685a      	ldr	r2, [r3, #4]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	683a      	ldr	r2, [r7, #0]
 80065fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	683a      	ldr	r2, [r7, #0]
 8006606:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	1c5a      	adds	r2, r3, #1
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	601a      	str	r2, [r3, #0]
}
 8006618:	bf00      	nop
 800661a:	3714      	adds	r7, #20
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	6892      	ldr	r2, [r2, #8]
 800663a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	6852      	ldr	r2, [r2, #4]
 8006644:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	429a      	cmp	r2, r3
 800664e:	d103      	bne.n	8006658 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	689a      	ldr	r2, [r3, #8]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	1e5a      	subs	r2, r3, #1
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
}
 800666c:	4618      	mov	r0, r3
 800666e:	3714      	adds	r7, #20
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006678:	b580      	push	{r7, lr}
 800667a:	b08c      	sub	sp, #48	@ 0x30
 800667c:	af04      	add	r7, sp, #16
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	603b      	str	r3, [r7, #0]
 8006684:	4613      	mov	r3, r2
 8006686:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006688:	88fb      	ldrh	r3, [r7, #6]
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4618      	mov	r0, r3
 800668e:	f000 ff23 	bl	80074d8 <pvPortMalloc>
 8006692:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00e      	beq.n	80066b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800669a:	2064      	movs	r0, #100	@ 0x64
 800669c:	f000 ff1c 	bl	80074d8 <pvPortMalloc>
 80066a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d003      	beq.n	80066b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80066ae:	e005      	b.n	80066bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80066b0:	6978      	ldr	r0, [r7, #20]
 80066b2:	f000 ffdf 	bl	8007674 <vPortFree>
 80066b6:	e001      	b.n	80066bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80066b8:	2300      	movs	r3, #0
 80066ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d013      	beq.n	80066ea <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80066c2:	88fa      	ldrh	r2, [r7, #6]
 80066c4:	2300      	movs	r3, #0
 80066c6:	9303      	str	r3, [sp, #12]
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	9302      	str	r3, [sp, #8]
 80066cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ce:	9301      	str	r3, [sp, #4]
 80066d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d2:	9300      	str	r3, [sp, #0]
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	68b9      	ldr	r1, [r7, #8]
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f000 f80e 	bl	80066fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066de:	69f8      	ldr	r0, [r7, #28]
 80066e0:	f000 f8a2 	bl	8006828 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80066e4:	2301      	movs	r3, #1
 80066e6:	61bb      	str	r3, [r7, #24]
 80066e8:	e002      	b.n	80066f0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80066ea:	f04f 33ff 	mov.w	r3, #4294967295
 80066ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80066f0:	69bb      	ldr	r3, [r7, #24]
	}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3720      	adds	r7, #32
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b088      	sub	sp, #32
 80066fe:	af00      	add	r7, sp, #0
 8006700:	60f8      	str	r0, [r7, #12]
 8006702:	60b9      	str	r1, [r7, #8]
 8006704:	607a      	str	r2, [r7, #4]
 8006706:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800670a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	461a      	mov	r2, r3
 8006712:	21a5      	movs	r1, #165	@ 0xa5
 8006714:	f001 fae0 	bl	8007cd8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800671a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006722:	3b01      	subs	r3, #1
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	f023 0307 	bic.w	r3, r3, #7
 8006730:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	f003 0307 	and.w	r3, r3, #7
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00b      	beq.n	8006754 <prvInitialiseNewTask+0x5a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800673c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006740:	f383 8811 	msr	BASEPRI, r3
 8006744:	f3bf 8f6f 	isb	sy
 8006748:	f3bf 8f4f 	dsb	sy
 800674c:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800674e:	bf00      	nop
 8006750:	bf00      	nop
 8006752:	e7fd      	b.n	8006750 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8006754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006756:	69ba      	ldr	r2, [r7, #24]
 8006758:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d01f      	beq.n	80067a0 <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006760:	2300      	movs	r3, #0
 8006762:	61fb      	str	r3, [r7, #28]
 8006764:	e012      	b.n	800678c <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	4413      	add	r3, r2
 800676c:	7819      	ldrb	r1, [r3, #0]
 800676e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	4413      	add	r3, r2
 8006774:	3334      	adds	r3, #52	@ 0x34
 8006776:	460a      	mov	r2, r1
 8006778:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800677a:	68ba      	ldr	r2, [r7, #8]
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	4413      	add	r3, r2
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d006      	beq.n	8006794 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	3301      	adds	r3, #1
 800678a:	61fb      	str	r3, [r7, #28]
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	2b0f      	cmp	r3, #15
 8006790:	d9e9      	bls.n	8006766 <prvInitialiseNewTask+0x6c>
 8006792:	e000      	b.n	8006796 <prvInitialiseNewTask+0x9c>
			{
				break;
 8006794:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006798:	2200      	movs	r2, #0
 800679a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800679e:	e003      	b.n	80067a8 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80067a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80067a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067aa:	2b06      	cmp	r3, #6
 80067ac:	d901      	bls.n	80067b2 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80067ae:	2306      	movs	r3, #6
 80067b0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80067b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067b6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80067b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067bc:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 80067be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c0:	2200      	movs	r2, #0
 80067c2:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80067c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c6:	3304      	adds	r3, #4
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7ff fec1 	bl	8006550 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80067ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d0:	3318      	adds	r3, #24
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7ff febc 	bl	8006550 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80067d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067dc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e0:	f1c3 0207 	rsb	r2, r3, #7
 80067e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80067e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067ec:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80067ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f0:	2200      	movs	r2, #0
 80067f2:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80067f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f6:	2200      	movs	r2, #0
 80067f8:	65da      	str	r2, [r3, #92]	@ 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80067fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	68f9      	ldr	r1, [r7, #12]
 8006806:	69b8      	ldr	r0, [r7, #24]
 8006808:	f000 fc52 	bl	80070b0 <pxPortInitialiseStack>
 800680c:	4602      	mov	r2, r0
 800680e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006810:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006814:	2b00      	cmp	r3, #0
 8006816:	d002      	beq.n	800681e <prvInitialiseNewTask+0x124>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800681a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800681c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800681e:	bf00      	nop
 8006820:	3720      	adds	r7, #32
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
	...

08006828 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006830:	f000 fd72 	bl	8007318 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006834:	4b2c      	ldr	r3, [pc, #176]	@ (80068e8 <prvAddNewTaskToReadyList+0xc0>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	3301      	adds	r3, #1
 800683a:	4a2b      	ldr	r2, [pc, #172]	@ (80068e8 <prvAddNewTaskToReadyList+0xc0>)
 800683c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800683e:	4b2b      	ldr	r3, [pc, #172]	@ (80068ec <prvAddNewTaskToReadyList+0xc4>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d109      	bne.n	800685a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006846:	4a29      	ldr	r2, [pc, #164]	@ (80068ec <prvAddNewTaskToReadyList+0xc4>)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800684c:	4b26      	ldr	r3, [pc, #152]	@ (80068e8 <prvAddNewTaskToReadyList+0xc0>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d110      	bne.n	8006876 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006854:	f000 fb18 	bl	8006e88 <prvInitialiseTaskLists>
 8006858:	e00d      	b.n	8006876 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800685a:	4b25      	ldr	r3, [pc, #148]	@ (80068f0 <prvAddNewTaskToReadyList+0xc8>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d109      	bne.n	8006876 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006862:	4b22      	ldr	r3, [pc, #136]	@ (80068ec <prvAddNewTaskToReadyList+0xc4>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800686c:	429a      	cmp	r2, r3
 800686e:	d802      	bhi.n	8006876 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006870:	4a1e      	ldr	r2, [pc, #120]	@ (80068ec <prvAddNewTaskToReadyList+0xc4>)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006876:	4b1f      	ldr	r3, [pc, #124]	@ (80068f4 <prvAddNewTaskToReadyList+0xcc>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	3301      	adds	r3, #1
 800687c:	4a1d      	ldr	r2, [pc, #116]	@ (80068f4 <prvAddNewTaskToReadyList+0xcc>)
 800687e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006880:	4b1c      	ldr	r3, [pc, #112]	@ (80068f4 <prvAddNewTaskToReadyList+0xcc>)
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800688c:	2201      	movs	r2, #1
 800688e:	409a      	lsls	r2, r3
 8006890:	4b19      	ldr	r3, [pc, #100]	@ (80068f8 <prvAddNewTaskToReadyList+0xd0>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4313      	orrs	r3, r2
 8006896:	4a18      	ldr	r2, [pc, #96]	@ (80068f8 <prvAddNewTaskToReadyList+0xd0>)
 8006898:	6013      	str	r3, [r2, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800689e:	4613      	mov	r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4413      	add	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4a15      	ldr	r2, [pc, #84]	@ (80068fc <prvAddNewTaskToReadyList+0xd4>)
 80068a8:	441a      	add	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	3304      	adds	r3, #4
 80068ae:	4619      	mov	r1, r3
 80068b0:	4610      	mov	r0, r2
 80068b2:	f7ff fe5a 	bl	800656a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80068b6:	f000 fd61 	bl	800737c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80068ba:	4b0d      	ldr	r3, [pc, #52]	@ (80068f0 <prvAddNewTaskToReadyList+0xc8>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00e      	beq.n	80068e0 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80068c2:	4b0a      	ldr	r3, [pc, #40]	@ (80068ec <prvAddNewTaskToReadyList+0xc4>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d207      	bcs.n	80068e0 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80068d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006900 <prvAddNewTaskToReadyList+0xd8>)
 80068d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068d6:	601a      	str	r2, [r3, #0]
 80068d8:	f3bf 8f4f 	dsb	sy
 80068dc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068e0:	bf00      	nop
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	2000110c 	.word	0x2000110c
 80068ec:	2000100c 	.word	0x2000100c
 80068f0:	20001118 	.word	0x20001118
 80068f4:	20001128 	.word	0x20001128
 80068f8:	20001114 	.word	0x20001114
 80068fc:	20001010 	.word	0x20001010
 8006900:	e000ed04 	.word	0xe000ed04

08006904 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800690c:	2300      	movs	r3, #0
 800690e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d018      	beq.n	8006948 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006916:	4b14      	ldr	r3, [pc, #80]	@ (8006968 <vTaskDelay+0x64>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00b      	beq.n	8006936 <vTaskDelay+0x32>
	__asm volatile
 800691e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006922:	f383 8811 	msr	BASEPRI, r3
 8006926:	f3bf 8f6f 	isb	sy
 800692a:	f3bf 8f4f 	dsb	sy
 800692e:	60bb      	str	r3, [r7, #8]
}
 8006930:	bf00      	nop
 8006932:	bf00      	nop
 8006934:	e7fd      	b.n	8006932 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006936:	f000 f865 	bl	8006a04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800693a:	2100      	movs	r1, #0
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 fb51 	bl	8006fe4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006942:	f000 f86d 	bl	8006a20 <xTaskResumeAll>
 8006946:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d107      	bne.n	800695e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800694e:	4b07      	ldr	r3, [pc, #28]	@ (800696c <vTaskDelay+0x68>)
 8006950:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006954:	601a      	str	r2, [r3, #0]
 8006956:	f3bf 8f4f 	dsb	sy
 800695a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800695e:	bf00      	nop
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	20001134 	.word	0x20001134
 800696c:	e000ed04 	.word	0xe000ed04

08006970 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8006976:	4b1d      	ldr	r3, [pc, #116]	@ (80069ec <vTaskStartScheduler+0x7c>)
 8006978:	9301      	str	r3, [sp, #4]
 800697a:	2300      	movs	r3, #0
 800697c:	9300      	str	r3, [sp, #0]
 800697e:	2300      	movs	r3, #0
 8006980:	2280      	movs	r2, #128	@ 0x80
 8006982:	491b      	ldr	r1, [pc, #108]	@ (80069f0 <vTaskStartScheduler+0x80>)
 8006984:	481b      	ldr	r0, [pc, #108]	@ (80069f4 <vTaskStartScheduler+0x84>)
 8006986:	f7ff fe77 	bl	8006678 <xTaskCreate>
 800698a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d118      	bne.n	80069c4 <vTaskStartScheduler+0x54>
	__asm volatile
 8006992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006996:	f383 8811 	msr	BASEPRI, r3
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	60bb      	str	r3, [r7, #8]
}
 80069a4:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80069a6:	4b14      	ldr	r3, [pc, #80]	@ (80069f8 <vTaskStartScheduler+0x88>)
 80069a8:	f04f 32ff 	mov.w	r2, #4294967295
 80069ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80069ae:	4b13      	ldr	r3, [pc, #76]	@ (80069fc <vTaskStartScheduler+0x8c>)
 80069b0:	2201      	movs	r2, #1
 80069b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80069b4:	4b12      	ldr	r3, [pc, #72]	@ (8006a00 <vTaskStartScheduler+0x90>)
 80069b6:	2200      	movs	r2, #0
 80069b8:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80069ba:	f7f9 fdf9 	bl	80005b0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80069be:	f000 fc07 	bl	80071d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80069c2:	e00f      	b.n	80069e4 <vTaskStartScheduler+0x74>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ca:	d10b      	bne.n	80069e4 <vTaskStartScheduler+0x74>
	__asm volatile
 80069cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d0:	f383 8811 	msr	BASEPRI, r3
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	f3bf 8f4f 	dsb	sy
 80069dc:	607b      	str	r3, [r7, #4]
}
 80069de:	bf00      	nop
 80069e0:	bf00      	nop
 80069e2:	e7fd      	b.n	80069e0 <vTaskStartScheduler+0x70>
}
 80069e4:	bf00      	nop
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	20001130 	.word	0x20001130
 80069f0:	08008cc8 	.word	0x08008cc8
 80069f4:	08006e59 	.word	0x08006e59
 80069f8:	2000112c 	.word	0x2000112c
 80069fc:	20001118 	.word	0x20001118
 8006a00:	20001110 	.word	0x20001110

08006a04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a04:	b480      	push	{r7}
 8006a06:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006a08:	4b04      	ldr	r3, [pc, #16]	@ (8006a1c <vTaskSuspendAll+0x18>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	4a03      	ldr	r2, [pc, #12]	@ (8006a1c <vTaskSuspendAll+0x18>)
 8006a10:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006a12:	bf00      	nop
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr
 8006a1c:	20001134 	.word	0x20001134

08006a20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006a26:	2300      	movs	r3, #0
 8006a28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006a2e:	4b42      	ldr	r3, [pc, #264]	@ (8006b38 <xTaskResumeAll+0x118>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10b      	bne.n	8006a4e <xTaskResumeAll+0x2e>
	__asm volatile
 8006a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a3a:	f383 8811 	msr	BASEPRI, r3
 8006a3e:	f3bf 8f6f 	isb	sy
 8006a42:	f3bf 8f4f 	dsb	sy
 8006a46:	603b      	str	r3, [r7, #0]
}
 8006a48:	bf00      	nop
 8006a4a:	bf00      	nop
 8006a4c:	e7fd      	b.n	8006a4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006a4e:	f000 fc63 	bl	8007318 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006a52:	4b39      	ldr	r3, [pc, #228]	@ (8006b38 <xTaskResumeAll+0x118>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3b01      	subs	r3, #1
 8006a58:	4a37      	ldr	r2, [pc, #220]	@ (8006b38 <xTaskResumeAll+0x118>)
 8006a5a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a5c:	4b36      	ldr	r3, [pc, #216]	@ (8006b38 <xTaskResumeAll+0x118>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d161      	bne.n	8006b28 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006a64:	4b35      	ldr	r3, [pc, #212]	@ (8006b3c <xTaskResumeAll+0x11c>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d05d      	beq.n	8006b28 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a6c:	e02e      	b.n	8006acc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a6e:	4b34      	ldr	r3, [pc, #208]	@ (8006b40 <xTaskResumeAll+0x120>)
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	3318      	adds	r3, #24
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7ff fdd2 	bl	8006624 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	3304      	adds	r3, #4
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7ff fdcd 	bl	8006624 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a8e:	2201      	movs	r2, #1
 8006a90:	409a      	lsls	r2, r3
 8006a92:	4b2c      	ldr	r3, [pc, #176]	@ (8006b44 <xTaskResumeAll+0x124>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	4a2a      	ldr	r2, [pc, #168]	@ (8006b44 <xTaskResumeAll+0x124>)
 8006a9a:	6013      	str	r3, [r2, #0]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	4413      	add	r3, r2
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4a27      	ldr	r2, [pc, #156]	@ (8006b48 <xTaskResumeAll+0x128>)
 8006aaa:	441a      	add	r2, r3
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	3304      	adds	r3, #4
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	4610      	mov	r0, r2
 8006ab4:	f7ff fd59 	bl	800656a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006abc:	4b23      	ldr	r3, [pc, #140]	@ (8006b4c <xTaskResumeAll+0x12c>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d302      	bcc.n	8006acc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006ac6:	4b22      	ldr	r3, [pc, #136]	@ (8006b50 <xTaskResumeAll+0x130>)
 8006ac8:	2201      	movs	r2, #1
 8006aca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006acc:	4b1c      	ldr	r3, [pc, #112]	@ (8006b40 <xTaskResumeAll+0x120>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1cc      	bne.n	8006a6e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d001      	beq.n	8006ade <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ada:	f000 fa53 	bl	8006f84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006ade:	4b1d      	ldr	r3, [pc, #116]	@ (8006b54 <xTaskResumeAll+0x134>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d010      	beq.n	8006b0c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006aea:	f000 f85d 	bl	8006ba8 <xTaskIncrementTick>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d002      	beq.n	8006afa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006af4:	4b16      	ldr	r3, [pc, #88]	@ (8006b50 <xTaskResumeAll+0x130>)
 8006af6:	2201      	movs	r2, #1
 8006af8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	3b01      	subs	r3, #1
 8006afe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1f1      	bne.n	8006aea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006b06:	4b13      	ldr	r3, [pc, #76]	@ (8006b54 <xTaskResumeAll+0x134>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006b0c:	4b10      	ldr	r3, [pc, #64]	@ (8006b50 <xTaskResumeAll+0x130>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d009      	beq.n	8006b28 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006b14:	2301      	movs	r3, #1
 8006b16:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006b18:	4b0f      	ldr	r3, [pc, #60]	@ (8006b58 <xTaskResumeAll+0x138>)
 8006b1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b1e:	601a      	str	r2, [r3, #0]
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b28:	f000 fc28 	bl	800737c <vPortExitCritical>

	return xAlreadyYielded;
 8006b2c:	68bb      	ldr	r3, [r7, #8]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	20001134 	.word	0x20001134
 8006b3c:	2000110c 	.word	0x2000110c
 8006b40:	200010cc 	.word	0x200010cc
 8006b44:	20001114 	.word	0x20001114
 8006b48:	20001010 	.word	0x20001010
 8006b4c:	2000100c 	.word	0x2000100c
 8006b50:	20001120 	.word	0x20001120
 8006b54:	2000111c 	.word	0x2000111c
 8006b58:	e000ed04 	.word	0xe000ed04

08006b5c <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d102      	bne.n	8006b70 <pcTaskGetName+0x14>
 8006b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8006ba4 <pcTaskGetName+0x48>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	e000      	b.n	8006b72 <pcTaskGetName+0x16>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10b      	bne.n	8006b92 <pcTaskGetName+0x36>
	__asm volatile
 8006b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b7e:	f383 8811 	msr	BASEPRI, r3
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	60bb      	str	r3, [r7, #8]
}
 8006b8c:	bf00      	nop
 8006b8e:	bf00      	nop
 8006b90:	e7fd      	b.n	8006b8e <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	3334      	adds	r3, #52	@ 0x34
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	2000100c 	.word	0x2000100c

08006ba8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b086      	sub	sp, #24
 8006bac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bb2:	4b4f      	ldr	r3, [pc, #316]	@ (8006cf0 <xTaskIncrementTick+0x148>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	f040 808f 	bne.w	8006cda <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006bbc:	4b4d      	ldr	r3, [pc, #308]	@ (8006cf4 <xTaskIncrementTick+0x14c>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006bc4:	4a4b      	ldr	r2, [pc, #300]	@ (8006cf4 <xTaskIncrementTick+0x14c>)
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d121      	bne.n	8006c14 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006bd0:	4b49      	ldr	r3, [pc, #292]	@ (8006cf8 <xTaskIncrementTick+0x150>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00b      	beq.n	8006bf2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bde:	f383 8811 	msr	BASEPRI, r3
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	f3bf 8f4f 	dsb	sy
 8006bea:	603b      	str	r3, [r7, #0]
}
 8006bec:	bf00      	nop
 8006bee:	bf00      	nop
 8006bf0:	e7fd      	b.n	8006bee <xTaskIncrementTick+0x46>
 8006bf2:	4b41      	ldr	r3, [pc, #260]	@ (8006cf8 <xTaskIncrementTick+0x150>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	60fb      	str	r3, [r7, #12]
 8006bf8:	4b40      	ldr	r3, [pc, #256]	@ (8006cfc <xTaskIncrementTick+0x154>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a3e      	ldr	r2, [pc, #248]	@ (8006cf8 <xTaskIncrementTick+0x150>)
 8006bfe:	6013      	str	r3, [r2, #0]
 8006c00:	4a3e      	ldr	r2, [pc, #248]	@ (8006cfc <xTaskIncrementTick+0x154>)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6013      	str	r3, [r2, #0]
 8006c06:	4b3e      	ldr	r3, [pc, #248]	@ (8006d00 <xTaskIncrementTick+0x158>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	4a3c      	ldr	r2, [pc, #240]	@ (8006d00 <xTaskIncrementTick+0x158>)
 8006c0e:	6013      	str	r3, [r2, #0]
 8006c10:	f000 f9b8 	bl	8006f84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006c14:	4b3b      	ldr	r3, [pc, #236]	@ (8006d04 <xTaskIncrementTick+0x15c>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d348      	bcc.n	8006cb0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c1e:	4b36      	ldr	r3, [pc, #216]	@ (8006cf8 <xTaskIncrementTick+0x150>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d104      	bne.n	8006c32 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c28:	4b36      	ldr	r3, [pc, #216]	@ (8006d04 <xTaskIncrementTick+0x15c>)
 8006c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c2e:	601a      	str	r2, [r3, #0]
					break;
 8006c30:	e03e      	b.n	8006cb0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c32:	4b31      	ldr	r3, [pc, #196]	@ (8006cf8 <xTaskIncrementTick+0x150>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d203      	bcs.n	8006c52 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006c4a:	4a2e      	ldr	r2, [pc, #184]	@ (8006d04 <xTaskIncrementTick+0x15c>)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006c50:	e02e      	b.n	8006cb0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	3304      	adds	r3, #4
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7ff fce4 	bl	8006624 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d004      	beq.n	8006c6e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	3318      	adds	r3, #24
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f7ff fcdb 	bl	8006624 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c72:	2201      	movs	r2, #1
 8006c74:	409a      	lsls	r2, r3
 8006c76:	4b24      	ldr	r3, [pc, #144]	@ (8006d08 <xTaskIncrementTick+0x160>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	4a22      	ldr	r2, [pc, #136]	@ (8006d08 <xTaskIncrementTick+0x160>)
 8006c7e:	6013      	str	r3, [r2, #0]
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c84:	4613      	mov	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4413      	add	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4a1f      	ldr	r2, [pc, #124]	@ (8006d0c <xTaskIncrementTick+0x164>)
 8006c8e:	441a      	add	r2, r3
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	3304      	adds	r3, #4
 8006c94:	4619      	mov	r1, r3
 8006c96:	4610      	mov	r0, r2
 8006c98:	f7ff fc67 	bl	800656a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8006d10 <xTaskIncrementTick+0x168>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d3b9      	bcc.n	8006c1e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006caa:	2301      	movs	r3, #1
 8006cac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cae:	e7b6      	b.n	8006c1e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006cb0:	4b17      	ldr	r3, [pc, #92]	@ (8006d10 <xTaskIncrementTick+0x168>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cb6:	4915      	ldr	r1, [pc, #84]	@ (8006d0c <xTaskIncrementTick+0x164>)
 8006cb8:	4613      	mov	r3, r2
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4413      	add	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	440b      	add	r3, r1
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d901      	bls.n	8006ccc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006ccc:	4b11      	ldr	r3, [pc, #68]	@ (8006d14 <xTaskIncrementTick+0x16c>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d007      	beq.n	8006ce4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	617b      	str	r3, [r7, #20]
 8006cd8:	e004      	b.n	8006ce4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006cda:	4b0f      	ldr	r3, [pc, #60]	@ (8006d18 <xTaskIncrementTick+0x170>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8006d18 <xTaskIncrementTick+0x170>)
 8006ce2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006ce4:	697b      	ldr	r3, [r7, #20]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3718      	adds	r7, #24
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	20001134 	.word	0x20001134
 8006cf4:	20001110 	.word	0x20001110
 8006cf8:	200010c4 	.word	0x200010c4
 8006cfc:	200010c8 	.word	0x200010c8
 8006d00:	20001124 	.word	0x20001124
 8006d04:	2000112c 	.word	0x2000112c
 8006d08:	20001114 	.word	0x20001114
 8006d0c:	20001010 	.word	0x20001010
 8006d10:	2000100c 	.word	0x2000100c
 8006d14:	20001120 	.word	0x20001120
 8006d18:	2000111c 	.word	0x2000111c

08006d1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b088      	sub	sp, #32
 8006d20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006d22:	4b46      	ldr	r3, [pc, #280]	@ (8006e3c <vTaskSwitchContext+0x120>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d003      	beq.n	8006d32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006d2a:	4b45      	ldr	r3, [pc, #276]	@ (8006e40 <vTaskSwitchContext+0x124>)
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006d30:	e080      	b.n	8006e34 <vTaskSwitchContext+0x118>
		xYieldPending = pdFALSE;
 8006d32:	4b43      	ldr	r3, [pc, #268]	@ (8006e40 <vTaskSwitchContext+0x124>)
 8006d34:	2200      	movs	r2, #0
 8006d36:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8006d38:	f7f9 fc41 	bl	80005be <getRunTimeCounterValue>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	4a41      	ldr	r2, [pc, #260]	@ (8006e44 <vTaskSwitchContext+0x128>)
 8006d40:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8006d42:	4b40      	ldr	r3, [pc, #256]	@ (8006e44 <vTaskSwitchContext+0x128>)
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	4b40      	ldr	r3, [pc, #256]	@ (8006e48 <vTaskSwitchContext+0x12c>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d909      	bls.n	8006d62 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8006d4e:	4b3f      	ldr	r3, [pc, #252]	@ (8006e4c <vTaskSwitchContext+0x130>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8006d54:	4a3b      	ldr	r2, [pc, #236]	@ (8006e44 <vTaskSwitchContext+0x128>)
 8006d56:	6810      	ldr	r0, [r2, #0]
 8006d58:	4a3b      	ldr	r2, [pc, #236]	@ (8006e48 <vTaskSwitchContext+0x12c>)
 8006d5a:	6812      	ldr	r2, [r2, #0]
 8006d5c:	1a82      	subs	r2, r0, r2
 8006d5e:	440a      	add	r2, r1
 8006d60:	659a      	str	r2, [r3, #88]	@ 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8006d62:	4b38      	ldr	r3, [pc, #224]	@ (8006e44 <vTaskSwitchContext+0x128>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a38      	ldr	r2, [pc, #224]	@ (8006e48 <vTaskSwitchContext+0x12c>)
 8006d68:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8006d6a:	4b38      	ldr	r3, [pc, #224]	@ (8006e4c <vTaskSwitchContext+0x130>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d70:	61fb      	str	r3, [r7, #28]
 8006d72:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8006d76:	61bb      	str	r3, [r7, #24]
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d111      	bne.n	8006da6 <vTaskSwitchContext+0x8a>
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	3304      	adds	r3, #4
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	69ba      	ldr	r2, [r7, #24]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d10b      	bne.n	8006da6 <vTaskSwitchContext+0x8a>
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	3308      	adds	r3, #8
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	69ba      	ldr	r2, [r7, #24]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d105      	bne.n	8006da6 <vTaskSwitchContext+0x8a>
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	330c      	adds	r3, #12
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	69ba      	ldr	r2, [r7, #24]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d008      	beq.n	8006db8 <vTaskSwitchContext+0x9c>
 8006da6:	4b29      	ldr	r3, [pc, #164]	@ (8006e4c <vTaskSwitchContext+0x130>)
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	4b28      	ldr	r3, [pc, #160]	@ (8006e4c <vTaskSwitchContext+0x130>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	3334      	adds	r3, #52	@ 0x34
 8006db0:	4619      	mov	r1, r3
 8006db2:	4610      	mov	r0, r2
 8006db4:	f7f9 fc0b 	bl	80005ce <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006db8:	4b25      	ldr	r3, [pc, #148]	@ (8006e50 <vTaskSwitchContext+0x134>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	fab3 f383 	clz	r3, r3
 8006dc4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006dc6:	7afb      	ldrb	r3, [r7, #11]
 8006dc8:	f1c3 031f 	rsb	r3, r3, #31
 8006dcc:	617b      	str	r3, [r7, #20]
 8006dce:	4921      	ldr	r1, [pc, #132]	@ (8006e54 <vTaskSwitchContext+0x138>)
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	4413      	add	r3, r2
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	440b      	add	r3, r1
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10b      	bne.n	8006dfa <vTaskSwitchContext+0xde>
	__asm volatile
 8006de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de6:	f383 8811 	msr	BASEPRI, r3
 8006dea:	f3bf 8f6f 	isb	sy
 8006dee:	f3bf 8f4f 	dsb	sy
 8006df2:	607b      	str	r3, [r7, #4]
}
 8006df4:	bf00      	nop
 8006df6:	bf00      	nop
 8006df8:	e7fd      	b.n	8006df6 <vTaskSwitchContext+0xda>
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	4413      	add	r3, r2
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4a13      	ldr	r2, [pc, #76]	@ (8006e54 <vTaskSwitchContext+0x138>)
 8006e06:	4413      	add	r3, r2
 8006e08:	613b      	str	r3, [r7, #16]
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	685a      	ldr	r2, [r3, #4]
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	605a      	str	r2, [r3, #4]
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	685a      	ldr	r2, [r3, #4]
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	3308      	adds	r3, #8
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d104      	bne.n	8006e2a <vTaskSwitchContext+0x10e>
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	605a      	str	r2, [r3, #4]
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	4a06      	ldr	r2, [pc, #24]	@ (8006e4c <vTaskSwitchContext+0x130>)
 8006e32:	6013      	str	r3, [r2, #0]
}
 8006e34:	bf00      	nop
 8006e36:	3720      	adds	r7, #32
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	20001134 	.word	0x20001134
 8006e40:	20001120 	.word	0x20001120
 8006e44:	2000113c 	.word	0x2000113c
 8006e48:	20001138 	.word	0x20001138
 8006e4c:	2000100c 	.word	0x2000100c
 8006e50:	20001114 	.word	0x20001114
 8006e54:	20001010 	.word	0x20001010

08006e58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006e60:	f000 f852 	bl	8006f08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e64:	4b06      	ldr	r3, [pc, #24]	@ (8006e80 <prvIdleTask+0x28>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d9f9      	bls.n	8006e60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006e6c:	4b05      	ldr	r3, [pc, #20]	@ (8006e84 <prvIdleTask+0x2c>)
 8006e6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e72:	601a      	str	r2, [r3, #0]
 8006e74:	f3bf 8f4f 	dsb	sy
 8006e78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006e7c:	e7f0      	b.n	8006e60 <prvIdleTask+0x8>
 8006e7e:	bf00      	nop
 8006e80:	20001010 	.word	0x20001010
 8006e84:	e000ed04 	.word	0xe000ed04

08006e88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e8e:	2300      	movs	r3, #0
 8006e90:	607b      	str	r3, [r7, #4]
 8006e92:	e00c      	b.n	8006eae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	4613      	mov	r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	4413      	add	r3, r2
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4a12      	ldr	r2, [pc, #72]	@ (8006ee8 <prvInitialiseTaskLists+0x60>)
 8006ea0:	4413      	add	r3, r2
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7ff fb34 	bl	8006510 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	607b      	str	r3, [r7, #4]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2b06      	cmp	r3, #6
 8006eb2:	d9ef      	bls.n	8006e94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006eb4:	480d      	ldr	r0, [pc, #52]	@ (8006eec <prvInitialiseTaskLists+0x64>)
 8006eb6:	f7ff fb2b 	bl	8006510 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006eba:	480d      	ldr	r0, [pc, #52]	@ (8006ef0 <prvInitialiseTaskLists+0x68>)
 8006ebc:	f7ff fb28 	bl	8006510 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ec0:	480c      	ldr	r0, [pc, #48]	@ (8006ef4 <prvInitialiseTaskLists+0x6c>)
 8006ec2:	f7ff fb25 	bl	8006510 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006ec6:	480c      	ldr	r0, [pc, #48]	@ (8006ef8 <prvInitialiseTaskLists+0x70>)
 8006ec8:	f7ff fb22 	bl	8006510 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ecc:	480b      	ldr	r0, [pc, #44]	@ (8006efc <prvInitialiseTaskLists+0x74>)
 8006ece:	f7ff fb1f 	bl	8006510 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8006f00 <prvInitialiseTaskLists+0x78>)
 8006ed4:	4a05      	ldr	r2, [pc, #20]	@ (8006eec <prvInitialiseTaskLists+0x64>)
 8006ed6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8006f04 <prvInitialiseTaskLists+0x7c>)
 8006eda:	4a05      	ldr	r2, [pc, #20]	@ (8006ef0 <prvInitialiseTaskLists+0x68>)
 8006edc:	601a      	str	r2, [r3, #0]
}
 8006ede:	bf00      	nop
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	20001010 	.word	0x20001010
 8006eec:	2000109c 	.word	0x2000109c
 8006ef0:	200010b0 	.word	0x200010b0
 8006ef4:	200010cc 	.word	0x200010cc
 8006ef8:	200010e0 	.word	0x200010e0
 8006efc:	200010f8 	.word	0x200010f8
 8006f00:	200010c4 	.word	0x200010c4
 8006f04:	200010c8 	.word	0x200010c8

08006f08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f0e:	e019      	b.n	8006f44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006f10:	f000 fa02 	bl	8007318 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f14:	4b10      	ldr	r3, [pc, #64]	@ (8006f58 <prvCheckTasksWaitingTermination+0x50>)
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	3304      	adds	r3, #4
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7ff fb7f 	bl	8006624 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006f26:	4b0d      	ldr	r3, [pc, #52]	@ (8006f5c <prvCheckTasksWaitingTermination+0x54>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	4a0b      	ldr	r2, [pc, #44]	@ (8006f5c <prvCheckTasksWaitingTermination+0x54>)
 8006f2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006f30:	4b0b      	ldr	r3, [pc, #44]	@ (8006f60 <prvCheckTasksWaitingTermination+0x58>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	3b01      	subs	r3, #1
 8006f36:	4a0a      	ldr	r2, [pc, #40]	@ (8006f60 <prvCheckTasksWaitingTermination+0x58>)
 8006f38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006f3a:	f000 fa1f 	bl	800737c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 f810 	bl	8006f64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f44:	4b06      	ldr	r3, [pc, #24]	@ (8006f60 <prvCheckTasksWaitingTermination+0x58>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1e1      	bne.n	8006f10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006f4c:	bf00      	nop
 8006f4e:	bf00      	nop
 8006f50:	3708      	adds	r7, #8
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	200010e0 	.word	0x200010e0
 8006f5c:	2000110c 	.word	0x2000110c
 8006f60:	200010f4 	.word	0x200010f4

08006f64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f70:	4618      	mov	r0, r3
 8006f72:	f000 fb7f 	bl	8007674 <vPortFree>
			vPortFree( pxTCB );
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 fb7c 	bl	8007674 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006f7c:	bf00      	nop
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8006fbc <prvResetNextTaskUnblockTime+0x38>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d104      	bne.n	8006f9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f94:	4b0a      	ldr	r3, [pc, #40]	@ (8006fc0 <prvResetNextTaskUnblockTime+0x3c>)
 8006f96:	f04f 32ff 	mov.w	r2, #4294967295
 8006f9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006f9c:	e008      	b.n	8006fb0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f9e:	4b07      	ldr	r3, [pc, #28]	@ (8006fbc <prvResetNextTaskUnblockTime+0x38>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	4a04      	ldr	r2, [pc, #16]	@ (8006fc0 <prvResetNextTaskUnblockTime+0x3c>)
 8006fae:	6013      	str	r3, [r2, #0]
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr
 8006fbc:	200010c4 	.word	0x200010c4
 8006fc0:	2000112c 	.word	0x2000112c

08006fc4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006fca:	4b05      	ldr	r3, [pc, #20]	@ (8006fe0 <xTaskGetCurrentTaskHandle+0x1c>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006fd0:	687b      	ldr	r3, [r7, #4]
	}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	370c      	adds	r7, #12
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	2000100c 	.word	0x2000100c

08006fe4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006fee:	4b29      	ldr	r3, [pc, #164]	@ (8007094 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ff4:	4b28      	ldr	r3, [pc, #160]	@ (8007098 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	3304      	adds	r3, #4
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7ff fb12 	bl	8006624 <uxListRemove>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d10b      	bne.n	800701e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007006:	4b24      	ldr	r3, [pc, #144]	@ (8007098 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800700c:	2201      	movs	r2, #1
 800700e:	fa02 f303 	lsl.w	r3, r2, r3
 8007012:	43da      	mvns	r2, r3
 8007014:	4b21      	ldr	r3, [pc, #132]	@ (800709c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4013      	ands	r3, r2
 800701a:	4a20      	ldr	r2, [pc, #128]	@ (800709c <prvAddCurrentTaskToDelayedList+0xb8>)
 800701c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007024:	d10a      	bne.n	800703c <prvAddCurrentTaskToDelayedList+0x58>
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d007      	beq.n	800703c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800702c:	4b1a      	ldr	r3, [pc, #104]	@ (8007098 <prvAddCurrentTaskToDelayedList+0xb4>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	3304      	adds	r3, #4
 8007032:	4619      	mov	r1, r3
 8007034:	481a      	ldr	r0, [pc, #104]	@ (80070a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007036:	f7ff fa98 	bl	800656a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800703a:	e026      	b.n	800708a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4413      	add	r3, r2
 8007042:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007044:	4b14      	ldr	r3, [pc, #80]	@ (8007098 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68ba      	ldr	r2, [r7, #8]
 800704a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800704c:	68ba      	ldr	r2, [r7, #8]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	429a      	cmp	r2, r3
 8007052:	d209      	bcs.n	8007068 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007054:	4b13      	ldr	r3, [pc, #76]	@ (80070a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	4b0f      	ldr	r3, [pc, #60]	@ (8007098 <prvAddCurrentTaskToDelayedList+0xb4>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	3304      	adds	r3, #4
 800705e:	4619      	mov	r1, r3
 8007060:	4610      	mov	r0, r2
 8007062:	f7ff faa6 	bl	80065b2 <vListInsert>
}
 8007066:	e010      	b.n	800708a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007068:	4b0f      	ldr	r3, [pc, #60]	@ (80070a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	4b0a      	ldr	r3, [pc, #40]	@ (8007098 <prvAddCurrentTaskToDelayedList+0xb4>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	3304      	adds	r3, #4
 8007072:	4619      	mov	r1, r3
 8007074:	4610      	mov	r0, r2
 8007076:	f7ff fa9c 	bl	80065b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800707a:	4b0c      	ldr	r3, [pc, #48]	@ (80070ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	429a      	cmp	r2, r3
 8007082:	d202      	bcs.n	800708a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007084:	4a09      	ldr	r2, [pc, #36]	@ (80070ac <prvAddCurrentTaskToDelayedList+0xc8>)
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	6013      	str	r3, [r2, #0]
}
 800708a:	bf00      	nop
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	20001110 	.word	0x20001110
 8007098:	2000100c 	.word	0x2000100c
 800709c:	20001114 	.word	0x20001114
 80070a0:	200010f8 	.word	0x200010f8
 80070a4:	200010c8 	.word	0x200010c8
 80070a8:	200010c4 	.word	0x200010c4
 80070ac:	2000112c 	.word	0x2000112c

080070b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	3b04      	subs	r3, #4
 80070c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80070c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	3b04      	subs	r3, #4
 80070ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	f023 0201 	bic.w	r2, r3, #1
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	3b04      	subs	r3, #4
 80070de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80070e0:	4a0c      	ldr	r2, [pc, #48]	@ (8007114 <pxPortInitialiseStack+0x64>)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	3b14      	subs	r3, #20
 80070ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	3b04      	subs	r3, #4
 80070f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f06f 0202 	mvn.w	r2, #2
 80070fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	3b20      	subs	r3, #32
 8007104:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007106:	68fb      	ldr	r3, [r7, #12]
}
 8007108:	4618      	mov	r0, r3
 800710a:	3714      	adds	r7, #20
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr
 8007114:	08007119 	.word	0x08007119

08007118 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800711e:	2300      	movs	r3, #0
 8007120:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007122:	4b13      	ldr	r3, [pc, #76]	@ (8007170 <prvTaskExitError+0x58>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800712a:	d00b      	beq.n	8007144 <prvTaskExitError+0x2c>
	__asm volatile
 800712c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007130:	f383 8811 	msr	BASEPRI, r3
 8007134:	f3bf 8f6f 	isb	sy
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	60fb      	str	r3, [r7, #12]
}
 800713e:	bf00      	nop
 8007140:	bf00      	nop
 8007142:	e7fd      	b.n	8007140 <prvTaskExitError+0x28>
	__asm volatile
 8007144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007148:	f383 8811 	msr	BASEPRI, r3
 800714c:	f3bf 8f6f 	isb	sy
 8007150:	f3bf 8f4f 	dsb	sy
 8007154:	60bb      	str	r3, [r7, #8]
}
 8007156:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007158:	bf00      	nop
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d0fc      	beq.n	800715a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007160:	bf00      	nop
 8007162:	bf00      	nop
 8007164:	3714      	adds	r7, #20
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	2000000c 	.word	0x2000000c
	...

08007180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007180:	4b07      	ldr	r3, [pc, #28]	@ (80071a0 <pxCurrentTCBConst2>)
 8007182:	6819      	ldr	r1, [r3, #0]
 8007184:	6808      	ldr	r0, [r1, #0]
 8007186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800718a:	f380 8809 	msr	PSP, r0
 800718e:	f3bf 8f6f 	isb	sy
 8007192:	f04f 0000 	mov.w	r0, #0
 8007196:	f380 8811 	msr	BASEPRI, r0
 800719a:	4770      	bx	lr
 800719c:	f3af 8000 	nop.w

080071a0 <pxCurrentTCBConst2>:
 80071a0:	2000100c 	.word	0x2000100c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80071a4:	bf00      	nop
 80071a6:	bf00      	nop

080071a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80071a8:	4808      	ldr	r0, [pc, #32]	@ (80071cc <prvPortStartFirstTask+0x24>)
 80071aa:	6800      	ldr	r0, [r0, #0]
 80071ac:	6800      	ldr	r0, [r0, #0]
 80071ae:	f380 8808 	msr	MSP, r0
 80071b2:	f04f 0000 	mov.w	r0, #0
 80071b6:	f380 8814 	msr	CONTROL, r0
 80071ba:	b662      	cpsie	i
 80071bc:	b661      	cpsie	f
 80071be:	f3bf 8f4f 	dsb	sy
 80071c2:	f3bf 8f6f 	isb	sy
 80071c6:	df00      	svc	0
 80071c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80071ca:	bf00      	nop
 80071cc:	e000ed08 	.word	0xe000ed08

080071d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b086      	sub	sp, #24
 80071d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80071d6:	4b47      	ldr	r3, [pc, #284]	@ (80072f4 <xPortStartScheduler+0x124>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a47      	ldr	r2, [pc, #284]	@ (80072f8 <xPortStartScheduler+0x128>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d10b      	bne.n	80071f8 <xPortStartScheduler+0x28>
	__asm volatile
 80071e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e4:	f383 8811 	msr	BASEPRI, r3
 80071e8:	f3bf 8f6f 	isb	sy
 80071ec:	f3bf 8f4f 	dsb	sy
 80071f0:	613b      	str	r3, [r7, #16]
}
 80071f2:	bf00      	nop
 80071f4:	bf00      	nop
 80071f6:	e7fd      	b.n	80071f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80071f8:	4b3e      	ldr	r3, [pc, #248]	@ (80072f4 <xPortStartScheduler+0x124>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a3f      	ldr	r2, [pc, #252]	@ (80072fc <xPortStartScheduler+0x12c>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d10b      	bne.n	800721a <xPortStartScheduler+0x4a>
	__asm volatile
 8007202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007206:	f383 8811 	msr	BASEPRI, r3
 800720a:	f3bf 8f6f 	isb	sy
 800720e:	f3bf 8f4f 	dsb	sy
 8007212:	60fb      	str	r3, [r7, #12]
}
 8007214:	bf00      	nop
 8007216:	bf00      	nop
 8007218:	e7fd      	b.n	8007216 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800721a:	4b39      	ldr	r3, [pc, #228]	@ (8007300 <xPortStartScheduler+0x130>)
 800721c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	b2db      	uxtb	r3, r3
 8007224:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	22ff      	movs	r2, #255	@ 0xff
 800722a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	b2db      	uxtb	r3, r3
 8007232:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007234:	78fb      	ldrb	r3, [r7, #3]
 8007236:	b2db      	uxtb	r3, r3
 8007238:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800723c:	b2da      	uxtb	r2, r3
 800723e:	4b31      	ldr	r3, [pc, #196]	@ (8007304 <xPortStartScheduler+0x134>)
 8007240:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007242:	4b31      	ldr	r3, [pc, #196]	@ (8007308 <xPortStartScheduler+0x138>)
 8007244:	2207      	movs	r2, #7
 8007246:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007248:	e009      	b.n	800725e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800724a:	4b2f      	ldr	r3, [pc, #188]	@ (8007308 <xPortStartScheduler+0x138>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	3b01      	subs	r3, #1
 8007250:	4a2d      	ldr	r2, [pc, #180]	@ (8007308 <xPortStartScheduler+0x138>)
 8007252:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007254:	78fb      	ldrb	r3, [r7, #3]
 8007256:	b2db      	uxtb	r3, r3
 8007258:	005b      	lsls	r3, r3, #1
 800725a:	b2db      	uxtb	r3, r3
 800725c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800725e:	78fb      	ldrb	r3, [r7, #3]
 8007260:	b2db      	uxtb	r3, r3
 8007262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007266:	2b80      	cmp	r3, #128	@ 0x80
 8007268:	d0ef      	beq.n	800724a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800726a:	4b27      	ldr	r3, [pc, #156]	@ (8007308 <xPortStartScheduler+0x138>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f1c3 0307 	rsb	r3, r3, #7
 8007272:	2b04      	cmp	r3, #4
 8007274:	d00b      	beq.n	800728e <xPortStartScheduler+0xbe>
	__asm volatile
 8007276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800727a:	f383 8811 	msr	BASEPRI, r3
 800727e:	f3bf 8f6f 	isb	sy
 8007282:	f3bf 8f4f 	dsb	sy
 8007286:	60bb      	str	r3, [r7, #8]
}
 8007288:	bf00      	nop
 800728a:	bf00      	nop
 800728c:	e7fd      	b.n	800728a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800728e:	4b1e      	ldr	r3, [pc, #120]	@ (8007308 <xPortStartScheduler+0x138>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	021b      	lsls	r3, r3, #8
 8007294:	4a1c      	ldr	r2, [pc, #112]	@ (8007308 <xPortStartScheduler+0x138>)
 8007296:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007298:	4b1b      	ldr	r3, [pc, #108]	@ (8007308 <xPortStartScheduler+0x138>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80072a0:	4a19      	ldr	r2, [pc, #100]	@ (8007308 <xPortStartScheduler+0x138>)
 80072a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	b2da      	uxtb	r2, r3
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80072ac:	4b17      	ldr	r3, [pc, #92]	@ (800730c <xPortStartScheduler+0x13c>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a16      	ldr	r2, [pc, #88]	@ (800730c <xPortStartScheduler+0x13c>)
 80072b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80072b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80072b8:	4b14      	ldr	r3, [pc, #80]	@ (800730c <xPortStartScheduler+0x13c>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a13      	ldr	r2, [pc, #76]	@ (800730c <xPortStartScheduler+0x13c>)
 80072be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80072c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80072c4:	f000 f8da 	bl	800747c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80072c8:	4b11      	ldr	r3, [pc, #68]	@ (8007310 <xPortStartScheduler+0x140>)
 80072ca:	2200      	movs	r2, #0
 80072cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80072ce:	f000 f8f9 	bl	80074c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80072d2:	4b10      	ldr	r3, [pc, #64]	@ (8007314 <xPortStartScheduler+0x144>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a0f      	ldr	r2, [pc, #60]	@ (8007314 <xPortStartScheduler+0x144>)
 80072d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80072dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80072de:	f7ff ff63 	bl	80071a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80072e2:	f7ff fd1b 	bl	8006d1c <vTaskSwitchContext>
	prvTaskExitError();
 80072e6:	f7ff ff17 	bl	8007118 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3718      	adds	r7, #24
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	e000ed00 	.word	0xe000ed00
 80072f8:	410fc271 	.word	0x410fc271
 80072fc:	410fc270 	.word	0x410fc270
 8007300:	e000e400 	.word	0xe000e400
 8007304:	20001140 	.word	0x20001140
 8007308:	20001144 	.word	0x20001144
 800730c:	e000ed20 	.word	0xe000ed20
 8007310:	2000000c 	.word	0x2000000c
 8007314:	e000ef34 	.word	0xe000ef34

08007318 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
	__asm volatile
 800731e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007322:	f383 8811 	msr	BASEPRI, r3
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	607b      	str	r3, [r7, #4]
}
 8007330:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007332:	4b10      	ldr	r3, [pc, #64]	@ (8007374 <vPortEnterCritical+0x5c>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	3301      	adds	r3, #1
 8007338:	4a0e      	ldr	r2, [pc, #56]	@ (8007374 <vPortEnterCritical+0x5c>)
 800733a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800733c:	4b0d      	ldr	r3, [pc, #52]	@ (8007374 <vPortEnterCritical+0x5c>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2b01      	cmp	r3, #1
 8007342:	d110      	bne.n	8007366 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007344:	4b0c      	ldr	r3, [pc, #48]	@ (8007378 <vPortEnterCritical+0x60>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	b2db      	uxtb	r3, r3
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00b      	beq.n	8007366 <vPortEnterCritical+0x4e>
	__asm volatile
 800734e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	603b      	str	r3, [r7, #0]
}
 8007360:	bf00      	nop
 8007362:	bf00      	nop
 8007364:	e7fd      	b.n	8007362 <vPortEnterCritical+0x4a>
	}
}
 8007366:	bf00      	nop
 8007368:	370c      	adds	r7, #12
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	2000000c 	.word	0x2000000c
 8007378:	e000ed04 	.word	0xe000ed04

0800737c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007382:	4b12      	ldr	r3, [pc, #72]	@ (80073cc <vPortExitCritical+0x50>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10b      	bne.n	80073a2 <vPortExitCritical+0x26>
	__asm volatile
 800738a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800738e:	f383 8811 	msr	BASEPRI, r3
 8007392:	f3bf 8f6f 	isb	sy
 8007396:	f3bf 8f4f 	dsb	sy
 800739a:	607b      	str	r3, [r7, #4]
}
 800739c:	bf00      	nop
 800739e:	bf00      	nop
 80073a0:	e7fd      	b.n	800739e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80073a2:	4b0a      	ldr	r3, [pc, #40]	@ (80073cc <vPortExitCritical+0x50>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	3b01      	subs	r3, #1
 80073a8:	4a08      	ldr	r2, [pc, #32]	@ (80073cc <vPortExitCritical+0x50>)
 80073aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80073ac:	4b07      	ldr	r3, [pc, #28]	@ (80073cc <vPortExitCritical+0x50>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d105      	bne.n	80073c0 <vPortExitCritical+0x44>
 80073b4:	2300      	movs	r3, #0
 80073b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80073be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80073c0:	bf00      	nop
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr
 80073cc:	2000000c 	.word	0x2000000c

080073d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80073d0:	f3ef 8009 	mrs	r0, PSP
 80073d4:	f3bf 8f6f 	isb	sy
 80073d8:	4b15      	ldr	r3, [pc, #84]	@ (8007430 <pxCurrentTCBConst>)
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	f01e 0f10 	tst.w	lr, #16
 80073e0:	bf08      	it	eq
 80073e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80073e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ea:	6010      	str	r0, [r2, #0]
 80073ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80073f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80073f4:	f380 8811 	msr	BASEPRI, r0
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	f3bf 8f6f 	isb	sy
 8007400:	f7ff fc8c 	bl	8006d1c <vTaskSwitchContext>
 8007404:	f04f 0000 	mov.w	r0, #0
 8007408:	f380 8811 	msr	BASEPRI, r0
 800740c:	bc09      	pop	{r0, r3}
 800740e:	6819      	ldr	r1, [r3, #0]
 8007410:	6808      	ldr	r0, [r1, #0]
 8007412:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007416:	f01e 0f10 	tst.w	lr, #16
 800741a:	bf08      	it	eq
 800741c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007420:	f380 8809 	msr	PSP, r0
 8007424:	f3bf 8f6f 	isb	sy
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	f3af 8000 	nop.w

08007430 <pxCurrentTCBConst>:
 8007430:	2000100c 	.word	0x2000100c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007434:	bf00      	nop
 8007436:	bf00      	nop

08007438 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
	__asm volatile
 800743e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007442:	f383 8811 	msr	BASEPRI, r3
 8007446:	f3bf 8f6f 	isb	sy
 800744a:	f3bf 8f4f 	dsb	sy
 800744e:	607b      	str	r3, [r7, #4]
}
 8007450:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007452:	f7ff fba9 	bl	8006ba8 <xTaskIncrementTick>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d003      	beq.n	8007464 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800745c:	4b06      	ldr	r3, [pc, #24]	@ (8007478 <SysTick_Handler+0x40>)
 800745e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007462:	601a      	str	r2, [r3, #0]
 8007464:	2300      	movs	r3, #0
 8007466:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	f383 8811 	msr	BASEPRI, r3
}
 800746e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007470:	bf00      	nop
 8007472:	3708      	adds	r7, #8
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}
 8007478:	e000ed04 	.word	0xe000ed04

0800747c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800747c:	b480      	push	{r7}
 800747e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007480:	4b0b      	ldr	r3, [pc, #44]	@ (80074b0 <vPortSetupTimerInterrupt+0x34>)
 8007482:	2200      	movs	r2, #0
 8007484:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007486:	4b0b      	ldr	r3, [pc, #44]	@ (80074b4 <vPortSetupTimerInterrupt+0x38>)
 8007488:	2200      	movs	r2, #0
 800748a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800748c:	4b0a      	ldr	r3, [pc, #40]	@ (80074b8 <vPortSetupTimerInterrupt+0x3c>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a0a      	ldr	r2, [pc, #40]	@ (80074bc <vPortSetupTimerInterrupt+0x40>)
 8007492:	fba2 2303 	umull	r2, r3, r2, r3
 8007496:	099b      	lsrs	r3, r3, #6
 8007498:	4a09      	ldr	r2, [pc, #36]	@ (80074c0 <vPortSetupTimerInterrupt+0x44>)
 800749a:	3b01      	subs	r3, #1
 800749c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800749e:	4b04      	ldr	r3, [pc, #16]	@ (80074b0 <vPortSetupTimerInterrupt+0x34>)
 80074a0:	2207      	movs	r2, #7
 80074a2:	601a      	str	r2, [r3, #0]
}
 80074a4:	bf00      	nop
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr
 80074ae:	bf00      	nop
 80074b0:	e000e010 	.word	0xe000e010
 80074b4:	e000e018 	.word	0xe000e018
 80074b8:	20000000 	.word	0x20000000
 80074bc:	10624dd3 	.word	0x10624dd3
 80074c0:	e000e014 	.word	0xe000e014

080074c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80074c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80074d4 <vPortEnableVFP+0x10>
 80074c8:	6801      	ldr	r1, [r0, #0]
 80074ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80074ce:	6001      	str	r1, [r0, #0]
 80074d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80074d2:	bf00      	nop
 80074d4:	e000ed88 	.word	0xe000ed88

080074d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b08a      	sub	sp, #40	@ 0x28
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80074e0:	2300      	movs	r3, #0
 80074e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80074e4:	f7ff fa8e 	bl	8006a04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80074e8:	4b5c      	ldr	r3, [pc, #368]	@ (800765c <pvPortMalloc+0x184>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d101      	bne.n	80074f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80074f0:	f000 f924 	bl	800773c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80074f4:	4b5a      	ldr	r3, [pc, #360]	@ (8007660 <pvPortMalloc+0x188>)
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4013      	ands	r3, r2
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f040 8095 	bne.w	800762c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d01e      	beq.n	8007546 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007508:	2208      	movs	r2, #8
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4413      	add	r3, r2
 800750e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f003 0307 	and.w	r3, r3, #7
 8007516:	2b00      	cmp	r3, #0
 8007518:	d015      	beq.n	8007546 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f023 0307 	bic.w	r3, r3, #7
 8007520:	3308      	adds	r3, #8
 8007522:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f003 0307 	and.w	r3, r3, #7
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00b      	beq.n	8007546 <pvPortMalloc+0x6e>
	__asm volatile
 800752e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007532:	f383 8811 	msr	BASEPRI, r3
 8007536:	f3bf 8f6f 	isb	sy
 800753a:	f3bf 8f4f 	dsb	sy
 800753e:	617b      	str	r3, [r7, #20]
}
 8007540:	bf00      	nop
 8007542:	bf00      	nop
 8007544:	e7fd      	b.n	8007542 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d06f      	beq.n	800762c <pvPortMalloc+0x154>
 800754c:	4b45      	ldr	r3, [pc, #276]	@ (8007664 <pvPortMalloc+0x18c>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	429a      	cmp	r2, r3
 8007554:	d86a      	bhi.n	800762c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007556:	4b44      	ldr	r3, [pc, #272]	@ (8007668 <pvPortMalloc+0x190>)
 8007558:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800755a:	4b43      	ldr	r3, [pc, #268]	@ (8007668 <pvPortMalloc+0x190>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007560:	e004      	b.n	800756c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007564:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800756c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	429a      	cmp	r2, r3
 8007574:	d903      	bls.n	800757e <pvPortMalloc+0xa6>
 8007576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1f1      	bne.n	8007562 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800757e:	4b37      	ldr	r3, [pc, #220]	@ (800765c <pvPortMalloc+0x184>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007584:	429a      	cmp	r2, r3
 8007586:	d051      	beq.n	800762c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007588:	6a3b      	ldr	r3, [r7, #32]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2208      	movs	r2, #8
 800758e:	4413      	add	r3, r2
 8007590:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	6a3b      	ldr	r3, [r7, #32]
 8007598:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800759a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759c:	685a      	ldr	r2, [r3, #4]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	1ad2      	subs	r2, r2, r3
 80075a2:	2308      	movs	r3, #8
 80075a4:	005b      	lsls	r3, r3, #1
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d920      	bls.n	80075ec <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80075aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4413      	add	r3, r2
 80075b0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	f003 0307 	and.w	r3, r3, #7
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00b      	beq.n	80075d4 <pvPortMalloc+0xfc>
	__asm volatile
 80075bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c0:	f383 8811 	msr	BASEPRI, r3
 80075c4:	f3bf 8f6f 	isb	sy
 80075c8:	f3bf 8f4f 	dsb	sy
 80075cc:	613b      	str	r3, [r7, #16]
}
 80075ce:	bf00      	nop
 80075d0:	bf00      	nop
 80075d2:	e7fd      	b.n	80075d0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80075d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d6:	685a      	ldr	r2, [r3, #4]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	1ad2      	subs	r2, r2, r3
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80075e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80075e6:	69b8      	ldr	r0, [r7, #24]
 80075e8:	f000 f90a 	bl	8007800 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80075ec:	4b1d      	ldr	r3, [pc, #116]	@ (8007664 <pvPortMalloc+0x18c>)
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	4a1b      	ldr	r2, [pc, #108]	@ (8007664 <pvPortMalloc+0x18c>)
 80075f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80075fa:	4b1a      	ldr	r3, [pc, #104]	@ (8007664 <pvPortMalloc+0x18c>)
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	4b1b      	ldr	r3, [pc, #108]	@ (800766c <pvPortMalloc+0x194>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	429a      	cmp	r2, r3
 8007604:	d203      	bcs.n	800760e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007606:	4b17      	ldr	r3, [pc, #92]	@ (8007664 <pvPortMalloc+0x18c>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a18      	ldr	r2, [pc, #96]	@ (800766c <pvPortMalloc+0x194>)
 800760c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800760e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007610:	685a      	ldr	r2, [r3, #4]
 8007612:	4b13      	ldr	r3, [pc, #76]	@ (8007660 <pvPortMalloc+0x188>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	431a      	orrs	r2, r3
 8007618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800761c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761e:	2200      	movs	r2, #0
 8007620:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007622:	4b13      	ldr	r3, [pc, #76]	@ (8007670 <pvPortMalloc+0x198>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	3301      	adds	r3, #1
 8007628:	4a11      	ldr	r2, [pc, #68]	@ (8007670 <pvPortMalloc+0x198>)
 800762a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800762c:	f7ff f9f8 	bl	8006a20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	f003 0307 	and.w	r3, r3, #7
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00b      	beq.n	8007652 <pvPortMalloc+0x17a>
	__asm volatile
 800763a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800763e:	f383 8811 	msr	BASEPRI, r3
 8007642:	f3bf 8f6f 	isb	sy
 8007646:	f3bf 8f4f 	dsb	sy
 800764a:	60fb      	str	r3, [r7, #12]
}
 800764c:	bf00      	nop
 800764e:	bf00      	nop
 8007650:	e7fd      	b.n	800764e <pvPortMalloc+0x176>
	return pvReturn;
 8007652:	69fb      	ldr	r3, [r7, #28]
}
 8007654:	4618      	mov	r0, r3
 8007656:	3728      	adds	r7, #40	@ 0x28
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}
 800765c:	20005f70 	.word	0x20005f70
 8007660:	20005f84 	.word	0x20005f84
 8007664:	20005f74 	.word	0x20005f74
 8007668:	20005f68 	.word	0x20005f68
 800766c:	20005f78 	.word	0x20005f78
 8007670:	20005f7c 	.word	0x20005f7c

08007674 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b086      	sub	sp, #24
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d04f      	beq.n	8007726 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007686:	2308      	movs	r3, #8
 8007688:	425b      	negs	r3, r3
 800768a:	697a      	ldr	r2, [r7, #20]
 800768c:	4413      	add	r3, r2
 800768e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	685a      	ldr	r2, [r3, #4]
 8007698:	4b25      	ldr	r3, [pc, #148]	@ (8007730 <vPortFree+0xbc>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4013      	ands	r3, r2
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d10b      	bne.n	80076ba <vPortFree+0x46>
	__asm volatile
 80076a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a6:	f383 8811 	msr	BASEPRI, r3
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	60fb      	str	r3, [r7, #12]
}
 80076b4:	bf00      	nop
 80076b6:	bf00      	nop
 80076b8:	e7fd      	b.n	80076b6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00b      	beq.n	80076da <vPortFree+0x66>
	__asm volatile
 80076c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c6:	f383 8811 	msr	BASEPRI, r3
 80076ca:	f3bf 8f6f 	isb	sy
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	60bb      	str	r3, [r7, #8]
}
 80076d4:	bf00      	nop
 80076d6:	bf00      	nop
 80076d8:	e7fd      	b.n	80076d6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	685a      	ldr	r2, [r3, #4]
 80076de:	4b14      	ldr	r3, [pc, #80]	@ (8007730 <vPortFree+0xbc>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4013      	ands	r3, r2
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d01e      	beq.n	8007726 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d11a      	bne.n	8007726 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	685a      	ldr	r2, [r3, #4]
 80076f4:	4b0e      	ldr	r3, [pc, #56]	@ (8007730 <vPortFree+0xbc>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	43db      	mvns	r3, r3
 80076fa:	401a      	ands	r2, r3
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007700:	f7ff f980 	bl	8006a04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	685a      	ldr	r2, [r3, #4]
 8007708:	4b0a      	ldr	r3, [pc, #40]	@ (8007734 <vPortFree+0xc0>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4413      	add	r3, r2
 800770e:	4a09      	ldr	r2, [pc, #36]	@ (8007734 <vPortFree+0xc0>)
 8007710:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007712:	6938      	ldr	r0, [r7, #16]
 8007714:	f000 f874 	bl	8007800 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007718:	4b07      	ldr	r3, [pc, #28]	@ (8007738 <vPortFree+0xc4>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	3301      	adds	r3, #1
 800771e:	4a06      	ldr	r2, [pc, #24]	@ (8007738 <vPortFree+0xc4>)
 8007720:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007722:	f7ff f97d 	bl	8006a20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007726:	bf00      	nop
 8007728:	3718      	adds	r7, #24
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	20005f84 	.word	0x20005f84
 8007734:	20005f74 	.word	0x20005f74
 8007738:	20005f80 	.word	0x20005f80

0800773c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007742:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8007746:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007748:	4b27      	ldr	r3, [pc, #156]	@ (80077e8 <prvHeapInit+0xac>)
 800774a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f003 0307 	and.w	r3, r3, #7
 8007752:	2b00      	cmp	r3, #0
 8007754:	d00c      	beq.n	8007770 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	3307      	adds	r3, #7
 800775a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f023 0307 	bic.w	r3, r3, #7
 8007762:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	1ad3      	subs	r3, r2, r3
 800776a:	4a1f      	ldr	r2, [pc, #124]	@ (80077e8 <prvHeapInit+0xac>)
 800776c:	4413      	add	r3, r2
 800776e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007774:	4a1d      	ldr	r2, [pc, #116]	@ (80077ec <prvHeapInit+0xb0>)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800777a:	4b1c      	ldr	r3, [pc, #112]	@ (80077ec <prvHeapInit+0xb0>)
 800777c:	2200      	movs	r2, #0
 800777e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	68ba      	ldr	r2, [r7, #8]
 8007784:	4413      	add	r3, r2
 8007786:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007788:	2208      	movs	r2, #8
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	1a9b      	subs	r3, r3, r2
 800778e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f023 0307 	bic.w	r3, r3, #7
 8007796:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	4a15      	ldr	r2, [pc, #84]	@ (80077f0 <prvHeapInit+0xb4>)
 800779c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800779e:	4b14      	ldr	r3, [pc, #80]	@ (80077f0 <prvHeapInit+0xb4>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2200      	movs	r2, #0
 80077a4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80077a6:	4b12      	ldr	r3, [pc, #72]	@ (80077f0 <prvHeapInit+0xb4>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2200      	movs	r2, #0
 80077ac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	1ad2      	subs	r2, r2, r3
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80077bc:	4b0c      	ldr	r3, [pc, #48]	@ (80077f0 <prvHeapInit+0xb4>)
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	4a0a      	ldr	r2, [pc, #40]	@ (80077f4 <prvHeapInit+0xb8>)
 80077ca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	4a09      	ldr	r2, [pc, #36]	@ (80077f8 <prvHeapInit+0xbc>)
 80077d2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80077d4:	4b09      	ldr	r3, [pc, #36]	@ (80077fc <prvHeapInit+0xc0>)
 80077d6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80077da:	601a      	str	r2, [r3, #0]
}
 80077dc:	bf00      	nop
 80077de:	3714      	adds	r7, #20
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr
 80077e8:	20001148 	.word	0x20001148
 80077ec:	20005f68 	.word	0x20005f68
 80077f0:	20005f70 	.word	0x20005f70
 80077f4:	20005f78 	.word	0x20005f78
 80077f8:	20005f74 	.word	0x20005f74
 80077fc:	20005f84 	.word	0x20005f84

08007800 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007808:	4b28      	ldr	r3, [pc, #160]	@ (80078ac <prvInsertBlockIntoFreeList+0xac>)
 800780a:	60fb      	str	r3, [r7, #12]
 800780c:	e002      	b.n	8007814 <prvInsertBlockIntoFreeList+0x14>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	60fb      	str	r3, [r7, #12]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	429a      	cmp	r2, r3
 800781c:	d8f7      	bhi.n	800780e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	68ba      	ldr	r2, [r7, #8]
 8007828:	4413      	add	r3, r2
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	429a      	cmp	r2, r3
 800782e:	d108      	bne.n	8007842 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	685a      	ldr	r2, [r3, #4]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	441a      	add	r2, r3
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	68ba      	ldr	r2, [r7, #8]
 800784c:	441a      	add	r2, r3
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	429a      	cmp	r2, r3
 8007854:	d118      	bne.n	8007888 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	4b15      	ldr	r3, [pc, #84]	@ (80078b0 <prvInsertBlockIntoFreeList+0xb0>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	429a      	cmp	r2, r3
 8007860:	d00d      	beq.n	800787e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	685a      	ldr	r2, [r3, #4]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	441a      	add	r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	601a      	str	r2, [r3, #0]
 800787c:	e008      	b.n	8007890 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800787e:	4b0c      	ldr	r3, [pc, #48]	@ (80078b0 <prvInsertBlockIntoFreeList+0xb0>)
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	601a      	str	r2, [r3, #0]
 8007886:	e003      	b.n	8007890 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	429a      	cmp	r2, r3
 8007896:	d002      	beq.n	800789e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800789e:	bf00      	nop
 80078a0:	3714      	adds	r7, #20
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	20005f68 	.word	0x20005f68
 80078b0:	20005f70 	.word	0x20005f70

080078b4 <std>:
 80078b4:	2300      	movs	r3, #0
 80078b6:	b510      	push	{r4, lr}
 80078b8:	4604      	mov	r4, r0
 80078ba:	e9c0 3300 	strd	r3, r3, [r0]
 80078be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078c2:	6083      	str	r3, [r0, #8]
 80078c4:	8181      	strh	r1, [r0, #12]
 80078c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80078c8:	81c2      	strh	r2, [r0, #14]
 80078ca:	6183      	str	r3, [r0, #24]
 80078cc:	4619      	mov	r1, r3
 80078ce:	2208      	movs	r2, #8
 80078d0:	305c      	adds	r0, #92	@ 0x5c
 80078d2:	f000 fa01 	bl	8007cd8 <memset>
 80078d6:	4b0d      	ldr	r3, [pc, #52]	@ (800790c <std+0x58>)
 80078d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80078da:	4b0d      	ldr	r3, [pc, #52]	@ (8007910 <std+0x5c>)
 80078dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80078de:	4b0d      	ldr	r3, [pc, #52]	@ (8007914 <std+0x60>)
 80078e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80078e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007918 <std+0x64>)
 80078e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80078e6:	4b0d      	ldr	r3, [pc, #52]	@ (800791c <std+0x68>)
 80078e8:	6224      	str	r4, [r4, #32]
 80078ea:	429c      	cmp	r4, r3
 80078ec:	d006      	beq.n	80078fc <std+0x48>
 80078ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80078f2:	4294      	cmp	r4, r2
 80078f4:	d002      	beq.n	80078fc <std+0x48>
 80078f6:	33d0      	adds	r3, #208	@ 0xd0
 80078f8:	429c      	cmp	r4, r3
 80078fa:	d105      	bne.n	8007908 <std+0x54>
 80078fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007904:	f000 ba60 	b.w	8007dc8 <__retarget_lock_init_recursive>
 8007908:	bd10      	pop	{r4, pc}
 800790a:	bf00      	nop
 800790c:	08007b29 	.word	0x08007b29
 8007910:	08007b4b 	.word	0x08007b4b
 8007914:	08007b83 	.word	0x08007b83
 8007918:	08007ba7 	.word	0x08007ba7
 800791c:	20005f88 	.word	0x20005f88

08007920 <stdio_exit_handler>:
 8007920:	4a02      	ldr	r2, [pc, #8]	@ (800792c <stdio_exit_handler+0xc>)
 8007922:	4903      	ldr	r1, [pc, #12]	@ (8007930 <stdio_exit_handler+0x10>)
 8007924:	4803      	ldr	r0, [pc, #12]	@ (8007934 <stdio_exit_handler+0x14>)
 8007926:	f000 b869 	b.w	80079fc <_fwalk_sglue>
 800792a:	bf00      	nop
 800792c:	20000010 	.word	0x20000010
 8007930:	08008685 	.word	0x08008685
 8007934:	20000020 	.word	0x20000020

08007938 <cleanup_stdio>:
 8007938:	6841      	ldr	r1, [r0, #4]
 800793a:	4b0c      	ldr	r3, [pc, #48]	@ (800796c <cleanup_stdio+0x34>)
 800793c:	4299      	cmp	r1, r3
 800793e:	b510      	push	{r4, lr}
 8007940:	4604      	mov	r4, r0
 8007942:	d001      	beq.n	8007948 <cleanup_stdio+0x10>
 8007944:	f000 fe9e 	bl	8008684 <_fflush_r>
 8007948:	68a1      	ldr	r1, [r4, #8]
 800794a:	4b09      	ldr	r3, [pc, #36]	@ (8007970 <cleanup_stdio+0x38>)
 800794c:	4299      	cmp	r1, r3
 800794e:	d002      	beq.n	8007956 <cleanup_stdio+0x1e>
 8007950:	4620      	mov	r0, r4
 8007952:	f000 fe97 	bl	8008684 <_fflush_r>
 8007956:	68e1      	ldr	r1, [r4, #12]
 8007958:	4b06      	ldr	r3, [pc, #24]	@ (8007974 <cleanup_stdio+0x3c>)
 800795a:	4299      	cmp	r1, r3
 800795c:	d004      	beq.n	8007968 <cleanup_stdio+0x30>
 800795e:	4620      	mov	r0, r4
 8007960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007964:	f000 be8e 	b.w	8008684 <_fflush_r>
 8007968:	bd10      	pop	{r4, pc}
 800796a:	bf00      	nop
 800796c:	20005f88 	.word	0x20005f88
 8007970:	20005ff0 	.word	0x20005ff0
 8007974:	20006058 	.word	0x20006058

08007978 <global_stdio_init.part.0>:
 8007978:	b510      	push	{r4, lr}
 800797a:	4b0b      	ldr	r3, [pc, #44]	@ (80079a8 <global_stdio_init.part.0+0x30>)
 800797c:	4c0b      	ldr	r4, [pc, #44]	@ (80079ac <global_stdio_init.part.0+0x34>)
 800797e:	4a0c      	ldr	r2, [pc, #48]	@ (80079b0 <global_stdio_init.part.0+0x38>)
 8007980:	601a      	str	r2, [r3, #0]
 8007982:	4620      	mov	r0, r4
 8007984:	2200      	movs	r2, #0
 8007986:	2104      	movs	r1, #4
 8007988:	f7ff ff94 	bl	80078b4 <std>
 800798c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007990:	2201      	movs	r2, #1
 8007992:	2109      	movs	r1, #9
 8007994:	f7ff ff8e 	bl	80078b4 <std>
 8007998:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800799c:	2202      	movs	r2, #2
 800799e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079a2:	2112      	movs	r1, #18
 80079a4:	f7ff bf86 	b.w	80078b4 <std>
 80079a8:	200060c0 	.word	0x200060c0
 80079ac:	20005f88 	.word	0x20005f88
 80079b0:	08007921 	.word	0x08007921

080079b4 <__sfp_lock_acquire>:
 80079b4:	4801      	ldr	r0, [pc, #4]	@ (80079bc <__sfp_lock_acquire+0x8>)
 80079b6:	f000 ba08 	b.w	8007dca <__retarget_lock_acquire_recursive>
 80079ba:	bf00      	nop
 80079bc:	200060c9 	.word	0x200060c9

080079c0 <__sfp_lock_release>:
 80079c0:	4801      	ldr	r0, [pc, #4]	@ (80079c8 <__sfp_lock_release+0x8>)
 80079c2:	f000 ba03 	b.w	8007dcc <__retarget_lock_release_recursive>
 80079c6:	bf00      	nop
 80079c8:	200060c9 	.word	0x200060c9

080079cc <__sinit>:
 80079cc:	b510      	push	{r4, lr}
 80079ce:	4604      	mov	r4, r0
 80079d0:	f7ff fff0 	bl	80079b4 <__sfp_lock_acquire>
 80079d4:	6a23      	ldr	r3, [r4, #32]
 80079d6:	b11b      	cbz	r3, 80079e0 <__sinit+0x14>
 80079d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079dc:	f7ff bff0 	b.w	80079c0 <__sfp_lock_release>
 80079e0:	4b04      	ldr	r3, [pc, #16]	@ (80079f4 <__sinit+0x28>)
 80079e2:	6223      	str	r3, [r4, #32]
 80079e4:	4b04      	ldr	r3, [pc, #16]	@ (80079f8 <__sinit+0x2c>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1f5      	bne.n	80079d8 <__sinit+0xc>
 80079ec:	f7ff ffc4 	bl	8007978 <global_stdio_init.part.0>
 80079f0:	e7f2      	b.n	80079d8 <__sinit+0xc>
 80079f2:	bf00      	nop
 80079f4:	08007939 	.word	0x08007939
 80079f8:	200060c0 	.word	0x200060c0

080079fc <_fwalk_sglue>:
 80079fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a00:	4607      	mov	r7, r0
 8007a02:	4688      	mov	r8, r1
 8007a04:	4614      	mov	r4, r2
 8007a06:	2600      	movs	r6, #0
 8007a08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a0c:	f1b9 0901 	subs.w	r9, r9, #1
 8007a10:	d505      	bpl.n	8007a1e <_fwalk_sglue+0x22>
 8007a12:	6824      	ldr	r4, [r4, #0]
 8007a14:	2c00      	cmp	r4, #0
 8007a16:	d1f7      	bne.n	8007a08 <_fwalk_sglue+0xc>
 8007a18:	4630      	mov	r0, r6
 8007a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a1e:	89ab      	ldrh	r3, [r5, #12]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d907      	bls.n	8007a34 <_fwalk_sglue+0x38>
 8007a24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	d003      	beq.n	8007a34 <_fwalk_sglue+0x38>
 8007a2c:	4629      	mov	r1, r5
 8007a2e:	4638      	mov	r0, r7
 8007a30:	47c0      	blx	r8
 8007a32:	4306      	orrs	r6, r0
 8007a34:	3568      	adds	r5, #104	@ 0x68
 8007a36:	e7e9      	b.n	8007a0c <_fwalk_sglue+0x10>

08007a38 <iprintf>:
 8007a38:	b40f      	push	{r0, r1, r2, r3}
 8007a3a:	b507      	push	{r0, r1, r2, lr}
 8007a3c:	4906      	ldr	r1, [pc, #24]	@ (8007a58 <iprintf+0x20>)
 8007a3e:	ab04      	add	r3, sp, #16
 8007a40:	6808      	ldr	r0, [r1, #0]
 8007a42:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a46:	6881      	ldr	r1, [r0, #8]
 8007a48:	9301      	str	r3, [sp, #4]
 8007a4a:	f000 faf1 	bl	8008030 <_vfiprintf_r>
 8007a4e:	b003      	add	sp, #12
 8007a50:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a54:	b004      	add	sp, #16
 8007a56:	4770      	bx	lr
 8007a58:	2000001c 	.word	0x2000001c

08007a5c <putchar>:
 8007a5c:	4b02      	ldr	r3, [pc, #8]	@ (8007a68 <putchar+0xc>)
 8007a5e:	4601      	mov	r1, r0
 8007a60:	6818      	ldr	r0, [r3, #0]
 8007a62:	6882      	ldr	r2, [r0, #8]
 8007a64:	f000 be98 	b.w	8008798 <_putc_r>
 8007a68:	2000001c 	.word	0x2000001c

08007a6c <_puts_r>:
 8007a6c:	6a03      	ldr	r3, [r0, #32]
 8007a6e:	b570      	push	{r4, r5, r6, lr}
 8007a70:	6884      	ldr	r4, [r0, #8]
 8007a72:	4605      	mov	r5, r0
 8007a74:	460e      	mov	r6, r1
 8007a76:	b90b      	cbnz	r3, 8007a7c <_puts_r+0x10>
 8007a78:	f7ff ffa8 	bl	80079cc <__sinit>
 8007a7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a7e:	07db      	lsls	r3, r3, #31
 8007a80:	d405      	bmi.n	8007a8e <_puts_r+0x22>
 8007a82:	89a3      	ldrh	r3, [r4, #12]
 8007a84:	0598      	lsls	r0, r3, #22
 8007a86:	d402      	bmi.n	8007a8e <_puts_r+0x22>
 8007a88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a8a:	f000 f99e 	bl	8007dca <__retarget_lock_acquire_recursive>
 8007a8e:	89a3      	ldrh	r3, [r4, #12]
 8007a90:	0719      	lsls	r1, r3, #28
 8007a92:	d502      	bpl.n	8007a9a <_puts_r+0x2e>
 8007a94:	6923      	ldr	r3, [r4, #16]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d135      	bne.n	8007b06 <_puts_r+0x9a>
 8007a9a:	4621      	mov	r1, r4
 8007a9c:	4628      	mov	r0, r5
 8007a9e:	f000 f8c5 	bl	8007c2c <__swsetup_r>
 8007aa2:	b380      	cbz	r0, 8007b06 <_puts_r+0x9a>
 8007aa4:	f04f 35ff 	mov.w	r5, #4294967295
 8007aa8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007aaa:	07da      	lsls	r2, r3, #31
 8007aac:	d405      	bmi.n	8007aba <_puts_r+0x4e>
 8007aae:	89a3      	ldrh	r3, [r4, #12]
 8007ab0:	059b      	lsls	r3, r3, #22
 8007ab2:	d402      	bmi.n	8007aba <_puts_r+0x4e>
 8007ab4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ab6:	f000 f989 	bl	8007dcc <__retarget_lock_release_recursive>
 8007aba:	4628      	mov	r0, r5
 8007abc:	bd70      	pop	{r4, r5, r6, pc}
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	da04      	bge.n	8007acc <_puts_r+0x60>
 8007ac2:	69a2      	ldr	r2, [r4, #24]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	dc17      	bgt.n	8007af8 <_puts_r+0x8c>
 8007ac8:	290a      	cmp	r1, #10
 8007aca:	d015      	beq.n	8007af8 <_puts_r+0x8c>
 8007acc:	6823      	ldr	r3, [r4, #0]
 8007ace:	1c5a      	adds	r2, r3, #1
 8007ad0:	6022      	str	r2, [r4, #0]
 8007ad2:	7019      	strb	r1, [r3, #0]
 8007ad4:	68a3      	ldr	r3, [r4, #8]
 8007ad6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007ada:	3b01      	subs	r3, #1
 8007adc:	60a3      	str	r3, [r4, #8]
 8007ade:	2900      	cmp	r1, #0
 8007ae0:	d1ed      	bne.n	8007abe <_puts_r+0x52>
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	da11      	bge.n	8007b0a <_puts_r+0x9e>
 8007ae6:	4622      	mov	r2, r4
 8007ae8:	210a      	movs	r1, #10
 8007aea:	4628      	mov	r0, r5
 8007aec:	f000 f85f 	bl	8007bae <__swbuf_r>
 8007af0:	3001      	adds	r0, #1
 8007af2:	d0d7      	beq.n	8007aa4 <_puts_r+0x38>
 8007af4:	250a      	movs	r5, #10
 8007af6:	e7d7      	b.n	8007aa8 <_puts_r+0x3c>
 8007af8:	4622      	mov	r2, r4
 8007afa:	4628      	mov	r0, r5
 8007afc:	f000 f857 	bl	8007bae <__swbuf_r>
 8007b00:	3001      	adds	r0, #1
 8007b02:	d1e7      	bne.n	8007ad4 <_puts_r+0x68>
 8007b04:	e7ce      	b.n	8007aa4 <_puts_r+0x38>
 8007b06:	3e01      	subs	r6, #1
 8007b08:	e7e4      	b.n	8007ad4 <_puts_r+0x68>
 8007b0a:	6823      	ldr	r3, [r4, #0]
 8007b0c:	1c5a      	adds	r2, r3, #1
 8007b0e:	6022      	str	r2, [r4, #0]
 8007b10:	220a      	movs	r2, #10
 8007b12:	701a      	strb	r2, [r3, #0]
 8007b14:	e7ee      	b.n	8007af4 <_puts_r+0x88>
	...

08007b18 <puts>:
 8007b18:	4b02      	ldr	r3, [pc, #8]	@ (8007b24 <puts+0xc>)
 8007b1a:	4601      	mov	r1, r0
 8007b1c:	6818      	ldr	r0, [r3, #0]
 8007b1e:	f7ff bfa5 	b.w	8007a6c <_puts_r>
 8007b22:	bf00      	nop
 8007b24:	2000001c 	.word	0x2000001c

08007b28 <__sread>:
 8007b28:	b510      	push	{r4, lr}
 8007b2a:	460c      	mov	r4, r1
 8007b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b30:	f000 f8fc 	bl	8007d2c <_read_r>
 8007b34:	2800      	cmp	r0, #0
 8007b36:	bfab      	itete	ge
 8007b38:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007b3a:	89a3      	ldrhlt	r3, [r4, #12]
 8007b3c:	181b      	addge	r3, r3, r0
 8007b3e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007b42:	bfac      	ite	ge
 8007b44:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007b46:	81a3      	strhlt	r3, [r4, #12]
 8007b48:	bd10      	pop	{r4, pc}

08007b4a <__swrite>:
 8007b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b4e:	461f      	mov	r7, r3
 8007b50:	898b      	ldrh	r3, [r1, #12]
 8007b52:	05db      	lsls	r3, r3, #23
 8007b54:	4605      	mov	r5, r0
 8007b56:	460c      	mov	r4, r1
 8007b58:	4616      	mov	r6, r2
 8007b5a:	d505      	bpl.n	8007b68 <__swrite+0x1e>
 8007b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b60:	2302      	movs	r3, #2
 8007b62:	2200      	movs	r2, #0
 8007b64:	f000 f8d0 	bl	8007d08 <_lseek_r>
 8007b68:	89a3      	ldrh	r3, [r4, #12]
 8007b6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b72:	81a3      	strh	r3, [r4, #12]
 8007b74:	4632      	mov	r2, r6
 8007b76:	463b      	mov	r3, r7
 8007b78:	4628      	mov	r0, r5
 8007b7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b7e:	f000 b8e7 	b.w	8007d50 <_write_r>

08007b82 <__sseek>:
 8007b82:	b510      	push	{r4, lr}
 8007b84:	460c      	mov	r4, r1
 8007b86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b8a:	f000 f8bd 	bl	8007d08 <_lseek_r>
 8007b8e:	1c43      	adds	r3, r0, #1
 8007b90:	89a3      	ldrh	r3, [r4, #12]
 8007b92:	bf15      	itete	ne
 8007b94:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007b96:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007b9a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007b9e:	81a3      	strheq	r3, [r4, #12]
 8007ba0:	bf18      	it	ne
 8007ba2:	81a3      	strhne	r3, [r4, #12]
 8007ba4:	bd10      	pop	{r4, pc}

08007ba6 <__sclose>:
 8007ba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007baa:	f000 b89d 	b.w	8007ce8 <_close_r>

08007bae <__swbuf_r>:
 8007bae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bb0:	460e      	mov	r6, r1
 8007bb2:	4614      	mov	r4, r2
 8007bb4:	4605      	mov	r5, r0
 8007bb6:	b118      	cbz	r0, 8007bc0 <__swbuf_r+0x12>
 8007bb8:	6a03      	ldr	r3, [r0, #32]
 8007bba:	b90b      	cbnz	r3, 8007bc0 <__swbuf_r+0x12>
 8007bbc:	f7ff ff06 	bl	80079cc <__sinit>
 8007bc0:	69a3      	ldr	r3, [r4, #24]
 8007bc2:	60a3      	str	r3, [r4, #8]
 8007bc4:	89a3      	ldrh	r3, [r4, #12]
 8007bc6:	071a      	lsls	r2, r3, #28
 8007bc8:	d501      	bpl.n	8007bce <__swbuf_r+0x20>
 8007bca:	6923      	ldr	r3, [r4, #16]
 8007bcc:	b943      	cbnz	r3, 8007be0 <__swbuf_r+0x32>
 8007bce:	4621      	mov	r1, r4
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	f000 f82b 	bl	8007c2c <__swsetup_r>
 8007bd6:	b118      	cbz	r0, 8007be0 <__swbuf_r+0x32>
 8007bd8:	f04f 37ff 	mov.w	r7, #4294967295
 8007bdc:	4638      	mov	r0, r7
 8007bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007be0:	6823      	ldr	r3, [r4, #0]
 8007be2:	6922      	ldr	r2, [r4, #16]
 8007be4:	1a98      	subs	r0, r3, r2
 8007be6:	6963      	ldr	r3, [r4, #20]
 8007be8:	b2f6      	uxtb	r6, r6
 8007bea:	4283      	cmp	r3, r0
 8007bec:	4637      	mov	r7, r6
 8007bee:	dc05      	bgt.n	8007bfc <__swbuf_r+0x4e>
 8007bf0:	4621      	mov	r1, r4
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	f000 fd46 	bl	8008684 <_fflush_r>
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	d1ed      	bne.n	8007bd8 <__swbuf_r+0x2a>
 8007bfc:	68a3      	ldr	r3, [r4, #8]
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	60a3      	str	r3, [r4, #8]
 8007c02:	6823      	ldr	r3, [r4, #0]
 8007c04:	1c5a      	adds	r2, r3, #1
 8007c06:	6022      	str	r2, [r4, #0]
 8007c08:	701e      	strb	r6, [r3, #0]
 8007c0a:	6962      	ldr	r2, [r4, #20]
 8007c0c:	1c43      	adds	r3, r0, #1
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d004      	beq.n	8007c1c <__swbuf_r+0x6e>
 8007c12:	89a3      	ldrh	r3, [r4, #12]
 8007c14:	07db      	lsls	r3, r3, #31
 8007c16:	d5e1      	bpl.n	8007bdc <__swbuf_r+0x2e>
 8007c18:	2e0a      	cmp	r6, #10
 8007c1a:	d1df      	bne.n	8007bdc <__swbuf_r+0x2e>
 8007c1c:	4621      	mov	r1, r4
 8007c1e:	4628      	mov	r0, r5
 8007c20:	f000 fd30 	bl	8008684 <_fflush_r>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	d0d9      	beq.n	8007bdc <__swbuf_r+0x2e>
 8007c28:	e7d6      	b.n	8007bd8 <__swbuf_r+0x2a>
	...

08007c2c <__swsetup_r>:
 8007c2c:	b538      	push	{r3, r4, r5, lr}
 8007c2e:	4b29      	ldr	r3, [pc, #164]	@ (8007cd4 <__swsetup_r+0xa8>)
 8007c30:	4605      	mov	r5, r0
 8007c32:	6818      	ldr	r0, [r3, #0]
 8007c34:	460c      	mov	r4, r1
 8007c36:	b118      	cbz	r0, 8007c40 <__swsetup_r+0x14>
 8007c38:	6a03      	ldr	r3, [r0, #32]
 8007c3a:	b90b      	cbnz	r3, 8007c40 <__swsetup_r+0x14>
 8007c3c:	f7ff fec6 	bl	80079cc <__sinit>
 8007c40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c44:	0719      	lsls	r1, r3, #28
 8007c46:	d422      	bmi.n	8007c8e <__swsetup_r+0x62>
 8007c48:	06da      	lsls	r2, r3, #27
 8007c4a:	d407      	bmi.n	8007c5c <__swsetup_r+0x30>
 8007c4c:	2209      	movs	r2, #9
 8007c4e:	602a      	str	r2, [r5, #0]
 8007c50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c54:	81a3      	strh	r3, [r4, #12]
 8007c56:	f04f 30ff 	mov.w	r0, #4294967295
 8007c5a:	e033      	b.n	8007cc4 <__swsetup_r+0x98>
 8007c5c:	0758      	lsls	r0, r3, #29
 8007c5e:	d512      	bpl.n	8007c86 <__swsetup_r+0x5a>
 8007c60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c62:	b141      	cbz	r1, 8007c76 <__swsetup_r+0x4a>
 8007c64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c68:	4299      	cmp	r1, r3
 8007c6a:	d002      	beq.n	8007c72 <__swsetup_r+0x46>
 8007c6c:	4628      	mov	r0, r5
 8007c6e:	f000 f8bd 	bl	8007dec <_free_r>
 8007c72:	2300      	movs	r3, #0
 8007c74:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c76:	89a3      	ldrh	r3, [r4, #12]
 8007c78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007c7c:	81a3      	strh	r3, [r4, #12]
 8007c7e:	2300      	movs	r3, #0
 8007c80:	6063      	str	r3, [r4, #4]
 8007c82:	6923      	ldr	r3, [r4, #16]
 8007c84:	6023      	str	r3, [r4, #0]
 8007c86:	89a3      	ldrh	r3, [r4, #12]
 8007c88:	f043 0308 	orr.w	r3, r3, #8
 8007c8c:	81a3      	strh	r3, [r4, #12]
 8007c8e:	6923      	ldr	r3, [r4, #16]
 8007c90:	b94b      	cbnz	r3, 8007ca6 <__swsetup_r+0x7a>
 8007c92:	89a3      	ldrh	r3, [r4, #12]
 8007c94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007c98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c9c:	d003      	beq.n	8007ca6 <__swsetup_r+0x7a>
 8007c9e:	4621      	mov	r1, r4
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	f000 fd3d 	bl	8008720 <__smakebuf_r>
 8007ca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007caa:	f013 0201 	ands.w	r2, r3, #1
 8007cae:	d00a      	beq.n	8007cc6 <__swsetup_r+0x9a>
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	60a2      	str	r2, [r4, #8]
 8007cb4:	6962      	ldr	r2, [r4, #20]
 8007cb6:	4252      	negs	r2, r2
 8007cb8:	61a2      	str	r2, [r4, #24]
 8007cba:	6922      	ldr	r2, [r4, #16]
 8007cbc:	b942      	cbnz	r2, 8007cd0 <__swsetup_r+0xa4>
 8007cbe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007cc2:	d1c5      	bne.n	8007c50 <__swsetup_r+0x24>
 8007cc4:	bd38      	pop	{r3, r4, r5, pc}
 8007cc6:	0799      	lsls	r1, r3, #30
 8007cc8:	bf58      	it	pl
 8007cca:	6962      	ldrpl	r2, [r4, #20]
 8007ccc:	60a2      	str	r2, [r4, #8]
 8007cce:	e7f4      	b.n	8007cba <__swsetup_r+0x8e>
 8007cd0:	2000      	movs	r0, #0
 8007cd2:	e7f7      	b.n	8007cc4 <__swsetup_r+0x98>
 8007cd4:	2000001c 	.word	0x2000001c

08007cd8 <memset>:
 8007cd8:	4402      	add	r2, r0
 8007cda:	4603      	mov	r3, r0
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d100      	bne.n	8007ce2 <memset+0xa>
 8007ce0:	4770      	bx	lr
 8007ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ce6:	e7f9      	b.n	8007cdc <memset+0x4>

08007ce8 <_close_r>:
 8007ce8:	b538      	push	{r3, r4, r5, lr}
 8007cea:	4d06      	ldr	r5, [pc, #24]	@ (8007d04 <_close_r+0x1c>)
 8007cec:	2300      	movs	r3, #0
 8007cee:	4604      	mov	r4, r0
 8007cf0:	4608      	mov	r0, r1
 8007cf2:	602b      	str	r3, [r5, #0]
 8007cf4:	f7f9 f975 	bl	8000fe2 <_close>
 8007cf8:	1c43      	adds	r3, r0, #1
 8007cfa:	d102      	bne.n	8007d02 <_close_r+0x1a>
 8007cfc:	682b      	ldr	r3, [r5, #0]
 8007cfe:	b103      	cbz	r3, 8007d02 <_close_r+0x1a>
 8007d00:	6023      	str	r3, [r4, #0]
 8007d02:	bd38      	pop	{r3, r4, r5, pc}
 8007d04:	200060c4 	.word	0x200060c4

08007d08 <_lseek_r>:
 8007d08:	b538      	push	{r3, r4, r5, lr}
 8007d0a:	4d07      	ldr	r5, [pc, #28]	@ (8007d28 <_lseek_r+0x20>)
 8007d0c:	4604      	mov	r4, r0
 8007d0e:	4608      	mov	r0, r1
 8007d10:	4611      	mov	r1, r2
 8007d12:	2200      	movs	r2, #0
 8007d14:	602a      	str	r2, [r5, #0]
 8007d16:	461a      	mov	r2, r3
 8007d18:	f7f9 f98a 	bl	8001030 <_lseek>
 8007d1c:	1c43      	adds	r3, r0, #1
 8007d1e:	d102      	bne.n	8007d26 <_lseek_r+0x1e>
 8007d20:	682b      	ldr	r3, [r5, #0]
 8007d22:	b103      	cbz	r3, 8007d26 <_lseek_r+0x1e>
 8007d24:	6023      	str	r3, [r4, #0]
 8007d26:	bd38      	pop	{r3, r4, r5, pc}
 8007d28:	200060c4 	.word	0x200060c4

08007d2c <_read_r>:
 8007d2c:	b538      	push	{r3, r4, r5, lr}
 8007d2e:	4d07      	ldr	r5, [pc, #28]	@ (8007d4c <_read_r+0x20>)
 8007d30:	4604      	mov	r4, r0
 8007d32:	4608      	mov	r0, r1
 8007d34:	4611      	mov	r1, r2
 8007d36:	2200      	movs	r2, #0
 8007d38:	602a      	str	r2, [r5, #0]
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	f7f9 f918 	bl	8000f70 <_read>
 8007d40:	1c43      	adds	r3, r0, #1
 8007d42:	d102      	bne.n	8007d4a <_read_r+0x1e>
 8007d44:	682b      	ldr	r3, [r5, #0]
 8007d46:	b103      	cbz	r3, 8007d4a <_read_r+0x1e>
 8007d48:	6023      	str	r3, [r4, #0]
 8007d4a:	bd38      	pop	{r3, r4, r5, pc}
 8007d4c:	200060c4 	.word	0x200060c4

08007d50 <_write_r>:
 8007d50:	b538      	push	{r3, r4, r5, lr}
 8007d52:	4d07      	ldr	r5, [pc, #28]	@ (8007d70 <_write_r+0x20>)
 8007d54:	4604      	mov	r4, r0
 8007d56:	4608      	mov	r0, r1
 8007d58:	4611      	mov	r1, r2
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	602a      	str	r2, [r5, #0]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	f7f9 f923 	bl	8000faa <_write>
 8007d64:	1c43      	adds	r3, r0, #1
 8007d66:	d102      	bne.n	8007d6e <_write_r+0x1e>
 8007d68:	682b      	ldr	r3, [r5, #0]
 8007d6a:	b103      	cbz	r3, 8007d6e <_write_r+0x1e>
 8007d6c:	6023      	str	r3, [r4, #0]
 8007d6e:	bd38      	pop	{r3, r4, r5, pc}
 8007d70:	200060c4 	.word	0x200060c4

08007d74 <__errno>:
 8007d74:	4b01      	ldr	r3, [pc, #4]	@ (8007d7c <__errno+0x8>)
 8007d76:	6818      	ldr	r0, [r3, #0]
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop
 8007d7c:	2000001c 	.word	0x2000001c

08007d80 <__libc_init_array>:
 8007d80:	b570      	push	{r4, r5, r6, lr}
 8007d82:	4d0d      	ldr	r5, [pc, #52]	@ (8007db8 <__libc_init_array+0x38>)
 8007d84:	4c0d      	ldr	r4, [pc, #52]	@ (8007dbc <__libc_init_array+0x3c>)
 8007d86:	1b64      	subs	r4, r4, r5
 8007d88:	10a4      	asrs	r4, r4, #2
 8007d8a:	2600      	movs	r6, #0
 8007d8c:	42a6      	cmp	r6, r4
 8007d8e:	d109      	bne.n	8007da4 <__libc_init_array+0x24>
 8007d90:	4d0b      	ldr	r5, [pc, #44]	@ (8007dc0 <__libc_init_array+0x40>)
 8007d92:	4c0c      	ldr	r4, [pc, #48]	@ (8007dc4 <__libc_init_array+0x44>)
 8007d94:	f000 fd66 	bl	8008864 <_init>
 8007d98:	1b64      	subs	r4, r4, r5
 8007d9a:	10a4      	asrs	r4, r4, #2
 8007d9c:	2600      	movs	r6, #0
 8007d9e:	42a6      	cmp	r6, r4
 8007da0:	d105      	bne.n	8007dae <__libc_init_array+0x2e>
 8007da2:	bd70      	pop	{r4, r5, r6, pc}
 8007da4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007da8:	4798      	blx	r3
 8007daa:	3601      	adds	r6, #1
 8007dac:	e7ee      	b.n	8007d8c <__libc_init_array+0xc>
 8007dae:	f855 3b04 	ldr.w	r3, [r5], #4
 8007db2:	4798      	blx	r3
 8007db4:	3601      	adds	r6, #1
 8007db6:	e7f2      	b.n	8007d9e <__libc_init_array+0x1e>
 8007db8:	08008d74 	.word	0x08008d74
 8007dbc:	08008d74 	.word	0x08008d74
 8007dc0:	08008d74 	.word	0x08008d74
 8007dc4:	08008d78 	.word	0x08008d78

08007dc8 <__retarget_lock_init_recursive>:
 8007dc8:	4770      	bx	lr

08007dca <__retarget_lock_acquire_recursive>:
 8007dca:	4770      	bx	lr

08007dcc <__retarget_lock_release_recursive>:
 8007dcc:	4770      	bx	lr

08007dce <memcpy>:
 8007dce:	440a      	add	r2, r1
 8007dd0:	4291      	cmp	r1, r2
 8007dd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8007dd6:	d100      	bne.n	8007dda <memcpy+0xc>
 8007dd8:	4770      	bx	lr
 8007dda:	b510      	push	{r4, lr}
 8007ddc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007de0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007de4:	4291      	cmp	r1, r2
 8007de6:	d1f9      	bne.n	8007ddc <memcpy+0xe>
 8007de8:	bd10      	pop	{r4, pc}
	...

08007dec <_free_r>:
 8007dec:	b538      	push	{r3, r4, r5, lr}
 8007dee:	4605      	mov	r5, r0
 8007df0:	2900      	cmp	r1, #0
 8007df2:	d041      	beq.n	8007e78 <_free_r+0x8c>
 8007df4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007df8:	1f0c      	subs	r4, r1, #4
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	bfb8      	it	lt
 8007dfe:	18e4      	addlt	r4, r4, r3
 8007e00:	f000 f8e0 	bl	8007fc4 <__malloc_lock>
 8007e04:	4a1d      	ldr	r2, [pc, #116]	@ (8007e7c <_free_r+0x90>)
 8007e06:	6813      	ldr	r3, [r2, #0]
 8007e08:	b933      	cbnz	r3, 8007e18 <_free_r+0x2c>
 8007e0a:	6063      	str	r3, [r4, #4]
 8007e0c:	6014      	str	r4, [r2, #0]
 8007e0e:	4628      	mov	r0, r5
 8007e10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e14:	f000 b8dc 	b.w	8007fd0 <__malloc_unlock>
 8007e18:	42a3      	cmp	r3, r4
 8007e1a:	d908      	bls.n	8007e2e <_free_r+0x42>
 8007e1c:	6820      	ldr	r0, [r4, #0]
 8007e1e:	1821      	adds	r1, r4, r0
 8007e20:	428b      	cmp	r3, r1
 8007e22:	bf01      	itttt	eq
 8007e24:	6819      	ldreq	r1, [r3, #0]
 8007e26:	685b      	ldreq	r3, [r3, #4]
 8007e28:	1809      	addeq	r1, r1, r0
 8007e2a:	6021      	streq	r1, [r4, #0]
 8007e2c:	e7ed      	b.n	8007e0a <_free_r+0x1e>
 8007e2e:	461a      	mov	r2, r3
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	b10b      	cbz	r3, 8007e38 <_free_r+0x4c>
 8007e34:	42a3      	cmp	r3, r4
 8007e36:	d9fa      	bls.n	8007e2e <_free_r+0x42>
 8007e38:	6811      	ldr	r1, [r2, #0]
 8007e3a:	1850      	adds	r0, r2, r1
 8007e3c:	42a0      	cmp	r0, r4
 8007e3e:	d10b      	bne.n	8007e58 <_free_r+0x6c>
 8007e40:	6820      	ldr	r0, [r4, #0]
 8007e42:	4401      	add	r1, r0
 8007e44:	1850      	adds	r0, r2, r1
 8007e46:	4283      	cmp	r3, r0
 8007e48:	6011      	str	r1, [r2, #0]
 8007e4a:	d1e0      	bne.n	8007e0e <_free_r+0x22>
 8007e4c:	6818      	ldr	r0, [r3, #0]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	6053      	str	r3, [r2, #4]
 8007e52:	4408      	add	r0, r1
 8007e54:	6010      	str	r0, [r2, #0]
 8007e56:	e7da      	b.n	8007e0e <_free_r+0x22>
 8007e58:	d902      	bls.n	8007e60 <_free_r+0x74>
 8007e5a:	230c      	movs	r3, #12
 8007e5c:	602b      	str	r3, [r5, #0]
 8007e5e:	e7d6      	b.n	8007e0e <_free_r+0x22>
 8007e60:	6820      	ldr	r0, [r4, #0]
 8007e62:	1821      	adds	r1, r4, r0
 8007e64:	428b      	cmp	r3, r1
 8007e66:	bf04      	itt	eq
 8007e68:	6819      	ldreq	r1, [r3, #0]
 8007e6a:	685b      	ldreq	r3, [r3, #4]
 8007e6c:	6063      	str	r3, [r4, #4]
 8007e6e:	bf04      	itt	eq
 8007e70:	1809      	addeq	r1, r1, r0
 8007e72:	6021      	streq	r1, [r4, #0]
 8007e74:	6054      	str	r4, [r2, #4]
 8007e76:	e7ca      	b.n	8007e0e <_free_r+0x22>
 8007e78:	bd38      	pop	{r3, r4, r5, pc}
 8007e7a:	bf00      	nop
 8007e7c:	200060d0 	.word	0x200060d0

08007e80 <sbrk_aligned>:
 8007e80:	b570      	push	{r4, r5, r6, lr}
 8007e82:	4e0f      	ldr	r6, [pc, #60]	@ (8007ec0 <sbrk_aligned+0x40>)
 8007e84:	460c      	mov	r4, r1
 8007e86:	6831      	ldr	r1, [r6, #0]
 8007e88:	4605      	mov	r5, r0
 8007e8a:	b911      	cbnz	r1, 8007e92 <sbrk_aligned+0x12>
 8007e8c:	f000 fcda 	bl	8008844 <_sbrk_r>
 8007e90:	6030      	str	r0, [r6, #0]
 8007e92:	4621      	mov	r1, r4
 8007e94:	4628      	mov	r0, r5
 8007e96:	f000 fcd5 	bl	8008844 <_sbrk_r>
 8007e9a:	1c43      	adds	r3, r0, #1
 8007e9c:	d103      	bne.n	8007ea6 <sbrk_aligned+0x26>
 8007e9e:	f04f 34ff 	mov.w	r4, #4294967295
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	bd70      	pop	{r4, r5, r6, pc}
 8007ea6:	1cc4      	adds	r4, r0, #3
 8007ea8:	f024 0403 	bic.w	r4, r4, #3
 8007eac:	42a0      	cmp	r0, r4
 8007eae:	d0f8      	beq.n	8007ea2 <sbrk_aligned+0x22>
 8007eb0:	1a21      	subs	r1, r4, r0
 8007eb2:	4628      	mov	r0, r5
 8007eb4:	f000 fcc6 	bl	8008844 <_sbrk_r>
 8007eb8:	3001      	adds	r0, #1
 8007eba:	d1f2      	bne.n	8007ea2 <sbrk_aligned+0x22>
 8007ebc:	e7ef      	b.n	8007e9e <sbrk_aligned+0x1e>
 8007ebe:	bf00      	nop
 8007ec0:	200060cc 	.word	0x200060cc

08007ec4 <_malloc_r>:
 8007ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ec8:	1ccd      	adds	r5, r1, #3
 8007eca:	f025 0503 	bic.w	r5, r5, #3
 8007ece:	3508      	adds	r5, #8
 8007ed0:	2d0c      	cmp	r5, #12
 8007ed2:	bf38      	it	cc
 8007ed4:	250c      	movcc	r5, #12
 8007ed6:	2d00      	cmp	r5, #0
 8007ed8:	4606      	mov	r6, r0
 8007eda:	db01      	blt.n	8007ee0 <_malloc_r+0x1c>
 8007edc:	42a9      	cmp	r1, r5
 8007ede:	d904      	bls.n	8007eea <_malloc_r+0x26>
 8007ee0:	230c      	movs	r3, #12
 8007ee2:	6033      	str	r3, [r6, #0]
 8007ee4:	2000      	movs	r0, #0
 8007ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007fc0 <_malloc_r+0xfc>
 8007eee:	f000 f869 	bl	8007fc4 <__malloc_lock>
 8007ef2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ef6:	461c      	mov	r4, r3
 8007ef8:	bb44      	cbnz	r4, 8007f4c <_malloc_r+0x88>
 8007efa:	4629      	mov	r1, r5
 8007efc:	4630      	mov	r0, r6
 8007efe:	f7ff ffbf 	bl	8007e80 <sbrk_aligned>
 8007f02:	1c43      	adds	r3, r0, #1
 8007f04:	4604      	mov	r4, r0
 8007f06:	d158      	bne.n	8007fba <_malloc_r+0xf6>
 8007f08:	f8d8 4000 	ldr.w	r4, [r8]
 8007f0c:	4627      	mov	r7, r4
 8007f0e:	2f00      	cmp	r7, #0
 8007f10:	d143      	bne.n	8007f9a <_malloc_r+0xd6>
 8007f12:	2c00      	cmp	r4, #0
 8007f14:	d04b      	beq.n	8007fae <_malloc_r+0xea>
 8007f16:	6823      	ldr	r3, [r4, #0]
 8007f18:	4639      	mov	r1, r7
 8007f1a:	4630      	mov	r0, r6
 8007f1c:	eb04 0903 	add.w	r9, r4, r3
 8007f20:	f000 fc90 	bl	8008844 <_sbrk_r>
 8007f24:	4581      	cmp	r9, r0
 8007f26:	d142      	bne.n	8007fae <_malloc_r+0xea>
 8007f28:	6821      	ldr	r1, [r4, #0]
 8007f2a:	1a6d      	subs	r5, r5, r1
 8007f2c:	4629      	mov	r1, r5
 8007f2e:	4630      	mov	r0, r6
 8007f30:	f7ff ffa6 	bl	8007e80 <sbrk_aligned>
 8007f34:	3001      	adds	r0, #1
 8007f36:	d03a      	beq.n	8007fae <_malloc_r+0xea>
 8007f38:	6823      	ldr	r3, [r4, #0]
 8007f3a:	442b      	add	r3, r5
 8007f3c:	6023      	str	r3, [r4, #0]
 8007f3e:	f8d8 3000 	ldr.w	r3, [r8]
 8007f42:	685a      	ldr	r2, [r3, #4]
 8007f44:	bb62      	cbnz	r2, 8007fa0 <_malloc_r+0xdc>
 8007f46:	f8c8 7000 	str.w	r7, [r8]
 8007f4a:	e00f      	b.n	8007f6c <_malloc_r+0xa8>
 8007f4c:	6822      	ldr	r2, [r4, #0]
 8007f4e:	1b52      	subs	r2, r2, r5
 8007f50:	d420      	bmi.n	8007f94 <_malloc_r+0xd0>
 8007f52:	2a0b      	cmp	r2, #11
 8007f54:	d917      	bls.n	8007f86 <_malloc_r+0xc2>
 8007f56:	1961      	adds	r1, r4, r5
 8007f58:	42a3      	cmp	r3, r4
 8007f5a:	6025      	str	r5, [r4, #0]
 8007f5c:	bf18      	it	ne
 8007f5e:	6059      	strne	r1, [r3, #4]
 8007f60:	6863      	ldr	r3, [r4, #4]
 8007f62:	bf08      	it	eq
 8007f64:	f8c8 1000 	streq.w	r1, [r8]
 8007f68:	5162      	str	r2, [r4, r5]
 8007f6a:	604b      	str	r3, [r1, #4]
 8007f6c:	4630      	mov	r0, r6
 8007f6e:	f000 f82f 	bl	8007fd0 <__malloc_unlock>
 8007f72:	f104 000b 	add.w	r0, r4, #11
 8007f76:	1d23      	adds	r3, r4, #4
 8007f78:	f020 0007 	bic.w	r0, r0, #7
 8007f7c:	1ac2      	subs	r2, r0, r3
 8007f7e:	bf1c      	itt	ne
 8007f80:	1a1b      	subne	r3, r3, r0
 8007f82:	50a3      	strne	r3, [r4, r2]
 8007f84:	e7af      	b.n	8007ee6 <_malloc_r+0x22>
 8007f86:	6862      	ldr	r2, [r4, #4]
 8007f88:	42a3      	cmp	r3, r4
 8007f8a:	bf0c      	ite	eq
 8007f8c:	f8c8 2000 	streq.w	r2, [r8]
 8007f90:	605a      	strne	r2, [r3, #4]
 8007f92:	e7eb      	b.n	8007f6c <_malloc_r+0xa8>
 8007f94:	4623      	mov	r3, r4
 8007f96:	6864      	ldr	r4, [r4, #4]
 8007f98:	e7ae      	b.n	8007ef8 <_malloc_r+0x34>
 8007f9a:	463c      	mov	r4, r7
 8007f9c:	687f      	ldr	r7, [r7, #4]
 8007f9e:	e7b6      	b.n	8007f0e <_malloc_r+0x4a>
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	42a3      	cmp	r3, r4
 8007fa6:	d1fb      	bne.n	8007fa0 <_malloc_r+0xdc>
 8007fa8:	2300      	movs	r3, #0
 8007faa:	6053      	str	r3, [r2, #4]
 8007fac:	e7de      	b.n	8007f6c <_malloc_r+0xa8>
 8007fae:	230c      	movs	r3, #12
 8007fb0:	6033      	str	r3, [r6, #0]
 8007fb2:	4630      	mov	r0, r6
 8007fb4:	f000 f80c 	bl	8007fd0 <__malloc_unlock>
 8007fb8:	e794      	b.n	8007ee4 <_malloc_r+0x20>
 8007fba:	6005      	str	r5, [r0, #0]
 8007fbc:	e7d6      	b.n	8007f6c <_malloc_r+0xa8>
 8007fbe:	bf00      	nop
 8007fc0:	200060d0 	.word	0x200060d0

08007fc4 <__malloc_lock>:
 8007fc4:	4801      	ldr	r0, [pc, #4]	@ (8007fcc <__malloc_lock+0x8>)
 8007fc6:	f7ff bf00 	b.w	8007dca <__retarget_lock_acquire_recursive>
 8007fca:	bf00      	nop
 8007fcc:	200060c8 	.word	0x200060c8

08007fd0 <__malloc_unlock>:
 8007fd0:	4801      	ldr	r0, [pc, #4]	@ (8007fd8 <__malloc_unlock+0x8>)
 8007fd2:	f7ff befb 	b.w	8007dcc <__retarget_lock_release_recursive>
 8007fd6:	bf00      	nop
 8007fd8:	200060c8 	.word	0x200060c8

08007fdc <__sfputc_r>:
 8007fdc:	6893      	ldr	r3, [r2, #8]
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	b410      	push	{r4}
 8007fe4:	6093      	str	r3, [r2, #8]
 8007fe6:	da08      	bge.n	8007ffa <__sfputc_r+0x1e>
 8007fe8:	6994      	ldr	r4, [r2, #24]
 8007fea:	42a3      	cmp	r3, r4
 8007fec:	db01      	blt.n	8007ff2 <__sfputc_r+0x16>
 8007fee:	290a      	cmp	r1, #10
 8007ff0:	d103      	bne.n	8007ffa <__sfputc_r+0x1e>
 8007ff2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ff6:	f7ff bdda 	b.w	8007bae <__swbuf_r>
 8007ffa:	6813      	ldr	r3, [r2, #0]
 8007ffc:	1c58      	adds	r0, r3, #1
 8007ffe:	6010      	str	r0, [r2, #0]
 8008000:	7019      	strb	r1, [r3, #0]
 8008002:	4608      	mov	r0, r1
 8008004:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008008:	4770      	bx	lr

0800800a <__sfputs_r>:
 800800a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800800c:	4606      	mov	r6, r0
 800800e:	460f      	mov	r7, r1
 8008010:	4614      	mov	r4, r2
 8008012:	18d5      	adds	r5, r2, r3
 8008014:	42ac      	cmp	r4, r5
 8008016:	d101      	bne.n	800801c <__sfputs_r+0x12>
 8008018:	2000      	movs	r0, #0
 800801a:	e007      	b.n	800802c <__sfputs_r+0x22>
 800801c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008020:	463a      	mov	r2, r7
 8008022:	4630      	mov	r0, r6
 8008024:	f7ff ffda 	bl	8007fdc <__sfputc_r>
 8008028:	1c43      	adds	r3, r0, #1
 800802a:	d1f3      	bne.n	8008014 <__sfputs_r+0xa>
 800802c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008030 <_vfiprintf_r>:
 8008030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008034:	460d      	mov	r5, r1
 8008036:	b09d      	sub	sp, #116	@ 0x74
 8008038:	4614      	mov	r4, r2
 800803a:	4698      	mov	r8, r3
 800803c:	4606      	mov	r6, r0
 800803e:	b118      	cbz	r0, 8008048 <_vfiprintf_r+0x18>
 8008040:	6a03      	ldr	r3, [r0, #32]
 8008042:	b90b      	cbnz	r3, 8008048 <_vfiprintf_r+0x18>
 8008044:	f7ff fcc2 	bl	80079cc <__sinit>
 8008048:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800804a:	07d9      	lsls	r1, r3, #31
 800804c:	d405      	bmi.n	800805a <_vfiprintf_r+0x2a>
 800804e:	89ab      	ldrh	r3, [r5, #12]
 8008050:	059a      	lsls	r2, r3, #22
 8008052:	d402      	bmi.n	800805a <_vfiprintf_r+0x2a>
 8008054:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008056:	f7ff feb8 	bl	8007dca <__retarget_lock_acquire_recursive>
 800805a:	89ab      	ldrh	r3, [r5, #12]
 800805c:	071b      	lsls	r3, r3, #28
 800805e:	d501      	bpl.n	8008064 <_vfiprintf_r+0x34>
 8008060:	692b      	ldr	r3, [r5, #16]
 8008062:	b99b      	cbnz	r3, 800808c <_vfiprintf_r+0x5c>
 8008064:	4629      	mov	r1, r5
 8008066:	4630      	mov	r0, r6
 8008068:	f7ff fde0 	bl	8007c2c <__swsetup_r>
 800806c:	b170      	cbz	r0, 800808c <_vfiprintf_r+0x5c>
 800806e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008070:	07dc      	lsls	r4, r3, #31
 8008072:	d504      	bpl.n	800807e <_vfiprintf_r+0x4e>
 8008074:	f04f 30ff 	mov.w	r0, #4294967295
 8008078:	b01d      	add	sp, #116	@ 0x74
 800807a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800807e:	89ab      	ldrh	r3, [r5, #12]
 8008080:	0598      	lsls	r0, r3, #22
 8008082:	d4f7      	bmi.n	8008074 <_vfiprintf_r+0x44>
 8008084:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008086:	f7ff fea1 	bl	8007dcc <__retarget_lock_release_recursive>
 800808a:	e7f3      	b.n	8008074 <_vfiprintf_r+0x44>
 800808c:	2300      	movs	r3, #0
 800808e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008090:	2320      	movs	r3, #32
 8008092:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008096:	f8cd 800c 	str.w	r8, [sp, #12]
 800809a:	2330      	movs	r3, #48	@ 0x30
 800809c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800824c <_vfiprintf_r+0x21c>
 80080a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80080a4:	f04f 0901 	mov.w	r9, #1
 80080a8:	4623      	mov	r3, r4
 80080aa:	469a      	mov	sl, r3
 80080ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080b0:	b10a      	cbz	r2, 80080b6 <_vfiprintf_r+0x86>
 80080b2:	2a25      	cmp	r2, #37	@ 0x25
 80080b4:	d1f9      	bne.n	80080aa <_vfiprintf_r+0x7a>
 80080b6:	ebba 0b04 	subs.w	fp, sl, r4
 80080ba:	d00b      	beq.n	80080d4 <_vfiprintf_r+0xa4>
 80080bc:	465b      	mov	r3, fp
 80080be:	4622      	mov	r2, r4
 80080c0:	4629      	mov	r1, r5
 80080c2:	4630      	mov	r0, r6
 80080c4:	f7ff ffa1 	bl	800800a <__sfputs_r>
 80080c8:	3001      	adds	r0, #1
 80080ca:	f000 80a7 	beq.w	800821c <_vfiprintf_r+0x1ec>
 80080ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080d0:	445a      	add	r2, fp
 80080d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80080d4:	f89a 3000 	ldrb.w	r3, [sl]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f000 809f 	beq.w	800821c <_vfiprintf_r+0x1ec>
 80080de:	2300      	movs	r3, #0
 80080e0:	f04f 32ff 	mov.w	r2, #4294967295
 80080e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080e8:	f10a 0a01 	add.w	sl, sl, #1
 80080ec:	9304      	str	r3, [sp, #16]
 80080ee:	9307      	str	r3, [sp, #28]
 80080f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80080f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80080f6:	4654      	mov	r4, sl
 80080f8:	2205      	movs	r2, #5
 80080fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080fe:	4853      	ldr	r0, [pc, #332]	@ (800824c <_vfiprintf_r+0x21c>)
 8008100:	f7f8 f88e 	bl	8000220 <memchr>
 8008104:	9a04      	ldr	r2, [sp, #16]
 8008106:	b9d8      	cbnz	r0, 8008140 <_vfiprintf_r+0x110>
 8008108:	06d1      	lsls	r1, r2, #27
 800810a:	bf44      	itt	mi
 800810c:	2320      	movmi	r3, #32
 800810e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008112:	0713      	lsls	r3, r2, #28
 8008114:	bf44      	itt	mi
 8008116:	232b      	movmi	r3, #43	@ 0x2b
 8008118:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800811c:	f89a 3000 	ldrb.w	r3, [sl]
 8008120:	2b2a      	cmp	r3, #42	@ 0x2a
 8008122:	d015      	beq.n	8008150 <_vfiprintf_r+0x120>
 8008124:	9a07      	ldr	r2, [sp, #28]
 8008126:	4654      	mov	r4, sl
 8008128:	2000      	movs	r0, #0
 800812a:	f04f 0c0a 	mov.w	ip, #10
 800812e:	4621      	mov	r1, r4
 8008130:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008134:	3b30      	subs	r3, #48	@ 0x30
 8008136:	2b09      	cmp	r3, #9
 8008138:	d94b      	bls.n	80081d2 <_vfiprintf_r+0x1a2>
 800813a:	b1b0      	cbz	r0, 800816a <_vfiprintf_r+0x13a>
 800813c:	9207      	str	r2, [sp, #28]
 800813e:	e014      	b.n	800816a <_vfiprintf_r+0x13a>
 8008140:	eba0 0308 	sub.w	r3, r0, r8
 8008144:	fa09 f303 	lsl.w	r3, r9, r3
 8008148:	4313      	orrs	r3, r2
 800814a:	9304      	str	r3, [sp, #16]
 800814c:	46a2      	mov	sl, r4
 800814e:	e7d2      	b.n	80080f6 <_vfiprintf_r+0xc6>
 8008150:	9b03      	ldr	r3, [sp, #12]
 8008152:	1d19      	adds	r1, r3, #4
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	9103      	str	r1, [sp, #12]
 8008158:	2b00      	cmp	r3, #0
 800815a:	bfbb      	ittet	lt
 800815c:	425b      	neglt	r3, r3
 800815e:	f042 0202 	orrlt.w	r2, r2, #2
 8008162:	9307      	strge	r3, [sp, #28]
 8008164:	9307      	strlt	r3, [sp, #28]
 8008166:	bfb8      	it	lt
 8008168:	9204      	strlt	r2, [sp, #16]
 800816a:	7823      	ldrb	r3, [r4, #0]
 800816c:	2b2e      	cmp	r3, #46	@ 0x2e
 800816e:	d10a      	bne.n	8008186 <_vfiprintf_r+0x156>
 8008170:	7863      	ldrb	r3, [r4, #1]
 8008172:	2b2a      	cmp	r3, #42	@ 0x2a
 8008174:	d132      	bne.n	80081dc <_vfiprintf_r+0x1ac>
 8008176:	9b03      	ldr	r3, [sp, #12]
 8008178:	1d1a      	adds	r2, r3, #4
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	9203      	str	r2, [sp, #12]
 800817e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008182:	3402      	adds	r4, #2
 8008184:	9305      	str	r3, [sp, #20]
 8008186:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800825c <_vfiprintf_r+0x22c>
 800818a:	7821      	ldrb	r1, [r4, #0]
 800818c:	2203      	movs	r2, #3
 800818e:	4650      	mov	r0, sl
 8008190:	f7f8 f846 	bl	8000220 <memchr>
 8008194:	b138      	cbz	r0, 80081a6 <_vfiprintf_r+0x176>
 8008196:	9b04      	ldr	r3, [sp, #16]
 8008198:	eba0 000a 	sub.w	r0, r0, sl
 800819c:	2240      	movs	r2, #64	@ 0x40
 800819e:	4082      	lsls	r2, r0
 80081a0:	4313      	orrs	r3, r2
 80081a2:	3401      	adds	r4, #1
 80081a4:	9304      	str	r3, [sp, #16]
 80081a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081aa:	4829      	ldr	r0, [pc, #164]	@ (8008250 <_vfiprintf_r+0x220>)
 80081ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80081b0:	2206      	movs	r2, #6
 80081b2:	f7f8 f835 	bl	8000220 <memchr>
 80081b6:	2800      	cmp	r0, #0
 80081b8:	d03f      	beq.n	800823a <_vfiprintf_r+0x20a>
 80081ba:	4b26      	ldr	r3, [pc, #152]	@ (8008254 <_vfiprintf_r+0x224>)
 80081bc:	bb1b      	cbnz	r3, 8008206 <_vfiprintf_r+0x1d6>
 80081be:	9b03      	ldr	r3, [sp, #12]
 80081c0:	3307      	adds	r3, #7
 80081c2:	f023 0307 	bic.w	r3, r3, #7
 80081c6:	3308      	adds	r3, #8
 80081c8:	9303      	str	r3, [sp, #12]
 80081ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081cc:	443b      	add	r3, r7
 80081ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80081d0:	e76a      	b.n	80080a8 <_vfiprintf_r+0x78>
 80081d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80081d6:	460c      	mov	r4, r1
 80081d8:	2001      	movs	r0, #1
 80081da:	e7a8      	b.n	800812e <_vfiprintf_r+0xfe>
 80081dc:	2300      	movs	r3, #0
 80081de:	3401      	adds	r4, #1
 80081e0:	9305      	str	r3, [sp, #20]
 80081e2:	4619      	mov	r1, r3
 80081e4:	f04f 0c0a 	mov.w	ip, #10
 80081e8:	4620      	mov	r0, r4
 80081ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081ee:	3a30      	subs	r2, #48	@ 0x30
 80081f0:	2a09      	cmp	r2, #9
 80081f2:	d903      	bls.n	80081fc <_vfiprintf_r+0x1cc>
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d0c6      	beq.n	8008186 <_vfiprintf_r+0x156>
 80081f8:	9105      	str	r1, [sp, #20]
 80081fa:	e7c4      	b.n	8008186 <_vfiprintf_r+0x156>
 80081fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008200:	4604      	mov	r4, r0
 8008202:	2301      	movs	r3, #1
 8008204:	e7f0      	b.n	80081e8 <_vfiprintf_r+0x1b8>
 8008206:	ab03      	add	r3, sp, #12
 8008208:	9300      	str	r3, [sp, #0]
 800820a:	462a      	mov	r2, r5
 800820c:	4b12      	ldr	r3, [pc, #72]	@ (8008258 <_vfiprintf_r+0x228>)
 800820e:	a904      	add	r1, sp, #16
 8008210:	4630      	mov	r0, r6
 8008212:	f3af 8000 	nop.w
 8008216:	4607      	mov	r7, r0
 8008218:	1c78      	adds	r0, r7, #1
 800821a:	d1d6      	bne.n	80081ca <_vfiprintf_r+0x19a>
 800821c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800821e:	07d9      	lsls	r1, r3, #31
 8008220:	d405      	bmi.n	800822e <_vfiprintf_r+0x1fe>
 8008222:	89ab      	ldrh	r3, [r5, #12]
 8008224:	059a      	lsls	r2, r3, #22
 8008226:	d402      	bmi.n	800822e <_vfiprintf_r+0x1fe>
 8008228:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800822a:	f7ff fdcf 	bl	8007dcc <__retarget_lock_release_recursive>
 800822e:	89ab      	ldrh	r3, [r5, #12]
 8008230:	065b      	lsls	r3, r3, #25
 8008232:	f53f af1f 	bmi.w	8008074 <_vfiprintf_r+0x44>
 8008236:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008238:	e71e      	b.n	8008078 <_vfiprintf_r+0x48>
 800823a:	ab03      	add	r3, sp, #12
 800823c:	9300      	str	r3, [sp, #0]
 800823e:	462a      	mov	r2, r5
 8008240:	4b05      	ldr	r3, [pc, #20]	@ (8008258 <_vfiprintf_r+0x228>)
 8008242:	a904      	add	r1, sp, #16
 8008244:	4630      	mov	r0, r6
 8008246:	f000 f879 	bl	800833c <_printf_i>
 800824a:	e7e4      	b.n	8008216 <_vfiprintf_r+0x1e6>
 800824c:	08008d38 	.word	0x08008d38
 8008250:	08008d42 	.word	0x08008d42
 8008254:	00000000 	.word	0x00000000
 8008258:	0800800b 	.word	0x0800800b
 800825c:	08008d3e 	.word	0x08008d3e

08008260 <_printf_common>:
 8008260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008264:	4616      	mov	r6, r2
 8008266:	4698      	mov	r8, r3
 8008268:	688a      	ldr	r2, [r1, #8]
 800826a:	690b      	ldr	r3, [r1, #16]
 800826c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008270:	4293      	cmp	r3, r2
 8008272:	bfb8      	it	lt
 8008274:	4613      	movlt	r3, r2
 8008276:	6033      	str	r3, [r6, #0]
 8008278:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800827c:	4607      	mov	r7, r0
 800827e:	460c      	mov	r4, r1
 8008280:	b10a      	cbz	r2, 8008286 <_printf_common+0x26>
 8008282:	3301      	adds	r3, #1
 8008284:	6033      	str	r3, [r6, #0]
 8008286:	6823      	ldr	r3, [r4, #0]
 8008288:	0699      	lsls	r1, r3, #26
 800828a:	bf42      	ittt	mi
 800828c:	6833      	ldrmi	r3, [r6, #0]
 800828e:	3302      	addmi	r3, #2
 8008290:	6033      	strmi	r3, [r6, #0]
 8008292:	6825      	ldr	r5, [r4, #0]
 8008294:	f015 0506 	ands.w	r5, r5, #6
 8008298:	d106      	bne.n	80082a8 <_printf_common+0x48>
 800829a:	f104 0a19 	add.w	sl, r4, #25
 800829e:	68e3      	ldr	r3, [r4, #12]
 80082a0:	6832      	ldr	r2, [r6, #0]
 80082a2:	1a9b      	subs	r3, r3, r2
 80082a4:	42ab      	cmp	r3, r5
 80082a6:	dc26      	bgt.n	80082f6 <_printf_common+0x96>
 80082a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80082ac:	6822      	ldr	r2, [r4, #0]
 80082ae:	3b00      	subs	r3, #0
 80082b0:	bf18      	it	ne
 80082b2:	2301      	movne	r3, #1
 80082b4:	0692      	lsls	r2, r2, #26
 80082b6:	d42b      	bmi.n	8008310 <_printf_common+0xb0>
 80082b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80082bc:	4641      	mov	r1, r8
 80082be:	4638      	mov	r0, r7
 80082c0:	47c8      	blx	r9
 80082c2:	3001      	adds	r0, #1
 80082c4:	d01e      	beq.n	8008304 <_printf_common+0xa4>
 80082c6:	6823      	ldr	r3, [r4, #0]
 80082c8:	6922      	ldr	r2, [r4, #16]
 80082ca:	f003 0306 	and.w	r3, r3, #6
 80082ce:	2b04      	cmp	r3, #4
 80082d0:	bf02      	ittt	eq
 80082d2:	68e5      	ldreq	r5, [r4, #12]
 80082d4:	6833      	ldreq	r3, [r6, #0]
 80082d6:	1aed      	subeq	r5, r5, r3
 80082d8:	68a3      	ldr	r3, [r4, #8]
 80082da:	bf0c      	ite	eq
 80082dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082e0:	2500      	movne	r5, #0
 80082e2:	4293      	cmp	r3, r2
 80082e4:	bfc4      	itt	gt
 80082e6:	1a9b      	subgt	r3, r3, r2
 80082e8:	18ed      	addgt	r5, r5, r3
 80082ea:	2600      	movs	r6, #0
 80082ec:	341a      	adds	r4, #26
 80082ee:	42b5      	cmp	r5, r6
 80082f0:	d11a      	bne.n	8008328 <_printf_common+0xc8>
 80082f2:	2000      	movs	r0, #0
 80082f4:	e008      	b.n	8008308 <_printf_common+0xa8>
 80082f6:	2301      	movs	r3, #1
 80082f8:	4652      	mov	r2, sl
 80082fa:	4641      	mov	r1, r8
 80082fc:	4638      	mov	r0, r7
 80082fe:	47c8      	blx	r9
 8008300:	3001      	adds	r0, #1
 8008302:	d103      	bne.n	800830c <_printf_common+0xac>
 8008304:	f04f 30ff 	mov.w	r0, #4294967295
 8008308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800830c:	3501      	adds	r5, #1
 800830e:	e7c6      	b.n	800829e <_printf_common+0x3e>
 8008310:	18e1      	adds	r1, r4, r3
 8008312:	1c5a      	adds	r2, r3, #1
 8008314:	2030      	movs	r0, #48	@ 0x30
 8008316:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800831a:	4422      	add	r2, r4
 800831c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008320:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008324:	3302      	adds	r3, #2
 8008326:	e7c7      	b.n	80082b8 <_printf_common+0x58>
 8008328:	2301      	movs	r3, #1
 800832a:	4622      	mov	r2, r4
 800832c:	4641      	mov	r1, r8
 800832e:	4638      	mov	r0, r7
 8008330:	47c8      	blx	r9
 8008332:	3001      	adds	r0, #1
 8008334:	d0e6      	beq.n	8008304 <_printf_common+0xa4>
 8008336:	3601      	adds	r6, #1
 8008338:	e7d9      	b.n	80082ee <_printf_common+0x8e>
	...

0800833c <_printf_i>:
 800833c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008340:	7e0f      	ldrb	r7, [r1, #24]
 8008342:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008344:	2f78      	cmp	r7, #120	@ 0x78
 8008346:	4691      	mov	r9, r2
 8008348:	4680      	mov	r8, r0
 800834a:	460c      	mov	r4, r1
 800834c:	469a      	mov	sl, r3
 800834e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008352:	d807      	bhi.n	8008364 <_printf_i+0x28>
 8008354:	2f62      	cmp	r7, #98	@ 0x62
 8008356:	d80a      	bhi.n	800836e <_printf_i+0x32>
 8008358:	2f00      	cmp	r7, #0
 800835a:	f000 80d2 	beq.w	8008502 <_printf_i+0x1c6>
 800835e:	2f58      	cmp	r7, #88	@ 0x58
 8008360:	f000 80b9 	beq.w	80084d6 <_printf_i+0x19a>
 8008364:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008368:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800836c:	e03a      	b.n	80083e4 <_printf_i+0xa8>
 800836e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008372:	2b15      	cmp	r3, #21
 8008374:	d8f6      	bhi.n	8008364 <_printf_i+0x28>
 8008376:	a101      	add	r1, pc, #4	@ (adr r1, 800837c <_printf_i+0x40>)
 8008378:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800837c:	080083d5 	.word	0x080083d5
 8008380:	080083e9 	.word	0x080083e9
 8008384:	08008365 	.word	0x08008365
 8008388:	08008365 	.word	0x08008365
 800838c:	08008365 	.word	0x08008365
 8008390:	08008365 	.word	0x08008365
 8008394:	080083e9 	.word	0x080083e9
 8008398:	08008365 	.word	0x08008365
 800839c:	08008365 	.word	0x08008365
 80083a0:	08008365 	.word	0x08008365
 80083a4:	08008365 	.word	0x08008365
 80083a8:	080084e9 	.word	0x080084e9
 80083ac:	08008413 	.word	0x08008413
 80083b0:	080084a3 	.word	0x080084a3
 80083b4:	08008365 	.word	0x08008365
 80083b8:	08008365 	.word	0x08008365
 80083bc:	0800850b 	.word	0x0800850b
 80083c0:	08008365 	.word	0x08008365
 80083c4:	08008413 	.word	0x08008413
 80083c8:	08008365 	.word	0x08008365
 80083cc:	08008365 	.word	0x08008365
 80083d0:	080084ab 	.word	0x080084ab
 80083d4:	6833      	ldr	r3, [r6, #0]
 80083d6:	1d1a      	adds	r2, r3, #4
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	6032      	str	r2, [r6, #0]
 80083dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80083e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80083e4:	2301      	movs	r3, #1
 80083e6:	e09d      	b.n	8008524 <_printf_i+0x1e8>
 80083e8:	6833      	ldr	r3, [r6, #0]
 80083ea:	6820      	ldr	r0, [r4, #0]
 80083ec:	1d19      	adds	r1, r3, #4
 80083ee:	6031      	str	r1, [r6, #0]
 80083f0:	0606      	lsls	r6, r0, #24
 80083f2:	d501      	bpl.n	80083f8 <_printf_i+0xbc>
 80083f4:	681d      	ldr	r5, [r3, #0]
 80083f6:	e003      	b.n	8008400 <_printf_i+0xc4>
 80083f8:	0645      	lsls	r5, r0, #25
 80083fa:	d5fb      	bpl.n	80083f4 <_printf_i+0xb8>
 80083fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008400:	2d00      	cmp	r5, #0
 8008402:	da03      	bge.n	800840c <_printf_i+0xd0>
 8008404:	232d      	movs	r3, #45	@ 0x2d
 8008406:	426d      	negs	r5, r5
 8008408:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800840c:	4859      	ldr	r0, [pc, #356]	@ (8008574 <_printf_i+0x238>)
 800840e:	230a      	movs	r3, #10
 8008410:	e011      	b.n	8008436 <_printf_i+0xfa>
 8008412:	6821      	ldr	r1, [r4, #0]
 8008414:	6833      	ldr	r3, [r6, #0]
 8008416:	0608      	lsls	r0, r1, #24
 8008418:	f853 5b04 	ldr.w	r5, [r3], #4
 800841c:	d402      	bmi.n	8008424 <_printf_i+0xe8>
 800841e:	0649      	lsls	r1, r1, #25
 8008420:	bf48      	it	mi
 8008422:	b2ad      	uxthmi	r5, r5
 8008424:	2f6f      	cmp	r7, #111	@ 0x6f
 8008426:	4853      	ldr	r0, [pc, #332]	@ (8008574 <_printf_i+0x238>)
 8008428:	6033      	str	r3, [r6, #0]
 800842a:	bf14      	ite	ne
 800842c:	230a      	movne	r3, #10
 800842e:	2308      	moveq	r3, #8
 8008430:	2100      	movs	r1, #0
 8008432:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008436:	6866      	ldr	r6, [r4, #4]
 8008438:	60a6      	str	r6, [r4, #8]
 800843a:	2e00      	cmp	r6, #0
 800843c:	bfa2      	ittt	ge
 800843e:	6821      	ldrge	r1, [r4, #0]
 8008440:	f021 0104 	bicge.w	r1, r1, #4
 8008444:	6021      	strge	r1, [r4, #0]
 8008446:	b90d      	cbnz	r5, 800844c <_printf_i+0x110>
 8008448:	2e00      	cmp	r6, #0
 800844a:	d04b      	beq.n	80084e4 <_printf_i+0x1a8>
 800844c:	4616      	mov	r6, r2
 800844e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008452:	fb03 5711 	mls	r7, r3, r1, r5
 8008456:	5dc7      	ldrb	r7, [r0, r7]
 8008458:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800845c:	462f      	mov	r7, r5
 800845e:	42bb      	cmp	r3, r7
 8008460:	460d      	mov	r5, r1
 8008462:	d9f4      	bls.n	800844e <_printf_i+0x112>
 8008464:	2b08      	cmp	r3, #8
 8008466:	d10b      	bne.n	8008480 <_printf_i+0x144>
 8008468:	6823      	ldr	r3, [r4, #0]
 800846a:	07df      	lsls	r7, r3, #31
 800846c:	d508      	bpl.n	8008480 <_printf_i+0x144>
 800846e:	6923      	ldr	r3, [r4, #16]
 8008470:	6861      	ldr	r1, [r4, #4]
 8008472:	4299      	cmp	r1, r3
 8008474:	bfde      	ittt	le
 8008476:	2330      	movle	r3, #48	@ 0x30
 8008478:	f806 3c01 	strble.w	r3, [r6, #-1]
 800847c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008480:	1b92      	subs	r2, r2, r6
 8008482:	6122      	str	r2, [r4, #16]
 8008484:	f8cd a000 	str.w	sl, [sp]
 8008488:	464b      	mov	r3, r9
 800848a:	aa03      	add	r2, sp, #12
 800848c:	4621      	mov	r1, r4
 800848e:	4640      	mov	r0, r8
 8008490:	f7ff fee6 	bl	8008260 <_printf_common>
 8008494:	3001      	adds	r0, #1
 8008496:	d14a      	bne.n	800852e <_printf_i+0x1f2>
 8008498:	f04f 30ff 	mov.w	r0, #4294967295
 800849c:	b004      	add	sp, #16
 800849e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084a2:	6823      	ldr	r3, [r4, #0]
 80084a4:	f043 0320 	orr.w	r3, r3, #32
 80084a8:	6023      	str	r3, [r4, #0]
 80084aa:	4833      	ldr	r0, [pc, #204]	@ (8008578 <_printf_i+0x23c>)
 80084ac:	2778      	movs	r7, #120	@ 0x78
 80084ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80084b2:	6823      	ldr	r3, [r4, #0]
 80084b4:	6831      	ldr	r1, [r6, #0]
 80084b6:	061f      	lsls	r7, r3, #24
 80084b8:	f851 5b04 	ldr.w	r5, [r1], #4
 80084bc:	d402      	bmi.n	80084c4 <_printf_i+0x188>
 80084be:	065f      	lsls	r7, r3, #25
 80084c0:	bf48      	it	mi
 80084c2:	b2ad      	uxthmi	r5, r5
 80084c4:	6031      	str	r1, [r6, #0]
 80084c6:	07d9      	lsls	r1, r3, #31
 80084c8:	bf44      	itt	mi
 80084ca:	f043 0320 	orrmi.w	r3, r3, #32
 80084ce:	6023      	strmi	r3, [r4, #0]
 80084d0:	b11d      	cbz	r5, 80084da <_printf_i+0x19e>
 80084d2:	2310      	movs	r3, #16
 80084d4:	e7ac      	b.n	8008430 <_printf_i+0xf4>
 80084d6:	4827      	ldr	r0, [pc, #156]	@ (8008574 <_printf_i+0x238>)
 80084d8:	e7e9      	b.n	80084ae <_printf_i+0x172>
 80084da:	6823      	ldr	r3, [r4, #0]
 80084dc:	f023 0320 	bic.w	r3, r3, #32
 80084e0:	6023      	str	r3, [r4, #0]
 80084e2:	e7f6      	b.n	80084d2 <_printf_i+0x196>
 80084e4:	4616      	mov	r6, r2
 80084e6:	e7bd      	b.n	8008464 <_printf_i+0x128>
 80084e8:	6833      	ldr	r3, [r6, #0]
 80084ea:	6825      	ldr	r5, [r4, #0]
 80084ec:	6961      	ldr	r1, [r4, #20]
 80084ee:	1d18      	adds	r0, r3, #4
 80084f0:	6030      	str	r0, [r6, #0]
 80084f2:	062e      	lsls	r6, r5, #24
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	d501      	bpl.n	80084fc <_printf_i+0x1c0>
 80084f8:	6019      	str	r1, [r3, #0]
 80084fa:	e002      	b.n	8008502 <_printf_i+0x1c6>
 80084fc:	0668      	lsls	r0, r5, #25
 80084fe:	d5fb      	bpl.n	80084f8 <_printf_i+0x1bc>
 8008500:	8019      	strh	r1, [r3, #0]
 8008502:	2300      	movs	r3, #0
 8008504:	6123      	str	r3, [r4, #16]
 8008506:	4616      	mov	r6, r2
 8008508:	e7bc      	b.n	8008484 <_printf_i+0x148>
 800850a:	6833      	ldr	r3, [r6, #0]
 800850c:	1d1a      	adds	r2, r3, #4
 800850e:	6032      	str	r2, [r6, #0]
 8008510:	681e      	ldr	r6, [r3, #0]
 8008512:	6862      	ldr	r2, [r4, #4]
 8008514:	2100      	movs	r1, #0
 8008516:	4630      	mov	r0, r6
 8008518:	f7f7 fe82 	bl	8000220 <memchr>
 800851c:	b108      	cbz	r0, 8008522 <_printf_i+0x1e6>
 800851e:	1b80      	subs	r0, r0, r6
 8008520:	6060      	str	r0, [r4, #4]
 8008522:	6863      	ldr	r3, [r4, #4]
 8008524:	6123      	str	r3, [r4, #16]
 8008526:	2300      	movs	r3, #0
 8008528:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800852c:	e7aa      	b.n	8008484 <_printf_i+0x148>
 800852e:	6923      	ldr	r3, [r4, #16]
 8008530:	4632      	mov	r2, r6
 8008532:	4649      	mov	r1, r9
 8008534:	4640      	mov	r0, r8
 8008536:	47d0      	blx	sl
 8008538:	3001      	adds	r0, #1
 800853a:	d0ad      	beq.n	8008498 <_printf_i+0x15c>
 800853c:	6823      	ldr	r3, [r4, #0]
 800853e:	079b      	lsls	r3, r3, #30
 8008540:	d413      	bmi.n	800856a <_printf_i+0x22e>
 8008542:	68e0      	ldr	r0, [r4, #12]
 8008544:	9b03      	ldr	r3, [sp, #12]
 8008546:	4298      	cmp	r0, r3
 8008548:	bfb8      	it	lt
 800854a:	4618      	movlt	r0, r3
 800854c:	e7a6      	b.n	800849c <_printf_i+0x160>
 800854e:	2301      	movs	r3, #1
 8008550:	4632      	mov	r2, r6
 8008552:	4649      	mov	r1, r9
 8008554:	4640      	mov	r0, r8
 8008556:	47d0      	blx	sl
 8008558:	3001      	adds	r0, #1
 800855a:	d09d      	beq.n	8008498 <_printf_i+0x15c>
 800855c:	3501      	adds	r5, #1
 800855e:	68e3      	ldr	r3, [r4, #12]
 8008560:	9903      	ldr	r1, [sp, #12]
 8008562:	1a5b      	subs	r3, r3, r1
 8008564:	42ab      	cmp	r3, r5
 8008566:	dcf2      	bgt.n	800854e <_printf_i+0x212>
 8008568:	e7eb      	b.n	8008542 <_printf_i+0x206>
 800856a:	2500      	movs	r5, #0
 800856c:	f104 0619 	add.w	r6, r4, #25
 8008570:	e7f5      	b.n	800855e <_printf_i+0x222>
 8008572:	bf00      	nop
 8008574:	08008d49 	.word	0x08008d49
 8008578:	08008d5a 	.word	0x08008d5a

0800857c <__sflush_r>:
 800857c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008584:	0716      	lsls	r6, r2, #28
 8008586:	4605      	mov	r5, r0
 8008588:	460c      	mov	r4, r1
 800858a:	d454      	bmi.n	8008636 <__sflush_r+0xba>
 800858c:	684b      	ldr	r3, [r1, #4]
 800858e:	2b00      	cmp	r3, #0
 8008590:	dc02      	bgt.n	8008598 <__sflush_r+0x1c>
 8008592:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008594:	2b00      	cmp	r3, #0
 8008596:	dd48      	ble.n	800862a <__sflush_r+0xae>
 8008598:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800859a:	2e00      	cmp	r6, #0
 800859c:	d045      	beq.n	800862a <__sflush_r+0xae>
 800859e:	2300      	movs	r3, #0
 80085a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80085a4:	682f      	ldr	r7, [r5, #0]
 80085a6:	6a21      	ldr	r1, [r4, #32]
 80085a8:	602b      	str	r3, [r5, #0]
 80085aa:	d030      	beq.n	800860e <__sflush_r+0x92>
 80085ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80085ae:	89a3      	ldrh	r3, [r4, #12]
 80085b0:	0759      	lsls	r1, r3, #29
 80085b2:	d505      	bpl.n	80085c0 <__sflush_r+0x44>
 80085b4:	6863      	ldr	r3, [r4, #4]
 80085b6:	1ad2      	subs	r2, r2, r3
 80085b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80085ba:	b10b      	cbz	r3, 80085c0 <__sflush_r+0x44>
 80085bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80085be:	1ad2      	subs	r2, r2, r3
 80085c0:	2300      	movs	r3, #0
 80085c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80085c4:	6a21      	ldr	r1, [r4, #32]
 80085c6:	4628      	mov	r0, r5
 80085c8:	47b0      	blx	r6
 80085ca:	1c43      	adds	r3, r0, #1
 80085cc:	89a3      	ldrh	r3, [r4, #12]
 80085ce:	d106      	bne.n	80085de <__sflush_r+0x62>
 80085d0:	6829      	ldr	r1, [r5, #0]
 80085d2:	291d      	cmp	r1, #29
 80085d4:	d82b      	bhi.n	800862e <__sflush_r+0xb2>
 80085d6:	4a2a      	ldr	r2, [pc, #168]	@ (8008680 <__sflush_r+0x104>)
 80085d8:	410a      	asrs	r2, r1
 80085da:	07d6      	lsls	r6, r2, #31
 80085dc:	d427      	bmi.n	800862e <__sflush_r+0xb2>
 80085de:	2200      	movs	r2, #0
 80085e0:	6062      	str	r2, [r4, #4]
 80085e2:	04d9      	lsls	r1, r3, #19
 80085e4:	6922      	ldr	r2, [r4, #16]
 80085e6:	6022      	str	r2, [r4, #0]
 80085e8:	d504      	bpl.n	80085f4 <__sflush_r+0x78>
 80085ea:	1c42      	adds	r2, r0, #1
 80085ec:	d101      	bne.n	80085f2 <__sflush_r+0x76>
 80085ee:	682b      	ldr	r3, [r5, #0]
 80085f0:	b903      	cbnz	r3, 80085f4 <__sflush_r+0x78>
 80085f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80085f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085f6:	602f      	str	r7, [r5, #0]
 80085f8:	b1b9      	cbz	r1, 800862a <__sflush_r+0xae>
 80085fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80085fe:	4299      	cmp	r1, r3
 8008600:	d002      	beq.n	8008608 <__sflush_r+0x8c>
 8008602:	4628      	mov	r0, r5
 8008604:	f7ff fbf2 	bl	8007dec <_free_r>
 8008608:	2300      	movs	r3, #0
 800860a:	6363      	str	r3, [r4, #52]	@ 0x34
 800860c:	e00d      	b.n	800862a <__sflush_r+0xae>
 800860e:	2301      	movs	r3, #1
 8008610:	4628      	mov	r0, r5
 8008612:	47b0      	blx	r6
 8008614:	4602      	mov	r2, r0
 8008616:	1c50      	adds	r0, r2, #1
 8008618:	d1c9      	bne.n	80085ae <__sflush_r+0x32>
 800861a:	682b      	ldr	r3, [r5, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d0c6      	beq.n	80085ae <__sflush_r+0x32>
 8008620:	2b1d      	cmp	r3, #29
 8008622:	d001      	beq.n	8008628 <__sflush_r+0xac>
 8008624:	2b16      	cmp	r3, #22
 8008626:	d11e      	bne.n	8008666 <__sflush_r+0xea>
 8008628:	602f      	str	r7, [r5, #0]
 800862a:	2000      	movs	r0, #0
 800862c:	e022      	b.n	8008674 <__sflush_r+0xf8>
 800862e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008632:	b21b      	sxth	r3, r3
 8008634:	e01b      	b.n	800866e <__sflush_r+0xf2>
 8008636:	690f      	ldr	r7, [r1, #16]
 8008638:	2f00      	cmp	r7, #0
 800863a:	d0f6      	beq.n	800862a <__sflush_r+0xae>
 800863c:	0793      	lsls	r3, r2, #30
 800863e:	680e      	ldr	r6, [r1, #0]
 8008640:	bf08      	it	eq
 8008642:	694b      	ldreq	r3, [r1, #20]
 8008644:	600f      	str	r7, [r1, #0]
 8008646:	bf18      	it	ne
 8008648:	2300      	movne	r3, #0
 800864a:	eba6 0807 	sub.w	r8, r6, r7
 800864e:	608b      	str	r3, [r1, #8]
 8008650:	f1b8 0f00 	cmp.w	r8, #0
 8008654:	dde9      	ble.n	800862a <__sflush_r+0xae>
 8008656:	6a21      	ldr	r1, [r4, #32]
 8008658:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800865a:	4643      	mov	r3, r8
 800865c:	463a      	mov	r2, r7
 800865e:	4628      	mov	r0, r5
 8008660:	47b0      	blx	r6
 8008662:	2800      	cmp	r0, #0
 8008664:	dc08      	bgt.n	8008678 <__sflush_r+0xfc>
 8008666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800866a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800866e:	81a3      	strh	r3, [r4, #12]
 8008670:	f04f 30ff 	mov.w	r0, #4294967295
 8008674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008678:	4407      	add	r7, r0
 800867a:	eba8 0800 	sub.w	r8, r8, r0
 800867e:	e7e7      	b.n	8008650 <__sflush_r+0xd4>
 8008680:	dfbffffe 	.word	0xdfbffffe

08008684 <_fflush_r>:
 8008684:	b538      	push	{r3, r4, r5, lr}
 8008686:	690b      	ldr	r3, [r1, #16]
 8008688:	4605      	mov	r5, r0
 800868a:	460c      	mov	r4, r1
 800868c:	b913      	cbnz	r3, 8008694 <_fflush_r+0x10>
 800868e:	2500      	movs	r5, #0
 8008690:	4628      	mov	r0, r5
 8008692:	bd38      	pop	{r3, r4, r5, pc}
 8008694:	b118      	cbz	r0, 800869e <_fflush_r+0x1a>
 8008696:	6a03      	ldr	r3, [r0, #32]
 8008698:	b90b      	cbnz	r3, 800869e <_fflush_r+0x1a>
 800869a:	f7ff f997 	bl	80079cc <__sinit>
 800869e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d0f3      	beq.n	800868e <_fflush_r+0xa>
 80086a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80086a8:	07d0      	lsls	r0, r2, #31
 80086aa:	d404      	bmi.n	80086b6 <_fflush_r+0x32>
 80086ac:	0599      	lsls	r1, r3, #22
 80086ae:	d402      	bmi.n	80086b6 <_fflush_r+0x32>
 80086b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086b2:	f7ff fb8a 	bl	8007dca <__retarget_lock_acquire_recursive>
 80086b6:	4628      	mov	r0, r5
 80086b8:	4621      	mov	r1, r4
 80086ba:	f7ff ff5f 	bl	800857c <__sflush_r>
 80086be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80086c0:	07da      	lsls	r2, r3, #31
 80086c2:	4605      	mov	r5, r0
 80086c4:	d4e4      	bmi.n	8008690 <_fflush_r+0xc>
 80086c6:	89a3      	ldrh	r3, [r4, #12]
 80086c8:	059b      	lsls	r3, r3, #22
 80086ca:	d4e1      	bmi.n	8008690 <_fflush_r+0xc>
 80086cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086ce:	f7ff fb7d 	bl	8007dcc <__retarget_lock_release_recursive>
 80086d2:	e7dd      	b.n	8008690 <_fflush_r+0xc>

080086d4 <__swhatbuf_r>:
 80086d4:	b570      	push	{r4, r5, r6, lr}
 80086d6:	460c      	mov	r4, r1
 80086d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086dc:	2900      	cmp	r1, #0
 80086de:	b096      	sub	sp, #88	@ 0x58
 80086e0:	4615      	mov	r5, r2
 80086e2:	461e      	mov	r6, r3
 80086e4:	da0d      	bge.n	8008702 <__swhatbuf_r+0x2e>
 80086e6:	89a3      	ldrh	r3, [r4, #12]
 80086e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80086ec:	f04f 0100 	mov.w	r1, #0
 80086f0:	bf14      	ite	ne
 80086f2:	2340      	movne	r3, #64	@ 0x40
 80086f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80086f8:	2000      	movs	r0, #0
 80086fa:	6031      	str	r1, [r6, #0]
 80086fc:	602b      	str	r3, [r5, #0]
 80086fe:	b016      	add	sp, #88	@ 0x58
 8008700:	bd70      	pop	{r4, r5, r6, pc}
 8008702:	466a      	mov	r2, sp
 8008704:	f000 f87c 	bl	8008800 <_fstat_r>
 8008708:	2800      	cmp	r0, #0
 800870a:	dbec      	blt.n	80086e6 <__swhatbuf_r+0x12>
 800870c:	9901      	ldr	r1, [sp, #4]
 800870e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008712:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008716:	4259      	negs	r1, r3
 8008718:	4159      	adcs	r1, r3
 800871a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800871e:	e7eb      	b.n	80086f8 <__swhatbuf_r+0x24>

08008720 <__smakebuf_r>:
 8008720:	898b      	ldrh	r3, [r1, #12]
 8008722:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008724:	079d      	lsls	r5, r3, #30
 8008726:	4606      	mov	r6, r0
 8008728:	460c      	mov	r4, r1
 800872a:	d507      	bpl.n	800873c <__smakebuf_r+0x1c>
 800872c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008730:	6023      	str	r3, [r4, #0]
 8008732:	6123      	str	r3, [r4, #16]
 8008734:	2301      	movs	r3, #1
 8008736:	6163      	str	r3, [r4, #20]
 8008738:	b003      	add	sp, #12
 800873a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800873c:	ab01      	add	r3, sp, #4
 800873e:	466a      	mov	r2, sp
 8008740:	f7ff ffc8 	bl	80086d4 <__swhatbuf_r>
 8008744:	9f00      	ldr	r7, [sp, #0]
 8008746:	4605      	mov	r5, r0
 8008748:	4639      	mov	r1, r7
 800874a:	4630      	mov	r0, r6
 800874c:	f7ff fbba 	bl	8007ec4 <_malloc_r>
 8008750:	b948      	cbnz	r0, 8008766 <__smakebuf_r+0x46>
 8008752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008756:	059a      	lsls	r2, r3, #22
 8008758:	d4ee      	bmi.n	8008738 <__smakebuf_r+0x18>
 800875a:	f023 0303 	bic.w	r3, r3, #3
 800875e:	f043 0302 	orr.w	r3, r3, #2
 8008762:	81a3      	strh	r3, [r4, #12]
 8008764:	e7e2      	b.n	800872c <__smakebuf_r+0xc>
 8008766:	89a3      	ldrh	r3, [r4, #12]
 8008768:	6020      	str	r0, [r4, #0]
 800876a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800876e:	81a3      	strh	r3, [r4, #12]
 8008770:	9b01      	ldr	r3, [sp, #4]
 8008772:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008776:	b15b      	cbz	r3, 8008790 <__smakebuf_r+0x70>
 8008778:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800877c:	4630      	mov	r0, r6
 800877e:	f000 f851 	bl	8008824 <_isatty_r>
 8008782:	b128      	cbz	r0, 8008790 <__smakebuf_r+0x70>
 8008784:	89a3      	ldrh	r3, [r4, #12]
 8008786:	f023 0303 	bic.w	r3, r3, #3
 800878a:	f043 0301 	orr.w	r3, r3, #1
 800878e:	81a3      	strh	r3, [r4, #12]
 8008790:	89a3      	ldrh	r3, [r4, #12]
 8008792:	431d      	orrs	r5, r3
 8008794:	81a5      	strh	r5, [r4, #12]
 8008796:	e7cf      	b.n	8008738 <__smakebuf_r+0x18>

08008798 <_putc_r>:
 8008798:	b570      	push	{r4, r5, r6, lr}
 800879a:	460d      	mov	r5, r1
 800879c:	4614      	mov	r4, r2
 800879e:	4606      	mov	r6, r0
 80087a0:	b118      	cbz	r0, 80087aa <_putc_r+0x12>
 80087a2:	6a03      	ldr	r3, [r0, #32]
 80087a4:	b90b      	cbnz	r3, 80087aa <_putc_r+0x12>
 80087a6:	f7ff f911 	bl	80079cc <__sinit>
 80087aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80087ac:	07d8      	lsls	r0, r3, #31
 80087ae:	d405      	bmi.n	80087bc <_putc_r+0x24>
 80087b0:	89a3      	ldrh	r3, [r4, #12]
 80087b2:	0599      	lsls	r1, r3, #22
 80087b4:	d402      	bmi.n	80087bc <_putc_r+0x24>
 80087b6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087b8:	f7ff fb07 	bl	8007dca <__retarget_lock_acquire_recursive>
 80087bc:	68a3      	ldr	r3, [r4, #8]
 80087be:	3b01      	subs	r3, #1
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	60a3      	str	r3, [r4, #8]
 80087c4:	da05      	bge.n	80087d2 <_putc_r+0x3a>
 80087c6:	69a2      	ldr	r2, [r4, #24]
 80087c8:	4293      	cmp	r3, r2
 80087ca:	db12      	blt.n	80087f2 <_putc_r+0x5a>
 80087cc:	b2eb      	uxtb	r3, r5
 80087ce:	2b0a      	cmp	r3, #10
 80087d0:	d00f      	beq.n	80087f2 <_putc_r+0x5a>
 80087d2:	6823      	ldr	r3, [r4, #0]
 80087d4:	1c5a      	adds	r2, r3, #1
 80087d6:	6022      	str	r2, [r4, #0]
 80087d8:	701d      	strb	r5, [r3, #0]
 80087da:	b2ed      	uxtb	r5, r5
 80087dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80087de:	07da      	lsls	r2, r3, #31
 80087e0:	d405      	bmi.n	80087ee <_putc_r+0x56>
 80087e2:	89a3      	ldrh	r3, [r4, #12]
 80087e4:	059b      	lsls	r3, r3, #22
 80087e6:	d402      	bmi.n	80087ee <_putc_r+0x56>
 80087e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087ea:	f7ff faef 	bl	8007dcc <__retarget_lock_release_recursive>
 80087ee:	4628      	mov	r0, r5
 80087f0:	bd70      	pop	{r4, r5, r6, pc}
 80087f2:	4629      	mov	r1, r5
 80087f4:	4622      	mov	r2, r4
 80087f6:	4630      	mov	r0, r6
 80087f8:	f7ff f9d9 	bl	8007bae <__swbuf_r>
 80087fc:	4605      	mov	r5, r0
 80087fe:	e7ed      	b.n	80087dc <_putc_r+0x44>

08008800 <_fstat_r>:
 8008800:	b538      	push	{r3, r4, r5, lr}
 8008802:	4d07      	ldr	r5, [pc, #28]	@ (8008820 <_fstat_r+0x20>)
 8008804:	2300      	movs	r3, #0
 8008806:	4604      	mov	r4, r0
 8008808:	4608      	mov	r0, r1
 800880a:	4611      	mov	r1, r2
 800880c:	602b      	str	r3, [r5, #0]
 800880e:	f7f8 fbf4 	bl	8000ffa <_fstat>
 8008812:	1c43      	adds	r3, r0, #1
 8008814:	d102      	bne.n	800881c <_fstat_r+0x1c>
 8008816:	682b      	ldr	r3, [r5, #0]
 8008818:	b103      	cbz	r3, 800881c <_fstat_r+0x1c>
 800881a:	6023      	str	r3, [r4, #0]
 800881c:	bd38      	pop	{r3, r4, r5, pc}
 800881e:	bf00      	nop
 8008820:	200060c4 	.word	0x200060c4

08008824 <_isatty_r>:
 8008824:	b538      	push	{r3, r4, r5, lr}
 8008826:	4d06      	ldr	r5, [pc, #24]	@ (8008840 <_isatty_r+0x1c>)
 8008828:	2300      	movs	r3, #0
 800882a:	4604      	mov	r4, r0
 800882c:	4608      	mov	r0, r1
 800882e:	602b      	str	r3, [r5, #0]
 8008830:	f7f8 fbf3 	bl	800101a <_isatty>
 8008834:	1c43      	adds	r3, r0, #1
 8008836:	d102      	bne.n	800883e <_isatty_r+0x1a>
 8008838:	682b      	ldr	r3, [r5, #0]
 800883a:	b103      	cbz	r3, 800883e <_isatty_r+0x1a>
 800883c:	6023      	str	r3, [r4, #0]
 800883e:	bd38      	pop	{r3, r4, r5, pc}
 8008840:	200060c4 	.word	0x200060c4

08008844 <_sbrk_r>:
 8008844:	b538      	push	{r3, r4, r5, lr}
 8008846:	4d06      	ldr	r5, [pc, #24]	@ (8008860 <_sbrk_r+0x1c>)
 8008848:	2300      	movs	r3, #0
 800884a:	4604      	mov	r4, r0
 800884c:	4608      	mov	r0, r1
 800884e:	602b      	str	r3, [r5, #0]
 8008850:	f7f8 fbfc 	bl	800104c <_sbrk>
 8008854:	1c43      	adds	r3, r0, #1
 8008856:	d102      	bne.n	800885e <_sbrk_r+0x1a>
 8008858:	682b      	ldr	r3, [r5, #0]
 800885a:	b103      	cbz	r3, 800885e <_sbrk_r+0x1a>
 800885c:	6023      	str	r3, [r4, #0]
 800885e:	bd38      	pop	{r3, r4, r5, pc}
 8008860:	200060c4 	.word	0x200060c4

08008864 <_init>:
 8008864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008866:	bf00      	nop
 8008868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800886a:	bc08      	pop	{r3}
 800886c:	469e      	mov	lr, r3
 800886e:	4770      	bx	lr

08008870 <_fini>:
 8008870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008872:	bf00      	nop
 8008874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008876:	bc08      	pop	{r3}
 8008878:	469e      	mov	lr, r3
 800887a:	4770      	bx	lr
