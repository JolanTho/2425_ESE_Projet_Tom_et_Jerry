
Driver_Lid_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f00  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  080080e0  080080e0  000090e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086b4  080086b4  0000a06c  2**0
                  CONTENTS
  4 .ARM          00000008  080086b4  080086b4  000096b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086bc  080086bc  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086bc  080086bc  000096bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080086c0  080086c0  000096c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080086c4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005d94  2000006c  08008730  0000a06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005e00  08008730  0000ae00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130e3  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003491  00000000  00000000  0001d17f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  00020610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c7a  00000000  00000000  00021680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000205af  00000000  00000000  000222fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014e85  00000000  00000000  000428a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1549  00000000  00000000  0005772e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118c77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004918  00000000  00000000  00118cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0011d5d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080080c8 	.word	0x080080c8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	080080c8 	.word	0x080080c8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005b0:	b5b0      	push	{r4, r5, r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005b6:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <MX_FREERTOS_Init+0x2c>)
 80005b8:	1d3c      	adds	r4, r7, #4
 80005ba:	461d      	mov	r5, r3
 80005bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c0:	682b      	ldr	r3, [r5, #0]
 80005c2:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	2100      	movs	r1, #0
 80005c8:	4618      	mov	r0, r3
 80005ca:	f005 fbde 	bl	8005d8a <osThreadCreate>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4a03      	ldr	r2, [pc, #12]	@ (80005e0 <MX_FREERTOS_Init+0x30>)
 80005d2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005d4:	bf00      	nop
 80005d6:	3718      	adds	r7, #24
 80005d8:	46bd      	mov	sp, r7
 80005da:	bdb0      	pop	{r4, r5, r7, pc}
 80005dc:	080080ec 	.word	0x080080ec
 80005e0:	20000088 	.word	0x20000088

080005e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005ec:	2001      	movs	r0, #1
 80005ee:	f005 fbf3 	bl	8005dd8 <osDelay>
 80005f2:	e7fb      	b.n	80005ec <StartDefaultTask+0x8>

080005f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80005fa:	4b12      	ldr	r3, [pc, #72]	@ (8000644 <MX_DMA_Init+0x50>)
 80005fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005fe:	4a11      	ldr	r2, [pc, #68]	@ (8000644 <MX_DMA_Init+0x50>)
 8000600:	f043 0304 	orr.w	r3, r3, #4
 8000604:	6493      	str	r3, [r2, #72]	@ 0x48
 8000606:	4b0f      	ldr	r3, [pc, #60]	@ (8000644 <MX_DMA_Init+0x50>)
 8000608:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800060a:	f003 0304 	and.w	r3, r3, #4
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000612:	4b0c      	ldr	r3, [pc, #48]	@ (8000644 <MX_DMA_Init+0x50>)
 8000614:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000616:	4a0b      	ldr	r2, [pc, #44]	@ (8000644 <MX_DMA_Init+0x50>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6493      	str	r3, [r2, #72]	@ 0x48
 800061e:	4b09      	ldr	r3, [pc, #36]	@ (8000644 <MX_DMA_Init+0x50>)
 8000620:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800062a:	2200      	movs	r2, #0
 800062c:	2105      	movs	r1, #5
 800062e:	200b      	movs	r0, #11
 8000630:	f000 ff8b 	bl	800154a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000634:	200b      	movs	r0, #11
 8000636:	f000 ffa2 	bl	800157e <HAL_NVIC_EnableIRQ>

}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40021000 	.word	0x40021000

08000648 <LIDAR_start_scan_dma>:
    printf("Error code : %04X\r\n", h_LIDAR->health_stat.error_code);

    return 0;
}

int LIDAR_start_scan_dma(h_LIDAR_t *h_LIDAR) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
    uint8_t cmd_buff[CMD_BUFF_SIZE] = {CMD_BEGIN, CMD_START}; // Commande pour démarrer le scan
 8000650:	f246 03a5 	movw	r3, #24741	@ 0x60a5
 8000654:	81bb      	strh	r3, [r7, #12]

    // Envoi de la commande
    if (h_LIDAR->serial_drv.it_transmit(cmd_buff, CMD_BUFF_SIZE) != 0) {
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	68db      	ldr	r3, [r3, #12]
 800065a:	f107 020c 	add.w	r2, r7, #12
 800065e:	2102      	movs	r1, #2
 8000660:	4610      	mov	r0, r2
 8000662:	4798      	blx	r3
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d005      	beq.n	8000676 <LIDAR_start_scan_dma+0x2e>
        printf("Erreur lors de l'envoi de la commande de démarrage du scan.\r\n");
 800066a:	4810      	ldr	r0, [pc, #64]	@ (80006ac <LIDAR_start_scan_dma+0x64>)
 800066c:	f006 fe94 	bl	8007398 <puts>
        return -1;
 8000670:	f04f 33ff 	mov.w	r3, #4294967295
 8000674:	e015      	b.n	80006a2 <LIDAR_start_scan_dma+0x5a>
    }

    // Configurer la réception DMA en mode circulaire
    if (h_LIDAR->serial_drv.dma_receive(h_LIDAR->processing.receive_buff, DATA_BUFF_SIZE) != 0) {
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	691b      	ldr	r3, [r3, #16]
 800067a:	687a      	ldr	r2, [r7, #4]
 800067c:	f502 620a 	add.w	r2, r2, #2208	@ 0x8a0
 8000680:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8000684:	4610      	mov	r0, r2
 8000686:	4798      	blx	r3
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d005      	beq.n	800069a <LIDAR_start_scan_dma+0x52>
        printf("Erreur lors de la configuration de la réception DMA.\r\n");
 800068e:	4808      	ldr	r0, [pc, #32]	@ (80006b0 <LIDAR_start_scan_dma+0x68>)
 8000690:	f006 fe82 	bl	8007398 <puts>
        return -2;
 8000694:	f06f 0301 	mvn.w	r3, #1
 8000698:	e003      	b.n	80006a2 <LIDAR_start_scan_dma+0x5a>
    }

    printf("Scan DMA demarre avec succes en mode circulaire.\r\n");
 800069a:	4806      	ldr	r0, [pc, #24]	@ (80006b4 <LIDAR_start_scan_dma+0x6c>)
 800069c:	f006 fe7c 	bl	8007398 <puts>
    return 0;
 80006a0:	2300      	movs	r3, #0
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	08008330 	.word	0x08008330
 80006b0:	08008370 	.word	0x08008370
 80006b4:	080083a8 	.word	0x080083a8

080006b8 <LIDAR_process_frame>:





void LIDAR_process_frame(h_LIDAR_t *LIDAR) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08e      	sub	sp, #56	@ 0x38
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
    uint8_t *buff = LIDAR->processing.receive_buff; // Buffer circulaire DMA
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 80006c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int buffer_size = DATA_BUFF_SIZE;              // Taille totale du buffer
 80006c8:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80006cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    int start_idx = 0;                             // Indice de départ pour parcourir le buffer
 80006ce:	2300      	movs	r3, #0
 80006d0:	637b      	str	r3, [r7, #52]	@ 0x34




    while (start_idx < buffer_size) {
 80006d2:	e0f3      	b.n	80008bc <LIDAR_process_frame+0x204>

        if (buff[start_idx] == 0xAA && buff[(start_idx + 1) % buffer_size] == 0x55) {
 80006d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80006d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80006d8:	4413      	add	r3, r2
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2baa      	cmp	r3, #170	@ 0xaa
 80006de:	f040 80ea 	bne.w	80008b6 <LIDAR_process_frame+0x1fe>
 80006e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80006e4:	3301      	adds	r3, #1
 80006e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80006e8:	fb93 f2f2 	sdiv	r2, r3, r2
 80006ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80006ee:	fb01 f202 	mul.w	r2, r1, r2
 80006f2:	1a9b      	subs	r3, r3, r2
 80006f4:	461a      	mov	r2, r3
 80006f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006f8:	4413      	add	r3, r2
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b55      	cmp	r3, #85	@ 0x55
 80006fe:	f040 80da 	bne.w	80008b6 <LIDAR_process_frame+0x1fe>

        	printf("Trame trouvee\r\n");
 8000702:	4875      	ldr	r0, [pc, #468]	@ (80008d8 <LIDAR_process_frame+0x220>)
 8000704:	f006 fe48 	bl	8007398 <puts>

            // L'entête est trouvé, extraire les métadonnées
            int header_idx = start_idx; // Index actuel pour début de trame
 8000708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800070a:	627b      	str	r3, [r7, #36]	@ 0x24
            uint16_t FSA = (buff[(header_idx + 4) % buffer_size] |
 800070c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800070e:	3304      	adds	r3, #4
 8000710:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000712:	fb93 f2f2 	sdiv	r2, r3, r2
 8000716:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000718:	fb01 f202 	mul.w	r2, r1, r2
 800071c:	1a9b      	subs	r3, r3, r2
 800071e:	461a      	mov	r2, r3
 8000720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000722:	4413      	add	r3, r2
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	4618      	mov	r0, r3
                            (buff[(header_idx + 5) % buffer_size] << 8)) >>
 8000728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800072a:	3305      	adds	r3, #5
 800072c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800072e:	fb93 f2f2 	sdiv	r2, r3, r2
 8000732:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000734:	fb01 f202 	mul.w	r2, r1, r2
 8000738:	1a9b      	subs	r3, r3, r2
 800073a:	461a      	mov	r2, r3
 800073c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800073e:	4413      	add	r3, r2
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	021b      	lsls	r3, r3, #8
            uint16_t FSA = (buff[(header_idx + 4) % buffer_size] |
 8000744:	4303      	orrs	r3, r0
                            (buff[(header_idx + 5) % buffer_size] << 8)) >>
 8000746:	11db      	asrs	r3, r3, #7
            uint16_t FSA = (buff[(header_idx + 4) % buffer_size] |
 8000748:	847b      	strh	r3, [r7, #34]	@ 0x22
                           7; // Angle de départ (en degrés)
            uint16_t LSA = (buff[(header_idx + 6) % buffer_size] |
 800074a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800074c:	3306      	adds	r3, #6
 800074e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000750:	fb93 f2f2 	sdiv	r2, r3, r2
 8000754:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000756:	fb01 f202 	mul.w	r2, r1, r2
 800075a:	1a9b      	subs	r3, r3, r2
 800075c:	461a      	mov	r2, r3
 800075e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000760:	4413      	add	r3, r2
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	4618      	mov	r0, r3
                            (buff[(header_idx + 7) % buffer_size] << 8)) >>
 8000766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000768:	3307      	adds	r3, #7
 800076a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800076c:	fb93 f2f2 	sdiv	r2, r3, r2
 8000770:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000772:	fb01 f202 	mul.w	r2, r1, r2
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	461a      	mov	r2, r3
 800077a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800077c:	4413      	add	r3, r2
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	021b      	lsls	r3, r3, #8
            uint16_t LSA = (buff[(header_idx + 6) % buffer_size] |
 8000782:	4303      	orrs	r3, r0
                            (buff[(header_idx + 7) % buffer_size] << 8)) >>
 8000784:	11db      	asrs	r3, r3, #7
            uint16_t LSA = (buff[(header_idx + 6) % buffer_size] |
 8000786:	843b      	strh	r3, [r7, #32]
                           7; // Angle de fin (en degrés)
            uint8_t LSN = buff[(header_idx + 3) % buffer_size]; // Nombre de points
 8000788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800078a:	3303      	adds	r3, #3
 800078c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800078e:	fb93 f2f2 	sdiv	r2, r3, r2
 8000792:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000794:	fb01 f202 	mul.w	r2, r1, r2
 8000798:	1a9b      	subs	r3, r3, r2
 800079a:	461a      	mov	r2, r3
 800079c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800079e:	4413      	add	r3, r2
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	77fb      	strb	r3, [r7, #31]

            // Calcul de la taille totale attendue de la trame
            int frame_size = 10 + LSN * 2; // 8 octets d'entête + 2 octets par point
 80007a4:	7ffb      	ldrb	r3, [r7, #31]
 80007a6:	3305      	adds	r3, #5
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	61bb      	str	r3, [r7, #24]
            if (frame_size > buffer_size) {
 80007ac:	69ba      	ldr	r2, [r7, #24]
 80007ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007b0:	429a      	cmp	r2, r3
 80007b2:	dd05      	ble.n	80007c0 <LIDAR_process_frame+0x108>
                printf("Erreur : Taille de la trame (%d) dépasse la taille du buffer (%d).\r\n", frame_size, buffer_size);
 80007b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80007b6:	69b9      	ldr	r1, [r7, #24]
 80007b8:	4848      	ldr	r0, [pc, #288]	@ (80008dc <LIDAR_process_frame+0x224>)
 80007ba:	f006 fd7d 	bl	80072b8 <iprintf>
                break;
 80007be:	e082      	b.n	80008c6 <LIDAR_process_frame+0x20e>
            }

            // Vérifier si toute la trame est contenue dans le buffer
            if ((start_idx + frame_size) % buffer_size < start_idx) {
 80007c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80007c2:	69bb      	ldr	r3, [r7, #24]
 80007c4:	4413      	add	r3, r2
 80007c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80007c8:	fb93 f2f2 	sdiv	r2, r3, r2
 80007cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80007ce:	fb01 f202 	mul.w	r2, r1, r2
 80007d2:	1a9b      	subs	r3, r3, r2
 80007d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80007d6:	429a      	cmp	r2, r3
 80007d8:	dd03      	ble.n	80007e2 <LIDAR_process_frame+0x12a>
                printf("Trame partielle detectee en fin de buffer. Ignoree.\r\n");
 80007da:	4841      	ldr	r0, [pc, #260]	@ (80008e0 <LIDAR_process_frame+0x228>)
 80007dc:	f006 fddc 	bl	8007398 <puts>
                break;
 80007e0:	e071      	b.n	80008c6 <LIDAR_process_frame+0x20e>
//                start_idx += 1; // Avancer pour trouver la prochaine trame valide
//                continue;
//            }

            // Traiter les données de la trame
            int *point_buff = LIDAR->processing.point_buff;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80007e8:	617b      	str	r3, [r7, #20]
            for (int i = 0; i < LSN; i++) {
 80007ea:	2300      	movs	r3, #0
 80007ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80007ee:	e053      	b.n	8000898 <LIDAR_process_frame+0x1e0>
                // Lecture de la distance brute
                uint16_t Si = buff[(header_idx + 10 + i * 2) % buffer_size] |
 80007f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007f2:	f103 020a 	add.w	r2, r3, #10
 80007f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	4413      	add	r3, r2
 80007fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80007fe:	fb93 f2f2 	sdiv	r2, r3, r2
 8000802:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000804:	fb01 f202 	mul.w	r2, r1, r2
 8000808:	1a9b      	subs	r3, r3, r2
 800080a:	461a      	mov	r2, r3
 800080c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800080e:	4413      	add	r3, r2
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	b21a      	sxth	r2, r3
                              (buff[(header_idx + 11 + i * 2) % buffer_size] << 8);
 8000814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000816:	f103 010b 	add.w	r1, r3, #11
 800081a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	440b      	add	r3, r1
 8000820:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000822:	fb93 f1f1 	sdiv	r1, r3, r1
 8000826:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000828:	fb00 f101 	mul.w	r1, r0, r1
 800082c:	1a5b      	subs	r3, r3, r1
 800082e:	4619      	mov	r1, r3
 8000830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000832:	440b      	add	r3, r1
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	021b      	lsls	r3, r3, #8
                uint16_t Si = buff[(header_idx + 10 + i * 2) % buffer_size] |
 8000838:	b21b      	sxth	r3, r3
 800083a:	4313      	orrs	r3, r2
 800083c:	b21b      	sxth	r3, r3
 800083e:	827b      	strh	r3, [r7, #18]
                int Di = Si / 4; // Distance réelle en mm
 8000840:	8a7b      	ldrh	r3, [r7, #18]
 8000842:	089b      	lsrs	r3, r3, #2
 8000844:	b29b      	uxth	r3, r3
 8000846:	60fb      	str	r3, [r7, #12]

                // Calcul de l'angle
                int Ai = (i+1)*abs(LSA-FSA)/(LSN-1) + FSA;
 8000848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800084a:	3301      	adds	r3, #1
 800084c:	8c39      	ldrh	r1, [r7, #32]
 800084e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8000850:	1a8a      	subs	r2, r1, r2
 8000852:	2a00      	cmp	r2, #0
 8000854:	bfb8      	it	lt
 8000856:	4252      	neglt	r2, r2
 8000858:	fb03 f202 	mul.w	r2, r3, r2
 800085c:	7ffb      	ldrb	r3, [r7, #31]
 800085e:	3b01      	subs	r3, #1
 8000860:	fb92 f2f3 	sdiv	r2, r2, r3
 8000864:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000866:	4413      	add	r3, r2
 8000868:	60bb      	str	r3, [r7, #8]
                // Stockage dans le buffer des points
                if (Di < 0 || Di > 2000) {
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	2b00      	cmp	r3, #0
 800086e:	db03      	blt.n	8000878 <LIDAR_process_frame+0x1c0>
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000876:	dd06      	ble.n	8000886 <LIDAR_process_frame+0x1ce>
                    point_buff[Ai] = 0; // Distance hors plage
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	697a      	ldr	r2, [r7, #20]
 800087e:	4413      	add	r3, r2
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	e005      	b.n	8000892 <LIDAR_process_frame+0x1da>
                } else {
                    point_buff[Ai] = Di; // Distance valide
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	697a      	ldr	r2, [r7, #20]
 800088c:	4413      	add	r3, r2
 800088e:	68fa      	ldr	r2, [r7, #12]
 8000890:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < LSN; i++) {
 8000892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000894:	3301      	adds	r3, #1
 8000896:	633b      	str	r3, [r7, #48]	@ 0x30
 8000898:	7ffb      	ldrb	r3, [r7, #31]
 800089a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800089c:	429a      	cmp	r2, r3
 800089e:	dba7      	blt.n	80007f0 <LIDAR_process_frame+0x138>
                }
            }

            printf("Trame traitee : FSA=%d, LSA=%d, Points=%d\r\n", FSA, LSA, LSN);
 80008a0:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 80008a2:	8c3a      	ldrh	r2, [r7, #32]
 80008a4:	7ffb      	ldrb	r3, [r7, #31]
 80008a6:	480f      	ldr	r0, [pc, #60]	@ (80008e4 <LIDAR_process_frame+0x22c>)
 80008a8:	f006 fd06 	bl	80072b8 <iprintf>

            // Avancer dans le buffer jusqu'à la fin de la trame traitée
            start_idx += frame_size;
 80008ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80008ae:	69bb      	ldr	r3, [r7, #24]
 80008b0:	4413      	add	r3, r2
 80008b2:	637b      	str	r3, [r7, #52]	@ 0x34
        if (buff[start_idx] == 0xAA && buff[(start_idx + 1) % buffer_size] == 0x55) {
 80008b4:	e002      	b.n	80008bc <LIDAR_process_frame+0x204>
        } else {
            // Avancer d'un octet si aucune entête valide n'est trouvée
            start_idx++;
 80008b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008b8:	3301      	adds	r3, #1
 80008ba:	637b      	str	r3, [r7, #52]	@ 0x34
    while (start_idx < buffer_size) {
 80008bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80008be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008c0:	429a      	cmp	r2, r3
 80008c2:	f6ff af07 	blt.w	80006d4 <LIDAR_process_frame+0x1c>
        }
    }

    LIDAR->rx_flag_dma = 0;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2200      	movs	r2, #0
 80008ca:	f883 2b21 	strb.w	r2, [r3, #2849]	@ 0xb21

}
 80008ce:	bf00      	nop
 80008d0:	3738      	adds	r7, #56	@ 0x38
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	080083dc 	.word	0x080083dc
 80008dc:	080083ec 	.word	0x080083ec
 80008e0:	08008434 	.word	0x08008434
 80008e4:	0800846c 	.word	0x0800846c

080008e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	@ 0x28
 80008ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fe:	4b2b      	ldr	r3, [pc, #172]	@ (80009ac <MX_GPIO_Init+0xc4>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000902:	4a2a      	ldr	r2, [pc, #168]	@ (80009ac <MX_GPIO_Init+0xc4>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800090a:	4b28      	ldr	r3, [pc, #160]	@ (80009ac <MX_GPIO_Init+0xc4>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000916:	4b25      	ldr	r3, [pc, #148]	@ (80009ac <MX_GPIO_Init+0xc4>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091a:	4a24      	ldr	r2, [pc, #144]	@ (80009ac <MX_GPIO_Init+0xc4>)
 800091c:	f043 0320 	orr.w	r3, r3, #32
 8000920:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000922:	4b22      	ldr	r3, [pc, #136]	@ (80009ac <MX_GPIO_Init+0xc4>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000926:	f003 0320 	and.w	r3, r3, #32
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b1f      	ldr	r3, [pc, #124]	@ (80009ac <MX_GPIO_Init+0xc4>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000932:	4a1e      	ldr	r2, [pc, #120]	@ (80009ac <MX_GPIO_Init+0xc4>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800093a:	4b1c      	ldr	r3, [pc, #112]	@ (80009ac <MX_GPIO_Init+0xc4>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000946:	4b19      	ldr	r3, [pc, #100]	@ (80009ac <MX_GPIO_Init+0xc4>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800094a:	4a18      	ldr	r2, [pc, #96]	@ (80009ac <MX_GPIO_Init+0xc4>)
 800094c:	f043 0302 	orr.w	r3, r3, #2
 8000950:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000952:	4b16      	ldr	r3, [pc, #88]	@ (80009ac <MX_GPIO_Init+0xc4>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000956:	f003 0302 	and.w	r3, r3, #2
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	2120      	movs	r1, #32
 8000962:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000966:	f001 fad9 	bl	8001f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800096a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800096e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000970:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000974:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4619      	mov	r1, r3
 8000980:	480b      	ldr	r0, [pc, #44]	@ (80009b0 <MX_GPIO_Init+0xc8>)
 8000982:	f001 f949 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000986:	2320      	movs	r3, #32
 8000988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009a0:	f001 f93a 	bl	8001c18 <HAL_GPIO_Init>

}
 80009a4:	bf00      	nop
 80009a6:	3728      	adds	r7, #40	@ 0x28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40021000 	.word	0x40021000
 80009b0:	48000800 	.word	0x48000800

080009b4 <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */

int __io_putchar(int ch) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80009bc:	1d39      	adds	r1, r7, #4
 80009be:	f04f 33ff 	mov.w	r3, #4294967295
 80009c2:	2201      	movs	r2, #1
 80009c4:	4803      	ldr	r0, [pc, #12]	@ (80009d4 <__io_putchar+0x20>)
 80009c6:	f002 fae3 	bl	8002f90 <HAL_UART_Transmit>
	return ch;
 80009ca:	687b      	ldr	r3, [r7, #4]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000c48 	.word	0x20000c48

080009d8 <uart_transmit>:

// Définir les fonctions UART pour le mode polling
int uart_transmit(uint8_t *p_data, uint16_t size) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	460b      	mov	r3, r1
 80009e2:	807b      	strh	r3, [r7, #2]
    return HAL_UART_Transmit(&huart4, p_data, size, HAL_MAX_DELAY);
 80009e4:	887a      	ldrh	r2, [r7, #2]
 80009e6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ea:	6879      	ldr	r1, [r7, #4]
 80009ec:	4803      	ldr	r0, [pc, #12]	@ (80009fc <uart_transmit+0x24>)
 80009ee:	f002 facf 	bl	8002f90 <HAL_UART_Transmit>
 80009f2:	4603      	mov	r3, r0
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000bb4 	.word	0x20000bb4

08000a00 <uart_poll_receive>:

int uart_poll_receive(uint8_t *p_data, uint16_t size) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	460b      	mov	r3, r1
 8000a0a:	807b      	strh	r3, [r7, #2]
    return HAL_UART_Receive(&huart4, p_data, size, 100);
 8000a0c:	887a      	ldrh	r2, [r7, #2]
 8000a0e:	2364      	movs	r3, #100	@ 0x64
 8000a10:	6879      	ldr	r1, [r7, #4]
 8000a12:	4804      	ldr	r0, [pc, #16]	@ (8000a24 <uart_poll_receive+0x24>)
 8000a14:	f002 fb4a 	bl	80030ac <HAL_UART_Receive>
 8000a18:	4603      	mov	r3, r0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000bb4 	.word	0x20000bb4

08000a28 <uart_it_receive>:

int uart_it_receive(uint8_t *p_data, uint16_t size){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	460b      	mov	r3, r1
 8000a32:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive_IT(&huart4, p_data, size);
 8000a34:	887b      	ldrh	r3, [r7, #2]
 8000a36:	461a      	mov	r2, r3
 8000a38:	6879      	ldr	r1, [r7, #4]
 8000a3a:	4804      	ldr	r0, [pc, #16]	@ (8000a4c <uart_it_receive+0x24>)
 8000a3c:	f002 fc92 	bl	8003364 <HAL_UART_Receive_IT>
	return 0;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000bb4 	.word	0x20000bb4

08000a50 <uart_it_transmit>:

int uart_it_transmit(uint8_t *p_data, uint16_t size){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	460b      	mov	r3, r1
 8000a5a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_IT(&huart4, p_data, size);
 8000a5c:	887b      	ldrh	r3, [r7, #2]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	6879      	ldr	r1, [r7, #4]
 8000a62:	4804      	ldr	r0, [pc, #16]	@ (8000a74 <uart_it_transmit+0x24>)
 8000a64:	f002 fbea 	bl	800323c <HAL_UART_Transmit_IT>
	return 0;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000bb4 	.word	0x20000bb4

08000a78 <uart_dma_receive>:

int uart_dma_receive(uint8_t *p_data, uint16_t size){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	460b      	mov	r3, r1
 8000a82:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive_DMA(&huart4, p_data, size);
 8000a84:	887b      	ldrh	r3, [r7, #2]
 8000a86:	461a      	mov	r2, r3
 8000a88:	6879      	ldr	r1, [r7, #4]
 8000a8a:	4804      	ldr	r0, [pc, #16]	@ (8000a9c <uart_dma_receive+0x24>)
 8000a8c:	f002 fd36 	bl	80034fc <HAL_UART_Receive_DMA>
	return 0;
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000bb4 	.word	0x20000bb4

08000aa0 <uart_dma_transmit>:

int uart_dma_transmit(uint8_t *p_data, uint16_t size){
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_DMA(&huart4, p_data, size);
 8000aac:	887b      	ldrh	r3, [r7, #2]
 8000aae:	461a      	mov	r2, r3
 8000ab0:	6879      	ldr	r1, [r7, #4]
 8000ab2:	4804      	ldr	r0, [pc, #16]	@ (8000ac4 <uart_dma_transmit+0x24>)
 8000ab4:	f002 fca2 	bl	80033fc <HAL_UART_Transmit_DMA>
	return 0;
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000bb4 	.word	0x20000bb4

08000ac8 <counter>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void counter (void * pvParameters){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	char* s = pcTaskGetName(xTaskGetCurrentTaskHandle());
 8000ad0:	f005 fe9a 	bl	8006808 <xTaskGetCurrentTaskHandle>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f005 fca4 	bl	8006424 <pcTaskGetName>
 8000adc:	60f8      	str	r0, [r7, #12]

	int h = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
//		  printf("LIDAR health status retrieved successfully.\r\n");
//	  } else {
//		  printf("Failed to retrieve LIDAR health status.\r\n");
//	  }

	  if (LIDAR_start_scan_dma(&lidar) == 0) {
 8000ae2:	482a      	ldr	r0, [pc, #168]	@ (8000b8c <counter+0xc4>)
 8000ae4:	f7ff fdb0 	bl	8000648 <LIDAR_start_scan_dma>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d103      	bne.n	8000af6 <counter+0x2e>
	      printf("LIDAR scanning started successfully.\r\n");
 8000aee:	4828      	ldr	r0, [pc, #160]	@ (8000b90 <counter+0xc8>)
 8000af0:	f006 fc52 	bl	8007398 <puts>
 8000af4:	e002      	b.n	8000afc <counter+0x34>
	  } else {
	      printf("Failed to start LIDAR scanning.\r\n");
 8000af6:	4827      	ldr	r0, [pc, #156]	@ (8000b94 <counter+0xcc>)
 8000af8:	f006 fc4e 	bl	8007398 <puts>
	  }

	while (1) {

		    if (lidar.serial_drv.dma_receive(lidar.processing.receive_buff, DATA_BUFF_SIZE) != 0) {
 8000afc:	4b23      	ldr	r3, [pc, #140]	@ (8000b8c <counter+0xc4>)
 8000afe:	691b      	ldr	r3, [r3, #16]
 8000b00:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8000b04:	4824      	ldr	r0, [pc, #144]	@ (8000b98 <counter+0xd0>)
 8000b06:	4798      	blx	r3
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d002      	beq.n	8000b14 <counter+0x4c>
		        printf("Erreur lors de la configuration de la réception DMA.\r\n");
 8000b0e:	4823      	ldr	r0, [pc, #140]	@ (8000b9c <counter+0xd4>)
 8000b10:	f006 fc42 	bl	8007398 <puts>
		    }

		printf("Je suis la tache %s et je m'endors pour %d periodes\r\n", s, DUREE);
 8000b14:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b18:	68f9      	ldr	r1, [r7, #12]
 8000b1a:	4821      	ldr	r0, [pc, #132]	@ (8000ba0 <counter+0xd8>)
 8000b1c:	f006 fbcc 	bl	80072b8 <iprintf>

		if(h >= 30){
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	2b1d      	cmp	r3, #29
 8000b24:	dd29      	ble.n	8000b7a <counter+0xb2>
			h=0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]

			printf("LIDAR Scan Results (Angle: Distance in mm):\r\n");
 8000b2a:	481e      	ldr	r0, [pc, #120]	@ (8000ba4 <counter+0xdc>)
 8000b2c:	f006 fc34 	bl	8007398 <puts>
	    for (int i = 0; i < 360; i++) {
 8000b30:	2300      	movs	r3, #0
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	e01a      	b.n	8000b6c <counter+0xa4>
	    		if (lidar.processing.point_buff[i] >= 0) { // Afficher uniquement les valeurs valides
 8000b36:	4a15      	ldr	r2, [pc, #84]	@ (8000b8c <counter+0xc4>)
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	33be      	adds	r3, #190	@ 0xbe
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	4413      	add	r3, r2
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	db0b      	blt.n	8000b5e <counter+0x96>
	    			printf("Angle %3d: %4d mm\r\n", i, lidar.processing.point_buff[i]);
 8000b46:	4a11      	ldr	r2, [pc, #68]	@ (8000b8c <counter+0xc4>)
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	33be      	adds	r3, #190	@ 0xbe
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	4413      	add	r3, r2
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	461a      	mov	r2, r3
 8000b54:	6939      	ldr	r1, [r7, #16]
 8000b56:	4814      	ldr	r0, [pc, #80]	@ (8000ba8 <counter+0xe0>)
 8000b58:	f006 fbae 	bl	80072b8 <iprintf>
 8000b5c:	e003      	b.n	8000b66 <counter+0x9e>
	    		} else {
	    			printf("Angle %3d: --- mm (No Data)\r\n", i);
 8000b5e:	6939      	ldr	r1, [r7, #16]
 8000b60:	4812      	ldr	r0, [pc, #72]	@ (8000bac <counter+0xe4>)
 8000b62:	f006 fba9 	bl	80072b8 <iprintf>
	    for (int i = 0; i < 360; i++) {
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000b72:	dbe0      	blt.n	8000b36 <counter+0x6e>
	    		}
	    }

	    printf("\n");
 8000b74:	200a      	movs	r0, #10
 8000b76:	f006 fbb1 	bl	80072dc <putchar>

		}

		h++;
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	617b      	str	r3, [r7, #20]
		vTaskDelay(DUREE);
 8000b80:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b84:	f005 fb24 	bl	80061d0 <vTaskDelay>
		    if (lidar.serial_drv.dma_receive(lidar.processing.receive_buff, DATA_BUFF_SIZE) != 0) {
 8000b88:	e7b8      	b.n	8000afc <counter+0x34>
 8000b8a:	bf00      	nop
 8000b8c:	2000008c 	.word	0x2000008c
 8000b90:	08008498 	.word	0x08008498
 8000b94:	080084c0 	.word	0x080084c0
 8000b98:	2000092c 	.word	0x2000092c
 8000b9c:	080084e4 	.word	0x080084e4
 8000ba0:	0800851c 	.word	0x0800851c
 8000ba4:	08008554 	.word	0x08008554
 8000ba8:	08008584 	.word	0x08008584
 8000bac:	08008598 	.word	0x08008598

08000bb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	BaseType_t xReturned;
	TaskHandle_t xHandle1 = NULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bba:	f000 fb7a 	bl	80012b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bbe:	f000 f855 	bl	8000c6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc2:	f7ff fe91 	bl	80008e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bc6:	f7ff fd15 	bl	80005f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000bca:	f000 fa2f 	bl	800102c <MX_USART2_UART_Init>
  MX_UART4_Init();
 8000bce:	f000 f9e1 	bl	8000f94 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  printf("=================== DRIVER LIDAR =================== \r\n");
 8000bd2:	481a      	ldr	r0, [pc, #104]	@ (8000c3c <main+0x8c>)
 8000bd4:	f006 fbe0 	bl	8007398 <puts>
   * Création des vérifications du lidar.
   */

	  // Déclaration et configuration de la structure h_LIDAR

	  lidar.serial_drv.transmit = uart_transmit;
 8000bd8:	4b19      	ldr	r3, [pc, #100]	@ (8000c40 <main+0x90>)
 8000bda:	4a1a      	ldr	r2, [pc, #104]	@ (8000c44 <main+0x94>)
 8000bdc:	601a      	str	r2, [r3, #0]
	  lidar.serial_drv.poll_receive = uart_poll_receive;
 8000bde:	4b18      	ldr	r3, [pc, #96]	@ (8000c40 <main+0x90>)
 8000be0:	4a19      	ldr	r2, [pc, #100]	@ (8000c48 <main+0x98>)
 8000be2:	605a      	str	r2, [r3, #4]

	  lidar.serial_drv.it_receive=uart_it_receive;
 8000be4:	4b16      	ldr	r3, [pc, #88]	@ (8000c40 <main+0x90>)
 8000be6:	4a19      	ldr	r2, [pc, #100]	@ (8000c4c <main+0x9c>)
 8000be8:	609a      	str	r2, [r3, #8]
	  lidar.serial_drv.it_transmit=uart_it_transmit;
 8000bea:	4b15      	ldr	r3, [pc, #84]	@ (8000c40 <main+0x90>)
 8000bec:	4a18      	ldr	r2, [pc, #96]	@ (8000c50 <main+0xa0>)
 8000bee:	60da      	str	r2, [r3, #12]

	  lidar.serial_drv.dma_receive=uart_dma_receive;
 8000bf0:	4b13      	ldr	r3, [pc, #76]	@ (8000c40 <main+0x90>)
 8000bf2:	4a18      	ldr	r2, [pc, #96]	@ (8000c54 <main+0xa4>)
 8000bf4:	611a      	str	r2, [r3, #16]
	  lidar.serial_drv.dma_transmit=uart_dma_transmit;
 8000bf6:	4b12      	ldr	r3, [pc, #72]	@ (8000c40 <main+0x90>)
 8000bf8:	4a17      	ldr	r2, [pc, #92]	@ (8000c58 <main+0xa8>)
 8000bfa:	615a      	str	r2, [r3, #20]

	xReturned = xTaskCreate(
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	9301      	str	r3, [sp, #4]
 8000c00:	2300      	movs	r3, #0
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	2300      	movs	r3, #0
 8000c06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c0a:	4914      	ldr	r1, [pc, #80]	@ (8000c5c <main+0xac>)
 8000c0c:	4814      	ldr	r0, [pc, #80]	@ (8000c60 <main+0xb0>)
 8000c0e:	f005 f9ab 	bl	8005f68 <xTaskCreate>
 8000c12:	6078      	str	r0, [r7, #4]
			STACK_SIZE, // Stack size in words, not bytes.
			(void *) NULL, // Parameter passed into the task.
			tskIDLE_PRIORITY,// Priority at which the task is created.
			&xHandle1 ); // Used to pass out the created task's handle.

	if (xReturned != pdPASS)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d004      	beq.n	8000c24 <main+0x74>
	{
		printf("Error creating Task\r\n");
 8000c1a:	4812      	ldr	r0, [pc, #72]	@ (8000c64 <main+0xb4>)
 8000c1c:	f006 fbbc 	bl	8007398 <puts>
		Error_Handler();
 8000c20:	f000 f888 	bl	8000d34 <Error_Handler>
	}

	printf("Tasks created\r\n");
 8000c24:	4810      	ldr	r0, [pc, #64]	@ (8000c68 <main+0xb8>)
 8000c26:	f006 fbb7 	bl	8007398 <puts>

	vTaskStartScheduler();
 8000c2a:	f005 fb07 	bl	800623c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000c2e:	f7ff fcbf 	bl	80005b0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c32:	f005 f8a3 	bl	8005d7c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c36:	bf00      	nop
 8000c38:	e7fd      	b.n	8000c36 <main+0x86>
 8000c3a:	bf00      	nop
 8000c3c:	080085b8 	.word	0x080085b8
 8000c40:	2000008c 	.word	0x2000008c
 8000c44:	080009d9 	.word	0x080009d9
 8000c48:	08000a01 	.word	0x08000a01
 8000c4c:	08000a29 	.word	0x08000a29
 8000c50:	08000a51 	.word	0x08000a51
 8000c54:	08000a79 	.word	0x08000a79
 8000c58:	08000aa1 	.word	0x08000aa1
 8000c5c:	080085f0 	.word	0x080085f0
 8000c60:	08000ac9 	.word	0x08000ac9
 8000c64:	080085f8 	.word	0x080085f8
 8000c68:	08008610 	.word	0x08008610

08000c6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b094      	sub	sp, #80	@ 0x50
 8000c70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c72:	f107 0318 	add.w	r3, r7, #24
 8000c76:	2238      	movs	r2, #56	@ 0x38
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f006 fc6c 	bl	8007558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f001 f95c 	bl	8001f4c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c94:	2302      	movs	r3, #2
 8000c96:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c9c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c9e:	2340      	movs	r3, #64	@ 0x40
 8000ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000caa:	2304      	movs	r3, #4
 8000cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000cae:	2355      	movs	r3, #85	@ 0x55
 8000cb0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cbe:	f107 0318 	add.w	r3, r7, #24
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f001 f9f6 	bl	80020b4 <HAL_RCC_OscConfig>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000cce:	f000 f831 	bl	8000d34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd2:	230f      	movs	r3, #15
 8000cd4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	2104      	movs	r1, #4
 8000cea:	4618      	mov	r0, r3
 8000cec:	f001 fcf4 	bl	80026d8 <HAL_RCC_ClockConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000cf6:	f000 f81d 	bl	8000d34 <Error_Handler>
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	3750      	adds	r7, #80	@ 0x50
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART4) {
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a06      	ldr	r2, [pc, #24]	@ (8000d2c <HAL_UART_RxCpltCallback+0x28>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d103      	bne.n	8000d1e <HAL_UART_RxCpltCallback+0x1a>
    	lidar.rx_flag_uart = 1;
 8000d16:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <HAL_UART_RxCpltCallback+0x2c>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	f883 2b20 	strb.w	r2, [r3, #2848]	@ 0xb20
    }
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	40004c00 	.word	0x40004c00
 8000d30:	2000008c 	.word	0x2000008c

08000d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d38:	b672      	cpsid	i
}
 8000d3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <Error_Handler+0x8>

08000d40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d46:	4b12      	ldr	r3, [pc, #72]	@ (8000d90 <HAL_MspInit+0x50>)
 8000d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d4a:	4a11      	ldr	r2, [pc, #68]	@ (8000d90 <HAL_MspInit+0x50>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d52:	4b0f      	ldr	r3, [pc, #60]	@ (8000d90 <HAL_MspInit+0x50>)
 8000d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <HAL_MspInit+0x50>)
 8000d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d62:	4a0b      	ldr	r2, [pc, #44]	@ (8000d90 <HAL_MspInit+0x50>)
 8000d64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d68:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d6a:	4b09      	ldr	r3, [pc, #36]	@ (8000d90 <HAL_MspInit+0x50>)
 8000d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	210f      	movs	r1, #15
 8000d7a:	f06f 0001 	mvn.w	r0, #1
 8000d7e:	f000 fbe4 	bl	800154a <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d82:	f001 f987 	bl	8002094 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40021000 	.word	0x40021000

08000d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <NMI_Handler+0x4>

08000d9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <HardFault_Handler+0x4>

08000da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <MemManage_Handler+0x4>

08000dac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <BusFault_Handler+0x4>

08000db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <UsageFault_Handler+0x4>

08000dbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dce:	f000 fac3 	bl	8001358 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000dd2:	f005 fd29 	bl	8006828 <xTaskGetSchedulerState>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d001      	beq.n	8000de0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000ddc:	f005 ff6c 	bl	8006cb8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000de8:	4808      	ldr	r0, [pc, #32]	@ (8000e0c <DMA1_Channel1_IRQHandler+0x28>)
 8000dea:	f000 fdc6 	bl	800197a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  if (lidar.rx_flag_dma == 0){
 8000dee:	4b08      	ldr	r3, [pc, #32]	@ (8000e10 <DMA1_Channel1_IRQHandler+0x2c>)
 8000df0:	f893 3b21 	ldrb.w	r3, [r3, #2849]	@ 0xb21
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d106      	bne.n	8000e08 <DMA1_Channel1_IRQHandler+0x24>

	  lidar.rx_flag_dma = 1;
 8000dfa:	4b05      	ldr	r3, [pc, #20]	@ (8000e10 <DMA1_Channel1_IRQHandler+0x2c>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f883 2b21 	strb.w	r2, [r3, #2849]	@ 0xb21

	  //memmove(lidar.processing.receive_buff, lidar.processing.frame_buff, 640);

	  LIDAR_process_frame(&lidar);
 8000e02:	4803      	ldr	r0, [pc, #12]	@ (8000e10 <DMA1_Channel1_IRQHandler+0x2c>)
 8000e04:	f7ff fc58 	bl	80006b8 <LIDAR_process_frame>

  }


  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000cdc 	.word	0x20000cdc
 8000e10:	2000008c 	.word	0x2000008c

08000e14 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000e18:	4802      	ldr	r0, [pc, #8]	@ (8000e24 <UART4_IRQHandler+0x10>)
 8000e1a:	f002 fbbb 	bl	8003594 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000bb4 	.word	0x20000bb4

08000e28 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
 8000e38:	e00a      	b.n	8000e50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e3a:	f3af 8000 	nop.w
 8000e3e:	4601      	mov	r1, r0
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	1c5a      	adds	r2, r3, #1
 8000e44:	60ba      	str	r2, [r7, #8]
 8000e46:	b2ca      	uxtb	r2, r1
 8000e48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	697a      	ldr	r2, [r7, #20]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	dbf0      	blt.n	8000e3a <_read+0x12>
  }

  return len;
 8000e58:	687b      	ldr	r3, [r7, #4]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b086      	sub	sp, #24
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	60f8      	str	r0, [r7, #12]
 8000e6a:	60b9      	str	r1, [r7, #8]
 8000e6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
 8000e72:	e009      	b.n	8000e88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	1c5a      	adds	r2, r3, #1
 8000e78:	60ba      	str	r2, [r7, #8]
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fd99 	bl	80009b4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	3301      	adds	r3, #1
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	697a      	ldr	r2, [r7, #20]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	dbf1      	blt.n	8000e74 <_write+0x12>
  }
  return len;
 8000e90:	687b      	ldr	r3, [r7, #4]
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <_close>:

int _close(int file)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	b083      	sub	sp, #12
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ea2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b083      	sub	sp, #12
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
 8000eba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ec2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <_isatty>:

int _isatty(int file)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000eda:	2301      	movs	r3, #1
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
	...

08000f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f0c:	4a14      	ldr	r2, [pc, #80]	@ (8000f60 <_sbrk+0x5c>)
 8000f0e:	4b15      	ldr	r3, [pc, #84]	@ (8000f64 <_sbrk+0x60>)
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f18:	4b13      	ldr	r3, [pc, #76]	@ (8000f68 <_sbrk+0x64>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d102      	bne.n	8000f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f20:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <_sbrk+0x64>)
 8000f22:	4a12      	ldr	r2, [pc, #72]	@ (8000f6c <_sbrk+0x68>)
 8000f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f26:	4b10      	ldr	r3, [pc, #64]	@ (8000f68 <_sbrk+0x64>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d207      	bcs.n	8000f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f34:	f006 fb5e 	bl	80075f4 <__errno>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f42:	e009      	b.n	8000f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f44:	4b08      	ldr	r3, [pc, #32]	@ (8000f68 <_sbrk+0x64>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f4a:	4b07      	ldr	r3, [pc, #28]	@ (8000f68 <_sbrk+0x64>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	4a05      	ldr	r2, [pc, #20]	@ (8000f68 <_sbrk+0x64>)
 8000f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f56:	68fb      	ldr	r3, [r7, #12]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3718      	adds	r7, #24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20008000 	.word	0x20008000
 8000f64:	00000400 	.word	0x00000400
 8000f68:	20000bb0 	.word	0x20000bb0
 8000f6c:	20005e00 	.word	0x20005e00

08000f70 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f74:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <SystemInit+0x20>)
 8000f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f7a:	4a05      	ldr	r2, [pc, #20]	@ (8000f90 <SystemInit+0x20>)
 8000f7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_uart4_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000f98:	4b22      	ldr	r3, [pc, #136]	@ (8001024 <MX_UART4_Init+0x90>)
 8000f9a:	4a23      	ldr	r2, [pc, #140]	@ (8001028 <MX_UART4_Init+0x94>)
 8000f9c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 128000;
 8000f9e:	4b21      	ldr	r3, [pc, #132]	@ (8001024 <MX_UART4_Init+0x90>)
 8000fa0:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 8000fa4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa6:	4b1f      	ldr	r3, [pc, #124]	@ (8001024 <MX_UART4_Init+0x90>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000fac:	4b1d      	ldr	r3, [pc, #116]	@ (8001024 <MX_UART4_Init+0x90>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8001024 <MX_UART4_Init+0x90>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000fb8:	4b1a      	ldr	r3, [pc, #104]	@ (8001024 <MX_UART4_Init+0x90>)
 8000fba:	220c      	movs	r2, #12
 8000fbc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fbe:	4b19      	ldr	r3, [pc, #100]	@ (8001024 <MX_UART4_Init+0x90>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc4:	4b17      	ldr	r3, [pc, #92]	@ (8001024 <MX_UART4_Init+0x90>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fca:	4b16      	ldr	r3, [pc, #88]	@ (8001024 <MX_UART4_Init+0x90>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fd0:	4b14      	ldr	r3, [pc, #80]	@ (8001024 <MX_UART4_Init+0x90>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fd6:	4b13      	ldr	r3, [pc, #76]	@ (8001024 <MX_UART4_Init+0x90>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000fdc:	4811      	ldr	r0, [pc, #68]	@ (8001024 <MX_UART4_Init+0x90>)
 8000fde:	f001 ff87 	bl	8002ef0 <HAL_UART_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000fe8:	f7ff fea4 	bl	8000d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fec:	2100      	movs	r1, #0
 8000fee:	480d      	ldr	r0, [pc, #52]	@ (8001024 <MX_UART4_Init+0x90>)
 8000ff0:	f004 fde1 	bl	8005bb6 <HAL_UARTEx_SetTxFifoThreshold>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000ffa:	f7ff fe9b 	bl	8000d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ffe:	2100      	movs	r1, #0
 8001000:	4808      	ldr	r0, [pc, #32]	@ (8001024 <MX_UART4_Init+0x90>)
 8001002:	f004 fe16 	bl	8005c32 <HAL_UARTEx_SetRxFifoThreshold>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800100c:	f7ff fe92 	bl	8000d34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001010:	4804      	ldr	r0, [pc, #16]	@ (8001024 <MX_UART4_Init+0x90>)
 8001012:	f004 fd97 	bl	8005b44 <HAL_UARTEx_DisableFifoMode>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800101c:	f7ff fe8a 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000bb4 	.word	0x20000bb4
 8001028:	40004c00 	.word	0x40004c00

0800102c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001030:	4b22      	ldr	r3, [pc, #136]	@ (80010bc <MX_USART2_UART_Init+0x90>)
 8001032:	4a23      	ldr	r2, [pc, #140]	@ (80010c0 <MX_USART2_UART_Init+0x94>)
 8001034:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001036:	4b21      	ldr	r3, [pc, #132]	@ (80010bc <MX_USART2_UART_Init+0x90>)
 8001038:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800103c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800103e:	4b1f      	ldr	r3, [pc, #124]	@ (80010bc <MX_USART2_UART_Init+0x90>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001044:	4b1d      	ldr	r3, [pc, #116]	@ (80010bc <MX_USART2_UART_Init+0x90>)
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800104a:	4b1c      	ldr	r3, [pc, #112]	@ (80010bc <MX_USART2_UART_Init+0x90>)
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001050:	4b1a      	ldr	r3, [pc, #104]	@ (80010bc <MX_USART2_UART_Init+0x90>)
 8001052:	220c      	movs	r2, #12
 8001054:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001056:	4b19      	ldr	r3, [pc, #100]	@ (80010bc <MX_USART2_UART_Init+0x90>)
 8001058:	2200      	movs	r2, #0
 800105a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800105c:	4b17      	ldr	r3, [pc, #92]	@ (80010bc <MX_USART2_UART_Init+0x90>)
 800105e:	2200      	movs	r2, #0
 8001060:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001062:	4b16      	ldr	r3, [pc, #88]	@ (80010bc <MX_USART2_UART_Init+0x90>)
 8001064:	2200      	movs	r2, #0
 8001066:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001068:	4b14      	ldr	r3, [pc, #80]	@ (80010bc <MX_USART2_UART_Init+0x90>)
 800106a:	2200      	movs	r2, #0
 800106c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800106e:	4b13      	ldr	r3, [pc, #76]	@ (80010bc <MX_USART2_UART_Init+0x90>)
 8001070:	2200      	movs	r2, #0
 8001072:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001074:	4811      	ldr	r0, [pc, #68]	@ (80010bc <MX_USART2_UART_Init+0x90>)
 8001076:	f001 ff3b 	bl	8002ef0 <HAL_UART_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001080:	f7ff fe58 	bl	8000d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001084:	2100      	movs	r1, #0
 8001086:	480d      	ldr	r0, [pc, #52]	@ (80010bc <MX_USART2_UART_Init+0x90>)
 8001088:	f004 fd95 	bl	8005bb6 <HAL_UARTEx_SetTxFifoThreshold>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001092:	f7ff fe4f 	bl	8000d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001096:	2100      	movs	r1, #0
 8001098:	4808      	ldr	r0, [pc, #32]	@ (80010bc <MX_USART2_UART_Init+0x90>)
 800109a:	f004 fdca 	bl	8005c32 <HAL_UARTEx_SetRxFifoThreshold>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80010a4:	f7ff fe46 	bl	8000d34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80010a8:	4804      	ldr	r0, [pc, #16]	@ (80010bc <MX_USART2_UART_Init+0x90>)
 80010aa:	f004 fd4b 	bl	8005b44 <HAL_UARTEx_DisableFifoMode>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80010b4:	f7ff fe3e 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000c48 	.word	0x20000c48
 80010c0:	40004400 	.word	0x40004400

080010c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b09c      	sub	sp, #112	@ 0x70
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010dc:	f107 0318 	add.w	r3, r7, #24
 80010e0:	2244      	movs	r2, #68	@ 0x44
 80010e2:	2100      	movs	r1, #0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f006 fa37 	bl	8007558 <memset>
  if(uartHandle->Instance==UART4)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a56      	ldr	r2, [pc, #344]	@ (8001248 <HAL_UART_MspInit+0x184>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d169      	bne.n	80011c8 <HAL_UART_MspInit+0x104>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80010f4:	2308      	movs	r3, #8
 80010f6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80010f8:	2300      	movs	r3, #0
 80010fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010fc:	f107 0318 	add.w	r3, r7, #24
 8001100:	4618      	mov	r0, r3
 8001102:	f001 fd05 	bl	8002b10 <HAL_RCCEx_PeriphCLKConfig>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800110c:	f7ff fe12 	bl	8000d34 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001110:	4b4e      	ldr	r3, [pc, #312]	@ (800124c <HAL_UART_MspInit+0x188>)
 8001112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001114:	4a4d      	ldr	r2, [pc, #308]	@ (800124c <HAL_UART_MspInit+0x188>)
 8001116:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800111a:	6593      	str	r3, [r2, #88]	@ 0x58
 800111c:	4b4b      	ldr	r3, [pc, #300]	@ (800124c <HAL_UART_MspInit+0x188>)
 800111e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001120:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001128:	4b48      	ldr	r3, [pc, #288]	@ (800124c <HAL_UART_MspInit+0x188>)
 800112a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112c:	4a47      	ldr	r2, [pc, #284]	@ (800124c <HAL_UART_MspInit+0x188>)
 800112e:	f043 0304 	orr.w	r3, r3, #4
 8001132:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001134:	4b45      	ldr	r3, [pc, #276]	@ (800124c <HAL_UART_MspInit+0x188>)
 8001136:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001138:	f003 0304 	and.w	r3, r3, #4
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001140:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001144:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001152:	2305      	movs	r3, #5
 8001154:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001156:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800115a:	4619      	mov	r1, r3
 800115c:	483c      	ldr	r0, [pc, #240]	@ (8001250 <HAL_UART_MspInit+0x18c>)
 800115e:	f000 fd5b 	bl	8001c18 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Channel1;
 8001162:	4b3c      	ldr	r3, [pc, #240]	@ (8001254 <HAL_UART_MspInit+0x190>)
 8001164:	4a3c      	ldr	r2, [pc, #240]	@ (8001258 <HAL_UART_MspInit+0x194>)
 8001166:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001168:	4b3a      	ldr	r3, [pc, #232]	@ (8001254 <HAL_UART_MspInit+0x190>)
 800116a:	221e      	movs	r2, #30
 800116c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800116e:	4b39      	ldr	r3, [pc, #228]	@ (8001254 <HAL_UART_MspInit+0x190>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001174:	4b37      	ldr	r3, [pc, #220]	@ (8001254 <HAL_UART_MspInit+0x190>)
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800117a:	4b36      	ldr	r3, [pc, #216]	@ (8001254 <HAL_UART_MspInit+0x190>)
 800117c:	2280      	movs	r2, #128	@ 0x80
 800117e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001180:	4b34      	ldr	r3, [pc, #208]	@ (8001254 <HAL_UART_MspInit+0x190>)
 8001182:	2200      	movs	r2, #0
 8001184:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001186:	4b33      	ldr	r3, [pc, #204]	@ (8001254 <HAL_UART_MspInit+0x190>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800118c:	4b31      	ldr	r3, [pc, #196]	@ (8001254 <HAL_UART_MspInit+0x190>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001192:	4b30      	ldr	r3, [pc, #192]	@ (8001254 <HAL_UART_MspInit+0x190>)
 8001194:	2200      	movs	r2, #0
 8001196:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001198:	482e      	ldr	r0, [pc, #184]	@ (8001254 <HAL_UART_MspInit+0x190>)
 800119a:	f000 fa0b 	bl	80015b4 <HAL_DMA_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 80011a4:	f7ff fdc6 	bl	8000d34 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a2a      	ldr	r2, [pc, #168]	@ (8001254 <HAL_UART_MspInit+0x190>)
 80011ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80011b0:	4a28      	ldr	r2, [pc, #160]	@ (8001254 <HAL_UART_MspInit+0x190>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2105      	movs	r1, #5
 80011ba:	2034      	movs	r0, #52	@ 0x34
 80011bc:	f000 f9c5 	bl	800154a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80011c0:	2034      	movs	r0, #52	@ 0x34
 80011c2:	f000 f9dc 	bl	800157e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011c6:	e03b      	b.n	8001240 <HAL_UART_MspInit+0x17c>
  else if(uartHandle->Instance==USART2)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a23      	ldr	r2, [pc, #140]	@ (800125c <HAL_UART_MspInit+0x198>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d136      	bne.n	8001240 <HAL_UART_MspInit+0x17c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011d2:	2302      	movs	r3, #2
 80011d4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011da:	f107 0318 	add.w	r3, r7, #24
 80011de:	4618      	mov	r0, r3
 80011e0:	f001 fc96 	bl	8002b10 <HAL_RCCEx_PeriphCLKConfig>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <HAL_UART_MspInit+0x12a>
      Error_Handler();
 80011ea:	f7ff fda3 	bl	8000d34 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80011ee:	4b17      	ldr	r3, [pc, #92]	@ (800124c <HAL_UART_MspInit+0x188>)
 80011f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011f2:	4a16      	ldr	r2, [pc, #88]	@ (800124c <HAL_UART_MspInit+0x188>)
 80011f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80011fa:	4b14      	ldr	r3, [pc, #80]	@ (800124c <HAL_UART_MspInit+0x188>)
 80011fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	4b11      	ldr	r3, [pc, #68]	@ (800124c <HAL_UART_MspInit+0x188>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120a:	4a10      	ldr	r2, [pc, #64]	@ (800124c <HAL_UART_MspInit+0x188>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001212:	4b0e      	ldr	r3, [pc, #56]	@ (800124c <HAL_UART_MspInit+0x188>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800121e:	230c      	movs	r3, #12
 8001220:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001222:	2302      	movs	r3, #2
 8001224:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2300      	movs	r3, #0
 800122c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800122e:	2307      	movs	r3, #7
 8001230:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001232:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001236:	4619      	mov	r1, r3
 8001238:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800123c:	f000 fcec 	bl	8001c18 <HAL_GPIO_Init>
}
 8001240:	bf00      	nop
 8001242:	3770      	adds	r7, #112	@ 0x70
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40004c00 	.word	0x40004c00
 800124c:	40021000 	.word	0x40021000
 8001250:	48000800 	.word	0x48000800
 8001254:	20000cdc 	.word	0x20000cdc
 8001258:	40020008 	.word	0x40020008
 800125c:	40004400 	.word	0x40004400

08001260 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001260:	480d      	ldr	r0, [pc, #52]	@ (8001298 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001262:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001264:	f7ff fe84 	bl	8000f70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001268:	480c      	ldr	r0, [pc, #48]	@ (800129c <LoopForever+0x6>)
  ldr r1, =_edata
 800126a:	490d      	ldr	r1, [pc, #52]	@ (80012a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800126c:	4a0d      	ldr	r2, [pc, #52]	@ (80012a4 <LoopForever+0xe>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001270:	e002      	b.n	8001278 <LoopCopyDataInit>

08001272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001276:	3304      	adds	r3, #4

08001278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800127c:	d3f9      	bcc.n	8001272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127e:	4a0a      	ldr	r2, [pc, #40]	@ (80012a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001280:	4c0a      	ldr	r4, [pc, #40]	@ (80012ac <LoopForever+0x16>)
  movs r3, #0
 8001282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001284:	e001      	b.n	800128a <LoopFillZerobss>

08001286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001288:	3204      	adds	r2, #4

0800128a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800128c:	d3fb      	bcc.n	8001286 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800128e:	f006 f9b7 	bl	8007600 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001292:	f7ff fc8d 	bl	8000bb0 <main>

08001296 <LoopForever>:

LoopForever:
    b LoopForever
 8001296:	e7fe      	b.n	8001296 <LoopForever>
  ldr   r0, =_estack
 8001298:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800129c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80012a4:	080086c4 	.word	0x080086c4
  ldr r2, =_sbss
 80012a8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80012ac:	20005e00 	.word	0x20005e00

080012b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012b0:	e7fe      	b.n	80012b0 <ADC1_2_IRQHandler>

080012b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012b8:	2300      	movs	r3, #0
 80012ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012bc:	2003      	movs	r0, #3
 80012be:	f000 f939 	bl	8001534 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012c2:	200f      	movs	r0, #15
 80012c4:	f000 f80e 	bl	80012e4 <HAL_InitTick>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d002      	beq.n	80012d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	71fb      	strb	r3, [r7, #7]
 80012d2:	e001      	b.n	80012d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012d4:	f7ff fd34 	bl	8000d40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012d8:	79fb      	ldrb	r3, [r7, #7]

}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012ec:	2300      	movs	r3, #0
 80012ee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80012f0:	4b16      	ldr	r3, [pc, #88]	@ (800134c <HAL_InitTick+0x68>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d022      	beq.n	800133e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80012f8:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <HAL_InitTick+0x6c>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b13      	ldr	r3, [pc, #76]	@ (800134c <HAL_InitTick+0x68>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001304:	fbb1 f3f3 	udiv	r3, r1, r3
 8001308:	fbb2 f3f3 	udiv	r3, r2, r3
 800130c:	4618      	mov	r0, r3
 800130e:	f000 f944 	bl	800159a <HAL_SYSTICK_Config>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d10f      	bne.n	8001338 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b0f      	cmp	r3, #15
 800131c:	d809      	bhi.n	8001332 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800131e:	2200      	movs	r2, #0
 8001320:	6879      	ldr	r1, [r7, #4]
 8001322:	f04f 30ff 	mov.w	r0, #4294967295
 8001326:	f000 f910 	bl	800154a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800132a:	4a0a      	ldr	r2, [pc, #40]	@ (8001354 <HAL_InitTick+0x70>)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6013      	str	r3, [r2, #0]
 8001330:	e007      	b.n	8001342 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	73fb      	strb	r3, [r7, #15]
 8001336:	e004      	b.n	8001342 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	73fb      	strb	r3, [r7, #15]
 800133c:	e001      	b.n	8001342 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001342:	7bfb      	ldrb	r3, [r7, #15]
}
 8001344:	4618      	mov	r0, r3
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000008 	.word	0x20000008
 8001350:	20000000 	.word	0x20000000
 8001354:	20000004 	.word	0x20000004

08001358 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800135c:	4b05      	ldr	r3, [pc, #20]	@ (8001374 <HAL_IncTick+0x1c>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b05      	ldr	r3, [pc, #20]	@ (8001378 <HAL_IncTick+0x20>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4413      	add	r3, r2
 8001366:	4a03      	ldr	r2, [pc, #12]	@ (8001374 <HAL_IncTick+0x1c>)
 8001368:	6013      	str	r3, [r2, #0]
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	20000d3c 	.word	0x20000d3c
 8001378:	20000008 	.word	0x20000008

0800137c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return uwTick;
 8001380:	4b03      	ldr	r3, [pc, #12]	@ (8001390 <HAL_GetTick+0x14>)
 8001382:	681b      	ldr	r3, [r3, #0]
}
 8001384:	4618      	mov	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	20000d3c 	.word	0x20000d3c

08001394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a4:	4b0c      	ldr	r3, [pc, #48]	@ (80013d8 <__NVIC_SetPriorityGrouping+0x44>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013b0:	4013      	ands	r3, r2
 80013b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013c6:	4a04      	ldr	r2, [pc, #16]	@ (80013d8 <__NVIC_SetPriorityGrouping+0x44>)
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	60d3      	str	r3, [r2, #12]
}
 80013cc:	bf00      	nop
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e0:	4b04      	ldr	r3, [pc, #16]	@ (80013f4 <__NVIC_GetPriorityGrouping+0x18>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	0a1b      	lsrs	r3, r3, #8
 80013e6:	f003 0307 	and.w	r3, r3, #7
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	2b00      	cmp	r3, #0
 8001408:	db0b      	blt.n	8001422 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	f003 021f 	and.w	r2, r3, #31
 8001410:	4907      	ldr	r1, [pc, #28]	@ (8001430 <__NVIC_EnableIRQ+0x38>)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	095b      	lsrs	r3, r3, #5
 8001418:	2001      	movs	r0, #1
 800141a:	fa00 f202 	lsl.w	r2, r0, r2
 800141e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	e000e100 	.word	0xe000e100

08001434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	6039      	str	r1, [r7, #0]
 800143e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001444:	2b00      	cmp	r3, #0
 8001446:	db0a      	blt.n	800145e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	b2da      	uxtb	r2, r3
 800144c:	490c      	ldr	r1, [pc, #48]	@ (8001480 <__NVIC_SetPriority+0x4c>)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	0112      	lsls	r2, r2, #4
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	440b      	add	r3, r1
 8001458:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800145c:	e00a      	b.n	8001474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	b2da      	uxtb	r2, r3
 8001462:	4908      	ldr	r1, [pc, #32]	@ (8001484 <__NVIC_SetPriority+0x50>)
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	f003 030f 	and.w	r3, r3, #15
 800146a:	3b04      	subs	r3, #4
 800146c:	0112      	lsls	r2, r2, #4
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	440b      	add	r3, r1
 8001472:	761a      	strb	r2, [r3, #24]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000e100 	.word	0xe000e100
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001488:	b480      	push	{r7}
 800148a:	b089      	sub	sp, #36	@ 0x24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f1c3 0307 	rsb	r3, r3, #7
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	bf28      	it	cs
 80014a6:	2304      	movcs	r3, #4
 80014a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3304      	adds	r3, #4
 80014ae:	2b06      	cmp	r3, #6
 80014b0:	d902      	bls.n	80014b8 <NVIC_EncodePriority+0x30>
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3b03      	subs	r3, #3
 80014b6:	e000      	b.n	80014ba <NVIC_EncodePriority+0x32>
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	f04f 32ff 	mov.w	r2, #4294967295
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43da      	mvns	r2, r3
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	401a      	ands	r2, r3
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d0:	f04f 31ff 	mov.w	r1, #4294967295
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	fa01 f303 	lsl.w	r3, r1, r3
 80014da:	43d9      	mvns	r1, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e0:	4313      	orrs	r3, r2
         );
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3724      	adds	r7, #36	@ 0x24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
	...

080014f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001500:	d301      	bcc.n	8001506 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001502:	2301      	movs	r3, #1
 8001504:	e00f      	b.n	8001526 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001506:	4a0a      	ldr	r2, [pc, #40]	@ (8001530 <SysTick_Config+0x40>)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3b01      	subs	r3, #1
 800150c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800150e:	210f      	movs	r1, #15
 8001510:	f04f 30ff 	mov.w	r0, #4294967295
 8001514:	f7ff ff8e 	bl	8001434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001518:	4b05      	ldr	r3, [pc, #20]	@ (8001530 <SysTick_Config+0x40>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800151e:	4b04      	ldr	r3, [pc, #16]	@ (8001530 <SysTick_Config+0x40>)
 8001520:	2207      	movs	r2, #7
 8001522:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	e000e010 	.word	0xe000e010

08001534 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff ff29 	bl	8001394 <__NVIC_SetPriorityGrouping>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b086      	sub	sp, #24
 800154e:	af00      	add	r7, sp, #0
 8001550:	4603      	mov	r3, r0
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
 8001556:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001558:	f7ff ff40 	bl	80013dc <__NVIC_GetPriorityGrouping>
 800155c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	68b9      	ldr	r1, [r7, #8]
 8001562:	6978      	ldr	r0, [r7, #20]
 8001564:	f7ff ff90 	bl	8001488 <NVIC_EncodePriority>
 8001568:	4602      	mov	r2, r0
 800156a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156e:	4611      	mov	r1, r2
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff5f 	bl	8001434 <__NVIC_SetPriority>
}
 8001576:	bf00      	nop
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	4603      	mov	r3, r0
 8001586:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff33 	bl	80013f8 <__NVIC_EnableIRQ>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff ffa4 	bl	80014f0 <SysTick_Config>
 80015a8:	4603      	mov	r3, r0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
	...

080015b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e08d      	b.n	80016e2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	461a      	mov	r2, r3
 80015cc:	4b47      	ldr	r3, [pc, #284]	@ (80016ec <HAL_DMA_Init+0x138>)
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d80f      	bhi.n	80015f2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	461a      	mov	r2, r3
 80015d8:	4b45      	ldr	r3, [pc, #276]	@ (80016f0 <HAL_DMA_Init+0x13c>)
 80015da:	4413      	add	r3, r2
 80015dc:	4a45      	ldr	r2, [pc, #276]	@ (80016f4 <HAL_DMA_Init+0x140>)
 80015de:	fba2 2303 	umull	r2, r3, r2, r3
 80015e2:	091b      	lsrs	r3, r3, #4
 80015e4:	009a      	lsls	r2, r3, #2
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a42      	ldr	r2, [pc, #264]	@ (80016f8 <HAL_DMA_Init+0x144>)
 80015ee:	641a      	str	r2, [r3, #64]	@ 0x40
 80015f0:	e00e      	b.n	8001610 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	4b40      	ldr	r3, [pc, #256]	@ (80016fc <HAL_DMA_Init+0x148>)
 80015fa:	4413      	add	r3, r2
 80015fc:	4a3d      	ldr	r2, [pc, #244]	@ (80016f4 <HAL_DMA_Init+0x140>)
 80015fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001602:	091b      	lsrs	r3, r3, #4
 8001604:	009a      	lsls	r2, r3, #2
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a3c      	ldr	r2, [pc, #240]	@ (8001700 <HAL_DMA_Init+0x14c>)
 800160e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2202      	movs	r2, #2
 8001614:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001626:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800162a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001634:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001640:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800164c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	4313      	orrs	r3, r2
 8001658:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f000 fa76 	bl	8001b54 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001670:	d102      	bne.n	8001678 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800168c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d010      	beq.n	80016b8 <HAL_DMA_Init+0x104>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b04      	cmp	r3, #4
 800169c:	d80c      	bhi.n	80016b8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 fa96 	bl	8001bd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	e008      	b.n	80016ca <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40020407 	.word	0x40020407
 80016f0:	bffdfff8 	.word	0xbffdfff8
 80016f4:	cccccccd 	.word	0xcccccccd
 80016f8:	40020000 	.word	0x40020000
 80016fc:	bffdfbf8 	.word	0xbffdfbf8
 8001700:	40020400 	.word	0x40020400

08001704 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
 8001710:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800171c:	2b01      	cmp	r3, #1
 800171e:	d101      	bne.n	8001724 <HAL_DMA_Start_IT+0x20>
 8001720:	2302      	movs	r3, #2
 8001722:	e066      	b.n	80017f2 <HAL_DMA_Start_IT+0xee>
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2201      	movs	r2, #1
 8001728:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b01      	cmp	r3, #1
 8001736:	d155      	bne.n	80017e4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2202      	movs	r2, #2
 800173c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2200      	movs	r2, #0
 8001744:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 0201 	bic.w	r2, r2, #1
 8001754:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	68b9      	ldr	r1, [r7, #8]
 800175c:	68f8      	ldr	r0, [r7, #12]
 800175e:	f000 f9bb 	bl	8001ad8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	2b00      	cmp	r3, #0
 8001768:	d008      	beq.n	800177c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f042 020e 	orr.w	r2, r2, #14
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	e00f      	b.n	800179c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f022 0204 	bic.w	r2, r2, #4
 800178a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f042 020a 	orr.w	r2, r2, #10
 800179a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d007      	beq.n	80017ba <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80017b8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d007      	beq.n	80017d2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80017d0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f042 0201 	orr.w	r2, r2, #1
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	e005      	b.n	80017f0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80017ec:	2302      	movs	r3, #2
 80017ee:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80017f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b085      	sub	sp, #20
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001802:	2300      	movs	r3, #0
 8001804:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d005      	beq.n	800181e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2204      	movs	r2, #4
 8001816:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	73fb      	strb	r3, [r7, #15]
 800181c:	e037      	b.n	800188e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 020e 	bic.w	r2, r2, #14
 800182c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001838:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800183c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f022 0201 	bic.w	r2, r2, #1
 800184c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001852:	f003 021f 	and.w	r2, r3, #31
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185a:	2101      	movs	r1, #1
 800185c:	fa01 f202 	lsl.w	r2, r1, r2
 8001860:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800186a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001870:	2b00      	cmp	r3, #0
 8001872:	d00c      	beq.n	800188e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800187e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001882:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800188c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800189e:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018b4:	2300      	movs	r3, #0
 80018b6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d00d      	beq.n	80018e0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2204      	movs	r2, #4
 80018c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2201      	movs	r2, #1
 80018ce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	73fb      	strb	r3, [r7, #15]
 80018de:	e047      	b.n	8001970 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 020e 	bic.w	r2, r2, #14
 80018ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 0201 	bic.w	r2, r2, #1
 80018fe:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800190a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800190e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001914:	f003 021f 	and.w	r2, r3, #31
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191c:	2101      	movs	r1, #1
 800191e:	fa01 f202 	lsl.w	r2, r1, r2
 8001922:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800192c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00c      	beq.n	8001950 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001940:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001944:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800194e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	4798      	blx	r3
    }
  }
  return status;
 8001970:	7bfb      	ldrb	r3, [r7, #15]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b084      	sub	sp, #16
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001996:	f003 031f 	and.w	r3, r3, #31
 800199a:	2204      	movs	r2, #4
 800199c:	409a      	lsls	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	4013      	ands	r3, r2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d026      	beq.n	80019f4 <HAL_DMA_IRQHandler+0x7a>
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d021      	beq.n	80019f4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0320 	and.w	r3, r3, #32
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d107      	bne.n	80019ce <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 0204 	bic.w	r2, r2, #4
 80019cc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d2:	f003 021f 	and.w	r2, r3, #31
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019da:	2104      	movs	r1, #4
 80019dc:	fa01 f202 	lsl.w	r2, r1, r2
 80019e0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d071      	beq.n	8001ace <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80019f2:	e06c      	b.n	8001ace <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f8:	f003 031f 	and.w	r3, r3, #31
 80019fc:	2202      	movs	r2, #2
 80019fe:	409a      	lsls	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4013      	ands	r3, r2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d02e      	beq.n	8001a66 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d029      	beq.n	8001a66 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0320 	and.w	r3, r3, #32
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d10b      	bne.n	8001a38 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f022 020a 	bic.w	r2, r2, #10
 8001a2e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3c:	f003 021f 	and.w	r2, r3, #31
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a44:	2102      	movs	r1, #2
 8001a46:	fa01 f202 	lsl.w	r2, r1, r2
 8001a4a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d038      	beq.n	8001ace <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001a64:	e033      	b.n	8001ace <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6a:	f003 031f 	and.w	r3, r3, #31
 8001a6e:	2208      	movs	r2, #8
 8001a70:	409a      	lsls	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	4013      	ands	r3, r2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d02a      	beq.n	8001ad0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	f003 0308 	and.w	r3, r3, #8
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d025      	beq.n	8001ad0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 020e 	bic.w	r2, r2, #14
 8001a92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a98:	f003 021f 	and.w	r2, r3, #31
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d004      	beq.n	8001ad0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001ace:	bf00      	nop
 8001ad0:	bf00      	nop
}
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
 8001ae4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001aee:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d004      	beq.n	8001b02 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001afc:	68fa      	ldr	r2, [r7, #12]
 8001afe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001b00:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b06:	f003 021f 	and.w	r2, r3, #31
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0e:	2101      	movs	r1, #1
 8001b10:	fa01 f202 	lsl.w	r2, r1, r2
 8001b14:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2b10      	cmp	r3, #16
 8001b24:	d108      	bne.n	8001b38 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b36:	e007      	b.n	8001b48 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68ba      	ldr	r2, [r7, #8]
 8001b3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	60da      	str	r2, [r3, #12]
}
 8001b48:	bf00      	nop
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b087      	sub	sp, #28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	461a      	mov	r2, r3
 8001b62:	4b16      	ldr	r3, [pc, #88]	@ (8001bbc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d802      	bhi.n	8001b6e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001b68:	4b15      	ldr	r3, [pc, #84]	@ (8001bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	e001      	b.n	8001b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001b6e:	4b15      	ldr	r3, [pc, #84]	@ (8001bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001b70:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	3b08      	subs	r3, #8
 8001b7e:	4a12      	ldr	r2, [pc, #72]	@ (8001bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001b80:	fba2 2303 	umull	r2, r3, r2, r3
 8001b84:	091b      	lsrs	r3, r3, #4
 8001b86:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8c:	089b      	lsrs	r3, r3, #2
 8001b8e:	009a      	lsls	r2, r3, #2
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	4413      	add	r3, r2
 8001b94:	461a      	mov	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a0b      	ldr	r2, [pc, #44]	@ (8001bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001b9e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f003 031f 	and.w	r3, r3, #31
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	409a      	lsls	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001bae:	bf00      	nop
 8001bb0:	371c      	adds	r7, #28
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40020407 	.word	0x40020407
 8001bc0:	40020800 	.word	0x40020800
 8001bc4:	40020820 	.word	0x40020820
 8001bc8:	cccccccd 	.word	0xcccccccd
 8001bcc:	40020880 	.word	0x40020880

08001bd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	4b0b      	ldr	r3, [pc, #44]	@ (8001c10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001be4:	4413      	add	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	461a      	mov	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a08      	ldr	r2, [pc, #32]	@ (8001c14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001bf2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	f003 031f 	and.w	r3, r3, #31
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	409a      	lsls	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001c04:	bf00      	nop
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	1000823f 	.word	0x1000823f
 8001c14:	40020940 	.word	0x40020940

08001c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b087      	sub	sp, #28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c26:	e15a      	b.n	8001ede <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	fa01 f303 	lsl.w	r3, r1, r3
 8001c34:	4013      	ands	r3, r2
 8001c36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 814c 	beq.w	8001ed8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d005      	beq.n	8001c58 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d130      	bne.n	8001cba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	2203      	movs	r2, #3
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	68da      	ldr	r2, [r3, #12]
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c8e:	2201      	movs	r2, #1
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	091b      	lsrs	r3, r3, #4
 8001ca4:	f003 0201 	and.w	r2, r3, #1
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	d017      	beq.n	8001cf6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 0303 	and.w	r3, r3, #3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d123      	bne.n	8001d4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	08da      	lsrs	r2, r3, #3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3208      	adds	r2, #8
 8001d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	220f      	movs	r2, #15
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	4013      	ands	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	691a      	ldr	r2, [r3, #16]
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	08da      	lsrs	r2, r3, #3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3208      	adds	r2, #8
 8001d44:	6939      	ldr	r1, [r7, #16]
 8001d46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	2203      	movs	r2, #3
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 0203 	and.w	r2, r3, #3
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 80a6 	beq.w	8001ed8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d8c:	4b5b      	ldr	r3, [pc, #364]	@ (8001efc <HAL_GPIO_Init+0x2e4>)
 8001d8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d90:	4a5a      	ldr	r2, [pc, #360]	@ (8001efc <HAL_GPIO_Init+0x2e4>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d98:	4b58      	ldr	r3, [pc, #352]	@ (8001efc <HAL_GPIO_Init+0x2e4>)
 8001d9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001da4:	4a56      	ldr	r2, [pc, #344]	@ (8001f00 <HAL_GPIO_Init+0x2e8>)
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	089b      	lsrs	r3, r3, #2
 8001daa:	3302      	adds	r3, #2
 8001dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	220f      	movs	r2, #15
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001dce:	d01f      	beq.n	8001e10 <HAL_GPIO_Init+0x1f8>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a4c      	ldr	r2, [pc, #304]	@ (8001f04 <HAL_GPIO_Init+0x2ec>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d019      	beq.n	8001e0c <HAL_GPIO_Init+0x1f4>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a4b      	ldr	r2, [pc, #300]	@ (8001f08 <HAL_GPIO_Init+0x2f0>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d013      	beq.n	8001e08 <HAL_GPIO_Init+0x1f0>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a4a      	ldr	r2, [pc, #296]	@ (8001f0c <HAL_GPIO_Init+0x2f4>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d00d      	beq.n	8001e04 <HAL_GPIO_Init+0x1ec>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a49      	ldr	r2, [pc, #292]	@ (8001f10 <HAL_GPIO_Init+0x2f8>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d007      	beq.n	8001e00 <HAL_GPIO_Init+0x1e8>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a48      	ldr	r2, [pc, #288]	@ (8001f14 <HAL_GPIO_Init+0x2fc>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d101      	bne.n	8001dfc <HAL_GPIO_Init+0x1e4>
 8001df8:	2305      	movs	r3, #5
 8001dfa:	e00a      	b.n	8001e12 <HAL_GPIO_Init+0x1fa>
 8001dfc:	2306      	movs	r3, #6
 8001dfe:	e008      	b.n	8001e12 <HAL_GPIO_Init+0x1fa>
 8001e00:	2304      	movs	r3, #4
 8001e02:	e006      	b.n	8001e12 <HAL_GPIO_Init+0x1fa>
 8001e04:	2303      	movs	r3, #3
 8001e06:	e004      	b.n	8001e12 <HAL_GPIO_Init+0x1fa>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e002      	b.n	8001e12 <HAL_GPIO_Init+0x1fa>
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e000      	b.n	8001e12 <HAL_GPIO_Init+0x1fa>
 8001e10:	2300      	movs	r3, #0
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	f002 0203 	and.w	r2, r2, #3
 8001e18:	0092      	lsls	r2, r2, #2
 8001e1a:	4093      	lsls	r3, r2
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e22:	4937      	ldr	r1, [pc, #220]	@ (8001f00 <HAL_GPIO_Init+0x2e8>)
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	089b      	lsrs	r3, r3, #2
 8001e28:	3302      	adds	r3, #2
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e30:	4b39      	ldr	r3, [pc, #228]	@ (8001f18 <HAL_GPIO_Init+0x300>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e54:	4a30      	ldr	r2, [pc, #192]	@ (8001f18 <HAL_GPIO_Init+0x300>)
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8001f18 <HAL_GPIO_Init+0x300>)
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	43db      	mvns	r3, r3
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	4013      	ands	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e7e:	4a26      	ldr	r2, [pc, #152]	@ (8001f18 <HAL_GPIO_Init+0x300>)
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001e84:	4b24      	ldr	r3, [pc, #144]	@ (8001f18 <HAL_GPIO_Init+0x300>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4013      	ands	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ea8:	4a1b      	ldr	r2, [pc, #108]	@ (8001f18 <HAL_GPIO_Init+0x300>)
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001eae:	4b1a      	ldr	r3, [pc, #104]	@ (8001f18 <HAL_GPIO_Init+0x300>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ed2:	4a11      	ldr	r2, [pc, #68]	@ (8001f18 <HAL_GPIO_Init+0x300>)
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	3301      	adds	r3, #1
 8001edc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f47f ae9d 	bne.w	8001c28 <HAL_GPIO_Init+0x10>
  }
}
 8001eee:	bf00      	nop
 8001ef0:	bf00      	nop
 8001ef2:	371c      	adds	r7, #28
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	40021000 	.word	0x40021000
 8001f00:	40010000 	.word	0x40010000
 8001f04:	48000400 	.word	0x48000400
 8001f08:	48000800 	.word	0x48000800
 8001f0c:	48000c00 	.word	0x48000c00
 8001f10:	48001000 	.word	0x48001000
 8001f14:	48001400 	.word	0x48001400
 8001f18:	40010400 	.word	0x40010400

08001f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	807b      	strh	r3, [r7, #2]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f2c:	787b      	ldrb	r3, [r7, #1]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f32:	887a      	ldrh	r2, [r7, #2]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f38:	e002      	b.n	8001f40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f3a:	887a      	ldrh	r2, [r7, #2]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d141      	bne.n	8001fde <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f5a:	4b4b      	ldr	r3, [pc, #300]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f66:	d131      	bne.n	8001fcc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f68:	4b47      	ldr	r3, [pc, #284]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f6e:	4a46      	ldr	r2, [pc, #280]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f78:	4b43      	ldr	r3, [pc, #268]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f80:	4a41      	ldr	r2, [pc, #260]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f88:	4b40      	ldr	r3, [pc, #256]	@ (800208c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2232      	movs	r2, #50	@ 0x32
 8001f8e:	fb02 f303 	mul.w	r3, r2, r3
 8001f92:	4a3f      	ldr	r2, [pc, #252]	@ (8002090 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f94:	fba2 2303 	umull	r2, r3, r2, r3
 8001f98:	0c9b      	lsrs	r3, r3, #18
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f9e:	e002      	b.n	8001fa6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fa6:	4b38      	ldr	r3, [pc, #224]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fb2:	d102      	bne.n	8001fba <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f2      	bne.n	8001fa0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fba:	4b33      	ldr	r3, [pc, #204]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fc6:	d158      	bne.n	800207a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e057      	b.n	800207c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fcc:	4b2e      	ldr	r3, [pc, #184]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fd2:	4a2d      	ldr	r2, [pc, #180]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fd8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001fdc:	e04d      	b.n	800207a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fe4:	d141      	bne.n	800206a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fe6:	4b28      	ldr	r3, [pc, #160]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001fee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ff2:	d131      	bne.n	8002058 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ff4:	4b24      	ldr	r3, [pc, #144]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ffa:	4a23      	ldr	r2, [pc, #140]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ffc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002000:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002004:	4b20      	ldr	r3, [pc, #128]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800200c:	4a1e      	ldr	r2, [pc, #120]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800200e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002012:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002014:	4b1d      	ldr	r3, [pc, #116]	@ (800208c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2232      	movs	r2, #50	@ 0x32
 800201a:	fb02 f303 	mul.w	r3, r2, r3
 800201e:	4a1c      	ldr	r2, [pc, #112]	@ (8002090 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002020:	fba2 2303 	umull	r2, r3, r2, r3
 8002024:	0c9b      	lsrs	r3, r3, #18
 8002026:	3301      	adds	r3, #1
 8002028:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800202a:	e002      	b.n	8002032 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	3b01      	subs	r3, #1
 8002030:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002032:	4b15      	ldr	r3, [pc, #84]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800203a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800203e:	d102      	bne.n	8002046 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f2      	bne.n	800202c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002046:	4b10      	ldr	r3, [pc, #64]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800204e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002052:	d112      	bne.n	800207a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e011      	b.n	800207c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002058:	4b0b      	ldr	r3, [pc, #44]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800205a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800205e:	4a0a      	ldr	r2, [pc, #40]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002060:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002064:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002068:	e007      	b.n	800207a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800206a:	4b07      	ldr	r3, [pc, #28]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002072:	4a05      	ldr	r2, [pc, #20]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002074:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002078:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	40007000 	.word	0x40007000
 800208c:	20000000 	.word	0x20000000
 8002090:	431bde83 	.word	0x431bde83

08002094 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002098:	4b05      	ldr	r3, [pc, #20]	@ (80020b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	4a04      	ldr	r2, [pc, #16]	@ (80020b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800209e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020a2:	6093      	str	r3, [r2, #8]
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	40007000 	.word	0x40007000

080020b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e2fe      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d075      	beq.n	80021be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020d2:	4b97      	ldr	r3, [pc, #604]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 030c 	and.w	r3, r3, #12
 80020da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020dc:	4b94      	ldr	r3, [pc, #592]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	2b0c      	cmp	r3, #12
 80020ea:	d102      	bne.n	80020f2 <HAL_RCC_OscConfig+0x3e>
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	d002      	beq.n	80020f8 <HAL_RCC_OscConfig+0x44>
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d10b      	bne.n	8002110 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f8:	4b8d      	ldr	r3, [pc, #564]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d05b      	beq.n	80021bc <HAL_RCC_OscConfig+0x108>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d157      	bne.n	80021bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e2d9      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002118:	d106      	bne.n	8002128 <HAL_RCC_OscConfig+0x74>
 800211a:	4b85      	ldr	r3, [pc, #532]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a84      	ldr	r2, [pc, #528]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 8002120:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	e01d      	b.n	8002164 <HAL_RCC_OscConfig+0xb0>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002130:	d10c      	bne.n	800214c <HAL_RCC_OscConfig+0x98>
 8002132:	4b7f      	ldr	r3, [pc, #508]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a7e      	ldr	r2, [pc, #504]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 8002138:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	4b7c      	ldr	r3, [pc, #496]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a7b      	ldr	r2, [pc, #492]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 8002144:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	e00b      	b.n	8002164 <HAL_RCC_OscConfig+0xb0>
 800214c:	4b78      	ldr	r3, [pc, #480]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a77      	ldr	r2, [pc, #476]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 8002152:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002156:	6013      	str	r3, [r2, #0]
 8002158:	4b75      	ldr	r3, [pc, #468]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a74      	ldr	r2, [pc, #464]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 800215e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002162:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d013      	beq.n	8002194 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216c:	f7ff f906 	bl	800137c <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002174:	f7ff f902 	bl	800137c <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b64      	cmp	r3, #100	@ 0x64
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e29e      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002186:	4b6a      	ldr	r3, [pc, #424]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f0      	beq.n	8002174 <HAL_RCC_OscConfig+0xc0>
 8002192:	e014      	b.n	80021be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002194:	f7ff f8f2 	bl	800137c <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800219c:	f7ff f8ee 	bl	800137c <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b64      	cmp	r3, #100	@ 0x64
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e28a      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ae:	4b60      	ldr	r3, [pc, #384]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0xe8>
 80021ba:	e000      	b.n	80021be <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d075      	beq.n	80022b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ca:	4b59      	ldr	r3, [pc, #356]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 030c 	and.w	r3, r3, #12
 80021d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021d4:	4b56      	ldr	r3, [pc, #344]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	2b0c      	cmp	r3, #12
 80021e2:	d102      	bne.n	80021ea <HAL_RCC_OscConfig+0x136>
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d002      	beq.n	80021f0 <HAL_RCC_OscConfig+0x13c>
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	2b04      	cmp	r3, #4
 80021ee:	d11f      	bne.n	8002230 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021f0:	4b4f      	ldr	r3, [pc, #316]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <HAL_RCC_OscConfig+0x154>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e25d      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002208:	4b49      	ldr	r3, [pc, #292]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	061b      	lsls	r3, r3, #24
 8002216:	4946      	ldr	r1, [pc, #280]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 8002218:	4313      	orrs	r3, r2
 800221a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800221c:	4b45      	ldr	r3, [pc, #276]	@ (8002334 <HAL_RCC_OscConfig+0x280>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff f85f 	bl	80012e4 <HAL_InitTick>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d043      	beq.n	80022b4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e249      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d023      	beq.n	8002280 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002238:	4b3d      	ldr	r3, [pc, #244]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a3c      	ldr	r2, [pc, #240]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 800223e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002244:	f7ff f89a 	bl	800137c <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800224c:	f7ff f896 	bl	800137c <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e232      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800225e:	4b34      	ldr	r3, [pc, #208]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f0      	beq.n	800224c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800226a:	4b31      	ldr	r3, [pc, #196]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	061b      	lsls	r3, r3, #24
 8002278:	492d      	ldr	r1, [pc, #180]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 800227a:	4313      	orrs	r3, r2
 800227c:	604b      	str	r3, [r1, #4]
 800227e:	e01a      	b.n	80022b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002280:	4b2b      	ldr	r3, [pc, #172]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a2a      	ldr	r2, [pc, #168]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 8002286:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800228a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228c:	f7ff f876 	bl	800137c <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002294:	f7ff f872 	bl	800137c <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e20e      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022a6:	4b22      	ldr	r3, [pc, #136]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x1e0>
 80022b2:	e000      	b.n	80022b6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d041      	beq.n	8002346 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d01c      	beq.n	8002304 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ca:	4b19      	ldr	r3, [pc, #100]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 80022cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022d0:	4a17      	ldr	r2, [pc, #92]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022da:	f7ff f84f 	bl	800137c <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e2:	f7ff f84b 	bl	800137c <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e1e7      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 80022f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0ef      	beq.n	80022e2 <HAL_RCC_OscConfig+0x22e>
 8002302:	e020      	b.n	8002346 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002304:	4b0a      	ldr	r3, [pc, #40]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 8002306:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800230a:	4a09      	ldr	r2, [pc, #36]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 800230c:	f023 0301 	bic.w	r3, r3, #1
 8002310:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002314:	f7ff f832 	bl	800137c <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800231a:	e00d      	b.n	8002338 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800231c:	f7ff f82e 	bl	800137c <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d906      	bls.n	8002338 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e1ca      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>
 800232e:	bf00      	nop
 8002330:	40021000 	.word	0x40021000
 8002334:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002338:	4b8c      	ldr	r3, [pc, #560]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 800233a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1ea      	bne.n	800231c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 80a6 	beq.w	80024a0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002354:	2300      	movs	r3, #0
 8002356:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002358:	4b84      	ldr	r3, [pc, #528]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 800235a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800235c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_RCC_OscConfig+0x2b4>
 8002364:	2301      	movs	r3, #1
 8002366:	e000      	b.n	800236a <HAL_RCC_OscConfig+0x2b6>
 8002368:	2300      	movs	r3, #0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00d      	beq.n	800238a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800236e:	4b7f      	ldr	r3, [pc, #508]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 8002370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002372:	4a7e      	ldr	r2, [pc, #504]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 8002374:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002378:	6593      	str	r3, [r2, #88]	@ 0x58
 800237a:	4b7c      	ldr	r3, [pc, #496]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 800237c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002386:	2301      	movs	r3, #1
 8002388:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800238a:	4b79      	ldr	r3, [pc, #484]	@ (8002570 <HAL_RCC_OscConfig+0x4bc>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002392:	2b00      	cmp	r3, #0
 8002394:	d118      	bne.n	80023c8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002396:	4b76      	ldr	r3, [pc, #472]	@ (8002570 <HAL_RCC_OscConfig+0x4bc>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a75      	ldr	r2, [pc, #468]	@ (8002570 <HAL_RCC_OscConfig+0x4bc>)
 800239c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a2:	f7fe ffeb 	bl	800137c <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023aa:	f7fe ffe7 	bl	800137c <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e183      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023bc:	4b6c      	ldr	r3, [pc, #432]	@ (8002570 <HAL_RCC_OscConfig+0x4bc>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0f0      	beq.n	80023aa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d108      	bne.n	80023e2 <HAL_RCC_OscConfig+0x32e>
 80023d0:	4b66      	ldr	r3, [pc, #408]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 80023d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023d6:	4a65      	ldr	r2, [pc, #404]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023e0:	e024      	b.n	800242c <HAL_RCC_OscConfig+0x378>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	2b05      	cmp	r3, #5
 80023e8:	d110      	bne.n	800240c <HAL_RCC_OscConfig+0x358>
 80023ea:	4b60      	ldr	r3, [pc, #384]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 80023ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023f0:	4a5e      	ldr	r2, [pc, #376]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 80023f2:	f043 0304 	orr.w	r3, r3, #4
 80023f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023fa:	4b5c      	ldr	r3, [pc, #368]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 80023fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002400:	4a5a      	ldr	r2, [pc, #360]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800240a:	e00f      	b.n	800242c <HAL_RCC_OscConfig+0x378>
 800240c:	4b57      	ldr	r3, [pc, #348]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 800240e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002412:	4a56      	ldr	r2, [pc, #344]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 8002414:	f023 0301 	bic.w	r3, r3, #1
 8002418:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800241c:	4b53      	ldr	r3, [pc, #332]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 800241e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002422:	4a52      	ldr	r2, [pc, #328]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 8002424:	f023 0304 	bic.w	r3, r3, #4
 8002428:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d016      	beq.n	8002462 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002434:	f7fe ffa2 	bl	800137c <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800243a:	e00a      	b.n	8002452 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243c:	f7fe ff9e 	bl	800137c <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800244a:	4293      	cmp	r3, r2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e138      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002452:	4b46      	ldr	r3, [pc, #280]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 8002454:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0ed      	beq.n	800243c <HAL_RCC_OscConfig+0x388>
 8002460:	e015      	b.n	800248e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002462:	f7fe ff8b 	bl	800137c <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002468:	e00a      	b.n	8002480 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246a:	f7fe ff87 	bl	800137c <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002478:	4293      	cmp	r3, r2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e121      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002480:	4b3a      	ldr	r3, [pc, #232]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 8002482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1ed      	bne.n	800246a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800248e:	7ffb      	ldrb	r3, [r7, #31]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d105      	bne.n	80024a0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002494:	4b35      	ldr	r3, [pc, #212]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 8002496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002498:	4a34      	ldr	r2, [pc, #208]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 800249a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800249e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0320 	and.w	r3, r3, #32
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d03c      	beq.n	8002526 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d01c      	beq.n	80024ee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024b4:	4b2d      	ldr	r3, [pc, #180]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 80024b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024ba:	4a2c      	ldr	r2, [pc, #176]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c4:	f7fe ff5a 	bl	800137c <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024cc:	f7fe ff56 	bl	800137c <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e0f2      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024de:	4b23      	ldr	r3, [pc, #140]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 80024e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0ef      	beq.n	80024cc <HAL_RCC_OscConfig+0x418>
 80024ec:	e01b      	b.n	8002526 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024ee:	4b1f      	ldr	r3, [pc, #124]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 80024f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024f4:	4a1d      	ldr	r2, [pc, #116]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 80024f6:	f023 0301 	bic.w	r3, r3, #1
 80024fa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fe:	f7fe ff3d 	bl	800137c <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002506:	f7fe ff39 	bl	800137c <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e0d5      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002518:	4b14      	ldr	r3, [pc, #80]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 800251a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1ef      	bne.n	8002506 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 80c9 	beq.w	80026c2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002530:	4b0e      	ldr	r3, [pc, #56]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 030c 	and.w	r3, r3, #12
 8002538:	2b0c      	cmp	r3, #12
 800253a:	f000 8083 	beq.w	8002644 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	2b02      	cmp	r3, #2
 8002544:	d15e      	bne.n	8002604 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002546:	4b09      	ldr	r3, [pc, #36]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a08      	ldr	r2, [pc, #32]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 800254c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002550:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002552:	f7fe ff13 	bl	800137c <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002558:	e00c      	b.n	8002574 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255a:	f7fe ff0f 	bl	800137c <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d905      	bls.n	8002574 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e0ab      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>
 800256c:	40021000 	.word	0x40021000
 8002570:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002574:	4b55      	ldr	r3, [pc, #340]	@ (80026cc <HAL_RCC_OscConfig+0x618>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1ec      	bne.n	800255a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002580:	4b52      	ldr	r3, [pc, #328]	@ (80026cc <HAL_RCC_OscConfig+0x618>)
 8002582:	68da      	ldr	r2, [r3, #12]
 8002584:	4b52      	ldr	r3, [pc, #328]	@ (80026d0 <HAL_RCC_OscConfig+0x61c>)
 8002586:	4013      	ands	r3, r2
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6a11      	ldr	r1, [r2, #32]
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002590:	3a01      	subs	r2, #1
 8002592:	0112      	lsls	r2, r2, #4
 8002594:	4311      	orrs	r1, r2
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800259a:	0212      	lsls	r2, r2, #8
 800259c:	4311      	orrs	r1, r2
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80025a2:	0852      	lsrs	r2, r2, #1
 80025a4:	3a01      	subs	r2, #1
 80025a6:	0552      	lsls	r2, r2, #21
 80025a8:	4311      	orrs	r1, r2
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80025ae:	0852      	lsrs	r2, r2, #1
 80025b0:	3a01      	subs	r2, #1
 80025b2:	0652      	lsls	r2, r2, #25
 80025b4:	4311      	orrs	r1, r2
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80025ba:	06d2      	lsls	r2, r2, #27
 80025bc:	430a      	orrs	r2, r1
 80025be:	4943      	ldr	r1, [pc, #268]	@ (80026cc <HAL_RCC_OscConfig+0x618>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025c4:	4b41      	ldr	r3, [pc, #260]	@ (80026cc <HAL_RCC_OscConfig+0x618>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a40      	ldr	r2, [pc, #256]	@ (80026cc <HAL_RCC_OscConfig+0x618>)
 80025ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025ce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025d0:	4b3e      	ldr	r3, [pc, #248]	@ (80026cc <HAL_RCC_OscConfig+0x618>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	4a3d      	ldr	r2, [pc, #244]	@ (80026cc <HAL_RCC_OscConfig+0x618>)
 80025d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025da:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025dc:	f7fe fece 	bl	800137c <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e4:	f7fe feca 	bl	800137c <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e066      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025f6:	4b35      	ldr	r3, [pc, #212]	@ (80026cc <HAL_RCC_OscConfig+0x618>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0f0      	beq.n	80025e4 <HAL_RCC_OscConfig+0x530>
 8002602:	e05e      	b.n	80026c2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002604:	4b31      	ldr	r3, [pc, #196]	@ (80026cc <HAL_RCC_OscConfig+0x618>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a30      	ldr	r2, [pc, #192]	@ (80026cc <HAL_RCC_OscConfig+0x618>)
 800260a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800260e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002610:	f7fe feb4 	bl	800137c <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002618:	f7fe feb0 	bl	800137c <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e04c      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800262a:	4b28      	ldr	r3, [pc, #160]	@ (80026cc <HAL_RCC_OscConfig+0x618>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f0      	bne.n	8002618 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002636:	4b25      	ldr	r3, [pc, #148]	@ (80026cc <HAL_RCC_OscConfig+0x618>)
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	4924      	ldr	r1, [pc, #144]	@ (80026cc <HAL_RCC_OscConfig+0x618>)
 800263c:	4b25      	ldr	r3, [pc, #148]	@ (80026d4 <HAL_RCC_OscConfig+0x620>)
 800263e:	4013      	ands	r3, r2
 8002640:	60cb      	str	r3, [r1, #12]
 8002642:	e03e      	b.n	80026c2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	69db      	ldr	r3, [r3, #28]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e039      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002650:	4b1e      	ldr	r3, [pc, #120]	@ (80026cc <HAL_RCC_OscConfig+0x618>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	f003 0203 	and.w	r2, r3, #3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	429a      	cmp	r2, r3
 8002662:	d12c      	bne.n	80026be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266e:	3b01      	subs	r3, #1
 8002670:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002672:	429a      	cmp	r2, r3
 8002674:	d123      	bne.n	80026be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002680:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002682:	429a      	cmp	r2, r3
 8002684:	d11b      	bne.n	80026be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002690:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002692:	429a      	cmp	r2, r3
 8002694:	d113      	bne.n	80026be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a0:	085b      	lsrs	r3, r3, #1
 80026a2:	3b01      	subs	r3, #1
 80026a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d109      	bne.n	80026be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026b4:	085b      	lsrs	r3, r3, #1
 80026b6:	3b01      	subs	r3, #1
 80026b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d001      	beq.n	80026c2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e000      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3720      	adds	r7, #32
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40021000 	.word	0x40021000
 80026d0:	019f800c 	.word	0x019f800c
 80026d4:	feeefffc 	.word	0xfeeefffc

080026d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e11e      	b.n	800292e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026f0:	4b91      	ldr	r3, [pc, #580]	@ (8002938 <HAL_RCC_ClockConfig+0x260>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 030f 	and.w	r3, r3, #15
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d910      	bls.n	8002720 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fe:	4b8e      	ldr	r3, [pc, #568]	@ (8002938 <HAL_RCC_ClockConfig+0x260>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f023 020f 	bic.w	r2, r3, #15
 8002706:	498c      	ldr	r1, [pc, #560]	@ (8002938 <HAL_RCC_ClockConfig+0x260>)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	4313      	orrs	r3, r2
 800270c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800270e:	4b8a      	ldr	r3, [pc, #552]	@ (8002938 <HAL_RCC_ClockConfig+0x260>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d001      	beq.n	8002720 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e106      	b.n	800292e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	d073      	beq.n	8002814 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b03      	cmp	r3, #3
 8002732:	d129      	bne.n	8002788 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002734:	4b81      	ldr	r3, [pc, #516]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e0f4      	b.n	800292e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002744:	f000 f99e 	bl	8002a84 <RCC_GetSysClockFreqFromPLLSource>
 8002748:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4a7c      	ldr	r2, [pc, #496]	@ (8002940 <HAL_RCC_ClockConfig+0x268>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d93f      	bls.n	80027d2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002752:	4b7a      	ldr	r3, [pc, #488]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d009      	beq.n	8002772 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002766:	2b00      	cmp	r3, #0
 8002768:	d033      	beq.n	80027d2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800276e:	2b00      	cmp	r3, #0
 8002770:	d12f      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002772:	4b72      	ldr	r3, [pc, #456]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800277a:	4a70      	ldr	r2, [pc, #448]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 800277c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002780:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002782:	2380      	movs	r3, #128	@ 0x80
 8002784:	617b      	str	r3, [r7, #20]
 8002786:	e024      	b.n	80027d2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b02      	cmp	r3, #2
 800278e:	d107      	bne.n	80027a0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002790:	4b6a      	ldr	r3, [pc, #424]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d109      	bne.n	80027b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e0c6      	b.n	800292e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027a0:	4b66      	ldr	r3, [pc, #408]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e0be      	b.n	800292e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80027b0:	f000 f8ce 	bl	8002950 <HAL_RCC_GetSysClockFreq>
 80027b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	4a61      	ldr	r2, [pc, #388]	@ (8002940 <HAL_RCC_ClockConfig+0x268>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d909      	bls.n	80027d2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80027be:	4b5f      	ldr	r3, [pc, #380]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027c6:	4a5d      	ldr	r2, [pc, #372]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 80027c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027cc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80027ce:	2380      	movs	r3, #128	@ 0x80
 80027d0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027d2:	4b5a      	ldr	r3, [pc, #360]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f023 0203 	bic.w	r2, r3, #3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	4957      	ldr	r1, [pc, #348]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027e4:	f7fe fdca 	bl	800137c <HAL_GetTick>
 80027e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ea:	e00a      	b.n	8002802 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ec:	f7fe fdc6 	bl	800137c <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e095      	b.n	800292e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002802:	4b4e      	ldr	r3, [pc, #312]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 020c 	and.w	r2, r3, #12
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	429a      	cmp	r2, r3
 8002812:	d1eb      	bne.n	80027ec <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d023      	beq.n	8002868 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	d005      	beq.n	8002838 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800282c:	4b43      	ldr	r3, [pc, #268]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	4a42      	ldr	r2, [pc, #264]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 8002832:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002836:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0308 	and.w	r3, r3, #8
 8002840:	2b00      	cmp	r3, #0
 8002842:	d007      	beq.n	8002854 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002844:	4b3d      	ldr	r3, [pc, #244]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800284c:	4a3b      	ldr	r2, [pc, #236]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 800284e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002852:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002854:	4b39      	ldr	r3, [pc, #228]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	4936      	ldr	r1, [pc, #216]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 8002862:	4313      	orrs	r3, r2
 8002864:	608b      	str	r3, [r1, #8]
 8002866:	e008      	b.n	800287a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	2b80      	cmp	r3, #128	@ 0x80
 800286c:	d105      	bne.n	800287a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800286e:	4b33      	ldr	r3, [pc, #204]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	4a32      	ldr	r2, [pc, #200]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 8002874:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002878:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800287a:	4b2f      	ldr	r3, [pc, #188]	@ (8002938 <HAL_RCC_ClockConfig+0x260>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	429a      	cmp	r2, r3
 8002886:	d21d      	bcs.n	80028c4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002888:	4b2b      	ldr	r3, [pc, #172]	@ (8002938 <HAL_RCC_ClockConfig+0x260>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f023 020f 	bic.w	r2, r3, #15
 8002890:	4929      	ldr	r1, [pc, #164]	@ (8002938 <HAL_RCC_ClockConfig+0x260>)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	4313      	orrs	r3, r2
 8002896:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002898:	f7fe fd70 	bl	800137c <HAL_GetTick>
 800289c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800289e:	e00a      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a0:	f7fe fd6c 	bl	800137c <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e03b      	b.n	800292e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b6:	4b20      	ldr	r3, [pc, #128]	@ (8002938 <HAL_RCC_ClockConfig+0x260>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d1ed      	bne.n	80028a0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d008      	beq.n	80028e2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028d0:	4b1a      	ldr	r3, [pc, #104]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	4917      	ldr	r1, [pc, #92]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d009      	beq.n	8002902 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028ee:	4b13      	ldr	r3, [pc, #76]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	490f      	ldr	r1, [pc, #60]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002902:	f000 f825 	bl	8002950 <HAL_RCC_GetSysClockFreq>
 8002906:	4602      	mov	r2, r0
 8002908:	4b0c      	ldr	r3, [pc, #48]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	091b      	lsrs	r3, r3, #4
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	490c      	ldr	r1, [pc, #48]	@ (8002944 <HAL_RCC_ClockConfig+0x26c>)
 8002914:	5ccb      	ldrb	r3, [r1, r3]
 8002916:	f003 031f 	and.w	r3, r3, #31
 800291a:	fa22 f303 	lsr.w	r3, r2, r3
 800291e:	4a0a      	ldr	r2, [pc, #40]	@ (8002948 <HAL_RCC_ClockConfig+0x270>)
 8002920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002922:	4b0a      	ldr	r3, [pc, #40]	@ (800294c <HAL_RCC_ClockConfig+0x274>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe fcdc 	bl	80012e4 <HAL_InitTick>
 800292c:	4603      	mov	r3, r0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40022000 	.word	0x40022000
 800293c:	40021000 	.word	0x40021000
 8002940:	04c4b400 	.word	0x04c4b400
 8002944:	08008640 	.word	0x08008640
 8002948:	20000000 	.word	0x20000000
 800294c:	20000004 	.word	0x20000004

08002950 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002950:	b480      	push	{r7}
 8002952:	b087      	sub	sp, #28
 8002954:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002956:	4b2c      	ldr	r3, [pc, #176]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 030c 	and.w	r3, r3, #12
 800295e:	2b04      	cmp	r3, #4
 8002960:	d102      	bne.n	8002968 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002962:	4b2a      	ldr	r3, [pc, #168]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002964:	613b      	str	r3, [r7, #16]
 8002966:	e047      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002968:	4b27      	ldr	r3, [pc, #156]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0xb8>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 030c 	and.w	r3, r3, #12
 8002970:	2b08      	cmp	r3, #8
 8002972:	d102      	bne.n	800297a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002974:	4b26      	ldr	r3, [pc, #152]	@ (8002a10 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002976:	613b      	str	r3, [r7, #16]
 8002978:	e03e      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800297a:	4b23      	ldr	r3, [pc, #140]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0xb8>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 030c 	and.w	r3, r3, #12
 8002982:	2b0c      	cmp	r3, #12
 8002984:	d136      	bne.n	80029f4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002986:	4b20      	ldr	r3, [pc, #128]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002990:	4b1d      	ldr	r3, [pc, #116]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	091b      	lsrs	r3, r3, #4
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	3301      	adds	r3, #1
 800299c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2b03      	cmp	r3, #3
 80029a2:	d10c      	bne.n	80029be <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029a4:	4a1a      	ldr	r2, [pc, #104]	@ (8002a10 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ac:	4a16      	ldr	r2, [pc, #88]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029ae:	68d2      	ldr	r2, [r2, #12]
 80029b0:	0a12      	lsrs	r2, r2, #8
 80029b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80029b6:	fb02 f303 	mul.w	r3, r2, r3
 80029ba:	617b      	str	r3, [r7, #20]
      break;
 80029bc:	e00c      	b.n	80029d8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029be:	4a13      	ldr	r2, [pc, #76]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0xbc>)
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c6:	4a10      	ldr	r2, [pc, #64]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029c8:	68d2      	ldr	r2, [r2, #12]
 80029ca:	0a12      	lsrs	r2, r2, #8
 80029cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80029d0:	fb02 f303 	mul.w	r3, r2, r3
 80029d4:	617b      	str	r3, [r7, #20]
      break;
 80029d6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	0e5b      	lsrs	r3, r3, #25
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	3301      	adds	r3, #1
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	e001      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80029f8:	693b      	ldr	r3, [r7, #16]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	371c      	adds	r7, #28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	00f42400 	.word	0x00f42400
 8002a10:	016e3600 	.word	0x016e3600

08002a14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a18:	4b03      	ldr	r3, [pc, #12]	@ (8002a28 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	20000000 	.word	0x20000000

08002a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a30:	f7ff fff0 	bl	8002a14 <HAL_RCC_GetHCLKFreq>
 8002a34:	4602      	mov	r2, r0
 8002a36:	4b06      	ldr	r3, [pc, #24]	@ (8002a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	0a1b      	lsrs	r3, r3, #8
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	4904      	ldr	r1, [pc, #16]	@ (8002a54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a42:	5ccb      	ldrb	r3, [r1, r3]
 8002a44:	f003 031f 	and.w	r3, r3, #31
 8002a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40021000 	.word	0x40021000
 8002a54:	08008650 	.word	0x08008650

08002a58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a5c:	f7ff ffda 	bl	8002a14 <HAL_RCC_GetHCLKFreq>
 8002a60:	4602      	mov	r2, r0
 8002a62:	4b06      	ldr	r3, [pc, #24]	@ (8002a7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	0adb      	lsrs	r3, r3, #11
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	4904      	ldr	r1, [pc, #16]	@ (8002a80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a6e:	5ccb      	ldrb	r3, [r1, r3]
 8002a70:	f003 031f 	and.w	r3, r3, #31
 8002a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	08008650 	.word	0x08008650

08002a84 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b087      	sub	sp, #28
 8002a88:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002b04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a94:	4b1b      	ldr	r3, [pc, #108]	@ (8002b04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	091b      	lsrs	r3, r3, #4
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	2b03      	cmp	r3, #3
 8002aa6:	d10c      	bne.n	8002ac2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002aa8:	4a17      	ldr	r2, [pc, #92]	@ (8002b08 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab0:	4a14      	ldr	r2, [pc, #80]	@ (8002b04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ab2:	68d2      	ldr	r2, [r2, #12]
 8002ab4:	0a12      	lsrs	r2, r2, #8
 8002ab6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002aba:	fb02 f303 	mul.w	r3, r2, r3
 8002abe:	617b      	str	r3, [r7, #20]
    break;
 8002ac0:	e00c      	b.n	8002adc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ac2:	4a12      	ldr	r2, [pc, #72]	@ (8002b0c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aca:	4a0e      	ldr	r2, [pc, #56]	@ (8002b04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002acc:	68d2      	ldr	r2, [r2, #12]
 8002ace:	0a12      	lsrs	r2, r2, #8
 8002ad0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002ad4:	fb02 f303 	mul.w	r3, r2, r3
 8002ad8:	617b      	str	r3, [r7, #20]
    break;
 8002ada:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002adc:	4b09      	ldr	r3, [pc, #36]	@ (8002b04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	0e5b      	lsrs	r3, r3, #25
 8002ae2:	f003 0303 	and.w	r3, r3, #3
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002af6:	687b      	ldr	r3, [r7, #4]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	371c      	adds	r7, #28
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	40021000 	.word	0x40021000
 8002b08:	016e3600 	.word	0x016e3600
 8002b0c:	00f42400 	.word	0x00f42400

08002b10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b18:	2300      	movs	r3, #0
 8002b1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 8098 	beq.w	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b32:	4b43      	ldr	r3, [pc, #268]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10d      	bne.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b3e:	4b40      	ldr	r3, [pc, #256]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b42:	4a3f      	ldr	r2, [pc, #252]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b48:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b4a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b52:	60bb      	str	r3, [r7, #8]
 8002b54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b56:	2301      	movs	r3, #1
 8002b58:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b5a:	4b3a      	ldr	r3, [pc, #232]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a39      	ldr	r2, [pc, #228]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b66:	f7fe fc09 	bl	800137c <HAL_GetTick>
 8002b6a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b6c:	e009      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b6e:	f7fe fc05 	bl	800137c <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d902      	bls.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	74fb      	strb	r3, [r7, #19]
        break;
 8002b80:	e005      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b82:	4b30      	ldr	r3, [pc, #192]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0ef      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002b8e:	7cfb      	ldrb	r3, [r7, #19]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d159      	bne.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b94:	4b2a      	ldr	r3, [pc, #168]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b9e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d01e      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d019      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002bb0:	4b23      	ldr	r3, [pc, #140]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bbc:	4b20      	ldr	r3, [pc, #128]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bc2:	4a1f      	ldr	r2, [pc, #124]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bcc:	4b1c      	ldr	r3, [pc, #112]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bd2:	4a1b      	ldr	r2, [pc, #108]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002bdc:	4a18      	ldr	r2, [pc, #96]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d016      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bee:	f7fe fbc5 	bl	800137c <HAL_GetTick>
 8002bf2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bf4:	e00b      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf6:	f7fe fbc1 	bl	800137c <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d902      	bls.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	74fb      	strb	r3, [r7, #19]
            break;
 8002c0c:	e006      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0ec      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002c1c:	7cfb      	ldrb	r3, [r7, #19]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10b      	bne.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c22:	4b07      	ldr	r3, [pc, #28]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c30:	4903      	ldr	r1, [pc, #12]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002c38:	e008      	b.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c3a:	7cfb      	ldrb	r3, [r7, #19]
 8002c3c:	74bb      	strb	r3, [r7, #18]
 8002c3e:	e005      	b.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002c40:	40021000 	.word	0x40021000
 8002c44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c48:	7cfb      	ldrb	r3, [r7, #19]
 8002c4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c4c:	7c7b      	ldrb	r3, [r7, #17]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d105      	bne.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c52:	4ba6      	ldr	r3, [pc, #664]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c56:	4aa5      	ldr	r2, [pc, #660]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c5c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00a      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c6a:	4ba0      	ldr	r3, [pc, #640]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c70:	f023 0203 	bic.w	r2, r3, #3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	499c      	ldr	r1, [pc, #624]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00a      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c8c:	4b97      	ldr	r3, [pc, #604]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c92:	f023 020c 	bic.w	r2, r3, #12
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	4994      	ldr	r1, [pc, #592]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0304 	and.w	r3, r3, #4
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00a      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cae:	4b8f      	ldr	r3, [pc, #572]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cb4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	498b      	ldr	r1, [pc, #556]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0308 	and.w	r3, r3, #8
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00a      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cd0:	4b86      	ldr	r3, [pc, #536]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	4983      	ldr	r1, [pc, #524]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0320 	and.w	r3, r3, #32
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00a      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cf2:	4b7e      	ldr	r3, [pc, #504]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cf8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	497a      	ldr	r1, [pc, #488]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00a      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d14:	4b75      	ldr	r3, [pc, #468]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d1a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	4972      	ldr	r1, [pc, #456]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00a      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d36:	4b6d      	ldr	r3, [pc, #436]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d3c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	4969      	ldr	r1, [pc, #420]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00a      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d58:	4b64      	ldr	r3, [pc, #400]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d5e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	4961      	ldr	r1, [pc, #388]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00a      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d7a:	4b5c      	ldr	r3, [pc, #368]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d80:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d88:	4958      	ldr	r1, [pc, #352]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d015      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d9c:	4b53      	ldr	r3, [pc, #332]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002da2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002daa:	4950      	ldr	r1, [pc, #320]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002dba:	d105      	bne.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dbc:	4b4b      	ldr	r3, [pc, #300]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	4a4a      	ldr	r2, [pc, #296]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dc6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d015      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002dd4:	4b45      	ldr	r3, [pc, #276]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dda:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de2:	4942      	ldr	r1, [pc, #264]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002df2:	d105      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002df4:	4b3d      	ldr	r3, [pc, #244]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	4a3c      	ldr	r2, [pc, #240]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dfe:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d015      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002e0c:	4b37      	ldr	r3, [pc, #220]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e12:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1a:	4934      	ldr	r1, [pc, #208]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e2a:	d105      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e2c:	4b2f      	ldr	r3, [pc, #188]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	4a2e      	ldr	r2, [pc, #184]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e36:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d015      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e44:	4b29      	ldr	r3, [pc, #164]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e4a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e52:	4926      	ldr	r1, [pc, #152]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e62:	d105      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e64:	4b21      	ldr	r3, [pc, #132]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	4a20      	ldr	r2, [pc, #128]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e6e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d015      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e82:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e8a:	4918      	ldr	r1, [pc, #96]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e9a:	d105      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e9c:	4b13      	ldr	r3, [pc, #76]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	4a12      	ldr	r2, [pc, #72]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ea2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ea6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d015      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ec2:	490a      	ldr	r1, [pc, #40]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ece:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ed2:	d105      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ed4:	4b05      	ldr	r3, [pc, #20]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	4a04      	ldr	r2, [pc, #16]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ede:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002ee0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	40021000 	.word	0x40021000

08002ef0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e042      	b.n	8002f88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d106      	bne.n	8002f1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7fe f8d5 	bl	80010c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2224      	movs	r2, #36	@ 0x24
 8002f1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0201 	bic.w	r2, r2, #1
 8002f30:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d002      	beq.n	8002f40 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f001 f96c 	bl	8004218 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 fe9d 	bl	8003c80 <UART_SetConfig>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e01b      	b.n	8002f88 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 0201 	orr.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f001 f9eb 	bl	800435c <UART_CheckIdleState>
 8002f86:	4603      	mov	r3, r0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b08a      	sub	sp, #40	@ 0x28
 8002f94:	af02      	add	r7, sp, #8
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	603b      	str	r3, [r7, #0]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa6:	2b20      	cmp	r3, #32
 8002fa8:	d17b      	bne.n	80030a2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d002      	beq.n	8002fb6 <HAL_UART_Transmit+0x26>
 8002fb0:	88fb      	ldrh	r3, [r7, #6]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e074      	b.n	80030a4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2221      	movs	r2, #33	@ 0x21
 8002fc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fca:	f7fe f9d7 	bl	800137c <HAL_GetTick>
 8002fce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	88fa      	ldrh	r2, [r7, #6]
 8002fd4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	88fa      	ldrh	r2, [r7, #6]
 8002fdc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fe8:	d108      	bne.n	8002ffc <HAL_UART_Transmit+0x6c>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d104      	bne.n	8002ffc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	61bb      	str	r3, [r7, #24]
 8002ffa:	e003      	b.n	8003004 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003000:	2300      	movs	r3, #0
 8003002:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003004:	e030      	b.n	8003068 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	2200      	movs	r2, #0
 800300e:	2180      	movs	r1, #128	@ 0x80
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f001 fa4d 	bl	80044b0 <UART_WaitOnFlagUntilTimeout>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2220      	movs	r2, #32
 8003020:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e03d      	b.n	80030a4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10b      	bne.n	8003046 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	461a      	mov	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800303c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	3302      	adds	r3, #2
 8003042:	61bb      	str	r3, [r7, #24]
 8003044:	e007      	b.n	8003056 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	781a      	ldrb	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	3301      	adds	r3, #1
 8003054:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800305c:	b29b      	uxth	r3, r3
 800305e:	3b01      	subs	r3, #1
 8003060:	b29a      	uxth	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800306e:	b29b      	uxth	r3, r3
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1c8      	bne.n	8003006 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	2200      	movs	r2, #0
 800307c:	2140      	movs	r1, #64	@ 0x40
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f001 fa16 	bl	80044b0 <UART_WaitOnFlagUntilTimeout>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d005      	beq.n	8003096 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2220      	movs	r2, #32
 800308e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e006      	b.n	80030a4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2220      	movs	r2, #32
 800309a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800309e:	2300      	movs	r3, #0
 80030a0:	e000      	b.n	80030a4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80030a2:	2302      	movs	r3, #2
  }
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3720      	adds	r7, #32
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08a      	sub	sp, #40	@ 0x28
 80030b0:	af02      	add	r7, sp, #8
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	603b      	str	r3, [r7, #0]
 80030b8:	4613      	mov	r3, r2
 80030ba:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030c2:	2b20      	cmp	r3, #32
 80030c4:	f040 80b5 	bne.w	8003232 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d002      	beq.n	80030d4 <HAL_UART_Receive+0x28>
 80030ce:	88fb      	ldrh	r3, [r7, #6]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e0ad      	b.n	8003234 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2222      	movs	r2, #34	@ 0x22
 80030e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030ee:	f7fe f945 	bl	800137c <HAL_GetTick>
 80030f2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	88fa      	ldrh	r2, [r7, #6]
 80030f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	88fa      	ldrh	r2, [r7, #6]
 8003100:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800310c:	d10e      	bne.n	800312c <HAL_UART_Receive+0x80>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d105      	bne.n	8003122 <HAL_UART_Receive+0x76>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800311c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003120:	e02d      	b.n	800317e <HAL_UART_Receive+0xd2>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	22ff      	movs	r2, #255	@ 0xff
 8003126:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800312a:	e028      	b.n	800317e <HAL_UART_Receive+0xd2>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10d      	bne.n	8003150 <HAL_UART_Receive+0xa4>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d104      	bne.n	8003146 <HAL_UART_Receive+0x9a>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	22ff      	movs	r2, #255	@ 0xff
 8003140:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003144:	e01b      	b.n	800317e <HAL_UART_Receive+0xd2>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	227f      	movs	r2, #127	@ 0x7f
 800314a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800314e:	e016      	b.n	800317e <HAL_UART_Receive+0xd2>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003158:	d10d      	bne.n	8003176 <HAL_UART_Receive+0xca>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d104      	bne.n	800316c <HAL_UART_Receive+0xc0>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	227f      	movs	r2, #127	@ 0x7f
 8003166:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800316a:	e008      	b.n	800317e <HAL_UART_Receive+0xd2>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	223f      	movs	r2, #63	@ 0x3f
 8003170:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003174:	e003      	b.n	800317e <HAL_UART_Receive+0xd2>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003184:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800318e:	d108      	bne.n	80031a2 <HAL_UART_Receive+0xf6>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d104      	bne.n	80031a2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003198:	2300      	movs	r3, #0
 800319a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	61bb      	str	r3, [r7, #24]
 80031a0:	e003      	b.n	80031aa <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031a6:	2300      	movs	r3, #0
 80031a8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80031aa:	e036      	b.n	800321a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2200      	movs	r2, #0
 80031b4:	2120      	movs	r1, #32
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f001 f97a 	bl	80044b0 <UART_WaitOnFlagUntilTimeout>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d005      	beq.n	80031ce <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2220      	movs	r2, #32
 80031c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e032      	b.n	8003234 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10c      	bne.n	80031ee <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031da:	b29a      	uxth	r2, r3
 80031dc:	8a7b      	ldrh	r3, [r7, #18]
 80031de:	4013      	ands	r3, r2
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	3302      	adds	r3, #2
 80031ea:	61bb      	str	r3, [r7, #24]
 80031ec:	e00c      	b.n	8003208 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	8a7b      	ldrh	r3, [r7, #18]
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	4013      	ands	r3, r2
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	3301      	adds	r3, #1
 8003206:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800320e:	b29b      	uxth	r3, r3
 8003210:	3b01      	subs	r3, #1
 8003212:	b29a      	uxth	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003220:	b29b      	uxth	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1c2      	bne.n	80031ac <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2220      	movs	r2, #32
 800322a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800322e:	2300      	movs	r3, #0
 8003230:	e000      	b.n	8003234 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8003232:	2302      	movs	r3, #2
  }
}
 8003234:	4618      	mov	r0, r3
 8003236:	3720      	adds	r7, #32
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800323c:	b480      	push	{r7}
 800323e:	b091      	sub	sp, #68	@ 0x44
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	4613      	mov	r3, r2
 8003248:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003250:	2b20      	cmp	r3, #32
 8003252:	d178      	bne.n	8003346 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d002      	beq.n	8003260 <HAL_UART_Transmit_IT+0x24>
 800325a:	88fb      	ldrh	r3, [r7, #6]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e071      	b.n	8003348 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	88fa      	ldrh	r2, [r7, #6]
 800326e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	88fa      	ldrh	r2, [r7, #6]
 8003276:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2221      	movs	r2, #33	@ 0x21
 800328c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003294:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003298:	d12a      	bne.n	80032f0 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032a2:	d107      	bne.n	80032b4 <HAL_UART_Transmit_IT+0x78>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d103      	bne.n	80032b4 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4a29      	ldr	r2, [pc, #164]	@ (8003354 <HAL_UART_Transmit_IT+0x118>)
 80032b0:	679a      	str	r2, [r3, #120]	@ 0x78
 80032b2:	e002      	b.n	80032ba <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4a28      	ldr	r2, [pc, #160]	@ (8003358 <HAL_UART_Transmit_IT+0x11c>)
 80032b8:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	3308      	adds	r3, #8
 80032c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c4:	e853 3f00 	ldrex	r3, [r3]
 80032c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80032ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80032d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	3308      	adds	r3, #8
 80032d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80032da:	637a      	str	r2, [r7, #52]	@ 0x34
 80032dc:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80032e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80032e2:	e841 2300 	strex	r3, r2, [r1]
 80032e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80032e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1e5      	bne.n	80032ba <HAL_UART_Transmit_IT+0x7e>
 80032ee:	e028      	b.n	8003342 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032f8:	d107      	bne.n	800330a <HAL_UART_Transmit_IT+0xce>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d103      	bne.n	800330a <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4a15      	ldr	r2, [pc, #84]	@ (800335c <HAL_UART_Transmit_IT+0x120>)
 8003306:	679a      	str	r2, [r3, #120]	@ 0x78
 8003308:	e002      	b.n	8003310 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	4a14      	ldr	r2, [pc, #80]	@ (8003360 <HAL_UART_Transmit_IT+0x124>)
 800330e:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	e853 3f00 	ldrex	r3, [r3]
 800331c:	613b      	str	r3, [r7, #16]
   return(result);
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003324:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	461a      	mov	r2, r3
 800332c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800332e:	623b      	str	r3, [r7, #32]
 8003330:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003332:	69f9      	ldr	r1, [r7, #28]
 8003334:	6a3a      	ldr	r2, [r7, #32]
 8003336:	e841 2300 	strex	r3, r2, [r1]
 800333a:	61bb      	str	r3, [r7, #24]
   return(result);
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1e6      	bne.n	8003310 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	e000      	b.n	8003348 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003346:	2302      	movs	r3, #2
  }
}
 8003348:	4618      	mov	r0, r3
 800334a:	3744      	adds	r7, #68	@ 0x44
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	08004f89 	.word	0x08004f89
 8003358:	08004ea9 	.word	0x08004ea9
 800335c:	08004de7 	.word	0x08004de7
 8003360:	08004d2f 	.word	0x08004d2f

08003364 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b08a      	sub	sp, #40	@ 0x28
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	4613      	mov	r3, r2
 8003370:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003378:	2b20      	cmp	r3, #32
 800337a:	d137      	bne.n	80033ec <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d002      	beq.n	8003388 <HAL_UART_Receive_IT+0x24>
 8003382:	88fb      	ldrh	r3, [r7, #6]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e030      	b.n	80033ee <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a18      	ldr	r2, [pc, #96]	@ (80033f8 <HAL_UART_Receive_IT+0x94>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d01f      	beq.n	80033dc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d018      	beq.n	80033dc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	e853 3f00 	ldrex	r3, [r3]
 80033b6:	613b      	str	r3, [r7, #16]
   return(result);
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80033be:	627b      	str	r3, [r7, #36]	@ 0x24
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	461a      	mov	r2, r3
 80033c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c8:	623b      	str	r3, [r7, #32]
 80033ca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033cc:	69f9      	ldr	r1, [r7, #28]
 80033ce:	6a3a      	ldr	r2, [r7, #32]
 80033d0:	e841 2300 	strex	r3, r2, [r1]
 80033d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1e6      	bne.n	80033aa <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80033dc:	88fb      	ldrh	r3, [r7, #6]
 80033de:	461a      	mov	r2, r3
 80033e0:	68b9      	ldr	r1, [r7, #8]
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f001 f8d2 	bl	800458c <UART_Start_Receive_IT>
 80033e8:	4603      	mov	r3, r0
 80033ea:	e000      	b.n	80033ee <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033ec:	2302      	movs	r3, #2
  }
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3728      	adds	r7, #40	@ 0x28
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40008000 	.word	0x40008000

080033fc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b08a      	sub	sp, #40	@ 0x28
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	4613      	mov	r3, r2
 8003408:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003410:	2b20      	cmp	r3, #32
 8003412:	d167      	bne.n	80034e4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <HAL_UART_Transmit_DMA+0x24>
 800341a:	88fb      	ldrh	r3, [r7, #6]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d101      	bne.n	8003424 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e060      	b.n	80034e6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	88fa      	ldrh	r2, [r7, #6]
 800342e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	88fa      	ldrh	r2, [r7, #6]
 8003436:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2221      	movs	r2, #33	@ 0x21
 8003446:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800344e:	2b00      	cmp	r3, #0
 8003450:	d028      	beq.n	80034a4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003456:	4a26      	ldr	r2, [pc, #152]	@ (80034f0 <HAL_UART_Transmit_DMA+0xf4>)
 8003458:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800345e:	4a25      	ldr	r2, [pc, #148]	@ (80034f4 <HAL_UART_Transmit_DMA+0xf8>)
 8003460:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003466:	4a24      	ldr	r2, [pc, #144]	@ (80034f8 <HAL_UART_Transmit_DMA+0xfc>)
 8003468:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800346e:	2200      	movs	r2, #0
 8003470:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800347a:	4619      	mov	r1, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	3328      	adds	r3, #40	@ 0x28
 8003482:	461a      	mov	r2, r3
 8003484:	88fb      	ldrh	r3, [r7, #6]
 8003486:	f7fe f93d 	bl	8001704 <HAL_DMA_Start_IT>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d009      	beq.n	80034a4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2210      	movs	r2, #16
 8003494:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2220      	movs	r2, #32
 800349c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e020      	b.n	80034e6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2240      	movs	r2, #64	@ 0x40
 80034aa:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	3308      	adds	r3, #8
 80034b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	e853 3f00 	ldrex	r3, [r3]
 80034ba:	613b      	str	r3, [r7, #16]
   return(result);
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	3308      	adds	r3, #8
 80034ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034cc:	623a      	str	r2, [r7, #32]
 80034ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d0:	69f9      	ldr	r1, [r7, #28]
 80034d2:	6a3a      	ldr	r2, [r7, #32]
 80034d4:	e841 2300 	strex	r3, r2, [r1]
 80034d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1e5      	bne.n	80034ac <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80034e0:	2300      	movs	r3, #0
 80034e2:	e000      	b.n	80034e6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80034e4:	2302      	movs	r3, #2
  }
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3728      	adds	r7, #40	@ 0x28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	08004a6b 	.word	0x08004a6b
 80034f4:	08004b05 	.word	0x08004b05
 80034f8:	08004c8b 	.word	0x08004c8b

080034fc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b08a      	sub	sp, #40	@ 0x28
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	4613      	mov	r3, r2
 8003508:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003510:	2b20      	cmp	r3, #32
 8003512:	d137      	bne.n	8003584 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d002      	beq.n	8003520 <HAL_UART_Receive_DMA+0x24>
 800351a:	88fb      	ldrh	r3, [r7, #6]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e030      	b.n	8003586 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a18      	ldr	r2, [pc, #96]	@ (8003590 <HAL_UART_Receive_DMA+0x94>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d01f      	beq.n	8003574 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d018      	beq.n	8003574 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	e853 3f00 	ldrex	r3, [r3]
 800354e:	613b      	str	r3, [r7, #16]
   return(result);
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003556:	627b      	str	r3, [r7, #36]	@ 0x24
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	461a      	mov	r2, r3
 800355e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003560:	623b      	str	r3, [r7, #32]
 8003562:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003564:	69f9      	ldr	r1, [r7, #28]
 8003566:	6a3a      	ldr	r2, [r7, #32]
 8003568:	e841 2300 	strex	r3, r2, [r1]
 800356c:	61bb      	str	r3, [r7, #24]
   return(result);
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1e6      	bne.n	8003542 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003574:	88fb      	ldrh	r3, [r7, #6]
 8003576:	461a      	mov	r2, r3
 8003578:	68b9      	ldr	r1, [r7, #8]
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f001 f928 	bl	80047d0 <UART_Start_Receive_DMA>
 8003580:	4603      	mov	r3, r0
 8003582:	e000      	b.n	8003586 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003584:	2302      	movs	r3, #2
  }
}
 8003586:	4618      	mov	r0, r3
 8003588:	3728      	adds	r7, #40	@ 0x28
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40008000 	.word	0x40008000

08003594 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b0ba      	sub	sp, #232	@ 0xe8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80035ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80035be:	f640 030f 	movw	r3, #2063	@ 0x80f
 80035c2:	4013      	ands	r3, r2
 80035c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80035c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d11b      	bne.n	8003608 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80035d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035d4:	f003 0320 	and.w	r3, r3, #32
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d015      	beq.n	8003608 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80035dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035e0:	f003 0320 	and.w	r3, r3, #32
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d105      	bne.n	80035f4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80035e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d009      	beq.n	8003608 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f000 8300 	beq.w	8003bfe <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	4798      	blx	r3
      }
      return;
 8003606:	e2fa      	b.n	8003bfe <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003608:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 8123 	beq.w	8003858 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003612:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003616:	4b8d      	ldr	r3, [pc, #564]	@ (800384c <HAL_UART_IRQHandler+0x2b8>)
 8003618:	4013      	ands	r3, r2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d106      	bne.n	800362c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800361e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003622:	4b8b      	ldr	r3, [pc, #556]	@ (8003850 <HAL_UART_IRQHandler+0x2bc>)
 8003624:	4013      	ands	r3, r2
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 8116 	beq.w	8003858 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800362c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b00      	cmp	r3, #0
 8003636:	d011      	beq.n	800365c <HAL_UART_IRQHandler+0xc8>
 8003638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800363c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00b      	beq.n	800365c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2201      	movs	r2, #1
 800364a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003652:	f043 0201 	orr.w	r2, r3, #1
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800365c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d011      	beq.n	800368c <HAL_UART_IRQHandler+0xf8>
 8003668:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00b      	beq.n	800368c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2202      	movs	r2, #2
 800367a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003682:	f043 0204 	orr.w	r2, r3, #4
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800368c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	2b00      	cmp	r3, #0
 8003696:	d011      	beq.n	80036bc <HAL_UART_IRQHandler+0x128>
 8003698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00b      	beq.n	80036bc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2204      	movs	r2, #4
 80036aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036b2:	f043 0202 	orr.w	r2, r3, #2
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80036bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036c0:	f003 0308 	and.w	r3, r3, #8
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d017      	beq.n	80036f8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80036c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036cc:	f003 0320 	and.w	r3, r3, #32
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d105      	bne.n	80036e0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80036d4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80036d8:	4b5c      	ldr	r3, [pc, #368]	@ (800384c <HAL_UART_IRQHandler+0x2b8>)
 80036da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00b      	beq.n	80036f8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2208      	movs	r2, #8
 80036e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ee:	f043 0208 	orr.w	r2, r3, #8
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80036f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003700:	2b00      	cmp	r3, #0
 8003702:	d012      	beq.n	800372a <HAL_UART_IRQHandler+0x196>
 8003704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003708:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00c      	beq.n	800372a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003718:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003720:	f043 0220 	orr.w	r2, r3, #32
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 8266 	beq.w	8003c02 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800373a:	f003 0320 	and.w	r3, r3, #32
 800373e:	2b00      	cmp	r3, #0
 8003740:	d013      	beq.n	800376a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003746:	f003 0320 	and.w	r3, r3, #32
 800374a:	2b00      	cmp	r3, #0
 800374c:	d105      	bne.n	800375a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800374e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003752:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d007      	beq.n	800376a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003770:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800377e:	2b40      	cmp	r3, #64	@ 0x40
 8003780:	d005      	beq.n	800378e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003782:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003786:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800378a:	2b00      	cmp	r3, #0
 800378c:	d054      	beq.n	8003838 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f001 f905 	bl	800499e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800379e:	2b40      	cmp	r3, #64	@ 0x40
 80037a0:	d146      	bne.n	8003830 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	3308      	adds	r3, #8
 80037a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037b0:	e853 3f00 	ldrex	r3, [r3]
 80037b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80037b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	3308      	adds	r3, #8
 80037ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80037ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80037d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80037da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80037de:	e841 2300 	strex	r3, r2, [r1]
 80037e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80037e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1d9      	bne.n	80037a2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d017      	beq.n	8003828 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037fe:	4a15      	ldr	r2, [pc, #84]	@ (8003854 <HAL_UART_IRQHandler+0x2c0>)
 8003800:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003808:	4618      	mov	r0, r3
 800380a:	f7fe f84f 	bl	80018ac <HAL_DMA_Abort_IT>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d019      	beq.n	8003848 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800381a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8003822:	4610      	mov	r0, r2
 8003824:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003826:	e00f      	b.n	8003848 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 fa13 	bl	8003c54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800382e:	e00b      	b.n	8003848 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 fa0f 	bl	8003c54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003836:	e007      	b.n	8003848 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 fa0b 	bl	8003c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8003846:	e1dc      	b.n	8003c02 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003848:	bf00      	nop
    return;
 800384a:	e1da      	b.n	8003c02 <HAL_UART_IRQHandler+0x66e>
 800384c:	10000001 	.word	0x10000001
 8003850:	04000120 	.word	0x04000120
 8003854:	08004d0b 	.word	0x08004d0b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800385c:	2b01      	cmp	r3, #1
 800385e:	f040 8170 	bne.w	8003b42 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003866:	f003 0310 	and.w	r3, r3, #16
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 8169 	beq.w	8003b42 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003874:	f003 0310 	and.w	r3, r3, #16
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 8162 	beq.w	8003b42 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2210      	movs	r2, #16
 8003884:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003890:	2b40      	cmp	r3, #64	@ 0x40
 8003892:	f040 80d8 	bne.w	8003a46 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 80af 	beq.w	8003a0c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80038b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038b8:	429a      	cmp	r2, r3
 80038ba:	f080 80a7 	bcs.w	8003a0c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0320 	and.w	r3, r3, #32
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f040 8087 	bne.w	80039ea <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038e8:	e853 3f00 	ldrex	r3, [r3]
 80038ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80038f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	461a      	mov	r2, r3
 8003902:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003906:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800390a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003912:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003916:	e841 2300 	strex	r3, r2, [r1]
 800391a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800391e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1da      	bne.n	80038dc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	3308      	adds	r3, #8
 800392c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003930:	e853 3f00 	ldrex	r3, [r3]
 8003934:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003936:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003938:	f023 0301 	bic.w	r3, r3, #1
 800393c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	3308      	adds	r3, #8
 8003946:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800394a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800394e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003950:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003952:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003956:	e841 2300 	strex	r3, r2, [r1]
 800395a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800395c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1e1      	bne.n	8003926 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	3308      	adds	r3, #8
 8003968:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800396c:	e853 3f00 	ldrex	r3, [r3]
 8003970:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003972:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003974:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003978:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	3308      	adds	r3, #8
 8003982:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003986:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003988:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800398c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800398e:	e841 2300 	strex	r3, r2, [r1]
 8003992:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003994:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1e3      	bne.n	8003962 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2220      	movs	r2, #32
 800399e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039b0:	e853 3f00 	ldrex	r3, [r3]
 80039b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80039b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039b8:	f023 0310 	bic.w	r3, r3, #16
 80039bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	461a      	mov	r2, r3
 80039c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80039ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80039cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039d2:	e841 2300 	strex	r3, r2, [r1]
 80039d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80039d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1e4      	bne.n	80039a8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fd ff08 	bl	80017fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2202      	movs	r2, #2
 80039ee:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	4619      	mov	r1, r3
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f92f 	bl	8003c68 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003a0a:	e0fc      	b.n	8003c06 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003a12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a16:	429a      	cmp	r2, r3
 8003a18:	f040 80f5 	bne.w	8003c06 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0320 	and.w	r3, r3, #32
 8003a2a:	2b20      	cmp	r3, #32
 8003a2c:	f040 80eb 	bne.w	8003c06 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2202      	movs	r2, #2
 8003a34:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f912 	bl	8003c68 <HAL_UARTEx_RxEventCallback>
      return;
 8003a44:	e0df      	b.n	8003c06 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 80d1 	beq.w	8003c0a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8003a68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 80cc 	beq.w	8003c0a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a7a:	e853 3f00 	ldrex	r3, [r3]
 8003a7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003a94:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a96:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a9c:	e841 2300 	strex	r3, r2, [r1]
 8003aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003aa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1e4      	bne.n	8003a72 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	3308      	adds	r3, #8
 8003aae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab2:	e853 3f00 	ldrex	r3, [r3]
 8003ab6:	623b      	str	r3, [r7, #32]
   return(result);
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003abe:	f023 0301 	bic.w	r3, r3, #1
 8003ac2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	3308      	adds	r3, #8
 8003acc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003ad0:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ad6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ad8:	e841 2300 	strex	r3, r2, [r1]
 8003adc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1e1      	bne.n	8003aa8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	e853 3f00 	ldrex	r3, [r3]
 8003b04:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f023 0310 	bic.w	r3, r3, #16
 8003b0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	461a      	mov	r2, r3
 8003b16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b1a:	61fb      	str	r3, [r7, #28]
 8003b1c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1e:	69b9      	ldr	r1, [r7, #24]
 8003b20:	69fa      	ldr	r2, [r7, #28]
 8003b22:	e841 2300 	strex	r3, r2, [r1]
 8003b26:	617b      	str	r3, [r7, #20]
   return(result);
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1e4      	bne.n	8003af8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2202      	movs	r2, #2
 8003b32:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b38:	4619      	mov	r1, r3
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f894 	bl	8003c68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b40:	e063      	b.n	8003c0a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00e      	beq.n	8003b6c <HAL_UART_IRQHandler+0x5d8>
 8003b4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d008      	beq.n	8003b6c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003b62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f001 ffcf 	bl	8005b08 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b6a:	e051      	b.n	8003c10 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d014      	beq.n	8003ba2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d105      	bne.n	8003b90 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003b84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d008      	beq.n	8003ba2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d03a      	beq.n	8003c0e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	4798      	blx	r3
    }
    return;
 8003ba0:	e035      	b.n	8003c0e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d009      	beq.n	8003bc2 <HAL_UART_IRQHandler+0x62e>
 8003bae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f001 fa59 	bl	8005072 <UART_EndTransmit_IT>
    return;
 8003bc0:	e026      	b.n	8003c10 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d009      	beq.n	8003be2 <HAL_UART_IRQHandler+0x64e>
 8003bce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bd2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f001 ffa8 	bl	8005b30 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003be0:	e016      	b.n	8003c10 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003be6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d010      	beq.n	8003c10 <HAL_UART_IRQHandler+0x67c>
 8003bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	da0c      	bge.n	8003c10 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f001 ff90 	bl	8005b1c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003bfc:	e008      	b.n	8003c10 <HAL_UART_IRQHandler+0x67c>
      return;
 8003bfe:	bf00      	nop
 8003c00:	e006      	b.n	8003c10 <HAL_UART_IRQHandler+0x67c>
    return;
 8003c02:	bf00      	nop
 8003c04:	e004      	b.n	8003c10 <HAL_UART_IRQHandler+0x67c>
      return;
 8003c06:	bf00      	nop
 8003c08:	e002      	b.n	8003c10 <HAL_UART_IRQHandler+0x67c>
      return;
 8003c0a:	bf00      	nop
 8003c0c:	e000      	b.n	8003c10 <HAL_UART_IRQHandler+0x67c>
    return;
 8003c0e:	bf00      	nop
  }
}
 8003c10:	37e8      	adds	r7, #232	@ 0xe8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop

08003c18 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	460b      	mov	r3, r1
 8003c72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c84:	b08c      	sub	sp, #48	@ 0x30
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	69db      	ldr	r3, [r3, #28]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	4bab      	ldr	r3, [pc, #684]	@ (8003f5c <UART_SetConfig+0x2dc>)
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	6812      	ldr	r2, [r2, #0]
 8003cb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cb8:	430b      	orrs	r3, r1
 8003cba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	68da      	ldr	r2, [r3, #12]
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4aa0      	ldr	r2, [pc, #640]	@ (8003f60 <UART_SetConfig+0x2e0>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d004      	beq.n	8003cec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003cf6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	6812      	ldr	r2, [r2, #0]
 8003cfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d00:	430b      	orrs	r3, r1
 8003d02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d0a:	f023 010f 	bic.w	r1, r3, #15
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a91      	ldr	r2, [pc, #580]	@ (8003f64 <UART_SetConfig+0x2e4>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d125      	bne.n	8003d70 <UART_SetConfig+0xf0>
 8003d24:	4b90      	ldr	r3, [pc, #576]	@ (8003f68 <UART_SetConfig+0x2e8>)
 8003d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d2a:	f003 0303 	and.w	r3, r3, #3
 8003d2e:	2b03      	cmp	r3, #3
 8003d30:	d81a      	bhi.n	8003d68 <UART_SetConfig+0xe8>
 8003d32:	a201      	add	r2, pc, #4	@ (adr r2, 8003d38 <UART_SetConfig+0xb8>)
 8003d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d38:	08003d49 	.word	0x08003d49
 8003d3c:	08003d59 	.word	0x08003d59
 8003d40:	08003d51 	.word	0x08003d51
 8003d44:	08003d61 	.word	0x08003d61
 8003d48:	2301      	movs	r3, #1
 8003d4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d4e:	e0d6      	b.n	8003efe <UART_SetConfig+0x27e>
 8003d50:	2302      	movs	r3, #2
 8003d52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d56:	e0d2      	b.n	8003efe <UART_SetConfig+0x27e>
 8003d58:	2304      	movs	r3, #4
 8003d5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d5e:	e0ce      	b.n	8003efe <UART_SetConfig+0x27e>
 8003d60:	2308      	movs	r3, #8
 8003d62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d66:	e0ca      	b.n	8003efe <UART_SetConfig+0x27e>
 8003d68:	2310      	movs	r3, #16
 8003d6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d6e:	e0c6      	b.n	8003efe <UART_SetConfig+0x27e>
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a7d      	ldr	r2, [pc, #500]	@ (8003f6c <UART_SetConfig+0x2ec>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d138      	bne.n	8003dec <UART_SetConfig+0x16c>
 8003d7a:	4b7b      	ldr	r3, [pc, #492]	@ (8003f68 <UART_SetConfig+0x2e8>)
 8003d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d80:	f003 030c 	and.w	r3, r3, #12
 8003d84:	2b0c      	cmp	r3, #12
 8003d86:	d82d      	bhi.n	8003de4 <UART_SetConfig+0x164>
 8003d88:	a201      	add	r2, pc, #4	@ (adr r2, 8003d90 <UART_SetConfig+0x110>)
 8003d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8e:	bf00      	nop
 8003d90:	08003dc5 	.word	0x08003dc5
 8003d94:	08003de5 	.word	0x08003de5
 8003d98:	08003de5 	.word	0x08003de5
 8003d9c:	08003de5 	.word	0x08003de5
 8003da0:	08003dd5 	.word	0x08003dd5
 8003da4:	08003de5 	.word	0x08003de5
 8003da8:	08003de5 	.word	0x08003de5
 8003dac:	08003de5 	.word	0x08003de5
 8003db0:	08003dcd 	.word	0x08003dcd
 8003db4:	08003de5 	.word	0x08003de5
 8003db8:	08003de5 	.word	0x08003de5
 8003dbc:	08003de5 	.word	0x08003de5
 8003dc0:	08003ddd 	.word	0x08003ddd
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dca:	e098      	b.n	8003efe <UART_SetConfig+0x27e>
 8003dcc:	2302      	movs	r3, #2
 8003dce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dd2:	e094      	b.n	8003efe <UART_SetConfig+0x27e>
 8003dd4:	2304      	movs	r3, #4
 8003dd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dda:	e090      	b.n	8003efe <UART_SetConfig+0x27e>
 8003ddc:	2308      	movs	r3, #8
 8003dde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003de2:	e08c      	b.n	8003efe <UART_SetConfig+0x27e>
 8003de4:	2310      	movs	r3, #16
 8003de6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dea:	e088      	b.n	8003efe <UART_SetConfig+0x27e>
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a5f      	ldr	r2, [pc, #380]	@ (8003f70 <UART_SetConfig+0x2f0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d125      	bne.n	8003e42 <UART_SetConfig+0x1c2>
 8003df6:	4b5c      	ldr	r3, [pc, #368]	@ (8003f68 <UART_SetConfig+0x2e8>)
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dfc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003e00:	2b30      	cmp	r3, #48	@ 0x30
 8003e02:	d016      	beq.n	8003e32 <UART_SetConfig+0x1b2>
 8003e04:	2b30      	cmp	r3, #48	@ 0x30
 8003e06:	d818      	bhi.n	8003e3a <UART_SetConfig+0x1ba>
 8003e08:	2b20      	cmp	r3, #32
 8003e0a:	d00a      	beq.n	8003e22 <UART_SetConfig+0x1a2>
 8003e0c:	2b20      	cmp	r3, #32
 8003e0e:	d814      	bhi.n	8003e3a <UART_SetConfig+0x1ba>
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d002      	beq.n	8003e1a <UART_SetConfig+0x19a>
 8003e14:	2b10      	cmp	r3, #16
 8003e16:	d008      	beq.n	8003e2a <UART_SetConfig+0x1aa>
 8003e18:	e00f      	b.n	8003e3a <UART_SetConfig+0x1ba>
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e20:	e06d      	b.n	8003efe <UART_SetConfig+0x27e>
 8003e22:	2302      	movs	r3, #2
 8003e24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e28:	e069      	b.n	8003efe <UART_SetConfig+0x27e>
 8003e2a:	2304      	movs	r3, #4
 8003e2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e30:	e065      	b.n	8003efe <UART_SetConfig+0x27e>
 8003e32:	2308      	movs	r3, #8
 8003e34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e38:	e061      	b.n	8003efe <UART_SetConfig+0x27e>
 8003e3a:	2310      	movs	r3, #16
 8003e3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e40:	e05d      	b.n	8003efe <UART_SetConfig+0x27e>
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a4b      	ldr	r2, [pc, #300]	@ (8003f74 <UART_SetConfig+0x2f4>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d125      	bne.n	8003e98 <UART_SetConfig+0x218>
 8003e4c:	4b46      	ldr	r3, [pc, #280]	@ (8003f68 <UART_SetConfig+0x2e8>)
 8003e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e52:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003e56:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e58:	d016      	beq.n	8003e88 <UART_SetConfig+0x208>
 8003e5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e5c:	d818      	bhi.n	8003e90 <UART_SetConfig+0x210>
 8003e5e:	2b80      	cmp	r3, #128	@ 0x80
 8003e60:	d00a      	beq.n	8003e78 <UART_SetConfig+0x1f8>
 8003e62:	2b80      	cmp	r3, #128	@ 0x80
 8003e64:	d814      	bhi.n	8003e90 <UART_SetConfig+0x210>
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d002      	beq.n	8003e70 <UART_SetConfig+0x1f0>
 8003e6a:	2b40      	cmp	r3, #64	@ 0x40
 8003e6c:	d008      	beq.n	8003e80 <UART_SetConfig+0x200>
 8003e6e:	e00f      	b.n	8003e90 <UART_SetConfig+0x210>
 8003e70:	2300      	movs	r3, #0
 8003e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e76:	e042      	b.n	8003efe <UART_SetConfig+0x27e>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e7e:	e03e      	b.n	8003efe <UART_SetConfig+0x27e>
 8003e80:	2304      	movs	r3, #4
 8003e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e86:	e03a      	b.n	8003efe <UART_SetConfig+0x27e>
 8003e88:	2308      	movs	r3, #8
 8003e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e8e:	e036      	b.n	8003efe <UART_SetConfig+0x27e>
 8003e90:	2310      	movs	r3, #16
 8003e92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e96:	e032      	b.n	8003efe <UART_SetConfig+0x27e>
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a30      	ldr	r2, [pc, #192]	@ (8003f60 <UART_SetConfig+0x2e0>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d12a      	bne.n	8003ef8 <UART_SetConfig+0x278>
 8003ea2:	4b31      	ldr	r3, [pc, #196]	@ (8003f68 <UART_SetConfig+0x2e8>)
 8003ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003eac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003eb0:	d01a      	beq.n	8003ee8 <UART_SetConfig+0x268>
 8003eb2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003eb6:	d81b      	bhi.n	8003ef0 <UART_SetConfig+0x270>
 8003eb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ebc:	d00c      	beq.n	8003ed8 <UART_SetConfig+0x258>
 8003ebe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ec2:	d815      	bhi.n	8003ef0 <UART_SetConfig+0x270>
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <UART_SetConfig+0x250>
 8003ec8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ecc:	d008      	beq.n	8003ee0 <UART_SetConfig+0x260>
 8003ece:	e00f      	b.n	8003ef0 <UART_SetConfig+0x270>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ed6:	e012      	b.n	8003efe <UART_SetConfig+0x27e>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ede:	e00e      	b.n	8003efe <UART_SetConfig+0x27e>
 8003ee0:	2304      	movs	r3, #4
 8003ee2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ee6:	e00a      	b.n	8003efe <UART_SetConfig+0x27e>
 8003ee8:	2308      	movs	r3, #8
 8003eea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003eee:	e006      	b.n	8003efe <UART_SetConfig+0x27e>
 8003ef0:	2310      	movs	r3, #16
 8003ef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ef6:	e002      	b.n	8003efe <UART_SetConfig+0x27e>
 8003ef8:	2310      	movs	r3, #16
 8003efa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a17      	ldr	r2, [pc, #92]	@ (8003f60 <UART_SetConfig+0x2e0>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	f040 80a8 	bne.w	800405a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f0a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003f0e:	2b08      	cmp	r3, #8
 8003f10:	d834      	bhi.n	8003f7c <UART_SetConfig+0x2fc>
 8003f12:	a201      	add	r2, pc, #4	@ (adr r2, 8003f18 <UART_SetConfig+0x298>)
 8003f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f18:	08003f3d 	.word	0x08003f3d
 8003f1c:	08003f7d 	.word	0x08003f7d
 8003f20:	08003f45 	.word	0x08003f45
 8003f24:	08003f7d 	.word	0x08003f7d
 8003f28:	08003f4b 	.word	0x08003f4b
 8003f2c:	08003f7d 	.word	0x08003f7d
 8003f30:	08003f7d 	.word	0x08003f7d
 8003f34:	08003f7d 	.word	0x08003f7d
 8003f38:	08003f53 	.word	0x08003f53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f3c:	f7fe fd76 	bl	8002a2c <HAL_RCC_GetPCLK1Freq>
 8003f40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f42:	e021      	b.n	8003f88 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f44:	4b0c      	ldr	r3, [pc, #48]	@ (8003f78 <UART_SetConfig+0x2f8>)
 8003f46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003f48:	e01e      	b.n	8003f88 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f4a:	f7fe fd01 	bl	8002950 <HAL_RCC_GetSysClockFreq>
 8003f4e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f50:	e01a      	b.n	8003f88 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003f58:	e016      	b.n	8003f88 <UART_SetConfig+0x308>
 8003f5a:	bf00      	nop
 8003f5c:	cfff69f3 	.word	0xcfff69f3
 8003f60:	40008000 	.word	0x40008000
 8003f64:	40013800 	.word	0x40013800
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	40004400 	.word	0x40004400
 8003f70:	40004800 	.word	0x40004800
 8003f74:	40004c00 	.word	0x40004c00
 8003f78:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003f86:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 812a 	beq.w	80041e4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f94:	4a9e      	ldr	r2, [pc, #632]	@ (8004210 <UART_SetConfig+0x590>)
 8003f96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	4413      	add	r3, r2
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d305      	bcc.n	8003fc0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d903      	bls.n	8003fc8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003fc6:	e10d      	b.n	80041e4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fca:	2200      	movs	r2, #0
 8003fcc:	60bb      	str	r3, [r7, #8]
 8003fce:	60fa      	str	r2, [r7, #12]
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd4:	4a8e      	ldr	r2, [pc, #568]	@ (8004210 <UART_SetConfig+0x590>)
 8003fd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	2200      	movs	r2, #0
 8003fde:	603b      	str	r3, [r7, #0]
 8003fe0:	607a      	str	r2, [r7, #4]
 8003fe2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fe6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003fea:	f7fc f969 	bl	80002c0 <__aeabi_uldivmod>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	4610      	mov	r0, r2
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	f04f 0300 	mov.w	r3, #0
 8003ffe:	020b      	lsls	r3, r1, #8
 8004000:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004004:	0202      	lsls	r2, r0, #8
 8004006:	6979      	ldr	r1, [r7, #20]
 8004008:	6849      	ldr	r1, [r1, #4]
 800400a:	0849      	lsrs	r1, r1, #1
 800400c:	2000      	movs	r0, #0
 800400e:	460c      	mov	r4, r1
 8004010:	4605      	mov	r5, r0
 8004012:	eb12 0804 	adds.w	r8, r2, r4
 8004016:	eb43 0905 	adc.w	r9, r3, r5
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	469a      	mov	sl, r3
 8004022:	4693      	mov	fp, r2
 8004024:	4652      	mov	r2, sl
 8004026:	465b      	mov	r3, fp
 8004028:	4640      	mov	r0, r8
 800402a:	4649      	mov	r1, r9
 800402c:	f7fc f948 	bl	80002c0 <__aeabi_uldivmod>
 8004030:	4602      	mov	r2, r0
 8004032:	460b      	mov	r3, r1
 8004034:	4613      	mov	r3, r2
 8004036:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800403e:	d308      	bcc.n	8004052 <UART_SetConfig+0x3d2>
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004046:	d204      	bcs.n	8004052 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6a3a      	ldr	r2, [r7, #32]
 800404e:	60da      	str	r2, [r3, #12]
 8004050:	e0c8      	b.n	80041e4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004058:	e0c4      	b.n	80041e4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004062:	d167      	bne.n	8004134 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004064:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004068:	2b08      	cmp	r3, #8
 800406a:	d828      	bhi.n	80040be <UART_SetConfig+0x43e>
 800406c:	a201      	add	r2, pc, #4	@ (adr r2, 8004074 <UART_SetConfig+0x3f4>)
 800406e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004072:	bf00      	nop
 8004074:	08004099 	.word	0x08004099
 8004078:	080040a1 	.word	0x080040a1
 800407c:	080040a9 	.word	0x080040a9
 8004080:	080040bf 	.word	0x080040bf
 8004084:	080040af 	.word	0x080040af
 8004088:	080040bf 	.word	0x080040bf
 800408c:	080040bf 	.word	0x080040bf
 8004090:	080040bf 	.word	0x080040bf
 8004094:	080040b7 	.word	0x080040b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004098:	f7fe fcc8 	bl	8002a2c <HAL_RCC_GetPCLK1Freq>
 800409c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800409e:	e014      	b.n	80040ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040a0:	f7fe fcda 	bl	8002a58 <HAL_RCC_GetPCLK2Freq>
 80040a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80040a6:	e010      	b.n	80040ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040a8:	4b5a      	ldr	r3, [pc, #360]	@ (8004214 <UART_SetConfig+0x594>)
 80040aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80040ac:	e00d      	b.n	80040ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040ae:	f7fe fc4f 	bl	8002950 <HAL_RCC_GetSysClockFreq>
 80040b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80040b4:	e009      	b.n	80040ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80040bc:	e005      	b.n	80040ca <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80040be:	2300      	movs	r3, #0
 80040c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80040c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 8089 	beq.w	80041e4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d6:	4a4e      	ldr	r2, [pc, #312]	@ (8004210 <UART_SetConfig+0x590>)
 80040d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040dc:	461a      	mov	r2, r3
 80040de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80040e4:	005a      	lsls	r2, r3, #1
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	085b      	lsrs	r3, r3, #1
 80040ec:	441a      	add	r2, r3
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040f8:	6a3b      	ldr	r3, [r7, #32]
 80040fa:	2b0f      	cmp	r3, #15
 80040fc:	d916      	bls.n	800412c <UART_SetConfig+0x4ac>
 80040fe:	6a3b      	ldr	r3, [r7, #32]
 8004100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004104:	d212      	bcs.n	800412c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004106:	6a3b      	ldr	r3, [r7, #32]
 8004108:	b29b      	uxth	r3, r3
 800410a:	f023 030f 	bic.w	r3, r3, #15
 800410e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004110:	6a3b      	ldr	r3, [r7, #32]
 8004112:	085b      	lsrs	r3, r3, #1
 8004114:	b29b      	uxth	r3, r3
 8004116:	f003 0307 	and.w	r3, r3, #7
 800411a:	b29a      	uxth	r2, r3
 800411c:	8bfb      	ldrh	r3, [r7, #30]
 800411e:	4313      	orrs	r3, r2
 8004120:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	8bfa      	ldrh	r2, [r7, #30]
 8004128:	60da      	str	r2, [r3, #12]
 800412a:	e05b      	b.n	80041e4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004132:	e057      	b.n	80041e4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004134:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004138:	2b08      	cmp	r3, #8
 800413a:	d828      	bhi.n	800418e <UART_SetConfig+0x50e>
 800413c:	a201      	add	r2, pc, #4	@ (adr r2, 8004144 <UART_SetConfig+0x4c4>)
 800413e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004142:	bf00      	nop
 8004144:	08004169 	.word	0x08004169
 8004148:	08004171 	.word	0x08004171
 800414c:	08004179 	.word	0x08004179
 8004150:	0800418f 	.word	0x0800418f
 8004154:	0800417f 	.word	0x0800417f
 8004158:	0800418f 	.word	0x0800418f
 800415c:	0800418f 	.word	0x0800418f
 8004160:	0800418f 	.word	0x0800418f
 8004164:	08004187 	.word	0x08004187
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004168:	f7fe fc60 	bl	8002a2c <HAL_RCC_GetPCLK1Freq>
 800416c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800416e:	e014      	b.n	800419a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004170:	f7fe fc72 	bl	8002a58 <HAL_RCC_GetPCLK2Freq>
 8004174:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004176:	e010      	b.n	800419a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004178:	4b26      	ldr	r3, [pc, #152]	@ (8004214 <UART_SetConfig+0x594>)
 800417a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800417c:	e00d      	b.n	800419a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800417e:	f7fe fbe7 	bl	8002950 <HAL_RCC_GetSysClockFreq>
 8004182:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004184:	e009      	b.n	800419a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004186:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800418a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800418c:	e005      	b.n	800419a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800418e:	2300      	movs	r3, #0
 8004190:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004198:	bf00      	nop
    }

    if (pclk != 0U)
 800419a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419c:	2b00      	cmp	r3, #0
 800419e:	d021      	beq.n	80041e4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a4:	4a1a      	ldr	r2, [pc, #104]	@ (8004210 <UART_SetConfig+0x590>)
 80041a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041aa:	461a      	mov	r2, r3
 80041ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	085b      	lsrs	r3, r3, #1
 80041b8:	441a      	add	r2, r3
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041c4:	6a3b      	ldr	r3, [r7, #32]
 80041c6:	2b0f      	cmp	r3, #15
 80041c8:	d909      	bls.n	80041de <UART_SetConfig+0x55e>
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041d0:	d205      	bcs.n	80041de <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041d2:	6a3b      	ldr	r3, [r7, #32]
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	60da      	str	r2, [r3, #12]
 80041dc:	e002      	b.n	80041e4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	2200      	movs	r2, #0
 80041f8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	2200      	movs	r2, #0
 80041fe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004200:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004204:	4618      	mov	r0, r3
 8004206:	3730      	adds	r7, #48	@ 0x30
 8004208:	46bd      	mov	sp, r7
 800420a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800420e:	bf00      	nop
 8004210:	08008658 	.word	0x08008658
 8004214:	00f42400 	.word	0x00f42400

08004218 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004224:	f003 0308 	and.w	r3, r3, #8
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00a      	beq.n	8004242 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	430a      	orrs	r2, r1
 8004240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00a      	beq.n	8004264 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00a      	beq.n	8004286 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428a:	f003 0304 	and.w	r3, r3, #4
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00a      	beq.n	80042a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ac:	f003 0310 	and.w	r3, r3, #16
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00a      	beq.n	80042ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ce:	f003 0320 	and.w	r3, r3, #32
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00a      	beq.n	80042ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d01a      	beq.n	800432e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004312:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004316:	d10a      	bne.n	800432e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	430a      	orrs	r2, r1
 800432c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00a      	beq.n	8004350 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	430a      	orrs	r2, r1
 800434e:	605a      	str	r2, [r3, #4]
  }
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b098      	sub	sp, #96	@ 0x60
 8004360:	af02      	add	r7, sp, #8
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800436c:	f7fd f806 	bl	800137c <HAL_GetTick>
 8004370:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0308 	and.w	r3, r3, #8
 800437c:	2b08      	cmp	r3, #8
 800437e:	d12f      	bne.n	80043e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004380:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004388:	2200      	movs	r2, #0
 800438a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f88e 	bl	80044b0 <UART_WaitOnFlagUntilTimeout>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d022      	beq.n	80043e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a2:	e853 3f00 	ldrex	r3, [r3]
 80043a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	461a      	mov	r2, r3
 80043b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80043ba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043c0:	e841 2300 	strex	r3, r2, [r1]
 80043c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1e6      	bne.n	800439a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e063      	b.n	80044a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0304 	and.w	r3, r3, #4
 80043ea:	2b04      	cmp	r3, #4
 80043ec:	d149      	bne.n	8004482 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043ee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043f6:	2200      	movs	r2, #0
 80043f8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 f857 	bl	80044b0 <UART_WaitOnFlagUntilTimeout>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d03c      	beq.n	8004482 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004410:	e853 3f00 	ldrex	r3, [r3]
 8004414:	623b      	str	r3, [r7, #32]
   return(result);
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800441c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	461a      	mov	r2, r3
 8004424:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004426:	633b      	str	r3, [r7, #48]	@ 0x30
 8004428:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800442c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800442e:	e841 2300 	strex	r3, r2, [r1]
 8004432:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1e6      	bne.n	8004408 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	3308      	adds	r3, #8
 8004440:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	e853 3f00 	ldrex	r3, [r3]
 8004448:	60fb      	str	r3, [r7, #12]
   return(result);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f023 0301 	bic.w	r3, r3, #1
 8004450:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	3308      	adds	r3, #8
 8004458:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800445a:	61fa      	str	r2, [r7, #28]
 800445c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445e:	69b9      	ldr	r1, [r7, #24]
 8004460:	69fa      	ldr	r2, [r7, #28]
 8004462:	e841 2300 	strex	r3, r2, [r1]
 8004466:	617b      	str	r3, [r7, #20]
   return(result);
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1e5      	bne.n	800443a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2220      	movs	r2, #32
 8004472:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e012      	b.n	80044a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2220      	movs	r2, #32
 8004486:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2220      	movs	r2, #32
 800448e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3758      	adds	r7, #88	@ 0x58
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	603b      	str	r3, [r7, #0]
 80044bc:	4613      	mov	r3, r2
 80044be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044c0:	e04f      	b.n	8004562 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c8:	d04b      	beq.n	8004562 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ca:	f7fc ff57 	bl	800137c <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d302      	bcc.n	80044e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e04e      	b.n	8004582 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0304 	and.w	r3, r3, #4
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d037      	beq.n	8004562 <UART_WaitOnFlagUntilTimeout+0xb2>
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2b80      	cmp	r3, #128	@ 0x80
 80044f6:	d034      	beq.n	8004562 <UART_WaitOnFlagUntilTimeout+0xb2>
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	2b40      	cmp	r3, #64	@ 0x40
 80044fc:	d031      	beq.n	8004562 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	f003 0308 	and.w	r3, r3, #8
 8004508:	2b08      	cmp	r3, #8
 800450a:	d110      	bne.n	800452e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2208      	movs	r2, #8
 8004512:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f000 fa42 	bl	800499e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2208      	movs	r2, #8
 800451e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e029      	b.n	8004582 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	69db      	ldr	r3, [r3, #28]
 8004534:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004538:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800453c:	d111      	bne.n	8004562 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004546:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f000 fa28 	bl	800499e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2220      	movs	r2, #32
 8004552:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e00f      	b.n	8004582 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	69da      	ldr	r2, [r3, #28]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	4013      	ands	r3, r2
 800456c:	68ba      	ldr	r2, [r7, #8]
 800456e:	429a      	cmp	r2, r3
 8004570:	bf0c      	ite	eq
 8004572:	2301      	moveq	r3, #1
 8004574:	2300      	movne	r3, #0
 8004576:	b2db      	uxtb	r3, r3
 8004578:	461a      	mov	r2, r3
 800457a:	79fb      	ldrb	r3, [r7, #7]
 800457c:	429a      	cmp	r2, r3
 800457e:	d0a0      	beq.n	80044c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800458c:	b480      	push	{r7}
 800458e:	b0a3      	sub	sp, #140	@ 0x8c
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	4613      	mov	r3, r2
 8004598:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	88fa      	ldrh	r2, [r7, #6]
 80045a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	88fa      	ldrh	r2, [r7, #6]
 80045ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045be:	d10e      	bne.n	80045de <UART_Start_Receive_IT+0x52>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d105      	bne.n	80045d4 <UART_Start_Receive_IT+0x48>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80045ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80045d2:	e02d      	b.n	8004630 <UART_Start_Receive_IT+0xa4>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	22ff      	movs	r2, #255	@ 0xff
 80045d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80045dc:	e028      	b.n	8004630 <UART_Start_Receive_IT+0xa4>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10d      	bne.n	8004602 <UART_Start_Receive_IT+0x76>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d104      	bne.n	80045f8 <UART_Start_Receive_IT+0x6c>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	22ff      	movs	r2, #255	@ 0xff
 80045f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80045f6:	e01b      	b.n	8004630 <UART_Start_Receive_IT+0xa4>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	227f      	movs	r2, #127	@ 0x7f
 80045fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004600:	e016      	b.n	8004630 <UART_Start_Receive_IT+0xa4>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800460a:	d10d      	bne.n	8004628 <UART_Start_Receive_IT+0x9c>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d104      	bne.n	800461e <UART_Start_Receive_IT+0x92>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	227f      	movs	r2, #127	@ 0x7f
 8004618:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800461c:	e008      	b.n	8004630 <UART_Start_Receive_IT+0xa4>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	223f      	movs	r2, #63	@ 0x3f
 8004622:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004626:	e003      	b.n	8004630 <UART_Start_Receive_IT+0xa4>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2222      	movs	r2, #34	@ 0x22
 800463c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	3308      	adds	r3, #8
 8004646:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004648:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800464a:	e853 3f00 	ldrex	r3, [r3]
 800464e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8004650:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004652:	f043 0301 	orr.w	r3, r3, #1
 8004656:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	3308      	adds	r3, #8
 8004660:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004664:	673a      	str	r2, [r7, #112]	@ 0x70
 8004666:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004668:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800466a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800466c:	e841 2300 	strex	r3, r2, [r1]
 8004670:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8004672:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1e3      	bne.n	8004640 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800467c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004680:	d14f      	bne.n	8004722 <UART_Start_Receive_IT+0x196>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004688:	88fa      	ldrh	r2, [r7, #6]
 800468a:	429a      	cmp	r2, r3
 800468c:	d349      	bcc.n	8004722 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004696:	d107      	bne.n	80046a8 <UART_Start_Receive_IT+0x11c>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d103      	bne.n	80046a8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4a47      	ldr	r2, [pc, #284]	@ (80047c0 <UART_Start_Receive_IT+0x234>)
 80046a4:	675a      	str	r2, [r3, #116]	@ 0x74
 80046a6:	e002      	b.n	80046ae <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4a46      	ldr	r2, [pc, #280]	@ (80047c4 <UART_Start_Receive_IT+0x238>)
 80046ac:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d01a      	beq.n	80046ec <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046be:	e853 3f00 	ldrex	r3, [r3]
 80046c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80046c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	461a      	mov	r2, r3
 80046d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80046d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046da:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046dc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80046de:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80046e0:	e841 2300 	strex	r3, r2, [r1]
 80046e4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80046e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1e4      	bne.n	80046b6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	3308      	adds	r3, #8
 80046f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046f6:	e853 3f00 	ldrex	r3, [r3]
 80046fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004702:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	3308      	adds	r3, #8
 800470a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800470c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800470e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004710:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004712:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004714:	e841 2300 	strex	r3, r2, [r1]
 8004718:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800471a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1e5      	bne.n	80046ec <UART_Start_Receive_IT+0x160>
 8004720:	e046      	b.n	80047b0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800472a:	d107      	bne.n	800473c <UART_Start_Receive_IT+0x1b0>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d103      	bne.n	800473c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	4a24      	ldr	r2, [pc, #144]	@ (80047c8 <UART_Start_Receive_IT+0x23c>)
 8004738:	675a      	str	r2, [r3, #116]	@ 0x74
 800473a:	e002      	b.n	8004742 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4a23      	ldr	r2, [pc, #140]	@ (80047cc <UART_Start_Receive_IT+0x240>)
 8004740:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d019      	beq.n	800477e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004752:	e853 3f00 	ldrex	r3, [r3]
 8004756:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800475e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	461a      	mov	r2, r3
 8004766:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004768:	637b      	str	r3, [r7, #52]	@ 0x34
 800476a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800476e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004770:	e841 2300 	strex	r3, r2, [r1]
 8004774:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1e6      	bne.n	800474a <UART_Start_Receive_IT+0x1be>
 800477c:	e018      	b.n	80047b0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	e853 3f00 	ldrex	r3, [r3]
 800478a:	613b      	str	r3, [r7, #16]
   return(result);
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	f043 0320 	orr.w	r3, r3, #32
 8004792:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	461a      	mov	r2, r3
 800479a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800479c:	623b      	str	r3, [r7, #32]
 800479e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a0:	69f9      	ldr	r1, [r7, #28]
 80047a2:	6a3a      	ldr	r2, [r7, #32]
 80047a4:	e841 2300 	strex	r3, r2, [r1]
 80047a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1e6      	bne.n	800477e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	378c      	adds	r7, #140	@ 0x8c
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	0800579d 	.word	0x0800579d
 80047c4:	08005439 	.word	0x08005439
 80047c8:	08005281 	.word	0x08005281
 80047cc:	080050c9 	.word	0x080050c9

080047d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b096      	sub	sp, #88	@ 0x58
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	4613      	mov	r3, r2
 80047dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	88fa      	ldrh	r2, [r7, #6]
 80047e8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2222      	movs	r2, #34	@ 0x22
 80047f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004802:	2b00      	cmp	r3, #0
 8004804:	d02d      	beq.n	8004862 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800480c:	4a40      	ldr	r2, [pc, #256]	@ (8004910 <UART_Start_Receive_DMA+0x140>)
 800480e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004816:	4a3f      	ldr	r2, [pc, #252]	@ (8004914 <UART_Start_Receive_DMA+0x144>)
 8004818:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004820:	4a3d      	ldr	r2, [pc, #244]	@ (8004918 <UART_Start_Receive_DMA+0x148>)
 8004822:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800482a:	2200      	movs	r2, #0
 800482c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3324      	adds	r3, #36	@ 0x24
 800483a:	4619      	mov	r1, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004840:	461a      	mov	r2, r3
 8004842:	88fb      	ldrh	r3, [r7, #6]
 8004844:	f7fc ff5e 	bl	8001704 <HAL_DMA_Start_IT>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d009      	beq.n	8004862 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2210      	movs	r2, #16
 8004852:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2220      	movs	r2, #32
 800485a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e051      	b.n	8004906 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d018      	beq.n	800489c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004870:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004872:	e853 3f00 	ldrex	r3, [r3]
 8004876:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800487a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800487e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	461a      	mov	r2, r3
 8004886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004888:	64bb      	str	r3, [r7, #72]	@ 0x48
 800488a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800488e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004890:	e841 2300 	strex	r3, r2, [r1]
 8004894:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004896:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1e6      	bne.n	800486a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	3308      	adds	r3, #8
 80048a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a6:	e853 3f00 	ldrex	r3, [r3]
 80048aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ae:	f043 0301 	orr.w	r3, r3, #1
 80048b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	3308      	adds	r3, #8
 80048ba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80048bc:	637a      	str	r2, [r7, #52]	@ 0x34
 80048be:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80048c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80048c4:	e841 2300 	strex	r3, r2, [r1]
 80048c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80048ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1e5      	bne.n	800489c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	3308      	adds	r3, #8
 80048d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	e853 3f00 	ldrex	r3, [r3]
 80048de:	613b      	str	r3, [r7, #16]
   return(result);
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	3308      	adds	r3, #8
 80048ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048f0:	623a      	str	r2, [r7, #32]
 80048f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f4:	69f9      	ldr	r1, [r7, #28]
 80048f6:	6a3a      	ldr	r2, [r7, #32]
 80048f8:	e841 2300 	strex	r3, r2, [r1]
 80048fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1e5      	bne.n	80048d0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3758      	adds	r7, #88	@ 0x58
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	08004b21 	.word	0x08004b21
 8004914:	08004c4d 	.word	0x08004c4d
 8004918:	08004c8b 	.word	0x08004c8b

0800491c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800491c:	b480      	push	{r7}
 800491e:	b08f      	sub	sp, #60	@ 0x3c
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	e853 3f00 	ldrex	r3, [r3]
 8004930:	61fb      	str	r3, [r7, #28]
   return(result);
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004938:	637b      	str	r3, [r7, #52]	@ 0x34
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	461a      	mov	r2, r3
 8004940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004942:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004944:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004946:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004948:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800494a:	e841 2300 	strex	r3, r2, [r1]
 800494e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1e6      	bne.n	8004924 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	3308      	adds	r3, #8
 800495c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	e853 3f00 	ldrex	r3, [r3]
 8004964:	60bb      	str	r3, [r7, #8]
   return(result);
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800496c:	633b      	str	r3, [r7, #48]	@ 0x30
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	3308      	adds	r3, #8
 8004974:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004976:	61ba      	str	r2, [r7, #24]
 8004978:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497a:	6979      	ldr	r1, [r7, #20]
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	e841 2300 	strex	r3, r2, [r1]
 8004982:	613b      	str	r3, [r7, #16]
   return(result);
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1e5      	bne.n	8004956 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2220      	movs	r2, #32
 800498e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8004992:	bf00      	nop
 8004994:	373c      	adds	r7, #60	@ 0x3c
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800499e:	b480      	push	{r7}
 80049a0:	b095      	sub	sp, #84	@ 0x54
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049ae:	e853 3f00 	ldrex	r3, [r3]
 80049b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80049b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	461a      	mov	r2, r3
 80049c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80049c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80049ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049cc:	e841 2300 	strex	r3, r2, [r1]
 80049d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80049d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1e6      	bne.n	80049a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	3308      	adds	r3, #8
 80049de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	e853 3f00 	ldrex	r3, [r3]
 80049e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049ee:	f023 0301 	bic.w	r3, r3, #1
 80049f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	3308      	adds	r3, #8
 80049fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a04:	e841 2300 	strex	r3, r2, [r1]
 8004a08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1e3      	bne.n	80049d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d118      	bne.n	8004a4a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	e853 3f00 	ldrex	r3, [r3]
 8004a24:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	f023 0310 	bic.w	r3, r3, #16
 8004a2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	461a      	mov	r2, r3
 8004a34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a36:	61bb      	str	r3, [r7, #24]
 8004a38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3a:	6979      	ldr	r1, [r7, #20]
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	e841 2300 	strex	r3, r2, [r1]
 8004a42:	613b      	str	r3, [r7, #16]
   return(result);
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1e6      	bne.n	8004a18 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004a5e:	bf00      	nop
 8004a60:	3754      	adds	r7, #84	@ 0x54
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b090      	sub	sp, #64	@ 0x40
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a76:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0320 	and.w	r3, r3, #32
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d137      	bne.n	8004af6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8004a86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	3308      	adds	r3, #8
 8004a94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a98:	e853 3f00 	ldrex	r3, [r3]
 8004a9c:	623b      	str	r3, [r7, #32]
   return(result);
 8004a9e:	6a3b      	ldr	r3, [r7, #32]
 8004aa0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004aa4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004aa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	3308      	adds	r3, #8
 8004aac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004aae:	633a      	str	r2, [r7, #48]	@ 0x30
 8004ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ab4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ab6:	e841 2300 	strex	r3, r2, [r1]
 8004aba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1e5      	bne.n	8004a8e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	e853 3f00 	ldrex	r3, [r3]
 8004ace:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ad6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	461a      	mov	r2, r3
 8004ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ae0:	61fb      	str	r3, [r7, #28]
 8004ae2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae4:	69b9      	ldr	r1, [r7, #24]
 8004ae6:	69fa      	ldr	r2, [r7, #28]
 8004ae8:	e841 2300 	strex	r3, r2, [r1]
 8004aec:	617b      	str	r3, [r7, #20]
   return(result);
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1e6      	bne.n	8004ac2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004af4:	e002      	b.n	8004afc <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004af6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004af8:	f7ff f88e 	bl	8003c18 <HAL_UART_TxCpltCallback>
}
 8004afc:	bf00      	nop
 8004afe:	3740      	adds	r7, #64	@ 0x40
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b10:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f7ff f88a 	bl	8003c2c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b18:	bf00      	nop
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b09c      	sub	sp, #112	@ 0x70
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b2c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0320 	and.w	r3, r3, #32
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d171      	bne.n	8004c20 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8004b3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b4c:	e853 3f00 	ldrex	r3, [r3]
 8004b50:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	461a      	mov	r2, r3
 8004b60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b64:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b6a:	e841 2300 	strex	r3, r2, [r1]
 8004b6e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004b70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1e6      	bne.n	8004b44 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	3308      	adds	r3, #8
 8004b7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b80:	e853 3f00 	ldrex	r3, [r3]
 8004b84:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b88:	f023 0301 	bic.w	r3, r3, #1
 8004b8c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	3308      	adds	r3, #8
 8004b94:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004b96:	647a      	str	r2, [r7, #68]	@ 0x44
 8004b98:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b9e:	e841 2300 	strex	r3, r2, [r1]
 8004ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ba4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1e5      	bne.n	8004b76 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004baa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	3308      	adds	r3, #8
 8004bb0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb4:	e853 3f00 	ldrex	r3, [r3]
 8004bb8:	623b      	str	r3, [r7, #32]
   return(result);
 8004bba:	6a3b      	ldr	r3, [r7, #32]
 8004bbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bc0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004bc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	3308      	adds	r3, #8
 8004bc8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004bca:	633a      	str	r2, [r7, #48]	@ 0x30
 8004bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bd2:	e841 2300 	strex	r3, r2, [r1]
 8004bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1e5      	bne.n	8004baa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004bde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004be0:	2220      	movs	r2, #32
 8004be2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004be6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004be8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d118      	bne.n	8004c20 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	e853 3f00 	ldrex	r3, [r3]
 8004bfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f023 0310 	bic.w	r3, r3, #16
 8004c02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	461a      	mov	r2, r3
 8004c0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c0c:	61fb      	str	r3, [r7, #28]
 8004c0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c10:	69b9      	ldr	r1, [r7, #24]
 8004c12:	69fa      	ldr	r2, [r7, #28]
 8004c14:	e841 2300 	strex	r3, r2, [r1]
 8004c18:	617b      	str	r3, [r7, #20]
   return(result);
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1e6      	bne.n	8004bee <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c22:	2200      	movs	r2, #0
 8004c24:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d107      	bne.n	8004c3e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004c34:	4619      	mov	r1, r3
 8004c36:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004c38:	f7ff f816 	bl	8003c68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004c3c:	e002      	b.n	8004c44 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004c3e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004c40:	f7fc f860 	bl	8000d04 <HAL_UART_RxCpltCallback>
}
 8004c44:	bf00      	nop
 8004c46:	3770      	adds	r7, #112	@ 0x70
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c58:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d109      	bne.n	8004c7c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004c6e:	085b      	lsrs	r3, r3, #1
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	4619      	mov	r1, r3
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f7fe fff7 	bl	8003c68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004c7a:	e002      	b.n	8004c82 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f7fe ffdf 	bl	8003c40 <HAL_UART_RxHalfCpltCallback>
}
 8004c82:	bf00      	nop
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b086      	sub	sp, #24
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c96:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c9e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cb2:	2b80      	cmp	r3, #128	@ 0x80
 8004cb4:	d109      	bne.n	8004cca <UART_DMAError+0x40>
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	2b21      	cmp	r3, #33	@ 0x21
 8004cba:	d106      	bne.n	8004cca <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8004cc4:	6978      	ldr	r0, [r7, #20]
 8004cc6:	f7ff fe29 	bl	800491c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cd4:	2b40      	cmp	r3, #64	@ 0x40
 8004cd6:	d109      	bne.n	8004cec <UART_DMAError+0x62>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2b22      	cmp	r3, #34	@ 0x22
 8004cdc:	d106      	bne.n	8004cec <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8004ce6:	6978      	ldr	r0, [r7, #20]
 8004ce8:	f7ff fe59 	bl	800499e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cf2:	f043 0210 	orr.w	r2, r3, #16
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cfc:	6978      	ldr	r0, [r7, #20]
 8004cfe:	f7fe ffa9 	bl	8003c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d02:	bf00      	nop
 8004d04:	3718      	adds	r7, #24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b084      	sub	sp, #16
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f7fe ff97 	bl	8003c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d26:	bf00      	nop
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b08f      	sub	sp, #60	@ 0x3c
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d3c:	2b21      	cmp	r3, #33	@ 0x21
 8004d3e:	d14c      	bne.n	8004dda <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d132      	bne.n	8004db2 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d52:	6a3b      	ldr	r3, [r7, #32]
 8004d54:	e853 3f00 	ldrex	r3, [r3]
 8004d58:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d60:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	461a      	mov	r2, r3
 8004d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d6c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d72:	e841 2300 	strex	r3, r2, [r1]
 8004d76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1e6      	bne.n	8004d4c <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	e853 3f00 	ldrex	r3, [r3]
 8004d8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d92:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	461a      	mov	r2, r3
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d9c:	61bb      	str	r3, [r7, #24]
 8004d9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da0:	6979      	ldr	r1, [r7, #20]
 8004da2:	69ba      	ldr	r2, [r7, #24]
 8004da4:	e841 2300 	strex	r3, r2, [r1]
 8004da8:	613b      	str	r3, [r7, #16]
   return(result);
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1e6      	bne.n	8004d7e <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004db0:	e013      	b.n	8004dda <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004db6:	781a      	ldrb	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dc2:	1c5a      	adds	r2, r3, #1
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8004dda:	bf00      	nop
 8004ddc:	373c      	adds	r7, #60	@ 0x3c
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b091      	sub	sp, #68	@ 0x44
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004df4:	2b21      	cmp	r3, #33	@ 0x21
 8004df6:	d151      	bne.n	8004e9c <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d132      	bne.n	8004e6a <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0c:	e853 3f00 	ldrex	r3, [r3]
 8004e10:	623b      	str	r3, [r7, #32]
   return(result);
 8004e12:	6a3b      	ldr	r3, [r7, #32]
 8004e14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e18:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e22:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e24:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e2a:	e841 2300 	strex	r3, r2, [r1]
 8004e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1e6      	bne.n	8004e04 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	e853 3f00 	ldrex	r3, [r3]
 8004e42:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	461a      	mov	r2, r3
 8004e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e54:	61fb      	str	r3, [r7, #28]
 8004e56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e58:	69b9      	ldr	r1, [r7, #24]
 8004e5a:	69fa      	ldr	r2, [r7, #28]
 8004e5c:	e841 2300 	strex	r3, r2, [r1]
 8004e60:	617b      	str	r3, [r7, #20]
   return(result);
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1e6      	bne.n	8004e36 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004e68:	e018      	b.n	8004e9c <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004e70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e72:	881b      	ldrh	r3, [r3, #0]
 8004e74:	461a      	mov	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e7e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e84:	1c9a      	adds	r2, r3, #2
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	3b01      	subs	r3, #1
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8004e9c:	bf00      	nop
 8004e9e:	3744      	adds	r7, #68	@ 0x44
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b091      	sub	sp, #68	@ 0x44
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eb6:	2b21      	cmp	r3, #33	@ 0x21
 8004eb8:	d160      	bne.n	8004f7c <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004ec0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004ec2:	e057      	b.n	8004f74 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d133      	bne.n	8004f38 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	3308      	adds	r3, #8
 8004ed6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eda:	e853 3f00 	ldrex	r3, [r3]
 8004ede:	623b      	str	r3, [r7, #32]
   return(result);
 8004ee0:	6a3b      	ldr	r3, [r7, #32]
 8004ee2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004ee6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	3308      	adds	r3, #8
 8004eee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004ef0:	633a      	str	r2, [r7, #48]	@ 0x30
 8004ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ef6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ef8:	e841 2300 	strex	r3, r2, [r1]
 8004efc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1e5      	bne.n	8004ed0 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	e853 3f00 	ldrex	r3, [r3]
 8004f10:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f18:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f22:	61fb      	str	r3, [r7, #28]
 8004f24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f26:	69b9      	ldr	r1, [r7, #24]
 8004f28:	69fa      	ldr	r2, [r7, #28]
 8004f2a:	e841 2300 	strex	r3, r2, [r1]
 8004f2e:	617b      	str	r3, [r7, #20]
   return(result);
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1e6      	bne.n	8004f04 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8004f36:	e021      	b.n	8004f7c <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d013      	beq.n	8004f6e <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f4a:	781a      	ldrb	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f56:	1c5a      	adds	r2, r3, #1
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	3b01      	subs	r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004f6e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004f70:	3b01      	subs	r3, #1
 8004f72:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004f74:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1a4      	bne.n	8004ec4 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004f7a:	e7ff      	b.n	8004f7c <UART_TxISR_8BIT_FIFOEN+0xd4>
 8004f7c:	bf00      	nop
 8004f7e:	3744      	adds	r7, #68	@ 0x44
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b091      	sub	sp, #68	@ 0x44
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f96:	2b21      	cmp	r3, #33	@ 0x21
 8004f98:	d165      	bne.n	8005066 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004fa0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004fa2:	e05c      	b.n	800505e <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d133      	bne.n	8005018 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	3308      	adds	r3, #8
 8004fb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	e853 3f00 	ldrex	r3, [r3]
 8004fbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004fc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3308      	adds	r3, #8
 8004fce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004fd0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fd8:	e841 2300 	strex	r3, r2, [r1]
 8004fdc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1e5      	bne.n	8004fb0 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	e853 3f00 	ldrex	r3, [r3]
 8004ff0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ff8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	461a      	mov	r2, r3
 8005000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005002:	61bb      	str	r3, [r7, #24]
 8005004:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005006:	6979      	ldr	r1, [r7, #20]
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	e841 2300 	strex	r3, r2, [r1]
 800500e:	613b      	str	r3, [r7, #16]
   return(result);
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1e6      	bne.n	8004fe4 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8005016:	e026      	b.n	8005066 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005022:	2b00      	cmp	r3, #0
 8005024:	d018      	beq.n	8005058 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800502a:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800502c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800502e:	881b      	ldrh	r3, [r3, #0]
 8005030:	461a      	mov	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800503a:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005040:	1c9a      	adds	r2, r3, #2
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800504c:	b29b      	uxth	r3, r3
 800504e:	3b01      	subs	r3, #1
 8005050:	b29a      	uxth	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005058:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800505a:	3b01      	subs	r3, #1
 800505c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800505e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005060:	2b00      	cmp	r3, #0
 8005062:	d19f      	bne.n	8004fa4 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8005064:	e7ff      	b.n	8005066 <UART_TxISR_16BIT_FIFOEN+0xde>
 8005066:	bf00      	nop
 8005068:	3744      	adds	r7, #68	@ 0x44
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b088      	sub	sp, #32
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	e853 3f00 	ldrex	r3, [r3]
 8005086:	60bb      	str	r3, [r7, #8]
   return(result);
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800508e:	61fb      	str	r3, [r7, #28]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	461a      	mov	r2, r3
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	61bb      	str	r3, [r7, #24]
 800509a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509c:	6979      	ldr	r1, [r7, #20]
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	e841 2300 	strex	r3, r2, [r1]
 80050a4:	613b      	str	r3, [r7, #16]
   return(result);
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1e6      	bne.n	800507a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2220      	movs	r2, #32
 80050b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7fe fdac 	bl	8003c18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050c0:	bf00      	nop
 80050c2:	3720      	adds	r7, #32
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b09c      	sub	sp, #112	@ 0x70
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80050d6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050e0:	2b22      	cmp	r3, #34	@ 0x22
 80050e2:	f040 80be 	bne.w	8005262 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ec:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80050f0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80050f4:	b2d9      	uxtb	r1, r3
 80050f6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80050fa:	b2da      	uxtb	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005100:	400a      	ands	r2, r1
 8005102:	b2d2      	uxtb	r2, r2
 8005104:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800510a:	1c5a      	adds	r2, r3, #1
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005116:	b29b      	uxth	r3, r3
 8005118:	3b01      	subs	r3, #1
 800511a:	b29a      	uxth	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005128:	b29b      	uxth	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	f040 80a1 	bne.w	8005272 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005136:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005138:	e853 3f00 	ldrex	r3, [r3]
 800513c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800513e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005140:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005144:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	461a      	mov	r2, r3
 800514c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800514e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005150:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005152:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005154:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005156:	e841 2300 	strex	r3, r2, [r1]
 800515a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800515c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1e6      	bne.n	8005130 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	3308      	adds	r3, #8
 8005168:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800516c:	e853 3f00 	ldrex	r3, [r3]
 8005170:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005174:	f023 0301 	bic.w	r3, r3, #1
 8005178:	667b      	str	r3, [r7, #100]	@ 0x64
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	3308      	adds	r3, #8
 8005180:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005182:	647a      	str	r2, [r7, #68]	@ 0x44
 8005184:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005186:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005188:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800518a:	e841 2300 	strex	r3, r2, [r1]
 800518e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1e5      	bne.n	8005162 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2220      	movs	r2, #32
 800519a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a33      	ldr	r2, [pc, #204]	@ (800527c <UART_RxISR_8BIT+0x1b4>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d01f      	beq.n	80051f4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d018      	beq.n	80051f4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ca:	e853 3f00 	ldrex	r3, [r3]
 80051ce:	623b      	str	r3, [r7, #32]
   return(result);
 80051d0:	6a3b      	ldr	r3, [r7, #32]
 80051d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80051d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	461a      	mov	r2, r3
 80051de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80051e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80051e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051e8:	e841 2300 	strex	r3, r2, [r1]
 80051ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1e6      	bne.n	80051c2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d12e      	bne.n	800525a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	e853 3f00 	ldrex	r3, [r3]
 800520e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f023 0310 	bic.w	r3, r3, #16
 8005216:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	461a      	mov	r2, r3
 800521e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005220:	61fb      	str	r3, [r7, #28]
 8005222:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005224:	69b9      	ldr	r1, [r7, #24]
 8005226:	69fa      	ldr	r2, [r7, #28]
 8005228:	e841 2300 	strex	r3, r2, [r1]
 800522c:	617b      	str	r3, [r7, #20]
   return(result);
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1e6      	bne.n	8005202 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	f003 0310 	and.w	r3, r3, #16
 800523e:	2b10      	cmp	r3, #16
 8005240:	d103      	bne.n	800524a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2210      	movs	r2, #16
 8005248:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005250:	4619      	mov	r1, r3
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7fe fd08 	bl	8003c68 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005258:	e00b      	b.n	8005272 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7fb fd52 	bl	8000d04 <HAL_UART_RxCpltCallback>
}
 8005260:	e007      	b.n	8005272 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	699a      	ldr	r2, [r3, #24]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f042 0208 	orr.w	r2, r2, #8
 8005270:	619a      	str	r2, [r3, #24]
}
 8005272:	bf00      	nop
 8005274:	3770      	adds	r7, #112	@ 0x70
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	40008000 	.word	0x40008000

08005280 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b09c      	sub	sp, #112	@ 0x70
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800528e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005298:	2b22      	cmp	r3, #34	@ 0x22
 800529a:	f040 80be 	bne.w	800541a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052ac:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80052ae:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80052b2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80052b6:	4013      	ands	r3, r2
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052bc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052c2:	1c9a      	adds	r2, r3, #2
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	3b01      	subs	r3, #1
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f040 80a1 	bne.w	800542a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052f0:	e853 3f00 	ldrex	r3, [r3]
 80052f4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80052f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	461a      	mov	r2, r3
 8005304:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005306:	657b      	str	r3, [r7, #84]	@ 0x54
 8005308:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800530c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800530e:	e841 2300 	strex	r3, r2, [r1]
 8005312:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005314:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1e6      	bne.n	80052e8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	3308      	adds	r3, #8
 8005320:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005324:	e853 3f00 	ldrex	r3, [r3]
 8005328:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800532a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800532c:	f023 0301 	bic.w	r3, r3, #1
 8005330:	663b      	str	r3, [r7, #96]	@ 0x60
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	3308      	adds	r3, #8
 8005338:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800533a:	643a      	str	r2, [r7, #64]	@ 0x40
 800533c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005340:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005342:	e841 2300 	strex	r3, r2, [r1]
 8005346:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1e5      	bne.n	800531a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2220      	movs	r2, #32
 8005352:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a33      	ldr	r2, [pc, #204]	@ (8005434 <UART_RxISR_16BIT+0x1b4>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d01f      	beq.n	80053ac <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d018      	beq.n	80053ac <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005380:	6a3b      	ldr	r3, [r7, #32]
 8005382:	e853 3f00 	ldrex	r3, [r3]
 8005386:	61fb      	str	r3, [r7, #28]
   return(result);
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800538e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	461a      	mov	r2, r3
 8005396:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005398:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800539a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800539e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053a0:	e841 2300 	strex	r3, r2, [r1]
 80053a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1e6      	bne.n	800537a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d12e      	bne.n	8005412 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	e853 3f00 	ldrex	r3, [r3]
 80053c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	f023 0310 	bic.w	r3, r3, #16
 80053ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	461a      	mov	r2, r3
 80053d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80053d8:	61bb      	str	r3, [r7, #24]
 80053da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053dc:	6979      	ldr	r1, [r7, #20]
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	e841 2300 	strex	r3, r2, [r1]
 80053e4:	613b      	str	r3, [r7, #16]
   return(result);
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1e6      	bne.n	80053ba <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	69db      	ldr	r3, [r3, #28]
 80053f2:	f003 0310 	and.w	r3, r3, #16
 80053f6:	2b10      	cmp	r3, #16
 80053f8:	d103      	bne.n	8005402 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2210      	movs	r2, #16
 8005400:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005408:	4619      	mov	r1, r3
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7fe fc2c 	bl	8003c68 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005410:	e00b      	b.n	800542a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f7fb fc76 	bl	8000d04 <HAL_UART_RxCpltCallback>
}
 8005418:	e007      	b.n	800542a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	699a      	ldr	r2, [r3, #24]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f042 0208 	orr.w	r2, r2, #8
 8005428:	619a      	str	r2, [r3, #24]
}
 800542a:	bf00      	nop
 800542c:	3770      	adds	r7, #112	@ 0x70
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	40008000 	.word	0x40008000

08005438 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b0ac      	sub	sp, #176	@ 0xb0
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005446:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	69db      	ldr	r3, [r3, #28]
 8005450:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800546e:	2b22      	cmp	r3, #34	@ 0x22
 8005470:	f040 8183 	bne.w	800577a <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800547a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800547e:	e126      	b.n	80056ce <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005486:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800548a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800548e:	b2d9      	uxtb	r1, r3
 8005490:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8005494:	b2da      	uxtb	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800549a:	400a      	ands	r2, r1
 800549c:	b2d2      	uxtb	r2, r2
 800549e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054a4:	1c5a      	adds	r2, r3, #1
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	3b01      	subs	r3, #1
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80054c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054ca:	f003 0307 	and.w	r3, r3, #7
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d053      	beq.n	800557a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80054d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d011      	beq.n	8005502 <UART_RxISR_8BIT_FIFOEN+0xca>
 80054de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80054e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00b      	beq.n	8005502 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2201      	movs	r2, #1
 80054f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054f8:	f043 0201 	orr.w	r2, r3, #1
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005502:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d011      	beq.n	8005532 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800550e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00b      	beq.n	8005532 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2202      	movs	r2, #2
 8005520:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005528:	f043 0204 	orr.w	r2, r3, #4
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005532:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005536:	f003 0304 	and.w	r3, r3, #4
 800553a:	2b00      	cmp	r3, #0
 800553c:	d011      	beq.n	8005562 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800553e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00b      	beq.n	8005562 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2204      	movs	r2, #4
 8005550:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005558:	f043 0202 	orr.w	r2, r3, #2
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005568:	2b00      	cmp	r3, #0
 800556a:	d006      	beq.n	800557a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7fe fb71 	bl	8003c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005580:	b29b      	uxth	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	f040 80a3 	bne.w	80056ce <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005590:	e853 3f00 	ldrex	r3, [r3]
 8005594:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8005596:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005598:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800559c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	461a      	mov	r2, r3
 80055a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80055aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80055ac:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ae:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80055b0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80055b2:	e841 2300 	strex	r3, r2, [r1]
 80055b6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80055b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1e4      	bne.n	8005588 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	3308      	adds	r3, #8
 80055c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055c8:	e853 3f00 	ldrex	r3, [r3]
 80055cc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80055ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80055d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055d4:	f023 0301 	bic.w	r3, r3, #1
 80055d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	3308      	adds	r3, #8
 80055e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80055e6:	66ba      	str	r2, [r7, #104]	@ 0x68
 80055e8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ea:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80055ec:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80055ee:	e841 2300 	strex	r3, r2, [r1]
 80055f2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80055f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1e1      	bne.n	80055be <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2220      	movs	r2, #32
 80055fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a60      	ldr	r2, [pc, #384]	@ (8005794 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d021      	beq.n	800565c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d01a      	beq.n	800565c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800562e:	e853 3f00 	ldrex	r3, [r3]
 8005632:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005634:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005636:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800563a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	461a      	mov	r2, r3
 8005644:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005648:	657b      	str	r3, [r7, #84]	@ 0x54
 800564a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800564e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005650:	e841 2300 	strex	r3, r2, [r1]
 8005654:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005656:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1e4      	bne.n	8005626 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005660:	2b01      	cmp	r3, #1
 8005662:	d130      	bne.n	80056c6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005672:	e853 3f00 	ldrex	r3, [r3]
 8005676:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800567a:	f023 0310 	bic.w	r3, r3, #16
 800567e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	461a      	mov	r2, r3
 8005688:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800568c:	643b      	str	r3, [r7, #64]	@ 0x40
 800568e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005690:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005692:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005694:	e841 2300 	strex	r3, r2, [r1]
 8005698:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800569a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1e4      	bne.n	800566a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	f003 0310 	and.w	r3, r3, #16
 80056aa:	2b10      	cmp	r3, #16
 80056ac:	d103      	bne.n	80056b6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2210      	movs	r2, #16
 80056b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80056bc:	4619      	mov	r1, r3
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7fe fad2 	bl	8003c68 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80056c4:	e00e      	b.n	80056e4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7fb fb1c 	bl	8000d04 <HAL_UART_RxCpltCallback>
        break;
 80056cc:	e00a      	b.n	80056e4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80056ce:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d006      	beq.n	80056e4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 80056d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056da:	f003 0320 	and.w	r3, r3, #32
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f47f aece 	bne.w	8005480 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80056ea:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80056ee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d049      	beq.n	800578a <UART_RxISR_8BIT_FIFOEN+0x352>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80056fc:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8005700:	429a      	cmp	r2, r3
 8005702:	d242      	bcs.n	800578a <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	3308      	adds	r3, #8
 800570a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	e853 3f00 	ldrex	r3, [r3]
 8005712:	61fb      	str	r3, [r7, #28]
   return(result);
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800571a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	3308      	adds	r3, #8
 8005724:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005728:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800572a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800572e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005730:	e841 2300 	strex	r3, r2, [r1]
 8005734:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1e3      	bne.n	8005704 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a16      	ldr	r2, [pc, #88]	@ (8005798 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8005740:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	e853 3f00 	ldrex	r3, [r3]
 800574e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	f043 0320 	orr.w	r3, r3, #32
 8005756:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	461a      	mov	r2, r3
 8005760:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005764:	61bb      	str	r3, [r7, #24]
 8005766:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005768:	6979      	ldr	r1, [r7, #20]
 800576a:	69ba      	ldr	r2, [r7, #24]
 800576c:	e841 2300 	strex	r3, r2, [r1]
 8005770:	613b      	str	r3, [r7, #16]
   return(result);
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1e4      	bne.n	8005742 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005778:	e007      	b.n	800578a <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	699a      	ldr	r2, [r3, #24]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f042 0208 	orr.w	r2, r2, #8
 8005788:	619a      	str	r2, [r3, #24]
}
 800578a:	bf00      	nop
 800578c:	37b0      	adds	r7, #176	@ 0xb0
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	40008000 	.word	0x40008000
 8005798:	080050c9 	.word	0x080050c9

0800579c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b0ae      	sub	sp, #184	@ 0xb8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80057aa:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057d2:	2b22      	cmp	r3, #34	@ 0x22
 80057d4:	f040 8187 	bne.w	8005ae6 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80057de:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80057e2:	e12a      	b.n	8005a3a <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ea:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80057f6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80057fa:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80057fe:	4013      	ands	r3, r2
 8005800:	b29a      	uxth	r2, r3
 8005802:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005806:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800580c:	1c9a      	adds	r2, r3, #2
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005818:	b29b      	uxth	r3, r3
 800581a:	3b01      	subs	r3, #1
 800581c:	b29a      	uxth	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800582e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005832:	f003 0307 	and.w	r3, r3, #7
 8005836:	2b00      	cmp	r3, #0
 8005838:	d053      	beq.n	80058e2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800583a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	d011      	beq.n	800586a <UART_RxISR_16BIT_FIFOEN+0xce>
 8005846:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800584a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00b      	beq.n	800586a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2201      	movs	r2, #1
 8005858:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005860:	f043 0201 	orr.w	r2, r3, #1
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800586a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d011      	beq.n	800589a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005876:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00b      	beq.n	800589a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2202      	movs	r2, #2
 8005888:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005890:	f043 0204 	orr.w	r2, r3, #4
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800589a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800589e:	f003 0304 	and.w	r3, r3, #4
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d011      	beq.n	80058ca <UART_RxISR_16BIT_FIFOEN+0x12e>
 80058a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00b      	beq.n	80058ca <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2204      	movs	r2, #4
 80058b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058c0:	f043 0202 	orr.w	r2, r3, #2
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d006      	beq.n	80058e2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f7fe f9bd 	bl	8003c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f040 80a5 	bne.w	8005a3a <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058f8:	e853 3f00 	ldrex	r3, [r3]
 80058fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80058fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005900:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005904:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	461a      	mov	r2, r3
 800590e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005912:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005916:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005918:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800591a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800591e:	e841 2300 	strex	r3, r2, [r1]
 8005922:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005924:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1e2      	bne.n	80058f0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	3308      	adds	r3, #8
 8005930:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005932:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005934:	e853 3f00 	ldrex	r3, [r3]
 8005938:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800593a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800593c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005940:	f023 0301 	bic.w	r3, r3, #1
 8005944:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	3308      	adds	r3, #8
 800594e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8005952:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005954:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005956:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005958:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800595a:	e841 2300 	strex	r3, r2, [r1]
 800595e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005960:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1e1      	bne.n	800592a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2220      	movs	r2, #32
 800596a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a60      	ldr	r2, [pc, #384]	@ (8005b00 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d021      	beq.n	80059c8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d01a      	beq.n	80059c8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005998:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800599a:	e853 3f00 	ldrex	r3, [r3]
 800599e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80059a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80059a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	461a      	mov	r2, r3
 80059b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80059b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80059b6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80059ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80059bc:	e841 2300 	strex	r3, r2, [r1]
 80059c0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80059c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1e4      	bne.n	8005992 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d130      	bne.n	8005a32 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059de:	e853 3f00 	ldrex	r3, [r3]
 80059e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80059e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059e6:	f023 0310 	bic.w	r3, r3, #16
 80059ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	461a      	mov	r2, r3
 80059f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80059f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80059fa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80059fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a00:	e841 2300 	strex	r3, r2, [r1]
 8005a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1e4      	bne.n	80059d6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	f003 0310 	and.w	r3, r3, #16
 8005a16:	2b10      	cmp	r3, #16
 8005a18:	d103      	bne.n	8005a22 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2210      	movs	r2, #16
 8005a20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005a28:	4619      	mov	r1, r3
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7fe f91c 	bl	8003c68 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8005a30:	e00e      	b.n	8005a50 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7fb f966 	bl	8000d04 <HAL_UART_RxCpltCallback>
        break;
 8005a38:	e00a      	b.n	8005a50 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005a3a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d006      	beq.n	8005a50 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8005a42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005a46:	f003 0320 	and.w	r3, r3, #32
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f47f aeca 	bne.w	80057e4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005a56:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005a5a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d049      	beq.n	8005af6 <UART_RxISR_16BIT_FIFOEN+0x35a>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005a68:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d242      	bcs.n	8005af6 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	3308      	adds	r3, #8
 8005a76:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7a:	e853 3f00 	ldrex	r3, [r3]
 8005a7e:	623b      	str	r3, [r7, #32]
   return(result);
 8005a80:	6a3b      	ldr	r3, [r7, #32]
 8005a82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	3308      	adds	r3, #8
 8005a90:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8005a94:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a9c:	e841 2300 	strex	r3, r2, [r1]
 8005aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1e3      	bne.n	8005a70 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a16      	ldr	r2, [pc, #88]	@ (8005b04 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8005aac:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	e853 3f00 	ldrex	r3, [r3]
 8005aba:	60fb      	str	r3, [r7, #12]
   return(result);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f043 0320 	orr.w	r3, r3, #32
 8005ac2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	461a      	mov	r2, r3
 8005acc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ad0:	61fb      	str	r3, [r7, #28]
 8005ad2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad4:	69b9      	ldr	r1, [r7, #24]
 8005ad6:	69fa      	ldr	r2, [r7, #28]
 8005ad8:	e841 2300 	strex	r3, r2, [r1]
 8005adc:	617b      	str	r3, [r7, #20]
   return(result);
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1e4      	bne.n	8005aae <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ae4:	e007      	b.n	8005af6 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	699a      	ldr	r2, [r3, #24]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f042 0208 	orr.w	r2, r2, #8
 8005af4:	619a      	str	r2, [r3, #24]
}
 8005af6:	bf00      	nop
 8005af8:	37b8      	adds	r7, #184	@ 0xb8
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	40008000 	.word	0x40008000
 8005b04:	08005281 	.word	0x08005281

08005b08 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d101      	bne.n	8005b5a <HAL_UARTEx_DisableFifoMode+0x16>
 8005b56:	2302      	movs	r3, #2
 8005b58:	e027      	b.n	8005baa <HAL_UARTEx_DisableFifoMode+0x66>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2224      	movs	r2, #36	@ 0x24
 8005b66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f022 0201 	bic.w	r2, r2, #1
 8005b80:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005b88:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b084      	sub	sp, #16
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
 8005bbe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d101      	bne.n	8005bce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005bca:	2302      	movs	r3, #2
 8005bcc:	e02d      	b.n	8005c2a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2224      	movs	r2, #36	@ 0x24
 8005bda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f022 0201 	bic.w	r2, r2, #1
 8005bf4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	683a      	ldr	r2, [r7, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f850 	bl	8005cb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b084      	sub	sp, #16
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
 8005c3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d101      	bne.n	8005c4a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005c46:	2302      	movs	r3, #2
 8005c48:	e02d      	b.n	8005ca6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2224      	movs	r2, #36	@ 0x24
 8005c56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f022 0201 	bic.w	r2, r2, #1
 8005c70:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	683a      	ldr	r2, [r7, #0]
 8005c82:	430a      	orrs	r2, r1
 8005c84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 f812 	bl	8005cb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2220      	movs	r2, #32
 8005c98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
	...

08005cb0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d108      	bne.n	8005cd2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005cd0:	e031      	b.n	8005d36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005cd2:	2308      	movs	r3, #8
 8005cd4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005cd6:	2308      	movs	r3, #8
 8005cd8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	0e5b      	lsrs	r3, r3, #25
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	f003 0307 	and.w	r3, r3, #7
 8005ce8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	0f5b      	lsrs	r3, r3, #29
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	f003 0307 	and.w	r3, r3, #7
 8005cf8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cfa:	7bbb      	ldrb	r3, [r7, #14]
 8005cfc:	7b3a      	ldrb	r2, [r7, #12]
 8005cfe:	4911      	ldr	r1, [pc, #68]	@ (8005d44 <UARTEx_SetNbDataToProcess+0x94>)
 8005d00:	5c8a      	ldrb	r2, [r1, r2]
 8005d02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005d06:	7b3a      	ldrb	r2, [r7, #12]
 8005d08:	490f      	ldr	r1, [pc, #60]	@ (8005d48 <UARTEx_SetNbDataToProcess+0x98>)
 8005d0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d18:	7bfb      	ldrb	r3, [r7, #15]
 8005d1a:	7b7a      	ldrb	r2, [r7, #13]
 8005d1c:	4909      	ldr	r1, [pc, #36]	@ (8005d44 <UARTEx_SetNbDataToProcess+0x94>)
 8005d1e:	5c8a      	ldrb	r2, [r1, r2]
 8005d20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005d24:	7b7a      	ldrb	r2, [r7, #13]
 8005d26:	4908      	ldr	r1, [pc, #32]	@ (8005d48 <UARTEx_SetNbDataToProcess+0x98>)
 8005d28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005d36:	bf00      	nop
 8005d38:	3714      	adds	r7, #20
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	08008670 	.word	0x08008670
 8005d48:	08008678 	.word	0x08008678

08005d4c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	4603      	mov	r3, r0
 8005d54:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005d56:	2300      	movs	r3, #0
 8005d58:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005d5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d5e:	2b84      	cmp	r3, #132	@ 0x84
 8005d60:	d005      	beq.n	8005d6e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005d62:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	4413      	add	r3, r2
 8005d6a:	3303      	adds	r3, #3
 8005d6c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3714      	adds	r7, #20
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005d80:	f000 fa5c 	bl	800623c <vTaskStartScheduler>
  
  return osOK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005d8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d8c:	b087      	sub	sp, #28
 8005d8e:	af02      	add	r7, sp, #8
 8005d90:	6078      	str	r0, [r7, #4]
 8005d92:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685c      	ldr	r4, [r3, #4]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005da0:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7ff ffcf 	bl	8005d4c <makeFreeRtosPriority>
 8005dae:	4602      	mov	r2, r0
 8005db0:	f107 030c 	add.w	r3, r7, #12
 8005db4:	9301      	str	r3, [sp, #4]
 8005db6:	9200      	str	r2, [sp, #0]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	4632      	mov	r2, r6
 8005dbc:	4629      	mov	r1, r5
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	f000 f8d2 	bl	8005f68 <xTaskCreate>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d001      	beq.n	8005dce <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	e000      	b.n	8005dd0 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8005dce:	68fb      	ldr	r3, [r7, #12]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3714      	adds	r7, #20
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005dd8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d001      	beq.n	8005dee <osDelay+0x16>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	e000      	b.n	8005df0 <osDelay+0x18>
 8005dee:	2301      	movs	r3, #1
 8005df0:	4618      	mov	r0, r3
 8005df2:	f000 f9ed 	bl	80061d0 <vTaskDelay>
  
  return osOK;
 8005df6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f103 0208 	add.w	r2, r3, #8
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f04f 32ff 	mov.w	r2, #4294967295
 8005e18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f103 0208 	add.w	r2, r3, #8
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f103 0208 	add.w	r2, r3, #8
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e4e:	bf00      	nop
 8005e50:	370c      	adds	r7, #12
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b085      	sub	sp, #20
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
 8005e62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	689a      	ldr	r2, [r3, #8]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	683a      	ldr	r2, [r7, #0]
 8005e84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	1c5a      	adds	r2, r3, #1
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	601a      	str	r2, [r3, #0]
}
 8005e96:	bf00      	nop
 8005e98:	3714      	adds	r7, #20
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr

08005ea2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	b085      	sub	sp, #20
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
 8005eaa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb8:	d103      	bne.n	8005ec2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	60fb      	str	r3, [r7, #12]
 8005ec0:	e00c      	b.n	8005edc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	3308      	adds	r3, #8
 8005ec6:	60fb      	str	r3, [r7, #12]
 8005ec8:	e002      	b.n	8005ed0 <vListInsert+0x2e>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	60fb      	str	r3, [r7, #12]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d2f6      	bcs.n	8005eca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	1c5a      	adds	r2, r3, #1
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	601a      	str	r2, [r3, #0]
}
 8005f08:	bf00      	nop
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	6892      	ldr	r2, [r2, #8]
 8005f2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	6852      	ldr	r2, [r2, #4]
 8005f34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d103      	bne.n	8005f48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689a      	ldr	r2, [r3, #8]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	1e5a      	subs	r2, r3, #1
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3714      	adds	r7, #20
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b08c      	sub	sp, #48	@ 0x30
 8005f6c:	af04      	add	r7, sp, #16
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	603b      	str	r3, [r7, #0]
 8005f74:	4613      	mov	r3, r2
 8005f76:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f78:	88fb      	ldrh	r3, [r7, #6]
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f000 feeb 	bl	8006d58 <pvPortMalloc>
 8005f82:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00e      	beq.n	8005fa8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f8a:	2054      	movs	r0, #84	@ 0x54
 8005f8c:	f000 fee4 	bl	8006d58 <pvPortMalloc>
 8005f90:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d003      	beq.n	8005fa0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f9e:	e005      	b.n	8005fac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005fa0:	6978      	ldr	r0, [r7, #20]
 8005fa2:	f000 ffa7 	bl	8006ef4 <vPortFree>
 8005fa6:	e001      	b.n	8005fac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d013      	beq.n	8005fda <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005fb2:	88fa      	ldrh	r2, [r7, #6]
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	9303      	str	r3, [sp, #12]
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	9302      	str	r3, [sp, #8]
 8005fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fbe:	9301      	str	r3, [sp, #4]
 8005fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc2:	9300      	str	r3, [sp, #0]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	68b9      	ldr	r1, [r7, #8]
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f000 f80e 	bl	8005fea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fce:	69f8      	ldr	r0, [r7, #28]
 8005fd0:	f000 f894 	bl	80060fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	61bb      	str	r3, [r7, #24]
 8005fd8:	e002      	b.n	8005fe0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005fda:	f04f 33ff 	mov.w	r3, #4294967295
 8005fde:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005fe0:	69bb      	ldr	r3, [r7, #24]
	}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3720      	adds	r7, #32
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b088      	sub	sp, #32
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	60f8      	str	r0, [r7, #12]
 8005ff2:	60b9      	str	r1, [r7, #8]
 8005ff4:	607a      	str	r2, [r7, #4]
 8005ff6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ffa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006002:	3b01      	subs	r3, #1
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4413      	add	r3, r2
 8006008:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	f023 0307 	bic.w	r3, r3, #7
 8006010:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	f003 0307 	and.w	r3, r3, #7
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00b      	beq.n	8006034 <prvInitialiseNewTask+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800601c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006020:	f383 8811 	msr	BASEPRI, r3
 8006024:	f3bf 8f6f 	isb	sy
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800602e:	bf00      	nop
 8006030:	bf00      	nop
 8006032:	e7fd      	b.n	8006030 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d01f      	beq.n	800607a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800603a:	2300      	movs	r3, #0
 800603c:	61fb      	str	r3, [r7, #28]
 800603e:	e012      	b.n	8006066 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	4413      	add	r3, r2
 8006046:	7819      	ldrb	r1, [r3, #0]
 8006048:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	4413      	add	r3, r2
 800604e:	3334      	adds	r3, #52	@ 0x34
 8006050:	460a      	mov	r2, r1
 8006052:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	4413      	add	r3, r2
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d006      	beq.n	800606e <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	3301      	adds	r3, #1
 8006064:	61fb      	str	r3, [r7, #28]
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	2b0f      	cmp	r3, #15
 800606a:	d9e9      	bls.n	8006040 <prvInitialiseNewTask+0x56>
 800606c:	e000      	b.n	8006070 <prvInitialiseNewTask+0x86>
			{
				break;
 800606e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006072:	2200      	movs	r2, #0
 8006074:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006078:	e003      	b.n	8006082 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800607a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607c:	2200      	movs	r2, #0
 800607e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006084:	2b06      	cmp	r3, #6
 8006086:	d901      	bls.n	800608c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006088:	2306      	movs	r3, #6
 800608a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800608c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800608e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006090:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006094:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006096:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800609a:	2200      	movs	r2, #0
 800609c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800609e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a0:	3304      	adds	r3, #4
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7ff fecc 	bl	8005e40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80060a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060aa:	3318      	adds	r3, #24
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7ff fec7 	bl	8005e40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80060b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ba:	f1c3 0207 	rsb	r2, r3, #7
 80060be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80060c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060c6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80060c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ca:	2200      	movs	r2, #0
 80060cc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80060ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80060d6:	683a      	ldr	r2, [r7, #0]
 80060d8:	68f9      	ldr	r1, [r7, #12]
 80060da:	69b8      	ldr	r0, [r7, #24]
 80060dc:	f000 fc28 	bl	8006930 <pxPortInitialiseStack>
 80060e0:	4602      	mov	r2, r0
 80060e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80060e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d002      	beq.n	80060f2 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80060ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060f2:	bf00      	nop
 80060f4:	3720      	adds	r7, #32
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
	...

080060fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006104:	f000 fd48 	bl	8006b98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006108:	4b2a      	ldr	r3, [pc, #168]	@ (80061b4 <prvAddNewTaskToReadyList+0xb8>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	3301      	adds	r3, #1
 800610e:	4a29      	ldr	r2, [pc, #164]	@ (80061b4 <prvAddNewTaskToReadyList+0xb8>)
 8006110:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006112:	4b29      	ldr	r3, [pc, #164]	@ (80061b8 <prvAddNewTaskToReadyList+0xbc>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d109      	bne.n	800612e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800611a:	4a27      	ldr	r2, [pc, #156]	@ (80061b8 <prvAddNewTaskToReadyList+0xbc>)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006120:	4b24      	ldr	r3, [pc, #144]	@ (80061b4 <prvAddNewTaskToReadyList+0xb8>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d110      	bne.n	800614a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006128:	f000 fad0 	bl	80066cc <prvInitialiseTaskLists>
 800612c:	e00d      	b.n	800614a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800612e:	4b23      	ldr	r3, [pc, #140]	@ (80061bc <prvAddNewTaskToReadyList+0xc0>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d109      	bne.n	800614a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006136:	4b20      	ldr	r3, [pc, #128]	@ (80061b8 <prvAddNewTaskToReadyList+0xbc>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006140:	429a      	cmp	r2, r3
 8006142:	d802      	bhi.n	800614a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006144:	4a1c      	ldr	r2, [pc, #112]	@ (80061b8 <prvAddNewTaskToReadyList+0xbc>)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800614a:	4b1d      	ldr	r3, [pc, #116]	@ (80061c0 <prvAddNewTaskToReadyList+0xc4>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	3301      	adds	r3, #1
 8006150:	4a1b      	ldr	r2, [pc, #108]	@ (80061c0 <prvAddNewTaskToReadyList+0xc4>)
 8006152:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006158:	2201      	movs	r2, #1
 800615a:	409a      	lsls	r2, r3
 800615c:	4b19      	ldr	r3, [pc, #100]	@ (80061c4 <prvAddNewTaskToReadyList+0xc8>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4313      	orrs	r3, r2
 8006162:	4a18      	ldr	r2, [pc, #96]	@ (80061c4 <prvAddNewTaskToReadyList+0xc8>)
 8006164:	6013      	str	r3, [r2, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800616a:	4613      	mov	r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4413      	add	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4a15      	ldr	r2, [pc, #84]	@ (80061c8 <prvAddNewTaskToReadyList+0xcc>)
 8006174:	441a      	add	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	3304      	adds	r3, #4
 800617a:	4619      	mov	r1, r3
 800617c:	4610      	mov	r0, r2
 800617e:	f7ff fe6c 	bl	8005e5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006182:	f000 fd3b 	bl	8006bfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006186:	4b0d      	ldr	r3, [pc, #52]	@ (80061bc <prvAddNewTaskToReadyList+0xc0>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00e      	beq.n	80061ac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800618e:	4b0a      	ldr	r3, [pc, #40]	@ (80061b8 <prvAddNewTaskToReadyList+0xbc>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006198:	429a      	cmp	r2, r3
 800619a:	d207      	bcs.n	80061ac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800619c:	4b0b      	ldr	r3, [pc, #44]	@ (80061cc <prvAddNewTaskToReadyList+0xd0>)
 800619e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061a2:	601a      	str	r2, [r3, #0]
 80061a4:	f3bf 8f4f 	dsb	sy
 80061a8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061ac:	bf00      	nop
 80061ae:	3708      	adds	r7, #8
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	20000e40 	.word	0x20000e40
 80061b8:	20000d40 	.word	0x20000d40
 80061bc:	20000e4c 	.word	0x20000e4c
 80061c0:	20000e5c 	.word	0x20000e5c
 80061c4:	20000e48 	.word	0x20000e48
 80061c8:	20000d44 	.word	0x20000d44
 80061cc:	e000ed04 	.word	0xe000ed04

080061d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80061d8:	2300      	movs	r3, #0
 80061da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d018      	beq.n	8006214 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80061e2:	4b14      	ldr	r3, [pc, #80]	@ (8006234 <vTaskDelay+0x64>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00b      	beq.n	8006202 <vTaskDelay+0x32>
	__asm volatile
 80061ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ee:	f383 8811 	msr	BASEPRI, r3
 80061f2:	f3bf 8f6f 	isb	sy
 80061f6:	f3bf 8f4f 	dsb	sy
 80061fa:	60bb      	str	r3, [r7, #8]
}
 80061fc:	bf00      	nop
 80061fe:	bf00      	nop
 8006200:	e7fd      	b.n	80061fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006202:	f000 f863 	bl	80062cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006206:	2100      	movs	r1, #0
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 fb2b 	bl	8006864 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800620e:	f000 f86b 	bl	80062e8 <xTaskResumeAll>
 8006212:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d107      	bne.n	800622a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800621a:	4b07      	ldr	r3, [pc, #28]	@ (8006238 <vTaskDelay+0x68>)
 800621c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006220:	601a      	str	r2, [r3, #0]
 8006222:	f3bf 8f4f 	dsb	sy
 8006226:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800622a:	bf00      	nop
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	20000e68 	.word	0x20000e68
 8006238:	e000ed04 	.word	0xe000ed04

0800623c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b086      	sub	sp, #24
 8006240:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8006242:	4b1c      	ldr	r3, [pc, #112]	@ (80062b4 <vTaskStartScheduler+0x78>)
 8006244:	9301      	str	r3, [sp, #4]
 8006246:	2300      	movs	r3, #0
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	2300      	movs	r3, #0
 800624c:	2280      	movs	r2, #128	@ 0x80
 800624e:	491a      	ldr	r1, [pc, #104]	@ (80062b8 <vTaskStartScheduler+0x7c>)
 8006250:	481a      	ldr	r0, [pc, #104]	@ (80062bc <vTaskStartScheduler+0x80>)
 8006252:	f7ff fe89 	bl	8005f68 <xTaskCreate>
 8006256:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d116      	bne.n	800628c <vTaskStartScheduler+0x50>
	__asm volatile
 800625e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006262:	f383 8811 	msr	BASEPRI, r3
 8006266:	f3bf 8f6f 	isb	sy
 800626a:	f3bf 8f4f 	dsb	sy
 800626e:	60bb      	str	r3, [r7, #8]
}
 8006270:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006272:	4b13      	ldr	r3, [pc, #76]	@ (80062c0 <vTaskStartScheduler+0x84>)
 8006274:	f04f 32ff 	mov.w	r2, #4294967295
 8006278:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800627a:	4b12      	ldr	r3, [pc, #72]	@ (80062c4 <vTaskStartScheduler+0x88>)
 800627c:	2201      	movs	r2, #1
 800627e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006280:	4b11      	ldr	r3, [pc, #68]	@ (80062c8 <vTaskStartScheduler+0x8c>)
 8006282:	2200      	movs	r2, #0
 8006284:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006286:	f000 fbe3 	bl	8006a50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800628a:	e00f      	b.n	80062ac <vTaskStartScheduler+0x70>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006292:	d10b      	bne.n	80062ac <vTaskStartScheduler+0x70>
	__asm volatile
 8006294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	607b      	str	r3, [r7, #4]
}
 80062a6:	bf00      	nop
 80062a8:	bf00      	nop
 80062aa:	e7fd      	b.n	80062a8 <vTaskStartScheduler+0x6c>
}
 80062ac:	bf00      	nop
 80062ae:	3710      	adds	r7, #16
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	20000e64 	.word	0x20000e64
 80062b8:	08008638 	.word	0x08008638
 80062bc:	0800669d 	.word	0x0800669d
 80062c0:	20000e60 	.word	0x20000e60
 80062c4:	20000e4c 	.word	0x20000e4c
 80062c8:	20000e44 	.word	0x20000e44

080062cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80062cc:	b480      	push	{r7}
 80062ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80062d0:	4b04      	ldr	r3, [pc, #16]	@ (80062e4 <vTaskSuspendAll+0x18>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	3301      	adds	r3, #1
 80062d6:	4a03      	ldr	r2, [pc, #12]	@ (80062e4 <vTaskSuspendAll+0x18>)
 80062d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80062da:	bf00      	nop
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	20000e68 	.word	0x20000e68

080062e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80062ee:	2300      	movs	r3, #0
 80062f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80062f2:	2300      	movs	r3, #0
 80062f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80062f6:	4b42      	ldr	r3, [pc, #264]	@ (8006400 <xTaskResumeAll+0x118>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d10b      	bne.n	8006316 <xTaskResumeAll+0x2e>
	__asm volatile
 80062fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006302:	f383 8811 	msr	BASEPRI, r3
 8006306:	f3bf 8f6f 	isb	sy
 800630a:	f3bf 8f4f 	dsb	sy
 800630e:	603b      	str	r3, [r7, #0]
}
 8006310:	bf00      	nop
 8006312:	bf00      	nop
 8006314:	e7fd      	b.n	8006312 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006316:	f000 fc3f 	bl	8006b98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800631a:	4b39      	ldr	r3, [pc, #228]	@ (8006400 <xTaskResumeAll+0x118>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	3b01      	subs	r3, #1
 8006320:	4a37      	ldr	r2, [pc, #220]	@ (8006400 <xTaskResumeAll+0x118>)
 8006322:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006324:	4b36      	ldr	r3, [pc, #216]	@ (8006400 <xTaskResumeAll+0x118>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d161      	bne.n	80063f0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800632c:	4b35      	ldr	r3, [pc, #212]	@ (8006404 <xTaskResumeAll+0x11c>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d05d      	beq.n	80063f0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006334:	e02e      	b.n	8006394 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006336:	4b34      	ldr	r3, [pc, #208]	@ (8006408 <xTaskResumeAll+0x120>)
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	3318      	adds	r3, #24
 8006342:	4618      	mov	r0, r3
 8006344:	f7ff fde6 	bl	8005f14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	3304      	adds	r3, #4
 800634c:	4618      	mov	r0, r3
 800634e:	f7ff fde1 	bl	8005f14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006356:	2201      	movs	r2, #1
 8006358:	409a      	lsls	r2, r3
 800635a:	4b2c      	ldr	r3, [pc, #176]	@ (800640c <xTaskResumeAll+0x124>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4313      	orrs	r3, r2
 8006360:	4a2a      	ldr	r2, [pc, #168]	@ (800640c <xTaskResumeAll+0x124>)
 8006362:	6013      	str	r3, [r2, #0]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006368:	4613      	mov	r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	4413      	add	r3, r2
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4a27      	ldr	r2, [pc, #156]	@ (8006410 <xTaskResumeAll+0x128>)
 8006372:	441a      	add	r2, r3
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	3304      	adds	r3, #4
 8006378:	4619      	mov	r1, r3
 800637a:	4610      	mov	r0, r2
 800637c:	f7ff fd6d 	bl	8005e5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006384:	4b23      	ldr	r3, [pc, #140]	@ (8006414 <xTaskResumeAll+0x12c>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800638a:	429a      	cmp	r2, r3
 800638c:	d302      	bcc.n	8006394 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800638e:	4b22      	ldr	r3, [pc, #136]	@ (8006418 <xTaskResumeAll+0x130>)
 8006390:	2201      	movs	r2, #1
 8006392:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006394:	4b1c      	ldr	r3, [pc, #112]	@ (8006408 <xTaskResumeAll+0x120>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1cc      	bne.n	8006336 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d001      	beq.n	80063a6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80063a2:	f000 fa11 	bl	80067c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80063a6:	4b1d      	ldr	r3, [pc, #116]	@ (800641c <xTaskResumeAll+0x134>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d010      	beq.n	80063d4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80063b2:	f000 f85d 	bl	8006470 <xTaskIncrementTick>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d002      	beq.n	80063c2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80063bc:	4b16      	ldr	r3, [pc, #88]	@ (8006418 <xTaskResumeAll+0x130>)
 80063be:	2201      	movs	r2, #1
 80063c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	3b01      	subs	r3, #1
 80063c6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1f1      	bne.n	80063b2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80063ce:	4b13      	ldr	r3, [pc, #76]	@ (800641c <xTaskResumeAll+0x134>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80063d4:	4b10      	ldr	r3, [pc, #64]	@ (8006418 <xTaskResumeAll+0x130>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d009      	beq.n	80063f0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80063dc:	2301      	movs	r3, #1
 80063de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80063e0:	4b0f      	ldr	r3, [pc, #60]	@ (8006420 <xTaskResumeAll+0x138>)
 80063e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063e6:	601a      	str	r2, [r3, #0]
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063f0:	f000 fc04 	bl	8006bfc <vPortExitCritical>

	return xAlreadyYielded;
 80063f4:	68bb      	ldr	r3, [r7, #8]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	20000e68 	.word	0x20000e68
 8006404:	20000e40 	.word	0x20000e40
 8006408:	20000e00 	.word	0x20000e00
 800640c:	20000e48 	.word	0x20000e48
 8006410:	20000d44 	.word	0x20000d44
 8006414:	20000d40 	.word	0x20000d40
 8006418:	20000e54 	.word	0x20000e54
 800641c:	20000e50 	.word	0x20000e50
 8006420:	e000ed04 	.word	0xe000ed04

08006424 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d102      	bne.n	8006438 <pcTaskGetName+0x14>
 8006432:	4b0e      	ldr	r3, [pc, #56]	@ (800646c <pcTaskGetName+0x48>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	e000      	b.n	800643a <pcTaskGetName+0x16>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10b      	bne.n	800645a <pcTaskGetName+0x36>
	__asm volatile
 8006442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006446:	f383 8811 	msr	BASEPRI, r3
 800644a:	f3bf 8f6f 	isb	sy
 800644e:	f3bf 8f4f 	dsb	sy
 8006452:	60bb      	str	r3, [r7, #8]
}
 8006454:	bf00      	nop
 8006456:	bf00      	nop
 8006458:	e7fd      	b.n	8006456 <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	3334      	adds	r3, #52	@ 0x34
}
 800645e:	4618      	mov	r0, r3
 8006460:	3714      	adds	r7, #20
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	20000d40 	.word	0x20000d40

08006470 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006476:	2300      	movs	r3, #0
 8006478:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800647a:	4b4f      	ldr	r3, [pc, #316]	@ (80065b8 <xTaskIncrementTick+0x148>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	f040 808f 	bne.w	80065a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006484:	4b4d      	ldr	r3, [pc, #308]	@ (80065bc <xTaskIncrementTick+0x14c>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	3301      	adds	r3, #1
 800648a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800648c:	4a4b      	ldr	r2, [pc, #300]	@ (80065bc <xTaskIncrementTick+0x14c>)
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d121      	bne.n	80064dc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006498:	4b49      	ldr	r3, [pc, #292]	@ (80065c0 <xTaskIncrementTick+0x150>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00b      	beq.n	80064ba <xTaskIncrementTick+0x4a>
	__asm volatile
 80064a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a6:	f383 8811 	msr	BASEPRI, r3
 80064aa:	f3bf 8f6f 	isb	sy
 80064ae:	f3bf 8f4f 	dsb	sy
 80064b2:	603b      	str	r3, [r7, #0]
}
 80064b4:	bf00      	nop
 80064b6:	bf00      	nop
 80064b8:	e7fd      	b.n	80064b6 <xTaskIncrementTick+0x46>
 80064ba:	4b41      	ldr	r3, [pc, #260]	@ (80065c0 <xTaskIncrementTick+0x150>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	60fb      	str	r3, [r7, #12]
 80064c0:	4b40      	ldr	r3, [pc, #256]	@ (80065c4 <xTaskIncrementTick+0x154>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a3e      	ldr	r2, [pc, #248]	@ (80065c0 <xTaskIncrementTick+0x150>)
 80064c6:	6013      	str	r3, [r2, #0]
 80064c8:	4a3e      	ldr	r2, [pc, #248]	@ (80065c4 <xTaskIncrementTick+0x154>)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6013      	str	r3, [r2, #0]
 80064ce:	4b3e      	ldr	r3, [pc, #248]	@ (80065c8 <xTaskIncrementTick+0x158>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	3301      	adds	r3, #1
 80064d4:	4a3c      	ldr	r2, [pc, #240]	@ (80065c8 <xTaskIncrementTick+0x158>)
 80064d6:	6013      	str	r3, [r2, #0]
 80064d8:	f000 f976 	bl	80067c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80064dc:	4b3b      	ldr	r3, [pc, #236]	@ (80065cc <xTaskIncrementTick+0x15c>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d348      	bcc.n	8006578 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064e6:	4b36      	ldr	r3, [pc, #216]	@ (80065c0 <xTaskIncrementTick+0x150>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d104      	bne.n	80064fa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064f0:	4b36      	ldr	r3, [pc, #216]	@ (80065cc <xTaskIncrementTick+0x15c>)
 80064f2:	f04f 32ff 	mov.w	r2, #4294967295
 80064f6:	601a      	str	r2, [r3, #0]
					break;
 80064f8:	e03e      	b.n	8006578 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064fa:	4b31      	ldr	r3, [pc, #196]	@ (80065c0 <xTaskIncrementTick+0x150>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	429a      	cmp	r2, r3
 8006510:	d203      	bcs.n	800651a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006512:	4a2e      	ldr	r2, [pc, #184]	@ (80065cc <xTaskIncrementTick+0x15c>)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006518:	e02e      	b.n	8006578 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	3304      	adds	r3, #4
 800651e:	4618      	mov	r0, r3
 8006520:	f7ff fcf8 	bl	8005f14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006528:	2b00      	cmp	r3, #0
 800652a:	d004      	beq.n	8006536 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	3318      	adds	r3, #24
 8006530:	4618      	mov	r0, r3
 8006532:	f7ff fcef 	bl	8005f14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800653a:	2201      	movs	r2, #1
 800653c:	409a      	lsls	r2, r3
 800653e:	4b24      	ldr	r3, [pc, #144]	@ (80065d0 <xTaskIncrementTick+0x160>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4313      	orrs	r3, r2
 8006544:	4a22      	ldr	r2, [pc, #136]	@ (80065d0 <xTaskIncrementTick+0x160>)
 8006546:	6013      	str	r3, [r2, #0]
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800654c:	4613      	mov	r3, r2
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	4413      	add	r3, r2
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	4a1f      	ldr	r2, [pc, #124]	@ (80065d4 <xTaskIncrementTick+0x164>)
 8006556:	441a      	add	r2, r3
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	3304      	adds	r3, #4
 800655c:	4619      	mov	r1, r3
 800655e:	4610      	mov	r0, r2
 8006560:	f7ff fc7b 	bl	8005e5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006568:	4b1b      	ldr	r3, [pc, #108]	@ (80065d8 <xTaskIncrementTick+0x168>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800656e:	429a      	cmp	r2, r3
 8006570:	d3b9      	bcc.n	80064e6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006572:	2301      	movs	r3, #1
 8006574:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006576:	e7b6      	b.n	80064e6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006578:	4b17      	ldr	r3, [pc, #92]	@ (80065d8 <xTaskIncrementTick+0x168>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800657e:	4915      	ldr	r1, [pc, #84]	@ (80065d4 <xTaskIncrementTick+0x164>)
 8006580:	4613      	mov	r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	440b      	add	r3, r1
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d901      	bls.n	8006594 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006590:	2301      	movs	r3, #1
 8006592:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006594:	4b11      	ldr	r3, [pc, #68]	@ (80065dc <xTaskIncrementTick+0x16c>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d007      	beq.n	80065ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800659c:	2301      	movs	r3, #1
 800659e:	617b      	str	r3, [r7, #20]
 80065a0:	e004      	b.n	80065ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80065a2:	4b0f      	ldr	r3, [pc, #60]	@ (80065e0 <xTaskIncrementTick+0x170>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	3301      	adds	r3, #1
 80065a8:	4a0d      	ldr	r2, [pc, #52]	@ (80065e0 <xTaskIncrementTick+0x170>)
 80065aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80065ac:	697b      	ldr	r3, [r7, #20]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3718      	adds	r7, #24
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	20000e68 	.word	0x20000e68
 80065bc:	20000e44 	.word	0x20000e44
 80065c0:	20000df8 	.word	0x20000df8
 80065c4:	20000dfc 	.word	0x20000dfc
 80065c8:	20000e58 	.word	0x20000e58
 80065cc:	20000e60 	.word	0x20000e60
 80065d0:	20000e48 	.word	0x20000e48
 80065d4:	20000d44 	.word	0x20000d44
 80065d8:	20000d40 	.word	0x20000d40
 80065dc:	20000e54 	.word	0x20000e54
 80065e0:	20000e50 	.word	0x20000e50

080065e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80065e4:	b480      	push	{r7}
 80065e6:	b087      	sub	sp, #28
 80065e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80065ea:	4b27      	ldr	r3, [pc, #156]	@ (8006688 <vTaskSwitchContext+0xa4>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80065f2:	4b26      	ldr	r3, [pc, #152]	@ (800668c <vTaskSwitchContext+0xa8>)
 80065f4:	2201      	movs	r2, #1
 80065f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80065f8:	e040      	b.n	800667c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80065fa:	4b24      	ldr	r3, [pc, #144]	@ (800668c <vTaskSwitchContext+0xa8>)
 80065fc:	2200      	movs	r2, #0
 80065fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006600:	4b23      	ldr	r3, [pc, #140]	@ (8006690 <vTaskSwitchContext+0xac>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	fab3 f383 	clz	r3, r3
 800660c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800660e:	7afb      	ldrb	r3, [r7, #11]
 8006610:	f1c3 031f 	rsb	r3, r3, #31
 8006614:	617b      	str	r3, [r7, #20]
 8006616:	491f      	ldr	r1, [pc, #124]	@ (8006694 <vTaskSwitchContext+0xb0>)
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	4613      	mov	r3, r2
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	4413      	add	r3, r2
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	440b      	add	r3, r1
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10b      	bne.n	8006642 <vTaskSwitchContext+0x5e>
	__asm volatile
 800662a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	607b      	str	r3, [r7, #4]
}
 800663c:	bf00      	nop
 800663e:	bf00      	nop
 8006640:	e7fd      	b.n	800663e <vTaskSwitchContext+0x5a>
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	4613      	mov	r3, r2
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4413      	add	r3, r2
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4a11      	ldr	r2, [pc, #68]	@ (8006694 <vTaskSwitchContext+0xb0>)
 800664e:	4413      	add	r3, r2
 8006650:	613b      	str	r3, [r7, #16]
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	685a      	ldr	r2, [r3, #4]
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	605a      	str	r2, [r3, #4]
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	3308      	adds	r3, #8
 8006664:	429a      	cmp	r2, r3
 8006666:	d104      	bne.n	8006672 <vTaskSwitchContext+0x8e>
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	605a      	str	r2, [r3, #4]
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	4a07      	ldr	r2, [pc, #28]	@ (8006698 <vTaskSwitchContext+0xb4>)
 800667a:	6013      	str	r3, [r2, #0]
}
 800667c:	bf00      	nop
 800667e:	371c      	adds	r7, #28
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr
 8006688:	20000e68 	.word	0x20000e68
 800668c:	20000e54 	.word	0x20000e54
 8006690:	20000e48 	.word	0x20000e48
 8006694:	20000d44 	.word	0x20000d44
 8006698:	20000d40 	.word	0x20000d40

0800669c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80066a4:	f000 f852 	bl	800674c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80066a8:	4b06      	ldr	r3, [pc, #24]	@ (80066c4 <prvIdleTask+0x28>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d9f9      	bls.n	80066a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80066b0:	4b05      	ldr	r3, [pc, #20]	@ (80066c8 <prvIdleTask+0x2c>)
 80066b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066b6:	601a      	str	r2, [r3, #0]
 80066b8:	f3bf 8f4f 	dsb	sy
 80066bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80066c0:	e7f0      	b.n	80066a4 <prvIdleTask+0x8>
 80066c2:	bf00      	nop
 80066c4:	20000d44 	.word	0x20000d44
 80066c8:	e000ed04 	.word	0xe000ed04

080066cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066d2:	2300      	movs	r3, #0
 80066d4:	607b      	str	r3, [r7, #4]
 80066d6:	e00c      	b.n	80066f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	4613      	mov	r3, r2
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4413      	add	r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4a12      	ldr	r2, [pc, #72]	@ (800672c <prvInitialiseTaskLists+0x60>)
 80066e4:	4413      	add	r3, r2
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7ff fb8a 	bl	8005e00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	3301      	adds	r3, #1
 80066f0:	607b      	str	r3, [r7, #4]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b06      	cmp	r3, #6
 80066f6:	d9ef      	bls.n	80066d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80066f8:	480d      	ldr	r0, [pc, #52]	@ (8006730 <prvInitialiseTaskLists+0x64>)
 80066fa:	f7ff fb81 	bl	8005e00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80066fe:	480d      	ldr	r0, [pc, #52]	@ (8006734 <prvInitialiseTaskLists+0x68>)
 8006700:	f7ff fb7e 	bl	8005e00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006704:	480c      	ldr	r0, [pc, #48]	@ (8006738 <prvInitialiseTaskLists+0x6c>)
 8006706:	f7ff fb7b 	bl	8005e00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800670a:	480c      	ldr	r0, [pc, #48]	@ (800673c <prvInitialiseTaskLists+0x70>)
 800670c:	f7ff fb78 	bl	8005e00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006710:	480b      	ldr	r0, [pc, #44]	@ (8006740 <prvInitialiseTaskLists+0x74>)
 8006712:	f7ff fb75 	bl	8005e00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006716:	4b0b      	ldr	r3, [pc, #44]	@ (8006744 <prvInitialiseTaskLists+0x78>)
 8006718:	4a05      	ldr	r2, [pc, #20]	@ (8006730 <prvInitialiseTaskLists+0x64>)
 800671a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800671c:	4b0a      	ldr	r3, [pc, #40]	@ (8006748 <prvInitialiseTaskLists+0x7c>)
 800671e:	4a05      	ldr	r2, [pc, #20]	@ (8006734 <prvInitialiseTaskLists+0x68>)
 8006720:	601a      	str	r2, [r3, #0]
}
 8006722:	bf00      	nop
 8006724:	3708      	adds	r7, #8
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	20000d44 	.word	0x20000d44
 8006730:	20000dd0 	.word	0x20000dd0
 8006734:	20000de4 	.word	0x20000de4
 8006738:	20000e00 	.word	0x20000e00
 800673c:	20000e14 	.word	0x20000e14
 8006740:	20000e2c 	.word	0x20000e2c
 8006744:	20000df8 	.word	0x20000df8
 8006748:	20000dfc 	.word	0x20000dfc

0800674c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006752:	e019      	b.n	8006788 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006754:	f000 fa20 	bl	8006b98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006758:	4b10      	ldr	r3, [pc, #64]	@ (800679c <prvCheckTasksWaitingTermination+0x50>)
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	3304      	adds	r3, #4
 8006764:	4618      	mov	r0, r3
 8006766:	f7ff fbd5 	bl	8005f14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800676a:	4b0d      	ldr	r3, [pc, #52]	@ (80067a0 <prvCheckTasksWaitingTermination+0x54>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	3b01      	subs	r3, #1
 8006770:	4a0b      	ldr	r2, [pc, #44]	@ (80067a0 <prvCheckTasksWaitingTermination+0x54>)
 8006772:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006774:	4b0b      	ldr	r3, [pc, #44]	@ (80067a4 <prvCheckTasksWaitingTermination+0x58>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	3b01      	subs	r3, #1
 800677a:	4a0a      	ldr	r2, [pc, #40]	@ (80067a4 <prvCheckTasksWaitingTermination+0x58>)
 800677c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800677e:	f000 fa3d 	bl	8006bfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f810 	bl	80067a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006788:	4b06      	ldr	r3, [pc, #24]	@ (80067a4 <prvCheckTasksWaitingTermination+0x58>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1e1      	bne.n	8006754 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006790:	bf00      	nop
 8006792:	bf00      	nop
 8006794:	3708      	adds	r7, #8
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	20000e14 	.word	0x20000e14
 80067a0:	20000e40 	.word	0x20000e40
 80067a4:	20000e28 	.word	0x20000e28

080067a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067b4:	4618      	mov	r0, r3
 80067b6:	f000 fb9d 	bl	8006ef4 <vPortFree>
			vPortFree( pxTCB );
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fb9a 	bl	8006ef4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80067c0:	bf00      	nop
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067ce:	4b0c      	ldr	r3, [pc, #48]	@ (8006800 <prvResetNextTaskUnblockTime+0x38>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d104      	bne.n	80067e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80067d8:	4b0a      	ldr	r3, [pc, #40]	@ (8006804 <prvResetNextTaskUnblockTime+0x3c>)
 80067da:	f04f 32ff 	mov.w	r2, #4294967295
 80067de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80067e0:	e008      	b.n	80067f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067e2:	4b07      	ldr	r3, [pc, #28]	@ (8006800 <prvResetNextTaskUnblockTime+0x38>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	4a04      	ldr	r2, [pc, #16]	@ (8006804 <prvResetNextTaskUnblockTime+0x3c>)
 80067f2:	6013      	str	r3, [r2, #0]
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr
 8006800:	20000df8 	.word	0x20000df8
 8006804:	20000e60 	.word	0x20000e60

08006808 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800680e:	4b05      	ldr	r3, [pc, #20]	@ (8006824 <xTaskGetCurrentTaskHandle+0x1c>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006814:	687b      	ldr	r3, [r7, #4]
	}
 8006816:	4618      	mov	r0, r3
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	20000d40 	.word	0x20000d40

08006828 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800682e:	4b0b      	ldr	r3, [pc, #44]	@ (800685c <xTaskGetSchedulerState+0x34>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d102      	bne.n	800683c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006836:	2301      	movs	r3, #1
 8006838:	607b      	str	r3, [r7, #4]
 800683a:	e008      	b.n	800684e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800683c:	4b08      	ldr	r3, [pc, #32]	@ (8006860 <xTaskGetSchedulerState+0x38>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d102      	bne.n	800684a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006844:	2302      	movs	r3, #2
 8006846:	607b      	str	r3, [r7, #4]
 8006848:	e001      	b.n	800684e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800684a:	2300      	movs	r3, #0
 800684c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800684e:	687b      	ldr	r3, [r7, #4]
	}
 8006850:	4618      	mov	r0, r3
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr
 800685c:	20000e4c 	.word	0x20000e4c
 8006860:	20000e68 	.word	0x20000e68

08006864 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800686e:	4b29      	ldr	r3, [pc, #164]	@ (8006914 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006874:	4b28      	ldr	r3, [pc, #160]	@ (8006918 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	3304      	adds	r3, #4
 800687a:	4618      	mov	r0, r3
 800687c:	f7ff fb4a 	bl	8005f14 <uxListRemove>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10b      	bne.n	800689e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006886:	4b24      	ldr	r3, [pc, #144]	@ (8006918 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800688c:	2201      	movs	r2, #1
 800688e:	fa02 f303 	lsl.w	r3, r2, r3
 8006892:	43da      	mvns	r2, r3
 8006894:	4b21      	ldr	r3, [pc, #132]	@ (800691c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4013      	ands	r3, r2
 800689a:	4a20      	ldr	r2, [pc, #128]	@ (800691c <prvAddCurrentTaskToDelayedList+0xb8>)
 800689c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a4:	d10a      	bne.n	80068bc <prvAddCurrentTaskToDelayedList+0x58>
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d007      	beq.n	80068bc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068ac:	4b1a      	ldr	r3, [pc, #104]	@ (8006918 <prvAddCurrentTaskToDelayedList+0xb4>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	3304      	adds	r3, #4
 80068b2:	4619      	mov	r1, r3
 80068b4:	481a      	ldr	r0, [pc, #104]	@ (8006920 <prvAddCurrentTaskToDelayedList+0xbc>)
 80068b6:	f7ff fad0 	bl	8005e5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80068ba:	e026      	b.n	800690a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4413      	add	r3, r2
 80068c2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80068c4:	4b14      	ldr	r3, [pc, #80]	@ (8006918 <prvAddCurrentTaskToDelayedList+0xb4>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d209      	bcs.n	80068e8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068d4:	4b13      	ldr	r3, [pc, #76]	@ (8006924 <prvAddCurrentTaskToDelayedList+0xc0>)
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	4b0f      	ldr	r3, [pc, #60]	@ (8006918 <prvAddCurrentTaskToDelayedList+0xb4>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	3304      	adds	r3, #4
 80068de:	4619      	mov	r1, r3
 80068e0:	4610      	mov	r0, r2
 80068e2:	f7ff fade 	bl	8005ea2 <vListInsert>
}
 80068e6:	e010      	b.n	800690a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068e8:	4b0f      	ldr	r3, [pc, #60]	@ (8006928 <prvAddCurrentTaskToDelayedList+0xc4>)
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006918 <prvAddCurrentTaskToDelayedList+0xb4>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	3304      	adds	r3, #4
 80068f2:	4619      	mov	r1, r3
 80068f4:	4610      	mov	r0, r2
 80068f6:	f7ff fad4 	bl	8005ea2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80068fa:	4b0c      	ldr	r3, [pc, #48]	@ (800692c <prvAddCurrentTaskToDelayedList+0xc8>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	429a      	cmp	r2, r3
 8006902:	d202      	bcs.n	800690a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006904:	4a09      	ldr	r2, [pc, #36]	@ (800692c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	6013      	str	r3, [r2, #0]
}
 800690a:	bf00      	nop
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	20000e44 	.word	0x20000e44
 8006918:	20000d40 	.word	0x20000d40
 800691c:	20000e48 	.word	0x20000e48
 8006920:	20000e2c 	.word	0x20000e2c
 8006924:	20000dfc 	.word	0x20000dfc
 8006928:	20000df8 	.word	0x20000df8
 800692c:	20000e60 	.word	0x20000e60

08006930 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	3b04      	subs	r3, #4
 8006940:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006948:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	3b04      	subs	r3, #4
 800694e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	f023 0201 	bic.w	r2, r3, #1
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	3b04      	subs	r3, #4
 800695e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006960:	4a0c      	ldr	r2, [pc, #48]	@ (8006994 <pxPortInitialiseStack+0x64>)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	3b14      	subs	r3, #20
 800696a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	3b04      	subs	r3, #4
 8006976:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f06f 0202 	mvn.w	r2, #2
 800697e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	3b20      	subs	r3, #32
 8006984:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006986:	68fb      	ldr	r3, [r7, #12]
}
 8006988:	4618      	mov	r0, r3
 800698a:	3714      	adds	r7, #20
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	08006999 	.word	0x08006999

08006998 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800699e:	2300      	movs	r3, #0
 80069a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80069a2:	4b13      	ldr	r3, [pc, #76]	@ (80069f0 <prvTaskExitError+0x58>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069aa:	d00b      	beq.n	80069c4 <prvTaskExitError+0x2c>
	__asm volatile
 80069ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b0:	f383 8811 	msr	BASEPRI, r3
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	60fb      	str	r3, [r7, #12]
}
 80069be:	bf00      	nop
 80069c0:	bf00      	nop
 80069c2:	e7fd      	b.n	80069c0 <prvTaskExitError+0x28>
	__asm volatile
 80069c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c8:	f383 8811 	msr	BASEPRI, r3
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	60bb      	str	r3, [r7, #8]
}
 80069d6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80069d8:	bf00      	nop
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d0fc      	beq.n	80069da <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80069e0:	bf00      	nop
 80069e2:	bf00      	nop
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	2000000c 	.word	0x2000000c
	...

08006a00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006a00:	4b07      	ldr	r3, [pc, #28]	@ (8006a20 <pxCurrentTCBConst2>)
 8006a02:	6819      	ldr	r1, [r3, #0]
 8006a04:	6808      	ldr	r0, [r1, #0]
 8006a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a0a:	f380 8809 	msr	PSP, r0
 8006a0e:	f3bf 8f6f 	isb	sy
 8006a12:	f04f 0000 	mov.w	r0, #0
 8006a16:	f380 8811 	msr	BASEPRI, r0
 8006a1a:	4770      	bx	lr
 8006a1c:	f3af 8000 	nop.w

08006a20 <pxCurrentTCBConst2>:
 8006a20:	20000d40 	.word	0x20000d40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a24:	bf00      	nop
 8006a26:	bf00      	nop

08006a28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006a28:	4808      	ldr	r0, [pc, #32]	@ (8006a4c <prvPortStartFirstTask+0x24>)
 8006a2a:	6800      	ldr	r0, [r0, #0]
 8006a2c:	6800      	ldr	r0, [r0, #0]
 8006a2e:	f380 8808 	msr	MSP, r0
 8006a32:	f04f 0000 	mov.w	r0, #0
 8006a36:	f380 8814 	msr	CONTROL, r0
 8006a3a:	b662      	cpsie	i
 8006a3c:	b661      	cpsie	f
 8006a3e:	f3bf 8f4f 	dsb	sy
 8006a42:	f3bf 8f6f 	isb	sy
 8006a46:	df00      	svc	0
 8006a48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a4a:	bf00      	nop
 8006a4c:	e000ed08 	.word	0xe000ed08

08006a50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006a56:	4b47      	ldr	r3, [pc, #284]	@ (8006b74 <xPortStartScheduler+0x124>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a47      	ldr	r2, [pc, #284]	@ (8006b78 <xPortStartScheduler+0x128>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d10b      	bne.n	8006a78 <xPortStartScheduler+0x28>
	__asm volatile
 8006a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	613b      	str	r3, [r7, #16]
}
 8006a72:	bf00      	nop
 8006a74:	bf00      	nop
 8006a76:	e7fd      	b.n	8006a74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006a78:	4b3e      	ldr	r3, [pc, #248]	@ (8006b74 <xPortStartScheduler+0x124>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a3f      	ldr	r2, [pc, #252]	@ (8006b7c <xPortStartScheduler+0x12c>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d10b      	bne.n	8006a9a <xPortStartScheduler+0x4a>
	__asm volatile
 8006a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a86:	f383 8811 	msr	BASEPRI, r3
 8006a8a:	f3bf 8f6f 	isb	sy
 8006a8e:	f3bf 8f4f 	dsb	sy
 8006a92:	60fb      	str	r3, [r7, #12]
}
 8006a94:	bf00      	nop
 8006a96:	bf00      	nop
 8006a98:	e7fd      	b.n	8006a96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a9a:	4b39      	ldr	r3, [pc, #228]	@ (8006b80 <xPortStartScheduler+0x130>)
 8006a9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	22ff      	movs	r2, #255	@ 0xff
 8006aaa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ab4:	78fb      	ldrb	r3, [r7, #3]
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006abc:	b2da      	uxtb	r2, r3
 8006abe:	4b31      	ldr	r3, [pc, #196]	@ (8006b84 <xPortStartScheduler+0x134>)
 8006ac0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ac2:	4b31      	ldr	r3, [pc, #196]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006ac4:	2207      	movs	r2, #7
 8006ac6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ac8:	e009      	b.n	8006ade <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006aca:	4b2f      	ldr	r3, [pc, #188]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	4a2d      	ldr	r2, [pc, #180]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006ad2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ad4:	78fb      	ldrb	r3, [r7, #3]
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	005b      	lsls	r3, r3, #1
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ade:	78fb      	ldrb	r3, [r7, #3]
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ae6:	2b80      	cmp	r3, #128	@ 0x80
 8006ae8:	d0ef      	beq.n	8006aca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006aea:	4b27      	ldr	r3, [pc, #156]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f1c3 0307 	rsb	r3, r3, #7
 8006af2:	2b04      	cmp	r3, #4
 8006af4:	d00b      	beq.n	8006b0e <xPortStartScheduler+0xbe>
	__asm volatile
 8006af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006afa:	f383 8811 	msr	BASEPRI, r3
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	f3bf 8f4f 	dsb	sy
 8006b06:	60bb      	str	r3, [r7, #8]
}
 8006b08:	bf00      	nop
 8006b0a:	bf00      	nop
 8006b0c:	e7fd      	b.n	8006b0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b0e:	4b1e      	ldr	r3, [pc, #120]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	021b      	lsls	r3, r3, #8
 8006b14:	4a1c      	ldr	r2, [pc, #112]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006b16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b18:	4b1b      	ldr	r3, [pc, #108]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006b20:	4a19      	ldr	r2, [pc, #100]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006b22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	b2da      	uxtb	r2, r3
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b2c:	4b17      	ldr	r3, [pc, #92]	@ (8006b8c <xPortStartScheduler+0x13c>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a16      	ldr	r2, [pc, #88]	@ (8006b8c <xPortStartScheduler+0x13c>)
 8006b32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006b36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b38:	4b14      	ldr	r3, [pc, #80]	@ (8006b8c <xPortStartScheduler+0x13c>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a13      	ldr	r2, [pc, #76]	@ (8006b8c <xPortStartScheduler+0x13c>)
 8006b3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006b42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b44:	f000 f8da 	bl	8006cfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b48:	4b11      	ldr	r3, [pc, #68]	@ (8006b90 <xPortStartScheduler+0x140>)
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006b4e:	f000 f8f9 	bl	8006d44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b52:	4b10      	ldr	r3, [pc, #64]	@ (8006b94 <xPortStartScheduler+0x144>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a0f      	ldr	r2, [pc, #60]	@ (8006b94 <xPortStartScheduler+0x144>)
 8006b58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006b5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b5e:	f7ff ff63 	bl	8006a28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b62:	f7ff fd3f 	bl	80065e4 <vTaskSwitchContext>
	prvTaskExitError();
 8006b66:	f7ff ff17 	bl	8006998 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3718      	adds	r7, #24
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	e000ed00 	.word	0xe000ed00
 8006b78:	410fc271 	.word	0x410fc271
 8006b7c:	410fc270 	.word	0x410fc270
 8006b80:	e000e400 	.word	0xe000e400
 8006b84:	20000e6c 	.word	0x20000e6c
 8006b88:	20000e70 	.word	0x20000e70
 8006b8c:	e000ed20 	.word	0xe000ed20
 8006b90:	2000000c 	.word	0x2000000c
 8006b94:	e000ef34 	.word	0xe000ef34

08006b98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	607b      	str	r3, [r7, #4]
}
 8006bb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006bb2:	4b10      	ldr	r3, [pc, #64]	@ (8006bf4 <vPortEnterCritical+0x5c>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	4a0e      	ldr	r2, [pc, #56]	@ (8006bf4 <vPortEnterCritical+0x5c>)
 8006bba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8006bf4 <vPortEnterCritical+0x5c>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d110      	bne.n	8006be6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8006bf8 <vPortEnterCritical+0x60>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00b      	beq.n	8006be6 <vPortEnterCritical+0x4e>
	__asm volatile
 8006bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd2:	f383 8811 	msr	BASEPRI, r3
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	603b      	str	r3, [r7, #0]
}
 8006be0:	bf00      	nop
 8006be2:	bf00      	nop
 8006be4:	e7fd      	b.n	8006be2 <vPortEnterCritical+0x4a>
	}
}
 8006be6:	bf00      	nop
 8006be8:	370c      	adds	r7, #12
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	2000000c 	.word	0x2000000c
 8006bf8:	e000ed04 	.word	0xe000ed04

08006bfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c02:	4b12      	ldr	r3, [pc, #72]	@ (8006c4c <vPortExitCritical+0x50>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10b      	bne.n	8006c22 <vPortExitCritical+0x26>
	__asm volatile
 8006c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	607b      	str	r3, [r7, #4]
}
 8006c1c:	bf00      	nop
 8006c1e:	bf00      	nop
 8006c20:	e7fd      	b.n	8006c1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006c22:	4b0a      	ldr	r3, [pc, #40]	@ (8006c4c <vPortExitCritical+0x50>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	3b01      	subs	r3, #1
 8006c28:	4a08      	ldr	r2, [pc, #32]	@ (8006c4c <vPortExitCritical+0x50>)
 8006c2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c2c:	4b07      	ldr	r3, [pc, #28]	@ (8006c4c <vPortExitCritical+0x50>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d105      	bne.n	8006c40 <vPortExitCritical+0x44>
 8006c34:	2300      	movs	r3, #0
 8006c36:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006c3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr
 8006c4c:	2000000c 	.word	0x2000000c

08006c50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c50:	f3ef 8009 	mrs	r0, PSP
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	4b15      	ldr	r3, [pc, #84]	@ (8006cb0 <pxCurrentTCBConst>)
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	f01e 0f10 	tst.w	lr, #16
 8006c60:	bf08      	it	eq
 8006c62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006c66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c6a:	6010      	str	r0, [r2, #0]
 8006c6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006c70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006c74:	f380 8811 	msr	BASEPRI, r0
 8006c78:	f3bf 8f4f 	dsb	sy
 8006c7c:	f3bf 8f6f 	isb	sy
 8006c80:	f7ff fcb0 	bl	80065e4 <vTaskSwitchContext>
 8006c84:	f04f 0000 	mov.w	r0, #0
 8006c88:	f380 8811 	msr	BASEPRI, r0
 8006c8c:	bc09      	pop	{r0, r3}
 8006c8e:	6819      	ldr	r1, [r3, #0]
 8006c90:	6808      	ldr	r0, [r1, #0]
 8006c92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c96:	f01e 0f10 	tst.w	lr, #16
 8006c9a:	bf08      	it	eq
 8006c9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ca0:	f380 8809 	msr	PSP, r0
 8006ca4:	f3bf 8f6f 	isb	sy
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	f3af 8000 	nop.w

08006cb0 <pxCurrentTCBConst>:
 8006cb0:	20000d40 	.word	0x20000d40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006cb4:	bf00      	nop
 8006cb6:	bf00      	nop

08006cb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
	__asm volatile
 8006cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	607b      	str	r3, [r7, #4]
}
 8006cd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006cd2:	f7ff fbcd 	bl	8006470 <xTaskIncrementTick>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d003      	beq.n	8006ce4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006cdc:	4b06      	ldr	r3, [pc, #24]	@ (8006cf8 <xPortSysTickHandler+0x40>)
 8006cde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ce2:	601a      	str	r2, [r3, #0]
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	f383 8811 	msr	BASEPRI, r3
}
 8006cee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006cf0:	bf00      	nop
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	e000ed04 	.word	0xe000ed04

08006cfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d00:	4b0b      	ldr	r3, [pc, #44]	@ (8006d30 <vPortSetupTimerInterrupt+0x34>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d06:	4b0b      	ldr	r3, [pc, #44]	@ (8006d34 <vPortSetupTimerInterrupt+0x38>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8006d38 <vPortSetupTimerInterrupt+0x3c>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a0a      	ldr	r2, [pc, #40]	@ (8006d3c <vPortSetupTimerInterrupt+0x40>)
 8006d12:	fba2 2303 	umull	r2, r3, r2, r3
 8006d16:	099b      	lsrs	r3, r3, #6
 8006d18:	4a09      	ldr	r2, [pc, #36]	@ (8006d40 <vPortSetupTimerInterrupt+0x44>)
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d1e:	4b04      	ldr	r3, [pc, #16]	@ (8006d30 <vPortSetupTimerInterrupt+0x34>)
 8006d20:	2207      	movs	r2, #7
 8006d22:	601a      	str	r2, [r3, #0]
}
 8006d24:	bf00      	nop
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	e000e010 	.word	0xe000e010
 8006d34:	e000e018 	.word	0xe000e018
 8006d38:	20000000 	.word	0x20000000
 8006d3c:	10624dd3 	.word	0x10624dd3
 8006d40:	e000e014 	.word	0xe000e014

08006d44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006d54 <vPortEnableVFP+0x10>
 8006d48:	6801      	ldr	r1, [r0, #0]
 8006d4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006d4e:	6001      	str	r1, [r0, #0]
 8006d50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006d52:	bf00      	nop
 8006d54:	e000ed88 	.word	0xe000ed88

08006d58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b08a      	sub	sp, #40	@ 0x28
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006d60:	2300      	movs	r3, #0
 8006d62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006d64:	f7ff fab2 	bl	80062cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006d68:	4b5c      	ldr	r3, [pc, #368]	@ (8006edc <pvPortMalloc+0x184>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d101      	bne.n	8006d74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006d70:	f000 f924 	bl	8006fbc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006d74:	4b5a      	ldr	r3, [pc, #360]	@ (8006ee0 <pvPortMalloc+0x188>)
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f040 8095 	bne.w	8006eac <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d01e      	beq.n	8006dc6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006d88:	2208      	movs	r2, #8
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f003 0307 	and.w	r3, r3, #7
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d015      	beq.n	8006dc6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f023 0307 	bic.w	r3, r3, #7
 8006da0:	3308      	adds	r3, #8
 8006da2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f003 0307 	and.w	r3, r3, #7
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00b      	beq.n	8006dc6 <pvPortMalloc+0x6e>
	__asm volatile
 8006dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006db2:	f383 8811 	msr	BASEPRI, r3
 8006db6:	f3bf 8f6f 	isb	sy
 8006dba:	f3bf 8f4f 	dsb	sy
 8006dbe:	617b      	str	r3, [r7, #20]
}
 8006dc0:	bf00      	nop
 8006dc2:	bf00      	nop
 8006dc4:	e7fd      	b.n	8006dc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d06f      	beq.n	8006eac <pvPortMalloc+0x154>
 8006dcc:	4b45      	ldr	r3, [pc, #276]	@ (8006ee4 <pvPortMalloc+0x18c>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d86a      	bhi.n	8006eac <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006dd6:	4b44      	ldr	r3, [pc, #272]	@ (8006ee8 <pvPortMalloc+0x190>)
 8006dd8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006dda:	4b43      	ldr	r3, [pc, #268]	@ (8006ee8 <pvPortMalloc+0x190>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006de0:	e004      	b.n	8006dec <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d903      	bls.n	8006dfe <pvPortMalloc+0xa6>
 8006df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1f1      	bne.n	8006de2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006dfe:	4b37      	ldr	r3, [pc, #220]	@ (8006edc <pvPortMalloc+0x184>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d051      	beq.n	8006eac <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e08:	6a3b      	ldr	r3, [r7, #32]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2208      	movs	r2, #8
 8006e0e:	4413      	add	r3, r2
 8006e10:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	6a3b      	ldr	r3, [r7, #32]
 8006e18:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e1c:	685a      	ldr	r2, [r3, #4]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	1ad2      	subs	r2, r2, r3
 8006e22:	2308      	movs	r3, #8
 8006e24:	005b      	lsls	r3, r3, #1
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d920      	bls.n	8006e6c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4413      	add	r3, r2
 8006e30:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	f003 0307 	and.w	r3, r3, #7
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d00b      	beq.n	8006e54 <pvPortMalloc+0xfc>
	__asm volatile
 8006e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e40:	f383 8811 	msr	BASEPRI, r3
 8006e44:	f3bf 8f6f 	isb	sy
 8006e48:	f3bf 8f4f 	dsb	sy
 8006e4c:	613b      	str	r3, [r7, #16]
}
 8006e4e:	bf00      	nop
 8006e50:	bf00      	nop
 8006e52:	e7fd      	b.n	8006e50 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e56:	685a      	ldr	r2, [r3, #4]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	1ad2      	subs	r2, r2, r3
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006e66:	69b8      	ldr	r0, [r7, #24]
 8006e68:	f000 f90a 	bl	8007080 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8006ee4 <pvPortMalloc+0x18c>)
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	4a1b      	ldr	r2, [pc, #108]	@ (8006ee4 <pvPortMalloc+0x18c>)
 8006e78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8006ee4 <pvPortMalloc+0x18c>)
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8006eec <pvPortMalloc+0x194>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d203      	bcs.n	8006e8e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e86:	4b17      	ldr	r3, [pc, #92]	@ (8006ee4 <pvPortMalloc+0x18c>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a18      	ldr	r2, [pc, #96]	@ (8006eec <pvPortMalloc+0x194>)
 8006e8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e90:	685a      	ldr	r2, [r3, #4]
 8006e92:	4b13      	ldr	r3, [pc, #76]	@ (8006ee0 <pvPortMalloc+0x188>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	431a      	orrs	r2, r3
 8006e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006ea2:	4b13      	ldr	r3, [pc, #76]	@ (8006ef0 <pvPortMalloc+0x198>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	4a11      	ldr	r2, [pc, #68]	@ (8006ef0 <pvPortMalloc+0x198>)
 8006eaa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006eac:	f7ff fa1c 	bl	80062e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	f003 0307 	and.w	r3, r3, #7
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00b      	beq.n	8006ed2 <pvPortMalloc+0x17a>
	__asm volatile
 8006eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ebe:	f383 8811 	msr	BASEPRI, r3
 8006ec2:	f3bf 8f6f 	isb	sy
 8006ec6:	f3bf 8f4f 	dsb	sy
 8006eca:	60fb      	str	r3, [r7, #12]
}
 8006ecc:	bf00      	nop
 8006ece:	bf00      	nop
 8006ed0:	e7fd      	b.n	8006ece <pvPortMalloc+0x176>
	return pvReturn;
 8006ed2:	69fb      	ldr	r3, [r7, #28]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3728      	adds	r7, #40	@ 0x28
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	20005c9c 	.word	0x20005c9c
 8006ee0:	20005cb0 	.word	0x20005cb0
 8006ee4:	20005ca0 	.word	0x20005ca0
 8006ee8:	20005c94 	.word	0x20005c94
 8006eec:	20005ca4 	.word	0x20005ca4
 8006ef0:	20005ca8 	.word	0x20005ca8

08006ef4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b086      	sub	sp, #24
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d04f      	beq.n	8006fa6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006f06:	2308      	movs	r3, #8
 8006f08:	425b      	negs	r3, r3
 8006f0a:	697a      	ldr	r2, [r7, #20]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	685a      	ldr	r2, [r3, #4]
 8006f18:	4b25      	ldr	r3, [pc, #148]	@ (8006fb0 <vPortFree+0xbc>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d10b      	bne.n	8006f3a <vPortFree+0x46>
	__asm volatile
 8006f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f26:	f383 8811 	msr	BASEPRI, r3
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	60fb      	str	r3, [r7, #12]
}
 8006f34:	bf00      	nop
 8006f36:	bf00      	nop
 8006f38:	e7fd      	b.n	8006f36 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00b      	beq.n	8006f5a <vPortFree+0x66>
	__asm volatile
 8006f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f46:	f383 8811 	msr	BASEPRI, r3
 8006f4a:	f3bf 8f6f 	isb	sy
 8006f4e:	f3bf 8f4f 	dsb	sy
 8006f52:	60bb      	str	r3, [r7, #8]
}
 8006f54:	bf00      	nop
 8006f56:	bf00      	nop
 8006f58:	e7fd      	b.n	8006f56 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	685a      	ldr	r2, [r3, #4]
 8006f5e:	4b14      	ldr	r3, [pc, #80]	@ (8006fb0 <vPortFree+0xbc>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4013      	ands	r3, r2
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d01e      	beq.n	8006fa6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d11a      	bne.n	8006fa6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	685a      	ldr	r2, [r3, #4]
 8006f74:	4b0e      	ldr	r3, [pc, #56]	@ (8006fb0 <vPortFree+0xbc>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	43db      	mvns	r3, r3
 8006f7a:	401a      	ands	r2, r3
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006f80:	f7ff f9a4 	bl	80062cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	685a      	ldr	r2, [r3, #4]
 8006f88:	4b0a      	ldr	r3, [pc, #40]	@ (8006fb4 <vPortFree+0xc0>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	4a09      	ldr	r2, [pc, #36]	@ (8006fb4 <vPortFree+0xc0>)
 8006f90:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f92:	6938      	ldr	r0, [r7, #16]
 8006f94:	f000 f874 	bl	8007080 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006f98:	4b07      	ldr	r3, [pc, #28]	@ (8006fb8 <vPortFree+0xc4>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	4a06      	ldr	r2, [pc, #24]	@ (8006fb8 <vPortFree+0xc4>)
 8006fa0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006fa2:	f7ff f9a1 	bl	80062e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006fa6:	bf00      	nop
 8006fa8:	3718      	adds	r7, #24
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	20005cb0 	.word	0x20005cb0
 8006fb4:	20005ca0 	.word	0x20005ca0
 8006fb8:	20005cac 	.word	0x20005cac

08006fbc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006fc2:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8006fc6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006fc8:	4b27      	ldr	r3, [pc, #156]	@ (8007068 <prvHeapInit+0xac>)
 8006fca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f003 0307 	and.w	r3, r3, #7
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00c      	beq.n	8006ff0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	3307      	adds	r3, #7
 8006fda:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f023 0307 	bic.w	r3, r3, #7
 8006fe2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006fe4:	68ba      	ldr	r2, [r7, #8]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	4a1f      	ldr	r2, [pc, #124]	@ (8007068 <prvHeapInit+0xac>)
 8006fec:	4413      	add	r3, r2
 8006fee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ff4:	4a1d      	ldr	r2, [pc, #116]	@ (800706c <prvHeapInit+0xb0>)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ffa:	4b1c      	ldr	r3, [pc, #112]	@ (800706c <prvHeapInit+0xb0>)
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	4413      	add	r3, r2
 8007006:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007008:	2208      	movs	r2, #8
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	1a9b      	subs	r3, r3, r2
 800700e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f023 0307 	bic.w	r3, r3, #7
 8007016:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	4a15      	ldr	r2, [pc, #84]	@ (8007070 <prvHeapInit+0xb4>)
 800701c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800701e:	4b14      	ldr	r3, [pc, #80]	@ (8007070 <prvHeapInit+0xb4>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2200      	movs	r2, #0
 8007024:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007026:	4b12      	ldr	r3, [pc, #72]	@ (8007070 <prvHeapInit+0xb4>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2200      	movs	r2, #0
 800702c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	1ad2      	subs	r2, r2, r3
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800703c:	4b0c      	ldr	r3, [pc, #48]	@ (8007070 <prvHeapInit+0xb4>)
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	4a0a      	ldr	r2, [pc, #40]	@ (8007074 <prvHeapInit+0xb8>)
 800704a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	4a09      	ldr	r2, [pc, #36]	@ (8007078 <prvHeapInit+0xbc>)
 8007052:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007054:	4b09      	ldr	r3, [pc, #36]	@ (800707c <prvHeapInit+0xc0>)
 8007056:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800705a:	601a      	str	r2, [r3, #0]
}
 800705c:	bf00      	nop
 800705e:	3714      	adds	r7, #20
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr
 8007068:	20000e74 	.word	0x20000e74
 800706c:	20005c94 	.word	0x20005c94
 8007070:	20005c9c 	.word	0x20005c9c
 8007074:	20005ca4 	.word	0x20005ca4
 8007078:	20005ca0 	.word	0x20005ca0
 800707c:	20005cb0 	.word	0x20005cb0

08007080 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007080:	b480      	push	{r7}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007088:	4b28      	ldr	r3, [pc, #160]	@ (800712c <prvInsertBlockIntoFreeList+0xac>)
 800708a:	60fb      	str	r3, [r7, #12]
 800708c:	e002      	b.n	8007094 <prvInsertBlockIntoFreeList+0x14>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	60fb      	str	r3, [r7, #12]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	429a      	cmp	r2, r3
 800709c:	d8f7      	bhi.n	800708e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	68ba      	ldr	r2, [r7, #8]
 80070a8:	4413      	add	r3, r2
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d108      	bne.n	80070c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	685a      	ldr	r2, [r3, #4]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	441a      	add	r2, r3
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	68ba      	ldr	r2, [r7, #8]
 80070cc:	441a      	add	r2, r3
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d118      	bne.n	8007108 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	4b15      	ldr	r3, [pc, #84]	@ (8007130 <prvInsertBlockIntoFreeList+0xb0>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d00d      	beq.n	80070fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	685a      	ldr	r2, [r3, #4]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	441a      	add	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	601a      	str	r2, [r3, #0]
 80070fc:	e008      	b.n	8007110 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80070fe:	4b0c      	ldr	r3, [pc, #48]	@ (8007130 <prvInsertBlockIntoFreeList+0xb0>)
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	601a      	str	r2, [r3, #0]
 8007106:	e003      	b.n	8007110 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	429a      	cmp	r2, r3
 8007116:	d002      	beq.n	800711e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800711e:	bf00      	nop
 8007120:	3714      	adds	r7, #20
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	20005c94 	.word	0x20005c94
 8007130:	20005c9c 	.word	0x20005c9c

08007134 <std>:
 8007134:	2300      	movs	r3, #0
 8007136:	b510      	push	{r4, lr}
 8007138:	4604      	mov	r4, r0
 800713a:	e9c0 3300 	strd	r3, r3, [r0]
 800713e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007142:	6083      	str	r3, [r0, #8]
 8007144:	8181      	strh	r1, [r0, #12]
 8007146:	6643      	str	r3, [r0, #100]	@ 0x64
 8007148:	81c2      	strh	r2, [r0, #14]
 800714a:	6183      	str	r3, [r0, #24]
 800714c:	4619      	mov	r1, r3
 800714e:	2208      	movs	r2, #8
 8007150:	305c      	adds	r0, #92	@ 0x5c
 8007152:	f000 fa01 	bl	8007558 <memset>
 8007156:	4b0d      	ldr	r3, [pc, #52]	@ (800718c <std+0x58>)
 8007158:	6263      	str	r3, [r4, #36]	@ 0x24
 800715a:	4b0d      	ldr	r3, [pc, #52]	@ (8007190 <std+0x5c>)
 800715c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800715e:	4b0d      	ldr	r3, [pc, #52]	@ (8007194 <std+0x60>)
 8007160:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007162:	4b0d      	ldr	r3, [pc, #52]	@ (8007198 <std+0x64>)
 8007164:	6323      	str	r3, [r4, #48]	@ 0x30
 8007166:	4b0d      	ldr	r3, [pc, #52]	@ (800719c <std+0x68>)
 8007168:	6224      	str	r4, [r4, #32]
 800716a:	429c      	cmp	r4, r3
 800716c:	d006      	beq.n	800717c <std+0x48>
 800716e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007172:	4294      	cmp	r4, r2
 8007174:	d002      	beq.n	800717c <std+0x48>
 8007176:	33d0      	adds	r3, #208	@ 0xd0
 8007178:	429c      	cmp	r4, r3
 800717a:	d105      	bne.n	8007188 <std+0x54>
 800717c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007184:	f000 ba60 	b.w	8007648 <__retarget_lock_init_recursive>
 8007188:	bd10      	pop	{r4, pc}
 800718a:	bf00      	nop
 800718c:	080073a9 	.word	0x080073a9
 8007190:	080073cb 	.word	0x080073cb
 8007194:	08007403 	.word	0x08007403
 8007198:	08007427 	.word	0x08007427
 800719c:	20005cb4 	.word	0x20005cb4

080071a0 <stdio_exit_handler>:
 80071a0:	4a02      	ldr	r2, [pc, #8]	@ (80071ac <stdio_exit_handler+0xc>)
 80071a2:	4903      	ldr	r1, [pc, #12]	@ (80071b0 <stdio_exit_handler+0x10>)
 80071a4:	4803      	ldr	r0, [pc, #12]	@ (80071b4 <stdio_exit_handler+0x14>)
 80071a6:	f000 b869 	b.w	800727c <_fwalk_sglue>
 80071aa:	bf00      	nop
 80071ac:	20000010 	.word	0x20000010
 80071b0:	08007ee9 	.word	0x08007ee9
 80071b4:	20000020 	.word	0x20000020

080071b8 <cleanup_stdio>:
 80071b8:	6841      	ldr	r1, [r0, #4]
 80071ba:	4b0c      	ldr	r3, [pc, #48]	@ (80071ec <cleanup_stdio+0x34>)
 80071bc:	4299      	cmp	r1, r3
 80071be:	b510      	push	{r4, lr}
 80071c0:	4604      	mov	r4, r0
 80071c2:	d001      	beq.n	80071c8 <cleanup_stdio+0x10>
 80071c4:	f000 fe90 	bl	8007ee8 <_fflush_r>
 80071c8:	68a1      	ldr	r1, [r4, #8]
 80071ca:	4b09      	ldr	r3, [pc, #36]	@ (80071f0 <cleanup_stdio+0x38>)
 80071cc:	4299      	cmp	r1, r3
 80071ce:	d002      	beq.n	80071d6 <cleanup_stdio+0x1e>
 80071d0:	4620      	mov	r0, r4
 80071d2:	f000 fe89 	bl	8007ee8 <_fflush_r>
 80071d6:	68e1      	ldr	r1, [r4, #12]
 80071d8:	4b06      	ldr	r3, [pc, #24]	@ (80071f4 <cleanup_stdio+0x3c>)
 80071da:	4299      	cmp	r1, r3
 80071dc:	d004      	beq.n	80071e8 <cleanup_stdio+0x30>
 80071de:	4620      	mov	r0, r4
 80071e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071e4:	f000 be80 	b.w	8007ee8 <_fflush_r>
 80071e8:	bd10      	pop	{r4, pc}
 80071ea:	bf00      	nop
 80071ec:	20005cb4 	.word	0x20005cb4
 80071f0:	20005d1c 	.word	0x20005d1c
 80071f4:	20005d84 	.word	0x20005d84

080071f8 <global_stdio_init.part.0>:
 80071f8:	b510      	push	{r4, lr}
 80071fa:	4b0b      	ldr	r3, [pc, #44]	@ (8007228 <global_stdio_init.part.0+0x30>)
 80071fc:	4c0b      	ldr	r4, [pc, #44]	@ (800722c <global_stdio_init.part.0+0x34>)
 80071fe:	4a0c      	ldr	r2, [pc, #48]	@ (8007230 <global_stdio_init.part.0+0x38>)
 8007200:	601a      	str	r2, [r3, #0]
 8007202:	4620      	mov	r0, r4
 8007204:	2200      	movs	r2, #0
 8007206:	2104      	movs	r1, #4
 8007208:	f7ff ff94 	bl	8007134 <std>
 800720c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007210:	2201      	movs	r2, #1
 8007212:	2109      	movs	r1, #9
 8007214:	f7ff ff8e 	bl	8007134 <std>
 8007218:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800721c:	2202      	movs	r2, #2
 800721e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007222:	2112      	movs	r1, #18
 8007224:	f7ff bf86 	b.w	8007134 <std>
 8007228:	20005dec 	.word	0x20005dec
 800722c:	20005cb4 	.word	0x20005cb4
 8007230:	080071a1 	.word	0x080071a1

08007234 <__sfp_lock_acquire>:
 8007234:	4801      	ldr	r0, [pc, #4]	@ (800723c <__sfp_lock_acquire+0x8>)
 8007236:	f000 ba08 	b.w	800764a <__retarget_lock_acquire_recursive>
 800723a:	bf00      	nop
 800723c:	20005df5 	.word	0x20005df5

08007240 <__sfp_lock_release>:
 8007240:	4801      	ldr	r0, [pc, #4]	@ (8007248 <__sfp_lock_release+0x8>)
 8007242:	f000 ba03 	b.w	800764c <__retarget_lock_release_recursive>
 8007246:	bf00      	nop
 8007248:	20005df5 	.word	0x20005df5

0800724c <__sinit>:
 800724c:	b510      	push	{r4, lr}
 800724e:	4604      	mov	r4, r0
 8007250:	f7ff fff0 	bl	8007234 <__sfp_lock_acquire>
 8007254:	6a23      	ldr	r3, [r4, #32]
 8007256:	b11b      	cbz	r3, 8007260 <__sinit+0x14>
 8007258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800725c:	f7ff bff0 	b.w	8007240 <__sfp_lock_release>
 8007260:	4b04      	ldr	r3, [pc, #16]	@ (8007274 <__sinit+0x28>)
 8007262:	6223      	str	r3, [r4, #32]
 8007264:	4b04      	ldr	r3, [pc, #16]	@ (8007278 <__sinit+0x2c>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1f5      	bne.n	8007258 <__sinit+0xc>
 800726c:	f7ff ffc4 	bl	80071f8 <global_stdio_init.part.0>
 8007270:	e7f2      	b.n	8007258 <__sinit+0xc>
 8007272:	bf00      	nop
 8007274:	080071b9 	.word	0x080071b9
 8007278:	20005dec 	.word	0x20005dec

0800727c <_fwalk_sglue>:
 800727c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007280:	4607      	mov	r7, r0
 8007282:	4688      	mov	r8, r1
 8007284:	4614      	mov	r4, r2
 8007286:	2600      	movs	r6, #0
 8007288:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800728c:	f1b9 0901 	subs.w	r9, r9, #1
 8007290:	d505      	bpl.n	800729e <_fwalk_sglue+0x22>
 8007292:	6824      	ldr	r4, [r4, #0]
 8007294:	2c00      	cmp	r4, #0
 8007296:	d1f7      	bne.n	8007288 <_fwalk_sglue+0xc>
 8007298:	4630      	mov	r0, r6
 800729a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800729e:	89ab      	ldrh	r3, [r5, #12]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d907      	bls.n	80072b4 <_fwalk_sglue+0x38>
 80072a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80072a8:	3301      	adds	r3, #1
 80072aa:	d003      	beq.n	80072b4 <_fwalk_sglue+0x38>
 80072ac:	4629      	mov	r1, r5
 80072ae:	4638      	mov	r0, r7
 80072b0:	47c0      	blx	r8
 80072b2:	4306      	orrs	r6, r0
 80072b4:	3568      	adds	r5, #104	@ 0x68
 80072b6:	e7e9      	b.n	800728c <_fwalk_sglue+0x10>

080072b8 <iprintf>:
 80072b8:	b40f      	push	{r0, r1, r2, r3}
 80072ba:	b507      	push	{r0, r1, r2, lr}
 80072bc:	4906      	ldr	r1, [pc, #24]	@ (80072d8 <iprintf+0x20>)
 80072be:	ab04      	add	r3, sp, #16
 80072c0:	6808      	ldr	r0, [r1, #0]
 80072c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80072c6:	6881      	ldr	r1, [r0, #8]
 80072c8:	9301      	str	r3, [sp, #4]
 80072ca:	f000 fae3 	bl	8007894 <_vfiprintf_r>
 80072ce:	b003      	add	sp, #12
 80072d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80072d4:	b004      	add	sp, #16
 80072d6:	4770      	bx	lr
 80072d8:	2000001c 	.word	0x2000001c

080072dc <putchar>:
 80072dc:	4b02      	ldr	r3, [pc, #8]	@ (80072e8 <putchar+0xc>)
 80072de:	4601      	mov	r1, r0
 80072e0:	6818      	ldr	r0, [r3, #0]
 80072e2:	6882      	ldr	r2, [r0, #8]
 80072e4:	f000 be8a 	b.w	8007ffc <_putc_r>
 80072e8:	2000001c 	.word	0x2000001c

080072ec <_puts_r>:
 80072ec:	6a03      	ldr	r3, [r0, #32]
 80072ee:	b570      	push	{r4, r5, r6, lr}
 80072f0:	6884      	ldr	r4, [r0, #8]
 80072f2:	4605      	mov	r5, r0
 80072f4:	460e      	mov	r6, r1
 80072f6:	b90b      	cbnz	r3, 80072fc <_puts_r+0x10>
 80072f8:	f7ff ffa8 	bl	800724c <__sinit>
 80072fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80072fe:	07db      	lsls	r3, r3, #31
 8007300:	d405      	bmi.n	800730e <_puts_r+0x22>
 8007302:	89a3      	ldrh	r3, [r4, #12]
 8007304:	0598      	lsls	r0, r3, #22
 8007306:	d402      	bmi.n	800730e <_puts_r+0x22>
 8007308:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800730a:	f000 f99e 	bl	800764a <__retarget_lock_acquire_recursive>
 800730e:	89a3      	ldrh	r3, [r4, #12]
 8007310:	0719      	lsls	r1, r3, #28
 8007312:	d502      	bpl.n	800731a <_puts_r+0x2e>
 8007314:	6923      	ldr	r3, [r4, #16]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d135      	bne.n	8007386 <_puts_r+0x9a>
 800731a:	4621      	mov	r1, r4
 800731c:	4628      	mov	r0, r5
 800731e:	f000 f8c5 	bl	80074ac <__swsetup_r>
 8007322:	b380      	cbz	r0, 8007386 <_puts_r+0x9a>
 8007324:	f04f 35ff 	mov.w	r5, #4294967295
 8007328:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800732a:	07da      	lsls	r2, r3, #31
 800732c:	d405      	bmi.n	800733a <_puts_r+0x4e>
 800732e:	89a3      	ldrh	r3, [r4, #12]
 8007330:	059b      	lsls	r3, r3, #22
 8007332:	d402      	bmi.n	800733a <_puts_r+0x4e>
 8007334:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007336:	f000 f989 	bl	800764c <__retarget_lock_release_recursive>
 800733a:	4628      	mov	r0, r5
 800733c:	bd70      	pop	{r4, r5, r6, pc}
 800733e:	2b00      	cmp	r3, #0
 8007340:	da04      	bge.n	800734c <_puts_r+0x60>
 8007342:	69a2      	ldr	r2, [r4, #24]
 8007344:	429a      	cmp	r2, r3
 8007346:	dc17      	bgt.n	8007378 <_puts_r+0x8c>
 8007348:	290a      	cmp	r1, #10
 800734a:	d015      	beq.n	8007378 <_puts_r+0x8c>
 800734c:	6823      	ldr	r3, [r4, #0]
 800734e:	1c5a      	adds	r2, r3, #1
 8007350:	6022      	str	r2, [r4, #0]
 8007352:	7019      	strb	r1, [r3, #0]
 8007354:	68a3      	ldr	r3, [r4, #8]
 8007356:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800735a:	3b01      	subs	r3, #1
 800735c:	60a3      	str	r3, [r4, #8]
 800735e:	2900      	cmp	r1, #0
 8007360:	d1ed      	bne.n	800733e <_puts_r+0x52>
 8007362:	2b00      	cmp	r3, #0
 8007364:	da11      	bge.n	800738a <_puts_r+0x9e>
 8007366:	4622      	mov	r2, r4
 8007368:	210a      	movs	r1, #10
 800736a:	4628      	mov	r0, r5
 800736c:	f000 f85f 	bl	800742e <__swbuf_r>
 8007370:	3001      	adds	r0, #1
 8007372:	d0d7      	beq.n	8007324 <_puts_r+0x38>
 8007374:	250a      	movs	r5, #10
 8007376:	e7d7      	b.n	8007328 <_puts_r+0x3c>
 8007378:	4622      	mov	r2, r4
 800737a:	4628      	mov	r0, r5
 800737c:	f000 f857 	bl	800742e <__swbuf_r>
 8007380:	3001      	adds	r0, #1
 8007382:	d1e7      	bne.n	8007354 <_puts_r+0x68>
 8007384:	e7ce      	b.n	8007324 <_puts_r+0x38>
 8007386:	3e01      	subs	r6, #1
 8007388:	e7e4      	b.n	8007354 <_puts_r+0x68>
 800738a:	6823      	ldr	r3, [r4, #0]
 800738c:	1c5a      	adds	r2, r3, #1
 800738e:	6022      	str	r2, [r4, #0]
 8007390:	220a      	movs	r2, #10
 8007392:	701a      	strb	r2, [r3, #0]
 8007394:	e7ee      	b.n	8007374 <_puts_r+0x88>
	...

08007398 <puts>:
 8007398:	4b02      	ldr	r3, [pc, #8]	@ (80073a4 <puts+0xc>)
 800739a:	4601      	mov	r1, r0
 800739c:	6818      	ldr	r0, [r3, #0]
 800739e:	f7ff bfa5 	b.w	80072ec <_puts_r>
 80073a2:	bf00      	nop
 80073a4:	2000001c 	.word	0x2000001c

080073a8 <__sread>:
 80073a8:	b510      	push	{r4, lr}
 80073aa:	460c      	mov	r4, r1
 80073ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073b0:	f000 f8fc 	bl	80075ac <_read_r>
 80073b4:	2800      	cmp	r0, #0
 80073b6:	bfab      	itete	ge
 80073b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80073ba:	89a3      	ldrhlt	r3, [r4, #12]
 80073bc:	181b      	addge	r3, r3, r0
 80073be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80073c2:	bfac      	ite	ge
 80073c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80073c6:	81a3      	strhlt	r3, [r4, #12]
 80073c8:	bd10      	pop	{r4, pc}

080073ca <__swrite>:
 80073ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073ce:	461f      	mov	r7, r3
 80073d0:	898b      	ldrh	r3, [r1, #12]
 80073d2:	05db      	lsls	r3, r3, #23
 80073d4:	4605      	mov	r5, r0
 80073d6:	460c      	mov	r4, r1
 80073d8:	4616      	mov	r6, r2
 80073da:	d505      	bpl.n	80073e8 <__swrite+0x1e>
 80073dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073e0:	2302      	movs	r3, #2
 80073e2:	2200      	movs	r2, #0
 80073e4:	f000 f8d0 	bl	8007588 <_lseek_r>
 80073e8:	89a3      	ldrh	r3, [r4, #12]
 80073ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80073f2:	81a3      	strh	r3, [r4, #12]
 80073f4:	4632      	mov	r2, r6
 80073f6:	463b      	mov	r3, r7
 80073f8:	4628      	mov	r0, r5
 80073fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073fe:	f000 b8e7 	b.w	80075d0 <_write_r>

08007402 <__sseek>:
 8007402:	b510      	push	{r4, lr}
 8007404:	460c      	mov	r4, r1
 8007406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800740a:	f000 f8bd 	bl	8007588 <_lseek_r>
 800740e:	1c43      	adds	r3, r0, #1
 8007410:	89a3      	ldrh	r3, [r4, #12]
 8007412:	bf15      	itete	ne
 8007414:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007416:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800741a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800741e:	81a3      	strheq	r3, [r4, #12]
 8007420:	bf18      	it	ne
 8007422:	81a3      	strhne	r3, [r4, #12]
 8007424:	bd10      	pop	{r4, pc}

08007426 <__sclose>:
 8007426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800742a:	f000 b89d 	b.w	8007568 <_close_r>

0800742e <__swbuf_r>:
 800742e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007430:	460e      	mov	r6, r1
 8007432:	4614      	mov	r4, r2
 8007434:	4605      	mov	r5, r0
 8007436:	b118      	cbz	r0, 8007440 <__swbuf_r+0x12>
 8007438:	6a03      	ldr	r3, [r0, #32]
 800743a:	b90b      	cbnz	r3, 8007440 <__swbuf_r+0x12>
 800743c:	f7ff ff06 	bl	800724c <__sinit>
 8007440:	69a3      	ldr	r3, [r4, #24]
 8007442:	60a3      	str	r3, [r4, #8]
 8007444:	89a3      	ldrh	r3, [r4, #12]
 8007446:	071a      	lsls	r2, r3, #28
 8007448:	d501      	bpl.n	800744e <__swbuf_r+0x20>
 800744a:	6923      	ldr	r3, [r4, #16]
 800744c:	b943      	cbnz	r3, 8007460 <__swbuf_r+0x32>
 800744e:	4621      	mov	r1, r4
 8007450:	4628      	mov	r0, r5
 8007452:	f000 f82b 	bl	80074ac <__swsetup_r>
 8007456:	b118      	cbz	r0, 8007460 <__swbuf_r+0x32>
 8007458:	f04f 37ff 	mov.w	r7, #4294967295
 800745c:	4638      	mov	r0, r7
 800745e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007460:	6823      	ldr	r3, [r4, #0]
 8007462:	6922      	ldr	r2, [r4, #16]
 8007464:	1a98      	subs	r0, r3, r2
 8007466:	6963      	ldr	r3, [r4, #20]
 8007468:	b2f6      	uxtb	r6, r6
 800746a:	4283      	cmp	r3, r0
 800746c:	4637      	mov	r7, r6
 800746e:	dc05      	bgt.n	800747c <__swbuf_r+0x4e>
 8007470:	4621      	mov	r1, r4
 8007472:	4628      	mov	r0, r5
 8007474:	f000 fd38 	bl	8007ee8 <_fflush_r>
 8007478:	2800      	cmp	r0, #0
 800747a:	d1ed      	bne.n	8007458 <__swbuf_r+0x2a>
 800747c:	68a3      	ldr	r3, [r4, #8]
 800747e:	3b01      	subs	r3, #1
 8007480:	60a3      	str	r3, [r4, #8]
 8007482:	6823      	ldr	r3, [r4, #0]
 8007484:	1c5a      	adds	r2, r3, #1
 8007486:	6022      	str	r2, [r4, #0]
 8007488:	701e      	strb	r6, [r3, #0]
 800748a:	6962      	ldr	r2, [r4, #20]
 800748c:	1c43      	adds	r3, r0, #1
 800748e:	429a      	cmp	r2, r3
 8007490:	d004      	beq.n	800749c <__swbuf_r+0x6e>
 8007492:	89a3      	ldrh	r3, [r4, #12]
 8007494:	07db      	lsls	r3, r3, #31
 8007496:	d5e1      	bpl.n	800745c <__swbuf_r+0x2e>
 8007498:	2e0a      	cmp	r6, #10
 800749a:	d1df      	bne.n	800745c <__swbuf_r+0x2e>
 800749c:	4621      	mov	r1, r4
 800749e:	4628      	mov	r0, r5
 80074a0:	f000 fd22 	bl	8007ee8 <_fflush_r>
 80074a4:	2800      	cmp	r0, #0
 80074a6:	d0d9      	beq.n	800745c <__swbuf_r+0x2e>
 80074a8:	e7d6      	b.n	8007458 <__swbuf_r+0x2a>
	...

080074ac <__swsetup_r>:
 80074ac:	b538      	push	{r3, r4, r5, lr}
 80074ae:	4b29      	ldr	r3, [pc, #164]	@ (8007554 <__swsetup_r+0xa8>)
 80074b0:	4605      	mov	r5, r0
 80074b2:	6818      	ldr	r0, [r3, #0]
 80074b4:	460c      	mov	r4, r1
 80074b6:	b118      	cbz	r0, 80074c0 <__swsetup_r+0x14>
 80074b8:	6a03      	ldr	r3, [r0, #32]
 80074ba:	b90b      	cbnz	r3, 80074c0 <__swsetup_r+0x14>
 80074bc:	f7ff fec6 	bl	800724c <__sinit>
 80074c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074c4:	0719      	lsls	r1, r3, #28
 80074c6:	d422      	bmi.n	800750e <__swsetup_r+0x62>
 80074c8:	06da      	lsls	r2, r3, #27
 80074ca:	d407      	bmi.n	80074dc <__swsetup_r+0x30>
 80074cc:	2209      	movs	r2, #9
 80074ce:	602a      	str	r2, [r5, #0]
 80074d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074d4:	81a3      	strh	r3, [r4, #12]
 80074d6:	f04f 30ff 	mov.w	r0, #4294967295
 80074da:	e033      	b.n	8007544 <__swsetup_r+0x98>
 80074dc:	0758      	lsls	r0, r3, #29
 80074de:	d512      	bpl.n	8007506 <__swsetup_r+0x5a>
 80074e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80074e2:	b141      	cbz	r1, 80074f6 <__swsetup_r+0x4a>
 80074e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80074e8:	4299      	cmp	r1, r3
 80074ea:	d002      	beq.n	80074f2 <__swsetup_r+0x46>
 80074ec:	4628      	mov	r0, r5
 80074ee:	f000 f8af 	bl	8007650 <_free_r>
 80074f2:	2300      	movs	r3, #0
 80074f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80074f6:	89a3      	ldrh	r3, [r4, #12]
 80074f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80074fc:	81a3      	strh	r3, [r4, #12]
 80074fe:	2300      	movs	r3, #0
 8007500:	6063      	str	r3, [r4, #4]
 8007502:	6923      	ldr	r3, [r4, #16]
 8007504:	6023      	str	r3, [r4, #0]
 8007506:	89a3      	ldrh	r3, [r4, #12]
 8007508:	f043 0308 	orr.w	r3, r3, #8
 800750c:	81a3      	strh	r3, [r4, #12]
 800750e:	6923      	ldr	r3, [r4, #16]
 8007510:	b94b      	cbnz	r3, 8007526 <__swsetup_r+0x7a>
 8007512:	89a3      	ldrh	r3, [r4, #12]
 8007514:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007518:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800751c:	d003      	beq.n	8007526 <__swsetup_r+0x7a>
 800751e:	4621      	mov	r1, r4
 8007520:	4628      	mov	r0, r5
 8007522:	f000 fd2f 	bl	8007f84 <__smakebuf_r>
 8007526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800752a:	f013 0201 	ands.w	r2, r3, #1
 800752e:	d00a      	beq.n	8007546 <__swsetup_r+0x9a>
 8007530:	2200      	movs	r2, #0
 8007532:	60a2      	str	r2, [r4, #8]
 8007534:	6962      	ldr	r2, [r4, #20]
 8007536:	4252      	negs	r2, r2
 8007538:	61a2      	str	r2, [r4, #24]
 800753a:	6922      	ldr	r2, [r4, #16]
 800753c:	b942      	cbnz	r2, 8007550 <__swsetup_r+0xa4>
 800753e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007542:	d1c5      	bne.n	80074d0 <__swsetup_r+0x24>
 8007544:	bd38      	pop	{r3, r4, r5, pc}
 8007546:	0799      	lsls	r1, r3, #30
 8007548:	bf58      	it	pl
 800754a:	6962      	ldrpl	r2, [r4, #20]
 800754c:	60a2      	str	r2, [r4, #8]
 800754e:	e7f4      	b.n	800753a <__swsetup_r+0x8e>
 8007550:	2000      	movs	r0, #0
 8007552:	e7f7      	b.n	8007544 <__swsetup_r+0x98>
 8007554:	2000001c 	.word	0x2000001c

08007558 <memset>:
 8007558:	4402      	add	r2, r0
 800755a:	4603      	mov	r3, r0
 800755c:	4293      	cmp	r3, r2
 800755e:	d100      	bne.n	8007562 <memset+0xa>
 8007560:	4770      	bx	lr
 8007562:	f803 1b01 	strb.w	r1, [r3], #1
 8007566:	e7f9      	b.n	800755c <memset+0x4>

08007568 <_close_r>:
 8007568:	b538      	push	{r3, r4, r5, lr}
 800756a:	4d06      	ldr	r5, [pc, #24]	@ (8007584 <_close_r+0x1c>)
 800756c:	2300      	movs	r3, #0
 800756e:	4604      	mov	r4, r0
 8007570:	4608      	mov	r0, r1
 8007572:	602b      	str	r3, [r5, #0]
 8007574:	f7f9 fc91 	bl	8000e9a <_close>
 8007578:	1c43      	adds	r3, r0, #1
 800757a:	d102      	bne.n	8007582 <_close_r+0x1a>
 800757c:	682b      	ldr	r3, [r5, #0]
 800757e:	b103      	cbz	r3, 8007582 <_close_r+0x1a>
 8007580:	6023      	str	r3, [r4, #0]
 8007582:	bd38      	pop	{r3, r4, r5, pc}
 8007584:	20005df0 	.word	0x20005df0

08007588 <_lseek_r>:
 8007588:	b538      	push	{r3, r4, r5, lr}
 800758a:	4d07      	ldr	r5, [pc, #28]	@ (80075a8 <_lseek_r+0x20>)
 800758c:	4604      	mov	r4, r0
 800758e:	4608      	mov	r0, r1
 8007590:	4611      	mov	r1, r2
 8007592:	2200      	movs	r2, #0
 8007594:	602a      	str	r2, [r5, #0]
 8007596:	461a      	mov	r2, r3
 8007598:	f7f9 fca6 	bl	8000ee8 <_lseek>
 800759c:	1c43      	adds	r3, r0, #1
 800759e:	d102      	bne.n	80075a6 <_lseek_r+0x1e>
 80075a0:	682b      	ldr	r3, [r5, #0]
 80075a2:	b103      	cbz	r3, 80075a6 <_lseek_r+0x1e>
 80075a4:	6023      	str	r3, [r4, #0]
 80075a6:	bd38      	pop	{r3, r4, r5, pc}
 80075a8:	20005df0 	.word	0x20005df0

080075ac <_read_r>:
 80075ac:	b538      	push	{r3, r4, r5, lr}
 80075ae:	4d07      	ldr	r5, [pc, #28]	@ (80075cc <_read_r+0x20>)
 80075b0:	4604      	mov	r4, r0
 80075b2:	4608      	mov	r0, r1
 80075b4:	4611      	mov	r1, r2
 80075b6:	2200      	movs	r2, #0
 80075b8:	602a      	str	r2, [r5, #0]
 80075ba:	461a      	mov	r2, r3
 80075bc:	f7f9 fc34 	bl	8000e28 <_read>
 80075c0:	1c43      	adds	r3, r0, #1
 80075c2:	d102      	bne.n	80075ca <_read_r+0x1e>
 80075c4:	682b      	ldr	r3, [r5, #0]
 80075c6:	b103      	cbz	r3, 80075ca <_read_r+0x1e>
 80075c8:	6023      	str	r3, [r4, #0]
 80075ca:	bd38      	pop	{r3, r4, r5, pc}
 80075cc:	20005df0 	.word	0x20005df0

080075d0 <_write_r>:
 80075d0:	b538      	push	{r3, r4, r5, lr}
 80075d2:	4d07      	ldr	r5, [pc, #28]	@ (80075f0 <_write_r+0x20>)
 80075d4:	4604      	mov	r4, r0
 80075d6:	4608      	mov	r0, r1
 80075d8:	4611      	mov	r1, r2
 80075da:	2200      	movs	r2, #0
 80075dc:	602a      	str	r2, [r5, #0]
 80075de:	461a      	mov	r2, r3
 80075e0:	f7f9 fc3f 	bl	8000e62 <_write>
 80075e4:	1c43      	adds	r3, r0, #1
 80075e6:	d102      	bne.n	80075ee <_write_r+0x1e>
 80075e8:	682b      	ldr	r3, [r5, #0]
 80075ea:	b103      	cbz	r3, 80075ee <_write_r+0x1e>
 80075ec:	6023      	str	r3, [r4, #0]
 80075ee:	bd38      	pop	{r3, r4, r5, pc}
 80075f0:	20005df0 	.word	0x20005df0

080075f4 <__errno>:
 80075f4:	4b01      	ldr	r3, [pc, #4]	@ (80075fc <__errno+0x8>)
 80075f6:	6818      	ldr	r0, [r3, #0]
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	2000001c 	.word	0x2000001c

08007600 <__libc_init_array>:
 8007600:	b570      	push	{r4, r5, r6, lr}
 8007602:	4d0d      	ldr	r5, [pc, #52]	@ (8007638 <__libc_init_array+0x38>)
 8007604:	4c0d      	ldr	r4, [pc, #52]	@ (800763c <__libc_init_array+0x3c>)
 8007606:	1b64      	subs	r4, r4, r5
 8007608:	10a4      	asrs	r4, r4, #2
 800760a:	2600      	movs	r6, #0
 800760c:	42a6      	cmp	r6, r4
 800760e:	d109      	bne.n	8007624 <__libc_init_array+0x24>
 8007610:	4d0b      	ldr	r5, [pc, #44]	@ (8007640 <__libc_init_array+0x40>)
 8007612:	4c0c      	ldr	r4, [pc, #48]	@ (8007644 <__libc_init_array+0x44>)
 8007614:	f000 fd58 	bl	80080c8 <_init>
 8007618:	1b64      	subs	r4, r4, r5
 800761a:	10a4      	asrs	r4, r4, #2
 800761c:	2600      	movs	r6, #0
 800761e:	42a6      	cmp	r6, r4
 8007620:	d105      	bne.n	800762e <__libc_init_array+0x2e>
 8007622:	bd70      	pop	{r4, r5, r6, pc}
 8007624:	f855 3b04 	ldr.w	r3, [r5], #4
 8007628:	4798      	blx	r3
 800762a:	3601      	adds	r6, #1
 800762c:	e7ee      	b.n	800760c <__libc_init_array+0xc>
 800762e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007632:	4798      	blx	r3
 8007634:	3601      	adds	r6, #1
 8007636:	e7f2      	b.n	800761e <__libc_init_array+0x1e>
 8007638:	080086bc 	.word	0x080086bc
 800763c:	080086bc 	.word	0x080086bc
 8007640:	080086bc 	.word	0x080086bc
 8007644:	080086c0 	.word	0x080086c0

08007648 <__retarget_lock_init_recursive>:
 8007648:	4770      	bx	lr

0800764a <__retarget_lock_acquire_recursive>:
 800764a:	4770      	bx	lr

0800764c <__retarget_lock_release_recursive>:
 800764c:	4770      	bx	lr
	...

08007650 <_free_r>:
 8007650:	b538      	push	{r3, r4, r5, lr}
 8007652:	4605      	mov	r5, r0
 8007654:	2900      	cmp	r1, #0
 8007656:	d041      	beq.n	80076dc <_free_r+0x8c>
 8007658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800765c:	1f0c      	subs	r4, r1, #4
 800765e:	2b00      	cmp	r3, #0
 8007660:	bfb8      	it	lt
 8007662:	18e4      	addlt	r4, r4, r3
 8007664:	f000 f8e0 	bl	8007828 <__malloc_lock>
 8007668:	4a1d      	ldr	r2, [pc, #116]	@ (80076e0 <_free_r+0x90>)
 800766a:	6813      	ldr	r3, [r2, #0]
 800766c:	b933      	cbnz	r3, 800767c <_free_r+0x2c>
 800766e:	6063      	str	r3, [r4, #4]
 8007670:	6014      	str	r4, [r2, #0]
 8007672:	4628      	mov	r0, r5
 8007674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007678:	f000 b8dc 	b.w	8007834 <__malloc_unlock>
 800767c:	42a3      	cmp	r3, r4
 800767e:	d908      	bls.n	8007692 <_free_r+0x42>
 8007680:	6820      	ldr	r0, [r4, #0]
 8007682:	1821      	adds	r1, r4, r0
 8007684:	428b      	cmp	r3, r1
 8007686:	bf01      	itttt	eq
 8007688:	6819      	ldreq	r1, [r3, #0]
 800768a:	685b      	ldreq	r3, [r3, #4]
 800768c:	1809      	addeq	r1, r1, r0
 800768e:	6021      	streq	r1, [r4, #0]
 8007690:	e7ed      	b.n	800766e <_free_r+0x1e>
 8007692:	461a      	mov	r2, r3
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	b10b      	cbz	r3, 800769c <_free_r+0x4c>
 8007698:	42a3      	cmp	r3, r4
 800769a:	d9fa      	bls.n	8007692 <_free_r+0x42>
 800769c:	6811      	ldr	r1, [r2, #0]
 800769e:	1850      	adds	r0, r2, r1
 80076a0:	42a0      	cmp	r0, r4
 80076a2:	d10b      	bne.n	80076bc <_free_r+0x6c>
 80076a4:	6820      	ldr	r0, [r4, #0]
 80076a6:	4401      	add	r1, r0
 80076a8:	1850      	adds	r0, r2, r1
 80076aa:	4283      	cmp	r3, r0
 80076ac:	6011      	str	r1, [r2, #0]
 80076ae:	d1e0      	bne.n	8007672 <_free_r+0x22>
 80076b0:	6818      	ldr	r0, [r3, #0]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	6053      	str	r3, [r2, #4]
 80076b6:	4408      	add	r0, r1
 80076b8:	6010      	str	r0, [r2, #0]
 80076ba:	e7da      	b.n	8007672 <_free_r+0x22>
 80076bc:	d902      	bls.n	80076c4 <_free_r+0x74>
 80076be:	230c      	movs	r3, #12
 80076c0:	602b      	str	r3, [r5, #0]
 80076c2:	e7d6      	b.n	8007672 <_free_r+0x22>
 80076c4:	6820      	ldr	r0, [r4, #0]
 80076c6:	1821      	adds	r1, r4, r0
 80076c8:	428b      	cmp	r3, r1
 80076ca:	bf04      	itt	eq
 80076cc:	6819      	ldreq	r1, [r3, #0]
 80076ce:	685b      	ldreq	r3, [r3, #4]
 80076d0:	6063      	str	r3, [r4, #4]
 80076d2:	bf04      	itt	eq
 80076d4:	1809      	addeq	r1, r1, r0
 80076d6:	6021      	streq	r1, [r4, #0]
 80076d8:	6054      	str	r4, [r2, #4]
 80076da:	e7ca      	b.n	8007672 <_free_r+0x22>
 80076dc:	bd38      	pop	{r3, r4, r5, pc}
 80076de:	bf00      	nop
 80076e0:	20005dfc 	.word	0x20005dfc

080076e4 <sbrk_aligned>:
 80076e4:	b570      	push	{r4, r5, r6, lr}
 80076e6:	4e0f      	ldr	r6, [pc, #60]	@ (8007724 <sbrk_aligned+0x40>)
 80076e8:	460c      	mov	r4, r1
 80076ea:	6831      	ldr	r1, [r6, #0]
 80076ec:	4605      	mov	r5, r0
 80076ee:	b911      	cbnz	r1, 80076f6 <sbrk_aligned+0x12>
 80076f0:	f000 fcda 	bl	80080a8 <_sbrk_r>
 80076f4:	6030      	str	r0, [r6, #0]
 80076f6:	4621      	mov	r1, r4
 80076f8:	4628      	mov	r0, r5
 80076fa:	f000 fcd5 	bl	80080a8 <_sbrk_r>
 80076fe:	1c43      	adds	r3, r0, #1
 8007700:	d103      	bne.n	800770a <sbrk_aligned+0x26>
 8007702:	f04f 34ff 	mov.w	r4, #4294967295
 8007706:	4620      	mov	r0, r4
 8007708:	bd70      	pop	{r4, r5, r6, pc}
 800770a:	1cc4      	adds	r4, r0, #3
 800770c:	f024 0403 	bic.w	r4, r4, #3
 8007710:	42a0      	cmp	r0, r4
 8007712:	d0f8      	beq.n	8007706 <sbrk_aligned+0x22>
 8007714:	1a21      	subs	r1, r4, r0
 8007716:	4628      	mov	r0, r5
 8007718:	f000 fcc6 	bl	80080a8 <_sbrk_r>
 800771c:	3001      	adds	r0, #1
 800771e:	d1f2      	bne.n	8007706 <sbrk_aligned+0x22>
 8007720:	e7ef      	b.n	8007702 <sbrk_aligned+0x1e>
 8007722:	bf00      	nop
 8007724:	20005df8 	.word	0x20005df8

08007728 <_malloc_r>:
 8007728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800772c:	1ccd      	adds	r5, r1, #3
 800772e:	f025 0503 	bic.w	r5, r5, #3
 8007732:	3508      	adds	r5, #8
 8007734:	2d0c      	cmp	r5, #12
 8007736:	bf38      	it	cc
 8007738:	250c      	movcc	r5, #12
 800773a:	2d00      	cmp	r5, #0
 800773c:	4606      	mov	r6, r0
 800773e:	db01      	blt.n	8007744 <_malloc_r+0x1c>
 8007740:	42a9      	cmp	r1, r5
 8007742:	d904      	bls.n	800774e <_malloc_r+0x26>
 8007744:	230c      	movs	r3, #12
 8007746:	6033      	str	r3, [r6, #0]
 8007748:	2000      	movs	r0, #0
 800774a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800774e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007824 <_malloc_r+0xfc>
 8007752:	f000 f869 	bl	8007828 <__malloc_lock>
 8007756:	f8d8 3000 	ldr.w	r3, [r8]
 800775a:	461c      	mov	r4, r3
 800775c:	bb44      	cbnz	r4, 80077b0 <_malloc_r+0x88>
 800775e:	4629      	mov	r1, r5
 8007760:	4630      	mov	r0, r6
 8007762:	f7ff ffbf 	bl	80076e4 <sbrk_aligned>
 8007766:	1c43      	adds	r3, r0, #1
 8007768:	4604      	mov	r4, r0
 800776a:	d158      	bne.n	800781e <_malloc_r+0xf6>
 800776c:	f8d8 4000 	ldr.w	r4, [r8]
 8007770:	4627      	mov	r7, r4
 8007772:	2f00      	cmp	r7, #0
 8007774:	d143      	bne.n	80077fe <_malloc_r+0xd6>
 8007776:	2c00      	cmp	r4, #0
 8007778:	d04b      	beq.n	8007812 <_malloc_r+0xea>
 800777a:	6823      	ldr	r3, [r4, #0]
 800777c:	4639      	mov	r1, r7
 800777e:	4630      	mov	r0, r6
 8007780:	eb04 0903 	add.w	r9, r4, r3
 8007784:	f000 fc90 	bl	80080a8 <_sbrk_r>
 8007788:	4581      	cmp	r9, r0
 800778a:	d142      	bne.n	8007812 <_malloc_r+0xea>
 800778c:	6821      	ldr	r1, [r4, #0]
 800778e:	1a6d      	subs	r5, r5, r1
 8007790:	4629      	mov	r1, r5
 8007792:	4630      	mov	r0, r6
 8007794:	f7ff ffa6 	bl	80076e4 <sbrk_aligned>
 8007798:	3001      	adds	r0, #1
 800779a:	d03a      	beq.n	8007812 <_malloc_r+0xea>
 800779c:	6823      	ldr	r3, [r4, #0]
 800779e:	442b      	add	r3, r5
 80077a0:	6023      	str	r3, [r4, #0]
 80077a2:	f8d8 3000 	ldr.w	r3, [r8]
 80077a6:	685a      	ldr	r2, [r3, #4]
 80077a8:	bb62      	cbnz	r2, 8007804 <_malloc_r+0xdc>
 80077aa:	f8c8 7000 	str.w	r7, [r8]
 80077ae:	e00f      	b.n	80077d0 <_malloc_r+0xa8>
 80077b0:	6822      	ldr	r2, [r4, #0]
 80077b2:	1b52      	subs	r2, r2, r5
 80077b4:	d420      	bmi.n	80077f8 <_malloc_r+0xd0>
 80077b6:	2a0b      	cmp	r2, #11
 80077b8:	d917      	bls.n	80077ea <_malloc_r+0xc2>
 80077ba:	1961      	adds	r1, r4, r5
 80077bc:	42a3      	cmp	r3, r4
 80077be:	6025      	str	r5, [r4, #0]
 80077c0:	bf18      	it	ne
 80077c2:	6059      	strne	r1, [r3, #4]
 80077c4:	6863      	ldr	r3, [r4, #4]
 80077c6:	bf08      	it	eq
 80077c8:	f8c8 1000 	streq.w	r1, [r8]
 80077cc:	5162      	str	r2, [r4, r5]
 80077ce:	604b      	str	r3, [r1, #4]
 80077d0:	4630      	mov	r0, r6
 80077d2:	f000 f82f 	bl	8007834 <__malloc_unlock>
 80077d6:	f104 000b 	add.w	r0, r4, #11
 80077da:	1d23      	adds	r3, r4, #4
 80077dc:	f020 0007 	bic.w	r0, r0, #7
 80077e0:	1ac2      	subs	r2, r0, r3
 80077e2:	bf1c      	itt	ne
 80077e4:	1a1b      	subne	r3, r3, r0
 80077e6:	50a3      	strne	r3, [r4, r2]
 80077e8:	e7af      	b.n	800774a <_malloc_r+0x22>
 80077ea:	6862      	ldr	r2, [r4, #4]
 80077ec:	42a3      	cmp	r3, r4
 80077ee:	bf0c      	ite	eq
 80077f0:	f8c8 2000 	streq.w	r2, [r8]
 80077f4:	605a      	strne	r2, [r3, #4]
 80077f6:	e7eb      	b.n	80077d0 <_malloc_r+0xa8>
 80077f8:	4623      	mov	r3, r4
 80077fa:	6864      	ldr	r4, [r4, #4]
 80077fc:	e7ae      	b.n	800775c <_malloc_r+0x34>
 80077fe:	463c      	mov	r4, r7
 8007800:	687f      	ldr	r7, [r7, #4]
 8007802:	e7b6      	b.n	8007772 <_malloc_r+0x4a>
 8007804:	461a      	mov	r2, r3
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	42a3      	cmp	r3, r4
 800780a:	d1fb      	bne.n	8007804 <_malloc_r+0xdc>
 800780c:	2300      	movs	r3, #0
 800780e:	6053      	str	r3, [r2, #4]
 8007810:	e7de      	b.n	80077d0 <_malloc_r+0xa8>
 8007812:	230c      	movs	r3, #12
 8007814:	6033      	str	r3, [r6, #0]
 8007816:	4630      	mov	r0, r6
 8007818:	f000 f80c 	bl	8007834 <__malloc_unlock>
 800781c:	e794      	b.n	8007748 <_malloc_r+0x20>
 800781e:	6005      	str	r5, [r0, #0]
 8007820:	e7d6      	b.n	80077d0 <_malloc_r+0xa8>
 8007822:	bf00      	nop
 8007824:	20005dfc 	.word	0x20005dfc

08007828 <__malloc_lock>:
 8007828:	4801      	ldr	r0, [pc, #4]	@ (8007830 <__malloc_lock+0x8>)
 800782a:	f7ff bf0e 	b.w	800764a <__retarget_lock_acquire_recursive>
 800782e:	bf00      	nop
 8007830:	20005df4 	.word	0x20005df4

08007834 <__malloc_unlock>:
 8007834:	4801      	ldr	r0, [pc, #4]	@ (800783c <__malloc_unlock+0x8>)
 8007836:	f7ff bf09 	b.w	800764c <__retarget_lock_release_recursive>
 800783a:	bf00      	nop
 800783c:	20005df4 	.word	0x20005df4

08007840 <__sfputc_r>:
 8007840:	6893      	ldr	r3, [r2, #8]
 8007842:	3b01      	subs	r3, #1
 8007844:	2b00      	cmp	r3, #0
 8007846:	b410      	push	{r4}
 8007848:	6093      	str	r3, [r2, #8]
 800784a:	da08      	bge.n	800785e <__sfputc_r+0x1e>
 800784c:	6994      	ldr	r4, [r2, #24]
 800784e:	42a3      	cmp	r3, r4
 8007850:	db01      	blt.n	8007856 <__sfputc_r+0x16>
 8007852:	290a      	cmp	r1, #10
 8007854:	d103      	bne.n	800785e <__sfputc_r+0x1e>
 8007856:	f85d 4b04 	ldr.w	r4, [sp], #4
 800785a:	f7ff bde8 	b.w	800742e <__swbuf_r>
 800785e:	6813      	ldr	r3, [r2, #0]
 8007860:	1c58      	adds	r0, r3, #1
 8007862:	6010      	str	r0, [r2, #0]
 8007864:	7019      	strb	r1, [r3, #0]
 8007866:	4608      	mov	r0, r1
 8007868:	f85d 4b04 	ldr.w	r4, [sp], #4
 800786c:	4770      	bx	lr

0800786e <__sfputs_r>:
 800786e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007870:	4606      	mov	r6, r0
 8007872:	460f      	mov	r7, r1
 8007874:	4614      	mov	r4, r2
 8007876:	18d5      	adds	r5, r2, r3
 8007878:	42ac      	cmp	r4, r5
 800787a:	d101      	bne.n	8007880 <__sfputs_r+0x12>
 800787c:	2000      	movs	r0, #0
 800787e:	e007      	b.n	8007890 <__sfputs_r+0x22>
 8007880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007884:	463a      	mov	r2, r7
 8007886:	4630      	mov	r0, r6
 8007888:	f7ff ffda 	bl	8007840 <__sfputc_r>
 800788c:	1c43      	adds	r3, r0, #1
 800788e:	d1f3      	bne.n	8007878 <__sfputs_r+0xa>
 8007890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007894 <_vfiprintf_r>:
 8007894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007898:	460d      	mov	r5, r1
 800789a:	b09d      	sub	sp, #116	@ 0x74
 800789c:	4614      	mov	r4, r2
 800789e:	4698      	mov	r8, r3
 80078a0:	4606      	mov	r6, r0
 80078a2:	b118      	cbz	r0, 80078ac <_vfiprintf_r+0x18>
 80078a4:	6a03      	ldr	r3, [r0, #32]
 80078a6:	b90b      	cbnz	r3, 80078ac <_vfiprintf_r+0x18>
 80078a8:	f7ff fcd0 	bl	800724c <__sinit>
 80078ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078ae:	07d9      	lsls	r1, r3, #31
 80078b0:	d405      	bmi.n	80078be <_vfiprintf_r+0x2a>
 80078b2:	89ab      	ldrh	r3, [r5, #12]
 80078b4:	059a      	lsls	r2, r3, #22
 80078b6:	d402      	bmi.n	80078be <_vfiprintf_r+0x2a>
 80078b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078ba:	f7ff fec6 	bl	800764a <__retarget_lock_acquire_recursive>
 80078be:	89ab      	ldrh	r3, [r5, #12]
 80078c0:	071b      	lsls	r3, r3, #28
 80078c2:	d501      	bpl.n	80078c8 <_vfiprintf_r+0x34>
 80078c4:	692b      	ldr	r3, [r5, #16]
 80078c6:	b99b      	cbnz	r3, 80078f0 <_vfiprintf_r+0x5c>
 80078c8:	4629      	mov	r1, r5
 80078ca:	4630      	mov	r0, r6
 80078cc:	f7ff fdee 	bl	80074ac <__swsetup_r>
 80078d0:	b170      	cbz	r0, 80078f0 <_vfiprintf_r+0x5c>
 80078d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078d4:	07dc      	lsls	r4, r3, #31
 80078d6:	d504      	bpl.n	80078e2 <_vfiprintf_r+0x4e>
 80078d8:	f04f 30ff 	mov.w	r0, #4294967295
 80078dc:	b01d      	add	sp, #116	@ 0x74
 80078de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078e2:	89ab      	ldrh	r3, [r5, #12]
 80078e4:	0598      	lsls	r0, r3, #22
 80078e6:	d4f7      	bmi.n	80078d8 <_vfiprintf_r+0x44>
 80078e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078ea:	f7ff feaf 	bl	800764c <__retarget_lock_release_recursive>
 80078ee:	e7f3      	b.n	80078d8 <_vfiprintf_r+0x44>
 80078f0:	2300      	movs	r3, #0
 80078f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80078f4:	2320      	movs	r3, #32
 80078f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80078fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80078fe:	2330      	movs	r3, #48	@ 0x30
 8007900:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007ab0 <_vfiprintf_r+0x21c>
 8007904:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007908:	f04f 0901 	mov.w	r9, #1
 800790c:	4623      	mov	r3, r4
 800790e:	469a      	mov	sl, r3
 8007910:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007914:	b10a      	cbz	r2, 800791a <_vfiprintf_r+0x86>
 8007916:	2a25      	cmp	r2, #37	@ 0x25
 8007918:	d1f9      	bne.n	800790e <_vfiprintf_r+0x7a>
 800791a:	ebba 0b04 	subs.w	fp, sl, r4
 800791e:	d00b      	beq.n	8007938 <_vfiprintf_r+0xa4>
 8007920:	465b      	mov	r3, fp
 8007922:	4622      	mov	r2, r4
 8007924:	4629      	mov	r1, r5
 8007926:	4630      	mov	r0, r6
 8007928:	f7ff ffa1 	bl	800786e <__sfputs_r>
 800792c:	3001      	adds	r0, #1
 800792e:	f000 80a7 	beq.w	8007a80 <_vfiprintf_r+0x1ec>
 8007932:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007934:	445a      	add	r2, fp
 8007936:	9209      	str	r2, [sp, #36]	@ 0x24
 8007938:	f89a 3000 	ldrb.w	r3, [sl]
 800793c:	2b00      	cmp	r3, #0
 800793e:	f000 809f 	beq.w	8007a80 <_vfiprintf_r+0x1ec>
 8007942:	2300      	movs	r3, #0
 8007944:	f04f 32ff 	mov.w	r2, #4294967295
 8007948:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800794c:	f10a 0a01 	add.w	sl, sl, #1
 8007950:	9304      	str	r3, [sp, #16]
 8007952:	9307      	str	r3, [sp, #28]
 8007954:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007958:	931a      	str	r3, [sp, #104]	@ 0x68
 800795a:	4654      	mov	r4, sl
 800795c:	2205      	movs	r2, #5
 800795e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007962:	4853      	ldr	r0, [pc, #332]	@ (8007ab0 <_vfiprintf_r+0x21c>)
 8007964:	f7f8 fc5c 	bl	8000220 <memchr>
 8007968:	9a04      	ldr	r2, [sp, #16]
 800796a:	b9d8      	cbnz	r0, 80079a4 <_vfiprintf_r+0x110>
 800796c:	06d1      	lsls	r1, r2, #27
 800796e:	bf44      	itt	mi
 8007970:	2320      	movmi	r3, #32
 8007972:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007976:	0713      	lsls	r3, r2, #28
 8007978:	bf44      	itt	mi
 800797a:	232b      	movmi	r3, #43	@ 0x2b
 800797c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007980:	f89a 3000 	ldrb.w	r3, [sl]
 8007984:	2b2a      	cmp	r3, #42	@ 0x2a
 8007986:	d015      	beq.n	80079b4 <_vfiprintf_r+0x120>
 8007988:	9a07      	ldr	r2, [sp, #28]
 800798a:	4654      	mov	r4, sl
 800798c:	2000      	movs	r0, #0
 800798e:	f04f 0c0a 	mov.w	ip, #10
 8007992:	4621      	mov	r1, r4
 8007994:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007998:	3b30      	subs	r3, #48	@ 0x30
 800799a:	2b09      	cmp	r3, #9
 800799c:	d94b      	bls.n	8007a36 <_vfiprintf_r+0x1a2>
 800799e:	b1b0      	cbz	r0, 80079ce <_vfiprintf_r+0x13a>
 80079a0:	9207      	str	r2, [sp, #28]
 80079a2:	e014      	b.n	80079ce <_vfiprintf_r+0x13a>
 80079a4:	eba0 0308 	sub.w	r3, r0, r8
 80079a8:	fa09 f303 	lsl.w	r3, r9, r3
 80079ac:	4313      	orrs	r3, r2
 80079ae:	9304      	str	r3, [sp, #16]
 80079b0:	46a2      	mov	sl, r4
 80079b2:	e7d2      	b.n	800795a <_vfiprintf_r+0xc6>
 80079b4:	9b03      	ldr	r3, [sp, #12]
 80079b6:	1d19      	adds	r1, r3, #4
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	9103      	str	r1, [sp, #12]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	bfbb      	ittet	lt
 80079c0:	425b      	neglt	r3, r3
 80079c2:	f042 0202 	orrlt.w	r2, r2, #2
 80079c6:	9307      	strge	r3, [sp, #28]
 80079c8:	9307      	strlt	r3, [sp, #28]
 80079ca:	bfb8      	it	lt
 80079cc:	9204      	strlt	r2, [sp, #16]
 80079ce:	7823      	ldrb	r3, [r4, #0]
 80079d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80079d2:	d10a      	bne.n	80079ea <_vfiprintf_r+0x156>
 80079d4:	7863      	ldrb	r3, [r4, #1]
 80079d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80079d8:	d132      	bne.n	8007a40 <_vfiprintf_r+0x1ac>
 80079da:	9b03      	ldr	r3, [sp, #12]
 80079dc:	1d1a      	adds	r2, r3, #4
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	9203      	str	r2, [sp, #12]
 80079e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80079e6:	3402      	adds	r4, #2
 80079e8:	9305      	str	r3, [sp, #20]
 80079ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007ac0 <_vfiprintf_r+0x22c>
 80079ee:	7821      	ldrb	r1, [r4, #0]
 80079f0:	2203      	movs	r2, #3
 80079f2:	4650      	mov	r0, sl
 80079f4:	f7f8 fc14 	bl	8000220 <memchr>
 80079f8:	b138      	cbz	r0, 8007a0a <_vfiprintf_r+0x176>
 80079fa:	9b04      	ldr	r3, [sp, #16]
 80079fc:	eba0 000a 	sub.w	r0, r0, sl
 8007a00:	2240      	movs	r2, #64	@ 0x40
 8007a02:	4082      	lsls	r2, r0
 8007a04:	4313      	orrs	r3, r2
 8007a06:	3401      	adds	r4, #1
 8007a08:	9304      	str	r3, [sp, #16]
 8007a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a0e:	4829      	ldr	r0, [pc, #164]	@ (8007ab4 <_vfiprintf_r+0x220>)
 8007a10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007a14:	2206      	movs	r2, #6
 8007a16:	f7f8 fc03 	bl	8000220 <memchr>
 8007a1a:	2800      	cmp	r0, #0
 8007a1c:	d03f      	beq.n	8007a9e <_vfiprintf_r+0x20a>
 8007a1e:	4b26      	ldr	r3, [pc, #152]	@ (8007ab8 <_vfiprintf_r+0x224>)
 8007a20:	bb1b      	cbnz	r3, 8007a6a <_vfiprintf_r+0x1d6>
 8007a22:	9b03      	ldr	r3, [sp, #12]
 8007a24:	3307      	adds	r3, #7
 8007a26:	f023 0307 	bic.w	r3, r3, #7
 8007a2a:	3308      	adds	r3, #8
 8007a2c:	9303      	str	r3, [sp, #12]
 8007a2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a30:	443b      	add	r3, r7
 8007a32:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a34:	e76a      	b.n	800790c <_vfiprintf_r+0x78>
 8007a36:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a3a:	460c      	mov	r4, r1
 8007a3c:	2001      	movs	r0, #1
 8007a3e:	e7a8      	b.n	8007992 <_vfiprintf_r+0xfe>
 8007a40:	2300      	movs	r3, #0
 8007a42:	3401      	adds	r4, #1
 8007a44:	9305      	str	r3, [sp, #20]
 8007a46:	4619      	mov	r1, r3
 8007a48:	f04f 0c0a 	mov.w	ip, #10
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a52:	3a30      	subs	r2, #48	@ 0x30
 8007a54:	2a09      	cmp	r2, #9
 8007a56:	d903      	bls.n	8007a60 <_vfiprintf_r+0x1cc>
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d0c6      	beq.n	80079ea <_vfiprintf_r+0x156>
 8007a5c:	9105      	str	r1, [sp, #20]
 8007a5e:	e7c4      	b.n	80079ea <_vfiprintf_r+0x156>
 8007a60:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a64:	4604      	mov	r4, r0
 8007a66:	2301      	movs	r3, #1
 8007a68:	e7f0      	b.n	8007a4c <_vfiprintf_r+0x1b8>
 8007a6a:	ab03      	add	r3, sp, #12
 8007a6c:	9300      	str	r3, [sp, #0]
 8007a6e:	462a      	mov	r2, r5
 8007a70:	4b12      	ldr	r3, [pc, #72]	@ (8007abc <_vfiprintf_r+0x228>)
 8007a72:	a904      	add	r1, sp, #16
 8007a74:	4630      	mov	r0, r6
 8007a76:	f3af 8000 	nop.w
 8007a7a:	4607      	mov	r7, r0
 8007a7c:	1c78      	adds	r0, r7, #1
 8007a7e:	d1d6      	bne.n	8007a2e <_vfiprintf_r+0x19a>
 8007a80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a82:	07d9      	lsls	r1, r3, #31
 8007a84:	d405      	bmi.n	8007a92 <_vfiprintf_r+0x1fe>
 8007a86:	89ab      	ldrh	r3, [r5, #12]
 8007a88:	059a      	lsls	r2, r3, #22
 8007a8a:	d402      	bmi.n	8007a92 <_vfiprintf_r+0x1fe>
 8007a8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a8e:	f7ff fddd 	bl	800764c <__retarget_lock_release_recursive>
 8007a92:	89ab      	ldrh	r3, [r5, #12]
 8007a94:	065b      	lsls	r3, r3, #25
 8007a96:	f53f af1f 	bmi.w	80078d8 <_vfiprintf_r+0x44>
 8007a9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a9c:	e71e      	b.n	80078dc <_vfiprintf_r+0x48>
 8007a9e:	ab03      	add	r3, sp, #12
 8007aa0:	9300      	str	r3, [sp, #0]
 8007aa2:	462a      	mov	r2, r5
 8007aa4:	4b05      	ldr	r3, [pc, #20]	@ (8007abc <_vfiprintf_r+0x228>)
 8007aa6:	a904      	add	r1, sp, #16
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	f000 f879 	bl	8007ba0 <_printf_i>
 8007aae:	e7e4      	b.n	8007a7a <_vfiprintf_r+0x1e6>
 8007ab0:	08008680 	.word	0x08008680
 8007ab4:	0800868a 	.word	0x0800868a
 8007ab8:	00000000 	.word	0x00000000
 8007abc:	0800786f 	.word	0x0800786f
 8007ac0:	08008686 	.word	0x08008686

08007ac4 <_printf_common>:
 8007ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ac8:	4616      	mov	r6, r2
 8007aca:	4698      	mov	r8, r3
 8007acc:	688a      	ldr	r2, [r1, #8]
 8007ace:	690b      	ldr	r3, [r1, #16]
 8007ad0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	bfb8      	it	lt
 8007ad8:	4613      	movlt	r3, r2
 8007ada:	6033      	str	r3, [r6, #0]
 8007adc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007ae0:	4607      	mov	r7, r0
 8007ae2:	460c      	mov	r4, r1
 8007ae4:	b10a      	cbz	r2, 8007aea <_printf_common+0x26>
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	6033      	str	r3, [r6, #0]
 8007aea:	6823      	ldr	r3, [r4, #0]
 8007aec:	0699      	lsls	r1, r3, #26
 8007aee:	bf42      	ittt	mi
 8007af0:	6833      	ldrmi	r3, [r6, #0]
 8007af2:	3302      	addmi	r3, #2
 8007af4:	6033      	strmi	r3, [r6, #0]
 8007af6:	6825      	ldr	r5, [r4, #0]
 8007af8:	f015 0506 	ands.w	r5, r5, #6
 8007afc:	d106      	bne.n	8007b0c <_printf_common+0x48>
 8007afe:	f104 0a19 	add.w	sl, r4, #25
 8007b02:	68e3      	ldr	r3, [r4, #12]
 8007b04:	6832      	ldr	r2, [r6, #0]
 8007b06:	1a9b      	subs	r3, r3, r2
 8007b08:	42ab      	cmp	r3, r5
 8007b0a:	dc26      	bgt.n	8007b5a <_printf_common+0x96>
 8007b0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007b10:	6822      	ldr	r2, [r4, #0]
 8007b12:	3b00      	subs	r3, #0
 8007b14:	bf18      	it	ne
 8007b16:	2301      	movne	r3, #1
 8007b18:	0692      	lsls	r2, r2, #26
 8007b1a:	d42b      	bmi.n	8007b74 <_printf_common+0xb0>
 8007b1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007b20:	4641      	mov	r1, r8
 8007b22:	4638      	mov	r0, r7
 8007b24:	47c8      	blx	r9
 8007b26:	3001      	adds	r0, #1
 8007b28:	d01e      	beq.n	8007b68 <_printf_common+0xa4>
 8007b2a:	6823      	ldr	r3, [r4, #0]
 8007b2c:	6922      	ldr	r2, [r4, #16]
 8007b2e:	f003 0306 	and.w	r3, r3, #6
 8007b32:	2b04      	cmp	r3, #4
 8007b34:	bf02      	ittt	eq
 8007b36:	68e5      	ldreq	r5, [r4, #12]
 8007b38:	6833      	ldreq	r3, [r6, #0]
 8007b3a:	1aed      	subeq	r5, r5, r3
 8007b3c:	68a3      	ldr	r3, [r4, #8]
 8007b3e:	bf0c      	ite	eq
 8007b40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b44:	2500      	movne	r5, #0
 8007b46:	4293      	cmp	r3, r2
 8007b48:	bfc4      	itt	gt
 8007b4a:	1a9b      	subgt	r3, r3, r2
 8007b4c:	18ed      	addgt	r5, r5, r3
 8007b4e:	2600      	movs	r6, #0
 8007b50:	341a      	adds	r4, #26
 8007b52:	42b5      	cmp	r5, r6
 8007b54:	d11a      	bne.n	8007b8c <_printf_common+0xc8>
 8007b56:	2000      	movs	r0, #0
 8007b58:	e008      	b.n	8007b6c <_printf_common+0xa8>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	4652      	mov	r2, sl
 8007b5e:	4641      	mov	r1, r8
 8007b60:	4638      	mov	r0, r7
 8007b62:	47c8      	blx	r9
 8007b64:	3001      	adds	r0, #1
 8007b66:	d103      	bne.n	8007b70 <_printf_common+0xac>
 8007b68:	f04f 30ff 	mov.w	r0, #4294967295
 8007b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b70:	3501      	adds	r5, #1
 8007b72:	e7c6      	b.n	8007b02 <_printf_common+0x3e>
 8007b74:	18e1      	adds	r1, r4, r3
 8007b76:	1c5a      	adds	r2, r3, #1
 8007b78:	2030      	movs	r0, #48	@ 0x30
 8007b7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007b7e:	4422      	add	r2, r4
 8007b80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007b84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007b88:	3302      	adds	r3, #2
 8007b8a:	e7c7      	b.n	8007b1c <_printf_common+0x58>
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	4622      	mov	r2, r4
 8007b90:	4641      	mov	r1, r8
 8007b92:	4638      	mov	r0, r7
 8007b94:	47c8      	blx	r9
 8007b96:	3001      	adds	r0, #1
 8007b98:	d0e6      	beq.n	8007b68 <_printf_common+0xa4>
 8007b9a:	3601      	adds	r6, #1
 8007b9c:	e7d9      	b.n	8007b52 <_printf_common+0x8e>
	...

08007ba0 <_printf_i>:
 8007ba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ba4:	7e0f      	ldrb	r7, [r1, #24]
 8007ba6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007ba8:	2f78      	cmp	r7, #120	@ 0x78
 8007baa:	4691      	mov	r9, r2
 8007bac:	4680      	mov	r8, r0
 8007bae:	460c      	mov	r4, r1
 8007bb0:	469a      	mov	sl, r3
 8007bb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007bb6:	d807      	bhi.n	8007bc8 <_printf_i+0x28>
 8007bb8:	2f62      	cmp	r7, #98	@ 0x62
 8007bba:	d80a      	bhi.n	8007bd2 <_printf_i+0x32>
 8007bbc:	2f00      	cmp	r7, #0
 8007bbe:	f000 80d2 	beq.w	8007d66 <_printf_i+0x1c6>
 8007bc2:	2f58      	cmp	r7, #88	@ 0x58
 8007bc4:	f000 80b9 	beq.w	8007d3a <_printf_i+0x19a>
 8007bc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007bcc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007bd0:	e03a      	b.n	8007c48 <_printf_i+0xa8>
 8007bd2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007bd6:	2b15      	cmp	r3, #21
 8007bd8:	d8f6      	bhi.n	8007bc8 <_printf_i+0x28>
 8007bda:	a101      	add	r1, pc, #4	@ (adr r1, 8007be0 <_printf_i+0x40>)
 8007bdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007be0:	08007c39 	.word	0x08007c39
 8007be4:	08007c4d 	.word	0x08007c4d
 8007be8:	08007bc9 	.word	0x08007bc9
 8007bec:	08007bc9 	.word	0x08007bc9
 8007bf0:	08007bc9 	.word	0x08007bc9
 8007bf4:	08007bc9 	.word	0x08007bc9
 8007bf8:	08007c4d 	.word	0x08007c4d
 8007bfc:	08007bc9 	.word	0x08007bc9
 8007c00:	08007bc9 	.word	0x08007bc9
 8007c04:	08007bc9 	.word	0x08007bc9
 8007c08:	08007bc9 	.word	0x08007bc9
 8007c0c:	08007d4d 	.word	0x08007d4d
 8007c10:	08007c77 	.word	0x08007c77
 8007c14:	08007d07 	.word	0x08007d07
 8007c18:	08007bc9 	.word	0x08007bc9
 8007c1c:	08007bc9 	.word	0x08007bc9
 8007c20:	08007d6f 	.word	0x08007d6f
 8007c24:	08007bc9 	.word	0x08007bc9
 8007c28:	08007c77 	.word	0x08007c77
 8007c2c:	08007bc9 	.word	0x08007bc9
 8007c30:	08007bc9 	.word	0x08007bc9
 8007c34:	08007d0f 	.word	0x08007d0f
 8007c38:	6833      	ldr	r3, [r6, #0]
 8007c3a:	1d1a      	adds	r2, r3, #4
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	6032      	str	r2, [r6, #0]
 8007c40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e09d      	b.n	8007d88 <_printf_i+0x1e8>
 8007c4c:	6833      	ldr	r3, [r6, #0]
 8007c4e:	6820      	ldr	r0, [r4, #0]
 8007c50:	1d19      	adds	r1, r3, #4
 8007c52:	6031      	str	r1, [r6, #0]
 8007c54:	0606      	lsls	r6, r0, #24
 8007c56:	d501      	bpl.n	8007c5c <_printf_i+0xbc>
 8007c58:	681d      	ldr	r5, [r3, #0]
 8007c5a:	e003      	b.n	8007c64 <_printf_i+0xc4>
 8007c5c:	0645      	lsls	r5, r0, #25
 8007c5e:	d5fb      	bpl.n	8007c58 <_printf_i+0xb8>
 8007c60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007c64:	2d00      	cmp	r5, #0
 8007c66:	da03      	bge.n	8007c70 <_printf_i+0xd0>
 8007c68:	232d      	movs	r3, #45	@ 0x2d
 8007c6a:	426d      	negs	r5, r5
 8007c6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c70:	4859      	ldr	r0, [pc, #356]	@ (8007dd8 <_printf_i+0x238>)
 8007c72:	230a      	movs	r3, #10
 8007c74:	e011      	b.n	8007c9a <_printf_i+0xfa>
 8007c76:	6821      	ldr	r1, [r4, #0]
 8007c78:	6833      	ldr	r3, [r6, #0]
 8007c7a:	0608      	lsls	r0, r1, #24
 8007c7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007c80:	d402      	bmi.n	8007c88 <_printf_i+0xe8>
 8007c82:	0649      	lsls	r1, r1, #25
 8007c84:	bf48      	it	mi
 8007c86:	b2ad      	uxthmi	r5, r5
 8007c88:	2f6f      	cmp	r7, #111	@ 0x6f
 8007c8a:	4853      	ldr	r0, [pc, #332]	@ (8007dd8 <_printf_i+0x238>)
 8007c8c:	6033      	str	r3, [r6, #0]
 8007c8e:	bf14      	ite	ne
 8007c90:	230a      	movne	r3, #10
 8007c92:	2308      	moveq	r3, #8
 8007c94:	2100      	movs	r1, #0
 8007c96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007c9a:	6866      	ldr	r6, [r4, #4]
 8007c9c:	60a6      	str	r6, [r4, #8]
 8007c9e:	2e00      	cmp	r6, #0
 8007ca0:	bfa2      	ittt	ge
 8007ca2:	6821      	ldrge	r1, [r4, #0]
 8007ca4:	f021 0104 	bicge.w	r1, r1, #4
 8007ca8:	6021      	strge	r1, [r4, #0]
 8007caa:	b90d      	cbnz	r5, 8007cb0 <_printf_i+0x110>
 8007cac:	2e00      	cmp	r6, #0
 8007cae:	d04b      	beq.n	8007d48 <_printf_i+0x1a8>
 8007cb0:	4616      	mov	r6, r2
 8007cb2:	fbb5 f1f3 	udiv	r1, r5, r3
 8007cb6:	fb03 5711 	mls	r7, r3, r1, r5
 8007cba:	5dc7      	ldrb	r7, [r0, r7]
 8007cbc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007cc0:	462f      	mov	r7, r5
 8007cc2:	42bb      	cmp	r3, r7
 8007cc4:	460d      	mov	r5, r1
 8007cc6:	d9f4      	bls.n	8007cb2 <_printf_i+0x112>
 8007cc8:	2b08      	cmp	r3, #8
 8007cca:	d10b      	bne.n	8007ce4 <_printf_i+0x144>
 8007ccc:	6823      	ldr	r3, [r4, #0]
 8007cce:	07df      	lsls	r7, r3, #31
 8007cd0:	d508      	bpl.n	8007ce4 <_printf_i+0x144>
 8007cd2:	6923      	ldr	r3, [r4, #16]
 8007cd4:	6861      	ldr	r1, [r4, #4]
 8007cd6:	4299      	cmp	r1, r3
 8007cd8:	bfde      	ittt	le
 8007cda:	2330      	movle	r3, #48	@ 0x30
 8007cdc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ce0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ce4:	1b92      	subs	r2, r2, r6
 8007ce6:	6122      	str	r2, [r4, #16]
 8007ce8:	f8cd a000 	str.w	sl, [sp]
 8007cec:	464b      	mov	r3, r9
 8007cee:	aa03      	add	r2, sp, #12
 8007cf0:	4621      	mov	r1, r4
 8007cf2:	4640      	mov	r0, r8
 8007cf4:	f7ff fee6 	bl	8007ac4 <_printf_common>
 8007cf8:	3001      	adds	r0, #1
 8007cfa:	d14a      	bne.n	8007d92 <_printf_i+0x1f2>
 8007cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8007d00:	b004      	add	sp, #16
 8007d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d06:	6823      	ldr	r3, [r4, #0]
 8007d08:	f043 0320 	orr.w	r3, r3, #32
 8007d0c:	6023      	str	r3, [r4, #0]
 8007d0e:	4833      	ldr	r0, [pc, #204]	@ (8007ddc <_printf_i+0x23c>)
 8007d10:	2778      	movs	r7, #120	@ 0x78
 8007d12:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007d16:	6823      	ldr	r3, [r4, #0]
 8007d18:	6831      	ldr	r1, [r6, #0]
 8007d1a:	061f      	lsls	r7, r3, #24
 8007d1c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007d20:	d402      	bmi.n	8007d28 <_printf_i+0x188>
 8007d22:	065f      	lsls	r7, r3, #25
 8007d24:	bf48      	it	mi
 8007d26:	b2ad      	uxthmi	r5, r5
 8007d28:	6031      	str	r1, [r6, #0]
 8007d2a:	07d9      	lsls	r1, r3, #31
 8007d2c:	bf44      	itt	mi
 8007d2e:	f043 0320 	orrmi.w	r3, r3, #32
 8007d32:	6023      	strmi	r3, [r4, #0]
 8007d34:	b11d      	cbz	r5, 8007d3e <_printf_i+0x19e>
 8007d36:	2310      	movs	r3, #16
 8007d38:	e7ac      	b.n	8007c94 <_printf_i+0xf4>
 8007d3a:	4827      	ldr	r0, [pc, #156]	@ (8007dd8 <_printf_i+0x238>)
 8007d3c:	e7e9      	b.n	8007d12 <_printf_i+0x172>
 8007d3e:	6823      	ldr	r3, [r4, #0]
 8007d40:	f023 0320 	bic.w	r3, r3, #32
 8007d44:	6023      	str	r3, [r4, #0]
 8007d46:	e7f6      	b.n	8007d36 <_printf_i+0x196>
 8007d48:	4616      	mov	r6, r2
 8007d4a:	e7bd      	b.n	8007cc8 <_printf_i+0x128>
 8007d4c:	6833      	ldr	r3, [r6, #0]
 8007d4e:	6825      	ldr	r5, [r4, #0]
 8007d50:	6961      	ldr	r1, [r4, #20]
 8007d52:	1d18      	adds	r0, r3, #4
 8007d54:	6030      	str	r0, [r6, #0]
 8007d56:	062e      	lsls	r6, r5, #24
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	d501      	bpl.n	8007d60 <_printf_i+0x1c0>
 8007d5c:	6019      	str	r1, [r3, #0]
 8007d5e:	e002      	b.n	8007d66 <_printf_i+0x1c6>
 8007d60:	0668      	lsls	r0, r5, #25
 8007d62:	d5fb      	bpl.n	8007d5c <_printf_i+0x1bc>
 8007d64:	8019      	strh	r1, [r3, #0]
 8007d66:	2300      	movs	r3, #0
 8007d68:	6123      	str	r3, [r4, #16]
 8007d6a:	4616      	mov	r6, r2
 8007d6c:	e7bc      	b.n	8007ce8 <_printf_i+0x148>
 8007d6e:	6833      	ldr	r3, [r6, #0]
 8007d70:	1d1a      	adds	r2, r3, #4
 8007d72:	6032      	str	r2, [r6, #0]
 8007d74:	681e      	ldr	r6, [r3, #0]
 8007d76:	6862      	ldr	r2, [r4, #4]
 8007d78:	2100      	movs	r1, #0
 8007d7a:	4630      	mov	r0, r6
 8007d7c:	f7f8 fa50 	bl	8000220 <memchr>
 8007d80:	b108      	cbz	r0, 8007d86 <_printf_i+0x1e6>
 8007d82:	1b80      	subs	r0, r0, r6
 8007d84:	6060      	str	r0, [r4, #4]
 8007d86:	6863      	ldr	r3, [r4, #4]
 8007d88:	6123      	str	r3, [r4, #16]
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d90:	e7aa      	b.n	8007ce8 <_printf_i+0x148>
 8007d92:	6923      	ldr	r3, [r4, #16]
 8007d94:	4632      	mov	r2, r6
 8007d96:	4649      	mov	r1, r9
 8007d98:	4640      	mov	r0, r8
 8007d9a:	47d0      	blx	sl
 8007d9c:	3001      	adds	r0, #1
 8007d9e:	d0ad      	beq.n	8007cfc <_printf_i+0x15c>
 8007da0:	6823      	ldr	r3, [r4, #0]
 8007da2:	079b      	lsls	r3, r3, #30
 8007da4:	d413      	bmi.n	8007dce <_printf_i+0x22e>
 8007da6:	68e0      	ldr	r0, [r4, #12]
 8007da8:	9b03      	ldr	r3, [sp, #12]
 8007daa:	4298      	cmp	r0, r3
 8007dac:	bfb8      	it	lt
 8007dae:	4618      	movlt	r0, r3
 8007db0:	e7a6      	b.n	8007d00 <_printf_i+0x160>
 8007db2:	2301      	movs	r3, #1
 8007db4:	4632      	mov	r2, r6
 8007db6:	4649      	mov	r1, r9
 8007db8:	4640      	mov	r0, r8
 8007dba:	47d0      	blx	sl
 8007dbc:	3001      	adds	r0, #1
 8007dbe:	d09d      	beq.n	8007cfc <_printf_i+0x15c>
 8007dc0:	3501      	adds	r5, #1
 8007dc2:	68e3      	ldr	r3, [r4, #12]
 8007dc4:	9903      	ldr	r1, [sp, #12]
 8007dc6:	1a5b      	subs	r3, r3, r1
 8007dc8:	42ab      	cmp	r3, r5
 8007dca:	dcf2      	bgt.n	8007db2 <_printf_i+0x212>
 8007dcc:	e7eb      	b.n	8007da6 <_printf_i+0x206>
 8007dce:	2500      	movs	r5, #0
 8007dd0:	f104 0619 	add.w	r6, r4, #25
 8007dd4:	e7f5      	b.n	8007dc2 <_printf_i+0x222>
 8007dd6:	bf00      	nop
 8007dd8:	08008691 	.word	0x08008691
 8007ddc:	080086a2 	.word	0x080086a2

08007de0 <__sflush_r>:
 8007de0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007de8:	0716      	lsls	r6, r2, #28
 8007dea:	4605      	mov	r5, r0
 8007dec:	460c      	mov	r4, r1
 8007dee:	d454      	bmi.n	8007e9a <__sflush_r+0xba>
 8007df0:	684b      	ldr	r3, [r1, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	dc02      	bgt.n	8007dfc <__sflush_r+0x1c>
 8007df6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	dd48      	ble.n	8007e8e <__sflush_r+0xae>
 8007dfc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007dfe:	2e00      	cmp	r6, #0
 8007e00:	d045      	beq.n	8007e8e <__sflush_r+0xae>
 8007e02:	2300      	movs	r3, #0
 8007e04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007e08:	682f      	ldr	r7, [r5, #0]
 8007e0a:	6a21      	ldr	r1, [r4, #32]
 8007e0c:	602b      	str	r3, [r5, #0]
 8007e0e:	d030      	beq.n	8007e72 <__sflush_r+0x92>
 8007e10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007e12:	89a3      	ldrh	r3, [r4, #12]
 8007e14:	0759      	lsls	r1, r3, #29
 8007e16:	d505      	bpl.n	8007e24 <__sflush_r+0x44>
 8007e18:	6863      	ldr	r3, [r4, #4]
 8007e1a:	1ad2      	subs	r2, r2, r3
 8007e1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007e1e:	b10b      	cbz	r3, 8007e24 <__sflush_r+0x44>
 8007e20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007e22:	1ad2      	subs	r2, r2, r3
 8007e24:	2300      	movs	r3, #0
 8007e26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e28:	6a21      	ldr	r1, [r4, #32]
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	47b0      	blx	r6
 8007e2e:	1c43      	adds	r3, r0, #1
 8007e30:	89a3      	ldrh	r3, [r4, #12]
 8007e32:	d106      	bne.n	8007e42 <__sflush_r+0x62>
 8007e34:	6829      	ldr	r1, [r5, #0]
 8007e36:	291d      	cmp	r1, #29
 8007e38:	d82b      	bhi.n	8007e92 <__sflush_r+0xb2>
 8007e3a:	4a2a      	ldr	r2, [pc, #168]	@ (8007ee4 <__sflush_r+0x104>)
 8007e3c:	410a      	asrs	r2, r1
 8007e3e:	07d6      	lsls	r6, r2, #31
 8007e40:	d427      	bmi.n	8007e92 <__sflush_r+0xb2>
 8007e42:	2200      	movs	r2, #0
 8007e44:	6062      	str	r2, [r4, #4]
 8007e46:	04d9      	lsls	r1, r3, #19
 8007e48:	6922      	ldr	r2, [r4, #16]
 8007e4a:	6022      	str	r2, [r4, #0]
 8007e4c:	d504      	bpl.n	8007e58 <__sflush_r+0x78>
 8007e4e:	1c42      	adds	r2, r0, #1
 8007e50:	d101      	bne.n	8007e56 <__sflush_r+0x76>
 8007e52:	682b      	ldr	r3, [r5, #0]
 8007e54:	b903      	cbnz	r3, 8007e58 <__sflush_r+0x78>
 8007e56:	6560      	str	r0, [r4, #84]	@ 0x54
 8007e58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e5a:	602f      	str	r7, [r5, #0]
 8007e5c:	b1b9      	cbz	r1, 8007e8e <__sflush_r+0xae>
 8007e5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e62:	4299      	cmp	r1, r3
 8007e64:	d002      	beq.n	8007e6c <__sflush_r+0x8c>
 8007e66:	4628      	mov	r0, r5
 8007e68:	f7ff fbf2 	bl	8007650 <_free_r>
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e70:	e00d      	b.n	8007e8e <__sflush_r+0xae>
 8007e72:	2301      	movs	r3, #1
 8007e74:	4628      	mov	r0, r5
 8007e76:	47b0      	blx	r6
 8007e78:	4602      	mov	r2, r0
 8007e7a:	1c50      	adds	r0, r2, #1
 8007e7c:	d1c9      	bne.n	8007e12 <__sflush_r+0x32>
 8007e7e:	682b      	ldr	r3, [r5, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d0c6      	beq.n	8007e12 <__sflush_r+0x32>
 8007e84:	2b1d      	cmp	r3, #29
 8007e86:	d001      	beq.n	8007e8c <__sflush_r+0xac>
 8007e88:	2b16      	cmp	r3, #22
 8007e8a:	d11e      	bne.n	8007eca <__sflush_r+0xea>
 8007e8c:	602f      	str	r7, [r5, #0]
 8007e8e:	2000      	movs	r0, #0
 8007e90:	e022      	b.n	8007ed8 <__sflush_r+0xf8>
 8007e92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e96:	b21b      	sxth	r3, r3
 8007e98:	e01b      	b.n	8007ed2 <__sflush_r+0xf2>
 8007e9a:	690f      	ldr	r7, [r1, #16]
 8007e9c:	2f00      	cmp	r7, #0
 8007e9e:	d0f6      	beq.n	8007e8e <__sflush_r+0xae>
 8007ea0:	0793      	lsls	r3, r2, #30
 8007ea2:	680e      	ldr	r6, [r1, #0]
 8007ea4:	bf08      	it	eq
 8007ea6:	694b      	ldreq	r3, [r1, #20]
 8007ea8:	600f      	str	r7, [r1, #0]
 8007eaa:	bf18      	it	ne
 8007eac:	2300      	movne	r3, #0
 8007eae:	eba6 0807 	sub.w	r8, r6, r7
 8007eb2:	608b      	str	r3, [r1, #8]
 8007eb4:	f1b8 0f00 	cmp.w	r8, #0
 8007eb8:	dde9      	ble.n	8007e8e <__sflush_r+0xae>
 8007eba:	6a21      	ldr	r1, [r4, #32]
 8007ebc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007ebe:	4643      	mov	r3, r8
 8007ec0:	463a      	mov	r2, r7
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	47b0      	blx	r6
 8007ec6:	2800      	cmp	r0, #0
 8007ec8:	dc08      	bgt.n	8007edc <__sflush_r+0xfc>
 8007eca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ece:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ed2:	81a3      	strh	r3, [r4, #12]
 8007ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007edc:	4407      	add	r7, r0
 8007ede:	eba8 0800 	sub.w	r8, r8, r0
 8007ee2:	e7e7      	b.n	8007eb4 <__sflush_r+0xd4>
 8007ee4:	dfbffffe 	.word	0xdfbffffe

08007ee8 <_fflush_r>:
 8007ee8:	b538      	push	{r3, r4, r5, lr}
 8007eea:	690b      	ldr	r3, [r1, #16]
 8007eec:	4605      	mov	r5, r0
 8007eee:	460c      	mov	r4, r1
 8007ef0:	b913      	cbnz	r3, 8007ef8 <_fflush_r+0x10>
 8007ef2:	2500      	movs	r5, #0
 8007ef4:	4628      	mov	r0, r5
 8007ef6:	bd38      	pop	{r3, r4, r5, pc}
 8007ef8:	b118      	cbz	r0, 8007f02 <_fflush_r+0x1a>
 8007efa:	6a03      	ldr	r3, [r0, #32]
 8007efc:	b90b      	cbnz	r3, 8007f02 <_fflush_r+0x1a>
 8007efe:	f7ff f9a5 	bl	800724c <__sinit>
 8007f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d0f3      	beq.n	8007ef2 <_fflush_r+0xa>
 8007f0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007f0c:	07d0      	lsls	r0, r2, #31
 8007f0e:	d404      	bmi.n	8007f1a <_fflush_r+0x32>
 8007f10:	0599      	lsls	r1, r3, #22
 8007f12:	d402      	bmi.n	8007f1a <_fflush_r+0x32>
 8007f14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f16:	f7ff fb98 	bl	800764a <__retarget_lock_acquire_recursive>
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	4621      	mov	r1, r4
 8007f1e:	f7ff ff5f 	bl	8007de0 <__sflush_r>
 8007f22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f24:	07da      	lsls	r2, r3, #31
 8007f26:	4605      	mov	r5, r0
 8007f28:	d4e4      	bmi.n	8007ef4 <_fflush_r+0xc>
 8007f2a:	89a3      	ldrh	r3, [r4, #12]
 8007f2c:	059b      	lsls	r3, r3, #22
 8007f2e:	d4e1      	bmi.n	8007ef4 <_fflush_r+0xc>
 8007f30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f32:	f7ff fb8b 	bl	800764c <__retarget_lock_release_recursive>
 8007f36:	e7dd      	b.n	8007ef4 <_fflush_r+0xc>

08007f38 <__swhatbuf_r>:
 8007f38:	b570      	push	{r4, r5, r6, lr}
 8007f3a:	460c      	mov	r4, r1
 8007f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f40:	2900      	cmp	r1, #0
 8007f42:	b096      	sub	sp, #88	@ 0x58
 8007f44:	4615      	mov	r5, r2
 8007f46:	461e      	mov	r6, r3
 8007f48:	da0d      	bge.n	8007f66 <__swhatbuf_r+0x2e>
 8007f4a:	89a3      	ldrh	r3, [r4, #12]
 8007f4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007f50:	f04f 0100 	mov.w	r1, #0
 8007f54:	bf14      	ite	ne
 8007f56:	2340      	movne	r3, #64	@ 0x40
 8007f58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007f5c:	2000      	movs	r0, #0
 8007f5e:	6031      	str	r1, [r6, #0]
 8007f60:	602b      	str	r3, [r5, #0]
 8007f62:	b016      	add	sp, #88	@ 0x58
 8007f64:	bd70      	pop	{r4, r5, r6, pc}
 8007f66:	466a      	mov	r2, sp
 8007f68:	f000 f87c 	bl	8008064 <_fstat_r>
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	dbec      	blt.n	8007f4a <__swhatbuf_r+0x12>
 8007f70:	9901      	ldr	r1, [sp, #4]
 8007f72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007f76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007f7a:	4259      	negs	r1, r3
 8007f7c:	4159      	adcs	r1, r3
 8007f7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007f82:	e7eb      	b.n	8007f5c <__swhatbuf_r+0x24>

08007f84 <__smakebuf_r>:
 8007f84:	898b      	ldrh	r3, [r1, #12]
 8007f86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f88:	079d      	lsls	r5, r3, #30
 8007f8a:	4606      	mov	r6, r0
 8007f8c:	460c      	mov	r4, r1
 8007f8e:	d507      	bpl.n	8007fa0 <__smakebuf_r+0x1c>
 8007f90:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007f94:	6023      	str	r3, [r4, #0]
 8007f96:	6123      	str	r3, [r4, #16]
 8007f98:	2301      	movs	r3, #1
 8007f9a:	6163      	str	r3, [r4, #20]
 8007f9c:	b003      	add	sp, #12
 8007f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fa0:	ab01      	add	r3, sp, #4
 8007fa2:	466a      	mov	r2, sp
 8007fa4:	f7ff ffc8 	bl	8007f38 <__swhatbuf_r>
 8007fa8:	9f00      	ldr	r7, [sp, #0]
 8007faa:	4605      	mov	r5, r0
 8007fac:	4639      	mov	r1, r7
 8007fae:	4630      	mov	r0, r6
 8007fb0:	f7ff fbba 	bl	8007728 <_malloc_r>
 8007fb4:	b948      	cbnz	r0, 8007fca <__smakebuf_r+0x46>
 8007fb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fba:	059a      	lsls	r2, r3, #22
 8007fbc:	d4ee      	bmi.n	8007f9c <__smakebuf_r+0x18>
 8007fbe:	f023 0303 	bic.w	r3, r3, #3
 8007fc2:	f043 0302 	orr.w	r3, r3, #2
 8007fc6:	81a3      	strh	r3, [r4, #12]
 8007fc8:	e7e2      	b.n	8007f90 <__smakebuf_r+0xc>
 8007fca:	89a3      	ldrh	r3, [r4, #12]
 8007fcc:	6020      	str	r0, [r4, #0]
 8007fce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fd2:	81a3      	strh	r3, [r4, #12]
 8007fd4:	9b01      	ldr	r3, [sp, #4]
 8007fd6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007fda:	b15b      	cbz	r3, 8007ff4 <__smakebuf_r+0x70>
 8007fdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fe0:	4630      	mov	r0, r6
 8007fe2:	f000 f851 	bl	8008088 <_isatty_r>
 8007fe6:	b128      	cbz	r0, 8007ff4 <__smakebuf_r+0x70>
 8007fe8:	89a3      	ldrh	r3, [r4, #12]
 8007fea:	f023 0303 	bic.w	r3, r3, #3
 8007fee:	f043 0301 	orr.w	r3, r3, #1
 8007ff2:	81a3      	strh	r3, [r4, #12]
 8007ff4:	89a3      	ldrh	r3, [r4, #12]
 8007ff6:	431d      	orrs	r5, r3
 8007ff8:	81a5      	strh	r5, [r4, #12]
 8007ffa:	e7cf      	b.n	8007f9c <__smakebuf_r+0x18>

08007ffc <_putc_r>:
 8007ffc:	b570      	push	{r4, r5, r6, lr}
 8007ffe:	460d      	mov	r5, r1
 8008000:	4614      	mov	r4, r2
 8008002:	4606      	mov	r6, r0
 8008004:	b118      	cbz	r0, 800800e <_putc_r+0x12>
 8008006:	6a03      	ldr	r3, [r0, #32]
 8008008:	b90b      	cbnz	r3, 800800e <_putc_r+0x12>
 800800a:	f7ff f91f 	bl	800724c <__sinit>
 800800e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008010:	07d8      	lsls	r0, r3, #31
 8008012:	d405      	bmi.n	8008020 <_putc_r+0x24>
 8008014:	89a3      	ldrh	r3, [r4, #12]
 8008016:	0599      	lsls	r1, r3, #22
 8008018:	d402      	bmi.n	8008020 <_putc_r+0x24>
 800801a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800801c:	f7ff fb15 	bl	800764a <__retarget_lock_acquire_recursive>
 8008020:	68a3      	ldr	r3, [r4, #8]
 8008022:	3b01      	subs	r3, #1
 8008024:	2b00      	cmp	r3, #0
 8008026:	60a3      	str	r3, [r4, #8]
 8008028:	da05      	bge.n	8008036 <_putc_r+0x3a>
 800802a:	69a2      	ldr	r2, [r4, #24]
 800802c:	4293      	cmp	r3, r2
 800802e:	db12      	blt.n	8008056 <_putc_r+0x5a>
 8008030:	b2eb      	uxtb	r3, r5
 8008032:	2b0a      	cmp	r3, #10
 8008034:	d00f      	beq.n	8008056 <_putc_r+0x5a>
 8008036:	6823      	ldr	r3, [r4, #0]
 8008038:	1c5a      	adds	r2, r3, #1
 800803a:	6022      	str	r2, [r4, #0]
 800803c:	701d      	strb	r5, [r3, #0]
 800803e:	b2ed      	uxtb	r5, r5
 8008040:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008042:	07da      	lsls	r2, r3, #31
 8008044:	d405      	bmi.n	8008052 <_putc_r+0x56>
 8008046:	89a3      	ldrh	r3, [r4, #12]
 8008048:	059b      	lsls	r3, r3, #22
 800804a:	d402      	bmi.n	8008052 <_putc_r+0x56>
 800804c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800804e:	f7ff fafd 	bl	800764c <__retarget_lock_release_recursive>
 8008052:	4628      	mov	r0, r5
 8008054:	bd70      	pop	{r4, r5, r6, pc}
 8008056:	4629      	mov	r1, r5
 8008058:	4622      	mov	r2, r4
 800805a:	4630      	mov	r0, r6
 800805c:	f7ff f9e7 	bl	800742e <__swbuf_r>
 8008060:	4605      	mov	r5, r0
 8008062:	e7ed      	b.n	8008040 <_putc_r+0x44>

08008064 <_fstat_r>:
 8008064:	b538      	push	{r3, r4, r5, lr}
 8008066:	4d07      	ldr	r5, [pc, #28]	@ (8008084 <_fstat_r+0x20>)
 8008068:	2300      	movs	r3, #0
 800806a:	4604      	mov	r4, r0
 800806c:	4608      	mov	r0, r1
 800806e:	4611      	mov	r1, r2
 8008070:	602b      	str	r3, [r5, #0]
 8008072:	f7f8 ff1e 	bl	8000eb2 <_fstat>
 8008076:	1c43      	adds	r3, r0, #1
 8008078:	d102      	bne.n	8008080 <_fstat_r+0x1c>
 800807a:	682b      	ldr	r3, [r5, #0]
 800807c:	b103      	cbz	r3, 8008080 <_fstat_r+0x1c>
 800807e:	6023      	str	r3, [r4, #0]
 8008080:	bd38      	pop	{r3, r4, r5, pc}
 8008082:	bf00      	nop
 8008084:	20005df0 	.word	0x20005df0

08008088 <_isatty_r>:
 8008088:	b538      	push	{r3, r4, r5, lr}
 800808a:	4d06      	ldr	r5, [pc, #24]	@ (80080a4 <_isatty_r+0x1c>)
 800808c:	2300      	movs	r3, #0
 800808e:	4604      	mov	r4, r0
 8008090:	4608      	mov	r0, r1
 8008092:	602b      	str	r3, [r5, #0]
 8008094:	f7f8 ff1d 	bl	8000ed2 <_isatty>
 8008098:	1c43      	adds	r3, r0, #1
 800809a:	d102      	bne.n	80080a2 <_isatty_r+0x1a>
 800809c:	682b      	ldr	r3, [r5, #0]
 800809e:	b103      	cbz	r3, 80080a2 <_isatty_r+0x1a>
 80080a0:	6023      	str	r3, [r4, #0]
 80080a2:	bd38      	pop	{r3, r4, r5, pc}
 80080a4:	20005df0 	.word	0x20005df0

080080a8 <_sbrk_r>:
 80080a8:	b538      	push	{r3, r4, r5, lr}
 80080aa:	4d06      	ldr	r5, [pc, #24]	@ (80080c4 <_sbrk_r+0x1c>)
 80080ac:	2300      	movs	r3, #0
 80080ae:	4604      	mov	r4, r0
 80080b0:	4608      	mov	r0, r1
 80080b2:	602b      	str	r3, [r5, #0]
 80080b4:	f7f8 ff26 	bl	8000f04 <_sbrk>
 80080b8:	1c43      	adds	r3, r0, #1
 80080ba:	d102      	bne.n	80080c2 <_sbrk_r+0x1a>
 80080bc:	682b      	ldr	r3, [r5, #0]
 80080be:	b103      	cbz	r3, 80080c2 <_sbrk_r+0x1a>
 80080c0:	6023      	str	r3, [r4, #0]
 80080c2:	bd38      	pop	{r3, r4, r5, pc}
 80080c4:	20005df0 	.word	0x20005df0

080080c8 <_init>:
 80080c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ca:	bf00      	nop
 80080cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ce:	bc08      	pop	{r3}
 80080d0:	469e      	mov	lr, r3
 80080d2:	4770      	bx	lr

080080d4 <_fini>:
 80080d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080d6:	bf00      	nop
 80080d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080da:	bc08      	pop	{r3}
 80080dc:	469e      	mov	lr, r3
 80080de:	4770      	bx	lr
