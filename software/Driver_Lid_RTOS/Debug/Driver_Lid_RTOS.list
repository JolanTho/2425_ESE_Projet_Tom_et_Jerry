
Driver_Lid_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bcc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  08005dac  08005dac  00006dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006180  08006180  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006180  08006180  00007180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006188  08006188  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006188  08006188  00007188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800618c  0800618c  0000718c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006190  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ff0  2000006c  080061fc  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000105c  080061fc  0000905c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000110e3  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ee6  00000000  00000000  0001917f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  0001c068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bb2  00000000  00000000  0001cfd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fd25  00000000  00000000  0001db82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000130bb  00000000  00000000  0003d8a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0878  00000000  00000000  00050962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001111da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004660  00000000  00000000  00111220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00115880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005d94 	.word	0x08005d94

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	08005d94 	.word	0x08005d94

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005b0:	b5b0      	push	{r4, r5, r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005b6:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <MX_FREERTOS_Init+0x2c>)
 80005b8:	1d3c      	adds	r4, r7, #4
 80005ba:	461d      	mov	r5, r3
 80005bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c0:	682b      	ldr	r3, [r5, #0]
 80005c2:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	2100      	movs	r1, #0
 80005c8:	4618      	mov	r0, r3
 80005ca:	f003 f898 	bl	80036fe <osThreadCreate>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4a03      	ldr	r2, [pc, #12]	@ (80005e0 <MX_FREERTOS_Init+0x30>)
 80005d2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005d4:	bf00      	nop
 80005d6:	3718      	adds	r7, #24
 80005d8:	46bd      	mov	sp, r7
 80005da:	bdb0      	pop	{r4, r5, r7, pc}
 80005dc:	08005db8 	.word	0x08005db8
 80005e0:	20000088 	.word	0x20000088

080005e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005ec:	2001      	movs	r0, #1
 80005ee:	f003 f8ad 	bl	800374c <osDelay>
 80005f2:	e7fb      	b.n	80005ec <StartDefaultTask+0x8>

080005f4 <LIDAR_stop>:
#include "drv_LIDAR.h"
#include <stdio.h>

//Stop and stop scanning
//No answer
int LIDAR_stop(h_LIDAR_t * h_LIDAR){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	uint8_t cmd_buff[CMD_BUFF_SIZE]={CMD_BEGIN,CMD_STOP};
 80005fc:	f246 53a5 	movw	r3, #26021	@ 0x65a5
 8000600:	81bb      	strh	r3, [r7, #12]
	h_LIDAR->serial_drv.transmit(cmd_buff,CMD_BUFF_SIZE);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f107 020c 	add.w	r2, r7, #12
 800060a:	2102      	movs	r1, #2
 800060c:	4610      	mov	r0, r2
 800060e:	4798      	blx	r3
	return 0;
 8000610:	2300      	movs	r3, #0
}
 8000612:	4618      	mov	r0, r3
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <LIDAR_get_info>:

// Récupérer les informations de l'appareil
int LIDAR_get_info(h_LIDAR_t *h_LIDAR) {
 800061c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800061e:	b09d      	sub	sp, #116	@ 0x74
 8000620:	af10      	add	r7, sp, #64	@ 0x40
 8000622:	6278      	str	r0, [r7, #36]	@ 0x24
    uint8_t cmd_buff[CMD_BUFF_SIZE] = {CMD_BEGIN,CMD_INFO};
 8000624:	f249 03a5 	movw	r3, #37029	@ 0x90a5
 8000628:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    // Envoi de la commande pour obtenir les informations
    if (h_LIDAR->serial_drv.transmit(cmd_buff, CMD_BUFF_SIZE) != 0) {
 800062a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8000632:	2102      	movs	r1, #2
 8000634:	4610      	mov	r0, r2
 8000636:	4798      	blx	r3
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d005      	beq.n	800064a <LIDAR_get_info+0x2e>
        printf("Erreur lors de l'envoi de la commande.\r\n");
 800063e:	4885      	ldr	r0, [pc, #532]	@ (8000854 <LIDAR_get_info+0x238>)
 8000640:	f004 fb5a 	bl	8004cf8 <puts>
        return -1;
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	e100      	b.n	800084c <LIDAR_get_info+0x230>
    }

    // Réception des informations dans le buffer
    if (h_LIDAR->serial_drv.poll_receive(h_LIDAR->info_buff, INFO_BUFF_SIZE) != 0) {
 800064a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800064c:	685b      	ldr	r3, [r3, #4]
 800064e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000650:	323c      	adds	r2, #60	@ 0x3c
 8000652:	211b      	movs	r1, #27
 8000654:	4610      	mov	r0, r2
 8000656:	4798      	blx	r3
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d005      	beq.n	800066a <LIDAR_get_info+0x4e>
        printf("Erreur lors de la reception des donnees.\r\n");
 800065e:	487e      	ldr	r0, [pc, #504]	@ (8000858 <LIDAR_get_info+0x23c>)
 8000660:	f004 fb4a 	bl	8004cf8 <puts>
        return -2;
 8000664:	f06f 0301 	mvn.w	r3, #1
 8000668:	e0f0      	b.n	800084c <LIDAR_get_info+0x230>
    }

    // Analyse des données
    h_LIDAR->device_info.start_sign = (h_LIDAR->info_buff[0] << 8) | h_LIDAR->info_buff[1];
 800066a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800066c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000670:	021b      	lsls	r3, r3, #8
 8000672:	b21a      	sxth	r2, r3
 8000674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000676:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800067a:	b21b      	sxth	r3, r3
 800067c:	4313      	orrs	r3, r2
 800067e:	b21b      	sxth	r3, r3
 8000680:	b29a      	uxth	r2, r3
 8000682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000684:	811a      	strh	r2, [r3, #8]
    h_LIDAR->device_info.length = (h_LIDAR->info_buff[2]) |
 8000686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000688:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800068c:	461a      	mov	r2, r3
                                  (h_LIDAR->info_buff[3] << 8) |
 800068e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000690:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8000694:	021b      	lsls	r3, r3, #8
    h_LIDAR->device_info.length = (h_LIDAR->info_buff[2]) |
 8000696:	431a      	orrs	r2, r3
                                  (h_LIDAR->info_buff[4] << 16);
 8000698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800069a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800069e:	041b      	lsls	r3, r3, #16
                                  (h_LIDAR->info_buff[3] << 8) |
 80006a0:	4313      	orrs	r3, r2
 80006a2:	461a      	mov	r2, r3
    h_LIDAR->device_info.length = (h_LIDAR->info_buff[2]) |
 80006a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006a6:	60da      	str	r2, [r3, #12]
    h_LIDAR->device_info.mode = h_LIDAR->info_buff[5] >> 6;
 80006a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80006ae:	099b      	lsrs	r3, r3, #6
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006b4:	741a      	strb	r2, [r3, #16]
    h_LIDAR->device_info.type_code = h_LIDAR->info_buff[6];
 80006b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006b8:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 80006bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006be:	745a      	strb	r2, [r3, #17]

    // Vérification de la validité de la réponse
    if (h_LIDAR->device_info.start_sign != 0xA55A) {
 80006c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006c2:	891b      	ldrh	r3, [r3, #8]
 80006c4:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d008      	beq.n	80006de <LIDAR_get_info+0xc2>
        printf("Signature de début invalide : %04X\r\n", h_LIDAR->device_info.start_sign);
 80006cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006ce:	891b      	ldrh	r3, [r3, #8]
 80006d0:	4619      	mov	r1, r3
 80006d2:	4862      	ldr	r0, [pc, #392]	@ (800085c <LIDAR_get_info+0x240>)
 80006d4:	f004 faa8 	bl	8004c28 <iprintf>
        return -3;
 80006d8:	f06f 0302 	mvn.w	r3, #2
 80006dc:	e0b6      	b.n	800084c <LIDAR_get_info+0x230>
    }

    if (h_LIDAR->device_info.type_code != 0x04) {
 80006de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006e0:	7c5b      	ldrb	r3, [r3, #17]
 80006e2:	2b04      	cmp	r3, #4
 80006e4:	d008      	beq.n	80006f8 <LIDAR_get_info+0xdc>
        printf("Type code invalide : %X\r\n", h_LIDAR->device_info.type_code);
 80006e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006e8:	7c5b      	ldrb	r3, [r3, #17]
 80006ea:	4619      	mov	r1, r3
 80006ec:	485c      	ldr	r0, [pc, #368]	@ (8000860 <LIDAR_get_info+0x244>)
 80006ee:	f004 fa9b 	bl	8004c28 <iprintf>
        return -4;
 80006f2:	f06f 0303 	mvn.w	r3, #3
 80006f6:	e0a9      	b.n	800084c <LIDAR_get_info+0x230>
    }

    // Récupération des autres informations
    h_LIDAR->device_info.model = h_LIDAR->info_buff[7];
 80006f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006fa:	f893 2043 	ldrb.w	r2, [r3, #67]	@ 0x43
 80006fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000700:	749a      	strb	r2, [r3, #18]
    snprintf(h_LIDAR->device_info.firmware, sizeof(h_LIDAR->device_info.firmware),
 8000702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000704:	f103 0013 	add.w	r0, r3, #19
             "%d.%d", h_LIDAR->info_buff[8], h_LIDAR->info_buff[9]);
 8000708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800070a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
    snprintf(h_LIDAR->device_info.firmware, sizeof(h_LIDAR->device_info.firmware),
 800070e:	461a      	mov	r2, r3
             "%d.%d", h_LIDAR->info_buff[8], h_LIDAR->info_buff[9]);
 8000710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000712:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
    snprintf(h_LIDAR->device_info.firmware, sizeof(h_LIDAR->device_info.firmware),
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	4613      	mov	r3, r2
 800071a:	4a52      	ldr	r2, [pc, #328]	@ (8000864 <LIDAR_get_info+0x248>)
 800071c:	2106      	movs	r1, #6
 800071e:	f004 faf3 	bl	8004d08 <sniprintf>
    h_LIDAR->device_info.hardware = h_LIDAR->info_buff[10];
 8000722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000724:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8000728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800072a:	765a      	strb	r2, [r3, #25]
    snprintf(h_LIDAR->device_info.serial, sizeof(h_LIDAR->device_info.serial),
 800072c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800072e:	f103 001a 	add.w	r0, r3, #26
             "%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X",
             h_LIDAR->info_buff[11], h_LIDAR->info_buff[12], h_LIDAR->info_buff[13], h_LIDAR->info_buff[14],
 8000732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000734:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
    snprintf(h_LIDAR->device_info.serial, sizeof(h_LIDAR->device_info.serial),
 8000738:	469c      	mov	ip, r3
             h_LIDAR->info_buff[11], h_LIDAR->info_buff[12], h_LIDAR->info_buff[13], h_LIDAR->info_buff[14],
 800073a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800073c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
    snprintf(h_LIDAR->device_info.serial, sizeof(h_LIDAR->device_info.serial),
 8000740:	461d      	mov	r5, r3
             h_LIDAR->info_buff[11], h_LIDAR->info_buff[12], h_LIDAR->info_buff[13], h_LIDAR->info_buff[14],
 8000742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000744:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
    snprintf(h_LIDAR->device_info.serial, sizeof(h_LIDAR->device_info.serial),
 8000748:	461e      	mov	r6, r3
             h_LIDAR->info_buff[11], h_LIDAR->info_buff[12], h_LIDAR->info_buff[13], h_LIDAR->info_buff[14],
 800074a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800074c:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
    snprintf(h_LIDAR->device_info.serial, sizeof(h_LIDAR->device_info.serial),
 8000750:	623b      	str	r3, [r7, #32]
             h_LIDAR->info_buff[15], h_LIDAR->info_buff[16], h_LIDAR->info_buff[17], h_LIDAR->info_buff[18],
 8000752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000754:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
    snprintf(h_LIDAR->device_info.serial, sizeof(h_LIDAR->device_info.serial),
 8000758:	61fb      	str	r3, [r7, #28]
             h_LIDAR->info_buff[15], h_LIDAR->info_buff[16], h_LIDAR->info_buff[17], h_LIDAR->info_buff[18],
 800075a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800075c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
    snprintf(h_LIDAR->device_info.serial, sizeof(h_LIDAR->device_info.serial),
 8000760:	61bb      	str	r3, [r7, #24]
             h_LIDAR->info_buff[15], h_LIDAR->info_buff[16], h_LIDAR->info_buff[17], h_LIDAR->info_buff[18],
 8000762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000764:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
    snprintf(h_LIDAR->device_info.serial, sizeof(h_LIDAR->device_info.serial),
 8000768:	617b      	str	r3, [r7, #20]
             h_LIDAR->info_buff[15], h_LIDAR->info_buff[16], h_LIDAR->info_buff[17], h_LIDAR->info_buff[18],
 800076a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800076c:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
    snprintf(h_LIDAR->device_info.serial, sizeof(h_LIDAR->device_info.serial),
 8000770:	613b      	str	r3, [r7, #16]
             h_LIDAR->info_buff[19], h_LIDAR->info_buff[20], h_LIDAR->info_buff[21], h_LIDAR->info_buff[22],
 8000772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000774:	f893 304f 	ldrb.w	r3, [r3, #79]	@ 0x4f
    snprintf(h_LIDAR->device_info.serial, sizeof(h_LIDAR->device_info.serial),
 8000778:	60fb      	str	r3, [r7, #12]
             h_LIDAR->info_buff[19], h_LIDAR->info_buff[20], h_LIDAR->info_buff[21], h_LIDAR->info_buff[22],
 800077a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800077c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
    snprintf(h_LIDAR->device_info.serial, sizeof(h_LIDAR->device_info.serial),
 8000780:	60bb      	str	r3, [r7, #8]
             h_LIDAR->info_buff[19], h_LIDAR->info_buff[20], h_LIDAR->info_buff[21], h_LIDAR->info_buff[22],
 8000782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000784:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
    snprintf(h_LIDAR->device_info.serial, sizeof(h_LIDAR->device_info.serial),
 8000788:	607b      	str	r3, [r7, #4]
             h_LIDAR->info_buff[19], h_LIDAR->info_buff[20], h_LIDAR->info_buff[21], h_LIDAR->info_buff[22],
 800078a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800078c:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
    snprintf(h_LIDAR->device_info.serial, sizeof(h_LIDAR->device_info.serial),
 8000790:	603b      	str	r3, [r7, #0]
             h_LIDAR->info_buff[23], h_LIDAR->info_buff[24], h_LIDAR->info_buff[25], h_LIDAR->info_buff[26]);
 8000792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000794:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
    snprintf(h_LIDAR->device_info.serial, sizeof(h_LIDAR->device_info.serial),
 8000798:	461c      	mov	r4, r3
             h_LIDAR->info_buff[23], h_LIDAR->info_buff[24], h_LIDAR->info_buff[25], h_LIDAR->info_buff[26]);
 800079a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800079c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
    snprintf(h_LIDAR->device_info.serial, sizeof(h_LIDAR->device_info.serial),
 80007a0:	4619      	mov	r1, r3
             h_LIDAR->info_buff[23], h_LIDAR->info_buff[24], h_LIDAR->info_buff[25], h_LIDAR->info_buff[26]);
 80007a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007a4:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
    snprintf(h_LIDAR->device_info.serial, sizeof(h_LIDAR->device_info.serial),
 80007a8:	461a      	mov	r2, r3
             h_LIDAR->info_buff[23], h_LIDAR->info_buff[24], h_LIDAR->info_buff[25], h_LIDAR->info_buff[26]);
 80007aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ac:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
    snprintf(h_LIDAR->device_info.serial, sizeof(h_LIDAR->device_info.serial),
 80007b0:	930e      	str	r3, [sp, #56]	@ 0x38
 80007b2:	920d      	str	r2, [sp, #52]	@ 0x34
 80007b4:	910c      	str	r1, [sp, #48]	@ 0x30
 80007b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80007b8:	683a      	ldr	r2, [r7, #0]
 80007ba:	920a      	str	r2, [sp, #40]	@ 0x28
 80007bc:	687a      	ldr	r2, [r7, #4]
 80007be:	9209      	str	r2, [sp, #36]	@ 0x24
 80007c0:	68ba      	ldr	r2, [r7, #8]
 80007c2:	9208      	str	r2, [sp, #32]
 80007c4:	68fa      	ldr	r2, [r7, #12]
 80007c6:	9207      	str	r2, [sp, #28]
 80007c8:	693a      	ldr	r2, [r7, #16]
 80007ca:	9206      	str	r2, [sp, #24]
 80007cc:	697a      	ldr	r2, [r7, #20]
 80007ce:	9205      	str	r2, [sp, #20]
 80007d0:	69ba      	ldr	r2, [r7, #24]
 80007d2:	9204      	str	r2, [sp, #16]
 80007d4:	69fa      	ldr	r2, [r7, #28]
 80007d6:	9203      	str	r2, [sp, #12]
 80007d8:	6a3b      	ldr	r3, [r7, #32]
 80007da:	9302      	str	r3, [sp, #8]
 80007dc:	9601      	str	r6, [sp, #4]
 80007de:	9500      	str	r5, [sp, #0]
 80007e0:	4663      	mov	r3, ip
 80007e2:	4a21      	ldr	r2, [pc, #132]	@ (8000868 <LIDAR_get_info+0x24c>)
 80007e4:	2111      	movs	r1, #17
 80007e6:	f004 fa8f 	bl	8004d08 <sniprintf>

    // Affichage des informations
    printf("Start sign : %04X\r\n", h_LIDAR->device_info.start_sign);  // Affiche en hexadécimal sur 4 chiffres
 80007ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ec:	891b      	ldrh	r3, [r3, #8]
 80007ee:	4619      	mov	r1, r3
 80007f0:	481e      	ldr	r0, [pc, #120]	@ (800086c <LIDAR_get_info+0x250>)
 80007f2:	f004 fa19 	bl	8004c28 <iprintf>
    printf("Length : %lu\r\n", h_LIDAR->device_info.length);           // Longueur (unsigned long)
 80007f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007f8:	68db      	ldr	r3, [r3, #12]
 80007fa:	4619      	mov	r1, r3
 80007fc:	481c      	ldr	r0, [pc, #112]	@ (8000870 <LIDAR_get_info+0x254>)
 80007fe:	f004 fa13 	bl	8004c28 <iprintf>
    printf("Mode : %X\r\n", h_LIDAR->device_info.mode);               // Mode (hexadécimal majuscule)
 8000802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000804:	7c1b      	ldrb	r3, [r3, #16]
 8000806:	4619      	mov	r1, r3
 8000808:	481a      	ldr	r0, [pc, #104]	@ (8000874 <LIDAR_get_info+0x258>)
 800080a:	f004 fa0d 	bl	8004c28 <iprintf>
    printf("Type code : %X\r\n", h_LIDAR->device_info.type_code);     // Code de type (hexadécimal majuscule)
 800080e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000810:	7c5b      	ldrb	r3, [r3, #17]
 8000812:	4619      	mov	r1, r3
 8000814:	4818      	ldr	r0, [pc, #96]	@ (8000878 <LIDAR_get_info+0x25c>)
 8000816:	f004 fa07 	bl	8004c28 <iprintf>
    printf("Model : %X\r\n", h_LIDAR->device_info.model);             // Modèle (hexadécimal majuscule)
 800081a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800081c:	7c9b      	ldrb	r3, [r3, #18]
 800081e:	4619      	mov	r1, r3
 8000820:	4816      	ldr	r0, [pc, #88]	@ (800087c <LIDAR_get_info+0x260>)
 8000822:	f004 fa01 	bl	8004c28 <iprintf>
    printf("Firmware version : %s\r\n", h_LIDAR->device_info.firmware); // Version du firmware (chaîne)
 8000826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000828:	3313      	adds	r3, #19
 800082a:	4619      	mov	r1, r3
 800082c:	4814      	ldr	r0, [pc, #80]	@ (8000880 <LIDAR_get_info+0x264>)
 800082e:	f004 f9fb 	bl	8004c28 <iprintf>
    printf("Hardware version : %u\r\n", h_LIDAR->device_info.hardware); // Version matérielle (unsigned int)
 8000832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000834:	7e5b      	ldrb	r3, [r3, #25]
 8000836:	4619      	mov	r1, r3
 8000838:	4812      	ldr	r0, [pc, #72]	@ (8000884 <LIDAR_get_info+0x268>)
 800083a:	f004 f9f5 	bl	8004c28 <iprintf>
    printf("Serial number : %s\r\n", h_LIDAR->device_info.serial);    // Numéro de série (chaîne)
 800083e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000840:	331a      	adds	r3, #26
 8000842:	4619      	mov	r1, r3
 8000844:	4810      	ldr	r0, [pc, #64]	@ (8000888 <LIDAR_get_info+0x26c>)
 8000846:	f004 f9ef 	bl	8004c28 <iprintf>

    return 0;
 800084a:	2300      	movs	r3, #0
}
 800084c:	4618      	mov	r0, r3
 800084e:	3734      	adds	r7, #52	@ 0x34
 8000850:	46bd      	mov	sp, r7
 8000852:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000854:	08005dcc 	.word	0x08005dcc
 8000858:	08005df4 	.word	0x08005df4
 800085c:	08005e20 	.word	0x08005e20
 8000860:	08005e48 	.word	0x08005e48
 8000864:	08005e64 	.word	0x08005e64
 8000868:	08005e6c 	.word	0x08005e6c
 800086c:	08005eb0 	.word	0x08005eb0
 8000870:	08005ec4 	.word	0x08005ec4
 8000874:	08005ed4 	.word	0x08005ed4
 8000878:	08005ee0 	.word	0x08005ee0
 800087c:	08005ef4 	.word	0x08005ef4
 8000880:	08005f04 	.word	0x08005f04
 8000884:	08005f1c 	.word	0x08005f1c
 8000888:	08005f34 	.word	0x08005f34

0800088c <LIDAR_get_health_stat>:


int LIDAR_get_health_stat(h_LIDAR_t *h_LIDAR) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
    uint8_t cmd_buff[CMD_BUFF_SIZE] = {CMD_BEGIN, CMD_HEALTH};
 8000894:	f249 13a5 	movw	r3, #37285	@ 0x91a5
 8000898:	81bb      	strh	r3, [r7, #12]

    // Envoi de la commande pour obtenir l'état de santé
    if (h_LIDAR->serial_drv.transmit(cmd_buff, CMD_BUFF_SIZE) != 0) {
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f107 020c 	add.w	r2, r7, #12
 80008a2:	2102      	movs	r1, #2
 80008a4:	4610      	mov	r0, r2
 80008a6:	4798      	blx	r3
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d005      	beq.n	80008ba <LIDAR_get_health_stat+0x2e>
        printf("Erreur lors de l'envoi de la commande.\r\n");
 80008ae:	4850      	ldr	r0, [pc, #320]	@ (80009f0 <LIDAR_get_health_stat+0x164>)
 80008b0:	f004 fa22 	bl	8004cf8 <puts>
        return -1;
 80008b4:	f04f 33ff 	mov.w	r3, #4294967295
 80008b8:	e096      	b.n	80009e8 <LIDAR_get_health_stat+0x15c>
    }

    // Réception de l'état de santé
    if (h_LIDAR->serial_drv.poll_receive(h_LIDAR->health_buff, HEALTH_BUFF_SIZE) != 0) {
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	3257      	adds	r2, #87	@ 0x57
 80008c2:	210a      	movs	r1, #10
 80008c4:	4610      	mov	r0, r2
 80008c6:	4798      	blx	r3
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d005      	beq.n	80008da <LIDAR_get_health_stat+0x4e>
        printf("Erreur lors de la réception des données.\r\n");
 80008ce:	4849      	ldr	r0, [pc, #292]	@ (80009f4 <LIDAR_get_health_stat+0x168>)
 80008d0:	f004 fa12 	bl	8004cf8 <puts>
        return -2;
 80008d4:	f06f 0301 	mvn.w	r3, #1
 80008d8:	e086      	b.n	80009e8 <LIDAR_get_health_stat+0x15c>
    }

    // Analyse des données reçues
    h_LIDAR->health_stat.start_sign = (h_LIDAR->health_buff[0] << 8) | h_LIDAR->health_buff[1];
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 80008e0:	021b      	lsls	r3, r3, #8
 80008e2:	b21a      	sxth	r2, r3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80008ea:	b21b      	sxth	r3, r3
 80008ec:	4313      	orrs	r3, r2
 80008ee:	b21b      	sxth	r3, r3
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	859a      	strh	r2, [r3, #44]	@ 0x2c
    h_LIDAR->health_stat.length = (h_LIDAR->health_buff[2]) |
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80008fc:	461a      	mov	r2, r3
                                  (h_LIDAR->health_buff[3] << 8) |
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 8000904:	021b      	lsls	r3, r3, #8
    h_LIDAR->health_stat.length = (h_LIDAR->health_buff[2]) |
 8000906:	431a      	orrs	r2, r3
                                  (h_LIDAR->health_buff[4] << 16);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	f893 305b 	ldrb.w	r3, [r3, #91]	@ 0x5b
 800090e:	041b      	lsls	r3, r3, #16
                                  (h_LIDAR->health_buff[3] << 8) |
 8000910:	4313      	orrs	r3, r2
 8000912:	461a      	mov	r2, r3
    h_LIDAR->health_stat.length = (h_LIDAR->health_buff[2]) |
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	631a      	str	r2, [r3, #48]	@ 0x30
    h_LIDAR->health_stat.mode = h_LIDAR->health_buff[5] >> 6;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800091e:	099b      	lsrs	r3, r3, #6
 8000920:	b2da      	uxtb	r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    h_LIDAR->health_stat.type_code = h_LIDAR->health_buff[6];
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f893 205d 	ldrb.w	r2, [r3, #93]	@ 0x5d
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    h_LIDAR->health_stat.status_code = h_LIDAR->health_buff[7];
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f893 205e 	ldrb.w	r2, [r3, #94]	@ 0x5e
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    h_LIDAR->health_stat.error_code = h_LIDAR->health_buff[8] | (h_LIDAR->health_buff[9] << 8);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 8000946:	b21a      	sxth	r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800094e:	021b      	lsls	r3, r3, #8
 8000950:	b21b      	sxth	r3, r3
 8000952:	4313      	orrs	r3, r2
 8000954:	b21b      	sxth	r3, r3
 8000956:	b29a      	uxth	r2, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	871a      	strh	r2, [r3, #56]	@ 0x38

    // Vérifications des données
    if (h_LIDAR->health_stat.start_sign != 0xA55A) {
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8000960:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 8000964:	4293      	cmp	r3, r2
 8000966:	d008      	beq.n	800097a <LIDAR_get_health_stat+0xee>
        printf("Signature de début invalide : %04X\r\n", h_LIDAR->health_stat.start_sign);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800096c:	4619      	mov	r1, r3
 800096e:	4822      	ldr	r0, [pc, #136]	@ (80009f8 <LIDAR_get_health_stat+0x16c>)
 8000970:	f004 f95a 	bl	8004c28 <iprintf>
        return -3;
 8000974:	f06f 0302 	mvn.w	r3, #2
 8000978:	e036      	b.n	80009e8 <LIDAR_get_health_stat+0x15c>
    }

    if (h_LIDAR->health_stat.type_code != 0x06) {
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000980:	2b06      	cmp	r3, #6
 8000982:	d009      	beq.n	8000998 <LIDAR_get_health_stat+0x10c>
        printf("Type code invalide : %X\r\n", h_LIDAR->health_stat.type_code);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800098a:	4619      	mov	r1, r3
 800098c:	481b      	ldr	r0, [pc, #108]	@ (80009fc <LIDAR_get_health_stat+0x170>)
 800098e:	f004 f94b 	bl	8004c28 <iprintf>
        return -4;
 8000992:	f06f 0303 	mvn.w	r3, #3
 8000996:	e027      	b.n	80009e8 <LIDAR_get_health_stat+0x15c>
    }

    // Affichage de l'état de santé
    printf("Start sign : %04X\r\n", h_LIDAR->health_stat.start_sign);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800099c:	4619      	mov	r1, r3
 800099e:	4818      	ldr	r0, [pc, #96]	@ (8000a00 <LIDAR_get_health_stat+0x174>)
 80009a0:	f004 f942 	bl	8004c28 <iprintf>
    printf("Length : %lu\r\n", h_LIDAR->health_stat.length);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a8:	4619      	mov	r1, r3
 80009aa:	4816      	ldr	r0, [pc, #88]	@ (8000a04 <LIDAR_get_health_stat+0x178>)
 80009ac:	f004 f93c 	bl	8004c28 <iprintf>
    printf("Mode : %X\r\n", h_LIDAR->health_stat.mode);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80009b6:	4619      	mov	r1, r3
 80009b8:	4813      	ldr	r0, [pc, #76]	@ (8000a08 <LIDAR_get_health_stat+0x17c>)
 80009ba:	f004 f935 	bl	8004c28 <iprintf>
    printf("Type code : %X\r\n", h_LIDAR->health_stat.type_code);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80009c4:	4619      	mov	r1, r3
 80009c6:	4811      	ldr	r0, [pc, #68]	@ (8000a0c <LIDAR_get_health_stat+0x180>)
 80009c8:	f004 f92e 	bl	8004c28 <iprintf>
    printf("Status code : %02X\r\n", h_LIDAR->health_stat.status_code);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80009d2:	4619      	mov	r1, r3
 80009d4:	480e      	ldr	r0, [pc, #56]	@ (8000a10 <LIDAR_get_health_stat+0x184>)
 80009d6:	f004 f927 	bl	8004c28 <iprintf>
    printf("Error code : %04X\r\n", h_LIDAR->health_stat.error_code);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80009de:	4619      	mov	r1, r3
 80009e0:	480c      	ldr	r0, [pc, #48]	@ (8000a14 <LIDAR_get_health_stat+0x188>)
 80009e2:	f004 f921 	bl	8004c28 <iprintf>

    return 0;
 80009e6:	2300      	movs	r3, #0
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3710      	adds	r7, #16
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	08005dcc 	.word	0x08005dcc
 80009f4:	08005f4c 	.word	0x08005f4c
 80009f8:	08005e20 	.word	0x08005e20
 80009fc:	08005e48 	.word	0x08005e48
 8000a00:	08005eb0 	.word	0x08005eb0
 8000a04:	08005ec4 	.word	0x08005ec4
 8000a08:	08005ed4 	.word	0x08005ed4
 8000a0c:	08005ee0 	.word	0x08005ee0
 8000a10:	08005f78 	.word	0x08005f78
 8000a14:	08005f90 	.word	0x08005f90

08000a18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	@ 0x28
 8000a1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
 8000a2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	4b2b      	ldr	r3, [pc, #172]	@ (8000adc <MX_GPIO_Init+0xc4>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a32:	4a2a      	ldr	r2, [pc, #168]	@ (8000adc <MX_GPIO_Init+0xc4>)
 8000a34:	f043 0304 	orr.w	r3, r3, #4
 8000a38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a3a:	4b28      	ldr	r3, [pc, #160]	@ (8000adc <MX_GPIO_Init+0xc4>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3e:	f003 0304 	and.w	r3, r3, #4
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a46:	4b25      	ldr	r3, [pc, #148]	@ (8000adc <MX_GPIO_Init+0xc4>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4a:	4a24      	ldr	r2, [pc, #144]	@ (8000adc <MX_GPIO_Init+0xc4>)
 8000a4c:	f043 0320 	orr.w	r3, r3, #32
 8000a50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a52:	4b22      	ldr	r3, [pc, #136]	@ (8000adc <MX_GPIO_Init+0xc4>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a56:	f003 0320 	and.w	r3, r3, #32
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	4b1f      	ldr	r3, [pc, #124]	@ (8000adc <MX_GPIO_Init+0xc4>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a62:	4a1e      	ldr	r2, [pc, #120]	@ (8000adc <MX_GPIO_Init+0xc4>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000adc <MX_GPIO_Init+0xc4>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	4b19      	ldr	r3, [pc, #100]	@ (8000adc <MX_GPIO_Init+0xc4>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7a:	4a18      	ldr	r2, [pc, #96]	@ (8000adc <MX_GPIO_Init+0xc4>)
 8000a7c:	f043 0302 	orr.w	r3, r3, #2
 8000a80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a82:	4b16      	ldr	r3, [pc, #88]	@ (8000adc <MX_GPIO_Init+0xc4>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2120      	movs	r1, #32
 8000a92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a96:	f000 fe95 	bl	80017c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aa0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000aa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	4619      	mov	r1, r3
 8000ab0:	480b      	ldr	r0, [pc, #44]	@ (8000ae0 <MX_GPIO_Init+0xc8>)
 8000ab2:	f000 fd05 	bl	80014c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ab6:	2320      	movs	r3, #32
 8000ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	2301      	movs	r3, #1
 8000abc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4619      	mov	r1, r3
 8000acc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad0:	f000 fcf6 	bl	80014c0 <HAL_GPIO_Init>

}
 8000ad4:	bf00      	nop
 8000ad6:	3728      	adds	r7, #40	@ 0x28
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	48000800 	.word	0x48000800

08000ae4 <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */

int __io_putchar(int ch) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000aec:	1d39      	adds	r1, r7, #4
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295
 8000af2:	2201      	movs	r2, #1
 8000af4:	4803      	ldr	r0, [pc, #12]	@ (8000b04 <__io_putchar+0x20>)
 8000af6:	f001 fe9f 	bl	8002838 <HAL_UART_Transmit>
	return ch;
 8000afa:	687b      	ldr	r3, [r7, #4]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000124 	.word	0x20000124

08000b08 <uart_transmit>:

// Définir les fonctions UART pour le mode polling
int uart_transmit(uint8_t *p_data, uint16_t size) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	460b      	mov	r3, r1
 8000b12:	807b      	strh	r3, [r7, #2]
    return HAL_UART_Transmit(&huart4, p_data, size, HAL_MAX_DELAY);
 8000b14:	887a      	ldrh	r2, [r7, #2]
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	4803      	ldr	r0, [pc, #12]	@ (8000b2c <uart_transmit+0x24>)
 8000b1e:	f001 fe8b 	bl	8002838 <HAL_UART_Transmit>
 8000b22:	4603      	mov	r3, r0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000090 	.word	0x20000090

08000b30 <uart_poll_receive>:

int uart_poll_receive(uint8_t *p_data, uint16_t size) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	807b      	strh	r3, [r7, #2]
    return HAL_UART_Receive(&huart4, p_data, size, 100);
 8000b3c:	887a      	ldrh	r2, [r7, #2]
 8000b3e:	2364      	movs	r3, #100	@ 0x64
 8000b40:	6879      	ldr	r1, [r7, #4]
 8000b42:	4804      	ldr	r0, [pc, #16]	@ (8000b54 <uart_poll_receive+0x24>)
 8000b44:	f001 ff06 	bl	8002954 <HAL_UART_Receive>
 8000b48:	4603      	mov	r3, r0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000090 	.word	0x20000090

08000b58 <counter>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void counter (void * pvParameters){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
	char* s = pcTaskGetName(xTaskGetCurrentTaskHandle());
 8000b60:	f003 fb0c 	bl	800417c <xTaskGetCurrentTaskHandle>
 8000b64:	4603      	mov	r3, r0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f003 f916 	bl	8003d98 <pcTaskGetName>
 8000b6c:	60f8      	str	r0, [r7, #12]
	while (1) {
		printf("Je suis la tache %s et je m'endors pour %d periodes\r\n", s, DUREE);
 8000b6e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000b72:	68f9      	ldr	r1, [r7, #12]
 8000b74:	4804      	ldr	r0, [pc, #16]	@ (8000b88 <counter+0x30>)
 8000b76:	f004 f857 	bl	8004c28 <iprintf>
//	            printf("Angle %3d: --- mm (No Data)\r\n", i);
//	        }
//	    }
//	    printf("\n");

		vTaskDelay(DUREE);
 8000b7a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000b7e:	f002 ffe1 	bl	8003b44 <vTaskDelay>
		printf("Je suis la tache %s et je m'endors pour %d periodes\r\n", s, DUREE);
 8000b82:	bf00      	nop
 8000b84:	e7f3      	b.n	8000b6e <counter+0x16>
 8000b86:	bf00      	nop
 8000b88:	08005fa4 	.word	0x08005fa4

08000b8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b09e      	sub	sp, #120	@ 0x78
 8000b90:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	BaseType_t xReturned;
	TaskHandle_t xHandle1 = NULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	66bb      	str	r3, [r7, #104]	@ 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b96:	f000 fb1c 	bl	80011d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b9a:	f000 f867 	bl	8000c6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b9e:	f7ff ff3b 	bl	8000a18 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ba2:	f000 fa09 	bl	8000fb8 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8000ba6:	f000 f9bb 	bl	8000f20 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  printf("=================== DRIVER LIDAR =================== \r\n");
 8000baa:	4825      	ldr	r0, [pc, #148]	@ (8000c40 <main+0xb4>)
 8000bac:	f004 f8a4 	bl	8004cf8 <puts>
   * Création des vérifications du lidar.
   */

	  // Déclaration et configuration de la structure h_LIDAR
	  h_LIDAR_t lidar;
	  lidar.serial_drv.transmit = uart_transmit;
 8000bb0:	4b24      	ldr	r3, [pc, #144]	@ (8000c44 <main+0xb8>)
 8000bb2:	607b      	str	r3, [r7, #4]
	  lidar.serial_drv.poll_receive = uart_poll_receive;
 8000bb4:	4b24      	ldr	r3, [pc, #144]	@ (8000c48 <main+0xbc>)
 8000bb6:	60bb      	str	r3, [r7, #8]

	  LIDAR_stop(&lidar);
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fd1a 	bl	80005f4 <LIDAR_stop>
	  HAL_Delay(100);
 8000bc0:	2064      	movs	r0, #100	@ 0x64
 8000bc2:	f000 fb77 	bl	80012b4 <HAL_Delay>

	  // Récupération des informations de l'appareil
	  if (LIDAR_get_info(&lidar) == 0) {
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fd27 	bl	800061c <LIDAR_get_info>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d103      	bne.n	8000bdc <main+0x50>
		  printf("LIDAR device information retrieved successfully.\r\n");
 8000bd4:	481d      	ldr	r0, [pc, #116]	@ (8000c4c <main+0xc0>)
 8000bd6:	f004 f88f 	bl	8004cf8 <puts>
 8000bda:	e002      	b.n	8000be2 <main+0x56>
	  } else {
		  printf("Failed to retrieve LIDAR device information.\r\n");
 8000bdc:	481c      	ldr	r0, [pc, #112]	@ (8000c50 <main+0xc4>)
 8000bde:	f004 f88b 	bl	8004cf8 <puts>
	  }

	  // Récupération de l'état de santé
	  if (LIDAR_get_health_stat(&lidar) == 0) {
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fe51 	bl	800088c <LIDAR_get_health_stat>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d103      	bne.n	8000bf8 <main+0x6c>
		  printf("LIDAR health status retrieved successfully.\r\n");
 8000bf0:	4818      	ldr	r0, [pc, #96]	@ (8000c54 <main+0xc8>)
 8000bf2:	f004 f881 	bl	8004cf8 <puts>
 8000bf6:	e002      	b.n	8000bfe <main+0x72>
	  } else {
		  printf("Failed to retrieve LIDAR health status.\r\n");
 8000bf8:	4817      	ldr	r0, [pc, #92]	@ (8000c58 <main+0xcc>)
 8000bfa:	f004 f87d 	bl	8004cf8 <puts>
	  }

	xReturned = xTaskCreate(
 8000bfe:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000c02:	9301      	str	r3, [sp, #4]
 8000c04:	2300      	movs	r3, #0
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	2300      	movs	r3, #0
 8000c0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c0e:	4913      	ldr	r1, [pc, #76]	@ (8000c5c <main+0xd0>)
 8000c10:	4813      	ldr	r0, [pc, #76]	@ (8000c60 <main+0xd4>)
 8000c12:	f002 fe63 	bl	80038dc <xTaskCreate>
 8000c16:	66f8      	str	r0, [r7, #108]	@ 0x6c
			STACK_SIZE, // Stack size in words, not bytes.
			(void *) NULL, // Parameter passed into the task.
			tskIDLE_PRIORITY,// Priority at which the task is created.
			&xHandle1 ); // Used to pass out the created task's handle.

	if (xReturned != pdPASS)
 8000c18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d004      	beq.n	8000c28 <main+0x9c>
	{
		printf("Error creating Task\r\n");
 8000c1e:	4811      	ldr	r0, [pc, #68]	@ (8000c64 <main+0xd8>)
 8000c20:	f004 f86a 	bl	8004cf8 <puts>
		Error_Handler();
 8000c24:	f000 f86d 	bl	8000d02 <Error_Handler>
	}

	printf("Tasks created\r\n");
 8000c28:	480f      	ldr	r0, [pc, #60]	@ (8000c68 <main+0xdc>)
 8000c2a:	f004 f865 	bl	8004cf8 <puts>

	vTaskStartScheduler();
 8000c2e:	f002 ffbf 	bl	8003bb0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000c32:	f7ff fcbd 	bl	80005b0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c36:	f002 fd5b 	bl	80036f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c3a:	bf00      	nop
 8000c3c:	e7fd      	b.n	8000c3a <main+0xae>
 8000c3e:	bf00      	nop
 8000c40:	08005fdc 	.word	0x08005fdc
 8000c44:	08000b09 	.word	0x08000b09
 8000c48:	08000b31 	.word	0x08000b31
 8000c4c:	08006014 	.word	0x08006014
 8000c50:	08006048 	.word	0x08006048
 8000c54:	08006078 	.word	0x08006078
 8000c58:	080060a8 	.word	0x080060a8
 8000c5c:	080060d4 	.word	0x080060d4
 8000c60:	08000b59 	.word	0x08000b59
 8000c64:	080060dc 	.word	0x080060dc
 8000c68:	080060f4 	.word	0x080060f4

08000c6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b094      	sub	sp, #80	@ 0x50
 8000c70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c72:	f107 0318 	add.w	r3, r7, #24
 8000c76:	2238      	movs	r2, #56	@ 0x38
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f004 f950 	bl	8004f20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f000 fdb0 	bl	80017f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c94:	2302      	movs	r3, #2
 8000c96:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c9c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c9e:	2340      	movs	r3, #64	@ 0x40
 8000ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000caa:	2304      	movs	r3, #4
 8000cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000cae:	2355      	movs	r3, #85	@ 0x55
 8000cb0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cbe:	f107 0318 	add.w	r3, r7, #24
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 fe4a 	bl	800195c <HAL_RCC_OscConfig>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000cce:	f000 f818 	bl	8000d02 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd2:	230f      	movs	r3, #15
 8000cd4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	2104      	movs	r1, #4
 8000cea:	4618      	mov	r0, r3
 8000cec:	f001 f948 	bl	8001f80 <HAL_RCC_ClockConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000cf6:	f000 f804 	bl	8000d02 <Error_Handler>
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	3750      	adds	r7, #80	@ 0x50
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d06:	b672      	cpsid	i
}
 8000d08:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d0a:	bf00      	nop
 8000d0c:	e7fd      	b.n	8000d0a <Error_Handler+0x8>
	...

08000d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d16:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <HAL_MspInit+0x50>)
 8000d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d1a:	4a11      	ldr	r2, [pc, #68]	@ (8000d60 <HAL_MspInit+0x50>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d22:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <HAL_MspInit+0x50>)
 8000d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d60 <HAL_MspInit+0x50>)
 8000d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d32:	4a0b      	ldr	r2, [pc, #44]	@ (8000d60 <HAL_MspInit+0x50>)
 8000d34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d38:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d3a:	4b09      	ldr	r3, [pc, #36]	@ (8000d60 <HAL_MspInit+0x50>)
 8000d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	210f      	movs	r1, #15
 8000d4a:	f06f 0001 	mvn.w	r0, #1
 8000d4e:	f000 fb90 	bl	8001472 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d52:	f000 fdf3 	bl	800193c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40021000 	.word	0x40021000

08000d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <NMI_Handler+0x4>

08000d6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <HardFault_Handler+0x4>

08000d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <MemManage_Handler+0x4>

08000d7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <BusFault_Handler+0x4>

08000d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <UsageFault_Handler+0x4>

08000d8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d9e:	f000 fa6b 	bl	8001278 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000da2:	f003 f9fb 	bl	800419c <xTaskGetSchedulerState>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d001      	beq.n	8000db0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000dac:	f003 fc3c 	bl	8004628 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	e00a      	b.n	8000ddc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dc6:	f3af 8000 	nop.w
 8000dca:	4601      	mov	r1, r0
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	1c5a      	adds	r2, r3, #1
 8000dd0:	60ba      	str	r2, [r7, #8]
 8000dd2:	b2ca      	uxtb	r2, r1
 8000dd4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	697a      	ldr	r2, [r7, #20]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	dbf0      	blt.n	8000dc6 <_read+0x12>
  }

  return len;
 8000de4:	687b      	ldr	r3, [r7, #4]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b086      	sub	sp, #24
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	60f8      	str	r0, [r7, #12]
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
 8000dfe:	e009      	b.n	8000e14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	1c5a      	adds	r2, r3, #1
 8000e04:	60ba      	str	r2, [r7, #8]
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff fe6b 	bl	8000ae4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	3301      	adds	r3, #1
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	dbf1      	blt.n	8000e00 <_write+0x12>
  }
  return len;
 8000e1c:	687b      	ldr	r3, [r7, #4]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <_close>:

int _close(int file)
{
 8000e26:	b480      	push	{r7}
 8000e28:	b083      	sub	sp, #12
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	b083      	sub	sp, #12
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
 8000e46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e4e:	605a      	str	r2, [r3, #4]
  return 0;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <_isatty>:

int _isatty(int file)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	b083      	sub	sp, #12
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e66:	2301      	movs	r3, #1
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e98:	4a14      	ldr	r2, [pc, #80]	@ (8000eec <_sbrk+0x5c>)
 8000e9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ef0 <_sbrk+0x60>)
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea4:	4b13      	ldr	r3, [pc, #76]	@ (8000ef4 <_sbrk+0x64>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d102      	bne.n	8000eb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eac:	4b11      	ldr	r3, [pc, #68]	@ (8000ef4 <_sbrk+0x64>)
 8000eae:	4a12      	ldr	r2, [pc, #72]	@ (8000ef8 <_sbrk+0x68>)
 8000eb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ef4 <_sbrk+0x64>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d207      	bcs.n	8000ed0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec0:	f004 f87c 	bl	8004fbc <__errno>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ece:	e009      	b.n	8000ee4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed0:	4b08      	ldr	r3, [pc, #32]	@ (8000ef4 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed6:	4b07      	ldr	r3, [pc, #28]	@ (8000ef4 <_sbrk+0x64>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	4a05      	ldr	r2, [pc, #20]	@ (8000ef4 <_sbrk+0x64>)
 8000ee0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20008000 	.word	0x20008000
 8000ef0:	00000400 	.word	0x00000400
 8000ef4:	2000008c 	.word	0x2000008c
 8000ef8:	20001060 	.word	0x20001060

08000efc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f00:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <SystemInit+0x20>)
 8000f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f06:	4a05      	ldr	r2, [pc, #20]	@ (8000f1c <SystemInit+0x20>)
 8000f08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000f24:	4b22      	ldr	r3, [pc, #136]	@ (8000fb0 <MX_UART4_Init+0x90>)
 8000f26:	4a23      	ldr	r2, [pc, #140]	@ (8000fb4 <MX_UART4_Init+0x94>)
 8000f28:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 128000;
 8000f2a:	4b21      	ldr	r3, [pc, #132]	@ (8000fb0 <MX_UART4_Init+0x90>)
 8000f2c:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 8000f30:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f32:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb0 <MX_UART4_Init+0x90>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000f38:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb0 <MX_UART4_Init+0x90>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb0 <MX_UART4_Init+0x90>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000f44:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb0 <MX_UART4_Init+0x90>)
 8000f46:	220c      	movs	r2, #12
 8000f48:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f4a:	4b19      	ldr	r3, [pc, #100]	@ (8000fb0 <MX_UART4_Init+0x90>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f50:	4b17      	ldr	r3, [pc, #92]	@ (8000fb0 <MX_UART4_Init+0x90>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f56:	4b16      	ldr	r3, [pc, #88]	@ (8000fb0 <MX_UART4_Init+0x90>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	@ (8000fb0 <MX_UART4_Init+0x90>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f62:	4b13      	ldr	r3, [pc, #76]	@ (8000fb0 <MX_UART4_Init+0x90>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f68:	4811      	ldr	r0, [pc, #68]	@ (8000fb0 <MX_UART4_Init+0x90>)
 8000f6a:	f001 fc15 	bl	8002798 <HAL_UART_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000f74:	f7ff fec5 	bl	8000d02 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f78:	2100      	movs	r1, #0
 8000f7a:	480d      	ldr	r0, [pc, #52]	@ (8000fb0 <MX_UART4_Init+0x90>)
 8000f7c:	f002 fad6 	bl	800352c <HAL_UARTEx_SetTxFifoThreshold>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000f86:	f7ff febc 	bl	8000d02 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4808      	ldr	r0, [pc, #32]	@ (8000fb0 <MX_UART4_Init+0x90>)
 8000f8e:	f002 fb0b 	bl	80035a8 <HAL_UARTEx_SetRxFifoThreshold>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000f98:	f7ff feb3 	bl	8000d02 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000f9c:	4804      	ldr	r0, [pc, #16]	@ (8000fb0 <MX_UART4_Init+0x90>)
 8000f9e:	f002 fa8c 	bl	80034ba <HAL_UARTEx_DisableFifoMode>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000fa8:	f7ff feab 	bl	8000d02 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000090 	.word	0x20000090
 8000fb4:	40004c00 	.word	0x40004c00

08000fb8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fbc:	4b22      	ldr	r3, [pc, #136]	@ (8001048 <MX_USART2_UART_Init+0x90>)
 8000fbe:	4a23      	ldr	r2, [pc, #140]	@ (800104c <MX_USART2_UART_Init+0x94>)
 8000fc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fc2:	4b21      	ldr	r3, [pc, #132]	@ (8001048 <MX_USART2_UART_Init+0x90>)
 8000fc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fca:	4b1f      	ldr	r3, [pc, #124]	@ (8001048 <MX_USART2_UART_Init+0x90>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8001048 <MX_USART2_UART_Init+0x90>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001048 <MX_USART2_UART_Init+0x90>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8001048 <MX_USART2_UART_Init+0x90>)
 8000fde:	220c      	movs	r2, #12
 8000fe0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fe2:	4b19      	ldr	r3, [pc, #100]	@ (8001048 <MX_USART2_UART_Init+0x90>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe8:	4b17      	ldr	r3, [pc, #92]	@ (8001048 <MX_USART2_UART_Init+0x90>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fee:	4b16      	ldr	r3, [pc, #88]	@ (8001048 <MX_USART2_UART_Init+0x90>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ff4:	4b14      	ldr	r3, [pc, #80]	@ (8001048 <MX_USART2_UART_Init+0x90>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ffa:	4b13      	ldr	r3, [pc, #76]	@ (8001048 <MX_USART2_UART_Init+0x90>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001000:	4811      	ldr	r0, [pc, #68]	@ (8001048 <MX_USART2_UART_Init+0x90>)
 8001002:	f001 fbc9 	bl	8002798 <HAL_UART_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800100c:	f7ff fe79 	bl	8000d02 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001010:	2100      	movs	r1, #0
 8001012:	480d      	ldr	r0, [pc, #52]	@ (8001048 <MX_USART2_UART_Init+0x90>)
 8001014:	f002 fa8a 	bl	800352c <HAL_UARTEx_SetTxFifoThreshold>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800101e:	f7ff fe70 	bl	8000d02 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001022:	2100      	movs	r1, #0
 8001024:	4808      	ldr	r0, [pc, #32]	@ (8001048 <MX_USART2_UART_Init+0x90>)
 8001026:	f002 fabf 	bl	80035a8 <HAL_UARTEx_SetRxFifoThreshold>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001030:	f7ff fe67 	bl	8000d02 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001034:	4804      	ldr	r0, [pc, #16]	@ (8001048 <MX_USART2_UART_Init+0x90>)
 8001036:	f002 fa40 	bl	80034ba <HAL_UARTEx_DisableFifoMode>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001040:	f7ff fe5f 	bl	8000d02 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000124 	.word	0x20000124
 800104c:	40004400 	.word	0x40004400

08001050 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b09c      	sub	sp, #112	@ 0x70
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001068:	f107 0318 	add.w	r3, r7, #24
 800106c:	2244      	movs	r2, #68	@ 0x44
 800106e:	2100      	movs	r1, #0
 8001070:	4618      	mov	r0, r3
 8001072:	f003 ff55 	bl	8004f20 <memset>
  if(uartHandle->Instance==UART4)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a3d      	ldr	r2, [pc, #244]	@ (8001170 <HAL_UART_MspInit+0x120>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d137      	bne.n	80010f0 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001080:	2308      	movs	r3, #8
 8001082:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001084:	2300      	movs	r3, #0
 8001086:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001088:	f107 0318 	add.w	r3, r7, #24
 800108c:	4618      	mov	r0, r3
 800108e:	f001 f993 	bl	80023b8 <HAL_RCCEx_PeriphCLKConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001098:	f7ff fe33 	bl	8000d02 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800109c:	4b35      	ldr	r3, [pc, #212]	@ (8001174 <HAL_UART_MspInit+0x124>)
 800109e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a0:	4a34      	ldr	r2, [pc, #208]	@ (8001174 <HAL_UART_MspInit+0x124>)
 80010a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80010a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80010a8:	4b32      	ldr	r3, [pc, #200]	@ (8001174 <HAL_UART_MspInit+0x124>)
 80010aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80010b0:	617b      	str	r3, [r7, #20]
 80010b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b4:	4b2f      	ldr	r3, [pc, #188]	@ (8001174 <HAL_UART_MspInit+0x124>)
 80010b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b8:	4a2e      	ldr	r2, [pc, #184]	@ (8001174 <HAL_UART_MspInit+0x124>)
 80010ba:	f043 0304 	orr.w	r3, r3, #4
 80010be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001174 <HAL_UART_MspInit+0x124>)
 80010c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c4:	f003 0304 	and.w	r3, r3, #4
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010cc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80010d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d2:	2302      	movs	r3, #2
 80010d4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2300      	movs	r3, #0
 80010dc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80010de:	2305      	movs	r3, #5
 80010e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010e6:	4619      	mov	r1, r3
 80010e8:	4823      	ldr	r0, [pc, #140]	@ (8001178 <HAL_UART_MspInit+0x128>)
 80010ea:	f000 f9e9 	bl	80014c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010ee:	e03b      	b.n	8001168 <HAL_UART_MspInit+0x118>
  else if(uartHandle->Instance==USART2)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a21      	ldr	r2, [pc, #132]	@ (800117c <HAL_UART_MspInit+0x12c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d136      	bne.n	8001168 <HAL_UART_MspInit+0x118>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010fa:	2302      	movs	r3, #2
 80010fc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010fe:	2300      	movs	r3, #0
 8001100:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001102:	f107 0318 	add.w	r3, r7, #24
 8001106:	4618      	mov	r0, r3
 8001108:	f001 f956 	bl	80023b8 <HAL_RCCEx_PeriphCLKConfig>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8001112:	f7ff fdf6 	bl	8000d02 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001116:	4b17      	ldr	r3, [pc, #92]	@ (8001174 <HAL_UART_MspInit+0x124>)
 8001118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800111a:	4a16      	ldr	r2, [pc, #88]	@ (8001174 <HAL_UART_MspInit+0x124>)
 800111c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001120:	6593      	str	r3, [r2, #88]	@ 0x58
 8001122:	4b14      	ldr	r3, [pc, #80]	@ (8001174 <HAL_UART_MspInit+0x124>)
 8001124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	4b11      	ldr	r3, [pc, #68]	@ (8001174 <HAL_UART_MspInit+0x124>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001132:	4a10      	ldr	r2, [pc, #64]	@ (8001174 <HAL_UART_MspInit+0x124>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800113a:	4b0e      	ldr	r3, [pc, #56]	@ (8001174 <HAL_UART_MspInit+0x124>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001146:	230c      	movs	r3, #12
 8001148:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	2302      	movs	r3, #2
 800114c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001156:	2307      	movs	r3, #7
 8001158:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800115e:	4619      	mov	r1, r3
 8001160:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001164:	f000 f9ac 	bl	80014c0 <HAL_GPIO_Init>
}
 8001168:	bf00      	nop
 800116a:	3770      	adds	r7, #112	@ 0x70
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40004c00 	.word	0x40004c00
 8001174:	40021000 	.word	0x40021000
 8001178:	48000800 	.word	0x48000800
 800117c:	40004400 	.word	0x40004400

08001180 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001180:	480d      	ldr	r0, [pc, #52]	@ (80011b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001182:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001184:	f7ff feba 	bl	8000efc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001188:	480c      	ldr	r0, [pc, #48]	@ (80011bc <LoopForever+0x6>)
  ldr r1, =_edata
 800118a:	490d      	ldr	r1, [pc, #52]	@ (80011c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800118c:	4a0d      	ldr	r2, [pc, #52]	@ (80011c4 <LoopForever+0xe>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001190:	e002      	b.n	8001198 <LoopCopyDataInit>

08001192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001196:	3304      	adds	r3, #4

08001198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800119c:	d3f9      	bcc.n	8001192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800119e:	4a0a      	ldr	r2, [pc, #40]	@ (80011c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011a0:	4c0a      	ldr	r4, [pc, #40]	@ (80011cc <LoopForever+0x16>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a4:	e001      	b.n	80011aa <LoopFillZerobss>

080011a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a8:	3204      	adds	r2, #4

080011aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ac:	d3fb      	bcc.n	80011a6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80011ae:	f003 ff0b 	bl	8004fc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011b2:	f7ff fceb 	bl	8000b8c <main>

080011b6 <LoopForever>:

LoopForever:
    b LoopForever
 80011b6:	e7fe      	b.n	80011b6 <LoopForever>
  ldr   r0, =_estack
 80011b8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80011bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80011c4:	08006190 	.word	0x08006190
  ldr r2, =_sbss
 80011c8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80011cc:	2000105c 	.word	0x2000105c

080011d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011d0:	e7fe      	b.n	80011d0 <ADC1_2_IRQHandler>

080011d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011d8:	2300      	movs	r3, #0
 80011da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011dc:	2003      	movs	r0, #3
 80011de:	f000 f93d 	bl	800145c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011e2:	200f      	movs	r0, #15
 80011e4:	f000 f80e 	bl	8001204 <HAL_InitTick>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d002      	beq.n	80011f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	71fb      	strb	r3, [r7, #7]
 80011f2:	e001      	b.n	80011f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011f4:	f7ff fd8c 	bl	8000d10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011f8:	79fb      	ldrb	r3, [r7, #7]

}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800120c:	2300      	movs	r3, #0
 800120e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001210:	4b16      	ldr	r3, [pc, #88]	@ (800126c <HAL_InitTick+0x68>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d022      	beq.n	800125e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001218:	4b15      	ldr	r3, [pc, #84]	@ (8001270 <HAL_InitTick+0x6c>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b13      	ldr	r3, [pc, #76]	@ (800126c <HAL_InitTick+0x68>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001224:	fbb1 f3f3 	udiv	r3, r1, r3
 8001228:	fbb2 f3f3 	udiv	r3, r2, r3
 800122c:	4618      	mov	r0, r3
 800122e:	f000 f93a 	bl	80014a6 <HAL_SYSTICK_Config>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d10f      	bne.n	8001258 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b0f      	cmp	r3, #15
 800123c:	d809      	bhi.n	8001252 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800123e:	2200      	movs	r2, #0
 8001240:	6879      	ldr	r1, [r7, #4]
 8001242:	f04f 30ff 	mov.w	r0, #4294967295
 8001246:	f000 f914 	bl	8001472 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800124a:	4a0a      	ldr	r2, [pc, #40]	@ (8001274 <HAL_InitTick+0x70>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6013      	str	r3, [r2, #0]
 8001250:	e007      	b.n	8001262 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	73fb      	strb	r3, [r7, #15]
 8001256:	e004      	b.n	8001262 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	73fb      	strb	r3, [r7, #15]
 800125c:	e001      	b.n	8001262 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001262:	7bfb      	ldrb	r3, [r7, #15]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000008 	.word	0x20000008
 8001270:	20000000 	.word	0x20000000
 8001274:	20000004 	.word	0x20000004

08001278 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800127c:	4b05      	ldr	r3, [pc, #20]	@ (8001294 <HAL_IncTick+0x1c>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b05      	ldr	r3, [pc, #20]	@ (8001298 <HAL_IncTick+0x20>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4413      	add	r3, r2
 8001286:	4a03      	ldr	r2, [pc, #12]	@ (8001294 <HAL_IncTick+0x1c>)
 8001288:	6013      	str	r3, [r2, #0]
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	200001b8 	.word	0x200001b8
 8001298:	20000008 	.word	0x20000008

0800129c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return uwTick;
 80012a0:	4b03      	ldr	r3, [pc, #12]	@ (80012b0 <HAL_GetTick+0x14>)
 80012a2:	681b      	ldr	r3, [r3, #0]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	200001b8 	.word	0x200001b8

080012b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012bc:	f7ff ffee 	bl	800129c <HAL_GetTick>
 80012c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012cc:	d004      	beq.n	80012d8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ce:	4b09      	ldr	r3, [pc, #36]	@ (80012f4 <HAL_Delay+0x40>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	4413      	add	r3, r2
 80012d6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012d8:	bf00      	nop
 80012da:	f7ff ffdf 	bl	800129c <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d8f7      	bhi.n	80012da <HAL_Delay+0x26>
  {
  }
}
 80012ea:	bf00      	nop
 80012ec:	bf00      	nop
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000008 	.word	0x20000008

080012f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001308:	4b0c      	ldr	r3, [pc, #48]	@ (800133c <__NVIC_SetPriorityGrouping+0x44>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001314:	4013      	ands	r3, r2
 8001316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001320:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001324:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800132a:	4a04      	ldr	r2, [pc, #16]	@ (800133c <__NVIC_SetPriorityGrouping+0x44>)
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	60d3      	str	r3, [r2, #12]
}
 8001330:	bf00      	nop
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001344:	4b04      	ldr	r3, [pc, #16]	@ (8001358 <__NVIC_GetPriorityGrouping+0x18>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	0a1b      	lsrs	r3, r3, #8
 800134a:	f003 0307 	and.w	r3, r3, #7
}
 800134e:	4618      	mov	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	6039      	str	r1, [r7, #0]
 8001366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136c:	2b00      	cmp	r3, #0
 800136e:	db0a      	blt.n	8001386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	b2da      	uxtb	r2, r3
 8001374:	490c      	ldr	r1, [pc, #48]	@ (80013a8 <__NVIC_SetPriority+0x4c>)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	0112      	lsls	r2, r2, #4
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	440b      	add	r3, r1
 8001380:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001384:	e00a      	b.n	800139c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4908      	ldr	r1, [pc, #32]	@ (80013ac <__NVIC_SetPriority+0x50>)
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	3b04      	subs	r3, #4
 8001394:	0112      	lsls	r2, r2, #4
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	440b      	add	r3, r1
 800139a:	761a      	strb	r2, [r3, #24]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000e100 	.word	0xe000e100
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b089      	sub	sp, #36	@ 0x24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f1c3 0307 	rsb	r3, r3, #7
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	bf28      	it	cs
 80013ce:	2304      	movcs	r3, #4
 80013d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3304      	adds	r3, #4
 80013d6:	2b06      	cmp	r3, #6
 80013d8:	d902      	bls.n	80013e0 <NVIC_EncodePriority+0x30>
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3b03      	subs	r3, #3
 80013de:	e000      	b.n	80013e2 <NVIC_EncodePriority+0x32>
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	f04f 32ff 	mov.w	r2, #4294967295
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43da      	mvns	r2, r3
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	401a      	ands	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f8:	f04f 31ff 	mov.w	r1, #4294967295
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001402:	43d9      	mvns	r1, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001408:	4313      	orrs	r3, r2
         );
}
 800140a:	4618      	mov	r0, r3
 800140c:	3724      	adds	r7, #36	@ 0x24
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3b01      	subs	r3, #1
 8001424:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001428:	d301      	bcc.n	800142e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800142a:	2301      	movs	r3, #1
 800142c:	e00f      	b.n	800144e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800142e:	4a0a      	ldr	r2, [pc, #40]	@ (8001458 <SysTick_Config+0x40>)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3b01      	subs	r3, #1
 8001434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001436:	210f      	movs	r1, #15
 8001438:	f04f 30ff 	mov.w	r0, #4294967295
 800143c:	f7ff ff8e 	bl	800135c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001440:	4b05      	ldr	r3, [pc, #20]	@ (8001458 <SysTick_Config+0x40>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001446:	4b04      	ldr	r3, [pc, #16]	@ (8001458 <SysTick_Config+0x40>)
 8001448:	2207      	movs	r2, #7
 800144a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	e000e010 	.word	0xe000e010

0800145c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff ff47 	bl	80012f8 <__NVIC_SetPriorityGrouping>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b086      	sub	sp, #24
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	60b9      	str	r1, [r7, #8]
 800147c:	607a      	str	r2, [r7, #4]
 800147e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001480:	f7ff ff5e 	bl	8001340 <__NVIC_GetPriorityGrouping>
 8001484:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	68b9      	ldr	r1, [r7, #8]
 800148a:	6978      	ldr	r0, [r7, #20]
 800148c:	f7ff ff90 	bl	80013b0 <NVIC_EncodePriority>
 8001490:	4602      	mov	r2, r0
 8001492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001496:	4611      	mov	r1, r2
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff5f 	bl	800135c <__NVIC_SetPriority>
}
 800149e:	bf00      	nop
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff ffb2 	bl	8001418 <SysTick_Config>
 80014b4:	4603      	mov	r3, r0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b087      	sub	sp, #28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80014ce:	e15a      	b.n	8001786 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	2101      	movs	r1, #1
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	fa01 f303 	lsl.w	r3, r1, r3
 80014dc:	4013      	ands	r3, r2
 80014de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f000 814c 	beq.w	8001780 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 0303 	and.w	r3, r3, #3
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d005      	beq.n	8001500 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d130      	bne.n	8001562 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	2203      	movs	r2, #3
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	68da      	ldr	r2, [r3, #12]
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	4313      	orrs	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001536:	2201      	movs	r2, #1
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43db      	mvns	r3, r3
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	4013      	ands	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	091b      	lsrs	r3, r3, #4
 800154c:	f003 0201 	and.w	r2, r3, #1
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	4313      	orrs	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f003 0303 	and.w	r3, r3, #3
 800156a:	2b03      	cmp	r3, #3
 800156c:	d017      	beq.n	800159e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	2203      	movs	r2, #3
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4013      	ands	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 0303 	and.w	r3, r3, #3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d123      	bne.n	80015f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	08da      	lsrs	r2, r3, #3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3208      	adds	r2, #8
 80015b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	220f      	movs	r2, #15
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	4013      	ands	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	691a      	ldr	r2, [r3, #16]
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	08da      	lsrs	r2, r3, #3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3208      	adds	r2, #8
 80015ec:	6939      	ldr	r1, [r7, #16]
 80015ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	2203      	movs	r2, #3
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43db      	mvns	r3, r3
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	4013      	ands	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 0203 	and.w	r2, r3, #3
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	4313      	orrs	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 80a6 	beq.w	8001780 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001634:	4b5b      	ldr	r3, [pc, #364]	@ (80017a4 <HAL_GPIO_Init+0x2e4>)
 8001636:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001638:	4a5a      	ldr	r2, [pc, #360]	@ (80017a4 <HAL_GPIO_Init+0x2e4>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001640:	4b58      	ldr	r3, [pc, #352]	@ (80017a4 <HAL_GPIO_Init+0x2e4>)
 8001642:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800164c:	4a56      	ldr	r2, [pc, #344]	@ (80017a8 <HAL_GPIO_Init+0x2e8>)
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	089b      	lsrs	r3, r3, #2
 8001652:	3302      	adds	r3, #2
 8001654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001658:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	f003 0303 	and.w	r3, r3, #3
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	220f      	movs	r2, #15
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	4013      	ands	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001676:	d01f      	beq.n	80016b8 <HAL_GPIO_Init+0x1f8>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a4c      	ldr	r2, [pc, #304]	@ (80017ac <HAL_GPIO_Init+0x2ec>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d019      	beq.n	80016b4 <HAL_GPIO_Init+0x1f4>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a4b      	ldr	r2, [pc, #300]	@ (80017b0 <HAL_GPIO_Init+0x2f0>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d013      	beq.n	80016b0 <HAL_GPIO_Init+0x1f0>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a4a      	ldr	r2, [pc, #296]	@ (80017b4 <HAL_GPIO_Init+0x2f4>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d00d      	beq.n	80016ac <HAL_GPIO_Init+0x1ec>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a49      	ldr	r2, [pc, #292]	@ (80017b8 <HAL_GPIO_Init+0x2f8>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d007      	beq.n	80016a8 <HAL_GPIO_Init+0x1e8>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a48      	ldr	r2, [pc, #288]	@ (80017bc <HAL_GPIO_Init+0x2fc>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d101      	bne.n	80016a4 <HAL_GPIO_Init+0x1e4>
 80016a0:	2305      	movs	r3, #5
 80016a2:	e00a      	b.n	80016ba <HAL_GPIO_Init+0x1fa>
 80016a4:	2306      	movs	r3, #6
 80016a6:	e008      	b.n	80016ba <HAL_GPIO_Init+0x1fa>
 80016a8:	2304      	movs	r3, #4
 80016aa:	e006      	b.n	80016ba <HAL_GPIO_Init+0x1fa>
 80016ac:	2303      	movs	r3, #3
 80016ae:	e004      	b.n	80016ba <HAL_GPIO_Init+0x1fa>
 80016b0:	2302      	movs	r3, #2
 80016b2:	e002      	b.n	80016ba <HAL_GPIO_Init+0x1fa>
 80016b4:	2301      	movs	r3, #1
 80016b6:	e000      	b.n	80016ba <HAL_GPIO_Init+0x1fa>
 80016b8:	2300      	movs	r3, #0
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	f002 0203 	and.w	r2, r2, #3
 80016c0:	0092      	lsls	r2, r2, #2
 80016c2:	4093      	lsls	r3, r2
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016ca:	4937      	ldr	r1, [pc, #220]	@ (80017a8 <HAL_GPIO_Init+0x2e8>)
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	089b      	lsrs	r3, r3, #2
 80016d0:	3302      	adds	r3, #2
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016d8:	4b39      	ldr	r3, [pc, #228]	@ (80017c0 <HAL_GPIO_Init+0x300>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	43db      	mvns	r3, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016fc:	4a30      	ldr	r2, [pc, #192]	@ (80017c0 <HAL_GPIO_Init+0x300>)
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001702:	4b2f      	ldr	r3, [pc, #188]	@ (80017c0 <HAL_GPIO_Init+0x300>)
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	43db      	mvns	r3, r3
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4013      	ands	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4313      	orrs	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001726:	4a26      	ldr	r2, [pc, #152]	@ (80017c0 <HAL_GPIO_Init+0x300>)
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800172c:	4b24      	ldr	r3, [pc, #144]	@ (80017c0 <HAL_GPIO_Init+0x300>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	43db      	mvns	r3, r3
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d003      	beq.n	8001750 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	4313      	orrs	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001750:	4a1b      	ldr	r2, [pc, #108]	@ (80017c0 <HAL_GPIO_Init+0x300>)
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001756:	4b1a      	ldr	r3, [pc, #104]	@ (80017c0 <HAL_GPIO_Init+0x300>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	43db      	mvns	r3, r3
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4013      	ands	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4313      	orrs	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800177a:	4a11      	ldr	r2, [pc, #68]	@ (80017c0 <HAL_GPIO_Init+0x300>)
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	3301      	adds	r3, #1
 8001784:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	fa22 f303 	lsr.w	r3, r2, r3
 8001790:	2b00      	cmp	r3, #0
 8001792:	f47f ae9d 	bne.w	80014d0 <HAL_GPIO_Init+0x10>
  }
}
 8001796:	bf00      	nop
 8001798:	bf00      	nop
 800179a:	371c      	adds	r7, #28
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40010000 	.word	0x40010000
 80017ac:	48000400 	.word	0x48000400
 80017b0:	48000800 	.word	0x48000800
 80017b4:	48000c00 	.word	0x48000c00
 80017b8:	48001000 	.word	0x48001000
 80017bc:	48001400 	.word	0x48001400
 80017c0:	40010400 	.word	0x40010400

080017c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	807b      	strh	r3, [r7, #2]
 80017d0:	4613      	mov	r3, r2
 80017d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017d4:	787b      	ldrb	r3, [r7, #1]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017da:	887a      	ldrh	r2, [r7, #2]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017e0:	e002      	b.n	80017e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017e2:	887a      	ldrh	r2, [r7, #2]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d141      	bne.n	8001886 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001802:	4b4b      	ldr	r3, [pc, #300]	@ (8001930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800180a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800180e:	d131      	bne.n	8001874 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001810:	4b47      	ldr	r3, [pc, #284]	@ (8001930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001812:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001816:	4a46      	ldr	r2, [pc, #280]	@ (8001930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001818:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800181c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001820:	4b43      	ldr	r3, [pc, #268]	@ (8001930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001828:	4a41      	ldr	r2, [pc, #260]	@ (8001930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800182a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800182e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001830:	4b40      	ldr	r3, [pc, #256]	@ (8001934 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2232      	movs	r2, #50	@ 0x32
 8001836:	fb02 f303 	mul.w	r3, r2, r3
 800183a:	4a3f      	ldr	r2, [pc, #252]	@ (8001938 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800183c:	fba2 2303 	umull	r2, r3, r2, r3
 8001840:	0c9b      	lsrs	r3, r3, #18
 8001842:	3301      	adds	r3, #1
 8001844:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001846:	e002      	b.n	800184e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	3b01      	subs	r3, #1
 800184c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800184e:	4b38      	ldr	r3, [pc, #224]	@ (8001930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001856:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800185a:	d102      	bne.n	8001862 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f2      	bne.n	8001848 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001862:	4b33      	ldr	r3, [pc, #204]	@ (8001930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800186a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800186e:	d158      	bne.n	8001922 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e057      	b.n	8001924 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001874:	4b2e      	ldr	r3, [pc, #184]	@ (8001930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001876:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800187a:	4a2d      	ldr	r2, [pc, #180]	@ (8001930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800187c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001880:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001884:	e04d      	b.n	8001922 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800188c:	d141      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800188e:	4b28      	ldr	r3, [pc, #160]	@ (8001930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001896:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800189a:	d131      	bne.n	8001900 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800189c:	4b24      	ldr	r3, [pc, #144]	@ (8001930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800189e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80018a2:	4a23      	ldr	r2, [pc, #140]	@ (8001930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018ac:	4b20      	ldr	r3, [pc, #128]	@ (8001930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018b4:	4a1e      	ldr	r2, [pc, #120]	@ (8001930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001934 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2232      	movs	r2, #50	@ 0x32
 80018c2:	fb02 f303 	mul.w	r3, r2, r3
 80018c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001938 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018c8:	fba2 2303 	umull	r2, r3, r2, r3
 80018cc:	0c9b      	lsrs	r3, r3, #18
 80018ce:	3301      	adds	r3, #1
 80018d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018d2:	e002      	b.n	80018da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018da:	4b15      	ldr	r3, [pc, #84]	@ (8001930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018e6:	d102      	bne.n	80018ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f2      	bne.n	80018d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018ee:	4b10      	ldr	r3, [pc, #64]	@ (8001930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018fa:	d112      	bne.n	8001922 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e011      	b.n	8001924 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001900:	4b0b      	ldr	r3, [pc, #44]	@ (8001930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001902:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001906:	4a0a      	ldr	r2, [pc, #40]	@ (8001930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001908:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800190c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001910:	e007      	b.n	8001922 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001912:	4b07      	ldr	r3, [pc, #28]	@ (8001930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800191a:	4a05      	ldr	r2, [pc, #20]	@ (8001930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800191c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001920:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	40007000 	.word	0x40007000
 8001934:	20000000 	.word	0x20000000
 8001938:	431bde83 	.word	0x431bde83

0800193c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001940:	4b05      	ldr	r3, [pc, #20]	@ (8001958 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	4a04      	ldr	r2, [pc, #16]	@ (8001958 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001946:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800194a:	6093      	str	r3, [r2, #8]
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40007000 	.word	0x40007000

0800195c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b088      	sub	sp, #32
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e2fe      	b.n	8001f6c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	d075      	beq.n	8001a66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800197a:	4b97      	ldr	r3, [pc, #604]	@ (8001bd8 <HAL_RCC_OscConfig+0x27c>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 030c 	and.w	r3, r3, #12
 8001982:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001984:	4b94      	ldr	r3, [pc, #592]	@ (8001bd8 <HAL_RCC_OscConfig+0x27c>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	f003 0303 	and.w	r3, r3, #3
 800198c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	2b0c      	cmp	r3, #12
 8001992:	d102      	bne.n	800199a <HAL_RCC_OscConfig+0x3e>
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	2b03      	cmp	r3, #3
 8001998:	d002      	beq.n	80019a0 <HAL_RCC_OscConfig+0x44>
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	2b08      	cmp	r3, #8
 800199e:	d10b      	bne.n	80019b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a0:	4b8d      	ldr	r3, [pc, #564]	@ (8001bd8 <HAL_RCC_OscConfig+0x27c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d05b      	beq.n	8001a64 <HAL_RCC_OscConfig+0x108>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d157      	bne.n	8001a64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e2d9      	b.n	8001f6c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019c0:	d106      	bne.n	80019d0 <HAL_RCC_OscConfig+0x74>
 80019c2:	4b85      	ldr	r3, [pc, #532]	@ (8001bd8 <HAL_RCC_OscConfig+0x27c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a84      	ldr	r2, [pc, #528]	@ (8001bd8 <HAL_RCC_OscConfig+0x27c>)
 80019c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	e01d      	b.n	8001a0c <HAL_RCC_OscConfig+0xb0>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019d8:	d10c      	bne.n	80019f4 <HAL_RCC_OscConfig+0x98>
 80019da:	4b7f      	ldr	r3, [pc, #508]	@ (8001bd8 <HAL_RCC_OscConfig+0x27c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a7e      	ldr	r2, [pc, #504]	@ (8001bd8 <HAL_RCC_OscConfig+0x27c>)
 80019e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	4b7c      	ldr	r3, [pc, #496]	@ (8001bd8 <HAL_RCC_OscConfig+0x27c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a7b      	ldr	r2, [pc, #492]	@ (8001bd8 <HAL_RCC_OscConfig+0x27c>)
 80019ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	e00b      	b.n	8001a0c <HAL_RCC_OscConfig+0xb0>
 80019f4:	4b78      	ldr	r3, [pc, #480]	@ (8001bd8 <HAL_RCC_OscConfig+0x27c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a77      	ldr	r2, [pc, #476]	@ (8001bd8 <HAL_RCC_OscConfig+0x27c>)
 80019fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019fe:	6013      	str	r3, [r2, #0]
 8001a00:	4b75      	ldr	r3, [pc, #468]	@ (8001bd8 <HAL_RCC_OscConfig+0x27c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a74      	ldr	r2, [pc, #464]	@ (8001bd8 <HAL_RCC_OscConfig+0x27c>)
 8001a06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d013      	beq.n	8001a3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a14:	f7ff fc42 	bl	800129c <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a1c:	f7ff fc3e 	bl	800129c <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b64      	cmp	r3, #100	@ 0x64
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e29e      	b.n	8001f6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a2e:	4b6a      	ldr	r3, [pc, #424]	@ (8001bd8 <HAL_RCC_OscConfig+0x27c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0f0      	beq.n	8001a1c <HAL_RCC_OscConfig+0xc0>
 8001a3a:	e014      	b.n	8001a66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3c:	f7ff fc2e 	bl	800129c <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a44:	f7ff fc2a 	bl	800129c <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b64      	cmp	r3, #100	@ 0x64
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e28a      	b.n	8001f6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a56:	4b60      	ldr	r3, [pc, #384]	@ (8001bd8 <HAL_RCC_OscConfig+0x27c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f0      	bne.n	8001a44 <HAL_RCC_OscConfig+0xe8>
 8001a62:	e000      	b.n	8001a66 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d075      	beq.n	8001b5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a72:	4b59      	ldr	r3, [pc, #356]	@ (8001bd8 <HAL_RCC_OscConfig+0x27c>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 030c 	and.w	r3, r3, #12
 8001a7a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a7c:	4b56      	ldr	r3, [pc, #344]	@ (8001bd8 <HAL_RCC_OscConfig+0x27c>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	f003 0303 	and.w	r3, r3, #3
 8001a84:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	2b0c      	cmp	r3, #12
 8001a8a:	d102      	bne.n	8001a92 <HAL_RCC_OscConfig+0x136>
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d002      	beq.n	8001a98 <HAL_RCC_OscConfig+0x13c>
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	2b04      	cmp	r3, #4
 8001a96:	d11f      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a98:	4b4f      	ldr	r3, [pc, #316]	@ (8001bd8 <HAL_RCC_OscConfig+0x27c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d005      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x154>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e25d      	b.n	8001f6c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab0:	4b49      	ldr	r3, [pc, #292]	@ (8001bd8 <HAL_RCC_OscConfig+0x27c>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	061b      	lsls	r3, r3, #24
 8001abe:	4946      	ldr	r1, [pc, #280]	@ (8001bd8 <HAL_RCC_OscConfig+0x27c>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ac4:	4b45      	ldr	r3, [pc, #276]	@ (8001bdc <HAL_RCC_OscConfig+0x280>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff fb9b 	bl	8001204 <HAL_InitTick>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d043      	beq.n	8001b5c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e249      	b.n	8001f6c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d023      	beq.n	8001b28 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ae0:	4b3d      	ldr	r3, [pc, #244]	@ (8001bd8 <HAL_RCC_OscConfig+0x27c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a3c      	ldr	r2, [pc, #240]	@ (8001bd8 <HAL_RCC_OscConfig+0x27c>)
 8001ae6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aec:	f7ff fbd6 	bl	800129c <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af4:	f7ff fbd2 	bl	800129c <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e232      	b.n	8001f6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b06:	4b34      	ldr	r3, [pc, #208]	@ (8001bd8 <HAL_RCC_OscConfig+0x27c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d0f0      	beq.n	8001af4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b12:	4b31      	ldr	r3, [pc, #196]	@ (8001bd8 <HAL_RCC_OscConfig+0x27c>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	061b      	lsls	r3, r3, #24
 8001b20:	492d      	ldr	r1, [pc, #180]	@ (8001bd8 <HAL_RCC_OscConfig+0x27c>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	604b      	str	r3, [r1, #4]
 8001b26:	e01a      	b.n	8001b5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b28:	4b2b      	ldr	r3, [pc, #172]	@ (8001bd8 <HAL_RCC_OscConfig+0x27c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a2a      	ldr	r2, [pc, #168]	@ (8001bd8 <HAL_RCC_OscConfig+0x27c>)
 8001b2e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b34:	f7ff fbb2 	bl	800129c <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b3c:	f7ff fbae 	bl	800129c <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e20e      	b.n	8001f6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b4e:	4b22      	ldr	r3, [pc, #136]	@ (8001bd8 <HAL_RCC_OscConfig+0x27c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f0      	bne.n	8001b3c <HAL_RCC_OscConfig+0x1e0>
 8001b5a:	e000      	b.n	8001b5e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d041      	beq.n	8001bee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d01c      	beq.n	8001bac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b72:	4b19      	ldr	r3, [pc, #100]	@ (8001bd8 <HAL_RCC_OscConfig+0x27c>)
 8001b74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b78:	4a17      	ldr	r2, [pc, #92]	@ (8001bd8 <HAL_RCC_OscConfig+0x27c>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b82:	f7ff fb8b 	bl	800129c <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b8a:	f7ff fb87 	bl	800129c <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e1e7      	b.n	8001f6c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd8 <HAL_RCC_OscConfig+0x27c>)
 8001b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0ef      	beq.n	8001b8a <HAL_RCC_OscConfig+0x22e>
 8001baa:	e020      	b.n	8001bee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bac:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd8 <HAL_RCC_OscConfig+0x27c>)
 8001bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bb2:	4a09      	ldr	r2, [pc, #36]	@ (8001bd8 <HAL_RCC_OscConfig+0x27c>)
 8001bb4:	f023 0301 	bic.w	r3, r3, #1
 8001bb8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bbc:	f7ff fb6e 	bl	800129c <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bc2:	e00d      	b.n	8001be0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc4:	f7ff fb6a 	bl	800129c <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d906      	bls.n	8001be0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e1ca      	b.n	8001f6c <HAL_RCC_OscConfig+0x610>
 8001bd6:	bf00      	nop
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001be0:	4b8c      	ldr	r3, [pc, #560]	@ (8001e14 <HAL_RCC_OscConfig+0x4b8>)
 8001be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1ea      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0304 	and.w	r3, r3, #4
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f000 80a6 	beq.w	8001d48 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c00:	4b84      	ldr	r3, [pc, #528]	@ (8001e14 <HAL_RCC_OscConfig+0x4b8>)
 8001c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <HAL_RCC_OscConfig+0x2b4>
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e000      	b.n	8001c12 <HAL_RCC_OscConfig+0x2b6>
 8001c10:	2300      	movs	r3, #0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d00d      	beq.n	8001c32 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c16:	4b7f      	ldr	r3, [pc, #508]	@ (8001e14 <HAL_RCC_OscConfig+0x4b8>)
 8001c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c1a:	4a7e      	ldr	r2, [pc, #504]	@ (8001e14 <HAL_RCC_OscConfig+0x4b8>)
 8001c1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c20:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c22:	4b7c      	ldr	r3, [pc, #496]	@ (8001e14 <HAL_RCC_OscConfig+0x4b8>)
 8001c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c32:	4b79      	ldr	r3, [pc, #484]	@ (8001e18 <HAL_RCC_OscConfig+0x4bc>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d118      	bne.n	8001c70 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c3e:	4b76      	ldr	r3, [pc, #472]	@ (8001e18 <HAL_RCC_OscConfig+0x4bc>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a75      	ldr	r2, [pc, #468]	@ (8001e18 <HAL_RCC_OscConfig+0x4bc>)
 8001c44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c4a:	f7ff fb27 	bl	800129c <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c52:	f7ff fb23 	bl	800129c <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e183      	b.n	8001f6c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c64:	4b6c      	ldr	r3, [pc, #432]	@ (8001e18 <HAL_RCC_OscConfig+0x4bc>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0f0      	beq.n	8001c52 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d108      	bne.n	8001c8a <HAL_RCC_OscConfig+0x32e>
 8001c78:	4b66      	ldr	r3, [pc, #408]	@ (8001e14 <HAL_RCC_OscConfig+0x4b8>)
 8001c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c7e:	4a65      	ldr	r2, [pc, #404]	@ (8001e14 <HAL_RCC_OscConfig+0x4b8>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c88:	e024      	b.n	8001cd4 <HAL_RCC_OscConfig+0x378>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2b05      	cmp	r3, #5
 8001c90:	d110      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x358>
 8001c92:	4b60      	ldr	r3, [pc, #384]	@ (8001e14 <HAL_RCC_OscConfig+0x4b8>)
 8001c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c98:	4a5e      	ldr	r2, [pc, #376]	@ (8001e14 <HAL_RCC_OscConfig+0x4b8>)
 8001c9a:	f043 0304 	orr.w	r3, r3, #4
 8001c9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ca2:	4b5c      	ldr	r3, [pc, #368]	@ (8001e14 <HAL_RCC_OscConfig+0x4b8>)
 8001ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ca8:	4a5a      	ldr	r2, [pc, #360]	@ (8001e14 <HAL_RCC_OscConfig+0x4b8>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cb2:	e00f      	b.n	8001cd4 <HAL_RCC_OscConfig+0x378>
 8001cb4:	4b57      	ldr	r3, [pc, #348]	@ (8001e14 <HAL_RCC_OscConfig+0x4b8>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cba:	4a56      	ldr	r2, [pc, #344]	@ (8001e14 <HAL_RCC_OscConfig+0x4b8>)
 8001cbc:	f023 0301 	bic.w	r3, r3, #1
 8001cc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cc4:	4b53      	ldr	r3, [pc, #332]	@ (8001e14 <HAL_RCC_OscConfig+0x4b8>)
 8001cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cca:	4a52      	ldr	r2, [pc, #328]	@ (8001e14 <HAL_RCC_OscConfig+0x4b8>)
 8001ccc:	f023 0304 	bic.w	r3, r3, #4
 8001cd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d016      	beq.n	8001d0a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cdc:	f7ff fade 	bl	800129c <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ce2:	e00a      	b.n	8001cfa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce4:	f7ff fada 	bl	800129c <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e138      	b.n	8001f6c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cfa:	4b46      	ldr	r3, [pc, #280]	@ (8001e14 <HAL_RCC_OscConfig+0x4b8>)
 8001cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0ed      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x388>
 8001d08:	e015      	b.n	8001d36 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d0a:	f7ff fac7 	bl	800129c <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d10:	e00a      	b.n	8001d28 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d12:	f7ff fac3 	bl	800129c <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e121      	b.n	8001f6c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d28:	4b3a      	ldr	r3, [pc, #232]	@ (8001e14 <HAL_RCC_OscConfig+0x4b8>)
 8001d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1ed      	bne.n	8001d12 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d36:	7ffb      	ldrb	r3, [r7, #31]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d105      	bne.n	8001d48 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d3c:	4b35      	ldr	r3, [pc, #212]	@ (8001e14 <HAL_RCC_OscConfig+0x4b8>)
 8001d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d40:	4a34      	ldr	r2, [pc, #208]	@ (8001e14 <HAL_RCC_OscConfig+0x4b8>)
 8001d42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d46:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0320 	and.w	r3, r3, #32
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d03c      	beq.n	8001dce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d01c      	beq.n	8001d96 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d5c:	4b2d      	ldr	r3, [pc, #180]	@ (8001e14 <HAL_RCC_OscConfig+0x4b8>)
 8001d5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d62:	4a2c      	ldr	r2, [pc, #176]	@ (8001e14 <HAL_RCC_OscConfig+0x4b8>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d6c:	f7ff fa96 	bl	800129c <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d74:	f7ff fa92 	bl	800129c <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e0f2      	b.n	8001f6c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d86:	4b23      	ldr	r3, [pc, #140]	@ (8001e14 <HAL_RCC_OscConfig+0x4b8>)
 8001d88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0ef      	beq.n	8001d74 <HAL_RCC_OscConfig+0x418>
 8001d94:	e01b      	b.n	8001dce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d96:	4b1f      	ldr	r3, [pc, #124]	@ (8001e14 <HAL_RCC_OscConfig+0x4b8>)
 8001d98:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8001e14 <HAL_RCC_OscConfig+0x4b8>)
 8001d9e:	f023 0301 	bic.w	r3, r3, #1
 8001da2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da6:	f7ff fa79 	bl	800129c <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dae:	f7ff fa75 	bl	800129c <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e0d5      	b.n	8001f6c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001dc0:	4b14      	ldr	r3, [pc, #80]	@ (8001e14 <HAL_RCC_OscConfig+0x4b8>)
 8001dc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1ef      	bne.n	8001dae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f000 80c9 	beq.w	8001f6a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001e14 <HAL_RCC_OscConfig+0x4b8>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 030c 	and.w	r3, r3, #12
 8001de0:	2b0c      	cmp	r3, #12
 8001de2:	f000 8083 	beq.w	8001eec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d15e      	bne.n	8001eac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dee:	4b09      	ldr	r3, [pc, #36]	@ (8001e14 <HAL_RCC_OscConfig+0x4b8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a08      	ldr	r2, [pc, #32]	@ (8001e14 <HAL_RCC_OscConfig+0x4b8>)
 8001df4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001df8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfa:	f7ff fa4f 	bl	800129c <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e00:	e00c      	b.n	8001e1c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e02:	f7ff fa4b 	bl	800129c <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d905      	bls.n	8001e1c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e0ab      	b.n	8001f6c <HAL_RCC_OscConfig+0x610>
 8001e14:	40021000 	.word	0x40021000
 8001e18:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e1c:	4b55      	ldr	r3, [pc, #340]	@ (8001f74 <HAL_RCC_OscConfig+0x618>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1ec      	bne.n	8001e02 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e28:	4b52      	ldr	r3, [pc, #328]	@ (8001f74 <HAL_RCC_OscConfig+0x618>)
 8001e2a:	68da      	ldr	r2, [r3, #12]
 8001e2c:	4b52      	ldr	r3, [pc, #328]	@ (8001f78 <HAL_RCC_OscConfig+0x61c>)
 8001e2e:	4013      	ands	r3, r2
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6a11      	ldr	r1, [r2, #32]
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e38:	3a01      	subs	r2, #1
 8001e3a:	0112      	lsls	r2, r2, #4
 8001e3c:	4311      	orrs	r1, r2
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001e42:	0212      	lsls	r2, r2, #8
 8001e44:	4311      	orrs	r1, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001e4a:	0852      	lsrs	r2, r2, #1
 8001e4c:	3a01      	subs	r2, #1
 8001e4e:	0552      	lsls	r2, r2, #21
 8001e50:	4311      	orrs	r1, r2
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001e56:	0852      	lsrs	r2, r2, #1
 8001e58:	3a01      	subs	r2, #1
 8001e5a:	0652      	lsls	r2, r2, #25
 8001e5c:	4311      	orrs	r1, r2
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001e62:	06d2      	lsls	r2, r2, #27
 8001e64:	430a      	orrs	r2, r1
 8001e66:	4943      	ldr	r1, [pc, #268]	@ (8001f74 <HAL_RCC_OscConfig+0x618>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e6c:	4b41      	ldr	r3, [pc, #260]	@ (8001f74 <HAL_RCC_OscConfig+0x618>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a40      	ldr	r2, [pc, #256]	@ (8001f74 <HAL_RCC_OscConfig+0x618>)
 8001e72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e76:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e78:	4b3e      	ldr	r3, [pc, #248]	@ (8001f74 <HAL_RCC_OscConfig+0x618>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	4a3d      	ldr	r2, [pc, #244]	@ (8001f74 <HAL_RCC_OscConfig+0x618>)
 8001e7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e82:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e84:	f7ff fa0a 	bl	800129c <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e8c:	f7ff fa06 	bl	800129c <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e066      	b.n	8001f6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e9e:	4b35      	ldr	r3, [pc, #212]	@ (8001f74 <HAL_RCC_OscConfig+0x618>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCC_OscConfig+0x530>
 8001eaa:	e05e      	b.n	8001f6a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eac:	4b31      	ldr	r3, [pc, #196]	@ (8001f74 <HAL_RCC_OscConfig+0x618>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a30      	ldr	r2, [pc, #192]	@ (8001f74 <HAL_RCC_OscConfig+0x618>)
 8001eb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001eb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb8:	f7ff f9f0 	bl	800129c <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec0:	f7ff f9ec 	bl	800129c <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e04c      	b.n	8001f6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ed2:	4b28      	ldr	r3, [pc, #160]	@ (8001f74 <HAL_RCC_OscConfig+0x618>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001ede:	4b25      	ldr	r3, [pc, #148]	@ (8001f74 <HAL_RCC_OscConfig+0x618>)
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	4924      	ldr	r1, [pc, #144]	@ (8001f74 <HAL_RCC_OscConfig+0x618>)
 8001ee4:	4b25      	ldr	r3, [pc, #148]	@ (8001f7c <HAL_RCC_OscConfig+0x620>)
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	60cb      	str	r3, [r1, #12]
 8001eea:	e03e      	b.n	8001f6a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d101      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e039      	b.n	8001f6c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001ef8:	4b1e      	ldr	r3, [pc, #120]	@ (8001f74 <HAL_RCC_OscConfig+0x618>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f003 0203 	and.w	r2, r3, #3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d12c      	bne.n	8001f66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f16:	3b01      	subs	r3, #1
 8001f18:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d123      	bne.n	8001f66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f28:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d11b      	bne.n	8001f66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f38:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d113      	bne.n	8001f66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f48:	085b      	lsrs	r3, r3, #1
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d109      	bne.n	8001f66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f5c:	085b      	lsrs	r3, r3, #1
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d001      	beq.n	8001f6a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3720      	adds	r7, #32
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40021000 	.word	0x40021000
 8001f78:	019f800c 	.word	0x019f800c
 8001f7c:	feeefffc 	.word	0xfeeefffc

08001f80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e11e      	b.n	80021d6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f98:	4b91      	ldr	r3, [pc, #580]	@ (80021e0 <HAL_RCC_ClockConfig+0x260>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 030f 	and.w	r3, r3, #15
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d910      	bls.n	8001fc8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa6:	4b8e      	ldr	r3, [pc, #568]	@ (80021e0 <HAL_RCC_ClockConfig+0x260>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f023 020f 	bic.w	r2, r3, #15
 8001fae:	498c      	ldr	r1, [pc, #560]	@ (80021e0 <HAL_RCC_ClockConfig+0x260>)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb6:	4b8a      	ldr	r3, [pc, #552]	@ (80021e0 <HAL_RCC_ClockConfig+0x260>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d001      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e106      	b.n	80021d6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d073      	beq.n	80020bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2b03      	cmp	r3, #3
 8001fda:	d129      	bne.n	8002030 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fdc:	4b81      	ldr	r3, [pc, #516]	@ (80021e4 <HAL_RCC_ClockConfig+0x264>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e0f4      	b.n	80021d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001fec:	f000 f99e 	bl	800232c <RCC_GetSysClockFreqFromPLLSource>
 8001ff0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	4a7c      	ldr	r2, [pc, #496]	@ (80021e8 <HAL_RCC_ClockConfig+0x268>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d93f      	bls.n	800207a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ffa:	4b7a      	ldr	r3, [pc, #488]	@ (80021e4 <HAL_RCC_ClockConfig+0x264>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d009      	beq.n	800201a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800200e:	2b00      	cmp	r3, #0
 8002010:	d033      	beq.n	800207a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002016:	2b00      	cmp	r3, #0
 8002018:	d12f      	bne.n	800207a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800201a:	4b72      	ldr	r3, [pc, #456]	@ (80021e4 <HAL_RCC_ClockConfig+0x264>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002022:	4a70      	ldr	r2, [pc, #448]	@ (80021e4 <HAL_RCC_ClockConfig+0x264>)
 8002024:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002028:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800202a:	2380      	movs	r3, #128	@ 0x80
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	e024      	b.n	800207a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d107      	bne.n	8002048 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002038:	4b6a      	ldr	r3, [pc, #424]	@ (80021e4 <HAL_RCC_ClockConfig+0x264>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d109      	bne.n	8002058 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0c6      	b.n	80021d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002048:	4b66      	ldr	r3, [pc, #408]	@ (80021e4 <HAL_RCC_ClockConfig+0x264>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e0be      	b.n	80021d6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002058:	f000 f8ce 	bl	80021f8 <HAL_RCC_GetSysClockFreq>
 800205c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	4a61      	ldr	r2, [pc, #388]	@ (80021e8 <HAL_RCC_ClockConfig+0x268>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d909      	bls.n	800207a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002066:	4b5f      	ldr	r3, [pc, #380]	@ (80021e4 <HAL_RCC_ClockConfig+0x264>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800206e:	4a5d      	ldr	r2, [pc, #372]	@ (80021e4 <HAL_RCC_ClockConfig+0x264>)
 8002070:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002074:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002076:	2380      	movs	r3, #128	@ 0x80
 8002078:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800207a:	4b5a      	ldr	r3, [pc, #360]	@ (80021e4 <HAL_RCC_ClockConfig+0x264>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f023 0203 	bic.w	r2, r3, #3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	4957      	ldr	r1, [pc, #348]	@ (80021e4 <HAL_RCC_ClockConfig+0x264>)
 8002088:	4313      	orrs	r3, r2
 800208a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800208c:	f7ff f906 	bl	800129c <HAL_GetTick>
 8002090:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002092:	e00a      	b.n	80020aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002094:	f7ff f902 	bl	800129c <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e095      	b.n	80021d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020aa:	4b4e      	ldr	r3, [pc, #312]	@ (80021e4 <HAL_RCC_ClockConfig+0x264>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 020c 	and.w	r2, r3, #12
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d1eb      	bne.n	8002094 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d023      	beq.n	8002110 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d4:	4b43      	ldr	r3, [pc, #268]	@ (80021e4 <HAL_RCC_ClockConfig+0x264>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	4a42      	ldr	r2, [pc, #264]	@ (80021e4 <HAL_RCC_ClockConfig+0x264>)
 80020da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80020de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0308 	and.w	r3, r3, #8
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d007      	beq.n	80020fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80020ec:	4b3d      	ldr	r3, [pc, #244]	@ (80021e4 <HAL_RCC_ClockConfig+0x264>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80020f4:	4a3b      	ldr	r2, [pc, #236]	@ (80021e4 <HAL_RCC_ClockConfig+0x264>)
 80020f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80020fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020fc:	4b39      	ldr	r3, [pc, #228]	@ (80021e4 <HAL_RCC_ClockConfig+0x264>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	4936      	ldr	r1, [pc, #216]	@ (80021e4 <HAL_RCC_ClockConfig+0x264>)
 800210a:	4313      	orrs	r3, r2
 800210c:	608b      	str	r3, [r1, #8]
 800210e:	e008      	b.n	8002122 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	2b80      	cmp	r3, #128	@ 0x80
 8002114:	d105      	bne.n	8002122 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002116:	4b33      	ldr	r3, [pc, #204]	@ (80021e4 <HAL_RCC_ClockConfig+0x264>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	4a32      	ldr	r2, [pc, #200]	@ (80021e4 <HAL_RCC_ClockConfig+0x264>)
 800211c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002120:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002122:	4b2f      	ldr	r3, [pc, #188]	@ (80021e0 <HAL_RCC_ClockConfig+0x260>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d21d      	bcs.n	800216c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002130:	4b2b      	ldr	r3, [pc, #172]	@ (80021e0 <HAL_RCC_ClockConfig+0x260>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f023 020f 	bic.w	r2, r3, #15
 8002138:	4929      	ldr	r1, [pc, #164]	@ (80021e0 <HAL_RCC_ClockConfig+0x260>)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	4313      	orrs	r3, r2
 800213e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002140:	f7ff f8ac 	bl	800129c <HAL_GetTick>
 8002144:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002146:	e00a      	b.n	800215e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002148:	f7ff f8a8 	bl	800129c <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002156:	4293      	cmp	r3, r2
 8002158:	d901      	bls.n	800215e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e03b      	b.n	80021d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215e:	4b20      	ldr	r3, [pc, #128]	@ (80021e0 <HAL_RCC_ClockConfig+0x260>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	429a      	cmp	r2, r3
 800216a:	d1ed      	bne.n	8002148 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0304 	and.w	r3, r3, #4
 8002174:	2b00      	cmp	r3, #0
 8002176:	d008      	beq.n	800218a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002178:	4b1a      	ldr	r3, [pc, #104]	@ (80021e4 <HAL_RCC_ClockConfig+0x264>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	4917      	ldr	r1, [pc, #92]	@ (80021e4 <HAL_RCC_ClockConfig+0x264>)
 8002186:	4313      	orrs	r3, r2
 8002188:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0308 	and.w	r3, r3, #8
 8002192:	2b00      	cmp	r3, #0
 8002194:	d009      	beq.n	80021aa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002196:	4b13      	ldr	r3, [pc, #76]	@ (80021e4 <HAL_RCC_ClockConfig+0x264>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	490f      	ldr	r1, [pc, #60]	@ (80021e4 <HAL_RCC_ClockConfig+0x264>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021aa:	f000 f825 	bl	80021f8 <HAL_RCC_GetSysClockFreq>
 80021ae:	4602      	mov	r2, r0
 80021b0:	4b0c      	ldr	r3, [pc, #48]	@ (80021e4 <HAL_RCC_ClockConfig+0x264>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	091b      	lsrs	r3, r3, #4
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	490c      	ldr	r1, [pc, #48]	@ (80021ec <HAL_RCC_ClockConfig+0x26c>)
 80021bc:	5ccb      	ldrb	r3, [r1, r3]
 80021be:	f003 031f 	and.w	r3, r3, #31
 80021c2:	fa22 f303 	lsr.w	r3, r2, r3
 80021c6:	4a0a      	ldr	r2, [pc, #40]	@ (80021f0 <HAL_RCC_ClockConfig+0x270>)
 80021c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021ca:	4b0a      	ldr	r3, [pc, #40]	@ (80021f4 <HAL_RCC_ClockConfig+0x274>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff f818 	bl	8001204 <HAL_InitTick>
 80021d4:	4603      	mov	r3, r0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40022000 	.word	0x40022000
 80021e4:	40021000 	.word	0x40021000
 80021e8:	04c4b400 	.word	0x04c4b400
 80021ec:	0800610c 	.word	0x0800610c
 80021f0:	20000000 	.word	0x20000000
 80021f4:	20000004 	.word	0x20000004

080021f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b087      	sub	sp, #28
 80021fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80021fe:	4b2c      	ldr	r3, [pc, #176]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 030c 	and.w	r3, r3, #12
 8002206:	2b04      	cmp	r3, #4
 8002208:	d102      	bne.n	8002210 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800220a:	4b2a      	ldr	r3, [pc, #168]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800220c:	613b      	str	r3, [r7, #16]
 800220e:	e047      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002210:	4b27      	ldr	r3, [pc, #156]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 030c 	and.w	r3, r3, #12
 8002218:	2b08      	cmp	r3, #8
 800221a:	d102      	bne.n	8002222 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800221c:	4b26      	ldr	r3, [pc, #152]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800221e:	613b      	str	r3, [r7, #16]
 8002220:	e03e      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002222:	4b23      	ldr	r3, [pc, #140]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 030c 	and.w	r3, r3, #12
 800222a:	2b0c      	cmp	r3, #12
 800222c:	d136      	bne.n	800229c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800222e:	4b20      	ldr	r3, [pc, #128]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002238:	4b1d      	ldr	r3, [pc, #116]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	091b      	lsrs	r3, r3, #4
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	3301      	adds	r3, #1
 8002244:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2b03      	cmp	r3, #3
 800224a:	d10c      	bne.n	8002266 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800224c:	4a1a      	ldr	r2, [pc, #104]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	fbb2 f3f3 	udiv	r3, r2, r3
 8002254:	4a16      	ldr	r2, [pc, #88]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002256:	68d2      	ldr	r2, [r2, #12]
 8002258:	0a12      	lsrs	r2, r2, #8
 800225a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800225e:	fb02 f303 	mul.w	r3, r2, r3
 8002262:	617b      	str	r3, [r7, #20]
      break;
 8002264:	e00c      	b.n	8002280 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002266:	4a13      	ldr	r2, [pc, #76]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	fbb2 f3f3 	udiv	r3, r2, r3
 800226e:	4a10      	ldr	r2, [pc, #64]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002270:	68d2      	ldr	r2, [r2, #12]
 8002272:	0a12      	lsrs	r2, r2, #8
 8002274:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002278:	fb02 f303 	mul.w	r3, r2, r3
 800227c:	617b      	str	r3, [r7, #20]
      break;
 800227e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002280:	4b0b      	ldr	r3, [pc, #44]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	0e5b      	lsrs	r3, r3, #25
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	3301      	adds	r3, #1
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	fbb2 f3f3 	udiv	r3, r2, r3
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	e001      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800229c:	2300      	movs	r3, #0
 800229e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80022a0:	693b      	ldr	r3, [r7, #16]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	371c      	adds	r7, #28
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	40021000 	.word	0x40021000
 80022b4:	00f42400 	.word	0x00f42400
 80022b8:	016e3600 	.word	0x016e3600

080022bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022c0:	4b03      	ldr	r3, [pc, #12]	@ (80022d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80022c2:	681b      	ldr	r3, [r3, #0]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	20000000 	.word	0x20000000

080022d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022d8:	f7ff fff0 	bl	80022bc <HAL_RCC_GetHCLKFreq>
 80022dc:	4602      	mov	r2, r0
 80022de:	4b06      	ldr	r3, [pc, #24]	@ (80022f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	0a1b      	lsrs	r3, r3, #8
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	4904      	ldr	r1, [pc, #16]	@ (80022fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80022ea:	5ccb      	ldrb	r3, [r1, r3]
 80022ec:	f003 031f 	and.w	r3, r3, #31
 80022f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40021000 	.word	0x40021000
 80022fc:	0800611c 	.word	0x0800611c

08002300 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002304:	f7ff ffda 	bl	80022bc <HAL_RCC_GetHCLKFreq>
 8002308:	4602      	mov	r2, r0
 800230a:	4b06      	ldr	r3, [pc, #24]	@ (8002324 <HAL_RCC_GetPCLK2Freq+0x24>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	0adb      	lsrs	r3, r3, #11
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	4904      	ldr	r1, [pc, #16]	@ (8002328 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002316:	5ccb      	ldrb	r3, [r1, r3]
 8002318:	f003 031f 	and.w	r3, r3, #31
 800231c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002320:	4618      	mov	r0, r3
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40021000 	.word	0x40021000
 8002328:	0800611c 	.word	0x0800611c

0800232c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800232c:	b480      	push	{r7}
 800232e:	b087      	sub	sp, #28
 8002330:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002332:	4b1e      	ldr	r3, [pc, #120]	@ (80023ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800233c:	4b1b      	ldr	r3, [pc, #108]	@ (80023ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	091b      	lsrs	r3, r3, #4
 8002342:	f003 030f 	and.w	r3, r3, #15
 8002346:	3301      	adds	r3, #1
 8002348:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	2b03      	cmp	r3, #3
 800234e:	d10c      	bne.n	800236a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002350:	4a17      	ldr	r2, [pc, #92]	@ (80023b0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	fbb2 f3f3 	udiv	r3, r2, r3
 8002358:	4a14      	ldr	r2, [pc, #80]	@ (80023ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800235a:	68d2      	ldr	r2, [r2, #12]
 800235c:	0a12      	lsrs	r2, r2, #8
 800235e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002362:	fb02 f303 	mul.w	r3, r2, r3
 8002366:	617b      	str	r3, [r7, #20]
    break;
 8002368:	e00c      	b.n	8002384 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800236a:	4a12      	ldr	r2, [pc, #72]	@ (80023b4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002372:	4a0e      	ldr	r2, [pc, #56]	@ (80023ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002374:	68d2      	ldr	r2, [r2, #12]
 8002376:	0a12      	lsrs	r2, r2, #8
 8002378:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800237c:	fb02 f303 	mul.w	r3, r2, r3
 8002380:	617b      	str	r3, [r7, #20]
    break;
 8002382:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002384:	4b09      	ldr	r3, [pc, #36]	@ (80023ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	0e5b      	lsrs	r3, r3, #25
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	3301      	adds	r3, #1
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	fbb2 f3f3 	udiv	r3, r2, r3
 800239c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800239e:	687b      	ldr	r3, [r7, #4]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	371c      	adds	r7, #28
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	40021000 	.word	0x40021000
 80023b0:	016e3600 	.word	0x016e3600
 80023b4:	00f42400 	.word	0x00f42400

080023b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023c0:	2300      	movs	r3, #0
 80023c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023c4:	2300      	movs	r3, #0
 80023c6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f000 8098 	beq.w	8002506 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d6:	2300      	movs	r3, #0
 80023d8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023da:	4b43      	ldr	r3, [pc, #268]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10d      	bne.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e6:	4b40      	ldr	r3, [pc, #256]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ea:	4a3f      	ldr	r2, [pc, #252]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80023f2:	4b3d      	ldr	r3, [pc, #244]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023fa:	60bb      	str	r3, [r7, #8]
 80023fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fe:	2301      	movs	r3, #1
 8002400:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002402:	4b3a      	ldr	r3, [pc, #232]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a39      	ldr	r2, [pc, #228]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002408:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800240c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800240e:	f7fe ff45 	bl	800129c <HAL_GetTick>
 8002412:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002414:	e009      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002416:	f7fe ff41 	bl	800129c <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d902      	bls.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	74fb      	strb	r3, [r7, #19]
        break;
 8002428:	e005      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800242a:	4b30      	ldr	r3, [pc, #192]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0ef      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002436:	7cfb      	ldrb	r3, [r7, #19]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d159      	bne.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800243c:	4b2a      	ldr	r3, [pc, #168]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800243e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002442:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002446:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d01e      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	429a      	cmp	r2, r3
 8002456:	d019      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002458:	4b23      	ldr	r3, [pc, #140]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800245a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800245e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002462:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002464:	4b20      	ldr	r3, [pc, #128]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800246a:	4a1f      	ldr	r2, [pc, #124]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800246c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002470:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002474:	4b1c      	ldr	r3, [pc, #112]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800247a:	4a1b      	ldr	r2, [pc, #108]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800247c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002480:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002484:	4a18      	ldr	r2, [pc, #96]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d016      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002496:	f7fe ff01 	bl	800129c <HAL_GetTick>
 800249a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800249c:	e00b      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249e:	f7fe fefd 	bl	800129c <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d902      	bls.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	74fb      	strb	r3, [r7, #19]
            break;
 80024b4:	e006      	b.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b6:	4b0c      	ldr	r3, [pc, #48]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0ec      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80024c4:	7cfb      	ldrb	r3, [r7, #19]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10b      	bne.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024ca:	4b07      	ldr	r3, [pc, #28]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d8:	4903      	ldr	r1, [pc, #12]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80024e0:	e008      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024e2:	7cfb      	ldrb	r3, [r7, #19]
 80024e4:	74bb      	strb	r3, [r7, #18]
 80024e6:	e005      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80024e8:	40021000 	.word	0x40021000
 80024ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024f0:	7cfb      	ldrb	r3, [r7, #19]
 80024f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024f4:	7c7b      	ldrb	r3, [r7, #17]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d105      	bne.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024fa:	4ba6      	ldr	r3, [pc, #664]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fe:	4aa5      	ldr	r2, [pc, #660]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002500:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002504:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00a      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002512:	4ba0      	ldr	r3, [pc, #640]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002518:	f023 0203 	bic.w	r2, r3, #3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	499c      	ldr	r1, [pc, #624]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002522:	4313      	orrs	r3, r2
 8002524:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00a      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002534:	4b97      	ldr	r3, [pc, #604]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800253a:	f023 020c 	bic.w	r2, r3, #12
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	4994      	ldr	r1, [pc, #592]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002544:	4313      	orrs	r3, r2
 8002546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0304 	and.w	r3, r3, #4
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00a      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002556:	4b8f      	ldr	r3, [pc, #572]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800255c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	498b      	ldr	r1, [pc, #556]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002566:	4313      	orrs	r3, r2
 8002568:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00a      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002578:	4b86      	ldr	r3, [pc, #536]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800257a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800257e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	4983      	ldr	r1, [pc, #524]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002588:	4313      	orrs	r3, r2
 800258a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0320 	and.w	r3, r3, #32
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00a      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800259a:	4b7e      	ldr	r3, [pc, #504]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800259c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025a0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	497a      	ldr	r1, [pc, #488]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00a      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025bc:	4b75      	ldr	r3, [pc, #468]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	4972      	ldr	r1, [pc, #456]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00a      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025de:	4b6d      	ldr	r3, [pc, #436]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025e4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	4969      	ldr	r1, [pc, #420]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00a      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002600:	4b64      	ldr	r3, [pc, #400]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002606:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	4961      	ldr	r1, [pc, #388]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002610:	4313      	orrs	r3, r2
 8002612:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00a      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002622:	4b5c      	ldr	r3, [pc, #368]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002628:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002630:	4958      	ldr	r1, [pc, #352]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002632:	4313      	orrs	r3, r2
 8002634:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002640:	2b00      	cmp	r3, #0
 8002642:	d015      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002644:	4b53      	ldr	r3, [pc, #332]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800264a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002652:	4950      	ldr	r1, [pc, #320]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002654:	4313      	orrs	r3, r2
 8002656:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800265e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002662:	d105      	bne.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002664:	4b4b      	ldr	r3, [pc, #300]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	4a4a      	ldr	r2, [pc, #296]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800266a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800266e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002678:	2b00      	cmp	r3, #0
 800267a:	d015      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800267c:	4b45      	ldr	r3, [pc, #276]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800267e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002682:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800268a:	4942      	ldr	r1, [pc, #264]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800268c:	4313      	orrs	r3, r2
 800268e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002696:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800269a:	d105      	bne.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800269c:	4b3d      	ldr	r3, [pc, #244]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	4a3c      	ldr	r2, [pc, #240]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026a6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d015      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80026b4:	4b37      	ldr	r3, [pc, #220]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c2:	4934      	ldr	r1, [pc, #208]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026d2:	d105      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026d4:	4b2f      	ldr	r3, [pc, #188]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	4a2e      	ldr	r2, [pc, #184]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026de:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d015      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026ec:	4b29      	ldr	r3, [pc, #164]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026fa:	4926      	ldr	r1, [pc, #152]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002706:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800270a:	d105      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800270c:	4b21      	ldr	r3, [pc, #132]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	4a20      	ldr	r2, [pc, #128]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002712:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002716:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d015      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002724:	4b1b      	ldr	r3, [pc, #108]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800272a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002732:	4918      	ldr	r1, [pc, #96]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800273e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002742:	d105      	bne.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002744:	4b13      	ldr	r3, [pc, #76]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	4a12      	ldr	r2, [pc, #72]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800274a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800274e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d015      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800275c:	4b0d      	ldr	r3, [pc, #52]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800275e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002762:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800276a:	490a      	ldr	r1, [pc, #40]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800276c:	4313      	orrs	r3, r2
 800276e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002776:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800277a:	d105      	bne.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800277c:	4b05      	ldr	r3, [pc, #20]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	4a04      	ldr	r2, [pc, #16]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002782:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002786:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002788:	7cbb      	ldrb	r3, [r7, #18]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40021000 	.word	0x40021000

08002798 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e042      	b.n	8002830 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d106      	bne.n	80027c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7fe fc47 	bl	8001050 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2224      	movs	r2, #36	@ 0x24
 80027c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 0201 	bic.w	r2, r2, #1
 80027d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d002      	beq.n	80027e8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 fc4a 	bl	800307c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f97b 	bl	8002ae4 <UART_SetConfig>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e01b      	b.n	8002830 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002806:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002816:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 0201 	orr.w	r2, r2, #1
 8002826:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 fcc9 	bl	80031c0 <UART_CheckIdleState>
 800282e:	4603      	mov	r3, r0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08a      	sub	sp, #40	@ 0x28
 800283c:	af02      	add	r7, sp, #8
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	603b      	str	r3, [r7, #0]
 8002844:	4613      	mov	r3, r2
 8002846:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800284e:	2b20      	cmp	r3, #32
 8002850:	d17b      	bne.n	800294a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <HAL_UART_Transmit+0x26>
 8002858:	88fb      	ldrh	r3, [r7, #6]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e074      	b.n	800294c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2221      	movs	r2, #33	@ 0x21
 800286e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002872:	f7fe fd13 	bl	800129c <HAL_GetTick>
 8002876:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	88fa      	ldrh	r2, [r7, #6]
 800287c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	88fa      	ldrh	r2, [r7, #6]
 8002884:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002890:	d108      	bne.n	80028a4 <HAL_UART_Transmit+0x6c>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d104      	bne.n	80028a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800289a:	2300      	movs	r3, #0
 800289c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	61bb      	str	r3, [r7, #24]
 80028a2:	e003      	b.n	80028ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80028ac:	e030      	b.n	8002910 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	2200      	movs	r2, #0
 80028b6:	2180      	movs	r1, #128	@ 0x80
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 fd2b 	bl	8003314 <UART_WaitOnFlagUntilTimeout>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d005      	beq.n	80028d0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e03d      	b.n	800294c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10b      	bne.n	80028ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	461a      	mov	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028e4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	3302      	adds	r3, #2
 80028ea:	61bb      	str	r3, [r7, #24]
 80028ec:	e007      	b.n	80028fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	781a      	ldrb	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	3301      	adds	r3, #1
 80028fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002904:	b29b      	uxth	r3, r3
 8002906:	3b01      	subs	r3, #1
 8002908:	b29a      	uxth	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002916:	b29b      	uxth	r3, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1c8      	bne.n	80028ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	2200      	movs	r2, #0
 8002924:	2140      	movs	r1, #64	@ 0x40
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f000 fcf4 	bl	8003314 <UART_WaitOnFlagUntilTimeout>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d005      	beq.n	800293e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2220      	movs	r2, #32
 8002936:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e006      	b.n	800294c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2220      	movs	r2, #32
 8002942:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002946:	2300      	movs	r3, #0
 8002948:	e000      	b.n	800294c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800294a:	2302      	movs	r3, #2
  }
}
 800294c:	4618      	mov	r0, r3
 800294e:	3720      	adds	r7, #32
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b08a      	sub	sp, #40	@ 0x28
 8002958:	af02      	add	r7, sp, #8
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	603b      	str	r3, [r7, #0]
 8002960:	4613      	mov	r3, r2
 8002962:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800296a:	2b20      	cmp	r3, #32
 800296c:	f040 80b5 	bne.w	8002ada <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d002      	beq.n	800297c <HAL_UART_Receive+0x28>
 8002976:	88fb      	ldrh	r3, [r7, #6]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e0ad      	b.n	8002adc <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2222      	movs	r2, #34	@ 0x22
 800298c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002996:	f7fe fc81 	bl	800129c <HAL_GetTick>
 800299a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	88fa      	ldrh	r2, [r7, #6]
 80029a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	88fa      	ldrh	r2, [r7, #6]
 80029a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029b4:	d10e      	bne.n	80029d4 <HAL_UART_Receive+0x80>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d105      	bne.n	80029ca <HAL_UART_Receive+0x76>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80029c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80029c8:	e02d      	b.n	8002a26 <HAL_UART_Receive+0xd2>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	22ff      	movs	r2, #255	@ 0xff
 80029ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80029d2:	e028      	b.n	8002a26 <HAL_UART_Receive+0xd2>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10d      	bne.n	80029f8 <HAL_UART_Receive+0xa4>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d104      	bne.n	80029ee <HAL_UART_Receive+0x9a>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	22ff      	movs	r2, #255	@ 0xff
 80029e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80029ec:	e01b      	b.n	8002a26 <HAL_UART_Receive+0xd2>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	227f      	movs	r2, #127	@ 0x7f
 80029f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80029f6:	e016      	b.n	8002a26 <HAL_UART_Receive+0xd2>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a00:	d10d      	bne.n	8002a1e <HAL_UART_Receive+0xca>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d104      	bne.n	8002a14 <HAL_UART_Receive+0xc0>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	227f      	movs	r2, #127	@ 0x7f
 8002a0e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002a12:	e008      	b.n	8002a26 <HAL_UART_Receive+0xd2>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	223f      	movs	r2, #63	@ 0x3f
 8002a18:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002a1c:	e003      	b.n	8002a26 <HAL_UART_Receive+0xd2>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8002a2c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a36:	d108      	bne.n	8002a4a <HAL_UART_Receive+0xf6>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d104      	bne.n	8002a4a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002a40:	2300      	movs	r3, #0
 8002a42:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	61bb      	str	r3, [r7, #24]
 8002a48:	e003      	b.n	8002a52 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002a52:	e036      	b.n	8002ac2 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	2120      	movs	r1, #32
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 fc58 	bl	8003314 <UART_WaitOnFlagUntilTimeout>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d005      	beq.n	8002a76 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e032      	b.n	8002adc <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10c      	bne.n	8002a96 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	8a7b      	ldrh	r3, [r7, #18]
 8002a86:	4013      	ands	r3, r2
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	3302      	adds	r3, #2
 8002a92:	61bb      	str	r3, [r7, #24]
 8002a94:	e00c      	b.n	8002ab0 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	8a7b      	ldrh	r3, [r7, #18]
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	3301      	adds	r3, #1
 8002aae:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1c2      	bne.n	8002a54 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	e000      	b.n	8002adc <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8002ada:	2302      	movs	r3, #2
  }
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3720      	adds	r7, #32
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ae8:	b08c      	sub	sp, #48	@ 0x30
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002aee:	2300      	movs	r3, #0
 8002af0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	431a      	orrs	r2, r3
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	431a      	orrs	r2, r3
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	4bab      	ldr	r3, [pc, #684]	@ (8002dc0 <UART_SetConfig+0x2dc>)
 8002b14:	4013      	ands	r3, r2
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	6812      	ldr	r2, [r2, #0]
 8002b1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b1c:	430b      	orrs	r3, r1
 8002b1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4aa0      	ldr	r2, [pc, #640]	@ (8002dc4 <UART_SetConfig+0x2e0>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d004      	beq.n	8002b50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002b5a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	6812      	ldr	r2, [r2, #0]
 8002b62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b64:	430b      	orrs	r3, r1
 8002b66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6e:	f023 010f 	bic.w	r1, r3, #15
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a91      	ldr	r2, [pc, #580]	@ (8002dc8 <UART_SetConfig+0x2e4>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d125      	bne.n	8002bd4 <UART_SetConfig+0xf0>
 8002b88:	4b90      	ldr	r3, [pc, #576]	@ (8002dcc <UART_SetConfig+0x2e8>)
 8002b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	2b03      	cmp	r3, #3
 8002b94:	d81a      	bhi.n	8002bcc <UART_SetConfig+0xe8>
 8002b96:	a201      	add	r2, pc, #4	@ (adr r2, 8002b9c <UART_SetConfig+0xb8>)
 8002b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b9c:	08002bad 	.word	0x08002bad
 8002ba0:	08002bbd 	.word	0x08002bbd
 8002ba4:	08002bb5 	.word	0x08002bb5
 8002ba8:	08002bc5 	.word	0x08002bc5
 8002bac:	2301      	movs	r3, #1
 8002bae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bb2:	e0d6      	b.n	8002d62 <UART_SetConfig+0x27e>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bba:	e0d2      	b.n	8002d62 <UART_SetConfig+0x27e>
 8002bbc:	2304      	movs	r3, #4
 8002bbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bc2:	e0ce      	b.n	8002d62 <UART_SetConfig+0x27e>
 8002bc4:	2308      	movs	r3, #8
 8002bc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bca:	e0ca      	b.n	8002d62 <UART_SetConfig+0x27e>
 8002bcc:	2310      	movs	r3, #16
 8002bce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bd2:	e0c6      	b.n	8002d62 <UART_SetConfig+0x27e>
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a7d      	ldr	r2, [pc, #500]	@ (8002dd0 <UART_SetConfig+0x2ec>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d138      	bne.n	8002c50 <UART_SetConfig+0x16c>
 8002bde:	4b7b      	ldr	r3, [pc, #492]	@ (8002dcc <UART_SetConfig+0x2e8>)
 8002be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be4:	f003 030c 	and.w	r3, r3, #12
 8002be8:	2b0c      	cmp	r3, #12
 8002bea:	d82d      	bhi.n	8002c48 <UART_SetConfig+0x164>
 8002bec:	a201      	add	r2, pc, #4	@ (adr r2, 8002bf4 <UART_SetConfig+0x110>)
 8002bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf2:	bf00      	nop
 8002bf4:	08002c29 	.word	0x08002c29
 8002bf8:	08002c49 	.word	0x08002c49
 8002bfc:	08002c49 	.word	0x08002c49
 8002c00:	08002c49 	.word	0x08002c49
 8002c04:	08002c39 	.word	0x08002c39
 8002c08:	08002c49 	.word	0x08002c49
 8002c0c:	08002c49 	.word	0x08002c49
 8002c10:	08002c49 	.word	0x08002c49
 8002c14:	08002c31 	.word	0x08002c31
 8002c18:	08002c49 	.word	0x08002c49
 8002c1c:	08002c49 	.word	0x08002c49
 8002c20:	08002c49 	.word	0x08002c49
 8002c24:	08002c41 	.word	0x08002c41
 8002c28:	2300      	movs	r3, #0
 8002c2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c2e:	e098      	b.n	8002d62 <UART_SetConfig+0x27e>
 8002c30:	2302      	movs	r3, #2
 8002c32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c36:	e094      	b.n	8002d62 <UART_SetConfig+0x27e>
 8002c38:	2304      	movs	r3, #4
 8002c3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c3e:	e090      	b.n	8002d62 <UART_SetConfig+0x27e>
 8002c40:	2308      	movs	r3, #8
 8002c42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c46:	e08c      	b.n	8002d62 <UART_SetConfig+0x27e>
 8002c48:	2310      	movs	r3, #16
 8002c4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c4e:	e088      	b.n	8002d62 <UART_SetConfig+0x27e>
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a5f      	ldr	r2, [pc, #380]	@ (8002dd4 <UART_SetConfig+0x2f0>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d125      	bne.n	8002ca6 <UART_SetConfig+0x1c2>
 8002c5a:	4b5c      	ldr	r3, [pc, #368]	@ (8002dcc <UART_SetConfig+0x2e8>)
 8002c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c60:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002c64:	2b30      	cmp	r3, #48	@ 0x30
 8002c66:	d016      	beq.n	8002c96 <UART_SetConfig+0x1b2>
 8002c68:	2b30      	cmp	r3, #48	@ 0x30
 8002c6a:	d818      	bhi.n	8002c9e <UART_SetConfig+0x1ba>
 8002c6c:	2b20      	cmp	r3, #32
 8002c6e:	d00a      	beq.n	8002c86 <UART_SetConfig+0x1a2>
 8002c70:	2b20      	cmp	r3, #32
 8002c72:	d814      	bhi.n	8002c9e <UART_SetConfig+0x1ba>
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d002      	beq.n	8002c7e <UART_SetConfig+0x19a>
 8002c78:	2b10      	cmp	r3, #16
 8002c7a:	d008      	beq.n	8002c8e <UART_SetConfig+0x1aa>
 8002c7c:	e00f      	b.n	8002c9e <UART_SetConfig+0x1ba>
 8002c7e:	2300      	movs	r3, #0
 8002c80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c84:	e06d      	b.n	8002d62 <UART_SetConfig+0x27e>
 8002c86:	2302      	movs	r3, #2
 8002c88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c8c:	e069      	b.n	8002d62 <UART_SetConfig+0x27e>
 8002c8e:	2304      	movs	r3, #4
 8002c90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c94:	e065      	b.n	8002d62 <UART_SetConfig+0x27e>
 8002c96:	2308      	movs	r3, #8
 8002c98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c9c:	e061      	b.n	8002d62 <UART_SetConfig+0x27e>
 8002c9e:	2310      	movs	r3, #16
 8002ca0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ca4:	e05d      	b.n	8002d62 <UART_SetConfig+0x27e>
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a4b      	ldr	r2, [pc, #300]	@ (8002dd8 <UART_SetConfig+0x2f4>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d125      	bne.n	8002cfc <UART_SetConfig+0x218>
 8002cb0:	4b46      	ldr	r3, [pc, #280]	@ (8002dcc <UART_SetConfig+0x2e8>)
 8002cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cb6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002cba:	2bc0      	cmp	r3, #192	@ 0xc0
 8002cbc:	d016      	beq.n	8002cec <UART_SetConfig+0x208>
 8002cbe:	2bc0      	cmp	r3, #192	@ 0xc0
 8002cc0:	d818      	bhi.n	8002cf4 <UART_SetConfig+0x210>
 8002cc2:	2b80      	cmp	r3, #128	@ 0x80
 8002cc4:	d00a      	beq.n	8002cdc <UART_SetConfig+0x1f8>
 8002cc6:	2b80      	cmp	r3, #128	@ 0x80
 8002cc8:	d814      	bhi.n	8002cf4 <UART_SetConfig+0x210>
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d002      	beq.n	8002cd4 <UART_SetConfig+0x1f0>
 8002cce:	2b40      	cmp	r3, #64	@ 0x40
 8002cd0:	d008      	beq.n	8002ce4 <UART_SetConfig+0x200>
 8002cd2:	e00f      	b.n	8002cf4 <UART_SetConfig+0x210>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cda:	e042      	b.n	8002d62 <UART_SetConfig+0x27e>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ce2:	e03e      	b.n	8002d62 <UART_SetConfig+0x27e>
 8002ce4:	2304      	movs	r3, #4
 8002ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cea:	e03a      	b.n	8002d62 <UART_SetConfig+0x27e>
 8002cec:	2308      	movs	r3, #8
 8002cee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cf2:	e036      	b.n	8002d62 <UART_SetConfig+0x27e>
 8002cf4:	2310      	movs	r3, #16
 8002cf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cfa:	e032      	b.n	8002d62 <UART_SetConfig+0x27e>
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a30      	ldr	r2, [pc, #192]	@ (8002dc4 <UART_SetConfig+0x2e0>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d12a      	bne.n	8002d5c <UART_SetConfig+0x278>
 8002d06:	4b31      	ldr	r3, [pc, #196]	@ (8002dcc <UART_SetConfig+0x2e8>)
 8002d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d0c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002d10:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002d14:	d01a      	beq.n	8002d4c <UART_SetConfig+0x268>
 8002d16:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002d1a:	d81b      	bhi.n	8002d54 <UART_SetConfig+0x270>
 8002d1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d20:	d00c      	beq.n	8002d3c <UART_SetConfig+0x258>
 8002d22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d26:	d815      	bhi.n	8002d54 <UART_SetConfig+0x270>
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <UART_SetConfig+0x250>
 8002d2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d30:	d008      	beq.n	8002d44 <UART_SetConfig+0x260>
 8002d32:	e00f      	b.n	8002d54 <UART_SetConfig+0x270>
 8002d34:	2300      	movs	r3, #0
 8002d36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d3a:	e012      	b.n	8002d62 <UART_SetConfig+0x27e>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d42:	e00e      	b.n	8002d62 <UART_SetConfig+0x27e>
 8002d44:	2304      	movs	r3, #4
 8002d46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d4a:	e00a      	b.n	8002d62 <UART_SetConfig+0x27e>
 8002d4c:	2308      	movs	r3, #8
 8002d4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d52:	e006      	b.n	8002d62 <UART_SetConfig+0x27e>
 8002d54:	2310      	movs	r3, #16
 8002d56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d5a:	e002      	b.n	8002d62 <UART_SetConfig+0x27e>
 8002d5c:	2310      	movs	r3, #16
 8002d5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a17      	ldr	r2, [pc, #92]	@ (8002dc4 <UART_SetConfig+0x2e0>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	f040 80a8 	bne.w	8002ebe <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002d6e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002d72:	2b08      	cmp	r3, #8
 8002d74:	d834      	bhi.n	8002de0 <UART_SetConfig+0x2fc>
 8002d76:	a201      	add	r2, pc, #4	@ (adr r2, 8002d7c <UART_SetConfig+0x298>)
 8002d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7c:	08002da1 	.word	0x08002da1
 8002d80:	08002de1 	.word	0x08002de1
 8002d84:	08002da9 	.word	0x08002da9
 8002d88:	08002de1 	.word	0x08002de1
 8002d8c:	08002daf 	.word	0x08002daf
 8002d90:	08002de1 	.word	0x08002de1
 8002d94:	08002de1 	.word	0x08002de1
 8002d98:	08002de1 	.word	0x08002de1
 8002d9c:	08002db7 	.word	0x08002db7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002da0:	f7ff fa98 	bl	80022d4 <HAL_RCC_GetPCLK1Freq>
 8002da4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002da6:	e021      	b.n	8002dec <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002da8:	4b0c      	ldr	r3, [pc, #48]	@ (8002ddc <UART_SetConfig+0x2f8>)
 8002daa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002dac:	e01e      	b.n	8002dec <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dae:	f7ff fa23 	bl	80021f8 <HAL_RCC_GetSysClockFreq>
 8002db2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002db4:	e01a      	b.n	8002dec <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002db6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002dba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002dbc:	e016      	b.n	8002dec <UART_SetConfig+0x308>
 8002dbe:	bf00      	nop
 8002dc0:	cfff69f3 	.word	0xcfff69f3
 8002dc4:	40008000 	.word	0x40008000
 8002dc8:	40013800 	.word	0x40013800
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	40004400 	.word	0x40004400
 8002dd4:	40004800 	.word	0x40004800
 8002dd8:	40004c00 	.word	0x40004c00
 8002ddc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002dea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 812a 	beq.w	8003048 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df8:	4a9e      	ldr	r2, [pc, #632]	@ (8003074 <UART_SetConfig+0x590>)
 8002dfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e02:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	4413      	add	r3, r2
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d305      	bcc.n	8002e24 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d903      	bls.n	8002e2c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002e2a:	e10d      	b.n	8003048 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2e:	2200      	movs	r2, #0
 8002e30:	60bb      	str	r3, [r7, #8]
 8002e32:	60fa      	str	r2, [r7, #12]
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e38:	4a8e      	ldr	r2, [pc, #568]	@ (8003074 <UART_SetConfig+0x590>)
 8002e3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	2200      	movs	r2, #0
 8002e42:	603b      	str	r3, [r7, #0]
 8002e44:	607a      	str	r2, [r7, #4]
 8002e46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e4e:	f7fd fa37 	bl	80002c0 <__aeabi_uldivmod>
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	4610      	mov	r0, r2
 8002e58:	4619      	mov	r1, r3
 8002e5a:	f04f 0200 	mov.w	r2, #0
 8002e5e:	f04f 0300 	mov.w	r3, #0
 8002e62:	020b      	lsls	r3, r1, #8
 8002e64:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002e68:	0202      	lsls	r2, r0, #8
 8002e6a:	6979      	ldr	r1, [r7, #20]
 8002e6c:	6849      	ldr	r1, [r1, #4]
 8002e6e:	0849      	lsrs	r1, r1, #1
 8002e70:	2000      	movs	r0, #0
 8002e72:	460c      	mov	r4, r1
 8002e74:	4605      	mov	r5, r0
 8002e76:	eb12 0804 	adds.w	r8, r2, r4
 8002e7a:	eb43 0905 	adc.w	r9, r3, r5
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	469a      	mov	sl, r3
 8002e86:	4693      	mov	fp, r2
 8002e88:	4652      	mov	r2, sl
 8002e8a:	465b      	mov	r3, fp
 8002e8c:	4640      	mov	r0, r8
 8002e8e:	4649      	mov	r1, r9
 8002e90:	f7fd fa16 	bl	80002c0 <__aeabi_uldivmod>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4613      	mov	r3, r2
 8002e9a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ea2:	d308      	bcc.n	8002eb6 <UART_SetConfig+0x3d2>
 8002ea4:	6a3b      	ldr	r3, [r7, #32]
 8002ea6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002eaa:	d204      	bcs.n	8002eb6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6a3a      	ldr	r2, [r7, #32]
 8002eb2:	60da      	str	r2, [r3, #12]
 8002eb4:	e0c8      	b.n	8003048 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002ebc:	e0c4      	b.n	8003048 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ec6:	d167      	bne.n	8002f98 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8002ec8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d828      	bhi.n	8002f22 <UART_SetConfig+0x43e>
 8002ed0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ed8 <UART_SetConfig+0x3f4>)
 8002ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed6:	bf00      	nop
 8002ed8:	08002efd 	.word	0x08002efd
 8002edc:	08002f05 	.word	0x08002f05
 8002ee0:	08002f0d 	.word	0x08002f0d
 8002ee4:	08002f23 	.word	0x08002f23
 8002ee8:	08002f13 	.word	0x08002f13
 8002eec:	08002f23 	.word	0x08002f23
 8002ef0:	08002f23 	.word	0x08002f23
 8002ef4:	08002f23 	.word	0x08002f23
 8002ef8:	08002f1b 	.word	0x08002f1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002efc:	f7ff f9ea 	bl	80022d4 <HAL_RCC_GetPCLK1Freq>
 8002f00:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f02:	e014      	b.n	8002f2e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f04:	f7ff f9fc 	bl	8002300 <HAL_RCC_GetPCLK2Freq>
 8002f08:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f0a:	e010      	b.n	8002f2e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f0c:	4b5a      	ldr	r3, [pc, #360]	@ (8003078 <UART_SetConfig+0x594>)
 8002f0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002f10:	e00d      	b.n	8002f2e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f12:	f7ff f971 	bl	80021f8 <HAL_RCC_GetSysClockFreq>
 8002f16:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f18:	e009      	b.n	8002f2e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002f20:	e005      	b.n	8002f2e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002f2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 8089 	beq.w	8003048 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3a:	4a4e      	ldr	r2, [pc, #312]	@ (8003074 <UART_SetConfig+0x590>)
 8002f3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f40:	461a      	mov	r2, r3
 8002f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f44:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f48:	005a      	lsls	r2, r3, #1
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	085b      	lsrs	r3, r3, #1
 8002f50:	441a      	add	r2, r3
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f5c:	6a3b      	ldr	r3, [r7, #32]
 8002f5e:	2b0f      	cmp	r3, #15
 8002f60:	d916      	bls.n	8002f90 <UART_SetConfig+0x4ac>
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f68:	d212      	bcs.n	8002f90 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f6a:	6a3b      	ldr	r3, [r7, #32]
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	f023 030f 	bic.w	r3, r3, #15
 8002f72:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f74:	6a3b      	ldr	r3, [r7, #32]
 8002f76:	085b      	lsrs	r3, r3, #1
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	8bfb      	ldrh	r3, [r7, #30]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	8bfa      	ldrh	r2, [r7, #30]
 8002f8c:	60da      	str	r2, [r3, #12]
 8002f8e:	e05b      	b.n	8003048 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002f96:	e057      	b.n	8003048 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f98:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002f9c:	2b08      	cmp	r3, #8
 8002f9e:	d828      	bhi.n	8002ff2 <UART_SetConfig+0x50e>
 8002fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8002fa8 <UART_SetConfig+0x4c4>)
 8002fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa6:	bf00      	nop
 8002fa8:	08002fcd 	.word	0x08002fcd
 8002fac:	08002fd5 	.word	0x08002fd5
 8002fb0:	08002fdd 	.word	0x08002fdd
 8002fb4:	08002ff3 	.word	0x08002ff3
 8002fb8:	08002fe3 	.word	0x08002fe3
 8002fbc:	08002ff3 	.word	0x08002ff3
 8002fc0:	08002ff3 	.word	0x08002ff3
 8002fc4:	08002ff3 	.word	0x08002ff3
 8002fc8:	08002feb 	.word	0x08002feb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fcc:	f7ff f982 	bl	80022d4 <HAL_RCC_GetPCLK1Freq>
 8002fd0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002fd2:	e014      	b.n	8002ffe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fd4:	f7ff f994 	bl	8002300 <HAL_RCC_GetPCLK2Freq>
 8002fd8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002fda:	e010      	b.n	8002ffe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fdc:	4b26      	ldr	r3, [pc, #152]	@ (8003078 <UART_SetConfig+0x594>)
 8002fde:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002fe0:	e00d      	b.n	8002ffe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fe2:	f7ff f909 	bl	80021f8 <HAL_RCC_GetSysClockFreq>
 8002fe6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002fe8:	e009      	b.n	8002ffe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002ff0:	e005      	b.n	8002ffe <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002ffc:	bf00      	nop
    }

    if (pclk != 0U)
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003000:	2b00      	cmp	r3, #0
 8003002:	d021      	beq.n	8003048 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003008:	4a1a      	ldr	r2, [pc, #104]	@ (8003074 <UART_SetConfig+0x590>)
 800300a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800300e:	461a      	mov	r2, r3
 8003010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003012:	fbb3 f2f2 	udiv	r2, r3, r2
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	085b      	lsrs	r3, r3, #1
 800301c:	441a      	add	r2, r3
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	fbb2 f3f3 	udiv	r3, r2, r3
 8003026:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003028:	6a3b      	ldr	r3, [r7, #32]
 800302a:	2b0f      	cmp	r3, #15
 800302c:	d909      	bls.n	8003042 <UART_SetConfig+0x55e>
 800302e:	6a3b      	ldr	r3, [r7, #32]
 8003030:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003034:	d205      	bcs.n	8003042 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003036:	6a3b      	ldr	r3, [r7, #32]
 8003038:	b29a      	uxth	r2, r3
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	60da      	str	r2, [r3, #12]
 8003040:	e002      	b.n	8003048 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	2201      	movs	r2, #1
 800304c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	2201      	movs	r2, #1
 8003054:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	2200      	movs	r2, #0
 800305c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2200      	movs	r2, #0
 8003062:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003064:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003068:	4618      	mov	r0, r3
 800306a:	3730      	adds	r7, #48	@ 0x30
 800306c:	46bd      	mov	sp, r7
 800306e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003072:	bf00      	nop
 8003074:	08006124 	.word	0x08006124
 8003078:	00f42400 	.word	0x00f42400

0800307c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003088:	f003 0308 	and.w	r3, r3, #8
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00a      	beq.n	80030a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00a      	beq.n	80030c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ee:	f003 0304 	and.w	r3, r3, #4
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00a      	beq.n	800310c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003110:	f003 0310 	and.w	r3, r3, #16
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00a      	beq.n	800312e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003132:	f003 0320 	and.w	r3, r3, #32
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003158:	2b00      	cmp	r3, #0
 800315a:	d01a      	beq.n	8003192 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003176:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800317a:	d10a      	bne.n	8003192 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	605a      	str	r2, [r3, #4]
  }
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b098      	sub	sp, #96	@ 0x60
 80031c4:	af02      	add	r7, sp, #8
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031d0:	f7fe f864 	bl	800129c <HAL_GetTick>
 80031d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0308 	and.w	r3, r3, #8
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d12f      	bne.n	8003244 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031ec:	2200      	movs	r2, #0
 80031ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f88e 	bl	8003314 <UART_WaitOnFlagUntilTimeout>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d022      	beq.n	8003244 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003206:	e853 3f00 	ldrex	r3, [r3]
 800320a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800320c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800320e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003212:	653b      	str	r3, [r7, #80]	@ 0x50
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	461a      	mov	r2, r3
 800321a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800321c:	647b      	str	r3, [r7, #68]	@ 0x44
 800321e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003220:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003222:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003224:	e841 2300 	strex	r3, r2, [r1]
 8003228:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800322a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1e6      	bne.n	80031fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2220      	movs	r2, #32
 8003234:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e063      	b.n	800330c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0304 	and.w	r3, r3, #4
 800324e:	2b04      	cmp	r3, #4
 8003250:	d149      	bne.n	80032e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003252:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800325a:	2200      	movs	r2, #0
 800325c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 f857 	bl	8003314 <UART_WaitOnFlagUntilTimeout>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d03c      	beq.n	80032e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003274:	e853 3f00 	ldrex	r3, [r3]
 8003278:	623b      	str	r3, [r7, #32]
   return(result);
 800327a:	6a3b      	ldr	r3, [r7, #32]
 800327c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003280:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	461a      	mov	r2, r3
 8003288:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800328a:	633b      	str	r3, [r7, #48]	@ 0x30
 800328c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800328e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003290:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003292:	e841 2300 	strex	r3, r2, [r1]
 8003296:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1e6      	bne.n	800326c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	3308      	adds	r3, #8
 80032a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	e853 3f00 	ldrex	r3, [r3]
 80032ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f023 0301 	bic.w	r3, r3, #1
 80032b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	3308      	adds	r3, #8
 80032bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80032be:	61fa      	str	r2, [r7, #28]
 80032c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c2:	69b9      	ldr	r1, [r7, #24]
 80032c4:	69fa      	ldr	r2, [r7, #28]
 80032c6:	e841 2300 	strex	r3, r2, [r1]
 80032ca:	617b      	str	r3, [r7, #20]
   return(result);
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1e5      	bne.n	800329e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2220      	movs	r2, #32
 80032d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e012      	b.n	800330c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2220      	movs	r2, #32
 80032ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2220      	movs	r2, #32
 80032f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3758      	adds	r7, #88	@ 0x58
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	603b      	str	r3, [r7, #0]
 8003320:	4613      	mov	r3, r2
 8003322:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003324:	e04f      	b.n	80033c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332c:	d04b      	beq.n	80033c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332e:	f7fd ffb5 	bl	800129c <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	429a      	cmp	r2, r3
 800333c:	d302      	bcc.n	8003344 <UART_WaitOnFlagUntilTimeout+0x30>
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e04e      	b.n	80033e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0304 	and.w	r3, r3, #4
 8003352:	2b00      	cmp	r3, #0
 8003354:	d037      	beq.n	80033c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	2b80      	cmp	r3, #128	@ 0x80
 800335a:	d034      	beq.n	80033c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	2b40      	cmp	r3, #64	@ 0x40
 8003360:	d031      	beq.n	80033c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	f003 0308 	and.w	r3, r3, #8
 800336c:	2b08      	cmp	r3, #8
 800336e:	d110      	bne.n	8003392 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2208      	movs	r2, #8
 8003376:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 f838 	bl	80033ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2208      	movs	r2, #8
 8003382:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e029      	b.n	80033e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800339c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033a0:	d111      	bne.n	80033c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 f81e 	bl	80033ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2220      	movs	r2, #32
 80033b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e00f      	b.n	80033e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	69da      	ldr	r2, [r3, #28]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	4013      	ands	r3, r2
 80033d0:	68ba      	ldr	r2, [r7, #8]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	bf0c      	ite	eq
 80033d6:	2301      	moveq	r3, #1
 80033d8:	2300      	movne	r3, #0
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	461a      	mov	r2, r3
 80033de:	79fb      	ldrb	r3, [r7, #7]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d0a0      	beq.n	8003326 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b095      	sub	sp, #84	@ 0x54
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033fe:	e853 3f00 	ldrex	r3, [r3]
 8003402:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003406:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800340a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	461a      	mov	r2, r3
 8003412:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003414:	643b      	str	r3, [r7, #64]	@ 0x40
 8003416:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003418:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800341a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800341c:	e841 2300 	strex	r3, r2, [r1]
 8003420:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1e6      	bne.n	80033f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	3308      	adds	r3, #8
 800342e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	e853 3f00 	ldrex	r3, [r3]
 8003436:	61fb      	str	r3, [r7, #28]
   return(result);
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800343e:	f023 0301 	bic.w	r3, r3, #1
 8003442:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	3308      	adds	r3, #8
 800344a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800344c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800344e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003450:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003452:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003454:	e841 2300 	strex	r3, r2, [r1]
 8003458:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800345a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1e3      	bne.n	8003428 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003464:	2b01      	cmp	r3, #1
 8003466:	d118      	bne.n	800349a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	e853 3f00 	ldrex	r3, [r3]
 8003474:	60bb      	str	r3, [r7, #8]
   return(result);
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	f023 0310 	bic.w	r3, r3, #16
 800347c:	647b      	str	r3, [r7, #68]	@ 0x44
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003486:	61bb      	str	r3, [r7, #24]
 8003488:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348a:	6979      	ldr	r1, [r7, #20]
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	e841 2300 	strex	r3, r2, [r1]
 8003492:	613b      	str	r3, [r7, #16]
   return(result);
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1e6      	bne.n	8003468 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2220      	movs	r2, #32
 800349e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80034ae:	bf00      	nop
 80034b0:	3754      	adds	r7, #84	@ 0x54
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b085      	sub	sp, #20
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <HAL_UARTEx_DisableFifoMode+0x16>
 80034cc:	2302      	movs	r3, #2
 80034ce:	e027      	b.n	8003520 <HAL_UARTEx_DisableFifoMode+0x66>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2224      	movs	r2, #36	@ 0x24
 80034dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0201 	bic.w	r2, r2, #1
 80034f6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80034fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2220      	movs	r2, #32
 8003512:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800353c:	2b01      	cmp	r3, #1
 800353e:	d101      	bne.n	8003544 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003540:	2302      	movs	r3, #2
 8003542:	e02d      	b.n	80035a0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2224      	movs	r2, #36	@ 0x24
 8003550:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0201 	bic.w	r2, r2, #1
 800356a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 f84f 	bl	8003624 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2220      	movs	r2, #32
 8003592:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d101      	bne.n	80035c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80035bc:	2302      	movs	r3, #2
 80035be:	e02d      	b.n	800361c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2224      	movs	r2, #36	@ 0x24
 80035cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0201 	bic.w	r2, r2, #1
 80035e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f811 	bl	8003624 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2220      	movs	r2, #32
 800360e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003630:	2b00      	cmp	r3, #0
 8003632:	d108      	bne.n	8003646 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003644:	e031      	b.n	80036aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003646:	2308      	movs	r3, #8
 8003648:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800364a:	2308      	movs	r3, #8
 800364c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	0e5b      	lsrs	r3, r3, #25
 8003656:	b2db      	uxtb	r3, r3
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	0f5b      	lsrs	r3, r3, #29
 8003666:	b2db      	uxtb	r3, r3
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800366e:	7bbb      	ldrb	r3, [r7, #14]
 8003670:	7b3a      	ldrb	r2, [r7, #12]
 8003672:	4911      	ldr	r1, [pc, #68]	@ (80036b8 <UARTEx_SetNbDataToProcess+0x94>)
 8003674:	5c8a      	ldrb	r2, [r1, r2]
 8003676:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800367a:	7b3a      	ldrb	r2, [r7, #12]
 800367c:	490f      	ldr	r1, [pc, #60]	@ (80036bc <UARTEx_SetNbDataToProcess+0x98>)
 800367e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003680:	fb93 f3f2 	sdiv	r3, r3, r2
 8003684:	b29a      	uxth	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800368c:	7bfb      	ldrb	r3, [r7, #15]
 800368e:	7b7a      	ldrb	r2, [r7, #13]
 8003690:	4909      	ldr	r1, [pc, #36]	@ (80036b8 <UARTEx_SetNbDataToProcess+0x94>)
 8003692:	5c8a      	ldrb	r2, [r1, r2]
 8003694:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003698:	7b7a      	ldrb	r2, [r7, #13]
 800369a:	4908      	ldr	r1, [pc, #32]	@ (80036bc <UARTEx_SetNbDataToProcess+0x98>)
 800369c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800369e:	fb93 f3f2 	sdiv	r3, r3, r2
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80036aa:	bf00      	nop
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	0800613c 	.word	0x0800613c
 80036bc:	08006144 	.word	0x08006144

080036c0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	4603      	mov	r3, r0
 80036c8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80036ca:	2300      	movs	r3, #0
 80036cc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80036ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036d2:	2b84      	cmp	r3, #132	@ 0x84
 80036d4:	d005      	beq.n	80036e2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80036d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	4413      	add	r3, r2
 80036de:	3303      	adds	r3, #3
 80036e0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80036e2:	68fb      	ldr	r3, [r7, #12]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80036f4:	f000 fa5c 	bl	8003bb0 <vTaskStartScheduler>
  
  return osOK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	bd80      	pop	{r7, pc}

080036fe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80036fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003700:	b087      	sub	sp, #28
 8003702:	af02      	add	r7, sp, #8
 8003704:	6078      	str	r0, [r7, #4]
 8003706:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685c      	ldr	r4, [r3, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003714:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff ffcf 	bl	80036c0 <makeFreeRtosPriority>
 8003722:	4602      	mov	r2, r0
 8003724:	f107 030c 	add.w	r3, r7, #12
 8003728:	9301      	str	r3, [sp, #4]
 800372a:	9200      	str	r2, [sp, #0]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	4632      	mov	r2, r6
 8003730:	4629      	mov	r1, r5
 8003732:	4620      	mov	r0, r4
 8003734:	f000 f8d2 	bl	80038dc <xTaskCreate>
 8003738:	4603      	mov	r3, r0
 800373a:	2b01      	cmp	r3, #1
 800373c:	d001      	beq.n	8003742 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800373e:	2300      	movs	r3, #0
 8003740:	e000      	b.n	8003744 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8003742:	68fb      	ldr	r3, [r7, #12]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3714      	adds	r7, #20
 8003748:	46bd      	mov	sp, r7
 800374a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800374c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <osDelay+0x16>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	e000      	b.n	8003764 <osDelay+0x18>
 8003762:	2301      	movs	r3, #1
 8003764:	4618      	mov	r0, r3
 8003766:	f000 f9ed 	bl	8003b44 <vTaskDelay>
  
  return osOK;
 800376a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f103 0208 	add.w	r2, r3, #8
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f04f 32ff 	mov.w	r2, #4294967295
 800378c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f103 0208 	add.w	r2, r3, #8
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f103 0208 	add.w	r2, r3, #8
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80037c2:	bf00      	nop
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037ce:	b480      	push	{r7}
 80037d0:	b085      	sub	sp, #20
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
 80037d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	601a      	str	r2, [r3, #0]
}
 800380a:	bf00      	nop
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003816:	b480      	push	{r7}
 8003818:	b085      	sub	sp, #20
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
 800381e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382c:	d103      	bne.n	8003836 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	e00c      	b.n	8003850 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	3308      	adds	r3, #8
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	e002      	b.n	8003844 <vListInsert+0x2e>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	60fb      	str	r3, [r7, #12]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	429a      	cmp	r2, r3
 800384e:	d2f6      	bcs.n	800383e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	1c5a      	adds	r2, r3, #1
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	601a      	str	r2, [r3, #0]
}
 800387c:	bf00      	nop
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	6892      	ldr	r2, [r2, #8]
 800389e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6852      	ldr	r2, [r2, #4]
 80038a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d103      	bne.n	80038bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	1e5a      	subs	r2, r3, #1
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08c      	sub	sp, #48	@ 0x30
 80038e0:	af04      	add	r7, sp, #16
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	603b      	str	r3, [r7, #0]
 80038e8:	4613      	mov	r3, r2
 80038ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80038ec:	88fb      	ldrh	r3, [r7, #6]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 fee9 	bl	80046c8 <pvPortMalloc>
 80038f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00e      	beq.n	800391c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80038fe:	2054      	movs	r0, #84	@ 0x54
 8003900:	f000 fee2 	bl	80046c8 <pvPortMalloc>
 8003904:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	631a      	str	r2, [r3, #48]	@ 0x30
 8003912:	e005      	b.n	8003920 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003914:	6978      	ldr	r0, [r7, #20]
 8003916:	f000 ffa5 	bl	8004864 <vPortFree>
 800391a:	e001      	b.n	8003920 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800391c:	2300      	movs	r3, #0
 800391e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d013      	beq.n	800394e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003926:	88fa      	ldrh	r2, [r7, #6]
 8003928:	2300      	movs	r3, #0
 800392a:	9303      	str	r3, [sp, #12]
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	9302      	str	r3, [sp, #8]
 8003930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003932:	9301      	str	r3, [sp, #4]
 8003934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	68b9      	ldr	r1, [r7, #8]
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 f80e 	bl	800395e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003942:	69f8      	ldr	r0, [r7, #28]
 8003944:	f000 f894 	bl	8003a70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003948:	2301      	movs	r3, #1
 800394a:	61bb      	str	r3, [r7, #24]
 800394c:	e002      	b.n	8003954 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800394e:	f04f 33ff 	mov.w	r3, #4294967295
 8003952:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003954:	69bb      	ldr	r3, [r7, #24]
	}
 8003956:	4618      	mov	r0, r3
 8003958:	3720      	adds	r7, #32
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b088      	sub	sp, #32
 8003962:	af00      	add	r7, sp, #0
 8003964:	60f8      	str	r0, [r7, #12]
 8003966:	60b9      	str	r1, [r7, #8]
 8003968:	607a      	str	r2, [r7, #4]
 800396a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800396c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800396e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003976:	3b01      	subs	r3, #1
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4413      	add	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	f023 0307 	bic.w	r3, r3, #7
 8003984:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00b      	beq.n	80039a8 <prvInitialiseNewTask+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003994:	f383 8811 	msr	BASEPRI, r3
 8003998:	f3bf 8f6f 	isb	sy
 800399c:	f3bf 8f4f 	dsb	sy
 80039a0:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80039a2:	bf00      	nop
 80039a4:	bf00      	nop
 80039a6:	e7fd      	b.n	80039a4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d01f      	beq.n	80039ee <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039ae:	2300      	movs	r3, #0
 80039b0:	61fb      	str	r3, [r7, #28]
 80039b2:	e012      	b.n	80039da <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	4413      	add	r3, r2
 80039ba:	7819      	ldrb	r1, [r3, #0]
 80039bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	4413      	add	r3, r2
 80039c2:	3334      	adds	r3, #52	@ 0x34
 80039c4:	460a      	mov	r2, r1
 80039c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	4413      	add	r3, r2
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d006      	beq.n	80039e2 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	3301      	adds	r3, #1
 80039d8:	61fb      	str	r3, [r7, #28]
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	2b0f      	cmp	r3, #15
 80039de:	d9e9      	bls.n	80039b4 <prvInitialiseNewTask+0x56>
 80039e0:	e000      	b.n	80039e4 <prvInitialiseNewTask+0x86>
			{
				break;
 80039e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80039e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039ec:	e003      	b.n	80039f6 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80039ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80039f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039f8:	2b06      	cmp	r3, #6
 80039fa:	d901      	bls.n	8003a00 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80039fc:	2306      	movs	r3, #6
 80039fe:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a04:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a0a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a0e:	2200      	movs	r2, #0
 8003a10:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a14:	3304      	adds	r3, #4
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7ff fecc 	bl	80037b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a1e:	3318      	adds	r3, #24
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff fec7 	bl	80037b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a2a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a2e:	f1c3 0207 	rsb	r2, r3, #7
 8003a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a34:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a3a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a3e:	2200      	movs	r2, #0
 8003a40:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	68f9      	ldr	r1, [r7, #12]
 8003a4e:	69b8      	ldr	r0, [r7, #24]
 8003a50:	f000 fc28 	bl	80042a4 <pxPortInitialiseStack>
 8003a54:	4602      	mov	r2, r0
 8003a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a58:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d002      	beq.n	8003a66 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a66:	bf00      	nop
 8003a68:	3720      	adds	r7, #32
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
	...

08003a70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a78:	f000 fd46 	bl	8004508 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a7c:	4b2a      	ldr	r3, [pc, #168]	@ (8003b28 <prvAddNewTaskToReadyList+0xb8>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3301      	adds	r3, #1
 8003a82:	4a29      	ldr	r2, [pc, #164]	@ (8003b28 <prvAddNewTaskToReadyList+0xb8>)
 8003a84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a86:	4b29      	ldr	r3, [pc, #164]	@ (8003b2c <prvAddNewTaskToReadyList+0xbc>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d109      	bne.n	8003aa2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a8e:	4a27      	ldr	r2, [pc, #156]	@ (8003b2c <prvAddNewTaskToReadyList+0xbc>)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a94:	4b24      	ldr	r3, [pc, #144]	@ (8003b28 <prvAddNewTaskToReadyList+0xb8>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d110      	bne.n	8003abe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a9c:	f000 fad0 	bl	8004040 <prvInitialiseTaskLists>
 8003aa0:	e00d      	b.n	8003abe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003aa2:	4b23      	ldr	r3, [pc, #140]	@ (8003b30 <prvAddNewTaskToReadyList+0xc0>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d109      	bne.n	8003abe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003aaa:	4b20      	ldr	r3, [pc, #128]	@ (8003b2c <prvAddNewTaskToReadyList+0xbc>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d802      	bhi.n	8003abe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ab8:	4a1c      	ldr	r2, [pc, #112]	@ (8003b2c <prvAddNewTaskToReadyList+0xbc>)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003abe:	4b1d      	ldr	r3, [pc, #116]	@ (8003b34 <prvAddNewTaskToReadyList+0xc4>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8003b34 <prvAddNewTaskToReadyList+0xc4>)
 8003ac6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003acc:	2201      	movs	r2, #1
 8003ace:	409a      	lsls	r2, r3
 8003ad0:	4b19      	ldr	r3, [pc, #100]	@ (8003b38 <prvAddNewTaskToReadyList+0xc8>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	4a18      	ldr	r2, [pc, #96]	@ (8003b38 <prvAddNewTaskToReadyList+0xc8>)
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ade:	4613      	mov	r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	4413      	add	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4a15      	ldr	r2, [pc, #84]	@ (8003b3c <prvAddNewTaskToReadyList+0xcc>)
 8003ae8:	441a      	add	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	3304      	adds	r3, #4
 8003aee:	4619      	mov	r1, r3
 8003af0:	4610      	mov	r0, r2
 8003af2:	f7ff fe6c 	bl	80037ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003af6:	f000 fd39 	bl	800456c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003afa:	4b0d      	ldr	r3, [pc, #52]	@ (8003b30 <prvAddNewTaskToReadyList+0xc0>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00e      	beq.n	8003b20 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b02:	4b0a      	ldr	r3, [pc, #40]	@ (8003b2c <prvAddNewTaskToReadyList+0xbc>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d207      	bcs.n	8003b20 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b10:	4b0b      	ldr	r3, [pc, #44]	@ (8003b40 <prvAddNewTaskToReadyList+0xd0>)
 8003b12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	f3bf 8f4f 	dsb	sy
 8003b1c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b20:	bf00      	nop
 8003b22:	3708      	adds	r7, #8
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	200002bc 	.word	0x200002bc
 8003b2c:	200001bc 	.word	0x200001bc
 8003b30:	200002c8 	.word	0x200002c8
 8003b34:	200002d8 	.word	0x200002d8
 8003b38:	200002c4 	.word	0x200002c4
 8003b3c:	200001c0 	.word	0x200001c0
 8003b40:	e000ed04 	.word	0xe000ed04

08003b44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d018      	beq.n	8003b88 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b56:	4b14      	ldr	r3, [pc, #80]	@ (8003ba8 <vTaskDelay+0x64>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00b      	beq.n	8003b76 <vTaskDelay+0x32>
	__asm volatile
 8003b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b62:	f383 8811 	msr	BASEPRI, r3
 8003b66:	f3bf 8f6f 	isb	sy
 8003b6a:	f3bf 8f4f 	dsb	sy
 8003b6e:	60bb      	str	r3, [r7, #8]
}
 8003b70:	bf00      	nop
 8003b72:	bf00      	nop
 8003b74:	e7fd      	b.n	8003b72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003b76:	f000 f863 	bl	8003c40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 fb2b 	bl	80041d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b82:	f000 f86b 	bl	8003c5c <xTaskResumeAll>
 8003b86:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d107      	bne.n	8003b9e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003b8e:	4b07      	ldr	r3, [pc, #28]	@ (8003bac <vTaskDelay+0x68>)
 8003b90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	f3bf 8f4f 	dsb	sy
 8003b9a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b9e:	bf00      	nop
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	200002e4 	.word	0x200002e4
 8003bac:	e000ed04 	.word	0xe000ed04

08003bb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8003c28 <vTaskStartScheduler+0x78>)
 8003bb8:	9301      	str	r3, [sp, #4]
 8003bba:	2300      	movs	r3, #0
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	2280      	movs	r2, #128	@ 0x80
 8003bc2:	491a      	ldr	r1, [pc, #104]	@ (8003c2c <vTaskStartScheduler+0x7c>)
 8003bc4:	481a      	ldr	r0, [pc, #104]	@ (8003c30 <vTaskStartScheduler+0x80>)
 8003bc6:	f7ff fe89 	bl	80038dc <xTaskCreate>
 8003bca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d116      	bne.n	8003c00 <vTaskStartScheduler+0x50>
	__asm volatile
 8003bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bd6:	f383 8811 	msr	BASEPRI, r3
 8003bda:	f3bf 8f6f 	isb	sy
 8003bde:	f3bf 8f4f 	dsb	sy
 8003be2:	60bb      	str	r3, [r7, #8]
}
 8003be4:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003be6:	4b13      	ldr	r3, [pc, #76]	@ (8003c34 <vTaskStartScheduler+0x84>)
 8003be8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003bee:	4b12      	ldr	r3, [pc, #72]	@ (8003c38 <vTaskStartScheduler+0x88>)
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003bf4:	4b11      	ldr	r3, [pc, #68]	@ (8003c3c <vTaskStartScheduler+0x8c>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003bfa:	f000 fbe1 	bl	80043c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003bfe:	e00f      	b.n	8003c20 <vTaskStartScheduler+0x70>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c06:	d10b      	bne.n	8003c20 <vTaskStartScheduler+0x70>
	__asm volatile
 8003c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c0c:	f383 8811 	msr	BASEPRI, r3
 8003c10:	f3bf 8f6f 	isb	sy
 8003c14:	f3bf 8f4f 	dsb	sy
 8003c18:	607b      	str	r3, [r7, #4]
}
 8003c1a:	bf00      	nop
 8003c1c:	bf00      	nop
 8003c1e:	e7fd      	b.n	8003c1c <vTaskStartScheduler+0x6c>
}
 8003c20:	bf00      	nop
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	200002e0 	.word	0x200002e0
 8003c2c:	08006104 	.word	0x08006104
 8003c30:	08004011 	.word	0x08004011
 8003c34:	200002dc 	.word	0x200002dc
 8003c38:	200002c8 	.word	0x200002c8
 8003c3c:	200002c0 	.word	0x200002c0

08003c40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003c44:	4b04      	ldr	r3, [pc, #16]	@ (8003c58 <vTaskSuspendAll+0x18>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	4a03      	ldr	r2, [pc, #12]	@ (8003c58 <vTaskSuspendAll+0x18>)
 8003c4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003c4e:	bf00      	nop
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	200002e4 	.word	0x200002e4

08003c5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c62:	2300      	movs	r3, #0
 8003c64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c66:	2300      	movs	r3, #0
 8003c68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c6a:	4b42      	ldr	r3, [pc, #264]	@ (8003d74 <xTaskResumeAll+0x118>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10b      	bne.n	8003c8a <xTaskResumeAll+0x2e>
	__asm volatile
 8003c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c76:	f383 8811 	msr	BASEPRI, r3
 8003c7a:	f3bf 8f6f 	isb	sy
 8003c7e:	f3bf 8f4f 	dsb	sy
 8003c82:	603b      	str	r3, [r7, #0]
}
 8003c84:	bf00      	nop
 8003c86:	bf00      	nop
 8003c88:	e7fd      	b.n	8003c86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c8a:	f000 fc3d 	bl	8004508 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c8e:	4b39      	ldr	r3, [pc, #228]	@ (8003d74 <xTaskResumeAll+0x118>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	3b01      	subs	r3, #1
 8003c94:	4a37      	ldr	r2, [pc, #220]	@ (8003d74 <xTaskResumeAll+0x118>)
 8003c96:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c98:	4b36      	ldr	r3, [pc, #216]	@ (8003d74 <xTaskResumeAll+0x118>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d161      	bne.n	8003d64 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ca0:	4b35      	ldr	r3, [pc, #212]	@ (8003d78 <xTaskResumeAll+0x11c>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d05d      	beq.n	8003d64 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ca8:	e02e      	b.n	8003d08 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003caa:	4b34      	ldr	r3, [pc, #208]	@ (8003d7c <xTaskResumeAll+0x120>)
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	3318      	adds	r3, #24
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7ff fde6 	bl	8003888 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	3304      	adds	r3, #4
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7ff fde1 	bl	8003888 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cca:	2201      	movs	r2, #1
 8003ccc:	409a      	lsls	r2, r3
 8003cce:	4b2c      	ldr	r3, [pc, #176]	@ (8003d80 <xTaskResumeAll+0x124>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	4a2a      	ldr	r2, [pc, #168]	@ (8003d80 <xTaskResumeAll+0x124>)
 8003cd6:	6013      	str	r3, [r2, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cdc:	4613      	mov	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	4413      	add	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4a27      	ldr	r2, [pc, #156]	@ (8003d84 <xTaskResumeAll+0x128>)
 8003ce6:	441a      	add	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	3304      	adds	r3, #4
 8003cec:	4619      	mov	r1, r3
 8003cee:	4610      	mov	r0, r2
 8003cf0:	f7ff fd6d 	bl	80037ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cf8:	4b23      	ldr	r3, [pc, #140]	@ (8003d88 <xTaskResumeAll+0x12c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d302      	bcc.n	8003d08 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003d02:	4b22      	ldr	r3, [pc, #136]	@ (8003d8c <xTaskResumeAll+0x130>)
 8003d04:	2201      	movs	r2, #1
 8003d06:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d08:	4b1c      	ldr	r3, [pc, #112]	@ (8003d7c <xTaskResumeAll+0x120>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1cc      	bne.n	8003caa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d16:	f000 fa11 	bl	800413c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003d1a:	4b1d      	ldr	r3, [pc, #116]	@ (8003d90 <xTaskResumeAll+0x134>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d010      	beq.n	8003d48 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d26:	f000 f85d 	bl	8003de4 <xTaskIncrementTick>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d002      	beq.n	8003d36 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003d30:	4b16      	ldr	r3, [pc, #88]	@ (8003d8c <xTaskResumeAll+0x130>)
 8003d32:	2201      	movs	r2, #1
 8003d34:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1f1      	bne.n	8003d26 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003d42:	4b13      	ldr	r3, [pc, #76]	@ (8003d90 <xTaskResumeAll+0x134>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d48:	4b10      	ldr	r3, [pc, #64]	@ (8003d8c <xTaskResumeAll+0x130>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d009      	beq.n	8003d64 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d50:	2301      	movs	r3, #1
 8003d52:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d54:	4b0f      	ldr	r3, [pc, #60]	@ (8003d94 <xTaskResumeAll+0x138>)
 8003d56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	f3bf 8f4f 	dsb	sy
 8003d60:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d64:	f000 fc02 	bl	800456c <vPortExitCritical>

	return xAlreadyYielded;
 8003d68:	68bb      	ldr	r3, [r7, #8]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	200002e4 	.word	0x200002e4
 8003d78:	200002bc 	.word	0x200002bc
 8003d7c:	2000027c 	.word	0x2000027c
 8003d80:	200002c4 	.word	0x200002c4
 8003d84:	200001c0 	.word	0x200001c0
 8003d88:	200001bc 	.word	0x200001bc
 8003d8c:	200002d0 	.word	0x200002d0
 8003d90:	200002cc 	.word	0x200002cc
 8003d94:	e000ed04 	.word	0xe000ed04

08003d98 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d102      	bne.n	8003dac <pcTaskGetName+0x14>
 8003da6:	4b0e      	ldr	r3, [pc, #56]	@ (8003de0 <pcTaskGetName+0x48>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	e000      	b.n	8003dae <pcTaskGetName+0x16>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10b      	bne.n	8003dce <pcTaskGetName+0x36>
	__asm volatile
 8003db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dba:	f383 8811 	msr	BASEPRI, r3
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f3bf 8f4f 	dsb	sy
 8003dc6:	60bb      	str	r3, [r7, #8]
}
 8003dc8:	bf00      	nop
 8003dca:	bf00      	nop
 8003dcc:	e7fd      	b.n	8003dca <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	3334      	adds	r3, #52	@ 0x34
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3714      	adds	r7, #20
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	200001bc 	.word	0x200001bc

08003de4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003dea:	2300      	movs	r3, #0
 8003dec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dee:	4b4f      	ldr	r3, [pc, #316]	@ (8003f2c <xTaskIncrementTick+0x148>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f040 808f 	bne.w	8003f16 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003df8:	4b4d      	ldr	r3, [pc, #308]	@ (8003f30 <xTaskIncrementTick+0x14c>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e00:	4a4b      	ldr	r2, [pc, #300]	@ (8003f30 <xTaskIncrementTick+0x14c>)
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d121      	bne.n	8003e50 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e0c:	4b49      	ldr	r3, [pc, #292]	@ (8003f34 <xTaskIncrementTick+0x150>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00b      	beq.n	8003e2e <xTaskIncrementTick+0x4a>
	__asm volatile
 8003e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e1a:	f383 8811 	msr	BASEPRI, r3
 8003e1e:	f3bf 8f6f 	isb	sy
 8003e22:	f3bf 8f4f 	dsb	sy
 8003e26:	603b      	str	r3, [r7, #0]
}
 8003e28:	bf00      	nop
 8003e2a:	bf00      	nop
 8003e2c:	e7fd      	b.n	8003e2a <xTaskIncrementTick+0x46>
 8003e2e:	4b41      	ldr	r3, [pc, #260]	@ (8003f34 <xTaskIncrementTick+0x150>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	4b40      	ldr	r3, [pc, #256]	@ (8003f38 <xTaskIncrementTick+0x154>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a3e      	ldr	r2, [pc, #248]	@ (8003f34 <xTaskIncrementTick+0x150>)
 8003e3a:	6013      	str	r3, [r2, #0]
 8003e3c:	4a3e      	ldr	r2, [pc, #248]	@ (8003f38 <xTaskIncrementTick+0x154>)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	4b3e      	ldr	r3, [pc, #248]	@ (8003f3c <xTaskIncrementTick+0x158>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	3301      	adds	r3, #1
 8003e48:	4a3c      	ldr	r2, [pc, #240]	@ (8003f3c <xTaskIncrementTick+0x158>)
 8003e4a:	6013      	str	r3, [r2, #0]
 8003e4c:	f000 f976 	bl	800413c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e50:	4b3b      	ldr	r3, [pc, #236]	@ (8003f40 <xTaskIncrementTick+0x15c>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d348      	bcc.n	8003eec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e5a:	4b36      	ldr	r3, [pc, #216]	@ (8003f34 <xTaskIncrementTick+0x150>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d104      	bne.n	8003e6e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e64:	4b36      	ldr	r3, [pc, #216]	@ (8003f40 <xTaskIncrementTick+0x15c>)
 8003e66:	f04f 32ff 	mov.w	r2, #4294967295
 8003e6a:	601a      	str	r2, [r3, #0]
					break;
 8003e6c:	e03e      	b.n	8003eec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e6e:	4b31      	ldr	r3, [pc, #196]	@ (8003f34 <xTaskIncrementTick+0x150>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d203      	bcs.n	8003e8e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e86:	4a2e      	ldr	r2, [pc, #184]	@ (8003f40 <xTaskIncrementTick+0x15c>)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003e8c:	e02e      	b.n	8003eec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	3304      	adds	r3, #4
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7ff fcf8 	bl	8003888 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d004      	beq.n	8003eaa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	3318      	adds	r3, #24
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7ff fcef 	bl	8003888 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eae:	2201      	movs	r2, #1
 8003eb0:	409a      	lsls	r2, r3
 8003eb2:	4b24      	ldr	r3, [pc, #144]	@ (8003f44 <xTaskIncrementTick+0x160>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	4a22      	ldr	r2, [pc, #136]	@ (8003f44 <xTaskIncrementTick+0x160>)
 8003eba:	6013      	str	r3, [r2, #0]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4a1f      	ldr	r2, [pc, #124]	@ (8003f48 <xTaskIncrementTick+0x164>)
 8003eca:	441a      	add	r2, r3
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	4610      	mov	r0, r2
 8003ed4:	f7ff fc7b 	bl	80037ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003edc:	4b1b      	ldr	r3, [pc, #108]	@ (8003f4c <xTaskIncrementTick+0x168>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d3b9      	bcc.n	8003e5a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003eea:	e7b6      	b.n	8003e5a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003eec:	4b17      	ldr	r3, [pc, #92]	@ (8003f4c <xTaskIncrementTick+0x168>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ef2:	4915      	ldr	r1, [pc, #84]	@ (8003f48 <xTaskIncrementTick+0x164>)
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	440b      	add	r3, r1
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d901      	bls.n	8003f08 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003f04:	2301      	movs	r3, #1
 8003f06:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003f08:	4b11      	ldr	r3, [pc, #68]	@ (8003f50 <xTaskIncrementTick+0x16c>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d007      	beq.n	8003f20 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003f10:	2301      	movs	r3, #1
 8003f12:	617b      	str	r3, [r7, #20]
 8003f14:	e004      	b.n	8003f20 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003f16:	4b0f      	ldr	r3, [pc, #60]	@ (8003f54 <xTaskIncrementTick+0x170>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	4a0d      	ldr	r2, [pc, #52]	@ (8003f54 <xTaskIncrementTick+0x170>)
 8003f1e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003f20:	697b      	ldr	r3, [r7, #20]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	200002e4 	.word	0x200002e4
 8003f30:	200002c0 	.word	0x200002c0
 8003f34:	20000274 	.word	0x20000274
 8003f38:	20000278 	.word	0x20000278
 8003f3c:	200002d4 	.word	0x200002d4
 8003f40:	200002dc 	.word	0x200002dc
 8003f44:	200002c4 	.word	0x200002c4
 8003f48:	200001c0 	.word	0x200001c0
 8003f4c:	200001bc 	.word	0x200001bc
 8003f50:	200002d0 	.word	0x200002d0
 8003f54:	200002cc 	.word	0x200002cc

08003f58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f5e:	4b27      	ldr	r3, [pc, #156]	@ (8003ffc <vTaskSwitchContext+0xa4>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f66:	4b26      	ldr	r3, [pc, #152]	@ (8004000 <vTaskSwitchContext+0xa8>)
 8003f68:	2201      	movs	r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f6c:	e040      	b.n	8003ff0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003f6e:	4b24      	ldr	r3, [pc, #144]	@ (8004000 <vTaskSwitchContext+0xa8>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f74:	4b23      	ldr	r3, [pc, #140]	@ (8004004 <vTaskSwitchContext+0xac>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	fab3 f383 	clz	r3, r3
 8003f80:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003f82:	7afb      	ldrb	r3, [r7, #11]
 8003f84:	f1c3 031f 	rsb	r3, r3, #31
 8003f88:	617b      	str	r3, [r7, #20]
 8003f8a:	491f      	ldr	r1, [pc, #124]	@ (8004008 <vTaskSwitchContext+0xb0>)
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4413      	add	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	440b      	add	r3, r1
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10b      	bne.n	8003fb6 <vTaskSwitchContext+0x5e>
	__asm volatile
 8003f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fa2:	f383 8811 	msr	BASEPRI, r3
 8003fa6:	f3bf 8f6f 	isb	sy
 8003faa:	f3bf 8f4f 	dsb	sy
 8003fae:	607b      	str	r3, [r7, #4]
}
 8003fb0:	bf00      	nop
 8003fb2:	bf00      	nop
 8003fb4:	e7fd      	b.n	8003fb2 <vTaskSwitchContext+0x5a>
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4413      	add	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4a11      	ldr	r2, [pc, #68]	@ (8004008 <vTaskSwitchContext+0xb0>)
 8003fc2:	4413      	add	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	605a      	str	r2, [r3, #4]
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	3308      	adds	r3, #8
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d104      	bne.n	8003fe6 <vTaskSwitchContext+0x8e>
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	605a      	str	r2, [r3, #4]
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	4a07      	ldr	r2, [pc, #28]	@ (800400c <vTaskSwitchContext+0xb4>)
 8003fee:	6013      	str	r3, [r2, #0]
}
 8003ff0:	bf00      	nop
 8003ff2:	371c      	adds	r7, #28
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	200002e4 	.word	0x200002e4
 8004000:	200002d0 	.word	0x200002d0
 8004004:	200002c4 	.word	0x200002c4
 8004008:	200001c0 	.word	0x200001c0
 800400c:	200001bc 	.word	0x200001bc

08004010 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004018:	f000 f852 	bl	80040c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800401c:	4b06      	ldr	r3, [pc, #24]	@ (8004038 <prvIdleTask+0x28>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d9f9      	bls.n	8004018 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004024:	4b05      	ldr	r3, [pc, #20]	@ (800403c <prvIdleTask+0x2c>)
 8004026:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004034:	e7f0      	b.n	8004018 <prvIdleTask+0x8>
 8004036:	bf00      	nop
 8004038:	200001c0 	.word	0x200001c0
 800403c:	e000ed04 	.word	0xe000ed04

08004040 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004046:	2300      	movs	r3, #0
 8004048:	607b      	str	r3, [r7, #4]
 800404a:	e00c      	b.n	8004066 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	4613      	mov	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4a12      	ldr	r2, [pc, #72]	@ (80040a0 <prvInitialiseTaskLists+0x60>)
 8004058:	4413      	add	r3, r2
 800405a:	4618      	mov	r0, r3
 800405c:	f7ff fb8a 	bl	8003774 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3301      	adds	r3, #1
 8004064:	607b      	str	r3, [r7, #4]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b06      	cmp	r3, #6
 800406a:	d9ef      	bls.n	800404c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800406c:	480d      	ldr	r0, [pc, #52]	@ (80040a4 <prvInitialiseTaskLists+0x64>)
 800406e:	f7ff fb81 	bl	8003774 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004072:	480d      	ldr	r0, [pc, #52]	@ (80040a8 <prvInitialiseTaskLists+0x68>)
 8004074:	f7ff fb7e 	bl	8003774 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004078:	480c      	ldr	r0, [pc, #48]	@ (80040ac <prvInitialiseTaskLists+0x6c>)
 800407a:	f7ff fb7b 	bl	8003774 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800407e:	480c      	ldr	r0, [pc, #48]	@ (80040b0 <prvInitialiseTaskLists+0x70>)
 8004080:	f7ff fb78 	bl	8003774 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004084:	480b      	ldr	r0, [pc, #44]	@ (80040b4 <prvInitialiseTaskLists+0x74>)
 8004086:	f7ff fb75 	bl	8003774 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800408a:	4b0b      	ldr	r3, [pc, #44]	@ (80040b8 <prvInitialiseTaskLists+0x78>)
 800408c:	4a05      	ldr	r2, [pc, #20]	@ (80040a4 <prvInitialiseTaskLists+0x64>)
 800408e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004090:	4b0a      	ldr	r3, [pc, #40]	@ (80040bc <prvInitialiseTaskLists+0x7c>)
 8004092:	4a05      	ldr	r2, [pc, #20]	@ (80040a8 <prvInitialiseTaskLists+0x68>)
 8004094:	601a      	str	r2, [r3, #0]
}
 8004096:	bf00      	nop
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	200001c0 	.word	0x200001c0
 80040a4:	2000024c 	.word	0x2000024c
 80040a8:	20000260 	.word	0x20000260
 80040ac:	2000027c 	.word	0x2000027c
 80040b0:	20000290 	.word	0x20000290
 80040b4:	200002a8 	.word	0x200002a8
 80040b8:	20000274 	.word	0x20000274
 80040bc:	20000278 	.word	0x20000278

080040c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040c6:	e019      	b.n	80040fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80040c8:	f000 fa1e 	bl	8004508 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040cc:	4b10      	ldr	r3, [pc, #64]	@ (8004110 <prvCheckTasksWaitingTermination+0x50>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3304      	adds	r3, #4
 80040d8:	4618      	mov	r0, r3
 80040da:	f7ff fbd5 	bl	8003888 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80040de:	4b0d      	ldr	r3, [pc, #52]	@ (8004114 <prvCheckTasksWaitingTermination+0x54>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3b01      	subs	r3, #1
 80040e4:	4a0b      	ldr	r2, [pc, #44]	@ (8004114 <prvCheckTasksWaitingTermination+0x54>)
 80040e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80040e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004118 <prvCheckTasksWaitingTermination+0x58>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	3b01      	subs	r3, #1
 80040ee:	4a0a      	ldr	r2, [pc, #40]	@ (8004118 <prvCheckTasksWaitingTermination+0x58>)
 80040f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80040f2:	f000 fa3b 	bl	800456c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f810 	bl	800411c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040fc:	4b06      	ldr	r3, [pc, #24]	@ (8004118 <prvCheckTasksWaitingTermination+0x58>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1e1      	bne.n	80040c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004104:	bf00      	nop
 8004106:	bf00      	nop
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	20000290 	.word	0x20000290
 8004114:	200002bc 	.word	0x200002bc
 8004118:	200002a4 	.word	0x200002a4

0800411c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004128:	4618      	mov	r0, r3
 800412a:	f000 fb9b 	bl	8004864 <vPortFree>
			vPortFree( pxTCB );
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 fb98 	bl	8004864 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004134:	bf00      	nop
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004142:	4b0c      	ldr	r3, [pc, #48]	@ (8004174 <prvResetNextTaskUnblockTime+0x38>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d104      	bne.n	8004156 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800414c:	4b0a      	ldr	r3, [pc, #40]	@ (8004178 <prvResetNextTaskUnblockTime+0x3c>)
 800414e:	f04f 32ff 	mov.w	r2, #4294967295
 8004152:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004154:	e008      	b.n	8004168 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004156:	4b07      	ldr	r3, [pc, #28]	@ (8004174 <prvResetNextTaskUnblockTime+0x38>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	4a04      	ldr	r2, [pc, #16]	@ (8004178 <prvResetNextTaskUnblockTime+0x3c>)
 8004166:	6013      	str	r3, [r2, #0]
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	20000274 	.word	0x20000274
 8004178:	200002dc 	.word	0x200002dc

0800417c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8004182:	4b05      	ldr	r3, [pc, #20]	@ (8004198 <xTaskGetCurrentTaskHandle+0x1c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	607b      	str	r3, [r7, #4]

		return xReturn;
 8004188:	687b      	ldr	r3, [r7, #4]
	}
 800418a:	4618      	mov	r0, r3
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	200001bc 	.word	0x200001bc

0800419c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80041a2:	4b0b      	ldr	r3, [pc, #44]	@ (80041d0 <xTaskGetSchedulerState+0x34>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d102      	bne.n	80041b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80041aa:	2301      	movs	r3, #1
 80041ac:	607b      	str	r3, [r7, #4]
 80041ae:	e008      	b.n	80041c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041b0:	4b08      	ldr	r3, [pc, #32]	@ (80041d4 <xTaskGetSchedulerState+0x38>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d102      	bne.n	80041be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80041b8:	2302      	movs	r3, #2
 80041ba:	607b      	str	r3, [r7, #4]
 80041bc:	e001      	b.n	80041c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80041be:	2300      	movs	r3, #0
 80041c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80041c2:	687b      	ldr	r3, [r7, #4]
	}
 80041c4:	4618      	mov	r0, r3
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	200002c8 	.word	0x200002c8
 80041d4:	200002e4 	.word	0x200002e4

080041d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80041e2:	4b29      	ldr	r3, [pc, #164]	@ (8004288 <prvAddCurrentTaskToDelayedList+0xb0>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041e8:	4b28      	ldr	r3, [pc, #160]	@ (800428c <prvAddCurrentTaskToDelayedList+0xb4>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3304      	adds	r3, #4
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7ff fb4a 	bl	8003888 <uxListRemove>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10b      	bne.n	8004212 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80041fa:	4b24      	ldr	r3, [pc, #144]	@ (800428c <prvAddCurrentTaskToDelayedList+0xb4>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004200:	2201      	movs	r2, #1
 8004202:	fa02 f303 	lsl.w	r3, r2, r3
 8004206:	43da      	mvns	r2, r3
 8004208:	4b21      	ldr	r3, [pc, #132]	@ (8004290 <prvAddCurrentTaskToDelayedList+0xb8>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4013      	ands	r3, r2
 800420e:	4a20      	ldr	r2, [pc, #128]	@ (8004290 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004210:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004218:	d10a      	bne.n	8004230 <prvAddCurrentTaskToDelayedList+0x58>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d007      	beq.n	8004230 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004220:	4b1a      	ldr	r3, [pc, #104]	@ (800428c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3304      	adds	r3, #4
 8004226:	4619      	mov	r1, r3
 8004228:	481a      	ldr	r0, [pc, #104]	@ (8004294 <prvAddCurrentTaskToDelayedList+0xbc>)
 800422a:	f7ff fad0 	bl	80037ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800422e:	e026      	b.n	800427e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4413      	add	r3, r2
 8004236:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004238:	4b14      	ldr	r3, [pc, #80]	@ (800428c <prvAddCurrentTaskToDelayedList+0xb4>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	429a      	cmp	r2, r3
 8004246:	d209      	bcs.n	800425c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004248:	4b13      	ldr	r3, [pc, #76]	@ (8004298 <prvAddCurrentTaskToDelayedList+0xc0>)
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	4b0f      	ldr	r3, [pc, #60]	@ (800428c <prvAddCurrentTaskToDelayedList+0xb4>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	3304      	adds	r3, #4
 8004252:	4619      	mov	r1, r3
 8004254:	4610      	mov	r0, r2
 8004256:	f7ff fade 	bl	8003816 <vListInsert>
}
 800425a:	e010      	b.n	800427e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800425c:	4b0f      	ldr	r3, [pc, #60]	@ (800429c <prvAddCurrentTaskToDelayedList+0xc4>)
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	4b0a      	ldr	r3, [pc, #40]	@ (800428c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	3304      	adds	r3, #4
 8004266:	4619      	mov	r1, r3
 8004268:	4610      	mov	r0, r2
 800426a:	f7ff fad4 	bl	8003816 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800426e:	4b0c      	ldr	r3, [pc, #48]	@ (80042a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	429a      	cmp	r2, r3
 8004276:	d202      	bcs.n	800427e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004278:	4a09      	ldr	r2, [pc, #36]	@ (80042a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	6013      	str	r3, [r2, #0]
}
 800427e:	bf00      	nop
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	200002c0 	.word	0x200002c0
 800428c:	200001bc 	.word	0x200001bc
 8004290:	200002c4 	.word	0x200002c4
 8004294:	200002a8 	.word	0x200002a8
 8004298:	20000278 	.word	0x20000278
 800429c:	20000274 	.word	0x20000274
 80042a0:	200002dc 	.word	0x200002dc

080042a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	3b04      	subs	r3, #4
 80042b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80042bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	3b04      	subs	r3, #4
 80042c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f023 0201 	bic.w	r2, r3, #1
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	3b04      	subs	r3, #4
 80042d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80042d4:	4a0c      	ldr	r2, [pc, #48]	@ (8004308 <pxPortInitialiseStack+0x64>)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	3b14      	subs	r3, #20
 80042de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	3b04      	subs	r3, #4
 80042ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f06f 0202 	mvn.w	r2, #2
 80042f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	3b20      	subs	r3, #32
 80042f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80042fa:	68fb      	ldr	r3, [r7, #12]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3714      	adds	r7, #20
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr
 8004308:	0800430d 	.word	0x0800430d

0800430c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004312:	2300      	movs	r3, #0
 8004314:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004316:	4b13      	ldr	r3, [pc, #76]	@ (8004364 <prvTaskExitError+0x58>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431e:	d00b      	beq.n	8004338 <prvTaskExitError+0x2c>
	__asm volatile
 8004320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004324:	f383 8811 	msr	BASEPRI, r3
 8004328:	f3bf 8f6f 	isb	sy
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	60fb      	str	r3, [r7, #12]
}
 8004332:	bf00      	nop
 8004334:	bf00      	nop
 8004336:	e7fd      	b.n	8004334 <prvTaskExitError+0x28>
	__asm volatile
 8004338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800433c:	f383 8811 	msr	BASEPRI, r3
 8004340:	f3bf 8f6f 	isb	sy
 8004344:	f3bf 8f4f 	dsb	sy
 8004348:	60bb      	str	r3, [r7, #8]
}
 800434a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800434c:	bf00      	nop
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0fc      	beq.n	800434e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004354:	bf00      	nop
 8004356:	bf00      	nop
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	2000000c 	.word	0x2000000c
	...

08004370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004370:	4b07      	ldr	r3, [pc, #28]	@ (8004390 <pxCurrentTCBConst2>)
 8004372:	6819      	ldr	r1, [r3, #0]
 8004374:	6808      	ldr	r0, [r1, #0]
 8004376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800437a:	f380 8809 	msr	PSP, r0
 800437e:	f3bf 8f6f 	isb	sy
 8004382:	f04f 0000 	mov.w	r0, #0
 8004386:	f380 8811 	msr	BASEPRI, r0
 800438a:	4770      	bx	lr
 800438c:	f3af 8000 	nop.w

08004390 <pxCurrentTCBConst2>:
 8004390:	200001bc 	.word	0x200001bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004394:	bf00      	nop
 8004396:	bf00      	nop

08004398 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004398:	4808      	ldr	r0, [pc, #32]	@ (80043bc <prvPortStartFirstTask+0x24>)
 800439a:	6800      	ldr	r0, [r0, #0]
 800439c:	6800      	ldr	r0, [r0, #0]
 800439e:	f380 8808 	msr	MSP, r0
 80043a2:	f04f 0000 	mov.w	r0, #0
 80043a6:	f380 8814 	msr	CONTROL, r0
 80043aa:	b662      	cpsie	i
 80043ac:	b661      	cpsie	f
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	df00      	svc	0
 80043b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80043ba:	bf00      	nop
 80043bc:	e000ed08 	.word	0xe000ed08

080043c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80043c6:	4b47      	ldr	r3, [pc, #284]	@ (80044e4 <xPortStartScheduler+0x124>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a47      	ldr	r2, [pc, #284]	@ (80044e8 <xPortStartScheduler+0x128>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d10b      	bne.n	80043e8 <xPortStartScheduler+0x28>
	__asm volatile
 80043d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043d4:	f383 8811 	msr	BASEPRI, r3
 80043d8:	f3bf 8f6f 	isb	sy
 80043dc:	f3bf 8f4f 	dsb	sy
 80043e0:	613b      	str	r3, [r7, #16]
}
 80043e2:	bf00      	nop
 80043e4:	bf00      	nop
 80043e6:	e7fd      	b.n	80043e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80043e8:	4b3e      	ldr	r3, [pc, #248]	@ (80044e4 <xPortStartScheduler+0x124>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a3f      	ldr	r2, [pc, #252]	@ (80044ec <xPortStartScheduler+0x12c>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d10b      	bne.n	800440a <xPortStartScheduler+0x4a>
	__asm volatile
 80043f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	60fb      	str	r3, [r7, #12]
}
 8004404:	bf00      	nop
 8004406:	bf00      	nop
 8004408:	e7fd      	b.n	8004406 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800440a:	4b39      	ldr	r3, [pc, #228]	@ (80044f0 <xPortStartScheduler+0x130>)
 800440c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	b2db      	uxtb	r3, r3
 8004414:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	22ff      	movs	r2, #255	@ 0xff
 800441a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	b2db      	uxtb	r3, r3
 8004422:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004424:	78fb      	ldrb	r3, [r7, #3]
 8004426:	b2db      	uxtb	r3, r3
 8004428:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800442c:	b2da      	uxtb	r2, r3
 800442e:	4b31      	ldr	r3, [pc, #196]	@ (80044f4 <xPortStartScheduler+0x134>)
 8004430:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004432:	4b31      	ldr	r3, [pc, #196]	@ (80044f8 <xPortStartScheduler+0x138>)
 8004434:	2207      	movs	r2, #7
 8004436:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004438:	e009      	b.n	800444e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800443a:	4b2f      	ldr	r3, [pc, #188]	@ (80044f8 <xPortStartScheduler+0x138>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	3b01      	subs	r3, #1
 8004440:	4a2d      	ldr	r2, [pc, #180]	@ (80044f8 <xPortStartScheduler+0x138>)
 8004442:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004444:	78fb      	ldrb	r3, [r7, #3]
 8004446:	b2db      	uxtb	r3, r3
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	b2db      	uxtb	r3, r3
 800444c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800444e:	78fb      	ldrb	r3, [r7, #3]
 8004450:	b2db      	uxtb	r3, r3
 8004452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004456:	2b80      	cmp	r3, #128	@ 0x80
 8004458:	d0ef      	beq.n	800443a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800445a:	4b27      	ldr	r3, [pc, #156]	@ (80044f8 <xPortStartScheduler+0x138>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f1c3 0307 	rsb	r3, r3, #7
 8004462:	2b04      	cmp	r3, #4
 8004464:	d00b      	beq.n	800447e <xPortStartScheduler+0xbe>
	__asm volatile
 8004466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800446a:	f383 8811 	msr	BASEPRI, r3
 800446e:	f3bf 8f6f 	isb	sy
 8004472:	f3bf 8f4f 	dsb	sy
 8004476:	60bb      	str	r3, [r7, #8]
}
 8004478:	bf00      	nop
 800447a:	bf00      	nop
 800447c:	e7fd      	b.n	800447a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800447e:	4b1e      	ldr	r3, [pc, #120]	@ (80044f8 <xPortStartScheduler+0x138>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	021b      	lsls	r3, r3, #8
 8004484:	4a1c      	ldr	r2, [pc, #112]	@ (80044f8 <xPortStartScheduler+0x138>)
 8004486:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004488:	4b1b      	ldr	r3, [pc, #108]	@ (80044f8 <xPortStartScheduler+0x138>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004490:	4a19      	ldr	r2, [pc, #100]	@ (80044f8 <xPortStartScheduler+0x138>)
 8004492:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	b2da      	uxtb	r2, r3
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800449c:	4b17      	ldr	r3, [pc, #92]	@ (80044fc <xPortStartScheduler+0x13c>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a16      	ldr	r2, [pc, #88]	@ (80044fc <xPortStartScheduler+0x13c>)
 80044a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80044a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80044a8:	4b14      	ldr	r3, [pc, #80]	@ (80044fc <xPortStartScheduler+0x13c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a13      	ldr	r2, [pc, #76]	@ (80044fc <xPortStartScheduler+0x13c>)
 80044ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80044b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80044b4:	f000 f8da 	bl	800466c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80044b8:	4b11      	ldr	r3, [pc, #68]	@ (8004500 <xPortStartScheduler+0x140>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80044be:	f000 f8f9 	bl	80046b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80044c2:	4b10      	ldr	r3, [pc, #64]	@ (8004504 <xPortStartScheduler+0x144>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a0f      	ldr	r2, [pc, #60]	@ (8004504 <xPortStartScheduler+0x144>)
 80044c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80044cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80044ce:	f7ff ff63 	bl	8004398 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80044d2:	f7ff fd41 	bl	8003f58 <vTaskSwitchContext>
	prvTaskExitError();
 80044d6:	f7ff ff19 	bl	800430c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	e000ed00 	.word	0xe000ed00
 80044e8:	410fc271 	.word	0x410fc271
 80044ec:	410fc270 	.word	0x410fc270
 80044f0:	e000e400 	.word	0xe000e400
 80044f4:	200002e8 	.word	0x200002e8
 80044f8:	200002ec 	.word	0x200002ec
 80044fc:	e000ed20 	.word	0xe000ed20
 8004500:	2000000c 	.word	0x2000000c
 8004504:	e000ef34 	.word	0xe000ef34

08004508 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
	__asm volatile
 800450e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004512:	f383 8811 	msr	BASEPRI, r3
 8004516:	f3bf 8f6f 	isb	sy
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	607b      	str	r3, [r7, #4]
}
 8004520:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004522:	4b10      	ldr	r3, [pc, #64]	@ (8004564 <vPortEnterCritical+0x5c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	3301      	adds	r3, #1
 8004528:	4a0e      	ldr	r2, [pc, #56]	@ (8004564 <vPortEnterCritical+0x5c>)
 800452a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800452c:	4b0d      	ldr	r3, [pc, #52]	@ (8004564 <vPortEnterCritical+0x5c>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d110      	bne.n	8004556 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004534:	4b0c      	ldr	r3, [pc, #48]	@ (8004568 <vPortEnterCritical+0x60>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00b      	beq.n	8004556 <vPortEnterCritical+0x4e>
	__asm volatile
 800453e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004542:	f383 8811 	msr	BASEPRI, r3
 8004546:	f3bf 8f6f 	isb	sy
 800454a:	f3bf 8f4f 	dsb	sy
 800454e:	603b      	str	r3, [r7, #0]
}
 8004550:	bf00      	nop
 8004552:	bf00      	nop
 8004554:	e7fd      	b.n	8004552 <vPortEnterCritical+0x4a>
	}
}
 8004556:	bf00      	nop
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	2000000c 	.word	0x2000000c
 8004568:	e000ed04 	.word	0xe000ed04

0800456c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004572:	4b12      	ldr	r3, [pc, #72]	@ (80045bc <vPortExitCritical+0x50>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10b      	bne.n	8004592 <vPortExitCritical+0x26>
	__asm volatile
 800457a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800457e:	f383 8811 	msr	BASEPRI, r3
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	f3bf 8f4f 	dsb	sy
 800458a:	607b      	str	r3, [r7, #4]
}
 800458c:	bf00      	nop
 800458e:	bf00      	nop
 8004590:	e7fd      	b.n	800458e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004592:	4b0a      	ldr	r3, [pc, #40]	@ (80045bc <vPortExitCritical+0x50>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	3b01      	subs	r3, #1
 8004598:	4a08      	ldr	r2, [pc, #32]	@ (80045bc <vPortExitCritical+0x50>)
 800459a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800459c:	4b07      	ldr	r3, [pc, #28]	@ (80045bc <vPortExitCritical+0x50>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d105      	bne.n	80045b0 <vPortExitCritical+0x44>
 80045a4:	2300      	movs	r3, #0
 80045a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80045ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	2000000c 	.word	0x2000000c

080045c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80045c0:	f3ef 8009 	mrs	r0, PSP
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	4b15      	ldr	r3, [pc, #84]	@ (8004620 <pxCurrentTCBConst>)
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	f01e 0f10 	tst.w	lr, #16
 80045d0:	bf08      	it	eq
 80045d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80045d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045da:	6010      	str	r0, [r2, #0]
 80045dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80045e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80045e4:	f380 8811 	msr	BASEPRI, r0
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	f3bf 8f6f 	isb	sy
 80045f0:	f7ff fcb2 	bl	8003f58 <vTaskSwitchContext>
 80045f4:	f04f 0000 	mov.w	r0, #0
 80045f8:	f380 8811 	msr	BASEPRI, r0
 80045fc:	bc09      	pop	{r0, r3}
 80045fe:	6819      	ldr	r1, [r3, #0]
 8004600:	6808      	ldr	r0, [r1, #0]
 8004602:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004606:	f01e 0f10 	tst.w	lr, #16
 800460a:	bf08      	it	eq
 800460c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004610:	f380 8809 	msr	PSP, r0
 8004614:	f3bf 8f6f 	isb	sy
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	f3af 8000 	nop.w

08004620 <pxCurrentTCBConst>:
 8004620:	200001bc 	.word	0x200001bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004624:	bf00      	nop
 8004626:	bf00      	nop

08004628 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
	__asm volatile
 800462e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004632:	f383 8811 	msr	BASEPRI, r3
 8004636:	f3bf 8f6f 	isb	sy
 800463a:	f3bf 8f4f 	dsb	sy
 800463e:	607b      	str	r3, [r7, #4]
}
 8004640:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004642:	f7ff fbcf 	bl	8003de4 <xTaskIncrementTick>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800464c:	4b06      	ldr	r3, [pc, #24]	@ (8004668 <xPortSysTickHandler+0x40>)
 800464e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	2300      	movs	r3, #0
 8004656:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	f383 8811 	msr	BASEPRI, r3
}
 800465e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004660:	bf00      	nop
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	e000ed04 	.word	0xe000ed04

0800466c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800466c:	b480      	push	{r7}
 800466e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004670:	4b0b      	ldr	r3, [pc, #44]	@ (80046a0 <vPortSetupTimerInterrupt+0x34>)
 8004672:	2200      	movs	r2, #0
 8004674:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004676:	4b0b      	ldr	r3, [pc, #44]	@ (80046a4 <vPortSetupTimerInterrupt+0x38>)
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800467c:	4b0a      	ldr	r3, [pc, #40]	@ (80046a8 <vPortSetupTimerInterrupt+0x3c>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a0a      	ldr	r2, [pc, #40]	@ (80046ac <vPortSetupTimerInterrupt+0x40>)
 8004682:	fba2 2303 	umull	r2, r3, r2, r3
 8004686:	099b      	lsrs	r3, r3, #6
 8004688:	4a09      	ldr	r2, [pc, #36]	@ (80046b0 <vPortSetupTimerInterrupt+0x44>)
 800468a:	3b01      	subs	r3, #1
 800468c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800468e:	4b04      	ldr	r3, [pc, #16]	@ (80046a0 <vPortSetupTimerInterrupt+0x34>)
 8004690:	2207      	movs	r2, #7
 8004692:	601a      	str	r2, [r3, #0]
}
 8004694:	bf00      	nop
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	e000e010 	.word	0xe000e010
 80046a4:	e000e018 	.word	0xe000e018
 80046a8:	20000000 	.word	0x20000000
 80046ac:	10624dd3 	.word	0x10624dd3
 80046b0:	e000e014 	.word	0xe000e014

080046b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80046b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80046c4 <vPortEnableVFP+0x10>
 80046b8:	6801      	ldr	r1, [r0, #0]
 80046ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80046be:	6001      	str	r1, [r0, #0]
 80046c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80046c2:	bf00      	nop
 80046c4:	e000ed88 	.word	0xe000ed88

080046c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b08a      	sub	sp, #40	@ 0x28
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80046d0:	2300      	movs	r3, #0
 80046d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80046d4:	f7ff fab4 	bl	8003c40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80046d8:	4b5c      	ldr	r3, [pc, #368]	@ (800484c <pvPortMalloc+0x184>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80046e0:	f000 f924 	bl	800492c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80046e4:	4b5a      	ldr	r3, [pc, #360]	@ (8004850 <pvPortMalloc+0x188>)
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4013      	ands	r3, r2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f040 8095 	bne.w	800481c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d01e      	beq.n	8004736 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80046f8:	2208      	movs	r2, #8
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4413      	add	r3, r2
 80046fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	2b00      	cmp	r3, #0
 8004708:	d015      	beq.n	8004736 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f023 0307 	bic.w	r3, r3, #7
 8004710:	3308      	adds	r3, #8
 8004712:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f003 0307 	and.w	r3, r3, #7
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00b      	beq.n	8004736 <pvPortMalloc+0x6e>
	__asm volatile
 800471e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004722:	f383 8811 	msr	BASEPRI, r3
 8004726:	f3bf 8f6f 	isb	sy
 800472a:	f3bf 8f4f 	dsb	sy
 800472e:	617b      	str	r3, [r7, #20]
}
 8004730:	bf00      	nop
 8004732:	bf00      	nop
 8004734:	e7fd      	b.n	8004732 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d06f      	beq.n	800481c <pvPortMalloc+0x154>
 800473c:	4b45      	ldr	r3, [pc, #276]	@ (8004854 <pvPortMalloc+0x18c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	429a      	cmp	r2, r3
 8004744:	d86a      	bhi.n	800481c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004746:	4b44      	ldr	r3, [pc, #272]	@ (8004858 <pvPortMalloc+0x190>)
 8004748:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800474a:	4b43      	ldr	r3, [pc, #268]	@ (8004858 <pvPortMalloc+0x190>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004750:	e004      	b.n	800475c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004754:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800475c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	429a      	cmp	r2, r3
 8004764:	d903      	bls.n	800476e <pvPortMalloc+0xa6>
 8004766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1f1      	bne.n	8004752 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800476e:	4b37      	ldr	r3, [pc, #220]	@ (800484c <pvPortMalloc+0x184>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004774:	429a      	cmp	r2, r3
 8004776:	d051      	beq.n	800481c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004778:	6a3b      	ldr	r3, [r7, #32]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2208      	movs	r2, #8
 800477e:	4413      	add	r3, r2
 8004780:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800478a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	1ad2      	subs	r2, r2, r3
 8004792:	2308      	movs	r3, #8
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	429a      	cmp	r2, r3
 8004798:	d920      	bls.n	80047dc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800479a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4413      	add	r3, r2
 80047a0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	f003 0307 	and.w	r3, r3, #7
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00b      	beq.n	80047c4 <pvPortMalloc+0xfc>
	__asm volatile
 80047ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047b0:	f383 8811 	msr	BASEPRI, r3
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	613b      	str	r3, [r7, #16]
}
 80047be:	bf00      	nop
 80047c0:	bf00      	nop
 80047c2:	e7fd      	b.n	80047c0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80047c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	1ad2      	subs	r2, r2, r3
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80047d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80047d6:	69b8      	ldr	r0, [r7, #24]
 80047d8:	f000 f90a 	bl	80049f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80047dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004854 <pvPortMalloc+0x18c>)
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	4a1b      	ldr	r2, [pc, #108]	@ (8004854 <pvPortMalloc+0x18c>)
 80047e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80047ea:	4b1a      	ldr	r3, [pc, #104]	@ (8004854 <pvPortMalloc+0x18c>)
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	4b1b      	ldr	r3, [pc, #108]	@ (800485c <pvPortMalloc+0x194>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d203      	bcs.n	80047fe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80047f6:	4b17      	ldr	r3, [pc, #92]	@ (8004854 <pvPortMalloc+0x18c>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a18      	ldr	r2, [pc, #96]	@ (800485c <pvPortMalloc+0x194>)
 80047fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80047fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004800:	685a      	ldr	r2, [r3, #4]
 8004802:	4b13      	ldr	r3, [pc, #76]	@ (8004850 <pvPortMalloc+0x188>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	431a      	orrs	r2, r3
 8004808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800480c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480e:	2200      	movs	r2, #0
 8004810:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004812:	4b13      	ldr	r3, [pc, #76]	@ (8004860 <pvPortMalloc+0x198>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	3301      	adds	r3, #1
 8004818:	4a11      	ldr	r2, [pc, #68]	@ (8004860 <pvPortMalloc+0x198>)
 800481a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800481c:	f7ff fa1e 	bl	8003c5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	f003 0307 	and.w	r3, r3, #7
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00b      	beq.n	8004842 <pvPortMalloc+0x17a>
	__asm volatile
 800482a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800482e:	f383 8811 	msr	BASEPRI, r3
 8004832:	f3bf 8f6f 	isb	sy
 8004836:	f3bf 8f4f 	dsb	sy
 800483a:	60fb      	str	r3, [r7, #12]
}
 800483c:	bf00      	nop
 800483e:	bf00      	nop
 8004840:	e7fd      	b.n	800483e <pvPortMalloc+0x176>
	return pvReturn;
 8004842:	69fb      	ldr	r3, [r7, #28]
}
 8004844:	4618      	mov	r0, r3
 8004846:	3728      	adds	r7, #40	@ 0x28
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	20000ef8 	.word	0x20000ef8
 8004850:	20000f0c 	.word	0x20000f0c
 8004854:	20000efc 	.word	0x20000efc
 8004858:	20000ef0 	.word	0x20000ef0
 800485c:	20000f00 	.word	0x20000f00
 8004860:	20000f04 	.word	0x20000f04

08004864 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d04f      	beq.n	8004916 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004876:	2308      	movs	r3, #8
 8004878:	425b      	negs	r3, r3
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	4413      	add	r3, r2
 800487e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	4b25      	ldr	r3, [pc, #148]	@ (8004920 <vPortFree+0xbc>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4013      	ands	r3, r2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10b      	bne.n	80048aa <vPortFree+0x46>
	__asm volatile
 8004892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004896:	f383 8811 	msr	BASEPRI, r3
 800489a:	f3bf 8f6f 	isb	sy
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	60fb      	str	r3, [r7, #12]
}
 80048a4:	bf00      	nop
 80048a6:	bf00      	nop
 80048a8:	e7fd      	b.n	80048a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00b      	beq.n	80048ca <vPortFree+0x66>
	__asm volatile
 80048b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b6:	f383 8811 	msr	BASEPRI, r3
 80048ba:	f3bf 8f6f 	isb	sy
 80048be:	f3bf 8f4f 	dsb	sy
 80048c2:	60bb      	str	r3, [r7, #8]
}
 80048c4:	bf00      	nop
 80048c6:	bf00      	nop
 80048c8:	e7fd      	b.n	80048c6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	4b14      	ldr	r3, [pc, #80]	@ (8004920 <vPortFree+0xbc>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4013      	ands	r3, r2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d01e      	beq.n	8004916 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d11a      	bne.n	8004916 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004920 <vPortFree+0xbc>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	43db      	mvns	r3, r3
 80048ea:	401a      	ands	r2, r3
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80048f0:	f7ff f9a6 	bl	8003c40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004924 <vPortFree+0xc0>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4413      	add	r3, r2
 80048fe:	4a09      	ldr	r2, [pc, #36]	@ (8004924 <vPortFree+0xc0>)
 8004900:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004902:	6938      	ldr	r0, [r7, #16]
 8004904:	f000 f874 	bl	80049f0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004908:	4b07      	ldr	r3, [pc, #28]	@ (8004928 <vPortFree+0xc4>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3301      	adds	r3, #1
 800490e:	4a06      	ldr	r2, [pc, #24]	@ (8004928 <vPortFree+0xc4>)
 8004910:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004912:	f7ff f9a3 	bl	8003c5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004916:	bf00      	nop
 8004918:	3718      	adds	r7, #24
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	20000f0c 	.word	0x20000f0c
 8004924:	20000efc 	.word	0x20000efc
 8004928:	20000f08 	.word	0x20000f08

0800492c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004932:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004936:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004938:	4b27      	ldr	r3, [pc, #156]	@ (80049d8 <prvHeapInit+0xac>)
 800493a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f003 0307 	and.w	r3, r3, #7
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00c      	beq.n	8004960 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	3307      	adds	r3, #7
 800494a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f023 0307 	bic.w	r3, r3, #7
 8004952:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	4a1f      	ldr	r2, [pc, #124]	@ (80049d8 <prvHeapInit+0xac>)
 800495c:	4413      	add	r3, r2
 800495e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004964:	4a1d      	ldr	r2, [pc, #116]	@ (80049dc <prvHeapInit+0xb0>)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800496a:	4b1c      	ldr	r3, [pc, #112]	@ (80049dc <prvHeapInit+0xb0>)
 800496c:	2200      	movs	r2, #0
 800496e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	4413      	add	r3, r2
 8004976:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004978:	2208      	movs	r2, #8
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	1a9b      	subs	r3, r3, r2
 800497e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f023 0307 	bic.w	r3, r3, #7
 8004986:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4a15      	ldr	r2, [pc, #84]	@ (80049e0 <prvHeapInit+0xb4>)
 800498c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800498e:	4b14      	ldr	r3, [pc, #80]	@ (80049e0 <prvHeapInit+0xb4>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2200      	movs	r2, #0
 8004994:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004996:	4b12      	ldr	r3, [pc, #72]	@ (80049e0 <prvHeapInit+0xb4>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2200      	movs	r2, #0
 800499c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	1ad2      	subs	r2, r2, r3
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80049ac:	4b0c      	ldr	r3, [pc, #48]	@ (80049e0 <prvHeapInit+0xb4>)
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	4a0a      	ldr	r2, [pc, #40]	@ (80049e4 <prvHeapInit+0xb8>)
 80049ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	4a09      	ldr	r2, [pc, #36]	@ (80049e8 <prvHeapInit+0xbc>)
 80049c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80049c4:	4b09      	ldr	r3, [pc, #36]	@ (80049ec <prvHeapInit+0xc0>)
 80049c6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80049ca:	601a      	str	r2, [r3, #0]
}
 80049cc:	bf00      	nop
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	200002f0 	.word	0x200002f0
 80049dc:	20000ef0 	.word	0x20000ef0
 80049e0:	20000ef8 	.word	0x20000ef8
 80049e4:	20000f00 	.word	0x20000f00
 80049e8:	20000efc 	.word	0x20000efc
 80049ec:	20000f0c 	.word	0x20000f0c

080049f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80049f8:	4b28      	ldr	r3, [pc, #160]	@ (8004a9c <prvInsertBlockIntoFreeList+0xac>)
 80049fa:	60fb      	str	r3, [r7, #12]
 80049fc:	e002      	b.n	8004a04 <prvInsertBlockIntoFreeList+0x14>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	60fb      	str	r3, [r7, #12]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d8f7      	bhi.n	80049fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	4413      	add	r3, r2
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d108      	bne.n	8004a32 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	685a      	ldr	r2, [r3, #4]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	441a      	add	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	441a      	add	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d118      	bne.n	8004a78 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	4b15      	ldr	r3, [pc, #84]	@ (8004aa0 <prvInsertBlockIntoFreeList+0xb0>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d00d      	beq.n	8004a6e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	441a      	add	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	601a      	str	r2, [r3, #0]
 8004a6c:	e008      	b.n	8004a80 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8004aa0 <prvInsertBlockIntoFreeList+0xb0>)
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	601a      	str	r2, [r3, #0]
 8004a76:	e003      	b.n	8004a80 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d002      	beq.n	8004a8e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a8e:	bf00      	nop
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	20000ef0 	.word	0x20000ef0
 8004aa0:	20000ef8 	.word	0x20000ef8

08004aa4 <std>:
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	b510      	push	{r4, lr}
 8004aa8:	4604      	mov	r4, r0
 8004aaa:	e9c0 3300 	strd	r3, r3, [r0]
 8004aae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ab2:	6083      	str	r3, [r0, #8]
 8004ab4:	8181      	strh	r1, [r0, #12]
 8004ab6:	6643      	str	r3, [r0, #100]	@ 0x64
 8004ab8:	81c2      	strh	r2, [r0, #14]
 8004aba:	6183      	str	r3, [r0, #24]
 8004abc:	4619      	mov	r1, r3
 8004abe:	2208      	movs	r2, #8
 8004ac0:	305c      	adds	r0, #92	@ 0x5c
 8004ac2:	f000 fa2d 	bl	8004f20 <memset>
 8004ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8004afc <std+0x58>)
 8004ac8:	6263      	str	r3, [r4, #36]	@ 0x24
 8004aca:	4b0d      	ldr	r3, [pc, #52]	@ (8004b00 <std+0x5c>)
 8004acc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004ace:	4b0d      	ldr	r3, [pc, #52]	@ (8004b04 <std+0x60>)
 8004ad0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8004b08 <std+0x64>)
 8004ad4:	6323      	str	r3, [r4, #48]	@ 0x30
 8004ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8004b0c <std+0x68>)
 8004ad8:	6224      	str	r4, [r4, #32]
 8004ada:	429c      	cmp	r4, r3
 8004adc:	d006      	beq.n	8004aec <std+0x48>
 8004ade:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004ae2:	4294      	cmp	r4, r2
 8004ae4:	d002      	beq.n	8004aec <std+0x48>
 8004ae6:	33d0      	adds	r3, #208	@ 0xd0
 8004ae8:	429c      	cmp	r4, r3
 8004aea:	d105      	bne.n	8004af8 <std+0x54>
 8004aec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004af4:	f000 ba8c 	b.w	8005010 <__retarget_lock_init_recursive>
 8004af8:	bd10      	pop	{r4, pc}
 8004afa:	bf00      	nop
 8004afc:	08004d71 	.word	0x08004d71
 8004b00:	08004d93 	.word	0x08004d93
 8004b04:	08004dcb 	.word	0x08004dcb
 8004b08:	08004def 	.word	0x08004def
 8004b0c:	20000f10 	.word	0x20000f10

08004b10 <stdio_exit_handler>:
 8004b10:	4a02      	ldr	r2, [pc, #8]	@ (8004b1c <stdio_exit_handler+0xc>)
 8004b12:	4903      	ldr	r1, [pc, #12]	@ (8004b20 <stdio_exit_handler+0x10>)
 8004b14:	4803      	ldr	r0, [pc, #12]	@ (8004b24 <stdio_exit_handler+0x14>)
 8004b16:	f000 b869 	b.w	8004bec <_fwalk_sglue>
 8004b1a:	bf00      	nop
 8004b1c:	20000010 	.word	0x20000010
 8004b20:	08005b7d 	.word	0x08005b7d
 8004b24:	20000020 	.word	0x20000020

08004b28 <cleanup_stdio>:
 8004b28:	6841      	ldr	r1, [r0, #4]
 8004b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8004b5c <cleanup_stdio+0x34>)
 8004b2c:	4299      	cmp	r1, r3
 8004b2e:	b510      	push	{r4, lr}
 8004b30:	4604      	mov	r4, r0
 8004b32:	d001      	beq.n	8004b38 <cleanup_stdio+0x10>
 8004b34:	f001 f822 	bl	8005b7c <_fflush_r>
 8004b38:	68a1      	ldr	r1, [r4, #8]
 8004b3a:	4b09      	ldr	r3, [pc, #36]	@ (8004b60 <cleanup_stdio+0x38>)
 8004b3c:	4299      	cmp	r1, r3
 8004b3e:	d002      	beq.n	8004b46 <cleanup_stdio+0x1e>
 8004b40:	4620      	mov	r0, r4
 8004b42:	f001 f81b 	bl	8005b7c <_fflush_r>
 8004b46:	68e1      	ldr	r1, [r4, #12]
 8004b48:	4b06      	ldr	r3, [pc, #24]	@ (8004b64 <cleanup_stdio+0x3c>)
 8004b4a:	4299      	cmp	r1, r3
 8004b4c:	d004      	beq.n	8004b58 <cleanup_stdio+0x30>
 8004b4e:	4620      	mov	r0, r4
 8004b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b54:	f001 b812 	b.w	8005b7c <_fflush_r>
 8004b58:	bd10      	pop	{r4, pc}
 8004b5a:	bf00      	nop
 8004b5c:	20000f10 	.word	0x20000f10
 8004b60:	20000f78 	.word	0x20000f78
 8004b64:	20000fe0 	.word	0x20000fe0

08004b68 <global_stdio_init.part.0>:
 8004b68:	b510      	push	{r4, lr}
 8004b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8004b98 <global_stdio_init.part.0+0x30>)
 8004b6c:	4c0b      	ldr	r4, [pc, #44]	@ (8004b9c <global_stdio_init.part.0+0x34>)
 8004b6e:	4a0c      	ldr	r2, [pc, #48]	@ (8004ba0 <global_stdio_init.part.0+0x38>)
 8004b70:	601a      	str	r2, [r3, #0]
 8004b72:	4620      	mov	r0, r4
 8004b74:	2200      	movs	r2, #0
 8004b76:	2104      	movs	r1, #4
 8004b78:	f7ff ff94 	bl	8004aa4 <std>
 8004b7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004b80:	2201      	movs	r2, #1
 8004b82:	2109      	movs	r1, #9
 8004b84:	f7ff ff8e 	bl	8004aa4 <std>
 8004b88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004b8c:	2202      	movs	r2, #2
 8004b8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b92:	2112      	movs	r1, #18
 8004b94:	f7ff bf86 	b.w	8004aa4 <std>
 8004b98:	20001048 	.word	0x20001048
 8004b9c:	20000f10 	.word	0x20000f10
 8004ba0:	08004b11 	.word	0x08004b11

08004ba4 <__sfp_lock_acquire>:
 8004ba4:	4801      	ldr	r0, [pc, #4]	@ (8004bac <__sfp_lock_acquire+0x8>)
 8004ba6:	f000 ba34 	b.w	8005012 <__retarget_lock_acquire_recursive>
 8004baa:	bf00      	nop
 8004bac:	20001051 	.word	0x20001051

08004bb0 <__sfp_lock_release>:
 8004bb0:	4801      	ldr	r0, [pc, #4]	@ (8004bb8 <__sfp_lock_release+0x8>)
 8004bb2:	f000 ba2f 	b.w	8005014 <__retarget_lock_release_recursive>
 8004bb6:	bf00      	nop
 8004bb8:	20001051 	.word	0x20001051

08004bbc <__sinit>:
 8004bbc:	b510      	push	{r4, lr}
 8004bbe:	4604      	mov	r4, r0
 8004bc0:	f7ff fff0 	bl	8004ba4 <__sfp_lock_acquire>
 8004bc4:	6a23      	ldr	r3, [r4, #32]
 8004bc6:	b11b      	cbz	r3, 8004bd0 <__sinit+0x14>
 8004bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bcc:	f7ff bff0 	b.w	8004bb0 <__sfp_lock_release>
 8004bd0:	4b04      	ldr	r3, [pc, #16]	@ (8004be4 <__sinit+0x28>)
 8004bd2:	6223      	str	r3, [r4, #32]
 8004bd4:	4b04      	ldr	r3, [pc, #16]	@ (8004be8 <__sinit+0x2c>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1f5      	bne.n	8004bc8 <__sinit+0xc>
 8004bdc:	f7ff ffc4 	bl	8004b68 <global_stdio_init.part.0>
 8004be0:	e7f2      	b.n	8004bc8 <__sinit+0xc>
 8004be2:	bf00      	nop
 8004be4:	08004b29 	.word	0x08004b29
 8004be8:	20001048 	.word	0x20001048

08004bec <_fwalk_sglue>:
 8004bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bf0:	4607      	mov	r7, r0
 8004bf2:	4688      	mov	r8, r1
 8004bf4:	4614      	mov	r4, r2
 8004bf6:	2600      	movs	r6, #0
 8004bf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bfc:	f1b9 0901 	subs.w	r9, r9, #1
 8004c00:	d505      	bpl.n	8004c0e <_fwalk_sglue+0x22>
 8004c02:	6824      	ldr	r4, [r4, #0]
 8004c04:	2c00      	cmp	r4, #0
 8004c06:	d1f7      	bne.n	8004bf8 <_fwalk_sglue+0xc>
 8004c08:	4630      	mov	r0, r6
 8004c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c0e:	89ab      	ldrh	r3, [r5, #12]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d907      	bls.n	8004c24 <_fwalk_sglue+0x38>
 8004c14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c18:	3301      	adds	r3, #1
 8004c1a:	d003      	beq.n	8004c24 <_fwalk_sglue+0x38>
 8004c1c:	4629      	mov	r1, r5
 8004c1e:	4638      	mov	r0, r7
 8004c20:	47c0      	blx	r8
 8004c22:	4306      	orrs	r6, r0
 8004c24:	3568      	adds	r5, #104	@ 0x68
 8004c26:	e7e9      	b.n	8004bfc <_fwalk_sglue+0x10>

08004c28 <iprintf>:
 8004c28:	b40f      	push	{r0, r1, r2, r3}
 8004c2a:	b507      	push	{r0, r1, r2, lr}
 8004c2c:	4906      	ldr	r1, [pc, #24]	@ (8004c48 <iprintf+0x20>)
 8004c2e:	ab04      	add	r3, sp, #16
 8004c30:	6808      	ldr	r0, [r1, #0]
 8004c32:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c36:	6881      	ldr	r1, [r0, #8]
 8004c38:	9301      	str	r3, [sp, #4]
 8004c3a:	f000 fc75 	bl	8005528 <_vfiprintf_r>
 8004c3e:	b003      	add	sp, #12
 8004c40:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c44:	b004      	add	sp, #16
 8004c46:	4770      	bx	lr
 8004c48:	2000001c 	.word	0x2000001c

08004c4c <_puts_r>:
 8004c4c:	6a03      	ldr	r3, [r0, #32]
 8004c4e:	b570      	push	{r4, r5, r6, lr}
 8004c50:	6884      	ldr	r4, [r0, #8]
 8004c52:	4605      	mov	r5, r0
 8004c54:	460e      	mov	r6, r1
 8004c56:	b90b      	cbnz	r3, 8004c5c <_puts_r+0x10>
 8004c58:	f7ff ffb0 	bl	8004bbc <__sinit>
 8004c5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c5e:	07db      	lsls	r3, r3, #31
 8004c60:	d405      	bmi.n	8004c6e <_puts_r+0x22>
 8004c62:	89a3      	ldrh	r3, [r4, #12]
 8004c64:	0598      	lsls	r0, r3, #22
 8004c66:	d402      	bmi.n	8004c6e <_puts_r+0x22>
 8004c68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c6a:	f000 f9d2 	bl	8005012 <__retarget_lock_acquire_recursive>
 8004c6e:	89a3      	ldrh	r3, [r4, #12]
 8004c70:	0719      	lsls	r1, r3, #28
 8004c72:	d502      	bpl.n	8004c7a <_puts_r+0x2e>
 8004c74:	6923      	ldr	r3, [r4, #16]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d135      	bne.n	8004ce6 <_puts_r+0x9a>
 8004c7a:	4621      	mov	r1, r4
 8004c7c:	4628      	mov	r0, r5
 8004c7e:	f000 f8f9 	bl	8004e74 <__swsetup_r>
 8004c82:	b380      	cbz	r0, 8004ce6 <_puts_r+0x9a>
 8004c84:	f04f 35ff 	mov.w	r5, #4294967295
 8004c88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c8a:	07da      	lsls	r2, r3, #31
 8004c8c:	d405      	bmi.n	8004c9a <_puts_r+0x4e>
 8004c8e:	89a3      	ldrh	r3, [r4, #12]
 8004c90:	059b      	lsls	r3, r3, #22
 8004c92:	d402      	bmi.n	8004c9a <_puts_r+0x4e>
 8004c94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c96:	f000 f9bd 	bl	8005014 <__retarget_lock_release_recursive>
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	bd70      	pop	{r4, r5, r6, pc}
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	da04      	bge.n	8004cac <_puts_r+0x60>
 8004ca2:	69a2      	ldr	r2, [r4, #24]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	dc17      	bgt.n	8004cd8 <_puts_r+0x8c>
 8004ca8:	290a      	cmp	r1, #10
 8004caa:	d015      	beq.n	8004cd8 <_puts_r+0x8c>
 8004cac:	6823      	ldr	r3, [r4, #0]
 8004cae:	1c5a      	adds	r2, r3, #1
 8004cb0:	6022      	str	r2, [r4, #0]
 8004cb2:	7019      	strb	r1, [r3, #0]
 8004cb4:	68a3      	ldr	r3, [r4, #8]
 8004cb6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	60a3      	str	r3, [r4, #8]
 8004cbe:	2900      	cmp	r1, #0
 8004cc0:	d1ed      	bne.n	8004c9e <_puts_r+0x52>
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	da11      	bge.n	8004cea <_puts_r+0x9e>
 8004cc6:	4622      	mov	r2, r4
 8004cc8:	210a      	movs	r1, #10
 8004cca:	4628      	mov	r0, r5
 8004ccc:	f000 f893 	bl	8004df6 <__swbuf_r>
 8004cd0:	3001      	adds	r0, #1
 8004cd2:	d0d7      	beq.n	8004c84 <_puts_r+0x38>
 8004cd4:	250a      	movs	r5, #10
 8004cd6:	e7d7      	b.n	8004c88 <_puts_r+0x3c>
 8004cd8:	4622      	mov	r2, r4
 8004cda:	4628      	mov	r0, r5
 8004cdc:	f000 f88b 	bl	8004df6 <__swbuf_r>
 8004ce0:	3001      	adds	r0, #1
 8004ce2:	d1e7      	bne.n	8004cb4 <_puts_r+0x68>
 8004ce4:	e7ce      	b.n	8004c84 <_puts_r+0x38>
 8004ce6:	3e01      	subs	r6, #1
 8004ce8:	e7e4      	b.n	8004cb4 <_puts_r+0x68>
 8004cea:	6823      	ldr	r3, [r4, #0]
 8004cec:	1c5a      	adds	r2, r3, #1
 8004cee:	6022      	str	r2, [r4, #0]
 8004cf0:	220a      	movs	r2, #10
 8004cf2:	701a      	strb	r2, [r3, #0]
 8004cf4:	e7ee      	b.n	8004cd4 <_puts_r+0x88>
	...

08004cf8 <puts>:
 8004cf8:	4b02      	ldr	r3, [pc, #8]	@ (8004d04 <puts+0xc>)
 8004cfa:	4601      	mov	r1, r0
 8004cfc:	6818      	ldr	r0, [r3, #0]
 8004cfe:	f7ff bfa5 	b.w	8004c4c <_puts_r>
 8004d02:	bf00      	nop
 8004d04:	2000001c 	.word	0x2000001c

08004d08 <sniprintf>:
 8004d08:	b40c      	push	{r2, r3}
 8004d0a:	b530      	push	{r4, r5, lr}
 8004d0c:	4b17      	ldr	r3, [pc, #92]	@ (8004d6c <sniprintf+0x64>)
 8004d0e:	1e0c      	subs	r4, r1, #0
 8004d10:	681d      	ldr	r5, [r3, #0]
 8004d12:	b09d      	sub	sp, #116	@ 0x74
 8004d14:	da08      	bge.n	8004d28 <sniprintf+0x20>
 8004d16:	238b      	movs	r3, #139	@ 0x8b
 8004d18:	602b      	str	r3, [r5, #0]
 8004d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d1e:	b01d      	add	sp, #116	@ 0x74
 8004d20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d24:	b002      	add	sp, #8
 8004d26:	4770      	bx	lr
 8004d28:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004d2c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004d30:	bf14      	ite	ne
 8004d32:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004d36:	4623      	moveq	r3, r4
 8004d38:	9304      	str	r3, [sp, #16]
 8004d3a:	9307      	str	r3, [sp, #28]
 8004d3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004d40:	9002      	str	r0, [sp, #8]
 8004d42:	9006      	str	r0, [sp, #24]
 8004d44:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004d48:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004d4a:	ab21      	add	r3, sp, #132	@ 0x84
 8004d4c:	a902      	add	r1, sp, #8
 8004d4e:	4628      	mov	r0, r5
 8004d50:	9301      	str	r3, [sp, #4]
 8004d52:	f000 fac3 	bl	80052dc <_svfiprintf_r>
 8004d56:	1c43      	adds	r3, r0, #1
 8004d58:	bfbc      	itt	lt
 8004d5a:	238b      	movlt	r3, #139	@ 0x8b
 8004d5c:	602b      	strlt	r3, [r5, #0]
 8004d5e:	2c00      	cmp	r4, #0
 8004d60:	d0dd      	beq.n	8004d1e <sniprintf+0x16>
 8004d62:	9b02      	ldr	r3, [sp, #8]
 8004d64:	2200      	movs	r2, #0
 8004d66:	701a      	strb	r2, [r3, #0]
 8004d68:	e7d9      	b.n	8004d1e <sniprintf+0x16>
 8004d6a:	bf00      	nop
 8004d6c:	2000001c 	.word	0x2000001c

08004d70 <__sread>:
 8004d70:	b510      	push	{r4, lr}
 8004d72:	460c      	mov	r4, r1
 8004d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d78:	f000 f8fc 	bl	8004f74 <_read_r>
 8004d7c:	2800      	cmp	r0, #0
 8004d7e:	bfab      	itete	ge
 8004d80:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004d82:	89a3      	ldrhlt	r3, [r4, #12]
 8004d84:	181b      	addge	r3, r3, r0
 8004d86:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004d8a:	bfac      	ite	ge
 8004d8c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004d8e:	81a3      	strhlt	r3, [r4, #12]
 8004d90:	bd10      	pop	{r4, pc}

08004d92 <__swrite>:
 8004d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d96:	461f      	mov	r7, r3
 8004d98:	898b      	ldrh	r3, [r1, #12]
 8004d9a:	05db      	lsls	r3, r3, #23
 8004d9c:	4605      	mov	r5, r0
 8004d9e:	460c      	mov	r4, r1
 8004da0:	4616      	mov	r6, r2
 8004da2:	d505      	bpl.n	8004db0 <__swrite+0x1e>
 8004da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004da8:	2302      	movs	r3, #2
 8004daa:	2200      	movs	r2, #0
 8004dac:	f000 f8d0 	bl	8004f50 <_lseek_r>
 8004db0:	89a3      	ldrh	r3, [r4, #12]
 8004db2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004db6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004dba:	81a3      	strh	r3, [r4, #12]
 8004dbc:	4632      	mov	r2, r6
 8004dbe:	463b      	mov	r3, r7
 8004dc0:	4628      	mov	r0, r5
 8004dc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dc6:	f000 b8e7 	b.w	8004f98 <_write_r>

08004dca <__sseek>:
 8004dca:	b510      	push	{r4, lr}
 8004dcc:	460c      	mov	r4, r1
 8004dce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dd2:	f000 f8bd 	bl	8004f50 <_lseek_r>
 8004dd6:	1c43      	adds	r3, r0, #1
 8004dd8:	89a3      	ldrh	r3, [r4, #12]
 8004dda:	bf15      	itete	ne
 8004ddc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004dde:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004de2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004de6:	81a3      	strheq	r3, [r4, #12]
 8004de8:	bf18      	it	ne
 8004dea:	81a3      	strhne	r3, [r4, #12]
 8004dec:	bd10      	pop	{r4, pc}

08004dee <__sclose>:
 8004dee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004df2:	f000 b89d 	b.w	8004f30 <_close_r>

08004df6 <__swbuf_r>:
 8004df6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df8:	460e      	mov	r6, r1
 8004dfa:	4614      	mov	r4, r2
 8004dfc:	4605      	mov	r5, r0
 8004dfe:	b118      	cbz	r0, 8004e08 <__swbuf_r+0x12>
 8004e00:	6a03      	ldr	r3, [r0, #32]
 8004e02:	b90b      	cbnz	r3, 8004e08 <__swbuf_r+0x12>
 8004e04:	f7ff feda 	bl	8004bbc <__sinit>
 8004e08:	69a3      	ldr	r3, [r4, #24]
 8004e0a:	60a3      	str	r3, [r4, #8]
 8004e0c:	89a3      	ldrh	r3, [r4, #12]
 8004e0e:	071a      	lsls	r2, r3, #28
 8004e10:	d501      	bpl.n	8004e16 <__swbuf_r+0x20>
 8004e12:	6923      	ldr	r3, [r4, #16]
 8004e14:	b943      	cbnz	r3, 8004e28 <__swbuf_r+0x32>
 8004e16:	4621      	mov	r1, r4
 8004e18:	4628      	mov	r0, r5
 8004e1a:	f000 f82b 	bl	8004e74 <__swsetup_r>
 8004e1e:	b118      	cbz	r0, 8004e28 <__swbuf_r+0x32>
 8004e20:	f04f 37ff 	mov.w	r7, #4294967295
 8004e24:	4638      	mov	r0, r7
 8004e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e28:	6823      	ldr	r3, [r4, #0]
 8004e2a:	6922      	ldr	r2, [r4, #16]
 8004e2c:	1a98      	subs	r0, r3, r2
 8004e2e:	6963      	ldr	r3, [r4, #20]
 8004e30:	b2f6      	uxtb	r6, r6
 8004e32:	4283      	cmp	r3, r0
 8004e34:	4637      	mov	r7, r6
 8004e36:	dc05      	bgt.n	8004e44 <__swbuf_r+0x4e>
 8004e38:	4621      	mov	r1, r4
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	f000 fe9e 	bl	8005b7c <_fflush_r>
 8004e40:	2800      	cmp	r0, #0
 8004e42:	d1ed      	bne.n	8004e20 <__swbuf_r+0x2a>
 8004e44:	68a3      	ldr	r3, [r4, #8]
 8004e46:	3b01      	subs	r3, #1
 8004e48:	60a3      	str	r3, [r4, #8]
 8004e4a:	6823      	ldr	r3, [r4, #0]
 8004e4c:	1c5a      	adds	r2, r3, #1
 8004e4e:	6022      	str	r2, [r4, #0]
 8004e50:	701e      	strb	r6, [r3, #0]
 8004e52:	6962      	ldr	r2, [r4, #20]
 8004e54:	1c43      	adds	r3, r0, #1
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d004      	beq.n	8004e64 <__swbuf_r+0x6e>
 8004e5a:	89a3      	ldrh	r3, [r4, #12]
 8004e5c:	07db      	lsls	r3, r3, #31
 8004e5e:	d5e1      	bpl.n	8004e24 <__swbuf_r+0x2e>
 8004e60:	2e0a      	cmp	r6, #10
 8004e62:	d1df      	bne.n	8004e24 <__swbuf_r+0x2e>
 8004e64:	4621      	mov	r1, r4
 8004e66:	4628      	mov	r0, r5
 8004e68:	f000 fe88 	bl	8005b7c <_fflush_r>
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	d0d9      	beq.n	8004e24 <__swbuf_r+0x2e>
 8004e70:	e7d6      	b.n	8004e20 <__swbuf_r+0x2a>
	...

08004e74 <__swsetup_r>:
 8004e74:	b538      	push	{r3, r4, r5, lr}
 8004e76:	4b29      	ldr	r3, [pc, #164]	@ (8004f1c <__swsetup_r+0xa8>)
 8004e78:	4605      	mov	r5, r0
 8004e7a:	6818      	ldr	r0, [r3, #0]
 8004e7c:	460c      	mov	r4, r1
 8004e7e:	b118      	cbz	r0, 8004e88 <__swsetup_r+0x14>
 8004e80:	6a03      	ldr	r3, [r0, #32]
 8004e82:	b90b      	cbnz	r3, 8004e88 <__swsetup_r+0x14>
 8004e84:	f7ff fe9a 	bl	8004bbc <__sinit>
 8004e88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e8c:	0719      	lsls	r1, r3, #28
 8004e8e:	d422      	bmi.n	8004ed6 <__swsetup_r+0x62>
 8004e90:	06da      	lsls	r2, r3, #27
 8004e92:	d407      	bmi.n	8004ea4 <__swsetup_r+0x30>
 8004e94:	2209      	movs	r2, #9
 8004e96:	602a      	str	r2, [r5, #0]
 8004e98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e9c:	81a3      	strh	r3, [r4, #12]
 8004e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea2:	e033      	b.n	8004f0c <__swsetup_r+0x98>
 8004ea4:	0758      	lsls	r0, r3, #29
 8004ea6:	d512      	bpl.n	8004ece <__swsetup_r+0x5a>
 8004ea8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004eaa:	b141      	cbz	r1, 8004ebe <__swsetup_r+0x4a>
 8004eac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004eb0:	4299      	cmp	r1, r3
 8004eb2:	d002      	beq.n	8004eba <__swsetup_r+0x46>
 8004eb4:	4628      	mov	r0, r5
 8004eb6:	f000 f8bd 	bl	8005034 <_free_r>
 8004eba:	2300      	movs	r3, #0
 8004ebc:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ebe:	89a3      	ldrh	r3, [r4, #12]
 8004ec0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004ec4:	81a3      	strh	r3, [r4, #12]
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	6063      	str	r3, [r4, #4]
 8004eca:	6923      	ldr	r3, [r4, #16]
 8004ecc:	6023      	str	r3, [r4, #0]
 8004ece:	89a3      	ldrh	r3, [r4, #12]
 8004ed0:	f043 0308 	orr.w	r3, r3, #8
 8004ed4:	81a3      	strh	r3, [r4, #12]
 8004ed6:	6923      	ldr	r3, [r4, #16]
 8004ed8:	b94b      	cbnz	r3, 8004eee <__swsetup_r+0x7a>
 8004eda:	89a3      	ldrh	r3, [r4, #12]
 8004edc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004ee0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ee4:	d003      	beq.n	8004eee <__swsetup_r+0x7a>
 8004ee6:	4621      	mov	r1, r4
 8004ee8:	4628      	mov	r0, r5
 8004eea:	f000 fe95 	bl	8005c18 <__smakebuf_r>
 8004eee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ef2:	f013 0201 	ands.w	r2, r3, #1
 8004ef6:	d00a      	beq.n	8004f0e <__swsetup_r+0x9a>
 8004ef8:	2200      	movs	r2, #0
 8004efa:	60a2      	str	r2, [r4, #8]
 8004efc:	6962      	ldr	r2, [r4, #20]
 8004efe:	4252      	negs	r2, r2
 8004f00:	61a2      	str	r2, [r4, #24]
 8004f02:	6922      	ldr	r2, [r4, #16]
 8004f04:	b942      	cbnz	r2, 8004f18 <__swsetup_r+0xa4>
 8004f06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004f0a:	d1c5      	bne.n	8004e98 <__swsetup_r+0x24>
 8004f0c:	bd38      	pop	{r3, r4, r5, pc}
 8004f0e:	0799      	lsls	r1, r3, #30
 8004f10:	bf58      	it	pl
 8004f12:	6962      	ldrpl	r2, [r4, #20]
 8004f14:	60a2      	str	r2, [r4, #8]
 8004f16:	e7f4      	b.n	8004f02 <__swsetup_r+0x8e>
 8004f18:	2000      	movs	r0, #0
 8004f1a:	e7f7      	b.n	8004f0c <__swsetup_r+0x98>
 8004f1c:	2000001c 	.word	0x2000001c

08004f20 <memset>:
 8004f20:	4402      	add	r2, r0
 8004f22:	4603      	mov	r3, r0
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d100      	bne.n	8004f2a <memset+0xa>
 8004f28:	4770      	bx	lr
 8004f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f2e:	e7f9      	b.n	8004f24 <memset+0x4>

08004f30 <_close_r>:
 8004f30:	b538      	push	{r3, r4, r5, lr}
 8004f32:	4d06      	ldr	r5, [pc, #24]	@ (8004f4c <_close_r+0x1c>)
 8004f34:	2300      	movs	r3, #0
 8004f36:	4604      	mov	r4, r0
 8004f38:	4608      	mov	r0, r1
 8004f3a:	602b      	str	r3, [r5, #0]
 8004f3c:	f7fb ff73 	bl	8000e26 <_close>
 8004f40:	1c43      	adds	r3, r0, #1
 8004f42:	d102      	bne.n	8004f4a <_close_r+0x1a>
 8004f44:	682b      	ldr	r3, [r5, #0]
 8004f46:	b103      	cbz	r3, 8004f4a <_close_r+0x1a>
 8004f48:	6023      	str	r3, [r4, #0]
 8004f4a:	bd38      	pop	{r3, r4, r5, pc}
 8004f4c:	2000104c 	.word	0x2000104c

08004f50 <_lseek_r>:
 8004f50:	b538      	push	{r3, r4, r5, lr}
 8004f52:	4d07      	ldr	r5, [pc, #28]	@ (8004f70 <_lseek_r+0x20>)
 8004f54:	4604      	mov	r4, r0
 8004f56:	4608      	mov	r0, r1
 8004f58:	4611      	mov	r1, r2
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	602a      	str	r2, [r5, #0]
 8004f5e:	461a      	mov	r2, r3
 8004f60:	f7fb ff88 	bl	8000e74 <_lseek>
 8004f64:	1c43      	adds	r3, r0, #1
 8004f66:	d102      	bne.n	8004f6e <_lseek_r+0x1e>
 8004f68:	682b      	ldr	r3, [r5, #0]
 8004f6a:	b103      	cbz	r3, 8004f6e <_lseek_r+0x1e>
 8004f6c:	6023      	str	r3, [r4, #0]
 8004f6e:	bd38      	pop	{r3, r4, r5, pc}
 8004f70:	2000104c 	.word	0x2000104c

08004f74 <_read_r>:
 8004f74:	b538      	push	{r3, r4, r5, lr}
 8004f76:	4d07      	ldr	r5, [pc, #28]	@ (8004f94 <_read_r+0x20>)
 8004f78:	4604      	mov	r4, r0
 8004f7a:	4608      	mov	r0, r1
 8004f7c:	4611      	mov	r1, r2
 8004f7e:	2200      	movs	r2, #0
 8004f80:	602a      	str	r2, [r5, #0]
 8004f82:	461a      	mov	r2, r3
 8004f84:	f7fb ff16 	bl	8000db4 <_read>
 8004f88:	1c43      	adds	r3, r0, #1
 8004f8a:	d102      	bne.n	8004f92 <_read_r+0x1e>
 8004f8c:	682b      	ldr	r3, [r5, #0]
 8004f8e:	b103      	cbz	r3, 8004f92 <_read_r+0x1e>
 8004f90:	6023      	str	r3, [r4, #0]
 8004f92:	bd38      	pop	{r3, r4, r5, pc}
 8004f94:	2000104c 	.word	0x2000104c

08004f98 <_write_r>:
 8004f98:	b538      	push	{r3, r4, r5, lr}
 8004f9a:	4d07      	ldr	r5, [pc, #28]	@ (8004fb8 <_write_r+0x20>)
 8004f9c:	4604      	mov	r4, r0
 8004f9e:	4608      	mov	r0, r1
 8004fa0:	4611      	mov	r1, r2
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	602a      	str	r2, [r5, #0]
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	f7fb ff21 	bl	8000dee <_write>
 8004fac:	1c43      	adds	r3, r0, #1
 8004fae:	d102      	bne.n	8004fb6 <_write_r+0x1e>
 8004fb0:	682b      	ldr	r3, [r5, #0]
 8004fb2:	b103      	cbz	r3, 8004fb6 <_write_r+0x1e>
 8004fb4:	6023      	str	r3, [r4, #0]
 8004fb6:	bd38      	pop	{r3, r4, r5, pc}
 8004fb8:	2000104c 	.word	0x2000104c

08004fbc <__errno>:
 8004fbc:	4b01      	ldr	r3, [pc, #4]	@ (8004fc4 <__errno+0x8>)
 8004fbe:	6818      	ldr	r0, [r3, #0]
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	2000001c 	.word	0x2000001c

08004fc8 <__libc_init_array>:
 8004fc8:	b570      	push	{r4, r5, r6, lr}
 8004fca:	4d0d      	ldr	r5, [pc, #52]	@ (8005000 <__libc_init_array+0x38>)
 8004fcc:	4c0d      	ldr	r4, [pc, #52]	@ (8005004 <__libc_init_array+0x3c>)
 8004fce:	1b64      	subs	r4, r4, r5
 8004fd0:	10a4      	asrs	r4, r4, #2
 8004fd2:	2600      	movs	r6, #0
 8004fd4:	42a6      	cmp	r6, r4
 8004fd6:	d109      	bne.n	8004fec <__libc_init_array+0x24>
 8004fd8:	4d0b      	ldr	r5, [pc, #44]	@ (8005008 <__libc_init_array+0x40>)
 8004fda:	4c0c      	ldr	r4, [pc, #48]	@ (800500c <__libc_init_array+0x44>)
 8004fdc:	f000 feda 	bl	8005d94 <_init>
 8004fe0:	1b64      	subs	r4, r4, r5
 8004fe2:	10a4      	asrs	r4, r4, #2
 8004fe4:	2600      	movs	r6, #0
 8004fe6:	42a6      	cmp	r6, r4
 8004fe8:	d105      	bne.n	8004ff6 <__libc_init_array+0x2e>
 8004fea:	bd70      	pop	{r4, r5, r6, pc}
 8004fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ff0:	4798      	blx	r3
 8004ff2:	3601      	adds	r6, #1
 8004ff4:	e7ee      	b.n	8004fd4 <__libc_init_array+0xc>
 8004ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ffa:	4798      	blx	r3
 8004ffc:	3601      	adds	r6, #1
 8004ffe:	e7f2      	b.n	8004fe6 <__libc_init_array+0x1e>
 8005000:	08006188 	.word	0x08006188
 8005004:	08006188 	.word	0x08006188
 8005008:	08006188 	.word	0x08006188
 800500c:	0800618c 	.word	0x0800618c

08005010 <__retarget_lock_init_recursive>:
 8005010:	4770      	bx	lr

08005012 <__retarget_lock_acquire_recursive>:
 8005012:	4770      	bx	lr

08005014 <__retarget_lock_release_recursive>:
 8005014:	4770      	bx	lr

08005016 <memcpy>:
 8005016:	440a      	add	r2, r1
 8005018:	4291      	cmp	r1, r2
 800501a:	f100 33ff 	add.w	r3, r0, #4294967295
 800501e:	d100      	bne.n	8005022 <memcpy+0xc>
 8005020:	4770      	bx	lr
 8005022:	b510      	push	{r4, lr}
 8005024:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005028:	f803 4f01 	strb.w	r4, [r3, #1]!
 800502c:	4291      	cmp	r1, r2
 800502e:	d1f9      	bne.n	8005024 <memcpy+0xe>
 8005030:	bd10      	pop	{r4, pc}
	...

08005034 <_free_r>:
 8005034:	b538      	push	{r3, r4, r5, lr}
 8005036:	4605      	mov	r5, r0
 8005038:	2900      	cmp	r1, #0
 800503a:	d041      	beq.n	80050c0 <_free_r+0x8c>
 800503c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005040:	1f0c      	subs	r4, r1, #4
 8005042:	2b00      	cmp	r3, #0
 8005044:	bfb8      	it	lt
 8005046:	18e4      	addlt	r4, r4, r3
 8005048:	f000 f8e0 	bl	800520c <__malloc_lock>
 800504c:	4a1d      	ldr	r2, [pc, #116]	@ (80050c4 <_free_r+0x90>)
 800504e:	6813      	ldr	r3, [r2, #0]
 8005050:	b933      	cbnz	r3, 8005060 <_free_r+0x2c>
 8005052:	6063      	str	r3, [r4, #4]
 8005054:	6014      	str	r4, [r2, #0]
 8005056:	4628      	mov	r0, r5
 8005058:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800505c:	f000 b8dc 	b.w	8005218 <__malloc_unlock>
 8005060:	42a3      	cmp	r3, r4
 8005062:	d908      	bls.n	8005076 <_free_r+0x42>
 8005064:	6820      	ldr	r0, [r4, #0]
 8005066:	1821      	adds	r1, r4, r0
 8005068:	428b      	cmp	r3, r1
 800506a:	bf01      	itttt	eq
 800506c:	6819      	ldreq	r1, [r3, #0]
 800506e:	685b      	ldreq	r3, [r3, #4]
 8005070:	1809      	addeq	r1, r1, r0
 8005072:	6021      	streq	r1, [r4, #0]
 8005074:	e7ed      	b.n	8005052 <_free_r+0x1e>
 8005076:	461a      	mov	r2, r3
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	b10b      	cbz	r3, 8005080 <_free_r+0x4c>
 800507c:	42a3      	cmp	r3, r4
 800507e:	d9fa      	bls.n	8005076 <_free_r+0x42>
 8005080:	6811      	ldr	r1, [r2, #0]
 8005082:	1850      	adds	r0, r2, r1
 8005084:	42a0      	cmp	r0, r4
 8005086:	d10b      	bne.n	80050a0 <_free_r+0x6c>
 8005088:	6820      	ldr	r0, [r4, #0]
 800508a:	4401      	add	r1, r0
 800508c:	1850      	adds	r0, r2, r1
 800508e:	4283      	cmp	r3, r0
 8005090:	6011      	str	r1, [r2, #0]
 8005092:	d1e0      	bne.n	8005056 <_free_r+0x22>
 8005094:	6818      	ldr	r0, [r3, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	6053      	str	r3, [r2, #4]
 800509a:	4408      	add	r0, r1
 800509c:	6010      	str	r0, [r2, #0]
 800509e:	e7da      	b.n	8005056 <_free_r+0x22>
 80050a0:	d902      	bls.n	80050a8 <_free_r+0x74>
 80050a2:	230c      	movs	r3, #12
 80050a4:	602b      	str	r3, [r5, #0]
 80050a6:	e7d6      	b.n	8005056 <_free_r+0x22>
 80050a8:	6820      	ldr	r0, [r4, #0]
 80050aa:	1821      	adds	r1, r4, r0
 80050ac:	428b      	cmp	r3, r1
 80050ae:	bf04      	itt	eq
 80050b0:	6819      	ldreq	r1, [r3, #0]
 80050b2:	685b      	ldreq	r3, [r3, #4]
 80050b4:	6063      	str	r3, [r4, #4]
 80050b6:	bf04      	itt	eq
 80050b8:	1809      	addeq	r1, r1, r0
 80050ba:	6021      	streq	r1, [r4, #0]
 80050bc:	6054      	str	r4, [r2, #4]
 80050be:	e7ca      	b.n	8005056 <_free_r+0x22>
 80050c0:	bd38      	pop	{r3, r4, r5, pc}
 80050c2:	bf00      	nop
 80050c4:	20001058 	.word	0x20001058

080050c8 <sbrk_aligned>:
 80050c8:	b570      	push	{r4, r5, r6, lr}
 80050ca:	4e0f      	ldr	r6, [pc, #60]	@ (8005108 <sbrk_aligned+0x40>)
 80050cc:	460c      	mov	r4, r1
 80050ce:	6831      	ldr	r1, [r6, #0]
 80050d0:	4605      	mov	r5, r0
 80050d2:	b911      	cbnz	r1, 80050da <sbrk_aligned+0x12>
 80050d4:	f000 fe18 	bl	8005d08 <_sbrk_r>
 80050d8:	6030      	str	r0, [r6, #0]
 80050da:	4621      	mov	r1, r4
 80050dc:	4628      	mov	r0, r5
 80050de:	f000 fe13 	bl	8005d08 <_sbrk_r>
 80050e2:	1c43      	adds	r3, r0, #1
 80050e4:	d103      	bne.n	80050ee <sbrk_aligned+0x26>
 80050e6:	f04f 34ff 	mov.w	r4, #4294967295
 80050ea:	4620      	mov	r0, r4
 80050ec:	bd70      	pop	{r4, r5, r6, pc}
 80050ee:	1cc4      	adds	r4, r0, #3
 80050f0:	f024 0403 	bic.w	r4, r4, #3
 80050f4:	42a0      	cmp	r0, r4
 80050f6:	d0f8      	beq.n	80050ea <sbrk_aligned+0x22>
 80050f8:	1a21      	subs	r1, r4, r0
 80050fa:	4628      	mov	r0, r5
 80050fc:	f000 fe04 	bl	8005d08 <_sbrk_r>
 8005100:	3001      	adds	r0, #1
 8005102:	d1f2      	bne.n	80050ea <sbrk_aligned+0x22>
 8005104:	e7ef      	b.n	80050e6 <sbrk_aligned+0x1e>
 8005106:	bf00      	nop
 8005108:	20001054 	.word	0x20001054

0800510c <_malloc_r>:
 800510c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005110:	1ccd      	adds	r5, r1, #3
 8005112:	f025 0503 	bic.w	r5, r5, #3
 8005116:	3508      	adds	r5, #8
 8005118:	2d0c      	cmp	r5, #12
 800511a:	bf38      	it	cc
 800511c:	250c      	movcc	r5, #12
 800511e:	2d00      	cmp	r5, #0
 8005120:	4606      	mov	r6, r0
 8005122:	db01      	blt.n	8005128 <_malloc_r+0x1c>
 8005124:	42a9      	cmp	r1, r5
 8005126:	d904      	bls.n	8005132 <_malloc_r+0x26>
 8005128:	230c      	movs	r3, #12
 800512a:	6033      	str	r3, [r6, #0]
 800512c:	2000      	movs	r0, #0
 800512e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005132:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005208 <_malloc_r+0xfc>
 8005136:	f000 f869 	bl	800520c <__malloc_lock>
 800513a:	f8d8 3000 	ldr.w	r3, [r8]
 800513e:	461c      	mov	r4, r3
 8005140:	bb44      	cbnz	r4, 8005194 <_malloc_r+0x88>
 8005142:	4629      	mov	r1, r5
 8005144:	4630      	mov	r0, r6
 8005146:	f7ff ffbf 	bl	80050c8 <sbrk_aligned>
 800514a:	1c43      	adds	r3, r0, #1
 800514c:	4604      	mov	r4, r0
 800514e:	d158      	bne.n	8005202 <_malloc_r+0xf6>
 8005150:	f8d8 4000 	ldr.w	r4, [r8]
 8005154:	4627      	mov	r7, r4
 8005156:	2f00      	cmp	r7, #0
 8005158:	d143      	bne.n	80051e2 <_malloc_r+0xd6>
 800515a:	2c00      	cmp	r4, #0
 800515c:	d04b      	beq.n	80051f6 <_malloc_r+0xea>
 800515e:	6823      	ldr	r3, [r4, #0]
 8005160:	4639      	mov	r1, r7
 8005162:	4630      	mov	r0, r6
 8005164:	eb04 0903 	add.w	r9, r4, r3
 8005168:	f000 fdce 	bl	8005d08 <_sbrk_r>
 800516c:	4581      	cmp	r9, r0
 800516e:	d142      	bne.n	80051f6 <_malloc_r+0xea>
 8005170:	6821      	ldr	r1, [r4, #0]
 8005172:	1a6d      	subs	r5, r5, r1
 8005174:	4629      	mov	r1, r5
 8005176:	4630      	mov	r0, r6
 8005178:	f7ff ffa6 	bl	80050c8 <sbrk_aligned>
 800517c:	3001      	adds	r0, #1
 800517e:	d03a      	beq.n	80051f6 <_malloc_r+0xea>
 8005180:	6823      	ldr	r3, [r4, #0]
 8005182:	442b      	add	r3, r5
 8005184:	6023      	str	r3, [r4, #0]
 8005186:	f8d8 3000 	ldr.w	r3, [r8]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	bb62      	cbnz	r2, 80051e8 <_malloc_r+0xdc>
 800518e:	f8c8 7000 	str.w	r7, [r8]
 8005192:	e00f      	b.n	80051b4 <_malloc_r+0xa8>
 8005194:	6822      	ldr	r2, [r4, #0]
 8005196:	1b52      	subs	r2, r2, r5
 8005198:	d420      	bmi.n	80051dc <_malloc_r+0xd0>
 800519a:	2a0b      	cmp	r2, #11
 800519c:	d917      	bls.n	80051ce <_malloc_r+0xc2>
 800519e:	1961      	adds	r1, r4, r5
 80051a0:	42a3      	cmp	r3, r4
 80051a2:	6025      	str	r5, [r4, #0]
 80051a4:	bf18      	it	ne
 80051a6:	6059      	strne	r1, [r3, #4]
 80051a8:	6863      	ldr	r3, [r4, #4]
 80051aa:	bf08      	it	eq
 80051ac:	f8c8 1000 	streq.w	r1, [r8]
 80051b0:	5162      	str	r2, [r4, r5]
 80051b2:	604b      	str	r3, [r1, #4]
 80051b4:	4630      	mov	r0, r6
 80051b6:	f000 f82f 	bl	8005218 <__malloc_unlock>
 80051ba:	f104 000b 	add.w	r0, r4, #11
 80051be:	1d23      	adds	r3, r4, #4
 80051c0:	f020 0007 	bic.w	r0, r0, #7
 80051c4:	1ac2      	subs	r2, r0, r3
 80051c6:	bf1c      	itt	ne
 80051c8:	1a1b      	subne	r3, r3, r0
 80051ca:	50a3      	strne	r3, [r4, r2]
 80051cc:	e7af      	b.n	800512e <_malloc_r+0x22>
 80051ce:	6862      	ldr	r2, [r4, #4]
 80051d0:	42a3      	cmp	r3, r4
 80051d2:	bf0c      	ite	eq
 80051d4:	f8c8 2000 	streq.w	r2, [r8]
 80051d8:	605a      	strne	r2, [r3, #4]
 80051da:	e7eb      	b.n	80051b4 <_malloc_r+0xa8>
 80051dc:	4623      	mov	r3, r4
 80051de:	6864      	ldr	r4, [r4, #4]
 80051e0:	e7ae      	b.n	8005140 <_malloc_r+0x34>
 80051e2:	463c      	mov	r4, r7
 80051e4:	687f      	ldr	r7, [r7, #4]
 80051e6:	e7b6      	b.n	8005156 <_malloc_r+0x4a>
 80051e8:	461a      	mov	r2, r3
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	42a3      	cmp	r3, r4
 80051ee:	d1fb      	bne.n	80051e8 <_malloc_r+0xdc>
 80051f0:	2300      	movs	r3, #0
 80051f2:	6053      	str	r3, [r2, #4]
 80051f4:	e7de      	b.n	80051b4 <_malloc_r+0xa8>
 80051f6:	230c      	movs	r3, #12
 80051f8:	6033      	str	r3, [r6, #0]
 80051fa:	4630      	mov	r0, r6
 80051fc:	f000 f80c 	bl	8005218 <__malloc_unlock>
 8005200:	e794      	b.n	800512c <_malloc_r+0x20>
 8005202:	6005      	str	r5, [r0, #0]
 8005204:	e7d6      	b.n	80051b4 <_malloc_r+0xa8>
 8005206:	bf00      	nop
 8005208:	20001058 	.word	0x20001058

0800520c <__malloc_lock>:
 800520c:	4801      	ldr	r0, [pc, #4]	@ (8005214 <__malloc_lock+0x8>)
 800520e:	f7ff bf00 	b.w	8005012 <__retarget_lock_acquire_recursive>
 8005212:	bf00      	nop
 8005214:	20001050 	.word	0x20001050

08005218 <__malloc_unlock>:
 8005218:	4801      	ldr	r0, [pc, #4]	@ (8005220 <__malloc_unlock+0x8>)
 800521a:	f7ff befb 	b.w	8005014 <__retarget_lock_release_recursive>
 800521e:	bf00      	nop
 8005220:	20001050 	.word	0x20001050

08005224 <__ssputs_r>:
 8005224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005228:	688e      	ldr	r6, [r1, #8]
 800522a:	461f      	mov	r7, r3
 800522c:	42be      	cmp	r6, r7
 800522e:	680b      	ldr	r3, [r1, #0]
 8005230:	4682      	mov	sl, r0
 8005232:	460c      	mov	r4, r1
 8005234:	4690      	mov	r8, r2
 8005236:	d82d      	bhi.n	8005294 <__ssputs_r+0x70>
 8005238:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800523c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005240:	d026      	beq.n	8005290 <__ssputs_r+0x6c>
 8005242:	6965      	ldr	r5, [r4, #20]
 8005244:	6909      	ldr	r1, [r1, #16]
 8005246:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800524a:	eba3 0901 	sub.w	r9, r3, r1
 800524e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005252:	1c7b      	adds	r3, r7, #1
 8005254:	444b      	add	r3, r9
 8005256:	106d      	asrs	r5, r5, #1
 8005258:	429d      	cmp	r5, r3
 800525a:	bf38      	it	cc
 800525c:	461d      	movcc	r5, r3
 800525e:	0553      	lsls	r3, r2, #21
 8005260:	d527      	bpl.n	80052b2 <__ssputs_r+0x8e>
 8005262:	4629      	mov	r1, r5
 8005264:	f7ff ff52 	bl	800510c <_malloc_r>
 8005268:	4606      	mov	r6, r0
 800526a:	b360      	cbz	r0, 80052c6 <__ssputs_r+0xa2>
 800526c:	6921      	ldr	r1, [r4, #16]
 800526e:	464a      	mov	r2, r9
 8005270:	f7ff fed1 	bl	8005016 <memcpy>
 8005274:	89a3      	ldrh	r3, [r4, #12]
 8005276:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800527a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800527e:	81a3      	strh	r3, [r4, #12]
 8005280:	6126      	str	r6, [r4, #16]
 8005282:	6165      	str	r5, [r4, #20]
 8005284:	444e      	add	r6, r9
 8005286:	eba5 0509 	sub.w	r5, r5, r9
 800528a:	6026      	str	r6, [r4, #0]
 800528c:	60a5      	str	r5, [r4, #8]
 800528e:	463e      	mov	r6, r7
 8005290:	42be      	cmp	r6, r7
 8005292:	d900      	bls.n	8005296 <__ssputs_r+0x72>
 8005294:	463e      	mov	r6, r7
 8005296:	6820      	ldr	r0, [r4, #0]
 8005298:	4632      	mov	r2, r6
 800529a:	4641      	mov	r1, r8
 800529c:	f000 fcf8 	bl	8005c90 <memmove>
 80052a0:	68a3      	ldr	r3, [r4, #8]
 80052a2:	1b9b      	subs	r3, r3, r6
 80052a4:	60a3      	str	r3, [r4, #8]
 80052a6:	6823      	ldr	r3, [r4, #0]
 80052a8:	4433      	add	r3, r6
 80052aa:	6023      	str	r3, [r4, #0]
 80052ac:	2000      	movs	r0, #0
 80052ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052b2:	462a      	mov	r2, r5
 80052b4:	f000 fd38 	bl	8005d28 <_realloc_r>
 80052b8:	4606      	mov	r6, r0
 80052ba:	2800      	cmp	r0, #0
 80052bc:	d1e0      	bne.n	8005280 <__ssputs_r+0x5c>
 80052be:	6921      	ldr	r1, [r4, #16]
 80052c0:	4650      	mov	r0, sl
 80052c2:	f7ff feb7 	bl	8005034 <_free_r>
 80052c6:	230c      	movs	r3, #12
 80052c8:	f8ca 3000 	str.w	r3, [sl]
 80052cc:	89a3      	ldrh	r3, [r4, #12]
 80052ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052d2:	81a3      	strh	r3, [r4, #12]
 80052d4:	f04f 30ff 	mov.w	r0, #4294967295
 80052d8:	e7e9      	b.n	80052ae <__ssputs_r+0x8a>
	...

080052dc <_svfiprintf_r>:
 80052dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052e0:	4698      	mov	r8, r3
 80052e2:	898b      	ldrh	r3, [r1, #12]
 80052e4:	061b      	lsls	r3, r3, #24
 80052e6:	b09d      	sub	sp, #116	@ 0x74
 80052e8:	4607      	mov	r7, r0
 80052ea:	460d      	mov	r5, r1
 80052ec:	4614      	mov	r4, r2
 80052ee:	d510      	bpl.n	8005312 <_svfiprintf_r+0x36>
 80052f0:	690b      	ldr	r3, [r1, #16]
 80052f2:	b973      	cbnz	r3, 8005312 <_svfiprintf_r+0x36>
 80052f4:	2140      	movs	r1, #64	@ 0x40
 80052f6:	f7ff ff09 	bl	800510c <_malloc_r>
 80052fa:	6028      	str	r0, [r5, #0]
 80052fc:	6128      	str	r0, [r5, #16]
 80052fe:	b930      	cbnz	r0, 800530e <_svfiprintf_r+0x32>
 8005300:	230c      	movs	r3, #12
 8005302:	603b      	str	r3, [r7, #0]
 8005304:	f04f 30ff 	mov.w	r0, #4294967295
 8005308:	b01d      	add	sp, #116	@ 0x74
 800530a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800530e:	2340      	movs	r3, #64	@ 0x40
 8005310:	616b      	str	r3, [r5, #20]
 8005312:	2300      	movs	r3, #0
 8005314:	9309      	str	r3, [sp, #36]	@ 0x24
 8005316:	2320      	movs	r3, #32
 8005318:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800531c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005320:	2330      	movs	r3, #48	@ 0x30
 8005322:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80054c0 <_svfiprintf_r+0x1e4>
 8005326:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800532a:	f04f 0901 	mov.w	r9, #1
 800532e:	4623      	mov	r3, r4
 8005330:	469a      	mov	sl, r3
 8005332:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005336:	b10a      	cbz	r2, 800533c <_svfiprintf_r+0x60>
 8005338:	2a25      	cmp	r2, #37	@ 0x25
 800533a:	d1f9      	bne.n	8005330 <_svfiprintf_r+0x54>
 800533c:	ebba 0b04 	subs.w	fp, sl, r4
 8005340:	d00b      	beq.n	800535a <_svfiprintf_r+0x7e>
 8005342:	465b      	mov	r3, fp
 8005344:	4622      	mov	r2, r4
 8005346:	4629      	mov	r1, r5
 8005348:	4638      	mov	r0, r7
 800534a:	f7ff ff6b 	bl	8005224 <__ssputs_r>
 800534e:	3001      	adds	r0, #1
 8005350:	f000 80a7 	beq.w	80054a2 <_svfiprintf_r+0x1c6>
 8005354:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005356:	445a      	add	r2, fp
 8005358:	9209      	str	r2, [sp, #36]	@ 0x24
 800535a:	f89a 3000 	ldrb.w	r3, [sl]
 800535e:	2b00      	cmp	r3, #0
 8005360:	f000 809f 	beq.w	80054a2 <_svfiprintf_r+0x1c6>
 8005364:	2300      	movs	r3, #0
 8005366:	f04f 32ff 	mov.w	r2, #4294967295
 800536a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800536e:	f10a 0a01 	add.w	sl, sl, #1
 8005372:	9304      	str	r3, [sp, #16]
 8005374:	9307      	str	r3, [sp, #28]
 8005376:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800537a:	931a      	str	r3, [sp, #104]	@ 0x68
 800537c:	4654      	mov	r4, sl
 800537e:	2205      	movs	r2, #5
 8005380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005384:	484e      	ldr	r0, [pc, #312]	@ (80054c0 <_svfiprintf_r+0x1e4>)
 8005386:	f7fa ff4b 	bl	8000220 <memchr>
 800538a:	9a04      	ldr	r2, [sp, #16]
 800538c:	b9d8      	cbnz	r0, 80053c6 <_svfiprintf_r+0xea>
 800538e:	06d0      	lsls	r0, r2, #27
 8005390:	bf44      	itt	mi
 8005392:	2320      	movmi	r3, #32
 8005394:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005398:	0711      	lsls	r1, r2, #28
 800539a:	bf44      	itt	mi
 800539c:	232b      	movmi	r3, #43	@ 0x2b
 800539e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053a2:	f89a 3000 	ldrb.w	r3, [sl]
 80053a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80053a8:	d015      	beq.n	80053d6 <_svfiprintf_r+0xfa>
 80053aa:	9a07      	ldr	r2, [sp, #28]
 80053ac:	4654      	mov	r4, sl
 80053ae:	2000      	movs	r0, #0
 80053b0:	f04f 0c0a 	mov.w	ip, #10
 80053b4:	4621      	mov	r1, r4
 80053b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053ba:	3b30      	subs	r3, #48	@ 0x30
 80053bc:	2b09      	cmp	r3, #9
 80053be:	d94b      	bls.n	8005458 <_svfiprintf_r+0x17c>
 80053c0:	b1b0      	cbz	r0, 80053f0 <_svfiprintf_r+0x114>
 80053c2:	9207      	str	r2, [sp, #28]
 80053c4:	e014      	b.n	80053f0 <_svfiprintf_r+0x114>
 80053c6:	eba0 0308 	sub.w	r3, r0, r8
 80053ca:	fa09 f303 	lsl.w	r3, r9, r3
 80053ce:	4313      	orrs	r3, r2
 80053d0:	9304      	str	r3, [sp, #16]
 80053d2:	46a2      	mov	sl, r4
 80053d4:	e7d2      	b.n	800537c <_svfiprintf_r+0xa0>
 80053d6:	9b03      	ldr	r3, [sp, #12]
 80053d8:	1d19      	adds	r1, r3, #4
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	9103      	str	r1, [sp, #12]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	bfbb      	ittet	lt
 80053e2:	425b      	neglt	r3, r3
 80053e4:	f042 0202 	orrlt.w	r2, r2, #2
 80053e8:	9307      	strge	r3, [sp, #28]
 80053ea:	9307      	strlt	r3, [sp, #28]
 80053ec:	bfb8      	it	lt
 80053ee:	9204      	strlt	r2, [sp, #16]
 80053f0:	7823      	ldrb	r3, [r4, #0]
 80053f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80053f4:	d10a      	bne.n	800540c <_svfiprintf_r+0x130>
 80053f6:	7863      	ldrb	r3, [r4, #1]
 80053f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80053fa:	d132      	bne.n	8005462 <_svfiprintf_r+0x186>
 80053fc:	9b03      	ldr	r3, [sp, #12]
 80053fe:	1d1a      	adds	r2, r3, #4
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	9203      	str	r2, [sp, #12]
 8005404:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005408:	3402      	adds	r4, #2
 800540a:	9305      	str	r3, [sp, #20]
 800540c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80054d0 <_svfiprintf_r+0x1f4>
 8005410:	7821      	ldrb	r1, [r4, #0]
 8005412:	2203      	movs	r2, #3
 8005414:	4650      	mov	r0, sl
 8005416:	f7fa ff03 	bl	8000220 <memchr>
 800541a:	b138      	cbz	r0, 800542c <_svfiprintf_r+0x150>
 800541c:	9b04      	ldr	r3, [sp, #16]
 800541e:	eba0 000a 	sub.w	r0, r0, sl
 8005422:	2240      	movs	r2, #64	@ 0x40
 8005424:	4082      	lsls	r2, r0
 8005426:	4313      	orrs	r3, r2
 8005428:	3401      	adds	r4, #1
 800542a:	9304      	str	r3, [sp, #16]
 800542c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005430:	4824      	ldr	r0, [pc, #144]	@ (80054c4 <_svfiprintf_r+0x1e8>)
 8005432:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005436:	2206      	movs	r2, #6
 8005438:	f7fa fef2 	bl	8000220 <memchr>
 800543c:	2800      	cmp	r0, #0
 800543e:	d036      	beq.n	80054ae <_svfiprintf_r+0x1d2>
 8005440:	4b21      	ldr	r3, [pc, #132]	@ (80054c8 <_svfiprintf_r+0x1ec>)
 8005442:	bb1b      	cbnz	r3, 800548c <_svfiprintf_r+0x1b0>
 8005444:	9b03      	ldr	r3, [sp, #12]
 8005446:	3307      	adds	r3, #7
 8005448:	f023 0307 	bic.w	r3, r3, #7
 800544c:	3308      	adds	r3, #8
 800544e:	9303      	str	r3, [sp, #12]
 8005450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005452:	4433      	add	r3, r6
 8005454:	9309      	str	r3, [sp, #36]	@ 0x24
 8005456:	e76a      	b.n	800532e <_svfiprintf_r+0x52>
 8005458:	fb0c 3202 	mla	r2, ip, r2, r3
 800545c:	460c      	mov	r4, r1
 800545e:	2001      	movs	r0, #1
 8005460:	e7a8      	b.n	80053b4 <_svfiprintf_r+0xd8>
 8005462:	2300      	movs	r3, #0
 8005464:	3401      	adds	r4, #1
 8005466:	9305      	str	r3, [sp, #20]
 8005468:	4619      	mov	r1, r3
 800546a:	f04f 0c0a 	mov.w	ip, #10
 800546e:	4620      	mov	r0, r4
 8005470:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005474:	3a30      	subs	r2, #48	@ 0x30
 8005476:	2a09      	cmp	r2, #9
 8005478:	d903      	bls.n	8005482 <_svfiprintf_r+0x1a6>
 800547a:	2b00      	cmp	r3, #0
 800547c:	d0c6      	beq.n	800540c <_svfiprintf_r+0x130>
 800547e:	9105      	str	r1, [sp, #20]
 8005480:	e7c4      	b.n	800540c <_svfiprintf_r+0x130>
 8005482:	fb0c 2101 	mla	r1, ip, r1, r2
 8005486:	4604      	mov	r4, r0
 8005488:	2301      	movs	r3, #1
 800548a:	e7f0      	b.n	800546e <_svfiprintf_r+0x192>
 800548c:	ab03      	add	r3, sp, #12
 800548e:	9300      	str	r3, [sp, #0]
 8005490:	462a      	mov	r2, r5
 8005492:	4b0e      	ldr	r3, [pc, #56]	@ (80054cc <_svfiprintf_r+0x1f0>)
 8005494:	a904      	add	r1, sp, #16
 8005496:	4638      	mov	r0, r7
 8005498:	f3af 8000 	nop.w
 800549c:	1c42      	adds	r2, r0, #1
 800549e:	4606      	mov	r6, r0
 80054a0:	d1d6      	bne.n	8005450 <_svfiprintf_r+0x174>
 80054a2:	89ab      	ldrh	r3, [r5, #12]
 80054a4:	065b      	lsls	r3, r3, #25
 80054a6:	f53f af2d 	bmi.w	8005304 <_svfiprintf_r+0x28>
 80054aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80054ac:	e72c      	b.n	8005308 <_svfiprintf_r+0x2c>
 80054ae:	ab03      	add	r3, sp, #12
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	462a      	mov	r2, r5
 80054b4:	4b05      	ldr	r3, [pc, #20]	@ (80054cc <_svfiprintf_r+0x1f0>)
 80054b6:	a904      	add	r1, sp, #16
 80054b8:	4638      	mov	r0, r7
 80054ba:	f000 f9bb 	bl	8005834 <_printf_i>
 80054be:	e7ed      	b.n	800549c <_svfiprintf_r+0x1c0>
 80054c0:	0800614c 	.word	0x0800614c
 80054c4:	08006156 	.word	0x08006156
 80054c8:	00000000 	.word	0x00000000
 80054cc:	08005225 	.word	0x08005225
 80054d0:	08006152 	.word	0x08006152

080054d4 <__sfputc_r>:
 80054d4:	6893      	ldr	r3, [r2, #8]
 80054d6:	3b01      	subs	r3, #1
 80054d8:	2b00      	cmp	r3, #0
 80054da:	b410      	push	{r4}
 80054dc:	6093      	str	r3, [r2, #8]
 80054de:	da08      	bge.n	80054f2 <__sfputc_r+0x1e>
 80054e0:	6994      	ldr	r4, [r2, #24]
 80054e2:	42a3      	cmp	r3, r4
 80054e4:	db01      	blt.n	80054ea <__sfputc_r+0x16>
 80054e6:	290a      	cmp	r1, #10
 80054e8:	d103      	bne.n	80054f2 <__sfputc_r+0x1e>
 80054ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054ee:	f7ff bc82 	b.w	8004df6 <__swbuf_r>
 80054f2:	6813      	ldr	r3, [r2, #0]
 80054f4:	1c58      	adds	r0, r3, #1
 80054f6:	6010      	str	r0, [r2, #0]
 80054f8:	7019      	strb	r1, [r3, #0]
 80054fa:	4608      	mov	r0, r1
 80054fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005500:	4770      	bx	lr

08005502 <__sfputs_r>:
 8005502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005504:	4606      	mov	r6, r0
 8005506:	460f      	mov	r7, r1
 8005508:	4614      	mov	r4, r2
 800550a:	18d5      	adds	r5, r2, r3
 800550c:	42ac      	cmp	r4, r5
 800550e:	d101      	bne.n	8005514 <__sfputs_r+0x12>
 8005510:	2000      	movs	r0, #0
 8005512:	e007      	b.n	8005524 <__sfputs_r+0x22>
 8005514:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005518:	463a      	mov	r2, r7
 800551a:	4630      	mov	r0, r6
 800551c:	f7ff ffda 	bl	80054d4 <__sfputc_r>
 8005520:	1c43      	adds	r3, r0, #1
 8005522:	d1f3      	bne.n	800550c <__sfputs_r+0xa>
 8005524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005528 <_vfiprintf_r>:
 8005528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800552c:	460d      	mov	r5, r1
 800552e:	b09d      	sub	sp, #116	@ 0x74
 8005530:	4614      	mov	r4, r2
 8005532:	4698      	mov	r8, r3
 8005534:	4606      	mov	r6, r0
 8005536:	b118      	cbz	r0, 8005540 <_vfiprintf_r+0x18>
 8005538:	6a03      	ldr	r3, [r0, #32]
 800553a:	b90b      	cbnz	r3, 8005540 <_vfiprintf_r+0x18>
 800553c:	f7ff fb3e 	bl	8004bbc <__sinit>
 8005540:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005542:	07d9      	lsls	r1, r3, #31
 8005544:	d405      	bmi.n	8005552 <_vfiprintf_r+0x2a>
 8005546:	89ab      	ldrh	r3, [r5, #12]
 8005548:	059a      	lsls	r2, r3, #22
 800554a:	d402      	bmi.n	8005552 <_vfiprintf_r+0x2a>
 800554c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800554e:	f7ff fd60 	bl	8005012 <__retarget_lock_acquire_recursive>
 8005552:	89ab      	ldrh	r3, [r5, #12]
 8005554:	071b      	lsls	r3, r3, #28
 8005556:	d501      	bpl.n	800555c <_vfiprintf_r+0x34>
 8005558:	692b      	ldr	r3, [r5, #16]
 800555a:	b99b      	cbnz	r3, 8005584 <_vfiprintf_r+0x5c>
 800555c:	4629      	mov	r1, r5
 800555e:	4630      	mov	r0, r6
 8005560:	f7ff fc88 	bl	8004e74 <__swsetup_r>
 8005564:	b170      	cbz	r0, 8005584 <_vfiprintf_r+0x5c>
 8005566:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005568:	07dc      	lsls	r4, r3, #31
 800556a:	d504      	bpl.n	8005576 <_vfiprintf_r+0x4e>
 800556c:	f04f 30ff 	mov.w	r0, #4294967295
 8005570:	b01d      	add	sp, #116	@ 0x74
 8005572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005576:	89ab      	ldrh	r3, [r5, #12]
 8005578:	0598      	lsls	r0, r3, #22
 800557a:	d4f7      	bmi.n	800556c <_vfiprintf_r+0x44>
 800557c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800557e:	f7ff fd49 	bl	8005014 <__retarget_lock_release_recursive>
 8005582:	e7f3      	b.n	800556c <_vfiprintf_r+0x44>
 8005584:	2300      	movs	r3, #0
 8005586:	9309      	str	r3, [sp, #36]	@ 0x24
 8005588:	2320      	movs	r3, #32
 800558a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800558e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005592:	2330      	movs	r3, #48	@ 0x30
 8005594:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005744 <_vfiprintf_r+0x21c>
 8005598:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800559c:	f04f 0901 	mov.w	r9, #1
 80055a0:	4623      	mov	r3, r4
 80055a2:	469a      	mov	sl, r3
 80055a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055a8:	b10a      	cbz	r2, 80055ae <_vfiprintf_r+0x86>
 80055aa:	2a25      	cmp	r2, #37	@ 0x25
 80055ac:	d1f9      	bne.n	80055a2 <_vfiprintf_r+0x7a>
 80055ae:	ebba 0b04 	subs.w	fp, sl, r4
 80055b2:	d00b      	beq.n	80055cc <_vfiprintf_r+0xa4>
 80055b4:	465b      	mov	r3, fp
 80055b6:	4622      	mov	r2, r4
 80055b8:	4629      	mov	r1, r5
 80055ba:	4630      	mov	r0, r6
 80055bc:	f7ff ffa1 	bl	8005502 <__sfputs_r>
 80055c0:	3001      	adds	r0, #1
 80055c2:	f000 80a7 	beq.w	8005714 <_vfiprintf_r+0x1ec>
 80055c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055c8:	445a      	add	r2, fp
 80055ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80055cc:	f89a 3000 	ldrb.w	r3, [sl]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 809f 	beq.w	8005714 <_vfiprintf_r+0x1ec>
 80055d6:	2300      	movs	r3, #0
 80055d8:	f04f 32ff 	mov.w	r2, #4294967295
 80055dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055e0:	f10a 0a01 	add.w	sl, sl, #1
 80055e4:	9304      	str	r3, [sp, #16]
 80055e6:	9307      	str	r3, [sp, #28]
 80055e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80055ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80055ee:	4654      	mov	r4, sl
 80055f0:	2205      	movs	r2, #5
 80055f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055f6:	4853      	ldr	r0, [pc, #332]	@ (8005744 <_vfiprintf_r+0x21c>)
 80055f8:	f7fa fe12 	bl	8000220 <memchr>
 80055fc:	9a04      	ldr	r2, [sp, #16]
 80055fe:	b9d8      	cbnz	r0, 8005638 <_vfiprintf_r+0x110>
 8005600:	06d1      	lsls	r1, r2, #27
 8005602:	bf44      	itt	mi
 8005604:	2320      	movmi	r3, #32
 8005606:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800560a:	0713      	lsls	r3, r2, #28
 800560c:	bf44      	itt	mi
 800560e:	232b      	movmi	r3, #43	@ 0x2b
 8005610:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005614:	f89a 3000 	ldrb.w	r3, [sl]
 8005618:	2b2a      	cmp	r3, #42	@ 0x2a
 800561a:	d015      	beq.n	8005648 <_vfiprintf_r+0x120>
 800561c:	9a07      	ldr	r2, [sp, #28]
 800561e:	4654      	mov	r4, sl
 8005620:	2000      	movs	r0, #0
 8005622:	f04f 0c0a 	mov.w	ip, #10
 8005626:	4621      	mov	r1, r4
 8005628:	f811 3b01 	ldrb.w	r3, [r1], #1
 800562c:	3b30      	subs	r3, #48	@ 0x30
 800562e:	2b09      	cmp	r3, #9
 8005630:	d94b      	bls.n	80056ca <_vfiprintf_r+0x1a2>
 8005632:	b1b0      	cbz	r0, 8005662 <_vfiprintf_r+0x13a>
 8005634:	9207      	str	r2, [sp, #28]
 8005636:	e014      	b.n	8005662 <_vfiprintf_r+0x13a>
 8005638:	eba0 0308 	sub.w	r3, r0, r8
 800563c:	fa09 f303 	lsl.w	r3, r9, r3
 8005640:	4313      	orrs	r3, r2
 8005642:	9304      	str	r3, [sp, #16]
 8005644:	46a2      	mov	sl, r4
 8005646:	e7d2      	b.n	80055ee <_vfiprintf_r+0xc6>
 8005648:	9b03      	ldr	r3, [sp, #12]
 800564a:	1d19      	adds	r1, r3, #4
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	9103      	str	r1, [sp, #12]
 8005650:	2b00      	cmp	r3, #0
 8005652:	bfbb      	ittet	lt
 8005654:	425b      	neglt	r3, r3
 8005656:	f042 0202 	orrlt.w	r2, r2, #2
 800565a:	9307      	strge	r3, [sp, #28]
 800565c:	9307      	strlt	r3, [sp, #28]
 800565e:	bfb8      	it	lt
 8005660:	9204      	strlt	r2, [sp, #16]
 8005662:	7823      	ldrb	r3, [r4, #0]
 8005664:	2b2e      	cmp	r3, #46	@ 0x2e
 8005666:	d10a      	bne.n	800567e <_vfiprintf_r+0x156>
 8005668:	7863      	ldrb	r3, [r4, #1]
 800566a:	2b2a      	cmp	r3, #42	@ 0x2a
 800566c:	d132      	bne.n	80056d4 <_vfiprintf_r+0x1ac>
 800566e:	9b03      	ldr	r3, [sp, #12]
 8005670:	1d1a      	adds	r2, r3, #4
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	9203      	str	r2, [sp, #12]
 8005676:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800567a:	3402      	adds	r4, #2
 800567c:	9305      	str	r3, [sp, #20]
 800567e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005754 <_vfiprintf_r+0x22c>
 8005682:	7821      	ldrb	r1, [r4, #0]
 8005684:	2203      	movs	r2, #3
 8005686:	4650      	mov	r0, sl
 8005688:	f7fa fdca 	bl	8000220 <memchr>
 800568c:	b138      	cbz	r0, 800569e <_vfiprintf_r+0x176>
 800568e:	9b04      	ldr	r3, [sp, #16]
 8005690:	eba0 000a 	sub.w	r0, r0, sl
 8005694:	2240      	movs	r2, #64	@ 0x40
 8005696:	4082      	lsls	r2, r0
 8005698:	4313      	orrs	r3, r2
 800569a:	3401      	adds	r4, #1
 800569c:	9304      	str	r3, [sp, #16]
 800569e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056a2:	4829      	ldr	r0, [pc, #164]	@ (8005748 <_vfiprintf_r+0x220>)
 80056a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80056a8:	2206      	movs	r2, #6
 80056aa:	f7fa fdb9 	bl	8000220 <memchr>
 80056ae:	2800      	cmp	r0, #0
 80056b0:	d03f      	beq.n	8005732 <_vfiprintf_r+0x20a>
 80056b2:	4b26      	ldr	r3, [pc, #152]	@ (800574c <_vfiprintf_r+0x224>)
 80056b4:	bb1b      	cbnz	r3, 80056fe <_vfiprintf_r+0x1d6>
 80056b6:	9b03      	ldr	r3, [sp, #12]
 80056b8:	3307      	adds	r3, #7
 80056ba:	f023 0307 	bic.w	r3, r3, #7
 80056be:	3308      	adds	r3, #8
 80056c0:	9303      	str	r3, [sp, #12]
 80056c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056c4:	443b      	add	r3, r7
 80056c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80056c8:	e76a      	b.n	80055a0 <_vfiprintf_r+0x78>
 80056ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80056ce:	460c      	mov	r4, r1
 80056d0:	2001      	movs	r0, #1
 80056d2:	e7a8      	b.n	8005626 <_vfiprintf_r+0xfe>
 80056d4:	2300      	movs	r3, #0
 80056d6:	3401      	adds	r4, #1
 80056d8:	9305      	str	r3, [sp, #20]
 80056da:	4619      	mov	r1, r3
 80056dc:	f04f 0c0a 	mov.w	ip, #10
 80056e0:	4620      	mov	r0, r4
 80056e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056e6:	3a30      	subs	r2, #48	@ 0x30
 80056e8:	2a09      	cmp	r2, #9
 80056ea:	d903      	bls.n	80056f4 <_vfiprintf_r+0x1cc>
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d0c6      	beq.n	800567e <_vfiprintf_r+0x156>
 80056f0:	9105      	str	r1, [sp, #20]
 80056f2:	e7c4      	b.n	800567e <_vfiprintf_r+0x156>
 80056f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80056f8:	4604      	mov	r4, r0
 80056fa:	2301      	movs	r3, #1
 80056fc:	e7f0      	b.n	80056e0 <_vfiprintf_r+0x1b8>
 80056fe:	ab03      	add	r3, sp, #12
 8005700:	9300      	str	r3, [sp, #0]
 8005702:	462a      	mov	r2, r5
 8005704:	4b12      	ldr	r3, [pc, #72]	@ (8005750 <_vfiprintf_r+0x228>)
 8005706:	a904      	add	r1, sp, #16
 8005708:	4630      	mov	r0, r6
 800570a:	f3af 8000 	nop.w
 800570e:	4607      	mov	r7, r0
 8005710:	1c78      	adds	r0, r7, #1
 8005712:	d1d6      	bne.n	80056c2 <_vfiprintf_r+0x19a>
 8005714:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005716:	07d9      	lsls	r1, r3, #31
 8005718:	d405      	bmi.n	8005726 <_vfiprintf_r+0x1fe>
 800571a:	89ab      	ldrh	r3, [r5, #12]
 800571c:	059a      	lsls	r2, r3, #22
 800571e:	d402      	bmi.n	8005726 <_vfiprintf_r+0x1fe>
 8005720:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005722:	f7ff fc77 	bl	8005014 <__retarget_lock_release_recursive>
 8005726:	89ab      	ldrh	r3, [r5, #12]
 8005728:	065b      	lsls	r3, r3, #25
 800572a:	f53f af1f 	bmi.w	800556c <_vfiprintf_r+0x44>
 800572e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005730:	e71e      	b.n	8005570 <_vfiprintf_r+0x48>
 8005732:	ab03      	add	r3, sp, #12
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	462a      	mov	r2, r5
 8005738:	4b05      	ldr	r3, [pc, #20]	@ (8005750 <_vfiprintf_r+0x228>)
 800573a:	a904      	add	r1, sp, #16
 800573c:	4630      	mov	r0, r6
 800573e:	f000 f879 	bl	8005834 <_printf_i>
 8005742:	e7e4      	b.n	800570e <_vfiprintf_r+0x1e6>
 8005744:	0800614c 	.word	0x0800614c
 8005748:	08006156 	.word	0x08006156
 800574c:	00000000 	.word	0x00000000
 8005750:	08005503 	.word	0x08005503
 8005754:	08006152 	.word	0x08006152

08005758 <_printf_common>:
 8005758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800575c:	4616      	mov	r6, r2
 800575e:	4698      	mov	r8, r3
 8005760:	688a      	ldr	r2, [r1, #8]
 8005762:	690b      	ldr	r3, [r1, #16]
 8005764:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005768:	4293      	cmp	r3, r2
 800576a:	bfb8      	it	lt
 800576c:	4613      	movlt	r3, r2
 800576e:	6033      	str	r3, [r6, #0]
 8005770:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005774:	4607      	mov	r7, r0
 8005776:	460c      	mov	r4, r1
 8005778:	b10a      	cbz	r2, 800577e <_printf_common+0x26>
 800577a:	3301      	adds	r3, #1
 800577c:	6033      	str	r3, [r6, #0]
 800577e:	6823      	ldr	r3, [r4, #0]
 8005780:	0699      	lsls	r1, r3, #26
 8005782:	bf42      	ittt	mi
 8005784:	6833      	ldrmi	r3, [r6, #0]
 8005786:	3302      	addmi	r3, #2
 8005788:	6033      	strmi	r3, [r6, #0]
 800578a:	6825      	ldr	r5, [r4, #0]
 800578c:	f015 0506 	ands.w	r5, r5, #6
 8005790:	d106      	bne.n	80057a0 <_printf_common+0x48>
 8005792:	f104 0a19 	add.w	sl, r4, #25
 8005796:	68e3      	ldr	r3, [r4, #12]
 8005798:	6832      	ldr	r2, [r6, #0]
 800579a:	1a9b      	subs	r3, r3, r2
 800579c:	42ab      	cmp	r3, r5
 800579e:	dc26      	bgt.n	80057ee <_printf_common+0x96>
 80057a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80057a4:	6822      	ldr	r2, [r4, #0]
 80057a6:	3b00      	subs	r3, #0
 80057a8:	bf18      	it	ne
 80057aa:	2301      	movne	r3, #1
 80057ac:	0692      	lsls	r2, r2, #26
 80057ae:	d42b      	bmi.n	8005808 <_printf_common+0xb0>
 80057b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80057b4:	4641      	mov	r1, r8
 80057b6:	4638      	mov	r0, r7
 80057b8:	47c8      	blx	r9
 80057ba:	3001      	adds	r0, #1
 80057bc:	d01e      	beq.n	80057fc <_printf_common+0xa4>
 80057be:	6823      	ldr	r3, [r4, #0]
 80057c0:	6922      	ldr	r2, [r4, #16]
 80057c2:	f003 0306 	and.w	r3, r3, #6
 80057c6:	2b04      	cmp	r3, #4
 80057c8:	bf02      	ittt	eq
 80057ca:	68e5      	ldreq	r5, [r4, #12]
 80057cc:	6833      	ldreq	r3, [r6, #0]
 80057ce:	1aed      	subeq	r5, r5, r3
 80057d0:	68a3      	ldr	r3, [r4, #8]
 80057d2:	bf0c      	ite	eq
 80057d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057d8:	2500      	movne	r5, #0
 80057da:	4293      	cmp	r3, r2
 80057dc:	bfc4      	itt	gt
 80057de:	1a9b      	subgt	r3, r3, r2
 80057e0:	18ed      	addgt	r5, r5, r3
 80057e2:	2600      	movs	r6, #0
 80057e4:	341a      	adds	r4, #26
 80057e6:	42b5      	cmp	r5, r6
 80057e8:	d11a      	bne.n	8005820 <_printf_common+0xc8>
 80057ea:	2000      	movs	r0, #0
 80057ec:	e008      	b.n	8005800 <_printf_common+0xa8>
 80057ee:	2301      	movs	r3, #1
 80057f0:	4652      	mov	r2, sl
 80057f2:	4641      	mov	r1, r8
 80057f4:	4638      	mov	r0, r7
 80057f6:	47c8      	blx	r9
 80057f8:	3001      	adds	r0, #1
 80057fa:	d103      	bne.n	8005804 <_printf_common+0xac>
 80057fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005804:	3501      	adds	r5, #1
 8005806:	e7c6      	b.n	8005796 <_printf_common+0x3e>
 8005808:	18e1      	adds	r1, r4, r3
 800580a:	1c5a      	adds	r2, r3, #1
 800580c:	2030      	movs	r0, #48	@ 0x30
 800580e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005812:	4422      	add	r2, r4
 8005814:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005818:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800581c:	3302      	adds	r3, #2
 800581e:	e7c7      	b.n	80057b0 <_printf_common+0x58>
 8005820:	2301      	movs	r3, #1
 8005822:	4622      	mov	r2, r4
 8005824:	4641      	mov	r1, r8
 8005826:	4638      	mov	r0, r7
 8005828:	47c8      	blx	r9
 800582a:	3001      	adds	r0, #1
 800582c:	d0e6      	beq.n	80057fc <_printf_common+0xa4>
 800582e:	3601      	adds	r6, #1
 8005830:	e7d9      	b.n	80057e6 <_printf_common+0x8e>
	...

08005834 <_printf_i>:
 8005834:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005838:	7e0f      	ldrb	r7, [r1, #24]
 800583a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800583c:	2f78      	cmp	r7, #120	@ 0x78
 800583e:	4691      	mov	r9, r2
 8005840:	4680      	mov	r8, r0
 8005842:	460c      	mov	r4, r1
 8005844:	469a      	mov	sl, r3
 8005846:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800584a:	d807      	bhi.n	800585c <_printf_i+0x28>
 800584c:	2f62      	cmp	r7, #98	@ 0x62
 800584e:	d80a      	bhi.n	8005866 <_printf_i+0x32>
 8005850:	2f00      	cmp	r7, #0
 8005852:	f000 80d2 	beq.w	80059fa <_printf_i+0x1c6>
 8005856:	2f58      	cmp	r7, #88	@ 0x58
 8005858:	f000 80b9 	beq.w	80059ce <_printf_i+0x19a>
 800585c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005860:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005864:	e03a      	b.n	80058dc <_printf_i+0xa8>
 8005866:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800586a:	2b15      	cmp	r3, #21
 800586c:	d8f6      	bhi.n	800585c <_printf_i+0x28>
 800586e:	a101      	add	r1, pc, #4	@ (adr r1, 8005874 <_printf_i+0x40>)
 8005870:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005874:	080058cd 	.word	0x080058cd
 8005878:	080058e1 	.word	0x080058e1
 800587c:	0800585d 	.word	0x0800585d
 8005880:	0800585d 	.word	0x0800585d
 8005884:	0800585d 	.word	0x0800585d
 8005888:	0800585d 	.word	0x0800585d
 800588c:	080058e1 	.word	0x080058e1
 8005890:	0800585d 	.word	0x0800585d
 8005894:	0800585d 	.word	0x0800585d
 8005898:	0800585d 	.word	0x0800585d
 800589c:	0800585d 	.word	0x0800585d
 80058a0:	080059e1 	.word	0x080059e1
 80058a4:	0800590b 	.word	0x0800590b
 80058a8:	0800599b 	.word	0x0800599b
 80058ac:	0800585d 	.word	0x0800585d
 80058b0:	0800585d 	.word	0x0800585d
 80058b4:	08005a03 	.word	0x08005a03
 80058b8:	0800585d 	.word	0x0800585d
 80058bc:	0800590b 	.word	0x0800590b
 80058c0:	0800585d 	.word	0x0800585d
 80058c4:	0800585d 	.word	0x0800585d
 80058c8:	080059a3 	.word	0x080059a3
 80058cc:	6833      	ldr	r3, [r6, #0]
 80058ce:	1d1a      	adds	r2, r3, #4
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	6032      	str	r2, [r6, #0]
 80058d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80058dc:	2301      	movs	r3, #1
 80058de:	e09d      	b.n	8005a1c <_printf_i+0x1e8>
 80058e0:	6833      	ldr	r3, [r6, #0]
 80058e2:	6820      	ldr	r0, [r4, #0]
 80058e4:	1d19      	adds	r1, r3, #4
 80058e6:	6031      	str	r1, [r6, #0]
 80058e8:	0606      	lsls	r6, r0, #24
 80058ea:	d501      	bpl.n	80058f0 <_printf_i+0xbc>
 80058ec:	681d      	ldr	r5, [r3, #0]
 80058ee:	e003      	b.n	80058f8 <_printf_i+0xc4>
 80058f0:	0645      	lsls	r5, r0, #25
 80058f2:	d5fb      	bpl.n	80058ec <_printf_i+0xb8>
 80058f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80058f8:	2d00      	cmp	r5, #0
 80058fa:	da03      	bge.n	8005904 <_printf_i+0xd0>
 80058fc:	232d      	movs	r3, #45	@ 0x2d
 80058fe:	426d      	negs	r5, r5
 8005900:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005904:	4859      	ldr	r0, [pc, #356]	@ (8005a6c <_printf_i+0x238>)
 8005906:	230a      	movs	r3, #10
 8005908:	e011      	b.n	800592e <_printf_i+0xfa>
 800590a:	6821      	ldr	r1, [r4, #0]
 800590c:	6833      	ldr	r3, [r6, #0]
 800590e:	0608      	lsls	r0, r1, #24
 8005910:	f853 5b04 	ldr.w	r5, [r3], #4
 8005914:	d402      	bmi.n	800591c <_printf_i+0xe8>
 8005916:	0649      	lsls	r1, r1, #25
 8005918:	bf48      	it	mi
 800591a:	b2ad      	uxthmi	r5, r5
 800591c:	2f6f      	cmp	r7, #111	@ 0x6f
 800591e:	4853      	ldr	r0, [pc, #332]	@ (8005a6c <_printf_i+0x238>)
 8005920:	6033      	str	r3, [r6, #0]
 8005922:	bf14      	ite	ne
 8005924:	230a      	movne	r3, #10
 8005926:	2308      	moveq	r3, #8
 8005928:	2100      	movs	r1, #0
 800592a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800592e:	6866      	ldr	r6, [r4, #4]
 8005930:	60a6      	str	r6, [r4, #8]
 8005932:	2e00      	cmp	r6, #0
 8005934:	bfa2      	ittt	ge
 8005936:	6821      	ldrge	r1, [r4, #0]
 8005938:	f021 0104 	bicge.w	r1, r1, #4
 800593c:	6021      	strge	r1, [r4, #0]
 800593e:	b90d      	cbnz	r5, 8005944 <_printf_i+0x110>
 8005940:	2e00      	cmp	r6, #0
 8005942:	d04b      	beq.n	80059dc <_printf_i+0x1a8>
 8005944:	4616      	mov	r6, r2
 8005946:	fbb5 f1f3 	udiv	r1, r5, r3
 800594a:	fb03 5711 	mls	r7, r3, r1, r5
 800594e:	5dc7      	ldrb	r7, [r0, r7]
 8005950:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005954:	462f      	mov	r7, r5
 8005956:	42bb      	cmp	r3, r7
 8005958:	460d      	mov	r5, r1
 800595a:	d9f4      	bls.n	8005946 <_printf_i+0x112>
 800595c:	2b08      	cmp	r3, #8
 800595e:	d10b      	bne.n	8005978 <_printf_i+0x144>
 8005960:	6823      	ldr	r3, [r4, #0]
 8005962:	07df      	lsls	r7, r3, #31
 8005964:	d508      	bpl.n	8005978 <_printf_i+0x144>
 8005966:	6923      	ldr	r3, [r4, #16]
 8005968:	6861      	ldr	r1, [r4, #4]
 800596a:	4299      	cmp	r1, r3
 800596c:	bfde      	ittt	le
 800596e:	2330      	movle	r3, #48	@ 0x30
 8005970:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005974:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005978:	1b92      	subs	r2, r2, r6
 800597a:	6122      	str	r2, [r4, #16]
 800597c:	f8cd a000 	str.w	sl, [sp]
 8005980:	464b      	mov	r3, r9
 8005982:	aa03      	add	r2, sp, #12
 8005984:	4621      	mov	r1, r4
 8005986:	4640      	mov	r0, r8
 8005988:	f7ff fee6 	bl	8005758 <_printf_common>
 800598c:	3001      	adds	r0, #1
 800598e:	d14a      	bne.n	8005a26 <_printf_i+0x1f2>
 8005990:	f04f 30ff 	mov.w	r0, #4294967295
 8005994:	b004      	add	sp, #16
 8005996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800599a:	6823      	ldr	r3, [r4, #0]
 800599c:	f043 0320 	orr.w	r3, r3, #32
 80059a0:	6023      	str	r3, [r4, #0]
 80059a2:	4833      	ldr	r0, [pc, #204]	@ (8005a70 <_printf_i+0x23c>)
 80059a4:	2778      	movs	r7, #120	@ 0x78
 80059a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80059aa:	6823      	ldr	r3, [r4, #0]
 80059ac:	6831      	ldr	r1, [r6, #0]
 80059ae:	061f      	lsls	r7, r3, #24
 80059b0:	f851 5b04 	ldr.w	r5, [r1], #4
 80059b4:	d402      	bmi.n	80059bc <_printf_i+0x188>
 80059b6:	065f      	lsls	r7, r3, #25
 80059b8:	bf48      	it	mi
 80059ba:	b2ad      	uxthmi	r5, r5
 80059bc:	6031      	str	r1, [r6, #0]
 80059be:	07d9      	lsls	r1, r3, #31
 80059c0:	bf44      	itt	mi
 80059c2:	f043 0320 	orrmi.w	r3, r3, #32
 80059c6:	6023      	strmi	r3, [r4, #0]
 80059c8:	b11d      	cbz	r5, 80059d2 <_printf_i+0x19e>
 80059ca:	2310      	movs	r3, #16
 80059cc:	e7ac      	b.n	8005928 <_printf_i+0xf4>
 80059ce:	4827      	ldr	r0, [pc, #156]	@ (8005a6c <_printf_i+0x238>)
 80059d0:	e7e9      	b.n	80059a6 <_printf_i+0x172>
 80059d2:	6823      	ldr	r3, [r4, #0]
 80059d4:	f023 0320 	bic.w	r3, r3, #32
 80059d8:	6023      	str	r3, [r4, #0]
 80059da:	e7f6      	b.n	80059ca <_printf_i+0x196>
 80059dc:	4616      	mov	r6, r2
 80059de:	e7bd      	b.n	800595c <_printf_i+0x128>
 80059e0:	6833      	ldr	r3, [r6, #0]
 80059e2:	6825      	ldr	r5, [r4, #0]
 80059e4:	6961      	ldr	r1, [r4, #20]
 80059e6:	1d18      	adds	r0, r3, #4
 80059e8:	6030      	str	r0, [r6, #0]
 80059ea:	062e      	lsls	r6, r5, #24
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	d501      	bpl.n	80059f4 <_printf_i+0x1c0>
 80059f0:	6019      	str	r1, [r3, #0]
 80059f2:	e002      	b.n	80059fa <_printf_i+0x1c6>
 80059f4:	0668      	lsls	r0, r5, #25
 80059f6:	d5fb      	bpl.n	80059f0 <_printf_i+0x1bc>
 80059f8:	8019      	strh	r1, [r3, #0]
 80059fa:	2300      	movs	r3, #0
 80059fc:	6123      	str	r3, [r4, #16]
 80059fe:	4616      	mov	r6, r2
 8005a00:	e7bc      	b.n	800597c <_printf_i+0x148>
 8005a02:	6833      	ldr	r3, [r6, #0]
 8005a04:	1d1a      	adds	r2, r3, #4
 8005a06:	6032      	str	r2, [r6, #0]
 8005a08:	681e      	ldr	r6, [r3, #0]
 8005a0a:	6862      	ldr	r2, [r4, #4]
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	4630      	mov	r0, r6
 8005a10:	f7fa fc06 	bl	8000220 <memchr>
 8005a14:	b108      	cbz	r0, 8005a1a <_printf_i+0x1e6>
 8005a16:	1b80      	subs	r0, r0, r6
 8005a18:	6060      	str	r0, [r4, #4]
 8005a1a:	6863      	ldr	r3, [r4, #4]
 8005a1c:	6123      	str	r3, [r4, #16]
 8005a1e:	2300      	movs	r3, #0
 8005a20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a24:	e7aa      	b.n	800597c <_printf_i+0x148>
 8005a26:	6923      	ldr	r3, [r4, #16]
 8005a28:	4632      	mov	r2, r6
 8005a2a:	4649      	mov	r1, r9
 8005a2c:	4640      	mov	r0, r8
 8005a2e:	47d0      	blx	sl
 8005a30:	3001      	adds	r0, #1
 8005a32:	d0ad      	beq.n	8005990 <_printf_i+0x15c>
 8005a34:	6823      	ldr	r3, [r4, #0]
 8005a36:	079b      	lsls	r3, r3, #30
 8005a38:	d413      	bmi.n	8005a62 <_printf_i+0x22e>
 8005a3a:	68e0      	ldr	r0, [r4, #12]
 8005a3c:	9b03      	ldr	r3, [sp, #12]
 8005a3e:	4298      	cmp	r0, r3
 8005a40:	bfb8      	it	lt
 8005a42:	4618      	movlt	r0, r3
 8005a44:	e7a6      	b.n	8005994 <_printf_i+0x160>
 8005a46:	2301      	movs	r3, #1
 8005a48:	4632      	mov	r2, r6
 8005a4a:	4649      	mov	r1, r9
 8005a4c:	4640      	mov	r0, r8
 8005a4e:	47d0      	blx	sl
 8005a50:	3001      	adds	r0, #1
 8005a52:	d09d      	beq.n	8005990 <_printf_i+0x15c>
 8005a54:	3501      	adds	r5, #1
 8005a56:	68e3      	ldr	r3, [r4, #12]
 8005a58:	9903      	ldr	r1, [sp, #12]
 8005a5a:	1a5b      	subs	r3, r3, r1
 8005a5c:	42ab      	cmp	r3, r5
 8005a5e:	dcf2      	bgt.n	8005a46 <_printf_i+0x212>
 8005a60:	e7eb      	b.n	8005a3a <_printf_i+0x206>
 8005a62:	2500      	movs	r5, #0
 8005a64:	f104 0619 	add.w	r6, r4, #25
 8005a68:	e7f5      	b.n	8005a56 <_printf_i+0x222>
 8005a6a:	bf00      	nop
 8005a6c:	0800615d 	.word	0x0800615d
 8005a70:	0800616e 	.word	0x0800616e

08005a74 <__sflush_r>:
 8005a74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a7c:	0716      	lsls	r6, r2, #28
 8005a7e:	4605      	mov	r5, r0
 8005a80:	460c      	mov	r4, r1
 8005a82:	d454      	bmi.n	8005b2e <__sflush_r+0xba>
 8005a84:	684b      	ldr	r3, [r1, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	dc02      	bgt.n	8005a90 <__sflush_r+0x1c>
 8005a8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	dd48      	ble.n	8005b22 <__sflush_r+0xae>
 8005a90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005a92:	2e00      	cmp	r6, #0
 8005a94:	d045      	beq.n	8005b22 <__sflush_r+0xae>
 8005a96:	2300      	movs	r3, #0
 8005a98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005a9c:	682f      	ldr	r7, [r5, #0]
 8005a9e:	6a21      	ldr	r1, [r4, #32]
 8005aa0:	602b      	str	r3, [r5, #0]
 8005aa2:	d030      	beq.n	8005b06 <__sflush_r+0x92>
 8005aa4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005aa6:	89a3      	ldrh	r3, [r4, #12]
 8005aa8:	0759      	lsls	r1, r3, #29
 8005aaa:	d505      	bpl.n	8005ab8 <__sflush_r+0x44>
 8005aac:	6863      	ldr	r3, [r4, #4]
 8005aae:	1ad2      	subs	r2, r2, r3
 8005ab0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005ab2:	b10b      	cbz	r3, 8005ab8 <__sflush_r+0x44>
 8005ab4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005ab6:	1ad2      	subs	r2, r2, r3
 8005ab8:	2300      	movs	r3, #0
 8005aba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005abc:	6a21      	ldr	r1, [r4, #32]
 8005abe:	4628      	mov	r0, r5
 8005ac0:	47b0      	blx	r6
 8005ac2:	1c43      	adds	r3, r0, #1
 8005ac4:	89a3      	ldrh	r3, [r4, #12]
 8005ac6:	d106      	bne.n	8005ad6 <__sflush_r+0x62>
 8005ac8:	6829      	ldr	r1, [r5, #0]
 8005aca:	291d      	cmp	r1, #29
 8005acc:	d82b      	bhi.n	8005b26 <__sflush_r+0xb2>
 8005ace:	4a2a      	ldr	r2, [pc, #168]	@ (8005b78 <__sflush_r+0x104>)
 8005ad0:	410a      	asrs	r2, r1
 8005ad2:	07d6      	lsls	r6, r2, #31
 8005ad4:	d427      	bmi.n	8005b26 <__sflush_r+0xb2>
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	6062      	str	r2, [r4, #4]
 8005ada:	04d9      	lsls	r1, r3, #19
 8005adc:	6922      	ldr	r2, [r4, #16]
 8005ade:	6022      	str	r2, [r4, #0]
 8005ae0:	d504      	bpl.n	8005aec <__sflush_r+0x78>
 8005ae2:	1c42      	adds	r2, r0, #1
 8005ae4:	d101      	bne.n	8005aea <__sflush_r+0x76>
 8005ae6:	682b      	ldr	r3, [r5, #0]
 8005ae8:	b903      	cbnz	r3, 8005aec <__sflush_r+0x78>
 8005aea:	6560      	str	r0, [r4, #84]	@ 0x54
 8005aec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005aee:	602f      	str	r7, [r5, #0]
 8005af0:	b1b9      	cbz	r1, 8005b22 <__sflush_r+0xae>
 8005af2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005af6:	4299      	cmp	r1, r3
 8005af8:	d002      	beq.n	8005b00 <__sflush_r+0x8c>
 8005afa:	4628      	mov	r0, r5
 8005afc:	f7ff fa9a 	bl	8005034 <_free_r>
 8005b00:	2300      	movs	r3, #0
 8005b02:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b04:	e00d      	b.n	8005b22 <__sflush_r+0xae>
 8005b06:	2301      	movs	r3, #1
 8005b08:	4628      	mov	r0, r5
 8005b0a:	47b0      	blx	r6
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	1c50      	adds	r0, r2, #1
 8005b10:	d1c9      	bne.n	8005aa6 <__sflush_r+0x32>
 8005b12:	682b      	ldr	r3, [r5, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d0c6      	beq.n	8005aa6 <__sflush_r+0x32>
 8005b18:	2b1d      	cmp	r3, #29
 8005b1a:	d001      	beq.n	8005b20 <__sflush_r+0xac>
 8005b1c:	2b16      	cmp	r3, #22
 8005b1e:	d11e      	bne.n	8005b5e <__sflush_r+0xea>
 8005b20:	602f      	str	r7, [r5, #0]
 8005b22:	2000      	movs	r0, #0
 8005b24:	e022      	b.n	8005b6c <__sflush_r+0xf8>
 8005b26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b2a:	b21b      	sxth	r3, r3
 8005b2c:	e01b      	b.n	8005b66 <__sflush_r+0xf2>
 8005b2e:	690f      	ldr	r7, [r1, #16]
 8005b30:	2f00      	cmp	r7, #0
 8005b32:	d0f6      	beq.n	8005b22 <__sflush_r+0xae>
 8005b34:	0793      	lsls	r3, r2, #30
 8005b36:	680e      	ldr	r6, [r1, #0]
 8005b38:	bf08      	it	eq
 8005b3a:	694b      	ldreq	r3, [r1, #20]
 8005b3c:	600f      	str	r7, [r1, #0]
 8005b3e:	bf18      	it	ne
 8005b40:	2300      	movne	r3, #0
 8005b42:	eba6 0807 	sub.w	r8, r6, r7
 8005b46:	608b      	str	r3, [r1, #8]
 8005b48:	f1b8 0f00 	cmp.w	r8, #0
 8005b4c:	dde9      	ble.n	8005b22 <__sflush_r+0xae>
 8005b4e:	6a21      	ldr	r1, [r4, #32]
 8005b50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005b52:	4643      	mov	r3, r8
 8005b54:	463a      	mov	r2, r7
 8005b56:	4628      	mov	r0, r5
 8005b58:	47b0      	blx	r6
 8005b5a:	2800      	cmp	r0, #0
 8005b5c:	dc08      	bgt.n	8005b70 <__sflush_r+0xfc>
 8005b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b66:	81a3      	strh	r3, [r4, #12]
 8005b68:	f04f 30ff 	mov.w	r0, #4294967295
 8005b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b70:	4407      	add	r7, r0
 8005b72:	eba8 0800 	sub.w	r8, r8, r0
 8005b76:	e7e7      	b.n	8005b48 <__sflush_r+0xd4>
 8005b78:	dfbffffe 	.word	0xdfbffffe

08005b7c <_fflush_r>:
 8005b7c:	b538      	push	{r3, r4, r5, lr}
 8005b7e:	690b      	ldr	r3, [r1, #16]
 8005b80:	4605      	mov	r5, r0
 8005b82:	460c      	mov	r4, r1
 8005b84:	b913      	cbnz	r3, 8005b8c <_fflush_r+0x10>
 8005b86:	2500      	movs	r5, #0
 8005b88:	4628      	mov	r0, r5
 8005b8a:	bd38      	pop	{r3, r4, r5, pc}
 8005b8c:	b118      	cbz	r0, 8005b96 <_fflush_r+0x1a>
 8005b8e:	6a03      	ldr	r3, [r0, #32]
 8005b90:	b90b      	cbnz	r3, 8005b96 <_fflush_r+0x1a>
 8005b92:	f7ff f813 	bl	8004bbc <__sinit>
 8005b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d0f3      	beq.n	8005b86 <_fflush_r+0xa>
 8005b9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005ba0:	07d0      	lsls	r0, r2, #31
 8005ba2:	d404      	bmi.n	8005bae <_fflush_r+0x32>
 8005ba4:	0599      	lsls	r1, r3, #22
 8005ba6:	d402      	bmi.n	8005bae <_fflush_r+0x32>
 8005ba8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005baa:	f7ff fa32 	bl	8005012 <__retarget_lock_acquire_recursive>
 8005bae:	4628      	mov	r0, r5
 8005bb0:	4621      	mov	r1, r4
 8005bb2:	f7ff ff5f 	bl	8005a74 <__sflush_r>
 8005bb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005bb8:	07da      	lsls	r2, r3, #31
 8005bba:	4605      	mov	r5, r0
 8005bbc:	d4e4      	bmi.n	8005b88 <_fflush_r+0xc>
 8005bbe:	89a3      	ldrh	r3, [r4, #12]
 8005bc0:	059b      	lsls	r3, r3, #22
 8005bc2:	d4e1      	bmi.n	8005b88 <_fflush_r+0xc>
 8005bc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bc6:	f7ff fa25 	bl	8005014 <__retarget_lock_release_recursive>
 8005bca:	e7dd      	b.n	8005b88 <_fflush_r+0xc>

08005bcc <__swhatbuf_r>:
 8005bcc:	b570      	push	{r4, r5, r6, lr}
 8005bce:	460c      	mov	r4, r1
 8005bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bd4:	2900      	cmp	r1, #0
 8005bd6:	b096      	sub	sp, #88	@ 0x58
 8005bd8:	4615      	mov	r5, r2
 8005bda:	461e      	mov	r6, r3
 8005bdc:	da0d      	bge.n	8005bfa <__swhatbuf_r+0x2e>
 8005bde:	89a3      	ldrh	r3, [r4, #12]
 8005be0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005be4:	f04f 0100 	mov.w	r1, #0
 8005be8:	bf14      	ite	ne
 8005bea:	2340      	movne	r3, #64	@ 0x40
 8005bec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005bf0:	2000      	movs	r0, #0
 8005bf2:	6031      	str	r1, [r6, #0]
 8005bf4:	602b      	str	r3, [r5, #0]
 8005bf6:	b016      	add	sp, #88	@ 0x58
 8005bf8:	bd70      	pop	{r4, r5, r6, pc}
 8005bfa:	466a      	mov	r2, sp
 8005bfc:	f000 f862 	bl	8005cc4 <_fstat_r>
 8005c00:	2800      	cmp	r0, #0
 8005c02:	dbec      	blt.n	8005bde <__swhatbuf_r+0x12>
 8005c04:	9901      	ldr	r1, [sp, #4]
 8005c06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005c0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005c0e:	4259      	negs	r1, r3
 8005c10:	4159      	adcs	r1, r3
 8005c12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c16:	e7eb      	b.n	8005bf0 <__swhatbuf_r+0x24>

08005c18 <__smakebuf_r>:
 8005c18:	898b      	ldrh	r3, [r1, #12]
 8005c1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c1c:	079d      	lsls	r5, r3, #30
 8005c1e:	4606      	mov	r6, r0
 8005c20:	460c      	mov	r4, r1
 8005c22:	d507      	bpl.n	8005c34 <__smakebuf_r+0x1c>
 8005c24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005c28:	6023      	str	r3, [r4, #0]
 8005c2a:	6123      	str	r3, [r4, #16]
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	6163      	str	r3, [r4, #20]
 8005c30:	b003      	add	sp, #12
 8005c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c34:	ab01      	add	r3, sp, #4
 8005c36:	466a      	mov	r2, sp
 8005c38:	f7ff ffc8 	bl	8005bcc <__swhatbuf_r>
 8005c3c:	9f00      	ldr	r7, [sp, #0]
 8005c3e:	4605      	mov	r5, r0
 8005c40:	4639      	mov	r1, r7
 8005c42:	4630      	mov	r0, r6
 8005c44:	f7ff fa62 	bl	800510c <_malloc_r>
 8005c48:	b948      	cbnz	r0, 8005c5e <__smakebuf_r+0x46>
 8005c4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c4e:	059a      	lsls	r2, r3, #22
 8005c50:	d4ee      	bmi.n	8005c30 <__smakebuf_r+0x18>
 8005c52:	f023 0303 	bic.w	r3, r3, #3
 8005c56:	f043 0302 	orr.w	r3, r3, #2
 8005c5a:	81a3      	strh	r3, [r4, #12]
 8005c5c:	e7e2      	b.n	8005c24 <__smakebuf_r+0xc>
 8005c5e:	89a3      	ldrh	r3, [r4, #12]
 8005c60:	6020      	str	r0, [r4, #0]
 8005c62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c66:	81a3      	strh	r3, [r4, #12]
 8005c68:	9b01      	ldr	r3, [sp, #4]
 8005c6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005c6e:	b15b      	cbz	r3, 8005c88 <__smakebuf_r+0x70>
 8005c70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c74:	4630      	mov	r0, r6
 8005c76:	f000 f837 	bl	8005ce8 <_isatty_r>
 8005c7a:	b128      	cbz	r0, 8005c88 <__smakebuf_r+0x70>
 8005c7c:	89a3      	ldrh	r3, [r4, #12]
 8005c7e:	f023 0303 	bic.w	r3, r3, #3
 8005c82:	f043 0301 	orr.w	r3, r3, #1
 8005c86:	81a3      	strh	r3, [r4, #12]
 8005c88:	89a3      	ldrh	r3, [r4, #12]
 8005c8a:	431d      	orrs	r5, r3
 8005c8c:	81a5      	strh	r5, [r4, #12]
 8005c8e:	e7cf      	b.n	8005c30 <__smakebuf_r+0x18>

08005c90 <memmove>:
 8005c90:	4288      	cmp	r0, r1
 8005c92:	b510      	push	{r4, lr}
 8005c94:	eb01 0402 	add.w	r4, r1, r2
 8005c98:	d902      	bls.n	8005ca0 <memmove+0x10>
 8005c9a:	4284      	cmp	r4, r0
 8005c9c:	4623      	mov	r3, r4
 8005c9e:	d807      	bhi.n	8005cb0 <memmove+0x20>
 8005ca0:	1e43      	subs	r3, r0, #1
 8005ca2:	42a1      	cmp	r1, r4
 8005ca4:	d008      	beq.n	8005cb8 <memmove+0x28>
 8005ca6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005caa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005cae:	e7f8      	b.n	8005ca2 <memmove+0x12>
 8005cb0:	4402      	add	r2, r0
 8005cb2:	4601      	mov	r1, r0
 8005cb4:	428a      	cmp	r2, r1
 8005cb6:	d100      	bne.n	8005cba <memmove+0x2a>
 8005cb8:	bd10      	pop	{r4, pc}
 8005cba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005cbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005cc2:	e7f7      	b.n	8005cb4 <memmove+0x24>

08005cc4 <_fstat_r>:
 8005cc4:	b538      	push	{r3, r4, r5, lr}
 8005cc6:	4d07      	ldr	r5, [pc, #28]	@ (8005ce4 <_fstat_r+0x20>)
 8005cc8:	2300      	movs	r3, #0
 8005cca:	4604      	mov	r4, r0
 8005ccc:	4608      	mov	r0, r1
 8005cce:	4611      	mov	r1, r2
 8005cd0:	602b      	str	r3, [r5, #0]
 8005cd2:	f7fb f8b4 	bl	8000e3e <_fstat>
 8005cd6:	1c43      	adds	r3, r0, #1
 8005cd8:	d102      	bne.n	8005ce0 <_fstat_r+0x1c>
 8005cda:	682b      	ldr	r3, [r5, #0]
 8005cdc:	b103      	cbz	r3, 8005ce0 <_fstat_r+0x1c>
 8005cde:	6023      	str	r3, [r4, #0]
 8005ce0:	bd38      	pop	{r3, r4, r5, pc}
 8005ce2:	bf00      	nop
 8005ce4:	2000104c 	.word	0x2000104c

08005ce8 <_isatty_r>:
 8005ce8:	b538      	push	{r3, r4, r5, lr}
 8005cea:	4d06      	ldr	r5, [pc, #24]	@ (8005d04 <_isatty_r+0x1c>)
 8005cec:	2300      	movs	r3, #0
 8005cee:	4604      	mov	r4, r0
 8005cf0:	4608      	mov	r0, r1
 8005cf2:	602b      	str	r3, [r5, #0]
 8005cf4:	f7fb f8b3 	bl	8000e5e <_isatty>
 8005cf8:	1c43      	adds	r3, r0, #1
 8005cfa:	d102      	bne.n	8005d02 <_isatty_r+0x1a>
 8005cfc:	682b      	ldr	r3, [r5, #0]
 8005cfe:	b103      	cbz	r3, 8005d02 <_isatty_r+0x1a>
 8005d00:	6023      	str	r3, [r4, #0]
 8005d02:	bd38      	pop	{r3, r4, r5, pc}
 8005d04:	2000104c 	.word	0x2000104c

08005d08 <_sbrk_r>:
 8005d08:	b538      	push	{r3, r4, r5, lr}
 8005d0a:	4d06      	ldr	r5, [pc, #24]	@ (8005d24 <_sbrk_r+0x1c>)
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	4604      	mov	r4, r0
 8005d10:	4608      	mov	r0, r1
 8005d12:	602b      	str	r3, [r5, #0]
 8005d14:	f7fb f8bc 	bl	8000e90 <_sbrk>
 8005d18:	1c43      	adds	r3, r0, #1
 8005d1a:	d102      	bne.n	8005d22 <_sbrk_r+0x1a>
 8005d1c:	682b      	ldr	r3, [r5, #0]
 8005d1e:	b103      	cbz	r3, 8005d22 <_sbrk_r+0x1a>
 8005d20:	6023      	str	r3, [r4, #0]
 8005d22:	bd38      	pop	{r3, r4, r5, pc}
 8005d24:	2000104c 	.word	0x2000104c

08005d28 <_realloc_r>:
 8005d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d2c:	4680      	mov	r8, r0
 8005d2e:	4615      	mov	r5, r2
 8005d30:	460c      	mov	r4, r1
 8005d32:	b921      	cbnz	r1, 8005d3e <_realloc_r+0x16>
 8005d34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d38:	4611      	mov	r1, r2
 8005d3a:	f7ff b9e7 	b.w	800510c <_malloc_r>
 8005d3e:	b92a      	cbnz	r2, 8005d4c <_realloc_r+0x24>
 8005d40:	f7ff f978 	bl	8005034 <_free_r>
 8005d44:	2400      	movs	r4, #0
 8005d46:	4620      	mov	r0, r4
 8005d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d4c:	f000 f81a 	bl	8005d84 <_malloc_usable_size_r>
 8005d50:	4285      	cmp	r5, r0
 8005d52:	4606      	mov	r6, r0
 8005d54:	d802      	bhi.n	8005d5c <_realloc_r+0x34>
 8005d56:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005d5a:	d8f4      	bhi.n	8005d46 <_realloc_r+0x1e>
 8005d5c:	4629      	mov	r1, r5
 8005d5e:	4640      	mov	r0, r8
 8005d60:	f7ff f9d4 	bl	800510c <_malloc_r>
 8005d64:	4607      	mov	r7, r0
 8005d66:	2800      	cmp	r0, #0
 8005d68:	d0ec      	beq.n	8005d44 <_realloc_r+0x1c>
 8005d6a:	42b5      	cmp	r5, r6
 8005d6c:	462a      	mov	r2, r5
 8005d6e:	4621      	mov	r1, r4
 8005d70:	bf28      	it	cs
 8005d72:	4632      	movcs	r2, r6
 8005d74:	f7ff f94f 	bl	8005016 <memcpy>
 8005d78:	4621      	mov	r1, r4
 8005d7a:	4640      	mov	r0, r8
 8005d7c:	f7ff f95a 	bl	8005034 <_free_r>
 8005d80:	463c      	mov	r4, r7
 8005d82:	e7e0      	b.n	8005d46 <_realloc_r+0x1e>

08005d84 <_malloc_usable_size_r>:
 8005d84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d88:	1f18      	subs	r0, r3, #4
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	bfbc      	itt	lt
 8005d8e:	580b      	ldrlt	r3, [r1, r0]
 8005d90:	18c0      	addlt	r0, r0, r3
 8005d92:	4770      	bx	lr

08005d94 <_init>:
 8005d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d96:	bf00      	nop
 8005d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d9a:	bc08      	pop	{r3}
 8005d9c:	469e      	mov	lr, r3
 8005d9e:	4770      	bx	lr

08005da0 <_fini>:
 8005da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da2:	bf00      	nop
 8005da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005da6:	bc08      	pop	{r3}
 8005da8:	469e      	mov	lr, r3
 8005daa:	4770      	bx	lr
