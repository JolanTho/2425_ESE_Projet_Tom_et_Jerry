
Driver_Lid_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099f4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000530  08009bd4  08009bd4  0000abd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a104  0800a104  0000c06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a104  0800a104  0000b104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a10c  0800a10c  0000c06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a10c  0800a10c  0000b10c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a110  0800a110  0000b110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800a114  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007ab4  2000006c  0800a180  0000c06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20007b20  0800a180  0000cb20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001af76  00000000  00000000  0000c09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000408e  00000000  00000000  00027012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001870  00000000  00000000  0002b0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012f1  00000000  00000000  0002c910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021fc0  00000000  00000000  0002dc01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d5bb  00000000  00000000  0004fbc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d171d  00000000  00000000  0006d17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  0013e899  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ef0  00000000  00000000  0013e920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00145810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009bbc 	.word	0x08009bbc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	08009bbc 	.word	0x08009bbc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__gedf2>:
 8000638:	f04f 3cff 	mov.w	ip, #4294967295
 800063c:	e006      	b.n	800064c <__cmpdf2+0x4>
 800063e:	bf00      	nop

08000640 <__ledf2>:
 8000640:	f04f 0c01 	mov.w	ip, #1
 8000644:	e002      	b.n	800064c <__cmpdf2+0x4>
 8000646:	bf00      	nop

08000648 <__cmpdf2>:
 8000648:	f04f 0c01 	mov.w	ip, #1
 800064c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000650:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000654:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000658:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800065c:	bf18      	it	ne
 800065e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000662:	d01b      	beq.n	800069c <__cmpdf2+0x54>
 8000664:	b001      	add	sp, #4
 8000666:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800066a:	bf0c      	ite	eq
 800066c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000670:	ea91 0f03 	teqne	r1, r3
 8000674:	bf02      	ittt	eq
 8000676:	ea90 0f02 	teqeq	r0, r2
 800067a:	2000      	moveq	r0, #0
 800067c:	4770      	bxeq	lr
 800067e:	f110 0f00 	cmn.w	r0, #0
 8000682:	ea91 0f03 	teq	r1, r3
 8000686:	bf58      	it	pl
 8000688:	4299      	cmppl	r1, r3
 800068a:	bf08      	it	eq
 800068c:	4290      	cmpeq	r0, r2
 800068e:	bf2c      	ite	cs
 8000690:	17d8      	asrcs	r0, r3, #31
 8000692:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000696:	f040 0001 	orr.w	r0, r0, #1
 800069a:	4770      	bx	lr
 800069c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006a4:	d102      	bne.n	80006ac <__cmpdf2+0x64>
 80006a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006aa:	d107      	bne.n	80006bc <__cmpdf2+0x74>
 80006ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006b4:	d1d6      	bne.n	8000664 <__cmpdf2+0x1c>
 80006b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006ba:	d0d3      	beq.n	8000664 <__cmpdf2+0x1c>
 80006bc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop

080006c4 <__aeabi_cdrcmple>:
 80006c4:	4684      	mov	ip, r0
 80006c6:	4610      	mov	r0, r2
 80006c8:	4662      	mov	r2, ip
 80006ca:	468c      	mov	ip, r1
 80006cc:	4619      	mov	r1, r3
 80006ce:	4663      	mov	r3, ip
 80006d0:	e000      	b.n	80006d4 <__aeabi_cdcmpeq>
 80006d2:	bf00      	nop

080006d4 <__aeabi_cdcmpeq>:
 80006d4:	b501      	push	{r0, lr}
 80006d6:	f7ff ffb7 	bl	8000648 <__cmpdf2>
 80006da:	2800      	cmp	r0, #0
 80006dc:	bf48      	it	mi
 80006de:	f110 0f00 	cmnmi.w	r0, #0
 80006e2:	bd01      	pop	{r0, pc}

080006e4 <__aeabi_dcmpeq>:
 80006e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e8:	f7ff fff4 	bl	80006d4 <__aeabi_cdcmpeq>
 80006ec:	bf0c      	ite	eq
 80006ee:	2001      	moveq	r0, #1
 80006f0:	2000      	movne	r0, #0
 80006f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f6:	bf00      	nop

080006f8 <__aeabi_dcmplt>:
 80006f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006fc:	f7ff ffea 	bl	80006d4 <__aeabi_cdcmpeq>
 8000700:	bf34      	ite	cc
 8000702:	2001      	movcc	r0, #1
 8000704:	2000      	movcs	r0, #0
 8000706:	f85d fb08 	ldr.w	pc, [sp], #8
 800070a:	bf00      	nop

0800070c <__aeabi_dcmple>:
 800070c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000710:	f7ff ffe0 	bl	80006d4 <__aeabi_cdcmpeq>
 8000714:	bf94      	ite	ls
 8000716:	2001      	movls	r0, #1
 8000718:	2000      	movhi	r0, #0
 800071a:	f85d fb08 	ldr.w	pc, [sp], #8
 800071e:	bf00      	nop

08000720 <__aeabi_dcmpge>:
 8000720:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000724:	f7ff ffce 	bl	80006c4 <__aeabi_cdrcmple>
 8000728:	bf94      	ite	ls
 800072a:	2001      	movls	r0, #1
 800072c:	2000      	movhi	r0, #0
 800072e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000732:	bf00      	nop

08000734 <__aeabi_dcmpgt>:
 8000734:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000738:	f7ff ffc4 	bl	80006c4 <__aeabi_cdrcmple>
 800073c:	bf34      	ite	cc
 800073e:	2001      	movcc	r0, #1
 8000740:	2000      	movcs	r0, #0
 8000742:	f85d fb08 	ldr.w	pc, [sp], #8
 8000746:	bf00      	nop

08000748 <__aeabi_uldivmod>:
 8000748:	b953      	cbnz	r3, 8000760 <__aeabi_uldivmod+0x18>
 800074a:	b94a      	cbnz	r2, 8000760 <__aeabi_uldivmod+0x18>
 800074c:	2900      	cmp	r1, #0
 800074e:	bf08      	it	eq
 8000750:	2800      	cmpeq	r0, #0
 8000752:	bf1c      	itt	ne
 8000754:	f04f 31ff 	movne.w	r1, #4294967295
 8000758:	f04f 30ff 	movne.w	r0, #4294967295
 800075c:	f000 b96a 	b.w	8000a34 <__aeabi_idiv0>
 8000760:	f1ad 0c08 	sub.w	ip, sp, #8
 8000764:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000768:	f000 f806 	bl	8000778 <__udivmoddi4>
 800076c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000770:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000774:	b004      	add	sp, #16
 8000776:	4770      	bx	lr

08000778 <__udivmoddi4>:
 8000778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800077c:	9d08      	ldr	r5, [sp, #32]
 800077e:	460c      	mov	r4, r1
 8000780:	2b00      	cmp	r3, #0
 8000782:	d14e      	bne.n	8000822 <__udivmoddi4+0xaa>
 8000784:	4694      	mov	ip, r2
 8000786:	458c      	cmp	ip, r1
 8000788:	4686      	mov	lr, r0
 800078a:	fab2 f282 	clz	r2, r2
 800078e:	d962      	bls.n	8000856 <__udivmoddi4+0xde>
 8000790:	b14a      	cbz	r2, 80007a6 <__udivmoddi4+0x2e>
 8000792:	f1c2 0320 	rsb	r3, r2, #32
 8000796:	4091      	lsls	r1, r2
 8000798:	fa20 f303 	lsr.w	r3, r0, r3
 800079c:	fa0c fc02 	lsl.w	ip, ip, r2
 80007a0:	4319      	orrs	r1, r3
 80007a2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007aa:	fa1f f68c 	uxth.w	r6, ip
 80007ae:	fbb1 f4f7 	udiv	r4, r1, r7
 80007b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007b6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007be:	fb04 f106 	mul.w	r1, r4, r6
 80007c2:	4299      	cmp	r1, r3
 80007c4:	d90a      	bls.n	80007dc <__udivmoddi4+0x64>
 80007c6:	eb1c 0303 	adds.w	r3, ip, r3
 80007ca:	f104 30ff 	add.w	r0, r4, #4294967295
 80007ce:	f080 8112 	bcs.w	80009f6 <__udivmoddi4+0x27e>
 80007d2:	4299      	cmp	r1, r3
 80007d4:	f240 810f 	bls.w	80009f6 <__udivmoddi4+0x27e>
 80007d8:	3c02      	subs	r4, #2
 80007da:	4463      	add	r3, ip
 80007dc:	1a59      	subs	r1, r3, r1
 80007de:	fa1f f38e 	uxth.w	r3, lr
 80007e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80007e6:	fb07 1110 	mls	r1, r7, r0, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb00 f606 	mul.w	r6, r0, r6
 80007f2:	429e      	cmp	r6, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x94>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f100 31ff 	add.w	r1, r0, #4294967295
 80007fe:	f080 80fc 	bcs.w	80009fa <__udivmoddi4+0x282>
 8000802:	429e      	cmp	r6, r3
 8000804:	f240 80f9 	bls.w	80009fa <__udivmoddi4+0x282>
 8000808:	4463      	add	r3, ip
 800080a:	3802      	subs	r0, #2
 800080c:	1b9b      	subs	r3, r3, r6
 800080e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000812:	2100      	movs	r1, #0
 8000814:	b11d      	cbz	r5, 800081e <__udivmoddi4+0xa6>
 8000816:	40d3      	lsrs	r3, r2
 8000818:	2200      	movs	r2, #0
 800081a:	e9c5 3200 	strd	r3, r2, [r5]
 800081e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000822:	428b      	cmp	r3, r1
 8000824:	d905      	bls.n	8000832 <__udivmoddi4+0xba>
 8000826:	b10d      	cbz	r5, 800082c <__udivmoddi4+0xb4>
 8000828:	e9c5 0100 	strd	r0, r1, [r5]
 800082c:	2100      	movs	r1, #0
 800082e:	4608      	mov	r0, r1
 8000830:	e7f5      	b.n	800081e <__udivmoddi4+0xa6>
 8000832:	fab3 f183 	clz	r1, r3
 8000836:	2900      	cmp	r1, #0
 8000838:	d146      	bne.n	80008c8 <__udivmoddi4+0x150>
 800083a:	42a3      	cmp	r3, r4
 800083c:	d302      	bcc.n	8000844 <__udivmoddi4+0xcc>
 800083e:	4290      	cmp	r0, r2
 8000840:	f0c0 80f0 	bcc.w	8000a24 <__udivmoddi4+0x2ac>
 8000844:	1a86      	subs	r6, r0, r2
 8000846:	eb64 0303 	sbc.w	r3, r4, r3
 800084a:	2001      	movs	r0, #1
 800084c:	2d00      	cmp	r5, #0
 800084e:	d0e6      	beq.n	800081e <__udivmoddi4+0xa6>
 8000850:	e9c5 6300 	strd	r6, r3, [r5]
 8000854:	e7e3      	b.n	800081e <__udivmoddi4+0xa6>
 8000856:	2a00      	cmp	r2, #0
 8000858:	f040 8090 	bne.w	800097c <__udivmoddi4+0x204>
 800085c:	eba1 040c 	sub.w	r4, r1, ip
 8000860:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000864:	fa1f f78c 	uxth.w	r7, ip
 8000868:	2101      	movs	r1, #1
 800086a:	fbb4 f6f8 	udiv	r6, r4, r8
 800086e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000872:	fb08 4416 	mls	r4, r8, r6, r4
 8000876:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800087a:	fb07 f006 	mul.w	r0, r7, r6
 800087e:	4298      	cmp	r0, r3
 8000880:	d908      	bls.n	8000894 <__udivmoddi4+0x11c>
 8000882:	eb1c 0303 	adds.w	r3, ip, r3
 8000886:	f106 34ff 	add.w	r4, r6, #4294967295
 800088a:	d202      	bcs.n	8000892 <__udivmoddi4+0x11a>
 800088c:	4298      	cmp	r0, r3
 800088e:	f200 80cd 	bhi.w	8000a2c <__udivmoddi4+0x2b4>
 8000892:	4626      	mov	r6, r4
 8000894:	1a1c      	subs	r4, r3, r0
 8000896:	fa1f f38e 	uxth.w	r3, lr
 800089a:	fbb4 f0f8 	udiv	r0, r4, r8
 800089e:	fb08 4410 	mls	r4, r8, r0, r4
 80008a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008a6:	fb00 f707 	mul.w	r7, r0, r7
 80008aa:	429f      	cmp	r7, r3
 80008ac:	d908      	bls.n	80008c0 <__udivmoddi4+0x148>
 80008ae:	eb1c 0303 	adds.w	r3, ip, r3
 80008b2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008b6:	d202      	bcs.n	80008be <__udivmoddi4+0x146>
 80008b8:	429f      	cmp	r7, r3
 80008ba:	f200 80b0 	bhi.w	8000a1e <__udivmoddi4+0x2a6>
 80008be:	4620      	mov	r0, r4
 80008c0:	1bdb      	subs	r3, r3, r7
 80008c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008c6:	e7a5      	b.n	8000814 <__udivmoddi4+0x9c>
 80008c8:	f1c1 0620 	rsb	r6, r1, #32
 80008cc:	408b      	lsls	r3, r1
 80008ce:	fa22 f706 	lsr.w	r7, r2, r6
 80008d2:	431f      	orrs	r7, r3
 80008d4:	fa20 fc06 	lsr.w	ip, r0, r6
 80008d8:	fa04 f301 	lsl.w	r3, r4, r1
 80008dc:	ea43 030c 	orr.w	r3, r3, ip
 80008e0:	40f4      	lsrs	r4, r6
 80008e2:	fa00 f801 	lsl.w	r8, r0, r1
 80008e6:	0c38      	lsrs	r0, r7, #16
 80008e8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80008ec:	fbb4 fef0 	udiv	lr, r4, r0
 80008f0:	fa1f fc87 	uxth.w	ip, r7
 80008f4:	fb00 441e 	mls	r4, r0, lr, r4
 80008f8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008fc:	fb0e f90c 	mul.w	r9, lr, ip
 8000900:	45a1      	cmp	r9, r4
 8000902:	fa02 f201 	lsl.w	r2, r2, r1
 8000906:	d90a      	bls.n	800091e <__udivmoddi4+0x1a6>
 8000908:	193c      	adds	r4, r7, r4
 800090a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800090e:	f080 8084 	bcs.w	8000a1a <__udivmoddi4+0x2a2>
 8000912:	45a1      	cmp	r9, r4
 8000914:	f240 8081 	bls.w	8000a1a <__udivmoddi4+0x2a2>
 8000918:	f1ae 0e02 	sub.w	lr, lr, #2
 800091c:	443c      	add	r4, r7
 800091e:	eba4 0409 	sub.w	r4, r4, r9
 8000922:	fa1f f983 	uxth.w	r9, r3
 8000926:	fbb4 f3f0 	udiv	r3, r4, r0
 800092a:	fb00 4413 	mls	r4, r0, r3, r4
 800092e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000932:	fb03 fc0c 	mul.w	ip, r3, ip
 8000936:	45a4      	cmp	ip, r4
 8000938:	d907      	bls.n	800094a <__udivmoddi4+0x1d2>
 800093a:	193c      	adds	r4, r7, r4
 800093c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000940:	d267      	bcs.n	8000a12 <__udivmoddi4+0x29a>
 8000942:	45a4      	cmp	ip, r4
 8000944:	d965      	bls.n	8000a12 <__udivmoddi4+0x29a>
 8000946:	3b02      	subs	r3, #2
 8000948:	443c      	add	r4, r7
 800094a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800094e:	fba0 9302 	umull	r9, r3, r0, r2
 8000952:	eba4 040c 	sub.w	r4, r4, ip
 8000956:	429c      	cmp	r4, r3
 8000958:	46ce      	mov	lr, r9
 800095a:	469c      	mov	ip, r3
 800095c:	d351      	bcc.n	8000a02 <__udivmoddi4+0x28a>
 800095e:	d04e      	beq.n	80009fe <__udivmoddi4+0x286>
 8000960:	b155      	cbz	r5, 8000978 <__udivmoddi4+0x200>
 8000962:	ebb8 030e 	subs.w	r3, r8, lr
 8000966:	eb64 040c 	sbc.w	r4, r4, ip
 800096a:	fa04 f606 	lsl.w	r6, r4, r6
 800096e:	40cb      	lsrs	r3, r1
 8000970:	431e      	orrs	r6, r3
 8000972:	40cc      	lsrs	r4, r1
 8000974:	e9c5 6400 	strd	r6, r4, [r5]
 8000978:	2100      	movs	r1, #0
 800097a:	e750      	b.n	800081e <__udivmoddi4+0xa6>
 800097c:	f1c2 0320 	rsb	r3, r2, #32
 8000980:	fa20 f103 	lsr.w	r1, r0, r3
 8000984:	fa0c fc02 	lsl.w	ip, ip, r2
 8000988:	fa24 f303 	lsr.w	r3, r4, r3
 800098c:	4094      	lsls	r4, r2
 800098e:	430c      	orrs	r4, r1
 8000990:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000994:	fa00 fe02 	lsl.w	lr, r0, r2
 8000998:	fa1f f78c 	uxth.w	r7, ip
 800099c:	fbb3 f0f8 	udiv	r0, r3, r8
 80009a0:	fb08 3110 	mls	r1, r8, r0, r3
 80009a4:	0c23      	lsrs	r3, r4, #16
 80009a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009aa:	fb00 f107 	mul.w	r1, r0, r7
 80009ae:	4299      	cmp	r1, r3
 80009b0:	d908      	bls.n	80009c4 <__udivmoddi4+0x24c>
 80009b2:	eb1c 0303 	adds.w	r3, ip, r3
 80009b6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ba:	d22c      	bcs.n	8000a16 <__udivmoddi4+0x29e>
 80009bc:	4299      	cmp	r1, r3
 80009be:	d92a      	bls.n	8000a16 <__udivmoddi4+0x29e>
 80009c0:	3802      	subs	r0, #2
 80009c2:	4463      	add	r3, ip
 80009c4:	1a5b      	subs	r3, r3, r1
 80009c6:	b2a4      	uxth	r4, r4
 80009c8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009cc:	fb08 3311 	mls	r3, r8, r1, r3
 80009d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009d4:	fb01 f307 	mul.w	r3, r1, r7
 80009d8:	42a3      	cmp	r3, r4
 80009da:	d908      	bls.n	80009ee <__udivmoddi4+0x276>
 80009dc:	eb1c 0404 	adds.w	r4, ip, r4
 80009e0:	f101 36ff 	add.w	r6, r1, #4294967295
 80009e4:	d213      	bcs.n	8000a0e <__udivmoddi4+0x296>
 80009e6:	42a3      	cmp	r3, r4
 80009e8:	d911      	bls.n	8000a0e <__udivmoddi4+0x296>
 80009ea:	3902      	subs	r1, #2
 80009ec:	4464      	add	r4, ip
 80009ee:	1ae4      	subs	r4, r4, r3
 80009f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009f4:	e739      	b.n	800086a <__udivmoddi4+0xf2>
 80009f6:	4604      	mov	r4, r0
 80009f8:	e6f0      	b.n	80007dc <__udivmoddi4+0x64>
 80009fa:	4608      	mov	r0, r1
 80009fc:	e706      	b.n	800080c <__udivmoddi4+0x94>
 80009fe:	45c8      	cmp	r8, r9
 8000a00:	d2ae      	bcs.n	8000960 <__udivmoddi4+0x1e8>
 8000a02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a0a:	3801      	subs	r0, #1
 8000a0c:	e7a8      	b.n	8000960 <__udivmoddi4+0x1e8>
 8000a0e:	4631      	mov	r1, r6
 8000a10:	e7ed      	b.n	80009ee <__udivmoddi4+0x276>
 8000a12:	4603      	mov	r3, r0
 8000a14:	e799      	b.n	800094a <__udivmoddi4+0x1d2>
 8000a16:	4630      	mov	r0, r6
 8000a18:	e7d4      	b.n	80009c4 <__udivmoddi4+0x24c>
 8000a1a:	46d6      	mov	lr, sl
 8000a1c:	e77f      	b.n	800091e <__udivmoddi4+0x1a6>
 8000a1e:	4463      	add	r3, ip
 8000a20:	3802      	subs	r0, #2
 8000a22:	e74d      	b.n	80008c0 <__udivmoddi4+0x148>
 8000a24:	4606      	mov	r6, r0
 8000a26:	4623      	mov	r3, r4
 8000a28:	4608      	mov	r0, r1
 8000a2a:	e70f      	b.n	800084c <__udivmoddi4+0xd4>
 8000a2c:	3e02      	subs	r6, #2
 8000a2e:	4463      	add	r3, ip
 8000a30:	e730      	b.n	8000894 <__udivmoddi4+0x11c>
 8000a32:	bf00      	nop

08000a34 <__aeabi_idiv0>:
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
return 0;
 8000a4a:	2300      	movs	r3, #0
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000a56:	b480      	push	{r7}
 8000a58:	b083      	sub	sp, #12
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a6c:	b5b0      	push	{r4, r5, r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000a72:	4b09      	ldr	r3, [pc, #36]	@ (8000a98 <MX_FREERTOS_Init+0x2c>)
 8000a74:	1d3c      	adds	r4, r7, #4
 8000a76:	461d      	mov	r5, r3
 8000a78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a7c:	682b      	ldr	r3, [r5, #0]
 8000a7e:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	2100      	movs	r1, #0
 8000a84:	4618      	mov	r0, r3
 8000a86:	f006 f958 	bl	8006d3a <osThreadCreate>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	4a03      	ldr	r2, [pc, #12]	@ (8000a9c <MX_FREERTOS_Init+0x30>)
 8000a8e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000a90:	bf00      	nop
 8000a92:	3718      	adds	r7, #24
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bdb0      	pop	{r4, r5, r7, pc}
 8000a98:	08009be0 	.word	0x08009be0
 8000a9c:	20000088 	.word	0x20000088

08000aa0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f006 f96d 	bl	8006d88 <osDelay>
 8000aae:	e7fb      	b.n	8000aa8 <StartDefaultTask+0x8>

08000ab0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000ab6:	4b12      	ldr	r3, [pc, #72]	@ (8000b00 <MX_DMA_Init+0x50>)
 8000ab8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000aba:	4a11      	ldr	r2, [pc, #68]	@ (8000b00 <MX_DMA_Init+0x50>)
 8000abc:	f043 0304 	orr.w	r3, r3, #4
 8000ac0:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <MX_DMA_Init+0x50>)
 8000ac4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ace:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <MX_DMA_Init+0x50>)
 8000ad0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ad2:	4a0b      	ldr	r2, [pc, #44]	@ (8000b00 <MX_DMA_Init+0x50>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ada:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <MX_DMA_Init+0x50>)
 8000adc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2105      	movs	r1, #5
 8000aea:	200b      	movs	r0, #11
 8000aec:	f001 f9c4 	bl	8001e78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000af0:	200b      	movs	r0, #11
 8000af2:	f001 f9db 	bl	8001eac <HAL_NVIC_EnableIRQ>

}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40021000 	.word	0x40021000

08000b04 <LIDAR_start_scan_dma>:
    printf("Error code : %04X\r\n", h_LIDAR->health_stat.error_code);

    return 0;
}

int LIDAR_start_scan_dma(h_LIDAR_t *h_LIDAR) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
    uint8_t cmd_buff[CMD_BUFF_SIZE] = {CMD_BEGIN, CMD_START}; // Commande pour démarrer le scan
 8000b0c:	f246 03a5 	movw	r3, #24741	@ 0x60a5
 8000b10:	81bb      	strh	r3, [r7, #12]

    // Envoi de la commande
    if (h_LIDAR->serial_drv.it_transmit(cmd_buff, CMD_BUFF_SIZE) != 0) {
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	f107 020c 	add.w	r2, r7, #12
 8000b1a:	2102      	movs	r1, #2
 8000b1c:	4610      	mov	r0, r2
 8000b1e:	4798      	blx	r3
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d005      	beq.n	8000b32 <LIDAR_start_scan_dma+0x2e>
        printf("Erreur lors de l'envoi de la commande de démarrage du scan.\r\n");
 8000b26:	4810      	ldr	r0, [pc, #64]	@ (8000b68 <LIDAR_start_scan_dma+0x64>)
 8000b28:	f008 f9b0 	bl	8008e8c <puts>
        return -1;
 8000b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b30:	e015      	b.n	8000b5e <LIDAR_start_scan_dma+0x5a>
    }

    // Configurer la réception DMA en mode circulaire
    if (h_LIDAR->serial_drv.dma_receive(h_LIDAR->processing.receive_buff, DATA_BUFF_SIZE) != 0) {
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	691b      	ldr	r3, [r3, #16]
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	f502 625f 	add.w	r2, r2, #3568	@ 0xdf0
 8000b3c:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 8000b40:	4610      	mov	r0, r2
 8000b42:	4798      	blx	r3
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d005      	beq.n	8000b56 <LIDAR_start_scan_dma+0x52>
        printf("Erreur lors de la configuration de la réception DMA.\r\n");
 8000b4a:	4808      	ldr	r0, [pc, #32]	@ (8000b6c <LIDAR_start_scan_dma+0x68>)
 8000b4c:	f008 f99e 	bl	8008e8c <puts>
        return -2;
 8000b50:	f06f 0301 	mvn.w	r3, #1
 8000b54:	e003      	b.n	8000b5e <LIDAR_start_scan_dma+0x5a>
    }

    printf("Scan DMA demarre avec succes en mode circulaire.\r\n");
 8000b56:	4806      	ldr	r0, [pc, #24]	@ (8000b70 <LIDAR_start_scan_dma+0x6c>)
 8000b58:	f008 f998 	bl	8008e8c <puts>
    return 0;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	08009e24 	.word	0x08009e24
 8000b6c:	08009e64 	.word	0x08009e64
 8000b70:	08009e9c 	.word	0x08009e9c

08000b74 <LIDAR_process_frame>:

void LIDAR_process_frame(h_LIDAR_t *LIDAR, uint8_t *buff) {
 8000b74:	b480      	push	{r7}
 8000b76:	b08d      	sub	sp, #52	@ 0x34
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
    // uint8_t *buff = LIDAR->processing.frame_buff; // Buffer circulaire DMA
    int buffer_size = FRAME_BUFF_SIZE;              // Taille totale du buffer
 8000b7e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000b82:	627b      	str	r3, [r7, #36]	@ 0x24
    int start_idx = 0;                             // Indice de départ pour parcourir le buffer
 8000b84:	2300      	movs	r3, #0
 8000b86:	62fb      	str	r3, [r7, #44]	@ 0x2c




    while (start_idx < buffer_size) {
 8000b88:	e0eb      	b.n	8000d62 <LIDAR_process_frame+0x1ee>

        if (buff[start_idx] == 0xAA && buff[(start_idx + 1) % buffer_size] == 0x55) {
 8000b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b8c:	683a      	ldr	r2, [r7, #0]
 8000b8e:	4413      	add	r3, r2
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2baa      	cmp	r3, #170	@ 0xaa
 8000b94:	f040 80e2 	bne.w	8000d5c <LIDAR_process_frame+0x1e8>
 8000b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b9e:	fb93 f2f2 	sdiv	r2, r3, r2
 8000ba2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000ba4:	fb01 f202 	mul.w	r2, r1, r2
 8000ba8:	1a9b      	subs	r3, r3, r2
 8000baa:	461a      	mov	r2, r3
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	4413      	add	r3, r2
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b55      	cmp	r3, #85	@ 0x55
 8000bb4:	f040 80d2 	bne.w	8000d5c <LIDAR_process_frame+0x1e8>

        	//printf("Trame trouvée \r\n");

            // L'entête est trouvé, extraire les métadonnées
            int header_idx = start_idx; // Index actuel pour début de trame
 8000bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bba:	623b      	str	r3, [r7, #32]

            // Start Angle
            uint16_t FSA = (buff[(header_idx + 4) % buffer_size] |
 8000bbc:	6a3b      	ldr	r3, [r7, #32]
 8000bbe:	3304      	adds	r3, #4
 8000bc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bc2:	fb93 f2f2 	sdiv	r2, r3, r2
 8000bc6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000bc8:	fb01 f202 	mul.w	r2, r1, r2
 8000bcc:	1a9b      	subs	r3, r3, r2
 8000bce:	461a      	mov	r2, r3
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	4618      	mov	r0, r3
                            (buff[(header_idx + 5) % buffer_size] << 8)) >>
 8000bd8:	6a3b      	ldr	r3, [r7, #32]
 8000bda:	3305      	adds	r3, #5
 8000bdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bde:	fb93 f2f2 	sdiv	r2, r3, r2
 8000be2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000be4:	fb01 f202 	mul.w	r2, r1, r2
 8000be8:	1a9b      	subs	r3, r3, r2
 8000bea:	461a      	mov	r2, r3
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	4413      	add	r3, r2
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	021b      	lsls	r3, r3, #8
            uint16_t FSA = (buff[(header_idx + 4) % buffer_size] |
 8000bf4:	4303      	orrs	r3, r0
                            (buff[(header_idx + 5) % buffer_size] << 8)) >>
 8000bf6:	11db      	asrs	r3, r3, #7
            uint16_t FSA = (buff[(header_idx + 4) % buffer_size] |
 8000bf8:	83fb      	strh	r3, [r7, #30]
                           7; // Shift de 7 pour diviser de 64 + Shift à 1 pour avoir l'angle en degré

            // End Angle
            uint16_t LSA = (buff[(header_idx + 6) % buffer_size] |
 8000bfa:	6a3b      	ldr	r3, [r7, #32]
 8000bfc:	3306      	adds	r3, #6
 8000bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c00:	fb93 f2f2 	sdiv	r2, r3, r2
 8000c04:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000c06:	fb01 f202 	mul.w	r2, r1, r2
 8000c0a:	1a9b      	subs	r3, r3, r2
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	4413      	add	r3, r2
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4618      	mov	r0, r3
                            (buff[(header_idx + 7) % buffer_size] << 8)) >>
 8000c16:	6a3b      	ldr	r3, [r7, #32]
 8000c18:	3307      	adds	r3, #7
 8000c1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c1c:	fb93 f2f2 	sdiv	r2, r3, r2
 8000c20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000c22:	fb01 f202 	mul.w	r2, r1, r2
 8000c26:	1a9b      	subs	r3, r3, r2
 8000c28:	461a      	mov	r2, r3
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	021b      	lsls	r3, r3, #8
            uint16_t LSA = (buff[(header_idx + 6) % buffer_size] |
 8000c32:	4303      	orrs	r3, r0
                            (buff[(header_idx + 7) % buffer_size] << 8)) >>
 8000c34:	11db      	asrs	r3, r3, #7
            uint16_t LSA = (buff[(header_idx + 6) % buffer_size] |
 8000c36:	83bb      	strh	r3, [r7, #28]
                           7; // Shift de 7 pour diviser de 64 + Shift à 1 pour avoir l'angle en degré

            // Nombre de points
            uint8_t LSN = buff[(header_idx + 3) % buffer_size];
 8000c38:	6a3b      	ldr	r3, [r7, #32]
 8000c3a:	3303      	adds	r3, #3
 8000c3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c3e:	fb93 f2f2 	sdiv	r2, r3, r2
 8000c42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000c44:	fb01 f202 	mul.w	r2, r1, r2
 8000c48:	1a9b      	subs	r3, r3, r2
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	4413      	add	r3, r2
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	76fb      	strb	r3, [r7, #27]

            // Calcul de la taille totale attendue de la trame
            int frame_size = 10 + LSN * 2; // 10 octets d'entête + 2 octets par point
 8000c54:	7efb      	ldrb	r3, [r7, #27]
 8000c56:	3305      	adds	r3, #5
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	617b      	str	r3, [r7, #20]
            if (frame_size > buffer_size) {
 8000c5c:	697a      	ldr	r2, [r7, #20]
 8000c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c60:	429a      	cmp	r2, r3
 8000c62:	f300 8084 	bgt.w	8000d6e <LIDAR_process_frame+0x1fa>
//                printf("Erreur : Taille de la trame (%d) dépasse la taille du buffer (%d).\r\n", frame_size, buffer_size);
                break;
            }

            // Vérifier si toute la trame est contenue dans le buffer
            if ((start_idx + frame_size) % buffer_size < start_idx) {
 8000c66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c6e:	fb93 f2f2 	sdiv	r2, r3, r2
 8000c72:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000c74:	fb01 f202 	mul.w	r2, r1, r2
 8000c78:	1a9b      	subs	r3, r3, r2
 8000c7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	dc78      	bgt.n	8000d72 <LIDAR_process_frame+0x1fe>
//                continue;
//            }

            // Traiter les données de la trame

            for (int i = 0; i < LSN; i++) {
 8000c80:	2300      	movs	r3, #0
 8000c82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c84:	e061      	b.n	8000d4a <LIDAR_process_frame+0x1d6>
                // Lecture de la distance brute
                uint16_t Si = buff[(header_idx + 10 + i * 2) % buffer_size] |
 8000c86:	6a3b      	ldr	r3, [r7, #32]
 8000c88:	f103 020a 	add.w	r2, r3, #10
 8000c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	4413      	add	r3, r2
 8000c92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c94:	fb93 f2f2 	sdiv	r2, r3, r2
 8000c98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000c9a:	fb01 f202 	mul.w	r2, r1, r2
 8000c9e:	1a9b      	subs	r3, r3, r2
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	b21a      	sxth	r2, r3
                              (buff[(header_idx + 11 + i * 2) % buffer_size] << 8);
 8000caa:	6a3b      	ldr	r3, [r7, #32]
 8000cac:	f103 010b 	add.w	r1, r3, #11
 8000cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	440b      	add	r3, r1
 8000cb6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000cb8:	fb93 f1f1 	sdiv	r1, r3, r1
 8000cbc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000cbe:	fb00 f101 	mul.w	r1, r0, r1
 8000cc2:	1a5b      	subs	r3, r3, r1
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	440b      	add	r3, r1
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	021b      	lsls	r3, r3, #8
                uint16_t Si = buff[(header_idx + 10 + i * 2) % buffer_size] |
 8000cce:	b21b      	sxth	r3, r3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	b21b      	sxth	r3, r3
 8000cd4:	827b      	strh	r3, [r7, #18]


                int Di = Si / 4; // Distance réelle en mm
 8000cd6:	8a7b      	ldrh	r3, [r7, #18]
 8000cd8:	089b      	lsrs	r3, r3, #2
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	60fb      	str	r3, [r7, #12]

                // Calcul de l'angle
                int Ai = (i+1)*abs(LSA-FSA)/(LSN-1) + FSA;
 8000cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	8bb9      	ldrh	r1, [r7, #28]
 8000ce4:	8bfa      	ldrh	r2, [r7, #30]
 8000ce6:	1a8a      	subs	r2, r1, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	bfb8      	it	lt
 8000cec:	4252      	neglt	r2, r2
 8000cee:	fb03 f202 	mul.w	r2, r3, r2
 8000cf2:	7efb      	ldrb	r3, [r7, #27]
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	fb92 f2f3 	sdiv	r2, r2, r3
 8000cfa:	8bfb      	ldrh	r3, [r7, #30]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	60bb      	str	r3, [r7, #8]

                if (Ai < 0 || Ai >= 360) {
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	db1d      	blt.n	8000d42 <LIDAR_process_frame+0x1ce>
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000d0c:	da19      	bge.n	8000d42 <LIDAR_process_frame+0x1ce>
                    continue;
                }

                // Stockage dans le buffer des points
                if (Di < 150 || Di > 10000) {
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	2b95      	cmp	r3, #149	@ 0x95
 8000d12:	dd04      	ble.n	8000d1e <LIDAR_process_frame+0x1aa>
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	dd08      	ble.n	8000d30 <LIDAR_process_frame+0x1bc>
                	LIDAR->processing.point_buff[Ai] = 0; // Distance hors plage
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	f203 2312 	addw	r3, r3, #530	@ 0x212
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4413      	add	r3, r2
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	e009      	b.n	8000d44 <LIDAR_process_frame+0x1d0>
                } else {
                	LIDAR->processing.point_buff[Ai] = Di; // Distance valide
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	f203 2312 	addw	r3, r3, #530	@ 0x212
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	4413      	add	r3, r2
 8000d3c:	68fa      	ldr	r2, [r7, #12]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	e000      	b.n	8000d44 <LIDAR_process_frame+0x1d0>
                    continue;
 8000d42:	bf00      	nop
            for (int i = 0; i < LSN; i++) {
 8000d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d46:	3301      	adds	r3, #1
 8000d48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d4a:	7efb      	ldrb	r3, [r7, #27]
 8000d4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	db99      	blt.n	8000c86 <LIDAR_process_frame+0x112>
            }

//            printf("Trame traitee : FSA=%d, LSA=%d, Points=%d\r\n", FSA, LSA, LSN);

            // Avancer dans le buffer jusqu'à la fin de la trame traitée
            start_idx += frame_size;
 8000d52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	4413      	add	r3, r2
 8000d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (buff[start_idx] == 0xAA && buff[(start_idx + 1) % buffer_size] == 0x55) {
 8000d5a:	e002      	b.n	8000d62 <LIDAR_process_frame+0x1ee>
        } else {
            // Avancer d'un octet si aucune entête valide n'est trouvée
            start_idx++;
 8000d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d5e:	3301      	adds	r3, #1
 8000d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (start_idx < buffer_size) {
 8000d62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d66:	429a      	cmp	r2, r3
 8000d68:	f6ff af0f 	blt.w	8000b8a <LIDAR_process_frame+0x16>
        }
    }

}
 8000d6c:	e002      	b.n	8000d74 <LIDAR_process_frame+0x200>
                break;
 8000d6e:	bf00      	nop
 8000d70:	e000      	b.n	8000d74 <LIDAR_process_frame+0x200>
                break;
 8000d72:	bf00      	nop
}
 8000d74:	bf00      	nop
 8000d76:	3734      	adds	r7, #52	@ 0x34
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <calculer_distance_moyenne>:

// Permet de calculer la distance moyenen sur un tableau entre deux indices
int calculer_distance_moyenne(const int *distances, int debut, int fin) {
 8000d80:	b480      	push	{r7}
 8000d82:	b089      	sub	sp, #36	@ 0x24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
    int somme = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61fb      	str	r3, [r7, #28]
    int n = fin - debut + 1;
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	3301      	adds	r3, #1
 8000d98:	617b      	str	r3, [r7, #20]
    for (int i = debut; i <= fin; i++) {
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	61bb      	str	r3, [r7, #24]
 8000d9e:	e00a      	b.n	8000db6 <calculer_distance_moyenne+0x36>
        somme += distances[i];
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	68fa      	ldr	r2, [r7, #12]
 8000da6:	4413      	add	r3, r2
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	69fa      	ldr	r2, [r7, #28]
 8000dac:	4413      	add	r3, r2
 8000dae:	61fb      	str	r3, [r7, #28]
    for (int i = debut; i <= fin; i++) {
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	3301      	adds	r3, #1
 8000db4:	61bb      	str	r3, [r7, #24]
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	ddf0      	ble.n	8000da0 <calculer_distance_moyenne+0x20>
    }
    return somme / n;
 8000dbe:	69fa      	ldr	r2, [r7, #28]
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3724      	adds	r7, #36	@ 0x24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
	...

08000dd4 <find_clusters>:

/**
 * @brief Trouve les clusters dans les données du LIDAR.
 * @param LIDAR Pointeur vers la structure h_LIDAR_t.
 */
void find_clusters(h_LIDAR_t *LIDAR) {
 8000dd4:	b5b0      	push	{r4, r5, r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
    int *distances = LIDAR->processing.filtred_buff;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f503 53ec 	add.w	r3, r3, #7552	@ 0x1d80
 8000de2:	3310      	adds	r3, #16
 8000de4:	60bb      	str	r3, [r7, #8]
    int cluster_count = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
    int debut_cluster = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]

    // Parcours des distances pour identifier les clusters
    for (int i = 1; i < NB_DEGRES; i++) {
 8000dee:	2301      	movs	r3, #1
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	e05d      	b.n	8000eb0 <find_clusters+0xdc>
        // Si la différence dépasse le seuil, un cluster est terminé
        if (fabs(distances[i] - distances[i - 1]) > CLUSTER_SEUIL) {
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	68ba      	ldr	r2, [r7, #8]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000e04:	3b01      	subs	r3, #1
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	68b9      	ldr	r1, [r7, #8]
 8000e0a:	440b      	add	r3, r1
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fba7 	bl	8000564 <__aeabi_i2d>
 8000e16:	4602      	mov	r2, r0
 8000e18:	460b      	mov	r3, r1
 8000e1a:	4614      	mov	r4, r2
 8000e1c:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8000e20:	f04f 0200 	mov.w	r2, #0
 8000e24:	4b45      	ldr	r3, [pc, #276]	@ (8000f3c <find_clusters+0x168>)
 8000e26:	4620      	mov	r0, r4
 8000e28:	4629      	mov	r1, r5
 8000e2a:	f7ff fc83 	bl	8000734 <__aeabi_dcmpgt>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d03a      	beq.n	8000eaa <find_clusters+0xd6>
            // Calcul et stockage des informations du cluster
            if (cluster_count < MAX_CLUSTERS) {
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	2b63      	cmp	r3, #99	@ 0x63
 8000e38:	dc35      	bgt.n	8000ea6 <find_clusters+0xd2>
                LIDAR->processing.clusters[cluster_count].distance_moyenne = calculer_distance_moyenne(distances, debut_cluster, i - 1);
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	461a      	mov	r2, r3
 8000e40:	6939      	ldr	r1, [r7, #16]
 8000e42:	68b8      	ldr	r0, [r7, #8]
 8000e44:	f7ff ff9c 	bl	8000d80 <calculer_distance_moyenne>
 8000e48:	6879      	ldr	r1, [r7, #4]
 8000e4a:	697a      	ldr	r2, [r7, #20]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	4413      	add	r3, r2
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	440b      	add	r3, r1
 8000e56:	f503 530c 	add.w	r3, r3, #8960	@ 0x2300
 8000e5a:	3334      	adds	r3, #52	@ 0x34
 8000e5c:	6018      	str	r0, [r3, #0]
                LIDAR->processing.clusters[cluster_count].angle_moyen = (debut_cluster + i - 1) / 2;
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4413      	add	r3, r2
 8000e64:	3b01      	subs	r3, #1
 8000e66:	0fda      	lsrs	r2, r3, #31
 8000e68:	4413      	add	r3, r2
 8000e6a:	105b      	asrs	r3, r3, #1
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	697a      	ldr	r2, [r7, #20]
 8000e72:	4613      	mov	r3, r2
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	4413      	add	r3, r2
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	440b      	add	r3, r1
 8000e7c:	f503 530c 	add.w	r3, r3, #8960	@ 0x2300
 8000e80:	3330      	adds	r3, #48	@ 0x30
 8000e82:	6018      	str	r0, [r3, #0]
                LIDAR->processing.clusters[cluster_count].count = i - debut_cluster;
 8000e84:	68fa      	ldr	r2, [r7, #12]
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	1ad1      	subs	r1, r2, r3
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	697a      	ldr	r2, [r7, #20]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	4413      	add	r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	4403      	add	r3, r0
 8000e98:	f503 530c 	add.w	r3, r3, #8960	@ 0x2300
 8000e9c:	3338      	adds	r3, #56	@ 0x38
 8000e9e:	6019      	str	r1, [r3, #0]
                cluster_count++;
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	617b      	str	r3, [r7, #20]
            }
            debut_cluster = i; // Nouveau cluster
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	613b      	str	r3, [r7, #16]
    for (int i = 1; i < NB_DEGRES; i++) {
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	3301      	adds	r3, #1
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000eb6:	db9d      	blt.n	8000df4 <find_clusters+0x20>
        }
    }

    // Traitement du dernier cluster
    if (cluster_count < MAX_CLUSTERS) {
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	2b63      	cmp	r3, #99	@ 0x63
 8000ebc:	dc33      	bgt.n	8000f26 <find_clusters+0x152>
        LIDAR->processing.clusters[cluster_count].distance_moyenne = calculer_distance_moyenne(distances, debut_cluster, NB_DEGRES - 1);
 8000ebe:	f240 1267 	movw	r2, #359	@ 0x167
 8000ec2:	6939      	ldr	r1, [r7, #16]
 8000ec4:	68b8      	ldr	r0, [r7, #8]
 8000ec6:	f7ff ff5b 	bl	8000d80 <calculer_distance_moyenne>
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	697a      	ldr	r2, [r7, #20]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	4413      	add	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	f503 530c 	add.w	r3, r3, #8960	@ 0x2300
 8000edc:	3334      	adds	r3, #52	@ 0x34
 8000ede:	6018      	str	r0, [r3, #0]
        LIDAR->processing.clusters[cluster_count].angle_moyen = (debut_cluster + NB_DEGRES - 1) / 2;
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	f203 1367 	addw	r3, r3, #359	@ 0x167
 8000ee6:	0fda      	lsrs	r2, r3, #31
 8000ee8:	4413      	add	r3, r2
 8000eea:	105b      	asrs	r3, r3, #1
 8000eec:	4618      	mov	r0, r3
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	697a      	ldr	r2, [r7, #20]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	4413      	add	r3, r2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	440b      	add	r3, r1
 8000efc:	f503 530c 	add.w	r3, r3, #8960	@ 0x2300
 8000f00:	3330      	adds	r3, #48	@ 0x30
 8000f02:	6018      	str	r0, [r3, #0]
        LIDAR->processing.clusters[cluster_count].count = NB_DEGRES - debut_cluster;
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	f5c3 71b4 	rsb	r1, r3, #360	@ 0x168
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	697a      	ldr	r2, [r7, #20]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	4413      	add	r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4403      	add	r3, r0
 8000f18:	f503 530c 	add.w	r3, r3, #8960	@ 0x2300
 8000f1c:	3338      	adds	r3, #56	@ 0x38
 8000f1e:	6019      	str	r1, [r3, #0]
        cluster_count++;
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	3301      	adds	r3, #1
 8000f24:	617b      	str	r3, [r7, #20]
    }

    // Mise à jour du compteur de clusters
    LIDAR->processing.cluster_cnt = cluster_count;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	f8c2 37e0 	str.w	r3, [r2, #2016]	@ 0x7e0
}
 8000f34:	bf00      	nop
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f3c:	403e0000 	.word	0x403e0000

08000f40 <medianFilter>:

//Applique un filtre médian aux données du LIDAR.
void medianFilter(h_LIDAR_t *LIDAR) {
 8000f40:	b480      	push	{r7}
 8000f42:	b093      	sub	sp, #76	@ 0x4c
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
    int *signal = LIDAR->processing.point_buff;     // Signal brut
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f503 6305 	add.w	r3, r3, #2128	@ 0x850
 8000f4e:	633b      	str	r3, [r7, #48]	@ 0x30
    int *filtred = LIDAR->processing.filtred_buff; // Signal filtré
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f503 53ec 	add.w	r3, r3, #7552	@ 0x1d80
 8000f56:	3310      	adds	r3, #16
 8000f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int signal_length = NB_DEGRES;
 8000f5a:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8000f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    int window[5];
    int middle = 2; // La médiane est au centre d'une fenêtre de taille 5
 8000f60:	2302      	movs	r3, #2
 8000f62:	627b      	str	r3, [r7, #36]	@ 0x24

    for (int i = 0; i < signal_length; i++) {
 8000f64:	2300      	movs	r3, #0
 8000f66:	647b      	str	r3, [r7, #68]	@ 0x44
 8000f68:	e06e      	b.n	8001048 <medianFilter+0x108>
        // Construire la fenêtre de voisinage
        for (int j = 0; j < 5; j++) {
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8000f6e:	e01f      	b.n	8000fb0 <medianFilter+0x70>
            int index = i - middle + j;
 8000f70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000f78:	4413      	add	r3, r2
 8000f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            // Gérer les bords du signal
            if (index < 0) index = 0;
 8000f7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	da01      	bge.n	8000f86 <medianFilter+0x46>
 8000f82:	2300      	movs	r3, #0
 8000f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
            if (index >= signal_length) index = signal_length - 1;
 8000f86:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	db02      	blt.n	8000f94 <medianFilter+0x54>
 8000f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f90:	3b01      	subs	r3, #1
 8000f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
            window[j] = signal[index];
 8000f94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f9a:	4413      	add	r3, r2
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	3348      	adds	r3, #72	@ 0x48
 8000fa4:	443b      	add	r3, r7
 8000fa6:	f843 2c3c 	str.w	r2, [r3, #-60]
        for (int j = 0; j < 5; j++) {
 8000faa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fac:	3301      	adds	r3, #1
 8000fae:	643b      	str	r3, [r7, #64]	@ 0x40
 8000fb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fb2:	2b04      	cmp	r3, #4
 8000fb4:	dddc      	ble.n	8000f70 <medianFilter+0x30>
        }

        // Trier la fenêtre pour extraire la médiane
        for (int j = 0; j < 5; j++) {
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000fba:	e034      	b.n	8001026 <medianFilter+0xe6>
            for (int k = j + 1; k < 5; k++) {
 8000fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8000fc2:	e02a      	b.n	800101a <medianFilter+0xda>
                if (window[j] > window[k]) {
 8000fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	3348      	adds	r3, #72	@ 0x48
 8000fca:	443b      	add	r3, r7
 8000fcc:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8000fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	3348      	adds	r3, #72	@ 0x48
 8000fd6:	443b      	add	r3, r7
 8000fd8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	dd19      	ble.n	8001014 <medianFilter+0xd4>
                    int temp = window[j];
 8000fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	3348      	adds	r3, #72	@ 0x48
 8000fe6:	443b      	add	r3, r7
 8000fe8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8000fec:	623b      	str	r3, [r7, #32]
                    window[j] = window[k];
 8000fee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	3348      	adds	r3, #72	@ 0x48
 8000ff4:	443b      	add	r3, r7
 8000ff6:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8000ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	3348      	adds	r3, #72	@ 0x48
 8001000:	443b      	add	r3, r7
 8001002:	f843 2c3c 	str.w	r2, [r3, #-60]
                    window[k] = temp;
 8001006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	3348      	adds	r3, #72	@ 0x48
 800100c:	443b      	add	r3, r7
 800100e:	6a3a      	ldr	r2, [r7, #32]
 8001010:	f843 2c3c 	str.w	r2, [r3, #-60]
            for (int k = j + 1; k < 5; k++) {
 8001014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001016:	3301      	adds	r3, #1
 8001018:	637b      	str	r3, [r7, #52]	@ 0x34
 800101a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800101c:	2b04      	cmp	r3, #4
 800101e:	ddd1      	ble.n	8000fc4 <medianFilter+0x84>
        for (int j = 0; j < 5; j++) {
 8001020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001022:	3301      	adds	r3, #1
 8001024:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001028:	2b04      	cmp	r3, #4
 800102a:	ddc7      	ble.n	8000fbc <medianFilter+0x7c>
                }
            }
        }

        // Stocker la médiane dans le tableau filtré
        filtred[i] = window[middle];
 800102c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001032:	441a      	add	r2, r3
 8001034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	3348      	adds	r3, #72	@ 0x48
 800103a:	443b      	add	r3, r7
 800103c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001040:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < signal_length; i++) {
 8001042:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001044:	3301      	adds	r3, #1
 8001046:	647b      	str	r3, [r7, #68]	@ 0x44
 8001048:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800104a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800104c:	429a      	cmp	r2, r3
 800104e:	db8c      	blt.n	8000f6a <medianFilter+0x2a>
    }
}
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	374c      	adds	r7, #76	@ 0x4c
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	@ 0x28
 8001064:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
 8001074:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001076:	4b2b      	ldr	r3, [pc, #172]	@ (8001124 <MX_GPIO_Init+0xc4>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107a:	4a2a      	ldr	r2, [pc, #168]	@ (8001124 <MX_GPIO_Init+0xc4>)
 800107c:	f043 0304 	orr.w	r3, r3, #4
 8001080:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001082:	4b28      	ldr	r3, [pc, #160]	@ (8001124 <MX_GPIO_Init+0xc4>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800108e:	4b25      	ldr	r3, [pc, #148]	@ (8001124 <MX_GPIO_Init+0xc4>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001092:	4a24      	ldr	r2, [pc, #144]	@ (8001124 <MX_GPIO_Init+0xc4>)
 8001094:	f043 0320 	orr.w	r3, r3, #32
 8001098:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800109a:	4b22      	ldr	r3, [pc, #136]	@ (8001124 <MX_GPIO_Init+0xc4>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109e:	f003 0320 	and.w	r3, r3, #32
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001124 <MX_GPIO_Init+0xc4>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010aa:	4a1e      	ldr	r2, [pc, #120]	@ (8001124 <MX_GPIO_Init+0xc4>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001124 <MX_GPIO_Init+0xc4>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010be:	4b19      	ldr	r3, [pc, #100]	@ (8001124 <MX_GPIO_Init+0xc4>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c2:	4a18      	ldr	r2, [pc, #96]	@ (8001124 <MX_GPIO_Init+0xc4>)
 80010c4:	f043 0302 	orr.w	r3, r3, #2
 80010c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ca:	4b16      	ldr	r3, [pc, #88]	@ (8001124 <MX_GPIO_Init+0xc4>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2120      	movs	r1, #32
 80010da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010de:	f001 fba7 	bl	8002830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010e8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	480b      	ldr	r0, [pc, #44]	@ (8001128 <MX_GPIO_Init+0xc8>)
 80010fa:	f001 fa17 	bl	800252c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010fe:	2320      	movs	r3, #32
 8001100:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001102:	2301      	movs	r3, #1
 8001104:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4619      	mov	r1, r3
 8001114:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001118:	f001 fa08 	bl	800252c <HAL_GPIO_Init>

}
 800111c:	bf00      	nop
 800111e:	3728      	adds	r7, #40	@ 0x28
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40021000 	.word	0x40021000
 8001128:	48000800 	.word	0x48000800

0800112c <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */

int __io_putchar(int ch) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001134:	1d39      	adds	r1, r7, #4
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
 800113a:	2201      	movs	r2, #1
 800113c:	4803      	ldr	r0, [pc, #12]	@ (800114c <__io_putchar+0x20>)
 800113e:	f002 ff09 	bl	8003f54 <HAL_UART_Transmit>
	return ch;
 8001142:	687b      	ldr	r3, [r7, #4]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20002960 	.word	0x20002960

08001150 <uart_transmit>:

// Définir les fonctions UART pour le mode polling
int uart_transmit(uint8_t *p_data, uint16_t size) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	807b      	strh	r3, [r7, #2]
    return HAL_UART_Transmit(&huart4, p_data, size, HAL_MAX_DELAY);
 800115c:	887a      	ldrh	r2, [r7, #2]
 800115e:	f04f 33ff 	mov.w	r3, #4294967295
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	4803      	ldr	r0, [pc, #12]	@ (8001174 <uart_transmit+0x24>)
 8001166:	f002 fef5 	bl	8003f54 <HAL_UART_Transmit>
 800116a:	4603      	mov	r3, r0
}
 800116c:	4618      	mov	r0, r3
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	200028cc 	.word	0x200028cc

08001178 <uart_poll_receive>:

int uart_poll_receive(uint8_t *p_data, uint16_t size) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	807b      	strh	r3, [r7, #2]
    return HAL_UART_Receive(&huart4, p_data, size, 100);
 8001184:	887a      	ldrh	r2, [r7, #2]
 8001186:	2364      	movs	r3, #100	@ 0x64
 8001188:	6879      	ldr	r1, [r7, #4]
 800118a:	4804      	ldr	r0, [pc, #16]	@ (800119c <uart_poll_receive+0x24>)
 800118c:	f002 ff70 	bl	8004070 <HAL_UART_Receive>
 8001190:	4603      	mov	r3, r0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200028cc 	.word	0x200028cc

080011a0 <uart_it_receive>:

int uart_it_receive(uint8_t *p_data, uint16_t size){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive_IT(&huart4, p_data, size);
 80011ac:	887b      	ldrh	r3, [r7, #2]
 80011ae:	461a      	mov	r2, r3
 80011b0:	6879      	ldr	r1, [r7, #4]
 80011b2:	4804      	ldr	r0, [pc, #16]	@ (80011c4 <uart_it_receive+0x24>)
 80011b4:	f003 f8b8 	bl	8004328 <HAL_UART_Receive_IT>
	return 0;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200028cc 	.word	0x200028cc

080011c8 <uart_it_transmit>:

int uart_it_transmit(uint8_t *p_data, uint16_t size){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_IT(&huart4, p_data, size);
 80011d4:	887b      	ldrh	r3, [r7, #2]
 80011d6:	461a      	mov	r2, r3
 80011d8:	6879      	ldr	r1, [r7, #4]
 80011da:	4804      	ldr	r0, [pc, #16]	@ (80011ec <uart_it_transmit+0x24>)
 80011dc:	f003 f810 	bl	8004200 <HAL_UART_Transmit_IT>
	return 0;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200028cc 	.word	0x200028cc

080011f0 <uart_dma_receive>:

int uart_dma_receive(uint8_t *p_data, uint16_t size){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	460b      	mov	r3, r1
 80011fa:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive_DMA(&huart4, p_data, size);
 80011fc:	887b      	ldrh	r3, [r7, #2]
 80011fe:	461a      	mov	r2, r3
 8001200:	6879      	ldr	r1, [r7, #4]
 8001202:	4804      	ldr	r0, [pc, #16]	@ (8001214 <uart_dma_receive+0x24>)
 8001204:	f003 f95c 	bl	80044c0 <HAL_UART_Receive_DMA>
	return 0;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200028cc 	.word	0x200028cc

08001218 <uart_dma_transmit>:

int uart_dma_transmit(uint8_t *p_data, uint16_t size){
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_DMA(&huart4, p_data, size);
 8001224:	887b      	ldrh	r3, [r7, #2]
 8001226:	461a      	mov	r2, r3
 8001228:	6879      	ldr	r1, [r7, #4]
 800122a:	4804      	ldr	r0, [pc, #16]	@ (800123c <uart_dma_transmit+0x24>)
 800122c:	f003 f8c8 	bl	80043c0 <HAL_UART_Transmit_DMA>
	return 0;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200028cc 	.word	0x200028cc

08001240 <counter>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void counter (void * pvParameters){
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	char* s = pcTaskGetName(xTaskGetCurrentTaskHandle());
 8001248:	f006 ff00 	bl	800804c <xTaskGetCurrentTaskHandle>
 800124c:	4603      	mov	r3, r0
 800124e:	4618      	mov	r0, r3
 8001250:	f006 fbb8 	bl	80079c4 <pcTaskGetName>
 8001254:	60b8      	str	r0, [r7, #8]

//	vTaskDelay(500);

	while (1) {

		printf("Je suis la tache %s et je m'endors pour %d periodes\r\n", s, DUREEP);
 8001256:	f247 5230 	movw	r2, #30000	@ 0x7530
 800125a:	68b9      	ldr	r1, [r7, #8]
 800125c:	4818      	ldr	r0, [pc, #96]	@ (80012c0 <counter+0x80>)
 800125e:	f007 fda5 	bl	8008dac <iprintf>

		vTaskDelay(DUREEP);
 8001262:	f247 5030 	movw	r0, #30000	@ 0x7530
 8001266:	f006 fa81 	bl	800776c <vTaskDelay>

		printf("LIDAR Scan Results (Angle: Distance in mm):\r\n");
 800126a:	4816      	ldr	r0, [pc, #88]	@ (80012c4 <counter+0x84>)
 800126c:	f007 fe0e 	bl	8008e8c <puts>
	    for (int i = 0; i < 360; i++) {
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	e01c      	b.n	80012b0 <counter+0x70>
	    		if (lidar.processing.point_buff[i] >= 0) { // Afficher uniquement les valeurs valides
 8001276:	4a14      	ldr	r2, [pc, #80]	@ (80012c8 <counter+0x88>)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f203 2312 	addw	r3, r3, #530	@ 0x212
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	2b00      	cmp	r3, #0
 8001286:	db0c      	blt.n	80012a2 <counter+0x62>
	    			printf("Angle %3d: %4d mm\r\n", i, lidar.processing.point_buff[i]);
 8001288:	4a0f      	ldr	r2, [pc, #60]	@ (80012c8 <counter+0x88>)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f203 2312 	addw	r3, r3, #530	@ 0x212
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	461a      	mov	r2, r3
 8001298:	68f9      	ldr	r1, [r7, #12]
 800129a:	480c      	ldr	r0, [pc, #48]	@ (80012cc <counter+0x8c>)
 800129c:	f007 fd86 	bl	8008dac <iprintf>
 80012a0:	e003      	b.n	80012aa <counter+0x6a>
	    		} else {
	    			printf("Angle %3d: --- mm (No Data)\r\n", i);
 80012a2:	68f9      	ldr	r1, [r7, #12]
 80012a4:	480a      	ldr	r0, [pc, #40]	@ (80012d0 <counter+0x90>)
 80012a6:	f007 fd81 	bl	8008dac <iprintf>
	    for (int i = 0; i < 360; i++) {
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	3301      	adds	r3, #1
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 80012b6:	dbde      	blt.n	8001276 <counter+0x36>
	    		}
	    }

	    printf("\n");
 80012b8:	200a      	movs	r0, #10
 80012ba:	f007 fd89 	bl	8008dd0 <putchar>
		printf("Je suis la tache %s et je m'endors pour %d periodes\r\n", s, DUREEP);
 80012be:	e7ca      	b.n	8001256 <counter+0x16>
 80012c0:	08009ed0 	.word	0x08009ed0
 80012c4:	08009f08 	.word	0x08009f08
 80012c8:	2000008c 	.word	0x2000008c
 80012cc:	08009f38 	.word	0x08009f38
 80012d0:	08009f4c 	.word	0x08009f4c

080012d4 <lidarTake>:


		}
	}

void lidarTake (void * pvParameters){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	char* s = pcTaskGetName(xTaskGetCurrentTaskHandle());
 80012dc:	f006 feb6 	bl	800804c <xTaskGetCurrentTaskHandle>
 80012e0:	4603      	mov	r3, r0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f006 fb6e 	bl	80079c4 <pcTaskGetName>
 80012e8:	60f8      	str	r0, [r7, #12]
	uint8_t* buff;

	  if (LIDAR_start_scan_dma(&lidar) == 0) {
 80012ea:	4814      	ldr	r0, [pc, #80]	@ (800133c <lidarTake+0x68>)
 80012ec:	f7ff fc0a 	bl	8000b04 <LIDAR_start_scan_dma>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d103      	bne.n	80012fe <lidarTake+0x2a>
	      printf("LIDAR scanning started successfully.\r\n");
 80012f6:	4812      	ldr	r0, [pc, #72]	@ (8001340 <lidarTake+0x6c>)
 80012f8:	f007 fdc8 	bl	8008e8c <puts>
 80012fc:	e002      	b.n	8001304 <lidarTake+0x30>
	  } else {
	      printf("Failed to start LIDAR scanning.\r\n");
 80012fe:	4811      	ldr	r0, [pc, #68]	@ (8001344 <lidarTake+0x70>)
 8001300:	f007 fdc4 	bl	8008e8c <puts>

	for(;;){


		// Attente du Semahore de half buffer
		xSemaphoreTake(semb_halfCllbck, portMAX_DELAY);
 8001304:	4b10      	ldr	r3, [pc, #64]	@ (8001348 <lidarTake+0x74>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f04f 31ff 	mov.w	r1, #4294967295
 800130c:	4618      	mov	r0, r3
 800130e:	f005 ff57 	bl	80071c0 <xQueueSemaphoreTake>

		// Pointeur sur le début des données
		buff = lidar.processing.receive_buff;
 8001312:	4b0e      	ldr	r3, [pc, #56]	@ (800134c <lidarTake+0x78>)
 8001314:	60bb      	str	r3, [r7, #8]
		LIDAR_process_frame(&lidar, buff);
 8001316:	68b9      	ldr	r1, [r7, #8]
 8001318:	4808      	ldr	r0, [pc, #32]	@ (800133c <lidarTake+0x68>)
 800131a:	f7ff fc2b 	bl	8000b74 <LIDAR_process_frame>


		// Attente du semaphore du complete buffer
		xSemaphoreTake(semb_cpltCllbck, portMAX_DELAY);
 800131e:	4b0c      	ldr	r3, [pc, #48]	@ (8001350 <lidarTake+0x7c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f04f 31ff 	mov.w	r1, #4294967295
 8001326:	4618      	mov	r0, r3
 8001328:	f005 ff4a 	bl	80071c0 <xQueueSemaphoreTake>

		// Pointeur sur la moitié des données
		buff = &lidar.processing.receive_buff[FRAME_BUFF_SIZE];
 800132c:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <lidarTake+0x80>)
 800132e:	60bb      	str	r3, [r7, #8]
		LIDAR_process_frame(&lidar, buff);
 8001330:	68b9      	ldr	r1, [r7, #8]
 8001332:	4802      	ldr	r0, [pc, #8]	@ (800133c <lidarTake+0x68>)
 8001334:	f7ff fc1e 	bl	8000b74 <LIDAR_process_frame>
		xSemaphoreTake(semb_halfCllbck, portMAX_DELAY);
 8001338:	bf00      	nop
 800133a:	e7e3      	b.n	8001304 <lidarTake+0x30>
 800133c:	2000008c 	.word	0x2000008c
 8001340:	08009f6c 	.word	0x08009f6c
 8001344:	08009f94 	.word	0x08009f94
 8001348:	20002874 	.word	0x20002874
 800134c:	20000e7c 	.word	0x20000e7c
 8001350:	20002878 	.word	0x20002878
 8001354:	2000164c 	.word	0x2000164c

08001358 <lidarprocess>:


		}
}

void lidarprocess (void * pvParameters){
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	char* s = pcTaskGetName(xTaskGetCurrentTaskHandle());
 8001360:	f006 fe74 	bl	800804c <xTaskGetCurrentTaskHandle>
 8001364:	4603      	mov	r3, r0
 8001366:	4618      	mov	r0, r3
 8001368:	f006 fb2c 	bl	80079c4 <pcTaskGetName>
 800136c:	60f8      	str	r0, [r7, #12]

	for(;;){
		printf("Je suis la tache %s et je m'endors pour %d periodes\r\n", s, DUREE);
 800136e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001372:	68f9      	ldr	r1, [r7, #12]
 8001374:	480b      	ldr	r0, [pc, #44]	@ (80013a4 <lidarprocess+0x4c>)
 8001376:	f007 fd19 	bl	8008dac <iprintf>

	    medianFilter(&lidar);
 800137a:	480b      	ldr	r0, [pc, #44]	@ (80013a8 <lidarprocess+0x50>)
 800137c:	f7ff fde0 	bl	8000f40 <medianFilter>

	    find_clusters(&lidar);
 8001380:	4809      	ldr	r0, [pc, #36]	@ (80013a8 <lidarprocess+0x50>)
 8001382:	f7ff fd27 	bl	8000dd4 <find_clusters>

	    printf("Clusters Maison trouvees : %d \r\n", lidar.processing.cluster_cnt);
 8001386:	4b08      	ldr	r3, [pc, #32]	@ (80013a8 <lidarprocess+0x50>)
 8001388:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800138c:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	@ 0x7e0
 8001390:	4619      	mov	r1, r3
 8001392:	4806      	ldr	r0, [pc, #24]	@ (80013ac <lidarprocess+0x54>)
 8001394:	f007 fd0a 	bl	8008dac <iprintf>
//
//	    kMeansClustering(&lidar);
//
//	    printf("Clusters K-Means trouvees : %d \r\n", lidar.processing.cluster_cnt);

	    vTaskDelay(DUREE);
 8001398:	f241 3088 	movw	r0, #5000	@ 0x1388
 800139c:	f006 f9e6 	bl	800776c <vTaskDelay>
		printf("Je suis la tache %s et je m'endors pour %d periodes\r\n", s, DUREE);
 80013a0:	bf00      	nop
 80013a2:	e7e4      	b.n	800136e <lidarprocess+0x16>
 80013a4:	08009ed0 	.word	0x08009ed0
 80013a8:	2000008c 	.word	0x2000008c
 80013ac:	08009fb8 	.word	0x08009fb8

080013b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	BaseType_t xReturned;
	TaskHandle_t xHandle1 = NULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60bb      	str	r3, [r7, #8]
	TaskHandle_t xHandle2 = NULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	607b      	str	r3, [r7, #4]
	TaskHandle_t xHandle3 = NULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c2:	f000 fc6a 	bl	8001c9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013c6:	f000 f89f 	bl	8001508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ca:	f7ff fe49 	bl	8001060 <MX_GPIO_Init>
  MX_DMA_Init();
 80013ce:	f7ff fb6f 	bl	8000ab0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80013d2:	f000 fb1f 	bl	8001a14 <MX_USART2_UART_Init>
  MX_UART4_Init();
 80013d6:	f000 fad1 	bl	800197c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  printf("=================== DRIVER LIDAR =================== \r\n");
 80013da:	4839      	ldr	r0, [pc, #228]	@ (80014c0 <main+0x110>)
 80013dc:	f007 fd56 	bl	8008e8c <puts>
  /*
   * Création des vérifications du lidar.
   *
   */

  semb_cpltCllbck = xSemaphoreCreateBinary();
 80013e0:	2203      	movs	r2, #3
 80013e2:	2100      	movs	r1, #0
 80013e4:	2001      	movs	r0, #1
 80013e6:	f005 fe01 	bl	8006fec <xQueueGenericCreate>
 80013ea:	4603      	mov	r3, r0
 80013ec:	4a35      	ldr	r2, [pc, #212]	@ (80014c4 <main+0x114>)
 80013ee:	6013      	str	r3, [r2, #0]
  semb_halfCllbck = xSemaphoreCreateBinary();
 80013f0:	2203      	movs	r2, #3
 80013f2:	2100      	movs	r1, #0
 80013f4:	2001      	movs	r0, #1
 80013f6:	f005 fdf9 	bl	8006fec <xQueueGenericCreate>
 80013fa:	4603      	mov	r3, r0
 80013fc:	4a32      	ldr	r2, [pc, #200]	@ (80014c8 <main+0x118>)
 80013fe:	6013      	str	r3, [r2, #0]

	  // Déclaration et configuration de la structure h_LIDAR

	  lidar.serial_drv.transmit = uart_transmit;
 8001400:	4b32      	ldr	r3, [pc, #200]	@ (80014cc <main+0x11c>)
 8001402:	4a33      	ldr	r2, [pc, #204]	@ (80014d0 <main+0x120>)
 8001404:	601a      	str	r2, [r3, #0]
	  lidar.serial_drv.poll_receive = uart_poll_receive;
 8001406:	4b31      	ldr	r3, [pc, #196]	@ (80014cc <main+0x11c>)
 8001408:	4a32      	ldr	r2, [pc, #200]	@ (80014d4 <main+0x124>)
 800140a:	605a      	str	r2, [r3, #4]

	  lidar.serial_drv.it_receive=uart_it_receive;
 800140c:	4b2f      	ldr	r3, [pc, #188]	@ (80014cc <main+0x11c>)
 800140e:	4a32      	ldr	r2, [pc, #200]	@ (80014d8 <main+0x128>)
 8001410:	609a      	str	r2, [r3, #8]
	  lidar.serial_drv.it_transmit=uart_it_transmit;
 8001412:	4b2e      	ldr	r3, [pc, #184]	@ (80014cc <main+0x11c>)
 8001414:	4a31      	ldr	r2, [pc, #196]	@ (80014dc <main+0x12c>)
 8001416:	60da      	str	r2, [r3, #12]

	  lidar.serial_drv.dma_receive=uart_dma_receive;
 8001418:	4b2c      	ldr	r3, [pc, #176]	@ (80014cc <main+0x11c>)
 800141a:	4a31      	ldr	r2, [pc, #196]	@ (80014e0 <main+0x130>)
 800141c:	611a      	str	r2, [r3, #16]
	  lidar.serial_drv.dma_transmit=uart_dma_transmit;
 800141e:	4b2b      	ldr	r3, [pc, #172]	@ (80014cc <main+0x11c>)
 8001420:	4a30      	ldr	r2, [pc, #192]	@ (80014e4 <main+0x134>)
 8001422:	615a      	str	r2, [r3, #20]

	xReturned = xTaskCreate(
 8001424:	f107 0308 	add.w	r3, r7, #8
 8001428:	9301      	str	r3, [sp, #4]
 800142a:	2302      	movs	r3, #2
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	2300      	movs	r3, #0
 8001430:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001434:	492c      	ldr	r1, [pc, #176]	@ (80014e8 <main+0x138>)
 8001436:	482d      	ldr	r0, [pc, #180]	@ (80014ec <main+0x13c>)
 8001438:	f006 f852 	bl	80074e0 <xTaskCreate>
 800143c:	60f8      	str	r0, [r7, #12]
			STACK_SIZE, // Stack size in words, not bytes.
			(void *) NULL, // Parameter passed into the task.
			2,// Priority at which the task is created.
			&xHandle1 ); // Used to pass out the created task's handle.

	if (xReturned != pdPASS)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d004      	beq.n	800144e <main+0x9e>
	{
		printf("Error creating Task\r\n");
 8001444:	482a      	ldr	r0, [pc, #168]	@ (80014f0 <main+0x140>)
 8001446:	f007 fd21 	bl	8008e8c <puts>
		Error_Handler();
 800144a:	f000 f90b 	bl	8001664 <Error_Handler>
	}

	printf("Tasks created\r\n");
 800144e:	4829      	ldr	r0, [pc, #164]	@ (80014f4 <main+0x144>)
 8001450:	f007 fd1c 	bl	8008e8c <puts>

	xReturned = xTaskCreate(
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	9301      	str	r3, [sp, #4]
 8001458:	2300      	movs	r3, #0
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	2300      	movs	r3, #0
 800145e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001462:	4925      	ldr	r1, [pc, #148]	@ (80014f8 <main+0x148>)
 8001464:	4825      	ldr	r0, [pc, #148]	@ (80014fc <main+0x14c>)
 8001466:	f006 f83b 	bl	80074e0 <xTaskCreate>
 800146a:	60f8      	str	r0, [r7, #12]
			STACK_SIZE, // Stack size in words, not bytes.
			(void *) NULL, // Parameter passed into the task.
			tskIDLE_PRIORITY,// Priority at which the task is created.
			&xHandle2 ); // Used to pass out the created task's handle.

	if (xReturned != pdPASS)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d004      	beq.n	800147c <main+0xcc>
	{
		printf("Error creating Task\r\n");
 8001472:	481f      	ldr	r0, [pc, #124]	@ (80014f0 <main+0x140>)
 8001474:	f007 fd0a 	bl	8008e8c <puts>
		Error_Handler();
 8001478:	f000 f8f4 	bl	8001664 <Error_Handler>
	}

	printf("Tasks created\r\n");
 800147c:	481d      	ldr	r0, [pc, #116]	@ (80014f4 <main+0x144>)
 800147e:	f007 fd05 	bl	8008e8c <puts>

	xReturned = xTaskCreate(
 8001482:	463b      	mov	r3, r7
 8001484:	9301      	str	r3, [sp, #4]
 8001486:	2300      	movs	r3, #0
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	2300      	movs	r3, #0
 800148c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001490:	491b      	ldr	r1, [pc, #108]	@ (8001500 <main+0x150>)
 8001492:	481c      	ldr	r0, [pc, #112]	@ (8001504 <main+0x154>)
 8001494:	f006 f824 	bl	80074e0 <xTaskCreate>
 8001498:	60f8      	str	r0, [r7, #12]
			STACK_SIZE, // Stack size in words, not bytes.
			(void *) NULL, // Parameter passed into the task.
			tskIDLE_PRIORITY,// Priority at which the task is created.
			&xHandle3 ); // Used to pass out the created task's handle.

	if (xReturned != pdPASS)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d004      	beq.n	80014aa <main+0xfa>
	{
		printf("Error creating Task\r\n");
 80014a0:	4813      	ldr	r0, [pc, #76]	@ (80014f0 <main+0x140>)
 80014a2:	f007 fcf3 	bl	8008e8c <puts>
		Error_Handler();
 80014a6:	f000 f8dd 	bl	8001664 <Error_Handler>
	}

	printf("Tasks created\r\n");
 80014aa:	4812      	ldr	r0, [pc, #72]	@ (80014f4 <main+0x144>)
 80014ac:	f007 fcee 	bl	8008e8c <puts>

	vTaskStartScheduler();
 80014b0:	f006 f992 	bl	80077d8 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80014b4:	f7ff fada 	bl	8000a6c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80014b8:	f005 fc38 	bl	8006d2c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <main+0x10c>
 80014c0:	08009fdc 	.word	0x08009fdc
 80014c4:	20002878 	.word	0x20002878
 80014c8:	20002874 	.word	0x20002874
 80014cc:	2000008c 	.word	0x2000008c
 80014d0:	08001151 	.word	0x08001151
 80014d4:	08001179 	.word	0x08001179
 80014d8:	080011a1 	.word	0x080011a1
 80014dc:	080011c9 	.word	0x080011c9
 80014e0:	080011f1 	.word	0x080011f1
 80014e4:	08001219 	.word	0x08001219
 80014e8:	0800a014 	.word	0x0800a014
 80014ec:	080012d5 	.word	0x080012d5
 80014f0:	0800a020 	.word	0x0800a020
 80014f4:	0800a038 	.word	0x0800a038
 80014f8:	0800a048 	.word	0x0800a048
 80014fc:	08001241 	.word	0x08001241
 8001500:	0800a050 	.word	0x0800a050
 8001504:	08001359 	.word	0x08001359

08001508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b094      	sub	sp, #80	@ 0x50
 800150c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150e:	f107 0318 	add.w	r3, r7, #24
 8001512:	2238      	movs	r2, #56	@ 0x38
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f007 fd98 	bl	800904c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800152a:	2000      	movs	r0, #0
 800152c:	f001 f998 	bl	8002860 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001530:	2302      	movs	r3, #2
 8001532:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001534:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001538:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800153a:	2340      	movs	r3, #64	@ 0x40
 800153c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800153e:	2302      	movs	r3, #2
 8001540:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001542:	2302      	movs	r3, #2
 8001544:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001546:	2304      	movs	r3, #4
 8001548:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800154a:	2355      	movs	r3, #85	@ 0x55
 800154c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800154e:	2302      	movs	r3, #2
 8001550:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001552:	2302      	movs	r3, #2
 8001554:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001556:	2302      	movs	r3, #2
 8001558:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800155a:	f107 0318 	add.w	r3, r7, #24
 800155e:	4618      	mov	r0, r3
 8001560:	f001 fa32 	bl	80029c8 <HAL_RCC_OscConfig>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800156a:	f000 f87b 	bl	8001664 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800156e:	230f      	movs	r3, #15
 8001570:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001572:	2303      	movs	r3, #3
 8001574:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	2104      	movs	r1, #4
 8001586:	4618      	mov	r0, r3
 8001588:	f001 fd30 	bl	8002fec <HAL_RCC_ClockConfig>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001592:	f000 f867 	bl	8001664 <Error_Handler>
  }
}
 8001596:	bf00      	nop
 8001598:	3750      	adds	r7, #80	@ 0x50
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <HAL_UART_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]

    if (huart->Instance == UART4) {
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a0d      	ldr	r2, [pc, #52]	@ (80015e4 <HAL_UART_RxHalfCpltCallback+0x44>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d114      	bne.n	80015dc <HAL_UART_RxHalfCpltCallback+0x3c>


    	BaseType_t higher_priority_task_woken = pdFALSE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
    	xSemaphoreGiveFromISR(semb_halfCllbck, &higher_priority_task_woken);
 80015b6:	4b0c      	ldr	r3, [pc, #48]	@ (80015e8 <HAL_UART_RxHalfCpltCallback+0x48>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f107 020c 	add.w	r2, r7, #12
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f005 fd6d 	bl	80070a0 <xQueueGiveFromISR>

    	portYIELD_FROM_ISR(higher_priority_task_woken);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d007      	beq.n	80015dc <HAL_UART_RxHalfCpltCallback+0x3c>
 80015cc:	4b07      	ldr	r3, [pc, #28]	@ (80015ec <HAL_UART_RxHalfCpltCallback+0x4c>)
 80015ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	f3bf 8f4f 	dsb	sy
 80015d8:	f3bf 8f6f 	isb	sy

    }
}
 80015dc:	bf00      	nop
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40004c00 	.word	0x40004c00
 80015e8:	20002874 	.word	0x20002874
 80015ec:	e000ed04 	.word	0xe000ed04

080015f0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART4){
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001634 <HAL_UART_RxCpltCallback+0x44>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d114      	bne.n	800162c <HAL_UART_RxCpltCallback+0x3c>

		BaseType_t higher_priority_task_woken = pdFALSE;
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
    	xSemaphoreGiveFromISR(semb_cpltCllbck, &higher_priority_task_woken);
 8001606:	4b0c      	ldr	r3, [pc, #48]	@ (8001638 <HAL_UART_RxCpltCallback+0x48>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f107 020c 	add.w	r2, r7, #12
 800160e:	4611      	mov	r1, r2
 8001610:	4618      	mov	r0, r3
 8001612:	f005 fd45 	bl	80070a0 <xQueueGiveFromISR>

    	portYIELD_FROM_ISR(higher_priority_task_woken);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d007      	beq.n	800162c <HAL_UART_RxCpltCallback+0x3c>
 800161c:	4b07      	ldr	r3, [pc, #28]	@ (800163c <HAL_UART_RxCpltCallback+0x4c>)
 800161e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	f3bf 8f4f 	dsb	sy
 8001628:	f3bf 8f6f 	isb	sy

    }
}
 800162c:	bf00      	nop
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40004c00 	.word	0x40004c00
 8001638:	20002878 	.word	0x20002878
 800163c:	e000ed04 	.word	0xe000ed04

08001640 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a04      	ldr	r2, [pc, #16]	@ (8001660 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d101      	bne.n	8001656 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001652:	f000 fb3b 	bl	8001ccc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40001000 	.word	0x40001000

08001664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001668:	b672      	cpsid	i
}
 800166a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800166c:	bf00      	nop
 800166e:	e7fd      	b.n	800166c <Error_Handler+0x8>

08001670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001676:	4b12      	ldr	r3, [pc, #72]	@ (80016c0 <HAL_MspInit+0x50>)
 8001678:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800167a:	4a11      	ldr	r2, [pc, #68]	@ (80016c0 <HAL_MspInit+0x50>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6613      	str	r3, [r2, #96]	@ 0x60
 8001682:	4b0f      	ldr	r3, [pc, #60]	@ (80016c0 <HAL_MspInit+0x50>)
 8001684:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800168e:	4b0c      	ldr	r3, [pc, #48]	@ (80016c0 <HAL_MspInit+0x50>)
 8001690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001692:	4a0b      	ldr	r2, [pc, #44]	@ (80016c0 <HAL_MspInit+0x50>)
 8001694:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001698:	6593      	str	r3, [r2, #88]	@ 0x58
 800169a:	4b09      	ldr	r3, [pc, #36]	@ (80016c0 <HAL_MspInit+0x50>)
 800169c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800169e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	210f      	movs	r1, #15
 80016aa:	f06f 0001 	mvn.w	r0, #1
 80016ae:	f000 fbe3 	bl	8001e78 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80016b2:	f001 f979 	bl	80029a8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40021000 	.word	0x40021000

080016c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08c      	sub	sp, #48	@ 0x30
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001788 <HAL_InitTick+0xc4>)
 80016d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d8:	4a2b      	ldr	r2, [pc, #172]	@ (8001788 <HAL_InitTick+0xc4>)
 80016da:	f043 0310 	orr.w	r3, r3, #16
 80016de:	6593      	str	r3, [r2, #88]	@ 0x58
 80016e0:	4b29      	ldr	r3, [pc, #164]	@ (8001788 <HAL_InitTick+0xc4>)
 80016e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e4:	f003 0310 	and.w	r3, r3, #16
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016ec:	f107 020c 	add.w	r2, r7, #12
 80016f0:	f107 0310 	add.w	r3, r7, #16
 80016f4:	4611      	mov	r1, r2
 80016f6:	4618      	mov	r0, r3
 80016f8:	f001 fe4e 	bl	8003398 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016fc:	f001 fe20 	bl	8003340 <HAL_RCC_GetPCLK1Freq>
 8001700:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001704:	4a21      	ldr	r2, [pc, #132]	@ (800178c <HAL_InitTick+0xc8>)
 8001706:	fba2 2303 	umull	r2, r3, r2, r3
 800170a:	0c9b      	lsrs	r3, r3, #18
 800170c:	3b01      	subs	r3, #1
 800170e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001710:	4b1f      	ldr	r3, [pc, #124]	@ (8001790 <HAL_InitTick+0xcc>)
 8001712:	4a20      	ldr	r2, [pc, #128]	@ (8001794 <HAL_InitTick+0xd0>)
 8001714:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001716:	4b1e      	ldr	r3, [pc, #120]	@ (8001790 <HAL_InitTick+0xcc>)
 8001718:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800171c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800171e:	4a1c      	ldr	r2, [pc, #112]	@ (8001790 <HAL_InitTick+0xcc>)
 8001720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001722:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001724:	4b1a      	ldr	r3, [pc, #104]	@ (8001790 <HAL_InitTick+0xcc>)
 8001726:	2200      	movs	r2, #0
 8001728:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172a:	4b19      	ldr	r3, [pc, #100]	@ (8001790 <HAL_InitTick+0xcc>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001730:	4817      	ldr	r0, [pc, #92]	@ (8001790 <HAL_InitTick+0xcc>)
 8001732:	f002 f899 	bl	8003868 <HAL_TIM_Base_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800173c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001740:	2b00      	cmp	r3, #0
 8001742:	d11b      	bne.n	800177c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001744:	4812      	ldr	r0, [pc, #72]	@ (8001790 <HAL_InitTick+0xcc>)
 8001746:	f002 f8f1 	bl	800392c <HAL_TIM_Base_Start_IT>
 800174a:	4603      	mov	r3, r0
 800174c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001750:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001754:	2b00      	cmp	r3, #0
 8001756:	d111      	bne.n	800177c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001758:	2036      	movs	r0, #54	@ 0x36
 800175a:	f000 fba7 	bl	8001eac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b0f      	cmp	r3, #15
 8001762:	d808      	bhi.n	8001776 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001764:	2200      	movs	r2, #0
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	2036      	movs	r0, #54	@ 0x36
 800176a:	f000 fb85 	bl	8001e78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800176e:	4a0a      	ldr	r2, [pc, #40]	@ (8001798 <HAL_InitTick+0xd4>)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	e002      	b.n	800177c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800177c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001780:	4618      	mov	r0, r3
 8001782:	3730      	adds	r7, #48	@ 0x30
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40021000 	.word	0x40021000
 800178c:	431bde83 	.word	0x431bde83
 8001790:	2000287c 	.word	0x2000287c
 8001794:	40001000 	.word	0x40001000
 8001798:	20000004 	.word	0x20000004

0800179c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <NMI_Handler+0x4>

080017a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <HardFault_Handler+0x4>

080017ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <MemManage_Handler+0x4>

080017b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <BusFault_Handler+0x4>

080017bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <UsageFault_Handler+0x4>

080017c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
	...

080017d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80017d8:	4802      	ldr	r0, [pc, #8]	@ (80017e4 <DMA1_Channel1_IRQHandler+0x10>)
 80017da:	f000 fd58 	bl	800228e <HAL_DMA_IRQHandler>
//
//  }


  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200029f4 	.word	0x200029f4

080017e8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80017ec:	4802      	ldr	r0, [pc, #8]	@ (80017f8 <UART4_IRQHandler+0x10>)
 80017ee:	f002 feb3 	bl	8004558 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200028cc 	.word	0x200028cc

080017fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001800:	4802      	ldr	r0, [pc, #8]	@ (800180c <TIM6_DAC_IRQHandler+0x10>)
 8001802:	f002 f8fd 	bl	8003a00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	2000287c 	.word	0x2000287c

08001810 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	e00a      	b.n	8001838 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001822:	f3af 8000 	nop.w
 8001826:	4601      	mov	r1, r0
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	1c5a      	adds	r2, r3, #1
 800182c:	60ba      	str	r2, [r7, #8]
 800182e:	b2ca      	uxtb	r2, r1
 8001830:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	3301      	adds	r3, #1
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	429a      	cmp	r2, r3
 800183e:	dbf0      	blt.n	8001822 <_read+0x12>
  }

  return len;
 8001840:	687b      	ldr	r3, [r7, #4]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b086      	sub	sp, #24
 800184e:	af00      	add	r7, sp, #0
 8001850:	60f8      	str	r0, [r7, #12]
 8001852:	60b9      	str	r1, [r7, #8]
 8001854:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
 800185a:	e009      	b.n	8001870 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	1c5a      	adds	r2, r3, #1
 8001860:	60ba      	str	r2, [r7, #8]
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fc61 	bl	800112c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	3301      	adds	r3, #1
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	429a      	cmp	r2, r3
 8001876:	dbf1      	blt.n	800185c <_write+0x12>
  }
  return len;
 8001878:	687b      	ldr	r3, [r7, #4]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <_close>:

int _close(int file)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800188a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800188e:	4618      	mov	r0, r3
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018aa:	605a      	str	r2, [r3, #4]
  return 0;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <_isatty>:

int _isatty(int file)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018c2:	2301      	movs	r3, #1
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f4:	4a14      	ldr	r2, [pc, #80]	@ (8001948 <_sbrk+0x5c>)
 80018f6:	4b15      	ldr	r3, [pc, #84]	@ (800194c <_sbrk+0x60>)
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001900:	4b13      	ldr	r3, [pc, #76]	@ (8001950 <_sbrk+0x64>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d102      	bne.n	800190e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001908:	4b11      	ldr	r3, [pc, #68]	@ (8001950 <_sbrk+0x64>)
 800190a:	4a12      	ldr	r2, [pc, #72]	@ (8001954 <_sbrk+0x68>)
 800190c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800190e:	4b10      	ldr	r3, [pc, #64]	@ (8001950 <_sbrk+0x64>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	429a      	cmp	r2, r3
 800191a:	d207      	bcs.n	800192c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800191c:	f007 fbe4 	bl	80090e8 <__errno>
 8001920:	4603      	mov	r3, r0
 8001922:	220c      	movs	r2, #12
 8001924:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001926:	f04f 33ff 	mov.w	r3, #4294967295
 800192a:	e009      	b.n	8001940 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800192c:	4b08      	ldr	r3, [pc, #32]	@ (8001950 <_sbrk+0x64>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001932:	4b07      	ldr	r3, [pc, #28]	@ (8001950 <_sbrk+0x64>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	4a05      	ldr	r2, [pc, #20]	@ (8001950 <_sbrk+0x64>)
 800193c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800193e:	68fb      	ldr	r3, [r7, #12]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20008000 	.word	0x20008000
 800194c:	00000400 	.word	0x00000400
 8001950:	200028c8 	.word	0x200028c8
 8001954:	20007b20 	.word	0x20007b20

08001958 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800195c:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <SystemInit+0x20>)
 800195e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001962:	4a05      	ldr	r2, [pc, #20]	@ (8001978 <SystemInit+0x20>)
 8001964:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001968:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <MX_UART4_Init>:
UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_uart4_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001980:	4b22      	ldr	r3, [pc, #136]	@ (8001a0c <MX_UART4_Init+0x90>)
 8001982:	4a23      	ldr	r2, [pc, #140]	@ (8001a10 <MX_UART4_Init+0x94>)
 8001984:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 128000;
 8001986:	4b21      	ldr	r3, [pc, #132]	@ (8001a0c <MX_UART4_Init+0x90>)
 8001988:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 800198c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800198e:	4b1f      	ldr	r3, [pc, #124]	@ (8001a0c <MX_UART4_Init+0x90>)
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001994:	4b1d      	ldr	r3, [pc, #116]	@ (8001a0c <MX_UART4_Init+0x90>)
 8001996:	2200      	movs	r2, #0
 8001998:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800199a:	4b1c      	ldr	r3, [pc, #112]	@ (8001a0c <MX_UART4_Init+0x90>)
 800199c:	2200      	movs	r2, #0
 800199e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80019a0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a0c <MX_UART4_Init+0x90>)
 80019a2:	220c      	movs	r2, #12
 80019a4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019a6:	4b19      	ldr	r3, [pc, #100]	@ (8001a0c <MX_UART4_Init+0x90>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80019ac:	4b17      	ldr	r3, [pc, #92]	@ (8001a0c <MX_UART4_Init+0x90>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019b2:	4b16      	ldr	r3, [pc, #88]	@ (8001a0c <MX_UART4_Init+0x90>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019b8:	4b14      	ldr	r3, [pc, #80]	@ (8001a0c <MX_UART4_Init+0x90>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019be:	4b13      	ldr	r3, [pc, #76]	@ (8001a0c <MX_UART4_Init+0x90>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80019c4:	4811      	ldr	r0, [pc, #68]	@ (8001a0c <MX_UART4_Init+0x90>)
 80019c6:	f002 fa75 	bl	8003eb4 <HAL_UART_Init>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80019d0:	f7ff fe48 	bl	8001664 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019d4:	2100      	movs	r1, #0
 80019d6:	480d      	ldr	r0, [pc, #52]	@ (8001a0c <MX_UART4_Init+0x90>)
 80019d8:	f005 f8c5 	bl	8006b66 <HAL_UARTEx_SetTxFifoThreshold>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80019e2:	f7ff fe3f 	bl	8001664 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019e6:	2100      	movs	r1, #0
 80019e8:	4808      	ldr	r0, [pc, #32]	@ (8001a0c <MX_UART4_Init+0x90>)
 80019ea:	f005 f8fa 	bl	8006be2 <HAL_UARTEx_SetRxFifoThreshold>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80019f4:	f7ff fe36 	bl	8001664 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80019f8:	4804      	ldr	r0, [pc, #16]	@ (8001a0c <MX_UART4_Init+0x90>)
 80019fa:	f005 f87b 	bl	8006af4 <HAL_UARTEx_DisableFifoMode>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001a04:	f7ff fe2e 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	200028cc 	.word	0x200028cc
 8001a10:	40004c00 	.word	0x40004c00

08001a14 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a18:	4b22      	ldr	r3, [pc, #136]	@ (8001aa4 <MX_USART2_UART_Init+0x90>)
 8001a1a:	4a23      	ldr	r2, [pc, #140]	@ (8001aa8 <MX_USART2_UART_Init+0x94>)
 8001a1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a1e:	4b21      	ldr	r3, [pc, #132]	@ (8001aa4 <MX_USART2_UART_Init+0x90>)
 8001a20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a26:	4b1f      	ldr	r3, [pc, #124]	@ (8001aa4 <MX_USART2_UART_Init+0x90>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa4 <MX_USART2_UART_Init+0x90>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a32:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa4 <MX_USART2_UART_Init+0x90>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a38:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa4 <MX_USART2_UART_Init+0x90>)
 8001a3a:	220c      	movs	r2, #12
 8001a3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a3e:	4b19      	ldr	r3, [pc, #100]	@ (8001aa4 <MX_USART2_UART_Init+0x90>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a44:	4b17      	ldr	r3, [pc, #92]	@ (8001aa4 <MX_USART2_UART_Init+0x90>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a4a:	4b16      	ldr	r3, [pc, #88]	@ (8001aa4 <MX_USART2_UART_Init+0x90>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a50:	4b14      	ldr	r3, [pc, #80]	@ (8001aa4 <MX_USART2_UART_Init+0x90>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a56:	4b13      	ldr	r3, [pc, #76]	@ (8001aa4 <MX_USART2_UART_Init+0x90>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a5c:	4811      	ldr	r0, [pc, #68]	@ (8001aa4 <MX_USART2_UART_Init+0x90>)
 8001a5e:	f002 fa29 	bl	8003eb4 <HAL_UART_Init>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001a68:	f7ff fdfc 	bl	8001664 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	480d      	ldr	r0, [pc, #52]	@ (8001aa4 <MX_USART2_UART_Init+0x90>)
 8001a70:	f005 f879 	bl	8006b66 <HAL_UARTEx_SetTxFifoThreshold>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001a7a:	f7ff fdf3 	bl	8001664 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4808      	ldr	r0, [pc, #32]	@ (8001aa4 <MX_USART2_UART_Init+0x90>)
 8001a82:	f005 f8ae 	bl	8006be2 <HAL_UARTEx_SetRxFifoThreshold>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001a8c:	f7ff fdea 	bl	8001664 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001a90:	4804      	ldr	r0, [pc, #16]	@ (8001aa4 <MX_USART2_UART_Init+0x90>)
 8001a92:	f005 f82f 	bl	8006af4 <HAL_UARTEx_DisableFifoMode>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001a9c:	f7ff fde2 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20002960 	.word	0x20002960
 8001aa8:	40004400 	.word	0x40004400

08001aac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b09c      	sub	sp, #112	@ 0x70
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ac4:	f107 0318 	add.w	r3, r7, #24
 8001ac8:	2244      	movs	r2, #68	@ 0x44
 8001aca:	2100      	movs	r1, #0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f007 fabd 	bl	800904c <memset>
  if(uartHandle->Instance==UART4)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a56      	ldr	r2, [pc, #344]	@ (8001c30 <HAL_UART_MspInit+0x184>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d169      	bne.n	8001bb0 <HAL_UART_MspInit+0x104>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001adc:	2308      	movs	r3, #8
 8001ade:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ae4:	f107 0318 	add.w	r3, r7, #24
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f001 fccd 	bl	8003488 <HAL_RCCEx_PeriphCLKConfig>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001af4:	f7ff fdb6 	bl	8001664 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001af8:	4b4e      	ldr	r3, [pc, #312]	@ (8001c34 <HAL_UART_MspInit+0x188>)
 8001afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001afc:	4a4d      	ldr	r2, [pc, #308]	@ (8001c34 <HAL_UART_MspInit+0x188>)
 8001afe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001b02:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b04:	4b4b      	ldr	r3, [pc, #300]	@ (8001c34 <HAL_UART_MspInit+0x188>)
 8001b06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b08:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b10:	4b48      	ldr	r3, [pc, #288]	@ (8001c34 <HAL_UART_MspInit+0x188>)
 8001b12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b14:	4a47      	ldr	r2, [pc, #284]	@ (8001c34 <HAL_UART_MspInit+0x188>)
 8001b16:	f043 0304 	orr.w	r3, r3, #4
 8001b1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b1c:	4b45      	ldr	r3, [pc, #276]	@ (8001c34 <HAL_UART_MspInit+0x188>)
 8001b1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	613b      	str	r3, [r7, #16]
 8001b26:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b28:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001b2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b36:	2300      	movs	r3, #0
 8001b38:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001b3a:	2305      	movs	r3, #5
 8001b3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b3e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b42:	4619      	mov	r1, r3
 8001b44:	483c      	ldr	r0, [pc, #240]	@ (8001c38 <HAL_UART_MspInit+0x18c>)
 8001b46:	f000 fcf1 	bl	800252c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Channel1;
 8001b4a:	4b3c      	ldr	r3, [pc, #240]	@ (8001c3c <HAL_UART_MspInit+0x190>)
 8001b4c:	4a3c      	ldr	r2, [pc, #240]	@ (8001c40 <HAL_UART_MspInit+0x194>)
 8001b4e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001b50:	4b3a      	ldr	r3, [pc, #232]	@ (8001c3c <HAL_UART_MspInit+0x190>)
 8001b52:	221e      	movs	r2, #30
 8001b54:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b56:	4b39      	ldr	r3, [pc, #228]	@ (8001c3c <HAL_UART_MspInit+0x190>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b5c:	4b37      	ldr	r3, [pc, #220]	@ (8001c3c <HAL_UART_MspInit+0x190>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b62:	4b36      	ldr	r3, [pc, #216]	@ (8001c3c <HAL_UART_MspInit+0x190>)
 8001b64:	2280      	movs	r2, #128	@ 0x80
 8001b66:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b68:	4b34      	ldr	r3, [pc, #208]	@ (8001c3c <HAL_UART_MspInit+0x190>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b6e:	4b33      	ldr	r3, [pc, #204]	@ (8001c3c <HAL_UART_MspInit+0x190>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001b74:	4b31      	ldr	r3, [pc, #196]	@ (8001c3c <HAL_UART_MspInit+0x190>)
 8001b76:	2220      	movs	r2, #32
 8001b78:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b7a:	4b30      	ldr	r3, [pc, #192]	@ (8001c3c <HAL_UART_MspInit+0x190>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001b80:	482e      	ldr	r0, [pc, #184]	@ (8001c3c <HAL_UART_MspInit+0x190>)
 8001b82:	f000 f9a1 	bl	8001ec8 <HAL_DMA_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8001b8c:	f7ff fd6a 	bl	8001664 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a2a      	ldr	r2, [pc, #168]	@ (8001c3c <HAL_UART_MspInit+0x190>)
 8001b94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001b98:	4a28      	ldr	r2, [pc, #160]	@ (8001c3c <HAL_UART_MspInit+0x190>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2105      	movs	r1, #5
 8001ba2:	2034      	movs	r0, #52	@ 0x34
 8001ba4:	f000 f968 	bl	8001e78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001ba8:	2034      	movs	r0, #52	@ 0x34
 8001baa:	f000 f97f 	bl	8001eac <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001bae:	e03b      	b.n	8001c28 <HAL_UART_MspInit+0x17c>
  else if(uartHandle->Instance==USART2)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a23      	ldr	r2, [pc, #140]	@ (8001c44 <HAL_UART_MspInit+0x198>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d136      	bne.n	8001c28 <HAL_UART_MspInit+0x17c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bc2:	f107 0318 	add.w	r3, r7, #24
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f001 fc5e 	bl	8003488 <HAL_RCCEx_PeriphCLKConfig>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_UART_MspInit+0x12a>
      Error_Handler();
 8001bd2:	f7ff fd47 	bl	8001664 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bd6:	4b17      	ldr	r3, [pc, #92]	@ (8001c34 <HAL_UART_MspInit+0x188>)
 8001bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bda:	4a16      	ldr	r2, [pc, #88]	@ (8001c34 <HAL_UART_MspInit+0x188>)
 8001bdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001be0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001be2:	4b14      	ldr	r3, [pc, #80]	@ (8001c34 <HAL_UART_MspInit+0x188>)
 8001be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bee:	4b11      	ldr	r3, [pc, #68]	@ (8001c34 <HAL_UART_MspInit+0x188>)
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf2:	4a10      	ldr	r2, [pc, #64]	@ (8001c34 <HAL_UART_MspInit+0x188>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001c34 <HAL_UART_MspInit+0x188>)
 8001bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	60bb      	str	r3, [r7, #8]
 8001c04:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c06:	230c      	movs	r3, #12
 8001c08:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c12:	2300      	movs	r3, #0
 8001c14:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c16:	2307      	movs	r3, #7
 8001c18:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c24:	f000 fc82 	bl	800252c <HAL_GPIO_Init>
}
 8001c28:	bf00      	nop
 8001c2a:	3770      	adds	r7, #112	@ 0x70
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40004c00 	.word	0x40004c00
 8001c34:	40021000 	.word	0x40021000
 8001c38:	48000800 	.word	0x48000800
 8001c3c:	200029f4 	.word	0x200029f4
 8001c40:	40020008 	.word	0x40020008
 8001c44:	40004400 	.word	0x40004400

08001c48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c48:	480d      	ldr	r0, [pc, #52]	@ (8001c80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c4a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c4c:	f7ff fe84 	bl	8001958 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c50:	480c      	ldr	r0, [pc, #48]	@ (8001c84 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c52:	490d      	ldr	r1, [pc, #52]	@ (8001c88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c54:	4a0d      	ldr	r2, [pc, #52]	@ (8001c8c <LoopForever+0xe>)
  movs r3, #0
 8001c56:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001c58:	e002      	b.n	8001c60 <LoopCopyDataInit>

08001c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c5e:	3304      	adds	r3, #4

08001c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c64:	d3f9      	bcc.n	8001c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c66:	4a0a      	ldr	r2, [pc, #40]	@ (8001c90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c68:	4c0a      	ldr	r4, [pc, #40]	@ (8001c94 <LoopForever+0x16>)
  movs r3, #0
 8001c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c6c:	e001      	b.n	8001c72 <LoopFillZerobss>

08001c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c70:	3204      	adds	r2, #4

08001c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c74:	d3fb      	bcc.n	8001c6e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001c76:	f007 fa3d 	bl	80090f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c7a:	f7ff fb99 	bl	80013b0 <main>

08001c7e <LoopForever>:

LoopForever:
    b LoopForever
 8001c7e:	e7fe      	b.n	8001c7e <LoopForever>
  ldr   r0, =_estack
 8001c80:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c88:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001c8c:	0800a114 	.word	0x0800a114
  ldr r2, =_sbss
 8001c90:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001c94:	20007b20 	.word	0x20007b20

08001c98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c98:	e7fe      	b.n	8001c98 <ADC1_2_IRQHandler>

08001c9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca4:	2003      	movs	r0, #3
 8001ca6:	f000 f8dc 	bl	8001e62 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001caa:	200f      	movs	r0, #15
 8001cac:	f7ff fd0a 	bl	80016c4 <HAL_InitTick>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d002      	beq.n	8001cbc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	71fb      	strb	r3, [r7, #7]
 8001cba:	e001      	b.n	8001cc0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cbc:	f7ff fcd8 	bl	8001670 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cc0:	79fb      	ldrb	r3, [r7, #7]

}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cd0:	4b05      	ldr	r3, [pc, #20]	@ (8001ce8 <HAL_IncTick+0x1c>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b05      	ldr	r3, [pc, #20]	@ (8001cec <HAL_IncTick+0x20>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4413      	add	r3, r2
 8001cda:	4a03      	ldr	r2, [pc, #12]	@ (8001ce8 <HAL_IncTick+0x1c>)
 8001cdc:	6013      	str	r3, [r2, #0]
}
 8001cde:	bf00      	nop
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	20002a54 	.word	0x20002a54
 8001cec:	20000008 	.word	0x20000008

08001cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf4:	4b03      	ldr	r3, [pc, #12]	@ (8001d04 <HAL_GetTick+0x14>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	20002a54 	.word	0x20002a54

08001d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d18:	4b0c      	ldr	r3, [pc, #48]	@ (8001d4c <__NVIC_SetPriorityGrouping+0x44>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d24:	4013      	ands	r3, r2
 8001d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d3a:	4a04      	ldr	r2, [pc, #16]	@ (8001d4c <__NVIC_SetPriorityGrouping+0x44>)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	60d3      	str	r3, [r2, #12]
}
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d54:	4b04      	ldr	r3, [pc, #16]	@ (8001d68 <__NVIC_GetPriorityGrouping+0x18>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	0a1b      	lsrs	r3, r3, #8
 8001d5a:	f003 0307 	and.w	r3, r3, #7
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	db0b      	blt.n	8001d96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	f003 021f 	and.w	r2, r3, #31
 8001d84:	4907      	ldr	r1, [pc, #28]	@ (8001da4 <__NVIC_EnableIRQ+0x38>)
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	095b      	lsrs	r3, r3, #5
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000e100 	.word	0xe000e100

08001da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	6039      	str	r1, [r7, #0]
 8001db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	db0a      	blt.n	8001dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	490c      	ldr	r1, [pc, #48]	@ (8001df4 <__NVIC_SetPriority+0x4c>)
 8001dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc6:	0112      	lsls	r2, r2, #4
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	440b      	add	r3, r1
 8001dcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd0:	e00a      	b.n	8001de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	4908      	ldr	r1, [pc, #32]	@ (8001df8 <__NVIC_SetPriority+0x50>)
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	3b04      	subs	r3, #4
 8001de0:	0112      	lsls	r2, r2, #4
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	440b      	add	r3, r1
 8001de6:	761a      	strb	r2, [r3, #24]
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	e000e100 	.word	0xe000e100
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b089      	sub	sp, #36	@ 0x24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f1c3 0307 	rsb	r3, r3, #7
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	bf28      	it	cs
 8001e1a:	2304      	movcs	r3, #4
 8001e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3304      	adds	r3, #4
 8001e22:	2b06      	cmp	r3, #6
 8001e24:	d902      	bls.n	8001e2c <NVIC_EncodePriority+0x30>
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3b03      	subs	r3, #3
 8001e2a:	e000      	b.n	8001e2e <NVIC_EncodePriority+0x32>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	f04f 32ff 	mov.w	r2, #4294967295
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43da      	mvns	r2, r3
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	401a      	ands	r2, r3
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e44:	f04f 31ff 	mov.w	r1, #4294967295
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4e:	43d9      	mvns	r1, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e54:	4313      	orrs	r3, r2
         );
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3724      	adds	r7, #36	@ 0x24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff ff4c 	bl	8001d08 <__NVIC_SetPriorityGrouping>
}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
 8001e84:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e86:	f7ff ff63 	bl	8001d50 <__NVIC_GetPriorityGrouping>
 8001e8a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	68b9      	ldr	r1, [r7, #8]
 8001e90:	6978      	ldr	r0, [r7, #20]
 8001e92:	f7ff ffb3 	bl	8001dfc <NVIC_EncodePriority>
 8001e96:	4602      	mov	r2, r0
 8001e98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e9c:	4611      	mov	r1, r2
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff ff82 	bl	8001da8 <__NVIC_SetPriority>
}
 8001ea4:	bf00      	nop
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff ff56 	bl	8001d6c <__NVIC_EnableIRQ>
}
 8001ec0:	bf00      	nop
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e08d      	b.n	8001ff6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	4b47      	ldr	r3, [pc, #284]	@ (8002000 <HAL_DMA_Init+0x138>)
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d80f      	bhi.n	8001f06 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	461a      	mov	r2, r3
 8001eec:	4b45      	ldr	r3, [pc, #276]	@ (8002004 <HAL_DMA_Init+0x13c>)
 8001eee:	4413      	add	r3, r2
 8001ef0:	4a45      	ldr	r2, [pc, #276]	@ (8002008 <HAL_DMA_Init+0x140>)
 8001ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef6:	091b      	lsrs	r3, r3, #4
 8001ef8:	009a      	lsls	r2, r3, #2
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a42      	ldr	r2, [pc, #264]	@ (800200c <HAL_DMA_Init+0x144>)
 8001f02:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f04:	e00e      	b.n	8001f24 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	4b40      	ldr	r3, [pc, #256]	@ (8002010 <HAL_DMA_Init+0x148>)
 8001f0e:	4413      	add	r3, r2
 8001f10:	4a3d      	ldr	r2, [pc, #244]	@ (8002008 <HAL_DMA_Init+0x140>)
 8001f12:	fba2 2303 	umull	r2, r3, r2, r3
 8001f16:	091b      	lsrs	r3, r3, #4
 8001f18:	009a      	lsls	r2, r3, #2
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a3c      	ldr	r2, [pc, #240]	@ (8002014 <HAL_DMA_Init+0x14c>)
 8001f22:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2202      	movs	r2, #2
 8001f28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001f3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f3e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001f48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 fa76 	bl	8002468 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f84:	d102      	bne.n	8001f8c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001fa0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d010      	beq.n	8001fcc <HAL_DMA_Init+0x104>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	d80c      	bhi.n	8001fcc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 fa96 	bl	80024e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	e008      	b.n	8001fde <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40020407 	.word	0x40020407
 8002004:	bffdfff8 	.word	0xbffdfff8
 8002008:	cccccccd 	.word	0xcccccccd
 800200c:	40020000 	.word	0x40020000
 8002010:	bffdfbf8 	.word	0xbffdfbf8
 8002014:	40020400 	.word	0x40020400

08002018 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
 8002024:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002030:	2b01      	cmp	r3, #1
 8002032:	d101      	bne.n	8002038 <HAL_DMA_Start_IT+0x20>
 8002034:	2302      	movs	r3, #2
 8002036:	e066      	b.n	8002106 <HAL_DMA_Start_IT+0xee>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b01      	cmp	r3, #1
 800204a:	d155      	bne.n	80020f8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2202      	movs	r2, #2
 8002050:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0201 	bic.w	r2, r2, #1
 8002068:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	68b9      	ldr	r1, [r7, #8]
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f000 f9bb 	bl	80023ec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207a:	2b00      	cmp	r3, #0
 800207c:	d008      	beq.n	8002090 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f042 020e 	orr.w	r2, r2, #14
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	e00f      	b.n	80020b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0204 	bic.w	r2, r2, #4
 800209e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f042 020a 	orr.w	r2, r2, #10
 80020ae:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d007      	beq.n	80020ce <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020cc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d007      	beq.n	80020e6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020e4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f042 0201 	orr.w	r2, r2, #1
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	e005      	b.n	8002104 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002100:	2302      	movs	r3, #2
 8002102:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002104:	7dfb      	ldrb	r3, [r7, #23]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800210e:	b480      	push	{r7}
 8002110:	b085      	sub	sp, #20
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002116:	2300      	movs	r3, #0
 8002118:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d005      	beq.n	8002132 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2204      	movs	r2, #4
 800212a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	73fb      	strb	r3, [r7, #15]
 8002130:	e037      	b.n	80021a2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 020e 	bic.w	r2, r2, #14
 8002140:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800214c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002150:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 0201 	bic.w	r2, r2, #1
 8002160:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002166:	f003 021f 	and.w	r2, r3, #31
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216e:	2101      	movs	r1, #1
 8002170:	fa01 f202 	lsl.w	r2, r1, r2
 8002174:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800217e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00c      	beq.n	80021a2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002192:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002196:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80021a0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021c8:	2300      	movs	r3, #0
 80021ca:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d00d      	beq.n	80021f4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2204      	movs	r2, #4
 80021dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	73fb      	strb	r3, [r7, #15]
 80021f2:	e047      	b.n	8002284 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 020e 	bic.w	r2, r2, #14
 8002202:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 0201 	bic.w	r2, r2, #1
 8002212:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800221e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002222:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002228:	f003 021f 	and.w	r2, r3, #31
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002230:	2101      	movs	r1, #1
 8002232:	fa01 f202 	lsl.w	r2, r1, r2
 8002236:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002240:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00c      	beq.n	8002264 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002254:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002258:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002262:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	4798      	blx	r3
    }
  }
  return status;
 8002284:	7bfb      	ldrb	r3, [r7, #15]
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b084      	sub	sp, #16
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022aa:	f003 031f 	and.w	r3, r3, #31
 80022ae:	2204      	movs	r2, #4
 80022b0:	409a      	lsls	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4013      	ands	r3, r2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d026      	beq.n	8002308 <HAL_DMA_IRQHandler+0x7a>
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d021      	beq.n	8002308 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0320 	and.w	r3, r3, #32
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d107      	bne.n	80022e2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0204 	bic.w	r2, r2, #4
 80022e0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e6:	f003 021f 	and.w	r2, r3, #31
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ee:	2104      	movs	r1, #4
 80022f0:	fa01 f202 	lsl.w	r2, r1, r2
 80022f4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d071      	beq.n	80023e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002306:	e06c      	b.n	80023e2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230c:	f003 031f 	and.w	r3, r3, #31
 8002310:	2202      	movs	r2, #2
 8002312:	409a      	lsls	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	4013      	ands	r3, r2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d02e      	beq.n	800237a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d029      	beq.n	800237a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0320 	and.w	r3, r3, #32
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10b      	bne.n	800234c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 020a 	bic.w	r2, r2, #10
 8002342:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002350:	f003 021f 	and.w	r2, r3, #31
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002358:	2102      	movs	r1, #2
 800235a:	fa01 f202 	lsl.w	r2, r1, r2
 800235e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800236c:	2b00      	cmp	r3, #0
 800236e:	d038      	beq.n	80023e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002378:	e033      	b.n	80023e2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237e:	f003 031f 	and.w	r3, r3, #31
 8002382:	2208      	movs	r2, #8
 8002384:	409a      	lsls	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	4013      	ands	r3, r2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d02a      	beq.n	80023e4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	2b00      	cmp	r3, #0
 8002396:	d025      	beq.n	80023e4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 020e 	bic.w	r2, r2, #14
 80023a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ac:	f003 021f 	and.w	r2, r3, #31
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b4:	2101      	movs	r1, #1
 80023b6:	fa01 f202 	lsl.w	r2, r1, r2
 80023ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d004      	beq.n	80023e4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80023e2:	bf00      	nop
 80023e4:	bf00      	nop
}
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
 80023f8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002402:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002408:	2b00      	cmp	r3, #0
 800240a:	d004      	beq.n	8002416 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002414:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800241a:	f003 021f 	and.w	r2, r3, #31
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002422:	2101      	movs	r1, #1
 8002424:	fa01 f202 	lsl.w	r2, r1, r2
 8002428:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	2b10      	cmp	r3, #16
 8002438:	d108      	bne.n	800244c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800244a:	e007      	b.n	800245c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	60da      	str	r2, [r3, #12]
}
 800245c:	bf00      	nop
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002468:	b480      	push	{r7}
 800246a:	b087      	sub	sp, #28
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	461a      	mov	r2, r3
 8002476:	4b16      	ldr	r3, [pc, #88]	@ (80024d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002478:	429a      	cmp	r2, r3
 800247a:	d802      	bhi.n	8002482 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800247c:	4b15      	ldr	r3, [pc, #84]	@ (80024d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	e001      	b.n	8002486 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002482:	4b15      	ldr	r3, [pc, #84]	@ (80024d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002484:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	b2db      	uxtb	r3, r3
 8002490:	3b08      	subs	r3, #8
 8002492:	4a12      	ldr	r2, [pc, #72]	@ (80024dc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002494:	fba2 2303 	umull	r2, r3, r2, r3
 8002498:	091b      	lsrs	r3, r3, #4
 800249a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a0:	089b      	lsrs	r3, r3, #2
 80024a2:	009a      	lsls	r2, r3, #2
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4413      	add	r3, r2
 80024a8:	461a      	mov	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a0b      	ldr	r2, [pc, #44]	@ (80024e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80024b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 031f 	and.w	r3, r3, #31
 80024ba:	2201      	movs	r2, #1
 80024bc:	409a      	lsls	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80024c2:	bf00      	nop
 80024c4:	371c      	adds	r7, #28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	40020407 	.word	0x40020407
 80024d4:	40020800 	.word	0x40020800
 80024d8:	40020820 	.word	0x40020820
 80024dc:	cccccccd 	.word	0xcccccccd
 80024e0:	40020880 	.word	0x40020880

080024e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80024f8:	4413      	add	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	461a      	mov	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a08      	ldr	r2, [pc, #32]	@ (8002528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002506:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	3b01      	subs	r3, #1
 800250c:	f003 031f 	and.w	r3, r3, #31
 8002510:	2201      	movs	r2, #1
 8002512:	409a      	lsls	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002518:	bf00      	nop
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	1000823f 	.word	0x1000823f
 8002528:	40020940 	.word	0x40020940

0800252c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800252c:	b480      	push	{r7}
 800252e:	b087      	sub	sp, #28
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800253a:	e15a      	b.n	80027f2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	2101      	movs	r1, #1
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	fa01 f303 	lsl.w	r3, r1, r3
 8002548:	4013      	ands	r3, r2
 800254a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2b00      	cmp	r3, #0
 8002550:	f000 814c 	beq.w	80027ec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 0303 	and.w	r3, r3, #3
 800255c:	2b01      	cmp	r3, #1
 800255e:	d005      	beq.n	800256c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002568:	2b02      	cmp	r3, #2
 800256a:	d130      	bne.n	80025ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	2203      	movs	r2, #3
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	4013      	ands	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	4313      	orrs	r3, r2
 8002594:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025a2:	2201      	movs	r2, #1
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	4013      	ands	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	091b      	lsrs	r3, r3, #4
 80025b8:	f003 0201 	and.w	r2, r3, #1
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f003 0303 	and.w	r3, r3, #3
 80025d6:	2b03      	cmp	r3, #3
 80025d8:	d017      	beq.n	800260a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	2203      	movs	r2, #3
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43db      	mvns	r3, r3
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	4013      	ands	r3, r2
 80025f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	689a      	ldr	r2, [r3, #8]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d123      	bne.n	800265e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	08da      	lsrs	r2, r3, #3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	3208      	adds	r2, #8
 800261e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002622:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	220f      	movs	r2, #15
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43db      	mvns	r3, r3
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	4013      	ands	r3, r2
 8002638:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	691a      	ldr	r2, [r3, #16]
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	4313      	orrs	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	08da      	lsrs	r2, r3, #3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3208      	adds	r2, #8
 8002658:	6939      	ldr	r1, [r7, #16]
 800265a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	2203      	movs	r2, #3
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	4013      	ands	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f003 0203 	and.w	r2, r3, #3
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800269a:	2b00      	cmp	r3, #0
 800269c:	f000 80a6 	beq.w	80027ec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a0:	4b5b      	ldr	r3, [pc, #364]	@ (8002810 <HAL_GPIO_Init+0x2e4>)
 80026a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026a4:	4a5a      	ldr	r2, [pc, #360]	@ (8002810 <HAL_GPIO_Init+0x2e4>)
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	6613      	str	r3, [r2, #96]	@ 0x60
 80026ac:	4b58      	ldr	r3, [pc, #352]	@ (8002810 <HAL_GPIO_Init+0x2e4>)
 80026ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026b8:	4a56      	ldr	r2, [pc, #344]	@ (8002814 <HAL_GPIO_Init+0x2e8>)
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	089b      	lsrs	r3, r3, #2
 80026be:	3302      	adds	r3, #2
 80026c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	220f      	movs	r2, #15
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	4013      	ands	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80026e2:	d01f      	beq.n	8002724 <HAL_GPIO_Init+0x1f8>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a4c      	ldr	r2, [pc, #304]	@ (8002818 <HAL_GPIO_Init+0x2ec>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d019      	beq.n	8002720 <HAL_GPIO_Init+0x1f4>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a4b      	ldr	r2, [pc, #300]	@ (800281c <HAL_GPIO_Init+0x2f0>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d013      	beq.n	800271c <HAL_GPIO_Init+0x1f0>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a4a      	ldr	r2, [pc, #296]	@ (8002820 <HAL_GPIO_Init+0x2f4>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d00d      	beq.n	8002718 <HAL_GPIO_Init+0x1ec>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a49      	ldr	r2, [pc, #292]	@ (8002824 <HAL_GPIO_Init+0x2f8>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d007      	beq.n	8002714 <HAL_GPIO_Init+0x1e8>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a48      	ldr	r2, [pc, #288]	@ (8002828 <HAL_GPIO_Init+0x2fc>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d101      	bne.n	8002710 <HAL_GPIO_Init+0x1e4>
 800270c:	2305      	movs	r3, #5
 800270e:	e00a      	b.n	8002726 <HAL_GPIO_Init+0x1fa>
 8002710:	2306      	movs	r3, #6
 8002712:	e008      	b.n	8002726 <HAL_GPIO_Init+0x1fa>
 8002714:	2304      	movs	r3, #4
 8002716:	e006      	b.n	8002726 <HAL_GPIO_Init+0x1fa>
 8002718:	2303      	movs	r3, #3
 800271a:	e004      	b.n	8002726 <HAL_GPIO_Init+0x1fa>
 800271c:	2302      	movs	r3, #2
 800271e:	e002      	b.n	8002726 <HAL_GPIO_Init+0x1fa>
 8002720:	2301      	movs	r3, #1
 8002722:	e000      	b.n	8002726 <HAL_GPIO_Init+0x1fa>
 8002724:	2300      	movs	r3, #0
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	f002 0203 	and.w	r2, r2, #3
 800272c:	0092      	lsls	r2, r2, #2
 800272e:	4093      	lsls	r3, r2
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	4313      	orrs	r3, r2
 8002734:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002736:	4937      	ldr	r1, [pc, #220]	@ (8002814 <HAL_GPIO_Init+0x2e8>)
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	089b      	lsrs	r3, r3, #2
 800273c:	3302      	adds	r3, #2
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002744:	4b39      	ldr	r3, [pc, #228]	@ (800282c <HAL_GPIO_Init+0x300>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	43db      	mvns	r3, r3
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4013      	ands	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	4313      	orrs	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002768:	4a30      	ldr	r2, [pc, #192]	@ (800282c <HAL_GPIO_Init+0x300>)
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800276e:	4b2f      	ldr	r3, [pc, #188]	@ (800282c <HAL_GPIO_Init+0x300>)
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	43db      	mvns	r3, r3
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	4013      	ands	r3, r2
 800277c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4313      	orrs	r3, r2
 8002790:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002792:	4a26      	ldr	r2, [pc, #152]	@ (800282c <HAL_GPIO_Init+0x300>)
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002798:	4b24      	ldr	r3, [pc, #144]	@ (800282c <HAL_GPIO_Init+0x300>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	43db      	mvns	r3, r3
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	4013      	ands	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d003      	beq.n	80027bc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027bc:	4a1b      	ldr	r2, [pc, #108]	@ (800282c <HAL_GPIO_Init+0x300>)
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80027c2:	4b1a      	ldr	r3, [pc, #104]	@ (800282c <HAL_GPIO_Init+0x300>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	43db      	mvns	r3, r3
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	4013      	ands	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027e6:	4a11      	ldr	r2, [pc, #68]	@ (800282c <HAL_GPIO_Init+0x300>)
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	3301      	adds	r3, #1
 80027f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	fa22 f303 	lsr.w	r3, r2, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f47f ae9d 	bne.w	800253c <HAL_GPIO_Init+0x10>
  }
}
 8002802:	bf00      	nop
 8002804:	bf00      	nop
 8002806:	371c      	adds	r7, #28
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	40021000 	.word	0x40021000
 8002814:	40010000 	.word	0x40010000
 8002818:	48000400 	.word	0x48000400
 800281c:	48000800 	.word	0x48000800
 8002820:	48000c00 	.word	0x48000c00
 8002824:	48001000 	.word	0x48001000
 8002828:	48001400 	.word	0x48001400
 800282c:	40010400 	.word	0x40010400

08002830 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	460b      	mov	r3, r1
 800283a:	807b      	strh	r3, [r7, #2]
 800283c:	4613      	mov	r3, r2
 800283e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002840:	787b      	ldrb	r3, [r7, #1]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002846:	887a      	ldrh	r2, [r7, #2]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800284c:	e002      	b.n	8002854 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800284e:	887a      	ldrh	r2, [r7, #2]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d141      	bne.n	80028f2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800286e:	4b4b      	ldr	r3, [pc, #300]	@ (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002876:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800287a:	d131      	bne.n	80028e0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800287c:	4b47      	ldr	r3, [pc, #284]	@ (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800287e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002882:	4a46      	ldr	r2, [pc, #280]	@ (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002884:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002888:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800288c:	4b43      	ldr	r3, [pc, #268]	@ (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002894:	4a41      	ldr	r2, [pc, #260]	@ (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002896:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800289a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800289c:	4b40      	ldr	r3, [pc, #256]	@ (80029a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2232      	movs	r2, #50	@ 0x32
 80028a2:	fb02 f303 	mul.w	r3, r2, r3
 80028a6:	4a3f      	ldr	r2, [pc, #252]	@ (80029a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80028a8:	fba2 2303 	umull	r2, r3, r2, r3
 80028ac:	0c9b      	lsrs	r3, r3, #18
 80028ae:	3301      	adds	r3, #1
 80028b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028b2:	e002      	b.n	80028ba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028ba:	4b38      	ldr	r3, [pc, #224]	@ (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028c6:	d102      	bne.n	80028ce <HAL_PWREx_ControlVoltageScaling+0x6e>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f2      	bne.n	80028b4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028ce:	4b33      	ldr	r3, [pc, #204]	@ (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028da:	d158      	bne.n	800298e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e057      	b.n	8002990 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028e0:	4b2e      	ldr	r3, [pc, #184]	@ (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028e6:	4a2d      	ldr	r2, [pc, #180]	@ (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80028ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80028f0:	e04d      	b.n	800298e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028f8:	d141      	bne.n	800297e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80028fa:	4b28      	ldr	r3, [pc, #160]	@ (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002902:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002906:	d131      	bne.n	800296c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002908:	4b24      	ldr	r3, [pc, #144]	@ (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800290a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800290e:	4a23      	ldr	r2, [pc, #140]	@ (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002910:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002914:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002918:	4b20      	ldr	r3, [pc, #128]	@ (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002920:	4a1e      	ldr	r2, [pc, #120]	@ (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002922:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002926:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002928:	4b1d      	ldr	r3, [pc, #116]	@ (80029a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2232      	movs	r2, #50	@ 0x32
 800292e:	fb02 f303 	mul.w	r3, r2, r3
 8002932:	4a1c      	ldr	r2, [pc, #112]	@ (80029a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002934:	fba2 2303 	umull	r2, r3, r2, r3
 8002938:	0c9b      	lsrs	r3, r3, #18
 800293a:	3301      	adds	r3, #1
 800293c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800293e:	e002      	b.n	8002946 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	3b01      	subs	r3, #1
 8002944:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002946:	4b15      	ldr	r3, [pc, #84]	@ (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800294e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002952:	d102      	bne.n	800295a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f2      	bne.n	8002940 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800295a:	4b10      	ldr	r3, [pc, #64]	@ (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002962:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002966:	d112      	bne.n	800298e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e011      	b.n	8002990 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800296c:	4b0b      	ldr	r3, [pc, #44]	@ (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800296e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002972:	4a0a      	ldr	r2, [pc, #40]	@ (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002974:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002978:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800297c:	e007      	b.n	800298e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800297e:	4b07      	ldr	r3, [pc, #28]	@ (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002986:	4a05      	ldr	r2, [pc, #20]	@ (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002988:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800298c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	40007000 	.word	0x40007000
 80029a0:	20000000 	.word	0x20000000
 80029a4:	431bde83 	.word	0x431bde83

080029a8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80029ac:	4b05      	ldr	r3, [pc, #20]	@ (80029c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	4a04      	ldr	r2, [pc, #16]	@ (80029c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80029b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029b6:	6093      	str	r3, [r2, #8]
}
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	40007000 	.word	0x40007000

080029c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e2fe      	b.n	8002fd8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d075      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029e6:	4b97      	ldr	r3, [pc, #604]	@ (8002c44 <HAL_RCC_OscConfig+0x27c>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 030c 	and.w	r3, r3, #12
 80029ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029f0:	4b94      	ldr	r3, [pc, #592]	@ (8002c44 <HAL_RCC_OscConfig+0x27c>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	f003 0303 	and.w	r3, r3, #3
 80029f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	2b0c      	cmp	r3, #12
 80029fe:	d102      	bne.n	8002a06 <HAL_RCC_OscConfig+0x3e>
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	d002      	beq.n	8002a0c <HAL_RCC_OscConfig+0x44>
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d10b      	bne.n	8002a24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a0c:	4b8d      	ldr	r3, [pc, #564]	@ (8002c44 <HAL_RCC_OscConfig+0x27c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d05b      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x108>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d157      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e2d9      	b.n	8002fd8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a2c:	d106      	bne.n	8002a3c <HAL_RCC_OscConfig+0x74>
 8002a2e:	4b85      	ldr	r3, [pc, #532]	@ (8002c44 <HAL_RCC_OscConfig+0x27c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a84      	ldr	r2, [pc, #528]	@ (8002c44 <HAL_RCC_OscConfig+0x27c>)
 8002a34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	e01d      	b.n	8002a78 <HAL_RCC_OscConfig+0xb0>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a44:	d10c      	bne.n	8002a60 <HAL_RCC_OscConfig+0x98>
 8002a46:	4b7f      	ldr	r3, [pc, #508]	@ (8002c44 <HAL_RCC_OscConfig+0x27c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a7e      	ldr	r2, [pc, #504]	@ (8002c44 <HAL_RCC_OscConfig+0x27c>)
 8002a4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	4b7c      	ldr	r3, [pc, #496]	@ (8002c44 <HAL_RCC_OscConfig+0x27c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a7b      	ldr	r2, [pc, #492]	@ (8002c44 <HAL_RCC_OscConfig+0x27c>)
 8002a58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	e00b      	b.n	8002a78 <HAL_RCC_OscConfig+0xb0>
 8002a60:	4b78      	ldr	r3, [pc, #480]	@ (8002c44 <HAL_RCC_OscConfig+0x27c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a77      	ldr	r2, [pc, #476]	@ (8002c44 <HAL_RCC_OscConfig+0x27c>)
 8002a66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	4b75      	ldr	r3, [pc, #468]	@ (8002c44 <HAL_RCC_OscConfig+0x27c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a74      	ldr	r2, [pc, #464]	@ (8002c44 <HAL_RCC_OscConfig+0x27c>)
 8002a72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d013      	beq.n	8002aa8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a80:	f7ff f936 	bl	8001cf0 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a88:	f7ff f932 	bl	8001cf0 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b64      	cmp	r3, #100	@ 0x64
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e29e      	b.n	8002fd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a9a:	4b6a      	ldr	r3, [pc, #424]	@ (8002c44 <HAL_RCC_OscConfig+0x27c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0f0      	beq.n	8002a88 <HAL_RCC_OscConfig+0xc0>
 8002aa6:	e014      	b.n	8002ad2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa8:	f7ff f922 	bl	8001cf0 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab0:	f7ff f91e 	bl	8001cf0 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b64      	cmp	r3, #100	@ 0x64
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e28a      	b.n	8002fd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ac2:	4b60      	ldr	r3, [pc, #384]	@ (8002c44 <HAL_RCC_OscConfig+0x27c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_OscConfig+0xe8>
 8002ace:	e000      	b.n	8002ad2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d075      	beq.n	8002bca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ade:	4b59      	ldr	r3, [pc, #356]	@ (8002c44 <HAL_RCC_OscConfig+0x27c>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
 8002ae6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ae8:	4b56      	ldr	r3, [pc, #344]	@ (8002c44 <HAL_RCC_OscConfig+0x27c>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	2b0c      	cmp	r3, #12
 8002af6:	d102      	bne.n	8002afe <HAL_RCC_OscConfig+0x136>
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d002      	beq.n	8002b04 <HAL_RCC_OscConfig+0x13c>
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	2b04      	cmp	r3, #4
 8002b02:	d11f      	bne.n	8002b44 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b04:	4b4f      	ldr	r3, [pc, #316]	@ (8002c44 <HAL_RCC_OscConfig+0x27c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d005      	beq.n	8002b1c <HAL_RCC_OscConfig+0x154>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e25d      	b.n	8002fd8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1c:	4b49      	ldr	r3, [pc, #292]	@ (8002c44 <HAL_RCC_OscConfig+0x27c>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	061b      	lsls	r3, r3, #24
 8002b2a:	4946      	ldr	r1, [pc, #280]	@ (8002c44 <HAL_RCC_OscConfig+0x27c>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b30:	4b45      	ldr	r3, [pc, #276]	@ (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7fe fdc5 	bl	80016c4 <HAL_InitTick>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d043      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e249      	b.n	8002fd8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d023      	beq.n	8002b94 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b4c:	4b3d      	ldr	r3, [pc, #244]	@ (8002c44 <HAL_RCC_OscConfig+0x27c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a3c      	ldr	r2, [pc, #240]	@ (8002c44 <HAL_RCC_OscConfig+0x27c>)
 8002b52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b58:	f7ff f8ca 	bl	8001cf0 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b60:	f7ff f8c6 	bl	8001cf0 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e232      	b.n	8002fd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b72:	4b34      	ldr	r3, [pc, #208]	@ (8002c44 <HAL_RCC_OscConfig+0x27c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0f0      	beq.n	8002b60 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7e:	4b31      	ldr	r3, [pc, #196]	@ (8002c44 <HAL_RCC_OscConfig+0x27c>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	061b      	lsls	r3, r3, #24
 8002b8c:	492d      	ldr	r1, [pc, #180]	@ (8002c44 <HAL_RCC_OscConfig+0x27c>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	604b      	str	r3, [r1, #4]
 8002b92:	e01a      	b.n	8002bca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b94:	4b2b      	ldr	r3, [pc, #172]	@ (8002c44 <HAL_RCC_OscConfig+0x27c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a2a      	ldr	r2, [pc, #168]	@ (8002c44 <HAL_RCC_OscConfig+0x27c>)
 8002b9a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba0:	f7ff f8a6 	bl	8001cf0 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ba8:	f7ff f8a2 	bl	8001cf0 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e20e      	b.n	8002fd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bba:	4b22      	ldr	r3, [pc, #136]	@ (8002c44 <HAL_RCC_OscConfig+0x27c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x1e0>
 8002bc6:	e000      	b.n	8002bca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bc8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d041      	beq.n	8002c5a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d01c      	beq.n	8002c18 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bde:	4b19      	ldr	r3, [pc, #100]	@ (8002c44 <HAL_RCC_OscConfig+0x27c>)
 8002be0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002be4:	4a17      	ldr	r2, [pc, #92]	@ (8002c44 <HAL_RCC_OscConfig+0x27c>)
 8002be6:	f043 0301 	orr.w	r3, r3, #1
 8002bea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bee:	f7ff f87f 	bl	8001cf0 <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bf6:	f7ff f87b 	bl	8001cf0 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e1e7      	b.n	8002fd8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c08:	4b0e      	ldr	r3, [pc, #56]	@ (8002c44 <HAL_RCC_OscConfig+0x27c>)
 8002c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0ef      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x22e>
 8002c16:	e020      	b.n	8002c5a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c18:	4b0a      	ldr	r3, [pc, #40]	@ (8002c44 <HAL_RCC_OscConfig+0x27c>)
 8002c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c1e:	4a09      	ldr	r2, [pc, #36]	@ (8002c44 <HAL_RCC_OscConfig+0x27c>)
 8002c20:	f023 0301 	bic.w	r3, r3, #1
 8002c24:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c28:	f7ff f862 	bl	8001cf0 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c2e:	e00d      	b.n	8002c4c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c30:	f7ff f85e 	bl	8001cf0 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d906      	bls.n	8002c4c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e1ca      	b.n	8002fd8 <HAL_RCC_OscConfig+0x610>
 8002c42:	bf00      	nop
 8002c44:	40021000 	.word	0x40021000
 8002c48:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c4c:	4b8c      	ldr	r3, [pc, #560]	@ (8002e80 <HAL_RCC_OscConfig+0x4b8>)
 8002c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1ea      	bne.n	8002c30 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0304 	and.w	r3, r3, #4
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 80a6 	beq.w	8002db4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c6c:	4b84      	ldr	r3, [pc, #528]	@ (8002e80 <HAL_RCC_OscConfig+0x4b8>)
 8002c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_RCC_OscConfig+0x2b4>
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e000      	b.n	8002c7e <HAL_RCC_OscConfig+0x2b6>
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00d      	beq.n	8002c9e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c82:	4b7f      	ldr	r3, [pc, #508]	@ (8002e80 <HAL_RCC_OscConfig+0x4b8>)
 8002c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c86:	4a7e      	ldr	r2, [pc, #504]	@ (8002e80 <HAL_RCC_OscConfig+0x4b8>)
 8002c88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c8e:	4b7c      	ldr	r3, [pc, #496]	@ (8002e80 <HAL_RCC_OscConfig+0x4b8>)
 8002c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c9e:	4b79      	ldr	r3, [pc, #484]	@ (8002e84 <HAL_RCC_OscConfig+0x4bc>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d118      	bne.n	8002cdc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002caa:	4b76      	ldr	r3, [pc, #472]	@ (8002e84 <HAL_RCC_OscConfig+0x4bc>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a75      	ldr	r2, [pc, #468]	@ (8002e84 <HAL_RCC_OscConfig+0x4bc>)
 8002cb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cb6:	f7ff f81b 	bl	8001cf0 <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cbe:	f7ff f817 	bl	8001cf0 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e183      	b.n	8002fd8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cd0:	4b6c      	ldr	r3, [pc, #432]	@ (8002e84 <HAL_RCC_OscConfig+0x4bc>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0f0      	beq.n	8002cbe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d108      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x32e>
 8002ce4:	4b66      	ldr	r3, [pc, #408]	@ (8002e80 <HAL_RCC_OscConfig+0x4b8>)
 8002ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cea:	4a65      	ldr	r2, [pc, #404]	@ (8002e80 <HAL_RCC_OscConfig+0x4b8>)
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002cf4:	e024      	b.n	8002d40 <HAL_RCC_OscConfig+0x378>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	2b05      	cmp	r3, #5
 8002cfc:	d110      	bne.n	8002d20 <HAL_RCC_OscConfig+0x358>
 8002cfe:	4b60      	ldr	r3, [pc, #384]	@ (8002e80 <HAL_RCC_OscConfig+0x4b8>)
 8002d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d04:	4a5e      	ldr	r2, [pc, #376]	@ (8002e80 <HAL_RCC_OscConfig+0x4b8>)
 8002d06:	f043 0304 	orr.w	r3, r3, #4
 8002d0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d0e:	4b5c      	ldr	r3, [pc, #368]	@ (8002e80 <HAL_RCC_OscConfig+0x4b8>)
 8002d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d14:	4a5a      	ldr	r2, [pc, #360]	@ (8002e80 <HAL_RCC_OscConfig+0x4b8>)
 8002d16:	f043 0301 	orr.w	r3, r3, #1
 8002d1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d1e:	e00f      	b.n	8002d40 <HAL_RCC_OscConfig+0x378>
 8002d20:	4b57      	ldr	r3, [pc, #348]	@ (8002e80 <HAL_RCC_OscConfig+0x4b8>)
 8002d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d26:	4a56      	ldr	r2, [pc, #344]	@ (8002e80 <HAL_RCC_OscConfig+0x4b8>)
 8002d28:	f023 0301 	bic.w	r3, r3, #1
 8002d2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d30:	4b53      	ldr	r3, [pc, #332]	@ (8002e80 <HAL_RCC_OscConfig+0x4b8>)
 8002d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d36:	4a52      	ldr	r2, [pc, #328]	@ (8002e80 <HAL_RCC_OscConfig+0x4b8>)
 8002d38:	f023 0304 	bic.w	r3, r3, #4
 8002d3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d016      	beq.n	8002d76 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d48:	f7fe ffd2 	bl	8001cf0 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d4e:	e00a      	b.n	8002d66 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d50:	f7fe ffce 	bl	8001cf0 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e138      	b.n	8002fd8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d66:	4b46      	ldr	r3, [pc, #280]	@ (8002e80 <HAL_RCC_OscConfig+0x4b8>)
 8002d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0ed      	beq.n	8002d50 <HAL_RCC_OscConfig+0x388>
 8002d74:	e015      	b.n	8002da2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d76:	f7fe ffbb 	bl	8001cf0 <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d7c:	e00a      	b.n	8002d94 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d7e:	f7fe ffb7 	bl	8001cf0 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e121      	b.n	8002fd8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d94:	4b3a      	ldr	r3, [pc, #232]	@ (8002e80 <HAL_RCC_OscConfig+0x4b8>)
 8002d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1ed      	bne.n	8002d7e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002da2:	7ffb      	ldrb	r3, [r7, #31]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d105      	bne.n	8002db4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da8:	4b35      	ldr	r3, [pc, #212]	@ (8002e80 <HAL_RCC_OscConfig+0x4b8>)
 8002daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dac:	4a34      	ldr	r2, [pc, #208]	@ (8002e80 <HAL_RCC_OscConfig+0x4b8>)
 8002dae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002db2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0320 	and.w	r3, r3, #32
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d03c      	beq.n	8002e3a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d01c      	beq.n	8002e02 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002dc8:	4b2d      	ldr	r3, [pc, #180]	@ (8002e80 <HAL_RCC_OscConfig+0x4b8>)
 8002dca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002dce:	4a2c      	ldr	r2, [pc, #176]	@ (8002e80 <HAL_RCC_OscConfig+0x4b8>)
 8002dd0:	f043 0301 	orr.w	r3, r3, #1
 8002dd4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd8:	f7fe ff8a 	bl	8001cf0 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002de0:	f7fe ff86 	bl	8001cf0 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e0f2      	b.n	8002fd8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002df2:	4b23      	ldr	r3, [pc, #140]	@ (8002e80 <HAL_RCC_OscConfig+0x4b8>)
 8002df4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0ef      	beq.n	8002de0 <HAL_RCC_OscConfig+0x418>
 8002e00:	e01b      	b.n	8002e3a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e02:	4b1f      	ldr	r3, [pc, #124]	@ (8002e80 <HAL_RCC_OscConfig+0x4b8>)
 8002e04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e08:	4a1d      	ldr	r2, [pc, #116]	@ (8002e80 <HAL_RCC_OscConfig+0x4b8>)
 8002e0a:	f023 0301 	bic.w	r3, r3, #1
 8002e0e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e12:	f7fe ff6d 	bl	8001cf0 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e1a:	f7fe ff69 	bl	8001cf0 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e0d5      	b.n	8002fd8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e2c:	4b14      	ldr	r3, [pc, #80]	@ (8002e80 <HAL_RCC_OscConfig+0x4b8>)
 8002e2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1ef      	bne.n	8002e1a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 80c9 	beq.w	8002fd6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e44:	4b0e      	ldr	r3, [pc, #56]	@ (8002e80 <HAL_RCC_OscConfig+0x4b8>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 030c 	and.w	r3, r3, #12
 8002e4c:	2b0c      	cmp	r3, #12
 8002e4e:	f000 8083 	beq.w	8002f58 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d15e      	bne.n	8002f18 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e5a:	4b09      	ldr	r3, [pc, #36]	@ (8002e80 <HAL_RCC_OscConfig+0x4b8>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a08      	ldr	r2, [pc, #32]	@ (8002e80 <HAL_RCC_OscConfig+0x4b8>)
 8002e60:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e66:	f7fe ff43 	bl	8001cf0 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e6c:	e00c      	b.n	8002e88 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e6e:	f7fe ff3f 	bl	8001cf0 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d905      	bls.n	8002e88 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e0ab      	b.n	8002fd8 <HAL_RCC_OscConfig+0x610>
 8002e80:	40021000 	.word	0x40021000
 8002e84:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e88:	4b55      	ldr	r3, [pc, #340]	@ (8002fe0 <HAL_RCC_OscConfig+0x618>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1ec      	bne.n	8002e6e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e94:	4b52      	ldr	r3, [pc, #328]	@ (8002fe0 <HAL_RCC_OscConfig+0x618>)
 8002e96:	68da      	ldr	r2, [r3, #12]
 8002e98:	4b52      	ldr	r3, [pc, #328]	@ (8002fe4 <HAL_RCC_OscConfig+0x61c>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6a11      	ldr	r1, [r2, #32]
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ea4:	3a01      	subs	r2, #1
 8002ea6:	0112      	lsls	r2, r2, #4
 8002ea8:	4311      	orrs	r1, r2
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002eae:	0212      	lsls	r2, r2, #8
 8002eb0:	4311      	orrs	r1, r2
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002eb6:	0852      	lsrs	r2, r2, #1
 8002eb8:	3a01      	subs	r2, #1
 8002eba:	0552      	lsls	r2, r2, #21
 8002ebc:	4311      	orrs	r1, r2
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002ec2:	0852      	lsrs	r2, r2, #1
 8002ec4:	3a01      	subs	r2, #1
 8002ec6:	0652      	lsls	r2, r2, #25
 8002ec8:	4311      	orrs	r1, r2
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002ece:	06d2      	lsls	r2, r2, #27
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	4943      	ldr	r1, [pc, #268]	@ (8002fe0 <HAL_RCC_OscConfig+0x618>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ed8:	4b41      	ldr	r3, [pc, #260]	@ (8002fe0 <HAL_RCC_OscConfig+0x618>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a40      	ldr	r2, [pc, #256]	@ (8002fe0 <HAL_RCC_OscConfig+0x618>)
 8002ede:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ee2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ee4:	4b3e      	ldr	r3, [pc, #248]	@ (8002fe0 <HAL_RCC_OscConfig+0x618>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	4a3d      	ldr	r2, [pc, #244]	@ (8002fe0 <HAL_RCC_OscConfig+0x618>)
 8002eea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002eee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef0:	f7fe fefe 	bl	8001cf0 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef8:	f7fe fefa 	bl	8001cf0 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e066      	b.n	8002fd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f0a:	4b35      	ldr	r3, [pc, #212]	@ (8002fe0 <HAL_RCC_OscConfig+0x618>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0f0      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x530>
 8002f16:	e05e      	b.n	8002fd6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f18:	4b31      	ldr	r3, [pc, #196]	@ (8002fe0 <HAL_RCC_OscConfig+0x618>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a30      	ldr	r2, [pc, #192]	@ (8002fe0 <HAL_RCC_OscConfig+0x618>)
 8002f1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f24:	f7fe fee4 	bl	8001cf0 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f2c:	f7fe fee0 	bl	8001cf0 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e04c      	b.n	8002fd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f3e:	4b28      	ldr	r3, [pc, #160]	@ (8002fe0 <HAL_RCC_OscConfig+0x618>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f0      	bne.n	8002f2c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002f4a:	4b25      	ldr	r3, [pc, #148]	@ (8002fe0 <HAL_RCC_OscConfig+0x618>)
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	4924      	ldr	r1, [pc, #144]	@ (8002fe0 <HAL_RCC_OscConfig+0x618>)
 8002f50:	4b25      	ldr	r3, [pc, #148]	@ (8002fe8 <HAL_RCC_OscConfig+0x620>)
 8002f52:	4013      	ands	r3, r2
 8002f54:	60cb      	str	r3, [r1, #12]
 8002f56:	e03e      	b.n	8002fd6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d101      	bne.n	8002f64 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e039      	b.n	8002fd8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002f64:	4b1e      	ldr	r3, [pc, #120]	@ (8002fe0 <HAL_RCC_OscConfig+0x618>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f003 0203 	and.w	r2, r3, #3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d12c      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f82:	3b01      	subs	r3, #1
 8002f84:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d123      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f94:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d11b      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d113      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb4:	085b      	lsrs	r3, r3, #1
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d109      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fc8:	085b      	lsrs	r3, r3, #1
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d001      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e000      	b.n	8002fd8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3720      	adds	r7, #32
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	019f800c 	.word	0x019f800c
 8002fe8:	feeefffc 	.word	0xfeeefffc

08002fec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d101      	bne.n	8003004 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e11e      	b.n	8003242 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003004:	4b91      	ldr	r3, [pc, #580]	@ (800324c <HAL_RCC_ClockConfig+0x260>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 030f 	and.w	r3, r3, #15
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	429a      	cmp	r2, r3
 8003010:	d910      	bls.n	8003034 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003012:	4b8e      	ldr	r3, [pc, #568]	@ (800324c <HAL_RCC_ClockConfig+0x260>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f023 020f 	bic.w	r2, r3, #15
 800301a:	498c      	ldr	r1, [pc, #560]	@ (800324c <HAL_RCC_ClockConfig+0x260>)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	4313      	orrs	r3, r2
 8003020:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003022:	4b8a      	ldr	r3, [pc, #552]	@ (800324c <HAL_RCC_ClockConfig+0x260>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	429a      	cmp	r2, r3
 800302e:	d001      	beq.n	8003034 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e106      	b.n	8003242 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b00      	cmp	r3, #0
 800303e:	d073      	beq.n	8003128 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b03      	cmp	r3, #3
 8003046:	d129      	bne.n	800309c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003048:	4b81      	ldr	r3, [pc, #516]	@ (8003250 <HAL_RCC_ClockConfig+0x264>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e0f4      	b.n	8003242 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003058:	f000 f9d0 	bl	80033fc <RCC_GetSysClockFreqFromPLLSource>
 800305c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4a7c      	ldr	r2, [pc, #496]	@ (8003254 <HAL_RCC_ClockConfig+0x268>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d93f      	bls.n	80030e6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003066:	4b7a      	ldr	r3, [pc, #488]	@ (8003250 <HAL_RCC_ClockConfig+0x264>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d009      	beq.n	8003086 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800307a:	2b00      	cmp	r3, #0
 800307c:	d033      	beq.n	80030e6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003082:	2b00      	cmp	r3, #0
 8003084:	d12f      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003086:	4b72      	ldr	r3, [pc, #456]	@ (8003250 <HAL_RCC_ClockConfig+0x264>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800308e:	4a70      	ldr	r2, [pc, #448]	@ (8003250 <HAL_RCC_ClockConfig+0x264>)
 8003090:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003094:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003096:	2380      	movs	r3, #128	@ 0x80
 8003098:	617b      	str	r3, [r7, #20]
 800309a:	e024      	b.n	80030e6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d107      	bne.n	80030b4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030a4:	4b6a      	ldr	r3, [pc, #424]	@ (8003250 <HAL_RCC_ClockConfig+0x264>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d109      	bne.n	80030c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0c6      	b.n	8003242 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030b4:	4b66      	ldr	r3, [pc, #408]	@ (8003250 <HAL_RCC_ClockConfig+0x264>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e0be      	b.n	8003242 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80030c4:	f000 f8ce 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 80030c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	4a61      	ldr	r2, [pc, #388]	@ (8003254 <HAL_RCC_ClockConfig+0x268>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d909      	bls.n	80030e6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80030d2:	4b5f      	ldr	r3, [pc, #380]	@ (8003250 <HAL_RCC_ClockConfig+0x264>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80030da:	4a5d      	ldr	r2, [pc, #372]	@ (8003250 <HAL_RCC_ClockConfig+0x264>)
 80030dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030e0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80030e2:	2380      	movs	r3, #128	@ 0x80
 80030e4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030e6:	4b5a      	ldr	r3, [pc, #360]	@ (8003250 <HAL_RCC_ClockConfig+0x264>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f023 0203 	bic.w	r2, r3, #3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	4957      	ldr	r1, [pc, #348]	@ (8003250 <HAL_RCC_ClockConfig+0x264>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030f8:	f7fe fdfa 	bl	8001cf0 <HAL_GetTick>
 80030fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030fe:	e00a      	b.n	8003116 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003100:	f7fe fdf6 	bl	8001cf0 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800310e:	4293      	cmp	r3, r2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e095      	b.n	8003242 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003116:	4b4e      	ldr	r3, [pc, #312]	@ (8003250 <HAL_RCC_ClockConfig+0x264>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 020c 	and.w	r2, r3, #12
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	429a      	cmp	r2, r3
 8003126:	d1eb      	bne.n	8003100 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d023      	beq.n	800317c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b00      	cmp	r3, #0
 800313e:	d005      	beq.n	800314c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003140:	4b43      	ldr	r3, [pc, #268]	@ (8003250 <HAL_RCC_ClockConfig+0x264>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	4a42      	ldr	r2, [pc, #264]	@ (8003250 <HAL_RCC_ClockConfig+0x264>)
 8003146:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800314a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b00      	cmp	r3, #0
 8003156:	d007      	beq.n	8003168 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003158:	4b3d      	ldr	r3, [pc, #244]	@ (8003250 <HAL_RCC_ClockConfig+0x264>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003160:	4a3b      	ldr	r2, [pc, #236]	@ (8003250 <HAL_RCC_ClockConfig+0x264>)
 8003162:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003166:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003168:	4b39      	ldr	r3, [pc, #228]	@ (8003250 <HAL_RCC_ClockConfig+0x264>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	4936      	ldr	r1, [pc, #216]	@ (8003250 <HAL_RCC_ClockConfig+0x264>)
 8003176:	4313      	orrs	r3, r2
 8003178:	608b      	str	r3, [r1, #8]
 800317a:	e008      	b.n	800318e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	2b80      	cmp	r3, #128	@ 0x80
 8003180:	d105      	bne.n	800318e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003182:	4b33      	ldr	r3, [pc, #204]	@ (8003250 <HAL_RCC_ClockConfig+0x264>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	4a32      	ldr	r2, [pc, #200]	@ (8003250 <HAL_RCC_ClockConfig+0x264>)
 8003188:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800318c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800318e:	4b2f      	ldr	r3, [pc, #188]	@ (800324c <HAL_RCC_ClockConfig+0x260>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	429a      	cmp	r2, r3
 800319a:	d21d      	bcs.n	80031d8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319c:	4b2b      	ldr	r3, [pc, #172]	@ (800324c <HAL_RCC_ClockConfig+0x260>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f023 020f 	bic.w	r2, r3, #15
 80031a4:	4929      	ldr	r1, [pc, #164]	@ (800324c <HAL_RCC_ClockConfig+0x260>)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80031ac:	f7fe fda0 	bl	8001cf0 <HAL_GetTick>
 80031b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b2:	e00a      	b.n	80031ca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b4:	f7fe fd9c 	bl	8001cf0 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e03b      	b.n	8003242 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ca:	4b20      	ldr	r3, [pc, #128]	@ (800324c <HAL_RCC_ClockConfig+0x260>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d1ed      	bne.n	80031b4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d008      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e4:	4b1a      	ldr	r3, [pc, #104]	@ (8003250 <HAL_RCC_ClockConfig+0x264>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	4917      	ldr	r1, [pc, #92]	@ (8003250 <HAL_RCC_ClockConfig+0x264>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d009      	beq.n	8003216 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003202:	4b13      	ldr	r3, [pc, #76]	@ (8003250 <HAL_RCC_ClockConfig+0x264>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	490f      	ldr	r1, [pc, #60]	@ (8003250 <HAL_RCC_ClockConfig+0x264>)
 8003212:	4313      	orrs	r3, r2
 8003214:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003216:	f000 f825 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 800321a:	4602      	mov	r2, r0
 800321c:	4b0c      	ldr	r3, [pc, #48]	@ (8003250 <HAL_RCC_ClockConfig+0x264>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	091b      	lsrs	r3, r3, #4
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	490c      	ldr	r1, [pc, #48]	@ (8003258 <HAL_RCC_ClockConfig+0x26c>)
 8003228:	5ccb      	ldrb	r3, [r1, r3]
 800322a:	f003 031f 	and.w	r3, r3, #31
 800322e:	fa22 f303 	lsr.w	r3, r2, r3
 8003232:	4a0a      	ldr	r2, [pc, #40]	@ (800325c <HAL_RCC_ClockConfig+0x270>)
 8003234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003236:	4b0a      	ldr	r3, [pc, #40]	@ (8003260 <HAL_RCC_ClockConfig+0x274>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7fe fa42 	bl	80016c4 <HAL_InitTick>
 8003240:	4603      	mov	r3, r0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40022000 	.word	0x40022000
 8003250:	40021000 	.word	0x40021000
 8003254:	04c4b400 	.word	0x04c4b400
 8003258:	0800a090 	.word	0x0800a090
 800325c:	20000000 	.word	0x20000000
 8003260:	20000004 	.word	0x20000004

08003264 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003264:	b480      	push	{r7}
 8003266:	b087      	sub	sp, #28
 8003268:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800326a:	4b2c      	ldr	r3, [pc, #176]	@ (800331c <HAL_RCC_GetSysClockFreq+0xb8>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 030c 	and.w	r3, r3, #12
 8003272:	2b04      	cmp	r3, #4
 8003274:	d102      	bne.n	800327c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003276:	4b2a      	ldr	r3, [pc, #168]	@ (8003320 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	e047      	b.n	800330c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800327c:	4b27      	ldr	r3, [pc, #156]	@ (800331c <HAL_RCC_GetSysClockFreq+0xb8>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 030c 	and.w	r3, r3, #12
 8003284:	2b08      	cmp	r3, #8
 8003286:	d102      	bne.n	800328e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003288:	4b26      	ldr	r3, [pc, #152]	@ (8003324 <HAL_RCC_GetSysClockFreq+0xc0>)
 800328a:	613b      	str	r3, [r7, #16]
 800328c:	e03e      	b.n	800330c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800328e:	4b23      	ldr	r3, [pc, #140]	@ (800331c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 030c 	and.w	r3, r3, #12
 8003296:	2b0c      	cmp	r3, #12
 8003298:	d136      	bne.n	8003308 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800329a:	4b20      	ldr	r3, [pc, #128]	@ (800331c <HAL_RCC_GetSysClockFreq+0xb8>)
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032a4:	4b1d      	ldr	r3, [pc, #116]	@ (800331c <HAL_RCC_GetSysClockFreq+0xb8>)
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	091b      	lsrs	r3, r3, #4
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	3301      	adds	r3, #1
 80032b0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	d10c      	bne.n	80032d2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032b8:	4a1a      	ldr	r2, [pc, #104]	@ (8003324 <HAL_RCC_GetSysClockFreq+0xc0>)
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c0:	4a16      	ldr	r2, [pc, #88]	@ (800331c <HAL_RCC_GetSysClockFreq+0xb8>)
 80032c2:	68d2      	ldr	r2, [r2, #12]
 80032c4:	0a12      	lsrs	r2, r2, #8
 80032c6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80032ca:	fb02 f303 	mul.w	r3, r2, r3
 80032ce:	617b      	str	r3, [r7, #20]
      break;
 80032d0:	e00c      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032d2:	4a13      	ldr	r2, [pc, #76]	@ (8003320 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032da:	4a10      	ldr	r2, [pc, #64]	@ (800331c <HAL_RCC_GetSysClockFreq+0xb8>)
 80032dc:	68d2      	ldr	r2, [r2, #12]
 80032de:	0a12      	lsrs	r2, r2, #8
 80032e0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80032e4:	fb02 f303 	mul.w	r3, r2, r3
 80032e8:	617b      	str	r3, [r7, #20]
      break;
 80032ea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032ec:	4b0b      	ldr	r3, [pc, #44]	@ (800331c <HAL_RCC_GetSysClockFreq+0xb8>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	0e5b      	lsrs	r3, r3, #25
 80032f2:	f003 0303 	and.w	r3, r3, #3
 80032f6:	3301      	adds	r3, #1
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	fbb2 f3f3 	udiv	r3, r2, r3
 8003304:	613b      	str	r3, [r7, #16]
 8003306:	e001      	b.n	800330c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003308:	2300      	movs	r3, #0
 800330a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800330c:	693b      	ldr	r3, [r7, #16]
}
 800330e:	4618      	mov	r0, r3
 8003310:	371c      	adds	r7, #28
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	40021000 	.word	0x40021000
 8003320:	00f42400 	.word	0x00f42400
 8003324:	016e3600 	.word	0x016e3600

08003328 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800332c:	4b03      	ldr	r3, [pc, #12]	@ (800333c <HAL_RCC_GetHCLKFreq+0x14>)
 800332e:	681b      	ldr	r3, [r3, #0]
}
 8003330:	4618      	mov	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	20000000 	.word	0x20000000

08003340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003344:	f7ff fff0 	bl	8003328 <HAL_RCC_GetHCLKFreq>
 8003348:	4602      	mov	r2, r0
 800334a:	4b06      	ldr	r3, [pc, #24]	@ (8003364 <HAL_RCC_GetPCLK1Freq+0x24>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	0a1b      	lsrs	r3, r3, #8
 8003350:	f003 0307 	and.w	r3, r3, #7
 8003354:	4904      	ldr	r1, [pc, #16]	@ (8003368 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003356:	5ccb      	ldrb	r3, [r1, r3]
 8003358:	f003 031f 	and.w	r3, r3, #31
 800335c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003360:	4618      	mov	r0, r3
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40021000 	.word	0x40021000
 8003368:	0800a0a0 	.word	0x0800a0a0

0800336c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003370:	f7ff ffda 	bl	8003328 <HAL_RCC_GetHCLKFreq>
 8003374:	4602      	mov	r2, r0
 8003376:	4b06      	ldr	r3, [pc, #24]	@ (8003390 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	0adb      	lsrs	r3, r3, #11
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	4904      	ldr	r1, [pc, #16]	@ (8003394 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003382:	5ccb      	ldrb	r3, [r1, r3]
 8003384:	f003 031f 	and.w	r3, r3, #31
 8003388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800338c:	4618      	mov	r0, r3
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40021000 	.word	0x40021000
 8003394:	0800a0a0 	.word	0x0800a0a0

08003398 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	220f      	movs	r2, #15
 80033a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80033a8:	4b12      	ldr	r3, [pc, #72]	@ (80033f4 <HAL_RCC_GetClockConfig+0x5c>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f003 0203 	and.w	r2, r3, #3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80033b4:	4b0f      	ldr	r3, [pc, #60]	@ (80033f4 <HAL_RCC_GetClockConfig+0x5c>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80033c0:	4b0c      	ldr	r3, [pc, #48]	@ (80033f4 <HAL_RCC_GetClockConfig+0x5c>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80033cc:	4b09      	ldr	r3, [pc, #36]	@ (80033f4 <HAL_RCC_GetClockConfig+0x5c>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	08db      	lsrs	r3, r3, #3
 80033d2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80033da:	4b07      	ldr	r3, [pc, #28]	@ (80033f8 <HAL_RCC_GetClockConfig+0x60>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 020f 	and.w	r2, r3, #15
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	601a      	str	r2, [r3, #0]
}
 80033e6:	bf00      	nop
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	40021000 	.word	0x40021000
 80033f8:	40022000 	.word	0x40022000

080033fc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b087      	sub	sp, #28
 8003400:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003402:	4b1e      	ldr	r3, [pc, #120]	@ (800347c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800340c:	4b1b      	ldr	r3, [pc, #108]	@ (800347c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	091b      	lsrs	r3, r3, #4
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	3301      	adds	r3, #1
 8003418:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	2b03      	cmp	r3, #3
 800341e:	d10c      	bne.n	800343a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003420:	4a17      	ldr	r2, [pc, #92]	@ (8003480 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	fbb2 f3f3 	udiv	r3, r2, r3
 8003428:	4a14      	ldr	r2, [pc, #80]	@ (800347c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800342a:	68d2      	ldr	r2, [r2, #12]
 800342c:	0a12      	lsrs	r2, r2, #8
 800342e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003432:	fb02 f303 	mul.w	r3, r2, r3
 8003436:	617b      	str	r3, [r7, #20]
    break;
 8003438:	e00c      	b.n	8003454 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800343a:	4a12      	ldr	r2, [pc, #72]	@ (8003484 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003442:	4a0e      	ldr	r2, [pc, #56]	@ (800347c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003444:	68d2      	ldr	r2, [r2, #12]
 8003446:	0a12      	lsrs	r2, r2, #8
 8003448:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800344c:	fb02 f303 	mul.w	r3, r2, r3
 8003450:	617b      	str	r3, [r7, #20]
    break;
 8003452:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003454:	4b09      	ldr	r3, [pc, #36]	@ (800347c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	0e5b      	lsrs	r3, r3, #25
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	3301      	adds	r3, #1
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	fbb2 f3f3 	udiv	r3, r2, r3
 800346c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800346e:	687b      	ldr	r3, [r7, #4]
}
 8003470:	4618      	mov	r0, r3
 8003472:	371c      	adds	r7, #28
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	40021000 	.word	0x40021000
 8003480:	016e3600 	.word	0x016e3600
 8003484:	00f42400 	.word	0x00f42400

08003488 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003490:	2300      	movs	r3, #0
 8003492:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003494:	2300      	movs	r3, #0
 8003496:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 8098 	beq.w	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034a6:	2300      	movs	r3, #0
 80034a8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034aa:	4b43      	ldr	r3, [pc, #268]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10d      	bne.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b6:	4b40      	ldr	r3, [pc, #256]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ba:	4a3f      	ldr	r2, [pc, #252]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80034c2:	4b3d      	ldr	r3, [pc, #244]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ca:	60bb      	str	r3, [r7, #8]
 80034cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ce:	2301      	movs	r3, #1
 80034d0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034d2:	4b3a      	ldr	r3, [pc, #232]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a39      	ldr	r2, [pc, #228]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80034d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034de:	f7fe fc07 	bl	8001cf0 <HAL_GetTick>
 80034e2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034e4:	e009      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e6:	f7fe fc03 	bl	8001cf0 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d902      	bls.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	74fb      	strb	r3, [r7, #19]
        break;
 80034f8:	e005      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034fa:	4b30      	ldr	r3, [pc, #192]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0ef      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003506:	7cfb      	ldrb	r3, [r7, #19]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d159      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800350c:	4b2a      	ldr	r3, [pc, #168]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800350e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003512:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003516:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d01e      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	429a      	cmp	r2, r3
 8003526:	d019      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003528:	4b23      	ldr	r3, [pc, #140]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800352a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800352e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003532:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003534:	4b20      	ldr	r3, [pc, #128]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800353a:	4a1f      	ldr	r2, [pc, #124]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800353c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003540:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003544:	4b1c      	ldr	r3, [pc, #112]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800354a:	4a1b      	ldr	r2, [pc, #108]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800354c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003550:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003554:	4a18      	ldr	r2, [pc, #96]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d016      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003566:	f7fe fbc3 	bl	8001cf0 <HAL_GetTick>
 800356a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800356c:	e00b      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800356e:	f7fe fbbf 	bl	8001cf0 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	f241 3288 	movw	r2, #5000	@ 0x1388
 800357c:	4293      	cmp	r3, r2
 800357e:	d902      	bls.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	74fb      	strb	r3, [r7, #19]
            break;
 8003584:	e006      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003586:	4b0c      	ldr	r3, [pc, #48]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0ec      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003594:	7cfb      	ldrb	r3, [r7, #19]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10b      	bne.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800359a:	4b07      	ldr	r3, [pc, #28]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800359c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a8:	4903      	ldr	r1, [pc, #12]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80035b0:	e008      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035b2:	7cfb      	ldrb	r3, [r7, #19]
 80035b4:	74bb      	strb	r3, [r7, #18]
 80035b6:	e005      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80035b8:	40021000 	.word	0x40021000
 80035bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c0:	7cfb      	ldrb	r3, [r7, #19]
 80035c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035c4:	7c7b      	ldrb	r3, [r7, #17]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d105      	bne.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ca:	4ba6      	ldr	r3, [pc, #664]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ce:	4aa5      	ldr	r2, [pc, #660]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035d4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00a      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035e2:	4ba0      	ldr	r3, [pc, #640]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e8:	f023 0203 	bic.w	r2, r3, #3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	499c      	ldr	r1, [pc, #624]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00a      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003604:	4b97      	ldr	r3, [pc, #604]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800360a:	f023 020c 	bic.w	r2, r3, #12
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	4994      	ldr	r1, [pc, #592]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003614:	4313      	orrs	r3, r2
 8003616:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0304 	and.w	r3, r3, #4
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00a      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003626:	4b8f      	ldr	r3, [pc, #572]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800362c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	498b      	ldr	r1, [pc, #556]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003636:	4313      	orrs	r3, r2
 8003638:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00a      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003648:	4b86      	ldr	r3, [pc, #536]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800364a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800364e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	4983      	ldr	r1, [pc, #524]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003658:	4313      	orrs	r3, r2
 800365a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0320 	and.w	r3, r3, #32
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800366a:	4b7e      	ldr	r3, [pc, #504]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800366c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003670:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	497a      	ldr	r1, [pc, #488]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800367a:	4313      	orrs	r3, r2
 800367c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00a      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800368c:	4b75      	ldr	r3, [pc, #468]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800368e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003692:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	4972      	ldr	r1, [pc, #456]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800369c:	4313      	orrs	r3, r2
 800369e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00a      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036ae:	4b6d      	ldr	r3, [pc, #436]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	4969      	ldr	r1, [pc, #420]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00a      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036d0:	4b64      	ldr	r3, [pc, #400]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036d6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	4961      	ldr	r1, [pc, #388]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00a      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036f2:	4b5c      	ldr	r3, [pc, #368]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036f8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003700:	4958      	ldr	r1, [pc, #352]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003702:	4313      	orrs	r3, r2
 8003704:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003710:	2b00      	cmp	r3, #0
 8003712:	d015      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003714:	4b53      	ldr	r3, [pc, #332]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800371a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003722:	4950      	ldr	r1, [pc, #320]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003724:	4313      	orrs	r3, r2
 8003726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800372e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003732:	d105      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003734:	4b4b      	ldr	r3, [pc, #300]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	4a4a      	ldr	r2, [pc, #296]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800373a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800373e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003748:	2b00      	cmp	r3, #0
 800374a:	d015      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800374c:	4b45      	ldr	r3, [pc, #276]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800374e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003752:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800375a:	4942      	ldr	r1, [pc, #264]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800375c:	4313      	orrs	r3, r2
 800375e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003766:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800376a:	d105      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800376c:	4b3d      	ldr	r3, [pc, #244]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	4a3c      	ldr	r2, [pc, #240]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003772:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003776:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d015      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003784:	4b37      	ldr	r3, [pc, #220]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800378a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003792:	4934      	ldr	r1, [pc, #208]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003794:	4313      	orrs	r3, r2
 8003796:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037a2:	d105      	bne.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037a4:	4b2f      	ldr	r3, [pc, #188]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	4a2e      	ldr	r2, [pc, #184]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037ae:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d015      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037bc:	4b29      	ldr	r3, [pc, #164]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ca:	4926      	ldr	r1, [pc, #152]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037da:	d105      	bne.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037dc:	4b21      	ldr	r3, [pc, #132]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	4a20      	ldr	r2, [pc, #128]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037e6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d015      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003802:	4918      	ldr	r1, [pc, #96]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003804:	4313      	orrs	r3, r2
 8003806:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800380e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003812:	d105      	bne.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003814:	4b13      	ldr	r3, [pc, #76]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	4a12      	ldr	r2, [pc, #72]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800381a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800381e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d015      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800382c:	4b0d      	ldr	r3, [pc, #52]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800382e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003832:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800383a:	490a      	ldr	r1, [pc, #40]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800383c:	4313      	orrs	r3, r2
 800383e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003846:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800384a:	d105      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800384c:	4b05      	ldr	r3, [pc, #20]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	4a04      	ldr	r2, [pc, #16]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003852:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003856:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003858:	7cbb      	ldrb	r3, [r7, #18]
}
 800385a:	4618      	mov	r0, r3
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	40021000 	.word	0x40021000

08003868 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e049      	b.n	800390e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d106      	bne.n	8003894 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f841 	bl	8003916 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2202      	movs	r2, #2
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3304      	adds	r3, #4
 80038a4:	4619      	mov	r1, r3
 80038a6:	4610      	mov	r0, r2
 80038a8:	f000 fa22 	bl	8003cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003916:	b480      	push	{r7}
 8003918:	b083      	sub	sp, #12
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800391e:	bf00      	nop
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
	...

0800392c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b01      	cmp	r3, #1
 800393e:	d001      	beq.n	8003944 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e04a      	b.n	80039da <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2202      	movs	r2, #2
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0201 	orr.w	r2, r2, #1
 800395a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a21      	ldr	r2, [pc, #132]	@ (80039e8 <HAL_TIM_Base_Start_IT+0xbc>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d018      	beq.n	8003998 <HAL_TIM_Base_Start_IT+0x6c>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800396e:	d013      	beq.n	8003998 <HAL_TIM_Base_Start_IT+0x6c>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a1d      	ldr	r2, [pc, #116]	@ (80039ec <HAL_TIM_Base_Start_IT+0xc0>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d00e      	beq.n	8003998 <HAL_TIM_Base_Start_IT+0x6c>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a1c      	ldr	r2, [pc, #112]	@ (80039f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d009      	beq.n	8003998 <HAL_TIM_Base_Start_IT+0x6c>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a1a      	ldr	r2, [pc, #104]	@ (80039f4 <HAL_TIM_Base_Start_IT+0xc8>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d004      	beq.n	8003998 <HAL_TIM_Base_Start_IT+0x6c>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a19      	ldr	r2, [pc, #100]	@ (80039f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d115      	bne.n	80039c4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689a      	ldr	r2, [r3, #8]
 800399e:	4b17      	ldr	r3, [pc, #92]	@ (80039fc <HAL_TIM_Base_Start_IT+0xd0>)
 80039a0:	4013      	ands	r3, r2
 80039a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2b06      	cmp	r3, #6
 80039a8:	d015      	beq.n	80039d6 <HAL_TIM_Base_Start_IT+0xaa>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039b0:	d011      	beq.n	80039d6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f042 0201 	orr.w	r2, r2, #1
 80039c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039c2:	e008      	b.n	80039d6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f042 0201 	orr.w	r2, r2, #1
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	e000      	b.n	80039d8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40012c00 	.word	0x40012c00
 80039ec:	40000400 	.word	0x40000400
 80039f0:	40000800 	.word	0x40000800
 80039f4:	40013400 	.word	0x40013400
 80039f8:	40014000 	.word	0x40014000
 80039fc:	00010007 	.word	0x00010007

08003a00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d020      	beq.n	8003a64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d01b      	beq.n	8003a64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f06f 0202 	mvn.w	r2, #2
 8003a34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f931 	bl	8003cb2 <HAL_TIM_IC_CaptureCallback>
 8003a50:	e005      	b.n	8003a5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f923 	bl	8003c9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 f934 	bl	8003cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f003 0304 	and.w	r3, r3, #4
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d020      	beq.n	8003ab0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d01b      	beq.n	8003ab0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f06f 0204 	mvn.w	r2, #4
 8003a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2202      	movs	r2, #2
 8003a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f90b 	bl	8003cb2 <HAL_TIM_IC_CaptureCallback>
 8003a9c:	e005      	b.n	8003aaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f8fd 	bl	8003c9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f90e 	bl	8003cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	f003 0308 	and.w	r3, r3, #8
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d020      	beq.n	8003afc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f003 0308 	and.w	r3, r3, #8
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d01b      	beq.n	8003afc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f06f 0208 	mvn.w	r2, #8
 8003acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2204      	movs	r2, #4
 8003ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	f003 0303 	and.w	r3, r3, #3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d003      	beq.n	8003aea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f8e5 	bl	8003cb2 <HAL_TIM_IC_CaptureCallback>
 8003ae8:	e005      	b.n	8003af6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f8d7 	bl	8003c9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 f8e8 	bl	8003cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	f003 0310 	and.w	r3, r3, #16
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d020      	beq.n	8003b48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f003 0310 	and.w	r3, r3, #16
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d01b      	beq.n	8003b48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f06f 0210 	mvn.w	r2, #16
 8003b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2208      	movs	r2, #8
 8003b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f8bf 	bl	8003cb2 <HAL_TIM_IC_CaptureCallback>
 8003b34:	e005      	b.n	8003b42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f8b1 	bl	8003c9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 f8c2 	bl	8003cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00c      	beq.n	8003b6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d007      	beq.n	8003b6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f06f 0201 	mvn.w	r2, #1
 8003b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fd fd6a 	bl	8001640 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d104      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00c      	beq.n	8003b9a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d007      	beq.n	8003b9a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f951 	bl	8003e3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00c      	beq.n	8003bbe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d007      	beq.n	8003bbe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f949 	bl	8003e50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00c      	beq.n	8003be2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d007      	beq.n	8003be2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 f87c 	bl	8003cda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	f003 0320 	and.w	r3, r3, #32
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00c      	beq.n	8003c06 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f003 0320 	and.w	r3, r3, #32
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d007      	beq.n	8003c06 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f06f 0220 	mvn.w	r2, #32
 8003bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 f911 	bl	8003e28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00c      	beq.n	8003c2a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d007      	beq.n	8003c2a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003c22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 f91d 	bl	8003e64 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00c      	beq.n	8003c4e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d007      	beq.n	8003c4e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 f915 	bl	8003e78 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00c      	beq.n	8003c72 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d007      	beq.n	8003c72 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f90d 	bl	8003e8c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00c      	beq.n	8003c96 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d007      	beq.n	8003c96 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f905 	bl	8003ea0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c96:	bf00      	nop
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b083      	sub	sp, #12
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
	...

08003cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a42      	ldr	r2, [pc, #264]	@ (8003e0c <TIM_Base_SetConfig+0x11c>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d00f      	beq.n	8003d28 <TIM_Base_SetConfig+0x38>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d0e:	d00b      	beq.n	8003d28 <TIM_Base_SetConfig+0x38>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a3f      	ldr	r2, [pc, #252]	@ (8003e10 <TIM_Base_SetConfig+0x120>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d007      	beq.n	8003d28 <TIM_Base_SetConfig+0x38>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a3e      	ldr	r2, [pc, #248]	@ (8003e14 <TIM_Base_SetConfig+0x124>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d003      	beq.n	8003d28 <TIM_Base_SetConfig+0x38>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a3d      	ldr	r2, [pc, #244]	@ (8003e18 <TIM_Base_SetConfig+0x128>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d108      	bne.n	8003d3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a33      	ldr	r2, [pc, #204]	@ (8003e0c <TIM_Base_SetConfig+0x11c>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d01b      	beq.n	8003d7a <TIM_Base_SetConfig+0x8a>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d48:	d017      	beq.n	8003d7a <TIM_Base_SetConfig+0x8a>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a30      	ldr	r2, [pc, #192]	@ (8003e10 <TIM_Base_SetConfig+0x120>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d013      	beq.n	8003d7a <TIM_Base_SetConfig+0x8a>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a2f      	ldr	r2, [pc, #188]	@ (8003e14 <TIM_Base_SetConfig+0x124>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d00f      	beq.n	8003d7a <TIM_Base_SetConfig+0x8a>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a2e      	ldr	r2, [pc, #184]	@ (8003e18 <TIM_Base_SetConfig+0x128>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d00b      	beq.n	8003d7a <TIM_Base_SetConfig+0x8a>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a2d      	ldr	r2, [pc, #180]	@ (8003e1c <TIM_Base_SetConfig+0x12c>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d007      	beq.n	8003d7a <TIM_Base_SetConfig+0x8a>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a2c      	ldr	r2, [pc, #176]	@ (8003e20 <TIM_Base_SetConfig+0x130>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d003      	beq.n	8003d7a <TIM_Base_SetConfig+0x8a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a2b      	ldr	r2, [pc, #172]	@ (8003e24 <TIM_Base_SetConfig+0x134>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d108      	bne.n	8003d8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a16      	ldr	r2, [pc, #88]	@ (8003e0c <TIM_Base_SetConfig+0x11c>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d00f      	beq.n	8003dd8 <TIM_Base_SetConfig+0xe8>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a17      	ldr	r2, [pc, #92]	@ (8003e18 <TIM_Base_SetConfig+0x128>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d00b      	beq.n	8003dd8 <TIM_Base_SetConfig+0xe8>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a16      	ldr	r2, [pc, #88]	@ (8003e1c <TIM_Base_SetConfig+0x12c>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d007      	beq.n	8003dd8 <TIM_Base_SetConfig+0xe8>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a15      	ldr	r2, [pc, #84]	@ (8003e20 <TIM_Base_SetConfig+0x130>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d003      	beq.n	8003dd8 <TIM_Base_SetConfig+0xe8>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a14      	ldr	r2, [pc, #80]	@ (8003e24 <TIM_Base_SetConfig+0x134>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d103      	bne.n	8003de0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	691a      	ldr	r2, [r3, #16]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d105      	bne.n	8003dfe <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	f023 0201 	bic.w	r2, r3, #1
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	611a      	str	r2, [r3, #16]
  }
}
 8003dfe:	bf00      	nop
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	40012c00 	.word	0x40012c00
 8003e10:	40000400 	.word	0x40000400
 8003e14:	40000800 	.word	0x40000800
 8003e18:	40013400 	.word	0x40013400
 8003e1c:	40014000 	.word	0x40014000
 8003e20:	40014400 	.word	0x40014400
 8003e24:	40014800 	.word	0x40014800

08003e28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e042      	b.n	8003f4c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d106      	bne.n	8003ede <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f7fd fde7 	bl	8001aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2224      	movs	r2, #36	@ 0x24
 8003ee2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0201 	bic.w	r2, r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d002      	beq.n	8003f04 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f001 f962 	bl	80051c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 fe93 	bl	8004c30 <UART_SetConfig>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e01b      	b.n	8003f4c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0201 	orr.w	r2, r2, #1
 8003f42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f001 f9e1 	bl	800530c <UART_CheckIdleState>
 8003f4a:	4603      	mov	r3, r0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b08a      	sub	sp, #40	@ 0x28
 8003f58:	af02      	add	r7, sp, #8
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	603b      	str	r3, [r7, #0]
 8003f60:	4613      	mov	r3, r2
 8003f62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f6a:	2b20      	cmp	r3, #32
 8003f6c:	d17b      	bne.n	8004066 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d002      	beq.n	8003f7a <HAL_UART_Transmit+0x26>
 8003f74:	88fb      	ldrh	r3, [r7, #6]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e074      	b.n	8004068 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2221      	movs	r2, #33	@ 0x21
 8003f8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f8e:	f7fd feaf 	bl	8001cf0 <HAL_GetTick>
 8003f92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	88fa      	ldrh	r2, [r7, #6]
 8003f98:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	88fa      	ldrh	r2, [r7, #6]
 8003fa0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fac:	d108      	bne.n	8003fc0 <HAL_UART_Transmit+0x6c>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d104      	bne.n	8003fc0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	61bb      	str	r3, [r7, #24]
 8003fbe:	e003      	b.n	8003fc8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fc8:	e030      	b.n	800402c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	2180      	movs	r1, #128	@ 0x80
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f001 fa43 	bl	8005460 <UART_WaitOnFlagUntilTimeout>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d005      	beq.n	8003fec <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e03d      	b.n	8004068 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10b      	bne.n	800400a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004000:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	3302      	adds	r3, #2
 8004006:	61bb      	str	r3, [r7, #24]
 8004008:	e007      	b.n	800401a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	781a      	ldrb	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	3301      	adds	r3, #1
 8004018:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004020:	b29b      	uxth	r3, r3
 8004022:	3b01      	subs	r3, #1
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004032:	b29b      	uxth	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1c8      	bne.n	8003fca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	2200      	movs	r2, #0
 8004040:	2140      	movs	r1, #64	@ 0x40
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f001 fa0c 	bl	8005460 <UART_WaitOnFlagUntilTimeout>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d005      	beq.n	800405a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2220      	movs	r2, #32
 8004052:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e006      	b.n	8004068 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2220      	movs	r2, #32
 800405e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004062:	2300      	movs	r3, #0
 8004064:	e000      	b.n	8004068 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004066:	2302      	movs	r3, #2
  }
}
 8004068:	4618      	mov	r0, r3
 800406a:	3720      	adds	r7, #32
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b08a      	sub	sp, #40	@ 0x28
 8004074:	af02      	add	r7, sp, #8
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	603b      	str	r3, [r7, #0]
 800407c:	4613      	mov	r3, r2
 800407e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004086:	2b20      	cmp	r3, #32
 8004088:	f040 80b5 	bne.w	80041f6 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <HAL_UART_Receive+0x28>
 8004092:	88fb      	ldrh	r3, [r7, #6]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e0ad      	b.n	80041f8 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2222      	movs	r2, #34	@ 0x22
 80040a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040b2:	f7fd fe1d 	bl	8001cf0 <HAL_GetTick>
 80040b6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	88fa      	ldrh	r2, [r7, #6]
 80040bc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	88fa      	ldrh	r2, [r7, #6]
 80040c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040d0:	d10e      	bne.n	80040f0 <HAL_UART_Receive+0x80>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d105      	bne.n	80040e6 <HAL_UART_Receive+0x76>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80040e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80040e4:	e02d      	b.n	8004142 <HAL_UART_Receive+0xd2>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	22ff      	movs	r2, #255	@ 0xff
 80040ea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80040ee:	e028      	b.n	8004142 <HAL_UART_Receive+0xd2>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10d      	bne.n	8004114 <HAL_UART_Receive+0xa4>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d104      	bne.n	800410a <HAL_UART_Receive+0x9a>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	22ff      	movs	r2, #255	@ 0xff
 8004104:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004108:	e01b      	b.n	8004142 <HAL_UART_Receive+0xd2>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	227f      	movs	r2, #127	@ 0x7f
 800410e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004112:	e016      	b.n	8004142 <HAL_UART_Receive+0xd2>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800411c:	d10d      	bne.n	800413a <HAL_UART_Receive+0xca>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d104      	bne.n	8004130 <HAL_UART_Receive+0xc0>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	227f      	movs	r2, #127	@ 0x7f
 800412a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800412e:	e008      	b.n	8004142 <HAL_UART_Receive+0xd2>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	223f      	movs	r2, #63	@ 0x3f
 8004134:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004138:	e003      	b.n	8004142 <HAL_UART_Receive+0xd2>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004148:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004152:	d108      	bne.n	8004166 <HAL_UART_Receive+0xf6>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d104      	bne.n	8004166 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800415c:	2300      	movs	r3, #0
 800415e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	61bb      	str	r3, [r7, #24]
 8004164:	e003      	b.n	800416e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800416a:	2300      	movs	r3, #0
 800416c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800416e:	e036      	b.n	80041de <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	2200      	movs	r2, #0
 8004178:	2120      	movs	r1, #32
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f001 f970 	bl	8005460 <UART_WaitOnFlagUntilTimeout>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d005      	beq.n	8004192 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2220      	movs	r2, #32
 800418a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e032      	b.n	80041f8 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d10c      	bne.n	80041b2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419e:	b29a      	uxth	r2, r3
 80041a0:	8a7b      	ldrh	r3, [r7, #18]
 80041a2:	4013      	ands	r3, r2
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	3302      	adds	r3, #2
 80041ae:	61bb      	str	r3, [r7, #24]
 80041b0:	e00c      	b.n	80041cc <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	8a7b      	ldrh	r3, [r7, #18]
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	4013      	ands	r3, r2
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	3301      	adds	r3, #1
 80041ca:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	3b01      	subs	r3, #1
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1c2      	bne.n	8004170 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	e000      	b.n	80041f8 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80041f6:	2302      	movs	r3, #2
  }
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3720      	adds	r7, #32
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004200:	b480      	push	{r7}
 8004202:	b091      	sub	sp, #68	@ 0x44
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	4613      	mov	r3, r2
 800420c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004214:	2b20      	cmp	r3, #32
 8004216:	d178      	bne.n	800430a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d002      	beq.n	8004224 <HAL_UART_Transmit_IT+0x24>
 800421e:	88fb      	ldrh	r3, [r7, #6]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d101      	bne.n	8004228 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e071      	b.n	800430c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	88fa      	ldrh	r2, [r7, #6]
 8004232:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	88fa      	ldrh	r2, [r7, #6]
 800423a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2221      	movs	r2, #33	@ 0x21
 8004250:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004258:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800425c:	d12a      	bne.n	80042b4 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004266:	d107      	bne.n	8004278 <HAL_UART_Transmit_IT+0x78>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d103      	bne.n	8004278 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4a29      	ldr	r2, [pc, #164]	@ (8004318 <HAL_UART_Transmit_IT+0x118>)
 8004274:	679a      	str	r2, [r3, #120]	@ 0x78
 8004276:	e002      	b.n	800427e <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4a28      	ldr	r2, [pc, #160]	@ (800431c <HAL_UART_Transmit_IT+0x11c>)
 800427c:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	3308      	adds	r3, #8
 8004284:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004288:	e853 3f00 	ldrex	r3, [r3]
 800428c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800428e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004290:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004294:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3308      	adds	r3, #8
 800429c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800429e:	637a      	str	r2, [r7, #52]	@ 0x34
 80042a0:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80042a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80042a6:	e841 2300 	strex	r3, r2, [r1]
 80042aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80042ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1e5      	bne.n	800427e <HAL_UART_Transmit_IT+0x7e>
 80042b2:	e028      	b.n	8004306 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042bc:	d107      	bne.n	80042ce <HAL_UART_Transmit_IT+0xce>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d103      	bne.n	80042ce <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	4a15      	ldr	r2, [pc, #84]	@ (8004320 <HAL_UART_Transmit_IT+0x120>)
 80042ca:	679a      	str	r2, [r3, #120]	@ 0x78
 80042cc:	e002      	b.n	80042d4 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	4a14      	ldr	r2, [pc, #80]	@ (8004324 <HAL_UART_Transmit_IT+0x124>)
 80042d2:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	e853 3f00 	ldrex	r3, [r3]
 80042e0:	613b      	str	r3, [r7, #16]
   return(result);
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	461a      	mov	r2, r3
 80042f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042f2:	623b      	str	r3, [r7, #32]
 80042f4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f6:	69f9      	ldr	r1, [r7, #28]
 80042f8:	6a3a      	ldr	r2, [r7, #32]
 80042fa:	e841 2300 	strex	r3, r2, [r1]
 80042fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1e6      	bne.n	80042d4 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8004306:	2300      	movs	r3, #0
 8004308:	e000      	b.n	800430c <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800430a:	2302      	movs	r3, #2
  }
}
 800430c:	4618      	mov	r0, r3
 800430e:	3744      	adds	r7, #68	@ 0x44
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	08005f39 	.word	0x08005f39
 800431c:	08005e59 	.word	0x08005e59
 8004320:	08005d97 	.word	0x08005d97
 8004324:	08005cdf 	.word	0x08005cdf

08004328 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b08a      	sub	sp, #40	@ 0x28
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	4613      	mov	r3, r2
 8004334:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800433c:	2b20      	cmp	r3, #32
 800433e:	d137      	bne.n	80043b0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d002      	beq.n	800434c <HAL_UART_Receive_IT+0x24>
 8004346:	88fb      	ldrh	r3, [r7, #6]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e030      	b.n	80043b2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a18      	ldr	r2, [pc, #96]	@ (80043bc <HAL_UART_Receive_IT+0x94>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d01f      	beq.n	80043a0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d018      	beq.n	80043a0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	e853 3f00 	ldrex	r3, [r3]
 800437a:	613b      	str	r3, [r7, #16]
   return(result);
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004382:	627b      	str	r3, [r7, #36]	@ 0x24
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	461a      	mov	r2, r3
 800438a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438c:	623b      	str	r3, [r7, #32]
 800438e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004390:	69f9      	ldr	r1, [r7, #28]
 8004392:	6a3a      	ldr	r2, [r7, #32]
 8004394:	e841 2300 	strex	r3, r2, [r1]
 8004398:	61bb      	str	r3, [r7, #24]
   return(result);
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1e6      	bne.n	800436e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80043a0:	88fb      	ldrh	r3, [r7, #6]
 80043a2:	461a      	mov	r2, r3
 80043a4:	68b9      	ldr	r1, [r7, #8]
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f001 f8c8 	bl	800553c <UART_Start_Receive_IT>
 80043ac:	4603      	mov	r3, r0
 80043ae:	e000      	b.n	80043b2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80043b0:	2302      	movs	r3, #2
  }
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3728      	adds	r7, #40	@ 0x28
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	40008000 	.word	0x40008000

080043c0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b08a      	sub	sp, #40	@ 0x28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	4613      	mov	r3, r2
 80043cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d4:	2b20      	cmp	r3, #32
 80043d6:	d167      	bne.n	80044a8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d002      	beq.n	80043e4 <HAL_UART_Transmit_DMA+0x24>
 80043de:	88fb      	ldrh	r3, [r7, #6]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e060      	b.n	80044aa <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	88fa      	ldrh	r2, [r7, #6]
 80043f2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	88fa      	ldrh	r2, [r7, #6]
 80043fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2221      	movs	r2, #33	@ 0x21
 800440a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004412:	2b00      	cmp	r3, #0
 8004414:	d028      	beq.n	8004468 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800441a:	4a26      	ldr	r2, [pc, #152]	@ (80044b4 <HAL_UART_Transmit_DMA+0xf4>)
 800441c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004422:	4a25      	ldr	r2, [pc, #148]	@ (80044b8 <HAL_UART_Transmit_DMA+0xf8>)
 8004424:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800442a:	4a24      	ldr	r2, [pc, #144]	@ (80044bc <HAL_UART_Transmit_DMA+0xfc>)
 800442c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004432:	2200      	movs	r2, #0
 8004434:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800443e:	4619      	mov	r1, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	3328      	adds	r3, #40	@ 0x28
 8004446:	461a      	mov	r2, r3
 8004448:	88fb      	ldrh	r3, [r7, #6]
 800444a:	f7fd fde5 	bl	8002018 <HAL_DMA_Start_IT>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d009      	beq.n	8004468 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2210      	movs	r2, #16
 8004458:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2220      	movs	r2, #32
 8004460:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e020      	b.n	80044aa <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2240      	movs	r2, #64	@ 0x40
 800446e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	3308      	adds	r3, #8
 8004476:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	e853 3f00 	ldrex	r3, [r3]
 800447e:	613b      	str	r3, [r7, #16]
   return(result);
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004486:	627b      	str	r3, [r7, #36]	@ 0x24
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	3308      	adds	r3, #8
 800448e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004490:	623a      	str	r2, [r7, #32]
 8004492:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004494:	69f9      	ldr	r1, [r7, #28]
 8004496:	6a3a      	ldr	r2, [r7, #32]
 8004498:	e841 2300 	strex	r3, r2, [r1]
 800449c:	61bb      	str	r3, [r7, #24]
   return(result);
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1e5      	bne.n	8004470 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80044a4:	2300      	movs	r3, #0
 80044a6:	e000      	b.n	80044aa <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80044a8:	2302      	movs	r3, #2
  }
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3728      	adds	r7, #40	@ 0x28
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	08005a1b 	.word	0x08005a1b
 80044b8:	08005ab5 	.word	0x08005ab5
 80044bc:	08005c3b 	.word	0x08005c3b

080044c0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b08a      	sub	sp, #40	@ 0x28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	4613      	mov	r3, r2
 80044cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044d4:	2b20      	cmp	r3, #32
 80044d6:	d137      	bne.n	8004548 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <HAL_UART_Receive_DMA+0x24>
 80044de:	88fb      	ldrh	r3, [r7, #6]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e030      	b.n	800454a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a18      	ldr	r2, [pc, #96]	@ (8004554 <HAL_UART_Receive_DMA+0x94>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d01f      	beq.n	8004538 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d018      	beq.n	8004538 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	e853 3f00 	ldrex	r3, [r3]
 8004512:	613b      	str	r3, [r7, #16]
   return(result);
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800451a:	627b      	str	r3, [r7, #36]	@ 0x24
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	461a      	mov	r2, r3
 8004522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004524:	623b      	str	r3, [r7, #32]
 8004526:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004528:	69f9      	ldr	r1, [r7, #28]
 800452a:	6a3a      	ldr	r2, [r7, #32]
 800452c:	e841 2300 	strex	r3, r2, [r1]
 8004530:	61bb      	str	r3, [r7, #24]
   return(result);
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1e6      	bne.n	8004506 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004538:	88fb      	ldrh	r3, [r7, #6]
 800453a:	461a      	mov	r2, r3
 800453c:	68b9      	ldr	r1, [r7, #8]
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f001 f91e 	bl	8005780 <UART_Start_Receive_DMA>
 8004544:	4603      	mov	r3, r0
 8004546:	e000      	b.n	800454a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004548:	2302      	movs	r3, #2
  }
}
 800454a:	4618      	mov	r0, r3
 800454c:	3728      	adds	r7, #40	@ 0x28
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	40008000 	.word	0x40008000

08004558 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b0ba      	sub	sp, #232	@ 0xe8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800457e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004582:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004586:	4013      	ands	r3, r2
 8004588:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800458c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004590:	2b00      	cmp	r3, #0
 8004592:	d11b      	bne.n	80045cc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004598:	f003 0320 	and.w	r3, r3, #32
 800459c:	2b00      	cmp	r3, #0
 800459e:	d015      	beq.n	80045cc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80045a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045a4:	f003 0320 	and.w	r3, r3, #32
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d105      	bne.n	80045b8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80045ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d009      	beq.n	80045cc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 8300 	beq.w	8004bc2 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	4798      	blx	r3
      }
      return;
 80045ca:	e2fa      	b.n	8004bc2 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80045cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 8123 	beq.w	800481c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80045d6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80045da:	4b8d      	ldr	r3, [pc, #564]	@ (8004810 <HAL_UART_IRQHandler+0x2b8>)
 80045dc:	4013      	ands	r3, r2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80045e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80045e6:	4b8b      	ldr	r3, [pc, #556]	@ (8004814 <HAL_UART_IRQHandler+0x2bc>)
 80045e8:	4013      	ands	r3, r2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f000 8116 	beq.w	800481c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80045f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d011      	beq.n	8004620 <HAL_UART_IRQHandler+0xc8>
 80045fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00b      	beq.n	8004620 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2201      	movs	r2, #1
 800460e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004616:	f043 0201 	orr.w	r2, r3, #1
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d011      	beq.n	8004650 <HAL_UART_IRQHandler+0xf8>
 800462c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00b      	beq.n	8004650 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2202      	movs	r2, #2
 800463e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004646:	f043 0204 	orr.w	r2, r3, #4
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004654:	f003 0304 	and.w	r3, r3, #4
 8004658:	2b00      	cmp	r3, #0
 800465a:	d011      	beq.n	8004680 <HAL_UART_IRQHandler+0x128>
 800465c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00b      	beq.n	8004680 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2204      	movs	r2, #4
 800466e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004676:	f043 0202 	orr.w	r2, r3, #2
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004684:	f003 0308 	and.w	r3, r3, #8
 8004688:	2b00      	cmp	r3, #0
 800468a:	d017      	beq.n	80046bc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800468c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004690:	f003 0320 	and.w	r3, r3, #32
 8004694:	2b00      	cmp	r3, #0
 8004696:	d105      	bne.n	80046a4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004698:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800469c:	4b5c      	ldr	r3, [pc, #368]	@ (8004810 <HAL_UART_IRQHandler+0x2b8>)
 800469e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00b      	beq.n	80046bc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2208      	movs	r2, #8
 80046aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046b2:	f043 0208 	orr.w	r2, r3, #8
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80046bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d012      	beq.n	80046ee <HAL_UART_IRQHandler+0x196>
 80046c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00c      	beq.n	80046ee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80046dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046e4:	f043 0220 	orr.w	r2, r3, #32
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 8266 	beq.w	8004bc6 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80046fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046fe:	f003 0320 	and.w	r3, r3, #32
 8004702:	2b00      	cmp	r3, #0
 8004704:	d013      	beq.n	800472e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800470a:	f003 0320 	and.w	r3, r3, #32
 800470e:	2b00      	cmp	r3, #0
 8004710:	d105      	bne.n	800471e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d007      	beq.n	800472e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004734:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004742:	2b40      	cmp	r3, #64	@ 0x40
 8004744:	d005      	beq.n	8004752 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004746:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800474a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800474e:	2b00      	cmp	r3, #0
 8004750:	d054      	beq.n	80047fc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f001 f8fb 	bl	800594e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004762:	2b40      	cmp	r3, #64	@ 0x40
 8004764:	d146      	bne.n	80047f4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	3308      	adds	r3, #8
 800476c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004770:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004774:	e853 3f00 	ldrex	r3, [r3]
 8004778:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800477c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004780:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004784:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3308      	adds	r3, #8
 800478e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004792:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004796:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800479e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80047a2:	e841 2300 	strex	r3, r2, [r1]
 80047a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80047aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1d9      	bne.n	8004766 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d017      	beq.n	80047ec <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047c2:	4a15      	ldr	r2, [pc, #84]	@ (8004818 <HAL_UART_IRQHandler+0x2c0>)
 80047c4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7fd fcf7 	bl	80021c0 <HAL_DMA_Abort_IT>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d019      	beq.n	800480c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80047e6:	4610      	mov	r0, r2
 80047e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ea:	e00f      	b.n	800480c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 fa09 	bl	8004c04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f2:	e00b      	b.n	800480c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 fa05 	bl	8004c04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047fa:	e007      	b.n	800480c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 fa01 	bl	8004c04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800480a:	e1dc      	b.n	8004bc6 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800480c:	bf00      	nop
    return;
 800480e:	e1da      	b.n	8004bc6 <HAL_UART_IRQHandler+0x66e>
 8004810:	10000001 	.word	0x10000001
 8004814:	04000120 	.word	0x04000120
 8004818:	08005cbb 	.word	0x08005cbb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004820:	2b01      	cmp	r3, #1
 8004822:	f040 8170 	bne.w	8004b06 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800482a:	f003 0310 	and.w	r3, r3, #16
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 8169 	beq.w	8004b06 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004838:	f003 0310 	and.w	r3, r3, #16
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 8162 	beq.w	8004b06 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2210      	movs	r2, #16
 8004848:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004854:	2b40      	cmp	r3, #64	@ 0x40
 8004856:	f040 80d8 	bne.w	8004a0a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004868:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 80af 	beq.w	80049d0 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004878:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800487c:	429a      	cmp	r2, r3
 800487e:	f080 80a7 	bcs.w	80049d0 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004888:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0320 	and.w	r3, r3, #32
 800489a:	2b00      	cmp	r3, #0
 800489c:	f040 8087 	bne.w	80049ae <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80048ac:	e853 3f00 	ldrex	r3, [r3]
 80048b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80048b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80048b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	461a      	mov	r2, r3
 80048c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80048ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80048ce:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80048d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80048da:	e841 2300 	strex	r3, r2, [r1]
 80048de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80048e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1da      	bne.n	80048a0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	3308      	adds	r3, #8
 80048f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048f4:	e853 3f00 	ldrex	r3, [r3]
 80048f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80048fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80048fc:	f023 0301 	bic.w	r3, r3, #1
 8004900:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	3308      	adds	r3, #8
 800490a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800490e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004912:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004914:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004916:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800491a:	e841 2300 	strex	r3, r2, [r1]
 800491e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004920:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1e1      	bne.n	80048ea <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	3308      	adds	r3, #8
 800492c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004930:	e853 3f00 	ldrex	r3, [r3]
 8004934:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004936:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004938:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800493c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	3308      	adds	r3, #8
 8004946:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800494a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800494c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004950:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004952:	e841 2300 	strex	r3, r2, [r1]
 8004956:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004958:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1e3      	bne.n	8004926 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2220      	movs	r2, #32
 8004962:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004972:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004974:	e853 3f00 	ldrex	r3, [r3]
 8004978:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800497a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800497c:	f023 0310 	bic.w	r3, r3, #16
 8004980:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	461a      	mov	r2, r3
 800498a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800498e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004990:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004992:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004994:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004996:	e841 2300 	strex	r3, r2, [r1]
 800499a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800499c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1e4      	bne.n	800496c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7fd fbb0 	bl	800210e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2202      	movs	r2, #2
 80049b2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	4619      	mov	r1, r3
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 f925 	bl	8004c18 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80049ce:	e0fc      	b.n	8004bca <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80049d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80049da:	429a      	cmp	r2, r3
 80049dc:	f040 80f5 	bne.w	8004bca <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0320 	and.w	r3, r3, #32
 80049ee:	2b20      	cmp	r3, #32
 80049f0:	f040 80eb 	bne.w	8004bca <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004a00:	4619      	mov	r1, r3
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f908 	bl	8004c18 <HAL_UARTEx_RxEventCallback>
      return;
 8004a08:	e0df      	b.n	8004bca <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f000 80d1 	beq.w	8004bce <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8004a2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 80cc 	beq.w	8004bce <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a3e:	e853 3f00 	ldrex	r3, [r3]
 8004a42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a4a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	461a      	mov	r2, r3
 8004a54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004a58:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a5a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a60:	e841 2300 	strex	r3, r2, [r1]
 8004a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1e4      	bne.n	8004a36 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	3308      	adds	r3, #8
 8004a72:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a76:	e853 3f00 	ldrex	r3, [r3]
 8004a7a:	623b      	str	r3, [r7, #32]
   return(result);
 8004a7c:	6a3b      	ldr	r3, [r7, #32]
 8004a7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a82:	f023 0301 	bic.w	r3, r3, #1
 8004a86:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	3308      	adds	r3, #8
 8004a90:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004a94:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a9c:	e841 2300 	strex	r3, r2, [r1]
 8004aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1e1      	bne.n	8004a6c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	e853 3f00 	ldrex	r3, [r3]
 8004ac8:	60fb      	str	r3, [r7, #12]
   return(result);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f023 0310 	bic.w	r3, r3, #16
 8004ad0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004ade:	61fb      	str	r3, [r7, #28]
 8004ae0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae2:	69b9      	ldr	r1, [r7, #24]
 8004ae4:	69fa      	ldr	r2, [r7, #28]
 8004ae6:	e841 2300 	strex	r3, r2, [r1]
 8004aea:	617b      	str	r3, [r7, #20]
   return(result);
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1e4      	bne.n	8004abc <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2202      	movs	r2, #2
 8004af6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004af8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004afc:	4619      	mov	r1, r3
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f88a 	bl	8004c18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b04:	e063      	b.n	8004bce <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00e      	beq.n	8004b30 <HAL_UART_IRQHandler+0x5d8>
 8004b12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d008      	beq.n	8004b30 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004b26:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f001 ffc5 	bl	8006ab8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b2e:	e051      	b.n	8004bd4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d014      	beq.n	8004b66 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d105      	bne.n	8004b54 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004b48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d008      	beq.n	8004b66 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d03a      	beq.n	8004bd2 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	4798      	blx	r3
    }
    return;
 8004b64:	e035      	b.n	8004bd2 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d009      	beq.n	8004b86 <HAL_UART_IRQHandler+0x62e>
 8004b72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d003      	beq.n	8004b86 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f001 fa4f 	bl	8006022 <UART_EndTransmit_IT>
    return;
 8004b84:	e026      	b.n	8004bd4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d009      	beq.n	8004ba6 <HAL_UART_IRQHandler+0x64e>
 8004b92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b96:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d003      	beq.n	8004ba6 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f001 ff9e 	bl	8006ae0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ba4:	e016      	b.n	8004bd4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004baa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d010      	beq.n	8004bd4 <HAL_UART_IRQHandler+0x67c>
 8004bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	da0c      	bge.n	8004bd4 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f001 ff86 	bl	8006acc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004bc0:	e008      	b.n	8004bd4 <HAL_UART_IRQHandler+0x67c>
      return;
 8004bc2:	bf00      	nop
 8004bc4:	e006      	b.n	8004bd4 <HAL_UART_IRQHandler+0x67c>
    return;
 8004bc6:	bf00      	nop
 8004bc8:	e004      	b.n	8004bd4 <HAL_UART_IRQHandler+0x67c>
      return;
 8004bca:	bf00      	nop
 8004bcc:	e002      	b.n	8004bd4 <HAL_UART_IRQHandler+0x67c>
      return;
 8004bce:	bf00      	nop
 8004bd0:	e000      	b.n	8004bd4 <HAL_UART_IRQHandler+0x67c>
    return;
 8004bd2:	bf00      	nop
  }
}
 8004bd4:	37e8      	adds	r7, #232	@ 0xe8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop

08004bdc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	460b      	mov	r3, r1
 8004c22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c34:	b08c      	sub	sp, #48	@ 0x30
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	689a      	ldr	r2, [r3, #8]
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	69db      	ldr	r3, [r3, #28]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	4bab      	ldr	r3, [pc, #684]	@ (8004f0c <UART_SetConfig+0x2dc>)
 8004c60:	4013      	ands	r3, r2
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	6812      	ldr	r2, [r2, #0]
 8004c66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c68:	430b      	orrs	r3, r1
 8004c6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	68da      	ldr	r2, [r3, #12]
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4aa0      	ldr	r2, [pc, #640]	@ (8004f10 <UART_SetConfig+0x2e0>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d004      	beq.n	8004c9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004ca6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	6812      	ldr	r2, [r2, #0]
 8004cae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cb0:	430b      	orrs	r3, r1
 8004cb2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cba:	f023 010f 	bic.w	r1, r3, #15
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a91      	ldr	r2, [pc, #580]	@ (8004f14 <UART_SetConfig+0x2e4>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d125      	bne.n	8004d20 <UART_SetConfig+0xf0>
 8004cd4:	4b90      	ldr	r3, [pc, #576]	@ (8004f18 <UART_SetConfig+0x2e8>)
 8004cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cda:	f003 0303 	and.w	r3, r3, #3
 8004cde:	2b03      	cmp	r3, #3
 8004ce0:	d81a      	bhi.n	8004d18 <UART_SetConfig+0xe8>
 8004ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ce8 <UART_SetConfig+0xb8>)
 8004ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce8:	08004cf9 	.word	0x08004cf9
 8004cec:	08004d09 	.word	0x08004d09
 8004cf0:	08004d01 	.word	0x08004d01
 8004cf4:	08004d11 	.word	0x08004d11
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cfe:	e0d6      	b.n	8004eae <UART_SetConfig+0x27e>
 8004d00:	2302      	movs	r3, #2
 8004d02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d06:	e0d2      	b.n	8004eae <UART_SetConfig+0x27e>
 8004d08:	2304      	movs	r3, #4
 8004d0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d0e:	e0ce      	b.n	8004eae <UART_SetConfig+0x27e>
 8004d10:	2308      	movs	r3, #8
 8004d12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d16:	e0ca      	b.n	8004eae <UART_SetConfig+0x27e>
 8004d18:	2310      	movs	r3, #16
 8004d1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d1e:	e0c6      	b.n	8004eae <UART_SetConfig+0x27e>
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a7d      	ldr	r2, [pc, #500]	@ (8004f1c <UART_SetConfig+0x2ec>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d138      	bne.n	8004d9c <UART_SetConfig+0x16c>
 8004d2a:	4b7b      	ldr	r3, [pc, #492]	@ (8004f18 <UART_SetConfig+0x2e8>)
 8004d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d30:	f003 030c 	and.w	r3, r3, #12
 8004d34:	2b0c      	cmp	r3, #12
 8004d36:	d82d      	bhi.n	8004d94 <UART_SetConfig+0x164>
 8004d38:	a201      	add	r2, pc, #4	@ (adr r2, 8004d40 <UART_SetConfig+0x110>)
 8004d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3e:	bf00      	nop
 8004d40:	08004d75 	.word	0x08004d75
 8004d44:	08004d95 	.word	0x08004d95
 8004d48:	08004d95 	.word	0x08004d95
 8004d4c:	08004d95 	.word	0x08004d95
 8004d50:	08004d85 	.word	0x08004d85
 8004d54:	08004d95 	.word	0x08004d95
 8004d58:	08004d95 	.word	0x08004d95
 8004d5c:	08004d95 	.word	0x08004d95
 8004d60:	08004d7d 	.word	0x08004d7d
 8004d64:	08004d95 	.word	0x08004d95
 8004d68:	08004d95 	.word	0x08004d95
 8004d6c:	08004d95 	.word	0x08004d95
 8004d70:	08004d8d 	.word	0x08004d8d
 8004d74:	2300      	movs	r3, #0
 8004d76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d7a:	e098      	b.n	8004eae <UART_SetConfig+0x27e>
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d82:	e094      	b.n	8004eae <UART_SetConfig+0x27e>
 8004d84:	2304      	movs	r3, #4
 8004d86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d8a:	e090      	b.n	8004eae <UART_SetConfig+0x27e>
 8004d8c:	2308      	movs	r3, #8
 8004d8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d92:	e08c      	b.n	8004eae <UART_SetConfig+0x27e>
 8004d94:	2310      	movs	r3, #16
 8004d96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d9a:	e088      	b.n	8004eae <UART_SetConfig+0x27e>
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a5f      	ldr	r2, [pc, #380]	@ (8004f20 <UART_SetConfig+0x2f0>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d125      	bne.n	8004df2 <UART_SetConfig+0x1c2>
 8004da6:	4b5c      	ldr	r3, [pc, #368]	@ (8004f18 <UART_SetConfig+0x2e8>)
 8004da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004db0:	2b30      	cmp	r3, #48	@ 0x30
 8004db2:	d016      	beq.n	8004de2 <UART_SetConfig+0x1b2>
 8004db4:	2b30      	cmp	r3, #48	@ 0x30
 8004db6:	d818      	bhi.n	8004dea <UART_SetConfig+0x1ba>
 8004db8:	2b20      	cmp	r3, #32
 8004dba:	d00a      	beq.n	8004dd2 <UART_SetConfig+0x1a2>
 8004dbc:	2b20      	cmp	r3, #32
 8004dbe:	d814      	bhi.n	8004dea <UART_SetConfig+0x1ba>
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d002      	beq.n	8004dca <UART_SetConfig+0x19a>
 8004dc4:	2b10      	cmp	r3, #16
 8004dc6:	d008      	beq.n	8004dda <UART_SetConfig+0x1aa>
 8004dc8:	e00f      	b.n	8004dea <UART_SetConfig+0x1ba>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dd0:	e06d      	b.n	8004eae <UART_SetConfig+0x27e>
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dd8:	e069      	b.n	8004eae <UART_SetConfig+0x27e>
 8004dda:	2304      	movs	r3, #4
 8004ddc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004de0:	e065      	b.n	8004eae <UART_SetConfig+0x27e>
 8004de2:	2308      	movs	r3, #8
 8004de4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004de8:	e061      	b.n	8004eae <UART_SetConfig+0x27e>
 8004dea:	2310      	movs	r3, #16
 8004dec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004df0:	e05d      	b.n	8004eae <UART_SetConfig+0x27e>
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a4b      	ldr	r2, [pc, #300]	@ (8004f24 <UART_SetConfig+0x2f4>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d125      	bne.n	8004e48 <UART_SetConfig+0x218>
 8004dfc:	4b46      	ldr	r3, [pc, #280]	@ (8004f18 <UART_SetConfig+0x2e8>)
 8004dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e02:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004e06:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e08:	d016      	beq.n	8004e38 <UART_SetConfig+0x208>
 8004e0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e0c:	d818      	bhi.n	8004e40 <UART_SetConfig+0x210>
 8004e0e:	2b80      	cmp	r3, #128	@ 0x80
 8004e10:	d00a      	beq.n	8004e28 <UART_SetConfig+0x1f8>
 8004e12:	2b80      	cmp	r3, #128	@ 0x80
 8004e14:	d814      	bhi.n	8004e40 <UART_SetConfig+0x210>
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d002      	beq.n	8004e20 <UART_SetConfig+0x1f0>
 8004e1a:	2b40      	cmp	r3, #64	@ 0x40
 8004e1c:	d008      	beq.n	8004e30 <UART_SetConfig+0x200>
 8004e1e:	e00f      	b.n	8004e40 <UART_SetConfig+0x210>
 8004e20:	2300      	movs	r3, #0
 8004e22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e26:	e042      	b.n	8004eae <UART_SetConfig+0x27e>
 8004e28:	2302      	movs	r3, #2
 8004e2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e2e:	e03e      	b.n	8004eae <UART_SetConfig+0x27e>
 8004e30:	2304      	movs	r3, #4
 8004e32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e36:	e03a      	b.n	8004eae <UART_SetConfig+0x27e>
 8004e38:	2308      	movs	r3, #8
 8004e3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e3e:	e036      	b.n	8004eae <UART_SetConfig+0x27e>
 8004e40:	2310      	movs	r3, #16
 8004e42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e46:	e032      	b.n	8004eae <UART_SetConfig+0x27e>
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a30      	ldr	r2, [pc, #192]	@ (8004f10 <UART_SetConfig+0x2e0>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d12a      	bne.n	8004ea8 <UART_SetConfig+0x278>
 8004e52:	4b31      	ldr	r3, [pc, #196]	@ (8004f18 <UART_SetConfig+0x2e8>)
 8004e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e58:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004e5c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e60:	d01a      	beq.n	8004e98 <UART_SetConfig+0x268>
 8004e62:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e66:	d81b      	bhi.n	8004ea0 <UART_SetConfig+0x270>
 8004e68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e6c:	d00c      	beq.n	8004e88 <UART_SetConfig+0x258>
 8004e6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e72:	d815      	bhi.n	8004ea0 <UART_SetConfig+0x270>
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d003      	beq.n	8004e80 <UART_SetConfig+0x250>
 8004e78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e7c:	d008      	beq.n	8004e90 <UART_SetConfig+0x260>
 8004e7e:	e00f      	b.n	8004ea0 <UART_SetConfig+0x270>
 8004e80:	2300      	movs	r3, #0
 8004e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e86:	e012      	b.n	8004eae <UART_SetConfig+0x27e>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e8e:	e00e      	b.n	8004eae <UART_SetConfig+0x27e>
 8004e90:	2304      	movs	r3, #4
 8004e92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e96:	e00a      	b.n	8004eae <UART_SetConfig+0x27e>
 8004e98:	2308      	movs	r3, #8
 8004e9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e9e:	e006      	b.n	8004eae <UART_SetConfig+0x27e>
 8004ea0:	2310      	movs	r3, #16
 8004ea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ea6:	e002      	b.n	8004eae <UART_SetConfig+0x27e>
 8004ea8:	2310      	movs	r3, #16
 8004eaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a17      	ldr	r2, [pc, #92]	@ (8004f10 <UART_SetConfig+0x2e0>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	f040 80a8 	bne.w	800500a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004eba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d834      	bhi.n	8004f2c <UART_SetConfig+0x2fc>
 8004ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ec8 <UART_SetConfig+0x298>)
 8004ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec8:	08004eed 	.word	0x08004eed
 8004ecc:	08004f2d 	.word	0x08004f2d
 8004ed0:	08004ef5 	.word	0x08004ef5
 8004ed4:	08004f2d 	.word	0x08004f2d
 8004ed8:	08004efb 	.word	0x08004efb
 8004edc:	08004f2d 	.word	0x08004f2d
 8004ee0:	08004f2d 	.word	0x08004f2d
 8004ee4:	08004f2d 	.word	0x08004f2d
 8004ee8:	08004f03 	.word	0x08004f03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004eec:	f7fe fa28 	bl	8003340 <HAL_RCC_GetPCLK1Freq>
 8004ef0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ef2:	e021      	b.n	8004f38 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8004f28 <UART_SetConfig+0x2f8>)
 8004ef6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ef8:	e01e      	b.n	8004f38 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004efa:	f7fe f9b3 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 8004efe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f00:	e01a      	b.n	8004f38 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f08:	e016      	b.n	8004f38 <UART_SetConfig+0x308>
 8004f0a:	bf00      	nop
 8004f0c:	cfff69f3 	.word	0xcfff69f3
 8004f10:	40008000 	.word	0x40008000
 8004f14:	40013800 	.word	0x40013800
 8004f18:	40021000 	.word	0x40021000
 8004f1c:	40004400 	.word	0x40004400
 8004f20:	40004800 	.word	0x40004800
 8004f24:	40004c00 	.word	0x40004c00
 8004f28:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004f36:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f000 812a 	beq.w	8005194 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f44:	4a9e      	ldr	r2, [pc, #632]	@ (80051c0 <UART_SetConfig+0x590>)
 8004f46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f52:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	4413      	add	r3, r2
 8004f5e:	69ba      	ldr	r2, [r7, #24]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d305      	bcc.n	8004f70 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f6a:	69ba      	ldr	r2, [r7, #24]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d903      	bls.n	8004f78 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004f76:	e10d      	b.n	8005194 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	60bb      	str	r3, [r7, #8]
 8004f7e:	60fa      	str	r2, [r7, #12]
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f84:	4a8e      	ldr	r2, [pc, #568]	@ (80051c0 <UART_SetConfig+0x590>)
 8004f86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	603b      	str	r3, [r7, #0]
 8004f90:	607a      	str	r2, [r7, #4]
 8004f92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f9a:	f7fb fbd5 	bl	8000748 <__aeabi_uldivmod>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	4610      	mov	r0, r2
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	f04f 0200 	mov.w	r2, #0
 8004faa:	f04f 0300 	mov.w	r3, #0
 8004fae:	020b      	lsls	r3, r1, #8
 8004fb0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004fb4:	0202      	lsls	r2, r0, #8
 8004fb6:	6979      	ldr	r1, [r7, #20]
 8004fb8:	6849      	ldr	r1, [r1, #4]
 8004fba:	0849      	lsrs	r1, r1, #1
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	460c      	mov	r4, r1
 8004fc0:	4605      	mov	r5, r0
 8004fc2:	eb12 0804 	adds.w	r8, r2, r4
 8004fc6:	eb43 0905 	adc.w	r9, r3, r5
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	469a      	mov	sl, r3
 8004fd2:	4693      	mov	fp, r2
 8004fd4:	4652      	mov	r2, sl
 8004fd6:	465b      	mov	r3, fp
 8004fd8:	4640      	mov	r0, r8
 8004fda:	4649      	mov	r1, r9
 8004fdc:	f7fb fbb4 	bl	8000748 <__aeabi_uldivmod>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fe8:	6a3b      	ldr	r3, [r7, #32]
 8004fea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fee:	d308      	bcc.n	8005002 <UART_SetConfig+0x3d2>
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ff6:	d204      	bcs.n	8005002 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	6a3a      	ldr	r2, [r7, #32]
 8004ffe:	60da      	str	r2, [r3, #12]
 8005000:	e0c8      	b.n	8005194 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005008:	e0c4      	b.n	8005194 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005012:	d167      	bne.n	80050e4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005014:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005018:	2b08      	cmp	r3, #8
 800501a:	d828      	bhi.n	800506e <UART_SetConfig+0x43e>
 800501c:	a201      	add	r2, pc, #4	@ (adr r2, 8005024 <UART_SetConfig+0x3f4>)
 800501e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005022:	bf00      	nop
 8005024:	08005049 	.word	0x08005049
 8005028:	08005051 	.word	0x08005051
 800502c:	08005059 	.word	0x08005059
 8005030:	0800506f 	.word	0x0800506f
 8005034:	0800505f 	.word	0x0800505f
 8005038:	0800506f 	.word	0x0800506f
 800503c:	0800506f 	.word	0x0800506f
 8005040:	0800506f 	.word	0x0800506f
 8005044:	08005067 	.word	0x08005067
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005048:	f7fe f97a 	bl	8003340 <HAL_RCC_GetPCLK1Freq>
 800504c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800504e:	e014      	b.n	800507a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005050:	f7fe f98c 	bl	800336c <HAL_RCC_GetPCLK2Freq>
 8005054:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005056:	e010      	b.n	800507a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005058:	4b5a      	ldr	r3, [pc, #360]	@ (80051c4 <UART_SetConfig+0x594>)
 800505a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800505c:	e00d      	b.n	800507a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800505e:	f7fe f901 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 8005062:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005064:	e009      	b.n	800507a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005066:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800506a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800506c:	e005      	b.n	800507a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800506e:	2300      	movs	r3, #0
 8005070:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005078:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800507a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 8089 	beq.w	8005194 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005086:	4a4e      	ldr	r2, [pc, #312]	@ (80051c0 <UART_SetConfig+0x590>)
 8005088:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800508c:	461a      	mov	r2, r3
 800508e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005090:	fbb3 f3f2 	udiv	r3, r3, r2
 8005094:	005a      	lsls	r2, r3, #1
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	085b      	lsrs	r3, r3, #1
 800509c:	441a      	add	r2, r3
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050a8:	6a3b      	ldr	r3, [r7, #32]
 80050aa:	2b0f      	cmp	r3, #15
 80050ac:	d916      	bls.n	80050dc <UART_SetConfig+0x4ac>
 80050ae:	6a3b      	ldr	r3, [r7, #32]
 80050b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050b4:	d212      	bcs.n	80050dc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050b6:	6a3b      	ldr	r3, [r7, #32]
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	f023 030f 	bic.w	r3, r3, #15
 80050be:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	085b      	lsrs	r3, r3, #1
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	f003 0307 	and.w	r3, r3, #7
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	8bfb      	ldrh	r3, [r7, #30]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	8bfa      	ldrh	r2, [r7, #30]
 80050d8:	60da      	str	r2, [r3, #12]
 80050da:	e05b      	b.n	8005194 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80050e2:	e057      	b.n	8005194 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050e4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80050e8:	2b08      	cmp	r3, #8
 80050ea:	d828      	bhi.n	800513e <UART_SetConfig+0x50e>
 80050ec:	a201      	add	r2, pc, #4	@ (adr r2, 80050f4 <UART_SetConfig+0x4c4>)
 80050ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f2:	bf00      	nop
 80050f4:	08005119 	.word	0x08005119
 80050f8:	08005121 	.word	0x08005121
 80050fc:	08005129 	.word	0x08005129
 8005100:	0800513f 	.word	0x0800513f
 8005104:	0800512f 	.word	0x0800512f
 8005108:	0800513f 	.word	0x0800513f
 800510c:	0800513f 	.word	0x0800513f
 8005110:	0800513f 	.word	0x0800513f
 8005114:	08005137 	.word	0x08005137
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005118:	f7fe f912 	bl	8003340 <HAL_RCC_GetPCLK1Freq>
 800511c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800511e:	e014      	b.n	800514a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005120:	f7fe f924 	bl	800336c <HAL_RCC_GetPCLK2Freq>
 8005124:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005126:	e010      	b.n	800514a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005128:	4b26      	ldr	r3, [pc, #152]	@ (80051c4 <UART_SetConfig+0x594>)
 800512a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800512c:	e00d      	b.n	800514a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800512e:	f7fe f899 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 8005132:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005134:	e009      	b.n	800514a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005136:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800513a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800513c:	e005      	b.n	800514a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800513e:	2300      	movs	r3, #0
 8005140:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005148:	bf00      	nop
    }

    if (pclk != 0U)
 800514a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514c:	2b00      	cmp	r3, #0
 800514e:	d021      	beq.n	8005194 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005154:	4a1a      	ldr	r2, [pc, #104]	@ (80051c0 <UART_SetConfig+0x590>)
 8005156:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800515a:	461a      	mov	r2, r3
 800515c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	085b      	lsrs	r3, r3, #1
 8005168:	441a      	add	r2, r3
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005172:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	2b0f      	cmp	r3, #15
 8005178:	d909      	bls.n	800518e <UART_SetConfig+0x55e>
 800517a:	6a3b      	ldr	r3, [r7, #32]
 800517c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005180:	d205      	bcs.n	800518e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005182:	6a3b      	ldr	r3, [r7, #32]
 8005184:	b29a      	uxth	r2, r3
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	60da      	str	r2, [r3, #12]
 800518c:	e002      	b.n	8005194 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	2201      	movs	r2, #1
 8005198:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	2201      	movs	r2, #1
 80051a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	2200      	movs	r2, #0
 80051a8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	2200      	movs	r2, #0
 80051ae:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80051b0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3730      	adds	r7, #48	@ 0x30
 80051b8:	46bd      	mov	sp, r7
 80051ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051be:	bf00      	nop
 80051c0:	0800a0a8 	.word	0x0800a0a8
 80051c4:	00f42400 	.word	0x00f42400

080051c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d4:	f003 0308 	and.w	r3, r3, #8
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00a      	beq.n	80051f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00a      	beq.n	8005214 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00a      	beq.n	8005236 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800523a:	f003 0304 	and.w	r3, r3, #4
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00a      	beq.n	8005258 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	430a      	orrs	r2, r1
 8005256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800525c:	f003 0310 	and.w	r3, r3, #16
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00a      	beq.n	800527a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800527e:	f003 0320 	and.w	r3, r3, #32
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00a      	beq.n	800529c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	430a      	orrs	r2, r1
 800529a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d01a      	beq.n	80052de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052c6:	d10a      	bne.n	80052de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00a      	beq.n	8005300 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	605a      	str	r2, [r3, #4]
  }
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b098      	sub	sp, #96	@ 0x60
 8005310:	af02      	add	r7, sp, #8
 8005312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800531c:	f7fc fce8 	bl	8001cf0 <HAL_GetTick>
 8005320:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0308 	and.w	r3, r3, #8
 800532c:	2b08      	cmp	r3, #8
 800532e:	d12f      	bne.n	8005390 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005330:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005338:	2200      	movs	r2, #0
 800533a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f88e 	bl	8005460 <UART_WaitOnFlagUntilTimeout>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d022      	beq.n	8005390 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005352:	e853 3f00 	ldrex	r3, [r3]
 8005356:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800535a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800535e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	461a      	mov	r2, r3
 8005366:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005368:	647b      	str	r3, [r7, #68]	@ 0x44
 800536a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800536e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005370:	e841 2300 	strex	r3, r2, [r1]
 8005374:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1e6      	bne.n	800534a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2220      	movs	r2, #32
 8005380:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e063      	b.n	8005458 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0304 	and.w	r3, r3, #4
 800539a:	2b04      	cmp	r3, #4
 800539c:	d149      	bne.n	8005432 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800539e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053a6:	2200      	movs	r2, #0
 80053a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f857 	bl	8005460 <UART_WaitOnFlagUntilTimeout>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d03c      	beq.n	8005432 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c0:	e853 3f00 	ldrex	r3, [r3]
 80053c4:	623b      	str	r3, [r7, #32]
   return(result);
 80053c6:	6a3b      	ldr	r3, [r7, #32]
 80053c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	461a      	mov	r2, r3
 80053d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80053d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053de:	e841 2300 	strex	r3, r2, [r1]
 80053e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1e6      	bne.n	80053b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	3308      	adds	r3, #8
 80053f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	e853 3f00 	ldrex	r3, [r3]
 80053f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f023 0301 	bic.w	r3, r3, #1
 8005400:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3308      	adds	r3, #8
 8005408:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800540a:	61fa      	str	r2, [r7, #28]
 800540c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540e:	69b9      	ldr	r1, [r7, #24]
 8005410:	69fa      	ldr	r2, [r7, #28]
 8005412:	e841 2300 	strex	r3, r2, [r1]
 8005416:	617b      	str	r3, [r7, #20]
   return(result);
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1e5      	bne.n	80053ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2220      	movs	r2, #32
 8005422:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e012      	b.n	8005458 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2220      	movs	r2, #32
 8005436:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2220      	movs	r2, #32
 800543e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3758      	adds	r7, #88	@ 0x58
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	603b      	str	r3, [r7, #0]
 800546c:	4613      	mov	r3, r2
 800546e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005470:	e04f      	b.n	8005512 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005478:	d04b      	beq.n	8005512 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800547a:	f7fc fc39 	bl	8001cf0 <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	69ba      	ldr	r2, [r7, #24]
 8005486:	429a      	cmp	r2, r3
 8005488:	d302      	bcc.n	8005490 <UART_WaitOnFlagUntilTimeout+0x30>
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d101      	bne.n	8005494 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e04e      	b.n	8005532 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0304 	and.w	r3, r3, #4
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d037      	beq.n	8005512 <UART_WaitOnFlagUntilTimeout+0xb2>
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	2b80      	cmp	r3, #128	@ 0x80
 80054a6:	d034      	beq.n	8005512 <UART_WaitOnFlagUntilTimeout+0xb2>
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	2b40      	cmp	r3, #64	@ 0x40
 80054ac:	d031      	beq.n	8005512 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	69db      	ldr	r3, [r3, #28]
 80054b4:	f003 0308 	and.w	r3, r3, #8
 80054b8:	2b08      	cmp	r3, #8
 80054ba:	d110      	bne.n	80054de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2208      	movs	r2, #8
 80054c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f000 fa42 	bl	800594e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2208      	movs	r2, #8
 80054ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e029      	b.n	8005532 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	69db      	ldr	r3, [r3, #28]
 80054e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054ec:	d111      	bne.n	8005512 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f000 fa28 	bl	800594e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2220      	movs	r2, #32
 8005502:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e00f      	b.n	8005532 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69da      	ldr	r2, [r3, #28]
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	4013      	ands	r3, r2
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	429a      	cmp	r2, r3
 8005520:	bf0c      	ite	eq
 8005522:	2301      	moveq	r3, #1
 8005524:	2300      	movne	r3, #0
 8005526:	b2db      	uxtb	r3, r3
 8005528:	461a      	mov	r2, r3
 800552a:	79fb      	ldrb	r3, [r7, #7]
 800552c:	429a      	cmp	r2, r3
 800552e:	d0a0      	beq.n	8005472 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
	...

0800553c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800553c:	b480      	push	{r7}
 800553e:	b0a3      	sub	sp, #140	@ 0x8c
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	4613      	mov	r3, r2
 8005548:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	88fa      	ldrh	r2, [r7, #6]
 8005554:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	88fa      	ldrh	r2, [r7, #6]
 800555c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800556e:	d10e      	bne.n	800558e <UART_Start_Receive_IT+0x52>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d105      	bne.n	8005584 <UART_Start_Receive_IT+0x48>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800557e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005582:	e02d      	b.n	80055e0 <UART_Start_Receive_IT+0xa4>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	22ff      	movs	r2, #255	@ 0xff
 8005588:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800558c:	e028      	b.n	80055e0 <UART_Start_Receive_IT+0xa4>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10d      	bne.n	80055b2 <UART_Start_Receive_IT+0x76>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d104      	bne.n	80055a8 <UART_Start_Receive_IT+0x6c>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	22ff      	movs	r2, #255	@ 0xff
 80055a2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80055a6:	e01b      	b.n	80055e0 <UART_Start_Receive_IT+0xa4>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	227f      	movs	r2, #127	@ 0x7f
 80055ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80055b0:	e016      	b.n	80055e0 <UART_Start_Receive_IT+0xa4>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055ba:	d10d      	bne.n	80055d8 <UART_Start_Receive_IT+0x9c>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d104      	bne.n	80055ce <UART_Start_Receive_IT+0x92>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	227f      	movs	r2, #127	@ 0x7f
 80055c8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80055cc:	e008      	b.n	80055e0 <UART_Start_Receive_IT+0xa4>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	223f      	movs	r2, #63	@ 0x3f
 80055d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80055d6:	e003      	b.n	80055e0 <UART_Start_Receive_IT+0xa4>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2222      	movs	r2, #34	@ 0x22
 80055ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	3308      	adds	r3, #8
 80055f6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055fa:	e853 3f00 	ldrex	r3, [r3]
 80055fe:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8005600:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005602:	f043 0301 	orr.w	r3, r3, #1
 8005606:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	3308      	adds	r3, #8
 8005610:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005614:	673a      	str	r2, [r7, #112]	@ 0x70
 8005616:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005618:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800561a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800561c:	e841 2300 	strex	r3, r2, [r1]
 8005620:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8005622:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005624:	2b00      	cmp	r3, #0
 8005626:	d1e3      	bne.n	80055f0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800562c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005630:	d14f      	bne.n	80056d2 <UART_Start_Receive_IT+0x196>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005638:	88fa      	ldrh	r2, [r7, #6]
 800563a:	429a      	cmp	r2, r3
 800563c:	d349      	bcc.n	80056d2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005646:	d107      	bne.n	8005658 <UART_Start_Receive_IT+0x11c>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d103      	bne.n	8005658 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4a47      	ldr	r2, [pc, #284]	@ (8005770 <UART_Start_Receive_IT+0x234>)
 8005654:	675a      	str	r2, [r3, #116]	@ 0x74
 8005656:	e002      	b.n	800565e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4a46      	ldr	r2, [pc, #280]	@ (8005774 <UART_Start_Receive_IT+0x238>)
 800565c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d01a      	beq.n	800569c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800566e:	e853 3f00 	ldrex	r3, [r3]
 8005672:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005674:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005676:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800567a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	461a      	mov	r2, r3
 8005684:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005688:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800568a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800568e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005690:	e841 2300 	strex	r3, r2, [r1]
 8005694:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005696:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1e4      	bne.n	8005666 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3308      	adds	r3, #8
 80056a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056a6:	e853 3f00 	ldrex	r3, [r3]
 80056aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	3308      	adds	r3, #8
 80056ba:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80056bc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80056be:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80056c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056c4:	e841 2300 	strex	r3, r2, [r1]
 80056c8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80056ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1e5      	bne.n	800569c <UART_Start_Receive_IT+0x160>
 80056d0:	e046      	b.n	8005760 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056da:	d107      	bne.n	80056ec <UART_Start_Receive_IT+0x1b0>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d103      	bne.n	80056ec <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4a24      	ldr	r2, [pc, #144]	@ (8005778 <UART_Start_Receive_IT+0x23c>)
 80056e8:	675a      	str	r2, [r3, #116]	@ 0x74
 80056ea:	e002      	b.n	80056f2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4a23      	ldr	r2, [pc, #140]	@ (800577c <UART_Start_Receive_IT+0x240>)
 80056f0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d019      	beq.n	800572e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005702:	e853 3f00 	ldrex	r3, [r3]
 8005706:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800570e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	461a      	mov	r2, r3
 8005716:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005718:	637b      	str	r3, [r7, #52]	@ 0x34
 800571a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800571e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005720:	e841 2300 	strex	r3, r2, [r1]
 8005724:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1e6      	bne.n	80056fa <UART_Start_Receive_IT+0x1be>
 800572c:	e018      	b.n	8005760 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	e853 3f00 	ldrex	r3, [r3]
 800573a:	613b      	str	r3, [r7, #16]
   return(result);
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	f043 0320 	orr.w	r3, r3, #32
 8005742:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	461a      	mov	r2, r3
 800574a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800574c:	623b      	str	r3, [r7, #32]
 800574e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005750:	69f9      	ldr	r1, [r7, #28]
 8005752:	6a3a      	ldr	r2, [r7, #32]
 8005754:	e841 2300 	strex	r3, r2, [r1]
 8005758:	61bb      	str	r3, [r7, #24]
   return(result);
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1e6      	bne.n	800572e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	378c      	adds	r7, #140	@ 0x8c
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	0800674d 	.word	0x0800674d
 8005774:	080063e9 	.word	0x080063e9
 8005778:	08006231 	.word	0x08006231
 800577c:	08006079 	.word	0x08006079

08005780 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b096      	sub	sp, #88	@ 0x58
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	4613      	mov	r3, r2
 800578c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	88fa      	ldrh	r2, [r7, #6]
 8005798:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2222      	movs	r2, #34	@ 0x22
 80057a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d02d      	beq.n	8005812 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057bc:	4a40      	ldr	r2, [pc, #256]	@ (80058c0 <UART_Start_Receive_DMA+0x140>)
 80057be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057c6:	4a3f      	ldr	r2, [pc, #252]	@ (80058c4 <UART_Start_Receive_DMA+0x144>)
 80057c8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057d0:	4a3d      	ldr	r2, [pc, #244]	@ (80058c8 <UART_Start_Receive_DMA+0x148>)
 80057d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057da:	2200      	movs	r2, #0
 80057dc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3324      	adds	r3, #36	@ 0x24
 80057ea:	4619      	mov	r1, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057f0:	461a      	mov	r2, r3
 80057f2:	88fb      	ldrh	r3, [r7, #6]
 80057f4:	f7fc fc10 	bl	8002018 <HAL_DMA_Start_IT>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d009      	beq.n	8005812 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2210      	movs	r2, #16
 8005802:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2220      	movs	r2, #32
 800580a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e051      	b.n	80058b6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d018      	beq.n	800584c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005822:	e853 3f00 	ldrex	r3, [r3]
 8005826:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800582a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800582e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	461a      	mov	r2, r3
 8005836:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005838:	64bb      	str	r3, [r7, #72]	@ 0x48
 800583a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800583e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005840:	e841 2300 	strex	r3, r2, [r1]
 8005844:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005846:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1e6      	bne.n	800581a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	3308      	adds	r3, #8
 8005852:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005856:	e853 3f00 	ldrex	r3, [r3]
 800585a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800585c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585e:	f043 0301 	orr.w	r3, r3, #1
 8005862:	653b      	str	r3, [r7, #80]	@ 0x50
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3308      	adds	r3, #8
 800586a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800586c:	637a      	str	r2, [r7, #52]	@ 0x34
 800586e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005870:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005872:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005874:	e841 2300 	strex	r3, r2, [r1]
 8005878:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800587a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1e5      	bne.n	800584c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	3308      	adds	r3, #8
 8005886:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	e853 3f00 	ldrex	r3, [r3]
 800588e:	613b      	str	r3, [r7, #16]
   return(result);
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005896:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	3308      	adds	r3, #8
 800589e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80058a0:	623a      	str	r2, [r7, #32]
 80058a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a4:	69f9      	ldr	r1, [r7, #28]
 80058a6:	6a3a      	ldr	r2, [r7, #32]
 80058a8:	e841 2300 	strex	r3, r2, [r1]
 80058ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1e5      	bne.n	8005880 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3758      	adds	r7, #88	@ 0x58
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	08005ad1 	.word	0x08005ad1
 80058c4:	08005bfd 	.word	0x08005bfd
 80058c8:	08005c3b 	.word	0x08005c3b

080058cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b08f      	sub	sp, #60	@ 0x3c
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	e853 3f00 	ldrex	r3, [r3]
 80058e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80058e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	461a      	mov	r2, r3
 80058f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058f4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058fa:	e841 2300 	strex	r3, r2, [r1]
 80058fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1e6      	bne.n	80058d4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	3308      	adds	r3, #8
 800590c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	e853 3f00 	ldrex	r3, [r3]
 8005914:	60bb      	str	r3, [r7, #8]
   return(result);
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800591c:	633b      	str	r3, [r7, #48]	@ 0x30
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	3308      	adds	r3, #8
 8005924:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005926:	61ba      	str	r2, [r7, #24]
 8005928:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592a:	6979      	ldr	r1, [r7, #20]
 800592c:	69ba      	ldr	r2, [r7, #24]
 800592e:	e841 2300 	strex	r3, r2, [r1]
 8005932:	613b      	str	r3, [r7, #16]
   return(result);
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1e5      	bne.n	8005906 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2220      	movs	r2, #32
 800593e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8005942:	bf00      	nop
 8005944:	373c      	adds	r7, #60	@ 0x3c
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr

0800594e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800594e:	b480      	push	{r7}
 8005950:	b095      	sub	sp, #84	@ 0x54
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800595e:	e853 3f00 	ldrex	r3, [r3]
 8005962:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005966:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800596a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	461a      	mov	r2, r3
 8005972:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005974:	643b      	str	r3, [r7, #64]	@ 0x40
 8005976:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005978:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800597a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800597c:	e841 2300 	strex	r3, r2, [r1]
 8005980:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1e6      	bne.n	8005956 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	3308      	adds	r3, #8
 800598e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005990:	6a3b      	ldr	r3, [r7, #32]
 8005992:	e853 3f00 	ldrex	r3, [r3]
 8005996:	61fb      	str	r3, [r7, #28]
   return(result);
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800599e:	f023 0301 	bic.w	r3, r3, #1
 80059a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	3308      	adds	r3, #8
 80059aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059b4:	e841 2300 	strex	r3, r2, [r1]
 80059b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80059ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1e3      	bne.n	8005988 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d118      	bne.n	80059fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	e853 3f00 	ldrex	r3, [r3]
 80059d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	f023 0310 	bic.w	r3, r3, #16
 80059dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	461a      	mov	r2, r3
 80059e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059e6:	61bb      	str	r3, [r7, #24]
 80059e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ea:	6979      	ldr	r1, [r7, #20]
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	e841 2300 	strex	r3, r2, [r1]
 80059f2:	613b      	str	r3, [r7, #16]
   return(result);
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1e6      	bne.n	80059c8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2220      	movs	r2, #32
 80059fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005a0e:	bf00      	nop
 8005a10:	3754      	adds	r7, #84	@ 0x54
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr

08005a1a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b090      	sub	sp, #64	@ 0x40
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a26:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0320 	and.w	r3, r3, #32
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d137      	bne.n	8005aa6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8005a36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005a3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3308      	adds	r3, #8
 8005a44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a48:	e853 3f00 	ldrex	r3, [r3]
 8005a4c:	623b      	str	r3, [r7, #32]
   return(result);
 8005a4e:	6a3b      	ldr	r3, [r7, #32]
 8005a50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a54:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	3308      	adds	r3, #8
 8005a5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a5e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a66:	e841 2300 	strex	r3, r2, [r1]
 8005a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1e5      	bne.n	8005a3e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	e853 3f00 	ldrex	r3, [r3]
 8005a7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a86:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a90:	61fb      	str	r3, [r7, #28]
 8005a92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a94:	69b9      	ldr	r1, [r7, #24]
 8005a96:	69fa      	ldr	r2, [r7, #28]
 8005a98:	e841 2300 	strex	r3, r2, [r1]
 8005a9c:	617b      	str	r3, [r7, #20]
   return(result);
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1e6      	bne.n	8005a72 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005aa4:	e002      	b.n	8005aac <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005aa6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005aa8:	f7ff f898 	bl	8004bdc <HAL_UART_TxCpltCallback>
}
 8005aac:	bf00      	nop
 8005aae:	3740      	adds	r7, #64	@ 0x40
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ac0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f7ff f894 	bl	8004bf0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ac8:	bf00      	nop
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b09c      	sub	sp, #112	@ 0x70
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005adc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0320 	and.w	r3, r3, #32
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d171      	bne.n	8005bd0 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005aec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005aee:	2200      	movs	r2, #0
 8005af0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005af4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005afc:	e853 3f00 	ldrex	r3, [r3]
 8005b00:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b12:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b14:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b1a:	e841 2300 	strex	r3, r2, [r1]
 8005b1e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1e6      	bne.n	8005af4 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	3308      	adds	r3, #8
 8005b2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b30:	e853 3f00 	ldrex	r3, [r3]
 8005b34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b38:	f023 0301 	bic.w	r3, r3, #1
 8005b3c:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	3308      	adds	r3, #8
 8005b44:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005b46:	647a      	str	r2, [r7, #68]	@ 0x44
 8005b48:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b4e:	e841 2300 	strex	r3, r2, [r1]
 8005b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1e5      	bne.n	8005b26 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	3308      	adds	r3, #8
 8005b60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b64:	e853 3f00 	ldrex	r3, [r3]
 8005b68:	623b      	str	r3, [r7, #32]
   return(result);
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b70:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	3308      	adds	r3, #8
 8005b78:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005b7a:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b82:	e841 2300 	strex	r3, r2, [r1]
 8005b86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1e5      	bne.n	8005b5a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b90:	2220      	movs	r2, #32
 8005b92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d118      	bne.n	8005bd0 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	e853 3f00 	ldrex	r3, [r3]
 8005baa:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f023 0310 	bic.w	r3, r3, #16
 8005bb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005bb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	461a      	mov	r2, r3
 8005bba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005bbc:	61fb      	str	r3, [r7, #28]
 8005bbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc0:	69b9      	ldr	r1, [r7, #24]
 8005bc2:	69fa      	ldr	r2, [r7, #28]
 8005bc4:	e841 2300 	strex	r3, r2, [r1]
 8005bc8:	617b      	str	r3, [r7, #20]
   return(result);
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1e6      	bne.n	8005b9e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d107      	bne.n	8005bee <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005be0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005be4:	4619      	mov	r1, r3
 8005be6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005be8:	f7ff f816 	bl	8004c18 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005bec:	e002      	b.n	8005bf4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005bee:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005bf0:	f7fb fcfe 	bl	80015f0 <HAL_UART_RxCpltCallback>
}
 8005bf4:	bf00      	nop
 8005bf6:	3770      	adds	r7, #112	@ 0x70
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c08:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d109      	bne.n	8005c2c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005c1e:	085b      	lsrs	r3, r3, #1
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	4619      	mov	r1, r3
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f7fe fff7 	bl	8004c18 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c2a:	e002      	b.n	8005c32 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f7fb fcb7 	bl	80015a0 <HAL_UART_RxHalfCpltCallback>
}
 8005c32:	bf00      	nop
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b086      	sub	sp, #24
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c46:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c4e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c62:	2b80      	cmp	r3, #128	@ 0x80
 8005c64:	d109      	bne.n	8005c7a <UART_DMAError+0x40>
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	2b21      	cmp	r3, #33	@ 0x21
 8005c6a:	d106      	bne.n	8005c7a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8005c74:	6978      	ldr	r0, [r7, #20]
 8005c76:	f7ff fe29 	bl	80058cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c84:	2b40      	cmp	r3, #64	@ 0x40
 8005c86:	d109      	bne.n	8005c9c <UART_DMAError+0x62>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2b22      	cmp	r3, #34	@ 0x22
 8005c8c:	d106      	bne.n	8005c9c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8005c96:	6978      	ldr	r0, [r7, #20]
 8005c98:	f7ff fe59 	bl	800594e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ca2:	f043 0210 	orr.w	r2, r3, #16
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cac:	6978      	ldr	r0, [r7, #20]
 8005cae:	f7fe ffa9 	bl	8004c04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cb2:	bf00      	nop
 8005cb4:	3718      	adds	r7, #24
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b084      	sub	sp, #16
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f7fe ff97 	bl	8004c04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cd6:	bf00      	nop
 8005cd8:	3710      	adds	r7, #16
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b08f      	sub	sp, #60	@ 0x3c
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cec:	2b21      	cmp	r3, #33	@ 0x21
 8005cee:	d14c      	bne.n	8005d8a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d132      	bne.n	8005d62 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d02:	6a3b      	ldr	r3, [r7, #32]
 8005d04:	e853 3f00 	ldrex	r3, [r3]
 8005d08:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d10:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	461a      	mov	r2, r3
 8005d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d1c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d22:	e841 2300 	strex	r3, r2, [r1]
 8005d26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1e6      	bne.n	8005cfc <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	e853 3f00 	ldrex	r3, [r3]
 8005d3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d42:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	461a      	mov	r2, r3
 8005d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d4c:	61bb      	str	r3, [r7, #24]
 8005d4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d50:	6979      	ldr	r1, [r7, #20]
 8005d52:	69ba      	ldr	r2, [r7, #24]
 8005d54:	e841 2300 	strex	r3, r2, [r1]
 8005d58:	613b      	str	r3, [r7, #16]
   return(result);
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1e6      	bne.n	8005d2e <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005d60:	e013      	b.n	8005d8a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d66:	781a      	ldrb	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d72:	1c5a      	adds	r2, r3, #1
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	3b01      	subs	r3, #1
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8005d8a:	bf00      	nop
 8005d8c:	373c      	adds	r7, #60	@ 0x3c
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b091      	sub	sp, #68	@ 0x44
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005da4:	2b21      	cmp	r3, #33	@ 0x21
 8005da6:	d151      	bne.n	8005e4c <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d132      	bne.n	8005e1a <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dbc:	e853 3f00 	ldrex	r3, [r3]
 8005dc0:	623b      	str	r3, [r7, #32]
   return(result);
 8005dc2:	6a3b      	ldr	r3, [r7, #32]
 8005dc4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dc8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	461a      	mov	r2, r3
 8005dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd2:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005dd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dda:	e841 2300 	strex	r3, r2, [r1]
 8005dde:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1e6      	bne.n	8005db4 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	e853 3f00 	ldrex	r3, [r3]
 8005df2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005dfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	461a      	mov	r2, r3
 8005e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e04:	61fb      	str	r3, [r7, #28]
 8005e06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e08:	69b9      	ldr	r1, [r7, #24]
 8005e0a:	69fa      	ldr	r2, [r7, #28]
 8005e0c:	e841 2300 	strex	r3, r2, [r1]
 8005e10:	617b      	str	r3, [r7, #20]
   return(result);
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1e6      	bne.n	8005de6 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005e18:	e018      	b.n	8005e4c <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005e20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e22:	881b      	ldrh	r3, [r3, #0]
 8005e24:	461a      	mov	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e2e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e34:	1c9a      	adds	r2, r3, #2
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	3b01      	subs	r3, #1
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8005e4c:	bf00      	nop
 8005e4e:	3744      	adds	r7, #68	@ 0x44
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b091      	sub	sp, #68	@ 0x44
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e66:	2b21      	cmp	r3, #33	@ 0x21
 8005e68:	d160      	bne.n	8005f2c <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005e70:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005e72:	e057      	b.n	8005f24 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d133      	bne.n	8005ee8 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	3308      	adds	r3, #8
 8005e86:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e8a:	e853 3f00 	ldrex	r3, [r3]
 8005e8e:	623b      	str	r3, [r7, #32]
   return(result);
 8005e90:	6a3b      	ldr	r3, [r7, #32]
 8005e92:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005e96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	3308      	adds	r3, #8
 8005e9e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ea0:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ea6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ea8:	e841 2300 	strex	r3, r2, [r1]
 8005eac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1e5      	bne.n	8005e80 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	e853 3f00 	ldrex	r3, [r3]
 8005ec0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ec8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	461a      	mov	r2, r3
 8005ed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ed2:	61fb      	str	r3, [r7, #28]
 8005ed4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed6:	69b9      	ldr	r1, [r7, #24]
 8005ed8:	69fa      	ldr	r2, [r7, #28]
 8005eda:	e841 2300 	strex	r3, r2, [r1]
 8005ede:	617b      	str	r3, [r7, #20]
   return(result);
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1e6      	bne.n	8005eb4 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8005ee6:	e021      	b.n	8005f2c <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	69db      	ldr	r3, [r3, #28]
 8005eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d013      	beq.n	8005f1e <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005efa:	781a      	ldrb	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f06:	1c5a      	adds	r2, r3, #1
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	3b01      	subs	r3, #1
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005f1e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005f20:	3b01      	subs	r3, #1
 8005f22:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005f24:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1a4      	bne.n	8005e74 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8005f2a:	e7ff      	b.n	8005f2c <UART_TxISR_8BIT_FIFOEN+0xd4>
 8005f2c:	bf00      	nop
 8005f2e:	3744      	adds	r7, #68	@ 0x44
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b091      	sub	sp, #68	@ 0x44
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f46:	2b21      	cmp	r3, #33	@ 0x21
 8005f48:	d165      	bne.n	8006016 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005f50:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005f52:	e05c      	b.n	800600e <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d133      	bne.n	8005fc8 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	3308      	adds	r3, #8
 8005f66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f68:	6a3b      	ldr	r3, [r7, #32]
 8005f6a:	e853 3f00 	ldrex	r3, [r3]
 8005f6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005f76:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	3308      	adds	r3, #8
 8005f7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f88:	e841 2300 	strex	r3, r2, [r1]
 8005f8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1e5      	bne.n	8005f60 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	e853 3f00 	ldrex	r3, [r3]
 8005fa0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fa8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	461a      	mov	r2, r3
 8005fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb2:	61bb      	str	r3, [r7, #24]
 8005fb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb6:	6979      	ldr	r1, [r7, #20]
 8005fb8:	69ba      	ldr	r2, [r7, #24]
 8005fba:	e841 2300 	strex	r3, r2, [r1]
 8005fbe:	613b      	str	r3, [r7, #16]
   return(result);
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1e6      	bne.n	8005f94 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8005fc6:	e026      	b.n	8006016 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d018      	beq.n	8006008 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fda:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fde:	881b      	ldrh	r3, [r3, #0]
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fea:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ff0:	1c9a      	adds	r2, r3, #2
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	3b01      	subs	r3, #1
 8006000:	b29a      	uxth	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006008:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800600a:	3b01      	subs	r3, #1
 800600c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800600e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006010:	2b00      	cmp	r3, #0
 8006012:	d19f      	bne.n	8005f54 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8006014:	e7ff      	b.n	8006016 <UART_TxISR_16BIT_FIFOEN+0xde>
 8006016:	bf00      	nop
 8006018:	3744      	adds	r7, #68	@ 0x44
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b088      	sub	sp, #32
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	e853 3f00 	ldrex	r3, [r3]
 8006036:	60bb      	str	r3, [r7, #8]
   return(result);
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800603e:	61fb      	str	r3, [r7, #28]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	461a      	mov	r2, r3
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	61bb      	str	r3, [r7, #24]
 800604a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604c:	6979      	ldr	r1, [r7, #20]
 800604e:	69ba      	ldr	r2, [r7, #24]
 8006050:	e841 2300 	strex	r3, r2, [r1]
 8006054:	613b      	str	r3, [r7, #16]
   return(result);
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1e6      	bne.n	800602a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2220      	movs	r2, #32
 8006060:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f7fe fdb6 	bl	8004bdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006070:	bf00      	nop
 8006072:	3720      	adds	r7, #32
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b09c      	sub	sp, #112	@ 0x70
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006086:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006090:	2b22      	cmp	r3, #34	@ 0x22
 8006092:	f040 80be 	bne.w	8006212 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800609c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80060a0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80060a4:	b2d9      	uxtb	r1, r3
 80060a6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80060aa:	b2da      	uxtb	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060b0:	400a      	ands	r2, r1
 80060b2:	b2d2      	uxtb	r2, r2
 80060b4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060ba:	1c5a      	adds	r2, r3, #1
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	3b01      	subs	r3, #1
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80060d8:	b29b      	uxth	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f040 80a1 	bne.w	8006222 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060e8:	e853 3f00 	ldrex	r3, [r3]
 80060ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80060ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	461a      	mov	r2, r3
 80060fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006100:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006102:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006104:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006106:	e841 2300 	strex	r3, r2, [r1]
 800610a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800610c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1e6      	bne.n	80060e0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3308      	adds	r3, #8
 8006118:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800611c:	e853 3f00 	ldrex	r3, [r3]
 8006120:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006124:	f023 0301 	bic.w	r3, r3, #1
 8006128:	667b      	str	r3, [r7, #100]	@ 0x64
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	3308      	adds	r3, #8
 8006130:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006132:	647a      	str	r2, [r7, #68]	@ 0x44
 8006134:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006136:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006138:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800613a:	e841 2300 	strex	r3, r2, [r1]
 800613e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006140:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1e5      	bne.n	8006112 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2220      	movs	r2, #32
 800614a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a33      	ldr	r2, [pc, #204]	@ (800622c <UART_RxISR_8BIT+0x1b4>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d01f      	beq.n	80061a4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d018      	beq.n	80061a4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617a:	e853 3f00 	ldrex	r3, [r3]
 800617e:	623b      	str	r3, [r7, #32]
   return(result);
 8006180:	6a3b      	ldr	r3, [r7, #32]
 8006182:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006186:	663b      	str	r3, [r7, #96]	@ 0x60
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	461a      	mov	r2, r3
 800618e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006190:	633b      	str	r3, [r7, #48]	@ 0x30
 8006192:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006194:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006196:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006198:	e841 2300 	strex	r3, r2, [r1]
 800619c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800619e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1e6      	bne.n	8006172 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d12e      	bne.n	800620a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	e853 3f00 	ldrex	r3, [r3]
 80061be:	60fb      	str	r3, [r7, #12]
   return(result);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f023 0310 	bic.w	r3, r3, #16
 80061c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	461a      	mov	r2, r3
 80061ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061d0:	61fb      	str	r3, [r7, #28]
 80061d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d4:	69b9      	ldr	r1, [r7, #24]
 80061d6:	69fa      	ldr	r2, [r7, #28]
 80061d8:	e841 2300 	strex	r3, r2, [r1]
 80061dc:	617b      	str	r3, [r7, #20]
   return(result);
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1e6      	bne.n	80061b2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	69db      	ldr	r3, [r3, #28]
 80061ea:	f003 0310 	and.w	r3, r3, #16
 80061ee:	2b10      	cmp	r3, #16
 80061f0:	d103      	bne.n	80061fa <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2210      	movs	r2, #16
 80061f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006200:	4619      	mov	r1, r3
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f7fe fd08 	bl	8004c18 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006208:	e00b      	b.n	8006222 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f7fb f9f0 	bl	80015f0 <HAL_UART_RxCpltCallback>
}
 8006210:	e007      	b.n	8006222 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	699a      	ldr	r2, [r3, #24]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f042 0208 	orr.w	r2, r2, #8
 8006220:	619a      	str	r2, [r3, #24]
}
 8006222:	bf00      	nop
 8006224:	3770      	adds	r7, #112	@ 0x70
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	40008000 	.word	0x40008000

08006230 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b09c      	sub	sp, #112	@ 0x70
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800623e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006248:	2b22      	cmp	r3, #34	@ 0x22
 800624a:	f040 80be 	bne.w	80063ca <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006254:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800625c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800625e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006262:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006266:	4013      	ands	r3, r2
 8006268:	b29a      	uxth	r2, r3
 800626a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800626c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006272:	1c9a      	adds	r2, r3, #2
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800627e:	b29b      	uxth	r3, r3
 8006280:	3b01      	subs	r3, #1
 8006282:	b29a      	uxth	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006290:	b29b      	uxth	r3, r3
 8006292:	2b00      	cmp	r3, #0
 8006294:	f040 80a1 	bne.w	80063da <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062a0:	e853 3f00 	ldrex	r3, [r3]
 80062a4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80062a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062ac:	667b      	str	r3, [r7, #100]	@ 0x64
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	461a      	mov	r2, r3
 80062b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80062b8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80062bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80062be:	e841 2300 	strex	r3, r2, [r1]
 80062c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80062c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1e6      	bne.n	8006298 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	3308      	adds	r3, #8
 80062d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062d4:	e853 3f00 	ldrex	r3, [r3]
 80062d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80062da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062dc:	f023 0301 	bic.w	r3, r3, #1
 80062e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	3308      	adds	r3, #8
 80062e8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80062ea:	643a      	str	r2, [r7, #64]	@ 0x40
 80062ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80062f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80062f2:	e841 2300 	strex	r3, r2, [r1]
 80062f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80062f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1e5      	bne.n	80062ca <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2220      	movs	r2, #32
 8006302:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a33      	ldr	r2, [pc, #204]	@ (80063e4 <UART_RxISR_16BIT+0x1b4>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d01f      	beq.n	800635c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d018      	beq.n	800635c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006330:	6a3b      	ldr	r3, [r7, #32]
 8006332:	e853 3f00 	ldrex	r3, [r3]
 8006336:	61fb      	str	r3, [r7, #28]
   return(result);
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800633e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	461a      	mov	r2, r3
 8006346:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006348:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800634a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800634e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006350:	e841 2300 	strex	r3, r2, [r1]
 8006354:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1e6      	bne.n	800632a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006360:	2b01      	cmp	r3, #1
 8006362:	d12e      	bne.n	80063c2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	e853 3f00 	ldrex	r3, [r3]
 8006376:	60bb      	str	r3, [r7, #8]
   return(result);
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	f023 0310 	bic.w	r3, r3, #16
 800637e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	461a      	mov	r2, r3
 8006386:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006388:	61bb      	str	r3, [r7, #24]
 800638a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638c:	6979      	ldr	r1, [r7, #20]
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	e841 2300 	strex	r3, r2, [r1]
 8006394:	613b      	str	r3, [r7, #16]
   return(result);
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1e6      	bne.n	800636a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	69db      	ldr	r3, [r3, #28]
 80063a2:	f003 0310 	and.w	r3, r3, #16
 80063a6:	2b10      	cmp	r3, #16
 80063a8:	d103      	bne.n	80063b2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2210      	movs	r2, #16
 80063b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80063b8:	4619      	mov	r1, r3
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f7fe fc2c 	bl	8004c18 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80063c0:	e00b      	b.n	80063da <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f7fb f914 	bl	80015f0 <HAL_UART_RxCpltCallback>
}
 80063c8:	e007      	b.n	80063da <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	699a      	ldr	r2, [r3, #24]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f042 0208 	orr.w	r2, r2, #8
 80063d8:	619a      	str	r2, [r3, #24]
}
 80063da:	bf00      	nop
 80063dc:	3770      	adds	r7, #112	@ 0x70
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	40008000 	.word	0x40008000

080063e8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b0ac      	sub	sp, #176	@ 0xb0
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80063f6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	69db      	ldr	r3, [r3, #28]
 8006400:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800641e:	2b22      	cmp	r3, #34	@ 0x22
 8006420:	f040 8183 	bne.w	800672a <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800642a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800642e:	e126      	b.n	800667e <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006436:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800643a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800643e:	b2d9      	uxtb	r1, r3
 8006440:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8006444:	b2da      	uxtb	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800644a:	400a      	ands	r2, r1
 800644c:	b2d2      	uxtb	r2, r2
 800644e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006454:	1c5a      	adds	r2, r3, #1
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006460:	b29b      	uxth	r3, r3
 8006462:	3b01      	subs	r3, #1
 8006464:	b29a      	uxth	r2, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	69db      	ldr	r3, [r3, #28]
 8006472:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006476:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800647a:	f003 0307 	and.w	r3, r3, #7
 800647e:	2b00      	cmp	r3, #0
 8006480:	d053      	beq.n	800652a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006482:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006486:	f003 0301 	and.w	r3, r3, #1
 800648a:	2b00      	cmp	r3, #0
 800648c:	d011      	beq.n	80064b2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800648e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00b      	beq.n	80064b2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2201      	movs	r2, #1
 80064a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064a8:	f043 0201 	orr.w	r2, r3, #1
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d011      	beq.n	80064e2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80064be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00b      	beq.n	80064e2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2202      	movs	r2, #2
 80064d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064d8:	f043 0204 	orr.w	r2, r3, #4
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064e6:	f003 0304 	and.w	r3, r3, #4
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d011      	beq.n	8006512 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80064ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80064f2:	f003 0301 	and.w	r3, r3, #1
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00b      	beq.n	8006512 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2204      	movs	r2, #4
 8006500:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006508:	f043 0202 	orr.w	r2, r3, #2
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006518:	2b00      	cmp	r3, #0
 800651a:	d006      	beq.n	800652a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f7fe fb71 	bl	8004c04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006530:	b29b      	uxth	r3, r3
 8006532:	2b00      	cmp	r3, #0
 8006534:	f040 80a3 	bne.w	800667e <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006540:	e853 3f00 	ldrex	r3, [r3]
 8006544:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8006546:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006548:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800654c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	461a      	mov	r2, r3
 8006556:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800655a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800655c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8006560:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006562:	e841 2300 	strex	r3, r2, [r1]
 8006566:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8006568:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1e4      	bne.n	8006538 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	3308      	adds	r3, #8
 8006574:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006576:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006578:	e853 3f00 	ldrex	r3, [r3]
 800657c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800657e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006580:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006584:	f023 0301 	bic.w	r3, r3, #1
 8006588:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	3308      	adds	r3, #8
 8006592:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006596:	66ba      	str	r2, [r7, #104]	@ 0x68
 8006598:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800659c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800659e:	e841 2300 	strex	r3, r2, [r1]
 80065a2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80065a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1e1      	bne.n	800656e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2220      	movs	r2, #32
 80065ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a60      	ldr	r2, [pc, #384]	@ (8006744 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d021      	beq.n	800660c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d01a      	beq.n	800660c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065de:	e853 3f00 	ldrex	r3, [r3]
 80065e2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80065e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80065ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	461a      	mov	r2, r3
 80065f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80065f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80065fa:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80065fe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006600:	e841 2300 	strex	r3, r2, [r1]
 8006604:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006606:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1e4      	bne.n	80065d6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006610:	2b01      	cmp	r3, #1
 8006612:	d130      	bne.n	8006676 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006622:	e853 3f00 	ldrex	r3, [r3]
 8006626:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800662a:	f023 0310 	bic.w	r3, r3, #16
 800662e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	461a      	mov	r2, r3
 8006638:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800663c:	643b      	str	r3, [r7, #64]	@ 0x40
 800663e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006640:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006642:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006644:	e841 2300 	strex	r3, r2, [r1]
 8006648:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800664a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1e4      	bne.n	800661a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	f003 0310 	and.w	r3, r3, #16
 800665a:	2b10      	cmp	r3, #16
 800665c:	d103      	bne.n	8006666 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2210      	movs	r2, #16
 8006664:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800666c:	4619      	mov	r1, r3
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f7fe fad2 	bl	8004c18 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8006674:	e00e      	b.n	8006694 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f7fa ffba 	bl	80015f0 <HAL_UART_RxCpltCallback>
        break;
 800667c:	e00a      	b.n	8006694 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800667e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8006682:	2b00      	cmp	r3, #0
 8006684:	d006      	beq.n	8006694 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8006686:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800668a:	f003 0320 	and.w	r3, r3, #32
 800668e:	2b00      	cmp	r3, #0
 8006690:	f47f aece 	bne.w	8006430 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800669a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800669e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d049      	beq.n	800673a <UART_RxISR_8BIT_FIFOEN+0x352>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80066ac:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d242      	bcs.n	800673a <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	3308      	adds	r3, #8
 80066ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066bc:	6a3b      	ldr	r3, [r7, #32]
 80066be:	e853 3f00 	ldrex	r3, [r3]
 80066c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	3308      	adds	r3, #8
 80066d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80066d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066e0:	e841 2300 	strex	r3, r2, [r1]
 80066e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80066e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1e3      	bne.n	80066b4 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a16      	ldr	r2, [pc, #88]	@ (8006748 <UART_RxISR_8BIT_FIFOEN+0x360>)
 80066f0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	e853 3f00 	ldrex	r3, [r3]
 80066fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	f043 0320 	orr.w	r3, r3, #32
 8006706:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	461a      	mov	r2, r3
 8006710:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006714:	61bb      	str	r3, [r7, #24]
 8006716:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006718:	6979      	ldr	r1, [r7, #20]
 800671a:	69ba      	ldr	r2, [r7, #24]
 800671c:	e841 2300 	strex	r3, r2, [r1]
 8006720:	613b      	str	r3, [r7, #16]
   return(result);
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1e4      	bne.n	80066f2 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006728:	e007      	b.n	800673a <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	699a      	ldr	r2, [r3, #24]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f042 0208 	orr.w	r2, r2, #8
 8006738:	619a      	str	r2, [r3, #24]
}
 800673a:	bf00      	nop
 800673c:	37b0      	adds	r7, #176	@ 0xb0
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	40008000 	.word	0x40008000
 8006748:	08006079 	.word	0x08006079

0800674c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b0ae      	sub	sp, #184	@ 0xb8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800675a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	69db      	ldr	r3, [r3, #28]
 8006764:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006782:	2b22      	cmp	r3, #34	@ 0x22
 8006784:	f040 8187 	bne.w	8006a96 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800678e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006792:	e12a      	b.n	80069ea <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800679a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80067a6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80067aa:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80067ae:	4013      	ands	r3, r2
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80067b6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067bc:	1c9a      	adds	r2, r3, #2
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	3b01      	subs	r3, #1
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80067de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80067e2:	f003 0307 	and.w	r3, r3, #7
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d053      	beq.n	8006892 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80067ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d011      	beq.n	800681a <UART_RxISR_16BIT_FIFOEN+0xce>
 80067f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80067fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00b      	beq.n	800681a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2201      	movs	r2, #1
 8006808:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006810:	f043 0201 	orr.w	r2, r3, #1
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800681a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800681e:	f003 0302 	and.w	r3, r3, #2
 8006822:	2b00      	cmp	r3, #0
 8006824:	d011      	beq.n	800684a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006826:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800682a:	f003 0301 	and.w	r3, r3, #1
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00b      	beq.n	800684a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2202      	movs	r2, #2
 8006838:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006840:	f043 0204 	orr.w	r2, r3, #4
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800684a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800684e:	f003 0304 	and.w	r3, r3, #4
 8006852:	2b00      	cmp	r3, #0
 8006854:	d011      	beq.n	800687a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006856:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00b      	beq.n	800687a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2204      	movs	r2, #4
 8006868:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006870:	f043 0202 	orr.w	r2, r3, #2
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006880:	2b00      	cmp	r3, #0
 8006882:	d006      	beq.n	8006892 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f7fe f9bd 	bl	8004c04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006898:	b29b      	uxth	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	f040 80a5 	bne.w	80069ea <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80068a8:	e853 3f00 	ldrex	r3, [r3]
 80068ac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80068ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80068b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	461a      	mov	r2, r3
 80068be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80068c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80068c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80068ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80068ce:	e841 2300 	strex	r3, r2, [r1]
 80068d2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80068d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1e2      	bne.n	80068a0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	3308      	adds	r3, #8
 80068e0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80068e4:	e853 3f00 	ldrex	r3, [r3]
 80068e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80068ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068f0:	f023 0301 	bic.w	r3, r3, #1
 80068f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	3308      	adds	r3, #8
 80068fe:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8006902:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006904:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006906:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006908:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800690a:	e841 2300 	strex	r3, r2, [r1]
 800690e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006910:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1e1      	bne.n	80068da <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2220      	movs	r2, #32
 800691a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a60      	ldr	r2, [pc, #384]	@ (8006ab0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d021      	beq.n	8006978 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d01a      	beq.n	8006978 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006948:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800694a:	e853 3f00 	ldrex	r3, [r3]
 800694e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006950:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006952:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006956:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	461a      	mov	r2, r3
 8006960:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006964:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006966:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006968:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800696a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800696c:	e841 2300 	strex	r3, r2, [r1]
 8006970:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006972:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1e4      	bne.n	8006942 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800697c:	2b01      	cmp	r3, #1
 800697e:	d130      	bne.n	80069e2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800698e:	e853 3f00 	ldrex	r3, [r3]
 8006992:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006996:	f023 0310 	bic.w	r3, r3, #16
 800699a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	461a      	mov	r2, r3
 80069a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80069a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80069aa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80069ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069b0:	e841 2300 	strex	r3, r2, [r1]
 80069b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1e4      	bne.n	8006986 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	69db      	ldr	r3, [r3, #28]
 80069c2:	f003 0310 	and.w	r3, r3, #16
 80069c6:	2b10      	cmp	r3, #16
 80069c8:	d103      	bne.n	80069d2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2210      	movs	r2, #16
 80069d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80069d8:	4619      	mov	r1, r3
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f7fe f91c 	bl	8004c18 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80069e0:	e00e      	b.n	8006a00 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f7fa fe04 	bl	80015f0 <HAL_UART_RxCpltCallback>
        break;
 80069e8:	e00a      	b.n	8006a00 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80069ea:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d006      	beq.n	8006a00 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 80069f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80069f6:	f003 0320 	and.w	r3, r3, #32
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f47f aeca 	bne.w	8006794 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a06:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006a0a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d049      	beq.n	8006aa6 <UART_RxISR_16BIT_FIFOEN+0x35a>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006a18:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d242      	bcs.n	8006aa6 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	3308      	adds	r3, #8
 8006a26:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2a:	e853 3f00 	ldrex	r3, [r3]
 8006a2e:	623b      	str	r3, [r7, #32]
   return(result);
 8006a30:	6a3b      	ldr	r3, [r7, #32]
 8006a32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a36:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	3308      	adds	r3, #8
 8006a40:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8006a44:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a4c:	e841 2300 	strex	r3, r2, [r1]
 8006a50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1e3      	bne.n	8006a20 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a16      	ldr	r2, [pc, #88]	@ (8006ab4 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8006a5c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	e853 3f00 	ldrex	r3, [r3]
 8006a6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f043 0320 	orr.w	r3, r3, #32
 8006a72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006a80:	61fb      	str	r3, [r7, #28]
 8006a82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a84:	69b9      	ldr	r1, [r7, #24]
 8006a86:	69fa      	ldr	r2, [r7, #28]
 8006a88:	e841 2300 	strex	r3, r2, [r1]
 8006a8c:	617b      	str	r3, [r7, #20]
   return(result);
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1e4      	bne.n	8006a5e <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a94:	e007      	b.n	8006aa6 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	699a      	ldr	r2, [r3, #24]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f042 0208 	orr.w	r2, r2, #8
 8006aa4:	619a      	str	r2, [r3, #24]
}
 8006aa6:	bf00      	nop
 8006aa8:	37b8      	adds	r7, #184	@ 0xb8
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	40008000 	.word	0x40008000
 8006ab4:	08006231 	.word	0x08006231

08006ab8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006ac0:	bf00      	nop
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006ad4:	bf00      	nop
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b085      	sub	sp, #20
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d101      	bne.n	8006b0a <HAL_UARTEx_DisableFifoMode+0x16>
 8006b06:	2302      	movs	r3, #2
 8006b08:	e027      	b.n	8006b5a <HAL_UARTEx_DisableFifoMode+0x66>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2224      	movs	r2, #36	@ 0x24
 8006b16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f022 0201 	bic.w	r2, r2, #1
 8006b30:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006b38:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2220      	movs	r2, #32
 8006b4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3714      	adds	r7, #20
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr

08006b66 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b084      	sub	sp, #16
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
 8006b6e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d101      	bne.n	8006b7e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	e02d      	b.n	8006bda <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2224      	movs	r2, #36	@ 0x24
 8006b8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f022 0201 	bic.w	r2, r2, #1
 8006ba4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	683a      	ldr	r2, [r7, #0]
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f850 	bl	8006c60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2220      	movs	r2, #32
 8006bcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b084      	sub	sp, #16
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d101      	bne.n	8006bfa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006bf6:	2302      	movs	r3, #2
 8006bf8:	e02d      	b.n	8006c56 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2224      	movs	r2, #36	@ 0x24
 8006c06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f022 0201 	bic.w	r2, r2, #1
 8006c20:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	683a      	ldr	r2, [r7, #0]
 8006c32:	430a      	orrs	r2, r1
 8006c34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 f812 	bl	8006c60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2220      	movs	r2, #32
 8006c48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
	...

08006c60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d108      	bne.n	8006c82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006c80:	e031      	b.n	8006ce6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006c82:	2308      	movs	r3, #8
 8006c84:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006c86:	2308      	movs	r3, #8
 8006c88:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	0e5b      	lsrs	r3, r3, #25
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	f003 0307 	and.w	r3, r3, #7
 8006c98:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	0f5b      	lsrs	r3, r3, #29
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	f003 0307 	and.w	r3, r3, #7
 8006ca8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006caa:	7bbb      	ldrb	r3, [r7, #14]
 8006cac:	7b3a      	ldrb	r2, [r7, #12]
 8006cae:	4911      	ldr	r1, [pc, #68]	@ (8006cf4 <UARTEx_SetNbDataToProcess+0x94>)
 8006cb0:	5c8a      	ldrb	r2, [r1, r2]
 8006cb2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006cb6:	7b3a      	ldrb	r2, [r7, #12]
 8006cb8:	490f      	ldr	r1, [pc, #60]	@ (8006cf8 <UARTEx_SetNbDataToProcess+0x98>)
 8006cba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006cbc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
 8006cca:	7b7a      	ldrb	r2, [r7, #13]
 8006ccc:	4909      	ldr	r1, [pc, #36]	@ (8006cf4 <UARTEx_SetNbDataToProcess+0x94>)
 8006cce:	5c8a      	ldrb	r2, [r1, r2]
 8006cd0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006cd4:	7b7a      	ldrb	r2, [r7, #13]
 8006cd6:	4908      	ldr	r1, [pc, #32]	@ (8006cf8 <UARTEx_SetNbDataToProcess+0x98>)
 8006cd8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006cda:	fb93 f3f2 	sdiv	r3, r3, r2
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006ce6:	bf00      	nop
 8006ce8:	3714      	adds	r7, #20
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	0800a0c0 	.word	0x0800a0c0
 8006cf8:	0800a0c8 	.word	0x0800a0c8

08006cfc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	4603      	mov	r3, r0
 8006d04:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006d06:	2300      	movs	r3, #0
 8006d08:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006d0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d0e:	2b84      	cmp	r3, #132	@ 0x84
 8006d10:	d005      	beq.n	8006d1e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006d12:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	4413      	add	r3, r2
 8006d1a:	3303      	adds	r3, #3
 8006d1c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3714      	adds	r7, #20
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006d30:	f000 fd52 	bl	80077d8 <vTaskStartScheduler>
  
  return osOK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006d3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d3c:	b087      	sub	sp, #28
 8006d3e:	af02      	add	r7, sp, #8
 8006d40:	6078      	str	r0, [r7, #4]
 8006d42:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685c      	ldr	r4, [r3, #4]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d50:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7ff ffcf 	bl	8006cfc <makeFreeRtosPriority>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	f107 030c 	add.w	r3, r7, #12
 8006d64:	9301      	str	r3, [sp, #4]
 8006d66:	9200      	str	r2, [sp, #0]
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	4632      	mov	r2, r6
 8006d6c:	4629      	mov	r1, r5
 8006d6e:	4620      	mov	r0, r4
 8006d70:	f000 fbb6 	bl	80074e0 <xTaskCreate>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d001      	beq.n	8006d7e <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	e000      	b.n	8006d80 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3714      	adds	r7, #20
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006d88 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d001      	beq.n	8006d9e <osDelay+0x16>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	e000      	b.n	8006da0 <osDelay+0x18>
 8006d9e:	2301      	movs	r3, #1
 8006da0:	4618      	mov	r0, r3
 8006da2:	f000 fce3 	bl	800776c <vTaskDelay>
  
  return osOK;
 8006da6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f103 0208 	add.w	r2, r3, #8
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8006dc8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f103 0208 	add.w	r2, r3, #8
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f103 0208 	add.w	r2, r3, #8
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006de4:	bf00      	nop
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006dfe:	bf00      	nop
 8006e00:	370c      	adds	r7, #12
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr

08006e0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e0a:	b480      	push	{r7}
 8006e0c:	b085      	sub	sp, #20
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
 8006e12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	689a      	ldr	r2, [r3, #8]
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	683a      	ldr	r2, [r7, #0]
 8006e2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	683a      	ldr	r2, [r7, #0]
 8006e34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	1c5a      	adds	r2, r3, #1
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	601a      	str	r2, [r3, #0]
}
 8006e46:	bf00      	nop
 8006e48:	3714      	adds	r7, #20
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr

08006e52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e52:	b480      	push	{r7}
 8006e54:	b085      	sub	sp, #20
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
 8006e5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e68:	d103      	bne.n	8006e72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	60fb      	str	r3, [r7, #12]
 8006e70:	e00c      	b.n	8006e8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	3308      	adds	r3, #8
 8006e76:	60fb      	str	r3, [r7, #12]
 8006e78:	e002      	b.n	8006e80 <vListInsert+0x2e>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	60fb      	str	r3, [r7, #12]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68ba      	ldr	r2, [r7, #8]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d2f6      	bcs.n	8006e7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	685a      	ldr	r2, [r3, #4]
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	683a      	ldr	r2, [r7, #0]
 8006e9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	683a      	ldr	r2, [r7, #0]
 8006ea6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	1c5a      	adds	r2, r3, #1
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	601a      	str	r2, [r3, #0]
}
 8006eb8:	bf00      	nop
 8006eba:	3714      	adds	r7, #20
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	6892      	ldr	r2, [r2, #8]
 8006eda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	6852      	ldr	r2, [r2, #4]
 8006ee4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d103      	bne.n	8006ef8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	689a      	ldr	r2, [r3, #8]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	1e5a      	subs	r2, r3, #1
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3714      	adds	r7, #20
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10b      	bne.n	8006f44 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f30:	f383 8811 	msr	BASEPRI, r3
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006f3e:	bf00      	nop
 8006f40:	bf00      	nop
 8006f42:	e7fd      	b.n	8006f40 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006f44:	f001 fb60 	bl	8008608 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f50:	68f9      	ldr	r1, [r7, #12]
 8006f52:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006f54:	fb01 f303 	mul.w	r3, r1, r3
 8006f58:	441a      	add	r2, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f74:	3b01      	subs	r3, #1
 8006f76:	68f9      	ldr	r1, [r7, #12]
 8006f78:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006f7a:	fb01 f303 	mul.w	r3, r1, r3
 8006f7e:	441a      	add	r2, r3
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	22ff      	movs	r2, #255	@ 0xff
 8006f88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	22ff      	movs	r2, #255	@ 0xff
 8006f90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d114      	bne.n	8006fc4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d01a      	beq.n	8006fd8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	3310      	adds	r3, #16
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f000 feb0 	bl	8007d0c <xTaskRemoveFromEventList>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d012      	beq.n	8006fd8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8006fe8 <xQueueGenericReset+0xd0>)
 8006fb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fb8:	601a      	str	r2, [r3, #0]
 8006fba:	f3bf 8f4f 	dsb	sy
 8006fbe:	f3bf 8f6f 	isb	sy
 8006fc2:	e009      	b.n	8006fd8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	3310      	adds	r3, #16
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f7ff fef1 	bl	8006db0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	3324      	adds	r3, #36	@ 0x24
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7ff feec 	bl	8006db0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006fd8:	f001 fb48 	bl	800866c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006fdc:	2301      	movs	r3, #1
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	e000ed04 	.word	0xe000ed04

08006fec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b08a      	sub	sp, #40	@ 0x28
 8006ff0:	af02      	add	r7, sp, #8
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d10b      	bne.n	8007018 <xQueueGenericCreate+0x2c>
	__asm volatile
 8007000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	613b      	str	r3, [r7, #16]
}
 8007012:	bf00      	nop
 8007014:	bf00      	nop
 8007016:	e7fd      	b.n	8007014 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	68ba      	ldr	r2, [r7, #8]
 800701c:	fb02 f303 	mul.w	r3, r2, r3
 8007020:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	3350      	adds	r3, #80	@ 0x50
 8007026:	4618      	mov	r0, r3
 8007028:	f001 fc10 	bl	800884c <pvPortMalloc>
 800702c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00d      	beq.n	8007050 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	3350      	adds	r3, #80	@ 0x50
 800703c:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800703e:	79fa      	ldrb	r2, [r7, #7]
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	4613      	mov	r3, r2
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	68b9      	ldr	r1, [r7, #8]
 800704a:	68f8      	ldr	r0, [r7, #12]
 800704c:	f000 f805 	bl	800705a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007050:	69bb      	ldr	r3, [r7, #24]
	}
 8007052:	4618      	mov	r0, r3
 8007054:	3720      	adds	r7, #32
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b084      	sub	sp, #16
 800705e:	af00      	add	r7, sp, #0
 8007060:	60f8      	str	r0, [r7, #12]
 8007062:	60b9      	str	r1, [r7, #8]
 8007064:	607a      	str	r2, [r7, #4]
 8007066:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d103      	bne.n	8007076 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	69ba      	ldr	r2, [r7, #24]
 8007072:	601a      	str	r2, [r3, #0]
 8007074:	e002      	b.n	800707c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	68ba      	ldr	r2, [r7, #8]
 8007086:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007088:	2101      	movs	r1, #1
 800708a:	69b8      	ldr	r0, [r7, #24]
 800708c:	f7ff ff44 	bl	8006f18 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	78fa      	ldrb	r2, [r7, #3]
 8007094:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007098:	bf00      	nop
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b08e      	sub	sp, #56	@ 0x38
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80070ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d10b      	bne.n	80070cc <xQueueGiveFromISR+0x2c>
	__asm volatile
 80070b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b8:	f383 8811 	msr	BASEPRI, r3
 80070bc:	f3bf 8f6f 	isb	sy
 80070c0:	f3bf 8f4f 	dsb	sy
 80070c4:	623b      	str	r3, [r7, #32]
}
 80070c6:	bf00      	nop
 80070c8:	bf00      	nop
 80070ca:	e7fd      	b.n	80070c8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80070cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00b      	beq.n	80070ec <xQueueGiveFromISR+0x4c>
	__asm volatile
 80070d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d8:	f383 8811 	msr	BASEPRI, r3
 80070dc:	f3bf 8f6f 	isb	sy
 80070e0:	f3bf 8f4f 	dsb	sy
 80070e4:	61fb      	str	r3, [r7, #28]
}
 80070e6:	bf00      	nop
 80070e8:	bf00      	nop
 80070ea:	e7fd      	b.n	80070e8 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80070ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d103      	bne.n	80070fc <xQueueGiveFromISR+0x5c>
 80070f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d101      	bne.n	8007100 <xQueueGiveFromISR+0x60>
 80070fc:	2301      	movs	r3, #1
 80070fe:	e000      	b.n	8007102 <xQueueGiveFromISR+0x62>
 8007100:	2300      	movs	r3, #0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10b      	bne.n	800711e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8007106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800710a:	f383 8811 	msr	BASEPRI, r3
 800710e:	f3bf 8f6f 	isb	sy
 8007112:	f3bf 8f4f 	dsb	sy
 8007116:	61bb      	str	r3, [r7, #24]
}
 8007118:	bf00      	nop
 800711a:	bf00      	nop
 800711c:	e7fd      	b.n	800711a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800711e:	f001 fb53 	bl	80087c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007122:	f3ef 8211 	mrs	r2, BASEPRI
 8007126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800712a:	f383 8811 	msr	BASEPRI, r3
 800712e:	f3bf 8f6f 	isb	sy
 8007132:	f3bf 8f4f 	dsb	sy
 8007136:	617a      	str	r2, [r7, #20]
 8007138:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800713a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800713c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800713e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007142:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007148:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800714a:	429a      	cmp	r2, r3
 800714c:	d22b      	bcs.n	80071a6 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800714e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007150:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007154:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800715a:	1c5a      	adds	r2, r3, #1
 800715c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800715e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007160:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007168:	d112      	bne.n	8007190 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800716a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800716c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800716e:	2b00      	cmp	r3, #0
 8007170:	d016      	beq.n	80071a0 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007174:	3324      	adds	r3, #36	@ 0x24
 8007176:	4618      	mov	r0, r3
 8007178:	f000 fdc8 	bl	8007d0c <xTaskRemoveFromEventList>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00e      	beq.n	80071a0 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00b      	beq.n	80071a0 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	2201      	movs	r2, #1
 800718c:	601a      	str	r2, [r3, #0]
 800718e:	e007      	b.n	80071a0 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007190:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007194:	3301      	adds	r3, #1
 8007196:	b2db      	uxtb	r3, r3
 8007198:	b25a      	sxtb	r2, r3
 800719a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800719c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80071a0:	2301      	movs	r3, #1
 80071a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80071a4:	e001      	b.n	80071aa <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80071a6:	2300      	movs	r3, #0
 80071a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80071aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ac:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80071b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80071b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3738      	adds	r7, #56	@ 0x38
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b08e      	sub	sp, #56	@ 0x38
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80071ca:	2300      	movs	r3, #0
 80071cc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80071d2:	2300      	movs	r3, #0
 80071d4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80071d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10b      	bne.n	80071f4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80071dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e0:	f383 8811 	msr	BASEPRI, r3
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	623b      	str	r3, [r7, #32]
}
 80071ee:	bf00      	nop
 80071f0:	bf00      	nop
 80071f2:	e7fd      	b.n	80071f0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80071f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d00b      	beq.n	8007214 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80071fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007200:	f383 8811 	msr	BASEPRI, r3
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	61fb      	str	r3, [r7, #28]
}
 800720e:	bf00      	nop
 8007210:	bf00      	nop
 8007212:	e7fd      	b.n	8007210 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007214:	f000 ff2a 	bl	800806c <xTaskGetSchedulerState>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d102      	bne.n	8007224 <xQueueSemaphoreTake+0x64>
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d101      	bne.n	8007228 <xQueueSemaphoreTake+0x68>
 8007224:	2301      	movs	r3, #1
 8007226:	e000      	b.n	800722a <xQueueSemaphoreTake+0x6a>
 8007228:	2300      	movs	r3, #0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d10b      	bne.n	8007246 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800722e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007232:	f383 8811 	msr	BASEPRI, r3
 8007236:	f3bf 8f6f 	isb	sy
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	61bb      	str	r3, [r7, #24]
}
 8007240:	bf00      	nop
 8007242:	bf00      	nop
 8007244:	e7fd      	b.n	8007242 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007246:	f001 f9df 	bl	8008608 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800724a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800724c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800724e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007252:	2b00      	cmp	r3, #0
 8007254:	d024      	beq.n	80072a0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007258:	1e5a      	subs	r2, r3, #1
 800725a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800725c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800725e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d104      	bne.n	8007270 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007266:	f001 f825 	bl	80082b4 <pvTaskIncrementMutexHeldCount>
 800726a:	4602      	mov	r2, r0
 800726c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800726e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00f      	beq.n	8007298 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800727a:	3310      	adds	r3, #16
 800727c:	4618      	mov	r0, r3
 800727e:	f000 fd45 	bl	8007d0c <xTaskRemoveFromEventList>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d007      	beq.n	8007298 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007288:	4b54      	ldr	r3, [pc, #336]	@ (80073dc <xQueueSemaphoreTake+0x21c>)
 800728a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800728e:	601a      	str	r2, [r3, #0]
 8007290:	f3bf 8f4f 	dsb	sy
 8007294:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007298:	f001 f9e8 	bl	800866c <vPortExitCritical>
				return pdPASS;
 800729c:	2301      	movs	r3, #1
 800729e:	e098      	b.n	80073d2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d112      	bne.n	80072cc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80072a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00b      	beq.n	80072c4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80072ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072b0:	f383 8811 	msr	BASEPRI, r3
 80072b4:	f3bf 8f6f 	isb	sy
 80072b8:	f3bf 8f4f 	dsb	sy
 80072bc:	617b      	str	r3, [r7, #20]
}
 80072be:	bf00      	nop
 80072c0:	bf00      	nop
 80072c2:	e7fd      	b.n	80072c0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80072c4:	f001 f9d2 	bl	800866c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80072c8:	2300      	movs	r3, #0
 80072ca:	e082      	b.n	80073d2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80072cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d106      	bne.n	80072e0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072d2:	f107 030c 	add.w	r3, r7, #12
 80072d6:	4618      	mov	r0, r3
 80072d8:	f000 fd7c 	bl	8007dd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072dc:	2301      	movs	r3, #1
 80072de:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072e0:	f001 f9c4 	bl	800866c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072e4:	f000 fac2 	bl	800786c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072e8:	f001 f98e 	bl	8008608 <vPortEnterCritical>
 80072ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80072f2:	b25b      	sxtb	r3, r3
 80072f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072f8:	d103      	bne.n	8007302 <xQueueSemaphoreTake+0x142>
 80072fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007304:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007308:	b25b      	sxtb	r3, r3
 800730a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800730e:	d103      	bne.n	8007318 <xQueueSemaphoreTake+0x158>
 8007310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007312:	2200      	movs	r2, #0
 8007314:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007318:	f001 f9a8 	bl	800866c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800731c:	463a      	mov	r2, r7
 800731e:	f107 030c 	add.w	r3, r7, #12
 8007322:	4611      	mov	r1, r2
 8007324:	4618      	mov	r0, r3
 8007326:	f000 fd6b 	bl	8007e00 <xTaskCheckForTimeOut>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d132      	bne.n	8007396 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007330:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007332:	f000 f8bf 	bl	80074b4 <prvIsQueueEmpty>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d026      	beq.n	800738a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800733c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d109      	bne.n	8007358 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007344:	f001 f960 	bl	8008608 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	4618      	mov	r0, r3
 800734e:	f000 feab 	bl	80080a8 <xTaskPriorityInherit>
 8007352:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007354:	f001 f98a 	bl	800866c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800735a:	3324      	adds	r3, #36	@ 0x24
 800735c:	683a      	ldr	r2, [r7, #0]
 800735e:	4611      	mov	r1, r2
 8007360:	4618      	mov	r0, r3
 8007362:	f000 fcad 	bl	8007cc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007366:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007368:	f000 f852 	bl	8007410 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800736c:	f000 fa8c 	bl	8007888 <xTaskResumeAll>
 8007370:	4603      	mov	r3, r0
 8007372:	2b00      	cmp	r3, #0
 8007374:	f47f af67 	bne.w	8007246 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007378:	4b18      	ldr	r3, [pc, #96]	@ (80073dc <xQueueSemaphoreTake+0x21c>)
 800737a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800737e:	601a      	str	r2, [r3, #0]
 8007380:	f3bf 8f4f 	dsb	sy
 8007384:	f3bf 8f6f 	isb	sy
 8007388:	e75d      	b.n	8007246 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800738a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800738c:	f000 f840 	bl	8007410 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007390:	f000 fa7a 	bl	8007888 <xTaskResumeAll>
 8007394:	e757      	b.n	8007246 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007396:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007398:	f000 f83a 	bl	8007410 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800739c:	f000 fa74 	bl	8007888 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80073a2:	f000 f887 	bl	80074b4 <prvIsQueueEmpty>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	f43f af4c 	beq.w	8007246 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80073ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00d      	beq.n	80073d0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80073b4:	f001 f928 	bl	8008608 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80073b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80073ba:	f000 f811 	bl	80073e0 <prvGetDisinheritPriorityAfterTimeout>
 80073be:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80073c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80073c6:	4618      	mov	r0, r3
 80073c8:	f000 fee4 	bl	8008194 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80073cc:	f001 f94e 	bl	800866c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80073d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3738      	adds	r7, #56	@ 0x38
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	e000ed04 	.word	0xe000ed04

080073e0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d006      	beq.n	80073fe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f1c3 0307 	rsb	r3, r3, #7
 80073fa:	60fb      	str	r3, [r7, #12]
 80073fc:	e001      	b.n	8007402 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80073fe:	2300      	movs	r3, #0
 8007400:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007402:	68fb      	ldr	r3, [r7, #12]
	}
 8007404:	4618      	mov	r0, r3
 8007406:	3714      	adds	r7, #20
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007418:	f001 f8f6 	bl	8008608 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007422:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007424:	e011      	b.n	800744a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800742a:	2b00      	cmp	r3, #0
 800742c:	d012      	beq.n	8007454 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	3324      	adds	r3, #36	@ 0x24
 8007432:	4618      	mov	r0, r3
 8007434:	f000 fc6a 	bl	8007d0c <xTaskRemoveFromEventList>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d001      	beq.n	8007442 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800743e:	f000 fd43 	bl	8007ec8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007442:	7bfb      	ldrb	r3, [r7, #15]
 8007444:	3b01      	subs	r3, #1
 8007446:	b2db      	uxtb	r3, r3
 8007448:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800744a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800744e:	2b00      	cmp	r3, #0
 8007450:	dce9      	bgt.n	8007426 <prvUnlockQueue+0x16>
 8007452:	e000      	b.n	8007456 <prvUnlockQueue+0x46>
					break;
 8007454:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	22ff      	movs	r2, #255	@ 0xff
 800745a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800745e:	f001 f905 	bl	800866c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007462:	f001 f8d1 	bl	8008608 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800746c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800746e:	e011      	b.n	8007494 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d012      	beq.n	800749e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	3310      	adds	r3, #16
 800747c:	4618      	mov	r0, r3
 800747e:	f000 fc45 	bl	8007d0c <xTaskRemoveFromEventList>
 8007482:	4603      	mov	r3, r0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d001      	beq.n	800748c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007488:	f000 fd1e 	bl	8007ec8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800748c:	7bbb      	ldrb	r3, [r7, #14]
 800748e:	3b01      	subs	r3, #1
 8007490:	b2db      	uxtb	r3, r3
 8007492:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007494:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007498:	2b00      	cmp	r3, #0
 800749a:	dce9      	bgt.n	8007470 <prvUnlockQueue+0x60>
 800749c:	e000      	b.n	80074a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800749e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	22ff      	movs	r2, #255	@ 0xff
 80074a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80074a8:	f001 f8e0 	bl	800866c <vPortExitCritical>
}
 80074ac:	bf00      	nop
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80074bc:	f001 f8a4 	bl	8008608 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d102      	bne.n	80074ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80074c8:	2301      	movs	r3, #1
 80074ca:	60fb      	str	r3, [r7, #12]
 80074cc:	e001      	b.n	80074d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80074ce:	2300      	movs	r3, #0
 80074d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80074d2:	f001 f8cb 	bl	800866c <vPortExitCritical>

	return xReturn;
 80074d6:	68fb      	ldr	r3, [r7, #12]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3710      	adds	r7, #16
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b08c      	sub	sp, #48	@ 0x30
 80074e4:	af04      	add	r7, sp, #16
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	603b      	str	r3, [r7, #0]
 80074ec:	4613      	mov	r3, r2
 80074ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80074f0:	88fb      	ldrh	r3, [r7, #6]
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	4618      	mov	r0, r3
 80074f6:	f001 f9a9 	bl	800884c <pvPortMalloc>
 80074fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d00e      	beq.n	8007520 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007502:	2064      	movs	r0, #100	@ 0x64
 8007504:	f001 f9a2 	bl	800884c <pvPortMalloc>
 8007508:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d003      	beq.n	8007518 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	697a      	ldr	r2, [r7, #20]
 8007514:	631a      	str	r2, [r3, #48]	@ 0x30
 8007516:	e005      	b.n	8007524 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007518:	6978      	ldr	r0, [r7, #20]
 800751a:	f001 fa65 	bl	80089e8 <vPortFree>
 800751e:	e001      	b.n	8007524 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007520:	2300      	movs	r3, #0
 8007522:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d013      	beq.n	8007552 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800752a:	88fa      	ldrh	r2, [r7, #6]
 800752c:	2300      	movs	r3, #0
 800752e:	9303      	str	r3, [sp, #12]
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	9302      	str	r3, [sp, #8]
 8007534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007536:	9301      	str	r3, [sp, #4]
 8007538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800753a:	9300      	str	r3, [sp, #0]
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	68b9      	ldr	r1, [r7, #8]
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f000 f80e 	bl	8007562 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007546:	69f8      	ldr	r0, [r7, #28]
 8007548:	f000 f8a2 	bl	8007690 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800754c:	2301      	movs	r3, #1
 800754e:	61bb      	str	r3, [r7, #24]
 8007550:	e002      	b.n	8007558 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007552:	f04f 33ff 	mov.w	r3, #4294967295
 8007556:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007558:	69bb      	ldr	r3, [r7, #24]
	}
 800755a:	4618      	mov	r0, r3
 800755c:	3720      	adds	r7, #32
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b088      	sub	sp, #32
 8007566:	af00      	add	r7, sp, #0
 8007568:	60f8      	str	r0, [r7, #12]
 800756a:	60b9      	str	r1, [r7, #8]
 800756c:	607a      	str	r2, [r7, #4]
 800756e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007572:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	461a      	mov	r2, r3
 800757a:	21a5      	movs	r1, #165	@ 0xa5
 800757c:	f001 fd66 	bl	800904c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007582:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800758a:	3b01      	subs	r3, #1
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	4413      	add	r3, r2
 8007590:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	f023 0307 	bic.w	r3, r3, #7
 8007598:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	f003 0307 	and.w	r3, r3, #7
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00b      	beq.n	80075bc <prvInitialiseNewTask+0x5a>
	__asm volatile
 80075a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a8:	f383 8811 	msr	BASEPRI, r3
 80075ac:	f3bf 8f6f 	isb	sy
 80075b0:	f3bf 8f4f 	dsb	sy
 80075b4:	617b      	str	r3, [r7, #20]
}
 80075b6:	bf00      	nop
 80075b8:	bf00      	nop
 80075ba:	e7fd      	b.n	80075b8 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 80075bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075be:	69ba      	ldr	r2, [r7, #24]
 80075c0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d01f      	beq.n	8007608 <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075c8:	2300      	movs	r3, #0
 80075ca:	61fb      	str	r3, [r7, #28]
 80075cc:	e012      	b.n	80075f4 <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80075ce:	68ba      	ldr	r2, [r7, #8]
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	4413      	add	r3, r2
 80075d4:	7819      	ldrb	r1, [r3, #0]
 80075d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	4413      	add	r3, r2
 80075dc:	3334      	adds	r3, #52	@ 0x34
 80075de:	460a      	mov	r2, r1
 80075e0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80075e2:	68ba      	ldr	r2, [r7, #8]
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	4413      	add	r3, r2
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d006      	beq.n	80075fc <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	3301      	adds	r3, #1
 80075f2:	61fb      	str	r3, [r7, #28]
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	2b0f      	cmp	r3, #15
 80075f8:	d9e9      	bls.n	80075ce <prvInitialiseNewTask+0x6c>
 80075fa:	e000      	b.n	80075fe <prvInitialiseNewTask+0x9c>
			{
				break;
 80075fc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80075fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007600:	2200      	movs	r2, #0
 8007602:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007606:	e003      	b.n	8007610 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800760a:	2200      	movs	r2, #0
 800760c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007612:	2b06      	cmp	r3, #6
 8007614:	d901      	bls.n	800761a <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007616:	2306      	movs	r3, #6
 8007618:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800761a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800761c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800761e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007622:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007624:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8007626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007628:	2200      	movs	r2, #0
 800762a:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800762c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800762e:	3304      	adds	r3, #4
 8007630:	4618      	mov	r0, r3
 8007632:	f7ff fbdd 	bl	8006df0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007638:	3318      	adds	r3, #24
 800763a:	4618      	mov	r0, r3
 800763c:	f7ff fbd8 	bl	8006df0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007642:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007644:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007648:	f1c3 0207 	rsb	r2, r3, #7
 800764c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800764e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007652:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007654:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8007656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007658:	2200      	movs	r2, #0
 800765a:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800765c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800765e:	2200      	movs	r2, #0
 8007660:	65da      	str	r2, [r3, #92]	@ 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007664:	2200      	movs	r2, #0
 8007666:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800766a:	683a      	ldr	r2, [r7, #0]
 800766c:	68f9      	ldr	r1, [r7, #12]
 800766e:	69b8      	ldr	r0, [r7, #24]
 8007670:	f000 fe9a 	bl	80083a8 <pxPortInitialiseStack>
 8007674:	4602      	mov	r2, r0
 8007676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007678:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800767a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800767c:	2b00      	cmp	r3, #0
 800767e:	d002      	beq.n	8007686 <prvInitialiseNewTask+0x124>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007682:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007684:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007686:	bf00      	nop
 8007688:	3720      	adds	r7, #32
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
	...

08007690 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007698:	f000 ffb6 	bl	8008608 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800769c:	4b2c      	ldr	r3, [pc, #176]	@ (8007750 <prvAddNewTaskToReadyList+0xc0>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	3301      	adds	r3, #1
 80076a2:	4a2b      	ldr	r2, [pc, #172]	@ (8007750 <prvAddNewTaskToReadyList+0xc0>)
 80076a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80076a6:	4b2b      	ldr	r3, [pc, #172]	@ (8007754 <prvAddNewTaskToReadyList+0xc4>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d109      	bne.n	80076c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80076ae:	4a29      	ldr	r2, [pc, #164]	@ (8007754 <prvAddNewTaskToReadyList+0xc4>)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80076b4:	4b26      	ldr	r3, [pc, #152]	@ (8007750 <prvAddNewTaskToReadyList+0xc0>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d110      	bne.n	80076de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80076bc:	f000 fc28 	bl	8007f10 <prvInitialiseTaskLists>
 80076c0:	e00d      	b.n	80076de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80076c2:	4b25      	ldr	r3, [pc, #148]	@ (8007758 <prvAddNewTaskToReadyList+0xc8>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d109      	bne.n	80076de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80076ca:	4b22      	ldr	r3, [pc, #136]	@ (8007754 <prvAddNewTaskToReadyList+0xc4>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d802      	bhi.n	80076de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80076d8:	4a1e      	ldr	r2, [pc, #120]	@ (8007754 <prvAddNewTaskToReadyList+0xc4>)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80076de:	4b1f      	ldr	r3, [pc, #124]	@ (800775c <prvAddNewTaskToReadyList+0xcc>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	3301      	adds	r3, #1
 80076e4:	4a1d      	ldr	r2, [pc, #116]	@ (800775c <prvAddNewTaskToReadyList+0xcc>)
 80076e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80076e8:	4b1c      	ldr	r3, [pc, #112]	@ (800775c <prvAddNewTaskToReadyList+0xcc>)
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f4:	2201      	movs	r2, #1
 80076f6:	409a      	lsls	r2, r3
 80076f8:	4b19      	ldr	r3, [pc, #100]	@ (8007760 <prvAddNewTaskToReadyList+0xd0>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	4a18      	ldr	r2, [pc, #96]	@ (8007760 <prvAddNewTaskToReadyList+0xd0>)
 8007700:	6013      	str	r3, [r2, #0]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007706:	4613      	mov	r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	4413      	add	r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	4a15      	ldr	r2, [pc, #84]	@ (8007764 <prvAddNewTaskToReadyList+0xd4>)
 8007710:	441a      	add	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	3304      	adds	r3, #4
 8007716:	4619      	mov	r1, r3
 8007718:	4610      	mov	r0, r2
 800771a:	f7ff fb76 	bl	8006e0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800771e:	f000 ffa5 	bl	800866c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007722:	4b0d      	ldr	r3, [pc, #52]	@ (8007758 <prvAddNewTaskToReadyList+0xc8>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00e      	beq.n	8007748 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800772a:	4b0a      	ldr	r3, [pc, #40]	@ (8007754 <prvAddNewTaskToReadyList+0xc4>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007734:	429a      	cmp	r2, r3
 8007736:	d207      	bcs.n	8007748 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007738:	4b0b      	ldr	r3, [pc, #44]	@ (8007768 <prvAddNewTaskToReadyList+0xd8>)
 800773a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800773e:	601a      	str	r2, [r3, #0]
 8007740:	f3bf 8f4f 	dsb	sy
 8007744:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007748:	bf00      	nop
 800774a:	3708      	adds	r7, #8
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}
 8007750:	20002b58 	.word	0x20002b58
 8007754:	20002a58 	.word	0x20002a58
 8007758:	20002b64 	.word	0x20002b64
 800775c:	20002b74 	.word	0x20002b74
 8007760:	20002b60 	.word	0x20002b60
 8007764:	20002a5c 	.word	0x20002a5c
 8007768:	e000ed04 	.word	0xe000ed04

0800776c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007774:	2300      	movs	r3, #0
 8007776:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d018      	beq.n	80077b0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800777e:	4b14      	ldr	r3, [pc, #80]	@ (80077d0 <vTaskDelay+0x64>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00b      	beq.n	800779e <vTaskDelay+0x32>
	__asm volatile
 8007786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800778a:	f383 8811 	msr	BASEPRI, r3
 800778e:	f3bf 8f6f 	isb	sy
 8007792:	f3bf 8f4f 	dsb	sy
 8007796:	60bb      	str	r3, [r7, #8]
}
 8007798:	bf00      	nop
 800779a:	bf00      	nop
 800779c:	e7fd      	b.n	800779a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800779e:	f000 f865 	bl	800786c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80077a2:	2100      	movs	r1, #0
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 fd99 	bl	80082dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80077aa:	f000 f86d 	bl	8007888 <xTaskResumeAll>
 80077ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d107      	bne.n	80077c6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80077b6:	4b07      	ldr	r3, [pc, #28]	@ (80077d4 <vTaskDelay+0x68>)
 80077b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077bc:	601a      	str	r2, [r3, #0]
 80077be:	f3bf 8f4f 	dsb	sy
 80077c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077c6:	bf00      	nop
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	20002b80 	.word	0x20002b80
 80077d4:	e000ed04 	.word	0xe000ed04

080077d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b086      	sub	sp, #24
 80077dc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80077de:	4b1d      	ldr	r3, [pc, #116]	@ (8007854 <vTaskStartScheduler+0x7c>)
 80077e0:	9301      	str	r3, [sp, #4]
 80077e2:	2300      	movs	r3, #0
 80077e4:	9300      	str	r3, [sp, #0]
 80077e6:	2300      	movs	r3, #0
 80077e8:	2280      	movs	r2, #128	@ 0x80
 80077ea:	491b      	ldr	r1, [pc, #108]	@ (8007858 <vTaskStartScheduler+0x80>)
 80077ec:	481b      	ldr	r0, [pc, #108]	@ (800785c <vTaskStartScheduler+0x84>)
 80077ee:	f7ff fe77 	bl	80074e0 <xTaskCreate>
 80077f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d118      	bne.n	800782c <vTaskStartScheduler+0x54>
	__asm volatile
 80077fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077fe:	f383 8811 	msr	BASEPRI, r3
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	60bb      	str	r3, [r7, #8]
}
 800780c:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800780e:	4b14      	ldr	r3, [pc, #80]	@ (8007860 <vTaskStartScheduler+0x88>)
 8007810:	f04f 32ff 	mov.w	r2, #4294967295
 8007814:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007816:	4b13      	ldr	r3, [pc, #76]	@ (8007864 <vTaskStartScheduler+0x8c>)
 8007818:	2201      	movs	r2, #1
 800781a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800781c:	4b12      	ldr	r3, [pc, #72]	@ (8007868 <vTaskStartScheduler+0x90>)
 800781e:	2200      	movs	r2, #0
 8007820:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8007822:	f7f9 f909 	bl	8000a38 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007826:	f000 fe4b 	bl	80084c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800782a:	e00f      	b.n	800784c <vTaskStartScheduler+0x74>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007832:	d10b      	bne.n	800784c <vTaskStartScheduler+0x74>
	__asm volatile
 8007834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007838:	f383 8811 	msr	BASEPRI, r3
 800783c:	f3bf 8f6f 	isb	sy
 8007840:	f3bf 8f4f 	dsb	sy
 8007844:	607b      	str	r3, [r7, #4]
}
 8007846:	bf00      	nop
 8007848:	bf00      	nop
 800784a:	e7fd      	b.n	8007848 <vTaskStartScheduler+0x70>
}
 800784c:	bf00      	nop
 800784e:	3710      	adds	r7, #16
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	20002b7c 	.word	0x20002b7c
 8007858:	0800a060 	.word	0x0800a060
 800785c:	08007ee1 	.word	0x08007ee1
 8007860:	20002b78 	.word	0x20002b78
 8007864:	20002b64 	.word	0x20002b64
 8007868:	20002b5c 	.word	0x20002b5c

0800786c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800786c:	b480      	push	{r7}
 800786e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007870:	4b04      	ldr	r3, [pc, #16]	@ (8007884 <vTaskSuspendAll+0x18>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	3301      	adds	r3, #1
 8007876:	4a03      	ldr	r2, [pc, #12]	@ (8007884 <vTaskSuspendAll+0x18>)
 8007878:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800787a:	bf00      	nop
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr
 8007884:	20002b80 	.word	0x20002b80

08007888 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800788e:	2300      	movs	r3, #0
 8007890:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007892:	2300      	movs	r3, #0
 8007894:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007896:	4b42      	ldr	r3, [pc, #264]	@ (80079a0 <xTaskResumeAll+0x118>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d10b      	bne.n	80078b6 <xTaskResumeAll+0x2e>
	__asm volatile
 800789e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a2:	f383 8811 	msr	BASEPRI, r3
 80078a6:	f3bf 8f6f 	isb	sy
 80078aa:	f3bf 8f4f 	dsb	sy
 80078ae:	603b      	str	r3, [r7, #0]
}
 80078b0:	bf00      	nop
 80078b2:	bf00      	nop
 80078b4:	e7fd      	b.n	80078b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80078b6:	f000 fea7 	bl	8008608 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80078ba:	4b39      	ldr	r3, [pc, #228]	@ (80079a0 <xTaskResumeAll+0x118>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	3b01      	subs	r3, #1
 80078c0:	4a37      	ldr	r2, [pc, #220]	@ (80079a0 <xTaskResumeAll+0x118>)
 80078c2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078c4:	4b36      	ldr	r3, [pc, #216]	@ (80079a0 <xTaskResumeAll+0x118>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d161      	bne.n	8007990 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80078cc:	4b35      	ldr	r3, [pc, #212]	@ (80079a4 <xTaskResumeAll+0x11c>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d05d      	beq.n	8007990 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078d4:	e02e      	b.n	8007934 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078d6:	4b34      	ldr	r3, [pc, #208]	@ (80079a8 <xTaskResumeAll+0x120>)
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	3318      	adds	r3, #24
 80078e2:	4618      	mov	r0, r3
 80078e4:	f7ff faee 	bl	8006ec4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	3304      	adds	r3, #4
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7ff fae9 	bl	8006ec4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f6:	2201      	movs	r2, #1
 80078f8:	409a      	lsls	r2, r3
 80078fa:	4b2c      	ldr	r3, [pc, #176]	@ (80079ac <xTaskResumeAll+0x124>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4313      	orrs	r3, r2
 8007900:	4a2a      	ldr	r2, [pc, #168]	@ (80079ac <xTaskResumeAll+0x124>)
 8007902:	6013      	str	r3, [r2, #0]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007908:	4613      	mov	r3, r2
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	4413      	add	r3, r2
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	4a27      	ldr	r2, [pc, #156]	@ (80079b0 <xTaskResumeAll+0x128>)
 8007912:	441a      	add	r2, r3
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	3304      	adds	r3, #4
 8007918:	4619      	mov	r1, r3
 800791a:	4610      	mov	r0, r2
 800791c:	f7ff fa75 	bl	8006e0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007924:	4b23      	ldr	r3, [pc, #140]	@ (80079b4 <xTaskResumeAll+0x12c>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800792a:	429a      	cmp	r2, r3
 800792c:	d302      	bcc.n	8007934 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800792e:	4b22      	ldr	r3, [pc, #136]	@ (80079b8 <xTaskResumeAll+0x130>)
 8007930:	2201      	movs	r2, #1
 8007932:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007934:	4b1c      	ldr	r3, [pc, #112]	@ (80079a8 <xTaskResumeAll+0x120>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1cc      	bne.n	80078d6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d001      	beq.n	8007946 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007942:	f000 fb63 	bl	800800c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007946:	4b1d      	ldr	r3, [pc, #116]	@ (80079bc <xTaskResumeAll+0x134>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d010      	beq.n	8007974 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007952:	f000 f85d 	bl	8007a10 <xTaskIncrementTick>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d002      	beq.n	8007962 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800795c:	4b16      	ldr	r3, [pc, #88]	@ (80079b8 <xTaskResumeAll+0x130>)
 800795e:	2201      	movs	r2, #1
 8007960:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	3b01      	subs	r3, #1
 8007966:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d1f1      	bne.n	8007952 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800796e:	4b13      	ldr	r3, [pc, #76]	@ (80079bc <xTaskResumeAll+0x134>)
 8007970:	2200      	movs	r2, #0
 8007972:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007974:	4b10      	ldr	r3, [pc, #64]	@ (80079b8 <xTaskResumeAll+0x130>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d009      	beq.n	8007990 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800797c:	2301      	movs	r3, #1
 800797e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007980:	4b0f      	ldr	r3, [pc, #60]	@ (80079c0 <xTaskResumeAll+0x138>)
 8007982:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007986:	601a      	str	r2, [r3, #0]
 8007988:	f3bf 8f4f 	dsb	sy
 800798c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007990:	f000 fe6c 	bl	800866c <vPortExitCritical>

	return xAlreadyYielded;
 8007994:	68bb      	ldr	r3, [r7, #8]
}
 8007996:	4618      	mov	r0, r3
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	20002b80 	.word	0x20002b80
 80079a4:	20002b58 	.word	0x20002b58
 80079a8:	20002b18 	.word	0x20002b18
 80079ac:	20002b60 	.word	0x20002b60
 80079b0:	20002a5c 	.word	0x20002a5c
 80079b4:	20002a58 	.word	0x20002a58
 80079b8:	20002b6c 	.word	0x20002b6c
 80079bc:	20002b68 	.word	0x20002b68
 80079c0:	e000ed04 	.word	0xe000ed04

080079c4 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80079c4:	b480      	push	{r7}
 80079c6:	b085      	sub	sp, #20
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d102      	bne.n	80079d8 <pcTaskGetName+0x14>
 80079d2:	4b0e      	ldr	r3, [pc, #56]	@ (8007a0c <pcTaskGetName+0x48>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	e000      	b.n	80079da <pcTaskGetName+0x16>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d10b      	bne.n	80079fa <pcTaskGetName+0x36>
	__asm volatile
 80079e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079e6:	f383 8811 	msr	BASEPRI, r3
 80079ea:	f3bf 8f6f 	isb	sy
 80079ee:	f3bf 8f4f 	dsb	sy
 80079f2:	60bb      	str	r3, [r7, #8]
}
 80079f4:	bf00      	nop
 80079f6:	bf00      	nop
 80079f8:	e7fd      	b.n	80079f6 <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	3334      	adds	r3, #52	@ 0x34
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3714      	adds	r7, #20
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	20002a58 	.word	0x20002a58

08007a10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b086      	sub	sp, #24
 8007a14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a16:	2300      	movs	r3, #0
 8007a18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a1a:	4b4f      	ldr	r3, [pc, #316]	@ (8007b58 <xTaskIncrementTick+0x148>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f040 808f 	bne.w	8007b42 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a24:	4b4d      	ldr	r3, [pc, #308]	@ (8007b5c <xTaskIncrementTick+0x14c>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a2c:	4a4b      	ldr	r2, [pc, #300]	@ (8007b5c <xTaskIncrementTick+0x14c>)
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d121      	bne.n	8007a7c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a38:	4b49      	ldr	r3, [pc, #292]	@ (8007b60 <xTaskIncrementTick+0x150>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00b      	beq.n	8007a5a <xTaskIncrementTick+0x4a>
	__asm volatile
 8007a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a46:	f383 8811 	msr	BASEPRI, r3
 8007a4a:	f3bf 8f6f 	isb	sy
 8007a4e:	f3bf 8f4f 	dsb	sy
 8007a52:	603b      	str	r3, [r7, #0]
}
 8007a54:	bf00      	nop
 8007a56:	bf00      	nop
 8007a58:	e7fd      	b.n	8007a56 <xTaskIncrementTick+0x46>
 8007a5a:	4b41      	ldr	r3, [pc, #260]	@ (8007b60 <xTaskIncrementTick+0x150>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	60fb      	str	r3, [r7, #12]
 8007a60:	4b40      	ldr	r3, [pc, #256]	@ (8007b64 <xTaskIncrementTick+0x154>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a3e      	ldr	r2, [pc, #248]	@ (8007b60 <xTaskIncrementTick+0x150>)
 8007a66:	6013      	str	r3, [r2, #0]
 8007a68:	4a3e      	ldr	r2, [pc, #248]	@ (8007b64 <xTaskIncrementTick+0x154>)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6013      	str	r3, [r2, #0]
 8007a6e:	4b3e      	ldr	r3, [pc, #248]	@ (8007b68 <xTaskIncrementTick+0x158>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	3301      	adds	r3, #1
 8007a74:	4a3c      	ldr	r2, [pc, #240]	@ (8007b68 <xTaskIncrementTick+0x158>)
 8007a76:	6013      	str	r3, [r2, #0]
 8007a78:	f000 fac8 	bl	800800c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a7c:	4b3b      	ldr	r3, [pc, #236]	@ (8007b6c <xTaskIncrementTick+0x15c>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	693a      	ldr	r2, [r7, #16]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d348      	bcc.n	8007b18 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a86:	4b36      	ldr	r3, [pc, #216]	@ (8007b60 <xTaskIncrementTick+0x150>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d104      	bne.n	8007a9a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a90:	4b36      	ldr	r3, [pc, #216]	@ (8007b6c <xTaskIncrementTick+0x15c>)
 8007a92:	f04f 32ff 	mov.w	r2, #4294967295
 8007a96:	601a      	str	r2, [r3, #0]
					break;
 8007a98:	e03e      	b.n	8007b18 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a9a:	4b31      	ldr	r3, [pc, #196]	@ (8007b60 <xTaskIncrementTick+0x150>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007aaa:	693a      	ldr	r2, [r7, #16]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d203      	bcs.n	8007aba <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007ab2:	4a2e      	ldr	r2, [pc, #184]	@ (8007b6c <xTaskIncrementTick+0x15c>)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007ab8:	e02e      	b.n	8007b18 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	3304      	adds	r3, #4
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7ff fa00 	bl	8006ec4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d004      	beq.n	8007ad6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	3318      	adds	r3, #24
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7ff f9f7 	bl	8006ec4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ada:	2201      	movs	r2, #1
 8007adc:	409a      	lsls	r2, r3
 8007ade:	4b24      	ldr	r3, [pc, #144]	@ (8007b70 <xTaskIncrementTick+0x160>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	4a22      	ldr	r2, [pc, #136]	@ (8007b70 <xTaskIncrementTick+0x160>)
 8007ae6:	6013      	str	r3, [r2, #0]
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aec:	4613      	mov	r3, r2
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	4413      	add	r3, r2
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	4a1f      	ldr	r2, [pc, #124]	@ (8007b74 <xTaskIncrementTick+0x164>)
 8007af6:	441a      	add	r2, r3
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	3304      	adds	r3, #4
 8007afc:	4619      	mov	r1, r3
 8007afe:	4610      	mov	r0, r2
 8007b00:	f7ff f983 	bl	8006e0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b08:	4b1b      	ldr	r3, [pc, #108]	@ (8007b78 <xTaskIncrementTick+0x168>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d3b9      	bcc.n	8007a86 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007b12:	2301      	movs	r3, #1
 8007b14:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b16:	e7b6      	b.n	8007a86 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b18:	4b17      	ldr	r3, [pc, #92]	@ (8007b78 <xTaskIncrementTick+0x168>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b1e:	4915      	ldr	r1, [pc, #84]	@ (8007b74 <xTaskIncrementTick+0x164>)
 8007b20:	4613      	mov	r3, r2
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	4413      	add	r3, r2
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	440b      	add	r3, r1
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d901      	bls.n	8007b34 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007b30:	2301      	movs	r3, #1
 8007b32:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b34:	4b11      	ldr	r3, [pc, #68]	@ (8007b7c <xTaskIncrementTick+0x16c>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d007      	beq.n	8007b4c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	617b      	str	r3, [r7, #20]
 8007b40:	e004      	b.n	8007b4c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007b42:	4b0f      	ldr	r3, [pc, #60]	@ (8007b80 <xTaskIncrementTick+0x170>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	3301      	adds	r3, #1
 8007b48:	4a0d      	ldr	r2, [pc, #52]	@ (8007b80 <xTaskIncrementTick+0x170>)
 8007b4a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007b4c:	697b      	ldr	r3, [r7, #20]
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3718      	adds	r7, #24
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	20002b80 	.word	0x20002b80
 8007b5c:	20002b5c 	.word	0x20002b5c
 8007b60:	20002b10 	.word	0x20002b10
 8007b64:	20002b14 	.word	0x20002b14
 8007b68:	20002b70 	.word	0x20002b70
 8007b6c:	20002b78 	.word	0x20002b78
 8007b70:	20002b60 	.word	0x20002b60
 8007b74:	20002a5c 	.word	0x20002a5c
 8007b78:	20002a58 	.word	0x20002a58
 8007b7c:	20002b6c 	.word	0x20002b6c
 8007b80:	20002b68 	.word	0x20002b68

08007b84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b088      	sub	sp, #32
 8007b88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b8a:	4b46      	ldr	r3, [pc, #280]	@ (8007ca4 <vTaskSwitchContext+0x120>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d003      	beq.n	8007b9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b92:	4b45      	ldr	r3, [pc, #276]	@ (8007ca8 <vTaskSwitchContext+0x124>)
 8007b94:	2201      	movs	r2, #1
 8007b96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b98:	e080      	b.n	8007c9c <vTaskSwitchContext+0x118>
		xYieldPending = pdFALSE;
 8007b9a:	4b43      	ldr	r3, [pc, #268]	@ (8007ca8 <vTaskSwitchContext+0x124>)
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8007ba0:	f7f8 ff51 	bl	8000a46 <getRunTimeCounterValue>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	4a41      	ldr	r2, [pc, #260]	@ (8007cac <vTaskSwitchContext+0x128>)
 8007ba8:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8007baa:	4b40      	ldr	r3, [pc, #256]	@ (8007cac <vTaskSwitchContext+0x128>)
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	4b40      	ldr	r3, [pc, #256]	@ (8007cb0 <vTaskSwitchContext+0x12c>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d909      	bls.n	8007bca <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8007bb6:	4b3f      	ldr	r3, [pc, #252]	@ (8007cb4 <vTaskSwitchContext+0x130>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8007bbc:	4a3b      	ldr	r2, [pc, #236]	@ (8007cac <vTaskSwitchContext+0x128>)
 8007bbe:	6810      	ldr	r0, [r2, #0]
 8007bc0:	4a3b      	ldr	r2, [pc, #236]	@ (8007cb0 <vTaskSwitchContext+0x12c>)
 8007bc2:	6812      	ldr	r2, [r2, #0]
 8007bc4:	1a82      	subs	r2, r0, r2
 8007bc6:	440a      	add	r2, r1
 8007bc8:	659a      	str	r2, [r3, #88]	@ 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8007bca:	4b38      	ldr	r3, [pc, #224]	@ (8007cac <vTaskSwitchContext+0x128>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a38      	ldr	r2, [pc, #224]	@ (8007cb0 <vTaskSwitchContext+0x12c>)
 8007bd0:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8007bd2:	4b38      	ldr	r3, [pc, #224]	@ (8007cb4 <vTaskSwitchContext+0x130>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bd8:	61fb      	str	r3, [r7, #28]
 8007bda:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8007bde:	61bb      	str	r3, [r7, #24]
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	69ba      	ldr	r2, [r7, #24]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d111      	bne.n	8007c0e <vTaskSwitchContext+0x8a>
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	3304      	adds	r3, #4
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	69ba      	ldr	r2, [r7, #24]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d10b      	bne.n	8007c0e <vTaskSwitchContext+0x8a>
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	3308      	adds	r3, #8
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	69ba      	ldr	r2, [r7, #24]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d105      	bne.n	8007c0e <vTaskSwitchContext+0x8a>
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	330c      	adds	r3, #12
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	69ba      	ldr	r2, [r7, #24]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d008      	beq.n	8007c20 <vTaskSwitchContext+0x9c>
 8007c0e:	4b29      	ldr	r3, [pc, #164]	@ (8007cb4 <vTaskSwitchContext+0x130>)
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	4b28      	ldr	r3, [pc, #160]	@ (8007cb4 <vTaskSwitchContext+0x130>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	3334      	adds	r3, #52	@ 0x34
 8007c18:	4619      	mov	r1, r3
 8007c1a:	4610      	mov	r0, r2
 8007c1c:	f7f8 ff1b 	bl	8000a56 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c20:	4b25      	ldr	r3, [pc, #148]	@ (8007cb8 <vTaskSwitchContext+0x134>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	fab3 f383 	clz	r3, r3
 8007c2c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007c2e:	7afb      	ldrb	r3, [r7, #11]
 8007c30:	f1c3 031f 	rsb	r3, r3, #31
 8007c34:	617b      	str	r3, [r7, #20]
 8007c36:	4921      	ldr	r1, [pc, #132]	@ (8007cbc <vTaskSwitchContext+0x138>)
 8007c38:	697a      	ldr	r2, [r7, #20]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	4413      	add	r3, r2
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	440b      	add	r3, r1
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d10b      	bne.n	8007c62 <vTaskSwitchContext+0xde>
	__asm volatile
 8007c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c4e:	f383 8811 	msr	BASEPRI, r3
 8007c52:	f3bf 8f6f 	isb	sy
 8007c56:	f3bf 8f4f 	dsb	sy
 8007c5a:	607b      	str	r3, [r7, #4]
}
 8007c5c:	bf00      	nop
 8007c5e:	bf00      	nop
 8007c60:	e7fd      	b.n	8007c5e <vTaskSwitchContext+0xda>
 8007c62:	697a      	ldr	r2, [r7, #20]
 8007c64:	4613      	mov	r3, r2
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	4413      	add	r3, r2
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	4a13      	ldr	r2, [pc, #76]	@ (8007cbc <vTaskSwitchContext+0x138>)
 8007c6e:	4413      	add	r3, r2
 8007c70:	613b      	str	r3, [r7, #16]
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	685a      	ldr	r2, [r3, #4]
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	605a      	str	r2, [r3, #4]
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	685a      	ldr	r2, [r3, #4]
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	3308      	adds	r3, #8
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d104      	bne.n	8007c92 <vTaskSwitchContext+0x10e>
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	685a      	ldr	r2, [r3, #4]
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	605a      	str	r2, [r3, #4]
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	4a06      	ldr	r2, [pc, #24]	@ (8007cb4 <vTaskSwitchContext+0x130>)
 8007c9a:	6013      	str	r3, [r2, #0]
}
 8007c9c:	bf00      	nop
 8007c9e:	3720      	adds	r7, #32
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	20002b80 	.word	0x20002b80
 8007ca8:	20002b6c 	.word	0x20002b6c
 8007cac:	20002b88 	.word	0x20002b88
 8007cb0:	20002b84 	.word	0x20002b84
 8007cb4:	20002a58 	.word	0x20002a58
 8007cb8:	20002b60 	.word	0x20002b60
 8007cbc:	20002a5c 	.word	0x20002a5c

08007cc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d10b      	bne.n	8007ce8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd4:	f383 8811 	msr	BASEPRI, r3
 8007cd8:	f3bf 8f6f 	isb	sy
 8007cdc:	f3bf 8f4f 	dsb	sy
 8007ce0:	60fb      	str	r3, [r7, #12]
}
 8007ce2:	bf00      	nop
 8007ce4:	bf00      	nop
 8007ce6:	e7fd      	b.n	8007ce4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ce8:	4b07      	ldr	r3, [pc, #28]	@ (8007d08 <vTaskPlaceOnEventList+0x48>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	3318      	adds	r3, #24
 8007cee:	4619      	mov	r1, r3
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f7ff f8ae 	bl	8006e52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007cf6:	2101      	movs	r1, #1
 8007cf8:	6838      	ldr	r0, [r7, #0]
 8007cfa:	f000 faef 	bl	80082dc <prvAddCurrentTaskToDelayedList>
}
 8007cfe:	bf00      	nop
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	20002a58 	.word	0x20002a58

08007d0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b086      	sub	sp, #24
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10b      	bne.n	8007d3a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d26:	f383 8811 	msr	BASEPRI, r3
 8007d2a:	f3bf 8f6f 	isb	sy
 8007d2e:	f3bf 8f4f 	dsb	sy
 8007d32:	60fb      	str	r3, [r7, #12]
}
 8007d34:	bf00      	nop
 8007d36:	bf00      	nop
 8007d38:	e7fd      	b.n	8007d36 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	3318      	adds	r3, #24
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7ff f8c0 	bl	8006ec4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d44:	4b1d      	ldr	r3, [pc, #116]	@ (8007dbc <xTaskRemoveFromEventList+0xb0>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d11c      	bne.n	8007d86 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	3304      	adds	r3, #4
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7ff f8b7 	bl	8006ec4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	409a      	lsls	r2, r3
 8007d5e:	4b18      	ldr	r3, [pc, #96]	@ (8007dc0 <xTaskRemoveFromEventList+0xb4>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	4a16      	ldr	r2, [pc, #88]	@ (8007dc0 <xTaskRemoveFromEventList+0xb4>)
 8007d66:	6013      	str	r3, [r2, #0]
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	4413      	add	r3, r2
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	4a13      	ldr	r2, [pc, #76]	@ (8007dc4 <xTaskRemoveFromEventList+0xb8>)
 8007d76:	441a      	add	r2, r3
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	3304      	adds	r3, #4
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	4610      	mov	r0, r2
 8007d80:	f7ff f843 	bl	8006e0a <vListInsertEnd>
 8007d84:	e005      	b.n	8007d92 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	3318      	adds	r3, #24
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	480e      	ldr	r0, [pc, #56]	@ (8007dc8 <xTaskRemoveFromEventList+0xbc>)
 8007d8e:	f7ff f83c 	bl	8006e0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d96:	4b0d      	ldr	r3, [pc, #52]	@ (8007dcc <xTaskRemoveFromEventList+0xc0>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d905      	bls.n	8007dac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007da0:	2301      	movs	r3, #1
 8007da2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007da4:	4b0a      	ldr	r3, [pc, #40]	@ (8007dd0 <xTaskRemoveFromEventList+0xc4>)
 8007da6:	2201      	movs	r2, #1
 8007da8:	601a      	str	r2, [r3, #0]
 8007daa:	e001      	b.n	8007db0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007dac:	2300      	movs	r3, #0
 8007dae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007db0:	697b      	ldr	r3, [r7, #20]
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3718      	adds	r7, #24
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	20002b80 	.word	0x20002b80
 8007dc0:	20002b60 	.word	0x20002b60
 8007dc4:	20002a5c 	.word	0x20002a5c
 8007dc8:	20002b18 	.word	0x20002b18
 8007dcc:	20002a58 	.word	0x20002a58
 8007dd0:	20002b6c 	.word	0x20002b6c

08007dd4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ddc:	4b06      	ldr	r3, [pc, #24]	@ (8007df8 <vTaskInternalSetTimeOutState+0x24>)
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007de4:	4b05      	ldr	r3, [pc, #20]	@ (8007dfc <vTaskInternalSetTimeOutState+0x28>)
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	605a      	str	r2, [r3, #4]
}
 8007dec:	bf00      	nop
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr
 8007df8:	20002b70 	.word	0x20002b70
 8007dfc:	20002b5c 	.word	0x20002b5c

08007e00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b088      	sub	sp, #32
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d10b      	bne.n	8007e28 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e14:	f383 8811 	msr	BASEPRI, r3
 8007e18:	f3bf 8f6f 	isb	sy
 8007e1c:	f3bf 8f4f 	dsb	sy
 8007e20:	613b      	str	r3, [r7, #16]
}
 8007e22:	bf00      	nop
 8007e24:	bf00      	nop
 8007e26:	e7fd      	b.n	8007e24 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d10b      	bne.n	8007e46 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e32:	f383 8811 	msr	BASEPRI, r3
 8007e36:	f3bf 8f6f 	isb	sy
 8007e3a:	f3bf 8f4f 	dsb	sy
 8007e3e:	60fb      	str	r3, [r7, #12]
}
 8007e40:	bf00      	nop
 8007e42:	bf00      	nop
 8007e44:	e7fd      	b.n	8007e42 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007e46:	f000 fbdf 	bl	8008608 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8007ec0 <xTaskCheckForTimeOut+0xc0>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	69ba      	ldr	r2, [r7, #24]
 8007e56:	1ad3      	subs	r3, r2, r3
 8007e58:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e62:	d102      	bne.n	8007e6a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e64:	2300      	movs	r3, #0
 8007e66:	61fb      	str	r3, [r7, #28]
 8007e68:	e023      	b.n	8007eb2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	4b15      	ldr	r3, [pc, #84]	@ (8007ec4 <xTaskCheckForTimeOut+0xc4>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d007      	beq.n	8007e86 <xTaskCheckForTimeOut+0x86>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	69ba      	ldr	r2, [r7, #24]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d302      	bcc.n	8007e86 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e80:	2301      	movs	r3, #1
 8007e82:	61fb      	str	r3, [r7, #28]
 8007e84:	e015      	b.n	8007eb2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d20b      	bcs.n	8007ea8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	1ad2      	subs	r2, r2, r3
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f7ff ff99 	bl	8007dd4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	61fb      	str	r3, [r7, #28]
 8007ea6:	e004      	b.n	8007eb2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007eb2:	f000 fbdb 	bl	800866c <vPortExitCritical>

	return xReturn;
 8007eb6:	69fb      	ldr	r3, [r7, #28]
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3720      	adds	r7, #32
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	20002b5c 	.word	0x20002b5c
 8007ec4:	20002b70 	.word	0x20002b70

08007ec8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ec8:	b480      	push	{r7}
 8007eca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ecc:	4b03      	ldr	r3, [pc, #12]	@ (8007edc <vTaskMissedYield+0x14>)
 8007ece:	2201      	movs	r2, #1
 8007ed0:	601a      	str	r2, [r3, #0]
}
 8007ed2:	bf00      	nop
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr
 8007edc:	20002b6c 	.word	0x20002b6c

08007ee0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ee8:	f000 f852 	bl	8007f90 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007eec:	4b06      	ldr	r3, [pc, #24]	@ (8007f08 <prvIdleTask+0x28>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d9f9      	bls.n	8007ee8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007ef4:	4b05      	ldr	r3, [pc, #20]	@ (8007f0c <prvIdleTask+0x2c>)
 8007ef6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007efa:	601a      	str	r2, [r3, #0]
 8007efc:	f3bf 8f4f 	dsb	sy
 8007f00:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007f04:	e7f0      	b.n	8007ee8 <prvIdleTask+0x8>
 8007f06:	bf00      	nop
 8007f08:	20002a5c 	.word	0x20002a5c
 8007f0c:	e000ed04 	.word	0xe000ed04

08007f10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f16:	2300      	movs	r3, #0
 8007f18:	607b      	str	r3, [r7, #4]
 8007f1a:	e00c      	b.n	8007f36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	4613      	mov	r3, r2
 8007f20:	009b      	lsls	r3, r3, #2
 8007f22:	4413      	add	r3, r2
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	4a12      	ldr	r2, [pc, #72]	@ (8007f70 <prvInitialiseTaskLists+0x60>)
 8007f28:	4413      	add	r3, r2
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7fe ff40 	bl	8006db0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	3301      	adds	r3, #1
 8007f34:	607b      	str	r3, [r7, #4]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2b06      	cmp	r3, #6
 8007f3a:	d9ef      	bls.n	8007f1c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f3c:	480d      	ldr	r0, [pc, #52]	@ (8007f74 <prvInitialiseTaskLists+0x64>)
 8007f3e:	f7fe ff37 	bl	8006db0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f42:	480d      	ldr	r0, [pc, #52]	@ (8007f78 <prvInitialiseTaskLists+0x68>)
 8007f44:	f7fe ff34 	bl	8006db0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f48:	480c      	ldr	r0, [pc, #48]	@ (8007f7c <prvInitialiseTaskLists+0x6c>)
 8007f4a:	f7fe ff31 	bl	8006db0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f4e:	480c      	ldr	r0, [pc, #48]	@ (8007f80 <prvInitialiseTaskLists+0x70>)
 8007f50:	f7fe ff2e 	bl	8006db0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f54:	480b      	ldr	r0, [pc, #44]	@ (8007f84 <prvInitialiseTaskLists+0x74>)
 8007f56:	f7fe ff2b 	bl	8006db0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8007f88 <prvInitialiseTaskLists+0x78>)
 8007f5c:	4a05      	ldr	r2, [pc, #20]	@ (8007f74 <prvInitialiseTaskLists+0x64>)
 8007f5e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f60:	4b0a      	ldr	r3, [pc, #40]	@ (8007f8c <prvInitialiseTaskLists+0x7c>)
 8007f62:	4a05      	ldr	r2, [pc, #20]	@ (8007f78 <prvInitialiseTaskLists+0x68>)
 8007f64:	601a      	str	r2, [r3, #0]
}
 8007f66:	bf00      	nop
 8007f68:	3708      	adds	r7, #8
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	20002a5c 	.word	0x20002a5c
 8007f74:	20002ae8 	.word	0x20002ae8
 8007f78:	20002afc 	.word	0x20002afc
 8007f7c:	20002b18 	.word	0x20002b18
 8007f80:	20002b2c 	.word	0x20002b2c
 8007f84:	20002b44 	.word	0x20002b44
 8007f88:	20002b10 	.word	0x20002b10
 8007f8c:	20002b14 	.word	0x20002b14

08007f90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f96:	e019      	b.n	8007fcc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f98:	f000 fb36 	bl	8008608 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f9c:	4b10      	ldr	r3, [pc, #64]	@ (8007fe0 <prvCheckTasksWaitingTermination+0x50>)
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	3304      	adds	r3, #4
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f7fe ff8b 	bl	8006ec4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007fae:	4b0d      	ldr	r3, [pc, #52]	@ (8007fe4 <prvCheckTasksWaitingTermination+0x54>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	3b01      	subs	r3, #1
 8007fb4:	4a0b      	ldr	r2, [pc, #44]	@ (8007fe4 <prvCheckTasksWaitingTermination+0x54>)
 8007fb6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8007fe8 <prvCheckTasksWaitingTermination+0x58>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	3b01      	subs	r3, #1
 8007fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8007fe8 <prvCheckTasksWaitingTermination+0x58>)
 8007fc0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007fc2:	f000 fb53 	bl	800866c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f810 	bl	8007fec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fcc:	4b06      	ldr	r3, [pc, #24]	@ (8007fe8 <prvCheckTasksWaitingTermination+0x58>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d1e1      	bne.n	8007f98 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007fd4:	bf00      	nop
 8007fd6:	bf00      	nop
 8007fd8:	3708      	adds	r7, #8
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	20002b2c 	.word	0x20002b2c
 8007fe4:	20002b58 	.word	0x20002b58
 8007fe8:	20002b40 	.word	0x20002b40

08007fec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f000 fcf5 	bl	80089e8 <vPortFree>
			vPortFree( pxTCB );
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 fcf2 	bl	80089e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008004:	bf00      	nop
 8008006:	3708      	adds	r7, #8
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008012:	4b0c      	ldr	r3, [pc, #48]	@ (8008044 <prvResetNextTaskUnblockTime+0x38>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d104      	bne.n	8008026 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800801c:	4b0a      	ldr	r3, [pc, #40]	@ (8008048 <prvResetNextTaskUnblockTime+0x3c>)
 800801e:	f04f 32ff 	mov.w	r2, #4294967295
 8008022:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008024:	e008      	b.n	8008038 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008026:	4b07      	ldr	r3, [pc, #28]	@ (8008044 <prvResetNextTaskUnblockTime+0x38>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	4a04      	ldr	r2, [pc, #16]	@ (8008048 <prvResetNextTaskUnblockTime+0x3c>)
 8008036:	6013      	str	r3, [r2, #0]
}
 8008038:	bf00      	nop
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr
 8008044:	20002b10 	.word	0x20002b10
 8008048:	20002b78 	.word	0x20002b78

0800804c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008052:	4b05      	ldr	r3, [pc, #20]	@ (8008068 <xTaskGetCurrentTaskHandle+0x1c>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008058:	687b      	ldr	r3, [r7, #4]
	}
 800805a:	4618      	mov	r0, r3
 800805c:	370c      	adds	r7, #12
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop
 8008068:	20002a58 	.word	0x20002a58

0800806c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008072:	4b0b      	ldr	r3, [pc, #44]	@ (80080a0 <xTaskGetSchedulerState+0x34>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d102      	bne.n	8008080 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800807a:	2301      	movs	r3, #1
 800807c:	607b      	str	r3, [r7, #4]
 800807e:	e008      	b.n	8008092 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008080:	4b08      	ldr	r3, [pc, #32]	@ (80080a4 <xTaskGetSchedulerState+0x38>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d102      	bne.n	800808e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008088:	2302      	movs	r3, #2
 800808a:	607b      	str	r3, [r7, #4]
 800808c:	e001      	b.n	8008092 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800808e:	2300      	movs	r3, #0
 8008090:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008092:	687b      	ldr	r3, [r7, #4]
	}
 8008094:	4618      	mov	r0, r3
 8008096:	370c      	adds	r7, #12
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr
 80080a0:	20002b64 	.word	0x20002b64
 80080a4:	20002b80 	.word	0x20002b80

080080a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80080b4:	2300      	movs	r3, #0
 80080b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d05e      	beq.n	800817c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080c2:	4b31      	ldr	r3, [pc, #196]	@ (8008188 <xTaskPriorityInherit+0xe0>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d24e      	bcs.n	800816a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	699b      	ldr	r3, [r3, #24]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	db06      	blt.n	80080e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080d4:	4b2c      	ldr	r3, [pc, #176]	@ (8008188 <xTaskPriorityInherit+0xe0>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080da:	f1c3 0207 	rsb	r2, r3, #7
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	6959      	ldr	r1, [r3, #20]
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080ea:	4613      	mov	r3, r2
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	4413      	add	r3, r2
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	4a26      	ldr	r2, [pc, #152]	@ (800818c <xTaskPriorityInherit+0xe4>)
 80080f4:	4413      	add	r3, r2
 80080f6:	4299      	cmp	r1, r3
 80080f8:	d12f      	bne.n	800815a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	3304      	adds	r3, #4
 80080fe:	4618      	mov	r0, r3
 8008100:	f7fe fee0 	bl	8006ec4 <uxListRemove>
 8008104:	4603      	mov	r3, r0
 8008106:	2b00      	cmp	r3, #0
 8008108:	d10a      	bne.n	8008120 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800810e:	2201      	movs	r2, #1
 8008110:	fa02 f303 	lsl.w	r3, r2, r3
 8008114:	43da      	mvns	r2, r3
 8008116:	4b1e      	ldr	r3, [pc, #120]	@ (8008190 <xTaskPriorityInherit+0xe8>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4013      	ands	r3, r2
 800811c:	4a1c      	ldr	r2, [pc, #112]	@ (8008190 <xTaskPriorityInherit+0xe8>)
 800811e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008120:	4b19      	ldr	r3, [pc, #100]	@ (8008188 <xTaskPriorityInherit+0xe0>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800812e:	2201      	movs	r2, #1
 8008130:	409a      	lsls	r2, r3
 8008132:	4b17      	ldr	r3, [pc, #92]	@ (8008190 <xTaskPriorityInherit+0xe8>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4313      	orrs	r3, r2
 8008138:	4a15      	ldr	r2, [pc, #84]	@ (8008190 <xTaskPriorityInherit+0xe8>)
 800813a:	6013      	str	r3, [r2, #0]
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008140:	4613      	mov	r3, r2
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	4413      	add	r3, r2
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	4a10      	ldr	r2, [pc, #64]	@ (800818c <xTaskPriorityInherit+0xe4>)
 800814a:	441a      	add	r2, r3
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	3304      	adds	r3, #4
 8008150:	4619      	mov	r1, r3
 8008152:	4610      	mov	r0, r2
 8008154:	f7fe fe59 	bl	8006e0a <vListInsertEnd>
 8008158:	e004      	b.n	8008164 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800815a:	4b0b      	ldr	r3, [pc, #44]	@ (8008188 <xTaskPriorityInherit+0xe0>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008164:	2301      	movs	r3, #1
 8008166:	60fb      	str	r3, [r7, #12]
 8008168:	e008      	b.n	800817c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800816e:	4b06      	ldr	r3, [pc, #24]	@ (8008188 <xTaskPriorityInherit+0xe0>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008174:	429a      	cmp	r2, r3
 8008176:	d201      	bcs.n	800817c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008178:	2301      	movs	r3, #1
 800817a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800817c:	68fb      	ldr	r3, [r7, #12]
	}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	20002a58 	.word	0x20002a58
 800818c:	20002a5c 	.word	0x20002a5c
 8008190:	20002b60 	.word	0x20002b60

08008194 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008194:	b580      	push	{r7, lr}
 8008196:	b088      	sub	sp, #32
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80081a2:	2301      	movs	r3, #1
 80081a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d079      	beq.n	80082a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d10b      	bne.n	80081cc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80081b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081b8:	f383 8811 	msr	BASEPRI, r3
 80081bc:	f3bf 8f6f 	isb	sy
 80081c0:	f3bf 8f4f 	dsb	sy
 80081c4:	60fb      	str	r3, [r7, #12]
}
 80081c6:	bf00      	nop
 80081c8:	bf00      	nop
 80081ca:	e7fd      	b.n	80081c8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081d0:	683a      	ldr	r2, [r7, #0]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d902      	bls.n	80081dc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	61fb      	str	r3, [r7, #28]
 80081da:	e002      	b.n	80081e2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081e0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e6:	69fa      	ldr	r2, [r7, #28]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d059      	beq.n	80082a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081f0:	697a      	ldr	r2, [r7, #20]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d154      	bne.n	80082a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80081f6:	4b2c      	ldr	r3, [pc, #176]	@ (80082a8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	69ba      	ldr	r2, [r7, #24]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d10b      	bne.n	8008218 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008204:	f383 8811 	msr	BASEPRI, r3
 8008208:	f3bf 8f6f 	isb	sy
 800820c:	f3bf 8f4f 	dsb	sy
 8008210:	60bb      	str	r3, [r7, #8]
}
 8008212:	bf00      	nop
 8008214:	bf00      	nop
 8008216:	e7fd      	b.n	8008214 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800821c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	69fa      	ldr	r2, [r7, #28]
 8008222:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	699b      	ldr	r3, [r3, #24]
 8008228:	2b00      	cmp	r3, #0
 800822a:	db04      	blt.n	8008236 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	f1c3 0207 	rsb	r2, r3, #7
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008236:	69bb      	ldr	r3, [r7, #24]
 8008238:	6959      	ldr	r1, [r3, #20]
 800823a:	693a      	ldr	r2, [r7, #16]
 800823c:	4613      	mov	r3, r2
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	4413      	add	r3, r2
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	4a19      	ldr	r2, [pc, #100]	@ (80082ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008246:	4413      	add	r3, r2
 8008248:	4299      	cmp	r1, r3
 800824a:	d129      	bne.n	80082a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800824c:	69bb      	ldr	r3, [r7, #24]
 800824e:	3304      	adds	r3, #4
 8008250:	4618      	mov	r0, r3
 8008252:	f7fe fe37 	bl	8006ec4 <uxListRemove>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d10a      	bne.n	8008272 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008260:	2201      	movs	r2, #1
 8008262:	fa02 f303 	lsl.w	r3, r2, r3
 8008266:	43da      	mvns	r2, r3
 8008268:	4b11      	ldr	r3, [pc, #68]	@ (80082b0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4013      	ands	r3, r2
 800826e:	4a10      	ldr	r2, [pc, #64]	@ (80082b0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008270:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008276:	2201      	movs	r2, #1
 8008278:	409a      	lsls	r2, r3
 800827a:	4b0d      	ldr	r3, [pc, #52]	@ (80082b0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4313      	orrs	r3, r2
 8008280:	4a0b      	ldr	r2, [pc, #44]	@ (80082b0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008282:	6013      	str	r3, [r2, #0]
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008288:	4613      	mov	r3, r2
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	4413      	add	r3, r2
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	4a06      	ldr	r2, [pc, #24]	@ (80082ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008292:	441a      	add	r2, r3
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	3304      	adds	r3, #4
 8008298:	4619      	mov	r1, r3
 800829a:	4610      	mov	r0, r2
 800829c:	f7fe fdb5 	bl	8006e0a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80082a0:	bf00      	nop
 80082a2:	3720      	adds	r7, #32
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	20002a58 	.word	0x20002a58
 80082ac:	20002a5c 	.word	0x20002a5c
 80082b0:	20002b60 	.word	0x20002b60

080082b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80082b4:	b480      	push	{r7}
 80082b6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80082b8:	4b07      	ldr	r3, [pc, #28]	@ (80082d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d004      	beq.n	80082ca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80082c0:	4b05      	ldr	r3, [pc, #20]	@ (80082d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80082c6:	3201      	adds	r2, #1
 80082c8:	655a      	str	r2, [r3, #84]	@ 0x54
		}

		return pxCurrentTCB;
 80082ca:	4b03      	ldr	r3, [pc, #12]	@ (80082d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80082cc:	681b      	ldr	r3, [r3, #0]
	}
 80082ce:	4618      	mov	r0, r3
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr
 80082d8:	20002a58 	.word	0x20002a58

080082dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80082e6:	4b29      	ldr	r3, [pc, #164]	@ (800838c <prvAddCurrentTaskToDelayedList+0xb0>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082ec:	4b28      	ldr	r3, [pc, #160]	@ (8008390 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	3304      	adds	r3, #4
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7fe fde6 	bl	8006ec4 <uxListRemove>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d10b      	bne.n	8008316 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80082fe:	4b24      	ldr	r3, [pc, #144]	@ (8008390 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008304:	2201      	movs	r2, #1
 8008306:	fa02 f303 	lsl.w	r3, r2, r3
 800830a:	43da      	mvns	r2, r3
 800830c:	4b21      	ldr	r3, [pc, #132]	@ (8008394 <prvAddCurrentTaskToDelayedList+0xb8>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4013      	ands	r3, r2
 8008312:	4a20      	ldr	r2, [pc, #128]	@ (8008394 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008314:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800831c:	d10a      	bne.n	8008334 <prvAddCurrentTaskToDelayedList+0x58>
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d007      	beq.n	8008334 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008324:	4b1a      	ldr	r3, [pc, #104]	@ (8008390 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	3304      	adds	r3, #4
 800832a:	4619      	mov	r1, r3
 800832c:	481a      	ldr	r0, [pc, #104]	@ (8008398 <prvAddCurrentTaskToDelayedList+0xbc>)
 800832e:	f7fe fd6c 	bl	8006e0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008332:	e026      	b.n	8008382 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4413      	add	r3, r2
 800833a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800833c:	4b14      	ldr	r3, [pc, #80]	@ (8008390 <prvAddCurrentTaskToDelayedList+0xb4>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	68ba      	ldr	r2, [r7, #8]
 8008342:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	429a      	cmp	r2, r3
 800834a:	d209      	bcs.n	8008360 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800834c:	4b13      	ldr	r3, [pc, #76]	@ (800839c <prvAddCurrentTaskToDelayedList+0xc0>)
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	4b0f      	ldr	r3, [pc, #60]	@ (8008390 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	3304      	adds	r3, #4
 8008356:	4619      	mov	r1, r3
 8008358:	4610      	mov	r0, r2
 800835a:	f7fe fd7a 	bl	8006e52 <vListInsert>
}
 800835e:	e010      	b.n	8008382 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008360:	4b0f      	ldr	r3, [pc, #60]	@ (80083a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	4b0a      	ldr	r3, [pc, #40]	@ (8008390 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	3304      	adds	r3, #4
 800836a:	4619      	mov	r1, r3
 800836c:	4610      	mov	r0, r2
 800836e:	f7fe fd70 	bl	8006e52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008372:	4b0c      	ldr	r3, [pc, #48]	@ (80083a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68ba      	ldr	r2, [r7, #8]
 8008378:	429a      	cmp	r2, r3
 800837a:	d202      	bcs.n	8008382 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800837c:	4a09      	ldr	r2, [pc, #36]	@ (80083a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	6013      	str	r3, [r2, #0]
}
 8008382:	bf00      	nop
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop
 800838c:	20002b5c 	.word	0x20002b5c
 8008390:	20002a58 	.word	0x20002a58
 8008394:	20002b60 	.word	0x20002b60
 8008398:	20002b44 	.word	0x20002b44
 800839c:	20002b14 	.word	0x20002b14
 80083a0:	20002b10 	.word	0x20002b10
 80083a4:	20002b78 	.word	0x20002b78

080083a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80083a8:	b480      	push	{r7}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	60b9      	str	r1, [r7, #8]
 80083b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	3b04      	subs	r3, #4
 80083b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80083c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	3b04      	subs	r3, #4
 80083c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	f023 0201 	bic.w	r2, r3, #1
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	3b04      	subs	r3, #4
 80083d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80083d8:	4a0c      	ldr	r2, [pc, #48]	@ (800840c <pxPortInitialiseStack+0x64>)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	3b14      	subs	r3, #20
 80083e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	3b04      	subs	r3, #4
 80083ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f06f 0202 	mvn.w	r2, #2
 80083f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	3b20      	subs	r3, #32
 80083fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80083fe:	68fb      	ldr	r3, [r7, #12]
}
 8008400:	4618      	mov	r0, r3
 8008402:	3714      	adds	r7, #20
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr
 800840c:	08008411 	.word	0x08008411

08008410 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008410:	b480      	push	{r7}
 8008412:	b085      	sub	sp, #20
 8008414:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008416:	2300      	movs	r3, #0
 8008418:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800841a:	4b13      	ldr	r3, [pc, #76]	@ (8008468 <prvTaskExitError+0x58>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008422:	d00b      	beq.n	800843c <prvTaskExitError+0x2c>
	__asm volatile
 8008424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008428:	f383 8811 	msr	BASEPRI, r3
 800842c:	f3bf 8f6f 	isb	sy
 8008430:	f3bf 8f4f 	dsb	sy
 8008434:	60fb      	str	r3, [r7, #12]
}
 8008436:	bf00      	nop
 8008438:	bf00      	nop
 800843a:	e7fd      	b.n	8008438 <prvTaskExitError+0x28>
	__asm volatile
 800843c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008440:	f383 8811 	msr	BASEPRI, r3
 8008444:	f3bf 8f6f 	isb	sy
 8008448:	f3bf 8f4f 	dsb	sy
 800844c:	60bb      	str	r3, [r7, #8]
}
 800844e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008450:	bf00      	nop
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d0fc      	beq.n	8008452 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008458:	bf00      	nop
 800845a:	bf00      	nop
 800845c:	3714      	adds	r7, #20
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr
 8008466:	bf00      	nop
 8008468:	2000000c 	.word	0x2000000c
 800846c:	00000000 	.word	0x00000000

08008470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008470:	4b07      	ldr	r3, [pc, #28]	@ (8008490 <pxCurrentTCBConst2>)
 8008472:	6819      	ldr	r1, [r3, #0]
 8008474:	6808      	ldr	r0, [r1, #0]
 8008476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800847a:	f380 8809 	msr	PSP, r0
 800847e:	f3bf 8f6f 	isb	sy
 8008482:	f04f 0000 	mov.w	r0, #0
 8008486:	f380 8811 	msr	BASEPRI, r0
 800848a:	4770      	bx	lr
 800848c:	f3af 8000 	nop.w

08008490 <pxCurrentTCBConst2>:
 8008490:	20002a58 	.word	0x20002a58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008494:	bf00      	nop
 8008496:	bf00      	nop

08008498 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008498:	4808      	ldr	r0, [pc, #32]	@ (80084bc <prvPortStartFirstTask+0x24>)
 800849a:	6800      	ldr	r0, [r0, #0]
 800849c:	6800      	ldr	r0, [r0, #0]
 800849e:	f380 8808 	msr	MSP, r0
 80084a2:	f04f 0000 	mov.w	r0, #0
 80084a6:	f380 8814 	msr	CONTROL, r0
 80084aa:	b662      	cpsie	i
 80084ac:	b661      	cpsie	f
 80084ae:	f3bf 8f4f 	dsb	sy
 80084b2:	f3bf 8f6f 	isb	sy
 80084b6:	df00      	svc	0
 80084b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80084ba:	bf00      	nop
 80084bc:	e000ed08 	.word	0xe000ed08

080084c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b086      	sub	sp, #24
 80084c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80084c6:	4b47      	ldr	r3, [pc, #284]	@ (80085e4 <xPortStartScheduler+0x124>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a47      	ldr	r2, [pc, #284]	@ (80085e8 <xPortStartScheduler+0x128>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d10b      	bne.n	80084e8 <xPortStartScheduler+0x28>
	__asm volatile
 80084d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084d4:	f383 8811 	msr	BASEPRI, r3
 80084d8:	f3bf 8f6f 	isb	sy
 80084dc:	f3bf 8f4f 	dsb	sy
 80084e0:	613b      	str	r3, [r7, #16]
}
 80084e2:	bf00      	nop
 80084e4:	bf00      	nop
 80084e6:	e7fd      	b.n	80084e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80084e8:	4b3e      	ldr	r3, [pc, #248]	@ (80085e4 <xPortStartScheduler+0x124>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a3f      	ldr	r2, [pc, #252]	@ (80085ec <xPortStartScheduler+0x12c>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d10b      	bne.n	800850a <xPortStartScheduler+0x4a>
	__asm volatile
 80084f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084f6:	f383 8811 	msr	BASEPRI, r3
 80084fa:	f3bf 8f6f 	isb	sy
 80084fe:	f3bf 8f4f 	dsb	sy
 8008502:	60fb      	str	r3, [r7, #12]
}
 8008504:	bf00      	nop
 8008506:	bf00      	nop
 8008508:	e7fd      	b.n	8008506 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800850a:	4b39      	ldr	r3, [pc, #228]	@ (80085f0 <xPortStartScheduler+0x130>)
 800850c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	b2db      	uxtb	r3, r3
 8008514:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	22ff      	movs	r2, #255	@ 0xff
 800851a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	b2db      	uxtb	r3, r3
 8008522:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008524:	78fb      	ldrb	r3, [r7, #3]
 8008526:	b2db      	uxtb	r3, r3
 8008528:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800852c:	b2da      	uxtb	r2, r3
 800852e:	4b31      	ldr	r3, [pc, #196]	@ (80085f4 <xPortStartScheduler+0x134>)
 8008530:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008532:	4b31      	ldr	r3, [pc, #196]	@ (80085f8 <xPortStartScheduler+0x138>)
 8008534:	2207      	movs	r2, #7
 8008536:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008538:	e009      	b.n	800854e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800853a:	4b2f      	ldr	r3, [pc, #188]	@ (80085f8 <xPortStartScheduler+0x138>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	3b01      	subs	r3, #1
 8008540:	4a2d      	ldr	r2, [pc, #180]	@ (80085f8 <xPortStartScheduler+0x138>)
 8008542:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008544:	78fb      	ldrb	r3, [r7, #3]
 8008546:	b2db      	uxtb	r3, r3
 8008548:	005b      	lsls	r3, r3, #1
 800854a:	b2db      	uxtb	r3, r3
 800854c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800854e:	78fb      	ldrb	r3, [r7, #3]
 8008550:	b2db      	uxtb	r3, r3
 8008552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008556:	2b80      	cmp	r3, #128	@ 0x80
 8008558:	d0ef      	beq.n	800853a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800855a:	4b27      	ldr	r3, [pc, #156]	@ (80085f8 <xPortStartScheduler+0x138>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f1c3 0307 	rsb	r3, r3, #7
 8008562:	2b04      	cmp	r3, #4
 8008564:	d00b      	beq.n	800857e <xPortStartScheduler+0xbe>
	__asm volatile
 8008566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800856a:	f383 8811 	msr	BASEPRI, r3
 800856e:	f3bf 8f6f 	isb	sy
 8008572:	f3bf 8f4f 	dsb	sy
 8008576:	60bb      	str	r3, [r7, #8]
}
 8008578:	bf00      	nop
 800857a:	bf00      	nop
 800857c:	e7fd      	b.n	800857a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800857e:	4b1e      	ldr	r3, [pc, #120]	@ (80085f8 <xPortStartScheduler+0x138>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	021b      	lsls	r3, r3, #8
 8008584:	4a1c      	ldr	r2, [pc, #112]	@ (80085f8 <xPortStartScheduler+0x138>)
 8008586:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008588:	4b1b      	ldr	r3, [pc, #108]	@ (80085f8 <xPortStartScheduler+0x138>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008590:	4a19      	ldr	r2, [pc, #100]	@ (80085f8 <xPortStartScheduler+0x138>)
 8008592:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	b2da      	uxtb	r2, r3
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800859c:	4b17      	ldr	r3, [pc, #92]	@ (80085fc <xPortStartScheduler+0x13c>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a16      	ldr	r2, [pc, #88]	@ (80085fc <xPortStartScheduler+0x13c>)
 80085a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80085a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80085a8:	4b14      	ldr	r3, [pc, #80]	@ (80085fc <xPortStartScheduler+0x13c>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a13      	ldr	r2, [pc, #76]	@ (80085fc <xPortStartScheduler+0x13c>)
 80085ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80085b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80085b4:	f000 f8da 	bl	800876c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80085b8:	4b11      	ldr	r3, [pc, #68]	@ (8008600 <xPortStartScheduler+0x140>)
 80085ba:	2200      	movs	r2, #0
 80085bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80085be:	f000 f8f9 	bl	80087b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80085c2:	4b10      	ldr	r3, [pc, #64]	@ (8008604 <xPortStartScheduler+0x144>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a0f      	ldr	r2, [pc, #60]	@ (8008604 <xPortStartScheduler+0x144>)
 80085c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80085cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80085ce:	f7ff ff63 	bl	8008498 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80085d2:	f7ff fad7 	bl	8007b84 <vTaskSwitchContext>
	prvTaskExitError();
 80085d6:	f7ff ff1b 	bl	8008410 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80085da:	2300      	movs	r3, #0
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3718      	adds	r7, #24
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	e000ed00 	.word	0xe000ed00
 80085e8:	410fc271 	.word	0x410fc271
 80085ec:	410fc270 	.word	0x410fc270
 80085f0:	e000e400 	.word	0xe000e400
 80085f4:	20002b8c 	.word	0x20002b8c
 80085f8:	20002b90 	.word	0x20002b90
 80085fc:	e000ed20 	.word	0xe000ed20
 8008600:	2000000c 	.word	0x2000000c
 8008604:	e000ef34 	.word	0xe000ef34

08008608 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
	__asm volatile
 800860e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008612:	f383 8811 	msr	BASEPRI, r3
 8008616:	f3bf 8f6f 	isb	sy
 800861a:	f3bf 8f4f 	dsb	sy
 800861e:	607b      	str	r3, [r7, #4]
}
 8008620:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008622:	4b10      	ldr	r3, [pc, #64]	@ (8008664 <vPortEnterCritical+0x5c>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	3301      	adds	r3, #1
 8008628:	4a0e      	ldr	r2, [pc, #56]	@ (8008664 <vPortEnterCritical+0x5c>)
 800862a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800862c:	4b0d      	ldr	r3, [pc, #52]	@ (8008664 <vPortEnterCritical+0x5c>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	2b01      	cmp	r3, #1
 8008632:	d110      	bne.n	8008656 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008634:	4b0c      	ldr	r3, [pc, #48]	@ (8008668 <vPortEnterCritical+0x60>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	b2db      	uxtb	r3, r3
 800863a:	2b00      	cmp	r3, #0
 800863c:	d00b      	beq.n	8008656 <vPortEnterCritical+0x4e>
	__asm volatile
 800863e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008642:	f383 8811 	msr	BASEPRI, r3
 8008646:	f3bf 8f6f 	isb	sy
 800864a:	f3bf 8f4f 	dsb	sy
 800864e:	603b      	str	r3, [r7, #0]
}
 8008650:	bf00      	nop
 8008652:	bf00      	nop
 8008654:	e7fd      	b.n	8008652 <vPortEnterCritical+0x4a>
	}
}
 8008656:	bf00      	nop
 8008658:	370c      	adds	r7, #12
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr
 8008662:	bf00      	nop
 8008664:	2000000c 	.word	0x2000000c
 8008668:	e000ed04 	.word	0xe000ed04

0800866c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008672:	4b12      	ldr	r3, [pc, #72]	@ (80086bc <vPortExitCritical+0x50>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d10b      	bne.n	8008692 <vPortExitCritical+0x26>
	__asm volatile
 800867a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800867e:	f383 8811 	msr	BASEPRI, r3
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	f3bf 8f4f 	dsb	sy
 800868a:	607b      	str	r3, [r7, #4]
}
 800868c:	bf00      	nop
 800868e:	bf00      	nop
 8008690:	e7fd      	b.n	800868e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008692:	4b0a      	ldr	r3, [pc, #40]	@ (80086bc <vPortExitCritical+0x50>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	3b01      	subs	r3, #1
 8008698:	4a08      	ldr	r2, [pc, #32]	@ (80086bc <vPortExitCritical+0x50>)
 800869a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800869c:	4b07      	ldr	r3, [pc, #28]	@ (80086bc <vPortExitCritical+0x50>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d105      	bne.n	80086b0 <vPortExitCritical+0x44>
 80086a4:	2300      	movs	r3, #0
 80086a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	f383 8811 	msr	BASEPRI, r3
}
 80086ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80086b0:	bf00      	nop
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr
 80086bc:	2000000c 	.word	0x2000000c

080086c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80086c0:	f3ef 8009 	mrs	r0, PSP
 80086c4:	f3bf 8f6f 	isb	sy
 80086c8:	4b15      	ldr	r3, [pc, #84]	@ (8008720 <pxCurrentTCBConst>)
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	f01e 0f10 	tst.w	lr, #16
 80086d0:	bf08      	it	eq
 80086d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80086d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086da:	6010      	str	r0, [r2, #0]
 80086dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80086e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80086e4:	f380 8811 	msr	BASEPRI, r0
 80086e8:	f3bf 8f4f 	dsb	sy
 80086ec:	f3bf 8f6f 	isb	sy
 80086f0:	f7ff fa48 	bl	8007b84 <vTaskSwitchContext>
 80086f4:	f04f 0000 	mov.w	r0, #0
 80086f8:	f380 8811 	msr	BASEPRI, r0
 80086fc:	bc09      	pop	{r0, r3}
 80086fe:	6819      	ldr	r1, [r3, #0]
 8008700:	6808      	ldr	r0, [r1, #0]
 8008702:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008706:	f01e 0f10 	tst.w	lr, #16
 800870a:	bf08      	it	eq
 800870c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008710:	f380 8809 	msr	PSP, r0
 8008714:	f3bf 8f6f 	isb	sy
 8008718:	4770      	bx	lr
 800871a:	bf00      	nop
 800871c:	f3af 8000 	nop.w

08008720 <pxCurrentTCBConst>:
 8008720:	20002a58 	.word	0x20002a58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008724:	bf00      	nop
 8008726:	bf00      	nop

08008728 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
	__asm volatile
 800872e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008732:	f383 8811 	msr	BASEPRI, r3
 8008736:	f3bf 8f6f 	isb	sy
 800873a:	f3bf 8f4f 	dsb	sy
 800873e:	607b      	str	r3, [r7, #4]
}
 8008740:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008742:	f7ff f965 	bl	8007a10 <xTaskIncrementTick>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d003      	beq.n	8008754 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800874c:	4b06      	ldr	r3, [pc, #24]	@ (8008768 <SysTick_Handler+0x40>)
 800874e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008752:	601a      	str	r2, [r3, #0]
 8008754:	2300      	movs	r3, #0
 8008756:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	f383 8811 	msr	BASEPRI, r3
}
 800875e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008760:	bf00      	nop
 8008762:	3708      	adds	r7, #8
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}
 8008768:	e000ed04 	.word	0xe000ed04

0800876c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800876c:	b480      	push	{r7}
 800876e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008770:	4b0b      	ldr	r3, [pc, #44]	@ (80087a0 <vPortSetupTimerInterrupt+0x34>)
 8008772:	2200      	movs	r2, #0
 8008774:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008776:	4b0b      	ldr	r3, [pc, #44]	@ (80087a4 <vPortSetupTimerInterrupt+0x38>)
 8008778:	2200      	movs	r2, #0
 800877a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800877c:	4b0a      	ldr	r3, [pc, #40]	@ (80087a8 <vPortSetupTimerInterrupt+0x3c>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a0a      	ldr	r2, [pc, #40]	@ (80087ac <vPortSetupTimerInterrupt+0x40>)
 8008782:	fba2 2303 	umull	r2, r3, r2, r3
 8008786:	099b      	lsrs	r3, r3, #6
 8008788:	4a09      	ldr	r2, [pc, #36]	@ (80087b0 <vPortSetupTimerInterrupt+0x44>)
 800878a:	3b01      	subs	r3, #1
 800878c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800878e:	4b04      	ldr	r3, [pc, #16]	@ (80087a0 <vPortSetupTimerInterrupt+0x34>)
 8008790:	2207      	movs	r2, #7
 8008792:	601a      	str	r2, [r3, #0]
}
 8008794:	bf00      	nop
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop
 80087a0:	e000e010 	.word	0xe000e010
 80087a4:	e000e018 	.word	0xe000e018
 80087a8:	20000000 	.word	0x20000000
 80087ac:	10624dd3 	.word	0x10624dd3
 80087b0:	e000e014 	.word	0xe000e014

080087b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80087b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80087c4 <vPortEnableVFP+0x10>
 80087b8:	6801      	ldr	r1, [r0, #0]
 80087ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80087be:	6001      	str	r1, [r0, #0]
 80087c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80087c2:	bf00      	nop
 80087c4:	e000ed88 	.word	0xe000ed88

080087c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80087c8:	b480      	push	{r7}
 80087ca:	b085      	sub	sp, #20
 80087cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80087ce:	f3ef 8305 	mrs	r3, IPSR
 80087d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2b0f      	cmp	r3, #15
 80087d8:	d915      	bls.n	8008806 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80087da:	4a18      	ldr	r2, [pc, #96]	@ (800883c <vPortValidateInterruptPriority+0x74>)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	4413      	add	r3, r2
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80087e4:	4b16      	ldr	r3, [pc, #88]	@ (8008840 <vPortValidateInterruptPriority+0x78>)
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	7afa      	ldrb	r2, [r7, #11]
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d20b      	bcs.n	8008806 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80087ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087f2:	f383 8811 	msr	BASEPRI, r3
 80087f6:	f3bf 8f6f 	isb	sy
 80087fa:	f3bf 8f4f 	dsb	sy
 80087fe:	607b      	str	r3, [r7, #4]
}
 8008800:	bf00      	nop
 8008802:	bf00      	nop
 8008804:	e7fd      	b.n	8008802 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008806:	4b0f      	ldr	r3, [pc, #60]	@ (8008844 <vPortValidateInterruptPriority+0x7c>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800880e:	4b0e      	ldr	r3, [pc, #56]	@ (8008848 <vPortValidateInterruptPriority+0x80>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	429a      	cmp	r2, r3
 8008814:	d90b      	bls.n	800882e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800881a:	f383 8811 	msr	BASEPRI, r3
 800881e:	f3bf 8f6f 	isb	sy
 8008822:	f3bf 8f4f 	dsb	sy
 8008826:	603b      	str	r3, [r7, #0]
}
 8008828:	bf00      	nop
 800882a:	bf00      	nop
 800882c:	e7fd      	b.n	800882a <vPortValidateInterruptPriority+0x62>
	}
 800882e:	bf00      	nop
 8008830:	3714      	adds	r7, #20
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	e000e3f0 	.word	0xe000e3f0
 8008840:	20002b8c 	.word	0x20002b8c
 8008844:	e000ed0c 	.word	0xe000ed0c
 8008848:	20002b90 	.word	0x20002b90

0800884c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b08a      	sub	sp, #40	@ 0x28
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008854:	2300      	movs	r3, #0
 8008856:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008858:	f7ff f808 	bl	800786c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800885c:	4b5c      	ldr	r3, [pc, #368]	@ (80089d0 <pvPortMalloc+0x184>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d101      	bne.n	8008868 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008864:	f000 f924 	bl	8008ab0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008868:	4b5a      	ldr	r3, [pc, #360]	@ (80089d4 <pvPortMalloc+0x188>)
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4013      	ands	r3, r2
 8008870:	2b00      	cmp	r3, #0
 8008872:	f040 8095 	bne.w	80089a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d01e      	beq.n	80088ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800887c:	2208      	movs	r2, #8
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4413      	add	r3, r2
 8008882:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f003 0307 	and.w	r3, r3, #7
 800888a:	2b00      	cmp	r3, #0
 800888c:	d015      	beq.n	80088ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f023 0307 	bic.w	r3, r3, #7
 8008894:	3308      	adds	r3, #8
 8008896:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f003 0307 	and.w	r3, r3, #7
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d00b      	beq.n	80088ba <pvPortMalloc+0x6e>
	__asm volatile
 80088a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a6:	f383 8811 	msr	BASEPRI, r3
 80088aa:	f3bf 8f6f 	isb	sy
 80088ae:	f3bf 8f4f 	dsb	sy
 80088b2:	617b      	str	r3, [r7, #20]
}
 80088b4:	bf00      	nop
 80088b6:	bf00      	nop
 80088b8:	e7fd      	b.n	80088b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d06f      	beq.n	80089a0 <pvPortMalloc+0x154>
 80088c0:	4b45      	ldr	r3, [pc, #276]	@ (80089d8 <pvPortMalloc+0x18c>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d86a      	bhi.n	80089a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80088ca:	4b44      	ldr	r3, [pc, #272]	@ (80089dc <pvPortMalloc+0x190>)
 80088cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80088ce:	4b43      	ldr	r3, [pc, #268]	@ (80089dc <pvPortMalloc+0x190>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088d4:	e004      	b.n	80088e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80088d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80088da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d903      	bls.n	80088f2 <pvPortMalloc+0xa6>
 80088ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d1f1      	bne.n	80088d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80088f2:	4b37      	ldr	r3, [pc, #220]	@ (80089d0 <pvPortMalloc+0x184>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d051      	beq.n	80089a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80088fc:	6a3b      	ldr	r3, [r7, #32]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2208      	movs	r2, #8
 8008902:	4413      	add	r3, r2
 8008904:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	6a3b      	ldr	r3, [r7, #32]
 800890c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800890e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008910:	685a      	ldr	r2, [r3, #4]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	1ad2      	subs	r2, r2, r3
 8008916:	2308      	movs	r3, #8
 8008918:	005b      	lsls	r3, r3, #1
 800891a:	429a      	cmp	r2, r3
 800891c:	d920      	bls.n	8008960 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800891e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4413      	add	r3, r2
 8008924:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008926:	69bb      	ldr	r3, [r7, #24]
 8008928:	f003 0307 	and.w	r3, r3, #7
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00b      	beq.n	8008948 <pvPortMalloc+0xfc>
	__asm volatile
 8008930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008934:	f383 8811 	msr	BASEPRI, r3
 8008938:	f3bf 8f6f 	isb	sy
 800893c:	f3bf 8f4f 	dsb	sy
 8008940:	613b      	str	r3, [r7, #16]
}
 8008942:	bf00      	nop
 8008944:	bf00      	nop
 8008946:	e7fd      	b.n	8008944 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800894a:	685a      	ldr	r2, [r3, #4]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	1ad2      	subs	r2, r2, r3
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800895a:	69b8      	ldr	r0, [r7, #24]
 800895c:	f000 f90a 	bl	8008b74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008960:	4b1d      	ldr	r3, [pc, #116]	@ (80089d8 <pvPortMalloc+0x18c>)
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	4a1b      	ldr	r2, [pc, #108]	@ (80089d8 <pvPortMalloc+0x18c>)
 800896c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800896e:	4b1a      	ldr	r3, [pc, #104]	@ (80089d8 <pvPortMalloc+0x18c>)
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	4b1b      	ldr	r3, [pc, #108]	@ (80089e0 <pvPortMalloc+0x194>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	429a      	cmp	r2, r3
 8008978:	d203      	bcs.n	8008982 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800897a:	4b17      	ldr	r3, [pc, #92]	@ (80089d8 <pvPortMalloc+0x18c>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a18      	ldr	r2, [pc, #96]	@ (80089e0 <pvPortMalloc+0x194>)
 8008980:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008984:	685a      	ldr	r2, [r3, #4]
 8008986:	4b13      	ldr	r3, [pc, #76]	@ (80089d4 <pvPortMalloc+0x188>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	431a      	orrs	r2, r3
 800898c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800898e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008992:	2200      	movs	r2, #0
 8008994:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008996:	4b13      	ldr	r3, [pc, #76]	@ (80089e4 <pvPortMalloc+0x198>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	3301      	adds	r3, #1
 800899c:	4a11      	ldr	r2, [pc, #68]	@ (80089e4 <pvPortMalloc+0x198>)
 800899e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80089a0:	f7fe ff72 	bl	8007888 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	f003 0307 	and.w	r3, r3, #7
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d00b      	beq.n	80089c6 <pvPortMalloc+0x17a>
	__asm volatile
 80089ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b2:	f383 8811 	msr	BASEPRI, r3
 80089b6:	f3bf 8f6f 	isb	sy
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	60fb      	str	r3, [r7, #12]
}
 80089c0:	bf00      	nop
 80089c2:	bf00      	nop
 80089c4:	e7fd      	b.n	80089c2 <pvPortMalloc+0x176>
	return pvReturn;
 80089c6:	69fb      	ldr	r3, [r7, #28]
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3728      	adds	r7, #40	@ 0x28
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	200079bc 	.word	0x200079bc
 80089d4:	200079d0 	.word	0x200079d0
 80089d8:	200079c0 	.word	0x200079c0
 80089dc:	200079b4 	.word	0x200079b4
 80089e0:	200079c4 	.word	0x200079c4
 80089e4:	200079c8 	.word	0x200079c8

080089e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b086      	sub	sp, #24
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d04f      	beq.n	8008a9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80089fa:	2308      	movs	r3, #8
 80089fc:	425b      	negs	r3, r3
 80089fe:	697a      	ldr	r2, [r7, #20]
 8008a00:	4413      	add	r3, r2
 8008a02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	685a      	ldr	r2, [r3, #4]
 8008a0c:	4b25      	ldr	r3, [pc, #148]	@ (8008aa4 <vPortFree+0xbc>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4013      	ands	r3, r2
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d10b      	bne.n	8008a2e <vPortFree+0x46>
	__asm volatile
 8008a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a1a:	f383 8811 	msr	BASEPRI, r3
 8008a1e:	f3bf 8f6f 	isb	sy
 8008a22:	f3bf 8f4f 	dsb	sy
 8008a26:	60fb      	str	r3, [r7, #12]
}
 8008a28:	bf00      	nop
 8008a2a:	bf00      	nop
 8008a2c:	e7fd      	b.n	8008a2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00b      	beq.n	8008a4e <vPortFree+0x66>
	__asm volatile
 8008a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a3a:	f383 8811 	msr	BASEPRI, r3
 8008a3e:	f3bf 8f6f 	isb	sy
 8008a42:	f3bf 8f4f 	dsb	sy
 8008a46:	60bb      	str	r3, [r7, #8]
}
 8008a48:	bf00      	nop
 8008a4a:	bf00      	nop
 8008a4c:	e7fd      	b.n	8008a4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	685a      	ldr	r2, [r3, #4]
 8008a52:	4b14      	ldr	r3, [pc, #80]	@ (8008aa4 <vPortFree+0xbc>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4013      	ands	r3, r2
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d01e      	beq.n	8008a9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d11a      	bne.n	8008a9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	685a      	ldr	r2, [r3, #4]
 8008a68:	4b0e      	ldr	r3, [pc, #56]	@ (8008aa4 <vPortFree+0xbc>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	43db      	mvns	r3, r3
 8008a6e:	401a      	ands	r2, r3
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008a74:	f7fe fefa 	bl	800786c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	685a      	ldr	r2, [r3, #4]
 8008a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8008aa8 <vPortFree+0xc0>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4413      	add	r3, r2
 8008a82:	4a09      	ldr	r2, [pc, #36]	@ (8008aa8 <vPortFree+0xc0>)
 8008a84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008a86:	6938      	ldr	r0, [r7, #16]
 8008a88:	f000 f874 	bl	8008b74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008a8c:	4b07      	ldr	r3, [pc, #28]	@ (8008aac <vPortFree+0xc4>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	3301      	adds	r3, #1
 8008a92:	4a06      	ldr	r2, [pc, #24]	@ (8008aac <vPortFree+0xc4>)
 8008a94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008a96:	f7fe fef7 	bl	8007888 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008a9a:	bf00      	nop
 8008a9c:	3718      	adds	r7, #24
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	200079d0 	.word	0x200079d0
 8008aa8:	200079c0 	.word	0x200079c0
 8008aac:	200079cc 	.word	0x200079cc

08008ab0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b085      	sub	sp, #20
 8008ab4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008ab6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8008aba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008abc:	4b27      	ldr	r3, [pc, #156]	@ (8008b5c <prvHeapInit+0xac>)
 8008abe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f003 0307 	and.w	r3, r3, #7
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00c      	beq.n	8008ae4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	3307      	adds	r3, #7
 8008ace:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f023 0307 	bic.w	r3, r3, #7
 8008ad6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008ad8:	68ba      	ldr	r2, [r7, #8]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	1ad3      	subs	r3, r2, r3
 8008ade:	4a1f      	ldr	r2, [pc, #124]	@ (8008b5c <prvHeapInit+0xac>)
 8008ae0:	4413      	add	r3, r2
 8008ae2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8008b60 <prvHeapInit+0xb0>)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008aee:	4b1c      	ldr	r3, [pc, #112]	@ (8008b60 <prvHeapInit+0xb0>)
 8008af0:	2200      	movs	r2, #0
 8008af2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	68ba      	ldr	r2, [r7, #8]
 8008af8:	4413      	add	r3, r2
 8008afa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008afc:	2208      	movs	r2, #8
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	1a9b      	subs	r3, r3, r2
 8008b02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f023 0307 	bic.w	r3, r3, #7
 8008b0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	4a15      	ldr	r2, [pc, #84]	@ (8008b64 <prvHeapInit+0xb4>)
 8008b10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008b12:	4b14      	ldr	r3, [pc, #80]	@ (8008b64 <prvHeapInit+0xb4>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	2200      	movs	r2, #0
 8008b18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008b1a:	4b12      	ldr	r3, [pc, #72]	@ (8008b64 <prvHeapInit+0xb4>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	1ad2      	subs	r2, r2, r3
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008b30:	4b0c      	ldr	r3, [pc, #48]	@ (8008b64 <prvHeapInit+0xb4>)
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	4a0a      	ldr	r2, [pc, #40]	@ (8008b68 <prvHeapInit+0xb8>)
 8008b3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	4a09      	ldr	r2, [pc, #36]	@ (8008b6c <prvHeapInit+0xbc>)
 8008b46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008b48:	4b09      	ldr	r3, [pc, #36]	@ (8008b70 <prvHeapInit+0xc0>)
 8008b4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008b4e:	601a      	str	r2, [r3, #0]
}
 8008b50:	bf00      	nop
 8008b52:	3714      	adds	r7, #20
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr
 8008b5c:	20002b94 	.word	0x20002b94
 8008b60:	200079b4 	.word	0x200079b4
 8008b64:	200079bc 	.word	0x200079bc
 8008b68:	200079c4 	.word	0x200079c4
 8008b6c:	200079c0 	.word	0x200079c0
 8008b70:	200079d0 	.word	0x200079d0

08008b74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008b74:	b480      	push	{r7}
 8008b76:	b085      	sub	sp, #20
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008b7c:	4b28      	ldr	r3, [pc, #160]	@ (8008c20 <prvInsertBlockIntoFreeList+0xac>)
 8008b7e:	60fb      	str	r3, [r7, #12]
 8008b80:	e002      	b.n	8008b88 <prvInsertBlockIntoFreeList+0x14>
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	60fb      	str	r3, [r7, #12]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d8f7      	bhi.n	8008b82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	68ba      	ldr	r2, [r7, #8]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d108      	bne.n	8008bb6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	685a      	ldr	r2, [r3, #4]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	441a      	add	r2, r3
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	68ba      	ldr	r2, [r7, #8]
 8008bc0:	441a      	add	r2, r3
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d118      	bne.n	8008bfc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	4b15      	ldr	r3, [pc, #84]	@ (8008c24 <prvInsertBlockIntoFreeList+0xb0>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d00d      	beq.n	8008bf2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	685a      	ldr	r2, [r3, #4]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	441a      	add	r2, r3
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	601a      	str	r2, [r3, #0]
 8008bf0:	e008      	b.n	8008c04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8008c24 <prvInsertBlockIntoFreeList+0xb0>)
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	601a      	str	r2, [r3, #0]
 8008bfa:	e003      	b.n	8008c04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c04:	68fa      	ldr	r2, [r7, #12]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d002      	beq.n	8008c12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c12:	bf00      	nop
 8008c14:	3714      	adds	r7, #20
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr
 8008c1e:	bf00      	nop
 8008c20:	200079b4 	.word	0x200079b4
 8008c24:	200079bc 	.word	0x200079bc

08008c28 <std>:
 8008c28:	2300      	movs	r3, #0
 8008c2a:	b510      	push	{r4, lr}
 8008c2c:	4604      	mov	r4, r0
 8008c2e:	e9c0 3300 	strd	r3, r3, [r0]
 8008c32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c36:	6083      	str	r3, [r0, #8]
 8008c38:	8181      	strh	r1, [r0, #12]
 8008c3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8008c3c:	81c2      	strh	r2, [r0, #14]
 8008c3e:	6183      	str	r3, [r0, #24]
 8008c40:	4619      	mov	r1, r3
 8008c42:	2208      	movs	r2, #8
 8008c44:	305c      	adds	r0, #92	@ 0x5c
 8008c46:	f000 fa01 	bl	800904c <memset>
 8008c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8008c80 <std+0x58>)
 8008c4c:	6263      	str	r3, [r4, #36]	@ 0x24
 8008c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8008c84 <std+0x5c>)
 8008c50:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008c52:	4b0d      	ldr	r3, [pc, #52]	@ (8008c88 <std+0x60>)
 8008c54:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008c56:	4b0d      	ldr	r3, [pc, #52]	@ (8008c8c <std+0x64>)
 8008c58:	6323      	str	r3, [r4, #48]	@ 0x30
 8008c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8008c90 <std+0x68>)
 8008c5c:	6224      	str	r4, [r4, #32]
 8008c5e:	429c      	cmp	r4, r3
 8008c60:	d006      	beq.n	8008c70 <std+0x48>
 8008c62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008c66:	4294      	cmp	r4, r2
 8008c68:	d002      	beq.n	8008c70 <std+0x48>
 8008c6a:	33d0      	adds	r3, #208	@ 0xd0
 8008c6c:	429c      	cmp	r4, r3
 8008c6e:	d105      	bne.n	8008c7c <std+0x54>
 8008c70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c78:	f000 ba60 	b.w	800913c <__retarget_lock_init_recursive>
 8008c7c:	bd10      	pop	{r4, pc}
 8008c7e:	bf00      	nop
 8008c80:	08008e9d 	.word	0x08008e9d
 8008c84:	08008ebf 	.word	0x08008ebf
 8008c88:	08008ef7 	.word	0x08008ef7
 8008c8c:	08008f1b 	.word	0x08008f1b
 8008c90:	200079d4 	.word	0x200079d4

08008c94 <stdio_exit_handler>:
 8008c94:	4a02      	ldr	r2, [pc, #8]	@ (8008ca0 <stdio_exit_handler+0xc>)
 8008c96:	4903      	ldr	r1, [pc, #12]	@ (8008ca4 <stdio_exit_handler+0x10>)
 8008c98:	4803      	ldr	r0, [pc, #12]	@ (8008ca8 <stdio_exit_handler+0x14>)
 8008c9a:	f000 b869 	b.w	8008d70 <_fwalk_sglue>
 8008c9e:	bf00      	nop
 8008ca0:	20000010 	.word	0x20000010
 8008ca4:	080099dd 	.word	0x080099dd
 8008ca8:	20000020 	.word	0x20000020

08008cac <cleanup_stdio>:
 8008cac:	6841      	ldr	r1, [r0, #4]
 8008cae:	4b0c      	ldr	r3, [pc, #48]	@ (8008ce0 <cleanup_stdio+0x34>)
 8008cb0:	4299      	cmp	r1, r3
 8008cb2:	b510      	push	{r4, lr}
 8008cb4:	4604      	mov	r4, r0
 8008cb6:	d001      	beq.n	8008cbc <cleanup_stdio+0x10>
 8008cb8:	f000 fe90 	bl	80099dc <_fflush_r>
 8008cbc:	68a1      	ldr	r1, [r4, #8]
 8008cbe:	4b09      	ldr	r3, [pc, #36]	@ (8008ce4 <cleanup_stdio+0x38>)
 8008cc0:	4299      	cmp	r1, r3
 8008cc2:	d002      	beq.n	8008cca <cleanup_stdio+0x1e>
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	f000 fe89 	bl	80099dc <_fflush_r>
 8008cca:	68e1      	ldr	r1, [r4, #12]
 8008ccc:	4b06      	ldr	r3, [pc, #24]	@ (8008ce8 <cleanup_stdio+0x3c>)
 8008cce:	4299      	cmp	r1, r3
 8008cd0:	d004      	beq.n	8008cdc <cleanup_stdio+0x30>
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cd8:	f000 be80 	b.w	80099dc <_fflush_r>
 8008cdc:	bd10      	pop	{r4, pc}
 8008cde:	bf00      	nop
 8008ce0:	200079d4 	.word	0x200079d4
 8008ce4:	20007a3c 	.word	0x20007a3c
 8008ce8:	20007aa4 	.word	0x20007aa4

08008cec <global_stdio_init.part.0>:
 8008cec:	b510      	push	{r4, lr}
 8008cee:	4b0b      	ldr	r3, [pc, #44]	@ (8008d1c <global_stdio_init.part.0+0x30>)
 8008cf0:	4c0b      	ldr	r4, [pc, #44]	@ (8008d20 <global_stdio_init.part.0+0x34>)
 8008cf2:	4a0c      	ldr	r2, [pc, #48]	@ (8008d24 <global_stdio_init.part.0+0x38>)
 8008cf4:	601a      	str	r2, [r3, #0]
 8008cf6:	4620      	mov	r0, r4
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	2104      	movs	r1, #4
 8008cfc:	f7ff ff94 	bl	8008c28 <std>
 8008d00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008d04:	2201      	movs	r2, #1
 8008d06:	2109      	movs	r1, #9
 8008d08:	f7ff ff8e 	bl	8008c28 <std>
 8008d0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008d10:	2202      	movs	r2, #2
 8008d12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d16:	2112      	movs	r1, #18
 8008d18:	f7ff bf86 	b.w	8008c28 <std>
 8008d1c:	20007b0c 	.word	0x20007b0c
 8008d20:	200079d4 	.word	0x200079d4
 8008d24:	08008c95 	.word	0x08008c95

08008d28 <__sfp_lock_acquire>:
 8008d28:	4801      	ldr	r0, [pc, #4]	@ (8008d30 <__sfp_lock_acquire+0x8>)
 8008d2a:	f000 ba08 	b.w	800913e <__retarget_lock_acquire_recursive>
 8008d2e:	bf00      	nop
 8008d30:	20007b15 	.word	0x20007b15

08008d34 <__sfp_lock_release>:
 8008d34:	4801      	ldr	r0, [pc, #4]	@ (8008d3c <__sfp_lock_release+0x8>)
 8008d36:	f000 ba03 	b.w	8009140 <__retarget_lock_release_recursive>
 8008d3a:	bf00      	nop
 8008d3c:	20007b15 	.word	0x20007b15

08008d40 <__sinit>:
 8008d40:	b510      	push	{r4, lr}
 8008d42:	4604      	mov	r4, r0
 8008d44:	f7ff fff0 	bl	8008d28 <__sfp_lock_acquire>
 8008d48:	6a23      	ldr	r3, [r4, #32]
 8008d4a:	b11b      	cbz	r3, 8008d54 <__sinit+0x14>
 8008d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d50:	f7ff bff0 	b.w	8008d34 <__sfp_lock_release>
 8008d54:	4b04      	ldr	r3, [pc, #16]	@ (8008d68 <__sinit+0x28>)
 8008d56:	6223      	str	r3, [r4, #32]
 8008d58:	4b04      	ldr	r3, [pc, #16]	@ (8008d6c <__sinit+0x2c>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d1f5      	bne.n	8008d4c <__sinit+0xc>
 8008d60:	f7ff ffc4 	bl	8008cec <global_stdio_init.part.0>
 8008d64:	e7f2      	b.n	8008d4c <__sinit+0xc>
 8008d66:	bf00      	nop
 8008d68:	08008cad 	.word	0x08008cad
 8008d6c:	20007b0c 	.word	0x20007b0c

08008d70 <_fwalk_sglue>:
 8008d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d74:	4607      	mov	r7, r0
 8008d76:	4688      	mov	r8, r1
 8008d78:	4614      	mov	r4, r2
 8008d7a:	2600      	movs	r6, #0
 8008d7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d80:	f1b9 0901 	subs.w	r9, r9, #1
 8008d84:	d505      	bpl.n	8008d92 <_fwalk_sglue+0x22>
 8008d86:	6824      	ldr	r4, [r4, #0]
 8008d88:	2c00      	cmp	r4, #0
 8008d8a:	d1f7      	bne.n	8008d7c <_fwalk_sglue+0xc>
 8008d8c:	4630      	mov	r0, r6
 8008d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d92:	89ab      	ldrh	r3, [r5, #12]
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d907      	bls.n	8008da8 <_fwalk_sglue+0x38>
 8008d98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	d003      	beq.n	8008da8 <_fwalk_sglue+0x38>
 8008da0:	4629      	mov	r1, r5
 8008da2:	4638      	mov	r0, r7
 8008da4:	47c0      	blx	r8
 8008da6:	4306      	orrs	r6, r0
 8008da8:	3568      	adds	r5, #104	@ 0x68
 8008daa:	e7e9      	b.n	8008d80 <_fwalk_sglue+0x10>

08008dac <iprintf>:
 8008dac:	b40f      	push	{r0, r1, r2, r3}
 8008dae:	b507      	push	{r0, r1, r2, lr}
 8008db0:	4906      	ldr	r1, [pc, #24]	@ (8008dcc <iprintf+0x20>)
 8008db2:	ab04      	add	r3, sp, #16
 8008db4:	6808      	ldr	r0, [r1, #0]
 8008db6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dba:	6881      	ldr	r1, [r0, #8]
 8008dbc:	9301      	str	r3, [sp, #4]
 8008dbe:	f000 fae3 	bl	8009388 <_vfiprintf_r>
 8008dc2:	b003      	add	sp, #12
 8008dc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008dc8:	b004      	add	sp, #16
 8008dca:	4770      	bx	lr
 8008dcc:	2000001c 	.word	0x2000001c

08008dd0 <putchar>:
 8008dd0:	4b02      	ldr	r3, [pc, #8]	@ (8008ddc <putchar+0xc>)
 8008dd2:	4601      	mov	r1, r0
 8008dd4:	6818      	ldr	r0, [r3, #0]
 8008dd6:	6882      	ldr	r2, [r0, #8]
 8008dd8:	f000 be8a 	b.w	8009af0 <_putc_r>
 8008ddc:	2000001c 	.word	0x2000001c

08008de0 <_puts_r>:
 8008de0:	6a03      	ldr	r3, [r0, #32]
 8008de2:	b570      	push	{r4, r5, r6, lr}
 8008de4:	6884      	ldr	r4, [r0, #8]
 8008de6:	4605      	mov	r5, r0
 8008de8:	460e      	mov	r6, r1
 8008dea:	b90b      	cbnz	r3, 8008df0 <_puts_r+0x10>
 8008dec:	f7ff ffa8 	bl	8008d40 <__sinit>
 8008df0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008df2:	07db      	lsls	r3, r3, #31
 8008df4:	d405      	bmi.n	8008e02 <_puts_r+0x22>
 8008df6:	89a3      	ldrh	r3, [r4, #12]
 8008df8:	0598      	lsls	r0, r3, #22
 8008dfa:	d402      	bmi.n	8008e02 <_puts_r+0x22>
 8008dfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008dfe:	f000 f99e 	bl	800913e <__retarget_lock_acquire_recursive>
 8008e02:	89a3      	ldrh	r3, [r4, #12]
 8008e04:	0719      	lsls	r1, r3, #28
 8008e06:	d502      	bpl.n	8008e0e <_puts_r+0x2e>
 8008e08:	6923      	ldr	r3, [r4, #16]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d135      	bne.n	8008e7a <_puts_r+0x9a>
 8008e0e:	4621      	mov	r1, r4
 8008e10:	4628      	mov	r0, r5
 8008e12:	f000 f8c5 	bl	8008fa0 <__swsetup_r>
 8008e16:	b380      	cbz	r0, 8008e7a <_puts_r+0x9a>
 8008e18:	f04f 35ff 	mov.w	r5, #4294967295
 8008e1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e1e:	07da      	lsls	r2, r3, #31
 8008e20:	d405      	bmi.n	8008e2e <_puts_r+0x4e>
 8008e22:	89a3      	ldrh	r3, [r4, #12]
 8008e24:	059b      	lsls	r3, r3, #22
 8008e26:	d402      	bmi.n	8008e2e <_puts_r+0x4e>
 8008e28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e2a:	f000 f989 	bl	8009140 <__retarget_lock_release_recursive>
 8008e2e:	4628      	mov	r0, r5
 8008e30:	bd70      	pop	{r4, r5, r6, pc}
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	da04      	bge.n	8008e40 <_puts_r+0x60>
 8008e36:	69a2      	ldr	r2, [r4, #24]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	dc17      	bgt.n	8008e6c <_puts_r+0x8c>
 8008e3c:	290a      	cmp	r1, #10
 8008e3e:	d015      	beq.n	8008e6c <_puts_r+0x8c>
 8008e40:	6823      	ldr	r3, [r4, #0]
 8008e42:	1c5a      	adds	r2, r3, #1
 8008e44:	6022      	str	r2, [r4, #0]
 8008e46:	7019      	strb	r1, [r3, #0]
 8008e48:	68a3      	ldr	r3, [r4, #8]
 8008e4a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008e4e:	3b01      	subs	r3, #1
 8008e50:	60a3      	str	r3, [r4, #8]
 8008e52:	2900      	cmp	r1, #0
 8008e54:	d1ed      	bne.n	8008e32 <_puts_r+0x52>
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	da11      	bge.n	8008e7e <_puts_r+0x9e>
 8008e5a:	4622      	mov	r2, r4
 8008e5c:	210a      	movs	r1, #10
 8008e5e:	4628      	mov	r0, r5
 8008e60:	f000 f85f 	bl	8008f22 <__swbuf_r>
 8008e64:	3001      	adds	r0, #1
 8008e66:	d0d7      	beq.n	8008e18 <_puts_r+0x38>
 8008e68:	250a      	movs	r5, #10
 8008e6a:	e7d7      	b.n	8008e1c <_puts_r+0x3c>
 8008e6c:	4622      	mov	r2, r4
 8008e6e:	4628      	mov	r0, r5
 8008e70:	f000 f857 	bl	8008f22 <__swbuf_r>
 8008e74:	3001      	adds	r0, #1
 8008e76:	d1e7      	bne.n	8008e48 <_puts_r+0x68>
 8008e78:	e7ce      	b.n	8008e18 <_puts_r+0x38>
 8008e7a:	3e01      	subs	r6, #1
 8008e7c:	e7e4      	b.n	8008e48 <_puts_r+0x68>
 8008e7e:	6823      	ldr	r3, [r4, #0]
 8008e80:	1c5a      	adds	r2, r3, #1
 8008e82:	6022      	str	r2, [r4, #0]
 8008e84:	220a      	movs	r2, #10
 8008e86:	701a      	strb	r2, [r3, #0]
 8008e88:	e7ee      	b.n	8008e68 <_puts_r+0x88>
	...

08008e8c <puts>:
 8008e8c:	4b02      	ldr	r3, [pc, #8]	@ (8008e98 <puts+0xc>)
 8008e8e:	4601      	mov	r1, r0
 8008e90:	6818      	ldr	r0, [r3, #0]
 8008e92:	f7ff bfa5 	b.w	8008de0 <_puts_r>
 8008e96:	bf00      	nop
 8008e98:	2000001c 	.word	0x2000001c

08008e9c <__sread>:
 8008e9c:	b510      	push	{r4, lr}
 8008e9e:	460c      	mov	r4, r1
 8008ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ea4:	f000 f8fc 	bl	80090a0 <_read_r>
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	bfab      	itete	ge
 8008eac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008eae:	89a3      	ldrhlt	r3, [r4, #12]
 8008eb0:	181b      	addge	r3, r3, r0
 8008eb2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008eb6:	bfac      	ite	ge
 8008eb8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008eba:	81a3      	strhlt	r3, [r4, #12]
 8008ebc:	bd10      	pop	{r4, pc}

08008ebe <__swrite>:
 8008ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ec2:	461f      	mov	r7, r3
 8008ec4:	898b      	ldrh	r3, [r1, #12]
 8008ec6:	05db      	lsls	r3, r3, #23
 8008ec8:	4605      	mov	r5, r0
 8008eca:	460c      	mov	r4, r1
 8008ecc:	4616      	mov	r6, r2
 8008ece:	d505      	bpl.n	8008edc <__swrite+0x1e>
 8008ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ed4:	2302      	movs	r3, #2
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f000 f8d0 	bl	800907c <_lseek_r>
 8008edc:	89a3      	ldrh	r3, [r4, #12]
 8008ede:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ee2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ee6:	81a3      	strh	r3, [r4, #12]
 8008ee8:	4632      	mov	r2, r6
 8008eea:	463b      	mov	r3, r7
 8008eec:	4628      	mov	r0, r5
 8008eee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ef2:	f000 b8e7 	b.w	80090c4 <_write_r>

08008ef6 <__sseek>:
 8008ef6:	b510      	push	{r4, lr}
 8008ef8:	460c      	mov	r4, r1
 8008efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008efe:	f000 f8bd 	bl	800907c <_lseek_r>
 8008f02:	1c43      	adds	r3, r0, #1
 8008f04:	89a3      	ldrh	r3, [r4, #12]
 8008f06:	bf15      	itete	ne
 8008f08:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008f0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008f0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008f12:	81a3      	strheq	r3, [r4, #12]
 8008f14:	bf18      	it	ne
 8008f16:	81a3      	strhne	r3, [r4, #12]
 8008f18:	bd10      	pop	{r4, pc}

08008f1a <__sclose>:
 8008f1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f1e:	f000 b89d 	b.w	800905c <_close_r>

08008f22 <__swbuf_r>:
 8008f22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f24:	460e      	mov	r6, r1
 8008f26:	4614      	mov	r4, r2
 8008f28:	4605      	mov	r5, r0
 8008f2a:	b118      	cbz	r0, 8008f34 <__swbuf_r+0x12>
 8008f2c:	6a03      	ldr	r3, [r0, #32]
 8008f2e:	b90b      	cbnz	r3, 8008f34 <__swbuf_r+0x12>
 8008f30:	f7ff ff06 	bl	8008d40 <__sinit>
 8008f34:	69a3      	ldr	r3, [r4, #24]
 8008f36:	60a3      	str	r3, [r4, #8]
 8008f38:	89a3      	ldrh	r3, [r4, #12]
 8008f3a:	071a      	lsls	r2, r3, #28
 8008f3c:	d501      	bpl.n	8008f42 <__swbuf_r+0x20>
 8008f3e:	6923      	ldr	r3, [r4, #16]
 8008f40:	b943      	cbnz	r3, 8008f54 <__swbuf_r+0x32>
 8008f42:	4621      	mov	r1, r4
 8008f44:	4628      	mov	r0, r5
 8008f46:	f000 f82b 	bl	8008fa0 <__swsetup_r>
 8008f4a:	b118      	cbz	r0, 8008f54 <__swbuf_r+0x32>
 8008f4c:	f04f 37ff 	mov.w	r7, #4294967295
 8008f50:	4638      	mov	r0, r7
 8008f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f54:	6823      	ldr	r3, [r4, #0]
 8008f56:	6922      	ldr	r2, [r4, #16]
 8008f58:	1a98      	subs	r0, r3, r2
 8008f5a:	6963      	ldr	r3, [r4, #20]
 8008f5c:	b2f6      	uxtb	r6, r6
 8008f5e:	4283      	cmp	r3, r0
 8008f60:	4637      	mov	r7, r6
 8008f62:	dc05      	bgt.n	8008f70 <__swbuf_r+0x4e>
 8008f64:	4621      	mov	r1, r4
 8008f66:	4628      	mov	r0, r5
 8008f68:	f000 fd38 	bl	80099dc <_fflush_r>
 8008f6c:	2800      	cmp	r0, #0
 8008f6e:	d1ed      	bne.n	8008f4c <__swbuf_r+0x2a>
 8008f70:	68a3      	ldr	r3, [r4, #8]
 8008f72:	3b01      	subs	r3, #1
 8008f74:	60a3      	str	r3, [r4, #8]
 8008f76:	6823      	ldr	r3, [r4, #0]
 8008f78:	1c5a      	adds	r2, r3, #1
 8008f7a:	6022      	str	r2, [r4, #0]
 8008f7c:	701e      	strb	r6, [r3, #0]
 8008f7e:	6962      	ldr	r2, [r4, #20]
 8008f80:	1c43      	adds	r3, r0, #1
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d004      	beq.n	8008f90 <__swbuf_r+0x6e>
 8008f86:	89a3      	ldrh	r3, [r4, #12]
 8008f88:	07db      	lsls	r3, r3, #31
 8008f8a:	d5e1      	bpl.n	8008f50 <__swbuf_r+0x2e>
 8008f8c:	2e0a      	cmp	r6, #10
 8008f8e:	d1df      	bne.n	8008f50 <__swbuf_r+0x2e>
 8008f90:	4621      	mov	r1, r4
 8008f92:	4628      	mov	r0, r5
 8008f94:	f000 fd22 	bl	80099dc <_fflush_r>
 8008f98:	2800      	cmp	r0, #0
 8008f9a:	d0d9      	beq.n	8008f50 <__swbuf_r+0x2e>
 8008f9c:	e7d6      	b.n	8008f4c <__swbuf_r+0x2a>
	...

08008fa0 <__swsetup_r>:
 8008fa0:	b538      	push	{r3, r4, r5, lr}
 8008fa2:	4b29      	ldr	r3, [pc, #164]	@ (8009048 <__swsetup_r+0xa8>)
 8008fa4:	4605      	mov	r5, r0
 8008fa6:	6818      	ldr	r0, [r3, #0]
 8008fa8:	460c      	mov	r4, r1
 8008faa:	b118      	cbz	r0, 8008fb4 <__swsetup_r+0x14>
 8008fac:	6a03      	ldr	r3, [r0, #32]
 8008fae:	b90b      	cbnz	r3, 8008fb4 <__swsetup_r+0x14>
 8008fb0:	f7ff fec6 	bl	8008d40 <__sinit>
 8008fb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fb8:	0719      	lsls	r1, r3, #28
 8008fba:	d422      	bmi.n	8009002 <__swsetup_r+0x62>
 8008fbc:	06da      	lsls	r2, r3, #27
 8008fbe:	d407      	bmi.n	8008fd0 <__swsetup_r+0x30>
 8008fc0:	2209      	movs	r2, #9
 8008fc2:	602a      	str	r2, [r5, #0]
 8008fc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fc8:	81a3      	strh	r3, [r4, #12]
 8008fca:	f04f 30ff 	mov.w	r0, #4294967295
 8008fce:	e033      	b.n	8009038 <__swsetup_r+0x98>
 8008fd0:	0758      	lsls	r0, r3, #29
 8008fd2:	d512      	bpl.n	8008ffa <__swsetup_r+0x5a>
 8008fd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008fd6:	b141      	cbz	r1, 8008fea <__swsetup_r+0x4a>
 8008fd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008fdc:	4299      	cmp	r1, r3
 8008fde:	d002      	beq.n	8008fe6 <__swsetup_r+0x46>
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	f000 f8af 	bl	8009144 <_free_r>
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	6363      	str	r3, [r4, #52]	@ 0x34
 8008fea:	89a3      	ldrh	r3, [r4, #12]
 8008fec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008ff0:	81a3      	strh	r3, [r4, #12]
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	6063      	str	r3, [r4, #4]
 8008ff6:	6923      	ldr	r3, [r4, #16]
 8008ff8:	6023      	str	r3, [r4, #0]
 8008ffa:	89a3      	ldrh	r3, [r4, #12]
 8008ffc:	f043 0308 	orr.w	r3, r3, #8
 8009000:	81a3      	strh	r3, [r4, #12]
 8009002:	6923      	ldr	r3, [r4, #16]
 8009004:	b94b      	cbnz	r3, 800901a <__swsetup_r+0x7a>
 8009006:	89a3      	ldrh	r3, [r4, #12]
 8009008:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800900c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009010:	d003      	beq.n	800901a <__swsetup_r+0x7a>
 8009012:	4621      	mov	r1, r4
 8009014:	4628      	mov	r0, r5
 8009016:	f000 fd2f 	bl	8009a78 <__smakebuf_r>
 800901a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800901e:	f013 0201 	ands.w	r2, r3, #1
 8009022:	d00a      	beq.n	800903a <__swsetup_r+0x9a>
 8009024:	2200      	movs	r2, #0
 8009026:	60a2      	str	r2, [r4, #8]
 8009028:	6962      	ldr	r2, [r4, #20]
 800902a:	4252      	negs	r2, r2
 800902c:	61a2      	str	r2, [r4, #24]
 800902e:	6922      	ldr	r2, [r4, #16]
 8009030:	b942      	cbnz	r2, 8009044 <__swsetup_r+0xa4>
 8009032:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009036:	d1c5      	bne.n	8008fc4 <__swsetup_r+0x24>
 8009038:	bd38      	pop	{r3, r4, r5, pc}
 800903a:	0799      	lsls	r1, r3, #30
 800903c:	bf58      	it	pl
 800903e:	6962      	ldrpl	r2, [r4, #20]
 8009040:	60a2      	str	r2, [r4, #8]
 8009042:	e7f4      	b.n	800902e <__swsetup_r+0x8e>
 8009044:	2000      	movs	r0, #0
 8009046:	e7f7      	b.n	8009038 <__swsetup_r+0x98>
 8009048:	2000001c 	.word	0x2000001c

0800904c <memset>:
 800904c:	4402      	add	r2, r0
 800904e:	4603      	mov	r3, r0
 8009050:	4293      	cmp	r3, r2
 8009052:	d100      	bne.n	8009056 <memset+0xa>
 8009054:	4770      	bx	lr
 8009056:	f803 1b01 	strb.w	r1, [r3], #1
 800905a:	e7f9      	b.n	8009050 <memset+0x4>

0800905c <_close_r>:
 800905c:	b538      	push	{r3, r4, r5, lr}
 800905e:	4d06      	ldr	r5, [pc, #24]	@ (8009078 <_close_r+0x1c>)
 8009060:	2300      	movs	r3, #0
 8009062:	4604      	mov	r4, r0
 8009064:	4608      	mov	r0, r1
 8009066:	602b      	str	r3, [r5, #0]
 8009068:	f7f8 fc0b 	bl	8001882 <_close>
 800906c:	1c43      	adds	r3, r0, #1
 800906e:	d102      	bne.n	8009076 <_close_r+0x1a>
 8009070:	682b      	ldr	r3, [r5, #0]
 8009072:	b103      	cbz	r3, 8009076 <_close_r+0x1a>
 8009074:	6023      	str	r3, [r4, #0]
 8009076:	bd38      	pop	{r3, r4, r5, pc}
 8009078:	20007b10 	.word	0x20007b10

0800907c <_lseek_r>:
 800907c:	b538      	push	{r3, r4, r5, lr}
 800907e:	4d07      	ldr	r5, [pc, #28]	@ (800909c <_lseek_r+0x20>)
 8009080:	4604      	mov	r4, r0
 8009082:	4608      	mov	r0, r1
 8009084:	4611      	mov	r1, r2
 8009086:	2200      	movs	r2, #0
 8009088:	602a      	str	r2, [r5, #0]
 800908a:	461a      	mov	r2, r3
 800908c:	f7f8 fc20 	bl	80018d0 <_lseek>
 8009090:	1c43      	adds	r3, r0, #1
 8009092:	d102      	bne.n	800909a <_lseek_r+0x1e>
 8009094:	682b      	ldr	r3, [r5, #0]
 8009096:	b103      	cbz	r3, 800909a <_lseek_r+0x1e>
 8009098:	6023      	str	r3, [r4, #0]
 800909a:	bd38      	pop	{r3, r4, r5, pc}
 800909c:	20007b10 	.word	0x20007b10

080090a0 <_read_r>:
 80090a0:	b538      	push	{r3, r4, r5, lr}
 80090a2:	4d07      	ldr	r5, [pc, #28]	@ (80090c0 <_read_r+0x20>)
 80090a4:	4604      	mov	r4, r0
 80090a6:	4608      	mov	r0, r1
 80090a8:	4611      	mov	r1, r2
 80090aa:	2200      	movs	r2, #0
 80090ac:	602a      	str	r2, [r5, #0]
 80090ae:	461a      	mov	r2, r3
 80090b0:	f7f8 fbae 	bl	8001810 <_read>
 80090b4:	1c43      	adds	r3, r0, #1
 80090b6:	d102      	bne.n	80090be <_read_r+0x1e>
 80090b8:	682b      	ldr	r3, [r5, #0]
 80090ba:	b103      	cbz	r3, 80090be <_read_r+0x1e>
 80090bc:	6023      	str	r3, [r4, #0]
 80090be:	bd38      	pop	{r3, r4, r5, pc}
 80090c0:	20007b10 	.word	0x20007b10

080090c4 <_write_r>:
 80090c4:	b538      	push	{r3, r4, r5, lr}
 80090c6:	4d07      	ldr	r5, [pc, #28]	@ (80090e4 <_write_r+0x20>)
 80090c8:	4604      	mov	r4, r0
 80090ca:	4608      	mov	r0, r1
 80090cc:	4611      	mov	r1, r2
 80090ce:	2200      	movs	r2, #0
 80090d0:	602a      	str	r2, [r5, #0]
 80090d2:	461a      	mov	r2, r3
 80090d4:	f7f8 fbb9 	bl	800184a <_write>
 80090d8:	1c43      	adds	r3, r0, #1
 80090da:	d102      	bne.n	80090e2 <_write_r+0x1e>
 80090dc:	682b      	ldr	r3, [r5, #0]
 80090de:	b103      	cbz	r3, 80090e2 <_write_r+0x1e>
 80090e0:	6023      	str	r3, [r4, #0]
 80090e2:	bd38      	pop	{r3, r4, r5, pc}
 80090e4:	20007b10 	.word	0x20007b10

080090e8 <__errno>:
 80090e8:	4b01      	ldr	r3, [pc, #4]	@ (80090f0 <__errno+0x8>)
 80090ea:	6818      	ldr	r0, [r3, #0]
 80090ec:	4770      	bx	lr
 80090ee:	bf00      	nop
 80090f0:	2000001c 	.word	0x2000001c

080090f4 <__libc_init_array>:
 80090f4:	b570      	push	{r4, r5, r6, lr}
 80090f6:	4d0d      	ldr	r5, [pc, #52]	@ (800912c <__libc_init_array+0x38>)
 80090f8:	4c0d      	ldr	r4, [pc, #52]	@ (8009130 <__libc_init_array+0x3c>)
 80090fa:	1b64      	subs	r4, r4, r5
 80090fc:	10a4      	asrs	r4, r4, #2
 80090fe:	2600      	movs	r6, #0
 8009100:	42a6      	cmp	r6, r4
 8009102:	d109      	bne.n	8009118 <__libc_init_array+0x24>
 8009104:	4d0b      	ldr	r5, [pc, #44]	@ (8009134 <__libc_init_array+0x40>)
 8009106:	4c0c      	ldr	r4, [pc, #48]	@ (8009138 <__libc_init_array+0x44>)
 8009108:	f000 fd58 	bl	8009bbc <_init>
 800910c:	1b64      	subs	r4, r4, r5
 800910e:	10a4      	asrs	r4, r4, #2
 8009110:	2600      	movs	r6, #0
 8009112:	42a6      	cmp	r6, r4
 8009114:	d105      	bne.n	8009122 <__libc_init_array+0x2e>
 8009116:	bd70      	pop	{r4, r5, r6, pc}
 8009118:	f855 3b04 	ldr.w	r3, [r5], #4
 800911c:	4798      	blx	r3
 800911e:	3601      	adds	r6, #1
 8009120:	e7ee      	b.n	8009100 <__libc_init_array+0xc>
 8009122:	f855 3b04 	ldr.w	r3, [r5], #4
 8009126:	4798      	blx	r3
 8009128:	3601      	adds	r6, #1
 800912a:	e7f2      	b.n	8009112 <__libc_init_array+0x1e>
 800912c:	0800a10c 	.word	0x0800a10c
 8009130:	0800a10c 	.word	0x0800a10c
 8009134:	0800a10c 	.word	0x0800a10c
 8009138:	0800a110 	.word	0x0800a110

0800913c <__retarget_lock_init_recursive>:
 800913c:	4770      	bx	lr

0800913e <__retarget_lock_acquire_recursive>:
 800913e:	4770      	bx	lr

08009140 <__retarget_lock_release_recursive>:
 8009140:	4770      	bx	lr
	...

08009144 <_free_r>:
 8009144:	b538      	push	{r3, r4, r5, lr}
 8009146:	4605      	mov	r5, r0
 8009148:	2900      	cmp	r1, #0
 800914a:	d041      	beq.n	80091d0 <_free_r+0x8c>
 800914c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009150:	1f0c      	subs	r4, r1, #4
 8009152:	2b00      	cmp	r3, #0
 8009154:	bfb8      	it	lt
 8009156:	18e4      	addlt	r4, r4, r3
 8009158:	f000 f8e0 	bl	800931c <__malloc_lock>
 800915c:	4a1d      	ldr	r2, [pc, #116]	@ (80091d4 <_free_r+0x90>)
 800915e:	6813      	ldr	r3, [r2, #0]
 8009160:	b933      	cbnz	r3, 8009170 <_free_r+0x2c>
 8009162:	6063      	str	r3, [r4, #4]
 8009164:	6014      	str	r4, [r2, #0]
 8009166:	4628      	mov	r0, r5
 8009168:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800916c:	f000 b8dc 	b.w	8009328 <__malloc_unlock>
 8009170:	42a3      	cmp	r3, r4
 8009172:	d908      	bls.n	8009186 <_free_r+0x42>
 8009174:	6820      	ldr	r0, [r4, #0]
 8009176:	1821      	adds	r1, r4, r0
 8009178:	428b      	cmp	r3, r1
 800917a:	bf01      	itttt	eq
 800917c:	6819      	ldreq	r1, [r3, #0]
 800917e:	685b      	ldreq	r3, [r3, #4]
 8009180:	1809      	addeq	r1, r1, r0
 8009182:	6021      	streq	r1, [r4, #0]
 8009184:	e7ed      	b.n	8009162 <_free_r+0x1e>
 8009186:	461a      	mov	r2, r3
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	b10b      	cbz	r3, 8009190 <_free_r+0x4c>
 800918c:	42a3      	cmp	r3, r4
 800918e:	d9fa      	bls.n	8009186 <_free_r+0x42>
 8009190:	6811      	ldr	r1, [r2, #0]
 8009192:	1850      	adds	r0, r2, r1
 8009194:	42a0      	cmp	r0, r4
 8009196:	d10b      	bne.n	80091b0 <_free_r+0x6c>
 8009198:	6820      	ldr	r0, [r4, #0]
 800919a:	4401      	add	r1, r0
 800919c:	1850      	adds	r0, r2, r1
 800919e:	4283      	cmp	r3, r0
 80091a0:	6011      	str	r1, [r2, #0]
 80091a2:	d1e0      	bne.n	8009166 <_free_r+0x22>
 80091a4:	6818      	ldr	r0, [r3, #0]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	6053      	str	r3, [r2, #4]
 80091aa:	4408      	add	r0, r1
 80091ac:	6010      	str	r0, [r2, #0]
 80091ae:	e7da      	b.n	8009166 <_free_r+0x22>
 80091b0:	d902      	bls.n	80091b8 <_free_r+0x74>
 80091b2:	230c      	movs	r3, #12
 80091b4:	602b      	str	r3, [r5, #0]
 80091b6:	e7d6      	b.n	8009166 <_free_r+0x22>
 80091b8:	6820      	ldr	r0, [r4, #0]
 80091ba:	1821      	adds	r1, r4, r0
 80091bc:	428b      	cmp	r3, r1
 80091be:	bf04      	itt	eq
 80091c0:	6819      	ldreq	r1, [r3, #0]
 80091c2:	685b      	ldreq	r3, [r3, #4]
 80091c4:	6063      	str	r3, [r4, #4]
 80091c6:	bf04      	itt	eq
 80091c8:	1809      	addeq	r1, r1, r0
 80091ca:	6021      	streq	r1, [r4, #0]
 80091cc:	6054      	str	r4, [r2, #4]
 80091ce:	e7ca      	b.n	8009166 <_free_r+0x22>
 80091d0:	bd38      	pop	{r3, r4, r5, pc}
 80091d2:	bf00      	nop
 80091d4:	20007b1c 	.word	0x20007b1c

080091d8 <sbrk_aligned>:
 80091d8:	b570      	push	{r4, r5, r6, lr}
 80091da:	4e0f      	ldr	r6, [pc, #60]	@ (8009218 <sbrk_aligned+0x40>)
 80091dc:	460c      	mov	r4, r1
 80091de:	6831      	ldr	r1, [r6, #0]
 80091e0:	4605      	mov	r5, r0
 80091e2:	b911      	cbnz	r1, 80091ea <sbrk_aligned+0x12>
 80091e4:	f000 fcda 	bl	8009b9c <_sbrk_r>
 80091e8:	6030      	str	r0, [r6, #0]
 80091ea:	4621      	mov	r1, r4
 80091ec:	4628      	mov	r0, r5
 80091ee:	f000 fcd5 	bl	8009b9c <_sbrk_r>
 80091f2:	1c43      	adds	r3, r0, #1
 80091f4:	d103      	bne.n	80091fe <sbrk_aligned+0x26>
 80091f6:	f04f 34ff 	mov.w	r4, #4294967295
 80091fa:	4620      	mov	r0, r4
 80091fc:	bd70      	pop	{r4, r5, r6, pc}
 80091fe:	1cc4      	adds	r4, r0, #3
 8009200:	f024 0403 	bic.w	r4, r4, #3
 8009204:	42a0      	cmp	r0, r4
 8009206:	d0f8      	beq.n	80091fa <sbrk_aligned+0x22>
 8009208:	1a21      	subs	r1, r4, r0
 800920a:	4628      	mov	r0, r5
 800920c:	f000 fcc6 	bl	8009b9c <_sbrk_r>
 8009210:	3001      	adds	r0, #1
 8009212:	d1f2      	bne.n	80091fa <sbrk_aligned+0x22>
 8009214:	e7ef      	b.n	80091f6 <sbrk_aligned+0x1e>
 8009216:	bf00      	nop
 8009218:	20007b18 	.word	0x20007b18

0800921c <_malloc_r>:
 800921c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009220:	1ccd      	adds	r5, r1, #3
 8009222:	f025 0503 	bic.w	r5, r5, #3
 8009226:	3508      	adds	r5, #8
 8009228:	2d0c      	cmp	r5, #12
 800922a:	bf38      	it	cc
 800922c:	250c      	movcc	r5, #12
 800922e:	2d00      	cmp	r5, #0
 8009230:	4606      	mov	r6, r0
 8009232:	db01      	blt.n	8009238 <_malloc_r+0x1c>
 8009234:	42a9      	cmp	r1, r5
 8009236:	d904      	bls.n	8009242 <_malloc_r+0x26>
 8009238:	230c      	movs	r3, #12
 800923a:	6033      	str	r3, [r6, #0]
 800923c:	2000      	movs	r0, #0
 800923e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009242:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009318 <_malloc_r+0xfc>
 8009246:	f000 f869 	bl	800931c <__malloc_lock>
 800924a:	f8d8 3000 	ldr.w	r3, [r8]
 800924e:	461c      	mov	r4, r3
 8009250:	bb44      	cbnz	r4, 80092a4 <_malloc_r+0x88>
 8009252:	4629      	mov	r1, r5
 8009254:	4630      	mov	r0, r6
 8009256:	f7ff ffbf 	bl	80091d8 <sbrk_aligned>
 800925a:	1c43      	adds	r3, r0, #1
 800925c:	4604      	mov	r4, r0
 800925e:	d158      	bne.n	8009312 <_malloc_r+0xf6>
 8009260:	f8d8 4000 	ldr.w	r4, [r8]
 8009264:	4627      	mov	r7, r4
 8009266:	2f00      	cmp	r7, #0
 8009268:	d143      	bne.n	80092f2 <_malloc_r+0xd6>
 800926a:	2c00      	cmp	r4, #0
 800926c:	d04b      	beq.n	8009306 <_malloc_r+0xea>
 800926e:	6823      	ldr	r3, [r4, #0]
 8009270:	4639      	mov	r1, r7
 8009272:	4630      	mov	r0, r6
 8009274:	eb04 0903 	add.w	r9, r4, r3
 8009278:	f000 fc90 	bl	8009b9c <_sbrk_r>
 800927c:	4581      	cmp	r9, r0
 800927e:	d142      	bne.n	8009306 <_malloc_r+0xea>
 8009280:	6821      	ldr	r1, [r4, #0]
 8009282:	1a6d      	subs	r5, r5, r1
 8009284:	4629      	mov	r1, r5
 8009286:	4630      	mov	r0, r6
 8009288:	f7ff ffa6 	bl	80091d8 <sbrk_aligned>
 800928c:	3001      	adds	r0, #1
 800928e:	d03a      	beq.n	8009306 <_malloc_r+0xea>
 8009290:	6823      	ldr	r3, [r4, #0]
 8009292:	442b      	add	r3, r5
 8009294:	6023      	str	r3, [r4, #0]
 8009296:	f8d8 3000 	ldr.w	r3, [r8]
 800929a:	685a      	ldr	r2, [r3, #4]
 800929c:	bb62      	cbnz	r2, 80092f8 <_malloc_r+0xdc>
 800929e:	f8c8 7000 	str.w	r7, [r8]
 80092a2:	e00f      	b.n	80092c4 <_malloc_r+0xa8>
 80092a4:	6822      	ldr	r2, [r4, #0]
 80092a6:	1b52      	subs	r2, r2, r5
 80092a8:	d420      	bmi.n	80092ec <_malloc_r+0xd0>
 80092aa:	2a0b      	cmp	r2, #11
 80092ac:	d917      	bls.n	80092de <_malloc_r+0xc2>
 80092ae:	1961      	adds	r1, r4, r5
 80092b0:	42a3      	cmp	r3, r4
 80092b2:	6025      	str	r5, [r4, #0]
 80092b4:	bf18      	it	ne
 80092b6:	6059      	strne	r1, [r3, #4]
 80092b8:	6863      	ldr	r3, [r4, #4]
 80092ba:	bf08      	it	eq
 80092bc:	f8c8 1000 	streq.w	r1, [r8]
 80092c0:	5162      	str	r2, [r4, r5]
 80092c2:	604b      	str	r3, [r1, #4]
 80092c4:	4630      	mov	r0, r6
 80092c6:	f000 f82f 	bl	8009328 <__malloc_unlock>
 80092ca:	f104 000b 	add.w	r0, r4, #11
 80092ce:	1d23      	adds	r3, r4, #4
 80092d0:	f020 0007 	bic.w	r0, r0, #7
 80092d4:	1ac2      	subs	r2, r0, r3
 80092d6:	bf1c      	itt	ne
 80092d8:	1a1b      	subne	r3, r3, r0
 80092da:	50a3      	strne	r3, [r4, r2]
 80092dc:	e7af      	b.n	800923e <_malloc_r+0x22>
 80092de:	6862      	ldr	r2, [r4, #4]
 80092e0:	42a3      	cmp	r3, r4
 80092e2:	bf0c      	ite	eq
 80092e4:	f8c8 2000 	streq.w	r2, [r8]
 80092e8:	605a      	strne	r2, [r3, #4]
 80092ea:	e7eb      	b.n	80092c4 <_malloc_r+0xa8>
 80092ec:	4623      	mov	r3, r4
 80092ee:	6864      	ldr	r4, [r4, #4]
 80092f0:	e7ae      	b.n	8009250 <_malloc_r+0x34>
 80092f2:	463c      	mov	r4, r7
 80092f4:	687f      	ldr	r7, [r7, #4]
 80092f6:	e7b6      	b.n	8009266 <_malloc_r+0x4a>
 80092f8:	461a      	mov	r2, r3
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	42a3      	cmp	r3, r4
 80092fe:	d1fb      	bne.n	80092f8 <_malloc_r+0xdc>
 8009300:	2300      	movs	r3, #0
 8009302:	6053      	str	r3, [r2, #4]
 8009304:	e7de      	b.n	80092c4 <_malloc_r+0xa8>
 8009306:	230c      	movs	r3, #12
 8009308:	6033      	str	r3, [r6, #0]
 800930a:	4630      	mov	r0, r6
 800930c:	f000 f80c 	bl	8009328 <__malloc_unlock>
 8009310:	e794      	b.n	800923c <_malloc_r+0x20>
 8009312:	6005      	str	r5, [r0, #0]
 8009314:	e7d6      	b.n	80092c4 <_malloc_r+0xa8>
 8009316:	bf00      	nop
 8009318:	20007b1c 	.word	0x20007b1c

0800931c <__malloc_lock>:
 800931c:	4801      	ldr	r0, [pc, #4]	@ (8009324 <__malloc_lock+0x8>)
 800931e:	f7ff bf0e 	b.w	800913e <__retarget_lock_acquire_recursive>
 8009322:	bf00      	nop
 8009324:	20007b14 	.word	0x20007b14

08009328 <__malloc_unlock>:
 8009328:	4801      	ldr	r0, [pc, #4]	@ (8009330 <__malloc_unlock+0x8>)
 800932a:	f7ff bf09 	b.w	8009140 <__retarget_lock_release_recursive>
 800932e:	bf00      	nop
 8009330:	20007b14 	.word	0x20007b14

08009334 <__sfputc_r>:
 8009334:	6893      	ldr	r3, [r2, #8]
 8009336:	3b01      	subs	r3, #1
 8009338:	2b00      	cmp	r3, #0
 800933a:	b410      	push	{r4}
 800933c:	6093      	str	r3, [r2, #8]
 800933e:	da08      	bge.n	8009352 <__sfputc_r+0x1e>
 8009340:	6994      	ldr	r4, [r2, #24]
 8009342:	42a3      	cmp	r3, r4
 8009344:	db01      	blt.n	800934a <__sfputc_r+0x16>
 8009346:	290a      	cmp	r1, #10
 8009348:	d103      	bne.n	8009352 <__sfputc_r+0x1e>
 800934a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800934e:	f7ff bde8 	b.w	8008f22 <__swbuf_r>
 8009352:	6813      	ldr	r3, [r2, #0]
 8009354:	1c58      	adds	r0, r3, #1
 8009356:	6010      	str	r0, [r2, #0]
 8009358:	7019      	strb	r1, [r3, #0]
 800935a:	4608      	mov	r0, r1
 800935c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009360:	4770      	bx	lr

08009362 <__sfputs_r>:
 8009362:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009364:	4606      	mov	r6, r0
 8009366:	460f      	mov	r7, r1
 8009368:	4614      	mov	r4, r2
 800936a:	18d5      	adds	r5, r2, r3
 800936c:	42ac      	cmp	r4, r5
 800936e:	d101      	bne.n	8009374 <__sfputs_r+0x12>
 8009370:	2000      	movs	r0, #0
 8009372:	e007      	b.n	8009384 <__sfputs_r+0x22>
 8009374:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009378:	463a      	mov	r2, r7
 800937a:	4630      	mov	r0, r6
 800937c:	f7ff ffda 	bl	8009334 <__sfputc_r>
 8009380:	1c43      	adds	r3, r0, #1
 8009382:	d1f3      	bne.n	800936c <__sfputs_r+0xa>
 8009384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009388 <_vfiprintf_r>:
 8009388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800938c:	460d      	mov	r5, r1
 800938e:	b09d      	sub	sp, #116	@ 0x74
 8009390:	4614      	mov	r4, r2
 8009392:	4698      	mov	r8, r3
 8009394:	4606      	mov	r6, r0
 8009396:	b118      	cbz	r0, 80093a0 <_vfiprintf_r+0x18>
 8009398:	6a03      	ldr	r3, [r0, #32]
 800939a:	b90b      	cbnz	r3, 80093a0 <_vfiprintf_r+0x18>
 800939c:	f7ff fcd0 	bl	8008d40 <__sinit>
 80093a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093a2:	07d9      	lsls	r1, r3, #31
 80093a4:	d405      	bmi.n	80093b2 <_vfiprintf_r+0x2a>
 80093a6:	89ab      	ldrh	r3, [r5, #12]
 80093a8:	059a      	lsls	r2, r3, #22
 80093aa:	d402      	bmi.n	80093b2 <_vfiprintf_r+0x2a>
 80093ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093ae:	f7ff fec6 	bl	800913e <__retarget_lock_acquire_recursive>
 80093b2:	89ab      	ldrh	r3, [r5, #12]
 80093b4:	071b      	lsls	r3, r3, #28
 80093b6:	d501      	bpl.n	80093bc <_vfiprintf_r+0x34>
 80093b8:	692b      	ldr	r3, [r5, #16]
 80093ba:	b99b      	cbnz	r3, 80093e4 <_vfiprintf_r+0x5c>
 80093bc:	4629      	mov	r1, r5
 80093be:	4630      	mov	r0, r6
 80093c0:	f7ff fdee 	bl	8008fa0 <__swsetup_r>
 80093c4:	b170      	cbz	r0, 80093e4 <_vfiprintf_r+0x5c>
 80093c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093c8:	07dc      	lsls	r4, r3, #31
 80093ca:	d504      	bpl.n	80093d6 <_vfiprintf_r+0x4e>
 80093cc:	f04f 30ff 	mov.w	r0, #4294967295
 80093d0:	b01d      	add	sp, #116	@ 0x74
 80093d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093d6:	89ab      	ldrh	r3, [r5, #12]
 80093d8:	0598      	lsls	r0, r3, #22
 80093da:	d4f7      	bmi.n	80093cc <_vfiprintf_r+0x44>
 80093dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093de:	f7ff feaf 	bl	8009140 <__retarget_lock_release_recursive>
 80093e2:	e7f3      	b.n	80093cc <_vfiprintf_r+0x44>
 80093e4:	2300      	movs	r3, #0
 80093e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80093e8:	2320      	movs	r3, #32
 80093ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80093ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80093f2:	2330      	movs	r3, #48	@ 0x30
 80093f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80095a4 <_vfiprintf_r+0x21c>
 80093f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80093fc:	f04f 0901 	mov.w	r9, #1
 8009400:	4623      	mov	r3, r4
 8009402:	469a      	mov	sl, r3
 8009404:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009408:	b10a      	cbz	r2, 800940e <_vfiprintf_r+0x86>
 800940a:	2a25      	cmp	r2, #37	@ 0x25
 800940c:	d1f9      	bne.n	8009402 <_vfiprintf_r+0x7a>
 800940e:	ebba 0b04 	subs.w	fp, sl, r4
 8009412:	d00b      	beq.n	800942c <_vfiprintf_r+0xa4>
 8009414:	465b      	mov	r3, fp
 8009416:	4622      	mov	r2, r4
 8009418:	4629      	mov	r1, r5
 800941a:	4630      	mov	r0, r6
 800941c:	f7ff ffa1 	bl	8009362 <__sfputs_r>
 8009420:	3001      	adds	r0, #1
 8009422:	f000 80a7 	beq.w	8009574 <_vfiprintf_r+0x1ec>
 8009426:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009428:	445a      	add	r2, fp
 800942a:	9209      	str	r2, [sp, #36]	@ 0x24
 800942c:	f89a 3000 	ldrb.w	r3, [sl]
 8009430:	2b00      	cmp	r3, #0
 8009432:	f000 809f 	beq.w	8009574 <_vfiprintf_r+0x1ec>
 8009436:	2300      	movs	r3, #0
 8009438:	f04f 32ff 	mov.w	r2, #4294967295
 800943c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009440:	f10a 0a01 	add.w	sl, sl, #1
 8009444:	9304      	str	r3, [sp, #16]
 8009446:	9307      	str	r3, [sp, #28]
 8009448:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800944c:	931a      	str	r3, [sp, #104]	@ 0x68
 800944e:	4654      	mov	r4, sl
 8009450:	2205      	movs	r2, #5
 8009452:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009456:	4853      	ldr	r0, [pc, #332]	@ (80095a4 <_vfiprintf_r+0x21c>)
 8009458:	f7f6 fee2 	bl	8000220 <memchr>
 800945c:	9a04      	ldr	r2, [sp, #16]
 800945e:	b9d8      	cbnz	r0, 8009498 <_vfiprintf_r+0x110>
 8009460:	06d1      	lsls	r1, r2, #27
 8009462:	bf44      	itt	mi
 8009464:	2320      	movmi	r3, #32
 8009466:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800946a:	0713      	lsls	r3, r2, #28
 800946c:	bf44      	itt	mi
 800946e:	232b      	movmi	r3, #43	@ 0x2b
 8009470:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009474:	f89a 3000 	ldrb.w	r3, [sl]
 8009478:	2b2a      	cmp	r3, #42	@ 0x2a
 800947a:	d015      	beq.n	80094a8 <_vfiprintf_r+0x120>
 800947c:	9a07      	ldr	r2, [sp, #28]
 800947e:	4654      	mov	r4, sl
 8009480:	2000      	movs	r0, #0
 8009482:	f04f 0c0a 	mov.w	ip, #10
 8009486:	4621      	mov	r1, r4
 8009488:	f811 3b01 	ldrb.w	r3, [r1], #1
 800948c:	3b30      	subs	r3, #48	@ 0x30
 800948e:	2b09      	cmp	r3, #9
 8009490:	d94b      	bls.n	800952a <_vfiprintf_r+0x1a2>
 8009492:	b1b0      	cbz	r0, 80094c2 <_vfiprintf_r+0x13a>
 8009494:	9207      	str	r2, [sp, #28]
 8009496:	e014      	b.n	80094c2 <_vfiprintf_r+0x13a>
 8009498:	eba0 0308 	sub.w	r3, r0, r8
 800949c:	fa09 f303 	lsl.w	r3, r9, r3
 80094a0:	4313      	orrs	r3, r2
 80094a2:	9304      	str	r3, [sp, #16]
 80094a4:	46a2      	mov	sl, r4
 80094a6:	e7d2      	b.n	800944e <_vfiprintf_r+0xc6>
 80094a8:	9b03      	ldr	r3, [sp, #12]
 80094aa:	1d19      	adds	r1, r3, #4
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	9103      	str	r1, [sp, #12]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	bfbb      	ittet	lt
 80094b4:	425b      	neglt	r3, r3
 80094b6:	f042 0202 	orrlt.w	r2, r2, #2
 80094ba:	9307      	strge	r3, [sp, #28]
 80094bc:	9307      	strlt	r3, [sp, #28]
 80094be:	bfb8      	it	lt
 80094c0:	9204      	strlt	r2, [sp, #16]
 80094c2:	7823      	ldrb	r3, [r4, #0]
 80094c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80094c6:	d10a      	bne.n	80094de <_vfiprintf_r+0x156>
 80094c8:	7863      	ldrb	r3, [r4, #1]
 80094ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80094cc:	d132      	bne.n	8009534 <_vfiprintf_r+0x1ac>
 80094ce:	9b03      	ldr	r3, [sp, #12]
 80094d0:	1d1a      	adds	r2, r3, #4
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	9203      	str	r2, [sp, #12]
 80094d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80094da:	3402      	adds	r4, #2
 80094dc:	9305      	str	r3, [sp, #20]
 80094de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80095b4 <_vfiprintf_r+0x22c>
 80094e2:	7821      	ldrb	r1, [r4, #0]
 80094e4:	2203      	movs	r2, #3
 80094e6:	4650      	mov	r0, sl
 80094e8:	f7f6 fe9a 	bl	8000220 <memchr>
 80094ec:	b138      	cbz	r0, 80094fe <_vfiprintf_r+0x176>
 80094ee:	9b04      	ldr	r3, [sp, #16]
 80094f0:	eba0 000a 	sub.w	r0, r0, sl
 80094f4:	2240      	movs	r2, #64	@ 0x40
 80094f6:	4082      	lsls	r2, r0
 80094f8:	4313      	orrs	r3, r2
 80094fa:	3401      	adds	r4, #1
 80094fc:	9304      	str	r3, [sp, #16]
 80094fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009502:	4829      	ldr	r0, [pc, #164]	@ (80095a8 <_vfiprintf_r+0x220>)
 8009504:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009508:	2206      	movs	r2, #6
 800950a:	f7f6 fe89 	bl	8000220 <memchr>
 800950e:	2800      	cmp	r0, #0
 8009510:	d03f      	beq.n	8009592 <_vfiprintf_r+0x20a>
 8009512:	4b26      	ldr	r3, [pc, #152]	@ (80095ac <_vfiprintf_r+0x224>)
 8009514:	bb1b      	cbnz	r3, 800955e <_vfiprintf_r+0x1d6>
 8009516:	9b03      	ldr	r3, [sp, #12]
 8009518:	3307      	adds	r3, #7
 800951a:	f023 0307 	bic.w	r3, r3, #7
 800951e:	3308      	adds	r3, #8
 8009520:	9303      	str	r3, [sp, #12]
 8009522:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009524:	443b      	add	r3, r7
 8009526:	9309      	str	r3, [sp, #36]	@ 0x24
 8009528:	e76a      	b.n	8009400 <_vfiprintf_r+0x78>
 800952a:	fb0c 3202 	mla	r2, ip, r2, r3
 800952e:	460c      	mov	r4, r1
 8009530:	2001      	movs	r0, #1
 8009532:	e7a8      	b.n	8009486 <_vfiprintf_r+0xfe>
 8009534:	2300      	movs	r3, #0
 8009536:	3401      	adds	r4, #1
 8009538:	9305      	str	r3, [sp, #20]
 800953a:	4619      	mov	r1, r3
 800953c:	f04f 0c0a 	mov.w	ip, #10
 8009540:	4620      	mov	r0, r4
 8009542:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009546:	3a30      	subs	r2, #48	@ 0x30
 8009548:	2a09      	cmp	r2, #9
 800954a:	d903      	bls.n	8009554 <_vfiprintf_r+0x1cc>
 800954c:	2b00      	cmp	r3, #0
 800954e:	d0c6      	beq.n	80094de <_vfiprintf_r+0x156>
 8009550:	9105      	str	r1, [sp, #20]
 8009552:	e7c4      	b.n	80094de <_vfiprintf_r+0x156>
 8009554:	fb0c 2101 	mla	r1, ip, r1, r2
 8009558:	4604      	mov	r4, r0
 800955a:	2301      	movs	r3, #1
 800955c:	e7f0      	b.n	8009540 <_vfiprintf_r+0x1b8>
 800955e:	ab03      	add	r3, sp, #12
 8009560:	9300      	str	r3, [sp, #0]
 8009562:	462a      	mov	r2, r5
 8009564:	4b12      	ldr	r3, [pc, #72]	@ (80095b0 <_vfiprintf_r+0x228>)
 8009566:	a904      	add	r1, sp, #16
 8009568:	4630      	mov	r0, r6
 800956a:	f3af 8000 	nop.w
 800956e:	4607      	mov	r7, r0
 8009570:	1c78      	adds	r0, r7, #1
 8009572:	d1d6      	bne.n	8009522 <_vfiprintf_r+0x19a>
 8009574:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009576:	07d9      	lsls	r1, r3, #31
 8009578:	d405      	bmi.n	8009586 <_vfiprintf_r+0x1fe>
 800957a:	89ab      	ldrh	r3, [r5, #12]
 800957c:	059a      	lsls	r2, r3, #22
 800957e:	d402      	bmi.n	8009586 <_vfiprintf_r+0x1fe>
 8009580:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009582:	f7ff fddd 	bl	8009140 <__retarget_lock_release_recursive>
 8009586:	89ab      	ldrh	r3, [r5, #12]
 8009588:	065b      	lsls	r3, r3, #25
 800958a:	f53f af1f 	bmi.w	80093cc <_vfiprintf_r+0x44>
 800958e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009590:	e71e      	b.n	80093d0 <_vfiprintf_r+0x48>
 8009592:	ab03      	add	r3, sp, #12
 8009594:	9300      	str	r3, [sp, #0]
 8009596:	462a      	mov	r2, r5
 8009598:	4b05      	ldr	r3, [pc, #20]	@ (80095b0 <_vfiprintf_r+0x228>)
 800959a:	a904      	add	r1, sp, #16
 800959c:	4630      	mov	r0, r6
 800959e:	f000 f879 	bl	8009694 <_printf_i>
 80095a2:	e7e4      	b.n	800956e <_vfiprintf_r+0x1e6>
 80095a4:	0800a0d0 	.word	0x0800a0d0
 80095a8:	0800a0da 	.word	0x0800a0da
 80095ac:	00000000 	.word	0x00000000
 80095b0:	08009363 	.word	0x08009363
 80095b4:	0800a0d6 	.word	0x0800a0d6

080095b8 <_printf_common>:
 80095b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095bc:	4616      	mov	r6, r2
 80095be:	4698      	mov	r8, r3
 80095c0:	688a      	ldr	r2, [r1, #8]
 80095c2:	690b      	ldr	r3, [r1, #16]
 80095c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80095c8:	4293      	cmp	r3, r2
 80095ca:	bfb8      	it	lt
 80095cc:	4613      	movlt	r3, r2
 80095ce:	6033      	str	r3, [r6, #0]
 80095d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80095d4:	4607      	mov	r7, r0
 80095d6:	460c      	mov	r4, r1
 80095d8:	b10a      	cbz	r2, 80095de <_printf_common+0x26>
 80095da:	3301      	adds	r3, #1
 80095dc:	6033      	str	r3, [r6, #0]
 80095de:	6823      	ldr	r3, [r4, #0]
 80095e0:	0699      	lsls	r1, r3, #26
 80095e2:	bf42      	ittt	mi
 80095e4:	6833      	ldrmi	r3, [r6, #0]
 80095e6:	3302      	addmi	r3, #2
 80095e8:	6033      	strmi	r3, [r6, #0]
 80095ea:	6825      	ldr	r5, [r4, #0]
 80095ec:	f015 0506 	ands.w	r5, r5, #6
 80095f0:	d106      	bne.n	8009600 <_printf_common+0x48>
 80095f2:	f104 0a19 	add.w	sl, r4, #25
 80095f6:	68e3      	ldr	r3, [r4, #12]
 80095f8:	6832      	ldr	r2, [r6, #0]
 80095fa:	1a9b      	subs	r3, r3, r2
 80095fc:	42ab      	cmp	r3, r5
 80095fe:	dc26      	bgt.n	800964e <_printf_common+0x96>
 8009600:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009604:	6822      	ldr	r2, [r4, #0]
 8009606:	3b00      	subs	r3, #0
 8009608:	bf18      	it	ne
 800960a:	2301      	movne	r3, #1
 800960c:	0692      	lsls	r2, r2, #26
 800960e:	d42b      	bmi.n	8009668 <_printf_common+0xb0>
 8009610:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009614:	4641      	mov	r1, r8
 8009616:	4638      	mov	r0, r7
 8009618:	47c8      	blx	r9
 800961a:	3001      	adds	r0, #1
 800961c:	d01e      	beq.n	800965c <_printf_common+0xa4>
 800961e:	6823      	ldr	r3, [r4, #0]
 8009620:	6922      	ldr	r2, [r4, #16]
 8009622:	f003 0306 	and.w	r3, r3, #6
 8009626:	2b04      	cmp	r3, #4
 8009628:	bf02      	ittt	eq
 800962a:	68e5      	ldreq	r5, [r4, #12]
 800962c:	6833      	ldreq	r3, [r6, #0]
 800962e:	1aed      	subeq	r5, r5, r3
 8009630:	68a3      	ldr	r3, [r4, #8]
 8009632:	bf0c      	ite	eq
 8009634:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009638:	2500      	movne	r5, #0
 800963a:	4293      	cmp	r3, r2
 800963c:	bfc4      	itt	gt
 800963e:	1a9b      	subgt	r3, r3, r2
 8009640:	18ed      	addgt	r5, r5, r3
 8009642:	2600      	movs	r6, #0
 8009644:	341a      	adds	r4, #26
 8009646:	42b5      	cmp	r5, r6
 8009648:	d11a      	bne.n	8009680 <_printf_common+0xc8>
 800964a:	2000      	movs	r0, #0
 800964c:	e008      	b.n	8009660 <_printf_common+0xa8>
 800964e:	2301      	movs	r3, #1
 8009650:	4652      	mov	r2, sl
 8009652:	4641      	mov	r1, r8
 8009654:	4638      	mov	r0, r7
 8009656:	47c8      	blx	r9
 8009658:	3001      	adds	r0, #1
 800965a:	d103      	bne.n	8009664 <_printf_common+0xac>
 800965c:	f04f 30ff 	mov.w	r0, #4294967295
 8009660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009664:	3501      	adds	r5, #1
 8009666:	e7c6      	b.n	80095f6 <_printf_common+0x3e>
 8009668:	18e1      	adds	r1, r4, r3
 800966a:	1c5a      	adds	r2, r3, #1
 800966c:	2030      	movs	r0, #48	@ 0x30
 800966e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009672:	4422      	add	r2, r4
 8009674:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009678:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800967c:	3302      	adds	r3, #2
 800967e:	e7c7      	b.n	8009610 <_printf_common+0x58>
 8009680:	2301      	movs	r3, #1
 8009682:	4622      	mov	r2, r4
 8009684:	4641      	mov	r1, r8
 8009686:	4638      	mov	r0, r7
 8009688:	47c8      	blx	r9
 800968a:	3001      	adds	r0, #1
 800968c:	d0e6      	beq.n	800965c <_printf_common+0xa4>
 800968e:	3601      	adds	r6, #1
 8009690:	e7d9      	b.n	8009646 <_printf_common+0x8e>
	...

08009694 <_printf_i>:
 8009694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009698:	7e0f      	ldrb	r7, [r1, #24]
 800969a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800969c:	2f78      	cmp	r7, #120	@ 0x78
 800969e:	4691      	mov	r9, r2
 80096a0:	4680      	mov	r8, r0
 80096a2:	460c      	mov	r4, r1
 80096a4:	469a      	mov	sl, r3
 80096a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80096aa:	d807      	bhi.n	80096bc <_printf_i+0x28>
 80096ac:	2f62      	cmp	r7, #98	@ 0x62
 80096ae:	d80a      	bhi.n	80096c6 <_printf_i+0x32>
 80096b0:	2f00      	cmp	r7, #0
 80096b2:	f000 80d2 	beq.w	800985a <_printf_i+0x1c6>
 80096b6:	2f58      	cmp	r7, #88	@ 0x58
 80096b8:	f000 80b9 	beq.w	800982e <_printf_i+0x19a>
 80096bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80096c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80096c4:	e03a      	b.n	800973c <_printf_i+0xa8>
 80096c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80096ca:	2b15      	cmp	r3, #21
 80096cc:	d8f6      	bhi.n	80096bc <_printf_i+0x28>
 80096ce:	a101      	add	r1, pc, #4	@ (adr r1, 80096d4 <_printf_i+0x40>)
 80096d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80096d4:	0800972d 	.word	0x0800972d
 80096d8:	08009741 	.word	0x08009741
 80096dc:	080096bd 	.word	0x080096bd
 80096e0:	080096bd 	.word	0x080096bd
 80096e4:	080096bd 	.word	0x080096bd
 80096e8:	080096bd 	.word	0x080096bd
 80096ec:	08009741 	.word	0x08009741
 80096f0:	080096bd 	.word	0x080096bd
 80096f4:	080096bd 	.word	0x080096bd
 80096f8:	080096bd 	.word	0x080096bd
 80096fc:	080096bd 	.word	0x080096bd
 8009700:	08009841 	.word	0x08009841
 8009704:	0800976b 	.word	0x0800976b
 8009708:	080097fb 	.word	0x080097fb
 800970c:	080096bd 	.word	0x080096bd
 8009710:	080096bd 	.word	0x080096bd
 8009714:	08009863 	.word	0x08009863
 8009718:	080096bd 	.word	0x080096bd
 800971c:	0800976b 	.word	0x0800976b
 8009720:	080096bd 	.word	0x080096bd
 8009724:	080096bd 	.word	0x080096bd
 8009728:	08009803 	.word	0x08009803
 800972c:	6833      	ldr	r3, [r6, #0]
 800972e:	1d1a      	adds	r2, r3, #4
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	6032      	str	r2, [r6, #0]
 8009734:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009738:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800973c:	2301      	movs	r3, #1
 800973e:	e09d      	b.n	800987c <_printf_i+0x1e8>
 8009740:	6833      	ldr	r3, [r6, #0]
 8009742:	6820      	ldr	r0, [r4, #0]
 8009744:	1d19      	adds	r1, r3, #4
 8009746:	6031      	str	r1, [r6, #0]
 8009748:	0606      	lsls	r6, r0, #24
 800974a:	d501      	bpl.n	8009750 <_printf_i+0xbc>
 800974c:	681d      	ldr	r5, [r3, #0]
 800974e:	e003      	b.n	8009758 <_printf_i+0xc4>
 8009750:	0645      	lsls	r5, r0, #25
 8009752:	d5fb      	bpl.n	800974c <_printf_i+0xb8>
 8009754:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009758:	2d00      	cmp	r5, #0
 800975a:	da03      	bge.n	8009764 <_printf_i+0xd0>
 800975c:	232d      	movs	r3, #45	@ 0x2d
 800975e:	426d      	negs	r5, r5
 8009760:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009764:	4859      	ldr	r0, [pc, #356]	@ (80098cc <_printf_i+0x238>)
 8009766:	230a      	movs	r3, #10
 8009768:	e011      	b.n	800978e <_printf_i+0xfa>
 800976a:	6821      	ldr	r1, [r4, #0]
 800976c:	6833      	ldr	r3, [r6, #0]
 800976e:	0608      	lsls	r0, r1, #24
 8009770:	f853 5b04 	ldr.w	r5, [r3], #4
 8009774:	d402      	bmi.n	800977c <_printf_i+0xe8>
 8009776:	0649      	lsls	r1, r1, #25
 8009778:	bf48      	it	mi
 800977a:	b2ad      	uxthmi	r5, r5
 800977c:	2f6f      	cmp	r7, #111	@ 0x6f
 800977e:	4853      	ldr	r0, [pc, #332]	@ (80098cc <_printf_i+0x238>)
 8009780:	6033      	str	r3, [r6, #0]
 8009782:	bf14      	ite	ne
 8009784:	230a      	movne	r3, #10
 8009786:	2308      	moveq	r3, #8
 8009788:	2100      	movs	r1, #0
 800978a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800978e:	6866      	ldr	r6, [r4, #4]
 8009790:	60a6      	str	r6, [r4, #8]
 8009792:	2e00      	cmp	r6, #0
 8009794:	bfa2      	ittt	ge
 8009796:	6821      	ldrge	r1, [r4, #0]
 8009798:	f021 0104 	bicge.w	r1, r1, #4
 800979c:	6021      	strge	r1, [r4, #0]
 800979e:	b90d      	cbnz	r5, 80097a4 <_printf_i+0x110>
 80097a0:	2e00      	cmp	r6, #0
 80097a2:	d04b      	beq.n	800983c <_printf_i+0x1a8>
 80097a4:	4616      	mov	r6, r2
 80097a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80097aa:	fb03 5711 	mls	r7, r3, r1, r5
 80097ae:	5dc7      	ldrb	r7, [r0, r7]
 80097b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80097b4:	462f      	mov	r7, r5
 80097b6:	42bb      	cmp	r3, r7
 80097b8:	460d      	mov	r5, r1
 80097ba:	d9f4      	bls.n	80097a6 <_printf_i+0x112>
 80097bc:	2b08      	cmp	r3, #8
 80097be:	d10b      	bne.n	80097d8 <_printf_i+0x144>
 80097c0:	6823      	ldr	r3, [r4, #0]
 80097c2:	07df      	lsls	r7, r3, #31
 80097c4:	d508      	bpl.n	80097d8 <_printf_i+0x144>
 80097c6:	6923      	ldr	r3, [r4, #16]
 80097c8:	6861      	ldr	r1, [r4, #4]
 80097ca:	4299      	cmp	r1, r3
 80097cc:	bfde      	ittt	le
 80097ce:	2330      	movle	r3, #48	@ 0x30
 80097d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80097d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80097d8:	1b92      	subs	r2, r2, r6
 80097da:	6122      	str	r2, [r4, #16]
 80097dc:	f8cd a000 	str.w	sl, [sp]
 80097e0:	464b      	mov	r3, r9
 80097e2:	aa03      	add	r2, sp, #12
 80097e4:	4621      	mov	r1, r4
 80097e6:	4640      	mov	r0, r8
 80097e8:	f7ff fee6 	bl	80095b8 <_printf_common>
 80097ec:	3001      	adds	r0, #1
 80097ee:	d14a      	bne.n	8009886 <_printf_i+0x1f2>
 80097f0:	f04f 30ff 	mov.w	r0, #4294967295
 80097f4:	b004      	add	sp, #16
 80097f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097fa:	6823      	ldr	r3, [r4, #0]
 80097fc:	f043 0320 	orr.w	r3, r3, #32
 8009800:	6023      	str	r3, [r4, #0]
 8009802:	4833      	ldr	r0, [pc, #204]	@ (80098d0 <_printf_i+0x23c>)
 8009804:	2778      	movs	r7, #120	@ 0x78
 8009806:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800980a:	6823      	ldr	r3, [r4, #0]
 800980c:	6831      	ldr	r1, [r6, #0]
 800980e:	061f      	lsls	r7, r3, #24
 8009810:	f851 5b04 	ldr.w	r5, [r1], #4
 8009814:	d402      	bmi.n	800981c <_printf_i+0x188>
 8009816:	065f      	lsls	r7, r3, #25
 8009818:	bf48      	it	mi
 800981a:	b2ad      	uxthmi	r5, r5
 800981c:	6031      	str	r1, [r6, #0]
 800981e:	07d9      	lsls	r1, r3, #31
 8009820:	bf44      	itt	mi
 8009822:	f043 0320 	orrmi.w	r3, r3, #32
 8009826:	6023      	strmi	r3, [r4, #0]
 8009828:	b11d      	cbz	r5, 8009832 <_printf_i+0x19e>
 800982a:	2310      	movs	r3, #16
 800982c:	e7ac      	b.n	8009788 <_printf_i+0xf4>
 800982e:	4827      	ldr	r0, [pc, #156]	@ (80098cc <_printf_i+0x238>)
 8009830:	e7e9      	b.n	8009806 <_printf_i+0x172>
 8009832:	6823      	ldr	r3, [r4, #0]
 8009834:	f023 0320 	bic.w	r3, r3, #32
 8009838:	6023      	str	r3, [r4, #0]
 800983a:	e7f6      	b.n	800982a <_printf_i+0x196>
 800983c:	4616      	mov	r6, r2
 800983e:	e7bd      	b.n	80097bc <_printf_i+0x128>
 8009840:	6833      	ldr	r3, [r6, #0]
 8009842:	6825      	ldr	r5, [r4, #0]
 8009844:	6961      	ldr	r1, [r4, #20]
 8009846:	1d18      	adds	r0, r3, #4
 8009848:	6030      	str	r0, [r6, #0]
 800984a:	062e      	lsls	r6, r5, #24
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	d501      	bpl.n	8009854 <_printf_i+0x1c0>
 8009850:	6019      	str	r1, [r3, #0]
 8009852:	e002      	b.n	800985a <_printf_i+0x1c6>
 8009854:	0668      	lsls	r0, r5, #25
 8009856:	d5fb      	bpl.n	8009850 <_printf_i+0x1bc>
 8009858:	8019      	strh	r1, [r3, #0]
 800985a:	2300      	movs	r3, #0
 800985c:	6123      	str	r3, [r4, #16]
 800985e:	4616      	mov	r6, r2
 8009860:	e7bc      	b.n	80097dc <_printf_i+0x148>
 8009862:	6833      	ldr	r3, [r6, #0]
 8009864:	1d1a      	adds	r2, r3, #4
 8009866:	6032      	str	r2, [r6, #0]
 8009868:	681e      	ldr	r6, [r3, #0]
 800986a:	6862      	ldr	r2, [r4, #4]
 800986c:	2100      	movs	r1, #0
 800986e:	4630      	mov	r0, r6
 8009870:	f7f6 fcd6 	bl	8000220 <memchr>
 8009874:	b108      	cbz	r0, 800987a <_printf_i+0x1e6>
 8009876:	1b80      	subs	r0, r0, r6
 8009878:	6060      	str	r0, [r4, #4]
 800987a:	6863      	ldr	r3, [r4, #4]
 800987c:	6123      	str	r3, [r4, #16]
 800987e:	2300      	movs	r3, #0
 8009880:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009884:	e7aa      	b.n	80097dc <_printf_i+0x148>
 8009886:	6923      	ldr	r3, [r4, #16]
 8009888:	4632      	mov	r2, r6
 800988a:	4649      	mov	r1, r9
 800988c:	4640      	mov	r0, r8
 800988e:	47d0      	blx	sl
 8009890:	3001      	adds	r0, #1
 8009892:	d0ad      	beq.n	80097f0 <_printf_i+0x15c>
 8009894:	6823      	ldr	r3, [r4, #0]
 8009896:	079b      	lsls	r3, r3, #30
 8009898:	d413      	bmi.n	80098c2 <_printf_i+0x22e>
 800989a:	68e0      	ldr	r0, [r4, #12]
 800989c:	9b03      	ldr	r3, [sp, #12]
 800989e:	4298      	cmp	r0, r3
 80098a0:	bfb8      	it	lt
 80098a2:	4618      	movlt	r0, r3
 80098a4:	e7a6      	b.n	80097f4 <_printf_i+0x160>
 80098a6:	2301      	movs	r3, #1
 80098a8:	4632      	mov	r2, r6
 80098aa:	4649      	mov	r1, r9
 80098ac:	4640      	mov	r0, r8
 80098ae:	47d0      	blx	sl
 80098b0:	3001      	adds	r0, #1
 80098b2:	d09d      	beq.n	80097f0 <_printf_i+0x15c>
 80098b4:	3501      	adds	r5, #1
 80098b6:	68e3      	ldr	r3, [r4, #12]
 80098b8:	9903      	ldr	r1, [sp, #12]
 80098ba:	1a5b      	subs	r3, r3, r1
 80098bc:	42ab      	cmp	r3, r5
 80098be:	dcf2      	bgt.n	80098a6 <_printf_i+0x212>
 80098c0:	e7eb      	b.n	800989a <_printf_i+0x206>
 80098c2:	2500      	movs	r5, #0
 80098c4:	f104 0619 	add.w	r6, r4, #25
 80098c8:	e7f5      	b.n	80098b6 <_printf_i+0x222>
 80098ca:	bf00      	nop
 80098cc:	0800a0e1 	.word	0x0800a0e1
 80098d0:	0800a0f2 	.word	0x0800a0f2

080098d4 <__sflush_r>:
 80098d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80098d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098dc:	0716      	lsls	r6, r2, #28
 80098de:	4605      	mov	r5, r0
 80098e0:	460c      	mov	r4, r1
 80098e2:	d454      	bmi.n	800998e <__sflush_r+0xba>
 80098e4:	684b      	ldr	r3, [r1, #4]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	dc02      	bgt.n	80098f0 <__sflush_r+0x1c>
 80098ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	dd48      	ble.n	8009982 <__sflush_r+0xae>
 80098f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80098f2:	2e00      	cmp	r6, #0
 80098f4:	d045      	beq.n	8009982 <__sflush_r+0xae>
 80098f6:	2300      	movs	r3, #0
 80098f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80098fc:	682f      	ldr	r7, [r5, #0]
 80098fe:	6a21      	ldr	r1, [r4, #32]
 8009900:	602b      	str	r3, [r5, #0]
 8009902:	d030      	beq.n	8009966 <__sflush_r+0x92>
 8009904:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009906:	89a3      	ldrh	r3, [r4, #12]
 8009908:	0759      	lsls	r1, r3, #29
 800990a:	d505      	bpl.n	8009918 <__sflush_r+0x44>
 800990c:	6863      	ldr	r3, [r4, #4]
 800990e:	1ad2      	subs	r2, r2, r3
 8009910:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009912:	b10b      	cbz	r3, 8009918 <__sflush_r+0x44>
 8009914:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009916:	1ad2      	subs	r2, r2, r3
 8009918:	2300      	movs	r3, #0
 800991a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800991c:	6a21      	ldr	r1, [r4, #32]
 800991e:	4628      	mov	r0, r5
 8009920:	47b0      	blx	r6
 8009922:	1c43      	adds	r3, r0, #1
 8009924:	89a3      	ldrh	r3, [r4, #12]
 8009926:	d106      	bne.n	8009936 <__sflush_r+0x62>
 8009928:	6829      	ldr	r1, [r5, #0]
 800992a:	291d      	cmp	r1, #29
 800992c:	d82b      	bhi.n	8009986 <__sflush_r+0xb2>
 800992e:	4a2a      	ldr	r2, [pc, #168]	@ (80099d8 <__sflush_r+0x104>)
 8009930:	410a      	asrs	r2, r1
 8009932:	07d6      	lsls	r6, r2, #31
 8009934:	d427      	bmi.n	8009986 <__sflush_r+0xb2>
 8009936:	2200      	movs	r2, #0
 8009938:	6062      	str	r2, [r4, #4]
 800993a:	04d9      	lsls	r1, r3, #19
 800993c:	6922      	ldr	r2, [r4, #16]
 800993e:	6022      	str	r2, [r4, #0]
 8009940:	d504      	bpl.n	800994c <__sflush_r+0x78>
 8009942:	1c42      	adds	r2, r0, #1
 8009944:	d101      	bne.n	800994a <__sflush_r+0x76>
 8009946:	682b      	ldr	r3, [r5, #0]
 8009948:	b903      	cbnz	r3, 800994c <__sflush_r+0x78>
 800994a:	6560      	str	r0, [r4, #84]	@ 0x54
 800994c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800994e:	602f      	str	r7, [r5, #0]
 8009950:	b1b9      	cbz	r1, 8009982 <__sflush_r+0xae>
 8009952:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009956:	4299      	cmp	r1, r3
 8009958:	d002      	beq.n	8009960 <__sflush_r+0x8c>
 800995a:	4628      	mov	r0, r5
 800995c:	f7ff fbf2 	bl	8009144 <_free_r>
 8009960:	2300      	movs	r3, #0
 8009962:	6363      	str	r3, [r4, #52]	@ 0x34
 8009964:	e00d      	b.n	8009982 <__sflush_r+0xae>
 8009966:	2301      	movs	r3, #1
 8009968:	4628      	mov	r0, r5
 800996a:	47b0      	blx	r6
 800996c:	4602      	mov	r2, r0
 800996e:	1c50      	adds	r0, r2, #1
 8009970:	d1c9      	bne.n	8009906 <__sflush_r+0x32>
 8009972:	682b      	ldr	r3, [r5, #0]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d0c6      	beq.n	8009906 <__sflush_r+0x32>
 8009978:	2b1d      	cmp	r3, #29
 800997a:	d001      	beq.n	8009980 <__sflush_r+0xac>
 800997c:	2b16      	cmp	r3, #22
 800997e:	d11e      	bne.n	80099be <__sflush_r+0xea>
 8009980:	602f      	str	r7, [r5, #0]
 8009982:	2000      	movs	r0, #0
 8009984:	e022      	b.n	80099cc <__sflush_r+0xf8>
 8009986:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800998a:	b21b      	sxth	r3, r3
 800998c:	e01b      	b.n	80099c6 <__sflush_r+0xf2>
 800998e:	690f      	ldr	r7, [r1, #16]
 8009990:	2f00      	cmp	r7, #0
 8009992:	d0f6      	beq.n	8009982 <__sflush_r+0xae>
 8009994:	0793      	lsls	r3, r2, #30
 8009996:	680e      	ldr	r6, [r1, #0]
 8009998:	bf08      	it	eq
 800999a:	694b      	ldreq	r3, [r1, #20]
 800999c:	600f      	str	r7, [r1, #0]
 800999e:	bf18      	it	ne
 80099a0:	2300      	movne	r3, #0
 80099a2:	eba6 0807 	sub.w	r8, r6, r7
 80099a6:	608b      	str	r3, [r1, #8]
 80099a8:	f1b8 0f00 	cmp.w	r8, #0
 80099ac:	dde9      	ble.n	8009982 <__sflush_r+0xae>
 80099ae:	6a21      	ldr	r1, [r4, #32]
 80099b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80099b2:	4643      	mov	r3, r8
 80099b4:	463a      	mov	r2, r7
 80099b6:	4628      	mov	r0, r5
 80099b8:	47b0      	blx	r6
 80099ba:	2800      	cmp	r0, #0
 80099bc:	dc08      	bgt.n	80099d0 <__sflush_r+0xfc>
 80099be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099c6:	81a3      	strh	r3, [r4, #12]
 80099c8:	f04f 30ff 	mov.w	r0, #4294967295
 80099cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099d0:	4407      	add	r7, r0
 80099d2:	eba8 0800 	sub.w	r8, r8, r0
 80099d6:	e7e7      	b.n	80099a8 <__sflush_r+0xd4>
 80099d8:	dfbffffe 	.word	0xdfbffffe

080099dc <_fflush_r>:
 80099dc:	b538      	push	{r3, r4, r5, lr}
 80099de:	690b      	ldr	r3, [r1, #16]
 80099e0:	4605      	mov	r5, r0
 80099e2:	460c      	mov	r4, r1
 80099e4:	b913      	cbnz	r3, 80099ec <_fflush_r+0x10>
 80099e6:	2500      	movs	r5, #0
 80099e8:	4628      	mov	r0, r5
 80099ea:	bd38      	pop	{r3, r4, r5, pc}
 80099ec:	b118      	cbz	r0, 80099f6 <_fflush_r+0x1a>
 80099ee:	6a03      	ldr	r3, [r0, #32]
 80099f0:	b90b      	cbnz	r3, 80099f6 <_fflush_r+0x1a>
 80099f2:	f7ff f9a5 	bl	8008d40 <__sinit>
 80099f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d0f3      	beq.n	80099e6 <_fflush_r+0xa>
 80099fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009a00:	07d0      	lsls	r0, r2, #31
 8009a02:	d404      	bmi.n	8009a0e <_fflush_r+0x32>
 8009a04:	0599      	lsls	r1, r3, #22
 8009a06:	d402      	bmi.n	8009a0e <_fflush_r+0x32>
 8009a08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a0a:	f7ff fb98 	bl	800913e <__retarget_lock_acquire_recursive>
 8009a0e:	4628      	mov	r0, r5
 8009a10:	4621      	mov	r1, r4
 8009a12:	f7ff ff5f 	bl	80098d4 <__sflush_r>
 8009a16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a18:	07da      	lsls	r2, r3, #31
 8009a1a:	4605      	mov	r5, r0
 8009a1c:	d4e4      	bmi.n	80099e8 <_fflush_r+0xc>
 8009a1e:	89a3      	ldrh	r3, [r4, #12]
 8009a20:	059b      	lsls	r3, r3, #22
 8009a22:	d4e1      	bmi.n	80099e8 <_fflush_r+0xc>
 8009a24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a26:	f7ff fb8b 	bl	8009140 <__retarget_lock_release_recursive>
 8009a2a:	e7dd      	b.n	80099e8 <_fflush_r+0xc>

08009a2c <__swhatbuf_r>:
 8009a2c:	b570      	push	{r4, r5, r6, lr}
 8009a2e:	460c      	mov	r4, r1
 8009a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a34:	2900      	cmp	r1, #0
 8009a36:	b096      	sub	sp, #88	@ 0x58
 8009a38:	4615      	mov	r5, r2
 8009a3a:	461e      	mov	r6, r3
 8009a3c:	da0d      	bge.n	8009a5a <__swhatbuf_r+0x2e>
 8009a3e:	89a3      	ldrh	r3, [r4, #12]
 8009a40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009a44:	f04f 0100 	mov.w	r1, #0
 8009a48:	bf14      	ite	ne
 8009a4a:	2340      	movne	r3, #64	@ 0x40
 8009a4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009a50:	2000      	movs	r0, #0
 8009a52:	6031      	str	r1, [r6, #0]
 8009a54:	602b      	str	r3, [r5, #0]
 8009a56:	b016      	add	sp, #88	@ 0x58
 8009a58:	bd70      	pop	{r4, r5, r6, pc}
 8009a5a:	466a      	mov	r2, sp
 8009a5c:	f000 f87c 	bl	8009b58 <_fstat_r>
 8009a60:	2800      	cmp	r0, #0
 8009a62:	dbec      	blt.n	8009a3e <__swhatbuf_r+0x12>
 8009a64:	9901      	ldr	r1, [sp, #4]
 8009a66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009a6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009a6e:	4259      	negs	r1, r3
 8009a70:	4159      	adcs	r1, r3
 8009a72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a76:	e7eb      	b.n	8009a50 <__swhatbuf_r+0x24>

08009a78 <__smakebuf_r>:
 8009a78:	898b      	ldrh	r3, [r1, #12]
 8009a7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a7c:	079d      	lsls	r5, r3, #30
 8009a7e:	4606      	mov	r6, r0
 8009a80:	460c      	mov	r4, r1
 8009a82:	d507      	bpl.n	8009a94 <__smakebuf_r+0x1c>
 8009a84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009a88:	6023      	str	r3, [r4, #0]
 8009a8a:	6123      	str	r3, [r4, #16]
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	6163      	str	r3, [r4, #20]
 8009a90:	b003      	add	sp, #12
 8009a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a94:	ab01      	add	r3, sp, #4
 8009a96:	466a      	mov	r2, sp
 8009a98:	f7ff ffc8 	bl	8009a2c <__swhatbuf_r>
 8009a9c:	9f00      	ldr	r7, [sp, #0]
 8009a9e:	4605      	mov	r5, r0
 8009aa0:	4639      	mov	r1, r7
 8009aa2:	4630      	mov	r0, r6
 8009aa4:	f7ff fbba 	bl	800921c <_malloc_r>
 8009aa8:	b948      	cbnz	r0, 8009abe <__smakebuf_r+0x46>
 8009aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009aae:	059a      	lsls	r2, r3, #22
 8009ab0:	d4ee      	bmi.n	8009a90 <__smakebuf_r+0x18>
 8009ab2:	f023 0303 	bic.w	r3, r3, #3
 8009ab6:	f043 0302 	orr.w	r3, r3, #2
 8009aba:	81a3      	strh	r3, [r4, #12]
 8009abc:	e7e2      	b.n	8009a84 <__smakebuf_r+0xc>
 8009abe:	89a3      	ldrh	r3, [r4, #12]
 8009ac0:	6020      	str	r0, [r4, #0]
 8009ac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ac6:	81a3      	strh	r3, [r4, #12]
 8009ac8:	9b01      	ldr	r3, [sp, #4]
 8009aca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009ace:	b15b      	cbz	r3, 8009ae8 <__smakebuf_r+0x70>
 8009ad0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ad4:	4630      	mov	r0, r6
 8009ad6:	f000 f851 	bl	8009b7c <_isatty_r>
 8009ada:	b128      	cbz	r0, 8009ae8 <__smakebuf_r+0x70>
 8009adc:	89a3      	ldrh	r3, [r4, #12]
 8009ade:	f023 0303 	bic.w	r3, r3, #3
 8009ae2:	f043 0301 	orr.w	r3, r3, #1
 8009ae6:	81a3      	strh	r3, [r4, #12]
 8009ae8:	89a3      	ldrh	r3, [r4, #12]
 8009aea:	431d      	orrs	r5, r3
 8009aec:	81a5      	strh	r5, [r4, #12]
 8009aee:	e7cf      	b.n	8009a90 <__smakebuf_r+0x18>

08009af0 <_putc_r>:
 8009af0:	b570      	push	{r4, r5, r6, lr}
 8009af2:	460d      	mov	r5, r1
 8009af4:	4614      	mov	r4, r2
 8009af6:	4606      	mov	r6, r0
 8009af8:	b118      	cbz	r0, 8009b02 <_putc_r+0x12>
 8009afa:	6a03      	ldr	r3, [r0, #32]
 8009afc:	b90b      	cbnz	r3, 8009b02 <_putc_r+0x12>
 8009afe:	f7ff f91f 	bl	8008d40 <__sinit>
 8009b02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009b04:	07d8      	lsls	r0, r3, #31
 8009b06:	d405      	bmi.n	8009b14 <_putc_r+0x24>
 8009b08:	89a3      	ldrh	r3, [r4, #12]
 8009b0a:	0599      	lsls	r1, r3, #22
 8009b0c:	d402      	bmi.n	8009b14 <_putc_r+0x24>
 8009b0e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b10:	f7ff fb15 	bl	800913e <__retarget_lock_acquire_recursive>
 8009b14:	68a3      	ldr	r3, [r4, #8]
 8009b16:	3b01      	subs	r3, #1
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	60a3      	str	r3, [r4, #8]
 8009b1c:	da05      	bge.n	8009b2a <_putc_r+0x3a>
 8009b1e:	69a2      	ldr	r2, [r4, #24]
 8009b20:	4293      	cmp	r3, r2
 8009b22:	db12      	blt.n	8009b4a <_putc_r+0x5a>
 8009b24:	b2eb      	uxtb	r3, r5
 8009b26:	2b0a      	cmp	r3, #10
 8009b28:	d00f      	beq.n	8009b4a <_putc_r+0x5a>
 8009b2a:	6823      	ldr	r3, [r4, #0]
 8009b2c:	1c5a      	adds	r2, r3, #1
 8009b2e:	6022      	str	r2, [r4, #0]
 8009b30:	701d      	strb	r5, [r3, #0]
 8009b32:	b2ed      	uxtb	r5, r5
 8009b34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009b36:	07da      	lsls	r2, r3, #31
 8009b38:	d405      	bmi.n	8009b46 <_putc_r+0x56>
 8009b3a:	89a3      	ldrh	r3, [r4, #12]
 8009b3c:	059b      	lsls	r3, r3, #22
 8009b3e:	d402      	bmi.n	8009b46 <_putc_r+0x56>
 8009b40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b42:	f7ff fafd 	bl	8009140 <__retarget_lock_release_recursive>
 8009b46:	4628      	mov	r0, r5
 8009b48:	bd70      	pop	{r4, r5, r6, pc}
 8009b4a:	4629      	mov	r1, r5
 8009b4c:	4622      	mov	r2, r4
 8009b4e:	4630      	mov	r0, r6
 8009b50:	f7ff f9e7 	bl	8008f22 <__swbuf_r>
 8009b54:	4605      	mov	r5, r0
 8009b56:	e7ed      	b.n	8009b34 <_putc_r+0x44>

08009b58 <_fstat_r>:
 8009b58:	b538      	push	{r3, r4, r5, lr}
 8009b5a:	4d07      	ldr	r5, [pc, #28]	@ (8009b78 <_fstat_r+0x20>)
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	4604      	mov	r4, r0
 8009b60:	4608      	mov	r0, r1
 8009b62:	4611      	mov	r1, r2
 8009b64:	602b      	str	r3, [r5, #0]
 8009b66:	f7f7 fe98 	bl	800189a <_fstat>
 8009b6a:	1c43      	adds	r3, r0, #1
 8009b6c:	d102      	bne.n	8009b74 <_fstat_r+0x1c>
 8009b6e:	682b      	ldr	r3, [r5, #0]
 8009b70:	b103      	cbz	r3, 8009b74 <_fstat_r+0x1c>
 8009b72:	6023      	str	r3, [r4, #0]
 8009b74:	bd38      	pop	{r3, r4, r5, pc}
 8009b76:	bf00      	nop
 8009b78:	20007b10 	.word	0x20007b10

08009b7c <_isatty_r>:
 8009b7c:	b538      	push	{r3, r4, r5, lr}
 8009b7e:	4d06      	ldr	r5, [pc, #24]	@ (8009b98 <_isatty_r+0x1c>)
 8009b80:	2300      	movs	r3, #0
 8009b82:	4604      	mov	r4, r0
 8009b84:	4608      	mov	r0, r1
 8009b86:	602b      	str	r3, [r5, #0]
 8009b88:	f7f7 fe97 	bl	80018ba <_isatty>
 8009b8c:	1c43      	adds	r3, r0, #1
 8009b8e:	d102      	bne.n	8009b96 <_isatty_r+0x1a>
 8009b90:	682b      	ldr	r3, [r5, #0]
 8009b92:	b103      	cbz	r3, 8009b96 <_isatty_r+0x1a>
 8009b94:	6023      	str	r3, [r4, #0]
 8009b96:	bd38      	pop	{r3, r4, r5, pc}
 8009b98:	20007b10 	.word	0x20007b10

08009b9c <_sbrk_r>:
 8009b9c:	b538      	push	{r3, r4, r5, lr}
 8009b9e:	4d06      	ldr	r5, [pc, #24]	@ (8009bb8 <_sbrk_r+0x1c>)
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	4604      	mov	r4, r0
 8009ba4:	4608      	mov	r0, r1
 8009ba6:	602b      	str	r3, [r5, #0]
 8009ba8:	f7f7 fea0 	bl	80018ec <_sbrk>
 8009bac:	1c43      	adds	r3, r0, #1
 8009bae:	d102      	bne.n	8009bb6 <_sbrk_r+0x1a>
 8009bb0:	682b      	ldr	r3, [r5, #0]
 8009bb2:	b103      	cbz	r3, 8009bb6 <_sbrk_r+0x1a>
 8009bb4:	6023      	str	r3, [r4, #0]
 8009bb6:	bd38      	pop	{r3, r4, r5, pc}
 8009bb8:	20007b10 	.word	0x20007b10

08009bbc <_init>:
 8009bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bbe:	bf00      	nop
 8009bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bc2:	bc08      	pop	{r3}
 8009bc4:	469e      	mov	lr, r3
 8009bc6:	4770      	bx	lr

08009bc8 <_fini>:
 8009bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bca:	bf00      	nop
 8009bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bce:	bc08      	pop	{r3}
 8009bd0:	469e      	mov	lr, r3
 8009bd2:	4770      	bx	lr
