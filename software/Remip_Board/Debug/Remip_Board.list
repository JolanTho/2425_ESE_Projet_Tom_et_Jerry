
Remip_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ca4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003e7c  08003e7c  00004e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f04  08003f04  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003f04  08003f04  00004f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f0c  08003f0c  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f0c  08003f0c  00004f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f10  08003f10  00004f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003f14  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  20000068  08003f7c  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08003f7c  00005300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c65d  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eaf  00000000  00000000  000116f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  000135a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007f2  00000000  00000000  00014020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001de8f  00000000  00000000  00014812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d8da  00000000  00000000  000326a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b84f7  00000000  00000000  0003ff7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f8472  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f78  00000000  00000000  000f84b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000fb430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000068 	.word	0x20000068
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003e64 	.word	0x08003e64

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000006c 	.word	0x2000006c
 8000214:	08003e64 	.word	0x08003e64

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050e:	4b1b      	ldr	r3, [pc, #108]	@ (800057c <MX_GPIO_Init+0x74>)
 8000510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000512:	4a1a      	ldr	r2, [pc, #104]	@ (800057c <MX_GPIO_Init+0x74>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800051a:	4b18      	ldr	r3, [pc, #96]	@ (800057c <MX_GPIO_Init+0x74>)
 800051c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000526:	4b15      	ldr	r3, [pc, #84]	@ (800057c <MX_GPIO_Init+0x74>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052a:	4a14      	ldr	r2, [pc, #80]	@ (800057c <MX_GPIO_Init+0x74>)
 800052c:	f043 0320 	orr.w	r3, r3, #32
 8000530:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000532:	4b12      	ldr	r3, [pc, #72]	@ (800057c <MX_GPIO_Init+0x74>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000536:	f003 0320 	and.w	r3, r3, #32
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053e:	4b0f      	ldr	r3, [pc, #60]	@ (800057c <MX_GPIO_Init+0x74>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000542:	4a0e      	ldr	r2, [pc, #56]	@ (800057c <MX_GPIO_Init+0x74>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800054a:	4b0c      	ldr	r3, [pc, #48]	@ (800057c <MX_GPIO_Init+0x74>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000556:	4b09      	ldr	r3, [pc, #36]	@ (800057c <MX_GPIO_Init+0x74>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055a:	4a08      	ldr	r2, [pc, #32]	@ (800057c <MX_GPIO_Init+0x74>)
 800055c:	f043 0302 	orr.w	r3, r3, #2
 8000560:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000562:	4b06      	ldr	r3, [pc, #24]	@ (800057c <MX_GPIO_Init+0x74>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	603b      	str	r3, [r7, #0]
 800056c:	683b      	ldr	r3, [r7, #0]

}
 800056e:	bf00      	nop
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	40021000 	.word	0x40021000

08000580 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000588:	1d39      	adds	r1, r7, #4
 800058a:	f04f 33ff 	mov.w	r3, #4294967295
 800058e:	2201      	movs	r2, #1
 8000590:	4803      	ldr	r0, [pc, #12]	@ (80005a0 <__io_putchar+0x20>)
 8000592:	f001 fe41 	bl	8002218 <HAL_UART_Transmit>
	return ch;
 8000596:	687b      	ldr	r3, [r7, #4]
}
 8000598:	4618      	mov	r0, r3
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	2000011c 	.word	0x2000011c

080005a4 <uart_it_transmit>:

int uart_it_transmit(uint8_t *p_data, uint16_t size){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	460b      	mov	r3, r1
 80005ae:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_IT(&huart4, p_data, size);
 80005b0:	887b      	ldrh	r3, [r7, #2]
 80005b2:	461a      	mov	r2, r3
 80005b4:	6879      	ldr	r1, [r7, #4]
 80005b6:	4804      	ldr	r0, [pc, #16]	@ (80005c8 <uart_it_transmit+0x24>)
 80005b8:	f001 ff84 	bl	80024c4 <HAL_UART_Transmit_IT>
	return 0;
 80005bc:	2300      	movs	r3, #0
}
 80005be:	4618      	mov	r0, r3
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000088 	.word	0x20000088

080005cc <uart_receive>:

int uart_receive(uint8_t *p_data, uint16_t size){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	460b      	mov	r3, r1
 80005d6:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive(&huart4, p_data, size, 100);
 80005d8:	887a      	ldrh	r2, [r7, #2]
 80005da:	2364      	movs	r3, #100	@ 0x64
 80005dc:	6879      	ldr	r1, [r7, #4]
 80005de:	4804      	ldr	r0, [pc, #16]	@ (80005f0 <uart_receive+0x24>)
 80005e0:	f001 fea8 	bl	8002334 <HAL_UART_Receive>
	return 0;
 80005e4:	2300      	movs	r3, #0
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000088 	.word	0x20000088

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	@ 0x50
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 faf2 	bl	8000be2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f83d 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f7ff ff81 	bl	8000508 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000606:	f000 f9df 	bl	80009c8 <MX_USART2_UART_Init>
  MX_UART4_Init();
 800060a:	f000 f991 	bl	8000930 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  printf("=================== DRIVER LIDAR =================== \r\n");
 800060e:	4818      	ldr	r0, [pc, #96]	@ (8000670 <main+0x7c>)
 8000610:	f003 f894 	bl	800373c <puts>

  uint8_t stop_command[2] = {0xA5, 0x65};
 8000614:	f246 53a5 	movw	r3, #26021	@ 0x65a5
 8000618:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
  uart_it_transmit(stop_command, 2);
 800061c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000620:	2102      	movs	r1, #2
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff ffbe 	bl	80005a4 <uart_it_transmit>

  printf(" 3 \r\n");
 8000628:	4812      	ldr	r0, [pc, #72]	@ (8000674 <main+0x80>)
 800062a:	f003 f887 	bl	800373c <puts>

  // Attendre 2 secondes
  HAL_Delay(2000);
 800062e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000632:	f000 fb47 	bl	8000cc4 <HAL_Delay>

  printf(" 4 \r\n");
 8000636:	4810      	ldr	r0, [pc, #64]	@ (8000678 <main+0x84>)
 8000638:	f003 f880 	bl	800373c <puts>

  // Commande pour obtenir le statut de santé
  uint8_t health_status_command[2] = {0xA5, 0x90};
 800063c:	f249 03a5 	movw	r3, #37029	@ 0x90a5
 8000640:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
  uart_it_transmit(health_status_command, 2);
 8000644:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000648:	2102      	movs	r1, #2
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff ffaa 	bl	80005a4 <uart_it_transmit>
  uint8_t raw_data[64];
  memset(raw_data,0,64);
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2240      	movs	r2, #64	@ 0x40
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f003 f950 	bl	80038fc <memset>
  uart_receive(raw_data,64);
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2140      	movs	r1, #64	@ 0x40
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff ffb3 	bl	80005cc <uart_receive>
  int a=5;
 8000666:	2305      	movs	r3, #5
 8000668:	64fb      	str	r3, [r7, #76]	@ 0x4c
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800066a:	bf00      	nop
 800066c:	e7fd      	b.n	800066a <main+0x76>
 800066e:	bf00      	nop
 8000670:	08003e7c 	.word	0x08003e7c
 8000674:	08003eb4 	.word	0x08003eb4
 8000678:	08003ebc 	.word	0x08003ebc

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	@ 0x50
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0318 	add.w	r3, r7, #24
 8000686:	2238      	movs	r2, #56	@ 0x38
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f003 f936 	bl	80038fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800069e:	2000      	movs	r0, #0
 80006a0:	f000 fd98 	bl	80011d4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a4:	2302      	movs	r3, #2
 80006a6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ae:	2340      	movs	r3, #64	@ 0x40
 80006b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b2:	2302      	movs	r3, #2
 80006b4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b6:	2302      	movs	r3, #2
 80006b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80006ba:	2304      	movs	r3, #4
 80006bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80006be:	2355      	movs	r3, #85	@ 0x55
 80006c0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ce:	f107 0318 	add.w	r3, r7, #24
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 fe32 	bl	800133c <HAL_RCC_OscConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006de:	f000 f818 	bl	8000712 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e2:	230f      	movs	r3, #15
 80006e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e6:	2303      	movs	r3, #3
 80006e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	2104      	movs	r1, #4
 80006fa:	4618      	mov	r0, r3
 80006fc:	f001 f930 	bl	8001960 <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000706:	f000 f804 	bl	8000712 <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	3750      	adds	r7, #80	@ 0x50
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000716:	b672      	cpsid	i
}
 8000718:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800071a:	bf00      	nop
 800071c:	e7fd      	b.n	800071a <Error_Handler+0x8>
	...

08000720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000726:	4b0f      	ldr	r3, [pc, #60]	@ (8000764 <HAL_MspInit+0x44>)
 8000728:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800072a:	4a0e      	ldr	r2, [pc, #56]	@ (8000764 <HAL_MspInit+0x44>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6613      	str	r3, [r2, #96]	@ 0x60
 8000732:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <HAL_MspInit+0x44>)
 8000734:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073e:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <HAL_MspInit+0x44>)
 8000740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000742:	4a08      	ldr	r2, [pc, #32]	@ (8000764 <HAL_MspInit+0x44>)
 8000744:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000748:	6593      	str	r3, [r2, #88]	@ 0x58
 800074a:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <HAL_MspInit+0x44>)
 800074c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800074e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000756:	f000 fde1 	bl	800131c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40021000 	.word	0x40021000

08000768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <NMI_Handler+0x4>

08000770 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <HardFault_Handler+0x4>

08000778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <MemManage_Handler+0x4>

08000780 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <BusFault_Handler+0x4>

08000788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <UsageFault_Handler+0x4>

08000790 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr

0800079e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr

080007ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007be:	f000 fa63 	bl	8000c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b086      	sub	sp, #24
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	60f8      	str	r0, [r7, #12]
 80007ce:	60b9      	str	r1, [r7, #8]
 80007d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
 80007d6:	e00a      	b.n	80007ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007d8:	f3af 8000 	nop.w
 80007dc:	4601      	mov	r1, r0
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	1c5a      	adds	r2, r3, #1
 80007e2:	60ba      	str	r2, [r7, #8]
 80007e4:	b2ca      	uxtb	r2, r1
 80007e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	3301      	adds	r3, #1
 80007ec:	617b      	str	r3, [r7, #20]
 80007ee:	697a      	ldr	r2, [r7, #20]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	dbf0      	blt.n	80007d8 <_read+0x12>
  }

  return len;
 80007f6:	687b      	ldr	r3, [r7, #4]
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	e009      	b.n	8000826 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	1c5a      	adds	r2, r3, #1
 8000816:	60ba      	str	r2, [r7, #8]
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff feb0 	bl	8000580 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	3301      	adds	r3, #1
 8000824:	617b      	str	r3, [r7, #20]
 8000826:	697a      	ldr	r2, [r7, #20]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	429a      	cmp	r2, r3
 800082c:	dbf1      	blt.n	8000812 <_write+0x12>
  }
  return len;
 800082e:	687b      	ldr	r3, [r7, #4]
}
 8000830:	4618      	mov	r0, r3
 8000832:	3718      	adds	r7, #24
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <_close>:

int _close(int file)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000840:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000844:	4618      	mov	r0, r3
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000860:	605a      	str	r2, [r3, #4]
  return 0;
 8000862:	2300      	movs	r3, #0
}
 8000864:	4618      	mov	r0, r3
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <_isatty>:

int _isatty(int file)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000878:	2301      	movs	r3, #1
}
 800087a:	4618      	mov	r0, r3
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr

08000886 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000886:	b480      	push	{r7}
 8000888:	b085      	sub	sp, #20
 800088a:	af00      	add	r7, sp, #0
 800088c:	60f8      	str	r0, [r7, #12]
 800088e:	60b9      	str	r1, [r7, #8]
 8000890:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000892:	2300      	movs	r3, #0
}
 8000894:	4618      	mov	r0, r3
 8000896:	3714      	adds	r7, #20
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a8:	4a14      	ldr	r2, [pc, #80]	@ (80008fc <_sbrk+0x5c>)
 80008aa:	4b15      	ldr	r3, [pc, #84]	@ (8000900 <_sbrk+0x60>)
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008b4:	4b13      	ldr	r3, [pc, #76]	@ (8000904 <_sbrk+0x64>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d102      	bne.n	80008c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008bc:	4b11      	ldr	r3, [pc, #68]	@ (8000904 <_sbrk+0x64>)
 80008be:	4a12      	ldr	r2, [pc, #72]	@ (8000908 <_sbrk+0x68>)
 80008c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008c2:	4b10      	ldr	r3, [pc, #64]	@ (8000904 <_sbrk+0x64>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4413      	add	r3, r2
 80008ca:	693a      	ldr	r2, [r7, #16]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d207      	bcs.n	80008e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008d0:	f003 f862 	bl	8003998 <__errno>
 80008d4:	4603      	mov	r3, r0
 80008d6:	220c      	movs	r2, #12
 80008d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008da:	f04f 33ff 	mov.w	r3, #4294967295
 80008de:	e009      	b.n	80008f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008e0:	4b08      	ldr	r3, [pc, #32]	@ (8000904 <_sbrk+0x64>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008e6:	4b07      	ldr	r3, [pc, #28]	@ (8000904 <_sbrk+0x64>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4413      	add	r3, r2
 80008ee:	4a05      	ldr	r2, [pc, #20]	@ (8000904 <_sbrk+0x64>)
 80008f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008f2:	68fb      	ldr	r3, [r7, #12]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3718      	adds	r7, #24
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20008000 	.word	0x20008000
 8000900:	00000400 	.word	0x00000400
 8000904:	20000084 	.word	0x20000084
 8000908:	20000300 	.word	0x20000300

0800090c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000910:	4b06      	ldr	r3, [pc, #24]	@ (800092c <SystemInit+0x20>)
 8000912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000916:	4a05      	ldr	r2, [pc, #20]	@ (800092c <SystemInit+0x20>)
 8000918:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800091c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000934:	4b22      	ldr	r3, [pc, #136]	@ (80009c0 <MX_UART4_Init+0x90>)
 8000936:	4a23      	ldr	r2, [pc, #140]	@ (80009c4 <MX_UART4_Init+0x94>)
 8000938:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 128000;
 800093a:	4b21      	ldr	r3, [pc, #132]	@ (80009c0 <MX_UART4_Init+0x90>)
 800093c:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 8000940:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000942:	4b1f      	ldr	r3, [pc, #124]	@ (80009c0 <MX_UART4_Init+0x90>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000948:	4b1d      	ldr	r3, [pc, #116]	@ (80009c0 <MX_UART4_Init+0x90>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800094e:	4b1c      	ldr	r3, [pc, #112]	@ (80009c0 <MX_UART4_Init+0x90>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000954:	4b1a      	ldr	r3, [pc, #104]	@ (80009c0 <MX_UART4_Init+0x90>)
 8000956:	220c      	movs	r2, #12
 8000958:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095a:	4b19      	ldr	r3, [pc, #100]	@ (80009c0 <MX_UART4_Init+0x90>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000960:	4b17      	ldr	r3, [pc, #92]	@ (80009c0 <MX_UART4_Init+0x90>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000966:	4b16      	ldr	r3, [pc, #88]	@ (80009c0 <MX_UART4_Init+0x90>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800096c:	4b14      	ldr	r3, [pc, #80]	@ (80009c0 <MX_UART4_Init+0x90>)
 800096e:	2200      	movs	r2, #0
 8000970:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000972:	4b13      	ldr	r3, [pc, #76]	@ (80009c0 <MX_UART4_Init+0x90>)
 8000974:	2200      	movs	r2, #0
 8000976:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000978:	4811      	ldr	r0, [pc, #68]	@ (80009c0 <MX_UART4_Init+0x90>)
 800097a:	f001 fbfd 	bl	8002178 <HAL_UART_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000984:	f7ff fec5 	bl	8000712 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000988:	2100      	movs	r1, #0
 800098a:	480d      	ldr	r0, [pc, #52]	@ (80009c0 <MX_UART4_Init+0x90>)
 800098c:	f002 fcf4 	bl	8003378 <HAL_UARTEx_SetTxFifoThreshold>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000996:	f7ff febc 	bl	8000712 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800099a:	2100      	movs	r1, #0
 800099c:	4808      	ldr	r0, [pc, #32]	@ (80009c0 <MX_UART4_Init+0x90>)
 800099e:	f002 fd29 	bl	80033f4 <HAL_UARTEx_SetRxFifoThreshold>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80009a8:	f7ff feb3 	bl	8000712 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80009ac:	4804      	ldr	r0, [pc, #16]	@ (80009c0 <MX_UART4_Init+0x90>)
 80009ae:	f002 fcaa 	bl	8003306 <HAL_UARTEx_DisableFifoMode>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80009b8:	f7ff feab 	bl	8000712 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000088 	.word	0x20000088
 80009c4:	40004c00 	.word	0x40004c00

080009c8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009cc:	4b22      	ldr	r3, [pc, #136]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 80009ce:	4a23      	ldr	r2, [pc, #140]	@ (8000a5c <MX_USART2_UART_Init+0x94>)
 80009d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009d2:	4b21      	ldr	r3, [pc, #132]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 80009d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009da:	4b1f      	ldr	r3, [pc, #124]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 80009ee:	220c      	movs	r2, #12
 80009f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f2:	4b19      	ldr	r3, [pc, #100]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f8:	4b17      	ldr	r3, [pc, #92]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fe:	4b16      	ldr	r3, [pc, #88]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a04:	4b14      	ldr	r3, [pc, #80]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a0a:	4b13      	ldr	r3, [pc, #76]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a10:	4811      	ldr	r0, [pc, #68]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a12:	f001 fbb1 	bl	8002178 <HAL_UART_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a1c:	f7ff fe79 	bl	8000712 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a20:	2100      	movs	r1, #0
 8000a22:	480d      	ldr	r0, [pc, #52]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a24:	f002 fca8 	bl	8003378 <HAL_UARTEx_SetTxFifoThreshold>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a2e:	f7ff fe70 	bl	8000712 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a32:	2100      	movs	r1, #0
 8000a34:	4808      	ldr	r0, [pc, #32]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a36:	f002 fcdd 	bl	80033f4 <HAL_UARTEx_SetRxFifoThreshold>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a40:	f7ff fe67 	bl	8000712 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a44:	4804      	ldr	r0, [pc, #16]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a46:	f002 fc5e 	bl	8003306 <HAL_UARTEx_DisableFifoMode>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a50:	f7ff fe5f 	bl	8000712 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	2000011c 	.word	0x2000011c
 8000a5c:	40004400 	.word	0x40004400

08000a60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b09c      	sub	sp, #112	@ 0x70
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a78:	f107 0318 	add.w	r3, r7, #24
 8000a7c:	2244      	movs	r2, #68	@ 0x44
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f002 ff3b 	bl	80038fc <memset>
  if(uartHandle->Instance==UART4)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a3d      	ldr	r2, [pc, #244]	@ (8000b80 <HAL_UART_MspInit+0x120>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d137      	bne.n	8000b00 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000a90:	2308      	movs	r3, #8
 8000a92:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a98:	f107 0318 	add.w	r3, r7, #24
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f001 f97b 	bl	8001d98 <HAL_RCCEx_PeriphCLKConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000aa8:	f7ff fe33 	bl	8000712 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000aac:	4b35      	ldr	r3, [pc, #212]	@ (8000b84 <HAL_UART_MspInit+0x124>)
 8000aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ab0:	4a34      	ldr	r2, [pc, #208]	@ (8000b84 <HAL_UART_MspInit+0x124>)
 8000ab2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000ab6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ab8:	4b32      	ldr	r3, [pc, #200]	@ (8000b84 <HAL_UART_MspInit+0x124>)
 8000aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000abc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000ac0:	617b      	str	r3, [r7, #20]
 8000ac2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac4:	4b2f      	ldr	r3, [pc, #188]	@ (8000b84 <HAL_UART_MspInit+0x124>)
 8000ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac8:	4a2e      	ldr	r2, [pc, #184]	@ (8000b84 <HAL_UART_MspInit+0x124>)
 8000aca:	f043 0304 	orr.w	r3, r3, #4
 8000ace:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ad0:	4b2c      	ldr	r3, [pc, #176]	@ (8000b84 <HAL_UART_MspInit+0x124>)
 8000ad2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad4:	f003 0304 	and.w	r3, r3, #4
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000adc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ae0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8000aee:	2305      	movs	r3, #5
 8000af0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000af6:	4619      	mov	r1, r3
 8000af8:	4823      	ldr	r0, [pc, #140]	@ (8000b88 <HAL_UART_MspInit+0x128>)
 8000afa:	f000 f9e9 	bl	8000ed0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000afe:	e03b      	b.n	8000b78 <HAL_UART_MspInit+0x118>
  else if(uartHandle->Instance==USART2)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a21      	ldr	r2, [pc, #132]	@ (8000b8c <HAL_UART_MspInit+0x12c>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d136      	bne.n	8000b78 <HAL_UART_MspInit+0x118>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b12:	f107 0318 	add.w	r3, r7, #24
 8000b16:	4618      	mov	r0, r3
 8000b18:	f001 f93e 	bl	8001d98 <HAL_RCCEx_PeriphCLKConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8000b22:	f7ff fdf6 	bl	8000712 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b26:	4b17      	ldr	r3, [pc, #92]	@ (8000b84 <HAL_UART_MspInit+0x124>)
 8000b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b2a:	4a16      	ldr	r2, [pc, #88]	@ (8000b84 <HAL_UART_MspInit+0x124>)
 8000b2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b30:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b32:	4b14      	ldr	r3, [pc, #80]	@ (8000b84 <HAL_UART_MspInit+0x124>)
 8000b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <HAL_UART_MspInit+0x124>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b42:	4a10      	ldr	r2, [pc, #64]	@ (8000b84 <HAL_UART_MspInit+0x124>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b84 <HAL_UART_MspInit+0x124>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b56:	230c      	movs	r3, #12
 8000b58:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b66:	2307      	movs	r3, #7
 8000b68:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b74:	f000 f9ac 	bl	8000ed0 <HAL_GPIO_Init>
}
 8000b78:	bf00      	nop
 8000b7a:	3770      	adds	r7, #112	@ 0x70
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40004c00 	.word	0x40004c00
 8000b84:	40021000 	.word	0x40021000
 8000b88:	48000800 	.word	0x48000800
 8000b8c:	40004400 	.word	0x40004400

08000b90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b90:	480d      	ldr	r0, [pc, #52]	@ (8000bc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b92:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b94:	f7ff feba 	bl	800090c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b98:	480c      	ldr	r0, [pc, #48]	@ (8000bcc <LoopForever+0x6>)
  ldr r1, =_edata
 8000b9a:	490d      	ldr	r1, [pc, #52]	@ (8000bd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd4 <LoopForever+0xe>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ba0:	e002      	b.n	8000ba8 <LoopCopyDataInit>

08000ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba6:	3304      	adds	r3, #4

08000ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bac:	d3f9      	bcc.n	8000ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bae:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bb0:	4c0a      	ldr	r4, [pc, #40]	@ (8000bdc <LoopForever+0x16>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb4:	e001      	b.n	8000bba <LoopFillZerobss>

08000bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb8:	3204      	adds	r2, #4

08000bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bbc:	d3fb      	bcc.n	8000bb6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000bbe:	f002 fef1 	bl	80039a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bc2:	f7ff fd17 	bl	80005f4 <main>

08000bc6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bc6:	e7fe      	b.n	8000bc6 <LoopForever>
  ldr   r0, =_estack
 8000bc8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000bd4:	08003f14 	.word	0x08003f14
  ldr r2, =_sbss
 8000bd8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000bdc:	20000300 	.word	0x20000300

08000be0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000be0:	e7fe      	b.n	8000be0 <ADC1_2_IRQHandler>

08000be2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b082      	sub	sp, #8
 8000be6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000be8:	2300      	movs	r3, #0
 8000bea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bec:	2003      	movs	r0, #3
 8000bee:	f000 f93d 	bl	8000e6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f000 f80e 	bl	8000c14 <HAL_InitTick>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d002      	beq.n	8000c04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	71fb      	strb	r3, [r7, #7]
 8000c02:	e001      	b.n	8000c08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c04:	f7ff fd8c 	bl	8000720 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c08:	79fb      	ldrb	r3, [r7, #7]

}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c20:	4b16      	ldr	r3, [pc, #88]	@ (8000c7c <HAL_InitTick+0x68>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d022      	beq.n	8000c6e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c28:	4b15      	ldr	r3, [pc, #84]	@ (8000c80 <HAL_InitTick+0x6c>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <HAL_InitTick+0x68>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000c34:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f000 f93a 	bl	8000eb6 <HAL_SYSTICK_Config>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d10f      	bne.n	8000c68 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b0f      	cmp	r3, #15
 8000c4c:	d809      	bhi.n	8000c62 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	6879      	ldr	r1, [r7, #4]
 8000c52:	f04f 30ff 	mov.w	r0, #4294967295
 8000c56:	f000 f914 	bl	8000e82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c84 <HAL_InitTick+0x70>)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6013      	str	r3, [r2, #0]
 8000c60:	e007      	b.n	8000c72 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	73fb      	strb	r3, [r7, #15]
 8000c66:	e004      	b.n	8000c72 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	73fb      	strb	r3, [r7, #15]
 8000c6c:	e001      	b.n	8000c72 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	20000000 	.word	0x20000000
 8000c84:	20000004 	.word	0x20000004

08000c88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ca4 <HAL_IncTick+0x1c>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	4b05      	ldr	r3, [pc, #20]	@ (8000ca8 <HAL_IncTick+0x20>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4413      	add	r3, r2
 8000c96:	4a03      	ldr	r2, [pc, #12]	@ (8000ca4 <HAL_IncTick+0x1c>)
 8000c98:	6013      	str	r3, [r2, #0]
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	200001b0 	.word	0x200001b0
 8000ca8:	20000008 	.word	0x20000008

08000cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb0:	4b03      	ldr	r3, [pc, #12]	@ (8000cc0 <HAL_GetTick+0x14>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	200001b0 	.word	0x200001b0

08000cc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ccc:	f7ff ffee 	bl	8000cac <HAL_GetTick>
 8000cd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cdc:	d004      	beq.n	8000ce8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cde:	4b09      	ldr	r3, [pc, #36]	@ (8000d04 <HAL_Delay+0x40>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ce8:	bf00      	nop
 8000cea:	f7ff ffdf 	bl	8000cac <HAL_GetTick>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	1ad3      	subs	r3, r2, r3
 8000cf4:	68fa      	ldr	r2, [r7, #12]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d8f7      	bhi.n	8000cea <HAL_Delay+0x26>
  {
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	bf00      	nop
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000008 	.word	0x20000008

08000d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d18:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d24:	4013      	ands	r3, r2
 8000d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3a:	4a04      	ldr	r2, [pc, #16]	@ (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	60d3      	str	r3, [r2, #12]
}
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d54:	4b04      	ldr	r3, [pc, #16]	@ (8000d68 <__NVIC_GetPriorityGrouping+0x18>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	0a1b      	lsrs	r3, r3, #8
 8000d5a:	f003 0307 	and.w	r3, r3, #7
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	db0a      	blt.n	8000d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	490c      	ldr	r1, [pc, #48]	@ (8000db8 <__NVIC_SetPriority+0x4c>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	0112      	lsls	r2, r2, #4
 8000d8c:	b2d2      	uxtb	r2, r2
 8000d8e:	440b      	add	r3, r1
 8000d90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d94:	e00a      	b.n	8000dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4908      	ldr	r1, [pc, #32]	@ (8000dbc <__NVIC_SetPriority+0x50>)
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	f003 030f 	and.w	r3, r3, #15
 8000da2:	3b04      	subs	r3, #4
 8000da4:	0112      	lsls	r2, r2, #4
 8000da6:	b2d2      	uxtb	r2, r2
 8000da8:	440b      	add	r3, r1
 8000daa:	761a      	strb	r2, [r3, #24]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000e100 	.word	0xe000e100
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	@ 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	f1c3 0307 	rsb	r3, r3, #7
 8000dda:	2b04      	cmp	r3, #4
 8000ddc:	bf28      	it	cs
 8000dde:	2304      	movcs	r3, #4
 8000de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3304      	adds	r3, #4
 8000de6:	2b06      	cmp	r3, #6
 8000de8:	d902      	bls.n	8000df0 <NVIC_EncodePriority+0x30>
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3b03      	subs	r3, #3
 8000dee:	e000      	b.n	8000df2 <NVIC_EncodePriority+0x32>
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	f04f 32ff 	mov.w	r2, #4294967295
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43da      	mvns	r2, r3
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	401a      	ands	r2, r3
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e08:	f04f 31ff 	mov.w	r1, #4294967295
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e12:	43d9      	mvns	r1, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	4313      	orrs	r3, r2
         );
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3724      	adds	r7, #36	@ 0x24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
	...

08000e28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e38:	d301      	bcc.n	8000e3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e00f      	b.n	8000e5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e68 <SysTick_Config+0x40>)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e46:	210f      	movs	r1, #15
 8000e48:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4c:	f7ff ff8e 	bl	8000d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e50:	4b05      	ldr	r3, [pc, #20]	@ (8000e68 <SysTick_Config+0x40>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e56:	4b04      	ldr	r3, [pc, #16]	@ (8000e68 <SysTick_Config+0x40>)
 8000e58:	2207      	movs	r2, #7
 8000e5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	e000e010 	.word	0xe000e010

08000e6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f7ff ff47 	bl	8000d08 <__NVIC_SetPriorityGrouping>
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b086      	sub	sp, #24
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	4603      	mov	r3, r0
 8000e8a:	60b9      	str	r1, [r7, #8]
 8000e8c:	607a      	str	r2, [r7, #4]
 8000e8e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e90:	f7ff ff5e 	bl	8000d50 <__NVIC_GetPriorityGrouping>
 8000e94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	68b9      	ldr	r1, [r7, #8]
 8000e9a:	6978      	ldr	r0, [r7, #20]
 8000e9c:	f7ff ff90 	bl	8000dc0 <NVIC_EncodePriority>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff5f 	bl	8000d6c <__NVIC_SetPriority>
}
 8000eae:	bf00      	nop
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff ffb2 	bl	8000e28 <SysTick_Config>
 8000ec4:	4603      	mov	r3, r0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b087      	sub	sp, #28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000ede:	e15a      	b.n	8001196 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eec:	4013      	ands	r3, r2
 8000eee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	f000 814c 	beq.w	8001190 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 0303 	and.w	r3, r3, #3
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d005      	beq.n	8000f10 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d130      	bne.n	8000f72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	68da      	ldr	r2, [r3, #12]
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f46:	2201      	movs	r2, #1
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4013      	ands	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	091b      	lsrs	r3, r3, #4
 8000f5c:	f003 0201 	and.w	r2, r3, #1
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f003 0303 	and.w	r3, r3, #3
 8000f7a:	2b03      	cmp	r3, #3
 8000f7c:	d017      	beq.n	8000fae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	2203      	movs	r2, #3
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4013      	ands	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	689a      	ldr	r2, [r3, #8]
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f003 0303 	and.w	r3, r3, #3
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d123      	bne.n	8001002 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	08da      	lsrs	r2, r3, #3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3208      	adds	r2, #8
 8000fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	220f      	movs	r2, #15
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	691a      	ldr	r2, [r3, #16]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	f003 0307 	and.w	r3, r3, #7
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	08da      	lsrs	r2, r3, #3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3208      	adds	r2, #8
 8000ffc:	6939      	ldr	r1, [r7, #16]
 8000ffe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	2203      	movs	r2, #3
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4013      	ands	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 0203 	and.w	r2, r3, #3
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800103e:	2b00      	cmp	r3, #0
 8001040:	f000 80a6 	beq.w	8001190 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001044:	4b5b      	ldr	r3, [pc, #364]	@ (80011b4 <HAL_GPIO_Init+0x2e4>)
 8001046:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001048:	4a5a      	ldr	r2, [pc, #360]	@ (80011b4 <HAL_GPIO_Init+0x2e4>)
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001050:	4b58      	ldr	r3, [pc, #352]	@ (80011b4 <HAL_GPIO_Init+0x2e4>)
 8001052:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800105c:	4a56      	ldr	r2, [pc, #344]	@ (80011b8 <HAL_GPIO_Init+0x2e8>)
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	089b      	lsrs	r3, r3, #2
 8001062:	3302      	adds	r3, #2
 8001064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001068:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	220f      	movs	r2, #15
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001086:	d01f      	beq.n	80010c8 <HAL_GPIO_Init+0x1f8>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a4c      	ldr	r2, [pc, #304]	@ (80011bc <HAL_GPIO_Init+0x2ec>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d019      	beq.n	80010c4 <HAL_GPIO_Init+0x1f4>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a4b      	ldr	r2, [pc, #300]	@ (80011c0 <HAL_GPIO_Init+0x2f0>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d013      	beq.n	80010c0 <HAL_GPIO_Init+0x1f0>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a4a      	ldr	r2, [pc, #296]	@ (80011c4 <HAL_GPIO_Init+0x2f4>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d00d      	beq.n	80010bc <HAL_GPIO_Init+0x1ec>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a49      	ldr	r2, [pc, #292]	@ (80011c8 <HAL_GPIO_Init+0x2f8>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d007      	beq.n	80010b8 <HAL_GPIO_Init+0x1e8>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a48      	ldr	r2, [pc, #288]	@ (80011cc <HAL_GPIO_Init+0x2fc>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d101      	bne.n	80010b4 <HAL_GPIO_Init+0x1e4>
 80010b0:	2305      	movs	r3, #5
 80010b2:	e00a      	b.n	80010ca <HAL_GPIO_Init+0x1fa>
 80010b4:	2306      	movs	r3, #6
 80010b6:	e008      	b.n	80010ca <HAL_GPIO_Init+0x1fa>
 80010b8:	2304      	movs	r3, #4
 80010ba:	e006      	b.n	80010ca <HAL_GPIO_Init+0x1fa>
 80010bc:	2303      	movs	r3, #3
 80010be:	e004      	b.n	80010ca <HAL_GPIO_Init+0x1fa>
 80010c0:	2302      	movs	r3, #2
 80010c2:	e002      	b.n	80010ca <HAL_GPIO_Init+0x1fa>
 80010c4:	2301      	movs	r3, #1
 80010c6:	e000      	b.n	80010ca <HAL_GPIO_Init+0x1fa>
 80010c8:	2300      	movs	r3, #0
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	f002 0203 	and.w	r2, r2, #3
 80010d0:	0092      	lsls	r2, r2, #2
 80010d2:	4093      	lsls	r3, r2
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010da:	4937      	ldr	r1, [pc, #220]	@ (80011b8 <HAL_GPIO_Init+0x2e8>)
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	089b      	lsrs	r3, r3, #2
 80010e0:	3302      	adds	r3, #2
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010e8:	4b39      	ldr	r3, [pc, #228]	@ (80011d0 <HAL_GPIO_Init+0x300>)
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4013      	ands	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800110c:	4a30      	ldr	r2, [pc, #192]	@ (80011d0 <HAL_GPIO_Init+0x300>)
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001112:	4b2f      	ldr	r3, [pc, #188]	@ (80011d0 <HAL_GPIO_Init+0x300>)
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	43db      	mvns	r3, r3
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	4013      	ands	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4313      	orrs	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001136:	4a26      	ldr	r2, [pc, #152]	@ (80011d0 <HAL_GPIO_Init+0x300>)
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800113c:	4b24      	ldr	r3, [pc, #144]	@ (80011d0 <HAL_GPIO_Init+0x300>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	43db      	mvns	r3, r3
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4013      	ands	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001160:	4a1b      	ldr	r2, [pc, #108]	@ (80011d0 <HAL_GPIO_Init+0x300>)
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001166:	4b1a      	ldr	r3, [pc, #104]	@ (80011d0 <HAL_GPIO_Init+0x300>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	43db      	mvns	r3, r3
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4013      	ands	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	4313      	orrs	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800118a:	4a11      	ldr	r2, [pc, #68]	@ (80011d0 <HAL_GPIO_Init+0x300>)
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	3301      	adds	r3, #1
 8001194:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	fa22 f303 	lsr.w	r3, r2, r3
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f47f ae9d 	bne.w	8000ee0 <HAL_GPIO_Init+0x10>
  }
}
 80011a6:	bf00      	nop
 80011a8:	bf00      	nop
 80011aa:	371c      	adds	r7, #28
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	40021000 	.word	0x40021000
 80011b8:	40010000 	.word	0x40010000
 80011bc:	48000400 	.word	0x48000400
 80011c0:	48000800 	.word	0x48000800
 80011c4:	48000c00 	.word	0x48000c00
 80011c8:	48001000 	.word	0x48001000
 80011cc:	48001400 	.word	0x48001400
 80011d0:	40010400 	.word	0x40010400

080011d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d141      	bne.n	8001266 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80011e2:	4b4b      	ldr	r3, [pc, #300]	@ (8001310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011ee:	d131      	bne.n	8001254 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011f0:	4b47      	ldr	r3, [pc, #284]	@ (8001310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011f6:	4a46      	ldr	r2, [pc, #280]	@ (8001310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80011fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001200:	4b43      	ldr	r3, [pc, #268]	@ (8001310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001208:	4a41      	ldr	r2, [pc, #260]	@ (8001310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800120a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800120e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001210:	4b40      	ldr	r3, [pc, #256]	@ (8001314 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2232      	movs	r2, #50	@ 0x32
 8001216:	fb02 f303 	mul.w	r3, r2, r3
 800121a:	4a3f      	ldr	r2, [pc, #252]	@ (8001318 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800121c:	fba2 2303 	umull	r2, r3, r2, r3
 8001220:	0c9b      	lsrs	r3, r3, #18
 8001222:	3301      	adds	r3, #1
 8001224:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001226:	e002      	b.n	800122e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	3b01      	subs	r3, #1
 800122c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800122e:	4b38      	ldr	r3, [pc, #224]	@ (8001310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001236:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800123a:	d102      	bne.n	8001242 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1f2      	bne.n	8001228 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001242:	4b33      	ldr	r3, [pc, #204]	@ (8001310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800124a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800124e:	d158      	bne.n	8001302 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e057      	b.n	8001304 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001254:	4b2e      	ldr	r3, [pc, #184]	@ (8001310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001256:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800125a:	4a2d      	ldr	r2, [pc, #180]	@ (8001310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800125c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001260:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001264:	e04d      	b.n	8001302 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800126c:	d141      	bne.n	80012f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800126e:	4b28      	ldr	r3, [pc, #160]	@ (8001310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001276:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800127a:	d131      	bne.n	80012e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800127c:	4b24      	ldr	r3, [pc, #144]	@ (8001310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800127e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001282:	4a23      	ldr	r2, [pc, #140]	@ (8001310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001284:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001288:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800128c:	4b20      	ldr	r3, [pc, #128]	@ (8001310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001294:	4a1e      	ldr	r2, [pc, #120]	@ (8001310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001296:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800129a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800129c:	4b1d      	ldr	r3, [pc, #116]	@ (8001314 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2232      	movs	r2, #50	@ 0x32
 80012a2:	fb02 f303 	mul.w	r3, r2, r3
 80012a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001318 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80012a8:	fba2 2303 	umull	r2, r3, r2, r3
 80012ac:	0c9b      	lsrs	r3, r3, #18
 80012ae:	3301      	adds	r3, #1
 80012b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012b2:	e002      	b.n	80012ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012ba:	4b15      	ldr	r3, [pc, #84]	@ (8001310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012c6:	d102      	bne.n	80012ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1f2      	bne.n	80012b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012ce:	4b10      	ldr	r3, [pc, #64]	@ (8001310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012da:	d112      	bne.n	8001302 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e011      	b.n	8001304 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80012f0:	e007      	b.n	8001302 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012f2:	4b07      	ldr	r3, [pc, #28]	@ (8001310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012fa:	4a05      	ldr	r2, [pc, #20]	@ (8001310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001300:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	40007000 	.word	0x40007000
 8001314:	20000000 	.word	0x20000000
 8001318:	431bde83 	.word	0x431bde83

0800131c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001320:	4b05      	ldr	r3, [pc, #20]	@ (8001338 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	4a04      	ldr	r2, [pc, #16]	@ (8001338 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001326:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800132a:	6093      	str	r3, [r2, #8]
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40007000 	.word	0x40007000

0800133c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e2fe      	b.n	800194c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b00      	cmp	r3, #0
 8001358:	d075      	beq.n	8001446 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800135a:	4b97      	ldr	r3, [pc, #604]	@ (80015b8 <HAL_RCC_OscConfig+0x27c>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 030c 	and.w	r3, r3, #12
 8001362:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001364:	4b94      	ldr	r3, [pc, #592]	@ (80015b8 <HAL_RCC_OscConfig+0x27c>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	2b0c      	cmp	r3, #12
 8001372:	d102      	bne.n	800137a <HAL_RCC_OscConfig+0x3e>
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	2b03      	cmp	r3, #3
 8001378:	d002      	beq.n	8001380 <HAL_RCC_OscConfig+0x44>
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	2b08      	cmp	r3, #8
 800137e:	d10b      	bne.n	8001398 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001380:	4b8d      	ldr	r3, [pc, #564]	@ (80015b8 <HAL_RCC_OscConfig+0x27c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d05b      	beq.n	8001444 <HAL_RCC_OscConfig+0x108>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d157      	bne.n	8001444 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e2d9      	b.n	800194c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013a0:	d106      	bne.n	80013b0 <HAL_RCC_OscConfig+0x74>
 80013a2:	4b85      	ldr	r3, [pc, #532]	@ (80015b8 <HAL_RCC_OscConfig+0x27c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a84      	ldr	r2, [pc, #528]	@ (80015b8 <HAL_RCC_OscConfig+0x27c>)
 80013a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	e01d      	b.n	80013ec <HAL_RCC_OscConfig+0xb0>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013b8:	d10c      	bne.n	80013d4 <HAL_RCC_OscConfig+0x98>
 80013ba:	4b7f      	ldr	r3, [pc, #508]	@ (80015b8 <HAL_RCC_OscConfig+0x27c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a7e      	ldr	r2, [pc, #504]	@ (80015b8 <HAL_RCC_OscConfig+0x27c>)
 80013c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	4b7c      	ldr	r3, [pc, #496]	@ (80015b8 <HAL_RCC_OscConfig+0x27c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a7b      	ldr	r2, [pc, #492]	@ (80015b8 <HAL_RCC_OscConfig+0x27c>)
 80013cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	e00b      	b.n	80013ec <HAL_RCC_OscConfig+0xb0>
 80013d4:	4b78      	ldr	r3, [pc, #480]	@ (80015b8 <HAL_RCC_OscConfig+0x27c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a77      	ldr	r2, [pc, #476]	@ (80015b8 <HAL_RCC_OscConfig+0x27c>)
 80013da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	4b75      	ldr	r3, [pc, #468]	@ (80015b8 <HAL_RCC_OscConfig+0x27c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a74      	ldr	r2, [pc, #464]	@ (80015b8 <HAL_RCC_OscConfig+0x27c>)
 80013e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d013      	beq.n	800141c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f4:	f7ff fc5a 	bl	8000cac <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013fc:	f7ff fc56 	bl	8000cac <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b64      	cmp	r3, #100	@ 0x64
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e29e      	b.n	800194c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800140e:	4b6a      	ldr	r3, [pc, #424]	@ (80015b8 <HAL_RCC_OscConfig+0x27c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d0f0      	beq.n	80013fc <HAL_RCC_OscConfig+0xc0>
 800141a:	e014      	b.n	8001446 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141c:	f7ff fc46 	bl	8000cac <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001424:	f7ff fc42 	bl	8000cac <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b64      	cmp	r3, #100	@ 0x64
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e28a      	b.n	800194c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001436:	4b60      	ldr	r3, [pc, #384]	@ (80015b8 <HAL_RCC_OscConfig+0x27c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f0      	bne.n	8001424 <HAL_RCC_OscConfig+0xe8>
 8001442:	e000      	b.n	8001446 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d075      	beq.n	800153e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001452:	4b59      	ldr	r3, [pc, #356]	@ (80015b8 <HAL_RCC_OscConfig+0x27c>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 030c 	and.w	r3, r3, #12
 800145a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800145c:	4b56      	ldr	r3, [pc, #344]	@ (80015b8 <HAL_RCC_OscConfig+0x27c>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	f003 0303 	and.w	r3, r3, #3
 8001464:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	2b0c      	cmp	r3, #12
 800146a:	d102      	bne.n	8001472 <HAL_RCC_OscConfig+0x136>
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	2b02      	cmp	r3, #2
 8001470:	d002      	beq.n	8001478 <HAL_RCC_OscConfig+0x13c>
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	2b04      	cmp	r3, #4
 8001476:	d11f      	bne.n	80014b8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001478:	4b4f      	ldr	r3, [pc, #316]	@ (80015b8 <HAL_RCC_OscConfig+0x27c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001480:	2b00      	cmp	r3, #0
 8001482:	d005      	beq.n	8001490 <HAL_RCC_OscConfig+0x154>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e25d      	b.n	800194c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001490:	4b49      	ldr	r3, [pc, #292]	@ (80015b8 <HAL_RCC_OscConfig+0x27c>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	061b      	lsls	r3, r3, #24
 800149e:	4946      	ldr	r1, [pc, #280]	@ (80015b8 <HAL_RCC_OscConfig+0x27c>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80014a4:	4b45      	ldr	r3, [pc, #276]	@ (80015bc <HAL_RCC_OscConfig+0x280>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff fbb3 	bl	8000c14 <HAL_InitTick>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d043      	beq.n	800153c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e249      	b.n	800194c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d023      	beq.n	8001508 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014c0:	4b3d      	ldr	r3, [pc, #244]	@ (80015b8 <HAL_RCC_OscConfig+0x27c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a3c      	ldr	r2, [pc, #240]	@ (80015b8 <HAL_RCC_OscConfig+0x27c>)
 80014c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014cc:	f7ff fbee 	bl	8000cac <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d4:	f7ff fbea 	bl	8000cac <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e232      	b.n	800194c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014e6:	4b34      	ldr	r3, [pc, #208]	@ (80015b8 <HAL_RCC_OscConfig+0x27c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0f0      	beq.n	80014d4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f2:	4b31      	ldr	r3, [pc, #196]	@ (80015b8 <HAL_RCC_OscConfig+0x27c>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	061b      	lsls	r3, r3, #24
 8001500:	492d      	ldr	r1, [pc, #180]	@ (80015b8 <HAL_RCC_OscConfig+0x27c>)
 8001502:	4313      	orrs	r3, r2
 8001504:	604b      	str	r3, [r1, #4]
 8001506:	e01a      	b.n	800153e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001508:	4b2b      	ldr	r3, [pc, #172]	@ (80015b8 <HAL_RCC_OscConfig+0x27c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a2a      	ldr	r2, [pc, #168]	@ (80015b8 <HAL_RCC_OscConfig+0x27c>)
 800150e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001514:	f7ff fbca 	bl	8000cac <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800151c:	f7ff fbc6 	bl	8000cac <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e20e      	b.n	800194c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800152e:	4b22      	ldr	r3, [pc, #136]	@ (80015b8 <HAL_RCC_OscConfig+0x27c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f0      	bne.n	800151c <HAL_RCC_OscConfig+0x1e0>
 800153a:	e000      	b.n	800153e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800153c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	2b00      	cmp	r3, #0
 8001548:	d041      	beq.n	80015ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d01c      	beq.n	800158c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001552:	4b19      	ldr	r3, [pc, #100]	@ (80015b8 <HAL_RCC_OscConfig+0x27c>)
 8001554:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001558:	4a17      	ldr	r2, [pc, #92]	@ (80015b8 <HAL_RCC_OscConfig+0x27c>)
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001562:	f7ff fba3 	bl	8000cac <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800156a:	f7ff fb9f 	bl	8000cac <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e1e7      	b.n	800194c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800157c:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <HAL_RCC_OscConfig+0x27c>)
 800157e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d0ef      	beq.n	800156a <HAL_RCC_OscConfig+0x22e>
 800158a:	e020      	b.n	80015ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800158c:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <HAL_RCC_OscConfig+0x27c>)
 800158e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001592:	4a09      	ldr	r2, [pc, #36]	@ (80015b8 <HAL_RCC_OscConfig+0x27c>)
 8001594:	f023 0301 	bic.w	r3, r3, #1
 8001598:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800159c:	f7ff fb86 	bl	8000cac <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015a2:	e00d      	b.n	80015c0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a4:	f7ff fb82 	bl	8000cac <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d906      	bls.n	80015c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e1ca      	b.n	800194c <HAL_RCC_OscConfig+0x610>
 80015b6:	bf00      	nop
 80015b8:	40021000 	.word	0x40021000
 80015bc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015c0:	4b8c      	ldr	r3, [pc, #560]	@ (80017f4 <HAL_RCC_OscConfig+0x4b8>)
 80015c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1ea      	bne.n	80015a4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0304 	and.w	r3, r3, #4
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f000 80a6 	beq.w	8001728 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015dc:	2300      	movs	r3, #0
 80015de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80015e0:	4b84      	ldr	r3, [pc, #528]	@ (80017f4 <HAL_RCC_OscConfig+0x4b8>)
 80015e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d101      	bne.n	80015f0 <HAL_RCC_OscConfig+0x2b4>
 80015ec:	2301      	movs	r3, #1
 80015ee:	e000      	b.n	80015f2 <HAL_RCC_OscConfig+0x2b6>
 80015f0:	2300      	movs	r3, #0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d00d      	beq.n	8001612 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015f6:	4b7f      	ldr	r3, [pc, #508]	@ (80017f4 <HAL_RCC_OscConfig+0x4b8>)
 80015f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015fa:	4a7e      	ldr	r2, [pc, #504]	@ (80017f4 <HAL_RCC_OscConfig+0x4b8>)
 80015fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001600:	6593      	str	r3, [r2, #88]	@ 0x58
 8001602:	4b7c      	ldr	r3, [pc, #496]	@ (80017f4 <HAL_RCC_OscConfig+0x4b8>)
 8001604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800160e:	2301      	movs	r3, #1
 8001610:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001612:	4b79      	ldr	r3, [pc, #484]	@ (80017f8 <HAL_RCC_OscConfig+0x4bc>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800161a:	2b00      	cmp	r3, #0
 800161c:	d118      	bne.n	8001650 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800161e:	4b76      	ldr	r3, [pc, #472]	@ (80017f8 <HAL_RCC_OscConfig+0x4bc>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a75      	ldr	r2, [pc, #468]	@ (80017f8 <HAL_RCC_OscConfig+0x4bc>)
 8001624:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001628:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800162a:	f7ff fb3f 	bl	8000cac <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001632:	f7ff fb3b 	bl	8000cac <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e183      	b.n	800194c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001644:	4b6c      	ldr	r3, [pc, #432]	@ (80017f8 <HAL_RCC_OscConfig+0x4bc>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0f0      	beq.n	8001632 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d108      	bne.n	800166a <HAL_RCC_OscConfig+0x32e>
 8001658:	4b66      	ldr	r3, [pc, #408]	@ (80017f4 <HAL_RCC_OscConfig+0x4b8>)
 800165a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800165e:	4a65      	ldr	r2, [pc, #404]	@ (80017f4 <HAL_RCC_OscConfig+0x4b8>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001668:	e024      	b.n	80016b4 <HAL_RCC_OscConfig+0x378>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	2b05      	cmp	r3, #5
 8001670:	d110      	bne.n	8001694 <HAL_RCC_OscConfig+0x358>
 8001672:	4b60      	ldr	r3, [pc, #384]	@ (80017f4 <HAL_RCC_OscConfig+0x4b8>)
 8001674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001678:	4a5e      	ldr	r2, [pc, #376]	@ (80017f4 <HAL_RCC_OscConfig+0x4b8>)
 800167a:	f043 0304 	orr.w	r3, r3, #4
 800167e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001682:	4b5c      	ldr	r3, [pc, #368]	@ (80017f4 <HAL_RCC_OscConfig+0x4b8>)
 8001684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001688:	4a5a      	ldr	r2, [pc, #360]	@ (80017f4 <HAL_RCC_OscConfig+0x4b8>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001692:	e00f      	b.n	80016b4 <HAL_RCC_OscConfig+0x378>
 8001694:	4b57      	ldr	r3, [pc, #348]	@ (80017f4 <HAL_RCC_OscConfig+0x4b8>)
 8001696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800169a:	4a56      	ldr	r2, [pc, #344]	@ (80017f4 <HAL_RCC_OscConfig+0x4b8>)
 800169c:	f023 0301 	bic.w	r3, r3, #1
 80016a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016a4:	4b53      	ldr	r3, [pc, #332]	@ (80017f4 <HAL_RCC_OscConfig+0x4b8>)
 80016a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016aa:	4a52      	ldr	r2, [pc, #328]	@ (80017f4 <HAL_RCC_OscConfig+0x4b8>)
 80016ac:	f023 0304 	bic.w	r3, r3, #4
 80016b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d016      	beq.n	80016ea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016bc:	f7ff faf6 	bl	8000cac <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016c2:	e00a      	b.n	80016da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016c4:	f7ff faf2 	bl	8000cac <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e138      	b.n	800194c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016da:	4b46      	ldr	r3, [pc, #280]	@ (80017f4 <HAL_RCC_OscConfig+0x4b8>)
 80016dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0ed      	beq.n	80016c4 <HAL_RCC_OscConfig+0x388>
 80016e8:	e015      	b.n	8001716 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ea:	f7ff fadf 	bl	8000cac <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016f0:	e00a      	b.n	8001708 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f2:	f7ff fadb 	bl	8000cac <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001700:	4293      	cmp	r3, r2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e121      	b.n	800194c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001708:	4b3a      	ldr	r3, [pc, #232]	@ (80017f4 <HAL_RCC_OscConfig+0x4b8>)
 800170a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1ed      	bne.n	80016f2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001716:	7ffb      	ldrb	r3, [r7, #31]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d105      	bne.n	8001728 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800171c:	4b35      	ldr	r3, [pc, #212]	@ (80017f4 <HAL_RCC_OscConfig+0x4b8>)
 800171e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001720:	4a34      	ldr	r2, [pc, #208]	@ (80017f4 <HAL_RCC_OscConfig+0x4b8>)
 8001722:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001726:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0320 	and.w	r3, r3, #32
 8001730:	2b00      	cmp	r3, #0
 8001732:	d03c      	beq.n	80017ae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d01c      	beq.n	8001776 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800173c:	4b2d      	ldr	r3, [pc, #180]	@ (80017f4 <HAL_RCC_OscConfig+0x4b8>)
 800173e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001742:	4a2c      	ldr	r2, [pc, #176]	@ (80017f4 <HAL_RCC_OscConfig+0x4b8>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174c:	f7ff faae 	bl	8000cac <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001754:	f7ff faaa 	bl	8000cac <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e0f2      	b.n	800194c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001766:	4b23      	ldr	r3, [pc, #140]	@ (80017f4 <HAL_RCC_OscConfig+0x4b8>)
 8001768:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0ef      	beq.n	8001754 <HAL_RCC_OscConfig+0x418>
 8001774:	e01b      	b.n	80017ae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001776:	4b1f      	ldr	r3, [pc, #124]	@ (80017f4 <HAL_RCC_OscConfig+0x4b8>)
 8001778:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800177c:	4a1d      	ldr	r2, [pc, #116]	@ (80017f4 <HAL_RCC_OscConfig+0x4b8>)
 800177e:	f023 0301 	bic.w	r3, r3, #1
 8001782:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001786:	f7ff fa91 	bl	8000cac <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800178e:	f7ff fa8d 	bl	8000cac <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e0d5      	b.n	800194c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017a0:	4b14      	ldr	r3, [pc, #80]	@ (80017f4 <HAL_RCC_OscConfig+0x4b8>)
 80017a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1ef      	bne.n	800178e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f000 80c9 	beq.w	800194a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017b8:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <HAL_RCC_OscConfig+0x4b8>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 030c 	and.w	r3, r3, #12
 80017c0:	2b0c      	cmp	r3, #12
 80017c2:	f000 8083 	beq.w	80018cc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d15e      	bne.n	800188c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ce:	4b09      	ldr	r3, [pc, #36]	@ (80017f4 <HAL_RCC_OscConfig+0x4b8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a08      	ldr	r2, [pc, #32]	@ (80017f4 <HAL_RCC_OscConfig+0x4b8>)
 80017d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017da:	f7ff fa67 	bl	8000cac <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017e0:	e00c      	b.n	80017fc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e2:	f7ff fa63 	bl	8000cac <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d905      	bls.n	80017fc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e0ab      	b.n	800194c <HAL_RCC_OscConfig+0x610>
 80017f4:	40021000 	.word	0x40021000
 80017f8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017fc:	4b55      	ldr	r3, [pc, #340]	@ (8001954 <HAL_RCC_OscConfig+0x618>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1ec      	bne.n	80017e2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001808:	4b52      	ldr	r3, [pc, #328]	@ (8001954 <HAL_RCC_OscConfig+0x618>)
 800180a:	68da      	ldr	r2, [r3, #12]
 800180c:	4b52      	ldr	r3, [pc, #328]	@ (8001958 <HAL_RCC_OscConfig+0x61c>)
 800180e:	4013      	ands	r3, r2
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	6a11      	ldr	r1, [r2, #32]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001818:	3a01      	subs	r2, #1
 800181a:	0112      	lsls	r2, r2, #4
 800181c:	4311      	orrs	r1, r2
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001822:	0212      	lsls	r2, r2, #8
 8001824:	4311      	orrs	r1, r2
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800182a:	0852      	lsrs	r2, r2, #1
 800182c:	3a01      	subs	r2, #1
 800182e:	0552      	lsls	r2, r2, #21
 8001830:	4311      	orrs	r1, r2
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001836:	0852      	lsrs	r2, r2, #1
 8001838:	3a01      	subs	r2, #1
 800183a:	0652      	lsls	r2, r2, #25
 800183c:	4311      	orrs	r1, r2
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001842:	06d2      	lsls	r2, r2, #27
 8001844:	430a      	orrs	r2, r1
 8001846:	4943      	ldr	r1, [pc, #268]	@ (8001954 <HAL_RCC_OscConfig+0x618>)
 8001848:	4313      	orrs	r3, r2
 800184a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800184c:	4b41      	ldr	r3, [pc, #260]	@ (8001954 <HAL_RCC_OscConfig+0x618>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a40      	ldr	r2, [pc, #256]	@ (8001954 <HAL_RCC_OscConfig+0x618>)
 8001852:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001856:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001858:	4b3e      	ldr	r3, [pc, #248]	@ (8001954 <HAL_RCC_OscConfig+0x618>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	4a3d      	ldr	r2, [pc, #244]	@ (8001954 <HAL_RCC_OscConfig+0x618>)
 800185e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001862:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001864:	f7ff fa22 	bl	8000cac <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186c:	f7ff fa1e 	bl	8000cac <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e066      	b.n	800194c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800187e:	4b35      	ldr	r3, [pc, #212]	@ (8001954 <HAL_RCC_OscConfig+0x618>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0f0      	beq.n	800186c <HAL_RCC_OscConfig+0x530>
 800188a:	e05e      	b.n	800194a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188c:	4b31      	ldr	r3, [pc, #196]	@ (8001954 <HAL_RCC_OscConfig+0x618>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a30      	ldr	r2, [pc, #192]	@ (8001954 <HAL_RCC_OscConfig+0x618>)
 8001892:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001898:	f7ff fa08 	bl	8000cac <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a0:	f7ff fa04 	bl	8000cac <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e04c      	b.n	800194c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018b2:	4b28      	ldr	r3, [pc, #160]	@ (8001954 <HAL_RCC_OscConfig+0x618>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f0      	bne.n	80018a0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80018be:	4b25      	ldr	r3, [pc, #148]	@ (8001954 <HAL_RCC_OscConfig+0x618>)
 80018c0:	68da      	ldr	r2, [r3, #12]
 80018c2:	4924      	ldr	r1, [pc, #144]	@ (8001954 <HAL_RCC_OscConfig+0x618>)
 80018c4:	4b25      	ldr	r3, [pc, #148]	@ (800195c <HAL_RCC_OscConfig+0x620>)
 80018c6:	4013      	ands	r3, r2
 80018c8:	60cb      	str	r3, [r1, #12]
 80018ca:	e03e      	b.n	800194a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	69db      	ldr	r3, [r3, #28]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d101      	bne.n	80018d8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e039      	b.n	800194c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80018d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001954 <HAL_RCC_OscConfig+0x618>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f003 0203 	and.w	r2, r3, #3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d12c      	bne.n	8001946 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f6:	3b01      	subs	r3, #1
 80018f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d123      	bne.n	8001946 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001908:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800190a:	429a      	cmp	r2, r3
 800190c:	d11b      	bne.n	8001946 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001918:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800191a:	429a      	cmp	r2, r3
 800191c:	d113      	bne.n	8001946 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001928:	085b      	lsrs	r3, r3, #1
 800192a:	3b01      	subs	r3, #1
 800192c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800192e:	429a      	cmp	r2, r3
 8001930:	d109      	bne.n	8001946 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800193c:	085b      	lsrs	r3, r3, #1
 800193e:	3b01      	subs	r3, #1
 8001940:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001942:	429a      	cmp	r2, r3
 8001944:	d001      	beq.n	800194a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e000      	b.n	800194c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	3720      	adds	r7, #32
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40021000 	.word	0x40021000
 8001958:	019f800c 	.word	0x019f800c
 800195c:	feeefffc 	.word	0xfeeefffc

08001960 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e11e      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001978:	4b91      	ldr	r3, [pc, #580]	@ (8001bc0 <HAL_RCC_ClockConfig+0x260>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 030f 	and.w	r3, r3, #15
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	429a      	cmp	r2, r3
 8001984:	d910      	bls.n	80019a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001986:	4b8e      	ldr	r3, [pc, #568]	@ (8001bc0 <HAL_RCC_ClockConfig+0x260>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f023 020f 	bic.w	r2, r3, #15
 800198e:	498c      	ldr	r1, [pc, #560]	@ (8001bc0 <HAL_RCC_ClockConfig+0x260>)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	4313      	orrs	r3, r2
 8001994:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001996:	4b8a      	ldr	r3, [pc, #552]	@ (8001bc0 <HAL_RCC_ClockConfig+0x260>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d001      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e106      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d073      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	2b03      	cmp	r3, #3
 80019ba:	d129      	bne.n	8001a10 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019bc:	4b81      	ldr	r3, [pc, #516]	@ (8001bc4 <HAL_RCC_ClockConfig+0x264>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e0f4      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80019cc:	f000 f99e 	bl	8001d0c <RCC_GetSysClockFreqFromPLLSource>
 80019d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	4a7c      	ldr	r2, [pc, #496]	@ (8001bc8 <HAL_RCC_ClockConfig+0x268>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d93f      	bls.n	8001a5a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80019da:	4b7a      	ldr	r3, [pc, #488]	@ (8001bc4 <HAL_RCC_ClockConfig+0x264>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d009      	beq.n	80019fa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d033      	beq.n	8001a5a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d12f      	bne.n	8001a5a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80019fa:	4b72      	ldr	r3, [pc, #456]	@ (8001bc4 <HAL_RCC_ClockConfig+0x264>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a02:	4a70      	ldr	r2, [pc, #448]	@ (8001bc4 <HAL_RCC_ClockConfig+0x264>)
 8001a04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a08:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001a0a:	2380      	movs	r3, #128	@ 0x80
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	e024      	b.n	8001a5a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d107      	bne.n	8001a28 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a18:	4b6a      	ldr	r3, [pc, #424]	@ (8001bc4 <HAL_RCC_ClockConfig+0x264>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d109      	bne.n	8001a38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e0c6      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a28:	4b66      	ldr	r3, [pc, #408]	@ (8001bc4 <HAL_RCC_ClockConfig+0x264>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e0be      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001a38:	f000 f8ce 	bl	8001bd8 <HAL_RCC_GetSysClockFreq>
 8001a3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	4a61      	ldr	r2, [pc, #388]	@ (8001bc8 <HAL_RCC_ClockConfig+0x268>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d909      	bls.n	8001a5a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a46:	4b5f      	ldr	r3, [pc, #380]	@ (8001bc4 <HAL_RCC_ClockConfig+0x264>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a4e:	4a5d      	ldr	r2, [pc, #372]	@ (8001bc4 <HAL_RCC_ClockConfig+0x264>)
 8001a50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a54:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001a56:	2380      	movs	r3, #128	@ 0x80
 8001a58:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a5a:	4b5a      	ldr	r3, [pc, #360]	@ (8001bc4 <HAL_RCC_ClockConfig+0x264>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f023 0203 	bic.w	r2, r3, #3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	4957      	ldr	r1, [pc, #348]	@ (8001bc4 <HAL_RCC_ClockConfig+0x264>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a6c:	f7ff f91e 	bl	8000cac <HAL_GetTick>
 8001a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a72:	e00a      	b.n	8001a8a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a74:	f7ff f91a 	bl	8000cac <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e095      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a8a:	4b4e      	ldr	r3, [pc, #312]	@ (8001bc4 <HAL_RCC_ClockConfig+0x264>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 020c 	and.w	r2, r3, #12
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d1eb      	bne.n	8001a74 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d023      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ab4:	4b43      	ldr	r3, [pc, #268]	@ (8001bc4 <HAL_RCC_ClockConfig+0x264>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	4a42      	ldr	r2, [pc, #264]	@ (8001bc4 <HAL_RCC_ClockConfig+0x264>)
 8001aba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001abe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d007      	beq.n	8001adc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001acc:	4b3d      	ldr	r3, [pc, #244]	@ (8001bc4 <HAL_RCC_ClockConfig+0x264>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001ad4:	4a3b      	ldr	r2, [pc, #236]	@ (8001bc4 <HAL_RCC_ClockConfig+0x264>)
 8001ad6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001ada:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001adc:	4b39      	ldr	r3, [pc, #228]	@ (8001bc4 <HAL_RCC_ClockConfig+0x264>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	4936      	ldr	r1, [pc, #216]	@ (8001bc4 <HAL_RCC_ClockConfig+0x264>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	608b      	str	r3, [r1, #8]
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	2b80      	cmp	r3, #128	@ 0x80
 8001af4:	d105      	bne.n	8001b02 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001af6:	4b33      	ldr	r3, [pc, #204]	@ (8001bc4 <HAL_RCC_ClockConfig+0x264>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	4a32      	ldr	r2, [pc, #200]	@ (8001bc4 <HAL_RCC_ClockConfig+0x264>)
 8001afc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b00:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b02:	4b2f      	ldr	r3, [pc, #188]	@ (8001bc0 <HAL_RCC_ClockConfig+0x260>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d21d      	bcs.n	8001b4c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b10:	4b2b      	ldr	r3, [pc, #172]	@ (8001bc0 <HAL_RCC_ClockConfig+0x260>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f023 020f 	bic.w	r2, r3, #15
 8001b18:	4929      	ldr	r1, [pc, #164]	@ (8001bc0 <HAL_RCC_ClockConfig+0x260>)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b20:	f7ff f8c4 	bl	8000cac <HAL_GetTick>
 8001b24:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b26:	e00a      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b28:	f7ff f8c0 	bl	8000cac <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e03b      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3e:	4b20      	ldr	r3, [pc, #128]	@ (8001bc0 <HAL_RCC_ClockConfig+0x260>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d1ed      	bne.n	8001b28 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d008      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b58:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc4 <HAL_RCC_ClockConfig+0x264>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	4917      	ldr	r1, [pc, #92]	@ (8001bc4 <HAL_RCC_ClockConfig+0x264>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d009      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b76:	4b13      	ldr	r3, [pc, #76]	@ (8001bc4 <HAL_RCC_ClockConfig+0x264>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	490f      	ldr	r1, [pc, #60]	@ (8001bc4 <HAL_RCC_ClockConfig+0x264>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b8a:	f000 f825 	bl	8001bd8 <HAL_RCC_GetSysClockFreq>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc4 <HAL_RCC_ClockConfig+0x264>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	091b      	lsrs	r3, r3, #4
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	490c      	ldr	r1, [pc, #48]	@ (8001bcc <HAL_RCC_ClockConfig+0x26c>)
 8001b9c:	5ccb      	ldrb	r3, [r1, r3]
 8001b9e:	f003 031f 	and.w	r3, r3, #31
 8001ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd0 <HAL_RCC_ClockConfig+0x270>)
 8001ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001baa:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd4 <HAL_RCC_ClockConfig+0x274>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff f830 	bl	8000c14 <HAL_InitTick>
 8001bb4:	4603      	mov	r3, r0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40022000 	.word	0x40022000
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	04c4b400 	.word	0x04c4b400
 8001bcc:	08003ec4 	.word	0x08003ec4
 8001bd0:	20000000 	.word	0x20000000
 8001bd4:	20000004 	.word	0x20000004

08001bd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b087      	sub	sp, #28
 8001bdc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001bde:	4b2c      	ldr	r3, [pc, #176]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 030c 	and.w	r3, r3, #12
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	d102      	bne.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bea:	4b2a      	ldr	r3, [pc, #168]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	e047      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001bf0:	4b27      	ldr	r3, [pc, #156]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 030c 	and.w	r3, r3, #12
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d102      	bne.n	8001c02 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bfc:	4b26      	ldr	r3, [pc, #152]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	e03e      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001c02:	4b23      	ldr	r3, [pc, #140]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 030c 	and.w	r3, r3, #12
 8001c0a:	2b0c      	cmp	r3, #12
 8001c0c:	d136      	bne.n	8001c7c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c0e:	4b20      	ldr	r3, [pc, #128]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c18:	4b1d      	ldr	r3, [pc, #116]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	091b      	lsrs	r3, r3, #4
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	3301      	adds	r3, #1
 8001c24:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2b03      	cmp	r3, #3
 8001c2a:	d10c      	bne.n	8001c46 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c2c:	4a1a      	ldr	r2, [pc, #104]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c34:	4a16      	ldr	r2, [pc, #88]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c36:	68d2      	ldr	r2, [r2, #12]
 8001c38:	0a12      	lsrs	r2, r2, #8
 8001c3a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c3e:	fb02 f303 	mul.w	r3, r2, r3
 8001c42:	617b      	str	r3, [r7, #20]
      break;
 8001c44:	e00c      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c46:	4a13      	ldr	r2, [pc, #76]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4e:	4a10      	ldr	r2, [pc, #64]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c50:	68d2      	ldr	r2, [r2, #12]
 8001c52:	0a12      	lsrs	r2, r2, #8
 8001c54:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c58:	fb02 f303 	mul.w	r3, r2, r3
 8001c5c:	617b      	str	r3, [r7, #20]
      break;
 8001c5e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c60:	4b0b      	ldr	r3, [pc, #44]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	0e5b      	lsrs	r3, r3, #25
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c78:	613b      	str	r3, [r7, #16]
 8001c7a:	e001      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c80:	693b      	ldr	r3, [r7, #16]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	371c      	adds	r7, #28
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	40021000 	.word	0x40021000
 8001c94:	00f42400 	.word	0x00f42400
 8001c98:	016e3600 	.word	0x016e3600

08001c9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ca0:	4b03      	ldr	r3, [pc, #12]	@ (8001cb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	20000000 	.word	0x20000000

08001cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001cb8:	f7ff fff0 	bl	8001c9c <HAL_RCC_GetHCLKFreq>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	0a1b      	lsrs	r3, r3, #8
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	4904      	ldr	r1, [pc, #16]	@ (8001cdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cca:	5ccb      	ldrb	r3, [r1, r3]
 8001ccc:	f003 031f 	and.w	r3, r3, #31
 8001cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	08003ed4 	.word	0x08003ed4

08001ce0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ce4:	f7ff ffda 	bl	8001c9c <HAL_RCC_GetHCLKFreq>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	4b06      	ldr	r3, [pc, #24]	@ (8001d04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	0adb      	lsrs	r3, r3, #11
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	4904      	ldr	r1, [pc, #16]	@ (8001d08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cf6:	5ccb      	ldrb	r3, [r1, r3]
 8001cf8:	f003 031f 	and.w	r3, r3, #31
 8001cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40021000 	.word	0x40021000
 8001d08:	08003ed4 	.word	0x08003ed4

08001d0c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b087      	sub	sp, #28
 8001d10:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d12:	4b1e      	ldr	r3, [pc, #120]	@ (8001d8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	091b      	lsrs	r3, r3, #4
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	3301      	adds	r3, #1
 8001d28:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	2b03      	cmp	r3, #3
 8001d2e:	d10c      	bne.n	8001d4a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d30:	4a17      	ldr	r2, [pc, #92]	@ (8001d90 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d38:	4a14      	ldr	r2, [pc, #80]	@ (8001d8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d3a:	68d2      	ldr	r2, [r2, #12]
 8001d3c:	0a12      	lsrs	r2, r2, #8
 8001d3e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d42:	fb02 f303 	mul.w	r3, r2, r3
 8001d46:	617b      	str	r3, [r7, #20]
    break;
 8001d48:	e00c      	b.n	8001d64 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d4a:	4a12      	ldr	r2, [pc, #72]	@ (8001d94 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d52:	4a0e      	ldr	r2, [pc, #56]	@ (8001d8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d54:	68d2      	ldr	r2, [r2, #12]
 8001d56:	0a12      	lsrs	r2, r2, #8
 8001d58:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d5c:	fb02 f303 	mul.w	r3, r2, r3
 8001d60:	617b      	str	r3, [r7, #20]
    break;
 8001d62:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d64:	4b09      	ldr	r3, [pc, #36]	@ (8001d8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	0e5b      	lsrs	r3, r3, #25
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	3301      	adds	r3, #1
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001d74:	697a      	ldr	r2, [r7, #20]
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001d7e:	687b      	ldr	r3, [r7, #4]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	371c      	adds	r7, #28
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	016e3600 	.word	0x016e3600
 8001d94:	00f42400 	.word	0x00f42400

08001d98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001da0:	2300      	movs	r3, #0
 8001da2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001da4:	2300      	movs	r3, #0
 8001da6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f000 8098 	beq.w	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001db6:	2300      	movs	r3, #0
 8001db8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dba:	4b43      	ldr	r3, [pc, #268]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10d      	bne.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dc6:	4b40      	ldr	r3, [pc, #256]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dca:	4a3f      	ldr	r2, [pc, #252]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dd2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dda:	60bb      	str	r3, [r7, #8]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dde:	2301      	movs	r3, #1
 8001de0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001de2:	4b3a      	ldr	r3, [pc, #232]	@ (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a39      	ldr	r2, [pc, #228]	@ (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001de8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001dee:	f7fe ff5d 	bl	8000cac <HAL_GetTick>
 8001df2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001df4:	e009      	b.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df6:	f7fe ff59 	bl	8000cac <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d902      	bls.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	74fb      	strb	r3, [r7, #19]
        break;
 8001e08:	e005      	b.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e0a:	4b30      	ldr	r3, [pc, #192]	@ (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0ef      	beq.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001e16:	7cfb      	ldrb	r3, [r7, #19]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d159      	bne.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e1c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e26:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d01e      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d019      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e38:	4b23      	ldr	r3, [pc, #140]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e44:	4b20      	ldr	r3, [pc, #128]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e4a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e54:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e5a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e64:	4a18      	ldr	r2, [pc, #96]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d016      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e76:	f7fe ff19 	bl	8000cac <HAL_GetTick>
 8001e7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e7c:	e00b      	b.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e7e:	f7fe ff15 	bl	8000cac <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d902      	bls.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	74fb      	strb	r3, [r7, #19]
            break;
 8001e94:	e006      	b.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e96:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0ec      	beq.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001ea4:	7cfb      	ldrb	r3, [r7, #19]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10b      	bne.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001eaa:	4b07      	ldr	r3, [pc, #28]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb8:	4903      	ldr	r1, [pc, #12]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001ec2:	7cfb      	ldrb	r3, [r7, #19]
 8001ec4:	74bb      	strb	r3, [r7, #18]
 8001ec6:	e005      	b.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ed0:	7cfb      	ldrb	r3, [r7, #19]
 8001ed2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ed4:	7c7b      	ldrb	r3, [r7, #17]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d105      	bne.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eda:	4ba6      	ldr	r3, [pc, #664]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ede:	4aa5      	ldr	r2, [pc, #660]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ee0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ee4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00a      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ef2:	4ba0      	ldr	r3, [pc, #640]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ef8:	f023 0203 	bic.w	r2, r3, #3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	499c      	ldr	r1, [pc, #624]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00a      	beq.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f14:	4b97      	ldr	r3, [pc, #604]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f1a:	f023 020c 	bic.w	r2, r3, #12
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	4994      	ldr	r1, [pc, #592]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0304 	and.w	r3, r3, #4
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00a      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f36:	4b8f      	ldr	r3, [pc, #572]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f3c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	498b      	ldr	r1, [pc, #556]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00a      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f58:	4b86      	ldr	r3, [pc, #536]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f5e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	4983      	ldr	r1, [pc, #524]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0320 	and.w	r3, r3, #32
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00a      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f7a:	4b7e      	ldr	r3, [pc, #504]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f80:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	497a      	ldr	r1, [pc, #488]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00a      	beq.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f9c:	4b75      	ldr	r3, [pc, #468]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fa2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	4972      	ldr	r1, [pc, #456]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00a      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fbe:	4b6d      	ldr	r3, [pc, #436]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fc4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	4969      	ldr	r1, [pc, #420]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00a      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001fe0:	4b64      	ldr	r3, [pc, #400]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fe6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	4961      	ldr	r1, [pc, #388]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00a      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002002:	4b5c      	ldr	r3, [pc, #368]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002008:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002010:	4958      	ldr	r1, [pc, #352]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002012:	4313      	orrs	r3, r2
 8002014:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002020:	2b00      	cmp	r3, #0
 8002022:	d015      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002024:	4b53      	ldr	r3, [pc, #332]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800202a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002032:	4950      	ldr	r1, [pc, #320]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002034:	4313      	orrs	r3, r2
 8002036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800203e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002042:	d105      	bne.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002044:	4b4b      	ldr	r3, [pc, #300]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	4a4a      	ldr	r2, [pc, #296]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800204a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800204e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002058:	2b00      	cmp	r3, #0
 800205a:	d015      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800205c:	4b45      	ldr	r3, [pc, #276]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800205e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002062:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800206a:	4942      	ldr	r1, [pc, #264]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800206c:	4313      	orrs	r3, r2
 800206e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002076:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800207a:	d105      	bne.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800207c:	4b3d      	ldr	r3, [pc, #244]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	4a3c      	ldr	r2, [pc, #240]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002082:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002086:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d015      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002094:	4b37      	ldr	r3, [pc, #220]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800209a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a2:	4934      	ldr	r1, [pc, #208]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020b2:	d105      	bne.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	4a2e      	ldr	r2, [pc, #184]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020be:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d015      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020cc:	4b29      	ldr	r3, [pc, #164]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020da:	4926      	ldr	r1, [pc, #152]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020ea:	d105      	bne.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020ec:	4b21      	ldr	r3, [pc, #132]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4a20      	ldr	r2, [pc, #128]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020f6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d015      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002104:	4b1b      	ldr	r3, [pc, #108]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800210a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002112:	4918      	ldr	r1, [pc, #96]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002114:	4313      	orrs	r3, r2
 8002116:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800211e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002122:	d105      	bne.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002124:	4b13      	ldr	r3, [pc, #76]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	4a12      	ldr	r2, [pc, #72]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800212a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800212e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d015      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800213c:	4b0d      	ldr	r3, [pc, #52]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800213e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002142:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800214a:	490a      	ldr	r1, [pc, #40]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800214c:	4313      	orrs	r3, r2
 800214e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002156:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800215a:	d105      	bne.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800215c:	4b05      	ldr	r3, [pc, #20]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4a04      	ldr	r2, [pc, #16]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002162:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002166:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002168:	7cbb      	ldrb	r3, [r7, #18]
}
 800216a:	4618      	mov	r0, r3
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40021000 	.word	0x40021000

08002178 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e042      	b.n	8002210 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002190:	2b00      	cmp	r3, #0
 8002192:	d106      	bne.n	80021a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7fe fc5f 	bl	8000a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2224      	movs	r2, #36	@ 0x24
 80021a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 0201 	bic.w	r2, r2, #1
 80021b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d002      	beq.n	80021c8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 fcde 	bl	8002b84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 fa0f 	bl	80025ec <UART_SetConfig>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d101      	bne.n	80021d8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e01b      	b.n	8002210 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80021e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80021f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0201 	orr.w	r2, r2, #1
 8002206:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 fd5d 	bl	8002cc8 <UART_CheckIdleState>
 800220e:	4603      	mov	r3, r0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b08a      	sub	sp, #40	@ 0x28
 800221c:	af02      	add	r7, sp, #8
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	603b      	str	r3, [r7, #0]
 8002224:	4613      	mov	r3, r2
 8002226:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800222e:	2b20      	cmp	r3, #32
 8002230:	d17b      	bne.n	800232a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d002      	beq.n	800223e <HAL_UART_Transmit+0x26>
 8002238:	88fb      	ldrh	r3, [r7, #6]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e074      	b.n	800232c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2221      	movs	r2, #33	@ 0x21
 800224e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002252:	f7fe fd2b 	bl	8000cac <HAL_GetTick>
 8002256:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	88fa      	ldrh	r2, [r7, #6]
 800225c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	88fa      	ldrh	r2, [r7, #6]
 8002264:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002270:	d108      	bne.n	8002284 <HAL_UART_Transmit+0x6c>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d104      	bne.n	8002284 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	61bb      	str	r3, [r7, #24]
 8002282:	e003      	b.n	800228c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002288:	2300      	movs	r3, #0
 800228a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800228c:	e030      	b.n	80022f0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	2200      	movs	r2, #0
 8002296:	2180      	movs	r1, #128	@ 0x80
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f000 fdbf 	bl	8002e1c <UART_WaitOnFlagUntilTimeout>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d005      	beq.n	80022b0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2220      	movs	r2, #32
 80022a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e03d      	b.n	800232c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10b      	bne.n	80022ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022c4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	3302      	adds	r3, #2
 80022ca:	61bb      	str	r3, [r7, #24]
 80022cc:	e007      	b.n	80022de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	781a      	ldrb	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	3301      	adds	r3, #1
 80022dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	3b01      	subs	r3, #1
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1c8      	bne.n	800228e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	2200      	movs	r2, #0
 8002304:	2140      	movs	r1, #64	@ 0x40
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f000 fd88 	bl	8002e1c <UART_WaitOnFlagUntilTimeout>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d005      	beq.n	800231e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2220      	movs	r2, #32
 8002316:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e006      	b.n	800232c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2220      	movs	r2, #32
 8002322:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002326:	2300      	movs	r3, #0
 8002328:	e000      	b.n	800232c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800232a:	2302      	movs	r3, #2
  }
}
 800232c:	4618      	mov	r0, r3
 800232e:	3720      	adds	r7, #32
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08a      	sub	sp, #40	@ 0x28
 8002338:	af02      	add	r7, sp, #8
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	603b      	str	r3, [r7, #0]
 8002340:	4613      	mov	r3, r2
 8002342:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800234a:	2b20      	cmp	r3, #32
 800234c:	f040 80b5 	bne.w	80024ba <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d002      	beq.n	800235c <HAL_UART_Receive+0x28>
 8002356:	88fb      	ldrh	r3, [r7, #6]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0ad      	b.n	80024bc <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2222      	movs	r2, #34	@ 0x22
 800236c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002376:	f7fe fc99 	bl	8000cac <HAL_GetTick>
 800237a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	88fa      	ldrh	r2, [r7, #6]
 8002380:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	88fa      	ldrh	r2, [r7, #6]
 8002388:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002394:	d10e      	bne.n	80023b4 <HAL_UART_Receive+0x80>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d105      	bne.n	80023aa <HAL_UART_Receive+0x76>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80023a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80023a8:	e02d      	b.n	8002406 <HAL_UART_Receive+0xd2>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	22ff      	movs	r2, #255	@ 0xff
 80023ae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80023b2:	e028      	b.n	8002406 <HAL_UART_Receive+0xd2>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10d      	bne.n	80023d8 <HAL_UART_Receive+0xa4>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d104      	bne.n	80023ce <HAL_UART_Receive+0x9a>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	22ff      	movs	r2, #255	@ 0xff
 80023c8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80023cc:	e01b      	b.n	8002406 <HAL_UART_Receive+0xd2>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	227f      	movs	r2, #127	@ 0x7f
 80023d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80023d6:	e016      	b.n	8002406 <HAL_UART_Receive+0xd2>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023e0:	d10d      	bne.n	80023fe <HAL_UART_Receive+0xca>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d104      	bne.n	80023f4 <HAL_UART_Receive+0xc0>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	227f      	movs	r2, #127	@ 0x7f
 80023ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80023f2:	e008      	b.n	8002406 <HAL_UART_Receive+0xd2>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	223f      	movs	r2, #63	@ 0x3f
 80023f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80023fc:	e003      	b.n	8002406 <HAL_UART_Receive+0xd2>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800240c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002416:	d108      	bne.n	800242a <HAL_UART_Receive+0xf6>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d104      	bne.n	800242a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002420:	2300      	movs	r3, #0
 8002422:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	61bb      	str	r3, [r7, #24]
 8002428:	e003      	b.n	8002432 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800242e:	2300      	movs	r3, #0
 8002430:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002432:	e036      	b.n	80024a2 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	2200      	movs	r2, #0
 800243c:	2120      	movs	r1, #32
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 fcec 	bl	8002e1c <UART_WaitOnFlagUntilTimeout>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d005      	beq.n	8002456 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2220      	movs	r2, #32
 800244e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e032      	b.n	80024bc <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10c      	bne.n	8002476 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002462:	b29a      	uxth	r2, r3
 8002464:	8a7b      	ldrh	r3, [r7, #18]
 8002466:	4013      	ands	r3, r2
 8002468:	b29a      	uxth	r2, r3
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	3302      	adds	r3, #2
 8002472:	61bb      	str	r3, [r7, #24]
 8002474:	e00c      	b.n	8002490 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247c:	b2da      	uxtb	r2, r3
 800247e:	8a7b      	ldrh	r3, [r7, #18]
 8002480:	b2db      	uxtb	r3, r3
 8002482:	4013      	ands	r3, r2
 8002484:	b2da      	uxtb	r2, r3
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	3301      	adds	r3, #1
 800248e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002496:	b29b      	uxth	r3, r3
 8002498:	3b01      	subs	r3, #1
 800249a:	b29a      	uxth	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1c2      	bne.n	8002434 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2220      	movs	r2, #32
 80024b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	e000      	b.n	80024bc <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80024ba:	2302      	movs	r3, #2
  }
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3720      	adds	r7, #32
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b091      	sub	sp, #68	@ 0x44
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	4613      	mov	r3, r2
 80024d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024d8:	2b20      	cmp	r3, #32
 80024da:	d178      	bne.n	80025ce <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d002      	beq.n	80024e8 <HAL_UART_Transmit_IT+0x24>
 80024e2:	88fb      	ldrh	r3, [r7, #6]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e071      	b.n	80025d0 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	88fa      	ldrh	r2, [r7, #6]
 80024f6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	88fa      	ldrh	r2, [r7, #6]
 80024fe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2221      	movs	r2, #33	@ 0x21
 8002514:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800251c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002520:	d12a      	bne.n	8002578 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800252a:	d107      	bne.n	800253c <HAL_UART_Transmit_IT+0x78>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d103      	bne.n	800253c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4a29      	ldr	r2, [pc, #164]	@ (80025dc <HAL_UART_Transmit_IT+0x118>)
 8002538:	679a      	str	r2, [r3, #120]	@ 0x78
 800253a:	e002      	b.n	8002542 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4a28      	ldr	r2, [pc, #160]	@ (80025e0 <HAL_UART_Transmit_IT+0x11c>)
 8002540:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	3308      	adds	r3, #8
 8002548:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800254a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800254c:	e853 3f00 	ldrex	r3, [r3]
 8002550:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002554:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002558:	63bb      	str	r3, [r7, #56]	@ 0x38
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	3308      	adds	r3, #8
 8002560:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002562:	637a      	str	r2, [r7, #52]	@ 0x34
 8002564:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002566:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002568:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800256a:	e841 2300 	strex	r3, r2, [r1]
 800256e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1e5      	bne.n	8002542 <HAL_UART_Transmit_IT+0x7e>
 8002576:	e028      	b.n	80025ca <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002580:	d107      	bne.n	8002592 <HAL_UART_Transmit_IT+0xce>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d103      	bne.n	8002592 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4a15      	ldr	r2, [pc, #84]	@ (80025e4 <HAL_UART_Transmit_IT+0x120>)
 800258e:	679a      	str	r2, [r3, #120]	@ 0x78
 8002590:	e002      	b.n	8002598 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	4a14      	ldr	r2, [pc, #80]	@ (80025e8 <HAL_UART_Transmit_IT+0x124>)
 8002596:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	e853 3f00 	ldrex	r3, [r3]
 80025a4:	613b      	str	r3, [r7, #16]
   return(result);
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	461a      	mov	r2, r3
 80025b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025b6:	623b      	str	r3, [r7, #32]
 80025b8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ba:	69f9      	ldr	r1, [r7, #28]
 80025bc:	6a3a      	ldr	r2, [r7, #32]
 80025be:	e841 2300 	strex	r3, r2, [r1]
 80025c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1e6      	bne.n	8002598 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 80025ca:	2300      	movs	r3, #0
 80025cc:	e000      	b.n	80025d0 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80025ce:	2302      	movs	r3, #2
  }
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3744      	adds	r7, #68	@ 0x44
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	0800321d 	.word	0x0800321d
 80025e0:	0800313d 	.word	0x0800313d
 80025e4:	0800307b 	.word	0x0800307b
 80025e8:	08002fc3 	.word	0x08002fc3

080025ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025f0:	b08c      	sub	sp, #48	@ 0x30
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80025f6:	2300      	movs	r3, #0
 80025f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	431a      	orrs	r2, r3
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	431a      	orrs	r2, r3
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	4313      	orrs	r3, r2
 8002612:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	4bab      	ldr	r3, [pc, #684]	@ (80028c8 <UART_SetConfig+0x2dc>)
 800261c:	4013      	ands	r3, r2
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	6812      	ldr	r2, [r2, #0]
 8002622:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002624:	430b      	orrs	r3, r1
 8002626:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4aa0      	ldr	r2, [pc, #640]	@ (80028cc <UART_SetConfig+0x2e0>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d004      	beq.n	8002658 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002654:	4313      	orrs	r3, r2
 8002656:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002662:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800266c:	430b      	orrs	r3, r1
 800266e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002676:	f023 010f 	bic.w	r1, r3, #15
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a91      	ldr	r2, [pc, #580]	@ (80028d0 <UART_SetConfig+0x2e4>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d125      	bne.n	80026dc <UART_SetConfig+0xf0>
 8002690:	4b90      	ldr	r3, [pc, #576]	@ (80028d4 <UART_SetConfig+0x2e8>)
 8002692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	2b03      	cmp	r3, #3
 800269c:	d81a      	bhi.n	80026d4 <UART_SetConfig+0xe8>
 800269e:	a201      	add	r2, pc, #4	@ (adr r2, 80026a4 <UART_SetConfig+0xb8>)
 80026a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a4:	080026b5 	.word	0x080026b5
 80026a8:	080026c5 	.word	0x080026c5
 80026ac:	080026bd 	.word	0x080026bd
 80026b0:	080026cd 	.word	0x080026cd
 80026b4:	2301      	movs	r3, #1
 80026b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80026ba:	e0d6      	b.n	800286a <UART_SetConfig+0x27e>
 80026bc:	2302      	movs	r3, #2
 80026be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80026c2:	e0d2      	b.n	800286a <UART_SetConfig+0x27e>
 80026c4:	2304      	movs	r3, #4
 80026c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80026ca:	e0ce      	b.n	800286a <UART_SetConfig+0x27e>
 80026cc:	2308      	movs	r3, #8
 80026ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80026d2:	e0ca      	b.n	800286a <UART_SetConfig+0x27e>
 80026d4:	2310      	movs	r3, #16
 80026d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80026da:	e0c6      	b.n	800286a <UART_SetConfig+0x27e>
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a7d      	ldr	r2, [pc, #500]	@ (80028d8 <UART_SetConfig+0x2ec>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d138      	bne.n	8002758 <UART_SetConfig+0x16c>
 80026e6:	4b7b      	ldr	r3, [pc, #492]	@ (80028d4 <UART_SetConfig+0x2e8>)
 80026e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ec:	f003 030c 	and.w	r3, r3, #12
 80026f0:	2b0c      	cmp	r3, #12
 80026f2:	d82d      	bhi.n	8002750 <UART_SetConfig+0x164>
 80026f4:	a201      	add	r2, pc, #4	@ (adr r2, 80026fc <UART_SetConfig+0x110>)
 80026f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026fa:	bf00      	nop
 80026fc:	08002731 	.word	0x08002731
 8002700:	08002751 	.word	0x08002751
 8002704:	08002751 	.word	0x08002751
 8002708:	08002751 	.word	0x08002751
 800270c:	08002741 	.word	0x08002741
 8002710:	08002751 	.word	0x08002751
 8002714:	08002751 	.word	0x08002751
 8002718:	08002751 	.word	0x08002751
 800271c:	08002739 	.word	0x08002739
 8002720:	08002751 	.word	0x08002751
 8002724:	08002751 	.word	0x08002751
 8002728:	08002751 	.word	0x08002751
 800272c:	08002749 	.word	0x08002749
 8002730:	2300      	movs	r3, #0
 8002732:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002736:	e098      	b.n	800286a <UART_SetConfig+0x27e>
 8002738:	2302      	movs	r3, #2
 800273a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800273e:	e094      	b.n	800286a <UART_SetConfig+0x27e>
 8002740:	2304      	movs	r3, #4
 8002742:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002746:	e090      	b.n	800286a <UART_SetConfig+0x27e>
 8002748:	2308      	movs	r3, #8
 800274a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800274e:	e08c      	b.n	800286a <UART_SetConfig+0x27e>
 8002750:	2310      	movs	r3, #16
 8002752:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002756:	e088      	b.n	800286a <UART_SetConfig+0x27e>
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a5f      	ldr	r2, [pc, #380]	@ (80028dc <UART_SetConfig+0x2f0>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d125      	bne.n	80027ae <UART_SetConfig+0x1c2>
 8002762:	4b5c      	ldr	r3, [pc, #368]	@ (80028d4 <UART_SetConfig+0x2e8>)
 8002764:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002768:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800276c:	2b30      	cmp	r3, #48	@ 0x30
 800276e:	d016      	beq.n	800279e <UART_SetConfig+0x1b2>
 8002770:	2b30      	cmp	r3, #48	@ 0x30
 8002772:	d818      	bhi.n	80027a6 <UART_SetConfig+0x1ba>
 8002774:	2b20      	cmp	r3, #32
 8002776:	d00a      	beq.n	800278e <UART_SetConfig+0x1a2>
 8002778:	2b20      	cmp	r3, #32
 800277a:	d814      	bhi.n	80027a6 <UART_SetConfig+0x1ba>
 800277c:	2b00      	cmp	r3, #0
 800277e:	d002      	beq.n	8002786 <UART_SetConfig+0x19a>
 8002780:	2b10      	cmp	r3, #16
 8002782:	d008      	beq.n	8002796 <UART_SetConfig+0x1aa>
 8002784:	e00f      	b.n	80027a6 <UART_SetConfig+0x1ba>
 8002786:	2300      	movs	r3, #0
 8002788:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800278c:	e06d      	b.n	800286a <UART_SetConfig+0x27e>
 800278e:	2302      	movs	r3, #2
 8002790:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002794:	e069      	b.n	800286a <UART_SetConfig+0x27e>
 8002796:	2304      	movs	r3, #4
 8002798:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800279c:	e065      	b.n	800286a <UART_SetConfig+0x27e>
 800279e:	2308      	movs	r3, #8
 80027a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027a4:	e061      	b.n	800286a <UART_SetConfig+0x27e>
 80027a6:	2310      	movs	r3, #16
 80027a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027ac:	e05d      	b.n	800286a <UART_SetConfig+0x27e>
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a4b      	ldr	r2, [pc, #300]	@ (80028e0 <UART_SetConfig+0x2f4>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d125      	bne.n	8002804 <UART_SetConfig+0x218>
 80027b8:	4b46      	ldr	r3, [pc, #280]	@ (80028d4 <UART_SetConfig+0x2e8>)
 80027ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027be:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80027c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80027c4:	d016      	beq.n	80027f4 <UART_SetConfig+0x208>
 80027c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80027c8:	d818      	bhi.n	80027fc <UART_SetConfig+0x210>
 80027ca:	2b80      	cmp	r3, #128	@ 0x80
 80027cc:	d00a      	beq.n	80027e4 <UART_SetConfig+0x1f8>
 80027ce:	2b80      	cmp	r3, #128	@ 0x80
 80027d0:	d814      	bhi.n	80027fc <UART_SetConfig+0x210>
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d002      	beq.n	80027dc <UART_SetConfig+0x1f0>
 80027d6:	2b40      	cmp	r3, #64	@ 0x40
 80027d8:	d008      	beq.n	80027ec <UART_SetConfig+0x200>
 80027da:	e00f      	b.n	80027fc <UART_SetConfig+0x210>
 80027dc:	2300      	movs	r3, #0
 80027de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027e2:	e042      	b.n	800286a <UART_SetConfig+0x27e>
 80027e4:	2302      	movs	r3, #2
 80027e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027ea:	e03e      	b.n	800286a <UART_SetConfig+0x27e>
 80027ec:	2304      	movs	r3, #4
 80027ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027f2:	e03a      	b.n	800286a <UART_SetConfig+0x27e>
 80027f4:	2308      	movs	r3, #8
 80027f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027fa:	e036      	b.n	800286a <UART_SetConfig+0x27e>
 80027fc:	2310      	movs	r3, #16
 80027fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002802:	e032      	b.n	800286a <UART_SetConfig+0x27e>
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a30      	ldr	r2, [pc, #192]	@ (80028cc <UART_SetConfig+0x2e0>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d12a      	bne.n	8002864 <UART_SetConfig+0x278>
 800280e:	4b31      	ldr	r3, [pc, #196]	@ (80028d4 <UART_SetConfig+0x2e8>)
 8002810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002814:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002818:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800281c:	d01a      	beq.n	8002854 <UART_SetConfig+0x268>
 800281e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002822:	d81b      	bhi.n	800285c <UART_SetConfig+0x270>
 8002824:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002828:	d00c      	beq.n	8002844 <UART_SetConfig+0x258>
 800282a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800282e:	d815      	bhi.n	800285c <UART_SetConfig+0x270>
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <UART_SetConfig+0x250>
 8002834:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002838:	d008      	beq.n	800284c <UART_SetConfig+0x260>
 800283a:	e00f      	b.n	800285c <UART_SetConfig+0x270>
 800283c:	2300      	movs	r3, #0
 800283e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002842:	e012      	b.n	800286a <UART_SetConfig+0x27e>
 8002844:	2302      	movs	r3, #2
 8002846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800284a:	e00e      	b.n	800286a <UART_SetConfig+0x27e>
 800284c:	2304      	movs	r3, #4
 800284e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002852:	e00a      	b.n	800286a <UART_SetConfig+0x27e>
 8002854:	2308      	movs	r3, #8
 8002856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800285a:	e006      	b.n	800286a <UART_SetConfig+0x27e>
 800285c:	2310      	movs	r3, #16
 800285e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002862:	e002      	b.n	800286a <UART_SetConfig+0x27e>
 8002864:	2310      	movs	r3, #16
 8002866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a17      	ldr	r2, [pc, #92]	@ (80028cc <UART_SetConfig+0x2e0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	f040 80a8 	bne.w	80029c6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002876:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800287a:	2b08      	cmp	r3, #8
 800287c:	d834      	bhi.n	80028e8 <UART_SetConfig+0x2fc>
 800287e:	a201      	add	r2, pc, #4	@ (adr r2, 8002884 <UART_SetConfig+0x298>)
 8002880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002884:	080028a9 	.word	0x080028a9
 8002888:	080028e9 	.word	0x080028e9
 800288c:	080028b1 	.word	0x080028b1
 8002890:	080028e9 	.word	0x080028e9
 8002894:	080028b7 	.word	0x080028b7
 8002898:	080028e9 	.word	0x080028e9
 800289c:	080028e9 	.word	0x080028e9
 80028a0:	080028e9 	.word	0x080028e9
 80028a4:	080028bf 	.word	0x080028bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028a8:	f7ff fa04 	bl	8001cb4 <HAL_RCC_GetPCLK1Freq>
 80028ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80028ae:	e021      	b.n	80028f4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028b0:	4b0c      	ldr	r3, [pc, #48]	@ (80028e4 <UART_SetConfig+0x2f8>)
 80028b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80028b4:	e01e      	b.n	80028f4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028b6:	f7ff f98f 	bl	8001bd8 <HAL_RCC_GetSysClockFreq>
 80028ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80028bc:	e01a      	b.n	80028f4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80028c4:	e016      	b.n	80028f4 <UART_SetConfig+0x308>
 80028c6:	bf00      	nop
 80028c8:	cfff69f3 	.word	0xcfff69f3
 80028cc:	40008000 	.word	0x40008000
 80028d0:	40013800 	.word	0x40013800
 80028d4:	40021000 	.word	0x40021000
 80028d8:	40004400 	.word	0x40004400
 80028dc:	40004800 	.word	0x40004800
 80028e0:	40004c00 	.word	0x40004c00
 80028e4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80028f2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80028f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 812a 	beq.w	8002b50 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002900:	4a9e      	ldr	r2, [pc, #632]	@ (8002b7c <UART_SetConfig+0x590>)
 8002902:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002906:	461a      	mov	r2, r3
 8002908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290a:	fbb3 f3f2 	udiv	r3, r3, r2
 800290e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	4613      	mov	r3, r2
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	4413      	add	r3, r2
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	429a      	cmp	r2, r3
 800291e:	d305      	bcc.n	800292c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	429a      	cmp	r2, r3
 800292a:	d903      	bls.n	8002934 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002932:	e10d      	b.n	8002b50 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002936:	2200      	movs	r2, #0
 8002938:	60bb      	str	r3, [r7, #8]
 800293a:	60fa      	str	r2, [r7, #12]
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002940:	4a8e      	ldr	r2, [pc, #568]	@ (8002b7c <UART_SetConfig+0x590>)
 8002942:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002946:	b29b      	uxth	r3, r3
 8002948:	2200      	movs	r2, #0
 800294a:	603b      	str	r3, [r7, #0]
 800294c:	607a      	str	r2, [r7, #4]
 800294e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002952:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002956:	f7fd fc5f 	bl	8000218 <__aeabi_uldivmod>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	4610      	mov	r0, r2
 8002960:	4619      	mov	r1, r3
 8002962:	f04f 0200 	mov.w	r2, #0
 8002966:	f04f 0300 	mov.w	r3, #0
 800296a:	020b      	lsls	r3, r1, #8
 800296c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002970:	0202      	lsls	r2, r0, #8
 8002972:	6979      	ldr	r1, [r7, #20]
 8002974:	6849      	ldr	r1, [r1, #4]
 8002976:	0849      	lsrs	r1, r1, #1
 8002978:	2000      	movs	r0, #0
 800297a:	460c      	mov	r4, r1
 800297c:	4605      	mov	r5, r0
 800297e:	eb12 0804 	adds.w	r8, r2, r4
 8002982:	eb43 0905 	adc.w	r9, r3, r5
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	469a      	mov	sl, r3
 800298e:	4693      	mov	fp, r2
 8002990:	4652      	mov	r2, sl
 8002992:	465b      	mov	r3, fp
 8002994:	4640      	mov	r0, r8
 8002996:	4649      	mov	r1, r9
 8002998:	f7fd fc3e 	bl	8000218 <__aeabi_uldivmod>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4613      	mov	r3, r2
 80029a2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80029aa:	d308      	bcc.n	80029be <UART_SetConfig+0x3d2>
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029b2:	d204      	bcs.n	80029be <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6a3a      	ldr	r2, [r7, #32]
 80029ba:	60da      	str	r2, [r3, #12]
 80029bc:	e0c8      	b.n	8002b50 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80029c4:	e0c4      	b.n	8002b50 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029ce:	d167      	bne.n	8002aa0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80029d0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d828      	bhi.n	8002a2a <UART_SetConfig+0x43e>
 80029d8:	a201      	add	r2, pc, #4	@ (adr r2, 80029e0 <UART_SetConfig+0x3f4>)
 80029da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029de:	bf00      	nop
 80029e0:	08002a05 	.word	0x08002a05
 80029e4:	08002a0d 	.word	0x08002a0d
 80029e8:	08002a15 	.word	0x08002a15
 80029ec:	08002a2b 	.word	0x08002a2b
 80029f0:	08002a1b 	.word	0x08002a1b
 80029f4:	08002a2b 	.word	0x08002a2b
 80029f8:	08002a2b 	.word	0x08002a2b
 80029fc:	08002a2b 	.word	0x08002a2b
 8002a00:	08002a23 	.word	0x08002a23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a04:	f7ff f956 	bl	8001cb4 <HAL_RCC_GetPCLK1Freq>
 8002a08:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002a0a:	e014      	b.n	8002a36 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a0c:	f7ff f968 	bl	8001ce0 <HAL_RCC_GetPCLK2Freq>
 8002a10:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002a12:	e010      	b.n	8002a36 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a14:	4b5a      	ldr	r3, [pc, #360]	@ (8002b80 <UART_SetConfig+0x594>)
 8002a16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002a18:	e00d      	b.n	8002a36 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a1a:	f7ff f8dd 	bl	8001bd8 <HAL_RCC_GetSysClockFreq>
 8002a1e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002a20:	e009      	b.n	8002a36 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002a28:	e005      	b.n	8002a36 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002a34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 8089 	beq.w	8002b50 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a42:	4a4e      	ldr	r2, [pc, #312]	@ (8002b7c <UART_SetConfig+0x590>)
 8002a44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a48:	461a      	mov	r2, r3
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a50:	005a      	lsls	r2, r3, #1
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	085b      	lsrs	r3, r3, #1
 8002a58:	441a      	add	r2, r3
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a62:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a64:	6a3b      	ldr	r3, [r7, #32]
 8002a66:	2b0f      	cmp	r3, #15
 8002a68:	d916      	bls.n	8002a98 <UART_SetConfig+0x4ac>
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
 8002a6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a70:	d212      	bcs.n	8002a98 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	f023 030f 	bic.w	r3, r3, #15
 8002a7a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	085b      	lsrs	r3, r3, #1
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	8bfb      	ldrh	r3, [r7, #30]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	8bfa      	ldrh	r2, [r7, #30]
 8002a94:	60da      	str	r2, [r3, #12]
 8002a96:	e05b      	b.n	8002b50 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002a9e:	e057      	b.n	8002b50 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002aa0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d828      	bhi.n	8002afa <UART_SetConfig+0x50e>
 8002aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8002ab0 <UART_SetConfig+0x4c4>)
 8002aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aae:	bf00      	nop
 8002ab0:	08002ad5 	.word	0x08002ad5
 8002ab4:	08002add 	.word	0x08002add
 8002ab8:	08002ae5 	.word	0x08002ae5
 8002abc:	08002afb 	.word	0x08002afb
 8002ac0:	08002aeb 	.word	0x08002aeb
 8002ac4:	08002afb 	.word	0x08002afb
 8002ac8:	08002afb 	.word	0x08002afb
 8002acc:	08002afb 	.word	0x08002afb
 8002ad0:	08002af3 	.word	0x08002af3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ad4:	f7ff f8ee 	bl	8001cb4 <HAL_RCC_GetPCLK1Freq>
 8002ad8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002ada:	e014      	b.n	8002b06 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002adc:	f7ff f900 	bl	8001ce0 <HAL_RCC_GetPCLK2Freq>
 8002ae0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002ae2:	e010      	b.n	8002b06 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ae4:	4b26      	ldr	r3, [pc, #152]	@ (8002b80 <UART_SetConfig+0x594>)
 8002ae6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002ae8:	e00d      	b.n	8002b06 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002aea:	f7ff f875 	bl	8001bd8 <HAL_RCC_GetSysClockFreq>
 8002aee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002af0:	e009      	b.n	8002b06 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002af2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002af6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002af8:	e005      	b.n	8002b06 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002b04:	bf00      	nop
    }

    if (pclk != 0U)
 8002b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d021      	beq.n	8002b50 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b10:	4a1a      	ldr	r2, [pc, #104]	@ (8002b7c <UART_SetConfig+0x590>)
 8002b12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b16:	461a      	mov	r2, r3
 8002b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	085b      	lsrs	r3, r3, #1
 8002b24:	441a      	add	r2, r3
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	2b0f      	cmp	r3, #15
 8002b34:	d909      	bls.n	8002b4a <UART_SetConfig+0x55e>
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b3c:	d205      	bcs.n	8002b4a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	60da      	str	r2, [r3, #12]
 8002b48:	e002      	b.n	8002b50 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	2200      	movs	r2, #0
 8002b64:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002b6c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3730      	adds	r7, #48	@ 0x30
 8002b74:	46bd      	mov	sp, r7
 8002b76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b7a:	bf00      	nop
 8002b7c:	08003edc 	.word	0x08003edc
 8002b80:	00f42400 	.word	0x00f42400

08002b84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b90:	f003 0308 	and.w	r3, r3, #8
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00a      	beq.n	8002bae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00a      	beq.n	8002bd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00a      	beq.n	8002bf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf6:	f003 0304 	and.w	r3, r3, #4
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00a      	beq.n	8002c14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c18:	f003 0310 	and.w	r3, r3, #16
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00a      	beq.n	8002c36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c3a:	f003 0320 	and.w	r3, r3, #32
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00a      	beq.n	8002c58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d01a      	beq.n	8002c9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c82:	d10a      	bne.n	8002c9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00a      	beq.n	8002cbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	605a      	str	r2, [r3, #4]
  }
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b098      	sub	sp, #96	@ 0x60
 8002ccc:	af02      	add	r7, sp, #8
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002cd8:	f7fd ffe8 	bl	8000cac <HAL_GetTick>
 8002cdc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0308 	and.w	r3, r3, #8
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d12f      	bne.n	8002d4c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f88e 	bl	8002e1c <UART_WaitOnFlagUntilTimeout>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d022      	beq.n	8002d4c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d0e:	e853 3f00 	ldrex	r3, [r3]
 8002d12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	461a      	mov	r2, r3
 8002d22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d24:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d26:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002d2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d2c:	e841 2300 	strex	r3, r2, [r1]
 8002d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002d32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1e6      	bne.n	8002d06 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e063      	b.n	8002e14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0304 	and.w	r3, r3, #4
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d149      	bne.n	8002dee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d5a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d62:	2200      	movs	r2, #0
 8002d64:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 f857 	bl	8002e1c <UART_WaitOnFlagUntilTimeout>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d03c      	beq.n	8002dee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7c:	e853 3f00 	ldrex	r3, [r3]
 8002d80:	623b      	str	r3, [r7, #32]
   return(result);
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d92:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d94:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d9a:	e841 2300 	strex	r3, r2, [r1]
 8002d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1e6      	bne.n	8002d74 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	3308      	adds	r3, #8
 8002dac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	e853 3f00 	ldrex	r3, [r3]
 8002db4:	60fb      	str	r3, [r7, #12]
   return(result);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f023 0301 	bic.w	r3, r3, #1
 8002dbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	3308      	adds	r3, #8
 8002dc4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002dc6:	61fa      	str	r2, [r7, #28]
 8002dc8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dca:	69b9      	ldr	r1, [r7, #24]
 8002dcc:	69fa      	ldr	r2, [r7, #28]
 8002dce:	e841 2300 	strex	r3, r2, [r1]
 8002dd2:	617b      	str	r3, [r7, #20]
   return(result);
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1e5      	bne.n	8002da6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e012      	b.n	8002e14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2220      	movs	r2, #32
 8002df2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3758      	adds	r7, #88	@ 0x58
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	603b      	str	r3, [r7, #0]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e2c:	e04f      	b.n	8002ece <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e34:	d04b      	beq.n	8002ece <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e36:	f7fd ff39 	bl	8000cac <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d302      	bcc.n	8002e4c <UART_WaitOnFlagUntilTimeout+0x30>
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e04e      	b.n	8002eee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0304 	and.w	r3, r3, #4
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d037      	beq.n	8002ece <UART_WaitOnFlagUntilTimeout+0xb2>
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	2b80      	cmp	r3, #128	@ 0x80
 8002e62:	d034      	beq.n	8002ece <UART_WaitOnFlagUntilTimeout+0xb2>
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2b40      	cmp	r3, #64	@ 0x40
 8002e68:	d031      	beq.n	8002ece <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	f003 0308 	and.w	r3, r3, #8
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d110      	bne.n	8002e9a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2208      	movs	r2, #8
 8002e7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 f838 	bl	8002ef6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2208      	movs	r2, #8
 8002e8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e029      	b.n	8002eee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ea4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ea8:	d111      	bne.n	8002ece <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002eb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 f81e 	bl	8002ef6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e00f      	b.n	8002eee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	69da      	ldr	r2, [r3, #28]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	bf0c      	ite	eq
 8002ede:	2301      	moveq	r3, #1
 8002ee0:	2300      	movne	r3, #0
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	79fb      	ldrb	r3, [r7, #7]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d0a0      	beq.n	8002e2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b095      	sub	sp, #84	@ 0x54
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f06:	e853 3f00 	ldrex	r3, [r3]
 8002f0a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f1e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f24:	e841 2300 	strex	r3, r2, [r1]
 8002f28:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1e6      	bne.n	8002efe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	3308      	adds	r3, #8
 8002f36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	e853 3f00 	ldrex	r3, [r3]
 8002f3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f46:	f023 0301 	bic.w	r3, r3, #1
 8002f4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	3308      	adds	r3, #8
 8002f52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f54:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f5c:	e841 2300 	strex	r3, r2, [r1]
 8002f60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1e3      	bne.n	8002f30 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d118      	bne.n	8002fa2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	e853 3f00 	ldrex	r3, [r3]
 8002f7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	f023 0310 	bic.w	r3, r3, #16
 8002f84:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f8e:	61bb      	str	r3, [r7, #24]
 8002f90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f92:	6979      	ldr	r1, [r7, #20]
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	e841 2300 	strex	r3, r2, [r1]
 8002f9a:	613b      	str	r3, [r7, #16]
   return(result);
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1e6      	bne.n	8002f70 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002fb6:	bf00      	nop
 8002fb8:	3754      	adds	r7, #84	@ 0x54
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b08f      	sub	sp, #60	@ 0x3c
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd0:	2b21      	cmp	r3, #33	@ 0x21
 8002fd2:	d14c      	bne.n	800306e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d132      	bne.n	8003046 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	e853 3f00 	ldrex	r3, [r3]
 8002fec:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ff4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003000:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003002:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003004:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003006:	e841 2300 	strex	r3, r2, [r1]
 800300a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800300c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1e6      	bne.n	8002fe0 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	e853 3f00 	ldrex	r3, [r3]
 800301e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003026:	633b      	str	r3, [r7, #48]	@ 0x30
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	461a      	mov	r2, r3
 800302e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003030:	61bb      	str	r3, [r7, #24]
 8003032:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003034:	6979      	ldr	r1, [r7, #20]
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	e841 2300 	strex	r3, r2, [r1]
 800303c:	613b      	str	r3, [r7, #16]
   return(result);
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1e6      	bne.n	8003012 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003044:	e013      	b.n	800306e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800304a:	781a      	ldrb	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003056:	1c5a      	adds	r2, r3, #1
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003062:	b29b      	uxth	r3, r3
 8003064:	3b01      	subs	r3, #1
 8003066:	b29a      	uxth	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800306e:	bf00      	nop
 8003070:	373c      	adds	r7, #60	@ 0x3c
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800307a:	b480      	push	{r7}
 800307c:	b091      	sub	sp, #68	@ 0x44
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003088:	2b21      	cmp	r3, #33	@ 0x21
 800308a:	d151      	bne.n	8003130 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003092:	b29b      	uxth	r3, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	d132      	bne.n	80030fe <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a0:	e853 3f00 	ldrex	r3, [r3]
 80030a4:	623b      	str	r3, [r7, #32]
   return(result);
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	461a      	mov	r2, r3
 80030b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80030b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030be:	e841 2300 	strex	r3, r2, [r1]
 80030c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80030c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1e6      	bne.n	8003098 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	e853 3f00 	ldrex	r3, [r3]
 80030d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030de:	637b      	str	r3, [r7, #52]	@ 0x34
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	461a      	mov	r2, r3
 80030e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030e8:	61fb      	str	r3, [r7, #28]
 80030ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ec:	69b9      	ldr	r1, [r7, #24]
 80030ee:	69fa      	ldr	r2, [r7, #28]
 80030f0:	e841 2300 	strex	r3, r2, [r1]
 80030f4:	617b      	str	r3, [r7, #20]
   return(result);
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1e6      	bne.n	80030ca <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80030fc:	e018      	b.n	8003130 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003102:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003104:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	461a      	mov	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003112:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003118:	1c9a      	adds	r2, r3, #2
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003124:	b29b      	uxth	r3, r3
 8003126:	3b01      	subs	r3, #1
 8003128:	b29a      	uxth	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8003130:	bf00      	nop
 8003132:	3744      	adds	r7, #68	@ 0x44
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800313c:	b480      	push	{r7}
 800313e:	b091      	sub	sp, #68	@ 0x44
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800314a:	2b21      	cmp	r3, #33	@ 0x21
 800314c:	d160      	bne.n	8003210 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003154:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003156:	e057      	b.n	8003208 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800315e:	b29b      	uxth	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d133      	bne.n	80031cc <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	3308      	adds	r3, #8
 800316a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316e:	e853 3f00 	ldrex	r3, [r3]
 8003172:	623b      	str	r3, [r7, #32]
   return(result);
 8003174:	6a3b      	ldr	r3, [r7, #32]
 8003176:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800317a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	3308      	adds	r3, #8
 8003182:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003184:	633a      	str	r2, [r7, #48]	@ 0x30
 8003186:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003188:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800318a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800318c:	e841 2300 	strex	r3, r2, [r1]
 8003190:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1e5      	bne.n	8003164 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	e853 3f00 	ldrex	r3, [r3]
 80031a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	461a      	mov	r2, r3
 80031b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031b6:	61fb      	str	r3, [r7, #28]
 80031b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ba:	69b9      	ldr	r1, [r7, #24]
 80031bc:	69fa      	ldr	r2, [r7, #28]
 80031be:	e841 2300 	strex	r3, r2, [r1]
 80031c2:	617b      	str	r3, [r7, #20]
   return(result);
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1e6      	bne.n	8003198 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80031ca:	e021      	b.n	8003210 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d013      	beq.n	8003202 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031de:	781a      	ldrb	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031ea:	1c5a      	adds	r2, r3, #1
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003202:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003204:	3b01      	subs	r3, #1
 8003206:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003208:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1a4      	bne.n	8003158 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800320e:	e7ff      	b.n	8003210 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8003210:	bf00      	nop
 8003212:	3744      	adds	r7, #68	@ 0x44
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800321c:	b480      	push	{r7}
 800321e:	b091      	sub	sp, #68	@ 0x44
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800322a:	2b21      	cmp	r3, #33	@ 0x21
 800322c:	d165      	bne.n	80032fa <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003234:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003236:	e05c      	b.n	80032f2 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800323e:	b29b      	uxth	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	d133      	bne.n	80032ac <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	3308      	adds	r3, #8
 800324a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324c:	6a3b      	ldr	r3, [r7, #32]
 800324e:	e853 3f00 	ldrex	r3, [r3]
 8003252:	61fb      	str	r3, [r7, #28]
   return(result);
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800325a:	637b      	str	r3, [r7, #52]	@ 0x34
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	3308      	adds	r3, #8
 8003262:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003264:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003266:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003268:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800326a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800326c:	e841 2300 	strex	r3, r2, [r1]
 8003270:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1e5      	bne.n	8003244 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	e853 3f00 	ldrex	r3, [r3]
 8003284:	60bb      	str	r3, [r7, #8]
   return(result);
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800328c:	633b      	str	r3, [r7, #48]	@ 0x30
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003296:	61bb      	str	r3, [r7, #24]
 8003298:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329a:	6979      	ldr	r1, [r7, #20]
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	e841 2300 	strex	r3, r2, [r1]
 80032a2:	613b      	str	r3, [r7, #16]
   return(result);
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1e6      	bne.n	8003278 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80032aa:	e026      	b.n	80032fa <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d018      	beq.n	80032ec <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032be:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80032c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	461a      	mov	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032ce:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032d4:	1c9a      	adds	r2, r3, #2
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	3b01      	subs	r3, #1
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80032ec:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80032ee:	3b01      	subs	r3, #1
 80032f0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80032f2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d19f      	bne.n	8003238 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80032f8:	e7ff      	b.n	80032fa <UART_TxISR_16BIT_FIFOEN+0xde>
 80032fa:	bf00      	nop
 80032fc:	3744      	adds	r7, #68	@ 0x44
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003306:	b480      	push	{r7}
 8003308:	b085      	sub	sp, #20
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003314:	2b01      	cmp	r3, #1
 8003316:	d101      	bne.n	800331c <HAL_UARTEx_DisableFifoMode+0x16>
 8003318:	2302      	movs	r3, #2
 800331a:	e027      	b.n	800336c <HAL_UARTEx_DisableFifoMode+0x66>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2224      	movs	r2, #36	@ 0x24
 8003328:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0201 	bic.w	r2, r2, #1
 8003342:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800334a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2220      	movs	r2, #32
 800335e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800338c:	2302      	movs	r3, #2
 800338e:	e02d      	b.n	80033ec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2224      	movs	r2, #36	@ 0x24
 800339c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0201 	bic.w	r2, r2, #1
 80033b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 f84f 	bl	8003470 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2220      	movs	r2, #32
 80033de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003404:	2b01      	cmp	r3, #1
 8003406:	d101      	bne.n	800340c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003408:	2302      	movs	r3, #2
 800340a:	e02d      	b.n	8003468 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2224      	movs	r2, #36	@ 0x24
 8003418:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0201 	bic.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 f811 	bl	8003470 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2220      	movs	r2, #32
 800345a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800347c:	2b00      	cmp	r3, #0
 800347e:	d108      	bne.n	8003492 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003490:	e031      	b.n	80034f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003492:	2308      	movs	r3, #8
 8003494:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003496:	2308      	movs	r3, #8
 8003498:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	0e5b      	lsrs	r3, r3, #25
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	0f5b      	lsrs	r3, r3, #29
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80034ba:	7bbb      	ldrb	r3, [r7, #14]
 80034bc:	7b3a      	ldrb	r2, [r7, #12]
 80034be:	4911      	ldr	r1, [pc, #68]	@ (8003504 <UARTEx_SetNbDataToProcess+0x94>)
 80034c0:	5c8a      	ldrb	r2, [r1, r2]
 80034c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80034c6:	7b3a      	ldrb	r2, [r7, #12]
 80034c8:	490f      	ldr	r1, [pc, #60]	@ (8003508 <UARTEx_SetNbDataToProcess+0x98>)
 80034ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80034cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
 80034da:	7b7a      	ldrb	r2, [r7, #13]
 80034dc:	4909      	ldr	r1, [pc, #36]	@ (8003504 <UARTEx_SetNbDataToProcess+0x94>)
 80034de:	5c8a      	ldrb	r2, [r1, r2]
 80034e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80034e4:	7b7a      	ldrb	r2, [r7, #13]
 80034e6:	4908      	ldr	r1, [pc, #32]	@ (8003508 <UARTEx_SetNbDataToProcess+0x98>)
 80034e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80034ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80034f6:	bf00      	nop
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	08003ef4 	.word	0x08003ef4
 8003508:	08003efc 	.word	0x08003efc

0800350c <std>:
 800350c:	2300      	movs	r3, #0
 800350e:	b510      	push	{r4, lr}
 8003510:	4604      	mov	r4, r0
 8003512:	e9c0 3300 	strd	r3, r3, [r0]
 8003516:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800351a:	6083      	str	r3, [r0, #8]
 800351c:	8181      	strh	r1, [r0, #12]
 800351e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003520:	81c2      	strh	r2, [r0, #14]
 8003522:	6183      	str	r3, [r0, #24]
 8003524:	4619      	mov	r1, r3
 8003526:	2208      	movs	r2, #8
 8003528:	305c      	adds	r0, #92	@ 0x5c
 800352a:	f000 f9e7 	bl	80038fc <memset>
 800352e:	4b0d      	ldr	r3, [pc, #52]	@ (8003564 <std+0x58>)
 8003530:	6263      	str	r3, [r4, #36]	@ 0x24
 8003532:	4b0d      	ldr	r3, [pc, #52]	@ (8003568 <std+0x5c>)
 8003534:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003536:	4b0d      	ldr	r3, [pc, #52]	@ (800356c <std+0x60>)
 8003538:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800353a:	4b0d      	ldr	r3, [pc, #52]	@ (8003570 <std+0x64>)
 800353c:	6323      	str	r3, [r4, #48]	@ 0x30
 800353e:	4b0d      	ldr	r3, [pc, #52]	@ (8003574 <std+0x68>)
 8003540:	6224      	str	r4, [r4, #32]
 8003542:	429c      	cmp	r4, r3
 8003544:	d006      	beq.n	8003554 <std+0x48>
 8003546:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800354a:	4294      	cmp	r4, r2
 800354c:	d002      	beq.n	8003554 <std+0x48>
 800354e:	33d0      	adds	r3, #208	@ 0xd0
 8003550:	429c      	cmp	r4, r3
 8003552:	d105      	bne.n	8003560 <std+0x54>
 8003554:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800355c:	f000 ba46 	b.w	80039ec <__retarget_lock_init_recursive>
 8003560:	bd10      	pop	{r4, pc}
 8003562:	bf00      	nop
 8003564:	0800374d 	.word	0x0800374d
 8003568:	0800376f 	.word	0x0800376f
 800356c:	080037a7 	.word	0x080037a7
 8003570:	080037cb 	.word	0x080037cb
 8003574:	200001b4 	.word	0x200001b4

08003578 <stdio_exit_handler>:
 8003578:	4a02      	ldr	r2, [pc, #8]	@ (8003584 <stdio_exit_handler+0xc>)
 800357a:	4903      	ldr	r1, [pc, #12]	@ (8003588 <stdio_exit_handler+0x10>)
 800357c:	4803      	ldr	r0, [pc, #12]	@ (800358c <stdio_exit_handler+0x14>)
 800357e:	f000 b869 	b.w	8003654 <_fwalk_sglue>
 8003582:	bf00      	nop
 8003584:	2000000c 	.word	0x2000000c
 8003588:	08003ced 	.word	0x08003ced
 800358c:	2000001c 	.word	0x2000001c

08003590 <cleanup_stdio>:
 8003590:	6841      	ldr	r1, [r0, #4]
 8003592:	4b0c      	ldr	r3, [pc, #48]	@ (80035c4 <cleanup_stdio+0x34>)
 8003594:	4299      	cmp	r1, r3
 8003596:	b510      	push	{r4, lr}
 8003598:	4604      	mov	r4, r0
 800359a:	d001      	beq.n	80035a0 <cleanup_stdio+0x10>
 800359c:	f000 fba6 	bl	8003cec <_fflush_r>
 80035a0:	68a1      	ldr	r1, [r4, #8]
 80035a2:	4b09      	ldr	r3, [pc, #36]	@ (80035c8 <cleanup_stdio+0x38>)
 80035a4:	4299      	cmp	r1, r3
 80035a6:	d002      	beq.n	80035ae <cleanup_stdio+0x1e>
 80035a8:	4620      	mov	r0, r4
 80035aa:	f000 fb9f 	bl	8003cec <_fflush_r>
 80035ae:	68e1      	ldr	r1, [r4, #12]
 80035b0:	4b06      	ldr	r3, [pc, #24]	@ (80035cc <cleanup_stdio+0x3c>)
 80035b2:	4299      	cmp	r1, r3
 80035b4:	d004      	beq.n	80035c0 <cleanup_stdio+0x30>
 80035b6:	4620      	mov	r0, r4
 80035b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035bc:	f000 bb96 	b.w	8003cec <_fflush_r>
 80035c0:	bd10      	pop	{r4, pc}
 80035c2:	bf00      	nop
 80035c4:	200001b4 	.word	0x200001b4
 80035c8:	2000021c 	.word	0x2000021c
 80035cc:	20000284 	.word	0x20000284

080035d0 <global_stdio_init.part.0>:
 80035d0:	b510      	push	{r4, lr}
 80035d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003600 <global_stdio_init.part.0+0x30>)
 80035d4:	4c0b      	ldr	r4, [pc, #44]	@ (8003604 <global_stdio_init.part.0+0x34>)
 80035d6:	4a0c      	ldr	r2, [pc, #48]	@ (8003608 <global_stdio_init.part.0+0x38>)
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	4620      	mov	r0, r4
 80035dc:	2200      	movs	r2, #0
 80035de:	2104      	movs	r1, #4
 80035e0:	f7ff ff94 	bl	800350c <std>
 80035e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80035e8:	2201      	movs	r2, #1
 80035ea:	2109      	movs	r1, #9
 80035ec:	f7ff ff8e 	bl	800350c <std>
 80035f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80035f4:	2202      	movs	r2, #2
 80035f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035fa:	2112      	movs	r1, #18
 80035fc:	f7ff bf86 	b.w	800350c <std>
 8003600:	200002ec 	.word	0x200002ec
 8003604:	200001b4 	.word	0x200001b4
 8003608:	08003579 	.word	0x08003579

0800360c <__sfp_lock_acquire>:
 800360c:	4801      	ldr	r0, [pc, #4]	@ (8003614 <__sfp_lock_acquire+0x8>)
 800360e:	f000 b9ee 	b.w	80039ee <__retarget_lock_acquire_recursive>
 8003612:	bf00      	nop
 8003614:	200002f5 	.word	0x200002f5

08003618 <__sfp_lock_release>:
 8003618:	4801      	ldr	r0, [pc, #4]	@ (8003620 <__sfp_lock_release+0x8>)
 800361a:	f000 b9e9 	b.w	80039f0 <__retarget_lock_release_recursive>
 800361e:	bf00      	nop
 8003620:	200002f5 	.word	0x200002f5

08003624 <__sinit>:
 8003624:	b510      	push	{r4, lr}
 8003626:	4604      	mov	r4, r0
 8003628:	f7ff fff0 	bl	800360c <__sfp_lock_acquire>
 800362c:	6a23      	ldr	r3, [r4, #32]
 800362e:	b11b      	cbz	r3, 8003638 <__sinit+0x14>
 8003630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003634:	f7ff bff0 	b.w	8003618 <__sfp_lock_release>
 8003638:	4b04      	ldr	r3, [pc, #16]	@ (800364c <__sinit+0x28>)
 800363a:	6223      	str	r3, [r4, #32]
 800363c:	4b04      	ldr	r3, [pc, #16]	@ (8003650 <__sinit+0x2c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1f5      	bne.n	8003630 <__sinit+0xc>
 8003644:	f7ff ffc4 	bl	80035d0 <global_stdio_init.part.0>
 8003648:	e7f2      	b.n	8003630 <__sinit+0xc>
 800364a:	bf00      	nop
 800364c:	08003591 	.word	0x08003591
 8003650:	200002ec 	.word	0x200002ec

08003654 <_fwalk_sglue>:
 8003654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003658:	4607      	mov	r7, r0
 800365a:	4688      	mov	r8, r1
 800365c:	4614      	mov	r4, r2
 800365e:	2600      	movs	r6, #0
 8003660:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003664:	f1b9 0901 	subs.w	r9, r9, #1
 8003668:	d505      	bpl.n	8003676 <_fwalk_sglue+0x22>
 800366a:	6824      	ldr	r4, [r4, #0]
 800366c:	2c00      	cmp	r4, #0
 800366e:	d1f7      	bne.n	8003660 <_fwalk_sglue+0xc>
 8003670:	4630      	mov	r0, r6
 8003672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003676:	89ab      	ldrh	r3, [r5, #12]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d907      	bls.n	800368c <_fwalk_sglue+0x38>
 800367c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003680:	3301      	adds	r3, #1
 8003682:	d003      	beq.n	800368c <_fwalk_sglue+0x38>
 8003684:	4629      	mov	r1, r5
 8003686:	4638      	mov	r0, r7
 8003688:	47c0      	blx	r8
 800368a:	4306      	orrs	r6, r0
 800368c:	3568      	adds	r5, #104	@ 0x68
 800368e:	e7e9      	b.n	8003664 <_fwalk_sglue+0x10>

08003690 <_puts_r>:
 8003690:	6a03      	ldr	r3, [r0, #32]
 8003692:	b570      	push	{r4, r5, r6, lr}
 8003694:	6884      	ldr	r4, [r0, #8]
 8003696:	4605      	mov	r5, r0
 8003698:	460e      	mov	r6, r1
 800369a:	b90b      	cbnz	r3, 80036a0 <_puts_r+0x10>
 800369c:	f7ff ffc2 	bl	8003624 <__sinit>
 80036a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80036a2:	07db      	lsls	r3, r3, #31
 80036a4:	d405      	bmi.n	80036b2 <_puts_r+0x22>
 80036a6:	89a3      	ldrh	r3, [r4, #12]
 80036a8:	0598      	lsls	r0, r3, #22
 80036aa:	d402      	bmi.n	80036b2 <_puts_r+0x22>
 80036ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80036ae:	f000 f99e 	bl	80039ee <__retarget_lock_acquire_recursive>
 80036b2:	89a3      	ldrh	r3, [r4, #12]
 80036b4:	0719      	lsls	r1, r3, #28
 80036b6:	d502      	bpl.n	80036be <_puts_r+0x2e>
 80036b8:	6923      	ldr	r3, [r4, #16]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d135      	bne.n	800372a <_puts_r+0x9a>
 80036be:	4621      	mov	r1, r4
 80036c0:	4628      	mov	r0, r5
 80036c2:	f000 f8c5 	bl	8003850 <__swsetup_r>
 80036c6:	b380      	cbz	r0, 800372a <_puts_r+0x9a>
 80036c8:	f04f 35ff 	mov.w	r5, #4294967295
 80036cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80036ce:	07da      	lsls	r2, r3, #31
 80036d0:	d405      	bmi.n	80036de <_puts_r+0x4e>
 80036d2:	89a3      	ldrh	r3, [r4, #12]
 80036d4:	059b      	lsls	r3, r3, #22
 80036d6:	d402      	bmi.n	80036de <_puts_r+0x4e>
 80036d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80036da:	f000 f989 	bl	80039f0 <__retarget_lock_release_recursive>
 80036de:	4628      	mov	r0, r5
 80036e0:	bd70      	pop	{r4, r5, r6, pc}
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	da04      	bge.n	80036f0 <_puts_r+0x60>
 80036e6:	69a2      	ldr	r2, [r4, #24]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	dc17      	bgt.n	800371c <_puts_r+0x8c>
 80036ec:	290a      	cmp	r1, #10
 80036ee:	d015      	beq.n	800371c <_puts_r+0x8c>
 80036f0:	6823      	ldr	r3, [r4, #0]
 80036f2:	1c5a      	adds	r2, r3, #1
 80036f4:	6022      	str	r2, [r4, #0]
 80036f6:	7019      	strb	r1, [r3, #0]
 80036f8:	68a3      	ldr	r3, [r4, #8]
 80036fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80036fe:	3b01      	subs	r3, #1
 8003700:	60a3      	str	r3, [r4, #8]
 8003702:	2900      	cmp	r1, #0
 8003704:	d1ed      	bne.n	80036e2 <_puts_r+0x52>
 8003706:	2b00      	cmp	r3, #0
 8003708:	da11      	bge.n	800372e <_puts_r+0x9e>
 800370a:	4622      	mov	r2, r4
 800370c:	210a      	movs	r1, #10
 800370e:	4628      	mov	r0, r5
 8003710:	f000 f85f 	bl	80037d2 <__swbuf_r>
 8003714:	3001      	adds	r0, #1
 8003716:	d0d7      	beq.n	80036c8 <_puts_r+0x38>
 8003718:	250a      	movs	r5, #10
 800371a:	e7d7      	b.n	80036cc <_puts_r+0x3c>
 800371c:	4622      	mov	r2, r4
 800371e:	4628      	mov	r0, r5
 8003720:	f000 f857 	bl	80037d2 <__swbuf_r>
 8003724:	3001      	adds	r0, #1
 8003726:	d1e7      	bne.n	80036f8 <_puts_r+0x68>
 8003728:	e7ce      	b.n	80036c8 <_puts_r+0x38>
 800372a:	3e01      	subs	r6, #1
 800372c:	e7e4      	b.n	80036f8 <_puts_r+0x68>
 800372e:	6823      	ldr	r3, [r4, #0]
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	6022      	str	r2, [r4, #0]
 8003734:	220a      	movs	r2, #10
 8003736:	701a      	strb	r2, [r3, #0]
 8003738:	e7ee      	b.n	8003718 <_puts_r+0x88>
	...

0800373c <puts>:
 800373c:	4b02      	ldr	r3, [pc, #8]	@ (8003748 <puts+0xc>)
 800373e:	4601      	mov	r1, r0
 8003740:	6818      	ldr	r0, [r3, #0]
 8003742:	f7ff bfa5 	b.w	8003690 <_puts_r>
 8003746:	bf00      	nop
 8003748:	20000018 	.word	0x20000018

0800374c <__sread>:
 800374c:	b510      	push	{r4, lr}
 800374e:	460c      	mov	r4, r1
 8003750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003754:	f000 f8fc 	bl	8003950 <_read_r>
 8003758:	2800      	cmp	r0, #0
 800375a:	bfab      	itete	ge
 800375c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800375e:	89a3      	ldrhlt	r3, [r4, #12]
 8003760:	181b      	addge	r3, r3, r0
 8003762:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003766:	bfac      	ite	ge
 8003768:	6563      	strge	r3, [r4, #84]	@ 0x54
 800376a:	81a3      	strhlt	r3, [r4, #12]
 800376c:	bd10      	pop	{r4, pc}

0800376e <__swrite>:
 800376e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003772:	461f      	mov	r7, r3
 8003774:	898b      	ldrh	r3, [r1, #12]
 8003776:	05db      	lsls	r3, r3, #23
 8003778:	4605      	mov	r5, r0
 800377a:	460c      	mov	r4, r1
 800377c:	4616      	mov	r6, r2
 800377e:	d505      	bpl.n	800378c <__swrite+0x1e>
 8003780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003784:	2302      	movs	r3, #2
 8003786:	2200      	movs	r2, #0
 8003788:	f000 f8d0 	bl	800392c <_lseek_r>
 800378c:	89a3      	ldrh	r3, [r4, #12]
 800378e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003792:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003796:	81a3      	strh	r3, [r4, #12]
 8003798:	4632      	mov	r2, r6
 800379a:	463b      	mov	r3, r7
 800379c:	4628      	mov	r0, r5
 800379e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037a2:	f000 b8e7 	b.w	8003974 <_write_r>

080037a6 <__sseek>:
 80037a6:	b510      	push	{r4, lr}
 80037a8:	460c      	mov	r4, r1
 80037aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037ae:	f000 f8bd 	bl	800392c <_lseek_r>
 80037b2:	1c43      	adds	r3, r0, #1
 80037b4:	89a3      	ldrh	r3, [r4, #12]
 80037b6:	bf15      	itete	ne
 80037b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80037ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80037be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80037c2:	81a3      	strheq	r3, [r4, #12]
 80037c4:	bf18      	it	ne
 80037c6:	81a3      	strhne	r3, [r4, #12]
 80037c8:	bd10      	pop	{r4, pc}

080037ca <__sclose>:
 80037ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037ce:	f000 b89d 	b.w	800390c <_close_r>

080037d2 <__swbuf_r>:
 80037d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d4:	460e      	mov	r6, r1
 80037d6:	4614      	mov	r4, r2
 80037d8:	4605      	mov	r5, r0
 80037da:	b118      	cbz	r0, 80037e4 <__swbuf_r+0x12>
 80037dc:	6a03      	ldr	r3, [r0, #32]
 80037de:	b90b      	cbnz	r3, 80037e4 <__swbuf_r+0x12>
 80037e0:	f7ff ff20 	bl	8003624 <__sinit>
 80037e4:	69a3      	ldr	r3, [r4, #24]
 80037e6:	60a3      	str	r3, [r4, #8]
 80037e8:	89a3      	ldrh	r3, [r4, #12]
 80037ea:	071a      	lsls	r2, r3, #28
 80037ec:	d501      	bpl.n	80037f2 <__swbuf_r+0x20>
 80037ee:	6923      	ldr	r3, [r4, #16]
 80037f0:	b943      	cbnz	r3, 8003804 <__swbuf_r+0x32>
 80037f2:	4621      	mov	r1, r4
 80037f4:	4628      	mov	r0, r5
 80037f6:	f000 f82b 	bl	8003850 <__swsetup_r>
 80037fa:	b118      	cbz	r0, 8003804 <__swbuf_r+0x32>
 80037fc:	f04f 37ff 	mov.w	r7, #4294967295
 8003800:	4638      	mov	r0, r7
 8003802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003804:	6823      	ldr	r3, [r4, #0]
 8003806:	6922      	ldr	r2, [r4, #16]
 8003808:	1a98      	subs	r0, r3, r2
 800380a:	6963      	ldr	r3, [r4, #20]
 800380c:	b2f6      	uxtb	r6, r6
 800380e:	4283      	cmp	r3, r0
 8003810:	4637      	mov	r7, r6
 8003812:	dc05      	bgt.n	8003820 <__swbuf_r+0x4e>
 8003814:	4621      	mov	r1, r4
 8003816:	4628      	mov	r0, r5
 8003818:	f000 fa68 	bl	8003cec <_fflush_r>
 800381c:	2800      	cmp	r0, #0
 800381e:	d1ed      	bne.n	80037fc <__swbuf_r+0x2a>
 8003820:	68a3      	ldr	r3, [r4, #8]
 8003822:	3b01      	subs	r3, #1
 8003824:	60a3      	str	r3, [r4, #8]
 8003826:	6823      	ldr	r3, [r4, #0]
 8003828:	1c5a      	adds	r2, r3, #1
 800382a:	6022      	str	r2, [r4, #0]
 800382c:	701e      	strb	r6, [r3, #0]
 800382e:	6962      	ldr	r2, [r4, #20]
 8003830:	1c43      	adds	r3, r0, #1
 8003832:	429a      	cmp	r2, r3
 8003834:	d004      	beq.n	8003840 <__swbuf_r+0x6e>
 8003836:	89a3      	ldrh	r3, [r4, #12]
 8003838:	07db      	lsls	r3, r3, #31
 800383a:	d5e1      	bpl.n	8003800 <__swbuf_r+0x2e>
 800383c:	2e0a      	cmp	r6, #10
 800383e:	d1df      	bne.n	8003800 <__swbuf_r+0x2e>
 8003840:	4621      	mov	r1, r4
 8003842:	4628      	mov	r0, r5
 8003844:	f000 fa52 	bl	8003cec <_fflush_r>
 8003848:	2800      	cmp	r0, #0
 800384a:	d0d9      	beq.n	8003800 <__swbuf_r+0x2e>
 800384c:	e7d6      	b.n	80037fc <__swbuf_r+0x2a>
	...

08003850 <__swsetup_r>:
 8003850:	b538      	push	{r3, r4, r5, lr}
 8003852:	4b29      	ldr	r3, [pc, #164]	@ (80038f8 <__swsetup_r+0xa8>)
 8003854:	4605      	mov	r5, r0
 8003856:	6818      	ldr	r0, [r3, #0]
 8003858:	460c      	mov	r4, r1
 800385a:	b118      	cbz	r0, 8003864 <__swsetup_r+0x14>
 800385c:	6a03      	ldr	r3, [r0, #32]
 800385e:	b90b      	cbnz	r3, 8003864 <__swsetup_r+0x14>
 8003860:	f7ff fee0 	bl	8003624 <__sinit>
 8003864:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003868:	0719      	lsls	r1, r3, #28
 800386a:	d422      	bmi.n	80038b2 <__swsetup_r+0x62>
 800386c:	06da      	lsls	r2, r3, #27
 800386e:	d407      	bmi.n	8003880 <__swsetup_r+0x30>
 8003870:	2209      	movs	r2, #9
 8003872:	602a      	str	r2, [r5, #0]
 8003874:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003878:	81a3      	strh	r3, [r4, #12]
 800387a:	f04f 30ff 	mov.w	r0, #4294967295
 800387e:	e033      	b.n	80038e8 <__swsetup_r+0x98>
 8003880:	0758      	lsls	r0, r3, #29
 8003882:	d512      	bpl.n	80038aa <__swsetup_r+0x5a>
 8003884:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003886:	b141      	cbz	r1, 800389a <__swsetup_r+0x4a>
 8003888:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800388c:	4299      	cmp	r1, r3
 800388e:	d002      	beq.n	8003896 <__swsetup_r+0x46>
 8003890:	4628      	mov	r0, r5
 8003892:	f000 f8af 	bl	80039f4 <_free_r>
 8003896:	2300      	movs	r3, #0
 8003898:	6363      	str	r3, [r4, #52]	@ 0x34
 800389a:	89a3      	ldrh	r3, [r4, #12]
 800389c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80038a0:	81a3      	strh	r3, [r4, #12]
 80038a2:	2300      	movs	r3, #0
 80038a4:	6063      	str	r3, [r4, #4]
 80038a6:	6923      	ldr	r3, [r4, #16]
 80038a8:	6023      	str	r3, [r4, #0]
 80038aa:	89a3      	ldrh	r3, [r4, #12]
 80038ac:	f043 0308 	orr.w	r3, r3, #8
 80038b0:	81a3      	strh	r3, [r4, #12]
 80038b2:	6923      	ldr	r3, [r4, #16]
 80038b4:	b94b      	cbnz	r3, 80038ca <__swsetup_r+0x7a>
 80038b6:	89a3      	ldrh	r3, [r4, #12]
 80038b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80038bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038c0:	d003      	beq.n	80038ca <__swsetup_r+0x7a>
 80038c2:	4621      	mov	r1, r4
 80038c4:	4628      	mov	r0, r5
 80038c6:	f000 fa5f 	bl	8003d88 <__smakebuf_r>
 80038ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038ce:	f013 0201 	ands.w	r2, r3, #1
 80038d2:	d00a      	beq.n	80038ea <__swsetup_r+0x9a>
 80038d4:	2200      	movs	r2, #0
 80038d6:	60a2      	str	r2, [r4, #8]
 80038d8:	6962      	ldr	r2, [r4, #20]
 80038da:	4252      	negs	r2, r2
 80038dc:	61a2      	str	r2, [r4, #24]
 80038de:	6922      	ldr	r2, [r4, #16]
 80038e0:	b942      	cbnz	r2, 80038f4 <__swsetup_r+0xa4>
 80038e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80038e6:	d1c5      	bne.n	8003874 <__swsetup_r+0x24>
 80038e8:	bd38      	pop	{r3, r4, r5, pc}
 80038ea:	0799      	lsls	r1, r3, #30
 80038ec:	bf58      	it	pl
 80038ee:	6962      	ldrpl	r2, [r4, #20]
 80038f0:	60a2      	str	r2, [r4, #8]
 80038f2:	e7f4      	b.n	80038de <__swsetup_r+0x8e>
 80038f4:	2000      	movs	r0, #0
 80038f6:	e7f7      	b.n	80038e8 <__swsetup_r+0x98>
 80038f8:	20000018 	.word	0x20000018

080038fc <memset>:
 80038fc:	4402      	add	r2, r0
 80038fe:	4603      	mov	r3, r0
 8003900:	4293      	cmp	r3, r2
 8003902:	d100      	bne.n	8003906 <memset+0xa>
 8003904:	4770      	bx	lr
 8003906:	f803 1b01 	strb.w	r1, [r3], #1
 800390a:	e7f9      	b.n	8003900 <memset+0x4>

0800390c <_close_r>:
 800390c:	b538      	push	{r3, r4, r5, lr}
 800390e:	4d06      	ldr	r5, [pc, #24]	@ (8003928 <_close_r+0x1c>)
 8003910:	2300      	movs	r3, #0
 8003912:	4604      	mov	r4, r0
 8003914:	4608      	mov	r0, r1
 8003916:	602b      	str	r3, [r5, #0]
 8003918:	f7fc ff8e 	bl	8000838 <_close>
 800391c:	1c43      	adds	r3, r0, #1
 800391e:	d102      	bne.n	8003926 <_close_r+0x1a>
 8003920:	682b      	ldr	r3, [r5, #0]
 8003922:	b103      	cbz	r3, 8003926 <_close_r+0x1a>
 8003924:	6023      	str	r3, [r4, #0]
 8003926:	bd38      	pop	{r3, r4, r5, pc}
 8003928:	200002f0 	.word	0x200002f0

0800392c <_lseek_r>:
 800392c:	b538      	push	{r3, r4, r5, lr}
 800392e:	4d07      	ldr	r5, [pc, #28]	@ (800394c <_lseek_r+0x20>)
 8003930:	4604      	mov	r4, r0
 8003932:	4608      	mov	r0, r1
 8003934:	4611      	mov	r1, r2
 8003936:	2200      	movs	r2, #0
 8003938:	602a      	str	r2, [r5, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	f7fc ffa3 	bl	8000886 <_lseek>
 8003940:	1c43      	adds	r3, r0, #1
 8003942:	d102      	bne.n	800394a <_lseek_r+0x1e>
 8003944:	682b      	ldr	r3, [r5, #0]
 8003946:	b103      	cbz	r3, 800394a <_lseek_r+0x1e>
 8003948:	6023      	str	r3, [r4, #0]
 800394a:	bd38      	pop	{r3, r4, r5, pc}
 800394c:	200002f0 	.word	0x200002f0

08003950 <_read_r>:
 8003950:	b538      	push	{r3, r4, r5, lr}
 8003952:	4d07      	ldr	r5, [pc, #28]	@ (8003970 <_read_r+0x20>)
 8003954:	4604      	mov	r4, r0
 8003956:	4608      	mov	r0, r1
 8003958:	4611      	mov	r1, r2
 800395a:	2200      	movs	r2, #0
 800395c:	602a      	str	r2, [r5, #0]
 800395e:	461a      	mov	r2, r3
 8003960:	f7fc ff31 	bl	80007c6 <_read>
 8003964:	1c43      	adds	r3, r0, #1
 8003966:	d102      	bne.n	800396e <_read_r+0x1e>
 8003968:	682b      	ldr	r3, [r5, #0]
 800396a:	b103      	cbz	r3, 800396e <_read_r+0x1e>
 800396c:	6023      	str	r3, [r4, #0]
 800396e:	bd38      	pop	{r3, r4, r5, pc}
 8003970:	200002f0 	.word	0x200002f0

08003974 <_write_r>:
 8003974:	b538      	push	{r3, r4, r5, lr}
 8003976:	4d07      	ldr	r5, [pc, #28]	@ (8003994 <_write_r+0x20>)
 8003978:	4604      	mov	r4, r0
 800397a:	4608      	mov	r0, r1
 800397c:	4611      	mov	r1, r2
 800397e:	2200      	movs	r2, #0
 8003980:	602a      	str	r2, [r5, #0]
 8003982:	461a      	mov	r2, r3
 8003984:	f7fc ff3c 	bl	8000800 <_write>
 8003988:	1c43      	adds	r3, r0, #1
 800398a:	d102      	bne.n	8003992 <_write_r+0x1e>
 800398c:	682b      	ldr	r3, [r5, #0]
 800398e:	b103      	cbz	r3, 8003992 <_write_r+0x1e>
 8003990:	6023      	str	r3, [r4, #0]
 8003992:	bd38      	pop	{r3, r4, r5, pc}
 8003994:	200002f0 	.word	0x200002f0

08003998 <__errno>:
 8003998:	4b01      	ldr	r3, [pc, #4]	@ (80039a0 <__errno+0x8>)
 800399a:	6818      	ldr	r0, [r3, #0]
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	20000018 	.word	0x20000018

080039a4 <__libc_init_array>:
 80039a4:	b570      	push	{r4, r5, r6, lr}
 80039a6:	4d0d      	ldr	r5, [pc, #52]	@ (80039dc <__libc_init_array+0x38>)
 80039a8:	4c0d      	ldr	r4, [pc, #52]	@ (80039e0 <__libc_init_array+0x3c>)
 80039aa:	1b64      	subs	r4, r4, r5
 80039ac:	10a4      	asrs	r4, r4, #2
 80039ae:	2600      	movs	r6, #0
 80039b0:	42a6      	cmp	r6, r4
 80039b2:	d109      	bne.n	80039c8 <__libc_init_array+0x24>
 80039b4:	4d0b      	ldr	r5, [pc, #44]	@ (80039e4 <__libc_init_array+0x40>)
 80039b6:	4c0c      	ldr	r4, [pc, #48]	@ (80039e8 <__libc_init_array+0x44>)
 80039b8:	f000 fa54 	bl	8003e64 <_init>
 80039bc:	1b64      	subs	r4, r4, r5
 80039be:	10a4      	asrs	r4, r4, #2
 80039c0:	2600      	movs	r6, #0
 80039c2:	42a6      	cmp	r6, r4
 80039c4:	d105      	bne.n	80039d2 <__libc_init_array+0x2e>
 80039c6:	bd70      	pop	{r4, r5, r6, pc}
 80039c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80039cc:	4798      	blx	r3
 80039ce:	3601      	adds	r6, #1
 80039d0:	e7ee      	b.n	80039b0 <__libc_init_array+0xc>
 80039d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80039d6:	4798      	blx	r3
 80039d8:	3601      	adds	r6, #1
 80039da:	e7f2      	b.n	80039c2 <__libc_init_array+0x1e>
 80039dc:	08003f0c 	.word	0x08003f0c
 80039e0:	08003f0c 	.word	0x08003f0c
 80039e4:	08003f0c 	.word	0x08003f0c
 80039e8:	08003f10 	.word	0x08003f10

080039ec <__retarget_lock_init_recursive>:
 80039ec:	4770      	bx	lr

080039ee <__retarget_lock_acquire_recursive>:
 80039ee:	4770      	bx	lr

080039f0 <__retarget_lock_release_recursive>:
 80039f0:	4770      	bx	lr
	...

080039f4 <_free_r>:
 80039f4:	b538      	push	{r3, r4, r5, lr}
 80039f6:	4605      	mov	r5, r0
 80039f8:	2900      	cmp	r1, #0
 80039fa:	d041      	beq.n	8003a80 <_free_r+0x8c>
 80039fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a00:	1f0c      	subs	r4, r1, #4
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	bfb8      	it	lt
 8003a06:	18e4      	addlt	r4, r4, r3
 8003a08:	f000 f8e0 	bl	8003bcc <__malloc_lock>
 8003a0c:	4a1d      	ldr	r2, [pc, #116]	@ (8003a84 <_free_r+0x90>)
 8003a0e:	6813      	ldr	r3, [r2, #0]
 8003a10:	b933      	cbnz	r3, 8003a20 <_free_r+0x2c>
 8003a12:	6063      	str	r3, [r4, #4]
 8003a14:	6014      	str	r4, [r2, #0]
 8003a16:	4628      	mov	r0, r5
 8003a18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a1c:	f000 b8dc 	b.w	8003bd8 <__malloc_unlock>
 8003a20:	42a3      	cmp	r3, r4
 8003a22:	d908      	bls.n	8003a36 <_free_r+0x42>
 8003a24:	6820      	ldr	r0, [r4, #0]
 8003a26:	1821      	adds	r1, r4, r0
 8003a28:	428b      	cmp	r3, r1
 8003a2a:	bf01      	itttt	eq
 8003a2c:	6819      	ldreq	r1, [r3, #0]
 8003a2e:	685b      	ldreq	r3, [r3, #4]
 8003a30:	1809      	addeq	r1, r1, r0
 8003a32:	6021      	streq	r1, [r4, #0]
 8003a34:	e7ed      	b.n	8003a12 <_free_r+0x1e>
 8003a36:	461a      	mov	r2, r3
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	b10b      	cbz	r3, 8003a40 <_free_r+0x4c>
 8003a3c:	42a3      	cmp	r3, r4
 8003a3e:	d9fa      	bls.n	8003a36 <_free_r+0x42>
 8003a40:	6811      	ldr	r1, [r2, #0]
 8003a42:	1850      	adds	r0, r2, r1
 8003a44:	42a0      	cmp	r0, r4
 8003a46:	d10b      	bne.n	8003a60 <_free_r+0x6c>
 8003a48:	6820      	ldr	r0, [r4, #0]
 8003a4a:	4401      	add	r1, r0
 8003a4c:	1850      	adds	r0, r2, r1
 8003a4e:	4283      	cmp	r3, r0
 8003a50:	6011      	str	r1, [r2, #0]
 8003a52:	d1e0      	bne.n	8003a16 <_free_r+0x22>
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	6053      	str	r3, [r2, #4]
 8003a5a:	4408      	add	r0, r1
 8003a5c:	6010      	str	r0, [r2, #0]
 8003a5e:	e7da      	b.n	8003a16 <_free_r+0x22>
 8003a60:	d902      	bls.n	8003a68 <_free_r+0x74>
 8003a62:	230c      	movs	r3, #12
 8003a64:	602b      	str	r3, [r5, #0]
 8003a66:	e7d6      	b.n	8003a16 <_free_r+0x22>
 8003a68:	6820      	ldr	r0, [r4, #0]
 8003a6a:	1821      	adds	r1, r4, r0
 8003a6c:	428b      	cmp	r3, r1
 8003a6e:	bf04      	itt	eq
 8003a70:	6819      	ldreq	r1, [r3, #0]
 8003a72:	685b      	ldreq	r3, [r3, #4]
 8003a74:	6063      	str	r3, [r4, #4]
 8003a76:	bf04      	itt	eq
 8003a78:	1809      	addeq	r1, r1, r0
 8003a7a:	6021      	streq	r1, [r4, #0]
 8003a7c:	6054      	str	r4, [r2, #4]
 8003a7e:	e7ca      	b.n	8003a16 <_free_r+0x22>
 8003a80:	bd38      	pop	{r3, r4, r5, pc}
 8003a82:	bf00      	nop
 8003a84:	200002fc 	.word	0x200002fc

08003a88 <sbrk_aligned>:
 8003a88:	b570      	push	{r4, r5, r6, lr}
 8003a8a:	4e0f      	ldr	r6, [pc, #60]	@ (8003ac8 <sbrk_aligned+0x40>)
 8003a8c:	460c      	mov	r4, r1
 8003a8e:	6831      	ldr	r1, [r6, #0]
 8003a90:	4605      	mov	r5, r0
 8003a92:	b911      	cbnz	r1, 8003a9a <sbrk_aligned+0x12>
 8003a94:	f000 f9d6 	bl	8003e44 <_sbrk_r>
 8003a98:	6030      	str	r0, [r6, #0]
 8003a9a:	4621      	mov	r1, r4
 8003a9c:	4628      	mov	r0, r5
 8003a9e:	f000 f9d1 	bl	8003e44 <_sbrk_r>
 8003aa2:	1c43      	adds	r3, r0, #1
 8003aa4:	d103      	bne.n	8003aae <sbrk_aligned+0x26>
 8003aa6:	f04f 34ff 	mov.w	r4, #4294967295
 8003aaa:	4620      	mov	r0, r4
 8003aac:	bd70      	pop	{r4, r5, r6, pc}
 8003aae:	1cc4      	adds	r4, r0, #3
 8003ab0:	f024 0403 	bic.w	r4, r4, #3
 8003ab4:	42a0      	cmp	r0, r4
 8003ab6:	d0f8      	beq.n	8003aaa <sbrk_aligned+0x22>
 8003ab8:	1a21      	subs	r1, r4, r0
 8003aba:	4628      	mov	r0, r5
 8003abc:	f000 f9c2 	bl	8003e44 <_sbrk_r>
 8003ac0:	3001      	adds	r0, #1
 8003ac2:	d1f2      	bne.n	8003aaa <sbrk_aligned+0x22>
 8003ac4:	e7ef      	b.n	8003aa6 <sbrk_aligned+0x1e>
 8003ac6:	bf00      	nop
 8003ac8:	200002f8 	.word	0x200002f8

08003acc <_malloc_r>:
 8003acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ad0:	1ccd      	adds	r5, r1, #3
 8003ad2:	f025 0503 	bic.w	r5, r5, #3
 8003ad6:	3508      	adds	r5, #8
 8003ad8:	2d0c      	cmp	r5, #12
 8003ada:	bf38      	it	cc
 8003adc:	250c      	movcc	r5, #12
 8003ade:	2d00      	cmp	r5, #0
 8003ae0:	4606      	mov	r6, r0
 8003ae2:	db01      	blt.n	8003ae8 <_malloc_r+0x1c>
 8003ae4:	42a9      	cmp	r1, r5
 8003ae6:	d904      	bls.n	8003af2 <_malloc_r+0x26>
 8003ae8:	230c      	movs	r3, #12
 8003aea:	6033      	str	r3, [r6, #0]
 8003aec:	2000      	movs	r0, #0
 8003aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003af2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003bc8 <_malloc_r+0xfc>
 8003af6:	f000 f869 	bl	8003bcc <__malloc_lock>
 8003afa:	f8d8 3000 	ldr.w	r3, [r8]
 8003afe:	461c      	mov	r4, r3
 8003b00:	bb44      	cbnz	r4, 8003b54 <_malloc_r+0x88>
 8003b02:	4629      	mov	r1, r5
 8003b04:	4630      	mov	r0, r6
 8003b06:	f7ff ffbf 	bl	8003a88 <sbrk_aligned>
 8003b0a:	1c43      	adds	r3, r0, #1
 8003b0c:	4604      	mov	r4, r0
 8003b0e:	d158      	bne.n	8003bc2 <_malloc_r+0xf6>
 8003b10:	f8d8 4000 	ldr.w	r4, [r8]
 8003b14:	4627      	mov	r7, r4
 8003b16:	2f00      	cmp	r7, #0
 8003b18:	d143      	bne.n	8003ba2 <_malloc_r+0xd6>
 8003b1a:	2c00      	cmp	r4, #0
 8003b1c:	d04b      	beq.n	8003bb6 <_malloc_r+0xea>
 8003b1e:	6823      	ldr	r3, [r4, #0]
 8003b20:	4639      	mov	r1, r7
 8003b22:	4630      	mov	r0, r6
 8003b24:	eb04 0903 	add.w	r9, r4, r3
 8003b28:	f000 f98c 	bl	8003e44 <_sbrk_r>
 8003b2c:	4581      	cmp	r9, r0
 8003b2e:	d142      	bne.n	8003bb6 <_malloc_r+0xea>
 8003b30:	6821      	ldr	r1, [r4, #0]
 8003b32:	1a6d      	subs	r5, r5, r1
 8003b34:	4629      	mov	r1, r5
 8003b36:	4630      	mov	r0, r6
 8003b38:	f7ff ffa6 	bl	8003a88 <sbrk_aligned>
 8003b3c:	3001      	adds	r0, #1
 8003b3e:	d03a      	beq.n	8003bb6 <_malloc_r+0xea>
 8003b40:	6823      	ldr	r3, [r4, #0]
 8003b42:	442b      	add	r3, r5
 8003b44:	6023      	str	r3, [r4, #0]
 8003b46:	f8d8 3000 	ldr.w	r3, [r8]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	bb62      	cbnz	r2, 8003ba8 <_malloc_r+0xdc>
 8003b4e:	f8c8 7000 	str.w	r7, [r8]
 8003b52:	e00f      	b.n	8003b74 <_malloc_r+0xa8>
 8003b54:	6822      	ldr	r2, [r4, #0]
 8003b56:	1b52      	subs	r2, r2, r5
 8003b58:	d420      	bmi.n	8003b9c <_malloc_r+0xd0>
 8003b5a:	2a0b      	cmp	r2, #11
 8003b5c:	d917      	bls.n	8003b8e <_malloc_r+0xc2>
 8003b5e:	1961      	adds	r1, r4, r5
 8003b60:	42a3      	cmp	r3, r4
 8003b62:	6025      	str	r5, [r4, #0]
 8003b64:	bf18      	it	ne
 8003b66:	6059      	strne	r1, [r3, #4]
 8003b68:	6863      	ldr	r3, [r4, #4]
 8003b6a:	bf08      	it	eq
 8003b6c:	f8c8 1000 	streq.w	r1, [r8]
 8003b70:	5162      	str	r2, [r4, r5]
 8003b72:	604b      	str	r3, [r1, #4]
 8003b74:	4630      	mov	r0, r6
 8003b76:	f000 f82f 	bl	8003bd8 <__malloc_unlock>
 8003b7a:	f104 000b 	add.w	r0, r4, #11
 8003b7e:	1d23      	adds	r3, r4, #4
 8003b80:	f020 0007 	bic.w	r0, r0, #7
 8003b84:	1ac2      	subs	r2, r0, r3
 8003b86:	bf1c      	itt	ne
 8003b88:	1a1b      	subne	r3, r3, r0
 8003b8a:	50a3      	strne	r3, [r4, r2]
 8003b8c:	e7af      	b.n	8003aee <_malloc_r+0x22>
 8003b8e:	6862      	ldr	r2, [r4, #4]
 8003b90:	42a3      	cmp	r3, r4
 8003b92:	bf0c      	ite	eq
 8003b94:	f8c8 2000 	streq.w	r2, [r8]
 8003b98:	605a      	strne	r2, [r3, #4]
 8003b9a:	e7eb      	b.n	8003b74 <_malloc_r+0xa8>
 8003b9c:	4623      	mov	r3, r4
 8003b9e:	6864      	ldr	r4, [r4, #4]
 8003ba0:	e7ae      	b.n	8003b00 <_malloc_r+0x34>
 8003ba2:	463c      	mov	r4, r7
 8003ba4:	687f      	ldr	r7, [r7, #4]
 8003ba6:	e7b6      	b.n	8003b16 <_malloc_r+0x4a>
 8003ba8:	461a      	mov	r2, r3
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	42a3      	cmp	r3, r4
 8003bae:	d1fb      	bne.n	8003ba8 <_malloc_r+0xdc>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	6053      	str	r3, [r2, #4]
 8003bb4:	e7de      	b.n	8003b74 <_malloc_r+0xa8>
 8003bb6:	230c      	movs	r3, #12
 8003bb8:	6033      	str	r3, [r6, #0]
 8003bba:	4630      	mov	r0, r6
 8003bbc:	f000 f80c 	bl	8003bd8 <__malloc_unlock>
 8003bc0:	e794      	b.n	8003aec <_malloc_r+0x20>
 8003bc2:	6005      	str	r5, [r0, #0]
 8003bc4:	e7d6      	b.n	8003b74 <_malloc_r+0xa8>
 8003bc6:	bf00      	nop
 8003bc8:	200002fc 	.word	0x200002fc

08003bcc <__malloc_lock>:
 8003bcc:	4801      	ldr	r0, [pc, #4]	@ (8003bd4 <__malloc_lock+0x8>)
 8003bce:	f7ff bf0e 	b.w	80039ee <__retarget_lock_acquire_recursive>
 8003bd2:	bf00      	nop
 8003bd4:	200002f4 	.word	0x200002f4

08003bd8 <__malloc_unlock>:
 8003bd8:	4801      	ldr	r0, [pc, #4]	@ (8003be0 <__malloc_unlock+0x8>)
 8003bda:	f7ff bf09 	b.w	80039f0 <__retarget_lock_release_recursive>
 8003bde:	bf00      	nop
 8003be0:	200002f4 	.word	0x200002f4

08003be4 <__sflush_r>:
 8003be4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bec:	0716      	lsls	r6, r2, #28
 8003bee:	4605      	mov	r5, r0
 8003bf0:	460c      	mov	r4, r1
 8003bf2:	d454      	bmi.n	8003c9e <__sflush_r+0xba>
 8003bf4:	684b      	ldr	r3, [r1, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	dc02      	bgt.n	8003c00 <__sflush_r+0x1c>
 8003bfa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	dd48      	ble.n	8003c92 <__sflush_r+0xae>
 8003c00:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003c02:	2e00      	cmp	r6, #0
 8003c04:	d045      	beq.n	8003c92 <__sflush_r+0xae>
 8003c06:	2300      	movs	r3, #0
 8003c08:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003c0c:	682f      	ldr	r7, [r5, #0]
 8003c0e:	6a21      	ldr	r1, [r4, #32]
 8003c10:	602b      	str	r3, [r5, #0]
 8003c12:	d030      	beq.n	8003c76 <__sflush_r+0x92>
 8003c14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003c16:	89a3      	ldrh	r3, [r4, #12]
 8003c18:	0759      	lsls	r1, r3, #29
 8003c1a:	d505      	bpl.n	8003c28 <__sflush_r+0x44>
 8003c1c:	6863      	ldr	r3, [r4, #4]
 8003c1e:	1ad2      	subs	r2, r2, r3
 8003c20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003c22:	b10b      	cbz	r3, 8003c28 <__sflush_r+0x44>
 8003c24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003c26:	1ad2      	subs	r2, r2, r3
 8003c28:	2300      	movs	r3, #0
 8003c2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003c2c:	6a21      	ldr	r1, [r4, #32]
 8003c2e:	4628      	mov	r0, r5
 8003c30:	47b0      	blx	r6
 8003c32:	1c43      	adds	r3, r0, #1
 8003c34:	89a3      	ldrh	r3, [r4, #12]
 8003c36:	d106      	bne.n	8003c46 <__sflush_r+0x62>
 8003c38:	6829      	ldr	r1, [r5, #0]
 8003c3a:	291d      	cmp	r1, #29
 8003c3c:	d82b      	bhi.n	8003c96 <__sflush_r+0xb2>
 8003c3e:	4a2a      	ldr	r2, [pc, #168]	@ (8003ce8 <__sflush_r+0x104>)
 8003c40:	410a      	asrs	r2, r1
 8003c42:	07d6      	lsls	r6, r2, #31
 8003c44:	d427      	bmi.n	8003c96 <__sflush_r+0xb2>
 8003c46:	2200      	movs	r2, #0
 8003c48:	6062      	str	r2, [r4, #4]
 8003c4a:	04d9      	lsls	r1, r3, #19
 8003c4c:	6922      	ldr	r2, [r4, #16]
 8003c4e:	6022      	str	r2, [r4, #0]
 8003c50:	d504      	bpl.n	8003c5c <__sflush_r+0x78>
 8003c52:	1c42      	adds	r2, r0, #1
 8003c54:	d101      	bne.n	8003c5a <__sflush_r+0x76>
 8003c56:	682b      	ldr	r3, [r5, #0]
 8003c58:	b903      	cbnz	r3, 8003c5c <__sflush_r+0x78>
 8003c5a:	6560      	str	r0, [r4, #84]	@ 0x54
 8003c5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c5e:	602f      	str	r7, [r5, #0]
 8003c60:	b1b9      	cbz	r1, 8003c92 <__sflush_r+0xae>
 8003c62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003c66:	4299      	cmp	r1, r3
 8003c68:	d002      	beq.n	8003c70 <__sflush_r+0x8c>
 8003c6a:	4628      	mov	r0, r5
 8003c6c:	f7ff fec2 	bl	80039f4 <_free_r>
 8003c70:	2300      	movs	r3, #0
 8003c72:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c74:	e00d      	b.n	8003c92 <__sflush_r+0xae>
 8003c76:	2301      	movs	r3, #1
 8003c78:	4628      	mov	r0, r5
 8003c7a:	47b0      	blx	r6
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	1c50      	adds	r0, r2, #1
 8003c80:	d1c9      	bne.n	8003c16 <__sflush_r+0x32>
 8003c82:	682b      	ldr	r3, [r5, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0c6      	beq.n	8003c16 <__sflush_r+0x32>
 8003c88:	2b1d      	cmp	r3, #29
 8003c8a:	d001      	beq.n	8003c90 <__sflush_r+0xac>
 8003c8c:	2b16      	cmp	r3, #22
 8003c8e:	d11e      	bne.n	8003cce <__sflush_r+0xea>
 8003c90:	602f      	str	r7, [r5, #0]
 8003c92:	2000      	movs	r0, #0
 8003c94:	e022      	b.n	8003cdc <__sflush_r+0xf8>
 8003c96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c9a:	b21b      	sxth	r3, r3
 8003c9c:	e01b      	b.n	8003cd6 <__sflush_r+0xf2>
 8003c9e:	690f      	ldr	r7, [r1, #16]
 8003ca0:	2f00      	cmp	r7, #0
 8003ca2:	d0f6      	beq.n	8003c92 <__sflush_r+0xae>
 8003ca4:	0793      	lsls	r3, r2, #30
 8003ca6:	680e      	ldr	r6, [r1, #0]
 8003ca8:	bf08      	it	eq
 8003caa:	694b      	ldreq	r3, [r1, #20]
 8003cac:	600f      	str	r7, [r1, #0]
 8003cae:	bf18      	it	ne
 8003cb0:	2300      	movne	r3, #0
 8003cb2:	eba6 0807 	sub.w	r8, r6, r7
 8003cb6:	608b      	str	r3, [r1, #8]
 8003cb8:	f1b8 0f00 	cmp.w	r8, #0
 8003cbc:	dde9      	ble.n	8003c92 <__sflush_r+0xae>
 8003cbe:	6a21      	ldr	r1, [r4, #32]
 8003cc0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003cc2:	4643      	mov	r3, r8
 8003cc4:	463a      	mov	r2, r7
 8003cc6:	4628      	mov	r0, r5
 8003cc8:	47b0      	blx	r6
 8003cca:	2800      	cmp	r0, #0
 8003ccc:	dc08      	bgt.n	8003ce0 <__sflush_r+0xfc>
 8003cce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cd6:	81a3      	strh	r3, [r4, #12]
 8003cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ce0:	4407      	add	r7, r0
 8003ce2:	eba8 0800 	sub.w	r8, r8, r0
 8003ce6:	e7e7      	b.n	8003cb8 <__sflush_r+0xd4>
 8003ce8:	dfbffffe 	.word	0xdfbffffe

08003cec <_fflush_r>:
 8003cec:	b538      	push	{r3, r4, r5, lr}
 8003cee:	690b      	ldr	r3, [r1, #16]
 8003cf0:	4605      	mov	r5, r0
 8003cf2:	460c      	mov	r4, r1
 8003cf4:	b913      	cbnz	r3, 8003cfc <_fflush_r+0x10>
 8003cf6:	2500      	movs	r5, #0
 8003cf8:	4628      	mov	r0, r5
 8003cfa:	bd38      	pop	{r3, r4, r5, pc}
 8003cfc:	b118      	cbz	r0, 8003d06 <_fflush_r+0x1a>
 8003cfe:	6a03      	ldr	r3, [r0, #32]
 8003d00:	b90b      	cbnz	r3, 8003d06 <_fflush_r+0x1a>
 8003d02:	f7ff fc8f 	bl	8003624 <__sinit>
 8003d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0f3      	beq.n	8003cf6 <_fflush_r+0xa>
 8003d0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003d10:	07d0      	lsls	r0, r2, #31
 8003d12:	d404      	bmi.n	8003d1e <_fflush_r+0x32>
 8003d14:	0599      	lsls	r1, r3, #22
 8003d16:	d402      	bmi.n	8003d1e <_fflush_r+0x32>
 8003d18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d1a:	f7ff fe68 	bl	80039ee <__retarget_lock_acquire_recursive>
 8003d1e:	4628      	mov	r0, r5
 8003d20:	4621      	mov	r1, r4
 8003d22:	f7ff ff5f 	bl	8003be4 <__sflush_r>
 8003d26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d28:	07da      	lsls	r2, r3, #31
 8003d2a:	4605      	mov	r5, r0
 8003d2c:	d4e4      	bmi.n	8003cf8 <_fflush_r+0xc>
 8003d2e:	89a3      	ldrh	r3, [r4, #12]
 8003d30:	059b      	lsls	r3, r3, #22
 8003d32:	d4e1      	bmi.n	8003cf8 <_fflush_r+0xc>
 8003d34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d36:	f7ff fe5b 	bl	80039f0 <__retarget_lock_release_recursive>
 8003d3a:	e7dd      	b.n	8003cf8 <_fflush_r+0xc>

08003d3c <__swhatbuf_r>:
 8003d3c:	b570      	push	{r4, r5, r6, lr}
 8003d3e:	460c      	mov	r4, r1
 8003d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d44:	2900      	cmp	r1, #0
 8003d46:	b096      	sub	sp, #88	@ 0x58
 8003d48:	4615      	mov	r5, r2
 8003d4a:	461e      	mov	r6, r3
 8003d4c:	da0d      	bge.n	8003d6a <__swhatbuf_r+0x2e>
 8003d4e:	89a3      	ldrh	r3, [r4, #12]
 8003d50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003d54:	f04f 0100 	mov.w	r1, #0
 8003d58:	bf14      	ite	ne
 8003d5a:	2340      	movne	r3, #64	@ 0x40
 8003d5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003d60:	2000      	movs	r0, #0
 8003d62:	6031      	str	r1, [r6, #0]
 8003d64:	602b      	str	r3, [r5, #0]
 8003d66:	b016      	add	sp, #88	@ 0x58
 8003d68:	bd70      	pop	{r4, r5, r6, pc}
 8003d6a:	466a      	mov	r2, sp
 8003d6c:	f000 f848 	bl	8003e00 <_fstat_r>
 8003d70:	2800      	cmp	r0, #0
 8003d72:	dbec      	blt.n	8003d4e <__swhatbuf_r+0x12>
 8003d74:	9901      	ldr	r1, [sp, #4]
 8003d76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003d7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003d7e:	4259      	negs	r1, r3
 8003d80:	4159      	adcs	r1, r3
 8003d82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d86:	e7eb      	b.n	8003d60 <__swhatbuf_r+0x24>

08003d88 <__smakebuf_r>:
 8003d88:	898b      	ldrh	r3, [r1, #12]
 8003d8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d8c:	079d      	lsls	r5, r3, #30
 8003d8e:	4606      	mov	r6, r0
 8003d90:	460c      	mov	r4, r1
 8003d92:	d507      	bpl.n	8003da4 <__smakebuf_r+0x1c>
 8003d94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003d98:	6023      	str	r3, [r4, #0]
 8003d9a:	6123      	str	r3, [r4, #16]
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	6163      	str	r3, [r4, #20]
 8003da0:	b003      	add	sp, #12
 8003da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003da4:	ab01      	add	r3, sp, #4
 8003da6:	466a      	mov	r2, sp
 8003da8:	f7ff ffc8 	bl	8003d3c <__swhatbuf_r>
 8003dac:	9f00      	ldr	r7, [sp, #0]
 8003dae:	4605      	mov	r5, r0
 8003db0:	4639      	mov	r1, r7
 8003db2:	4630      	mov	r0, r6
 8003db4:	f7ff fe8a 	bl	8003acc <_malloc_r>
 8003db8:	b948      	cbnz	r0, 8003dce <__smakebuf_r+0x46>
 8003dba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dbe:	059a      	lsls	r2, r3, #22
 8003dc0:	d4ee      	bmi.n	8003da0 <__smakebuf_r+0x18>
 8003dc2:	f023 0303 	bic.w	r3, r3, #3
 8003dc6:	f043 0302 	orr.w	r3, r3, #2
 8003dca:	81a3      	strh	r3, [r4, #12]
 8003dcc:	e7e2      	b.n	8003d94 <__smakebuf_r+0xc>
 8003dce:	89a3      	ldrh	r3, [r4, #12]
 8003dd0:	6020      	str	r0, [r4, #0]
 8003dd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dd6:	81a3      	strh	r3, [r4, #12]
 8003dd8:	9b01      	ldr	r3, [sp, #4]
 8003dda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003dde:	b15b      	cbz	r3, 8003df8 <__smakebuf_r+0x70>
 8003de0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003de4:	4630      	mov	r0, r6
 8003de6:	f000 f81d 	bl	8003e24 <_isatty_r>
 8003dea:	b128      	cbz	r0, 8003df8 <__smakebuf_r+0x70>
 8003dec:	89a3      	ldrh	r3, [r4, #12]
 8003dee:	f023 0303 	bic.w	r3, r3, #3
 8003df2:	f043 0301 	orr.w	r3, r3, #1
 8003df6:	81a3      	strh	r3, [r4, #12]
 8003df8:	89a3      	ldrh	r3, [r4, #12]
 8003dfa:	431d      	orrs	r5, r3
 8003dfc:	81a5      	strh	r5, [r4, #12]
 8003dfe:	e7cf      	b.n	8003da0 <__smakebuf_r+0x18>

08003e00 <_fstat_r>:
 8003e00:	b538      	push	{r3, r4, r5, lr}
 8003e02:	4d07      	ldr	r5, [pc, #28]	@ (8003e20 <_fstat_r+0x20>)
 8003e04:	2300      	movs	r3, #0
 8003e06:	4604      	mov	r4, r0
 8003e08:	4608      	mov	r0, r1
 8003e0a:	4611      	mov	r1, r2
 8003e0c:	602b      	str	r3, [r5, #0]
 8003e0e:	f7fc fd1f 	bl	8000850 <_fstat>
 8003e12:	1c43      	adds	r3, r0, #1
 8003e14:	d102      	bne.n	8003e1c <_fstat_r+0x1c>
 8003e16:	682b      	ldr	r3, [r5, #0]
 8003e18:	b103      	cbz	r3, 8003e1c <_fstat_r+0x1c>
 8003e1a:	6023      	str	r3, [r4, #0]
 8003e1c:	bd38      	pop	{r3, r4, r5, pc}
 8003e1e:	bf00      	nop
 8003e20:	200002f0 	.word	0x200002f0

08003e24 <_isatty_r>:
 8003e24:	b538      	push	{r3, r4, r5, lr}
 8003e26:	4d06      	ldr	r5, [pc, #24]	@ (8003e40 <_isatty_r+0x1c>)
 8003e28:	2300      	movs	r3, #0
 8003e2a:	4604      	mov	r4, r0
 8003e2c:	4608      	mov	r0, r1
 8003e2e:	602b      	str	r3, [r5, #0]
 8003e30:	f7fc fd1e 	bl	8000870 <_isatty>
 8003e34:	1c43      	adds	r3, r0, #1
 8003e36:	d102      	bne.n	8003e3e <_isatty_r+0x1a>
 8003e38:	682b      	ldr	r3, [r5, #0]
 8003e3a:	b103      	cbz	r3, 8003e3e <_isatty_r+0x1a>
 8003e3c:	6023      	str	r3, [r4, #0]
 8003e3e:	bd38      	pop	{r3, r4, r5, pc}
 8003e40:	200002f0 	.word	0x200002f0

08003e44 <_sbrk_r>:
 8003e44:	b538      	push	{r3, r4, r5, lr}
 8003e46:	4d06      	ldr	r5, [pc, #24]	@ (8003e60 <_sbrk_r+0x1c>)
 8003e48:	2300      	movs	r3, #0
 8003e4a:	4604      	mov	r4, r0
 8003e4c:	4608      	mov	r0, r1
 8003e4e:	602b      	str	r3, [r5, #0]
 8003e50:	f7fc fd26 	bl	80008a0 <_sbrk>
 8003e54:	1c43      	adds	r3, r0, #1
 8003e56:	d102      	bne.n	8003e5e <_sbrk_r+0x1a>
 8003e58:	682b      	ldr	r3, [r5, #0]
 8003e5a:	b103      	cbz	r3, 8003e5e <_sbrk_r+0x1a>
 8003e5c:	6023      	str	r3, [r4, #0]
 8003e5e:	bd38      	pop	{r3, r4, r5, pc}
 8003e60:	200002f0 	.word	0x200002f0

08003e64 <_init>:
 8003e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e66:	bf00      	nop
 8003e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e6a:	bc08      	pop	{r3}
 8003e6c:	469e      	mov	lr, r3
 8003e6e:	4770      	bx	lr

08003e70 <_fini>:
 8003e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e72:	bf00      	nop
 8003e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e76:	bc08      	pop	{r3}
 8003e78:	469e      	mov	lr, r3
 8003e7a:	4770      	bx	lr
