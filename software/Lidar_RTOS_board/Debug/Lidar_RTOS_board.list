
Lidar_RTOS_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000654c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800672c  0800672c  0000772c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067c4  080067c4  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  080067c4  080067c4  000077c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067cc  080067cc  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067cc  080067cc  000077cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080067d0  080067d0  000077d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080067d4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  20000068  0800683c  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000474  0800683c  00008474  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013cb6  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b98  00000000  00000000  0001bd4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  0001e8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000daa  00000000  00000000  0001fa88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fa51  00000000  00000000  00020832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015367  00000000  00000000  00040283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7e8a  00000000  00000000  000555ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d474  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005110  00000000  00000000  0011d4b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  001225c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006714 	.word	0x08006714

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08006714 	.word	0x08006714

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80005b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000620 <MX_DMA_Init+0x70>)
 80005b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005ba:	4a19      	ldr	r2, [pc, #100]	@ (8000620 <MX_DMA_Init+0x70>)
 80005bc:	f043 0304 	orr.w	r3, r3, #4
 80005c0:	6493      	str	r3, [r2, #72]	@ 0x48
 80005c2:	4b17      	ldr	r3, [pc, #92]	@ (8000620 <MX_DMA_Init+0x70>)
 80005c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005c6:	f003 0304 	and.w	r3, r3, #4
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ce:	4b14      	ldr	r3, [pc, #80]	@ (8000620 <MX_DMA_Init+0x70>)
 80005d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005d2:	4a13      	ldr	r2, [pc, #76]	@ (8000620 <MX_DMA_Init+0x70>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80005da:	4b11      	ldr	r3, [pc, #68]	@ (8000620 <MX_DMA_Init+0x70>)
 80005dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	603b      	str	r3, [r7, #0]
 80005e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2100      	movs	r1, #0
 80005ea:	200b      	movs	r0, #11
 80005ec:	f000 fe81 	bl	80012f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005f0:	200b      	movs	r0, #11
 80005f2:	f000 fe98 	bl	8001326 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2100      	movs	r1, #0
 80005fa:	200c      	movs	r0, #12
 80005fc:	f000 fe79 	bl	80012f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000600:	200c      	movs	r0, #12
 8000602:	f000 fe90 	bl	8001326 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000606:	2200      	movs	r2, #0
 8000608:	2100      	movs	r1, #0
 800060a:	200d      	movs	r0, #13
 800060c:	f000 fe71 	bl	80012f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000610:	200d      	movs	r0, #13
 8000612:	f000 fe88 	bl	8001326 <HAL_NVIC_EnableIRQ>

}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40021000 	.word	0x40021000

08000624 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08a      	sub	sp, #40	@ 0x28
 8000628:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063a:	4b35      	ldr	r3, [pc, #212]	@ (8000710 <MX_GPIO_Init+0xec>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063e:	4a34      	ldr	r2, [pc, #208]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000640:	f043 0304 	orr.w	r3, r3, #4
 8000644:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000646:	4b32      	ldr	r3, [pc, #200]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064a:	f003 0304 	and.w	r3, r3, #4
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000652:	4b2f      	ldr	r3, [pc, #188]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000656:	4a2e      	ldr	r2, [pc, #184]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000658:	f043 0320 	orr.w	r3, r3, #32
 800065c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800065e:	4b2c      	ldr	r3, [pc, #176]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000662:	f003 0320 	and.w	r3, r3, #32
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	4b29      	ldr	r3, [pc, #164]	@ (8000710 <MX_GPIO_Init+0xec>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066e:	4a28      	ldr	r2, [pc, #160]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000676:	4b26      	ldr	r3, [pc, #152]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000682:	4b23      	ldr	r3, [pc, #140]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000686:	4a22      	ldr	r2, [pc, #136]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000688:	f043 0302 	orr.w	r3, r3, #2
 800068c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800068e:	4b20      	ldr	r3, [pc, #128]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000692:	f003 0302 	and.w	r3, r3, #2
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	2120      	movs	r1, #32
 800069e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a2:	f001 fb0f 	bl	8001cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LIDAR_M_EN_Pin|LIDAR_DEV_EN_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2130      	movs	r1, #48	@ 0x30
 80006aa:	481a      	ldr	r0, [pc, #104]	@ (8000714 <MX_GPIO_Init+0xf0>)
 80006ac:	f001 fb0a 	bl	8001cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006b6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4619      	mov	r1, r3
 80006c6:	4814      	ldr	r0, [pc, #80]	@ (8000718 <MX_GPIO_Init+0xf4>)
 80006c8:	f001 f97a 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006cc:	2320      	movs	r3, #32
 80006ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d0:	2301      	movs	r3, #1
 80006d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d8:	2300      	movs	r3, #0
 80006da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006dc:	f107 0314 	add.w	r3, r7, #20
 80006e0:	4619      	mov	r1, r3
 80006e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006e6:	f001 f96b 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LIDAR_M_EN_Pin|LIDAR_DEV_EN_Pin;
 80006ea:	2330      	movs	r3, #48	@ 0x30
 80006ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ee:	2301      	movs	r3, #1
 80006f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	2300      	movs	r3, #0
 80006f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	4619      	mov	r1, r3
 8000700:	4804      	ldr	r0, [pc, #16]	@ (8000714 <MX_GPIO_Init+0xf0>)
 8000702:	f001 f95d 	bl	80019c0 <HAL_GPIO_Init>

}
 8000706:	bf00      	nop
 8000708:	3728      	adds	r7, #40	@ 0x28
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40021000 	.word	0x40021000
 8000714:	48000400 	.word	0x48000400
 8000718:	48000800 	.word	0x48000800

0800071c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char*ptr , int len){
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
	(void)file;
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ptr, len);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	b29b      	uxth	r3, r3
 800072c:	461a      	mov	r2, r3
 800072e:	68b9      	ldr	r1, [r7, #8]
 8000730:	4805      	ldr	r0, [pc, #20]	@ (8000748 <_write+0x2c>)
 8000732:	f003 fd57 	bl	80041e4 <HAL_UART_Transmit_DMA>
	//while(irq_TX2_completed!=1);
	irq_TX2_completed=0;
 8000736:	4b05      	ldr	r3, [pc, #20]	@ (800074c <_write+0x30>)
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
	return len;
 800073c:	687b      	ldr	r3, [r7, #4]
}
 800073e:	4618      	mov	r0, r3
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000170 	.word	0x20000170
 800074c:	20000088 	.word	0x20000088

08000750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000756:	f000 fc80 	bl	800105a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075a:	f000 f845 	bl	80007e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800075e:	f7ff ff61 	bl	8000624 <MX_GPIO_Init>
  MX_DMA_Init();
 8000762:	f7ff ff25 	bl	80005b0 <MX_DMA_Init>
  MX_TIM2_Init();
 8000766:	f000 f9bd 	bl	8000ae4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800076a:	f000 fa89 	bl	8000c80 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800076e:	f000 fad3 	bl	8000d18 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 8000772:	4817      	ldr	r0, [pc, #92]	@ (80007d0 <main+0x80>)
 8000774:	f002 fae8 	bl	8002d48 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000778:	2104      	movs	r1, #4
 800077a:	4815      	ldr	r0, [pc, #84]	@ (80007d0 <main+0x80>)
 800077c:	f002 fba8 	bl	8002ed0 <HAL_TIM_PWM_Start>

	HAL_GPIO_WritePin(LIDAR_M_EN_GPIO_Port,LIDAR_M_EN_Pin, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	2110      	movs	r1, #16
 8000784:	4813      	ldr	r0, [pc, #76]	@ (80007d4 <main+0x84>)
 8000786:	f001 fa9d 	bl	8001cc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIDAR_DEV_EN_GPIO_Port,LIDAR_DEV_EN_Pin, GPIO_PIN_SET);
 800078a:	2201      	movs	r2, #1
 800078c:	2120      	movs	r1, #32
 800078e:	4811      	ldr	r0, [pc, #68]	@ (80007d4 <main+0x84>)
 8000790:	f001 fa98 	bl	8001cc4 <HAL_GPIO_WritePin>
	//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,0);

	uint8_t command[2] = {0xA5,0x60};
 8000794:	f246 03a5 	movw	r3, #24741	@ 0x60a5
 8000798:	80bb      	strh	r3, [r7, #4]

	printf("====== START LIDAR =====\r\n");
 800079a:	480f      	ldr	r0, [pc, #60]	@ (80007d8 <main+0x88>)
 800079c:	f005 f958 	bl	8005a50 <puts>
	HAL_UART_Transmit(&huart1, command, 2,HAL_MAX_DELAY);
 80007a0:	1d39      	adds	r1, r7, #4
 80007a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007a6:	2202      	movs	r2, #2
 80007a8:	480c      	ldr	r0, [pc, #48]	@ (80007dc <main+0x8c>)
 80007aa:	f003 fbc5 	bl	8003f38 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_UART_Receive(&huart1, (uint8_t *)Lidar_byte, 1,HAL_MAX_DELAY);
 80007ae:	4b0c      	ldr	r3, [pc, #48]	@ (80007e0 <main+0x90>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	4619      	mov	r1, r3
 80007b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007b8:	2201      	movs	r2, #1
 80007ba:	4808      	ldr	r0, [pc, #32]	@ (80007dc <main+0x8c>)
 80007bc:	f003 fc4a 	bl	8004054 <HAL_UART_Receive>
		printf(">%u\r\n",Lidar_byte);
 80007c0:	4b07      	ldr	r3, [pc, #28]	@ (80007e0 <main+0x90>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	4619      	mov	r1, r3
 80007c6:	4807      	ldr	r0, [pc, #28]	@ (80007e4 <main+0x94>)
 80007c8:	f005 f8da 	bl	8005980 <iprintf>
		HAL_UART_Receive(&huart1, (uint8_t *)Lidar_byte, 1,HAL_MAX_DELAY);
 80007cc:	bf00      	nop
 80007ce:	e7ee      	b.n	80007ae <main+0x5e>
 80007d0:	20000090 	.word	0x20000090
 80007d4:	48000400 	.word	0x48000400
 80007d8:	0800672c 	.word	0x0800672c
 80007dc:	200000dc 	.word	0x200000dc
 80007e0:	20000084 	.word	0x20000084
 80007e4:	08006748 	.word	0x08006748

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b094      	sub	sp, #80	@ 0x50
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 0318 	add.w	r3, r7, #24
 80007f2:	2238      	movs	r2, #56	@ 0x38
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f005 f932 	bl	8005a60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800080a:	2000      	movs	r0, #0
 800080c:	f001 fa72 	bl	8001cf4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000810:	2302      	movs	r3, #2
 8000812:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000814:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000818:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800081a:	2340      	movs	r3, #64	@ 0x40
 800081c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081e:	2302      	movs	r3, #2
 8000820:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000822:	2302      	movs	r3, #2
 8000824:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000826:	2304      	movs	r3, #4
 8000828:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800082a:	2355      	movs	r3, #85	@ 0x55
 800082c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800082e:	2302      	movs	r3, #2
 8000830:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000832:	2302      	movs	r3, #2
 8000834:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000836:	2302      	movs	r3, #2
 8000838:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083a:	f107 0318 	add.w	r3, r7, #24
 800083e:	4618      	mov	r0, r3
 8000840:	f001 fb0c 	bl	8001e5c <HAL_RCC_OscConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800084a:	f000 f818 	bl	800087e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084e:	230f      	movs	r3, #15
 8000850:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000852:	2303      	movs	r3, #3
 8000854:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	2104      	movs	r1, #4
 8000866:	4618      	mov	r0, r3
 8000868:	f001 fe0a 	bl	8002480 <HAL_RCC_ClockConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000872:	f000 f804 	bl	800087e <Error_Handler>
  }
}
 8000876:	bf00      	nop
 8000878:	3750      	adds	r7, #80	@ 0x50
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000882:	b672      	cpsid	i
}
 8000884:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000886:	bf00      	nop
 8000888:	e7fd      	b.n	8000886 <Error_Handler+0x8>
	...

0800088c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000892:	4b0f      	ldr	r3, [pc, #60]	@ (80008d0 <HAL_MspInit+0x44>)
 8000894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000896:	4a0e      	ldr	r2, [pc, #56]	@ (80008d0 <HAL_MspInit+0x44>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6613      	str	r3, [r2, #96]	@ 0x60
 800089e:	4b0c      	ldr	r3, [pc, #48]	@ (80008d0 <HAL_MspInit+0x44>)
 80008a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008aa:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <HAL_MspInit+0x44>)
 80008ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ae:	4a08      	ldr	r2, [pc, #32]	@ (80008d0 <HAL_MspInit+0x44>)
 80008b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80008b6:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <HAL_MspInit+0x44>)
 80008b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008c2:	f001 fabb 	bl	8001e3c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40021000 	.word	0x40021000

080008d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <NMI_Handler+0x4>

080008dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <HardFault_Handler+0x4>

080008e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <MemManage_Handler+0x4>

080008ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <BusFault_Handler+0x4>

080008f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <UsageFault_Handler+0x4>

080008fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800092a:	f000 fbe9 	bl	8001100 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000938:	4802      	ldr	r0, [pc, #8]	@ (8000944 <DMA1_Channel1_IRQHandler+0x10>)
 800093a:	f000 fef2 	bl	8001722 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	200002c4 	.word	0x200002c4

08000948 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800094c:	4802      	ldr	r0, [pc, #8]	@ (8000958 <DMA1_Channel2_IRQHandler+0x10>)
 800094e:	f000 fee8 	bl	8001722 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000264 	.word	0x20000264

0800095c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000960:	4802      	ldr	r0, [pc, #8]	@ (800096c <DMA1_Channel3_IRQHandler+0x10>)
 8000962:	f000 fede 	bl	8001722 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000204 	.word	0x20000204

08000970 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000974:	4802      	ldr	r0, [pc, #8]	@ (8000980 <USART1_IRQHandler+0x10>)
 8000976:	f003 fcb5 	bl	80042e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200000dc 	.word	0x200000dc

08000984 <HAL_UART_TxCpltCallback>:
        HAL_UART_Transmit_DMA(&huart2, temp, len);
		//HAL_UART_Receive_DMA(&huart1, (uint8_t*)Lidar_byte, 2);
*/
	}
}
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	if (huart==&huart2){
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4a06      	ldr	r2, [pc, #24]	@ (80009a8 <HAL_UART_TxCpltCallback+0x24>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d102      	bne.n	800099a <HAL_UART_TxCpltCallback+0x16>
		//Lorsque l'on finit l'envoie du message vers le terminal
		irq_TX2_completed=1;
 8000994:	4b05      	ldr	r3, [pc, #20]	@ (80009ac <HAL_UART_TxCpltCallback+0x28>)
 8000996:	2201      	movs	r2, #1
 8000998:	601a      	str	r2, [r3, #0]
	}

}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	20000170 	.word	0x20000170
 80009ac:	20000088 	.word	0x20000088

080009b0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]
 80009c0:	e00a      	b.n	80009d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009c2:	f3af 8000 	nop.w
 80009c6:	4601      	mov	r1, r0
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	1c5a      	adds	r2, r3, #1
 80009cc:	60ba      	str	r2, [r7, #8]
 80009ce:	b2ca      	uxtb	r2, r1
 80009d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	3301      	adds	r3, #1
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	697a      	ldr	r2, [r7, #20]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	429a      	cmp	r2, r3
 80009de:	dbf0      	blt.n	80009c2 <_read+0x12>
  }

  return len;
 80009e0:	687b      	ldr	r3, [r7, #4]
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <_close>:
  }
  return len;
}

int _close(int file)
{
 80009ea:	b480      	push	{r7}
 80009ec:	b083      	sub	sp, #12
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a02:	b480      	push	{r7}
 8000a04:	b083      	sub	sp, #12
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
 8000a0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a12:	605a      	str	r2, [r3, #4]
  return 0;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <_isatty>:

int _isatty(int file)
{
 8000a22:	b480      	push	{r7}
 8000a24:	b083      	sub	sp, #12
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a2a:	2301      	movs	r3, #1
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3714      	adds	r7, #20
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
	...

08000a54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a5c:	4a14      	ldr	r2, [pc, #80]	@ (8000ab0 <_sbrk+0x5c>)
 8000a5e:	4b15      	ldr	r3, [pc, #84]	@ (8000ab4 <_sbrk+0x60>)
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a68:	4b13      	ldr	r3, [pc, #76]	@ (8000ab8 <_sbrk+0x64>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d102      	bne.n	8000a76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a70:	4b11      	ldr	r3, [pc, #68]	@ (8000ab8 <_sbrk+0x64>)
 8000a72:	4a12      	ldr	r2, [pc, #72]	@ (8000abc <_sbrk+0x68>)
 8000a74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a76:	4b10      	ldr	r3, [pc, #64]	@ (8000ab8 <_sbrk+0x64>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d207      	bcs.n	8000a94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a84:	f004 fff4 	bl	8005a70 <__errno>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a92:	e009      	b.n	8000aa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a94:	4b08      	ldr	r3, [pc, #32]	@ (8000ab8 <_sbrk+0x64>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a9a:	4b07      	ldr	r3, [pc, #28]	@ (8000ab8 <_sbrk+0x64>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	4a05      	ldr	r2, [pc, #20]	@ (8000ab8 <_sbrk+0x64>)
 8000aa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3718      	adds	r7, #24
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20008000 	.word	0x20008000
 8000ab4:	00000400 	.word	0x00000400
 8000ab8:	2000008c 	.word	0x2000008c
 8000abc:	20000478 	.word	0x20000478

08000ac0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ac4:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <SystemInit+0x20>)
 8000ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aca:	4a05      	ldr	r2, [pc, #20]	@ (8000ae0 <SystemInit+0x20>)
 8000acc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ad0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08e      	sub	sp, #56	@ 0x38
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af8:	f107 031c 	add.w	r3, r7, #28
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b04:	463b      	mov	r3, r7
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
 8000b10:	611a      	str	r2, [r3, #16]
 8000b12:	615a      	str	r2, [r3, #20]
 8000b14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b16:	4b2d      	ldr	r3, [pc, #180]	@ (8000bcc <MX_TIM2_Init+0xe8>)
 8000b18:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b1c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b1e:	4b2b      	ldr	r3, [pc, #172]	@ (8000bcc <MX_TIM2_Init+0xe8>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b24:	4b29      	ldr	r3, [pc, #164]	@ (8000bcc <MX_TIM2_Init+0xe8>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 169999;
 8000b2a:	4b28      	ldr	r3, [pc, #160]	@ (8000bcc <MX_TIM2_Init+0xe8>)
 8000b2c:	4a28      	ldr	r2, [pc, #160]	@ (8000bd0 <MX_TIM2_Init+0xec>)
 8000b2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b30:	4b26      	ldr	r3, [pc, #152]	@ (8000bcc <MX_TIM2_Init+0xe8>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b36:	4b25      	ldr	r3, [pc, #148]	@ (8000bcc <MX_TIM2_Init+0xe8>)
 8000b38:	2280      	movs	r2, #128	@ 0x80
 8000b3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b3c:	4823      	ldr	r0, [pc, #140]	@ (8000bcc <MX_TIM2_Init+0xe8>)
 8000b3e:	f002 f8ab 	bl	8002c98 <HAL_TIM_Base_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000b48:	f7ff fe99 	bl	800087e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b50:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b56:	4619      	mov	r1, r3
 8000b58:	481c      	ldr	r0, [pc, #112]	@ (8000bcc <MX_TIM2_Init+0xe8>)
 8000b5a:	f002 fbcd 	bl	80032f8 <HAL_TIM_ConfigClockSource>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000b64:	f7ff fe8b 	bl	800087e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b68:	4818      	ldr	r0, [pc, #96]	@ (8000bcc <MX_TIM2_Init+0xe8>)
 8000b6a:	f002 f94f 	bl	8002e0c <HAL_TIM_PWM_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000b74:	f7ff fe83 	bl	800087e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b80:	f107 031c 	add.w	r3, r7, #28
 8000b84:	4619      	mov	r1, r3
 8000b86:	4811      	ldr	r0, [pc, #68]	@ (8000bcc <MX_TIM2_Init+0xe8>)
 8000b88:	f003 f904 	bl	8003d94 <HAL_TIMEx_MasterConfigSynchronization>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000b92:	f7ff fe74 	bl	800087e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b96:	2360      	movs	r3, #96	@ 0x60
 8000b98:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 85000;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd4 <MX_TIM2_Init+0xf0>)
 8000b9c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ba6:	463b      	mov	r3, r7
 8000ba8:	2204      	movs	r2, #4
 8000baa:	4619      	mov	r1, r3
 8000bac:	4807      	ldr	r0, [pc, #28]	@ (8000bcc <MX_TIM2_Init+0xe8>)
 8000bae:	f002 fa8f 	bl	80030d0 <HAL_TIM_PWM_ConfigChannel>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000bb8:	f7ff fe61 	bl	800087e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bbc:	4803      	ldr	r0, [pc, #12]	@ (8000bcc <MX_TIM2_Init+0xe8>)
 8000bbe:	f000 f829 	bl	8000c14 <HAL_TIM_MspPostInit>

}
 8000bc2:	bf00      	nop
 8000bc4:	3738      	adds	r7, #56	@ 0x38
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000090 	.word	0x20000090
 8000bd0:	0002980f 	.word	0x0002980f
 8000bd4:	00014c08 	.word	0x00014c08

08000bd8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000be8:	d10b      	bne.n	8000c02 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bea:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <HAL_TIM_Base_MspInit+0x38>)
 8000bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bee:	4a08      	ldr	r2, [pc, #32]	@ (8000c10 <HAL_TIM_Base_MspInit+0x38>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bf6:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <HAL_TIM_Base_MspInit+0x38>)
 8000bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000c02:	bf00      	nop
 8000c04:	3714      	adds	r7, #20
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	40021000 	.word	0x40021000

08000c14 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b088      	sub	sp, #32
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 030c 	add.w	r3, r7, #12
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c34:	d11b      	bne.n	8000c6e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <HAL_TIM_MspPostInit+0x64>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c3a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c78 <HAL_TIM_MspPostInit+0x64>)
 8000c3c:	f043 0302 	orr.w	r3, r3, #2
 8000c40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c42:	4b0d      	ldr	r3, [pc, #52]	@ (8000c78 <HAL_TIM_MspPostInit+0x64>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	60bb      	str	r3, [r7, #8]
 8000c4c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = LIDAR_M_SCTR_Pin;
 8000c4e:	2308      	movs	r3, #8
 8000c50:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LIDAR_M_SCTR_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 030c 	add.w	r3, r7, #12
 8000c66:	4619      	mov	r1, r3
 8000c68:	4804      	ldr	r0, [pc, #16]	@ (8000c7c <HAL_TIM_MspPostInit+0x68>)
 8000c6a:	f000 fea9 	bl	80019c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c6e:	bf00      	nop
 8000c70:	3720      	adds	r7, #32
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	48000400 	.word	0x48000400

08000c80 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c84:	4b22      	ldr	r3, [pc, #136]	@ (8000d10 <MX_USART1_UART_Init+0x90>)
 8000c86:	4a23      	ldr	r2, [pc, #140]	@ (8000d14 <MX_USART1_UART_Init+0x94>)
 8000c88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 128000;
 8000c8a:	4b21      	ldr	r3, [pc, #132]	@ (8000d10 <MX_USART1_UART_Init+0x90>)
 8000c8c:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 8000c90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c92:	4b1f      	ldr	r3, [pc, #124]	@ (8000d10 <MX_USART1_UART_Init+0x90>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c98:	4b1d      	ldr	r3, [pc, #116]	@ (8000d10 <MX_USART1_UART_Init+0x90>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000d10 <MX_USART1_UART_Init+0x90>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ca4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d10 <MX_USART1_UART_Init+0x90>)
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000caa:	4b19      	ldr	r3, [pc, #100]	@ (8000d10 <MX_USART1_UART_Init+0x90>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb0:	4b17      	ldr	r3, [pc, #92]	@ (8000d10 <MX_USART1_UART_Init+0x90>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cb6:	4b16      	ldr	r3, [pc, #88]	@ (8000d10 <MX_USART1_UART_Init+0x90>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cbc:	4b14      	ldr	r3, [pc, #80]	@ (8000d10 <MX_USART1_UART_Init+0x90>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc2:	4b13      	ldr	r3, [pc, #76]	@ (8000d10 <MX_USART1_UART_Init+0x90>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cc8:	4811      	ldr	r0, [pc, #68]	@ (8000d10 <MX_USART1_UART_Init+0x90>)
 8000cca:	f003 f8e5 	bl	8003e98 <HAL_UART_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000cd4:	f7ff fdd3 	bl	800087e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cd8:	2100      	movs	r1, #0
 8000cda:	480d      	ldr	r0, [pc, #52]	@ (8000d10 <MX_USART1_UART_Init+0x90>)
 8000cdc:	f004 fcc3 	bl	8005666 <HAL_UARTEx_SetTxFifoThreshold>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000ce6:	f7ff fdca 	bl	800087e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cea:	2100      	movs	r1, #0
 8000cec:	4808      	ldr	r0, [pc, #32]	@ (8000d10 <MX_USART1_UART_Init+0x90>)
 8000cee:	f004 fcf8 	bl	80056e2 <HAL_UARTEx_SetRxFifoThreshold>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000cf8:	f7ff fdc1 	bl	800087e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000cfc:	4804      	ldr	r0, [pc, #16]	@ (8000d10 <MX_USART1_UART_Init+0x90>)
 8000cfe:	f004 fc79 	bl	80055f4 <HAL_UARTEx_DisableFifoMode>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d08:	f7ff fdb9 	bl	800087e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	200000dc 	.word	0x200000dc
 8000d14:	40013800 	.word	0x40013800

08000d18 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d1c:	4b22      	ldr	r3, [pc, #136]	@ (8000da8 <MX_USART2_UART_Init+0x90>)
 8000d1e:	4a23      	ldr	r2, [pc, #140]	@ (8000dac <MX_USART2_UART_Init+0x94>)
 8000d20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d22:	4b21      	ldr	r3, [pc, #132]	@ (8000da8 <MX_USART2_UART_Init+0x90>)
 8000d24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d2a:	4b1f      	ldr	r3, [pc, #124]	@ (8000da8 <MX_USART2_UART_Init+0x90>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d30:	4b1d      	ldr	r3, [pc, #116]	@ (8000da8 <MX_USART2_UART_Init+0x90>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d36:	4b1c      	ldr	r3, [pc, #112]	@ (8000da8 <MX_USART2_UART_Init+0x90>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000da8 <MX_USART2_UART_Init+0x90>)
 8000d3e:	220c      	movs	r2, #12
 8000d40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d42:	4b19      	ldr	r3, [pc, #100]	@ (8000da8 <MX_USART2_UART_Init+0x90>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d48:	4b17      	ldr	r3, [pc, #92]	@ (8000da8 <MX_USART2_UART_Init+0x90>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d4e:	4b16      	ldr	r3, [pc, #88]	@ (8000da8 <MX_USART2_UART_Init+0x90>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d54:	4b14      	ldr	r3, [pc, #80]	@ (8000da8 <MX_USART2_UART_Init+0x90>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d5a:	4b13      	ldr	r3, [pc, #76]	@ (8000da8 <MX_USART2_UART_Init+0x90>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d60:	4811      	ldr	r0, [pc, #68]	@ (8000da8 <MX_USART2_UART_Init+0x90>)
 8000d62:	f003 f899 	bl	8003e98 <HAL_UART_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000d6c:	f7ff fd87 	bl	800087e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d70:	2100      	movs	r1, #0
 8000d72:	480d      	ldr	r0, [pc, #52]	@ (8000da8 <MX_USART2_UART_Init+0x90>)
 8000d74:	f004 fc77 	bl	8005666 <HAL_UARTEx_SetTxFifoThreshold>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000d7e:	f7ff fd7e 	bl	800087e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d82:	2100      	movs	r1, #0
 8000d84:	4808      	ldr	r0, [pc, #32]	@ (8000da8 <MX_USART2_UART_Init+0x90>)
 8000d86:	f004 fcac 	bl	80056e2 <HAL_UARTEx_SetRxFifoThreshold>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000d90:	f7ff fd75 	bl	800087e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000d94:	4804      	ldr	r0, [pc, #16]	@ (8000da8 <MX_USART2_UART_Init+0x90>)
 8000d96:	f004 fc2d 	bl	80055f4 <HAL_UARTEx_DisableFifoMode>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000da0:	f7ff fd6d 	bl	800087e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000170 	.word	0x20000170
 8000dac:	40004400 	.word	0x40004400

08000db0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b09c      	sub	sp, #112	@ 0x70
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dc8:	f107 0318 	add.w	r3, r7, #24
 8000dcc:	2244      	movs	r2, #68	@ 0x44
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f004 fe45 	bl	8005a60 <memset>
  if(uartHandle->Instance==USART1)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a81      	ldr	r2, [pc, #516]	@ (8000fe0 <HAL_UART_MspInit+0x230>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	f040 8094 	bne.w	8000f0a <HAL_UART_MspInit+0x15a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000de2:	2301      	movs	r3, #1
 8000de4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dea:	f107 0318 	add.w	r3, r7, #24
 8000dee:	4618      	mov	r0, r3
 8000df0:	f001 fd62 	bl	80028b8 <HAL_RCCEx_PeriphCLKConfig>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dfa:	f7ff fd40 	bl	800087e <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dfe:	4b79      	ldr	r3, [pc, #484]	@ (8000fe4 <HAL_UART_MspInit+0x234>)
 8000e00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e02:	4a78      	ldr	r2, [pc, #480]	@ (8000fe4 <HAL_UART_MspInit+0x234>)
 8000e04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e08:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e0a:	4b76      	ldr	r3, [pc, #472]	@ (8000fe4 <HAL_UART_MspInit+0x234>)
 8000e0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e16:	4b73      	ldr	r3, [pc, #460]	@ (8000fe4 <HAL_UART_MspInit+0x234>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1a:	4a72      	ldr	r2, [pc, #456]	@ (8000fe4 <HAL_UART_MspInit+0x234>)
 8000e1c:	f043 0304 	orr.w	r3, r3, #4
 8000e20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e22:	4b70      	ldr	r3, [pc, #448]	@ (8000fe4 <HAL_UART_MspInit+0x234>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e26:	f003 0304 	and.w	r3, r3, #4
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = LIDAR_RXnTX_STM_Pin|LIDAR_TXnTRX_STM_Pin;
 8000e2e:	2330      	movs	r3, #48	@ 0x30
 8000e30:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e3e:	2307      	movs	r3, #7
 8000e40:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e42:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e46:	4619      	mov	r1, r3
 8000e48:	4867      	ldr	r0, [pc, #412]	@ (8000fe8 <HAL_UART_MspInit+0x238>)
 8000e4a:	f000 fdb9 	bl	80019c0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel3;
 8000e4e:	4b67      	ldr	r3, [pc, #412]	@ (8000fec <HAL_UART_MspInit+0x23c>)
 8000e50:	4a67      	ldr	r2, [pc, #412]	@ (8000ff0 <HAL_UART_MspInit+0x240>)
 8000e52:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000e54:	4b65      	ldr	r3, [pc, #404]	@ (8000fec <HAL_UART_MspInit+0x23c>)
 8000e56:	2219      	movs	r2, #25
 8000e58:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e5a:	4b64      	ldr	r3, [pc, #400]	@ (8000fec <HAL_UART_MspInit+0x23c>)
 8000e5c:	2210      	movs	r2, #16
 8000e5e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e60:	4b62      	ldr	r3, [pc, #392]	@ (8000fec <HAL_UART_MspInit+0x23c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e66:	4b61      	ldr	r3, [pc, #388]	@ (8000fec <HAL_UART_MspInit+0x23c>)
 8000e68:	2280      	movs	r2, #128	@ 0x80
 8000e6a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e6c:	4b5f      	ldr	r3, [pc, #380]	@ (8000fec <HAL_UART_MspInit+0x23c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e72:	4b5e      	ldr	r3, [pc, #376]	@ (8000fec <HAL_UART_MspInit+0x23c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000e78:	4b5c      	ldr	r3, [pc, #368]	@ (8000fec <HAL_UART_MspInit+0x23c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000e7e:	4b5b      	ldr	r3, [pc, #364]	@ (8000fec <HAL_UART_MspInit+0x23c>)
 8000e80:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8000e84:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000e86:	4859      	ldr	r0, [pc, #356]	@ (8000fec <HAL_UART_MspInit+0x23c>)
 8000e88:	f000 fa68 	bl	800135c <HAL_DMA_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8000e92:	f7ff fcf4 	bl	800087e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a54      	ldr	r2, [pc, #336]	@ (8000fec <HAL_UART_MspInit+0x23c>)
 8000e9a:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000e9c:	4a53      	ldr	r2, [pc, #332]	@ (8000fec <HAL_UART_MspInit+0x23c>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8000ea2:	4b54      	ldr	r3, [pc, #336]	@ (8000ff4 <HAL_UART_MspInit+0x244>)
 8000ea4:	4a54      	ldr	r2, [pc, #336]	@ (8000ff8 <HAL_UART_MspInit+0x248>)
 8000ea6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000ea8:	4b52      	ldr	r3, [pc, #328]	@ (8000ff4 <HAL_UART_MspInit+0x244>)
 8000eaa:	2218      	movs	r2, #24
 8000eac:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eae:	4b51      	ldr	r3, [pc, #324]	@ (8000ff4 <HAL_UART_MspInit+0x244>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eb4:	4b4f      	ldr	r3, [pc, #316]	@ (8000ff4 <HAL_UART_MspInit+0x244>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000eba:	4b4e      	ldr	r3, [pc, #312]	@ (8000ff4 <HAL_UART_MspInit+0x244>)
 8000ebc:	2280      	movs	r2, #128	@ 0x80
 8000ebe:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ec0:	4b4c      	ldr	r3, [pc, #304]	@ (8000ff4 <HAL_UART_MspInit+0x244>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ec6:	4b4b      	ldr	r3, [pc, #300]	@ (8000ff4 <HAL_UART_MspInit+0x244>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000ecc:	4b49      	ldr	r3, [pc, #292]	@ (8000ff4 <HAL_UART_MspInit+0x244>)
 8000ece:	2220      	movs	r2, #32
 8000ed0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000ed2:	4b48      	ldr	r3, [pc, #288]	@ (8000ff4 <HAL_UART_MspInit+0x244>)
 8000ed4:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8000ed8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000eda:	4846      	ldr	r0, [pc, #280]	@ (8000ff4 <HAL_UART_MspInit+0x244>)
 8000edc:	f000 fa3e 	bl	800135c <HAL_DMA_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8000ee6:	f7ff fcca 	bl	800087e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a41      	ldr	r2, [pc, #260]	@ (8000ff4 <HAL_UART_MspInit+0x244>)
 8000eee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000ef2:	4a40      	ldr	r2, [pc, #256]	@ (8000ff4 <HAL_UART_MspInit+0x244>)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2100      	movs	r1, #0
 8000efc:	2025      	movs	r0, #37	@ 0x25
 8000efe:	f000 f9f8 	bl	80012f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f02:	2025      	movs	r0, #37	@ 0x25
 8000f04:	f000 fa0f 	bl	8001326 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f08:	e065      	b.n	8000fd6 <HAL_UART_MspInit+0x226>
  else if(uartHandle->Instance==USART2)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a3b      	ldr	r2, [pc, #236]	@ (8000ffc <HAL_UART_MspInit+0x24c>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d160      	bne.n	8000fd6 <HAL_UART_MspInit+0x226>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f14:	2302      	movs	r3, #2
 8000f16:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f1c:	f107 0318 	add.w	r3, r7, #24
 8000f20:	4618      	mov	r0, r3
 8000f22:	f001 fcc9 	bl	80028b8 <HAL_RCCEx_PeriphCLKConfig>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <HAL_UART_MspInit+0x180>
      Error_Handler();
 8000f2c:	f7ff fca7 	bl	800087e <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f30:	4b2c      	ldr	r3, [pc, #176]	@ (8000fe4 <HAL_UART_MspInit+0x234>)
 8000f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f34:	4a2b      	ldr	r2, [pc, #172]	@ (8000fe4 <HAL_UART_MspInit+0x234>)
 8000f36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f3c:	4b29      	ldr	r3, [pc, #164]	@ (8000fe4 <HAL_UART_MspInit+0x234>)
 8000f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f48:	4b26      	ldr	r3, [pc, #152]	@ (8000fe4 <HAL_UART_MspInit+0x234>)
 8000f4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f4c:	4a25      	ldr	r2, [pc, #148]	@ (8000fe4 <HAL_UART_MspInit+0x234>)
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f54:	4b23      	ldr	r3, [pc, #140]	@ (8000fe4 <HAL_UART_MspInit+0x234>)
 8000f56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000f60:	230c      	movs	r3, #12
 8000f62:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	2302      	movs	r3, #2
 8000f66:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f70:	2307      	movs	r3, #7
 8000f72:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f74:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f7e:	f000 fd1f 	bl	80019c0 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8000f82:	4b1f      	ldr	r3, [pc, #124]	@ (8001000 <HAL_UART_MspInit+0x250>)
 8000f84:	4a1f      	ldr	r2, [pc, #124]	@ (8001004 <HAL_UART_MspInit+0x254>)
 8000f86:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8000f88:	4b1d      	ldr	r3, [pc, #116]	@ (8001000 <HAL_UART_MspInit+0x250>)
 8000f8a:	221b      	movs	r2, #27
 8000f8c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001000 <HAL_UART_MspInit+0x250>)
 8000f90:	2210      	movs	r2, #16
 8000f92:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f94:	4b1a      	ldr	r3, [pc, #104]	@ (8001000 <HAL_UART_MspInit+0x250>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f9a:	4b19      	ldr	r3, [pc, #100]	@ (8001000 <HAL_UART_MspInit+0x250>)
 8000f9c:	2280      	movs	r2, #128	@ 0x80
 8000f9e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fa0:	4b17      	ldr	r3, [pc, #92]	@ (8001000 <HAL_UART_MspInit+0x250>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fa6:	4b16      	ldr	r3, [pc, #88]	@ (8001000 <HAL_UART_MspInit+0x250>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000fac:	4b14      	ldr	r3, [pc, #80]	@ (8001000 <HAL_UART_MspInit+0x250>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000fb2:	4b13      	ldr	r3, [pc, #76]	@ (8001000 <HAL_UART_MspInit+0x250>)
 8000fb4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fb8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000fba:	4811      	ldr	r0, [pc, #68]	@ (8001000 <HAL_UART_MspInit+0x250>)
 8000fbc:	f000 f9ce 	bl	800135c <HAL_DMA_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_UART_MspInit+0x21a>
      Error_Handler();
 8000fc6:	f7ff fc5a 	bl	800087e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a0c      	ldr	r2, [pc, #48]	@ (8001000 <HAL_UART_MspInit+0x250>)
 8000fce:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000fd0:	4a0b      	ldr	r2, [pc, #44]	@ (8001000 <HAL_UART_MspInit+0x250>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000fd6:	bf00      	nop
 8000fd8:	3770      	adds	r7, #112	@ 0x70
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40013800 	.word	0x40013800
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	48000800 	.word	0x48000800
 8000fec:	20000204 	.word	0x20000204
 8000ff0:	40020030 	.word	0x40020030
 8000ff4:	20000264 	.word	0x20000264
 8000ff8:	4002001c 	.word	0x4002001c
 8000ffc:	40004400 	.word	0x40004400
 8001000:	200002c4 	.word	0x200002c4
 8001004:	40020008 	.word	0x40020008

08001008 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001008:	480d      	ldr	r0, [pc, #52]	@ (8001040 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800100a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800100c:	f7ff fd58 	bl	8000ac0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001010:	480c      	ldr	r0, [pc, #48]	@ (8001044 <LoopForever+0x6>)
  ldr r1, =_edata
 8001012:	490d      	ldr	r1, [pc, #52]	@ (8001048 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001014:	4a0d      	ldr	r2, [pc, #52]	@ (800104c <LoopForever+0xe>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001018:	e002      	b.n	8001020 <LoopCopyDataInit>

0800101a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800101a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800101c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101e:	3304      	adds	r3, #4

08001020 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001020:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001022:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001024:	d3f9      	bcc.n	800101a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001026:	4a0a      	ldr	r2, [pc, #40]	@ (8001050 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001028:	4c0a      	ldr	r4, [pc, #40]	@ (8001054 <LoopForever+0x16>)
  movs r3, #0
 800102a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800102c:	e001      	b.n	8001032 <LoopFillZerobss>

0800102e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001030:	3204      	adds	r2, #4

08001032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001032:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001034:	d3fb      	bcc.n	800102e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001036:	f004 fd21 	bl	8005a7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800103a:	f7ff fb89 	bl	8000750 <main>

0800103e <LoopForever>:

LoopForever:
    b LoopForever
 800103e:	e7fe      	b.n	800103e <LoopForever>
  ldr   r0, =_estack
 8001040:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001044:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001048:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800104c:	080067d4 	.word	0x080067d4
  ldr r2, =_sbss
 8001050:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001054:	20000474 	.word	0x20000474

08001058 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001058:	e7fe      	b.n	8001058 <ADC1_2_IRQHandler>

0800105a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001060:	2300      	movs	r3, #0
 8001062:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001064:	2003      	movs	r0, #3
 8001066:	f000 f939 	bl	80012dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800106a:	2000      	movs	r0, #0
 800106c:	f000 f80e 	bl	800108c <HAL_InitTick>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d002      	beq.n	800107c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	71fb      	strb	r3, [r7, #7]
 800107a:	e001      	b.n	8001080 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800107c:	f7ff fc06 	bl	800088c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001080:	79fb      	ldrb	r3, [r7, #7]

}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001094:	2300      	movs	r3, #0
 8001096:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001098:	4b16      	ldr	r3, [pc, #88]	@ (80010f4 <HAL_InitTick+0x68>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d022      	beq.n	80010e6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010a0:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <HAL_InitTick+0x6c>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b13      	ldr	r3, [pc, #76]	@ (80010f4 <HAL_InitTick+0x68>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80010ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80010b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 f944 	bl	8001342 <HAL_SYSTICK_Config>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d10f      	bne.n	80010e0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b0f      	cmp	r3, #15
 80010c4:	d809      	bhi.n	80010da <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c6:	2200      	movs	r2, #0
 80010c8:	6879      	ldr	r1, [r7, #4]
 80010ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010ce:	f000 f910 	bl	80012f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010d2:	4a0a      	ldr	r2, [pc, #40]	@ (80010fc <HAL_InitTick+0x70>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	e007      	b.n	80010ea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	73fb      	strb	r3, [r7, #15]
 80010de:	e004      	b.n	80010ea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	73fb      	strb	r3, [r7, #15]
 80010e4:	e001      	b.n	80010ea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000008 	.word	0x20000008
 80010f8:	20000000 	.word	0x20000000
 80010fc:	20000004 	.word	0x20000004

08001100 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001104:	4b05      	ldr	r3, [pc, #20]	@ (800111c <HAL_IncTick+0x1c>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b05      	ldr	r3, [pc, #20]	@ (8001120 <HAL_IncTick+0x20>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4413      	add	r3, r2
 800110e:	4a03      	ldr	r2, [pc, #12]	@ (800111c <HAL_IncTick+0x1c>)
 8001110:	6013      	str	r3, [r2, #0]
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	20000324 	.word	0x20000324
 8001120:	20000008 	.word	0x20000008

08001124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return uwTick;
 8001128:	4b03      	ldr	r3, [pc, #12]	@ (8001138 <HAL_GetTick+0x14>)
 800112a:	681b      	ldr	r3, [r3, #0]
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000324 	.word	0x20000324

0800113c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800114c:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <__NVIC_SetPriorityGrouping+0x44>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001152:	68ba      	ldr	r2, [r7, #8]
 8001154:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001158:	4013      	ands	r3, r2
 800115a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001164:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001168:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800116c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800116e:	4a04      	ldr	r2, [pc, #16]	@ (8001180 <__NVIC_SetPriorityGrouping+0x44>)
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	60d3      	str	r3, [r2, #12]
}
 8001174:	bf00      	nop
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001188:	4b04      	ldr	r3, [pc, #16]	@ (800119c <__NVIC_GetPriorityGrouping+0x18>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	0a1b      	lsrs	r3, r3, #8
 800118e:	f003 0307 	and.w	r3, r3, #7
}
 8001192:	4618      	mov	r0, r3
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	db0b      	blt.n	80011ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	f003 021f 	and.w	r2, r3, #31
 80011b8:	4907      	ldr	r1, [pc, #28]	@ (80011d8 <__NVIC_EnableIRQ+0x38>)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	095b      	lsrs	r3, r3, #5
 80011c0:	2001      	movs	r0, #1
 80011c2:	fa00 f202 	lsl.w	r2, r0, r2
 80011c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000e100 	.word	0xe000e100

080011dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	6039      	str	r1, [r7, #0]
 80011e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	db0a      	blt.n	8001206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	490c      	ldr	r1, [pc, #48]	@ (8001228 <__NVIC_SetPriority+0x4c>)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	0112      	lsls	r2, r2, #4
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	440b      	add	r3, r1
 8001200:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001204:	e00a      	b.n	800121c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4908      	ldr	r1, [pc, #32]	@ (800122c <__NVIC_SetPriority+0x50>)
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	f003 030f 	and.w	r3, r3, #15
 8001212:	3b04      	subs	r3, #4
 8001214:	0112      	lsls	r2, r2, #4
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	440b      	add	r3, r1
 800121a:	761a      	strb	r2, [r3, #24]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000e100 	.word	0xe000e100
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001230:	b480      	push	{r7}
 8001232:	b089      	sub	sp, #36	@ 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f1c3 0307 	rsb	r3, r3, #7
 800124a:	2b04      	cmp	r3, #4
 800124c:	bf28      	it	cs
 800124e:	2304      	movcs	r3, #4
 8001250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3304      	adds	r3, #4
 8001256:	2b06      	cmp	r3, #6
 8001258:	d902      	bls.n	8001260 <NVIC_EncodePriority+0x30>
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3b03      	subs	r3, #3
 800125e:	e000      	b.n	8001262 <NVIC_EncodePriority+0x32>
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43da      	mvns	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	401a      	ands	r2, r3
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001278:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	fa01 f303 	lsl.w	r3, r1, r3
 8001282:	43d9      	mvns	r1, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	4313      	orrs	r3, r2
         );
}
 800128a:	4618      	mov	r0, r3
 800128c:	3724      	adds	r7, #36	@ 0x24
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012a8:	d301      	bcc.n	80012ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012aa:	2301      	movs	r3, #1
 80012ac:	e00f      	b.n	80012ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ae:	4a0a      	ldr	r2, [pc, #40]	@ (80012d8 <SysTick_Config+0x40>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b6:	210f      	movs	r1, #15
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012bc:	f7ff ff8e 	bl	80011dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c0:	4b05      	ldr	r3, [pc, #20]	@ (80012d8 <SysTick_Config+0x40>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c6:	4b04      	ldr	r3, [pc, #16]	@ (80012d8 <SysTick_Config+0x40>)
 80012c8:	2207      	movs	r2, #7
 80012ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	e000e010 	.word	0xe000e010

080012dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ff29 	bl	800113c <__NVIC_SetPriorityGrouping>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b086      	sub	sp, #24
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001300:	f7ff ff40 	bl	8001184 <__NVIC_GetPriorityGrouping>
 8001304:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	68b9      	ldr	r1, [r7, #8]
 800130a:	6978      	ldr	r0, [r7, #20]
 800130c:	f7ff ff90 	bl	8001230 <NVIC_EncodePriority>
 8001310:	4602      	mov	r2, r0
 8001312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001316:	4611      	mov	r1, r2
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff5f 	bl	80011dc <__NVIC_SetPriority>
}
 800131e:	bf00      	nop
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	4603      	mov	r3, r0
 800132e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff33 	bl	80011a0 <__NVIC_EnableIRQ>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ffa4 	bl	8001298 <SysTick_Config>
 8001350:	4603      	mov	r3, r0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e08d      	b.n	800148a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	4b47      	ldr	r3, [pc, #284]	@ (8001494 <HAL_DMA_Init+0x138>)
 8001376:	429a      	cmp	r2, r3
 8001378:	d80f      	bhi.n	800139a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	4b45      	ldr	r3, [pc, #276]	@ (8001498 <HAL_DMA_Init+0x13c>)
 8001382:	4413      	add	r3, r2
 8001384:	4a45      	ldr	r2, [pc, #276]	@ (800149c <HAL_DMA_Init+0x140>)
 8001386:	fba2 2303 	umull	r2, r3, r2, r3
 800138a:	091b      	lsrs	r3, r3, #4
 800138c:	009a      	lsls	r2, r3, #2
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a42      	ldr	r2, [pc, #264]	@ (80014a0 <HAL_DMA_Init+0x144>)
 8001396:	641a      	str	r2, [r3, #64]	@ 0x40
 8001398:	e00e      	b.n	80013b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	4b40      	ldr	r3, [pc, #256]	@ (80014a4 <HAL_DMA_Init+0x148>)
 80013a2:	4413      	add	r3, r2
 80013a4:	4a3d      	ldr	r2, [pc, #244]	@ (800149c <HAL_DMA_Init+0x140>)
 80013a6:	fba2 2303 	umull	r2, r3, r2, r3
 80013aa:	091b      	lsrs	r3, r3, #4
 80013ac:	009a      	lsls	r2, r3, #2
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a3c      	ldr	r2, [pc, #240]	@ (80014a8 <HAL_DMA_Init+0x14c>)
 80013b6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2202      	movs	r2, #2
 80013bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80013ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80013d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80013dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a1b      	ldr	r3, [r3, #32]
 80013fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	4313      	orrs	r3, r2
 8001400:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 fa76 	bl	80018fc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001418:	d102      	bne.n	8001420 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001434:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d010      	beq.n	8001460 <HAL_DMA_Init+0x104>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b04      	cmp	r3, #4
 8001444:	d80c      	bhi.n	8001460 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 fa96 	bl	8001978 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	e008      	b.n	8001472 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2201      	movs	r2, #1
 800147c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40020407 	.word	0x40020407
 8001498:	bffdfff8 	.word	0xbffdfff8
 800149c:	cccccccd 	.word	0xcccccccd
 80014a0:	40020000 	.word	0x40020000
 80014a4:	bffdfbf8 	.word	0xbffdfbf8
 80014a8:	40020400 	.word	0x40020400

080014ac <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
 80014b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014ba:	2300      	movs	r3, #0
 80014bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d101      	bne.n	80014cc <HAL_DMA_Start_IT+0x20>
 80014c8:	2302      	movs	r3, #2
 80014ca:	e066      	b.n	800159a <HAL_DMA_Start_IT+0xee>
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2201      	movs	r2, #1
 80014d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d155      	bne.n	800158c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2202      	movs	r2, #2
 80014e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2200      	movs	r2, #0
 80014ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 0201 	bic.w	r2, r2, #1
 80014fc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	68b9      	ldr	r1, [r7, #8]
 8001504:	68f8      	ldr	r0, [r7, #12]
 8001506:	f000 f9bb 	bl	8001880 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	2b00      	cmp	r3, #0
 8001510:	d008      	beq.n	8001524 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f042 020e 	orr.w	r2, r2, #14
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	e00f      	b.n	8001544 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 0204 	bic.w	r2, r2, #4
 8001532:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 020a 	orr.w	r2, r2, #10
 8001542:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d007      	beq.n	8001562 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800155c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001560:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001566:	2b00      	cmp	r3, #0
 8001568:	d007      	beq.n	800157a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001574:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001578:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f042 0201 	orr.w	r2, r2, #1
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	e005      	b.n	8001598 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001594:	2302      	movs	r3, #2
 8001596:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001598:	7dfb      	ldrb	r3, [r7, #23]
}
 800159a:	4618      	mov	r0, r3
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b085      	sub	sp, #20
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d005      	beq.n	80015c6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2204      	movs	r2, #4
 80015be:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	73fb      	strb	r3, [r7, #15]
 80015c4:	e037      	b.n	8001636 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 020e 	bic.w	r2, r2, #14
 80015d4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015e4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 0201 	bic.w	r2, r2, #1
 80015f4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fa:	f003 021f 	and.w	r2, r3, #31
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001602:	2101      	movs	r1, #1
 8001604:	fa01 f202 	lsl.w	r2, r1, r2
 8001608:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001612:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001618:	2b00      	cmp	r3, #0
 800161a:	d00c      	beq.n	8001636 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001626:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800162a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001634:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2201      	movs	r2, #1
 800163a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001646:	7bfb      	ldrb	r3, [r7, #15]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800165c:	2300      	movs	r3, #0
 800165e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d00d      	beq.n	8001688 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2204      	movs	r2, #4
 8001670:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2201      	movs	r2, #1
 8001676:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	73fb      	strb	r3, [r7, #15]
 8001686:	e047      	b.n	8001718 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 020e 	bic.w	r2, r2, #14
 8001696:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f022 0201 	bic.w	r2, r2, #1
 80016a6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016b2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016bc:	f003 021f 	and.w	r2, r3, #31
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c4:	2101      	movs	r1, #1
 80016c6:	fa01 f202 	lsl.w	r2, r1, r2
 80016ca:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80016d4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00c      	beq.n	80016f8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016ec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80016f6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	4798      	blx	r3
    }
  }
  return status;
 8001718:	7bfb      	ldrb	r3, [r7, #15]
}
 800171a:	4618      	mov	r0, r3
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b084      	sub	sp, #16
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173e:	f003 031f 	and.w	r3, r3, #31
 8001742:	2204      	movs	r2, #4
 8001744:	409a      	lsls	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	4013      	ands	r3, r2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d026      	beq.n	800179c <HAL_DMA_IRQHandler+0x7a>
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	2b00      	cmp	r3, #0
 8001756:	d021      	beq.n	800179c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0320 	and.w	r3, r3, #32
 8001762:	2b00      	cmp	r3, #0
 8001764:	d107      	bne.n	8001776 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 0204 	bic.w	r2, r2, #4
 8001774:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177a:	f003 021f 	and.w	r2, r3, #31
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001782:	2104      	movs	r1, #4
 8001784:	fa01 f202 	lsl.w	r2, r1, r2
 8001788:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	2b00      	cmp	r3, #0
 8001790:	d071      	beq.n	8001876 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800179a:	e06c      	b.n	8001876 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a0:	f003 031f 	and.w	r3, r3, #31
 80017a4:	2202      	movs	r2, #2
 80017a6:	409a      	lsls	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4013      	ands	r3, r2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d02e      	beq.n	800180e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d029      	beq.n	800180e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0320 	and.w	r3, r3, #32
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d10b      	bne.n	80017e0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 020a 	bic.w	r2, r2, #10
 80017d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e4:	f003 021f 	and.w	r2, r3, #31
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ec:	2102      	movs	r1, #2
 80017ee:	fa01 f202 	lsl.w	r2, r1, r2
 80017f2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001800:	2b00      	cmp	r3, #0
 8001802:	d038      	beq.n	8001876 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800180c:	e033      	b.n	8001876 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001812:	f003 031f 	and.w	r3, r3, #31
 8001816:	2208      	movs	r2, #8
 8001818:	409a      	lsls	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	4013      	ands	r3, r2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d02a      	beq.n	8001878 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	f003 0308 	and.w	r3, r3, #8
 8001828:	2b00      	cmp	r3, #0
 800182a:	d025      	beq.n	8001878 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 020e 	bic.w	r2, r2, #14
 800183a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001840:	f003 021f 	and.w	r2, r3, #31
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001848:	2101      	movs	r1, #1
 800184a:	fa01 f202 	lsl.w	r2, r1, r2
 800184e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2201      	movs	r2, #1
 800185a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800186a:	2b00      	cmp	r3, #0
 800186c:	d004      	beq.n	8001878 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001876:	bf00      	nop
 8001878:	bf00      	nop
}
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
 800188c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001896:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800189c:	2b00      	cmp	r3, #0
 800189e:	d004      	beq.n	80018aa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80018a8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ae:	f003 021f 	and.w	r2, r3, #31
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b6:	2101      	movs	r1, #1
 80018b8:	fa01 f202 	lsl.w	r2, r1, r2
 80018bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	2b10      	cmp	r3, #16
 80018cc:	d108      	bne.n	80018e0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80018de:	e007      	b.n	80018f0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68ba      	ldr	r2, [r7, #8]
 80018e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	60da      	str	r2, [r3, #12]
}
 80018f0:	bf00      	nop
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b087      	sub	sp, #28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	4b16      	ldr	r3, [pc, #88]	@ (8001964 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800190c:	429a      	cmp	r2, r3
 800190e:	d802      	bhi.n	8001916 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001910:	4b15      	ldr	r3, [pc, #84]	@ (8001968 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	e001      	b.n	800191a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001916:	4b15      	ldr	r3, [pc, #84]	@ (800196c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001918:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	b2db      	uxtb	r3, r3
 8001924:	3b08      	subs	r3, #8
 8001926:	4a12      	ldr	r2, [pc, #72]	@ (8001970 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001928:	fba2 2303 	umull	r2, r3, r2, r3
 800192c:	091b      	lsrs	r3, r3, #4
 800192e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001934:	089b      	lsrs	r3, r3, #2
 8001936:	009a      	lsls	r2, r3, #2
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	4413      	add	r3, r2
 800193c:	461a      	mov	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a0b      	ldr	r2, [pc, #44]	@ (8001974 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001946:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f003 031f 	and.w	r3, r3, #31
 800194e:	2201      	movs	r2, #1
 8001950:	409a      	lsls	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001956:	bf00      	nop
 8001958:	371c      	adds	r7, #28
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40020407 	.word	0x40020407
 8001968:	40020800 	.word	0x40020800
 800196c:	40020820 	.word	0x40020820
 8001970:	cccccccd 	.word	0xcccccccd
 8001974:	40020880 	.word	0x40020880

08001978 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001988:	68fa      	ldr	r2, [r7, #12]
 800198a:	4b0b      	ldr	r3, [pc, #44]	@ (80019b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800198c:	4413      	add	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	461a      	mov	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a08      	ldr	r2, [pc, #32]	@ (80019bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800199a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	3b01      	subs	r3, #1
 80019a0:	f003 031f 	and.w	r3, r3, #31
 80019a4:	2201      	movs	r2, #1
 80019a6:	409a      	lsls	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	1000823f 	.word	0x1000823f
 80019bc:	40020940 	.word	0x40020940

080019c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b087      	sub	sp, #28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80019ce:	e15a      	b.n	8001c86 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	2101      	movs	r1, #1
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	fa01 f303 	lsl.w	r3, r1, r3
 80019dc:	4013      	ands	r3, r2
 80019de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 814c 	beq.w	8001c80 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d005      	beq.n	8001a00 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d130      	bne.n	8001a62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a36:	2201      	movs	r2, #1
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	4013      	ands	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	091b      	lsrs	r3, r3, #4
 8001a4c:	f003 0201 	and.w	r2, r3, #1
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d017      	beq.n	8001a9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	2203      	movs	r2, #3
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4013      	ands	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 0303 	and.w	r3, r3, #3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d123      	bne.n	8001af2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	08da      	lsrs	r2, r3, #3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3208      	adds	r2, #8
 8001ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	220f      	movs	r2, #15
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	4013      	ands	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	691a      	ldr	r2, [r3, #16]
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	08da      	lsrs	r2, r3, #3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3208      	adds	r2, #8
 8001aec:	6939      	ldr	r1, [r7, #16]
 8001aee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	2203      	movs	r2, #3
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4013      	ands	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f003 0203 	and.w	r2, r3, #3
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 80a6 	beq.w	8001c80 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b34:	4b5b      	ldr	r3, [pc, #364]	@ (8001ca4 <HAL_GPIO_Init+0x2e4>)
 8001b36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b38:	4a5a      	ldr	r2, [pc, #360]	@ (8001ca4 <HAL_GPIO_Init+0x2e4>)
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b40:	4b58      	ldr	r3, [pc, #352]	@ (8001ca4 <HAL_GPIO_Init+0x2e4>)
 8001b42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b4c:	4a56      	ldr	r2, [pc, #344]	@ (8001ca8 <HAL_GPIO_Init+0x2e8>)
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	089b      	lsrs	r3, r3, #2
 8001b52:	3302      	adds	r3, #2
 8001b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	220f      	movs	r2, #15
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b76:	d01f      	beq.n	8001bb8 <HAL_GPIO_Init+0x1f8>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a4c      	ldr	r2, [pc, #304]	@ (8001cac <HAL_GPIO_Init+0x2ec>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d019      	beq.n	8001bb4 <HAL_GPIO_Init+0x1f4>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a4b      	ldr	r2, [pc, #300]	@ (8001cb0 <HAL_GPIO_Init+0x2f0>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d013      	beq.n	8001bb0 <HAL_GPIO_Init+0x1f0>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a4a      	ldr	r2, [pc, #296]	@ (8001cb4 <HAL_GPIO_Init+0x2f4>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d00d      	beq.n	8001bac <HAL_GPIO_Init+0x1ec>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a49      	ldr	r2, [pc, #292]	@ (8001cb8 <HAL_GPIO_Init+0x2f8>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d007      	beq.n	8001ba8 <HAL_GPIO_Init+0x1e8>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a48      	ldr	r2, [pc, #288]	@ (8001cbc <HAL_GPIO_Init+0x2fc>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d101      	bne.n	8001ba4 <HAL_GPIO_Init+0x1e4>
 8001ba0:	2305      	movs	r3, #5
 8001ba2:	e00a      	b.n	8001bba <HAL_GPIO_Init+0x1fa>
 8001ba4:	2306      	movs	r3, #6
 8001ba6:	e008      	b.n	8001bba <HAL_GPIO_Init+0x1fa>
 8001ba8:	2304      	movs	r3, #4
 8001baa:	e006      	b.n	8001bba <HAL_GPIO_Init+0x1fa>
 8001bac:	2303      	movs	r3, #3
 8001bae:	e004      	b.n	8001bba <HAL_GPIO_Init+0x1fa>
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	e002      	b.n	8001bba <HAL_GPIO_Init+0x1fa>
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e000      	b.n	8001bba <HAL_GPIO_Init+0x1fa>
 8001bb8:	2300      	movs	r3, #0
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	f002 0203 	and.w	r2, r2, #3
 8001bc0:	0092      	lsls	r2, r2, #2
 8001bc2:	4093      	lsls	r3, r2
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bca:	4937      	ldr	r1, [pc, #220]	@ (8001ca8 <HAL_GPIO_Init+0x2e8>)
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	089b      	lsrs	r3, r3, #2
 8001bd0:	3302      	adds	r3, #2
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bd8:	4b39      	ldr	r3, [pc, #228]	@ (8001cc0 <HAL_GPIO_Init+0x300>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	43db      	mvns	r3, r3
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	4013      	ands	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bfc:	4a30      	ldr	r2, [pc, #192]	@ (8001cc0 <HAL_GPIO_Init+0x300>)
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c02:	4b2f      	ldr	r3, [pc, #188]	@ (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c26:	4a26      	ldr	r2, [pc, #152]	@ (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001c2c:	4b24      	ldr	r3, [pc, #144]	@ (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	43db      	mvns	r3, r3
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c50:	4a1b      	ldr	r2, [pc, #108]	@ (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c56:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4013      	ands	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c7a:	4a11      	ldr	r2, [pc, #68]	@ (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	3301      	adds	r3, #1
 8001c84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f47f ae9d 	bne.w	80019d0 <HAL_GPIO_Init+0x10>
  }
}
 8001c96:	bf00      	nop
 8001c98:	bf00      	nop
 8001c9a:	371c      	adds	r7, #28
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40010000 	.word	0x40010000
 8001cac:	48000400 	.word	0x48000400
 8001cb0:	48000800 	.word	0x48000800
 8001cb4:	48000c00 	.word	0x48000c00
 8001cb8:	48001000 	.word	0x48001000
 8001cbc:	48001400 	.word	0x48001400
 8001cc0:	40010400 	.word	0x40010400

08001cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	807b      	strh	r3, [r7, #2]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cd4:	787b      	ldrb	r3, [r7, #1]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cda:	887a      	ldrh	r2, [r7, #2]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ce0:	e002      	b.n	8001ce8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ce2:	887a      	ldrh	r2, [r7, #2]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d141      	bne.n	8001d86 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d02:	4b4b      	ldr	r3, [pc, #300]	@ (8001e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d0e:	d131      	bne.n	8001d74 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d10:	4b47      	ldr	r3, [pc, #284]	@ (8001e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d16:	4a46      	ldr	r2, [pc, #280]	@ (8001e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d20:	4b43      	ldr	r3, [pc, #268]	@ (8001e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d28:	4a41      	ldr	r2, [pc, #260]	@ (8001e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d30:	4b40      	ldr	r3, [pc, #256]	@ (8001e34 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2232      	movs	r2, #50	@ 0x32
 8001d36:	fb02 f303 	mul.w	r3, r2, r3
 8001d3a:	4a3f      	ldr	r2, [pc, #252]	@ (8001e38 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d40:	0c9b      	lsrs	r3, r3, #18
 8001d42:	3301      	adds	r3, #1
 8001d44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d46:	e002      	b.n	8001d4e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d4e:	4b38      	ldr	r3, [pc, #224]	@ (8001e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d5a:	d102      	bne.n	8001d62 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f2      	bne.n	8001d48 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d62:	4b33      	ldr	r3, [pc, #204]	@ (8001e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d6e:	d158      	bne.n	8001e22 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e057      	b.n	8001e24 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d74:	4b2e      	ldr	r3, [pc, #184]	@ (8001e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d7a:	4a2d      	ldr	r2, [pc, #180]	@ (8001e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001d84:	e04d      	b.n	8001e22 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d8c:	d141      	bne.n	8001e12 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d8e:	4b28      	ldr	r3, [pc, #160]	@ (8001e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d9a:	d131      	bne.n	8001e00 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d9c:	4b24      	ldr	r3, [pc, #144]	@ (8001e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001da2:	4a23      	ldr	r2, [pc, #140]	@ (8001e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001da4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001da8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dac:	4b20      	ldr	r3, [pc, #128]	@ (8001e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001db4:	4a1e      	ldr	r2, [pc, #120]	@ (8001e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001db6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001dbc:	4b1d      	ldr	r3, [pc, #116]	@ (8001e34 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2232      	movs	r2, #50	@ 0x32
 8001dc2:	fb02 f303 	mul.w	r3, r2, r3
 8001dc6:	4a1c      	ldr	r2, [pc, #112]	@ (8001e38 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dcc:	0c9b      	lsrs	r3, r3, #18
 8001dce:	3301      	adds	r3, #1
 8001dd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dd2:	e002      	b.n	8001dda <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dda:	4b15      	ldr	r3, [pc, #84]	@ (8001e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001de2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001de6:	d102      	bne.n	8001dee <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f2      	bne.n	8001dd4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dee:	4b10      	ldr	r3, [pc, #64]	@ (8001e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001df6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dfa:	d112      	bne.n	8001e22 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e011      	b.n	8001e24 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e00:	4b0b      	ldr	r3, [pc, #44]	@ (8001e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e06:	4a0a      	ldr	r2, [pc, #40]	@ (8001e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001e10:	e007      	b.n	8001e22 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e12:	4b07      	ldr	r3, [pc, #28]	@ (8001e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e1a:	4a05      	ldr	r2, [pc, #20]	@ (8001e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e1c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e20:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	40007000 	.word	0x40007000
 8001e34:	20000000 	.word	0x20000000
 8001e38:	431bde83 	.word	0x431bde83

08001e3c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001e40:	4b05      	ldr	r3, [pc, #20]	@ (8001e58 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	4a04      	ldr	r2, [pc, #16]	@ (8001e58 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e4a:	6093      	str	r3, [r2, #8]
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40007000 	.word	0x40007000

08001e5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e2fe      	b.n	800246c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d075      	beq.n	8001f66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e7a:	4b97      	ldr	r3, [pc, #604]	@ (80020d8 <HAL_RCC_OscConfig+0x27c>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 030c 	and.w	r3, r3, #12
 8001e82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e84:	4b94      	ldr	r3, [pc, #592]	@ (80020d8 <HAL_RCC_OscConfig+0x27c>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	2b0c      	cmp	r3, #12
 8001e92:	d102      	bne.n	8001e9a <HAL_RCC_OscConfig+0x3e>
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2b03      	cmp	r3, #3
 8001e98:	d002      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x44>
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	2b08      	cmp	r3, #8
 8001e9e:	d10b      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea0:	4b8d      	ldr	r3, [pc, #564]	@ (80020d8 <HAL_RCC_OscConfig+0x27c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d05b      	beq.n	8001f64 <HAL_RCC_OscConfig+0x108>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d157      	bne.n	8001f64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e2d9      	b.n	800246c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ec0:	d106      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x74>
 8001ec2:	4b85      	ldr	r3, [pc, #532]	@ (80020d8 <HAL_RCC_OscConfig+0x27c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a84      	ldr	r2, [pc, #528]	@ (80020d8 <HAL_RCC_OscConfig+0x27c>)
 8001ec8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	e01d      	b.n	8001f0c <HAL_RCC_OscConfig+0xb0>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ed8:	d10c      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x98>
 8001eda:	4b7f      	ldr	r3, [pc, #508]	@ (80020d8 <HAL_RCC_OscConfig+0x27c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a7e      	ldr	r2, [pc, #504]	@ (80020d8 <HAL_RCC_OscConfig+0x27c>)
 8001ee0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	4b7c      	ldr	r3, [pc, #496]	@ (80020d8 <HAL_RCC_OscConfig+0x27c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a7b      	ldr	r2, [pc, #492]	@ (80020d8 <HAL_RCC_OscConfig+0x27c>)
 8001eec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	e00b      	b.n	8001f0c <HAL_RCC_OscConfig+0xb0>
 8001ef4:	4b78      	ldr	r3, [pc, #480]	@ (80020d8 <HAL_RCC_OscConfig+0x27c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a77      	ldr	r2, [pc, #476]	@ (80020d8 <HAL_RCC_OscConfig+0x27c>)
 8001efa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001efe:	6013      	str	r3, [r2, #0]
 8001f00:	4b75      	ldr	r3, [pc, #468]	@ (80020d8 <HAL_RCC_OscConfig+0x27c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a74      	ldr	r2, [pc, #464]	@ (80020d8 <HAL_RCC_OscConfig+0x27c>)
 8001f06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d013      	beq.n	8001f3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f14:	f7ff f906 	bl	8001124 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f1c:	f7ff f902 	bl	8001124 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b64      	cmp	r3, #100	@ 0x64
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e29e      	b.n	800246c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f2e:	4b6a      	ldr	r3, [pc, #424]	@ (80020d8 <HAL_RCC_OscConfig+0x27c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f0      	beq.n	8001f1c <HAL_RCC_OscConfig+0xc0>
 8001f3a:	e014      	b.n	8001f66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3c:	f7ff f8f2 	bl	8001124 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f44:	f7ff f8ee 	bl	8001124 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b64      	cmp	r3, #100	@ 0x64
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e28a      	b.n	800246c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f56:	4b60      	ldr	r3, [pc, #384]	@ (80020d8 <HAL_RCC_OscConfig+0x27c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0xe8>
 8001f62:	e000      	b.n	8001f66 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d075      	beq.n	800205e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f72:	4b59      	ldr	r3, [pc, #356]	@ (80020d8 <HAL_RCC_OscConfig+0x27c>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 030c 	and.w	r3, r3, #12
 8001f7a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f7c:	4b56      	ldr	r3, [pc, #344]	@ (80020d8 <HAL_RCC_OscConfig+0x27c>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	2b0c      	cmp	r3, #12
 8001f8a:	d102      	bne.n	8001f92 <HAL_RCC_OscConfig+0x136>
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d002      	beq.n	8001f98 <HAL_RCC_OscConfig+0x13c>
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d11f      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f98:	4b4f      	ldr	r3, [pc, #316]	@ (80020d8 <HAL_RCC_OscConfig+0x27c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d005      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x154>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e25d      	b.n	800246c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb0:	4b49      	ldr	r3, [pc, #292]	@ (80020d8 <HAL_RCC_OscConfig+0x27c>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	061b      	lsls	r3, r3, #24
 8001fbe:	4946      	ldr	r1, [pc, #280]	@ (80020d8 <HAL_RCC_OscConfig+0x27c>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001fc4:	4b45      	ldr	r3, [pc, #276]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff f85f 	bl	800108c <HAL_InitTick>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d043      	beq.n	800205c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e249      	b.n	800246c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d023      	beq.n	8002028 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fe0:	4b3d      	ldr	r3, [pc, #244]	@ (80020d8 <HAL_RCC_OscConfig+0x27c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a3c      	ldr	r2, [pc, #240]	@ (80020d8 <HAL_RCC_OscConfig+0x27c>)
 8001fe6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fec:	f7ff f89a 	bl	8001124 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff4:	f7ff f896 	bl	8001124 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e232      	b.n	800246c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002006:	4b34      	ldr	r3, [pc, #208]	@ (80020d8 <HAL_RCC_OscConfig+0x27c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800200e:	2b00      	cmp	r3, #0
 8002010:	d0f0      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002012:	4b31      	ldr	r3, [pc, #196]	@ (80020d8 <HAL_RCC_OscConfig+0x27c>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	061b      	lsls	r3, r3, #24
 8002020:	492d      	ldr	r1, [pc, #180]	@ (80020d8 <HAL_RCC_OscConfig+0x27c>)
 8002022:	4313      	orrs	r3, r2
 8002024:	604b      	str	r3, [r1, #4]
 8002026:	e01a      	b.n	800205e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002028:	4b2b      	ldr	r3, [pc, #172]	@ (80020d8 <HAL_RCC_OscConfig+0x27c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a2a      	ldr	r2, [pc, #168]	@ (80020d8 <HAL_RCC_OscConfig+0x27c>)
 800202e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002034:	f7ff f876 	bl	8001124 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800203c:	f7ff f872 	bl	8001124 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e20e      	b.n	800246c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800204e:	4b22      	ldr	r3, [pc, #136]	@ (80020d8 <HAL_RCC_OscConfig+0x27c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0x1e0>
 800205a:	e000      	b.n	800205e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800205c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d041      	beq.n	80020ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d01c      	beq.n	80020ac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002072:	4b19      	ldr	r3, [pc, #100]	@ (80020d8 <HAL_RCC_OscConfig+0x27c>)
 8002074:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002078:	4a17      	ldr	r2, [pc, #92]	@ (80020d8 <HAL_RCC_OscConfig+0x27c>)
 800207a:	f043 0301 	orr.w	r3, r3, #1
 800207e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002082:	f7ff f84f 	bl	8001124 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800208a:	f7ff f84b 	bl	8001124 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e1e7      	b.n	800246c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800209c:	4b0e      	ldr	r3, [pc, #56]	@ (80020d8 <HAL_RCC_OscConfig+0x27c>)
 800209e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0ef      	beq.n	800208a <HAL_RCC_OscConfig+0x22e>
 80020aa:	e020      	b.n	80020ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ac:	4b0a      	ldr	r3, [pc, #40]	@ (80020d8 <HAL_RCC_OscConfig+0x27c>)
 80020ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020b2:	4a09      	ldr	r2, [pc, #36]	@ (80020d8 <HAL_RCC_OscConfig+0x27c>)
 80020b4:	f023 0301 	bic.w	r3, r3, #1
 80020b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020bc:	f7ff f832 	bl	8001124 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020c2:	e00d      	b.n	80020e0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020c4:	f7ff f82e 	bl	8001124 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d906      	bls.n	80020e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e1ca      	b.n	800246c <HAL_RCC_OscConfig+0x610>
 80020d6:	bf00      	nop
 80020d8:	40021000 	.word	0x40021000
 80020dc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020e0:	4b8c      	ldr	r3, [pc, #560]	@ (8002314 <HAL_RCC_OscConfig+0x4b8>)
 80020e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1ea      	bne.n	80020c4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0304 	and.w	r3, r3, #4
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 80a6 	beq.w	8002248 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020fc:	2300      	movs	r3, #0
 80020fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002100:	4b84      	ldr	r3, [pc, #528]	@ (8002314 <HAL_RCC_OscConfig+0x4b8>)
 8002102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002104:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_RCC_OscConfig+0x2b4>
 800210c:	2301      	movs	r3, #1
 800210e:	e000      	b.n	8002112 <HAL_RCC_OscConfig+0x2b6>
 8002110:	2300      	movs	r3, #0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00d      	beq.n	8002132 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002116:	4b7f      	ldr	r3, [pc, #508]	@ (8002314 <HAL_RCC_OscConfig+0x4b8>)
 8002118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800211a:	4a7e      	ldr	r2, [pc, #504]	@ (8002314 <HAL_RCC_OscConfig+0x4b8>)
 800211c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002120:	6593      	str	r3, [r2, #88]	@ 0x58
 8002122:	4b7c      	ldr	r3, [pc, #496]	@ (8002314 <HAL_RCC_OscConfig+0x4b8>)
 8002124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800212e:	2301      	movs	r3, #1
 8002130:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002132:	4b79      	ldr	r3, [pc, #484]	@ (8002318 <HAL_RCC_OscConfig+0x4bc>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800213a:	2b00      	cmp	r3, #0
 800213c:	d118      	bne.n	8002170 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800213e:	4b76      	ldr	r3, [pc, #472]	@ (8002318 <HAL_RCC_OscConfig+0x4bc>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a75      	ldr	r2, [pc, #468]	@ (8002318 <HAL_RCC_OscConfig+0x4bc>)
 8002144:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800214a:	f7fe ffeb 	bl	8001124 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002152:	f7fe ffe7 	bl	8001124 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e183      	b.n	800246c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002164:	4b6c      	ldr	r3, [pc, #432]	@ (8002318 <HAL_RCC_OscConfig+0x4bc>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f0      	beq.n	8002152 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d108      	bne.n	800218a <HAL_RCC_OscConfig+0x32e>
 8002178:	4b66      	ldr	r3, [pc, #408]	@ (8002314 <HAL_RCC_OscConfig+0x4b8>)
 800217a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800217e:	4a65      	ldr	r2, [pc, #404]	@ (8002314 <HAL_RCC_OscConfig+0x4b8>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002188:	e024      	b.n	80021d4 <HAL_RCC_OscConfig+0x378>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	2b05      	cmp	r3, #5
 8002190:	d110      	bne.n	80021b4 <HAL_RCC_OscConfig+0x358>
 8002192:	4b60      	ldr	r3, [pc, #384]	@ (8002314 <HAL_RCC_OscConfig+0x4b8>)
 8002194:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002198:	4a5e      	ldr	r2, [pc, #376]	@ (8002314 <HAL_RCC_OscConfig+0x4b8>)
 800219a:	f043 0304 	orr.w	r3, r3, #4
 800219e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021a2:	4b5c      	ldr	r3, [pc, #368]	@ (8002314 <HAL_RCC_OscConfig+0x4b8>)
 80021a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021a8:	4a5a      	ldr	r2, [pc, #360]	@ (8002314 <HAL_RCC_OscConfig+0x4b8>)
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021b2:	e00f      	b.n	80021d4 <HAL_RCC_OscConfig+0x378>
 80021b4:	4b57      	ldr	r3, [pc, #348]	@ (8002314 <HAL_RCC_OscConfig+0x4b8>)
 80021b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ba:	4a56      	ldr	r2, [pc, #344]	@ (8002314 <HAL_RCC_OscConfig+0x4b8>)
 80021bc:	f023 0301 	bic.w	r3, r3, #1
 80021c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021c4:	4b53      	ldr	r3, [pc, #332]	@ (8002314 <HAL_RCC_OscConfig+0x4b8>)
 80021c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ca:	4a52      	ldr	r2, [pc, #328]	@ (8002314 <HAL_RCC_OscConfig+0x4b8>)
 80021cc:	f023 0304 	bic.w	r3, r3, #4
 80021d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d016      	beq.n	800220a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021dc:	f7fe ffa2 	bl	8001124 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021e2:	e00a      	b.n	80021fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021e4:	f7fe ff9e 	bl	8001124 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e138      	b.n	800246c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021fa:	4b46      	ldr	r3, [pc, #280]	@ (8002314 <HAL_RCC_OscConfig+0x4b8>)
 80021fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0ed      	beq.n	80021e4 <HAL_RCC_OscConfig+0x388>
 8002208:	e015      	b.n	8002236 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800220a:	f7fe ff8b 	bl	8001124 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002210:	e00a      	b.n	8002228 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002212:	f7fe ff87 	bl	8001124 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002220:	4293      	cmp	r3, r2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e121      	b.n	800246c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002228:	4b3a      	ldr	r3, [pc, #232]	@ (8002314 <HAL_RCC_OscConfig+0x4b8>)
 800222a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1ed      	bne.n	8002212 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002236:	7ffb      	ldrb	r3, [r7, #31]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d105      	bne.n	8002248 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800223c:	4b35      	ldr	r3, [pc, #212]	@ (8002314 <HAL_RCC_OscConfig+0x4b8>)
 800223e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002240:	4a34      	ldr	r2, [pc, #208]	@ (8002314 <HAL_RCC_OscConfig+0x4b8>)
 8002242:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002246:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0320 	and.w	r3, r3, #32
 8002250:	2b00      	cmp	r3, #0
 8002252:	d03c      	beq.n	80022ce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d01c      	beq.n	8002296 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800225c:	4b2d      	ldr	r3, [pc, #180]	@ (8002314 <HAL_RCC_OscConfig+0x4b8>)
 800225e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002262:	4a2c      	ldr	r2, [pc, #176]	@ (8002314 <HAL_RCC_OscConfig+0x4b8>)
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800226c:	f7fe ff5a 	bl	8001124 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002274:	f7fe ff56 	bl	8001124 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e0f2      	b.n	800246c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002286:	4b23      	ldr	r3, [pc, #140]	@ (8002314 <HAL_RCC_OscConfig+0x4b8>)
 8002288:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0ef      	beq.n	8002274 <HAL_RCC_OscConfig+0x418>
 8002294:	e01b      	b.n	80022ce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002296:	4b1f      	ldr	r3, [pc, #124]	@ (8002314 <HAL_RCC_OscConfig+0x4b8>)
 8002298:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800229c:	4a1d      	ldr	r2, [pc, #116]	@ (8002314 <HAL_RCC_OscConfig+0x4b8>)
 800229e:	f023 0301 	bic.w	r3, r3, #1
 80022a2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a6:	f7fe ff3d 	bl	8001124 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022ae:	f7fe ff39 	bl	8001124 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e0d5      	b.n	800246c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022c0:	4b14      	ldr	r3, [pc, #80]	@ (8002314 <HAL_RCC_OscConfig+0x4b8>)
 80022c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1ef      	bne.n	80022ae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f000 80c9 	beq.w	800246a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002314 <HAL_RCC_OscConfig+0x4b8>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 030c 	and.w	r3, r3, #12
 80022e0:	2b0c      	cmp	r3, #12
 80022e2:	f000 8083 	beq.w	80023ec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d15e      	bne.n	80023ac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ee:	4b09      	ldr	r3, [pc, #36]	@ (8002314 <HAL_RCC_OscConfig+0x4b8>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a08      	ldr	r2, [pc, #32]	@ (8002314 <HAL_RCC_OscConfig+0x4b8>)
 80022f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fa:	f7fe ff13 	bl	8001124 <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002300:	e00c      	b.n	800231c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002302:	f7fe ff0f 	bl	8001124 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d905      	bls.n	800231c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e0ab      	b.n	800246c <HAL_RCC_OscConfig+0x610>
 8002314:	40021000 	.word	0x40021000
 8002318:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800231c:	4b55      	ldr	r3, [pc, #340]	@ (8002474 <HAL_RCC_OscConfig+0x618>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1ec      	bne.n	8002302 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002328:	4b52      	ldr	r3, [pc, #328]	@ (8002474 <HAL_RCC_OscConfig+0x618>)
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	4b52      	ldr	r3, [pc, #328]	@ (8002478 <HAL_RCC_OscConfig+0x61c>)
 800232e:	4013      	ands	r3, r2
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	6a11      	ldr	r1, [r2, #32]
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002338:	3a01      	subs	r2, #1
 800233a:	0112      	lsls	r2, r2, #4
 800233c:	4311      	orrs	r1, r2
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002342:	0212      	lsls	r2, r2, #8
 8002344:	4311      	orrs	r1, r2
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800234a:	0852      	lsrs	r2, r2, #1
 800234c:	3a01      	subs	r2, #1
 800234e:	0552      	lsls	r2, r2, #21
 8002350:	4311      	orrs	r1, r2
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002356:	0852      	lsrs	r2, r2, #1
 8002358:	3a01      	subs	r2, #1
 800235a:	0652      	lsls	r2, r2, #25
 800235c:	4311      	orrs	r1, r2
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002362:	06d2      	lsls	r2, r2, #27
 8002364:	430a      	orrs	r2, r1
 8002366:	4943      	ldr	r1, [pc, #268]	@ (8002474 <HAL_RCC_OscConfig+0x618>)
 8002368:	4313      	orrs	r3, r2
 800236a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800236c:	4b41      	ldr	r3, [pc, #260]	@ (8002474 <HAL_RCC_OscConfig+0x618>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a40      	ldr	r2, [pc, #256]	@ (8002474 <HAL_RCC_OscConfig+0x618>)
 8002372:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002376:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002378:	4b3e      	ldr	r3, [pc, #248]	@ (8002474 <HAL_RCC_OscConfig+0x618>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	4a3d      	ldr	r2, [pc, #244]	@ (8002474 <HAL_RCC_OscConfig+0x618>)
 800237e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002382:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002384:	f7fe fece 	bl	8001124 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238c:	f7fe feca 	bl	8001124 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e066      	b.n	800246c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800239e:	4b35      	ldr	r3, [pc, #212]	@ (8002474 <HAL_RCC_OscConfig+0x618>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f0      	beq.n	800238c <HAL_RCC_OscConfig+0x530>
 80023aa:	e05e      	b.n	800246a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ac:	4b31      	ldr	r3, [pc, #196]	@ (8002474 <HAL_RCC_OscConfig+0x618>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a30      	ldr	r2, [pc, #192]	@ (8002474 <HAL_RCC_OscConfig+0x618>)
 80023b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b8:	f7fe feb4 	bl	8001124 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c0:	f7fe feb0 	bl	8001124 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e04c      	b.n	800246c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023d2:	4b28      	ldr	r3, [pc, #160]	@ (8002474 <HAL_RCC_OscConfig+0x618>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80023de:	4b25      	ldr	r3, [pc, #148]	@ (8002474 <HAL_RCC_OscConfig+0x618>)
 80023e0:	68da      	ldr	r2, [r3, #12]
 80023e2:	4924      	ldr	r1, [pc, #144]	@ (8002474 <HAL_RCC_OscConfig+0x618>)
 80023e4:	4b25      	ldr	r3, [pc, #148]	@ (800247c <HAL_RCC_OscConfig+0x620>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	60cb      	str	r3, [r1, #12]
 80023ea:	e03e      	b.n	800246a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d101      	bne.n	80023f8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e039      	b.n	800246c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80023f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002474 <HAL_RCC_OscConfig+0x618>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f003 0203 	and.w	r2, r3, #3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	429a      	cmp	r2, r3
 800240a:	d12c      	bne.n	8002466 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002416:	3b01      	subs	r3, #1
 8002418:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800241a:	429a      	cmp	r2, r3
 800241c:	d123      	bne.n	8002466 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002428:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800242a:	429a      	cmp	r2, r3
 800242c:	d11b      	bne.n	8002466 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002438:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800243a:	429a      	cmp	r2, r3
 800243c:	d113      	bne.n	8002466 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002448:	085b      	lsrs	r3, r3, #1
 800244a:	3b01      	subs	r3, #1
 800244c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800244e:	429a      	cmp	r2, r3
 8002450:	d109      	bne.n	8002466 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800245c:	085b      	lsrs	r3, r3, #1
 800245e:	3b01      	subs	r3, #1
 8002460:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002462:	429a      	cmp	r2, r3
 8002464:	d001      	beq.n	800246a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3720      	adds	r7, #32
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40021000 	.word	0x40021000
 8002478:	019f800c 	.word	0x019f800c
 800247c:	feeefffc 	.word	0xfeeefffc

08002480 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e11e      	b.n	80026d6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002498:	4b91      	ldr	r3, [pc, #580]	@ (80026e0 <HAL_RCC_ClockConfig+0x260>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 030f 	and.w	r3, r3, #15
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d910      	bls.n	80024c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a6:	4b8e      	ldr	r3, [pc, #568]	@ (80026e0 <HAL_RCC_ClockConfig+0x260>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f023 020f 	bic.w	r2, r3, #15
 80024ae:	498c      	ldr	r1, [pc, #560]	@ (80026e0 <HAL_RCC_ClockConfig+0x260>)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b6:	4b8a      	ldr	r3, [pc, #552]	@ (80026e0 <HAL_RCC_ClockConfig+0x260>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d001      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e106      	b.n	80026d6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d073      	beq.n	80025bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d129      	bne.n	8002530 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024dc:	4b81      	ldr	r3, [pc, #516]	@ (80026e4 <HAL_RCC_ClockConfig+0x264>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e0f4      	b.n	80026d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80024ec:	f000 f99e 	bl	800282c <RCC_GetSysClockFreqFromPLLSource>
 80024f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4a7c      	ldr	r2, [pc, #496]	@ (80026e8 <HAL_RCC_ClockConfig+0x268>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d93f      	bls.n	800257a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80024fa:	4b7a      	ldr	r3, [pc, #488]	@ (80026e4 <HAL_RCC_ClockConfig+0x264>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d009      	beq.n	800251a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800250e:	2b00      	cmp	r3, #0
 8002510:	d033      	beq.n	800257a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002516:	2b00      	cmp	r3, #0
 8002518:	d12f      	bne.n	800257a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800251a:	4b72      	ldr	r3, [pc, #456]	@ (80026e4 <HAL_RCC_ClockConfig+0x264>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002522:	4a70      	ldr	r2, [pc, #448]	@ (80026e4 <HAL_RCC_ClockConfig+0x264>)
 8002524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002528:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800252a:	2380      	movs	r3, #128	@ 0x80
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	e024      	b.n	800257a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b02      	cmp	r3, #2
 8002536:	d107      	bne.n	8002548 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002538:	4b6a      	ldr	r3, [pc, #424]	@ (80026e4 <HAL_RCC_ClockConfig+0x264>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d109      	bne.n	8002558 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e0c6      	b.n	80026d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002548:	4b66      	ldr	r3, [pc, #408]	@ (80026e4 <HAL_RCC_ClockConfig+0x264>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e0be      	b.n	80026d6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002558:	f000 f8ce 	bl	80026f8 <HAL_RCC_GetSysClockFreq>
 800255c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4a61      	ldr	r2, [pc, #388]	@ (80026e8 <HAL_RCC_ClockConfig+0x268>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d909      	bls.n	800257a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002566:	4b5f      	ldr	r3, [pc, #380]	@ (80026e4 <HAL_RCC_ClockConfig+0x264>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800256e:	4a5d      	ldr	r2, [pc, #372]	@ (80026e4 <HAL_RCC_ClockConfig+0x264>)
 8002570:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002574:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002576:	2380      	movs	r3, #128	@ 0x80
 8002578:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800257a:	4b5a      	ldr	r3, [pc, #360]	@ (80026e4 <HAL_RCC_ClockConfig+0x264>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f023 0203 	bic.w	r2, r3, #3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	4957      	ldr	r1, [pc, #348]	@ (80026e4 <HAL_RCC_ClockConfig+0x264>)
 8002588:	4313      	orrs	r3, r2
 800258a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800258c:	f7fe fdca 	bl	8001124 <HAL_GetTick>
 8002590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002592:	e00a      	b.n	80025aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002594:	f7fe fdc6 	bl	8001124 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e095      	b.n	80026d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025aa:	4b4e      	ldr	r3, [pc, #312]	@ (80026e4 <HAL_RCC_ClockConfig+0x264>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 020c 	and.w	r2, r3, #12
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d1eb      	bne.n	8002594 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d023      	beq.n	8002610 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d005      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025d4:	4b43      	ldr	r3, [pc, #268]	@ (80026e4 <HAL_RCC_ClockConfig+0x264>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	4a42      	ldr	r2, [pc, #264]	@ (80026e4 <HAL_RCC_ClockConfig+0x264>)
 80025da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80025de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0308 	and.w	r3, r3, #8
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d007      	beq.n	80025fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80025ec:	4b3d      	ldr	r3, [pc, #244]	@ (80026e4 <HAL_RCC_ClockConfig+0x264>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80025f4:	4a3b      	ldr	r2, [pc, #236]	@ (80026e4 <HAL_RCC_ClockConfig+0x264>)
 80025f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80025fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025fc:	4b39      	ldr	r3, [pc, #228]	@ (80026e4 <HAL_RCC_ClockConfig+0x264>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	4936      	ldr	r1, [pc, #216]	@ (80026e4 <HAL_RCC_ClockConfig+0x264>)
 800260a:	4313      	orrs	r3, r2
 800260c:	608b      	str	r3, [r1, #8]
 800260e:	e008      	b.n	8002622 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	2b80      	cmp	r3, #128	@ 0x80
 8002614:	d105      	bne.n	8002622 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002616:	4b33      	ldr	r3, [pc, #204]	@ (80026e4 <HAL_RCC_ClockConfig+0x264>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	4a32      	ldr	r2, [pc, #200]	@ (80026e4 <HAL_RCC_ClockConfig+0x264>)
 800261c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002620:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002622:	4b2f      	ldr	r3, [pc, #188]	@ (80026e0 <HAL_RCC_ClockConfig+0x260>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d21d      	bcs.n	800266c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002630:	4b2b      	ldr	r3, [pc, #172]	@ (80026e0 <HAL_RCC_ClockConfig+0x260>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f023 020f 	bic.w	r2, r3, #15
 8002638:	4929      	ldr	r1, [pc, #164]	@ (80026e0 <HAL_RCC_ClockConfig+0x260>)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	4313      	orrs	r3, r2
 800263e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002640:	f7fe fd70 	bl	8001124 <HAL_GetTick>
 8002644:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002646:	e00a      	b.n	800265e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002648:	f7fe fd6c 	bl	8001124 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002656:	4293      	cmp	r3, r2
 8002658:	d901      	bls.n	800265e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e03b      	b.n	80026d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800265e:	4b20      	ldr	r3, [pc, #128]	@ (80026e0 <HAL_RCC_ClockConfig+0x260>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d1ed      	bne.n	8002648 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002678:	4b1a      	ldr	r3, [pc, #104]	@ (80026e4 <HAL_RCC_ClockConfig+0x264>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	4917      	ldr	r1, [pc, #92]	@ (80026e4 <HAL_RCC_ClockConfig+0x264>)
 8002686:	4313      	orrs	r3, r2
 8002688:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b00      	cmp	r3, #0
 8002694:	d009      	beq.n	80026aa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002696:	4b13      	ldr	r3, [pc, #76]	@ (80026e4 <HAL_RCC_ClockConfig+0x264>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	490f      	ldr	r1, [pc, #60]	@ (80026e4 <HAL_RCC_ClockConfig+0x264>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026aa:	f000 f825 	bl	80026f8 <HAL_RCC_GetSysClockFreq>
 80026ae:	4602      	mov	r2, r0
 80026b0:	4b0c      	ldr	r3, [pc, #48]	@ (80026e4 <HAL_RCC_ClockConfig+0x264>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	091b      	lsrs	r3, r3, #4
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	490c      	ldr	r1, [pc, #48]	@ (80026ec <HAL_RCC_ClockConfig+0x26c>)
 80026bc:	5ccb      	ldrb	r3, [r1, r3]
 80026be:	f003 031f 	and.w	r3, r3, #31
 80026c2:	fa22 f303 	lsr.w	r3, r2, r3
 80026c6:	4a0a      	ldr	r2, [pc, #40]	@ (80026f0 <HAL_RCC_ClockConfig+0x270>)
 80026c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80026ca:	4b0a      	ldr	r3, [pc, #40]	@ (80026f4 <HAL_RCC_ClockConfig+0x274>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fe fcdc 	bl	800108c <HAL_InitTick>
 80026d4:	4603      	mov	r3, r0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3718      	adds	r7, #24
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40022000 	.word	0x40022000
 80026e4:	40021000 	.word	0x40021000
 80026e8:	04c4b400 	.word	0x04c4b400
 80026ec:	08006750 	.word	0x08006750
 80026f0:	20000000 	.word	0x20000000
 80026f4:	20000004 	.word	0x20000004

080026f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b087      	sub	sp, #28
 80026fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80026fe:	4b2c      	ldr	r3, [pc, #176]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 030c 	and.w	r3, r3, #12
 8002706:	2b04      	cmp	r3, #4
 8002708:	d102      	bne.n	8002710 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800270a:	4b2a      	ldr	r3, [pc, #168]	@ (80027b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800270c:	613b      	str	r3, [r7, #16]
 800270e:	e047      	b.n	80027a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002710:	4b27      	ldr	r3, [pc, #156]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 030c 	and.w	r3, r3, #12
 8002718:	2b08      	cmp	r3, #8
 800271a:	d102      	bne.n	8002722 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800271c:	4b26      	ldr	r3, [pc, #152]	@ (80027b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800271e:	613b      	str	r3, [r7, #16]
 8002720:	e03e      	b.n	80027a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002722:	4b23      	ldr	r3, [pc, #140]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 030c 	and.w	r3, r3, #12
 800272a:	2b0c      	cmp	r3, #12
 800272c:	d136      	bne.n	800279c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800272e:	4b20      	ldr	r3, [pc, #128]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002738:	4b1d      	ldr	r3, [pc, #116]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	091b      	lsrs	r3, r3, #4
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	3301      	adds	r3, #1
 8002744:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2b03      	cmp	r3, #3
 800274a:	d10c      	bne.n	8002766 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800274c:	4a1a      	ldr	r2, [pc, #104]	@ (80027b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	fbb2 f3f3 	udiv	r3, r2, r3
 8002754:	4a16      	ldr	r2, [pc, #88]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002756:	68d2      	ldr	r2, [r2, #12]
 8002758:	0a12      	lsrs	r2, r2, #8
 800275a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800275e:	fb02 f303 	mul.w	r3, r2, r3
 8002762:	617b      	str	r3, [r7, #20]
      break;
 8002764:	e00c      	b.n	8002780 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002766:	4a13      	ldr	r2, [pc, #76]	@ (80027b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	fbb2 f3f3 	udiv	r3, r2, r3
 800276e:	4a10      	ldr	r2, [pc, #64]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002770:	68d2      	ldr	r2, [r2, #12]
 8002772:	0a12      	lsrs	r2, r2, #8
 8002774:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002778:	fb02 f303 	mul.w	r3, r2, r3
 800277c:	617b      	str	r3, [r7, #20]
      break;
 800277e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002780:	4b0b      	ldr	r3, [pc, #44]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	0e5b      	lsrs	r3, r3, #25
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	3301      	adds	r3, #1
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	fbb2 f3f3 	udiv	r3, r2, r3
 8002798:	613b      	str	r3, [r7, #16]
 800279a:	e001      	b.n	80027a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80027a0:	693b      	ldr	r3, [r7, #16]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	371c      	adds	r7, #28
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	40021000 	.word	0x40021000
 80027b4:	00f42400 	.word	0x00f42400
 80027b8:	016e3600 	.word	0x016e3600

080027bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027c0:	4b03      	ldr	r3, [pc, #12]	@ (80027d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80027c2:	681b      	ldr	r3, [r3, #0]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	20000000 	.word	0x20000000

080027d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027d8:	f7ff fff0 	bl	80027bc <HAL_RCC_GetHCLKFreq>
 80027dc:	4602      	mov	r2, r0
 80027de:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	0a1b      	lsrs	r3, r3, #8
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	4904      	ldr	r1, [pc, #16]	@ (80027fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80027ea:	5ccb      	ldrb	r3, [r1, r3]
 80027ec:	f003 031f 	and.w	r3, r3, #31
 80027f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40021000 	.word	0x40021000
 80027fc:	08006760 	.word	0x08006760

08002800 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002804:	f7ff ffda 	bl	80027bc <HAL_RCC_GetHCLKFreq>
 8002808:	4602      	mov	r2, r0
 800280a:	4b06      	ldr	r3, [pc, #24]	@ (8002824 <HAL_RCC_GetPCLK2Freq+0x24>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	0adb      	lsrs	r3, r3, #11
 8002810:	f003 0307 	and.w	r3, r3, #7
 8002814:	4904      	ldr	r1, [pc, #16]	@ (8002828 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002816:	5ccb      	ldrb	r3, [r1, r3]
 8002818:	f003 031f 	and.w	r3, r3, #31
 800281c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002820:	4618      	mov	r0, r3
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40021000 	.word	0x40021000
 8002828:	08006760 	.word	0x08006760

0800282c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800282c:	b480      	push	{r7}
 800282e:	b087      	sub	sp, #28
 8002830:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002832:	4b1e      	ldr	r3, [pc, #120]	@ (80028ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800283c:	4b1b      	ldr	r3, [pc, #108]	@ (80028ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	091b      	lsrs	r3, r3, #4
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	3301      	adds	r3, #1
 8002848:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	2b03      	cmp	r3, #3
 800284e:	d10c      	bne.n	800286a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002850:	4a17      	ldr	r2, [pc, #92]	@ (80028b0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	fbb2 f3f3 	udiv	r3, r2, r3
 8002858:	4a14      	ldr	r2, [pc, #80]	@ (80028ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800285a:	68d2      	ldr	r2, [r2, #12]
 800285c:	0a12      	lsrs	r2, r2, #8
 800285e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002862:	fb02 f303 	mul.w	r3, r2, r3
 8002866:	617b      	str	r3, [r7, #20]
    break;
 8002868:	e00c      	b.n	8002884 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800286a:	4a12      	ldr	r2, [pc, #72]	@ (80028b4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002872:	4a0e      	ldr	r2, [pc, #56]	@ (80028ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002874:	68d2      	ldr	r2, [r2, #12]
 8002876:	0a12      	lsrs	r2, r2, #8
 8002878:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800287c:	fb02 f303 	mul.w	r3, r2, r3
 8002880:	617b      	str	r3, [r7, #20]
    break;
 8002882:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002884:	4b09      	ldr	r3, [pc, #36]	@ (80028ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	0e5b      	lsrs	r3, r3, #25
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	3301      	adds	r3, #1
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	fbb2 f3f3 	udiv	r3, r2, r3
 800289c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800289e:	687b      	ldr	r3, [r7, #4]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	371c      	adds	r7, #28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	40021000 	.word	0x40021000
 80028b0:	016e3600 	.word	0x016e3600
 80028b4:	00f42400 	.word	0x00f42400

080028b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028c0:	2300      	movs	r3, #0
 80028c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028c4:	2300      	movs	r3, #0
 80028c6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 8098 	beq.w	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028d6:	2300      	movs	r3, #0
 80028d8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028da:	4b43      	ldr	r3, [pc, #268]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10d      	bne.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028e6:	4b40      	ldr	r3, [pc, #256]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ea:	4a3f      	ldr	r2, [pc, #252]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80028f2:	4b3d      	ldr	r3, [pc, #244]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028fa:	60bb      	str	r3, [r7, #8]
 80028fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028fe:	2301      	movs	r3, #1
 8002900:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002902:	4b3a      	ldr	r3, [pc, #232]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a39      	ldr	r2, [pc, #228]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002908:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800290c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800290e:	f7fe fc09 	bl	8001124 <HAL_GetTick>
 8002912:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002914:	e009      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002916:	f7fe fc05 	bl	8001124 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d902      	bls.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	74fb      	strb	r3, [r7, #19]
        break;
 8002928:	e005      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800292a:	4b30      	ldr	r3, [pc, #192]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0ef      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002936:	7cfb      	ldrb	r3, [r7, #19]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d159      	bne.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800293c:	4b2a      	ldr	r3, [pc, #168]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800293e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002942:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002946:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d01e      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	429a      	cmp	r2, r3
 8002956:	d019      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002958:	4b23      	ldr	r3, [pc, #140]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800295a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800295e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002962:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002964:	4b20      	ldr	r3, [pc, #128]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800296a:	4a1f      	ldr	r2, [pc, #124]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800296c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002970:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002974:	4b1c      	ldr	r3, [pc, #112]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800297a:	4a1b      	ldr	r2, [pc, #108]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800297c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002980:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002984:	4a18      	ldr	r2, [pc, #96]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	d016      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002996:	f7fe fbc5 	bl	8001124 <HAL_GetTick>
 800299a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800299c:	e00b      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800299e:	f7fe fbc1 	bl	8001124 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d902      	bls.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	74fb      	strb	r3, [r7, #19]
            break;
 80029b4:	e006      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029b6:	4b0c      	ldr	r3, [pc, #48]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0ec      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80029c4:	7cfb      	ldrb	r3, [r7, #19]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10b      	bne.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029ca:	4b07      	ldr	r3, [pc, #28]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d8:	4903      	ldr	r1, [pc, #12]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80029e0:	e008      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029e2:	7cfb      	ldrb	r3, [r7, #19]
 80029e4:	74bb      	strb	r3, [r7, #18]
 80029e6:	e005      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80029e8:	40021000 	.word	0x40021000
 80029ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029f0:	7cfb      	ldrb	r3, [r7, #19]
 80029f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029f4:	7c7b      	ldrb	r3, [r7, #17]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d105      	bne.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029fa:	4ba6      	ldr	r3, [pc, #664]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029fe:	4aa5      	ldr	r2, [pc, #660]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a04:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00a      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a12:	4ba0      	ldr	r3, [pc, #640]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a18:	f023 0203 	bic.w	r2, r3, #3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	499c      	ldr	r1, [pc, #624]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00a      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a34:	4b97      	ldr	r3, [pc, #604]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a3a:	f023 020c 	bic.w	r2, r3, #12
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	4994      	ldr	r1, [pc, #592]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00a      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a56:	4b8f      	ldr	r3, [pc, #572]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a5c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	498b      	ldr	r1, [pc, #556]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0308 	and.w	r3, r3, #8
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00a      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a78:	4b86      	ldr	r3, [pc, #536]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a7e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	4983      	ldr	r1, [pc, #524]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0320 	and.w	r3, r3, #32
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00a      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a9a:	4b7e      	ldr	r3, [pc, #504]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aa0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	497a      	ldr	r1, [pc, #488]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00a      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002abc:	4b75      	ldr	r3, [pc, #468]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ac2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	4972      	ldr	r1, [pc, #456]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00a      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ade:	4b6d      	ldr	r3, [pc, #436]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ae4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	4969      	ldr	r1, [pc, #420]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00a      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b00:	4b64      	ldr	r3, [pc, #400]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b06:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	4961      	ldr	r1, [pc, #388]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00a      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b22:	4b5c      	ldr	r3, [pc, #368]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b28:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b30:	4958      	ldr	r1, [pc, #352]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d015      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b44:	4b53      	ldr	r3, [pc, #332]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b52:	4950      	ldr	r1, [pc, #320]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b62:	d105      	bne.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b64:	4b4b      	ldr	r3, [pc, #300]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	4a4a      	ldr	r2, [pc, #296]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b6e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d015      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b7c:	4b45      	ldr	r3, [pc, #276]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b82:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b8a:	4942      	ldr	r1, [pc, #264]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b9a:	d105      	bne.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b9c:	4b3d      	ldr	r3, [pc, #244]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	4a3c      	ldr	r2, [pc, #240]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ba2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ba6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d015      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002bb4:	4b37      	ldr	r3, [pc, #220]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc2:	4934      	ldr	r1, [pc, #208]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bd2:	d105      	bne.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bd4:	4b2f      	ldr	r3, [pc, #188]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	4a2e      	ldr	r2, [pc, #184]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bde:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d015      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bec:	4b29      	ldr	r3, [pc, #164]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bf2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bfa:	4926      	ldr	r1, [pc, #152]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c0a:	d105      	bne.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c0c:	4b21      	ldr	r3, [pc, #132]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	4a20      	ldr	r2, [pc, #128]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c16:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d015      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c24:	4b1b      	ldr	r3, [pc, #108]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c2a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c32:	4918      	ldr	r1, [pc, #96]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c42:	d105      	bne.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c44:	4b13      	ldr	r3, [pc, #76]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	4a12      	ldr	r2, [pc, #72]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c4e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d015      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c62:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c6a:	490a      	ldr	r1, [pc, #40]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c7a:	d105      	bne.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c7c:	4b05      	ldr	r3, [pc, #20]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	4a04      	ldr	r2, [pc, #16]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c86:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002c88:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3718      	adds	r7, #24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40021000 	.word	0x40021000

08002c98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e049      	b.n	8002d3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d106      	bne.n	8002cc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7fd ff8a 	bl	8000bd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3304      	adds	r3, #4
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4610      	mov	r0, r2
 8002cd8:	f000 fc08 	bl	80034ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d001      	beq.n	8002d60 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e042      	b.n	8002de6 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a21      	ldr	r2, [pc, #132]	@ (8002df4 <HAL_TIM_Base_Start+0xac>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d018      	beq.n	8002da4 <HAL_TIM_Base_Start+0x5c>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d7a:	d013      	beq.n	8002da4 <HAL_TIM_Base_Start+0x5c>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a1d      	ldr	r2, [pc, #116]	@ (8002df8 <HAL_TIM_Base_Start+0xb0>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d00e      	beq.n	8002da4 <HAL_TIM_Base_Start+0x5c>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8002dfc <HAL_TIM_Base_Start+0xb4>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d009      	beq.n	8002da4 <HAL_TIM_Base_Start+0x5c>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a1a      	ldr	r2, [pc, #104]	@ (8002e00 <HAL_TIM_Base_Start+0xb8>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d004      	beq.n	8002da4 <HAL_TIM_Base_Start+0x5c>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a19      	ldr	r2, [pc, #100]	@ (8002e04 <HAL_TIM_Base_Start+0xbc>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d115      	bne.n	8002dd0 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	4b17      	ldr	r3, [pc, #92]	@ (8002e08 <HAL_TIM_Base_Start+0xc0>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2b06      	cmp	r3, #6
 8002db4:	d015      	beq.n	8002de2 <HAL_TIM_Base_Start+0x9a>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dbc:	d011      	beq.n	8002de2 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f042 0201 	orr.w	r2, r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dce:	e008      	b.n	8002de2 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0201 	orr.w	r2, r2, #1
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	e000      	b.n	8002de4 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002de2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	40012c00 	.word	0x40012c00
 8002df8:	40000400 	.word	0x40000400
 8002dfc:	40000800 	.word	0x40000800
 8002e00:	40013400 	.word	0x40013400
 8002e04:	40014000 	.word	0x40014000
 8002e08:	00010007 	.word	0x00010007

08002e0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e049      	b.n	8002eb2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d106      	bne.n	8002e38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f841 	bl	8002eba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3304      	adds	r3, #4
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4610      	mov	r0, r2
 8002e4c:	f000 fb4e 	bl	80034ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b083      	sub	sp, #12
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
	...

08002ed0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d109      	bne.n	8002ef4 <HAL_TIM_PWM_Start+0x24>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	bf14      	ite	ne
 8002eec:	2301      	movne	r3, #1
 8002eee:	2300      	moveq	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	e03c      	b.n	8002f6e <HAL_TIM_PWM_Start+0x9e>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d109      	bne.n	8002f0e <HAL_TIM_PWM_Start+0x3e>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	bf14      	ite	ne
 8002f06:	2301      	movne	r3, #1
 8002f08:	2300      	moveq	r3, #0
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	e02f      	b.n	8002f6e <HAL_TIM_PWM_Start+0x9e>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	d109      	bne.n	8002f28 <HAL_TIM_PWM_Start+0x58>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	bf14      	ite	ne
 8002f20:	2301      	movne	r3, #1
 8002f22:	2300      	moveq	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	e022      	b.n	8002f6e <HAL_TIM_PWM_Start+0x9e>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	2b0c      	cmp	r3, #12
 8002f2c:	d109      	bne.n	8002f42 <HAL_TIM_PWM_Start+0x72>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	bf14      	ite	ne
 8002f3a:	2301      	movne	r3, #1
 8002f3c:	2300      	moveq	r3, #0
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	e015      	b.n	8002f6e <HAL_TIM_PWM_Start+0x9e>
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	2b10      	cmp	r3, #16
 8002f46:	d109      	bne.n	8002f5c <HAL_TIM_PWM_Start+0x8c>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	bf14      	ite	ne
 8002f54:	2301      	movne	r3, #1
 8002f56:	2300      	moveq	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	e008      	b.n	8002f6e <HAL_TIM_PWM_Start+0x9e>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	bf14      	ite	ne
 8002f68:	2301      	movne	r3, #1
 8002f6a:	2300      	moveq	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e097      	b.n	80030a6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d104      	bne.n	8002f86 <HAL_TIM_PWM_Start+0xb6>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2202      	movs	r2, #2
 8002f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f84:	e023      	b.n	8002fce <HAL_TIM_PWM_Start+0xfe>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2b04      	cmp	r3, #4
 8002f8a:	d104      	bne.n	8002f96 <HAL_TIM_PWM_Start+0xc6>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f94:	e01b      	b.n	8002fce <HAL_TIM_PWM_Start+0xfe>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	d104      	bne.n	8002fa6 <HAL_TIM_PWM_Start+0xd6>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fa4:	e013      	b.n	8002fce <HAL_TIM_PWM_Start+0xfe>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b0c      	cmp	r3, #12
 8002faa:	d104      	bne.n	8002fb6 <HAL_TIM_PWM_Start+0xe6>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002fb4:	e00b      	b.n	8002fce <HAL_TIM_PWM_Start+0xfe>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2b10      	cmp	r3, #16
 8002fba:	d104      	bne.n	8002fc6 <HAL_TIM_PWM_Start+0xf6>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fc4:	e003      	b.n	8002fce <HAL_TIM_PWM_Start+0xfe>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	6839      	ldr	r1, [r7, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f000 feb6 	bl	8003d48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a33      	ldr	r2, [pc, #204]	@ (80030b0 <HAL_TIM_PWM_Start+0x1e0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d013      	beq.n	800300e <HAL_TIM_PWM_Start+0x13e>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a32      	ldr	r2, [pc, #200]	@ (80030b4 <HAL_TIM_PWM_Start+0x1e4>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d00e      	beq.n	800300e <HAL_TIM_PWM_Start+0x13e>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a30      	ldr	r2, [pc, #192]	@ (80030b8 <HAL_TIM_PWM_Start+0x1e8>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d009      	beq.n	800300e <HAL_TIM_PWM_Start+0x13e>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a2f      	ldr	r2, [pc, #188]	@ (80030bc <HAL_TIM_PWM_Start+0x1ec>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d004      	beq.n	800300e <HAL_TIM_PWM_Start+0x13e>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a2d      	ldr	r2, [pc, #180]	@ (80030c0 <HAL_TIM_PWM_Start+0x1f0>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d101      	bne.n	8003012 <HAL_TIM_PWM_Start+0x142>
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <HAL_TIM_PWM_Start+0x144>
 8003012:	2300      	movs	r3, #0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d007      	beq.n	8003028 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003026:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a20      	ldr	r2, [pc, #128]	@ (80030b0 <HAL_TIM_PWM_Start+0x1e0>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d018      	beq.n	8003064 <HAL_TIM_PWM_Start+0x194>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800303a:	d013      	beq.n	8003064 <HAL_TIM_PWM_Start+0x194>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a20      	ldr	r2, [pc, #128]	@ (80030c4 <HAL_TIM_PWM_Start+0x1f4>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d00e      	beq.n	8003064 <HAL_TIM_PWM_Start+0x194>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a1f      	ldr	r2, [pc, #124]	@ (80030c8 <HAL_TIM_PWM_Start+0x1f8>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d009      	beq.n	8003064 <HAL_TIM_PWM_Start+0x194>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a17      	ldr	r2, [pc, #92]	@ (80030b4 <HAL_TIM_PWM_Start+0x1e4>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d004      	beq.n	8003064 <HAL_TIM_PWM_Start+0x194>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a16      	ldr	r2, [pc, #88]	@ (80030b8 <HAL_TIM_PWM_Start+0x1e8>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d115      	bne.n	8003090 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	4b18      	ldr	r3, [pc, #96]	@ (80030cc <HAL_TIM_PWM_Start+0x1fc>)
 800306c:	4013      	ands	r3, r2
 800306e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2b06      	cmp	r3, #6
 8003074:	d015      	beq.n	80030a2 <HAL_TIM_PWM_Start+0x1d2>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800307c:	d011      	beq.n	80030a2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f042 0201 	orr.w	r2, r2, #1
 800308c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800308e:	e008      	b.n	80030a2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0201 	orr.w	r2, r2, #1
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	e000      	b.n	80030a4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40012c00 	.word	0x40012c00
 80030b4:	40013400 	.word	0x40013400
 80030b8:	40014000 	.word	0x40014000
 80030bc:	40014400 	.word	0x40014400
 80030c0:	40014800 	.word	0x40014800
 80030c4:	40000400 	.word	0x40000400
 80030c8:	40000800 	.word	0x40000800
 80030cc:	00010007 	.word	0x00010007

080030d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030dc:	2300      	movs	r3, #0
 80030de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d101      	bne.n	80030ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80030ea:	2302      	movs	r3, #2
 80030ec:	e0ff      	b.n	80032ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b14      	cmp	r3, #20
 80030fa:	f200 80f0 	bhi.w	80032de <HAL_TIM_PWM_ConfigChannel+0x20e>
 80030fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003104 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003104:	08003159 	.word	0x08003159
 8003108:	080032df 	.word	0x080032df
 800310c:	080032df 	.word	0x080032df
 8003110:	080032df 	.word	0x080032df
 8003114:	08003199 	.word	0x08003199
 8003118:	080032df 	.word	0x080032df
 800311c:	080032df 	.word	0x080032df
 8003120:	080032df 	.word	0x080032df
 8003124:	080031db 	.word	0x080031db
 8003128:	080032df 	.word	0x080032df
 800312c:	080032df 	.word	0x080032df
 8003130:	080032df 	.word	0x080032df
 8003134:	0800321b 	.word	0x0800321b
 8003138:	080032df 	.word	0x080032df
 800313c:	080032df 	.word	0x080032df
 8003140:	080032df 	.word	0x080032df
 8003144:	0800325d 	.word	0x0800325d
 8003148:	080032df 	.word	0x080032df
 800314c:	080032df 	.word	0x080032df
 8003150:	080032df 	.word	0x080032df
 8003154:	0800329d 	.word	0x0800329d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68b9      	ldr	r1, [r7, #8]
 800315e:	4618      	mov	r0, r3
 8003160:	f000 fa60 	bl	8003624 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	699a      	ldr	r2, [r3, #24]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f042 0208 	orr.w	r2, r2, #8
 8003172:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	699a      	ldr	r2, [r3, #24]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0204 	bic.w	r2, r2, #4
 8003182:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6999      	ldr	r1, [r3, #24]
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	691a      	ldr	r2, [r3, #16]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	619a      	str	r2, [r3, #24]
      break;
 8003196:	e0a5      	b.n	80032e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68b9      	ldr	r1, [r7, #8]
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 fad0 	bl	8003744 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699a      	ldr	r2, [r3, #24]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	699a      	ldr	r2, [r3, #24]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6999      	ldr	r1, [r3, #24]
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	021a      	lsls	r2, r3, #8
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	619a      	str	r2, [r3, #24]
      break;
 80031d8:	e084      	b.n	80032e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68b9      	ldr	r1, [r7, #8]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f000 fb39 	bl	8003858 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	69da      	ldr	r2, [r3, #28]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f042 0208 	orr.w	r2, r2, #8
 80031f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	69da      	ldr	r2, [r3, #28]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0204 	bic.w	r2, r2, #4
 8003204:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	69d9      	ldr	r1, [r3, #28]
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	691a      	ldr	r2, [r3, #16]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	61da      	str	r2, [r3, #28]
      break;
 8003218:	e064      	b.n	80032e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68b9      	ldr	r1, [r7, #8]
 8003220:	4618      	mov	r0, r3
 8003222:	f000 fba1 	bl	8003968 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	69da      	ldr	r2, [r3, #28]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003234:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	69da      	ldr	r2, [r3, #28]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003244:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	69d9      	ldr	r1, [r3, #28]
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	021a      	lsls	r2, r3, #8
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	61da      	str	r2, [r3, #28]
      break;
 800325a:	e043      	b.n	80032e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68b9      	ldr	r1, [r7, #8]
 8003262:	4618      	mov	r0, r3
 8003264:	f000 fc0a 	bl	8003a7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0208 	orr.w	r2, r2, #8
 8003276:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0204 	bic.w	r2, r2, #4
 8003286:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	691a      	ldr	r2, [r3, #16]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800329a:	e023      	b.n	80032e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68b9      	ldr	r1, [r7, #8]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 fc4e 	bl	8003b44 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032b6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032c6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	021a      	lsls	r2, r3, #8
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80032dc:	e002      	b.n	80032e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	75fb      	strb	r3, [r7, #23]
      break;
 80032e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop

080032f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003302:	2300      	movs	r3, #0
 8003304:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800330c:	2b01      	cmp	r3, #1
 800330e:	d101      	bne.n	8003314 <HAL_TIM_ConfigClockSource+0x1c>
 8003310:	2302      	movs	r3, #2
 8003312:	e0de      	b.n	80034d2 <HAL_TIM_ConfigClockSource+0x1da>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2202      	movs	r2, #2
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003332:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003336:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800333e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68ba      	ldr	r2, [r7, #8]
 8003346:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a63      	ldr	r2, [pc, #396]	@ (80034dc <HAL_TIM_ConfigClockSource+0x1e4>)
 800334e:	4293      	cmp	r3, r2
 8003350:	f000 80a9 	beq.w	80034a6 <HAL_TIM_ConfigClockSource+0x1ae>
 8003354:	4a61      	ldr	r2, [pc, #388]	@ (80034dc <HAL_TIM_ConfigClockSource+0x1e4>)
 8003356:	4293      	cmp	r3, r2
 8003358:	f200 80ae 	bhi.w	80034b8 <HAL_TIM_ConfigClockSource+0x1c0>
 800335c:	4a60      	ldr	r2, [pc, #384]	@ (80034e0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800335e:	4293      	cmp	r3, r2
 8003360:	f000 80a1 	beq.w	80034a6 <HAL_TIM_ConfigClockSource+0x1ae>
 8003364:	4a5e      	ldr	r2, [pc, #376]	@ (80034e0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003366:	4293      	cmp	r3, r2
 8003368:	f200 80a6 	bhi.w	80034b8 <HAL_TIM_ConfigClockSource+0x1c0>
 800336c:	4a5d      	ldr	r2, [pc, #372]	@ (80034e4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800336e:	4293      	cmp	r3, r2
 8003370:	f000 8099 	beq.w	80034a6 <HAL_TIM_ConfigClockSource+0x1ae>
 8003374:	4a5b      	ldr	r2, [pc, #364]	@ (80034e4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003376:	4293      	cmp	r3, r2
 8003378:	f200 809e 	bhi.w	80034b8 <HAL_TIM_ConfigClockSource+0x1c0>
 800337c:	4a5a      	ldr	r2, [pc, #360]	@ (80034e8 <HAL_TIM_ConfigClockSource+0x1f0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	f000 8091 	beq.w	80034a6 <HAL_TIM_ConfigClockSource+0x1ae>
 8003384:	4a58      	ldr	r2, [pc, #352]	@ (80034e8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003386:	4293      	cmp	r3, r2
 8003388:	f200 8096 	bhi.w	80034b8 <HAL_TIM_ConfigClockSource+0x1c0>
 800338c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003390:	f000 8089 	beq.w	80034a6 <HAL_TIM_ConfigClockSource+0x1ae>
 8003394:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003398:	f200 808e 	bhi.w	80034b8 <HAL_TIM_ConfigClockSource+0x1c0>
 800339c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033a0:	d03e      	beq.n	8003420 <HAL_TIM_ConfigClockSource+0x128>
 80033a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033a6:	f200 8087 	bhi.w	80034b8 <HAL_TIM_ConfigClockSource+0x1c0>
 80033aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033ae:	f000 8086 	beq.w	80034be <HAL_TIM_ConfigClockSource+0x1c6>
 80033b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033b6:	d87f      	bhi.n	80034b8 <HAL_TIM_ConfigClockSource+0x1c0>
 80033b8:	2b70      	cmp	r3, #112	@ 0x70
 80033ba:	d01a      	beq.n	80033f2 <HAL_TIM_ConfigClockSource+0xfa>
 80033bc:	2b70      	cmp	r3, #112	@ 0x70
 80033be:	d87b      	bhi.n	80034b8 <HAL_TIM_ConfigClockSource+0x1c0>
 80033c0:	2b60      	cmp	r3, #96	@ 0x60
 80033c2:	d050      	beq.n	8003466 <HAL_TIM_ConfigClockSource+0x16e>
 80033c4:	2b60      	cmp	r3, #96	@ 0x60
 80033c6:	d877      	bhi.n	80034b8 <HAL_TIM_ConfigClockSource+0x1c0>
 80033c8:	2b50      	cmp	r3, #80	@ 0x50
 80033ca:	d03c      	beq.n	8003446 <HAL_TIM_ConfigClockSource+0x14e>
 80033cc:	2b50      	cmp	r3, #80	@ 0x50
 80033ce:	d873      	bhi.n	80034b8 <HAL_TIM_ConfigClockSource+0x1c0>
 80033d0:	2b40      	cmp	r3, #64	@ 0x40
 80033d2:	d058      	beq.n	8003486 <HAL_TIM_ConfigClockSource+0x18e>
 80033d4:	2b40      	cmp	r3, #64	@ 0x40
 80033d6:	d86f      	bhi.n	80034b8 <HAL_TIM_ConfigClockSource+0x1c0>
 80033d8:	2b30      	cmp	r3, #48	@ 0x30
 80033da:	d064      	beq.n	80034a6 <HAL_TIM_ConfigClockSource+0x1ae>
 80033dc:	2b30      	cmp	r3, #48	@ 0x30
 80033de:	d86b      	bhi.n	80034b8 <HAL_TIM_ConfigClockSource+0x1c0>
 80033e0:	2b20      	cmp	r3, #32
 80033e2:	d060      	beq.n	80034a6 <HAL_TIM_ConfigClockSource+0x1ae>
 80033e4:	2b20      	cmp	r3, #32
 80033e6:	d867      	bhi.n	80034b8 <HAL_TIM_ConfigClockSource+0x1c0>
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d05c      	beq.n	80034a6 <HAL_TIM_ConfigClockSource+0x1ae>
 80033ec:	2b10      	cmp	r3, #16
 80033ee:	d05a      	beq.n	80034a6 <HAL_TIM_ConfigClockSource+0x1ae>
 80033f0:	e062      	b.n	80034b8 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003402:	f000 fc81 	bl	8003d08 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003414:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	609a      	str	r2, [r3, #8]
      break;
 800341e:	e04f      	b.n	80034c0 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003430:	f000 fc6a 	bl	8003d08 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003442:	609a      	str	r2, [r3, #8]
      break;
 8003444:	e03c      	b.n	80034c0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003452:	461a      	mov	r2, r3
 8003454:	f000 fbdc 	bl	8003c10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2150      	movs	r1, #80	@ 0x50
 800345e:	4618      	mov	r0, r3
 8003460:	f000 fc35 	bl	8003cce <TIM_ITRx_SetConfig>
      break;
 8003464:	e02c      	b.n	80034c0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003472:	461a      	mov	r2, r3
 8003474:	f000 fbfb 	bl	8003c6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2160      	movs	r1, #96	@ 0x60
 800347e:	4618      	mov	r0, r3
 8003480:	f000 fc25 	bl	8003cce <TIM_ITRx_SetConfig>
      break;
 8003484:	e01c      	b.n	80034c0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003492:	461a      	mov	r2, r3
 8003494:	f000 fbbc 	bl	8003c10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2140      	movs	r1, #64	@ 0x40
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 fc15 	bl	8003cce <TIM_ITRx_SetConfig>
      break;
 80034a4:	e00c      	b.n	80034c0 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4619      	mov	r1, r3
 80034b0:	4610      	mov	r0, r2
 80034b2:	f000 fc0c 	bl	8003cce <TIM_ITRx_SetConfig>
      break;
 80034b6:	e003      	b.n	80034c0 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	73fb      	strb	r3, [r7, #15]
      break;
 80034bc:	e000      	b.n	80034c0 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80034be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	00100070 	.word	0x00100070
 80034e0:	00100040 	.word	0x00100040
 80034e4:	00100030 	.word	0x00100030
 80034e8:	00100020 	.word	0x00100020

080034ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a42      	ldr	r2, [pc, #264]	@ (8003608 <TIM_Base_SetConfig+0x11c>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d00f      	beq.n	8003524 <TIM_Base_SetConfig+0x38>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800350a:	d00b      	beq.n	8003524 <TIM_Base_SetConfig+0x38>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a3f      	ldr	r2, [pc, #252]	@ (800360c <TIM_Base_SetConfig+0x120>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d007      	beq.n	8003524 <TIM_Base_SetConfig+0x38>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a3e      	ldr	r2, [pc, #248]	@ (8003610 <TIM_Base_SetConfig+0x124>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d003      	beq.n	8003524 <TIM_Base_SetConfig+0x38>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a3d      	ldr	r2, [pc, #244]	@ (8003614 <TIM_Base_SetConfig+0x128>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d108      	bne.n	8003536 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800352a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	4313      	orrs	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a33      	ldr	r2, [pc, #204]	@ (8003608 <TIM_Base_SetConfig+0x11c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d01b      	beq.n	8003576 <TIM_Base_SetConfig+0x8a>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003544:	d017      	beq.n	8003576 <TIM_Base_SetConfig+0x8a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a30      	ldr	r2, [pc, #192]	@ (800360c <TIM_Base_SetConfig+0x120>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d013      	beq.n	8003576 <TIM_Base_SetConfig+0x8a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a2f      	ldr	r2, [pc, #188]	@ (8003610 <TIM_Base_SetConfig+0x124>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d00f      	beq.n	8003576 <TIM_Base_SetConfig+0x8a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a2e      	ldr	r2, [pc, #184]	@ (8003614 <TIM_Base_SetConfig+0x128>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d00b      	beq.n	8003576 <TIM_Base_SetConfig+0x8a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a2d      	ldr	r2, [pc, #180]	@ (8003618 <TIM_Base_SetConfig+0x12c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d007      	beq.n	8003576 <TIM_Base_SetConfig+0x8a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a2c      	ldr	r2, [pc, #176]	@ (800361c <TIM_Base_SetConfig+0x130>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d003      	beq.n	8003576 <TIM_Base_SetConfig+0x8a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a2b      	ldr	r2, [pc, #172]	@ (8003620 <TIM_Base_SetConfig+0x134>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d108      	bne.n	8003588 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800357c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	4313      	orrs	r3, r2
 8003586:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	4313      	orrs	r3, r2
 8003594:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a16      	ldr	r2, [pc, #88]	@ (8003608 <TIM_Base_SetConfig+0x11c>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d00f      	beq.n	80035d4 <TIM_Base_SetConfig+0xe8>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a17      	ldr	r2, [pc, #92]	@ (8003614 <TIM_Base_SetConfig+0x128>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d00b      	beq.n	80035d4 <TIM_Base_SetConfig+0xe8>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a16      	ldr	r2, [pc, #88]	@ (8003618 <TIM_Base_SetConfig+0x12c>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d007      	beq.n	80035d4 <TIM_Base_SetConfig+0xe8>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a15      	ldr	r2, [pc, #84]	@ (800361c <TIM_Base_SetConfig+0x130>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d003      	beq.n	80035d4 <TIM_Base_SetConfig+0xe8>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a14      	ldr	r2, [pc, #80]	@ (8003620 <TIM_Base_SetConfig+0x134>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d103      	bne.n	80035dc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	691a      	ldr	r2, [r3, #16]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d105      	bne.n	80035fa <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	f023 0201 	bic.w	r2, r3, #1
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	611a      	str	r2, [r3, #16]
  }
}
 80035fa:	bf00      	nop
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40012c00 	.word	0x40012c00
 800360c:	40000400 	.word	0x40000400
 8003610:	40000800 	.word	0x40000800
 8003614:	40013400 	.word	0x40013400
 8003618:	40014000 	.word	0x40014000
 800361c:	40014400 	.word	0x40014400
 8003620:	40014800 	.word	0x40014800

08003624 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003624:	b480      	push	{r7}
 8003626:	b087      	sub	sp, #28
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	f023 0201 	bic.w	r2, r3, #1
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f023 0303 	bic.w	r3, r3, #3
 800365e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	4313      	orrs	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f023 0302 	bic.w	r3, r3, #2
 8003670:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	4313      	orrs	r3, r2
 800367a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a2c      	ldr	r2, [pc, #176]	@ (8003730 <TIM_OC1_SetConfig+0x10c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d00f      	beq.n	80036a4 <TIM_OC1_SetConfig+0x80>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a2b      	ldr	r2, [pc, #172]	@ (8003734 <TIM_OC1_SetConfig+0x110>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d00b      	beq.n	80036a4 <TIM_OC1_SetConfig+0x80>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a2a      	ldr	r2, [pc, #168]	@ (8003738 <TIM_OC1_SetConfig+0x114>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d007      	beq.n	80036a4 <TIM_OC1_SetConfig+0x80>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a29      	ldr	r2, [pc, #164]	@ (800373c <TIM_OC1_SetConfig+0x118>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d003      	beq.n	80036a4 <TIM_OC1_SetConfig+0x80>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a28      	ldr	r2, [pc, #160]	@ (8003740 <TIM_OC1_SetConfig+0x11c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d10c      	bne.n	80036be <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	f023 0308 	bic.w	r3, r3, #8
 80036aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	f023 0304 	bic.w	r3, r3, #4
 80036bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a1b      	ldr	r2, [pc, #108]	@ (8003730 <TIM_OC1_SetConfig+0x10c>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d00f      	beq.n	80036e6 <TIM_OC1_SetConfig+0xc2>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a1a      	ldr	r2, [pc, #104]	@ (8003734 <TIM_OC1_SetConfig+0x110>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d00b      	beq.n	80036e6 <TIM_OC1_SetConfig+0xc2>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a19      	ldr	r2, [pc, #100]	@ (8003738 <TIM_OC1_SetConfig+0x114>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d007      	beq.n	80036e6 <TIM_OC1_SetConfig+0xc2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a18      	ldr	r2, [pc, #96]	@ (800373c <TIM_OC1_SetConfig+0x118>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d003      	beq.n	80036e6 <TIM_OC1_SetConfig+0xc2>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a17      	ldr	r2, [pc, #92]	@ (8003740 <TIM_OC1_SetConfig+0x11c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d111      	bne.n	800370a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80036f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	4313      	orrs	r3, r2
 8003708:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	621a      	str	r2, [r3, #32]
}
 8003724:	bf00      	nop
 8003726:	371c      	adds	r7, #28
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	40012c00 	.word	0x40012c00
 8003734:	40013400 	.word	0x40013400
 8003738:	40014000 	.word	0x40014000
 800373c:	40014400 	.word	0x40014400
 8003740:	40014800 	.word	0x40014800

08003744 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003744:	b480      	push	{r7}
 8003746:	b087      	sub	sp, #28
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	f023 0210 	bic.w	r2, r3, #16
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003772:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800377e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	021b      	lsls	r3, r3, #8
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	4313      	orrs	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f023 0320 	bic.w	r3, r3, #32
 8003792:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	011b      	lsls	r3, r3, #4
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	4313      	orrs	r3, r2
 800379e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a28      	ldr	r2, [pc, #160]	@ (8003844 <TIM_OC2_SetConfig+0x100>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d003      	beq.n	80037b0 <TIM_OC2_SetConfig+0x6c>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a27      	ldr	r2, [pc, #156]	@ (8003848 <TIM_OC2_SetConfig+0x104>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d10d      	bne.n	80037cc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a1d      	ldr	r2, [pc, #116]	@ (8003844 <TIM_OC2_SetConfig+0x100>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d00f      	beq.n	80037f4 <TIM_OC2_SetConfig+0xb0>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a1c      	ldr	r2, [pc, #112]	@ (8003848 <TIM_OC2_SetConfig+0x104>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d00b      	beq.n	80037f4 <TIM_OC2_SetConfig+0xb0>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a1b      	ldr	r2, [pc, #108]	@ (800384c <TIM_OC2_SetConfig+0x108>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d007      	beq.n	80037f4 <TIM_OC2_SetConfig+0xb0>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a1a      	ldr	r2, [pc, #104]	@ (8003850 <TIM_OC2_SetConfig+0x10c>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d003      	beq.n	80037f4 <TIM_OC2_SetConfig+0xb0>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a19      	ldr	r2, [pc, #100]	@ (8003854 <TIM_OC2_SetConfig+0x110>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d113      	bne.n	800381c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80037fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003802:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	4313      	orrs	r3, r2
 800380e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	4313      	orrs	r3, r2
 800381a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	621a      	str	r2, [r3, #32]
}
 8003836:	bf00      	nop
 8003838:	371c      	adds	r7, #28
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40012c00 	.word	0x40012c00
 8003848:	40013400 	.word	0x40013400
 800384c:	40014000 	.word	0x40014000
 8003850:	40014400 	.word	0x40014400
 8003854:	40014800 	.word	0x40014800

08003858 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003858:	b480      	push	{r7}
 800385a:	b087      	sub	sp, #28
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	69db      	ldr	r3, [r3, #28]
 800387e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800388a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f023 0303 	bic.w	r3, r3, #3
 8003892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	4313      	orrs	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80038a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	021b      	lsls	r3, r3, #8
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a27      	ldr	r2, [pc, #156]	@ (8003954 <TIM_OC3_SetConfig+0xfc>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d003      	beq.n	80038c2 <TIM_OC3_SetConfig+0x6a>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a26      	ldr	r2, [pc, #152]	@ (8003958 <TIM_OC3_SetConfig+0x100>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d10d      	bne.n	80038de <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80038c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	021b      	lsls	r3, r3, #8
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80038dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a1c      	ldr	r2, [pc, #112]	@ (8003954 <TIM_OC3_SetConfig+0xfc>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d00f      	beq.n	8003906 <TIM_OC3_SetConfig+0xae>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003958 <TIM_OC3_SetConfig+0x100>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d00b      	beq.n	8003906 <TIM_OC3_SetConfig+0xae>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a1a      	ldr	r2, [pc, #104]	@ (800395c <TIM_OC3_SetConfig+0x104>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d007      	beq.n	8003906 <TIM_OC3_SetConfig+0xae>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a19      	ldr	r2, [pc, #100]	@ (8003960 <TIM_OC3_SetConfig+0x108>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d003      	beq.n	8003906 <TIM_OC3_SetConfig+0xae>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a18      	ldr	r2, [pc, #96]	@ (8003964 <TIM_OC3_SetConfig+0x10c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d113      	bne.n	800392e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800390c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003914:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	4313      	orrs	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	621a      	str	r2, [r3, #32]
}
 8003948:	bf00      	nop
 800394a:	371c      	adds	r7, #28
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	40012c00 	.word	0x40012c00
 8003958:	40013400 	.word	0x40013400
 800395c:	40014000 	.word	0x40014000
 8003960:	40014400 	.word	0x40014400
 8003964:	40014800 	.word	0x40014800

08003968 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003968:	b480      	push	{r7}
 800396a:	b087      	sub	sp, #28
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003996:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800399a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	021b      	lsls	r3, r3, #8
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	031b      	lsls	r3, r3, #12
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a28      	ldr	r2, [pc, #160]	@ (8003a68 <TIM_OC4_SetConfig+0x100>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d003      	beq.n	80039d4 <TIM_OC4_SetConfig+0x6c>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a27      	ldr	r2, [pc, #156]	@ (8003a6c <TIM_OC4_SetConfig+0x104>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d10d      	bne.n	80039f0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80039da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	031b      	lsls	r3, r3, #12
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80039ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a1d      	ldr	r2, [pc, #116]	@ (8003a68 <TIM_OC4_SetConfig+0x100>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d00f      	beq.n	8003a18 <TIM_OC4_SetConfig+0xb0>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a1c      	ldr	r2, [pc, #112]	@ (8003a6c <TIM_OC4_SetConfig+0x104>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d00b      	beq.n	8003a18 <TIM_OC4_SetConfig+0xb0>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a1b      	ldr	r2, [pc, #108]	@ (8003a70 <TIM_OC4_SetConfig+0x108>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d007      	beq.n	8003a18 <TIM_OC4_SetConfig+0xb0>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a1a      	ldr	r2, [pc, #104]	@ (8003a74 <TIM_OC4_SetConfig+0x10c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d003      	beq.n	8003a18 <TIM_OC4_SetConfig+0xb0>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a19      	ldr	r2, [pc, #100]	@ (8003a78 <TIM_OC4_SetConfig+0x110>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d113      	bne.n	8003a40 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a1e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003a26:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	019b      	lsls	r3, r3, #6
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	019b      	lsls	r3, r3, #6
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	621a      	str	r2, [r3, #32]
}
 8003a5a:	bf00      	nop
 8003a5c:	371c      	adds	r7, #28
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	40012c00 	.word	0x40012c00
 8003a6c:	40013400 	.word	0x40013400
 8003a70:	40014000 	.word	0x40014000
 8003a74:	40014400 	.word	0x40014400
 8003a78:	40014800 	.word	0x40014800

08003a7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003ac0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	041b      	lsls	r3, r3, #16
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a17      	ldr	r2, [pc, #92]	@ (8003b30 <TIM_OC5_SetConfig+0xb4>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d00f      	beq.n	8003af6 <TIM_OC5_SetConfig+0x7a>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a16      	ldr	r2, [pc, #88]	@ (8003b34 <TIM_OC5_SetConfig+0xb8>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d00b      	beq.n	8003af6 <TIM_OC5_SetConfig+0x7a>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a15      	ldr	r2, [pc, #84]	@ (8003b38 <TIM_OC5_SetConfig+0xbc>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d007      	beq.n	8003af6 <TIM_OC5_SetConfig+0x7a>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a14      	ldr	r2, [pc, #80]	@ (8003b3c <TIM_OC5_SetConfig+0xc0>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d003      	beq.n	8003af6 <TIM_OC5_SetConfig+0x7a>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a13      	ldr	r2, [pc, #76]	@ (8003b40 <TIM_OC5_SetConfig+0xc4>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d109      	bne.n	8003b0a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003afc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	021b      	lsls	r3, r3, #8
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	621a      	str	r2, [r3, #32]
}
 8003b24:	bf00      	nop
 8003b26:	371c      	adds	r7, #28
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	40012c00 	.word	0x40012c00
 8003b34:	40013400 	.word	0x40013400
 8003b38:	40014000 	.word	0x40014000
 8003b3c:	40014400 	.word	0x40014400
 8003b40:	40014800 	.word	0x40014800

08003b44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b087      	sub	sp, #28
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	021b      	lsls	r3, r3, #8
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003b8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	051b      	lsls	r3, r3, #20
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a18      	ldr	r2, [pc, #96]	@ (8003bfc <TIM_OC6_SetConfig+0xb8>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d00f      	beq.n	8003bc0 <TIM_OC6_SetConfig+0x7c>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a17      	ldr	r2, [pc, #92]	@ (8003c00 <TIM_OC6_SetConfig+0xbc>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d00b      	beq.n	8003bc0 <TIM_OC6_SetConfig+0x7c>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a16      	ldr	r2, [pc, #88]	@ (8003c04 <TIM_OC6_SetConfig+0xc0>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d007      	beq.n	8003bc0 <TIM_OC6_SetConfig+0x7c>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a15      	ldr	r2, [pc, #84]	@ (8003c08 <TIM_OC6_SetConfig+0xc4>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d003      	beq.n	8003bc0 <TIM_OC6_SetConfig+0x7c>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a14      	ldr	r2, [pc, #80]	@ (8003c0c <TIM_OC6_SetConfig+0xc8>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d109      	bne.n	8003bd4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bc6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	029b      	lsls	r3, r3, #10
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	621a      	str	r2, [r3, #32]
}
 8003bee:	bf00      	nop
 8003bf0:	371c      	adds	r7, #28
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	40012c00 	.word	0x40012c00
 8003c00:	40013400 	.word	0x40013400
 8003c04:	40014000 	.word	0x40014000
 8003c08:	40014400 	.word	0x40014400
 8003c0c:	40014800 	.word	0x40014800

08003c10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b087      	sub	sp, #28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	f023 0201 	bic.w	r2, r3, #1
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f023 030a 	bic.w	r3, r3, #10
 8003c4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	621a      	str	r2, [r3, #32]
}
 8003c62:	bf00      	nop
 8003c64:	371c      	adds	r7, #28
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b087      	sub	sp, #28
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	60f8      	str	r0, [r7, #12]
 8003c76:	60b9      	str	r1, [r7, #8]
 8003c78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	f023 0210 	bic.w	r2, r3, #16
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	031b      	lsls	r3, r3, #12
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003caa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	011b      	lsls	r3, r3, #4
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	621a      	str	r2, [r3, #32]
}
 8003cc2:	bf00      	nop
 8003cc4:	371c      	adds	r7, #28
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b085      	sub	sp, #20
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
 8003cd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003ce4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ce8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	f043 0307 	orr.w	r3, r3, #7
 8003cf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	609a      	str	r2, [r3, #8]
}
 8003cfc:	bf00      	nop
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b087      	sub	sp, #28
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
 8003d14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	021a      	lsls	r2, r3, #8
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	609a      	str	r2, [r3, #8]
}
 8003d3c:	bf00      	nop
 8003d3e:	371c      	adds	r7, #28
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b087      	sub	sp, #28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	f003 031f 	and.w	r3, r3, #31
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6a1a      	ldr	r2, [r3, #32]
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	401a      	ands	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6a1a      	ldr	r2, [r3, #32]
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	f003 031f 	and.w	r3, r3, #31
 8003d7a:	6879      	ldr	r1, [r7, #4]
 8003d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d80:	431a      	orrs	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	621a      	str	r2, [r3, #32]
}
 8003d86:	bf00      	nop
 8003d88:	371c      	adds	r7, #28
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
	...

08003d94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d101      	bne.n	8003dac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003da8:	2302      	movs	r3, #2
 8003daa:	e065      	b.n	8003e78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a2c      	ldr	r2, [pc, #176]	@ (8003e84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d004      	beq.n	8003de0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a2b      	ldr	r2, [pc, #172]	@ (8003e88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d108      	bne.n	8003df2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003de6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003df8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dfc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a1b      	ldr	r2, [pc, #108]	@ (8003e84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d018      	beq.n	8003e4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e22:	d013      	beq.n	8003e4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a18      	ldr	r2, [pc, #96]	@ (8003e8c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d00e      	beq.n	8003e4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a17      	ldr	r2, [pc, #92]	@ (8003e90 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d009      	beq.n	8003e4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a12      	ldr	r2, [pc, #72]	@ (8003e88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d004      	beq.n	8003e4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a13      	ldr	r2, [pc, #76]	@ (8003e94 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d10c      	bne.n	8003e66 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	40012c00 	.word	0x40012c00
 8003e88:	40013400 	.word	0x40013400
 8003e8c:	40000400 	.word	0x40000400
 8003e90:	40000800 	.word	0x40000800
 8003e94:	40014000 	.word	0x40014000

08003e98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e042      	b.n	8003f30 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d106      	bne.n	8003ec2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f7fc ff77 	bl	8000db0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2224      	movs	r2, #36	@ 0x24
 8003ec6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0201 	bic.w	r2, r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d002      	beq.n	8003ee8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f001 f82c 	bl	8004f40 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 fd5d 	bl	80049a8 <UART_SetConfig>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d101      	bne.n	8003ef8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e01b      	b.n	8003f30 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689a      	ldr	r2, [r3, #8]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 0201 	orr.w	r2, r2, #1
 8003f26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f001 f8ab 	bl	8005084 <UART_CheckIdleState>
 8003f2e:	4603      	mov	r3, r0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08a      	sub	sp, #40	@ 0x28
 8003f3c:	af02      	add	r7, sp, #8
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	603b      	str	r3, [r7, #0]
 8003f44:	4613      	mov	r3, r2
 8003f46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4e:	2b20      	cmp	r3, #32
 8003f50:	d17b      	bne.n	800404a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d002      	beq.n	8003f5e <HAL_UART_Transmit+0x26>
 8003f58:	88fb      	ldrh	r3, [r7, #6]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e074      	b.n	800404c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2221      	movs	r2, #33	@ 0x21
 8003f6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f72:	f7fd f8d7 	bl	8001124 <HAL_GetTick>
 8003f76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	88fa      	ldrh	r2, [r7, #6]
 8003f7c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	88fa      	ldrh	r2, [r7, #6]
 8003f84:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f90:	d108      	bne.n	8003fa4 <HAL_UART_Transmit+0x6c>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d104      	bne.n	8003fa4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	61bb      	str	r3, [r7, #24]
 8003fa2:	e003      	b.n	8003fac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fac:	e030      	b.n	8004010 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	2180      	movs	r1, #128	@ 0x80
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f001 f90d 	bl	80051d8 <UART_WaitOnFlagUntilTimeout>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d005      	beq.n	8003fd0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e03d      	b.n	800404c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10b      	bne.n	8003fee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	881b      	ldrh	r3, [r3, #0]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fe4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	3302      	adds	r3, #2
 8003fea:	61bb      	str	r3, [r7, #24]
 8003fec:	e007      	b.n	8003ffe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	781a      	ldrb	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004004:	b29b      	uxth	r3, r3
 8004006:	3b01      	subs	r3, #1
 8004008:	b29a      	uxth	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004016:	b29b      	uxth	r3, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1c8      	bne.n	8003fae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	9300      	str	r3, [sp, #0]
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	2200      	movs	r2, #0
 8004024:	2140      	movs	r1, #64	@ 0x40
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f001 f8d6 	bl	80051d8 <UART_WaitOnFlagUntilTimeout>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d005      	beq.n	800403e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2220      	movs	r2, #32
 8004036:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e006      	b.n	800404c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2220      	movs	r2, #32
 8004042:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004046:	2300      	movs	r3, #0
 8004048:	e000      	b.n	800404c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800404a:	2302      	movs	r3, #2
  }
}
 800404c:	4618      	mov	r0, r3
 800404e:	3720      	adds	r7, #32
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b08a      	sub	sp, #40	@ 0x28
 8004058:	af02      	add	r7, sp, #8
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	603b      	str	r3, [r7, #0]
 8004060:	4613      	mov	r3, r2
 8004062:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800406a:	2b20      	cmp	r3, #32
 800406c:	f040 80b5 	bne.w	80041da <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d002      	beq.n	800407c <HAL_UART_Receive+0x28>
 8004076:	88fb      	ldrh	r3, [r7, #6]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e0ad      	b.n	80041dc <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2222      	movs	r2, #34	@ 0x22
 800408c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004096:	f7fd f845 	bl	8001124 <HAL_GetTick>
 800409a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	88fa      	ldrh	r2, [r7, #6]
 80040a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	88fa      	ldrh	r2, [r7, #6]
 80040a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040b4:	d10e      	bne.n	80040d4 <HAL_UART_Receive+0x80>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d105      	bne.n	80040ca <HAL_UART_Receive+0x76>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80040c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80040c8:	e02d      	b.n	8004126 <HAL_UART_Receive+0xd2>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	22ff      	movs	r2, #255	@ 0xff
 80040ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80040d2:	e028      	b.n	8004126 <HAL_UART_Receive+0xd2>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10d      	bne.n	80040f8 <HAL_UART_Receive+0xa4>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d104      	bne.n	80040ee <HAL_UART_Receive+0x9a>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	22ff      	movs	r2, #255	@ 0xff
 80040e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80040ec:	e01b      	b.n	8004126 <HAL_UART_Receive+0xd2>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	227f      	movs	r2, #127	@ 0x7f
 80040f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80040f6:	e016      	b.n	8004126 <HAL_UART_Receive+0xd2>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004100:	d10d      	bne.n	800411e <HAL_UART_Receive+0xca>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d104      	bne.n	8004114 <HAL_UART_Receive+0xc0>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	227f      	movs	r2, #127	@ 0x7f
 800410e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004112:	e008      	b.n	8004126 <HAL_UART_Receive+0xd2>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	223f      	movs	r2, #63	@ 0x3f
 8004118:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800411c:	e003      	b.n	8004126 <HAL_UART_Receive+0xd2>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800412c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004136:	d108      	bne.n	800414a <HAL_UART_Receive+0xf6>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d104      	bne.n	800414a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004140:	2300      	movs	r3, #0
 8004142:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	61bb      	str	r3, [r7, #24]
 8004148:	e003      	b.n	8004152 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800414e:	2300      	movs	r3, #0
 8004150:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004152:	e036      	b.n	80041c2 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	2200      	movs	r2, #0
 800415c:	2120      	movs	r1, #32
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f001 f83a 	bl	80051d8 <UART_WaitOnFlagUntilTimeout>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d005      	beq.n	8004176 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2220      	movs	r2, #32
 800416e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e032      	b.n	80041dc <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10c      	bne.n	8004196 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004182:	b29a      	uxth	r2, r3
 8004184:	8a7b      	ldrh	r3, [r7, #18]
 8004186:	4013      	ands	r3, r2
 8004188:	b29a      	uxth	r2, r3
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	3302      	adds	r3, #2
 8004192:	61bb      	str	r3, [r7, #24]
 8004194:	e00c      	b.n	80041b0 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419c:	b2da      	uxtb	r2, r3
 800419e:	8a7b      	ldrh	r3, [r7, #18]
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	4013      	ands	r3, r2
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	3301      	adds	r3, #1
 80041ae:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1c2      	bne.n	8004154 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2220      	movs	r2, #32
 80041d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80041d6:	2300      	movs	r3, #0
 80041d8:	e000      	b.n	80041dc <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80041da:	2302      	movs	r3, #2
  }
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3720      	adds	r7, #32
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b08a      	sub	sp, #40	@ 0x28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	4613      	mov	r3, r2
 80041f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f8:	2b20      	cmp	r3, #32
 80041fa:	d167      	bne.n	80042cc <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d002      	beq.n	8004208 <HAL_UART_Transmit_DMA+0x24>
 8004202:	88fb      	ldrh	r3, [r7, #6]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e060      	b.n	80042ce <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	88fa      	ldrh	r2, [r7, #6]
 8004216:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	88fa      	ldrh	r2, [r7, #6]
 800421e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2221      	movs	r2, #33	@ 0x21
 800422e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004236:	2b00      	cmp	r3, #0
 8004238:	d028      	beq.n	800428c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800423e:	4a26      	ldr	r2, [pc, #152]	@ (80042d8 <HAL_UART_Transmit_DMA+0xf4>)
 8004240:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004246:	4a25      	ldr	r2, [pc, #148]	@ (80042dc <HAL_UART_Transmit_DMA+0xf8>)
 8004248:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800424e:	4a24      	ldr	r2, [pc, #144]	@ (80042e0 <HAL_UART_Transmit_DMA+0xfc>)
 8004250:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004256:	2200      	movs	r2, #0
 8004258:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004262:	4619      	mov	r1, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	3328      	adds	r3, #40	@ 0x28
 800426a:	461a      	mov	r2, r3
 800426c:	88fb      	ldrh	r3, [r7, #6]
 800426e:	f7fd f91d 	bl	80014ac <HAL_DMA_Start_IT>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d009      	beq.n	800428c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2210      	movs	r2, #16
 800427c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2220      	movs	r2, #32
 8004284:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e020      	b.n	80042ce <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2240      	movs	r2, #64	@ 0x40
 8004292:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	3308      	adds	r3, #8
 800429a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	e853 3f00 	ldrex	r3, [r3]
 80042a2:	613b      	str	r3, [r7, #16]
   return(result);
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3308      	adds	r3, #8
 80042b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042b4:	623a      	str	r2, [r7, #32]
 80042b6:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b8:	69f9      	ldr	r1, [r7, #28]
 80042ba:	6a3a      	ldr	r2, [r7, #32]
 80042bc:	e841 2300 	strex	r3, r2, [r1]
 80042c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1e5      	bne.n	8004294 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80042c8:	2300      	movs	r3, #0
 80042ca:	e000      	b.n	80042ce <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80042cc:	2302      	movs	r3, #2
  }
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3728      	adds	r7, #40	@ 0x28
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	08005401 	.word	0x08005401
 80042dc:	0800549b 	.word	0x0800549b
 80042e0:	080054b7 	.word	0x080054b7

080042e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b0ba      	sub	sp, #232	@ 0xe8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800430a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800430e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004312:	4013      	ands	r3, r2
 8004314:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004318:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800431c:	2b00      	cmp	r3, #0
 800431e:	d11b      	bne.n	8004358 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004324:	f003 0320 	and.w	r3, r3, #32
 8004328:	2b00      	cmp	r3, #0
 800432a:	d015      	beq.n	8004358 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800432c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004330:	f003 0320 	and.w	r3, r3, #32
 8004334:	2b00      	cmp	r3, #0
 8004336:	d105      	bne.n	8004344 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004338:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800433c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d009      	beq.n	8004358 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 8300 	beq.w	800494e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	4798      	blx	r3
      }
      return;
 8004356:	e2fa      	b.n	800494e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004358:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 8123 	beq.w	80045a8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004362:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004366:	4b8d      	ldr	r3, [pc, #564]	@ (800459c <HAL_UART_IRQHandler+0x2b8>)
 8004368:	4013      	ands	r3, r2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d106      	bne.n	800437c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800436e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004372:	4b8b      	ldr	r3, [pc, #556]	@ (80045a0 <HAL_UART_IRQHandler+0x2bc>)
 8004374:	4013      	ands	r3, r2
 8004376:	2b00      	cmp	r3, #0
 8004378:	f000 8116 	beq.w	80045a8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800437c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	2b00      	cmp	r3, #0
 8004386:	d011      	beq.n	80043ac <HAL_UART_IRQHandler+0xc8>
 8004388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800438c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00b      	beq.n	80043ac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2201      	movs	r2, #1
 800439a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043a2:	f043 0201 	orr.w	r2, r3, #1
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d011      	beq.n	80043dc <HAL_UART_IRQHandler+0xf8>
 80043b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043bc:	f003 0301 	and.w	r3, r3, #1
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00b      	beq.n	80043dc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2202      	movs	r2, #2
 80043ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043d2:	f043 0204 	orr.w	r2, r3, #4
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d011      	beq.n	800440c <HAL_UART_IRQHandler+0x128>
 80043e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00b      	beq.n	800440c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2204      	movs	r2, #4
 80043fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004402:	f043 0202 	orr.w	r2, r3, #2
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800440c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004410:	f003 0308 	and.w	r3, r3, #8
 8004414:	2b00      	cmp	r3, #0
 8004416:	d017      	beq.n	8004448 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800441c:	f003 0320 	and.w	r3, r3, #32
 8004420:	2b00      	cmp	r3, #0
 8004422:	d105      	bne.n	8004430 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004424:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004428:	4b5c      	ldr	r3, [pc, #368]	@ (800459c <HAL_UART_IRQHandler+0x2b8>)
 800442a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00b      	beq.n	8004448 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2208      	movs	r2, #8
 8004436:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800443e:	f043 0208 	orr.w	r2, r3, #8
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800444c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004450:	2b00      	cmp	r3, #0
 8004452:	d012      	beq.n	800447a <HAL_UART_IRQHandler+0x196>
 8004454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004458:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00c      	beq.n	800447a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004468:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004470:	f043 0220 	orr.w	r2, r3, #32
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 8266 	beq.w	8004952 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800448a:	f003 0320 	and.w	r3, r3, #32
 800448e:	2b00      	cmp	r3, #0
 8004490:	d013      	beq.n	80044ba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b00      	cmp	r3, #0
 800449c:	d105      	bne.n	80044aa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800449e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d007      	beq.n	80044ba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ce:	2b40      	cmp	r3, #64	@ 0x40
 80044d0:	d005      	beq.n	80044de <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80044d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044d6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d054      	beq.n	8004588 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 ff28 	bl	8005334 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ee:	2b40      	cmp	r3, #64	@ 0x40
 80044f0:	d146      	bne.n	8004580 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	3308      	adds	r3, #8
 80044f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004500:	e853 3f00 	ldrex	r3, [r3]
 8004504:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004508:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800450c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004510:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3308      	adds	r3, #8
 800451a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800451e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004522:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004526:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800452a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800452e:	e841 2300 	strex	r3, r2, [r1]
 8004532:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004536:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1d9      	bne.n	80044f2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004544:	2b00      	cmp	r3, #0
 8004546:	d017      	beq.n	8004578 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800454e:	4a15      	ldr	r2, [pc, #84]	@ (80045a4 <HAL_UART_IRQHandler+0x2c0>)
 8004550:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004558:	4618      	mov	r0, r3
 800455a:	f7fd f87b 	bl	8001654 <HAL_DMA_Abort_IT>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d019      	beq.n	8004598 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800456a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004572:	4610      	mov	r0, r2
 8004574:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004576:	e00f      	b.n	8004598 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f9ff 	bl	800497c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800457e:	e00b      	b.n	8004598 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f9fb 	bl	800497c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004586:	e007      	b.n	8004598 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 f9f7 	bl	800497c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004596:	e1dc      	b.n	8004952 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004598:	bf00      	nop
    return;
 800459a:	e1da      	b.n	8004952 <HAL_UART_IRQHandler+0x66e>
 800459c:	10000001 	.word	0x10000001
 80045a0:	04000120 	.word	0x04000120
 80045a4:	08005537 	.word	0x08005537

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	f040 8170 	bne.w	8004892 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80045b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045b6:	f003 0310 	and.w	r3, r3, #16
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f000 8169 	beq.w	8004892 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80045c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045c4:	f003 0310 	and.w	r3, r3, #16
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 8162 	beq.w	8004892 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2210      	movs	r2, #16
 80045d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045e0:	2b40      	cmp	r3, #64	@ 0x40
 80045e2:	f040 80d8 	bne.w	8004796 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 80af 	beq.w	800475c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004604:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004608:	429a      	cmp	r2, r3
 800460a:	f080 80a7 	bcs.w	800475c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004614:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0320 	and.w	r3, r3, #32
 8004626:	2b00      	cmp	r3, #0
 8004628:	f040 8087 	bne.w	800473a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004634:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004638:	e853 3f00 	ldrex	r3, [r3]
 800463c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004640:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004644:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004648:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	461a      	mov	r2, r3
 8004652:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004656:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800465a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004662:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004666:	e841 2300 	strex	r3, r2, [r1]
 800466a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800466e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1da      	bne.n	800462c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3308      	adds	r3, #8
 800467c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004680:	e853 3f00 	ldrex	r3, [r3]
 8004684:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004686:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004688:	f023 0301 	bic.w	r3, r3, #1
 800468c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	3308      	adds	r3, #8
 8004696:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800469a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800469e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80046a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80046a6:	e841 2300 	strex	r3, r2, [r1]
 80046aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80046ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1e1      	bne.n	8004676 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	3308      	adds	r3, #8
 80046b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046bc:	e853 3f00 	ldrex	r3, [r3]
 80046c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80046c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3308      	adds	r3, #8
 80046d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80046d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80046d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80046dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80046de:	e841 2300 	strex	r3, r2, [r1]
 80046e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80046e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1e3      	bne.n	80046b2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2220      	movs	r2, #32
 80046ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004700:	e853 3f00 	ldrex	r3, [r3]
 8004704:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004706:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004708:	f023 0310 	bic.w	r3, r3, #16
 800470c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	461a      	mov	r2, r3
 8004716:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800471a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800471c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004720:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004722:	e841 2300 	strex	r3, r2, [r1]
 8004726:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004728:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1e4      	bne.n	80046f8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004734:	4618      	mov	r0, r3
 8004736:	f7fc ff34 	bl	80015a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2202      	movs	r2, #2
 800473e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800474c:	b29b      	uxth	r3, r3
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	b29b      	uxth	r3, r3
 8004752:	4619      	mov	r1, r3
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 f91b 	bl	8004990 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800475a:	e0fc      	b.n	8004956 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004762:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004766:	429a      	cmp	r2, r3
 8004768:	f040 80f5 	bne.w	8004956 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0320 	and.w	r3, r3, #32
 800477a:	2b20      	cmp	r3, #32
 800477c:	f040 80eb 	bne.w	8004956 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2202      	movs	r2, #2
 8004784:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800478c:	4619      	mov	r1, r3
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f8fe 	bl	8004990 <HAL_UARTEx_RxEventCallback>
      return;
 8004794:	e0df      	b.n	8004956 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	f000 80d1 	beq.w	800495a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80047b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 80cc 	beq.w	800495a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ca:	e853 3f00 	ldrex	r3, [r3]
 80047ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80047d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	461a      	mov	r2, r3
 80047e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80047e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80047e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047ec:	e841 2300 	strex	r3, r2, [r1]
 80047f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1e4      	bne.n	80047c2 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	3308      	adds	r3, #8
 80047fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004802:	e853 3f00 	ldrex	r3, [r3]
 8004806:	623b      	str	r3, [r7, #32]
   return(result);
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800480e:	f023 0301 	bic.w	r3, r3, #1
 8004812:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	3308      	adds	r3, #8
 800481c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004820:	633a      	str	r2, [r7, #48]	@ 0x30
 8004822:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004824:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004826:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004828:	e841 2300 	strex	r3, r2, [r1]
 800482c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800482e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1e1      	bne.n	80047f8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2220      	movs	r2, #32
 8004838:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	e853 3f00 	ldrex	r3, [r3]
 8004854:	60fb      	str	r3, [r7, #12]
   return(result);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f023 0310 	bic.w	r3, r3, #16
 800485c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	461a      	mov	r2, r3
 8004866:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800486a:	61fb      	str	r3, [r7, #28]
 800486c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486e:	69b9      	ldr	r1, [r7, #24]
 8004870:	69fa      	ldr	r2, [r7, #28]
 8004872:	e841 2300 	strex	r3, r2, [r1]
 8004876:	617b      	str	r3, [r7, #20]
   return(result);
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1e4      	bne.n	8004848 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2202      	movs	r2, #2
 8004882:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004884:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004888:	4619      	mov	r1, r3
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f880 	bl	8004990 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004890:	e063      	b.n	800495a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004896:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00e      	beq.n	80048bc <HAL_UART_IRQHandler+0x5d8>
 800489e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d008      	beq.n	80048bc <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80048b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 fe7f 	bl	80055b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80048ba:	e051      	b.n	8004960 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80048bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d014      	beq.n	80048f2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80048c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d105      	bne.n	80048e0 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80048d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d008      	beq.n	80048f2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d03a      	beq.n	800495e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	4798      	blx	r3
    }
    return;
 80048f0:	e035      	b.n	800495e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80048f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d009      	beq.n	8004912 <HAL_UART_IRQHandler+0x62e>
 80048fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004906:	2b00      	cmp	r3, #0
 8004908:	d003      	beq.n	8004912 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 fe29 	bl	8005562 <UART_EndTransmit_IT>
    return;
 8004910:	e026      	b.n	8004960 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004916:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d009      	beq.n	8004932 <HAL_UART_IRQHandler+0x64e>
 800491e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004922:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 fe58 	bl	80055e0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004930:	e016      	b.n	8004960 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004936:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d010      	beq.n	8004960 <HAL_UART_IRQHandler+0x67c>
 800493e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004942:	2b00      	cmp	r3, #0
 8004944:	da0c      	bge.n	8004960 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 fe40 	bl	80055cc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800494c:	e008      	b.n	8004960 <HAL_UART_IRQHandler+0x67c>
      return;
 800494e:	bf00      	nop
 8004950:	e006      	b.n	8004960 <HAL_UART_IRQHandler+0x67c>
    return;
 8004952:	bf00      	nop
 8004954:	e004      	b.n	8004960 <HAL_UART_IRQHandler+0x67c>
      return;
 8004956:	bf00      	nop
 8004958:	e002      	b.n	8004960 <HAL_UART_IRQHandler+0x67c>
      return;
 800495a:	bf00      	nop
 800495c:	e000      	b.n	8004960 <HAL_UART_IRQHandler+0x67c>
    return;
 800495e:	bf00      	nop
  }
}
 8004960:	37e8      	adds	r7, #232	@ 0xe8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop

08004968 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	460b      	mov	r3, r1
 800499a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049ac:	b08c      	sub	sp, #48	@ 0x30
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	431a      	orrs	r2, r3
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	431a      	orrs	r2, r3
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	69db      	ldr	r3, [r3, #28]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	4bab      	ldr	r3, [pc, #684]	@ (8004c84 <UART_SetConfig+0x2dc>)
 80049d8:	4013      	ands	r3, r2
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	6812      	ldr	r2, [r2, #0]
 80049de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049e0:	430b      	orrs	r3, r1
 80049e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	68da      	ldr	r2, [r3, #12]
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4aa0      	ldr	r2, [pc, #640]	@ (8004c88 <UART_SetConfig+0x2e0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d004      	beq.n	8004a14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a10:	4313      	orrs	r3, r2
 8004a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004a1e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	6812      	ldr	r2, [r2, #0]
 8004a26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a28:	430b      	orrs	r3, r1
 8004a2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a32:	f023 010f 	bic.w	r1, r3, #15
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a91      	ldr	r2, [pc, #580]	@ (8004c8c <UART_SetConfig+0x2e4>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d125      	bne.n	8004a98 <UART_SetConfig+0xf0>
 8004a4c:	4b90      	ldr	r3, [pc, #576]	@ (8004c90 <UART_SetConfig+0x2e8>)
 8004a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a52:	f003 0303 	and.w	r3, r3, #3
 8004a56:	2b03      	cmp	r3, #3
 8004a58:	d81a      	bhi.n	8004a90 <UART_SetConfig+0xe8>
 8004a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a60 <UART_SetConfig+0xb8>)
 8004a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a60:	08004a71 	.word	0x08004a71
 8004a64:	08004a81 	.word	0x08004a81
 8004a68:	08004a79 	.word	0x08004a79
 8004a6c:	08004a89 	.word	0x08004a89
 8004a70:	2301      	movs	r3, #1
 8004a72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a76:	e0d6      	b.n	8004c26 <UART_SetConfig+0x27e>
 8004a78:	2302      	movs	r3, #2
 8004a7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a7e:	e0d2      	b.n	8004c26 <UART_SetConfig+0x27e>
 8004a80:	2304      	movs	r3, #4
 8004a82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a86:	e0ce      	b.n	8004c26 <UART_SetConfig+0x27e>
 8004a88:	2308      	movs	r3, #8
 8004a8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a8e:	e0ca      	b.n	8004c26 <UART_SetConfig+0x27e>
 8004a90:	2310      	movs	r3, #16
 8004a92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a96:	e0c6      	b.n	8004c26 <UART_SetConfig+0x27e>
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a7d      	ldr	r2, [pc, #500]	@ (8004c94 <UART_SetConfig+0x2ec>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d138      	bne.n	8004b14 <UART_SetConfig+0x16c>
 8004aa2:	4b7b      	ldr	r3, [pc, #492]	@ (8004c90 <UART_SetConfig+0x2e8>)
 8004aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aa8:	f003 030c 	and.w	r3, r3, #12
 8004aac:	2b0c      	cmp	r3, #12
 8004aae:	d82d      	bhi.n	8004b0c <UART_SetConfig+0x164>
 8004ab0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ab8 <UART_SetConfig+0x110>)
 8004ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab6:	bf00      	nop
 8004ab8:	08004aed 	.word	0x08004aed
 8004abc:	08004b0d 	.word	0x08004b0d
 8004ac0:	08004b0d 	.word	0x08004b0d
 8004ac4:	08004b0d 	.word	0x08004b0d
 8004ac8:	08004afd 	.word	0x08004afd
 8004acc:	08004b0d 	.word	0x08004b0d
 8004ad0:	08004b0d 	.word	0x08004b0d
 8004ad4:	08004b0d 	.word	0x08004b0d
 8004ad8:	08004af5 	.word	0x08004af5
 8004adc:	08004b0d 	.word	0x08004b0d
 8004ae0:	08004b0d 	.word	0x08004b0d
 8004ae4:	08004b0d 	.word	0x08004b0d
 8004ae8:	08004b05 	.word	0x08004b05
 8004aec:	2300      	movs	r3, #0
 8004aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004af2:	e098      	b.n	8004c26 <UART_SetConfig+0x27e>
 8004af4:	2302      	movs	r3, #2
 8004af6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004afa:	e094      	b.n	8004c26 <UART_SetConfig+0x27e>
 8004afc:	2304      	movs	r3, #4
 8004afe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b02:	e090      	b.n	8004c26 <UART_SetConfig+0x27e>
 8004b04:	2308      	movs	r3, #8
 8004b06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b0a:	e08c      	b.n	8004c26 <UART_SetConfig+0x27e>
 8004b0c:	2310      	movs	r3, #16
 8004b0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b12:	e088      	b.n	8004c26 <UART_SetConfig+0x27e>
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a5f      	ldr	r2, [pc, #380]	@ (8004c98 <UART_SetConfig+0x2f0>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d125      	bne.n	8004b6a <UART_SetConfig+0x1c2>
 8004b1e:	4b5c      	ldr	r3, [pc, #368]	@ (8004c90 <UART_SetConfig+0x2e8>)
 8004b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b24:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004b28:	2b30      	cmp	r3, #48	@ 0x30
 8004b2a:	d016      	beq.n	8004b5a <UART_SetConfig+0x1b2>
 8004b2c:	2b30      	cmp	r3, #48	@ 0x30
 8004b2e:	d818      	bhi.n	8004b62 <UART_SetConfig+0x1ba>
 8004b30:	2b20      	cmp	r3, #32
 8004b32:	d00a      	beq.n	8004b4a <UART_SetConfig+0x1a2>
 8004b34:	2b20      	cmp	r3, #32
 8004b36:	d814      	bhi.n	8004b62 <UART_SetConfig+0x1ba>
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d002      	beq.n	8004b42 <UART_SetConfig+0x19a>
 8004b3c:	2b10      	cmp	r3, #16
 8004b3e:	d008      	beq.n	8004b52 <UART_SetConfig+0x1aa>
 8004b40:	e00f      	b.n	8004b62 <UART_SetConfig+0x1ba>
 8004b42:	2300      	movs	r3, #0
 8004b44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b48:	e06d      	b.n	8004c26 <UART_SetConfig+0x27e>
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b50:	e069      	b.n	8004c26 <UART_SetConfig+0x27e>
 8004b52:	2304      	movs	r3, #4
 8004b54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b58:	e065      	b.n	8004c26 <UART_SetConfig+0x27e>
 8004b5a:	2308      	movs	r3, #8
 8004b5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b60:	e061      	b.n	8004c26 <UART_SetConfig+0x27e>
 8004b62:	2310      	movs	r3, #16
 8004b64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b68:	e05d      	b.n	8004c26 <UART_SetConfig+0x27e>
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a4b      	ldr	r2, [pc, #300]	@ (8004c9c <UART_SetConfig+0x2f4>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d125      	bne.n	8004bc0 <UART_SetConfig+0x218>
 8004b74:	4b46      	ldr	r3, [pc, #280]	@ (8004c90 <UART_SetConfig+0x2e8>)
 8004b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b7a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004b7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b80:	d016      	beq.n	8004bb0 <UART_SetConfig+0x208>
 8004b82:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b84:	d818      	bhi.n	8004bb8 <UART_SetConfig+0x210>
 8004b86:	2b80      	cmp	r3, #128	@ 0x80
 8004b88:	d00a      	beq.n	8004ba0 <UART_SetConfig+0x1f8>
 8004b8a:	2b80      	cmp	r3, #128	@ 0x80
 8004b8c:	d814      	bhi.n	8004bb8 <UART_SetConfig+0x210>
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d002      	beq.n	8004b98 <UART_SetConfig+0x1f0>
 8004b92:	2b40      	cmp	r3, #64	@ 0x40
 8004b94:	d008      	beq.n	8004ba8 <UART_SetConfig+0x200>
 8004b96:	e00f      	b.n	8004bb8 <UART_SetConfig+0x210>
 8004b98:	2300      	movs	r3, #0
 8004b9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b9e:	e042      	b.n	8004c26 <UART_SetConfig+0x27e>
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ba6:	e03e      	b.n	8004c26 <UART_SetConfig+0x27e>
 8004ba8:	2304      	movs	r3, #4
 8004baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bae:	e03a      	b.n	8004c26 <UART_SetConfig+0x27e>
 8004bb0:	2308      	movs	r3, #8
 8004bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bb6:	e036      	b.n	8004c26 <UART_SetConfig+0x27e>
 8004bb8:	2310      	movs	r3, #16
 8004bba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bbe:	e032      	b.n	8004c26 <UART_SetConfig+0x27e>
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a30      	ldr	r2, [pc, #192]	@ (8004c88 <UART_SetConfig+0x2e0>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d12a      	bne.n	8004c20 <UART_SetConfig+0x278>
 8004bca:	4b31      	ldr	r3, [pc, #196]	@ (8004c90 <UART_SetConfig+0x2e8>)
 8004bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bd0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004bd4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004bd8:	d01a      	beq.n	8004c10 <UART_SetConfig+0x268>
 8004bda:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004bde:	d81b      	bhi.n	8004c18 <UART_SetConfig+0x270>
 8004be0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004be4:	d00c      	beq.n	8004c00 <UART_SetConfig+0x258>
 8004be6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bea:	d815      	bhi.n	8004c18 <UART_SetConfig+0x270>
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d003      	beq.n	8004bf8 <UART_SetConfig+0x250>
 8004bf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bf4:	d008      	beq.n	8004c08 <UART_SetConfig+0x260>
 8004bf6:	e00f      	b.n	8004c18 <UART_SetConfig+0x270>
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bfe:	e012      	b.n	8004c26 <UART_SetConfig+0x27e>
 8004c00:	2302      	movs	r3, #2
 8004c02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c06:	e00e      	b.n	8004c26 <UART_SetConfig+0x27e>
 8004c08:	2304      	movs	r3, #4
 8004c0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c0e:	e00a      	b.n	8004c26 <UART_SetConfig+0x27e>
 8004c10:	2308      	movs	r3, #8
 8004c12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c16:	e006      	b.n	8004c26 <UART_SetConfig+0x27e>
 8004c18:	2310      	movs	r3, #16
 8004c1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c1e:	e002      	b.n	8004c26 <UART_SetConfig+0x27e>
 8004c20:	2310      	movs	r3, #16
 8004c22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a17      	ldr	r2, [pc, #92]	@ (8004c88 <UART_SetConfig+0x2e0>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	f040 80a8 	bne.w	8004d82 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c32:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004c36:	2b08      	cmp	r3, #8
 8004c38:	d834      	bhi.n	8004ca4 <UART_SetConfig+0x2fc>
 8004c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8004c40 <UART_SetConfig+0x298>)
 8004c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c40:	08004c65 	.word	0x08004c65
 8004c44:	08004ca5 	.word	0x08004ca5
 8004c48:	08004c6d 	.word	0x08004c6d
 8004c4c:	08004ca5 	.word	0x08004ca5
 8004c50:	08004c73 	.word	0x08004c73
 8004c54:	08004ca5 	.word	0x08004ca5
 8004c58:	08004ca5 	.word	0x08004ca5
 8004c5c:	08004ca5 	.word	0x08004ca5
 8004c60:	08004c7b 	.word	0x08004c7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c64:	f7fd fdb6 	bl	80027d4 <HAL_RCC_GetPCLK1Freq>
 8004c68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c6a:	e021      	b.n	8004cb0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ca0 <UART_SetConfig+0x2f8>)
 8004c6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c70:	e01e      	b.n	8004cb0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c72:	f7fd fd41 	bl	80026f8 <HAL_RCC_GetSysClockFreq>
 8004c76:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c78:	e01a      	b.n	8004cb0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c80:	e016      	b.n	8004cb0 <UART_SetConfig+0x308>
 8004c82:	bf00      	nop
 8004c84:	cfff69f3 	.word	0xcfff69f3
 8004c88:	40008000 	.word	0x40008000
 8004c8c:	40013800 	.word	0x40013800
 8004c90:	40021000 	.word	0x40021000
 8004c94:	40004400 	.word	0x40004400
 8004c98:	40004800 	.word	0x40004800
 8004c9c:	40004c00 	.word	0x40004c00
 8004ca0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004cae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 812a 	beq.w	8004f0c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cbc:	4a9e      	ldr	r2, [pc, #632]	@ (8004f38 <UART_SetConfig+0x590>)
 8004cbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cca:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	005b      	lsls	r3, r3, #1
 8004cd4:	4413      	add	r3, r2
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d305      	bcc.n	8004ce8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d903      	bls.n	8004cf0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004cee:	e10d      	b.n	8004f0c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	60bb      	str	r3, [r7, #8]
 8004cf6:	60fa      	str	r2, [r7, #12]
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfc:	4a8e      	ldr	r2, [pc, #568]	@ (8004f38 <UART_SetConfig+0x590>)
 8004cfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	2200      	movs	r2, #0
 8004d06:	603b      	str	r3, [r7, #0]
 8004d08:	607a      	str	r2, [r7, #4]
 8004d0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d12:	f7fb fad5 	bl	80002c0 <__aeabi_uldivmod>
 8004d16:	4602      	mov	r2, r0
 8004d18:	460b      	mov	r3, r1
 8004d1a:	4610      	mov	r0, r2
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	f04f 0200 	mov.w	r2, #0
 8004d22:	f04f 0300 	mov.w	r3, #0
 8004d26:	020b      	lsls	r3, r1, #8
 8004d28:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004d2c:	0202      	lsls	r2, r0, #8
 8004d2e:	6979      	ldr	r1, [r7, #20]
 8004d30:	6849      	ldr	r1, [r1, #4]
 8004d32:	0849      	lsrs	r1, r1, #1
 8004d34:	2000      	movs	r0, #0
 8004d36:	460c      	mov	r4, r1
 8004d38:	4605      	mov	r5, r0
 8004d3a:	eb12 0804 	adds.w	r8, r2, r4
 8004d3e:	eb43 0905 	adc.w	r9, r3, r5
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	469a      	mov	sl, r3
 8004d4a:	4693      	mov	fp, r2
 8004d4c:	4652      	mov	r2, sl
 8004d4e:	465b      	mov	r3, fp
 8004d50:	4640      	mov	r0, r8
 8004d52:	4649      	mov	r1, r9
 8004d54:	f7fb fab4 	bl	80002c0 <__aeabi_uldivmod>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d66:	d308      	bcc.n	8004d7a <UART_SetConfig+0x3d2>
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d6e:	d204      	bcs.n	8004d7a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6a3a      	ldr	r2, [r7, #32]
 8004d76:	60da      	str	r2, [r3, #12]
 8004d78:	e0c8      	b.n	8004f0c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004d80:	e0c4      	b.n	8004f0c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d8a:	d167      	bne.n	8004e5c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004d8c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004d90:	2b08      	cmp	r3, #8
 8004d92:	d828      	bhi.n	8004de6 <UART_SetConfig+0x43e>
 8004d94:	a201      	add	r2, pc, #4	@ (adr r2, 8004d9c <UART_SetConfig+0x3f4>)
 8004d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9a:	bf00      	nop
 8004d9c:	08004dc1 	.word	0x08004dc1
 8004da0:	08004dc9 	.word	0x08004dc9
 8004da4:	08004dd1 	.word	0x08004dd1
 8004da8:	08004de7 	.word	0x08004de7
 8004dac:	08004dd7 	.word	0x08004dd7
 8004db0:	08004de7 	.word	0x08004de7
 8004db4:	08004de7 	.word	0x08004de7
 8004db8:	08004de7 	.word	0x08004de7
 8004dbc:	08004ddf 	.word	0x08004ddf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dc0:	f7fd fd08 	bl	80027d4 <HAL_RCC_GetPCLK1Freq>
 8004dc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004dc6:	e014      	b.n	8004df2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dc8:	f7fd fd1a 	bl	8002800 <HAL_RCC_GetPCLK2Freq>
 8004dcc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004dce:	e010      	b.n	8004df2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dd0:	4b5a      	ldr	r3, [pc, #360]	@ (8004f3c <UART_SetConfig+0x594>)
 8004dd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004dd4:	e00d      	b.n	8004df2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dd6:	f7fd fc8f 	bl	80026f8 <HAL_RCC_GetSysClockFreq>
 8004dda:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ddc:	e009      	b.n	8004df2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004de2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004de4:	e005      	b.n	8004df2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004df0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 8089 	beq.w	8004f0c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfe:	4a4e      	ldr	r2, [pc, #312]	@ (8004f38 <UART_SetConfig+0x590>)
 8004e00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e04:	461a      	mov	r2, r3
 8004e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e08:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e0c:	005a      	lsls	r2, r3, #1
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	085b      	lsrs	r3, r3, #1
 8004e14:	441a      	add	r2, r3
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e1e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e20:	6a3b      	ldr	r3, [r7, #32]
 8004e22:	2b0f      	cmp	r3, #15
 8004e24:	d916      	bls.n	8004e54 <UART_SetConfig+0x4ac>
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e2c:	d212      	bcs.n	8004e54 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e2e:	6a3b      	ldr	r3, [r7, #32]
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	f023 030f 	bic.w	r3, r3, #15
 8004e36:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e38:	6a3b      	ldr	r3, [r7, #32]
 8004e3a:	085b      	lsrs	r3, r3, #1
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	8bfb      	ldrh	r3, [r7, #30]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	8bfa      	ldrh	r2, [r7, #30]
 8004e50:	60da      	str	r2, [r3, #12]
 8004e52:	e05b      	b.n	8004f0c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004e5a:	e057      	b.n	8004f0c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e5c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d828      	bhi.n	8004eb6 <UART_SetConfig+0x50e>
 8004e64:	a201      	add	r2, pc, #4	@ (adr r2, 8004e6c <UART_SetConfig+0x4c4>)
 8004e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6a:	bf00      	nop
 8004e6c:	08004e91 	.word	0x08004e91
 8004e70:	08004e99 	.word	0x08004e99
 8004e74:	08004ea1 	.word	0x08004ea1
 8004e78:	08004eb7 	.word	0x08004eb7
 8004e7c:	08004ea7 	.word	0x08004ea7
 8004e80:	08004eb7 	.word	0x08004eb7
 8004e84:	08004eb7 	.word	0x08004eb7
 8004e88:	08004eb7 	.word	0x08004eb7
 8004e8c:	08004eaf 	.word	0x08004eaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e90:	f7fd fca0 	bl	80027d4 <HAL_RCC_GetPCLK1Freq>
 8004e94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e96:	e014      	b.n	8004ec2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e98:	f7fd fcb2 	bl	8002800 <HAL_RCC_GetPCLK2Freq>
 8004e9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e9e:	e010      	b.n	8004ec2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ea0:	4b26      	ldr	r3, [pc, #152]	@ (8004f3c <UART_SetConfig+0x594>)
 8004ea2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ea4:	e00d      	b.n	8004ec2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ea6:	f7fd fc27 	bl	80026f8 <HAL_RCC_GetSysClockFreq>
 8004eaa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004eac:	e009      	b.n	8004ec2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004eb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004eb4:	e005      	b.n	8004ec2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004ec0:	bf00      	nop
    }

    if (pclk != 0U)
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d021      	beq.n	8004f0c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ecc:	4a1a      	ldr	r2, [pc, #104]	@ (8004f38 <UART_SetConfig+0x590>)
 8004ece:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed6:	fbb3 f2f2 	udiv	r2, r3, r2
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	085b      	lsrs	r3, r3, #1
 8004ee0:	441a      	add	r2, r3
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004eec:	6a3b      	ldr	r3, [r7, #32]
 8004eee:	2b0f      	cmp	r3, #15
 8004ef0:	d909      	bls.n	8004f06 <UART_SetConfig+0x55e>
 8004ef2:	6a3b      	ldr	r3, [r7, #32]
 8004ef4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ef8:	d205      	bcs.n	8004f06 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004efa:	6a3b      	ldr	r3, [r7, #32]
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	60da      	str	r2, [r3, #12]
 8004f04:	e002      	b.n	8004f0c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	2200      	movs	r2, #0
 8004f26:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004f28:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3730      	adds	r7, #48	@ 0x30
 8004f30:	46bd      	mov	sp, r7
 8004f32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f36:	bf00      	nop
 8004f38:	08006768 	.word	0x08006768
 8004f3c:	00f42400 	.word	0x00f42400

08004f40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f4c:	f003 0308 	and.w	r3, r3, #8
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00a      	beq.n	8004f6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00a      	beq.n	8004f8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00a      	beq.n	8004fae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb2:	f003 0304 	and.w	r3, r3, #4
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd4:	f003 0310 	and.w	r3, r3, #16
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00a      	beq.n	8004ff2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff6:	f003 0320 	and.w	r3, r3, #32
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00a      	beq.n	8005014 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	430a      	orrs	r2, r1
 8005012:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800501c:	2b00      	cmp	r3, #0
 800501e:	d01a      	beq.n	8005056 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800503a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800503e:	d10a      	bne.n	8005056 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800505a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00a      	beq.n	8005078 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	430a      	orrs	r2, r1
 8005076:	605a      	str	r2, [r3, #4]
  }
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b098      	sub	sp, #96	@ 0x60
 8005088:	af02      	add	r7, sp, #8
 800508a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005094:	f7fc f846 	bl	8001124 <HAL_GetTick>
 8005098:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0308 	and.w	r3, r3, #8
 80050a4:	2b08      	cmp	r3, #8
 80050a6:	d12f      	bne.n	8005108 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050b0:	2200      	movs	r2, #0
 80050b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f88e 	bl	80051d8 <UART_WaitOnFlagUntilTimeout>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d022      	beq.n	8005108 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ca:	e853 3f00 	ldrex	r3, [r3]
 80050ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	461a      	mov	r2, r3
 80050de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80050e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050e8:	e841 2300 	strex	r3, r2, [r1]
 80050ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1e6      	bne.n	80050c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e063      	b.n	80051d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0304 	and.w	r3, r3, #4
 8005112:	2b04      	cmp	r3, #4
 8005114:	d149      	bne.n	80051aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005116:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800511e:	2200      	movs	r2, #0
 8005120:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 f857 	bl	80051d8 <UART_WaitOnFlagUntilTimeout>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d03c      	beq.n	80051aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005138:	e853 3f00 	ldrex	r3, [r3]
 800513c:	623b      	str	r3, [r7, #32]
   return(result);
 800513e:	6a3b      	ldr	r3, [r7, #32]
 8005140:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005144:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	461a      	mov	r2, r3
 800514c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800514e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005150:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005152:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005154:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005156:	e841 2300 	strex	r3, r2, [r1]
 800515a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800515c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1e6      	bne.n	8005130 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	3308      	adds	r3, #8
 8005168:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	e853 3f00 	ldrex	r3, [r3]
 8005170:	60fb      	str	r3, [r7, #12]
   return(result);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f023 0301 	bic.w	r3, r3, #1
 8005178:	64bb      	str	r3, [r7, #72]	@ 0x48
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	3308      	adds	r3, #8
 8005180:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005182:	61fa      	str	r2, [r7, #28]
 8005184:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005186:	69b9      	ldr	r1, [r7, #24]
 8005188:	69fa      	ldr	r2, [r7, #28]
 800518a:	e841 2300 	strex	r3, r2, [r1]
 800518e:	617b      	str	r3, [r7, #20]
   return(result);
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1e5      	bne.n	8005162 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2220      	movs	r2, #32
 800519a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e012      	b.n	80051d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2220      	movs	r2, #32
 80051ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2220      	movs	r2, #32
 80051b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3758      	adds	r7, #88	@ 0x58
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	603b      	str	r3, [r7, #0]
 80051e4:	4613      	mov	r3, r2
 80051e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051e8:	e04f      	b.n	800528a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051f0:	d04b      	beq.n	800528a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051f2:	f7fb ff97 	bl	8001124 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d302      	bcc.n	8005208 <UART_WaitOnFlagUntilTimeout+0x30>
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e04e      	b.n	80052aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0304 	and.w	r3, r3, #4
 8005216:	2b00      	cmp	r3, #0
 8005218:	d037      	beq.n	800528a <UART_WaitOnFlagUntilTimeout+0xb2>
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	2b80      	cmp	r3, #128	@ 0x80
 800521e:	d034      	beq.n	800528a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	2b40      	cmp	r3, #64	@ 0x40
 8005224:	d031      	beq.n	800528a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	69db      	ldr	r3, [r3, #28]
 800522c:	f003 0308 	and.w	r3, r3, #8
 8005230:	2b08      	cmp	r3, #8
 8005232:	d110      	bne.n	8005256 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2208      	movs	r2, #8
 800523a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f000 f879 	bl	8005334 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2208      	movs	r2, #8
 8005246:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e029      	b.n	80052aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	69db      	ldr	r3, [r3, #28]
 800525c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005260:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005264:	d111      	bne.n	800528a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800526e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f000 f85f 	bl	8005334 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2220      	movs	r2, #32
 800527a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e00f      	b.n	80052aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	69da      	ldr	r2, [r3, #28]
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	4013      	ands	r3, r2
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	429a      	cmp	r2, r3
 8005298:	bf0c      	ite	eq
 800529a:	2301      	moveq	r3, #1
 800529c:	2300      	movne	r3, #0
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	461a      	mov	r2, r3
 80052a2:	79fb      	ldrb	r3, [r7, #7]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d0a0      	beq.n	80051ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b08f      	sub	sp, #60	@ 0x3c
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c0:	6a3b      	ldr	r3, [r7, #32]
 80052c2:	e853 3f00 	ldrex	r3, [r3]
 80052c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80052ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	461a      	mov	r2, r3
 80052d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052da:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052e0:	e841 2300 	strex	r3, r2, [r1]
 80052e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1e6      	bne.n	80052ba <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	3308      	adds	r3, #8
 80052f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	e853 3f00 	ldrex	r3, [r3]
 80052fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005302:	633b      	str	r3, [r7, #48]	@ 0x30
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	3308      	adds	r3, #8
 800530a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800530c:	61ba      	str	r2, [r7, #24]
 800530e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005310:	6979      	ldr	r1, [r7, #20]
 8005312:	69ba      	ldr	r2, [r7, #24]
 8005314:	e841 2300 	strex	r3, r2, [r1]
 8005318:	613b      	str	r3, [r7, #16]
   return(result);
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1e5      	bne.n	80052ec <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2220      	movs	r2, #32
 8005324:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8005328:	bf00      	nop
 800532a:	373c      	adds	r7, #60	@ 0x3c
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005334:	b480      	push	{r7}
 8005336:	b095      	sub	sp, #84	@ 0x54
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005344:	e853 3f00 	ldrex	r3, [r3]
 8005348:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800534a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800534c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005350:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	461a      	mov	r2, r3
 8005358:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800535a:	643b      	str	r3, [r7, #64]	@ 0x40
 800535c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005360:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005362:	e841 2300 	strex	r3, r2, [r1]
 8005366:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1e6      	bne.n	800533c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	3308      	adds	r3, #8
 8005374:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005376:	6a3b      	ldr	r3, [r7, #32]
 8005378:	e853 3f00 	ldrex	r3, [r3]
 800537c:	61fb      	str	r3, [r7, #28]
   return(result);
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005384:	f023 0301 	bic.w	r3, r3, #1
 8005388:	64bb      	str	r3, [r7, #72]	@ 0x48
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	3308      	adds	r3, #8
 8005390:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005392:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005394:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005396:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005398:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800539a:	e841 2300 	strex	r3, r2, [r1]
 800539e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1e3      	bne.n	800536e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d118      	bne.n	80053e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	e853 3f00 	ldrex	r3, [r3]
 80053ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	f023 0310 	bic.w	r3, r3, #16
 80053c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	461a      	mov	r2, r3
 80053ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053cc:	61bb      	str	r3, [r7, #24]
 80053ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d0:	6979      	ldr	r1, [r7, #20]
 80053d2:	69ba      	ldr	r2, [r7, #24]
 80053d4:	e841 2300 	strex	r3, r2, [r1]
 80053d8:	613b      	str	r3, [r7, #16]
   return(result);
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1e6      	bne.n	80053ae <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2220      	movs	r2, #32
 80053e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80053f4:	bf00      	nop
 80053f6:	3754      	adds	r7, #84	@ 0x54
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b090      	sub	sp, #64	@ 0x40
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800540c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0320 	and.w	r3, r3, #32
 8005418:	2b00      	cmp	r3, #0
 800541a:	d137      	bne.n	800548c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800541c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800541e:	2200      	movs	r2, #0
 8005420:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005424:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	3308      	adds	r3, #8
 800542a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542e:	e853 3f00 	ldrex	r3, [r3]
 8005432:	623b      	str	r3, [r7, #32]
   return(result);
 8005434:	6a3b      	ldr	r3, [r7, #32]
 8005436:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800543a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800543c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	3308      	adds	r3, #8
 8005442:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005444:	633a      	str	r2, [r7, #48]	@ 0x30
 8005446:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005448:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800544a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800544c:	e841 2300 	strex	r3, r2, [r1]
 8005450:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1e5      	bne.n	8005424 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	e853 3f00 	ldrex	r3, [r3]
 8005464:	60fb      	str	r3, [r7, #12]
   return(result);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800546c:	637b      	str	r3, [r7, #52]	@ 0x34
 800546e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	461a      	mov	r2, r3
 8005474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005476:	61fb      	str	r3, [r7, #28]
 8005478:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547a:	69b9      	ldr	r1, [r7, #24]
 800547c:	69fa      	ldr	r2, [r7, #28]
 800547e:	e841 2300 	strex	r3, r2, [r1]
 8005482:	617b      	str	r3, [r7, #20]
   return(result);
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1e6      	bne.n	8005458 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800548a:	e002      	b.n	8005492 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800548c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800548e:	f7fb fa79 	bl	8000984 <HAL_UART_TxCpltCallback>
}
 8005492:	bf00      	nop
 8005494:	3740      	adds	r7, #64	@ 0x40
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800549a:	b580      	push	{r7, lr}
 800549c:	b084      	sub	sp, #16
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f7ff fa5d 	bl	8004968 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054ae:	bf00      	nop
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b086      	sub	sp, #24
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ca:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054de:	2b80      	cmp	r3, #128	@ 0x80
 80054e0:	d109      	bne.n	80054f6 <UART_DMAError+0x40>
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	2b21      	cmp	r3, #33	@ 0x21
 80054e6:	d106      	bne.n	80054f6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80054f0:	6978      	ldr	r0, [r7, #20]
 80054f2:	f7ff fede 	bl	80052b2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005500:	2b40      	cmp	r3, #64	@ 0x40
 8005502:	d109      	bne.n	8005518 <UART_DMAError+0x62>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2b22      	cmp	r3, #34	@ 0x22
 8005508:	d106      	bne.n	8005518 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	2200      	movs	r2, #0
 800550e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8005512:	6978      	ldr	r0, [r7, #20]
 8005514:	f7ff ff0e 	bl	8005334 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800551e:	f043 0210 	orr.w	r2, r3, #16
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005528:	6978      	ldr	r0, [r7, #20]
 800552a:	f7ff fa27 	bl	800497c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800552e:	bf00      	nop
 8005530:	3718      	adds	r7, #24
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b084      	sub	sp, #16
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005542:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	f7ff fa11 	bl	800497c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800555a:	bf00      	nop
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b088      	sub	sp, #32
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	e853 3f00 	ldrex	r3, [r3]
 8005576:	60bb      	str	r3, [r7, #8]
   return(result);
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800557e:	61fb      	str	r3, [r7, #28]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	461a      	mov	r2, r3
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	61bb      	str	r3, [r7, #24]
 800558a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558c:	6979      	ldr	r1, [r7, #20]
 800558e:	69ba      	ldr	r2, [r7, #24]
 8005590:	e841 2300 	strex	r3, r2, [r1]
 8005594:	613b      	str	r3, [r7, #16]
   return(result);
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1e6      	bne.n	800556a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2220      	movs	r2, #32
 80055a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7fb f9ea 	bl	8000984 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055b0:	bf00      	nop
 80055b2:	3720      	adds	r7, #32
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005602:	2b01      	cmp	r3, #1
 8005604:	d101      	bne.n	800560a <HAL_UARTEx_DisableFifoMode+0x16>
 8005606:	2302      	movs	r3, #2
 8005608:	e027      	b.n	800565a <HAL_UARTEx_DisableFifoMode+0x66>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2224      	movs	r2, #36	@ 0x24
 8005616:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f022 0201 	bic.w	r2, r2, #1
 8005630:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005638:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2220      	movs	r2, #32
 800564c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3714      	adds	r7, #20
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b084      	sub	sp, #16
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
 800566e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005676:	2b01      	cmp	r3, #1
 8005678:	d101      	bne.n	800567e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800567a:	2302      	movs	r3, #2
 800567c:	e02d      	b.n	80056da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2224      	movs	r2, #36	@ 0x24
 800568a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f022 0201 	bic.w	r2, r2, #1
 80056a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	430a      	orrs	r2, r1
 80056b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f850 	bl	8005760 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2220      	movs	r2, #32
 80056cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b084      	sub	sp, #16
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d101      	bne.n	80056fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80056f6:	2302      	movs	r3, #2
 80056f8:	e02d      	b.n	8005756 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2224      	movs	r2, #36	@ 0x24
 8005706:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f022 0201 	bic.w	r2, r2, #1
 8005720:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	683a      	ldr	r2, [r7, #0]
 8005732:	430a      	orrs	r2, r1
 8005734:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f812 	bl	8005760 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2220      	movs	r2, #32
 8005748:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
	...

08005760 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800576c:	2b00      	cmp	r3, #0
 800576e:	d108      	bne.n	8005782 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005780:	e031      	b.n	80057e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005782:	2308      	movs	r3, #8
 8005784:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005786:	2308      	movs	r3, #8
 8005788:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	0e5b      	lsrs	r3, r3, #25
 8005792:	b2db      	uxtb	r3, r3
 8005794:	f003 0307 	and.w	r3, r3, #7
 8005798:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	0f5b      	lsrs	r3, r3, #29
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	f003 0307 	and.w	r3, r3, #7
 80057a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057aa:	7bbb      	ldrb	r3, [r7, #14]
 80057ac:	7b3a      	ldrb	r2, [r7, #12]
 80057ae:	4911      	ldr	r1, [pc, #68]	@ (80057f4 <UARTEx_SetNbDataToProcess+0x94>)
 80057b0:	5c8a      	ldrb	r2, [r1, r2]
 80057b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80057b6:	7b3a      	ldrb	r2, [r7, #12]
 80057b8:	490f      	ldr	r1, [pc, #60]	@ (80057f8 <UARTEx_SetNbDataToProcess+0x98>)
 80057ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057c8:	7bfb      	ldrb	r3, [r7, #15]
 80057ca:	7b7a      	ldrb	r2, [r7, #13]
 80057cc:	4909      	ldr	r1, [pc, #36]	@ (80057f4 <UARTEx_SetNbDataToProcess+0x94>)
 80057ce:	5c8a      	ldrb	r2, [r1, r2]
 80057d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80057d4:	7b7a      	ldrb	r2, [r7, #13]
 80057d6:	4908      	ldr	r1, [pc, #32]	@ (80057f8 <UARTEx_SetNbDataToProcess+0x98>)
 80057d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057da:	fb93 f3f2 	sdiv	r3, r3, r2
 80057de:	b29a      	uxth	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80057e6:	bf00      	nop
 80057e8:	3714      	adds	r7, #20
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	08006780 	.word	0x08006780
 80057f8:	08006788 	.word	0x08006788

080057fc <std>:
 80057fc:	2300      	movs	r3, #0
 80057fe:	b510      	push	{r4, lr}
 8005800:	4604      	mov	r4, r0
 8005802:	e9c0 3300 	strd	r3, r3, [r0]
 8005806:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800580a:	6083      	str	r3, [r0, #8]
 800580c:	8181      	strh	r1, [r0, #12]
 800580e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005810:	81c2      	strh	r2, [r0, #14]
 8005812:	6183      	str	r3, [r0, #24]
 8005814:	4619      	mov	r1, r3
 8005816:	2208      	movs	r2, #8
 8005818:	305c      	adds	r0, #92	@ 0x5c
 800581a:	f000 f921 	bl	8005a60 <memset>
 800581e:	4b0d      	ldr	r3, [pc, #52]	@ (8005854 <std+0x58>)
 8005820:	6263      	str	r3, [r4, #36]	@ 0x24
 8005822:	4b0d      	ldr	r3, [pc, #52]	@ (8005858 <std+0x5c>)
 8005824:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005826:	4b0d      	ldr	r3, [pc, #52]	@ (800585c <std+0x60>)
 8005828:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800582a:	4b0d      	ldr	r3, [pc, #52]	@ (8005860 <std+0x64>)
 800582c:	6323      	str	r3, [r4, #48]	@ 0x30
 800582e:	4b0d      	ldr	r3, [pc, #52]	@ (8005864 <std+0x68>)
 8005830:	6224      	str	r4, [r4, #32]
 8005832:	429c      	cmp	r4, r3
 8005834:	d006      	beq.n	8005844 <std+0x48>
 8005836:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800583a:	4294      	cmp	r4, r2
 800583c:	d002      	beq.n	8005844 <std+0x48>
 800583e:	33d0      	adds	r3, #208	@ 0xd0
 8005840:	429c      	cmp	r4, r3
 8005842:	d105      	bne.n	8005850 <std+0x54>
 8005844:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800584c:	f000 b93a 	b.w	8005ac4 <__retarget_lock_init_recursive>
 8005850:	bd10      	pop	{r4, pc}
 8005852:	bf00      	nop
 8005854:	0800631d 	.word	0x0800631d
 8005858:	0800633f 	.word	0x0800633f
 800585c:	08006377 	.word	0x08006377
 8005860:	0800639b 	.word	0x0800639b
 8005864:	20000328 	.word	0x20000328

08005868 <stdio_exit_handler>:
 8005868:	4a02      	ldr	r2, [pc, #8]	@ (8005874 <stdio_exit_handler+0xc>)
 800586a:	4903      	ldr	r1, [pc, #12]	@ (8005878 <stdio_exit_handler+0x10>)
 800586c:	4803      	ldr	r0, [pc, #12]	@ (800587c <stdio_exit_handler+0x14>)
 800586e:	f000 b869 	b.w	8005944 <_fwalk_sglue>
 8005872:	bf00      	nop
 8005874:	2000000c 	.word	0x2000000c
 8005878:	080062b5 	.word	0x080062b5
 800587c:	2000001c 	.word	0x2000001c

08005880 <cleanup_stdio>:
 8005880:	6841      	ldr	r1, [r0, #4]
 8005882:	4b0c      	ldr	r3, [pc, #48]	@ (80058b4 <cleanup_stdio+0x34>)
 8005884:	4299      	cmp	r1, r3
 8005886:	b510      	push	{r4, lr}
 8005888:	4604      	mov	r4, r0
 800588a:	d001      	beq.n	8005890 <cleanup_stdio+0x10>
 800588c:	f000 fd12 	bl	80062b4 <_fflush_r>
 8005890:	68a1      	ldr	r1, [r4, #8]
 8005892:	4b09      	ldr	r3, [pc, #36]	@ (80058b8 <cleanup_stdio+0x38>)
 8005894:	4299      	cmp	r1, r3
 8005896:	d002      	beq.n	800589e <cleanup_stdio+0x1e>
 8005898:	4620      	mov	r0, r4
 800589a:	f000 fd0b 	bl	80062b4 <_fflush_r>
 800589e:	68e1      	ldr	r1, [r4, #12]
 80058a0:	4b06      	ldr	r3, [pc, #24]	@ (80058bc <cleanup_stdio+0x3c>)
 80058a2:	4299      	cmp	r1, r3
 80058a4:	d004      	beq.n	80058b0 <cleanup_stdio+0x30>
 80058a6:	4620      	mov	r0, r4
 80058a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058ac:	f000 bd02 	b.w	80062b4 <_fflush_r>
 80058b0:	bd10      	pop	{r4, pc}
 80058b2:	bf00      	nop
 80058b4:	20000328 	.word	0x20000328
 80058b8:	20000390 	.word	0x20000390
 80058bc:	200003f8 	.word	0x200003f8

080058c0 <global_stdio_init.part.0>:
 80058c0:	b510      	push	{r4, lr}
 80058c2:	4b0b      	ldr	r3, [pc, #44]	@ (80058f0 <global_stdio_init.part.0+0x30>)
 80058c4:	4c0b      	ldr	r4, [pc, #44]	@ (80058f4 <global_stdio_init.part.0+0x34>)
 80058c6:	4a0c      	ldr	r2, [pc, #48]	@ (80058f8 <global_stdio_init.part.0+0x38>)
 80058c8:	601a      	str	r2, [r3, #0]
 80058ca:	4620      	mov	r0, r4
 80058cc:	2200      	movs	r2, #0
 80058ce:	2104      	movs	r1, #4
 80058d0:	f7ff ff94 	bl	80057fc <std>
 80058d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80058d8:	2201      	movs	r2, #1
 80058da:	2109      	movs	r1, #9
 80058dc:	f7ff ff8e 	bl	80057fc <std>
 80058e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80058e4:	2202      	movs	r2, #2
 80058e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058ea:	2112      	movs	r1, #18
 80058ec:	f7ff bf86 	b.w	80057fc <std>
 80058f0:	20000460 	.word	0x20000460
 80058f4:	20000328 	.word	0x20000328
 80058f8:	08005869 	.word	0x08005869

080058fc <__sfp_lock_acquire>:
 80058fc:	4801      	ldr	r0, [pc, #4]	@ (8005904 <__sfp_lock_acquire+0x8>)
 80058fe:	f000 b8e2 	b.w	8005ac6 <__retarget_lock_acquire_recursive>
 8005902:	bf00      	nop
 8005904:	20000465 	.word	0x20000465

08005908 <__sfp_lock_release>:
 8005908:	4801      	ldr	r0, [pc, #4]	@ (8005910 <__sfp_lock_release+0x8>)
 800590a:	f000 b8dd 	b.w	8005ac8 <__retarget_lock_release_recursive>
 800590e:	bf00      	nop
 8005910:	20000465 	.word	0x20000465

08005914 <__sinit>:
 8005914:	b510      	push	{r4, lr}
 8005916:	4604      	mov	r4, r0
 8005918:	f7ff fff0 	bl	80058fc <__sfp_lock_acquire>
 800591c:	6a23      	ldr	r3, [r4, #32]
 800591e:	b11b      	cbz	r3, 8005928 <__sinit+0x14>
 8005920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005924:	f7ff bff0 	b.w	8005908 <__sfp_lock_release>
 8005928:	4b04      	ldr	r3, [pc, #16]	@ (800593c <__sinit+0x28>)
 800592a:	6223      	str	r3, [r4, #32]
 800592c:	4b04      	ldr	r3, [pc, #16]	@ (8005940 <__sinit+0x2c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d1f5      	bne.n	8005920 <__sinit+0xc>
 8005934:	f7ff ffc4 	bl	80058c0 <global_stdio_init.part.0>
 8005938:	e7f2      	b.n	8005920 <__sinit+0xc>
 800593a:	bf00      	nop
 800593c:	08005881 	.word	0x08005881
 8005940:	20000460 	.word	0x20000460

08005944 <_fwalk_sglue>:
 8005944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005948:	4607      	mov	r7, r0
 800594a:	4688      	mov	r8, r1
 800594c:	4614      	mov	r4, r2
 800594e:	2600      	movs	r6, #0
 8005950:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005954:	f1b9 0901 	subs.w	r9, r9, #1
 8005958:	d505      	bpl.n	8005966 <_fwalk_sglue+0x22>
 800595a:	6824      	ldr	r4, [r4, #0]
 800595c:	2c00      	cmp	r4, #0
 800595e:	d1f7      	bne.n	8005950 <_fwalk_sglue+0xc>
 8005960:	4630      	mov	r0, r6
 8005962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005966:	89ab      	ldrh	r3, [r5, #12]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d907      	bls.n	800597c <_fwalk_sglue+0x38>
 800596c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005970:	3301      	adds	r3, #1
 8005972:	d003      	beq.n	800597c <_fwalk_sglue+0x38>
 8005974:	4629      	mov	r1, r5
 8005976:	4638      	mov	r0, r7
 8005978:	47c0      	blx	r8
 800597a:	4306      	orrs	r6, r0
 800597c:	3568      	adds	r5, #104	@ 0x68
 800597e:	e7e9      	b.n	8005954 <_fwalk_sglue+0x10>

08005980 <iprintf>:
 8005980:	b40f      	push	{r0, r1, r2, r3}
 8005982:	b507      	push	{r0, r1, r2, lr}
 8005984:	4906      	ldr	r1, [pc, #24]	@ (80059a0 <iprintf+0x20>)
 8005986:	ab04      	add	r3, sp, #16
 8005988:	6808      	ldr	r0, [r1, #0]
 800598a:	f853 2b04 	ldr.w	r2, [r3], #4
 800598e:	6881      	ldr	r1, [r0, #8]
 8005990:	9301      	str	r3, [sp, #4]
 8005992:	f000 f8c3 	bl	8005b1c <_vfiprintf_r>
 8005996:	b003      	add	sp, #12
 8005998:	f85d eb04 	ldr.w	lr, [sp], #4
 800599c:	b004      	add	sp, #16
 800599e:	4770      	bx	lr
 80059a0:	20000018 	.word	0x20000018

080059a4 <_puts_r>:
 80059a4:	6a03      	ldr	r3, [r0, #32]
 80059a6:	b570      	push	{r4, r5, r6, lr}
 80059a8:	6884      	ldr	r4, [r0, #8]
 80059aa:	4605      	mov	r5, r0
 80059ac:	460e      	mov	r6, r1
 80059ae:	b90b      	cbnz	r3, 80059b4 <_puts_r+0x10>
 80059b0:	f7ff ffb0 	bl	8005914 <__sinit>
 80059b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80059b6:	07db      	lsls	r3, r3, #31
 80059b8:	d405      	bmi.n	80059c6 <_puts_r+0x22>
 80059ba:	89a3      	ldrh	r3, [r4, #12]
 80059bc:	0598      	lsls	r0, r3, #22
 80059be:	d402      	bmi.n	80059c6 <_puts_r+0x22>
 80059c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059c2:	f000 f880 	bl	8005ac6 <__retarget_lock_acquire_recursive>
 80059c6:	89a3      	ldrh	r3, [r4, #12]
 80059c8:	0719      	lsls	r1, r3, #28
 80059ca:	d502      	bpl.n	80059d2 <_puts_r+0x2e>
 80059cc:	6923      	ldr	r3, [r4, #16]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d135      	bne.n	8005a3e <_puts_r+0x9a>
 80059d2:	4621      	mov	r1, r4
 80059d4:	4628      	mov	r0, r5
 80059d6:	f000 fd23 	bl	8006420 <__swsetup_r>
 80059da:	b380      	cbz	r0, 8005a3e <_puts_r+0x9a>
 80059dc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80059e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80059e2:	07da      	lsls	r2, r3, #31
 80059e4:	d405      	bmi.n	80059f2 <_puts_r+0x4e>
 80059e6:	89a3      	ldrh	r3, [r4, #12]
 80059e8:	059b      	lsls	r3, r3, #22
 80059ea:	d402      	bmi.n	80059f2 <_puts_r+0x4e>
 80059ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059ee:	f000 f86b 	bl	8005ac8 <__retarget_lock_release_recursive>
 80059f2:	4628      	mov	r0, r5
 80059f4:	bd70      	pop	{r4, r5, r6, pc}
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	da04      	bge.n	8005a04 <_puts_r+0x60>
 80059fa:	69a2      	ldr	r2, [r4, #24]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	dc17      	bgt.n	8005a30 <_puts_r+0x8c>
 8005a00:	290a      	cmp	r1, #10
 8005a02:	d015      	beq.n	8005a30 <_puts_r+0x8c>
 8005a04:	6823      	ldr	r3, [r4, #0]
 8005a06:	1c5a      	adds	r2, r3, #1
 8005a08:	6022      	str	r2, [r4, #0]
 8005a0a:	7019      	strb	r1, [r3, #0]
 8005a0c:	68a3      	ldr	r3, [r4, #8]
 8005a0e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005a12:	3b01      	subs	r3, #1
 8005a14:	60a3      	str	r3, [r4, #8]
 8005a16:	2900      	cmp	r1, #0
 8005a18:	d1ed      	bne.n	80059f6 <_puts_r+0x52>
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	da11      	bge.n	8005a42 <_puts_r+0x9e>
 8005a1e:	4622      	mov	r2, r4
 8005a20:	210a      	movs	r1, #10
 8005a22:	4628      	mov	r0, r5
 8005a24:	f000 fcbd 	bl	80063a2 <__swbuf_r>
 8005a28:	3001      	adds	r0, #1
 8005a2a:	d0d7      	beq.n	80059dc <_puts_r+0x38>
 8005a2c:	250a      	movs	r5, #10
 8005a2e:	e7d7      	b.n	80059e0 <_puts_r+0x3c>
 8005a30:	4622      	mov	r2, r4
 8005a32:	4628      	mov	r0, r5
 8005a34:	f000 fcb5 	bl	80063a2 <__swbuf_r>
 8005a38:	3001      	adds	r0, #1
 8005a3a:	d1e7      	bne.n	8005a0c <_puts_r+0x68>
 8005a3c:	e7ce      	b.n	80059dc <_puts_r+0x38>
 8005a3e:	3e01      	subs	r6, #1
 8005a40:	e7e4      	b.n	8005a0c <_puts_r+0x68>
 8005a42:	6823      	ldr	r3, [r4, #0]
 8005a44:	1c5a      	adds	r2, r3, #1
 8005a46:	6022      	str	r2, [r4, #0]
 8005a48:	220a      	movs	r2, #10
 8005a4a:	701a      	strb	r2, [r3, #0]
 8005a4c:	e7ee      	b.n	8005a2c <_puts_r+0x88>
	...

08005a50 <puts>:
 8005a50:	4b02      	ldr	r3, [pc, #8]	@ (8005a5c <puts+0xc>)
 8005a52:	4601      	mov	r1, r0
 8005a54:	6818      	ldr	r0, [r3, #0]
 8005a56:	f7ff bfa5 	b.w	80059a4 <_puts_r>
 8005a5a:	bf00      	nop
 8005a5c:	20000018 	.word	0x20000018

08005a60 <memset>:
 8005a60:	4402      	add	r2, r0
 8005a62:	4603      	mov	r3, r0
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d100      	bne.n	8005a6a <memset+0xa>
 8005a68:	4770      	bx	lr
 8005a6a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a6e:	e7f9      	b.n	8005a64 <memset+0x4>

08005a70 <__errno>:
 8005a70:	4b01      	ldr	r3, [pc, #4]	@ (8005a78 <__errno+0x8>)
 8005a72:	6818      	ldr	r0, [r3, #0]
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	20000018 	.word	0x20000018

08005a7c <__libc_init_array>:
 8005a7c:	b570      	push	{r4, r5, r6, lr}
 8005a7e:	4d0d      	ldr	r5, [pc, #52]	@ (8005ab4 <__libc_init_array+0x38>)
 8005a80:	4c0d      	ldr	r4, [pc, #52]	@ (8005ab8 <__libc_init_array+0x3c>)
 8005a82:	1b64      	subs	r4, r4, r5
 8005a84:	10a4      	asrs	r4, r4, #2
 8005a86:	2600      	movs	r6, #0
 8005a88:	42a6      	cmp	r6, r4
 8005a8a:	d109      	bne.n	8005aa0 <__libc_init_array+0x24>
 8005a8c:	4d0b      	ldr	r5, [pc, #44]	@ (8005abc <__libc_init_array+0x40>)
 8005a8e:	4c0c      	ldr	r4, [pc, #48]	@ (8005ac0 <__libc_init_array+0x44>)
 8005a90:	f000 fe40 	bl	8006714 <_init>
 8005a94:	1b64      	subs	r4, r4, r5
 8005a96:	10a4      	asrs	r4, r4, #2
 8005a98:	2600      	movs	r6, #0
 8005a9a:	42a6      	cmp	r6, r4
 8005a9c:	d105      	bne.n	8005aaa <__libc_init_array+0x2e>
 8005a9e:	bd70      	pop	{r4, r5, r6, pc}
 8005aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aa4:	4798      	blx	r3
 8005aa6:	3601      	adds	r6, #1
 8005aa8:	e7ee      	b.n	8005a88 <__libc_init_array+0xc>
 8005aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aae:	4798      	blx	r3
 8005ab0:	3601      	adds	r6, #1
 8005ab2:	e7f2      	b.n	8005a9a <__libc_init_array+0x1e>
 8005ab4:	080067cc 	.word	0x080067cc
 8005ab8:	080067cc 	.word	0x080067cc
 8005abc:	080067cc 	.word	0x080067cc
 8005ac0:	080067d0 	.word	0x080067d0

08005ac4 <__retarget_lock_init_recursive>:
 8005ac4:	4770      	bx	lr

08005ac6 <__retarget_lock_acquire_recursive>:
 8005ac6:	4770      	bx	lr

08005ac8 <__retarget_lock_release_recursive>:
 8005ac8:	4770      	bx	lr

08005aca <__sfputc_r>:
 8005aca:	6893      	ldr	r3, [r2, #8]
 8005acc:	3b01      	subs	r3, #1
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	b410      	push	{r4}
 8005ad2:	6093      	str	r3, [r2, #8]
 8005ad4:	da08      	bge.n	8005ae8 <__sfputc_r+0x1e>
 8005ad6:	6994      	ldr	r4, [r2, #24]
 8005ad8:	42a3      	cmp	r3, r4
 8005ada:	db01      	blt.n	8005ae0 <__sfputc_r+0x16>
 8005adc:	290a      	cmp	r1, #10
 8005ade:	d103      	bne.n	8005ae8 <__sfputc_r+0x1e>
 8005ae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ae4:	f000 bc5d 	b.w	80063a2 <__swbuf_r>
 8005ae8:	6813      	ldr	r3, [r2, #0]
 8005aea:	1c58      	adds	r0, r3, #1
 8005aec:	6010      	str	r0, [r2, #0]
 8005aee:	7019      	strb	r1, [r3, #0]
 8005af0:	4608      	mov	r0, r1
 8005af2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <__sfputs_r>:
 8005af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afa:	4606      	mov	r6, r0
 8005afc:	460f      	mov	r7, r1
 8005afe:	4614      	mov	r4, r2
 8005b00:	18d5      	adds	r5, r2, r3
 8005b02:	42ac      	cmp	r4, r5
 8005b04:	d101      	bne.n	8005b0a <__sfputs_r+0x12>
 8005b06:	2000      	movs	r0, #0
 8005b08:	e007      	b.n	8005b1a <__sfputs_r+0x22>
 8005b0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b0e:	463a      	mov	r2, r7
 8005b10:	4630      	mov	r0, r6
 8005b12:	f7ff ffda 	bl	8005aca <__sfputc_r>
 8005b16:	1c43      	adds	r3, r0, #1
 8005b18:	d1f3      	bne.n	8005b02 <__sfputs_r+0xa>
 8005b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005b1c <_vfiprintf_r>:
 8005b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b20:	460d      	mov	r5, r1
 8005b22:	b09d      	sub	sp, #116	@ 0x74
 8005b24:	4614      	mov	r4, r2
 8005b26:	4698      	mov	r8, r3
 8005b28:	4606      	mov	r6, r0
 8005b2a:	b118      	cbz	r0, 8005b34 <_vfiprintf_r+0x18>
 8005b2c:	6a03      	ldr	r3, [r0, #32]
 8005b2e:	b90b      	cbnz	r3, 8005b34 <_vfiprintf_r+0x18>
 8005b30:	f7ff fef0 	bl	8005914 <__sinit>
 8005b34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b36:	07d9      	lsls	r1, r3, #31
 8005b38:	d405      	bmi.n	8005b46 <_vfiprintf_r+0x2a>
 8005b3a:	89ab      	ldrh	r3, [r5, #12]
 8005b3c:	059a      	lsls	r2, r3, #22
 8005b3e:	d402      	bmi.n	8005b46 <_vfiprintf_r+0x2a>
 8005b40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b42:	f7ff ffc0 	bl	8005ac6 <__retarget_lock_acquire_recursive>
 8005b46:	89ab      	ldrh	r3, [r5, #12]
 8005b48:	071b      	lsls	r3, r3, #28
 8005b4a:	d501      	bpl.n	8005b50 <_vfiprintf_r+0x34>
 8005b4c:	692b      	ldr	r3, [r5, #16]
 8005b4e:	b99b      	cbnz	r3, 8005b78 <_vfiprintf_r+0x5c>
 8005b50:	4629      	mov	r1, r5
 8005b52:	4630      	mov	r0, r6
 8005b54:	f000 fc64 	bl	8006420 <__swsetup_r>
 8005b58:	b170      	cbz	r0, 8005b78 <_vfiprintf_r+0x5c>
 8005b5a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b5c:	07dc      	lsls	r4, r3, #31
 8005b5e:	d504      	bpl.n	8005b6a <_vfiprintf_r+0x4e>
 8005b60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b64:	b01d      	add	sp, #116	@ 0x74
 8005b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b6a:	89ab      	ldrh	r3, [r5, #12]
 8005b6c:	0598      	lsls	r0, r3, #22
 8005b6e:	d4f7      	bmi.n	8005b60 <_vfiprintf_r+0x44>
 8005b70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b72:	f7ff ffa9 	bl	8005ac8 <__retarget_lock_release_recursive>
 8005b76:	e7f3      	b.n	8005b60 <_vfiprintf_r+0x44>
 8005b78:	2300      	movs	r3, #0
 8005b7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b7c:	2320      	movs	r3, #32
 8005b7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b82:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b86:	2330      	movs	r3, #48	@ 0x30
 8005b88:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005d38 <_vfiprintf_r+0x21c>
 8005b8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b90:	f04f 0901 	mov.w	r9, #1
 8005b94:	4623      	mov	r3, r4
 8005b96:	469a      	mov	sl, r3
 8005b98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b9c:	b10a      	cbz	r2, 8005ba2 <_vfiprintf_r+0x86>
 8005b9e:	2a25      	cmp	r2, #37	@ 0x25
 8005ba0:	d1f9      	bne.n	8005b96 <_vfiprintf_r+0x7a>
 8005ba2:	ebba 0b04 	subs.w	fp, sl, r4
 8005ba6:	d00b      	beq.n	8005bc0 <_vfiprintf_r+0xa4>
 8005ba8:	465b      	mov	r3, fp
 8005baa:	4622      	mov	r2, r4
 8005bac:	4629      	mov	r1, r5
 8005bae:	4630      	mov	r0, r6
 8005bb0:	f7ff ffa2 	bl	8005af8 <__sfputs_r>
 8005bb4:	3001      	adds	r0, #1
 8005bb6:	f000 80a7 	beq.w	8005d08 <_vfiprintf_r+0x1ec>
 8005bba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005bbc:	445a      	add	r2, fp
 8005bbe:	9209      	str	r2, [sp, #36]	@ 0x24
 8005bc0:	f89a 3000 	ldrb.w	r3, [sl]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 809f 	beq.w	8005d08 <_vfiprintf_r+0x1ec>
 8005bca:	2300      	movs	r3, #0
 8005bcc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005bd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bd4:	f10a 0a01 	add.w	sl, sl, #1
 8005bd8:	9304      	str	r3, [sp, #16]
 8005bda:	9307      	str	r3, [sp, #28]
 8005bdc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005be0:	931a      	str	r3, [sp, #104]	@ 0x68
 8005be2:	4654      	mov	r4, sl
 8005be4:	2205      	movs	r2, #5
 8005be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bea:	4853      	ldr	r0, [pc, #332]	@ (8005d38 <_vfiprintf_r+0x21c>)
 8005bec:	f7fa fb18 	bl	8000220 <memchr>
 8005bf0:	9a04      	ldr	r2, [sp, #16]
 8005bf2:	b9d8      	cbnz	r0, 8005c2c <_vfiprintf_r+0x110>
 8005bf4:	06d1      	lsls	r1, r2, #27
 8005bf6:	bf44      	itt	mi
 8005bf8:	2320      	movmi	r3, #32
 8005bfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bfe:	0713      	lsls	r3, r2, #28
 8005c00:	bf44      	itt	mi
 8005c02:	232b      	movmi	r3, #43	@ 0x2b
 8005c04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c08:	f89a 3000 	ldrb.w	r3, [sl]
 8005c0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c0e:	d015      	beq.n	8005c3c <_vfiprintf_r+0x120>
 8005c10:	9a07      	ldr	r2, [sp, #28]
 8005c12:	4654      	mov	r4, sl
 8005c14:	2000      	movs	r0, #0
 8005c16:	f04f 0c0a 	mov.w	ip, #10
 8005c1a:	4621      	mov	r1, r4
 8005c1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c20:	3b30      	subs	r3, #48	@ 0x30
 8005c22:	2b09      	cmp	r3, #9
 8005c24:	d94b      	bls.n	8005cbe <_vfiprintf_r+0x1a2>
 8005c26:	b1b0      	cbz	r0, 8005c56 <_vfiprintf_r+0x13a>
 8005c28:	9207      	str	r2, [sp, #28]
 8005c2a:	e014      	b.n	8005c56 <_vfiprintf_r+0x13a>
 8005c2c:	eba0 0308 	sub.w	r3, r0, r8
 8005c30:	fa09 f303 	lsl.w	r3, r9, r3
 8005c34:	4313      	orrs	r3, r2
 8005c36:	9304      	str	r3, [sp, #16]
 8005c38:	46a2      	mov	sl, r4
 8005c3a:	e7d2      	b.n	8005be2 <_vfiprintf_r+0xc6>
 8005c3c:	9b03      	ldr	r3, [sp, #12]
 8005c3e:	1d19      	adds	r1, r3, #4
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	9103      	str	r1, [sp, #12]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	bfbb      	ittet	lt
 8005c48:	425b      	neglt	r3, r3
 8005c4a:	f042 0202 	orrlt.w	r2, r2, #2
 8005c4e:	9307      	strge	r3, [sp, #28]
 8005c50:	9307      	strlt	r3, [sp, #28]
 8005c52:	bfb8      	it	lt
 8005c54:	9204      	strlt	r2, [sp, #16]
 8005c56:	7823      	ldrb	r3, [r4, #0]
 8005c58:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c5a:	d10a      	bne.n	8005c72 <_vfiprintf_r+0x156>
 8005c5c:	7863      	ldrb	r3, [r4, #1]
 8005c5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c60:	d132      	bne.n	8005cc8 <_vfiprintf_r+0x1ac>
 8005c62:	9b03      	ldr	r3, [sp, #12]
 8005c64:	1d1a      	adds	r2, r3, #4
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	9203      	str	r2, [sp, #12]
 8005c6a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c6e:	3402      	adds	r4, #2
 8005c70:	9305      	str	r3, [sp, #20]
 8005c72:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005d48 <_vfiprintf_r+0x22c>
 8005c76:	7821      	ldrb	r1, [r4, #0]
 8005c78:	2203      	movs	r2, #3
 8005c7a:	4650      	mov	r0, sl
 8005c7c:	f7fa fad0 	bl	8000220 <memchr>
 8005c80:	b138      	cbz	r0, 8005c92 <_vfiprintf_r+0x176>
 8005c82:	9b04      	ldr	r3, [sp, #16]
 8005c84:	eba0 000a 	sub.w	r0, r0, sl
 8005c88:	2240      	movs	r2, #64	@ 0x40
 8005c8a:	4082      	lsls	r2, r0
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	3401      	adds	r4, #1
 8005c90:	9304      	str	r3, [sp, #16]
 8005c92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c96:	4829      	ldr	r0, [pc, #164]	@ (8005d3c <_vfiprintf_r+0x220>)
 8005c98:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c9c:	2206      	movs	r2, #6
 8005c9e:	f7fa fabf 	bl	8000220 <memchr>
 8005ca2:	2800      	cmp	r0, #0
 8005ca4:	d03f      	beq.n	8005d26 <_vfiprintf_r+0x20a>
 8005ca6:	4b26      	ldr	r3, [pc, #152]	@ (8005d40 <_vfiprintf_r+0x224>)
 8005ca8:	bb1b      	cbnz	r3, 8005cf2 <_vfiprintf_r+0x1d6>
 8005caa:	9b03      	ldr	r3, [sp, #12]
 8005cac:	3307      	adds	r3, #7
 8005cae:	f023 0307 	bic.w	r3, r3, #7
 8005cb2:	3308      	adds	r3, #8
 8005cb4:	9303      	str	r3, [sp, #12]
 8005cb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cb8:	443b      	add	r3, r7
 8005cba:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cbc:	e76a      	b.n	8005b94 <_vfiprintf_r+0x78>
 8005cbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cc2:	460c      	mov	r4, r1
 8005cc4:	2001      	movs	r0, #1
 8005cc6:	e7a8      	b.n	8005c1a <_vfiprintf_r+0xfe>
 8005cc8:	2300      	movs	r3, #0
 8005cca:	3401      	adds	r4, #1
 8005ccc:	9305      	str	r3, [sp, #20]
 8005cce:	4619      	mov	r1, r3
 8005cd0:	f04f 0c0a 	mov.w	ip, #10
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cda:	3a30      	subs	r2, #48	@ 0x30
 8005cdc:	2a09      	cmp	r2, #9
 8005cde:	d903      	bls.n	8005ce8 <_vfiprintf_r+0x1cc>
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d0c6      	beq.n	8005c72 <_vfiprintf_r+0x156>
 8005ce4:	9105      	str	r1, [sp, #20]
 8005ce6:	e7c4      	b.n	8005c72 <_vfiprintf_r+0x156>
 8005ce8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cec:	4604      	mov	r4, r0
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e7f0      	b.n	8005cd4 <_vfiprintf_r+0x1b8>
 8005cf2:	ab03      	add	r3, sp, #12
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	462a      	mov	r2, r5
 8005cf8:	4b12      	ldr	r3, [pc, #72]	@ (8005d44 <_vfiprintf_r+0x228>)
 8005cfa:	a904      	add	r1, sp, #16
 8005cfc:	4630      	mov	r0, r6
 8005cfe:	f3af 8000 	nop.w
 8005d02:	4607      	mov	r7, r0
 8005d04:	1c78      	adds	r0, r7, #1
 8005d06:	d1d6      	bne.n	8005cb6 <_vfiprintf_r+0x19a>
 8005d08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d0a:	07d9      	lsls	r1, r3, #31
 8005d0c:	d405      	bmi.n	8005d1a <_vfiprintf_r+0x1fe>
 8005d0e:	89ab      	ldrh	r3, [r5, #12]
 8005d10:	059a      	lsls	r2, r3, #22
 8005d12:	d402      	bmi.n	8005d1a <_vfiprintf_r+0x1fe>
 8005d14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d16:	f7ff fed7 	bl	8005ac8 <__retarget_lock_release_recursive>
 8005d1a:	89ab      	ldrh	r3, [r5, #12]
 8005d1c:	065b      	lsls	r3, r3, #25
 8005d1e:	f53f af1f 	bmi.w	8005b60 <_vfiprintf_r+0x44>
 8005d22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d24:	e71e      	b.n	8005b64 <_vfiprintf_r+0x48>
 8005d26:	ab03      	add	r3, sp, #12
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	462a      	mov	r2, r5
 8005d2c:	4b05      	ldr	r3, [pc, #20]	@ (8005d44 <_vfiprintf_r+0x228>)
 8005d2e:	a904      	add	r1, sp, #16
 8005d30:	4630      	mov	r0, r6
 8005d32:	f000 f91b 	bl	8005f6c <_printf_i>
 8005d36:	e7e4      	b.n	8005d02 <_vfiprintf_r+0x1e6>
 8005d38:	08006790 	.word	0x08006790
 8005d3c:	0800679a 	.word	0x0800679a
 8005d40:	00000000 	.word	0x00000000
 8005d44:	08005af9 	.word	0x08005af9
 8005d48:	08006796 	.word	0x08006796

08005d4c <sbrk_aligned>:
 8005d4c:	b570      	push	{r4, r5, r6, lr}
 8005d4e:	4e0f      	ldr	r6, [pc, #60]	@ (8005d8c <sbrk_aligned+0x40>)
 8005d50:	460c      	mov	r4, r1
 8005d52:	6831      	ldr	r1, [r6, #0]
 8005d54:	4605      	mov	r5, r0
 8005d56:	b911      	cbnz	r1, 8005d5e <sbrk_aligned+0x12>
 8005d58:	f000 fc70 	bl	800663c <_sbrk_r>
 8005d5c:	6030      	str	r0, [r6, #0]
 8005d5e:	4621      	mov	r1, r4
 8005d60:	4628      	mov	r0, r5
 8005d62:	f000 fc6b 	bl	800663c <_sbrk_r>
 8005d66:	1c43      	adds	r3, r0, #1
 8005d68:	d103      	bne.n	8005d72 <sbrk_aligned+0x26>
 8005d6a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005d6e:	4620      	mov	r0, r4
 8005d70:	bd70      	pop	{r4, r5, r6, pc}
 8005d72:	1cc4      	adds	r4, r0, #3
 8005d74:	f024 0403 	bic.w	r4, r4, #3
 8005d78:	42a0      	cmp	r0, r4
 8005d7a:	d0f8      	beq.n	8005d6e <sbrk_aligned+0x22>
 8005d7c:	1a21      	subs	r1, r4, r0
 8005d7e:	4628      	mov	r0, r5
 8005d80:	f000 fc5c 	bl	800663c <_sbrk_r>
 8005d84:	3001      	adds	r0, #1
 8005d86:	d1f2      	bne.n	8005d6e <sbrk_aligned+0x22>
 8005d88:	e7ef      	b.n	8005d6a <sbrk_aligned+0x1e>
 8005d8a:	bf00      	nop
 8005d8c:	20000468 	.word	0x20000468

08005d90 <_malloc_r>:
 8005d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d94:	1ccd      	adds	r5, r1, #3
 8005d96:	f025 0503 	bic.w	r5, r5, #3
 8005d9a:	3508      	adds	r5, #8
 8005d9c:	2d0c      	cmp	r5, #12
 8005d9e:	bf38      	it	cc
 8005da0:	250c      	movcc	r5, #12
 8005da2:	2d00      	cmp	r5, #0
 8005da4:	4606      	mov	r6, r0
 8005da6:	db01      	blt.n	8005dac <_malloc_r+0x1c>
 8005da8:	42a9      	cmp	r1, r5
 8005daa:	d904      	bls.n	8005db6 <_malloc_r+0x26>
 8005dac:	230c      	movs	r3, #12
 8005dae:	6033      	str	r3, [r6, #0]
 8005db0:	2000      	movs	r0, #0
 8005db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005db6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005e8c <_malloc_r+0xfc>
 8005dba:	f000 faa3 	bl	8006304 <__malloc_lock>
 8005dbe:	f8d8 3000 	ldr.w	r3, [r8]
 8005dc2:	461c      	mov	r4, r3
 8005dc4:	bb44      	cbnz	r4, 8005e18 <_malloc_r+0x88>
 8005dc6:	4629      	mov	r1, r5
 8005dc8:	4630      	mov	r0, r6
 8005dca:	f7ff ffbf 	bl	8005d4c <sbrk_aligned>
 8005dce:	1c43      	adds	r3, r0, #1
 8005dd0:	4604      	mov	r4, r0
 8005dd2:	d158      	bne.n	8005e86 <_malloc_r+0xf6>
 8005dd4:	f8d8 4000 	ldr.w	r4, [r8]
 8005dd8:	4627      	mov	r7, r4
 8005dda:	2f00      	cmp	r7, #0
 8005ddc:	d143      	bne.n	8005e66 <_malloc_r+0xd6>
 8005dde:	2c00      	cmp	r4, #0
 8005de0:	d04b      	beq.n	8005e7a <_malloc_r+0xea>
 8005de2:	6823      	ldr	r3, [r4, #0]
 8005de4:	4639      	mov	r1, r7
 8005de6:	4630      	mov	r0, r6
 8005de8:	eb04 0903 	add.w	r9, r4, r3
 8005dec:	f000 fc26 	bl	800663c <_sbrk_r>
 8005df0:	4581      	cmp	r9, r0
 8005df2:	d142      	bne.n	8005e7a <_malloc_r+0xea>
 8005df4:	6821      	ldr	r1, [r4, #0]
 8005df6:	1a6d      	subs	r5, r5, r1
 8005df8:	4629      	mov	r1, r5
 8005dfa:	4630      	mov	r0, r6
 8005dfc:	f7ff ffa6 	bl	8005d4c <sbrk_aligned>
 8005e00:	3001      	adds	r0, #1
 8005e02:	d03a      	beq.n	8005e7a <_malloc_r+0xea>
 8005e04:	6823      	ldr	r3, [r4, #0]
 8005e06:	442b      	add	r3, r5
 8005e08:	6023      	str	r3, [r4, #0]
 8005e0a:	f8d8 3000 	ldr.w	r3, [r8]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	bb62      	cbnz	r2, 8005e6c <_malloc_r+0xdc>
 8005e12:	f8c8 7000 	str.w	r7, [r8]
 8005e16:	e00f      	b.n	8005e38 <_malloc_r+0xa8>
 8005e18:	6822      	ldr	r2, [r4, #0]
 8005e1a:	1b52      	subs	r2, r2, r5
 8005e1c:	d420      	bmi.n	8005e60 <_malloc_r+0xd0>
 8005e1e:	2a0b      	cmp	r2, #11
 8005e20:	d917      	bls.n	8005e52 <_malloc_r+0xc2>
 8005e22:	1961      	adds	r1, r4, r5
 8005e24:	42a3      	cmp	r3, r4
 8005e26:	6025      	str	r5, [r4, #0]
 8005e28:	bf18      	it	ne
 8005e2a:	6059      	strne	r1, [r3, #4]
 8005e2c:	6863      	ldr	r3, [r4, #4]
 8005e2e:	bf08      	it	eq
 8005e30:	f8c8 1000 	streq.w	r1, [r8]
 8005e34:	5162      	str	r2, [r4, r5]
 8005e36:	604b      	str	r3, [r1, #4]
 8005e38:	4630      	mov	r0, r6
 8005e3a:	f000 fa69 	bl	8006310 <__malloc_unlock>
 8005e3e:	f104 000b 	add.w	r0, r4, #11
 8005e42:	1d23      	adds	r3, r4, #4
 8005e44:	f020 0007 	bic.w	r0, r0, #7
 8005e48:	1ac2      	subs	r2, r0, r3
 8005e4a:	bf1c      	itt	ne
 8005e4c:	1a1b      	subne	r3, r3, r0
 8005e4e:	50a3      	strne	r3, [r4, r2]
 8005e50:	e7af      	b.n	8005db2 <_malloc_r+0x22>
 8005e52:	6862      	ldr	r2, [r4, #4]
 8005e54:	42a3      	cmp	r3, r4
 8005e56:	bf0c      	ite	eq
 8005e58:	f8c8 2000 	streq.w	r2, [r8]
 8005e5c:	605a      	strne	r2, [r3, #4]
 8005e5e:	e7eb      	b.n	8005e38 <_malloc_r+0xa8>
 8005e60:	4623      	mov	r3, r4
 8005e62:	6864      	ldr	r4, [r4, #4]
 8005e64:	e7ae      	b.n	8005dc4 <_malloc_r+0x34>
 8005e66:	463c      	mov	r4, r7
 8005e68:	687f      	ldr	r7, [r7, #4]
 8005e6a:	e7b6      	b.n	8005dda <_malloc_r+0x4a>
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	42a3      	cmp	r3, r4
 8005e72:	d1fb      	bne.n	8005e6c <_malloc_r+0xdc>
 8005e74:	2300      	movs	r3, #0
 8005e76:	6053      	str	r3, [r2, #4]
 8005e78:	e7de      	b.n	8005e38 <_malloc_r+0xa8>
 8005e7a:	230c      	movs	r3, #12
 8005e7c:	6033      	str	r3, [r6, #0]
 8005e7e:	4630      	mov	r0, r6
 8005e80:	f000 fa46 	bl	8006310 <__malloc_unlock>
 8005e84:	e794      	b.n	8005db0 <_malloc_r+0x20>
 8005e86:	6005      	str	r5, [r0, #0]
 8005e88:	e7d6      	b.n	8005e38 <_malloc_r+0xa8>
 8005e8a:	bf00      	nop
 8005e8c:	2000046c 	.word	0x2000046c

08005e90 <_printf_common>:
 8005e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e94:	4616      	mov	r6, r2
 8005e96:	4698      	mov	r8, r3
 8005e98:	688a      	ldr	r2, [r1, #8]
 8005e9a:	690b      	ldr	r3, [r1, #16]
 8005e9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	bfb8      	it	lt
 8005ea4:	4613      	movlt	r3, r2
 8005ea6:	6033      	str	r3, [r6, #0]
 8005ea8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005eac:	4607      	mov	r7, r0
 8005eae:	460c      	mov	r4, r1
 8005eb0:	b10a      	cbz	r2, 8005eb6 <_printf_common+0x26>
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	6033      	str	r3, [r6, #0]
 8005eb6:	6823      	ldr	r3, [r4, #0]
 8005eb8:	0699      	lsls	r1, r3, #26
 8005eba:	bf42      	ittt	mi
 8005ebc:	6833      	ldrmi	r3, [r6, #0]
 8005ebe:	3302      	addmi	r3, #2
 8005ec0:	6033      	strmi	r3, [r6, #0]
 8005ec2:	6825      	ldr	r5, [r4, #0]
 8005ec4:	f015 0506 	ands.w	r5, r5, #6
 8005ec8:	d106      	bne.n	8005ed8 <_printf_common+0x48>
 8005eca:	f104 0a19 	add.w	sl, r4, #25
 8005ece:	68e3      	ldr	r3, [r4, #12]
 8005ed0:	6832      	ldr	r2, [r6, #0]
 8005ed2:	1a9b      	subs	r3, r3, r2
 8005ed4:	42ab      	cmp	r3, r5
 8005ed6:	dc26      	bgt.n	8005f26 <_printf_common+0x96>
 8005ed8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005edc:	6822      	ldr	r2, [r4, #0]
 8005ede:	3b00      	subs	r3, #0
 8005ee0:	bf18      	it	ne
 8005ee2:	2301      	movne	r3, #1
 8005ee4:	0692      	lsls	r2, r2, #26
 8005ee6:	d42b      	bmi.n	8005f40 <_printf_common+0xb0>
 8005ee8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005eec:	4641      	mov	r1, r8
 8005eee:	4638      	mov	r0, r7
 8005ef0:	47c8      	blx	r9
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	d01e      	beq.n	8005f34 <_printf_common+0xa4>
 8005ef6:	6823      	ldr	r3, [r4, #0]
 8005ef8:	6922      	ldr	r2, [r4, #16]
 8005efa:	f003 0306 	and.w	r3, r3, #6
 8005efe:	2b04      	cmp	r3, #4
 8005f00:	bf02      	ittt	eq
 8005f02:	68e5      	ldreq	r5, [r4, #12]
 8005f04:	6833      	ldreq	r3, [r6, #0]
 8005f06:	1aed      	subeq	r5, r5, r3
 8005f08:	68a3      	ldr	r3, [r4, #8]
 8005f0a:	bf0c      	ite	eq
 8005f0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f10:	2500      	movne	r5, #0
 8005f12:	4293      	cmp	r3, r2
 8005f14:	bfc4      	itt	gt
 8005f16:	1a9b      	subgt	r3, r3, r2
 8005f18:	18ed      	addgt	r5, r5, r3
 8005f1a:	2600      	movs	r6, #0
 8005f1c:	341a      	adds	r4, #26
 8005f1e:	42b5      	cmp	r5, r6
 8005f20:	d11a      	bne.n	8005f58 <_printf_common+0xc8>
 8005f22:	2000      	movs	r0, #0
 8005f24:	e008      	b.n	8005f38 <_printf_common+0xa8>
 8005f26:	2301      	movs	r3, #1
 8005f28:	4652      	mov	r2, sl
 8005f2a:	4641      	mov	r1, r8
 8005f2c:	4638      	mov	r0, r7
 8005f2e:	47c8      	blx	r9
 8005f30:	3001      	adds	r0, #1
 8005f32:	d103      	bne.n	8005f3c <_printf_common+0xac>
 8005f34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f3c:	3501      	adds	r5, #1
 8005f3e:	e7c6      	b.n	8005ece <_printf_common+0x3e>
 8005f40:	18e1      	adds	r1, r4, r3
 8005f42:	1c5a      	adds	r2, r3, #1
 8005f44:	2030      	movs	r0, #48	@ 0x30
 8005f46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f4a:	4422      	add	r2, r4
 8005f4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f54:	3302      	adds	r3, #2
 8005f56:	e7c7      	b.n	8005ee8 <_printf_common+0x58>
 8005f58:	2301      	movs	r3, #1
 8005f5a:	4622      	mov	r2, r4
 8005f5c:	4641      	mov	r1, r8
 8005f5e:	4638      	mov	r0, r7
 8005f60:	47c8      	blx	r9
 8005f62:	3001      	adds	r0, #1
 8005f64:	d0e6      	beq.n	8005f34 <_printf_common+0xa4>
 8005f66:	3601      	adds	r6, #1
 8005f68:	e7d9      	b.n	8005f1e <_printf_common+0x8e>
	...

08005f6c <_printf_i>:
 8005f6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f70:	7e0f      	ldrb	r7, [r1, #24]
 8005f72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f74:	2f78      	cmp	r7, #120	@ 0x78
 8005f76:	4691      	mov	r9, r2
 8005f78:	4680      	mov	r8, r0
 8005f7a:	460c      	mov	r4, r1
 8005f7c:	469a      	mov	sl, r3
 8005f7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f82:	d807      	bhi.n	8005f94 <_printf_i+0x28>
 8005f84:	2f62      	cmp	r7, #98	@ 0x62
 8005f86:	d80a      	bhi.n	8005f9e <_printf_i+0x32>
 8005f88:	2f00      	cmp	r7, #0
 8005f8a:	f000 80d2 	beq.w	8006132 <_printf_i+0x1c6>
 8005f8e:	2f58      	cmp	r7, #88	@ 0x58
 8005f90:	f000 80b9 	beq.w	8006106 <_printf_i+0x19a>
 8005f94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f9c:	e03a      	b.n	8006014 <_printf_i+0xa8>
 8005f9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005fa2:	2b15      	cmp	r3, #21
 8005fa4:	d8f6      	bhi.n	8005f94 <_printf_i+0x28>
 8005fa6:	a101      	add	r1, pc, #4	@ (adr r1, 8005fac <_printf_i+0x40>)
 8005fa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fac:	08006005 	.word	0x08006005
 8005fb0:	08006019 	.word	0x08006019
 8005fb4:	08005f95 	.word	0x08005f95
 8005fb8:	08005f95 	.word	0x08005f95
 8005fbc:	08005f95 	.word	0x08005f95
 8005fc0:	08005f95 	.word	0x08005f95
 8005fc4:	08006019 	.word	0x08006019
 8005fc8:	08005f95 	.word	0x08005f95
 8005fcc:	08005f95 	.word	0x08005f95
 8005fd0:	08005f95 	.word	0x08005f95
 8005fd4:	08005f95 	.word	0x08005f95
 8005fd8:	08006119 	.word	0x08006119
 8005fdc:	08006043 	.word	0x08006043
 8005fe0:	080060d3 	.word	0x080060d3
 8005fe4:	08005f95 	.word	0x08005f95
 8005fe8:	08005f95 	.word	0x08005f95
 8005fec:	0800613b 	.word	0x0800613b
 8005ff0:	08005f95 	.word	0x08005f95
 8005ff4:	08006043 	.word	0x08006043
 8005ff8:	08005f95 	.word	0x08005f95
 8005ffc:	08005f95 	.word	0x08005f95
 8006000:	080060db 	.word	0x080060db
 8006004:	6833      	ldr	r3, [r6, #0]
 8006006:	1d1a      	adds	r2, r3, #4
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	6032      	str	r2, [r6, #0]
 800600c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006010:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006014:	2301      	movs	r3, #1
 8006016:	e09d      	b.n	8006154 <_printf_i+0x1e8>
 8006018:	6833      	ldr	r3, [r6, #0]
 800601a:	6820      	ldr	r0, [r4, #0]
 800601c:	1d19      	adds	r1, r3, #4
 800601e:	6031      	str	r1, [r6, #0]
 8006020:	0606      	lsls	r6, r0, #24
 8006022:	d501      	bpl.n	8006028 <_printf_i+0xbc>
 8006024:	681d      	ldr	r5, [r3, #0]
 8006026:	e003      	b.n	8006030 <_printf_i+0xc4>
 8006028:	0645      	lsls	r5, r0, #25
 800602a:	d5fb      	bpl.n	8006024 <_printf_i+0xb8>
 800602c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006030:	2d00      	cmp	r5, #0
 8006032:	da03      	bge.n	800603c <_printf_i+0xd0>
 8006034:	232d      	movs	r3, #45	@ 0x2d
 8006036:	426d      	negs	r5, r5
 8006038:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800603c:	4859      	ldr	r0, [pc, #356]	@ (80061a4 <_printf_i+0x238>)
 800603e:	230a      	movs	r3, #10
 8006040:	e011      	b.n	8006066 <_printf_i+0xfa>
 8006042:	6821      	ldr	r1, [r4, #0]
 8006044:	6833      	ldr	r3, [r6, #0]
 8006046:	0608      	lsls	r0, r1, #24
 8006048:	f853 5b04 	ldr.w	r5, [r3], #4
 800604c:	d402      	bmi.n	8006054 <_printf_i+0xe8>
 800604e:	0649      	lsls	r1, r1, #25
 8006050:	bf48      	it	mi
 8006052:	b2ad      	uxthmi	r5, r5
 8006054:	2f6f      	cmp	r7, #111	@ 0x6f
 8006056:	4853      	ldr	r0, [pc, #332]	@ (80061a4 <_printf_i+0x238>)
 8006058:	6033      	str	r3, [r6, #0]
 800605a:	bf14      	ite	ne
 800605c:	230a      	movne	r3, #10
 800605e:	2308      	moveq	r3, #8
 8006060:	2100      	movs	r1, #0
 8006062:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006066:	6866      	ldr	r6, [r4, #4]
 8006068:	60a6      	str	r6, [r4, #8]
 800606a:	2e00      	cmp	r6, #0
 800606c:	bfa2      	ittt	ge
 800606e:	6821      	ldrge	r1, [r4, #0]
 8006070:	f021 0104 	bicge.w	r1, r1, #4
 8006074:	6021      	strge	r1, [r4, #0]
 8006076:	b90d      	cbnz	r5, 800607c <_printf_i+0x110>
 8006078:	2e00      	cmp	r6, #0
 800607a:	d04b      	beq.n	8006114 <_printf_i+0x1a8>
 800607c:	4616      	mov	r6, r2
 800607e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006082:	fb03 5711 	mls	r7, r3, r1, r5
 8006086:	5dc7      	ldrb	r7, [r0, r7]
 8006088:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800608c:	462f      	mov	r7, r5
 800608e:	42bb      	cmp	r3, r7
 8006090:	460d      	mov	r5, r1
 8006092:	d9f4      	bls.n	800607e <_printf_i+0x112>
 8006094:	2b08      	cmp	r3, #8
 8006096:	d10b      	bne.n	80060b0 <_printf_i+0x144>
 8006098:	6823      	ldr	r3, [r4, #0]
 800609a:	07df      	lsls	r7, r3, #31
 800609c:	d508      	bpl.n	80060b0 <_printf_i+0x144>
 800609e:	6923      	ldr	r3, [r4, #16]
 80060a0:	6861      	ldr	r1, [r4, #4]
 80060a2:	4299      	cmp	r1, r3
 80060a4:	bfde      	ittt	le
 80060a6:	2330      	movle	r3, #48	@ 0x30
 80060a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80060ac:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80060b0:	1b92      	subs	r2, r2, r6
 80060b2:	6122      	str	r2, [r4, #16]
 80060b4:	f8cd a000 	str.w	sl, [sp]
 80060b8:	464b      	mov	r3, r9
 80060ba:	aa03      	add	r2, sp, #12
 80060bc:	4621      	mov	r1, r4
 80060be:	4640      	mov	r0, r8
 80060c0:	f7ff fee6 	bl	8005e90 <_printf_common>
 80060c4:	3001      	adds	r0, #1
 80060c6:	d14a      	bne.n	800615e <_printf_i+0x1f2>
 80060c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80060cc:	b004      	add	sp, #16
 80060ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060d2:	6823      	ldr	r3, [r4, #0]
 80060d4:	f043 0320 	orr.w	r3, r3, #32
 80060d8:	6023      	str	r3, [r4, #0]
 80060da:	4833      	ldr	r0, [pc, #204]	@ (80061a8 <_printf_i+0x23c>)
 80060dc:	2778      	movs	r7, #120	@ 0x78
 80060de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80060e2:	6823      	ldr	r3, [r4, #0]
 80060e4:	6831      	ldr	r1, [r6, #0]
 80060e6:	061f      	lsls	r7, r3, #24
 80060e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80060ec:	d402      	bmi.n	80060f4 <_printf_i+0x188>
 80060ee:	065f      	lsls	r7, r3, #25
 80060f0:	bf48      	it	mi
 80060f2:	b2ad      	uxthmi	r5, r5
 80060f4:	6031      	str	r1, [r6, #0]
 80060f6:	07d9      	lsls	r1, r3, #31
 80060f8:	bf44      	itt	mi
 80060fa:	f043 0320 	orrmi.w	r3, r3, #32
 80060fe:	6023      	strmi	r3, [r4, #0]
 8006100:	b11d      	cbz	r5, 800610a <_printf_i+0x19e>
 8006102:	2310      	movs	r3, #16
 8006104:	e7ac      	b.n	8006060 <_printf_i+0xf4>
 8006106:	4827      	ldr	r0, [pc, #156]	@ (80061a4 <_printf_i+0x238>)
 8006108:	e7e9      	b.n	80060de <_printf_i+0x172>
 800610a:	6823      	ldr	r3, [r4, #0]
 800610c:	f023 0320 	bic.w	r3, r3, #32
 8006110:	6023      	str	r3, [r4, #0]
 8006112:	e7f6      	b.n	8006102 <_printf_i+0x196>
 8006114:	4616      	mov	r6, r2
 8006116:	e7bd      	b.n	8006094 <_printf_i+0x128>
 8006118:	6833      	ldr	r3, [r6, #0]
 800611a:	6825      	ldr	r5, [r4, #0]
 800611c:	6961      	ldr	r1, [r4, #20]
 800611e:	1d18      	adds	r0, r3, #4
 8006120:	6030      	str	r0, [r6, #0]
 8006122:	062e      	lsls	r6, r5, #24
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	d501      	bpl.n	800612c <_printf_i+0x1c0>
 8006128:	6019      	str	r1, [r3, #0]
 800612a:	e002      	b.n	8006132 <_printf_i+0x1c6>
 800612c:	0668      	lsls	r0, r5, #25
 800612e:	d5fb      	bpl.n	8006128 <_printf_i+0x1bc>
 8006130:	8019      	strh	r1, [r3, #0]
 8006132:	2300      	movs	r3, #0
 8006134:	6123      	str	r3, [r4, #16]
 8006136:	4616      	mov	r6, r2
 8006138:	e7bc      	b.n	80060b4 <_printf_i+0x148>
 800613a:	6833      	ldr	r3, [r6, #0]
 800613c:	1d1a      	adds	r2, r3, #4
 800613e:	6032      	str	r2, [r6, #0]
 8006140:	681e      	ldr	r6, [r3, #0]
 8006142:	6862      	ldr	r2, [r4, #4]
 8006144:	2100      	movs	r1, #0
 8006146:	4630      	mov	r0, r6
 8006148:	f7fa f86a 	bl	8000220 <memchr>
 800614c:	b108      	cbz	r0, 8006152 <_printf_i+0x1e6>
 800614e:	1b80      	subs	r0, r0, r6
 8006150:	6060      	str	r0, [r4, #4]
 8006152:	6863      	ldr	r3, [r4, #4]
 8006154:	6123      	str	r3, [r4, #16]
 8006156:	2300      	movs	r3, #0
 8006158:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800615c:	e7aa      	b.n	80060b4 <_printf_i+0x148>
 800615e:	6923      	ldr	r3, [r4, #16]
 8006160:	4632      	mov	r2, r6
 8006162:	4649      	mov	r1, r9
 8006164:	4640      	mov	r0, r8
 8006166:	47d0      	blx	sl
 8006168:	3001      	adds	r0, #1
 800616a:	d0ad      	beq.n	80060c8 <_printf_i+0x15c>
 800616c:	6823      	ldr	r3, [r4, #0]
 800616e:	079b      	lsls	r3, r3, #30
 8006170:	d413      	bmi.n	800619a <_printf_i+0x22e>
 8006172:	68e0      	ldr	r0, [r4, #12]
 8006174:	9b03      	ldr	r3, [sp, #12]
 8006176:	4298      	cmp	r0, r3
 8006178:	bfb8      	it	lt
 800617a:	4618      	movlt	r0, r3
 800617c:	e7a6      	b.n	80060cc <_printf_i+0x160>
 800617e:	2301      	movs	r3, #1
 8006180:	4632      	mov	r2, r6
 8006182:	4649      	mov	r1, r9
 8006184:	4640      	mov	r0, r8
 8006186:	47d0      	blx	sl
 8006188:	3001      	adds	r0, #1
 800618a:	d09d      	beq.n	80060c8 <_printf_i+0x15c>
 800618c:	3501      	adds	r5, #1
 800618e:	68e3      	ldr	r3, [r4, #12]
 8006190:	9903      	ldr	r1, [sp, #12]
 8006192:	1a5b      	subs	r3, r3, r1
 8006194:	42ab      	cmp	r3, r5
 8006196:	dcf2      	bgt.n	800617e <_printf_i+0x212>
 8006198:	e7eb      	b.n	8006172 <_printf_i+0x206>
 800619a:	2500      	movs	r5, #0
 800619c:	f104 0619 	add.w	r6, r4, #25
 80061a0:	e7f5      	b.n	800618e <_printf_i+0x222>
 80061a2:	bf00      	nop
 80061a4:	080067a1 	.word	0x080067a1
 80061a8:	080067b2 	.word	0x080067b2

080061ac <__sflush_r>:
 80061ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80061b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061b4:	0716      	lsls	r6, r2, #28
 80061b6:	4605      	mov	r5, r0
 80061b8:	460c      	mov	r4, r1
 80061ba:	d454      	bmi.n	8006266 <__sflush_r+0xba>
 80061bc:	684b      	ldr	r3, [r1, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	dc02      	bgt.n	80061c8 <__sflush_r+0x1c>
 80061c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	dd48      	ble.n	800625a <__sflush_r+0xae>
 80061c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80061ca:	2e00      	cmp	r6, #0
 80061cc:	d045      	beq.n	800625a <__sflush_r+0xae>
 80061ce:	2300      	movs	r3, #0
 80061d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80061d4:	682f      	ldr	r7, [r5, #0]
 80061d6:	6a21      	ldr	r1, [r4, #32]
 80061d8:	602b      	str	r3, [r5, #0]
 80061da:	d030      	beq.n	800623e <__sflush_r+0x92>
 80061dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80061de:	89a3      	ldrh	r3, [r4, #12]
 80061e0:	0759      	lsls	r1, r3, #29
 80061e2:	d505      	bpl.n	80061f0 <__sflush_r+0x44>
 80061e4:	6863      	ldr	r3, [r4, #4]
 80061e6:	1ad2      	subs	r2, r2, r3
 80061e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80061ea:	b10b      	cbz	r3, 80061f0 <__sflush_r+0x44>
 80061ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80061ee:	1ad2      	subs	r2, r2, r3
 80061f0:	2300      	movs	r3, #0
 80061f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80061f4:	6a21      	ldr	r1, [r4, #32]
 80061f6:	4628      	mov	r0, r5
 80061f8:	47b0      	blx	r6
 80061fa:	1c43      	adds	r3, r0, #1
 80061fc:	89a3      	ldrh	r3, [r4, #12]
 80061fe:	d106      	bne.n	800620e <__sflush_r+0x62>
 8006200:	6829      	ldr	r1, [r5, #0]
 8006202:	291d      	cmp	r1, #29
 8006204:	d82b      	bhi.n	800625e <__sflush_r+0xb2>
 8006206:	4a2a      	ldr	r2, [pc, #168]	@ (80062b0 <__sflush_r+0x104>)
 8006208:	410a      	asrs	r2, r1
 800620a:	07d6      	lsls	r6, r2, #31
 800620c:	d427      	bmi.n	800625e <__sflush_r+0xb2>
 800620e:	2200      	movs	r2, #0
 8006210:	6062      	str	r2, [r4, #4]
 8006212:	04d9      	lsls	r1, r3, #19
 8006214:	6922      	ldr	r2, [r4, #16]
 8006216:	6022      	str	r2, [r4, #0]
 8006218:	d504      	bpl.n	8006224 <__sflush_r+0x78>
 800621a:	1c42      	adds	r2, r0, #1
 800621c:	d101      	bne.n	8006222 <__sflush_r+0x76>
 800621e:	682b      	ldr	r3, [r5, #0]
 8006220:	b903      	cbnz	r3, 8006224 <__sflush_r+0x78>
 8006222:	6560      	str	r0, [r4, #84]	@ 0x54
 8006224:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006226:	602f      	str	r7, [r5, #0]
 8006228:	b1b9      	cbz	r1, 800625a <__sflush_r+0xae>
 800622a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800622e:	4299      	cmp	r1, r3
 8006230:	d002      	beq.n	8006238 <__sflush_r+0x8c>
 8006232:	4628      	mov	r0, r5
 8006234:	f000 fa24 	bl	8006680 <_free_r>
 8006238:	2300      	movs	r3, #0
 800623a:	6363      	str	r3, [r4, #52]	@ 0x34
 800623c:	e00d      	b.n	800625a <__sflush_r+0xae>
 800623e:	2301      	movs	r3, #1
 8006240:	4628      	mov	r0, r5
 8006242:	47b0      	blx	r6
 8006244:	4602      	mov	r2, r0
 8006246:	1c50      	adds	r0, r2, #1
 8006248:	d1c9      	bne.n	80061de <__sflush_r+0x32>
 800624a:	682b      	ldr	r3, [r5, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d0c6      	beq.n	80061de <__sflush_r+0x32>
 8006250:	2b1d      	cmp	r3, #29
 8006252:	d001      	beq.n	8006258 <__sflush_r+0xac>
 8006254:	2b16      	cmp	r3, #22
 8006256:	d11e      	bne.n	8006296 <__sflush_r+0xea>
 8006258:	602f      	str	r7, [r5, #0]
 800625a:	2000      	movs	r0, #0
 800625c:	e022      	b.n	80062a4 <__sflush_r+0xf8>
 800625e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006262:	b21b      	sxth	r3, r3
 8006264:	e01b      	b.n	800629e <__sflush_r+0xf2>
 8006266:	690f      	ldr	r7, [r1, #16]
 8006268:	2f00      	cmp	r7, #0
 800626a:	d0f6      	beq.n	800625a <__sflush_r+0xae>
 800626c:	0793      	lsls	r3, r2, #30
 800626e:	680e      	ldr	r6, [r1, #0]
 8006270:	bf08      	it	eq
 8006272:	694b      	ldreq	r3, [r1, #20]
 8006274:	600f      	str	r7, [r1, #0]
 8006276:	bf18      	it	ne
 8006278:	2300      	movne	r3, #0
 800627a:	eba6 0807 	sub.w	r8, r6, r7
 800627e:	608b      	str	r3, [r1, #8]
 8006280:	f1b8 0f00 	cmp.w	r8, #0
 8006284:	dde9      	ble.n	800625a <__sflush_r+0xae>
 8006286:	6a21      	ldr	r1, [r4, #32]
 8006288:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800628a:	4643      	mov	r3, r8
 800628c:	463a      	mov	r2, r7
 800628e:	4628      	mov	r0, r5
 8006290:	47b0      	blx	r6
 8006292:	2800      	cmp	r0, #0
 8006294:	dc08      	bgt.n	80062a8 <__sflush_r+0xfc>
 8006296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800629a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800629e:	81a3      	strh	r3, [r4, #12]
 80062a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80062a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062a8:	4407      	add	r7, r0
 80062aa:	eba8 0800 	sub.w	r8, r8, r0
 80062ae:	e7e7      	b.n	8006280 <__sflush_r+0xd4>
 80062b0:	dfbffffe 	.word	0xdfbffffe

080062b4 <_fflush_r>:
 80062b4:	b538      	push	{r3, r4, r5, lr}
 80062b6:	690b      	ldr	r3, [r1, #16]
 80062b8:	4605      	mov	r5, r0
 80062ba:	460c      	mov	r4, r1
 80062bc:	b913      	cbnz	r3, 80062c4 <_fflush_r+0x10>
 80062be:	2500      	movs	r5, #0
 80062c0:	4628      	mov	r0, r5
 80062c2:	bd38      	pop	{r3, r4, r5, pc}
 80062c4:	b118      	cbz	r0, 80062ce <_fflush_r+0x1a>
 80062c6:	6a03      	ldr	r3, [r0, #32]
 80062c8:	b90b      	cbnz	r3, 80062ce <_fflush_r+0x1a>
 80062ca:	f7ff fb23 	bl	8005914 <__sinit>
 80062ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d0f3      	beq.n	80062be <_fflush_r+0xa>
 80062d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80062d8:	07d0      	lsls	r0, r2, #31
 80062da:	d404      	bmi.n	80062e6 <_fflush_r+0x32>
 80062dc:	0599      	lsls	r1, r3, #22
 80062de:	d402      	bmi.n	80062e6 <_fflush_r+0x32>
 80062e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062e2:	f7ff fbf0 	bl	8005ac6 <__retarget_lock_acquire_recursive>
 80062e6:	4628      	mov	r0, r5
 80062e8:	4621      	mov	r1, r4
 80062ea:	f7ff ff5f 	bl	80061ac <__sflush_r>
 80062ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062f0:	07da      	lsls	r2, r3, #31
 80062f2:	4605      	mov	r5, r0
 80062f4:	d4e4      	bmi.n	80062c0 <_fflush_r+0xc>
 80062f6:	89a3      	ldrh	r3, [r4, #12]
 80062f8:	059b      	lsls	r3, r3, #22
 80062fa:	d4e1      	bmi.n	80062c0 <_fflush_r+0xc>
 80062fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062fe:	f7ff fbe3 	bl	8005ac8 <__retarget_lock_release_recursive>
 8006302:	e7dd      	b.n	80062c0 <_fflush_r+0xc>

08006304 <__malloc_lock>:
 8006304:	4801      	ldr	r0, [pc, #4]	@ (800630c <__malloc_lock+0x8>)
 8006306:	f7ff bbde 	b.w	8005ac6 <__retarget_lock_acquire_recursive>
 800630a:	bf00      	nop
 800630c:	20000464 	.word	0x20000464

08006310 <__malloc_unlock>:
 8006310:	4801      	ldr	r0, [pc, #4]	@ (8006318 <__malloc_unlock+0x8>)
 8006312:	f7ff bbd9 	b.w	8005ac8 <__retarget_lock_release_recursive>
 8006316:	bf00      	nop
 8006318:	20000464 	.word	0x20000464

0800631c <__sread>:
 800631c:	b510      	push	{r4, lr}
 800631e:	460c      	mov	r4, r1
 8006320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006324:	f000 f978 	bl	8006618 <_read_r>
 8006328:	2800      	cmp	r0, #0
 800632a:	bfab      	itete	ge
 800632c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800632e:	89a3      	ldrhlt	r3, [r4, #12]
 8006330:	181b      	addge	r3, r3, r0
 8006332:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006336:	bfac      	ite	ge
 8006338:	6563      	strge	r3, [r4, #84]	@ 0x54
 800633a:	81a3      	strhlt	r3, [r4, #12]
 800633c:	bd10      	pop	{r4, pc}

0800633e <__swrite>:
 800633e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006342:	461f      	mov	r7, r3
 8006344:	898b      	ldrh	r3, [r1, #12]
 8006346:	05db      	lsls	r3, r3, #23
 8006348:	4605      	mov	r5, r0
 800634a:	460c      	mov	r4, r1
 800634c:	4616      	mov	r6, r2
 800634e:	d505      	bpl.n	800635c <__swrite+0x1e>
 8006350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006354:	2302      	movs	r3, #2
 8006356:	2200      	movs	r2, #0
 8006358:	f000 f94c 	bl	80065f4 <_lseek_r>
 800635c:	89a3      	ldrh	r3, [r4, #12]
 800635e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006362:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006366:	81a3      	strh	r3, [r4, #12]
 8006368:	4632      	mov	r2, r6
 800636a:	463b      	mov	r3, r7
 800636c:	4628      	mov	r0, r5
 800636e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006372:	f000 b973 	b.w	800665c <_write_r>

08006376 <__sseek>:
 8006376:	b510      	push	{r4, lr}
 8006378:	460c      	mov	r4, r1
 800637a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800637e:	f000 f939 	bl	80065f4 <_lseek_r>
 8006382:	1c43      	adds	r3, r0, #1
 8006384:	89a3      	ldrh	r3, [r4, #12]
 8006386:	bf15      	itete	ne
 8006388:	6560      	strne	r0, [r4, #84]	@ 0x54
 800638a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800638e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006392:	81a3      	strheq	r3, [r4, #12]
 8006394:	bf18      	it	ne
 8006396:	81a3      	strhne	r3, [r4, #12]
 8006398:	bd10      	pop	{r4, pc}

0800639a <__sclose>:
 800639a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800639e:	f000 b8f7 	b.w	8006590 <_close_r>

080063a2 <__swbuf_r>:
 80063a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063a4:	460e      	mov	r6, r1
 80063a6:	4614      	mov	r4, r2
 80063a8:	4605      	mov	r5, r0
 80063aa:	b118      	cbz	r0, 80063b4 <__swbuf_r+0x12>
 80063ac:	6a03      	ldr	r3, [r0, #32]
 80063ae:	b90b      	cbnz	r3, 80063b4 <__swbuf_r+0x12>
 80063b0:	f7ff fab0 	bl	8005914 <__sinit>
 80063b4:	69a3      	ldr	r3, [r4, #24]
 80063b6:	60a3      	str	r3, [r4, #8]
 80063b8:	89a3      	ldrh	r3, [r4, #12]
 80063ba:	071a      	lsls	r2, r3, #28
 80063bc:	d501      	bpl.n	80063c2 <__swbuf_r+0x20>
 80063be:	6923      	ldr	r3, [r4, #16]
 80063c0:	b943      	cbnz	r3, 80063d4 <__swbuf_r+0x32>
 80063c2:	4621      	mov	r1, r4
 80063c4:	4628      	mov	r0, r5
 80063c6:	f000 f82b 	bl	8006420 <__swsetup_r>
 80063ca:	b118      	cbz	r0, 80063d4 <__swbuf_r+0x32>
 80063cc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80063d0:	4638      	mov	r0, r7
 80063d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063d4:	6823      	ldr	r3, [r4, #0]
 80063d6:	6922      	ldr	r2, [r4, #16]
 80063d8:	1a98      	subs	r0, r3, r2
 80063da:	6963      	ldr	r3, [r4, #20]
 80063dc:	b2f6      	uxtb	r6, r6
 80063de:	4283      	cmp	r3, r0
 80063e0:	4637      	mov	r7, r6
 80063e2:	dc05      	bgt.n	80063f0 <__swbuf_r+0x4e>
 80063e4:	4621      	mov	r1, r4
 80063e6:	4628      	mov	r0, r5
 80063e8:	f7ff ff64 	bl	80062b4 <_fflush_r>
 80063ec:	2800      	cmp	r0, #0
 80063ee:	d1ed      	bne.n	80063cc <__swbuf_r+0x2a>
 80063f0:	68a3      	ldr	r3, [r4, #8]
 80063f2:	3b01      	subs	r3, #1
 80063f4:	60a3      	str	r3, [r4, #8]
 80063f6:	6823      	ldr	r3, [r4, #0]
 80063f8:	1c5a      	adds	r2, r3, #1
 80063fa:	6022      	str	r2, [r4, #0]
 80063fc:	701e      	strb	r6, [r3, #0]
 80063fe:	6962      	ldr	r2, [r4, #20]
 8006400:	1c43      	adds	r3, r0, #1
 8006402:	429a      	cmp	r2, r3
 8006404:	d004      	beq.n	8006410 <__swbuf_r+0x6e>
 8006406:	89a3      	ldrh	r3, [r4, #12]
 8006408:	07db      	lsls	r3, r3, #31
 800640a:	d5e1      	bpl.n	80063d0 <__swbuf_r+0x2e>
 800640c:	2e0a      	cmp	r6, #10
 800640e:	d1df      	bne.n	80063d0 <__swbuf_r+0x2e>
 8006410:	4621      	mov	r1, r4
 8006412:	4628      	mov	r0, r5
 8006414:	f7ff ff4e 	bl	80062b4 <_fflush_r>
 8006418:	2800      	cmp	r0, #0
 800641a:	d0d9      	beq.n	80063d0 <__swbuf_r+0x2e>
 800641c:	e7d6      	b.n	80063cc <__swbuf_r+0x2a>
	...

08006420 <__swsetup_r>:
 8006420:	b538      	push	{r3, r4, r5, lr}
 8006422:	4b29      	ldr	r3, [pc, #164]	@ (80064c8 <__swsetup_r+0xa8>)
 8006424:	4605      	mov	r5, r0
 8006426:	6818      	ldr	r0, [r3, #0]
 8006428:	460c      	mov	r4, r1
 800642a:	b118      	cbz	r0, 8006434 <__swsetup_r+0x14>
 800642c:	6a03      	ldr	r3, [r0, #32]
 800642e:	b90b      	cbnz	r3, 8006434 <__swsetup_r+0x14>
 8006430:	f7ff fa70 	bl	8005914 <__sinit>
 8006434:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006438:	0719      	lsls	r1, r3, #28
 800643a:	d422      	bmi.n	8006482 <__swsetup_r+0x62>
 800643c:	06da      	lsls	r2, r3, #27
 800643e:	d407      	bmi.n	8006450 <__swsetup_r+0x30>
 8006440:	2209      	movs	r2, #9
 8006442:	602a      	str	r2, [r5, #0]
 8006444:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006448:	81a3      	strh	r3, [r4, #12]
 800644a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800644e:	e033      	b.n	80064b8 <__swsetup_r+0x98>
 8006450:	0758      	lsls	r0, r3, #29
 8006452:	d512      	bpl.n	800647a <__swsetup_r+0x5a>
 8006454:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006456:	b141      	cbz	r1, 800646a <__swsetup_r+0x4a>
 8006458:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800645c:	4299      	cmp	r1, r3
 800645e:	d002      	beq.n	8006466 <__swsetup_r+0x46>
 8006460:	4628      	mov	r0, r5
 8006462:	f000 f90d 	bl	8006680 <_free_r>
 8006466:	2300      	movs	r3, #0
 8006468:	6363      	str	r3, [r4, #52]	@ 0x34
 800646a:	89a3      	ldrh	r3, [r4, #12]
 800646c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006470:	81a3      	strh	r3, [r4, #12]
 8006472:	2300      	movs	r3, #0
 8006474:	6063      	str	r3, [r4, #4]
 8006476:	6923      	ldr	r3, [r4, #16]
 8006478:	6023      	str	r3, [r4, #0]
 800647a:	89a3      	ldrh	r3, [r4, #12]
 800647c:	f043 0308 	orr.w	r3, r3, #8
 8006480:	81a3      	strh	r3, [r4, #12]
 8006482:	6923      	ldr	r3, [r4, #16]
 8006484:	b94b      	cbnz	r3, 800649a <__swsetup_r+0x7a>
 8006486:	89a3      	ldrh	r3, [r4, #12]
 8006488:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800648c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006490:	d003      	beq.n	800649a <__swsetup_r+0x7a>
 8006492:	4621      	mov	r1, r4
 8006494:	4628      	mov	r0, r5
 8006496:	f000 f83f 	bl	8006518 <__smakebuf_r>
 800649a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800649e:	f013 0201 	ands.w	r2, r3, #1
 80064a2:	d00a      	beq.n	80064ba <__swsetup_r+0x9a>
 80064a4:	2200      	movs	r2, #0
 80064a6:	60a2      	str	r2, [r4, #8]
 80064a8:	6962      	ldr	r2, [r4, #20]
 80064aa:	4252      	negs	r2, r2
 80064ac:	61a2      	str	r2, [r4, #24]
 80064ae:	6922      	ldr	r2, [r4, #16]
 80064b0:	b942      	cbnz	r2, 80064c4 <__swsetup_r+0xa4>
 80064b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80064b6:	d1c5      	bne.n	8006444 <__swsetup_r+0x24>
 80064b8:	bd38      	pop	{r3, r4, r5, pc}
 80064ba:	0799      	lsls	r1, r3, #30
 80064bc:	bf58      	it	pl
 80064be:	6962      	ldrpl	r2, [r4, #20]
 80064c0:	60a2      	str	r2, [r4, #8]
 80064c2:	e7f4      	b.n	80064ae <__swsetup_r+0x8e>
 80064c4:	2000      	movs	r0, #0
 80064c6:	e7f7      	b.n	80064b8 <__swsetup_r+0x98>
 80064c8:	20000018 	.word	0x20000018

080064cc <__swhatbuf_r>:
 80064cc:	b570      	push	{r4, r5, r6, lr}
 80064ce:	460c      	mov	r4, r1
 80064d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064d4:	2900      	cmp	r1, #0
 80064d6:	b096      	sub	sp, #88	@ 0x58
 80064d8:	4615      	mov	r5, r2
 80064da:	461e      	mov	r6, r3
 80064dc:	da0d      	bge.n	80064fa <__swhatbuf_r+0x2e>
 80064de:	89a3      	ldrh	r3, [r4, #12]
 80064e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80064e4:	f04f 0100 	mov.w	r1, #0
 80064e8:	bf14      	ite	ne
 80064ea:	2340      	movne	r3, #64	@ 0x40
 80064ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80064f0:	2000      	movs	r0, #0
 80064f2:	6031      	str	r1, [r6, #0]
 80064f4:	602b      	str	r3, [r5, #0]
 80064f6:	b016      	add	sp, #88	@ 0x58
 80064f8:	bd70      	pop	{r4, r5, r6, pc}
 80064fa:	466a      	mov	r2, sp
 80064fc:	f000 f858 	bl	80065b0 <_fstat_r>
 8006500:	2800      	cmp	r0, #0
 8006502:	dbec      	blt.n	80064de <__swhatbuf_r+0x12>
 8006504:	9901      	ldr	r1, [sp, #4]
 8006506:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800650a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800650e:	4259      	negs	r1, r3
 8006510:	4159      	adcs	r1, r3
 8006512:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006516:	e7eb      	b.n	80064f0 <__swhatbuf_r+0x24>

08006518 <__smakebuf_r>:
 8006518:	898b      	ldrh	r3, [r1, #12]
 800651a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800651c:	079d      	lsls	r5, r3, #30
 800651e:	4606      	mov	r6, r0
 8006520:	460c      	mov	r4, r1
 8006522:	d507      	bpl.n	8006534 <__smakebuf_r+0x1c>
 8006524:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006528:	6023      	str	r3, [r4, #0]
 800652a:	6123      	str	r3, [r4, #16]
 800652c:	2301      	movs	r3, #1
 800652e:	6163      	str	r3, [r4, #20]
 8006530:	b003      	add	sp, #12
 8006532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006534:	ab01      	add	r3, sp, #4
 8006536:	466a      	mov	r2, sp
 8006538:	f7ff ffc8 	bl	80064cc <__swhatbuf_r>
 800653c:	9f00      	ldr	r7, [sp, #0]
 800653e:	4605      	mov	r5, r0
 8006540:	4639      	mov	r1, r7
 8006542:	4630      	mov	r0, r6
 8006544:	f7ff fc24 	bl	8005d90 <_malloc_r>
 8006548:	b948      	cbnz	r0, 800655e <__smakebuf_r+0x46>
 800654a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800654e:	059a      	lsls	r2, r3, #22
 8006550:	d4ee      	bmi.n	8006530 <__smakebuf_r+0x18>
 8006552:	f023 0303 	bic.w	r3, r3, #3
 8006556:	f043 0302 	orr.w	r3, r3, #2
 800655a:	81a3      	strh	r3, [r4, #12]
 800655c:	e7e2      	b.n	8006524 <__smakebuf_r+0xc>
 800655e:	89a3      	ldrh	r3, [r4, #12]
 8006560:	6020      	str	r0, [r4, #0]
 8006562:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006566:	81a3      	strh	r3, [r4, #12]
 8006568:	9b01      	ldr	r3, [sp, #4]
 800656a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800656e:	b15b      	cbz	r3, 8006588 <__smakebuf_r+0x70>
 8006570:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006574:	4630      	mov	r0, r6
 8006576:	f000 f82d 	bl	80065d4 <_isatty_r>
 800657a:	b128      	cbz	r0, 8006588 <__smakebuf_r+0x70>
 800657c:	89a3      	ldrh	r3, [r4, #12]
 800657e:	f023 0303 	bic.w	r3, r3, #3
 8006582:	f043 0301 	orr.w	r3, r3, #1
 8006586:	81a3      	strh	r3, [r4, #12]
 8006588:	89a3      	ldrh	r3, [r4, #12]
 800658a:	431d      	orrs	r5, r3
 800658c:	81a5      	strh	r5, [r4, #12]
 800658e:	e7cf      	b.n	8006530 <__smakebuf_r+0x18>

08006590 <_close_r>:
 8006590:	b538      	push	{r3, r4, r5, lr}
 8006592:	4d06      	ldr	r5, [pc, #24]	@ (80065ac <_close_r+0x1c>)
 8006594:	2300      	movs	r3, #0
 8006596:	4604      	mov	r4, r0
 8006598:	4608      	mov	r0, r1
 800659a:	602b      	str	r3, [r5, #0]
 800659c:	f7fa fa25 	bl	80009ea <_close>
 80065a0:	1c43      	adds	r3, r0, #1
 80065a2:	d102      	bne.n	80065aa <_close_r+0x1a>
 80065a4:	682b      	ldr	r3, [r5, #0]
 80065a6:	b103      	cbz	r3, 80065aa <_close_r+0x1a>
 80065a8:	6023      	str	r3, [r4, #0]
 80065aa:	bd38      	pop	{r3, r4, r5, pc}
 80065ac:	20000470 	.word	0x20000470

080065b0 <_fstat_r>:
 80065b0:	b538      	push	{r3, r4, r5, lr}
 80065b2:	4d07      	ldr	r5, [pc, #28]	@ (80065d0 <_fstat_r+0x20>)
 80065b4:	2300      	movs	r3, #0
 80065b6:	4604      	mov	r4, r0
 80065b8:	4608      	mov	r0, r1
 80065ba:	4611      	mov	r1, r2
 80065bc:	602b      	str	r3, [r5, #0]
 80065be:	f7fa fa20 	bl	8000a02 <_fstat>
 80065c2:	1c43      	adds	r3, r0, #1
 80065c4:	d102      	bne.n	80065cc <_fstat_r+0x1c>
 80065c6:	682b      	ldr	r3, [r5, #0]
 80065c8:	b103      	cbz	r3, 80065cc <_fstat_r+0x1c>
 80065ca:	6023      	str	r3, [r4, #0]
 80065cc:	bd38      	pop	{r3, r4, r5, pc}
 80065ce:	bf00      	nop
 80065d0:	20000470 	.word	0x20000470

080065d4 <_isatty_r>:
 80065d4:	b538      	push	{r3, r4, r5, lr}
 80065d6:	4d06      	ldr	r5, [pc, #24]	@ (80065f0 <_isatty_r+0x1c>)
 80065d8:	2300      	movs	r3, #0
 80065da:	4604      	mov	r4, r0
 80065dc:	4608      	mov	r0, r1
 80065de:	602b      	str	r3, [r5, #0]
 80065e0:	f7fa fa1f 	bl	8000a22 <_isatty>
 80065e4:	1c43      	adds	r3, r0, #1
 80065e6:	d102      	bne.n	80065ee <_isatty_r+0x1a>
 80065e8:	682b      	ldr	r3, [r5, #0]
 80065ea:	b103      	cbz	r3, 80065ee <_isatty_r+0x1a>
 80065ec:	6023      	str	r3, [r4, #0]
 80065ee:	bd38      	pop	{r3, r4, r5, pc}
 80065f0:	20000470 	.word	0x20000470

080065f4 <_lseek_r>:
 80065f4:	b538      	push	{r3, r4, r5, lr}
 80065f6:	4d07      	ldr	r5, [pc, #28]	@ (8006614 <_lseek_r+0x20>)
 80065f8:	4604      	mov	r4, r0
 80065fa:	4608      	mov	r0, r1
 80065fc:	4611      	mov	r1, r2
 80065fe:	2200      	movs	r2, #0
 8006600:	602a      	str	r2, [r5, #0]
 8006602:	461a      	mov	r2, r3
 8006604:	f7fa fa18 	bl	8000a38 <_lseek>
 8006608:	1c43      	adds	r3, r0, #1
 800660a:	d102      	bne.n	8006612 <_lseek_r+0x1e>
 800660c:	682b      	ldr	r3, [r5, #0]
 800660e:	b103      	cbz	r3, 8006612 <_lseek_r+0x1e>
 8006610:	6023      	str	r3, [r4, #0]
 8006612:	bd38      	pop	{r3, r4, r5, pc}
 8006614:	20000470 	.word	0x20000470

08006618 <_read_r>:
 8006618:	b538      	push	{r3, r4, r5, lr}
 800661a:	4d07      	ldr	r5, [pc, #28]	@ (8006638 <_read_r+0x20>)
 800661c:	4604      	mov	r4, r0
 800661e:	4608      	mov	r0, r1
 8006620:	4611      	mov	r1, r2
 8006622:	2200      	movs	r2, #0
 8006624:	602a      	str	r2, [r5, #0]
 8006626:	461a      	mov	r2, r3
 8006628:	f7fa f9c2 	bl	80009b0 <_read>
 800662c:	1c43      	adds	r3, r0, #1
 800662e:	d102      	bne.n	8006636 <_read_r+0x1e>
 8006630:	682b      	ldr	r3, [r5, #0]
 8006632:	b103      	cbz	r3, 8006636 <_read_r+0x1e>
 8006634:	6023      	str	r3, [r4, #0]
 8006636:	bd38      	pop	{r3, r4, r5, pc}
 8006638:	20000470 	.word	0x20000470

0800663c <_sbrk_r>:
 800663c:	b538      	push	{r3, r4, r5, lr}
 800663e:	4d06      	ldr	r5, [pc, #24]	@ (8006658 <_sbrk_r+0x1c>)
 8006640:	2300      	movs	r3, #0
 8006642:	4604      	mov	r4, r0
 8006644:	4608      	mov	r0, r1
 8006646:	602b      	str	r3, [r5, #0]
 8006648:	f7fa fa04 	bl	8000a54 <_sbrk>
 800664c:	1c43      	adds	r3, r0, #1
 800664e:	d102      	bne.n	8006656 <_sbrk_r+0x1a>
 8006650:	682b      	ldr	r3, [r5, #0]
 8006652:	b103      	cbz	r3, 8006656 <_sbrk_r+0x1a>
 8006654:	6023      	str	r3, [r4, #0]
 8006656:	bd38      	pop	{r3, r4, r5, pc}
 8006658:	20000470 	.word	0x20000470

0800665c <_write_r>:
 800665c:	b538      	push	{r3, r4, r5, lr}
 800665e:	4d07      	ldr	r5, [pc, #28]	@ (800667c <_write_r+0x20>)
 8006660:	4604      	mov	r4, r0
 8006662:	4608      	mov	r0, r1
 8006664:	4611      	mov	r1, r2
 8006666:	2200      	movs	r2, #0
 8006668:	602a      	str	r2, [r5, #0]
 800666a:	461a      	mov	r2, r3
 800666c:	f7fa f856 	bl	800071c <_write>
 8006670:	1c43      	adds	r3, r0, #1
 8006672:	d102      	bne.n	800667a <_write_r+0x1e>
 8006674:	682b      	ldr	r3, [r5, #0]
 8006676:	b103      	cbz	r3, 800667a <_write_r+0x1e>
 8006678:	6023      	str	r3, [r4, #0]
 800667a:	bd38      	pop	{r3, r4, r5, pc}
 800667c:	20000470 	.word	0x20000470

08006680 <_free_r>:
 8006680:	b538      	push	{r3, r4, r5, lr}
 8006682:	4605      	mov	r5, r0
 8006684:	2900      	cmp	r1, #0
 8006686:	d041      	beq.n	800670c <_free_r+0x8c>
 8006688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800668c:	1f0c      	subs	r4, r1, #4
 800668e:	2b00      	cmp	r3, #0
 8006690:	bfb8      	it	lt
 8006692:	18e4      	addlt	r4, r4, r3
 8006694:	f7ff fe36 	bl	8006304 <__malloc_lock>
 8006698:	4a1d      	ldr	r2, [pc, #116]	@ (8006710 <_free_r+0x90>)
 800669a:	6813      	ldr	r3, [r2, #0]
 800669c:	b933      	cbnz	r3, 80066ac <_free_r+0x2c>
 800669e:	6063      	str	r3, [r4, #4]
 80066a0:	6014      	str	r4, [r2, #0]
 80066a2:	4628      	mov	r0, r5
 80066a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066a8:	f7ff be32 	b.w	8006310 <__malloc_unlock>
 80066ac:	42a3      	cmp	r3, r4
 80066ae:	d908      	bls.n	80066c2 <_free_r+0x42>
 80066b0:	6820      	ldr	r0, [r4, #0]
 80066b2:	1821      	adds	r1, r4, r0
 80066b4:	428b      	cmp	r3, r1
 80066b6:	bf01      	itttt	eq
 80066b8:	6819      	ldreq	r1, [r3, #0]
 80066ba:	685b      	ldreq	r3, [r3, #4]
 80066bc:	1809      	addeq	r1, r1, r0
 80066be:	6021      	streq	r1, [r4, #0]
 80066c0:	e7ed      	b.n	800669e <_free_r+0x1e>
 80066c2:	461a      	mov	r2, r3
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	b10b      	cbz	r3, 80066cc <_free_r+0x4c>
 80066c8:	42a3      	cmp	r3, r4
 80066ca:	d9fa      	bls.n	80066c2 <_free_r+0x42>
 80066cc:	6811      	ldr	r1, [r2, #0]
 80066ce:	1850      	adds	r0, r2, r1
 80066d0:	42a0      	cmp	r0, r4
 80066d2:	d10b      	bne.n	80066ec <_free_r+0x6c>
 80066d4:	6820      	ldr	r0, [r4, #0]
 80066d6:	4401      	add	r1, r0
 80066d8:	1850      	adds	r0, r2, r1
 80066da:	4283      	cmp	r3, r0
 80066dc:	6011      	str	r1, [r2, #0]
 80066de:	d1e0      	bne.n	80066a2 <_free_r+0x22>
 80066e0:	6818      	ldr	r0, [r3, #0]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	6053      	str	r3, [r2, #4]
 80066e6:	4408      	add	r0, r1
 80066e8:	6010      	str	r0, [r2, #0]
 80066ea:	e7da      	b.n	80066a2 <_free_r+0x22>
 80066ec:	d902      	bls.n	80066f4 <_free_r+0x74>
 80066ee:	230c      	movs	r3, #12
 80066f0:	602b      	str	r3, [r5, #0]
 80066f2:	e7d6      	b.n	80066a2 <_free_r+0x22>
 80066f4:	6820      	ldr	r0, [r4, #0]
 80066f6:	1821      	adds	r1, r4, r0
 80066f8:	428b      	cmp	r3, r1
 80066fa:	bf04      	itt	eq
 80066fc:	6819      	ldreq	r1, [r3, #0]
 80066fe:	685b      	ldreq	r3, [r3, #4]
 8006700:	6063      	str	r3, [r4, #4]
 8006702:	bf04      	itt	eq
 8006704:	1809      	addeq	r1, r1, r0
 8006706:	6021      	streq	r1, [r4, #0]
 8006708:	6054      	str	r4, [r2, #4]
 800670a:	e7ca      	b.n	80066a2 <_free_r+0x22>
 800670c:	bd38      	pop	{r3, r4, r5, pc}
 800670e:	bf00      	nop
 8006710:	2000046c 	.word	0x2000046c

08006714 <_init>:
 8006714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006716:	bf00      	nop
 8006718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800671a:	bc08      	pop	{r3}
 800671c:	469e      	mov	lr, r3
 800671e:	4770      	bx	lr

08006720 <_fini>:
 8006720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006722:	bf00      	nop
 8006724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006726:	bc08      	pop	{r3}
 8006728:	469e      	mov	lr, r3
 800672a:	4770      	bx	lr
