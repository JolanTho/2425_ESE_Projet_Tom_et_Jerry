
Lidar_RTOS_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000662c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800680c  0800680c  0000780c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068b8  080068b8  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  080068b8  080068b8  000078b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068c0  080068c0  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068c0  080068c0  000078c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080068c4  080068c4  000078c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080068c8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000410  20000068  08006930  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  08006930  00008478  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c71  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b74  00000000  00000000  0001bd09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  0001e880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000daa  00000000  00000000  0001fa20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fa51  00000000  00000000  000207ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015367  00000000  00000000  0004021b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7e77  00000000  00000000  00055582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d3f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005108  00000000  00000000  0011d43c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  00122544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	080067f4 	.word	0x080067f4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	080067f4 	.word	0x080067f4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80005b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000620 <MX_DMA_Init+0x70>)
 80005b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005ba:	4a19      	ldr	r2, [pc, #100]	@ (8000620 <MX_DMA_Init+0x70>)
 80005bc:	f043 0304 	orr.w	r3, r3, #4
 80005c0:	6493      	str	r3, [r2, #72]	@ 0x48
 80005c2:	4b17      	ldr	r3, [pc, #92]	@ (8000620 <MX_DMA_Init+0x70>)
 80005c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005c6:	f003 0304 	and.w	r3, r3, #4
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ce:	4b14      	ldr	r3, [pc, #80]	@ (8000620 <MX_DMA_Init+0x70>)
 80005d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005d2:	4a13      	ldr	r2, [pc, #76]	@ (8000620 <MX_DMA_Init+0x70>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80005da:	4b11      	ldr	r3, [pc, #68]	@ (8000620 <MX_DMA_Init+0x70>)
 80005dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	603b      	str	r3, [r7, #0]
 80005e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2100      	movs	r1, #0
 80005ea:	200b      	movs	r0, #11
 80005ec:	f000 fe95 	bl	800131a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005f0:	200b      	movs	r0, #11
 80005f2:	f000 feac 	bl	800134e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2100      	movs	r1, #0
 80005fa:	200c      	movs	r0, #12
 80005fc:	f000 fe8d 	bl	800131a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000600:	200c      	movs	r0, #12
 8000602:	f000 fea4 	bl	800134e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000606:	2200      	movs	r2, #0
 8000608:	2100      	movs	r1, #0
 800060a:	200d      	movs	r0, #13
 800060c:	f000 fe85 	bl	800131a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000610:	200d      	movs	r0, #13
 8000612:	f000 fe9c 	bl	800134e <HAL_NVIC_EnableIRQ>

}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40021000 	.word	0x40021000

08000624 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08a      	sub	sp, #40	@ 0x28
 8000628:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063a:	4b35      	ldr	r3, [pc, #212]	@ (8000710 <MX_GPIO_Init+0xec>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063e:	4a34      	ldr	r2, [pc, #208]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000640:	f043 0304 	orr.w	r3, r3, #4
 8000644:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000646:	4b32      	ldr	r3, [pc, #200]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064a:	f003 0304 	and.w	r3, r3, #4
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000652:	4b2f      	ldr	r3, [pc, #188]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000656:	4a2e      	ldr	r2, [pc, #184]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000658:	f043 0320 	orr.w	r3, r3, #32
 800065c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800065e:	4b2c      	ldr	r3, [pc, #176]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000662:	f003 0320 	and.w	r3, r3, #32
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	4b29      	ldr	r3, [pc, #164]	@ (8000710 <MX_GPIO_Init+0xec>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066e:	4a28      	ldr	r2, [pc, #160]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000676:	4b26      	ldr	r3, [pc, #152]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000682:	4b23      	ldr	r3, [pc, #140]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000686:	4a22      	ldr	r2, [pc, #136]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000688:	f043 0302 	orr.w	r3, r3, #2
 800068c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800068e:	4b20      	ldr	r3, [pc, #128]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000692:	f003 0302 	and.w	r3, r3, #2
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	2120      	movs	r1, #32
 800069e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a2:	f001 fb23 	bl	8001cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LIDAR_M_EN_Pin|LIDAR_DEV_EN_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2130      	movs	r1, #48	@ 0x30
 80006aa:	481a      	ldr	r0, [pc, #104]	@ (8000714 <MX_GPIO_Init+0xf0>)
 80006ac:	f001 fb1e 	bl	8001cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006b6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4619      	mov	r1, r3
 80006c6:	4814      	ldr	r0, [pc, #80]	@ (8000718 <MX_GPIO_Init+0xf4>)
 80006c8:	f001 f98e 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006cc:	2320      	movs	r3, #32
 80006ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d0:	2301      	movs	r3, #1
 80006d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d8:	2300      	movs	r3, #0
 80006da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006dc:	f107 0314 	add.w	r3, r7, #20
 80006e0:	4619      	mov	r1, r3
 80006e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006e6:	f001 f97f 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LIDAR_M_EN_Pin|LIDAR_DEV_EN_Pin;
 80006ea:	2330      	movs	r3, #48	@ 0x30
 80006ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ee:	2301      	movs	r3, #1
 80006f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	2300      	movs	r3, #0
 80006f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	4619      	mov	r1, r3
 8000700:	4804      	ldr	r0, [pc, #16]	@ (8000714 <MX_GPIO_Init+0xf0>)
 8000702:	f001 f971 	bl	80019e8 <HAL_GPIO_Init>

}
 8000706:	bf00      	nop
 8000708:	3728      	adds	r7, #40	@ 0x28
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40021000 	.word	0x40021000
 8000714:	48000400 	.word	0x48000400
 8000718:	48000800 	.word	0x48000800

0800071c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char*ptr , int len){
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
	(void)file;
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ptr, len);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	b29b      	uxth	r3, r3
 800072c:	461a      	mov	r2, r3
 800072e:	68b9      	ldr	r1, [r7, #8]
 8000730:	4805      	ldr	r0, [pc, #20]	@ (8000748 <_write+0x2c>)
 8000732:	f003 fc15 	bl	8003f60 <HAL_UART_Transmit_DMA>
//	while(irq_TX_completed!=1);
	irq_TX_completed=0;
 8000736:	4b05      	ldr	r3, [pc, #20]	@ (800074c <_write+0x30>)
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
	return len;
 800073c:	687b      	ldr	r3, [r7, #4]
}
 800073e:	4618      	mov	r0, r3
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000174 	.word	0x20000174
 800074c:	2000008c 	.word	0x2000008c

08000750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000756:	f000 fc94 	bl	8001082 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075a:	f000 f839 	bl	80007d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800075e:	f7ff ff61 	bl	8000624 <MX_GPIO_Init>
  MX_DMA_Init();
 8000762:	f7ff ff25 	bl	80005b0 <MX_DMA_Init>
  MX_TIM2_Init();
 8000766:	f000 f9d1 	bl	8000b0c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800076a:	f000 fa9d 	bl	8000ca8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800076e:	f000 fae7 	bl	8000d40 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 8000772:	4812      	ldr	r0, [pc, #72]	@ (80007bc <main+0x6c>)
 8000774:	f002 fafc 	bl	8002d70 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000778:	2104      	movs	r1, #4
 800077a:	4810      	ldr	r0, [pc, #64]	@ (80007bc <main+0x6c>)
 800077c:	f002 fbbc 	bl	8002ef8 <HAL_TIM_PWM_Start>

	HAL_GPIO_WritePin(LIDAR_M_EN_GPIO_Port,LIDAR_M_EN_Pin, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	2110      	movs	r1, #16
 8000784:	480e      	ldr	r0, [pc, #56]	@ (80007c0 <main+0x70>)
 8000786:	f001 fab1 	bl	8001cec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIDAR_DEV_EN_GPIO_Port,LIDAR_DEV_EN_Pin, GPIO_PIN_SET);
 800078a:	2201      	movs	r2, #1
 800078c:	2120      	movs	r1, #32
 800078e:	480c      	ldr	r0, [pc, #48]	@ (80007c0 <main+0x70>)
 8000790:	f001 faac 	bl	8001cec <HAL_GPIO_WritePin>
	//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,0);

	uint8_t command[2] = {0xA5,0x90};
 8000794:	f249 03a5 	movw	r3, #37029	@ 0x90a5
 8000798:	80bb      	strh	r3, [r7, #4]

	printf("====== START LIDAR =====\r\n");
 800079a:	480a      	ldr	r0, [pc, #40]	@ (80007c4 <main+0x74>)
 800079c:	f005 f9c8 	bl	8005b30 <puts>
	HAL_UART_Transmit_DMA(&huart1, (uint8_t*)command, sizeof(command));
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	2202      	movs	r2, #2
 80007a4:	4619      	mov	r1, r3
 80007a6:	4808      	ldr	r0, [pc, #32]	@ (80007c8 <main+0x78>)
 80007a8:	f003 fbda 	bl	8003f60 <HAL_UART_Transmit_DMA>

	HAL_UART_Receive_DMA(&huart1, (uint8_t*)Lidar_byte, 2);
 80007ac:	2202      	movs	r2, #2
 80007ae:	4907      	ldr	r1, [pc, #28]	@ (80007cc <main+0x7c>)
 80007b0:	4805      	ldr	r0, [pc, #20]	@ (80007c8 <main+0x78>)
 80007b2:	f003 fc55 	bl	8004060 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80007b6:	bf00      	nop
 80007b8:	e7fd      	b.n	80007b6 <main+0x66>
 80007ba:	bf00      	nop
 80007bc:	20000094 	.word	0x20000094
 80007c0:	48000400 	.word	0x48000400
 80007c4:	0800680c 	.word	0x0800680c
 80007c8:	200000e0 	.word	0x200000e0
 80007cc:	20000084 	.word	0x20000084

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b094      	sub	sp, #80	@ 0x50
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 0318 	add.w	r3, r7, #24
 80007da:	2238      	movs	r2, #56	@ 0x38
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f005 f9ae 	bl	8005b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007f2:	2000      	movs	r0, #0
 80007f4:	f001 fa92 	bl	8001d1c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f8:	2302      	movs	r3, #2
 80007fa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000800:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000802:	2340      	movs	r3, #64	@ 0x40
 8000804:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000806:	2302      	movs	r3, #2
 8000808:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800080a:	2302      	movs	r3, #2
 800080c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800080e:	2304      	movs	r3, #4
 8000810:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000812:	2355      	movs	r3, #85	@ 0x55
 8000814:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000816:	2302      	movs	r3, #2
 8000818:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800081a:	2302      	movs	r3, #2
 800081c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800081e:	2302      	movs	r3, #2
 8000820:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000822:	f107 0318 	add.w	r3, r7, #24
 8000826:	4618      	mov	r0, r3
 8000828:	f001 fb2c 	bl	8001e84 <HAL_RCC_OscConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000832:	f000 f818 	bl	8000866 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000836:	230f      	movs	r3, #15
 8000838:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083a:	2303      	movs	r3, #3
 800083c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	2104      	movs	r1, #4
 800084e:	4618      	mov	r0, r3
 8000850:	f001 fe2a 	bl	80024a8 <HAL_RCC_ClockConfig>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800085a:	f000 f804 	bl	8000866 <Error_Handler>
  }
}
 800085e:	bf00      	nop
 8000860:	3750      	adds	r7, #80	@ 0x50
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800086a:	b672      	cpsid	i
}
 800086c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800086e:	bf00      	nop
 8000870:	e7fd      	b.n	800086e <Error_Handler+0x8>
	...

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087a:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <HAL_MspInit+0x44>)
 800087c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800087e:	4a0e      	ldr	r2, [pc, #56]	@ (80008b8 <HAL_MspInit+0x44>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6613      	str	r3, [r2, #96]	@ 0x60
 8000886:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <HAL_MspInit+0x44>)
 8000888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <HAL_MspInit+0x44>)
 8000894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000896:	4a08      	ldr	r2, [pc, #32]	@ (80008b8 <HAL_MspInit+0x44>)
 8000898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800089c:	6593      	str	r3, [r2, #88]	@ 0x58
 800089e:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <HAL_MspInit+0x44>)
 80008a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008aa:	f001 fadb 	bl	8001e64 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40021000 	.word	0x40021000

080008bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <NMI_Handler+0x4>

080008c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <HardFault_Handler+0x4>

080008cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <MemManage_Handler+0x4>

080008d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <BusFault_Handler+0x4>

080008dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <UsageFault_Handler+0x4>

080008e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000912:	f000 fc09 	bl	8001128 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000920:	4802      	ldr	r0, [pc, #8]	@ (800092c <DMA1_Channel1_IRQHandler+0x10>)
 8000922:	f000 ff12 	bl	800174a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200002c8 	.word	0x200002c8

08000930 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000934:	4802      	ldr	r0, [pc, #8]	@ (8000940 <DMA1_Channel2_IRQHandler+0x10>)
 8000936:	f000 ff08 	bl	800174a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000208 	.word	0x20000208

08000944 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000948:	4802      	ldr	r0, [pc, #8]	@ (8000954 <DMA1_Channel3_IRQHandler+0x10>)
 800094a:	f000 fefe 	bl	800174a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000268 	.word	0x20000268

08000958 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800095c:	4802      	ldr	r0, [pc, #8]	@ (8000968 <USART1_IRQHandler+0x10>)
 800095e:	f003 fbcb 	bl	80040f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	200000e0 	.word	0x200000e0

0800096c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	if (huart==&huart1){ //Lorsque l'on recoit la réponse en DMA
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4a06      	ldr	r2, [pc, #24]	@ (8000990 <HAL_UART_RxCpltCallback+0x24>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d105      	bne.n	8000988 <HAL_UART_RxCpltCallback+0x1c>
		//Normalement en DMA
		printf(">%hhn\r\n",(uint8_t*)Lidar_byte);
 800097c:	4b05      	ldr	r3, [pc, #20]	@ (8000994 <HAL_UART_RxCpltCallback+0x28>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4619      	mov	r1, r3
 8000982:	4805      	ldr	r0, [pc, #20]	@ (8000998 <HAL_UART_RxCpltCallback+0x2c>)
 8000984:	f005 f86c 	bl	8005a60 <iprintf>
		//HAL_UART_Receive_DMA(&huart1, (uint8_t*)Lidar_byte, 2);
	}
}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	200000e0 	.word	0x200000e0
 8000994:	20000084 	.word	0x20000084
 8000998:	08006828 	.word	0x08006828

0800099c <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	if (huart==&huart1){
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4a08      	ldr	r2, [pc, #32]	@ (80009c8 <HAL_UART_TxCpltCallback+0x2c>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d102      	bne.n	80009b2 <HAL_UART_TxCpltCallback+0x16>
		printf("Command send: DONE\r\n");
 80009ac:	4807      	ldr	r0, [pc, #28]	@ (80009cc <HAL_UART_TxCpltCallback+0x30>)
 80009ae:	f005 f8bf 	bl	8005b30 <puts>
	}
	if (huart==&huart2){
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a06      	ldr	r2, [pc, #24]	@ (80009d0 <HAL_UART_TxCpltCallback+0x34>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d102      	bne.n	80009c0 <HAL_UART_TxCpltCallback+0x24>
		//Lorsque l'on finit l'envoie du message vers le terminal
		irq_TX_completed=1;
 80009ba:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <HAL_UART_TxCpltCallback+0x38>)
 80009bc:	2201      	movs	r2, #1
 80009be:	601a      	str	r2, [r3, #0]
	}

}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	200000e0 	.word	0x200000e0
 80009cc:	08006830 	.word	0x08006830
 80009d0:	20000174 	.word	0x20000174
 80009d4:	2000008c 	.word	0x2000008c

080009d8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	e00a      	b.n	8000a00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009ea:	f3af 8000 	nop.w
 80009ee:	4601      	mov	r1, r0
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	1c5a      	adds	r2, r3, #1
 80009f4:	60ba      	str	r2, [r7, #8]
 80009f6:	b2ca      	uxtb	r2, r1
 80009f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	3301      	adds	r3, #1
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	697a      	ldr	r2, [r7, #20]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	dbf0      	blt.n	80009ea <_read+0x12>
  }

  return len;
 8000a08:	687b      	ldr	r3, [r7, #4]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a12:	b480      	push	{r7}
 8000a14:	b083      	sub	sp, #12
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	b083      	sub	sp, #12
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
 8000a32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a3a:	605a      	str	r2, [r3, #4]
  return 0;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <_isatty>:

int _isatty(int file)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a52:	2301      	movs	r3, #1
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3714      	adds	r7, #20
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
	...

08000a7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a84:	4a14      	ldr	r2, [pc, #80]	@ (8000ad8 <_sbrk+0x5c>)
 8000a86:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <_sbrk+0x60>)
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a90:	4b13      	ldr	r3, [pc, #76]	@ (8000ae0 <_sbrk+0x64>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d102      	bne.n	8000a9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a98:	4b11      	ldr	r3, [pc, #68]	@ (8000ae0 <_sbrk+0x64>)
 8000a9a:	4a12      	ldr	r2, [pc, #72]	@ (8000ae4 <_sbrk+0x68>)
 8000a9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ae0 <_sbrk+0x64>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d207      	bcs.n	8000abc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aac:	f005 f850 	bl	8005b50 <__errno>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000aba:	e009      	b.n	8000ad0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000abc:	4b08      	ldr	r3, [pc, #32]	@ (8000ae0 <_sbrk+0x64>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ac2:	4b07      	ldr	r3, [pc, #28]	@ (8000ae0 <_sbrk+0x64>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	4a05      	ldr	r2, [pc, #20]	@ (8000ae0 <_sbrk+0x64>)
 8000acc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ace:	68fb      	ldr	r3, [r7, #12]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3718      	adds	r7, #24
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20008000 	.word	0x20008000
 8000adc:	00000400 	.word	0x00000400
 8000ae0:	20000090 	.word	0x20000090
 8000ae4:	20000478 	.word	0x20000478

08000ae8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000aec:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <SystemInit+0x20>)
 8000aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000af2:	4a05      	ldr	r2, [pc, #20]	@ (8000b08 <SystemInit+0x20>)
 8000af4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000af8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08e      	sub	sp, #56	@ 0x38
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b12:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b20:	f107 031c 	add.w	r3, r7, #28
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
 8000b38:	611a      	str	r2, [r3, #16]
 8000b3a:	615a      	str	r2, [r3, #20]
 8000b3c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b3e:	4b2d      	ldr	r3, [pc, #180]	@ (8000bf4 <MX_TIM2_Init+0xe8>)
 8000b40:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b44:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b46:	4b2b      	ldr	r3, [pc, #172]	@ (8000bf4 <MX_TIM2_Init+0xe8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4c:	4b29      	ldr	r3, [pc, #164]	@ (8000bf4 <MX_TIM2_Init+0xe8>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 169999;
 8000b52:	4b28      	ldr	r3, [pc, #160]	@ (8000bf4 <MX_TIM2_Init+0xe8>)
 8000b54:	4a28      	ldr	r2, [pc, #160]	@ (8000bf8 <MX_TIM2_Init+0xec>)
 8000b56:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b58:	4b26      	ldr	r3, [pc, #152]	@ (8000bf4 <MX_TIM2_Init+0xe8>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b5e:	4b25      	ldr	r3, [pc, #148]	@ (8000bf4 <MX_TIM2_Init+0xe8>)
 8000b60:	2280      	movs	r2, #128	@ 0x80
 8000b62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b64:	4823      	ldr	r0, [pc, #140]	@ (8000bf4 <MX_TIM2_Init+0xe8>)
 8000b66:	f002 f8ab 	bl	8002cc0 <HAL_TIM_Base_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000b70:	f7ff fe79 	bl	8000866 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b78:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b7e:	4619      	mov	r1, r3
 8000b80:	481c      	ldr	r0, [pc, #112]	@ (8000bf4 <MX_TIM2_Init+0xe8>)
 8000b82:	f002 fbcd 	bl	8003320 <HAL_TIM_ConfigClockSource>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000b8c:	f7ff fe6b 	bl	8000866 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b90:	4818      	ldr	r0, [pc, #96]	@ (8000bf4 <MX_TIM2_Init+0xe8>)
 8000b92:	f002 f94f 	bl	8002e34 <HAL_TIM_PWM_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000b9c:	f7ff fe63 	bl	8000866 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ba8:	f107 031c 	add.w	r3, r7, #28
 8000bac:	4619      	mov	r1, r3
 8000bae:	4811      	ldr	r0, [pc, #68]	@ (8000bf4 <MX_TIM2_Init+0xe8>)
 8000bb0:	f003 f904 	bl	8003dbc <HAL_TIMEx_MasterConfigSynchronization>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000bba:	f7ff fe54 	bl	8000866 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bbe:	2360      	movs	r3, #96	@ 0x60
 8000bc0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 85000;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <MX_TIM2_Init+0xf0>)
 8000bc4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bce:	463b      	mov	r3, r7
 8000bd0:	2204      	movs	r2, #4
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4807      	ldr	r0, [pc, #28]	@ (8000bf4 <MX_TIM2_Init+0xe8>)
 8000bd6:	f002 fa8f 	bl	80030f8 <HAL_TIM_PWM_ConfigChannel>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000be0:	f7ff fe41 	bl	8000866 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000be4:	4803      	ldr	r0, [pc, #12]	@ (8000bf4 <MX_TIM2_Init+0xe8>)
 8000be6:	f000 f829 	bl	8000c3c <HAL_TIM_MspPostInit>

}
 8000bea:	bf00      	nop
 8000bec:	3738      	adds	r7, #56	@ 0x38
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000094 	.word	0x20000094
 8000bf8:	0002980f 	.word	0x0002980f
 8000bfc:	00014c08 	.word	0x00014c08

08000c00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c10:	d10b      	bne.n	8000c2a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c12:	4b09      	ldr	r3, [pc, #36]	@ (8000c38 <HAL_TIM_Base_MspInit+0x38>)
 8000c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c16:	4a08      	ldr	r2, [pc, #32]	@ (8000c38 <HAL_TIM_Base_MspInit+0x38>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <HAL_TIM_Base_MspInit+0x38>)
 8000c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	3714      	adds	r7, #20
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	40021000 	.word	0x40021000

08000c3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 030c 	add.w	r3, r7, #12
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c5c:	d11b      	bne.n	8000c96 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ca0 <HAL_TIM_MspPostInit+0x64>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c62:	4a0f      	ldr	r2, [pc, #60]	@ (8000ca0 <HAL_TIM_MspPostInit+0x64>)
 8000c64:	f043 0302 	orr.w	r3, r3, #2
 8000c68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca0 <HAL_TIM_MspPostInit+0x64>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c6e:	f003 0302 	and.w	r3, r3, #2
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = LIDAR_M_SCTR_Pin;
 8000c76:	2308      	movs	r3, #8
 8000c78:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c86:	2301      	movs	r3, #1
 8000c88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LIDAR_M_SCTR_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	f107 030c 	add.w	r3, r7, #12
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4804      	ldr	r0, [pc, #16]	@ (8000ca4 <HAL_TIM_MspPostInit+0x68>)
 8000c92:	f000 fea9 	bl	80019e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c96:	bf00      	nop
 8000c98:	3720      	adds	r7, #32
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	48000400 	.word	0x48000400

08000ca8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cac:	4b22      	ldr	r3, [pc, #136]	@ (8000d38 <MX_USART1_UART_Init+0x90>)
 8000cae:	4a23      	ldr	r2, [pc, #140]	@ (8000d3c <MX_USART1_UART_Init+0x94>)
 8000cb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 128000;
 8000cb2:	4b21      	ldr	r3, [pc, #132]	@ (8000d38 <MX_USART1_UART_Init+0x90>)
 8000cb4:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 8000cb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cba:	4b1f      	ldr	r3, [pc, #124]	@ (8000d38 <MX_USART1_UART_Init+0x90>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cc0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d38 <MX_USART1_UART_Init+0x90>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cc6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d38 <MX_USART1_UART_Init+0x90>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d38 <MX_USART1_UART_Init+0x90>)
 8000cce:	220c      	movs	r2, #12
 8000cd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cd2:	4b19      	ldr	r3, [pc, #100]	@ (8000d38 <MX_USART1_UART_Init+0x90>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd8:	4b17      	ldr	r3, [pc, #92]	@ (8000d38 <MX_USART1_UART_Init+0x90>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cde:	4b16      	ldr	r3, [pc, #88]	@ (8000d38 <MX_USART1_UART_Init+0x90>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ce4:	4b14      	ldr	r3, [pc, #80]	@ (8000d38 <MX_USART1_UART_Init+0x90>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cea:	4b13      	ldr	r3, [pc, #76]	@ (8000d38 <MX_USART1_UART_Init+0x90>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cf0:	4811      	ldr	r0, [pc, #68]	@ (8000d38 <MX_USART1_UART_Init+0x90>)
 8000cf2:	f003 f8e5 	bl	8003ec0 <HAL_UART_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000cfc:	f7ff fdb3 	bl	8000866 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d00:	2100      	movs	r1, #0
 8000d02:	480d      	ldr	r0, [pc, #52]	@ (8000d38 <MX_USART1_UART_Init+0x90>)
 8000d04:	f004 fd1f 	bl	8005746 <HAL_UARTEx_SetTxFifoThreshold>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d0e:	f7ff fdaa 	bl	8000866 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d12:	2100      	movs	r1, #0
 8000d14:	4808      	ldr	r0, [pc, #32]	@ (8000d38 <MX_USART1_UART_Init+0x90>)
 8000d16:	f004 fd54 	bl	80057c2 <HAL_UARTEx_SetRxFifoThreshold>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d20:	f7ff fda1 	bl	8000866 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d24:	4804      	ldr	r0, [pc, #16]	@ (8000d38 <MX_USART1_UART_Init+0x90>)
 8000d26:	f004 fcd5 	bl	80056d4 <HAL_UARTEx_DisableFifoMode>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d30:	f7ff fd99 	bl	8000866 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	200000e0 	.word	0x200000e0
 8000d3c:	40013800 	.word	0x40013800

08000d40 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d44:	4b22      	ldr	r3, [pc, #136]	@ (8000dd0 <MX_USART2_UART_Init+0x90>)
 8000d46:	4a23      	ldr	r2, [pc, #140]	@ (8000dd4 <MX_USART2_UART_Init+0x94>)
 8000d48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d4a:	4b21      	ldr	r3, [pc, #132]	@ (8000dd0 <MX_USART2_UART_Init+0x90>)
 8000d4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d52:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd0 <MX_USART2_UART_Init+0x90>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d58:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd0 <MX_USART2_UART_Init+0x90>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd0 <MX_USART2_UART_Init+0x90>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d64:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd0 <MX_USART2_UART_Init+0x90>)
 8000d66:	220c      	movs	r2, #12
 8000d68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6a:	4b19      	ldr	r3, [pc, #100]	@ (8000dd0 <MX_USART2_UART_Init+0x90>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d70:	4b17      	ldr	r3, [pc, #92]	@ (8000dd0 <MX_USART2_UART_Init+0x90>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d76:	4b16      	ldr	r3, [pc, #88]	@ (8000dd0 <MX_USART2_UART_Init+0x90>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d7c:	4b14      	ldr	r3, [pc, #80]	@ (8000dd0 <MX_USART2_UART_Init+0x90>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d82:	4b13      	ldr	r3, [pc, #76]	@ (8000dd0 <MX_USART2_UART_Init+0x90>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d88:	4811      	ldr	r0, [pc, #68]	@ (8000dd0 <MX_USART2_UART_Init+0x90>)
 8000d8a:	f003 f899 	bl	8003ec0 <HAL_UART_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000d94:	f7ff fd67 	bl	8000866 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d98:	2100      	movs	r1, #0
 8000d9a:	480d      	ldr	r0, [pc, #52]	@ (8000dd0 <MX_USART2_UART_Init+0x90>)
 8000d9c:	f004 fcd3 	bl	8005746 <HAL_UARTEx_SetTxFifoThreshold>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000da6:	f7ff fd5e 	bl	8000866 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000daa:	2100      	movs	r1, #0
 8000dac:	4808      	ldr	r0, [pc, #32]	@ (8000dd0 <MX_USART2_UART_Init+0x90>)
 8000dae:	f004 fd08 	bl	80057c2 <HAL_UARTEx_SetRxFifoThreshold>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000db8:	f7ff fd55 	bl	8000866 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000dbc:	4804      	ldr	r0, [pc, #16]	@ (8000dd0 <MX_USART2_UART_Init+0x90>)
 8000dbe:	f004 fc89 	bl	80056d4 <HAL_UARTEx_DisableFifoMode>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000dc8:	f7ff fd4d 	bl	8000866 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000174 	.word	0x20000174
 8000dd4:	40004400 	.word	0x40004400

08000dd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b09c      	sub	sp, #112	@ 0x70
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df0:	f107 0318 	add.w	r3, r7, #24
 8000df4:	2244      	movs	r2, #68	@ 0x44
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f004 fea1 	bl	8005b40 <memset>
  if(uartHandle->Instance==USART1)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a81      	ldr	r2, [pc, #516]	@ (8001008 <HAL_UART_MspInit+0x230>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	f040 8094 	bne.w	8000f32 <HAL_UART_MspInit+0x15a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e12:	f107 0318 	add.w	r3, r7, #24
 8000e16:	4618      	mov	r0, r3
 8000e18:	f001 fd62 	bl	80028e0 <HAL_RCCEx_PeriphCLKConfig>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e22:	f7ff fd20 	bl	8000866 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e26:	4b79      	ldr	r3, [pc, #484]	@ (800100c <HAL_UART_MspInit+0x234>)
 8000e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e2a:	4a78      	ldr	r2, [pc, #480]	@ (800100c <HAL_UART_MspInit+0x234>)
 8000e2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e30:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e32:	4b76      	ldr	r3, [pc, #472]	@ (800100c <HAL_UART_MspInit+0x234>)
 8000e34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e3a:	617b      	str	r3, [r7, #20]
 8000e3c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3e:	4b73      	ldr	r3, [pc, #460]	@ (800100c <HAL_UART_MspInit+0x234>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e42:	4a72      	ldr	r2, [pc, #456]	@ (800100c <HAL_UART_MspInit+0x234>)
 8000e44:	f043 0304 	orr.w	r3, r3, #4
 8000e48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e4a:	4b70      	ldr	r3, [pc, #448]	@ (800100c <HAL_UART_MspInit+0x234>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4e:	f003 0304 	and.w	r3, r3, #4
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = LIDAR_RXnTX_STM_Pin|LIDAR_TXnTRX_STM_Pin;
 8000e56:	2330      	movs	r3, #48	@ 0x30
 8000e58:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e66:	2307      	movs	r3, #7
 8000e68:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e6a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4867      	ldr	r0, [pc, #412]	@ (8001010 <HAL_UART_MspInit+0x238>)
 8000e72:	f000 fdb9 	bl	80019e8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8000e76:	4b67      	ldr	r3, [pc, #412]	@ (8001014 <HAL_UART_MspInit+0x23c>)
 8000e78:	4a67      	ldr	r2, [pc, #412]	@ (8001018 <HAL_UART_MspInit+0x240>)
 8000e7a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000e7c:	4b65      	ldr	r3, [pc, #404]	@ (8001014 <HAL_UART_MspInit+0x23c>)
 8000e7e:	2218      	movs	r2, #24
 8000e80:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e82:	4b64      	ldr	r3, [pc, #400]	@ (8001014 <HAL_UART_MspInit+0x23c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e88:	4b62      	ldr	r3, [pc, #392]	@ (8001014 <HAL_UART_MspInit+0x23c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e8e:	4b61      	ldr	r3, [pc, #388]	@ (8001014 <HAL_UART_MspInit+0x23c>)
 8000e90:	2280      	movs	r2, #128	@ 0x80
 8000e92:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e94:	4b5f      	ldr	r3, [pc, #380]	@ (8001014 <HAL_UART_MspInit+0x23c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e9a:	4b5e      	ldr	r3, [pc, #376]	@ (8001014 <HAL_UART_MspInit+0x23c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000ea0:	4b5c      	ldr	r3, [pc, #368]	@ (8001014 <HAL_UART_MspInit+0x23c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000ea6:	4b5b      	ldr	r3, [pc, #364]	@ (8001014 <HAL_UART_MspInit+0x23c>)
 8000ea8:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8000eac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000eae:	4859      	ldr	r0, [pc, #356]	@ (8001014 <HAL_UART_MspInit+0x23c>)
 8000eb0:	f000 fa68 	bl	8001384 <HAL_DMA_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8000eba:	f7ff fcd4 	bl	8000866 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a54      	ldr	r2, [pc, #336]	@ (8001014 <HAL_UART_MspInit+0x23c>)
 8000ec2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000ec6:	4a53      	ldr	r2, [pc, #332]	@ (8001014 <HAL_UART_MspInit+0x23c>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel3;
 8000ecc:	4b53      	ldr	r3, [pc, #332]	@ (800101c <HAL_UART_MspInit+0x244>)
 8000ece:	4a54      	ldr	r2, [pc, #336]	@ (8001020 <HAL_UART_MspInit+0x248>)
 8000ed0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000ed2:	4b52      	ldr	r3, [pc, #328]	@ (800101c <HAL_UART_MspInit+0x244>)
 8000ed4:	2219      	movs	r2, #25
 8000ed6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ed8:	4b50      	ldr	r3, [pc, #320]	@ (800101c <HAL_UART_MspInit+0x244>)
 8000eda:	2210      	movs	r2, #16
 8000edc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ede:	4b4f      	ldr	r3, [pc, #316]	@ (800101c <HAL_UART_MspInit+0x244>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ee4:	4b4d      	ldr	r3, [pc, #308]	@ (800101c <HAL_UART_MspInit+0x244>)
 8000ee6:	2280      	movs	r2, #128	@ 0x80
 8000ee8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000eea:	4b4c      	ldr	r3, [pc, #304]	@ (800101c <HAL_UART_MspInit+0x244>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ef0:	4b4a      	ldr	r3, [pc, #296]	@ (800101c <HAL_UART_MspInit+0x244>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000ef6:	4b49      	ldr	r3, [pc, #292]	@ (800101c <HAL_UART_MspInit+0x244>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000efc:	4b47      	ldr	r3, [pc, #284]	@ (800101c <HAL_UART_MspInit+0x244>)
 8000efe:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8000f02:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000f04:	4845      	ldr	r0, [pc, #276]	@ (800101c <HAL_UART_MspInit+0x244>)
 8000f06:	f000 fa3d 	bl	8001384 <HAL_DMA_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 8000f10:	f7ff fca9 	bl	8000866 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a41      	ldr	r2, [pc, #260]	@ (800101c <HAL_UART_MspInit+0x244>)
 8000f18:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000f1a:	4a40      	ldr	r2, [pc, #256]	@ (800101c <HAL_UART_MspInit+0x244>)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2100      	movs	r1, #0
 8000f24:	2025      	movs	r0, #37	@ 0x25
 8000f26:	f000 f9f8 	bl	800131a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f2a:	2025      	movs	r0, #37	@ 0x25
 8000f2c:	f000 fa0f 	bl	800134e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f30:	e065      	b.n	8000ffe <HAL_UART_MspInit+0x226>
  else if(uartHandle->Instance==USART2)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a3b      	ldr	r2, [pc, #236]	@ (8001024 <HAL_UART_MspInit+0x24c>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d160      	bne.n	8000ffe <HAL_UART_MspInit+0x226>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f40:	2300      	movs	r3, #0
 8000f42:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f44:	f107 0318 	add.w	r3, r7, #24
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f001 fcc9 	bl	80028e0 <HAL_RCCEx_PeriphCLKConfig>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <HAL_UART_MspInit+0x180>
      Error_Handler();
 8000f54:	f7ff fc87 	bl	8000866 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f58:	4b2c      	ldr	r3, [pc, #176]	@ (800100c <HAL_UART_MspInit+0x234>)
 8000f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f5c:	4a2b      	ldr	r2, [pc, #172]	@ (800100c <HAL_UART_MspInit+0x234>)
 8000f5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f62:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f64:	4b29      	ldr	r3, [pc, #164]	@ (800100c <HAL_UART_MspInit+0x234>)
 8000f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f70:	4b26      	ldr	r3, [pc, #152]	@ (800100c <HAL_UART_MspInit+0x234>)
 8000f72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f74:	4a25      	ldr	r2, [pc, #148]	@ (800100c <HAL_UART_MspInit+0x234>)
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f7c:	4b23      	ldr	r3, [pc, #140]	@ (800100c <HAL_UART_MspInit+0x234>)
 8000f7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f80:	f003 0301 	and.w	r3, r3, #1
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000f88:	230c      	movs	r3, #12
 8000f8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2300      	movs	r3, #0
 8000f96:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f98:	2307      	movs	r3, #7
 8000f9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fa6:	f000 fd1f 	bl	80019e8 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8000faa:	4b1f      	ldr	r3, [pc, #124]	@ (8001028 <HAL_UART_MspInit+0x250>)
 8000fac:	4a1f      	ldr	r2, [pc, #124]	@ (800102c <HAL_UART_MspInit+0x254>)
 8000fae:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8000fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8001028 <HAL_UART_MspInit+0x250>)
 8000fb2:	221b      	movs	r2, #27
 8000fb4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fb6:	4b1c      	ldr	r3, [pc, #112]	@ (8001028 <HAL_UART_MspInit+0x250>)
 8000fb8:	2210      	movs	r2, #16
 8000fba:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8001028 <HAL_UART_MspInit+0x250>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fc2:	4b19      	ldr	r3, [pc, #100]	@ (8001028 <HAL_UART_MspInit+0x250>)
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fc8:	4b17      	ldr	r3, [pc, #92]	@ (8001028 <HAL_UART_MspInit+0x250>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fce:	4b16      	ldr	r3, [pc, #88]	@ (8001028 <HAL_UART_MspInit+0x250>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000fd4:	4b14      	ldr	r3, [pc, #80]	@ (8001028 <HAL_UART_MspInit+0x250>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000fda:	4b13      	ldr	r3, [pc, #76]	@ (8001028 <HAL_UART_MspInit+0x250>)
 8000fdc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fe0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000fe2:	4811      	ldr	r0, [pc, #68]	@ (8001028 <HAL_UART_MspInit+0x250>)
 8000fe4:	f000 f9ce 	bl	8001384 <HAL_DMA_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_UART_MspInit+0x21a>
      Error_Handler();
 8000fee:	f7ff fc3a 	bl	8000866 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a0c      	ldr	r2, [pc, #48]	@ (8001028 <HAL_UART_MspInit+0x250>)
 8000ff6:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000ff8:	4a0b      	ldr	r2, [pc, #44]	@ (8001028 <HAL_UART_MspInit+0x250>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000ffe:	bf00      	nop
 8001000:	3770      	adds	r7, #112	@ 0x70
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40013800 	.word	0x40013800
 800100c:	40021000 	.word	0x40021000
 8001010:	48000800 	.word	0x48000800
 8001014:	20000208 	.word	0x20000208
 8001018:	4002001c 	.word	0x4002001c
 800101c:	20000268 	.word	0x20000268
 8001020:	40020030 	.word	0x40020030
 8001024:	40004400 	.word	0x40004400
 8001028:	200002c8 	.word	0x200002c8
 800102c:	40020008 	.word	0x40020008

08001030 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001030:	480d      	ldr	r0, [pc, #52]	@ (8001068 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001032:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001034:	f7ff fd58 	bl	8000ae8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001038:	480c      	ldr	r0, [pc, #48]	@ (800106c <LoopForever+0x6>)
  ldr r1, =_edata
 800103a:	490d      	ldr	r1, [pc, #52]	@ (8001070 <LoopForever+0xa>)
  ldr r2, =_sidata
 800103c:	4a0d      	ldr	r2, [pc, #52]	@ (8001074 <LoopForever+0xe>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001040:	e002      	b.n	8001048 <LoopCopyDataInit>

08001042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001046:	3304      	adds	r3, #4

08001048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800104c:	d3f9      	bcc.n	8001042 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104e:	4a0a      	ldr	r2, [pc, #40]	@ (8001078 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001050:	4c0a      	ldr	r4, [pc, #40]	@ (800107c <LoopForever+0x16>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001054:	e001      	b.n	800105a <LoopFillZerobss>

08001056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001058:	3204      	adds	r2, #4

0800105a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800105c:	d3fb      	bcc.n	8001056 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800105e:	f004 fd7d 	bl	8005b5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001062:	f7ff fb75 	bl	8000750 <main>

08001066 <LoopForever>:

LoopForever:
    b LoopForever
 8001066:	e7fe      	b.n	8001066 <LoopForever>
  ldr   r0, =_estack
 8001068:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800106c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001070:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001074:	080068c8 	.word	0x080068c8
  ldr r2, =_sbss
 8001078:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800107c:	20000478 	.word	0x20000478

08001080 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001080:	e7fe      	b.n	8001080 <ADC1_2_IRQHandler>

08001082 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001088:	2300      	movs	r3, #0
 800108a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108c:	2003      	movs	r0, #3
 800108e:	f000 f939 	bl	8001304 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001092:	2000      	movs	r0, #0
 8001094:	f000 f80e 	bl	80010b4 <HAL_InitTick>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d002      	beq.n	80010a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	71fb      	strb	r3, [r7, #7]
 80010a2:	e001      	b.n	80010a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010a4:	f7ff fbe6 	bl	8000874 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010a8:	79fb      	ldrb	r3, [r7, #7]

}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010bc:	2300      	movs	r3, #0
 80010be:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80010c0:	4b16      	ldr	r3, [pc, #88]	@ (800111c <HAL_InitTick+0x68>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d022      	beq.n	800110e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010c8:	4b15      	ldr	r3, [pc, #84]	@ (8001120 <HAL_InitTick+0x6c>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b13      	ldr	r3, [pc, #76]	@ (800111c <HAL_InitTick+0x68>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80010d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80010d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 f944 	bl	800136a <HAL_SYSTICK_Config>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d10f      	bne.n	8001108 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b0f      	cmp	r3, #15
 80010ec:	d809      	bhi.n	8001102 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ee:	2200      	movs	r2, #0
 80010f0:	6879      	ldr	r1, [r7, #4]
 80010f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010f6:	f000 f910 	bl	800131a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001124 <HAL_InitTick+0x70>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6013      	str	r3, [r2, #0]
 8001100:	e007      	b.n	8001112 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	73fb      	strb	r3, [r7, #15]
 8001106:	e004      	b.n	8001112 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	73fb      	strb	r3, [r7, #15]
 800110c:	e001      	b.n	8001112 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001112:	7bfb      	ldrb	r3, [r7, #15]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000008 	.word	0x20000008
 8001120:	20000000 	.word	0x20000000
 8001124:	20000004 	.word	0x20000004

08001128 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800112c:	4b05      	ldr	r3, [pc, #20]	@ (8001144 <HAL_IncTick+0x1c>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b05      	ldr	r3, [pc, #20]	@ (8001148 <HAL_IncTick+0x20>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4413      	add	r3, r2
 8001136:	4a03      	ldr	r2, [pc, #12]	@ (8001144 <HAL_IncTick+0x1c>)
 8001138:	6013      	str	r3, [r2, #0]
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	20000328 	.word	0x20000328
 8001148:	20000008 	.word	0x20000008

0800114c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return uwTick;
 8001150:	4b03      	ldr	r3, [pc, #12]	@ (8001160 <HAL_GetTick+0x14>)
 8001152:	681b      	ldr	r3, [r3, #0]
}
 8001154:	4618      	mov	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000328 	.word	0x20000328

08001164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001174:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001180:	4013      	ands	r3, r2
 8001182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800118c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001190:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001196:	4a04      	ldr	r2, [pc, #16]	@ (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	60d3      	str	r3, [r2, #12]
}
 800119c:	bf00      	nop
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b0:	4b04      	ldr	r3, [pc, #16]	@ (80011c4 <__NVIC_GetPriorityGrouping+0x18>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	0a1b      	lsrs	r3, r3, #8
 80011b6:	f003 0307 	and.w	r3, r3, #7
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	db0b      	blt.n	80011f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	f003 021f 	and.w	r2, r3, #31
 80011e0:	4907      	ldr	r1, [pc, #28]	@ (8001200 <__NVIC_EnableIRQ+0x38>)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	095b      	lsrs	r3, r3, #5
 80011e8:	2001      	movs	r0, #1
 80011ea:	fa00 f202 	lsl.w	r2, r0, r2
 80011ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000e100 	.word	0xe000e100

08001204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	6039      	str	r1, [r7, #0]
 800120e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001214:	2b00      	cmp	r3, #0
 8001216:	db0a      	blt.n	800122e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	b2da      	uxtb	r2, r3
 800121c:	490c      	ldr	r1, [pc, #48]	@ (8001250 <__NVIC_SetPriority+0x4c>)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	0112      	lsls	r2, r2, #4
 8001224:	b2d2      	uxtb	r2, r2
 8001226:	440b      	add	r3, r1
 8001228:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800122c:	e00a      	b.n	8001244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	b2da      	uxtb	r2, r3
 8001232:	4908      	ldr	r1, [pc, #32]	@ (8001254 <__NVIC_SetPriority+0x50>)
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	f003 030f 	and.w	r3, r3, #15
 800123a:	3b04      	subs	r3, #4
 800123c:	0112      	lsls	r2, r2, #4
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	440b      	add	r3, r1
 8001242:	761a      	strb	r2, [r3, #24]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000e100 	.word	0xe000e100
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001258:	b480      	push	{r7}
 800125a:	b089      	sub	sp, #36	@ 0x24
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f1c3 0307 	rsb	r3, r3, #7
 8001272:	2b04      	cmp	r3, #4
 8001274:	bf28      	it	cs
 8001276:	2304      	movcs	r3, #4
 8001278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3304      	adds	r3, #4
 800127e:	2b06      	cmp	r3, #6
 8001280:	d902      	bls.n	8001288 <NVIC_EncodePriority+0x30>
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3b03      	subs	r3, #3
 8001286:	e000      	b.n	800128a <NVIC_EncodePriority+0x32>
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43da      	mvns	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	401a      	ands	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa01 f303 	lsl.w	r3, r1, r3
 80012aa:	43d9      	mvns	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	4313      	orrs	r3, r2
         );
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3724      	adds	r7, #36	@ 0x24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
	...

080012c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012d0:	d301      	bcc.n	80012d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012d2:	2301      	movs	r3, #1
 80012d4:	e00f      	b.n	80012f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001300 <SysTick_Config+0x40>)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3b01      	subs	r3, #1
 80012dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012de:	210f      	movs	r1, #15
 80012e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012e4:	f7ff ff8e 	bl	8001204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e8:	4b05      	ldr	r3, [pc, #20]	@ (8001300 <SysTick_Config+0x40>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ee:	4b04      	ldr	r3, [pc, #16]	@ (8001300 <SysTick_Config+0x40>)
 80012f0:	2207      	movs	r2, #7
 80012f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	e000e010 	.word	0xe000e010

08001304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff ff29 	bl	8001164 <__NVIC_SetPriorityGrouping>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b086      	sub	sp, #24
 800131e:	af00      	add	r7, sp, #0
 8001320:	4603      	mov	r3, r0
 8001322:	60b9      	str	r1, [r7, #8]
 8001324:	607a      	str	r2, [r7, #4]
 8001326:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001328:	f7ff ff40 	bl	80011ac <__NVIC_GetPriorityGrouping>
 800132c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	68b9      	ldr	r1, [r7, #8]
 8001332:	6978      	ldr	r0, [r7, #20]
 8001334:	f7ff ff90 	bl	8001258 <NVIC_EncodePriority>
 8001338:	4602      	mov	r2, r0
 800133a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133e:	4611      	mov	r1, r2
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff5f 	bl	8001204 <__NVIC_SetPriority>
}
 8001346:	bf00      	nop
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	4603      	mov	r3, r0
 8001356:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff33 	bl	80011c8 <__NVIC_EnableIRQ>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ffa4 	bl	80012c0 <SysTick_Config>
 8001378:	4603      	mov	r3, r0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d101      	bne.n	8001396 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e08d      	b.n	80014b2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	461a      	mov	r2, r3
 800139c:	4b47      	ldr	r3, [pc, #284]	@ (80014bc <HAL_DMA_Init+0x138>)
 800139e:	429a      	cmp	r2, r3
 80013a0:	d80f      	bhi.n	80013c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	461a      	mov	r2, r3
 80013a8:	4b45      	ldr	r3, [pc, #276]	@ (80014c0 <HAL_DMA_Init+0x13c>)
 80013aa:	4413      	add	r3, r2
 80013ac:	4a45      	ldr	r2, [pc, #276]	@ (80014c4 <HAL_DMA_Init+0x140>)
 80013ae:	fba2 2303 	umull	r2, r3, r2, r3
 80013b2:	091b      	lsrs	r3, r3, #4
 80013b4:	009a      	lsls	r2, r3, #2
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a42      	ldr	r2, [pc, #264]	@ (80014c8 <HAL_DMA_Init+0x144>)
 80013be:	641a      	str	r2, [r3, #64]	@ 0x40
 80013c0:	e00e      	b.n	80013e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	461a      	mov	r2, r3
 80013c8:	4b40      	ldr	r3, [pc, #256]	@ (80014cc <HAL_DMA_Init+0x148>)
 80013ca:	4413      	add	r3, r2
 80013cc:	4a3d      	ldr	r2, [pc, #244]	@ (80014c4 <HAL_DMA_Init+0x140>)
 80013ce:	fba2 2303 	umull	r2, r3, r2, r3
 80013d2:	091b      	lsrs	r3, r3, #4
 80013d4:	009a      	lsls	r2, r3, #2
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a3c      	ldr	r2, [pc, #240]	@ (80014d0 <HAL_DMA_Init+0x14c>)
 80013de:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2202      	movs	r2, #2
 80013e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80013f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80013fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001404:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	691b      	ldr	r3, [r3, #16]
 800140a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001410:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800141c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a1b      	ldr	r3, [r3, #32]
 8001422:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	4313      	orrs	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f000 fa76 	bl	8001924 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001440:	d102      	bne.n	8001448 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001450:	b2d2      	uxtb	r2, r2
 8001452:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800145c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d010      	beq.n	8001488 <HAL_DMA_Init+0x104>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b04      	cmp	r3, #4
 800146c:	d80c      	bhi.n	8001488 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f000 fa96 	bl	80019a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	e008      	b.n	800149a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40020407 	.word	0x40020407
 80014c0:	bffdfff8 	.word	0xbffdfff8
 80014c4:	cccccccd 	.word	0xcccccccd
 80014c8:	40020000 	.word	0x40020000
 80014cc:	bffdfbf8 	.word	0xbffdfbf8
 80014d0:	40020400 	.word	0x40020400

080014d4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
 80014e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014e2:	2300      	movs	r3, #0
 80014e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d101      	bne.n	80014f4 <HAL_DMA_Start_IT+0x20>
 80014f0:	2302      	movs	r3, #2
 80014f2:	e066      	b.n	80015c2 <HAL_DMA_Start_IT+0xee>
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b01      	cmp	r3, #1
 8001506:	d155      	bne.n	80015b4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2202      	movs	r2, #2
 800150c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2200      	movs	r2, #0
 8001514:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 0201 	bic.w	r2, r2, #1
 8001524:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	68b9      	ldr	r1, [r7, #8]
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	f000 f9bb 	bl	80018a8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	2b00      	cmp	r3, #0
 8001538:	d008      	beq.n	800154c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f042 020e 	orr.w	r2, r2, #14
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	e00f      	b.n	800156c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 0204 	bic.w	r2, r2, #4
 800155a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f042 020a 	orr.w	r2, r2, #10
 800156a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d007      	beq.n	800158a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001584:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001588:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800158e:	2b00      	cmp	r3, #0
 8001590:	d007      	beq.n	80015a2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800159c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80015a0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f042 0201 	orr.w	r2, r2, #1
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	e005      	b.n	80015c0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80015bc:	2302      	movs	r3, #2
 80015be:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80015c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b085      	sub	sp, #20
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d005      	beq.n	80015ee <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2204      	movs	r2, #4
 80015e6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	73fb      	strb	r3, [r7, #15]
 80015ec:	e037      	b.n	800165e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 020e 	bic.w	r2, r2, #14
 80015fc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001608:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800160c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0201 	bic.w	r2, r2, #1
 800161c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001622:	f003 021f 	and.w	r2, r3, #31
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162a:	2101      	movs	r1, #1
 800162c:	fa01 f202 	lsl.w	r2, r1, r2
 8001630:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800163a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001640:	2b00      	cmp	r3, #0
 8001642:	d00c      	beq.n	800165e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800164e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001652:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800165c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2201      	movs	r2, #1
 8001662:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800166e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001684:	2300      	movs	r3, #0
 8001686:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d00d      	beq.n	80016b0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2204      	movs	r2, #4
 8001698:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2201      	movs	r2, #1
 800169e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	73fb      	strb	r3, [r7, #15]
 80016ae:	e047      	b.n	8001740 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 020e 	bic.w	r2, r2, #14
 80016be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0201 	bic.w	r2, r2, #1
 80016ce:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e4:	f003 021f 	and.w	r2, r3, #31
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ec:	2101      	movs	r1, #1
 80016ee:	fa01 f202 	lsl.w	r2, r1, r2
 80016f2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80016fc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001702:	2b00      	cmp	r3, #0
 8001704:	d00c      	beq.n	8001720 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001710:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001714:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800171e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	4798      	blx	r3
    }
  }
  return status;
 8001740:	7bfb      	ldrb	r3, [r7, #15]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b084      	sub	sp, #16
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001766:	f003 031f 	and.w	r3, r3, #31
 800176a:	2204      	movs	r2, #4
 800176c:	409a      	lsls	r2, r3
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	4013      	ands	r3, r2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d026      	beq.n	80017c4 <HAL_DMA_IRQHandler+0x7a>
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b00      	cmp	r3, #0
 800177e:	d021      	beq.n	80017c4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0320 	and.w	r3, r3, #32
 800178a:	2b00      	cmp	r3, #0
 800178c:	d107      	bne.n	800179e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 0204 	bic.w	r2, r2, #4
 800179c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a2:	f003 021f 	and.w	r2, r3, #31
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017aa:	2104      	movs	r1, #4
 80017ac:	fa01 f202 	lsl.w	r2, r1, r2
 80017b0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d071      	beq.n	800189e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80017c2:	e06c      	b.n	800189e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c8:	f003 031f 	and.w	r3, r3, #31
 80017cc:	2202      	movs	r2, #2
 80017ce:	409a      	lsls	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4013      	ands	r3, r2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d02e      	beq.n	8001836 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d029      	beq.n	8001836 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0320 	and.w	r3, r3, #32
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d10b      	bne.n	8001808 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 020a 	bic.w	r2, r2, #10
 80017fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800180c:	f003 021f 	and.w	r2, r3, #31
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001814:	2102      	movs	r1, #2
 8001816:	fa01 f202 	lsl.w	r2, r1, r2
 800181a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001828:	2b00      	cmp	r3, #0
 800182a:	d038      	beq.n	800189e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001834:	e033      	b.n	800189e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800183a:	f003 031f 	and.w	r3, r3, #31
 800183e:	2208      	movs	r2, #8
 8001840:	409a      	lsls	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	4013      	ands	r3, r2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d02a      	beq.n	80018a0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	f003 0308 	and.w	r3, r3, #8
 8001850:	2b00      	cmp	r3, #0
 8001852:	d025      	beq.n	80018a0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f022 020e 	bic.w	r2, r2, #14
 8001862:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001868:	f003 021f 	and.w	r2, r3, #31
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001870:	2101      	movs	r1, #1
 8001872:	fa01 f202 	lsl.w	r2, r1, r2
 8001876:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2201      	movs	r2, #1
 8001882:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001892:	2b00      	cmp	r3, #0
 8001894:	d004      	beq.n	80018a0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800189e:	bf00      	nop
 80018a0:	bf00      	nop
}
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
 80018b4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80018be:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d004      	beq.n	80018d2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80018d0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d6:	f003 021f 	and.w	r2, r3, #31
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018de:	2101      	movs	r1, #1
 80018e0:	fa01 f202 	lsl.w	r2, r1, r2
 80018e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	2b10      	cmp	r3, #16
 80018f4:	d108      	bne.n	8001908 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001906:	e007      	b.n	8001918 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	68ba      	ldr	r2, [r7, #8]
 800190e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	60da      	str	r2, [r3, #12]
}
 8001918:	bf00      	nop
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001924:	b480      	push	{r7}
 8001926:	b087      	sub	sp, #28
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	461a      	mov	r2, r3
 8001932:	4b16      	ldr	r3, [pc, #88]	@ (800198c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001934:	429a      	cmp	r2, r3
 8001936:	d802      	bhi.n	800193e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001938:	4b15      	ldr	r3, [pc, #84]	@ (8001990 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	e001      	b.n	8001942 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800193e:	4b15      	ldr	r3, [pc, #84]	@ (8001994 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001940:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	b2db      	uxtb	r3, r3
 800194c:	3b08      	subs	r3, #8
 800194e:	4a12      	ldr	r2, [pc, #72]	@ (8001998 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001950:	fba2 2303 	umull	r2, r3, r2, r3
 8001954:	091b      	lsrs	r3, r3, #4
 8001956:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195c:	089b      	lsrs	r3, r3, #2
 800195e:	009a      	lsls	r2, r3, #2
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	4413      	add	r3, r2
 8001964:	461a      	mov	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a0b      	ldr	r2, [pc, #44]	@ (800199c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800196e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f003 031f 	and.w	r3, r3, #31
 8001976:	2201      	movs	r2, #1
 8001978:	409a      	lsls	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800197e:	bf00      	nop
 8001980:	371c      	adds	r7, #28
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	40020407 	.word	0x40020407
 8001990:	40020800 	.word	0x40020800
 8001994:	40020820 	.word	0x40020820
 8001998:	cccccccd 	.word	0xcccccccd
 800199c:	40020880 	.word	0x40020880

080019a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	4b0b      	ldr	r3, [pc, #44]	@ (80019e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80019b4:	4413      	add	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	461a      	mov	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a08      	ldr	r2, [pc, #32]	@ (80019e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80019c2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	f003 031f 	and.w	r3, r3, #31
 80019cc:	2201      	movs	r2, #1
 80019ce:	409a      	lsls	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	1000823f 	.word	0x1000823f
 80019e4:	40020940 	.word	0x40020940

080019e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b087      	sub	sp, #28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80019f6:	e15a      	b.n	8001cae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	2101      	movs	r1, #1
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	fa01 f303 	lsl.w	r3, r1, r3
 8001a04:	4013      	ands	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 814c 	beq.w	8001ca8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f003 0303 	and.w	r3, r3, #3
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d005      	beq.n	8001a28 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d130      	bne.n	8001a8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	2203      	movs	r2, #3
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	68da      	ldr	r2, [r3, #12]
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a5e:	2201      	movs	r2, #1
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43db      	mvns	r3, r3
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	091b      	lsrs	r3, r3, #4
 8001a74:	f003 0201 	and.w	r2, r3, #1
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	2b03      	cmp	r3, #3
 8001a94:	d017      	beq.n	8001ac6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	2203      	movs	r2, #3
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d123      	bne.n	8001b1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	08da      	lsrs	r2, r3, #3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3208      	adds	r2, #8
 8001ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ade:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	220f      	movs	r2, #15
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	4013      	ands	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	691a      	ldr	r2, [r3, #16]
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	08da      	lsrs	r2, r3, #3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3208      	adds	r2, #8
 8001b14:	6939      	ldr	r1, [r7, #16]
 8001b16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	2203      	movs	r2, #3
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 0203 	and.w	r2, r3, #3
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 80a6 	beq.w	8001ca8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5c:	4b5b      	ldr	r3, [pc, #364]	@ (8001ccc <HAL_GPIO_Init+0x2e4>)
 8001b5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b60:	4a5a      	ldr	r2, [pc, #360]	@ (8001ccc <HAL_GPIO_Init+0x2e4>)
 8001b62:	f043 0301 	orr.w	r3, r3, #1
 8001b66:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b68:	4b58      	ldr	r3, [pc, #352]	@ (8001ccc <HAL_GPIO_Init+0x2e4>)
 8001b6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b74:	4a56      	ldr	r2, [pc, #344]	@ (8001cd0 <HAL_GPIO_Init+0x2e8>)
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	089b      	lsrs	r3, r3, #2
 8001b7a:	3302      	adds	r3, #2
 8001b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	220f      	movs	r2, #15
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	4013      	ands	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b9e:	d01f      	beq.n	8001be0 <HAL_GPIO_Init+0x1f8>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a4c      	ldr	r2, [pc, #304]	@ (8001cd4 <HAL_GPIO_Init+0x2ec>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d019      	beq.n	8001bdc <HAL_GPIO_Init+0x1f4>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a4b      	ldr	r2, [pc, #300]	@ (8001cd8 <HAL_GPIO_Init+0x2f0>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d013      	beq.n	8001bd8 <HAL_GPIO_Init+0x1f0>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a4a      	ldr	r2, [pc, #296]	@ (8001cdc <HAL_GPIO_Init+0x2f4>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d00d      	beq.n	8001bd4 <HAL_GPIO_Init+0x1ec>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a49      	ldr	r2, [pc, #292]	@ (8001ce0 <HAL_GPIO_Init+0x2f8>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d007      	beq.n	8001bd0 <HAL_GPIO_Init+0x1e8>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a48      	ldr	r2, [pc, #288]	@ (8001ce4 <HAL_GPIO_Init+0x2fc>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d101      	bne.n	8001bcc <HAL_GPIO_Init+0x1e4>
 8001bc8:	2305      	movs	r3, #5
 8001bca:	e00a      	b.n	8001be2 <HAL_GPIO_Init+0x1fa>
 8001bcc:	2306      	movs	r3, #6
 8001bce:	e008      	b.n	8001be2 <HAL_GPIO_Init+0x1fa>
 8001bd0:	2304      	movs	r3, #4
 8001bd2:	e006      	b.n	8001be2 <HAL_GPIO_Init+0x1fa>
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e004      	b.n	8001be2 <HAL_GPIO_Init+0x1fa>
 8001bd8:	2302      	movs	r3, #2
 8001bda:	e002      	b.n	8001be2 <HAL_GPIO_Init+0x1fa>
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e000      	b.n	8001be2 <HAL_GPIO_Init+0x1fa>
 8001be0:	2300      	movs	r3, #0
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	f002 0203 	and.w	r2, r2, #3
 8001be8:	0092      	lsls	r2, r2, #2
 8001bea:	4093      	lsls	r3, r2
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bf2:	4937      	ldr	r1, [pc, #220]	@ (8001cd0 <HAL_GPIO_Init+0x2e8>)
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	089b      	lsrs	r3, r3, #2
 8001bf8:	3302      	adds	r3, #2
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c00:	4b39      	ldr	r3, [pc, #228]	@ (8001ce8 <HAL_GPIO_Init+0x300>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c24:	4a30      	ldr	r2, [pc, #192]	@ (8001ce8 <HAL_GPIO_Init+0x300>)
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c2a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ce8 <HAL_GPIO_Init+0x300>)
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	43db      	mvns	r3, r3
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	4013      	ands	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c4e:	4a26      	ldr	r2, [pc, #152]	@ (8001ce8 <HAL_GPIO_Init+0x300>)
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001c54:	4b24      	ldr	r3, [pc, #144]	@ (8001ce8 <HAL_GPIO_Init+0x300>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4013      	ands	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c78:	4a1b      	ldr	r2, [pc, #108]	@ (8001ce8 <HAL_GPIO_Init+0x300>)
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce8 <HAL_GPIO_Init+0x300>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	43db      	mvns	r3, r3
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ca2:	4a11      	ldr	r2, [pc, #68]	@ (8001ce8 <HAL_GPIO_Init+0x300>)
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	3301      	adds	r3, #1
 8001cac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f47f ae9d 	bne.w	80019f8 <HAL_GPIO_Init+0x10>
  }
}
 8001cbe:	bf00      	nop
 8001cc0:	bf00      	nop
 8001cc2:	371c      	adds	r7, #28
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	40010000 	.word	0x40010000
 8001cd4:	48000400 	.word	0x48000400
 8001cd8:	48000800 	.word	0x48000800
 8001cdc:	48000c00 	.word	0x48000c00
 8001ce0:	48001000 	.word	0x48001000
 8001ce4:	48001400 	.word	0x48001400
 8001ce8:	40010400 	.word	0x40010400

08001cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	807b      	strh	r3, [r7, #2]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cfc:	787b      	ldrb	r3, [r7, #1]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d02:	887a      	ldrh	r2, [r7, #2]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d08:	e002      	b.n	8001d10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d0a:	887a      	ldrh	r2, [r7, #2]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d141      	bne.n	8001dae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d2a:	4b4b      	ldr	r3, [pc, #300]	@ (8001e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d36:	d131      	bne.n	8001d9c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d38:	4b47      	ldr	r3, [pc, #284]	@ (8001e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d3e:	4a46      	ldr	r2, [pc, #280]	@ (8001e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d48:	4b43      	ldr	r3, [pc, #268]	@ (8001e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d50:	4a41      	ldr	r2, [pc, #260]	@ (8001e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d58:	4b40      	ldr	r3, [pc, #256]	@ (8001e5c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2232      	movs	r2, #50	@ 0x32
 8001d5e:	fb02 f303 	mul.w	r3, r2, r3
 8001d62:	4a3f      	ldr	r2, [pc, #252]	@ (8001e60 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d64:	fba2 2303 	umull	r2, r3, r2, r3
 8001d68:	0c9b      	lsrs	r3, r3, #18
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d6e:	e002      	b.n	8001d76 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d76:	4b38      	ldr	r3, [pc, #224]	@ (8001e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d82:	d102      	bne.n	8001d8a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1f2      	bne.n	8001d70 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d8a:	4b33      	ldr	r3, [pc, #204]	@ (8001e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d96:	d158      	bne.n	8001e4a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e057      	b.n	8001e4c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d9c:	4b2e      	ldr	r3, [pc, #184]	@ (8001e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001da2:	4a2d      	ldr	r2, [pc, #180]	@ (8001e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001da4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001da8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001dac:	e04d      	b.n	8001e4a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001db4:	d141      	bne.n	8001e3a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001db6:	4b28      	ldr	r3, [pc, #160]	@ (8001e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001dbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dc2:	d131      	bne.n	8001e28 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001dc4:	4b24      	ldr	r3, [pc, #144]	@ (8001e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001dca:	4a23      	ldr	r2, [pc, #140]	@ (8001e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dd0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dd4:	4b20      	ldr	r3, [pc, #128]	@ (8001e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ddc:	4a1e      	ldr	r2, [pc, #120]	@ (8001e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001de2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001de4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e5c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2232      	movs	r2, #50	@ 0x32
 8001dea:	fb02 f303 	mul.w	r3, r2, r3
 8001dee:	4a1c      	ldr	r2, [pc, #112]	@ (8001e60 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001df0:	fba2 2303 	umull	r2, r3, r2, r3
 8001df4:	0c9b      	lsrs	r3, r3, #18
 8001df6:	3301      	adds	r3, #1
 8001df8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dfa:	e002      	b.n	8001e02 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e02:	4b15      	ldr	r3, [pc, #84]	@ (8001e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e0e:	d102      	bne.n	8001e16 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f2      	bne.n	8001dfc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e16:	4b10      	ldr	r3, [pc, #64]	@ (8001e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e22:	d112      	bne.n	8001e4a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e011      	b.n	8001e4c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e28:	4b0b      	ldr	r3, [pc, #44]	@ (8001e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001e38:	e007      	b.n	8001e4a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e3a:	4b07      	ldr	r3, [pc, #28]	@ (8001e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e42:	4a05      	ldr	r2, [pc, #20]	@ (8001e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e44:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e48:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	40007000 	.word	0x40007000
 8001e5c:	20000000 	.word	0x20000000
 8001e60:	431bde83 	.word	0x431bde83

08001e64 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001e68:	4b05      	ldr	r3, [pc, #20]	@ (8001e80 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	4a04      	ldr	r2, [pc, #16]	@ (8001e80 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e72:	6093      	str	r3, [r2, #8]
}
 8001e74:	bf00      	nop
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40007000 	.word	0x40007000

08001e84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b088      	sub	sp, #32
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e2fe      	b.n	8002494 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d075      	beq.n	8001f8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ea2:	4b97      	ldr	r3, [pc, #604]	@ (8002100 <HAL_RCC_OscConfig+0x27c>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 030c 	and.w	r3, r3, #12
 8001eaa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001eac:	4b94      	ldr	r3, [pc, #592]	@ (8002100 <HAL_RCC_OscConfig+0x27c>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	2b0c      	cmp	r3, #12
 8001eba:	d102      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x3e>
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	d002      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x44>
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	2b08      	cmp	r3, #8
 8001ec6:	d10b      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec8:	4b8d      	ldr	r3, [pc, #564]	@ (8002100 <HAL_RCC_OscConfig+0x27c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d05b      	beq.n	8001f8c <HAL_RCC_OscConfig+0x108>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d157      	bne.n	8001f8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e2d9      	b.n	8002494 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ee8:	d106      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x74>
 8001eea:	4b85      	ldr	r3, [pc, #532]	@ (8002100 <HAL_RCC_OscConfig+0x27c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a84      	ldr	r2, [pc, #528]	@ (8002100 <HAL_RCC_OscConfig+0x27c>)
 8001ef0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ef4:	6013      	str	r3, [r2, #0]
 8001ef6:	e01d      	b.n	8001f34 <HAL_RCC_OscConfig+0xb0>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f00:	d10c      	bne.n	8001f1c <HAL_RCC_OscConfig+0x98>
 8001f02:	4b7f      	ldr	r3, [pc, #508]	@ (8002100 <HAL_RCC_OscConfig+0x27c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a7e      	ldr	r2, [pc, #504]	@ (8002100 <HAL_RCC_OscConfig+0x27c>)
 8001f08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	4b7c      	ldr	r3, [pc, #496]	@ (8002100 <HAL_RCC_OscConfig+0x27c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a7b      	ldr	r2, [pc, #492]	@ (8002100 <HAL_RCC_OscConfig+0x27c>)
 8001f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	e00b      	b.n	8001f34 <HAL_RCC_OscConfig+0xb0>
 8001f1c:	4b78      	ldr	r3, [pc, #480]	@ (8002100 <HAL_RCC_OscConfig+0x27c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a77      	ldr	r2, [pc, #476]	@ (8002100 <HAL_RCC_OscConfig+0x27c>)
 8001f22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	4b75      	ldr	r3, [pc, #468]	@ (8002100 <HAL_RCC_OscConfig+0x27c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a74      	ldr	r2, [pc, #464]	@ (8002100 <HAL_RCC_OscConfig+0x27c>)
 8001f2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d013      	beq.n	8001f64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3c:	f7ff f906 	bl	800114c <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f44:	f7ff f902 	bl	800114c <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b64      	cmp	r3, #100	@ 0x64
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e29e      	b.n	8002494 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f56:	4b6a      	ldr	r3, [pc, #424]	@ (8002100 <HAL_RCC_OscConfig+0x27c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0f0      	beq.n	8001f44 <HAL_RCC_OscConfig+0xc0>
 8001f62:	e014      	b.n	8001f8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f64:	f7ff f8f2 	bl	800114c <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f6c:	f7ff f8ee 	bl	800114c <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b64      	cmp	r3, #100	@ 0x64
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e28a      	b.n	8002494 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f7e:	4b60      	ldr	r3, [pc, #384]	@ (8002100 <HAL_RCC_OscConfig+0x27c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f0      	bne.n	8001f6c <HAL_RCC_OscConfig+0xe8>
 8001f8a:	e000      	b.n	8001f8e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d075      	beq.n	8002086 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f9a:	4b59      	ldr	r3, [pc, #356]	@ (8002100 <HAL_RCC_OscConfig+0x27c>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
 8001fa2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fa4:	4b56      	ldr	r3, [pc, #344]	@ (8002100 <HAL_RCC_OscConfig+0x27c>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f003 0303 	and.w	r3, r3, #3
 8001fac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	2b0c      	cmp	r3, #12
 8001fb2:	d102      	bne.n	8001fba <HAL_RCC_OscConfig+0x136>
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d002      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x13c>
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	2b04      	cmp	r3, #4
 8001fbe:	d11f      	bne.n	8002000 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fc0:	4b4f      	ldr	r3, [pc, #316]	@ (8002100 <HAL_RCC_OscConfig+0x27c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d005      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x154>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e25d      	b.n	8002494 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd8:	4b49      	ldr	r3, [pc, #292]	@ (8002100 <HAL_RCC_OscConfig+0x27c>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	061b      	lsls	r3, r3, #24
 8001fe6:	4946      	ldr	r1, [pc, #280]	@ (8002100 <HAL_RCC_OscConfig+0x27c>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001fec:	4b45      	ldr	r3, [pc, #276]	@ (8002104 <HAL_RCC_OscConfig+0x280>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff f85f 	bl	80010b4 <HAL_InitTick>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d043      	beq.n	8002084 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e249      	b.n	8002494 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d023      	beq.n	8002050 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002008:	4b3d      	ldr	r3, [pc, #244]	@ (8002100 <HAL_RCC_OscConfig+0x27c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a3c      	ldr	r2, [pc, #240]	@ (8002100 <HAL_RCC_OscConfig+0x27c>)
 800200e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002012:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002014:	f7ff f89a 	bl	800114c <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800201c:	f7ff f896 	bl	800114c <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e232      	b.n	8002494 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800202e:	4b34      	ldr	r3, [pc, #208]	@ (8002100 <HAL_RCC_OscConfig+0x27c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f0      	beq.n	800201c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800203a:	4b31      	ldr	r3, [pc, #196]	@ (8002100 <HAL_RCC_OscConfig+0x27c>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	061b      	lsls	r3, r3, #24
 8002048:	492d      	ldr	r1, [pc, #180]	@ (8002100 <HAL_RCC_OscConfig+0x27c>)
 800204a:	4313      	orrs	r3, r2
 800204c:	604b      	str	r3, [r1, #4]
 800204e:	e01a      	b.n	8002086 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002050:	4b2b      	ldr	r3, [pc, #172]	@ (8002100 <HAL_RCC_OscConfig+0x27c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a2a      	ldr	r2, [pc, #168]	@ (8002100 <HAL_RCC_OscConfig+0x27c>)
 8002056:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800205a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205c:	f7ff f876 	bl	800114c <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002064:	f7ff f872 	bl	800114c <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e20e      	b.n	8002494 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002076:	4b22      	ldr	r3, [pc, #136]	@ (8002100 <HAL_RCC_OscConfig+0x27c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f0      	bne.n	8002064 <HAL_RCC_OscConfig+0x1e0>
 8002082:	e000      	b.n	8002086 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002084:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	2b00      	cmp	r3, #0
 8002090:	d041      	beq.n	8002116 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d01c      	beq.n	80020d4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800209a:	4b19      	ldr	r3, [pc, #100]	@ (8002100 <HAL_RCC_OscConfig+0x27c>)
 800209c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020a0:	4a17      	ldr	r2, [pc, #92]	@ (8002100 <HAL_RCC_OscConfig+0x27c>)
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020aa:	f7ff f84f 	bl	800114c <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020b2:	f7ff f84b 	bl	800114c <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e1e7      	b.n	8002494 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002100 <HAL_RCC_OscConfig+0x27c>)
 80020c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0ef      	beq.n	80020b2 <HAL_RCC_OscConfig+0x22e>
 80020d2:	e020      	b.n	8002116 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002100 <HAL_RCC_OscConfig+0x27c>)
 80020d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020da:	4a09      	ldr	r2, [pc, #36]	@ (8002100 <HAL_RCC_OscConfig+0x27c>)
 80020dc:	f023 0301 	bic.w	r3, r3, #1
 80020e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e4:	f7ff f832 	bl	800114c <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020ea:	e00d      	b.n	8002108 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ec:	f7ff f82e 	bl	800114c <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d906      	bls.n	8002108 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e1ca      	b.n	8002494 <HAL_RCC_OscConfig+0x610>
 80020fe:	bf00      	nop
 8002100:	40021000 	.word	0x40021000
 8002104:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002108:	4b8c      	ldr	r3, [pc, #560]	@ (800233c <HAL_RCC_OscConfig+0x4b8>)
 800210a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1ea      	bne.n	80020ec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0304 	and.w	r3, r3, #4
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 80a6 	beq.w	8002270 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002124:	2300      	movs	r3, #0
 8002126:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002128:	4b84      	ldr	r3, [pc, #528]	@ (800233c <HAL_RCC_OscConfig+0x4b8>)
 800212a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_RCC_OscConfig+0x2b4>
 8002134:	2301      	movs	r3, #1
 8002136:	e000      	b.n	800213a <HAL_RCC_OscConfig+0x2b6>
 8002138:	2300      	movs	r3, #0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00d      	beq.n	800215a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800213e:	4b7f      	ldr	r3, [pc, #508]	@ (800233c <HAL_RCC_OscConfig+0x4b8>)
 8002140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002142:	4a7e      	ldr	r2, [pc, #504]	@ (800233c <HAL_RCC_OscConfig+0x4b8>)
 8002144:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002148:	6593      	str	r3, [r2, #88]	@ 0x58
 800214a:	4b7c      	ldr	r3, [pc, #496]	@ (800233c <HAL_RCC_OscConfig+0x4b8>)
 800214c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002156:	2301      	movs	r3, #1
 8002158:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800215a:	4b79      	ldr	r3, [pc, #484]	@ (8002340 <HAL_RCC_OscConfig+0x4bc>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002162:	2b00      	cmp	r3, #0
 8002164:	d118      	bne.n	8002198 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002166:	4b76      	ldr	r3, [pc, #472]	@ (8002340 <HAL_RCC_OscConfig+0x4bc>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a75      	ldr	r2, [pc, #468]	@ (8002340 <HAL_RCC_OscConfig+0x4bc>)
 800216c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002170:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002172:	f7fe ffeb 	bl	800114c <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800217a:	f7fe ffe7 	bl	800114c <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e183      	b.n	8002494 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800218c:	4b6c      	ldr	r3, [pc, #432]	@ (8002340 <HAL_RCC_OscConfig+0x4bc>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0f0      	beq.n	800217a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d108      	bne.n	80021b2 <HAL_RCC_OscConfig+0x32e>
 80021a0:	4b66      	ldr	r3, [pc, #408]	@ (800233c <HAL_RCC_OscConfig+0x4b8>)
 80021a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021a6:	4a65      	ldr	r2, [pc, #404]	@ (800233c <HAL_RCC_OscConfig+0x4b8>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021b0:	e024      	b.n	80021fc <HAL_RCC_OscConfig+0x378>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	2b05      	cmp	r3, #5
 80021b8:	d110      	bne.n	80021dc <HAL_RCC_OscConfig+0x358>
 80021ba:	4b60      	ldr	r3, [pc, #384]	@ (800233c <HAL_RCC_OscConfig+0x4b8>)
 80021bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021c0:	4a5e      	ldr	r2, [pc, #376]	@ (800233c <HAL_RCC_OscConfig+0x4b8>)
 80021c2:	f043 0304 	orr.w	r3, r3, #4
 80021c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021ca:	4b5c      	ldr	r3, [pc, #368]	@ (800233c <HAL_RCC_OscConfig+0x4b8>)
 80021cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021d0:	4a5a      	ldr	r2, [pc, #360]	@ (800233c <HAL_RCC_OscConfig+0x4b8>)
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021da:	e00f      	b.n	80021fc <HAL_RCC_OscConfig+0x378>
 80021dc:	4b57      	ldr	r3, [pc, #348]	@ (800233c <HAL_RCC_OscConfig+0x4b8>)
 80021de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021e2:	4a56      	ldr	r2, [pc, #344]	@ (800233c <HAL_RCC_OscConfig+0x4b8>)
 80021e4:	f023 0301 	bic.w	r3, r3, #1
 80021e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021ec:	4b53      	ldr	r3, [pc, #332]	@ (800233c <HAL_RCC_OscConfig+0x4b8>)
 80021ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f2:	4a52      	ldr	r2, [pc, #328]	@ (800233c <HAL_RCC_OscConfig+0x4b8>)
 80021f4:	f023 0304 	bic.w	r3, r3, #4
 80021f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d016      	beq.n	8002232 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002204:	f7fe ffa2 	bl	800114c <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800220a:	e00a      	b.n	8002222 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800220c:	f7fe ff9e 	bl	800114c <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	f241 3288 	movw	r2, #5000	@ 0x1388
 800221a:	4293      	cmp	r3, r2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e138      	b.n	8002494 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002222:	4b46      	ldr	r3, [pc, #280]	@ (800233c <HAL_RCC_OscConfig+0x4b8>)
 8002224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0ed      	beq.n	800220c <HAL_RCC_OscConfig+0x388>
 8002230:	e015      	b.n	800225e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002232:	f7fe ff8b 	bl	800114c <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002238:	e00a      	b.n	8002250 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223a:	f7fe ff87 	bl	800114c <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002248:	4293      	cmp	r3, r2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e121      	b.n	8002494 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002250:	4b3a      	ldr	r3, [pc, #232]	@ (800233c <HAL_RCC_OscConfig+0x4b8>)
 8002252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1ed      	bne.n	800223a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800225e:	7ffb      	ldrb	r3, [r7, #31]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d105      	bne.n	8002270 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002264:	4b35      	ldr	r3, [pc, #212]	@ (800233c <HAL_RCC_OscConfig+0x4b8>)
 8002266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002268:	4a34      	ldr	r2, [pc, #208]	@ (800233c <HAL_RCC_OscConfig+0x4b8>)
 800226a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800226e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0320 	and.w	r3, r3, #32
 8002278:	2b00      	cmp	r3, #0
 800227a:	d03c      	beq.n	80022f6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d01c      	beq.n	80022be <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002284:	4b2d      	ldr	r3, [pc, #180]	@ (800233c <HAL_RCC_OscConfig+0x4b8>)
 8002286:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800228a:	4a2c      	ldr	r2, [pc, #176]	@ (800233c <HAL_RCC_OscConfig+0x4b8>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002294:	f7fe ff5a 	bl	800114c <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800229c:	f7fe ff56 	bl	800114c <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e0f2      	b.n	8002494 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022ae:	4b23      	ldr	r3, [pc, #140]	@ (800233c <HAL_RCC_OscConfig+0x4b8>)
 80022b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0ef      	beq.n	800229c <HAL_RCC_OscConfig+0x418>
 80022bc:	e01b      	b.n	80022f6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022be:	4b1f      	ldr	r3, [pc, #124]	@ (800233c <HAL_RCC_OscConfig+0x4b8>)
 80022c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022c4:	4a1d      	ldr	r2, [pc, #116]	@ (800233c <HAL_RCC_OscConfig+0x4b8>)
 80022c6:	f023 0301 	bic.w	r3, r3, #1
 80022ca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ce:	f7fe ff3d 	bl	800114c <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022d6:	f7fe ff39 	bl	800114c <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e0d5      	b.n	8002494 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022e8:	4b14      	ldr	r3, [pc, #80]	@ (800233c <HAL_RCC_OscConfig+0x4b8>)
 80022ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1ef      	bne.n	80022d6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 80c9 	beq.w	8002492 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002300:	4b0e      	ldr	r3, [pc, #56]	@ (800233c <HAL_RCC_OscConfig+0x4b8>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 030c 	and.w	r3, r3, #12
 8002308:	2b0c      	cmp	r3, #12
 800230a:	f000 8083 	beq.w	8002414 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d15e      	bne.n	80023d4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002316:	4b09      	ldr	r3, [pc, #36]	@ (800233c <HAL_RCC_OscConfig+0x4b8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a08      	ldr	r2, [pc, #32]	@ (800233c <HAL_RCC_OscConfig+0x4b8>)
 800231c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002322:	f7fe ff13 	bl	800114c <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002328:	e00c      	b.n	8002344 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800232a:	f7fe ff0f 	bl	800114c <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d905      	bls.n	8002344 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e0ab      	b.n	8002494 <HAL_RCC_OscConfig+0x610>
 800233c:	40021000 	.word	0x40021000
 8002340:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002344:	4b55      	ldr	r3, [pc, #340]	@ (800249c <HAL_RCC_OscConfig+0x618>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1ec      	bne.n	800232a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002350:	4b52      	ldr	r3, [pc, #328]	@ (800249c <HAL_RCC_OscConfig+0x618>)
 8002352:	68da      	ldr	r2, [r3, #12]
 8002354:	4b52      	ldr	r3, [pc, #328]	@ (80024a0 <HAL_RCC_OscConfig+0x61c>)
 8002356:	4013      	ands	r3, r2
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6a11      	ldr	r1, [r2, #32]
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002360:	3a01      	subs	r2, #1
 8002362:	0112      	lsls	r2, r2, #4
 8002364:	4311      	orrs	r1, r2
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800236a:	0212      	lsls	r2, r2, #8
 800236c:	4311      	orrs	r1, r2
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002372:	0852      	lsrs	r2, r2, #1
 8002374:	3a01      	subs	r2, #1
 8002376:	0552      	lsls	r2, r2, #21
 8002378:	4311      	orrs	r1, r2
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800237e:	0852      	lsrs	r2, r2, #1
 8002380:	3a01      	subs	r2, #1
 8002382:	0652      	lsls	r2, r2, #25
 8002384:	4311      	orrs	r1, r2
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800238a:	06d2      	lsls	r2, r2, #27
 800238c:	430a      	orrs	r2, r1
 800238e:	4943      	ldr	r1, [pc, #268]	@ (800249c <HAL_RCC_OscConfig+0x618>)
 8002390:	4313      	orrs	r3, r2
 8002392:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002394:	4b41      	ldr	r3, [pc, #260]	@ (800249c <HAL_RCC_OscConfig+0x618>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a40      	ldr	r2, [pc, #256]	@ (800249c <HAL_RCC_OscConfig+0x618>)
 800239a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800239e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023a0:	4b3e      	ldr	r3, [pc, #248]	@ (800249c <HAL_RCC_OscConfig+0x618>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	4a3d      	ldr	r2, [pc, #244]	@ (800249c <HAL_RCC_OscConfig+0x618>)
 80023a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ac:	f7fe fece 	bl	800114c <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b4:	f7fe feca 	bl	800114c <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e066      	b.n	8002494 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023c6:	4b35      	ldr	r3, [pc, #212]	@ (800249c <HAL_RCC_OscConfig+0x618>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCC_OscConfig+0x530>
 80023d2:	e05e      	b.n	8002492 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d4:	4b31      	ldr	r3, [pc, #196]	@ (800249c <HAL_RCC_OscConfig+0x618>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a30      	ldr	r2, [pc, #192]	@ (800249c <HAL_RCC_OscConfig+0x618>)
 80023da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e0:	f7fe feb4 	bl	800114c <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e8:	f7fe feb0 	bl	800114c <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e04c      	b.n	8002494 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023fa:	4b28      	ldr	r3, [pc, #160]	@ (800249c <HAL_RCC_OscConfig+0x618>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002406:	4b25      	ldr	r3, [pc, #148]	@ (800249c <HAL_RCC_OscConfig+0x618>)
 8002408:	68da      	ldr	r2, [r3, #12]
 800240a:	4924      	ldr	r1, [pc, #144]	@ (800249c <HAL_RCC_OscConfig+0x618>)
 800240c:	4b25      	ldr	r3, [pc, #148]	@ (80024a4 <HAL_RCC_OscConfig+0x620>)
 800240e:	4013      	ands	r3, r2
 8002410:	60cb      	str	r3, [r1, #12]
 8002412:	e03e      	b.n	8002492 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d101      	bne.n	8002420 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e039      	b.n	8002494 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002420:	4b1e      	ldr	r3, [pc, #120]	@ (800249c <HAL_RCC_OscConfig+0x618>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	f003 0203 	and.w	r2, r3, #3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	429a      	cmp	r2, r3
 8002432:	d12c      	bne.n	800248e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243e:	3b01      	subs	r3, #1
 8002440:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002442:	429a      	cmp	r2, r3
 8002444:	d123      	bne.n	800248e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002450:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002452:	429a      	cmp	r2, r3
 8002454:	d11b      	bne.n	800248e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002460:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002462:	429a      	cmp	r2, r3
 8002464:	d113      	bne.n	800248e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002470:	085b      	lsrs	r3, r3, #1
 8002472:	3b01      	subs	r3, #1
 8002474:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002476:	429a      	cmp	r2, r3
 8002478:	d109      	bne.n	800248e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002484:	085b      	lsrs	r3, r3, #1
 8002486:	3b01      	subs	r3, #1
 8002488:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800248a:	429a      	cmp	r2, r3
 800248c:	d001      	beq.n	8002492 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e000      	b.n	8002494 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3720      	adds	r7, #32
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40021000 	.word	0x40021000
 80024a0:	019f800c 	.word	0x019f800c
 80024a4:	feeefffc 	.word	0xfeeefffc

080024a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e11e      	b.n	80026fe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024c0:	4b91      	ldr	r3, [pc, #580]	@ (8002708 <HAL_RCC_ClockConfig+0x260>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 030f 	and.w	r3, r3, #15
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d910      	bls.n	80024f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ce:	4b8e      	ldr	r3, [pc, #568]	@ (8002708 <HAL_RCC_ClockConfig+0x260>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f023 020f 	bic.w	r2, r3, #15
 80024d6:	498c      	ldr	r1, [pc, #560]	@ (8002708 <HAL_RCC_ClockConfig+0x260>)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	4313      	orrs	r3, r2
 80024dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024de:	4b8a      	ldr	r3, [pc, #552]	@ (8002708 <HAL_RCC_ClockConfig+0x260>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d001      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e106      	b.n	80026fe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d073      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b03      	cmp	r3, #3
 8002502:	d129      	bne.n	8002558 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002504:	4b81      	ldr	r3, [pc, #516]	@ (800270c <HAL_RCC_ClockConfig+0x264>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e0f4      	b.n	80026fe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002514:	f000 f99e 	bl	8002854 <RCC_GetSysClockFreqFromPLLSource>
 8002518:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	4a7c      	ldr	r2, [pc, #496]	@ (8002710 <HAL_RCC_ClockConfig+0x268>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d93f      	bls.n	80025a2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002522:	4b7a      	ldr	r3, [pc, #488]	@ (800270c <HAL_RCC_ClockConfig+0x264>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d009      	beq.n	8002542 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002536:	2b00      	cmp	r3, #0
 8002538:	d033      	beq.n	80025a2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800253e:	2b00      	cmp	r3, #0
 8002540:	d12f      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002542:	4b72      	ldr	r3, [pc, #456]	@ (800270c <HAL_RCC_ClockConfig+0x264>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800254a:	4a70      	ldr	r2, [pc, #448]	@ (800270c <HAL_RCC_ClockConfig+0x264>)
 800254c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002550:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002552:	2380      	movs	r3, #128	@ 0x80
 8002554:	617b      	str	r3, [r7, #20]
 8002556:	e024      	b.n	80025a2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b02      	cmp	r3, #2
 800255e:	d107      	bne.n	8002570 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002560:	4b6a      	ldr	r3, [pc, #424]	@ (800270c <HAL_RCC_ClockConfig+0x264>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d109      	bne.n	8002580 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0c6      	b.n	80026fe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002570:	4b66      	ldr	r3, [pc, #408]	@ (800270c <HAL_RCC_ClockConfig+0x264>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e0be      	b.n	80026fe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002580:	f000 f8ce 	bl	8002720 <HAL_RCC_GetSysClockFreq>
 8002584:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	4a61      	ldr	r2, [pc, #388]	@ (8002710 <HAL_RCC_ClockConfig+0x268>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d909      	bls.n	80025a2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800258e:	4b5f      	ldr	r3, [pc, #380]	@ (800270c <HAL_RCC_ClockConfig+0x264>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002596:	4a5d      	ldr	r2, [pc, #372]	@ (800270c <HAL_RCC_ClockConfig+0x264>)
 8002598:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800259c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800259e:	2380      	movs	r3, #128	@ 0x80
 80025a0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025a2:	4b5a      	ldr	r3, [pc, #360]	@ (800270c <HAL_RCC_ClockConfig+0x264>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f023 0203 	bic.w	r2, r3, #3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	4957      	ldr	r1, [pc, #348]	@ (800270c <HAL_RCC_ClockConfig+0x264>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025b4:	f7fe fdca 	bl	800114c <HAL_GetTick>
 80025b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ba:	e00a      	b.n	80025d2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025bc:	f7fe fdc6 	bl	800114c <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e095      	b.n	80026fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d2:	4b4e      	ldr	r3, [pc, #312]	@ (800270c <HAL_RCC_ClockConfig+0x264>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 020c 	and.w	r2, r3, #12
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d1eb      	bne.n	80025bc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d023      	beq.n	8002638 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025fc:	4b43      	ldr	r3, [pc, #268]	@ (800270c <HAL_RCC_ClockConfig+0x264>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	4a42      	ldr	r2, [pc, #264]	@ (800270c <HAL_RCC_ClockConfig+0x264>)
 8002602:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002606:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b00      	cmp	r3, #0
 8002612:	d007      	beq.n	8002624 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002614:	4b3d      	ldr	r3, [pc, #244]	@ (800270c <HAL_RCC_ClockConfig+0x264>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800261c:	4a3b      	ldr	r2, [pc, #236]	@ (800270c <HAL_RCC_ClockConfig+0x264>)
 800261e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002622:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002624:	4b39      	ldr	r3, [pc, #228]	@ (800270c <HAL_RCC_ClockConfig+0x264>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	4936      	ldr	r1, [pc, #216]	@ (800270c <HAL_RCC_ClockConfig+0x264>)
 8002632:	4313      	orrs	r3, r2
 8002634:	608b      	str	r3, [r1, #8]
 8002636:	e008      	b.n	800264a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	2b80      	cmp	r3, #128	@ 0x80
 800263c:	d105      	bne.n	800264a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800263e:	4b33      	ldr	r3, [pc, #204]	@ (800270c <HAL_RCC_ClockConfig+0x264>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	4a32      	ldr	r2, [pc, #200]	@ (800270c <HAL_RCC_ClockConfig+0x264>)
 8002644:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002648:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800264a:	4b2f      	ldr	r3, [pc, #188]	@ (8002708 <HAL_RCC_ClockConfig+0x260>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d21d      	bcs.n	8002694 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002658:	4b2b      	ldr	r3, [pc, #172]	@ (8002708 <HAL_RCC_ClockConfig+0x260>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f023 020f 	bic.w	r2, r3, #15
 8002660:	4929      	ldr	r1, [pc, #164]	@ (8002708 <HAL_RCC_ClockConfig+0x260>)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	4313      	orrs	r3, r2
 8002666:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002668:	f7fe fd70 	bl	800114c <HAL_GetTick>
 800266c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800266e:	e00a      	b.n	8002686 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002670:	f7fe fd6c 	bl	800114c <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800267e:	4293      	cmp	r3, r2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e03b      	b.n	80026fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002686:	4b20      	ldr	r3, [pc, #128]	@ (8002708 <HAL_RCC_ClockConfig+0x260>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	429a      	cmp	r2, r3
 8002692:	d1ed      	bne.n	8002670 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	d008      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026a0:	4b1a      	ldr	r3, [pc, #104]	@ (800270c <HAL_RCC_ClockConfig+0x264>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	4917      	ldr	r1, [pc, #92]	@ (800270c <HAL_RCC_ClockConfig+0x264>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d009      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026be:	4b13      	ldr	r3, [pc, #76]	@ (800270c <HAL_RCC_ClockConfig+0x264>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	490f      	ldr	r1, [pc, #60]	@ (800270c <HAL_RCC_ClockConfig+0x264>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026d2:	f000 f825 	bl	8002720 <HAL_RCC_GetSysClockFreq>
 80026d6:	4602      	mov	r2, r0
 80026d8:	4b0c      	ldr	r3, [pc, #48]	@ (800270c <HAL_RCC_ClockConfig+0x264>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	091b      	lsrs	r3, r3, #4
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	490c      	ldr	r1, [pc, #48]	@ (8002714 <HAL_RCC_ClockConfig+0x26c>)
 80026e4:	5ccb      	ldrb	r3, [r1, r3]
 80026e6:	f003 031f 	and.w	r3, r3, #31
 80026ea:	fa22 f303 	lsr.w	r3, r2, r3
 80026ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002718 <HAL_RCC_ClockConfig+0x270>)
 80026f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80026f2:	4b0a      	ldr	r3, [pc, #40]	@ (800271c <HAL_RCC_ClockConfig+0x274>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fe fcdc 	bl	80010b4 <HAL_InitTick>
 80026fc:	4603      	mov	r3, r0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40022000 	.word	0x40022000
 800270c:	40021000 	.word	0x40021000
 8002710:	04c4b400 	.word	0x04c4b400
 8002714:	08006844 	.word	0x08006844
 8002718:	20000000 	.word	0x20000000
 800271c:	20000004 	.word	0x20000004

08002720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002720:	b480      	push	{r7}
 8002722:	b087      	sub	sp, #28
 8002724:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002726:	4b2c      	ldr	r3, [pc, #176]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 030c 	and.w	r3, r3, #12
 800272e:	2b04      	cmp	r3, #4
 8002730:	d102      	bne.n	8002738 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002732:	4b2a      	ldr	r3, [pc, #168]	@ (80027dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002734:	613b      	str	r3, [r7, #16]
 8002736:	e047      	b.n	80027c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002738:	4b27      	ldr	r3, [pc, #156]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 030c 	and.w	r3, r3, #12
 8002740:	2b08      	cmp	r3, #8
 8002742:	d102      	bne.n	800274a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002744:	4b26      	ldr	r3, [pc, #152]	@ (80027e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002746:	613b      	str	r3, [r7, #16]
 8002748:	e03e      	b.n	80027c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800274a:	4b23      	ldr	r3, [pc, #140]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 030c 	and.w	r3, r3, #12
 8002752:	2b0c      	cmp	r3, #12
 8002754:	d136      	bne.n	80027c4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002756:	4b20      	ldr	r3, [pc, #128]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	f003 0303 	and.w	r3, r3, #3
 800275e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002760:	4b1d      	ldr	r3, [pc, #116]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	091b      	lsrs	r3, r3, #4
 8002766:	f003 030f 	and.w	r3, r3, #15
 800276a:	3301      	adds	r3, #1
 800276c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2b03      	cmp	r3, #3
 8002772:	d10c      	bne.n	800278e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002774:	4a1a      	ldr	r2, [pc, #104]	@ (80027e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	fbb2 f3f3 	udiv	r3, r2, r3
 800277c:	4a16      	ldr	r2, [pc, #88]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800277e:	68d2      	ldr	r2, [r2, #12]
 8002780:	0a12      	lsrs	r2, r2, #8
 8002782:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002786:	fb02 f303 	mul.w	r3, r2, r3
 800278a:	617b      	str	r3, [r7, #20]
      break;
 800278c:	e00c      	b.n	80027a8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800278e:	4a13      	ldr	r2, [pc, #76]	@ (80027dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	fbb2 f3f3 	udiv	r3, r2, r3
 8002796:	4a10      	ldr	r2, [pc, #64]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002798:	68d2      	ldr	r2, [r2, #12]
 800279a:	0a12      	lsrs	r2, r2, #8
 800279c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80027a0:	fb02 f303 	mul.w	r3, r2, r3
 80027a4:	617b      	str	r3, [r7, #20]
      break;
 80027a6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027a8:	4b0b      	ldr	r3, [pc, #44]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	0e5b      	lsrs	r3, r3, #25
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	3301      	adds	r3, #1
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	e001      	b.n	80027c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80027c8:	693b      	ldr	r3, [r7, #16]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	371c      	adds	r7, #28
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40021000 	.word	0x40021000
 80027dc:	00f42400 	.word	0x00f42400
 80027e0:	016e3600 	.word	0x016e3600

080027e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027e8:	4b03      	ldr	r3, [pc, #12]	@ (80027f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80027ea:	681b      	ldr	r3, [r3, #0]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	20000000 	.word	0x20000000

080027fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002800:	f7ff fff0 	bl	80027e4 <HAL_RCC_GetHCLKFreq>
 8002804:	4602      	mov	r2, r0
 8002806:	4b06      	ldr	r3, [pc, #24]	@ (8002820 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	0a1b      	lsrs	r3, r3, #8
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	4904      	ldr	r1, [pc, #16]	@ (8002824 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002812:	5ccb      	ldrb	r3, [r1, r3]
 8002814:	f003 031f 	and.w	r3, r3, #31
 8002818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800281c:	4618      	mov	r0, r3
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40021000 	.word	0x40021000
 8002824:	08006854 	.word	0x08006854

08002828 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800282c:	f7ff ffda 	bl	80027e4 <HAL_RCC_GetHCLKFreq>
 8002830:	4602      	mov	r2, r0
 8002832:	4b06      	ldr	r3, [pc, #24]	@ (800284c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	0adb      	lsrs	r3, r3, #11
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	4904      	ldr	r1, [pc, #16]	@ (8002850 <HAL_RCC_GetPCLK2Freq+0x28>)
 800283e:	5ccb      	ldrb	r3, [r1, r3]
 8002840:	f003 031f 	and.w	r3, r3, #31
 8002844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002848:	4618      	mov	r0, r3
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40021000 	.word	0x40021000
 8002850:	08006854 	.word	0x08006854

08002854 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002854:	b480      	push	{r7}
 8002856:	b087      	sub	sp, #28
 8002858:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800285a:	4b1e      	ldr	r3, [pc, #120]	@ (80028d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002864:	4b1b      	ldr	r3, [pc, #108]	@ (80028d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	091b      	lsrs	r3, r3, #4
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	3301      	adds	r3, #1
 8002870:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	2b03      	cmp	r3, #3
 8002876:	d10c      	bne.n	8002892 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002878:	4a17      	ldr	r2, [pc, #92]	@ (80028d8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002880:	4a14      	ldr	r2, [pc, #80]	@ (80028d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002882:	68d2      	ldr	r2, [r2, #12]
 8002884:	0a12      	lsrs	r2, r2, #8
 8002886:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800288a:	fb02 f303 	mul.w	r3, r2, r3
 800288e:	617b      	str	r3, [r7, #20]
    break;
 8002890:	e00c      	b.n	80028ac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002892:	4a12      	ldr	r2, [pc, #72]	@ (80028dc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	fbb2 f3f3 	udiv	r3, r2, r3
 800289a:	4a0e      	ldr	r2, [pc, #56]	@ (80028d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800289c:	68d2      	ldr	r2, [r2, #12]
 800289e:	0a12      	lsrs	r2, r2, #8
 80028a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80028a4:	fb02 f303 	mul.w	r3, r2, r3
 80028a8:	617b      	str	r3, [r7, #20]
    break;
 80028aa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028ac:	4b09      	ldr	r3, [pc, #36]	@ (80028d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	0e5b      	lsrs	r3, r3, #25
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	3301      	adds	r3, #1
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80028c6:	687b      	ldr	r3, [r7, #4]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	371c      	adds	r7, #28
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	40021000 	.word	0x40021000
 80028d8:	016e3600 	.word	0x016e3600
 80028dc:	00f42400 	.word	0x00f42400

080028e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028e8:	2300      	movs	r3, #0
 80028ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028ec:	2300      	movs	r3, #0
 80028ee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 8098 	beq.w	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028fe:	2300      	movs	r3, #0
 8002900:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002902:	4b43      	ldr	r3, [pc, #268]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10d      	bne.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800290e:	4b40      	ldr	r3, [pc, #256]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002912:	4a3f      	ldr	r2, [pc, #252]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002914:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002918:	6593      	str	r3, [r2, #88]	@ 0x58
 800291a:	4b3d      	ldr	r3, [pc, #244]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800291c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800291e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002922:	60bb      	str	r3, [r7, #8]
 8002924:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002926:	2301      	movs	r3, #1
 8002928:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800292a:	4b3a      	ldr	r3, [pc, #232]	@ (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a39      	ldr	r2, [pc, #228]	@ (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002930:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002934:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002936:	f7fe fc09 	bl	800114c <HAL_GetTick>
 800293a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800293c:	e009      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293e:	f7fe fc05 	bl	800114c <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d902      	bls.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	74fb      	strb	r3, [r7, #19]
        break;
 8002950:	e005      	b.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002952:	4b30      	ldr	r3, [pc, #192]	@ (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0ef      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800295e:	7cfb      	ldrb	r3, [r7, #19]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d159      	bne.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002964:	4b2a      	ldr	r3, [pc, #168]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800296a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800296e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d01e      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	429a      	cmp	r2, r3
 800297e:	d019      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002980:	4b23      	ldr	r3, [pc, #140]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002986:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800298a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800298c:	4b20      	ldr	r3, [pc, #128]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800298e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002992:	4a1f      	ldr	r2, [pc, #124]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002994:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002998:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800299c:	4b1c      	ldr	r3, [pc, #112]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800299e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029a2:	4a1b      	ldr	r2, [pc, #108]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029ac:	4a18      	ldr	r2, [pc, #96]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d016      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029be:	f7fe fbc5 	bl	800114c <HAL_GetTick>
 80029c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029c4:	e00b      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c6:	f7fe fbc1 	bl	800114c <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d902      	bls.n	80029de <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	74fb      	strb	r3, [r7, #19]
            break;
 80029dc:	e006      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029de:	4b0c      	ldr	r3, [pc, #48]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0ec      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80029ec:	7cfb      	ldrb	r3, [r7, #19]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10b      	bne.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029f2:	4b07      	ldr	r3, [pc, #28]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a00:	4903      	ldr	r1, [pc, #12]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002a08:	e008      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a0a:	7cfb      	ldrb	r3, [r7, #19]
 8002a0c:	74bb      	strb	r3, [r7, #18]
 8002a0e:	e005      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002a10:	40021000 	.word	0x40021000
 8002a14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a18:	7cfb      	ldrb	r3, [r7, #19]
 8002a1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a1c:	7c7b      	ldrb	r3, [r7, #17]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d105      	bne.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a22:	4ba6      	ldr	r3, [pc, #664]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a26:	4aa5      	ldr	r2, [pc, #660]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a2c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00a      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a3a:	4ba0      	ldr	r3, [pc, #640]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a40:	f023 0203 	bic.w	r2, r3, #3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	499c      	ldr	r1, [pc, #624]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00a      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a5c:	4b97      	ldr	r3, [pc, #604]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a62:	f023 020c 	bic.w	r2, r3, #12
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	4994      	ldr	r1, [pc, #592]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0304 	and.w	r3, r3, #4
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00a      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a7e:	4b8f      	ldr	r3, [pc, #572]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a84:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	498b      	ldr	r1, [pc, #556]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0308 	and.w	r3, r3, #8
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00a      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002aa0:	4b86      	ldr	r3, [pc, #536]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aa6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	4983      	ldr	r1, [pc, #524]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0320 	and.w	r3, r3, #32
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00a      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ac2:	4b7e      	ldr	r3, [pc, #504]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ac8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	497a      	ldr	r1, [pc, #488]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00a      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ae4:	4b75      	ldr	r3, [pc, #468]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aea:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	4972      	ldr	r1, [pc, #456]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00a      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b06:	4b6d      	ldr	r3, [pc, #436]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b0c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	4969      	ldr	r1, [pc, #420]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00a      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b28:	4b64      	ldr	r3, [pc, #400]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b2e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	4961      	ldr	r1, [pc, #388]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00a      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b4a:	4b5c      	ldr	r3, [pc, #368]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b50:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b58:	4958      	ldr	r1, [pc, #352]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d015      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b6c:	4b53      	ldr	r3, [pc, #332]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b7a:	4950      	ldr	r1, [pc, #320]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b8a:	d105      	bne.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b8c:	4b4b      	ldr	r3, [pc, #300]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	4a4a      	ldr	r2, [pc, #296]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b96:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d015      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ba4:	4b45      	ldr	r3, [pc, #276]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002baa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb2:	4942      	ldr	r1, [pc, #264]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bbe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bc2:	d105      	bne.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bc4:	4b3d      	ldr	r3, [pc, #244]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	4a3c      	ldr	r2, [pc, #240]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bce:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d015      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002bdc:	4b37      	ldr	r3, [pc, #220]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bea:	4934      	ldr	r1, [pc, #208]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bfa:	d105      	bne.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bfc:	4b2f      	ldr	r3, [pc, #188]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	4a2e      	ldr	r2, [pc, #184]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c06:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d015      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c14:	4b29      	ldr	r3, [pc, #164]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c1a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c22:	4926      	ldr	r1, [pc, #152]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c32:	d105      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c34:	4b21      	ldr	r3, [pc, #132]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	4a20      	ldr	r2, [pc, #128]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c3e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d015      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c52:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c5a:	4918      	ldr	r1, [pc, #96]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c6a:	d105      	bne.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c6c:	4b13      	ldr	r3, [pc, #76]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	4a12      	ldr	r2, [pc, #72]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c76:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d015      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c84:	4b0d      	ldr	r3, [pc, #52]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c8a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c92:	490a      	ldr	r1, [pc, #40]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ca2:	d105      	bne.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ca4:	4b05      	ldr	r3, [pc, #20]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	4a04      	ldr	r2, [pc, #16]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002caa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002cb0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3718      	adds	r7, #24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40021000 	.word	0x40021000

08002cc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e049      	b.n	8002d66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d106      	bne.n	8002cec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7fd ff8a 	bl	8000c00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2202      	movs	r2, #2
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3304      	adds	r3, #4
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4610      	mov	r0, r2
 8002d00:	f000 fc08 	bl	8003514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
	...

08002d70 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d001      	beq.n	8002d88 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e042      	b.n	8002e0e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a21      	ldr	r2, [pc, #132]	@ (8002e1c <HAL_TIM_Base_Start+0xac>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d018      	beq.n	8002dcc <HAL_TIM_Base_Start+0x5c>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002da2:	d013      	beq.n	8002dcc <HAL_TIM_Base_Start+0x5c>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a1d      	ldr	r2, [pc, #116]	@ (8002e20 <HAL_TIM_Base_Start+0xb0>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d00e      	beq.n	8002dcc <HAL_TIM_Base_Start+0x5c>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a1c      	ldr	r2, [pc, #112]	@ (8002e24 <HAL_TIM_Base_Start+0xb4>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d009      	beq.n	8002dcc <HAL_TIM_Base_Start+0x5c>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a1a      	ldr	r2, [pc, #104]	@ (8002e28 <HAL_TIM_Base_Start+0xb8>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d004      	beq.n	8002dcc <HAL_TIM_Base_Start+0x5c>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a19      	ldr	r2, [pc, #100]	@ (8002e2c <HAL_TIM_Base_Start+0xbc>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d115      	bne.n	8002df8 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	4b17      	ldr	r3, [pc, #92]	@ (8002e30 <HAL_TIM_Base_Start+0xc0>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2b06      	cmp	r3, #6
 8002ddc:	d015      	beq.n	8002e0a <HAL_TIM_Base_Start+0x9a>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002de4:	d011      	beq.n	8002e0a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f042 0201 	orr.w	r2, r2, #1
 8002df4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002df6:	e008      	b.n	8002e0a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 0201 	orr.w	r2, r2, #1
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	e000      	b.n	8002e0c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	40012c00 	.word	0x40012c00
 8002e20:	40000400 	.word	0x40000400
 8002e24:	40000800 	.word	0x40000800
 8002e28:	40013400 	.word	0x40013400
 8002e2c:	40014000 	.word	0x40014000
 8002e30:	00010007 	.word	0x00010007

08002e34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e049      	b.n	8002eda <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d106      	bne.n	8002e60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f841 	bl	8002ee2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3304      	adds	r3, #4
 8002e70:	4619      	mov	r1, r3
 8002e72:	4610      	mov	r0, r2
 8002e74:	f000 fb4e 	bl	8003514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b083      	sub	sp, #12
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
	...

08002ef8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d109      	bne.n	8002f1c <HAL_TIM_PWM_Start+0x24>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	bf14      	ite	ne
 8002f14:	2301      	movne	r3, #1
 8002f16:	2300      	moveq	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	e03c      	b.n	8002f96 <HAL_TIM_PWM_Start+0x9e>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d109      	bne.n	8002f36 <HAL_TIM_PWM_Start+0x3e>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	bf14      	ite	ne
 8002f2e:	2301      	movne	r3, #1
 8002f30:	2300      	moveq	r3, #0
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	e02f      	b.n	8002f96 <HAL_TIM_PWM_Start+0x9e>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d109      	bne.n	8002f50 <HAL_TIM_PWM_Start+0x58>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	bf14      	ite	ne
 8002f48:	2301      	movne	r3, #1
 8002f4a:	2300      	moveq	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	e022      	b.n	8002f96 <HAL_TIM_PWM_Start+0x9e>
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	2b0c      	cmp	r3, #12
 8002f54:	d109      	bne.n	8002f6a <HAL_TIM_PWM_Start+0x72>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	bf14      	ite	ne
 8002f62:	2301      	movne	r3, #1
 8002f64:	2300      	moveq	r3, #0
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	e015      	b.n	8002f96 <HAL_TIM_PWM_Start+0x9e>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2b10      	cmp	r3, #16
 8002f6e:	d109      	bne.n	8002f84 <HAL_TIM_PWM_Start+0x8c>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	bf14      	ite	ne
 8002f7c:	2301      	movne	r3, #1
 8002f7e:	2300      	moveq	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	e008      	b.n	8002f96 <HAL_TIM_PWM_Start+0x9e>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	bf14      	ite	ne
 8002f90:	2301      	movne	r3, #1
 8002f92:	2300      	moveq	r3, #0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e097      	b.n	80030ce <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d104      	bne.n	8002fae <HAL_TIM_PWM_Start+0xb6>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fac:	e023      	b.n	8002ff6 <HAL_TIM_PWM_Start+0xfe>
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	d104      	bne.n	8002fbe <HAL_TIM_PWM_Start+0xc6>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fbc:	e01b      	b.n	8002ff6 <HAL_TIM_PWM_Start+0xfe>
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d104      	bne.n	8002fce <HAL_TIM_PWM_Start+0xd6>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fcc:	e013      	b.n	8002ff6 <HAL_TIM_PWM_Start+0xfe>
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2b0c      	cmp	r3, #12
 8002fd2:	d104      	bne.n	8002fde <HAL_TIM_PWM_Start+0xe6>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002fdc:	e00b      	b.n	8002ff6 <HAL_TIM_PWM_Start+0xfe>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	2b10      	cmp	r3, #16
 8002fe2:	d104      	bne.n	8002fee <HAL_TIM_PWM_Start+0xf6>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fec:	e003      	b.n	8002ff6 <HAL_TIM_PWM_Start+0xfe>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	6839      	ldr	r1, [r7, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 feb6 	bl	8003d70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a33      	ldr	r2, [pc, #204]	@ (80030d8 <HAL_TIM_PWM_Start+0x1e0>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d013      	beq.n	8003036 <HAL_TIM_PWM_Start+0x13e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a32      	ldr	r2, [pc, #200]	@ (80030dc <HAL_TIM_PWM_Start+0x1e4>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d00e      	beq.n	8003036 <HAL_TIM_PWM_Start+0x13e>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a30      	ldr	r2, [pc, #192]	@ (80030e0 <HAL_TIM_PWM_Start+0x1e8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d009      	beq.n	8003036 <HAL_TIM_PWM_Start+0x13e>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a2f      	ldr	r2, [pc, #188]	@ (80030e4 <HAL_TIM_PWM_Start+0x1ec>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d004      	beq.n	8003036 <HAL_TIM_PWM_Start+0x13e>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a2d      	ldr	r2, [pc, #180]	@ (80030e8 <HAL_TIM_PWM_Start+0x1f0>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d101      	bne.n	800303a <HAL_TIM_PWM_Start+0x142>
 8003036:	2301      	movs	r3, #1
 8003038:	e000      	b.n	800303c <HAL_TIM_PWM_Start+0x144>
 800303a:	2300      	movs	r3, #0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d007      	beq.n	8003050 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800304e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a20      	ldr	r2, [pc, #128]	@ (80030d8 <HAL_TIM_PWM_Start+0x1e0>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d018      	beq.n	800308c <HAL_TIM_PWM_Start+0x194>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003062:	d013      	beq.n	800308c <HAL_TIM_PWM_Start+0x194>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a20      	ldr	r2, [pc, #128]	@ (80030ec <HAL_TIM_PWM_Start+0x1f4>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d00e      	beq.n	800308c <HAL_TIM_PWM_Start+0x194>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a1f      	ldr	r2, [pc, #124]	@ (80030f0 <HAL_TIM_PWM_Start+0x1f8>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d009      	beq.n	800308c <HAL_TIM_PWM_Start+0x194>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a17      	ldr	r2, [pc, #92]	@ (80030dc <HAL_TIM_PWM_Start+0x1e4>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d004      	beq.n	800308c <HAL_TIM_PWM_Start+0x194>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a16      	ldr	r2, [pc, #88]	@ (80030e0 <HAL_TIM_PWM_Start+0x1e8>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d115      	bne.n	80030b8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	4b18      	ldr	r3, [pc, #96]	@ (80030f4 <HAL_TIM_PWM_Start+0x1fc>)
 8003094:	4013      	ands	r3, r2
 8003096:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2b06      	cmp	r3, #6
 800309c:	d015      	beq.n	80030ca <HAL_TIM_PWM_Start+0x1d2>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030a4:	d011      	beq.n	80030ca <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f042 0201 	orr.w	r2, r2, #1
 80030b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030b6:	e008      	b.n	80030ca <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f042 0201 	orr.w	r2, r2, #1
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	e000      	b.n	80030cc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40012c00 	.word	0x40012c00
 80030dc:	40013400 	.word	0x40013400
 80030e0:	40014000 	.word	0x40014000
 80030e4:	40014400 	.word	0x40014400
 80030e8:	40014800 	.word	0x40014800
 80030ec:	40000400 	.word	0x40000400
 80030f0:	40000800 	.word	0x40000800
 80030f4:	00010007 	.word	0x00010007

080030f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003104:	2300      	movs	r3, #0
 8003106:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800310e:	2b01      	cmp	r3, #1
 8003110:	d101      	bne.n	8003116 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003112:	2302      	movs	r3, #2
 8003114:	e0ff      	b.n	8003316 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b14      	cmp	r3, #20
 8003122:	f200 80f0 	bhi.w	8003306 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003126:	a201      	add	r2, pc, #4	@ (adr r2, 800312c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312c:	08003181 	.word	0x08003181
 8003130:	08003307 	.word	0x08003307
 8003134:	08003307 	.word	0x08003307
 8003138:	08003307 	.word	0x08003307
 800313c:	080031c1 	.word	0x080031c1
 8003140:	08003307 	.word	0x08003307
 8003144:	08003307 	.word	0x08003307
 8003148:	08003307 	.word	0x08003307
 800314c:	08003203 	.word	0x08003203
 8003150:	08003307 	.word	0x08003307
 8003154:	08003307 	.word	0x08003307
 8003158:	08003307 	.word	0x08003307
 800315c:	08003243 	.word	0x08003243
 8003160:	08003307 	.word	0x08003307
 8003164:	08003307 	.word	0x08003307
 8003168:	08003307 	.word	0x08003307
 800316c:	08003285 	.word	0x08003285
 8003170:	08003307 	.word	0x08003307
 8003174:	08003307 	.word	0x08003307
 8003178:	08003307 	.word	0x08003307
 800317c:	080032c5 	.word	0x080032c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68b9      	ldr	r1, [r7, #8]
 8003186:	4618      	mov	r0, r3
 8003188:	f000 fa60 	bl	800364c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699a      	ldr	r2, [r3, #24]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0208 	orr.w	r2, r2, #8
 800319a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699a      	ldr	r2, [r3, #24]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 0204 	bic.w	r2, r2, #4
 80031aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6999      	ldr	r1, [r3, #24]
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	691a      	ldr	r2, [r3, #16]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	619a      	str	r2, [r3, #24]
      break;
 80031be:	e0a5      	b.n	800330c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68b9      	ldr	r1, [r7, #8]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 fad0 	bl	800376c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	699a      	ldr	r2, [r3, #24]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699a      	ldr	r2, [r3, #24]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6999      	ldr	r1, [r3, #24]
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	021a      	lsls	r2, r3, #8
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	619a      	str	r2, [r3, #24]
      break;
 8003200:	e084      	b.n	800330c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68b9      	ldr	r1, [r7, #8]
 8003208:	4618      	mov	r0, r3
 800320a:	f000 fb39 	bl	8003880 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	69da      	ldr	r2, [r3, #28]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f042 0208 	orr.w	r2, r2, #8
 800321c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	69da      	ldr	r2, [r3, #28]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0204 	bic.w	r2, r2, #4
 800322c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	69d9      	ldr	r1, [r3, #28]
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	61da      	str	r2, [r3, #28]
      break;
 8003240:	e064      	b.n	800330c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68b9      	ldr	r1, [r7, #8]
 8003248:	4618      	mov	r0, r3
 800324a:	f000 fba1 	bl	8003990 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	69da      	ldr	r2, [r3, #28]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800325c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	69da      	ldr	r2, [r3, #28]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800326c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	69d9      	ldr	r1, [r3, #28]
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	021a      	lsls	r2, r3, #8
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	61da      	str	r2, [r3, #28]
      break;
 8003282:	e043      	b.n	800330c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68b9      	ldr	r1, [r7, #8]
 800328a:	4618      	mov	r0, r3
 800328c:	f000 fc0a 	bl	8003aa4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0208 	orr.w	r2, r2, #8
 800329e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0204 	bic.w	r2, r2, #4
 80032ae:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	691a      	ldr	r2, [r3, #16]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80032c2:	e023      	b.n	800330c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68b9      	ldr	r1, [r7, #8]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 fc4e 	bl	8003b6c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032de:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032ee:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	021a      	lsls	r2, r3, #8
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	430a      	orrs	r2, r1
 8003302:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003304:	e002      	b.n	800330c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	75fb      	strb	r3, [r7, #23]
      break;
 800330a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003314:	7dfb      	ldrb	r3, [r7, #23]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop

08003320 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800332a:	2300      	movs	r3, #0
 800332c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003334:	2b01      	cmp	r3, #1
 8003336:	d101      	bne.n	800333c <HAL_TIM_ConfigClockSource+0x1c>
 8003338:	2302      	movs	r3, #2
 800333a:	e0de      	b.n	80034fa <HAL_TIM_ConfigClockSource+0x1da>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2202      	movs	r2, #2
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800335a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800335e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003366:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a63      	ldr	r2, [pc, #396]	@ (8003504 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003376:	4293      	cmp	r3, r2
 8003378:	f000 80a9 	beq.w	80034ce <HAL_TIM_ConfigClockSource+0x1ae>
 800337c:	4a61      	ldr	r2, [pc, #388]	@ (8003504 <HAL_TIM_ConfigClockSource+0x1e4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	f200 80ae 	bhi.w	80034e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003384:	4a60      	ldr	r2, [pc, #384]	@ (8003508 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003386:	4293      	cmp	r3, r2
 8003388:	f000 80a1 	beq.w	80034ce <HAL_TIM_ConfigClockSource+0x1ae>
 800338c:	4a5e      	ldr	r2, [pc, #376]	@ (8003508 <HAL_TIM_ConfigClockSource+0x1e8>)
 800338e:	4293      	cmp	r3, r2
 8003390:	f200 80a6 	bhi.w	80034e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003394:	4a5d      	ldr	r2, [pc, #372]	@ (800350c <HAL_TIM_ConfigClockSource+0x1ec>)
 8003396:	4293      	cmp	r3, r2
 8003398:	f000 8099 	beq.w	80034ce <HAL_TIM_ConfigClockSource+0x1ae>
 800339c:	4a5b      	ldr	r2, [pc, #364]	@ (800350c <HAL_TIM_ConfigClockSource+0x1ec>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	f200 809e 	bhi.w	80034e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80033a4:	4a5a      	ldr	r2, [pc, #360]	@ (8003510 <HAL_TIM_ConfigClockSource+0x1f0>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	f000 8091 	beq.w	80034ce <HAL_TIM_ConfigClockSource+0x1ae>
 80033ac:	4a58      	ldr	r2, [pc, #352]	@ (8003510 <HAL_TIM_ConfigClockSource+0x1f0>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	f200 8096 	bhi.w	80034e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80033b4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80033b8:	f000 8089 	beq.w	80034ce <HAL_TIM_ConfigClockSource+0x1ae>
 80033bc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80033c0:	f200 808e 	bhi.w	80034e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80033c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033c8:	d03e      	beq.n	8003448 <HAL_TIM_ConfigClockSource+0x128>
 80033ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033ce:	f200 8087 	bhi.w	80034e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80033d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033d6:	f000 8086 	beq.w	80034e6 <HAL_TIM_ConfigClockSource+0x1c6>
 80033da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033de:	d87f      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80033e0:	2b70      	cmp	r3, #112	@ 0x70
 80033e2:	d01a      	beq.n	800341a <HAL_TIM_ConfigClockSource+0xfa>
 80033e4:	2b70      	cmp	r3, #112	@ 0x70
 80033e6:	d87b      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80033e8:	2b60      	cmp	r3, #96	@ 0x60
 80033ea:	d050      	beq.n	800348e <HAL_TIM_ConfigClockSource+0x16e>
 80033ec:	2b60      	cmp	r3, #96	@ 0x60
 80033ee:	d877      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80033f0:	2b50      	cmp	r3, #80	@ 0x50
 80033f2:	d03c      	beq.n	800346e <HAL_TIM_ConfigClockSource+0x14e>
 80033f4:	2b50      	cmp	r3, #80	@ 0x50
 80033f6:	d873      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80033f8:	2b40      	cmp	r3, #64	@ 0x40
 80033fa:	d058      	beq.n	80034ae <HAL_TIM_ConfigClockSource+0x18e>
 80033fc:	2b40      	cmp	r3, #64	@ 0x40
 80033fe:	d86f      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003400:	2b30      	cmp	r3, #48	@ 0x30
 8003402:	d064      	beq.n	80034ce <HAL_TIM_ConfigClockSource+0x1ae>
 8003404:	2b30      	cmp	r3, #48	@ 0x30
 8003406:	d86b      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003408:	2b20      	cmp	r3, #32
 800340a:	d060      	beq.n	80034ce <HAL_TIM_ConfigClockSource+0x1ae>
 800340c:	2b20      	cmp	r3, #32
 800340e:	d867      	bhi.n	80034e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003410:	2b00      	cmp	r3, #0
 8003412:	d05c      	beq.n	80034ce <HAL_TIM_ConfigClockSource+0x1ae>
 8003414:	2b10      	cmp	r3, #16
 8003416:	d05a      	beq.n	80034ce <HAL_TIM_ConfigClockSource+0x1ae>
 8003418:	e062      	b.n	80034e0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800342a:	f000 fc81 	bl	8003d30 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800343c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	609a      	str	r2, [r3, #8]
      break;
 8003446:	e04f      	b.n	80034e8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003458:	f000 fc6a 	bl	8003d30 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800346a:	609a      	str	r2, [r3, #8]
      break;
 800346c:	e03c      	b.n	80034e8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800347a:	461a      	mov	r2, r3
 800347c:	f000 fbdc 	bl	8003c38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2150      	movs	r1, #80	@ 0x50
 8003486:	4618      	mov	r0, r3
 8003488:	f000 fc35 	bl	8003cf6 <TIM_ITRx_SetConfig>
      break;
 800348c:	e02c      	b.n	80034e8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800349a:	461a      	mov	r2, r3
 800349c:	f000 fbfb 	bl	8003c96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2160      	movs	r1, #96	@ 0x60
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 fc25 	bl	8003cf6 <TIM_ITRx_SetConfig>
      break;
 80034ac:	e01c      	b.n	80034e8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ba:	461a      	mov	r2, r3
 80034bc:	f000 fbbc 	bl	8003c38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2140      	movs	r1, #64	@ 0x40
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 fc15 	bl	8003cf6 <TIM_ITRx_SetConfig>
      break;
 80034cc:	e00c      	b.n	80034e8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4619      	mov	r1, r3
 80034d8:	4610      	mov	r0, r2
 80034da:	f000 fc0c 	bl	8003cf6 <TIM_ITRx_SetConfig>
      break;
 80034de:	e003      	b.n	80034e8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	73fb      	strb	r3, [r7, #15]
      break;
 80034e4:	e000      	b.n	80034e8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80034e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	00100070 	.word	0x00100070
 8003508:	00100040 	.word	0x00100040
 800350c:	00100030 	.word	0x00100030
 8003510:	00100020 	.word	0x00100020

08003514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a42      	ldr	r2, [pc, #264]	@ (8003630 <TIM_Base_SetConfig+0x11c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d00f      	beq.n	800354c <TIM_Base_SetConfig+0x38>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003532:	d00b      	beq.n	800354c <TIM_Base_SetConfig+0x38>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a3f      	ldr	r2, [pc, #252]	@ (8003634 <TIM_Base_SetConfig+0x120>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d007      	beq.n	800354c <TIM_Base_SetConfig+0x38>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a3e      	ldr	r2, [pc, #248]	@ (8003638 <TIM_Base_SetConfig+0x124>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d003      	beq.n	800354c <TIM_Base_SetConfig+0x38>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a3d      	ldr	r2, [pc, #244]	@ (800363c <TIM_Base_SetConfig+0x128>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d108      	bne.n	800355e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	4313      	orrs	r3, r2
 800355c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a33      	ldr	r2, [pc, #204]	@ (8003630 <TIM_Base_SetConfig+0x11c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d01b      	beq.n	800359e <TIM_Base_SetConfig+0x8a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800356c:	d017      	beq.n	800359e <TIM_Base_SetConfig+0x8a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a30      	ldr	r2, [pc, #192]	@ (8003634 <TIM_Base_SetConfig+0x120>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d013      	beq.n	800359e <TIM_Base_SetConfig+0x8a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a2f      	ldr	r2, [pc, #188]	@ (8003638 <TIM_Base_SetConfig+0x124>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d00f      	beq.n	800359e <TIM_Base_SetConfig+0x8a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a2e      	ldr	r2, [pc, #184]	@ (800363c <TIM_Base_SetConfig+0x128>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d00b      	beq.n	800359e <TIM_Base_SetConfig+0x8a>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a2d      	ldr	r2, [pc, #180]	@ (8003640 <TIM_Base_SetConfig+0x12c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d007      	beq.n	800359e <TIM_Base_SetConfig+0x8a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a2c      	ldr	r2, [pc, #176]	@ (8003644 <TIM_Base_SetConfig+0x130>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d003      	beq.n	800359e <TIM_Base_SetConfig+0x8a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a2b      	ldr	r2, [pc, #172]	@ (8003648 <TIM_Base_SetConfig+0x134>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d108      	bne.n	80035b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a16      	ldr	r2, [pc, #88]	@ (8003630 <TIM_Base_SetConfig+0x11c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d00f      	beq.n	80035fc <TIM_Base_SetConfig+0xe8>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a17      	ldr	r2, [pc, #92]	@ (800363c <TIM_Base_SetConfig+0x128>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d00b      	beq.n	80035fc <TIM_Base_SetConfig+0xe8>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a16      	ldr	r2, [pc, #88]	@ (8003640 <TIM_Base_SetConfig+0x12c>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d007      	beq.n	80035fc <TIM_Base_SetConfig+0xe8>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a15      	ldr	r2, [pc, #84]	@ (8003644 <TIM_Base_SetConfig+0x130>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d003      	beq.n	80035fc <TIM_Base_SetConfig+0xe8>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a14      	ldr	r2, [pc, #80]	@ (8003648 <TIM_Base_SetConfig+0x134>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d103      	bne.n	8003604 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b01      	cmp	r3, #1
 8003614:	d105      	bne.n	8003622 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	f023 0201 	bic.w	r2, r3, #1
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	611a      	str	r2, [r3, #16]
  }
}
 8003622:	bf00      	nop
 8003624:	3714      	adds	r7, #20
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	40012c00 	.word	0x40012c00
 8003634:	40000400 	.word	0x40000400
 8003638:	40000800 	.word	0x40000800
 800363c:	40013400 	.word	0x40013400
 8003640:	40014000 	.word	0x40014000
 8003644:	40014400 	.word	0x40014400
 8003648:	40014800 	.word	0x40014800

0800364c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800364c:	b480      	push	{r7}
 800364e:	b087      	sub	sp, #28
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	f023 0201 	bic.w	r2, r3, #1
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800367a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800367e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f023 0303 	bic.w	r3, r3, #3
 8003686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	4313      	orrs	r3, r2
 8003690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f023 0302 	bic.w	r3, r3, #2
 8003698:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a2c      	ldr	r2, [pc, #176]	@ (8003758 <TIM_OC1_SetConfig+0x10c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d00f      	beq.n	80036cc <TIM_OC1_SetConfig+0x80>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a2b      	ldr	r2, [pc, #172]	@ (800375c <TIM_OC1_SetConfig+0x110>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d00b      	beq.n	80036cc <TIM_OC1_SetConfig+0x80>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a2a      	ldr	r2, [pc, #168]	@ (8003760 <TIM_OC1_SetConfig+0x114>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d007      	beq.n	80036cc <TIM_OC1_SetConfig+0x80>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a29      	ldr	r2, [pc, #164]	@ (8003764 <TIM_OC1_SetConfig+0x118>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d003      	beq.n	80036cc <TIM_OC1_SetConfig+0x80>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a28      	ldr	r2, [pc, #160]	@ (8003768 <TIM_OC1_SetConfig+0x11c>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d10c      	bne.n	80036e6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f023 0308 	bic.w	r3, r3, #8
 80036d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	4313      	orrs	r3, r2
 80036dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f023 0304 	bic.w	r3, r3, #4
 80036e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003758 <TIM_OC1_SetConfig+0x10c>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d00f      	beq.n	800370e <TIM_OC1_SetConfig+0xc2>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a1a      	ldr	r2, [pc, #104]	@ (800375c <TIM_OC1_SetConfig+0x110>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d00b      	beq.n	800370e <TIM_OC1_SetConfig+0xc2>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a19      	ldr	r2, [pc, #100]	@ (8003760 <TIM_OC1_SetConfig+0x114>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d007      	beq.n	800370e <TIM_OC1_SetConfig+0xc2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a18      	ldr	r2, [pc, #96]	@ (8003764 <TIM_OC1_SetConfig+0x118>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d003      	beq.n	800370e <TIM_OC1_SetConfig+0xc2>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a17      	ldr	r2, [pc, #92]	@ (8003768 <TIM_OC1_SetConfig+0x11c>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d111      	bne.n	8003732 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800371c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	4313      	orrs	r3, r2
 8003726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	4313      	orrs	r3, r2
 8003730:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	621a      	str	r2, [r3, #32]
}
 800374c:	bf00      	nop
 800374e:	371c      	adds	r7, #28
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	40012c00 	.word	0x40012c00
 800375c:	40013400 	.word	0x40013400
 8003760:	40014000 	.word	0x40014000
 8003764:	40014400 	.word	0x40014400
 8003768:	40014800 	.word	0x40014800

0800376c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800376c:	b480      	push	{r7}
 800376e:	b087      	sub	sp, #28
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	f023 0210 	bic.w	r2, r3, #16
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800379a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800379e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	021b      	lsls	r3, r3, #8
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	f023 0320 	bic.w	r3, r3, #32
 80037ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	011b      	lsls	r3, r3, #4
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a28      	ldr	r2, [pc, #160]	@ (800386c <TIM_OC2_SetConfig+0x100>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d003      	beq.n	80037d8 <TIM_OC2_SetConfig+0x6c>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a27      	ldr	r2, [pc, #156]	@ (8003870 <TIM_OC2_SetConfig+0x104>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d10d      	bne.n	80037f4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	011b      	lsls	r3, r3, #4
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a1d      	ldr	r2, [pc, #116]	@ (800386c <TIM_OC2_SetConfig+0x100>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d00f      	beq.n	800381c <TIM_OC2_SetConfig+0xb0>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a1c      	ldr	r2, [pc, #112]	@ (8003870 <TIM_OC2_SetConfig+0x104>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d00b      	beq.n	800381c <TIM_OC2_SetConfig+0xb0>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a1b      	ldr	r2, [pc, #108]	@ (8003874 <TIM_OC2_SetConfig+0x108>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d007      	beq.n	800381c <TIM_OC2_SetConfig+0xb0>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a1a      	ldr	r2, [pc, #104]	@ (8003878 <TIM_OC2_SetConfig+0x10c>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d003      	beq.n	800381c <TIM_OC2_SetConfig+0xb0>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a19      	ldr	r2, [pc, #100]	@ (800387c <TIM_OC2_SetConfig+0x110>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d113      	bne.n	8003844 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003822:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800382a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4313      	orrs	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	4313      	orrs	r3, r2
 8003842:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	621a      	str	r2, [r3, #32]
}
 800385e:	bf00      	nop
 8003860:	371c      	adds	r7, #28
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	40012c00 	.word	0x40012c00
 8003870:	40013400 	.word	0x40013400
 8003874:	40014000 	.word	0x40014000
 8003878:	40014400 	.word	0x40014400
 800387c:	40014800 	.word	0x40014800

08003880 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003880:	b480      	push	{r7}
 8003882:	b087      	sub	sp, #28
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 0303 	bic.w	r3, r3, #3
 80038ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80038cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	021b      	lsls	r3, r3, #8
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a27      	ldr	r2, [pc, #156]	@ (800397c <TIM_OC3_SetConfig+0xfc>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d003      	beq.n	80038ea <TIM_OC3_SetConfig+0x6a>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a26      	ldr	r2, [pc, #152]	@ (8003980 <TIM_OC3_SetConfig+0x100>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d10d      	bne.n	8003906 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80038f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	021b      	lsls	r3, r3, #8
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003904:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a1c      	ldr	r2, [pc, #112]	@ (800397c <TIM_OC3_SetConfig+0xfc>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d00f      	beq.n	800392e <TIM_OC3_SetConfig+0xae>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a1b      	ldr	r2, [pc, #108]	@ (8003980 <TIM_OC3_SetConfig+0x100>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d00b      	beq.n	800392e <TIM_OC3_SetConfig+0xae>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a1a      	ldr	r2, [pc, #104]	@ (8003984 <TIM_OC3_SetConfig+0x104>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d007      	beq.n	800392e <TIM_OC3_SetConfig+0xae>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a19      	ldr	r2, [pc, #100]	@ (8003988 <TIM_OC3_SetConfig+0x108>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d003      	beq.n	800392e <TIM_OC3_SetConfig+0xae>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a18      	ldr	r2, [pc, #96]	@ (800398c <TIM_OC3_SetConfig+0x10c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d113      	bne.n	8003956 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003934:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800393c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	4313      	orrs	r3, r2
 8003948:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	621a      	str	r2, [r3, #32]
}
 8003970:	bf00      	nop
 8003972:	371c      	adds	r7, #28
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	40012c00 	.word	0x40012c00
 8003980:	40013400 	.word	0x40013400
 8003984:	40014000 	.word	0x40014000
 8003988:	40014400 	.word	0x40014400
 800398c:	40014800 	.word	0x40014800

08003990 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003990:	b480      	push	{r7}
 8003992:	b087      	sub	sp, #28
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	021b      	lsls	r3, r3, #8
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	031b      	lsls	r3, r3, #12
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a28      	ldr	r2, [pc, #160]	@ (8003a90 <TIM_OC4_SetConfig+0x100>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d003      	beq.n	80039fc <TIM_OC4_SetConfig+0x6c>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a27      	ldr	r2, [pc, #156]	@ (8003a94 <TIM_OC4_SetConfig+0x104>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d10d      	bne.n	8003a18 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003a02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	031b      	lsls	r3, r3, #12
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a16:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a1d      	ldr	r2, [pc, #116]	@ (8003a90 <TIM_OC4_SetConfig+0x100>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d00f      	beq.n	8003a40 <TIM_OC4_SetConfig+0xb0>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a1c      	ldr	r2, [pc, #112]	@ (8003a94 <TIM_OC4_SetConfig+0x104>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d00b      	beq.n	8003a40 <TIM_OC4_SetConfig+0xb0>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a1b      	ldr	r2, [pc, #108]	@ (8003a98 <TIM_OC4_SetConfig+0x108>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d007      	beq.n	8003a40 <TIM_OC4_SetConfig+0xb0>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a1a      	ldr	r2, [pc, #104]	@ (8003a9c <TIM_OC4_SetConfig+0x10c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d003      	beq.n	8003a40 <TIM_OC4_SetConfig+0xb0>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a19      	ldr	r2, [pc, #100]	@ (8003aa0 <TIM_OC4_SetConfig+0x110>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d113      	bne.n	8003a68 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a46:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003a4e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	019b      	lsls	r3, r3, #6
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	019b      	lsls	r3, r3, #6
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	621a      	str	r2, [r3, #32]
}
 8003a82:	bf00      	nop
 8003a84:	371c      	adds	r7, #28
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	40012c00 	.word	0x40012c00
 8003a94:	40013400 	.word	0x40013400
 8003a98:	40014000 	.word	0x40014000
 8003a9c:	40014400 	.word	0x40014400
 8003aa0:	40014800 	.word	0x40014800

08003aa4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ad2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003ae8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	041b      	lsls	r3, r3, #16
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a17      	ldr	r2, [pc, #92]	@ (8003b58 <TIM_OC5_SetConfig+0xb4>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d00f      	beq.n	8003b1e <TIM_OC5_SetConfig+0x7a>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a16      	ldr	r2, [pc, #88]	@ (8003b5c <TIM_OC5_SetConfig+0xb8>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d00b      	beq.n	8003b1e <TIM_OC5_SetConfig+0x7a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a15      	ldr	r2, [pc, #84]	@ (8003b60 <TIM_OC5_SetConfig+0xbc>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d007      	beq.n	8003b1e <TIM_OC5_SetConfig+0x7a>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a14      	ldr	r2, [pc, #80]	@ (8003b64 <TIM_OC5_SetConfig+0xc0>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d003      	beq.n	8003b1e <TIM_OC5_SetConfig+0x7a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a13      	ldr	r2, [pc, #76]	@ (8003b68 <TIM_OC5_SetConfig+0xc4>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d109      	bne.n	8003b32 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b24:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	021b      	lsls	r3, r3, #8
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	621a      	str	r2, [r3, #32]
}
 8003b4c:	bf00      	nop
 8003b4e:	371c      	adds	r7, #28
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	40012c00 	.word	0x40012c00
 8003b5c:	40013400 	.word	0x40013400
 8003b60:	40014000 	.word	0x40014000
 8003b64:	40014400 	.word	0x40014400
 8003b68:	40014800 	.word	0x40014800

08003b6c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	021b      	lsls	r3, r3, #8
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003bb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	051b      	lsls	r3, r3, #20
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a18      	ldr	r2, [pc, #96]	@ (8003c24 <TIM_OC6_SetConfig+0xb8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d00f      	beq.n	8003be8 <TIM_OC6_SetConfig+0x7c>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a17      	ldr	r2, [pc, #92]	@ (8003c28 <TIM_OC6_SetConfig+0xbc>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d00b      	beq.n	8003be8 <TIM_OC6_SetConfig+0x7c>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a16      	ldr	r2, [pc, #88]	@ (8003c2c <TIM_OC6_SetConfig+0xc0>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d007      	beq.n	8003be8 <TIM_OC6_SetConfig+0x7c>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a15      	ldr	r2, [pc, #84]	@ (8003c30 <TIM_OC6_SetConfig+0xc4>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d003      	beq.n	8003be8 <TIM_OC6_SetConfig+0x7c>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a14      	ldr	r2, [pc, #80]	@ (8003c34 <TIM_OC6_SetConfig+0xc8>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d109      	bne.n	8003bfc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	029b      	lsls	r3, r3, #10
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	621a      	str	r2, [r3, #32]
}
 8003c16:	bf00      	nop
 8003c18:	371c      	adds	r7, #28
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	40012c00 	.word	0x40012c00
 8003c28:	40013400 	.word	0x40013400
 8003c2c:	40014000 	.word	0x40014000
 8003c30:	40014400 	.word	0x40014400
 8003c34:	40014800 	.word	0x40014800

08003c38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	f023 0201 	bic.w	r2, r3, #1
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f023 030a 	bic.w	r3, r3, #10
 8003c74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	621a      	str	r2, [r3, #32]
}
 8003c8a:	bf00      	nop
 8003c8c:	371c      	adds	r7, #28
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b087      	sub	sp, #28
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	60f8      	str	r0, [r7, #12]
 8003c9e:	60b9      	str	r1, [r7, #8]
 8003ca0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	f023 0210 	bic.w	r2, r3, #16
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003cc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	031b      	lsls	r3, r3, #12
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003cd2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	011b      	lsls	r3, r3, #4
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	621a      	str	r2, [r3, #32]
}
 8003cea:	bf00      	nop
 8003cec:	371c      	adds	r7, #28
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b085      	sub	sp, #20
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
 8003cfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003d0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f043 0307 	orr.w	r3, r3, #7
 8003d1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	609a      	str	r2, [r3, #8]
}
 8003d24:	bf00      	nop
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b087      	sub	sp, #28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	021a      	lsls	r2, r3, #8
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	431a      	orrs	r2, r3
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	609a      	str	r2, [r3, #8]
}
 8003d64:	bf00      	nop
 8003d66:	371c      	adds	r7, #28
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f003 031f 	and.w	r3, r3, #31
 8003d82:	2201      	movs	r2, #1
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6a1a      	ldr	r2, [r3, #32]
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	43db      	mvns	r3, r3
 8003d92:	401a      	ands	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6a1a      	ldr	r2, [r3, #32]
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	f003 031f 	and.w	r3, r3, #31
 8003da2:	6879      	ldr	r1, [r7, #4]
 8003da4:	fa01 f303 	lsl.w	r3, r1, r3
 8003da8:	431a      	orrs	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	621a      	str	r2, [r3, #32]
}
 8003dae:	bf00      	nop
 8003db0:	371c      	adds	r7, #28
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
	...

08003dbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d101      	bne.n	8003dd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	e065      	b.n	8003ea0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a2c      	ldr	r2, [pc, #176]	@ (8003eac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d004      	beq.n	8003e08 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a2b      	ldr	r2, [pc, #172]	@ (8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d108      	bne.n	8003e1a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003e0e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003e20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e24:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a1b      	ldr	r2, [pc, #108]	@ (8003eac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d018      	beq.n	8003e74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e4a:	d013      	beq.n	8003e74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a18      	ldr	r2, [pc, #96]	@ (8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d00e      	beq.n	8003e74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a17      	ldr	r2, [pc, #92]	@ (8003eb8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d009      	beq.n	8003e74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a12      	ldr	r2, [pc, #72]	@ (8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d004      	beq.n	8003e74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a13      	ldr	r2, [pc, #76]	@ (8003ebc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d10c      	bne.n	8003e8e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3714      	adds	r7, #20
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	40012c00 	.word	0x40012c00
 8003eb0:	40013400 	.word	0x40013400
 8003eb4:	40000400 	.word	0x40000400
 8003eb8:	40000800 	.word	0x40000800
 8003ebc:	40014000 	.word	0x40014000

08003ec0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e042      	b.n	8003f58 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d106      	bne.n	8003eea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7fc ff77 	bl	8000dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2224      	movs	r2, #36	@ 0x24
 8003eee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0201 	bic.w	r2, r2, #1
 8003f00:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d002      	beq.n	8003f10 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 ff2c 	bl	8004d68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 fc5d 	bl	80047d0 <UART_SetConfig>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d101      	bne.n	8003f20 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e01b      	b.n	8003f58 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689a      	ldr	r2, [r3, #8]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 0201 	orr.w	r2, r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 ffab 	bl	8004eac <UART_CheckIdleState>
 8003f56:	4603      	mov	r3, r0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3708      	adds	r7, #8
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b08a      	sub	sp, #40	@ 0x28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f74:	2b20      	cmp	r3, #32
 8003f76:	d167      	bne.n	8004048 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d002      	beq.n	8003f84 <HAL_UART_Transmit_DMA+0x24>
 8003f7e:	88fb      	ldrh	r3, [r7, #6]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e060      	b.n	800404a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	88fa      	ldrh	r2, [r7, #6]
 8003f92:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	88fa      	ldrh	r2, [r7, #6]
 8003f9a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2221      	movs	r2, #33	@ 0x21
 8003faa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d028      	beq.n	8004008 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fba:	4a26      	ldr	r2, [pc, #152]	@ (8004054 <HAL_UART_Transmit_DMA+0xf4>)
 8003fbc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fc2:	4a25      	ldr	r2, [pc, #148]	@ (8004058 <HAL_UART_Transmit_DMA+0xf8>)
 8003fc4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fca:	4a24      	ldr	r2, [pc, #144]	@ (800405c <HAL_UART_Transmit_DMA+0xfc>)
 8003fcc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fde:	4619      	mov	r1, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	3328      	adds	r3, #40	@ 0x28
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	88fb      	ldrh	r3, [r7, #6]
 8003fea:	f7fd fa73 	bl	80014d4 <HAL_DMA_Start_IT>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d009      	beq.n	8004008 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2210      	movs	r2, #16
 8003ff8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e020      	b.n	800404a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2240      	movs	r2, #64	@ 0x40
 800400e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	3308      	adds	r3, #8
 8004016:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	e853 3f00 	ldrex	r3, [r3]
 800401e:	613b      	str	r3, [r7, #16]
   return(result);
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004026:	627b      	str	r3, [r7, #36]	@ 0x24
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	3308      	adds	r3, #8
 800402e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004030:	623a      	str	r2, [r7, #32]
 8004032:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004034:	69f9      	ldr	r1, [r7, #28]
 8004036:	6a3a      	ldr	r2, [r7, #32]
 8004038:	e841 2300 	strex	r3, r2, [r1]
 800403c:	61bb      	str	r3, [r7, #24]
   return(result);
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1e5      	bne.n	8004010 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8004044:	2300      	movs	r3, #0
 8004046:	e000      	b.n	800404a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004048:	2302      	movs	r3, #2
  }
}
 800404a:	4618      	mov	r0, r3
 800404c:	3728      	adds	r7, #40	@ 0x28
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	08005377 	.word	0x08005377
 8004058:	08005411 	.word	0x08005411
 800405c:	08005597 	.word	0x08005597

08004060 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b08a      	sub	sp, #40	@ 0x28
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	4613      	mov	r3, r2
 800406c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004074:	2b20      	cmp	r3, #32
 8004076:	d137      	bne.n	80040e8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d002      	beq.n	8004084 <HAL_UART_Receive_DMA+0x24>
 800407e:	88fb      	ldrh	r3, [r7, #6]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e030      	b.n	80040ea <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a18      	ldr	r2, [pc, #96]	@ (80040f4 <HAL_UART_Receive_DMA+0x94>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d01f      	beq.n	80040d8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d018      	beq.n	80040d8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	e853 3f00 	ldrex	r3, [r3]
 80040b2:	613b      	str	r3, [r7, #16]
   return(result);
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80040ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	461a      	mov	r2, r3
 80040c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c4:	623b      	str	r3, [r7, #32]
 80040c6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c8:	69f9      	ldr	r1, [r7, #28]
 80040ca:	6a3a      	ldr	r2, [r7, #32]
 80040cc:	e841 2300 	strex	r3, r2, [r1]
 80040d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1e6      	bne.n	80040a6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80040d8:	88fb      	ldrh	r3, [r7, #6]
 80040da:	461a      	mov	r2, r3
 80040dc:	68b9      	ldr	r1, [r7, #8]
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f000 fffc 	bl	80050dc <UART_Start_Receive_DMA>
 80040e4:	4603      	mov	r3, r0
 80040e6:	e000      	b.n	80040ea <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80040e8:	2302      	movs	r3, #2
  }
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3728      	adds	r7, #40	@ 0x28
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	40008000 	.word	0x40008000

080040f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b0ba      	sub	sp, #232	@ 0xe8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800411e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004122:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004126:	4013      	ands	r3, r2
 8004128:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800412c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004130:	2b00      	cmp	r3, #0
 8004132:	d11b      	bne.n	800416c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004138:	f003 0320 	and.w	r3, r3, #32
 800413c:	2b00      	cmp	r3, #0
 800413e:	d015      	beq.n	800416c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004144:	f003 0320 	and.w	r3, r3, #32
 8004148:	2b00      	cmp	r3, #0
 800414a:	d105      	bne.n	8004158 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800414c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004150:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d009      	beq.n	800416c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 8300 	beq.w	8004762 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	4798      	blx	r3
      }
      return;
 800416a:	e2fa      	b.n	8004762 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800416c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 8123 	beq.w	80043bc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004176:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800417a:	4b8d      	ldr	r3, [pc, #564]	@ (80043b0 <HAL_UART_IRQHandler+0x2b8>)
 800417c:	4013      	ands	r3, r2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d106      	bne.n	8004190 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004182:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004186:	4b8b      	ldr	r3, [pc, #556]	@ (80043b4 <HAL_UART_IRQHandler+0x2bc>)
 8004188:	4013      	ands	r3, r2
 800418a:	2b00      	cmp	r3, #0
 800418c:	f000 8116 	beq.w	80043bc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	2b00      	cmp	r3, #0
 800419a:	d011      	beq.n	80041c0 <HAL_UART_IRQHandler+0xc8>
 800419c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00b      	beq.n	80041c0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2201      	movs	r2, #1
 80041ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041b6:	f043 0201 	orr.w	r2, r3, #1
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d011      	beq.n	80041f0 <HAL_UART_IRQHandler+0xf8>
 80041cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00b      	beq.n	80041f0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2202      	movs	r2, #2
 80041de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041e6:	f043 0204 	orr.w	r2, r3, #4
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d011      	beq.n	8004220 <HAL_UART_IRQHandler+0x128>
 80041fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00b      	beq.n	8004220 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2204      	movs	r2, #4
 800420e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004216:	f043 0202 	orr.w	r2, r3, #2
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004224:	f003 0308 	and.w	r3, r3, #8
 8004228:	2b00      	cmp	r3, #0
 800422a:	d017      	beq.n	800425c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800422c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004230:	f003 0320 	and.w	r3, r3, #32
 8004234:	2b00      	cmp	r3, #0
 8004236:	d105      	bne.n	8004244 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004238:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800423c:	4b5c      	ldr	r3, [pc, #368]	@ (80043b0 <HAL_UART_IRQHandler+0x2b8>)
 800423e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00b      	beq.n	800425c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2208      	movs	r2, #8
 800424a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004252:	f043 0208 	orr.w	r2, r3, #8
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800425c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004260:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004264:	2b00      	cmp	r3, #0
 8004266:	d012      	beq.n	800428e <HAL_UART_IRQHandler+0x196>
 8004268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800426c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00c      	beq.n	800428e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800427c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004284:	f043 0220 	orr.w	r2, r3, #32
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004294:	2b00      	cmp	r3, #0
 8004296:	f000 8266 	beq.w	8004766 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800429a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800429e:	f003 0320 	and.w	r3, r3, #32
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d013      	beq.n	80042ce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80042a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042aa:	f003 0320 	and.w	r3, r3, #32
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d105      	bne.n	80042be <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80042b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d007      	beq.n	80042ce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042e2:	2b40      	cmp	r3, #64	@ 0x40
 80042e4:	d005      	beq.n	80042f2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80042e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d054      	beq.n	800439c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 ffd9 	bl	80052aa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004302:	2b40      	cmp	r3, #64	@ 0x40
 8004304:	d146      	bne.n	8004394 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	3308      	adds	r3, #8
 800430c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004310:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004314:	e853 3f00 	ldrex	r3, [r3]
 8004318:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800431c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004320:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004324:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	3308      	adds	r3, #8
 800432e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004332:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004336:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800433e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004342:	e841 2300 	strex	r3, r2, [r1]
 8004346:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800434a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1d9      	bne.n	8004306 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004358:	2b00      	cmp	r3, #0
 800435a:	d017      	beq.n	800438c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004362:	4a15      	ldr	r2, [pc, #84]	@ (80043b8 <HAL_UART_IRQHandler+0x2c0>)
 8004364:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800436c:	4618      	mov	r0, r3
 800436e:	f7fd f985 	bl	800167c <HAL_DMA_Abort_IT>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d019      	beq.n	80043ac <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800437e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004386:	4610      	mov	r0, r2
 8004388:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800438a:	e00f      	b.n	80043ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 fa09 	bl	80047a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004392:	e00b      	b.n	80043ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 fa05 	bl	80047a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800439a:	e007      	b.n	80043ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 fa01 	bl	80047a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80043aa:	e1dc      	b.n	8004766 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043ac:	bf00      	nop
    return;
 80043ae:	e1da      	b.n	8004766 <HAL_UART_IRQHandler+0x66e>
 80043b0:	10000001 	.word	0x10000001
 80043b4:	04000120 	.word	0x04000120
 80043b8:	08005617 	.word	0x08005617

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	f040 8170 	bne.w	80046a6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80043c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043ca:	f003 0310 	and.w	r3, r3, #16
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 8169 	beq.w	80046a6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80043d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043d8:	f003 0310 	and.w	r3, r3, #16
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 8162 	beq.w	80046a6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2210      	movs	r2, #16
 80043e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f4:	2b40      	cmp	r3, #64	@ 0x40
 80043f6:	f040 80d8 	bne.w	80045aa <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004408:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800440c:	2b00      	cmp	r3, #0
 800440e:	f000 80af 	beq.w	8004570 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004418:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800441c:	429a      	cmp	r2, r3
 800441e:	f080 80a7 	bcs.w	8004570 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004428:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0320 	and.w	r3, r3, #32
 800443a:	2b00      	cmp	r3, #0
 800443c:	f040 8087 	bne.w	800454e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004448:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800444c:	e853 3f00 	ldrex	r3, [r3]
 8004450:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004454:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004458:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800445c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	461a      	mov	r2, r3
 8004466:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800446a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800446e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004472:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004476:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800447a:	e841 2300 	strex	r3, r2, [r1]
 800447e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004482:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1da      	bne.n	8004440 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	3308      	adds	r3, #8
 8004490:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004492:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004494:	e853 3f00 	ldrex	r3, [r3]
 8004498:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800449a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800449c:	f023 0301 	bic.w	r3, r3, #1
 80044a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	3308      	adds	r3, #8
 80044aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80044ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80044b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80044b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80044ba:	e841 2300 	strex	r3, r2, [r1]
 80044be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80044c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1e1      	bne.n	800448a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	3308      	adds	r3, #8
 80044cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044d0:	e853 3f00 	ldrex	r3, [r3]
 80044d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80044d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	3308      	adds	r3, #8
 80044e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80044ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80044ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80044f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80044f2:	e841 2300 	strex	r3, r2, [r1]
 80044f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80044f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1e3      	bne.n	80044c6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2220      	movs	r2, #32
 8004502:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004512:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004514:	e853 3f00 	ldrex	r3, [r3]
 8004518:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800451a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800451c:	f023 0310 	bic.w	r3, r3, #16
 8004520:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	461a      	mov	r2, r3
 800452a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800452e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004530:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004532:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004534:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004536:	e841 2300 	strex	r3, r2, [r1]
 800453a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800453c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1e4      	bne.n	800450c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004548:	4618      	mov	r0, r3
 800454a:	f7fd f83e 	bl	80015ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2202      	movs	r2, #2
 8004552:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004560:	b29b      	uxth	r3, r3
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	b29b      	uxth	r3, r3
 8004566:	4619      	mov	r1, r3
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f925 	bl	80047b8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800456e:	e0fc      	b.n	800476a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004576:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800457a:	429a      	cmp	r2, r3
 800457c:	f040 80f5 	bne.w	800476a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0320 	and.w	r3, r3, #32
 800458e:	2b20      	cmp	r3, #32
 8004590:	f040 80eb 	bne.w	800476a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2202      	movs	r2, #2
 8004598:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80045a0:	4619      	mov	r1, r3
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f908 	bl	80047b8 <HAL_UARTEx_RxEventCallback>
      return;
 80045a8:	e0df      	b.n	800476a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f000 80d1 	beq.w	800476e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80045cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 80cc 	beq.w	800476e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045de:	e853 3f00 	ldrex	r3, [r3]
 80045e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	461a      	mov	r2, r3
 80045f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80045f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80045fa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004600:	e841 2300 	strex	r3, r2, [r1]
 8004604:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1e4      	bne.n	80045d6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	3308      	adds	r3, #8
 8004612:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004616:	e853 3f00 	ldrex	r3, [r3]
 800461a:	623b      	str	r3, [r7, #32]
   return(result);
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004622:	f023 0301 	bic.w	r3, r3, #1
 8004626:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	3308      	adds	r3, #8
 8004630:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004634:	633a      	str	r2, [r7, #48]	@ 0x30
 8004636:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004638:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800463a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800463c:	e841 2300 	strex	r3, r2, [r1]
 8004640:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1e1      	bne.n	800460c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2220      	movs	r2, #32
 800464c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	e853 3f00 	ldrex	r3, [r3]
 8004668:	60fb      	str	r3, [r7, #12]
   return(result);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f023 0310 	bic.w	r3, r3, #16
 8004670:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	461a      	mov	r2, r3
 800467a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800467e:	61fb      	str	r3, [r7, #28]
 8004680:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004682:	69b9      	ldr	r1, [r7, #24]
 8004684:	69fa      	ldr	r2, [r7, #28]
 8004686:	e841 2300 	strex	r3, r2, [r1]
 800468a:	617b      	str	r3, [r7, #20]
   return(result);
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1e4      	bne.n	800465c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2202      	movs	r2, #2
 8004696:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004698:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800469c:	4619      	mov	r1, r3
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f88a 	bl	80047b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80046a4:	e063      	b.n	800476e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80046a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00e      	beq.n	80046d0 <HAL_UART_IRQHandler+0x5d8>
 80046b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d008      	beq.n	80046d0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80046c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 ffe5 	bl	8005698 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046ce:	e051      	b.n	8004774 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80046d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d014      	beq.n	8004706 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80046dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d105      	bne.n	80046f4 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80046e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d008      	beq.n	8004706 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d03a      	beq.n	8004772 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	4798      	blx	r3
    }
    return;
 8004704:	e035      	b.n	8004772 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800470a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800470e:	2b00      	cmp	r3, #0
 8004710:	d009      	beq.n	8004726 <HAL_UART_IRQHandler+0x62e>
 8004712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 ff8f 	bl	8005642 <UART_EndTransmit_IT>
    return;
 8004724:	e026      	b.n	8004774 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800472a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d009      	beq.n	8004746 <HAL_UART_IRQHandler+0x64e>
 8004732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004736:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 ffbe 	bl	80056c0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004744:	e016      	b.n	8004774 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800474a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d010      	beq.n	8004774 <HAL_UART_IRQHandler+0x67c>
 8004752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004756:	2b00      	cmp	r3, #0
 8004758:	da0c      	bge.n	8004774 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 ffa6 	bl	80056ac <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004760:	e008      	b.n	8004774 <HAL_UART_IRQHandler+0x67c>
      return;
 8004762:	bf00      	nop
 8004764:	e006      	b.n	8004774 <HAL_UART_IRQHandler+0x67c>
    return;
 8004766:	bf00      	nop
 8004768:	e004      	b.n	8004774 <HAL_UART_IRQHandler+0x67c>
      return;
 800476a:	bf00      	nop
 800476c:	e002      	b.n	8004774 <HAL_UART_IRQHandler+0x67c>
      return;
 800476e:	bf00      	nop
 8004770:	e000      	b.n	8004774 <HAL_UART_IRQHandler+0x67c>
    return;
 8004772:	bf00      	nop
  }
}
 8004774:	37e8      	adds	r7, #232	@ 0xe8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop

0800477c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	460b      	mov	r3, r1
 80047c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047d4:	b08c      	sub	sp, #48	@ 0x30
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047da:	2300      	movs	r3, #0
 80047dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	431a      	orrs	r2, r3
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	431a      	orrs	r2, r3
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	69db      	ldr	r3, [r3, #28]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	4bab      	ldr	r3, [pc, #684]	@ (8004aac <UART_SetConfig+0x2dc>)
 8004800:	4013      	ands	r3, r2
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	6812      	ldr	r2, [r2, #0]
 8004806:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004808:	430b      	orrs	r3, r1
 800480a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4aa0      	ldr	r2, [pc, #640]	@ (8004ab0 <UART_SetConfig+0x2e0>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d004      	beq.n	800483c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004838:	4313      	orrs	r3, r2
 800483a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004846:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	6812      	ldr	r2, [r2, #0]
 800484e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004850:	430b      	orrs	r3, r1
 8004852:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485a:	f023 010f 	bic.w	r1, r3, #15
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a91      	ldr	r2, [pc, #580]	@ (8004ab4 <UART_SetConfig+0x2e4>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d125      	bne.n	80048c0 <UART_SetConfig+0xf0>
 8004874:	4b90      	ldr	r3, [pc, #576]	@ (8004ab8 <UART_SetConfig+0x2e8>)
 8004876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800487a:	f003 0303 	and.w	r3, r3, #3
 800487e:	2b03      	cmp	r3, #3
 8004880:	d81a      	bhi.n	80048b8 <UART_SetConfig+0xe8>
 8004882:	a201      	add	r2, pc, #4	@ (adr r2, 8004888 <UART_SetConfig+0xb8>)
 8004884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004888:	08004899 	.word	0x08004899
 800488c:	080048a9 	.word	0x080048a9
 8004890:	080048a1 	.word	0x080048a1
 8004894:	080048b1 	.word	0x080048b1
 8004898:	2301      	movs	r3, #1
 800489a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800489e:	e0d6      	b.n	8004a4e <UART_SetConfig+0x27e>
 80048a0:	2302      	movs	r3, #2
 80048a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048a6:	e0d2      	b.n	8004a4e <UART_SetConfig+0x27e>
 80048a8:	2304      	movs	r3, #4
 80048aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048ae:	e0ce      	b.n	8004a4e <UART_SetConfig+0x27e>
 80048b0:	2308      	movs	r3, #8
 80048b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048b6:	e0ca      	b.n	8004a4e <UART_SetConfig+0x27e>
 80048b8:	2310      	movs	r3, #16
 80048ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048be:	e0c6      	b.n	8004a4e <UART_SetConfig+0x27e>
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a7d      	ldr	r2, [pc, #500]	@ (8004abc <UART_SetConfig+0x2ec>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d138      	bne.n	800493c <UART_SetConfig+0x16c>
 80048ca:	4b7b      	ldr	r3, [pc, #492]	@ (8004ab8 <UART_SetConfig+0x2e8>)
 80048cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048d0:	f003 030c 	and.w	r3, r3, #12
 80048d4:	2b0c      	cmp	r3, #12
 80048d6:	d82d      	bhi.n	8004934 <UART_SetConfig+0x164>
 80048d8:	a201      	add	r2, pc, #4	@ (adr r2, 80048e0 <UART_SetConfig+0x110>)
 80048da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048de:	bf00      	nop
 80048e0:	08004915 	.word	0x08004915
 80048e4:	08004935 	.word	0x08004935
 80048e8:	08004935 	.word	0x08004935
 80048ec:	08004935 	.word	0x08004935
 80048f0:	08004925 	.word	0x08004925
 80048f4:	08004935 	.word	0x08004935
 80048f8:	08004935 	.word	0x08004935
 80048fc:	08004935 	.word	0x08004935
 8004900:	0800491d 	.word	0x0800491d
 8004904:	08004935 	.word	0x08004935
 8004908:	08004935 	.word	0x08004935
 800490c:	08004935 	.word	0x08004935
 8004910:	0800492d 	.word	0x0800492d
 8004914:	2300      	movs	r3, #0
 8004916:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800491a:	e098      	b.n	8004a4e <UART_SetConfig+0x27e>
 800491c:	2302      	movs	r3, #2
 800491e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004922:	e094      	b.n	8004a4e <UART_SetConfig+0x27e>
 8004924:	2304      	movs	r3, #4
 8004926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800492a:	e090      	b.n	8004a4e <UART_SetConfig+0x27e>
 800492c:	2308      	movs	r3, #8
 800492e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004932:	e08c      	b.n	8004a4e <UART_SetConfig+0x27e>
 8004934:	2310      	movs	r3, #16
 8004936:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800493a:	e088      	b.n	8004a4e <UART_SetConfig+0x27e>
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a5f      	ldr	r2, [pc, #380]	@ (8004ac0 <UART_SetConfig+0x2f0>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d125      	bne.n	8004992 <UART_SetConfig+0x1c2>
 8004946:	4b5c      	ldr	r3, [pc, #368]	@ (8004ab8 <UART_SetConfig+0x2e8>)
 8004948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800494c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004950:	2b30      	cmp	r3, #48	@ 0x30
 8004952:	d016      	beq.n	8004982 <UART_SetConfig+0x1b2>
 8004954:	2b30      	cmp	r3, #48	@ 0x30
 8004956:	d818      	bhi.n	800498a <UART_SetConfig+0x1ba>
 8004958:	2b20      	cmp	r3, #32
 800495a:	d00a      	beq.n	8004972 <UART_SetConfig+0x1a2>
 800495c:	2b20      	cmp	r3, #32
 800495e:	d814      	bhi.n	800498a <UART_SetConfig+0x1ba>
 8004960:	2b00      	cmp	r3, #0
 8004962:	d002      	beq.n	800496a <UART_SetConfig+0x19a>
 8004964:	2b10      	cmp	r3, #16
 8004966:	d008      	beq.n	800497a <UART_SetConfig+0x1aa>
 8004968:	e00f      	b.n	800498a <UART_SetConfig+0x1ba>
 800496a:	2300      	movs	r3, #0
 800496c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004970:	e06d      	b.n	8004a4e <UART_SetConfig+0x27e>
 8004972:	2302      	movs	r3, #2
 8004974:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004978:	e069      	b.n	8004a4e <UART_SetConfig+0x27e>
 800497a:	2304      	movs	r3, #4
 800497c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004980:	e065      	b.n	8004a4e <UART_SetConfig+0x27e>
 8004982:	2308      	movs	r3, #8
 8004984:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004988:	e061      	b.n	8004a4e <UART_SetConfig+0x27e>
 800498a:	2310      	movs	r3, #16
 800498c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004990:	e05d      	b.n	8004a4e <UART_SetConfig+0x27e>
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a4b      	ldr	r2, [pc, #300]	@ (8004ac4 <UART_SetConfig+0x2f4>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d125      	bne.n	80049e8 <UART_SetConfig+0x218>
 800499c:	4b46      	ldr	r3, [pc, #280]	@ (8004ab8 <UART_SetConfig+0x2e8>)
 800499e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049a2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80049a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80049a8:	d016      	beq.n	80049d8 <UART_SetConfig+0x208>
 80049aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80049ac:	d818      	bhi.n	80049e0 <UART_SetConfig+0x210>
 80049ae:	2b80      	cmp	r3, #128	@ 0x80
 80049b0:	d00a      	beq.n	80049c8 <UART_SetConfig+0x1f8>
 80049b2:	2b80      	cmp	r3, #128	@ 0x80
 80049b4:	d814      	bhi.n	80049e0 <UART_SetConfig+0x210>
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d002      	beq.n	80049c0 <UART_SetConfig+0x1f0>
 80049ba:	2b40      	cmp	r3, #64	@ 0x40
 80049bc:	d008      	beq.n	80049d0 <UART_SetConfig+0x200>
 80049be:	e00f      	b.n	80049e0 <UART_SetConfig+0x210>
 80049c0:	2300      	movs	r3, #0
 80049c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049c6:	e042      	b.n	8004a4e <UART_SetConfig+0x27e>
 80049c8:	2302      	movs	r3, #2
 80049ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049ce:	e03e      	b.n	8004a4e <UART_SetConfig+0x27e>
 80049d0:	2304      	movs	r3, #4
 80049d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049d6:	e03a      	b.n	8004a4e <UART_SetConfig+0x27e>
 80049d8:	2308      	movs	r3, #8
 80049da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049de:	e036      	b.n	8004a4e <UART_SetConfig+0x27e>
 80049e0:	2310      	movs	r3, #16
 80049e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049e6:	e032      	b.n	8004a4e <UART_SetConfig+0x27e>
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a30      	ldr	r2, [pc, #192]	@ (8004ab0 <UART_SetConfig+0x2e0>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d12a      	bne.n	8004a48 <UART_SetConfig+0x278>
 80049f2:	4b31      	ldr	r3, [pc, #196]	@ (8004ab8 <UART_SetConfig+0x2e8>)
 80049f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049f8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80049fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a00:	d01a      	beq.n	8004a38 <UART_SetConfig+0x268>
 8004a02:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a06:	d81b      	bhi.n	8004a40 <UART_SetConfig+0x270>
 8004a08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a0c:	d00c      	beq.n	8004a28 <UART_SetConfig+0x258>
 8004a0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a12:	d815      	bhi.n	8004a40 <UART_SetConfig+0x270>
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d003      	beq.n	8004a20 <UART_SetConfig+0x250>
 8004a18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a1c:	d008      	beq.n	8004a30 <UART_SetConfig+0x260>
 8004a1e:	e00f      	b.n	8004a40 <UART_SetConfig+0x270>
 8004a20:	2300      	movs	r3, #0
 8004a22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a26:	e012      	b.n	8004a4e <UART_SetConfig+0x27e>
 8004a28:	2302      	movs	r3, #2
 8004a2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a2e:	e00e      	b.n	8004a4e <UART_SetConfig+0x27e>
 8004a30:	2304      	movs	r3, #4
 8004a32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a36:	e00a      	b.n	8004a4e <UART_SetConfig+0x27e>
 8004a38:	2308      	movs	r3, #8
 8004a3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a3e:	e006      	b.n	8004a4e <UART_SetConfig+0x27e>
 8004a40:	2310      	movs	r3, #16
 8004a42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a46:	e002      	b.n	8004a4e <UART_SetConfig+0x27e>
 8004a48:	2310      	movs	r3, #16
 8004a4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a17      	ldr	r2, [pc, #92]	@ (8004ab0 <UART_SetConfig+0x2e0>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	f040 80a8 	bne.w	8004baa <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a5a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004a5e:	2b08      	cmp	r3, #8
 8004a60:	d834      	bhi.n	8004acc <UART_SetConfig+0x2fc>
 8004a62:	a201      	add	r2, pc, #4	@ (adr r2, 8004a68 <UART_SetConfig+0x298>)
 8004a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a68:	08004a8d 	.word	0x08004a8d
 8004a6c:	08004acd 	.word	0x08004acd
 8004a70:	08004a95 	.word	0x08004a95
 8004a74:	08004acd 	.word	0x08004acd
 8004a78:	08004a9b 	.word	0x08004a9b
 8004a7c:	08004acd 	.word	0x08004acd
 8004a80:	08004acd 	.word	0x08004acd
 8004a84:	08004acd 	.word	0x08004acd
 8004a88:	08004aa3 	.word	0x08004aa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a8c:	f7fd feb6 	bl	80027fc <HAL_RCC_GetPCLK1Freq>
 8004a90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a92:	e021      	b.n	8004ad8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a94:	4b0c      	ldr	r3, [pc, #48]	@ (8004ac8 <UART_SetConfig+0x2f8>)
 8004a96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004a98:	e01e      	b.n	8004ad8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a9a:	f7fd fe41 	bl	8002720 <HAL_RCC_GetSysClockFreq>
 8004a9e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004aa0:	e01a      	b.n	8004ad8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004aa6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004aa8:	e016      	b.n	8004ad8 <UART_SetConfig+0x308>
 8004aaa:	bf00      	nop
 8004aac:	cfff69f3 	.word	0xcfff69f3
 8004ab0:	40008000 	.word	0x40008000
 8004ab4:	40013800 	.word	0x40013800
 8004ab8:	40021000 	.word	0x40021000
 8004abc:	40004400 	.word	0x40004400
 8004ac0:	40004800 	.word	0x40004800
 8004ac4:	40004c00 	.word	0x40004c00
 8004ac8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004ad6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f000 812a 	beq.w	8004d34 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae4:	4a9e      	ldr	r2, [pc, #632]	@ (8004d60 <UART_SetConfig+0x590>)
 8004ae6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004aea:	461a      	mov	r2, r3
 8004aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aee:	fbb3 f3f2 	udiv	r3, r3, r2
 8004af2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	4613      	mov	r3, r2
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	4413      	add	r3, r2
 8004afe:	69ba      	ldr	r2, [r7, #24]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d305      	bcc.n	8004b10 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d903      	bls.n	8004b18 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004b16:	e10d      	b.n	8004d34 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	60bb      	str	r3, [r7, #8]
 8004b1e:	60fa      	str	r2, [r7, #12]
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b24:	4a8e      	ldr	r2, [pc, #568]	@ (8004d60 <UART_SetConfig+0x590>)
 8004b26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	603b      	str	r3, [r7, #0]
 8004b30:	607a      	str	r2, [r7, #4]
 8004b32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b3a:	f7fb fbc1 	bl	80002c0 <__aeabi_uldivmod>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	460b      	mov	r3, r1
 8004b42:	4610      	mov	r0, r2
 8004b44:	4619      	mov	r1, r3
 8004b46:	f04f 0200 	mov.w	r2, #0
 8004b4a:	f04f 0300 	mov.w	r3, #0
 8004b4e:	020b      	lsls	r3, r1, #8
 8004b50:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b54:	0202      	lsls	r2, r0, #8
 8004b56:	6979      	ldr	r1, [r7, #20]
 8004b58:	6849      	ldr	r1, [r1, #4]
 8004b5a:	0849      	lsrs	r1, r1, #1
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	460c      	mov	r4, r1
 8004b60:	4605      	mov	r5, r0
 8004b62:	eb12 0804 	adds.w	r8, r2, r4
 8004b66:	eb43 0905 	adc.w	r9, r3, r5
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	469a      	mov	sl, r3
 8004b72:	4693      	mov	fp, r2
 8004b74:	4652      	mov	r2, sl
 8004b76:	465b      	mov	r3, fp
 8004b78:	4640      	mov	r0, r8
 8004b7a:	4649      	mov	r1, r9
 8004b7c:	f7fb fba0 	bl	80002c0 <__aeabi_uldivmod>
 8004b80:	4602      	mov	r2, r0
 8004b82:	460b      	mov	r3, r1
 8004b84:	4613      	mov	r3, r2
 8004b86:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b8e:	d308      	bcc.n	8004ba2 <UART_SetConfig+0x3d2>
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b96:	d204      	bcs.n	8004ba2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6a3a      	ldr	r2, [r7, #32]
 8004b9e:	60da      	str	r2, [r3, #12]
 8004ba0:	e0c8      	b.n	8004d34 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004ba8:	e0c4      	b.n	8004d34 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bb2:	d167      	bne.n	8004c84 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004bb4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	d828      	bhi.n	8004c0e <UART_SetConfig+0x43e>
 8004bbc:	a201      	add	r2, pc, #4	@ (adr r2, 8004bc4 <UART_SetConfig+0x3f4>)
 8004bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc2:	bf00      	nop
 8004bc4:	08004be9 	.word	0x08004be9
 8004bc8:	08004bf1 	.word	0x08004bf1
 8004bcc:	08004bf9 	.word	0x08004bf9
 8004bd0:	08004c0f 	.word	0x08004c0f
 8004bd4:	08004bff 	.word	0x08004bff
 8004bd8:	08004c0f 	.word	0x08004c0f
 8004bdc:	08004c0f 	.word	0x08004c0f
 8004be0:	08004c0f 	.word	0x08004c0f
 8004be4:	08004c07 	.word	0x08004c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004be8:	f7fd fe08 	bl	80027fc <HAL_RCC_GetPCLK1Freq>
 8004bec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004bee:	e014      	b.n	8004c1a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bf0:	f7fd fe1a 	bl	8002828 <HAL_RCC_GetPCLK2Freq>
 8004bf4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004bf6:	e010      	b.n	8004c1a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bf8:	4b5a      	ldr	r3, [pc, #360]	@ (8004d64 <UART_SetConfig+0x594>)
 8004bfa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004bfc:	e00d      	b.n	8004c1a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bfe:	f7fd fd8f 	bl	8002720 <HAL_RCC_GetSysClockFreq>
 8004c02:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c04:	e009      	b.n	8004c1a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c0c:	e005      	b.n	8004c1a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004c18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 8089 	beq.w	8004d34 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c26:	4a4e      	ldr	r2, [pc, #312]	@ (8004d60 <UART_SetConfig+0x590>)
 8004c28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c30:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c34:	005a      	lsls	r2, r3, #1
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	085b      	lsrs	r3, r3, #1
 8004c3c:	441a      	add	r2, r3
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c46:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c48:	6a3b      	ldr	r3, [r7, #32]
 8004c4a:	2b0f      	cmp	r3, #15
 8004c4c:	d916      	bls.n	8004c7c <UART_SetConfig+0x4ac>
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c54:	d212      	bcs.n	8004c7c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c56:	6a3b      	ldr	r3, [r7, #32]
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	f023 030f 	bic.w	r3, r3, #15
 8004c5e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	085b      	lsrs	r3, r3, #1
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	f003 0307 	and.w	r3, r3, #7
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	8bfb      	ldrh	r3, [r7, #30]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	8bfa      	ldrh	r2, [r7, #30]
 8004c78:	60da      	str	r2, [r3, #12]
 8004c7a:	e05b      	b.n	8004d34 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004c82:	e057      	b.n	8004d34 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c84:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	d828      	bhi.n	8004cde <UART_SetConfig+0x50e>
 8004c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8004c94 <UART_SetConfig+0x4c4>)
 8004c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c92:	bf00      	nop
 8004c94:	08004cb9 	.word	0x08004cb9
 8004c98:	08004cc1 	.word	0x08004cc1
 8004c9c:	08004cc9 	.word	0x08004cc9
 8004ca0:	08004cdf 	.word	0x08004cdf
 8004ca4:	08004ccf 	.word	0x08004ccf
 8004ca8:	08004cdf 	.word	0x08004cdf
 8004cac:	08004cdf 	.word	0x08004cdf
 8004cb0:	08004cdf 	.word	0x08004cdf
 8004cb4:	08004cd7 	.word	0x08004cd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cb8:	f7fd fda0 	bl	80027fc <HAL_RCC_GetPCLK1Freq>
 8004cbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004cbe:	e014      	b.n	8004cea <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cc0:	f7fd fdb2 	bl	8002828 <HAL_RCC_GetPCLK2Freq>
 8004cc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004cc6:	e010      	b.n	8004cea <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cc8:	4b26      	ldr	r3, [pc, #152]	@ (8004d64 <UART_SetConfig+0x594>)
 8004cca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ccc:	e00d      	b.n	8004cea <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cce:	f7fd fd27 	bl	8002720 <HAL_RCC_GetSysClockFreq>
 8004cd2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004cd4:	e009      	b.n	8004cea <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004cdc:	e005      	b.n	8004cea <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004ce8:	bf00      	nop
    }

    if (pclk != 0U)
 8004cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d021      	beq.n	8004d34 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf4:	4a1a      	ldr	r2, [pc, #104]	@ (8004d60 <UART_SetConfig+0x590>)
 8004cf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfe:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	085b      	lsrs	r3, r3, #1
 8004d08:	441a      	add	r2, r3
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d12:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d14:	6a3b      	ldr	r3, [r7, #32]
 8004d16:	2b0f      	cmp	r3, #15
 8004d18:	d909      	bls.n	8004d2e <UART_SetConfig+0x55e>
 8004d1a:	6a3b      	ldr	r3, [r7, #32]
 8004d1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d20:	d205      	bcs.n	8004d2e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d22:	6a3b      	ldr	r3, [r7, #32]
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	60da      	str	r2, [r3, #12]
 8004d2c:	e002      	b.n	8004d34 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	2200      	movs	r2, #0
 8004d48:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004d50:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3730      	adds	r7, #48	@ 0x30
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d5e:	bf00      	nop
 8004d60:	0800685c 	.word	0x0800685c
 8004d64:	00f42400 	.word	0x00f42400

08004d68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d74:	f003 0308 	and.w	r3, r3, #8
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00a      	beq.n	8004d92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00a      	beq.n	8004db4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db8:	f003 0302 	and.w	r3, r3, #2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00a      	beq.n	8004dd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dda:	f003 0304 	and.w	r3, r3, #4
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00a      	beq.n	8004df8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	430a      	orrs	r2, r1
 8004df6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dfc:	f003 0310 	and.w	r3, r3, #16
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00a      	beq.n	8004e1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e1e:	f003 0320 	and.w	r3, r3, #32
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00a      	beq.n	8004e3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d01a      	beq.n	8004e7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e66:	d10a      	bne.n	8004e7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00a      	beq.n	8004ea0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	605a      	str	r2, [r3, #4]
  }
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b098      	sub	sp, #96	@ 0x60
 8004eb0:	af02      	add	r7, sp, #8
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ebc:	f7fc f946 	bl	800114c <HAL_GetTick>
 8004ec0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0308 	and.w	r3, r3, #8
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d12f      	bne.n	8004f30 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ed0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ed4:	9300      	str	r3, [sp, #0]
 8004ed6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f88e 	bl	8005000 <UART_WaitOnFlagUntilTimeout>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d022      	beq.n	8004f30 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef2:	e853 3f00 	ldrex	r3, [r3]
 8004ef6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004efa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004efe:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	461a      	mov	r2, r3
 8004f06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f08:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f0a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f10:	e841 2300 	strex	r3, r2, [r1]
 8004f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1e6      	bne.n	8004eea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e063      	b.n	8004ff8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0304 	and.w	r3, r3, #4
 8004f3a:	2b04      	cmp	r3, #4
 8004f3c:	d149      	bne.n	8004fd2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f3e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f46:	2200      	movs	r2, #0
 8004f48:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 f857 	bl	8005000 <UART_WaitOnFlagUntilTimeout>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d03c      	beq.n	8004fd2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f60:	e853 3f00 	ldrex	r3, [r3]
 8004f64:	623b      	str	r3, [r7, #32]
   return(result);
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	461a      	mov	r2, r3
 8004f74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f76:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f78:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f7e:	e841 2300 	strex	r3, r2, [r1]
 8004f82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1e6      	bne.n	8004f58 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	3308      	adds	r3, #8
 8004f90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	e853 3f00 	ldrex	r3, [r3]
 8004f98:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f023 0301 	bic.w	r3, r3, #1
 8004fa0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	3308      	adds	r3, #8
 8004fa8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004faa:	61fa      	str	r2, [r7, #28]
 8004fac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fae:	69b9      	ldr	r1, [r7, #24]
 8004fb0:	69fa      	ldr	r2, [r7, #28]
 8004fb2:	e841 2300 	strex	r3, r2, [r1]
 8004fb6:	617b      	str	r3, [r7, #20]
   return(result);
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1e5      	bne.n	8004f8a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e012      	b.n	8004ff8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2220      	movs	r2, #32
 8004fd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2220      	movs	r2, #32
 8004fde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3758      	adds	r7, #88	@ 0x58
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	603b      	str	r3, [r7, #0]
 800500c:	4613      	mov	r3, r2
 800500e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005010:	e04f      	b.n	80050b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005018:	d04b      	beq.n	80050b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800501a:	f7fc f897 	bl	800114c <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	429a      	cmp	r2, r3
 8005028:	d302      	bcc.n	8005030 <UART_WaitOnFlagUntilTimeout+0x30>
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e04e      	b.n	80050d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0304 	and.w	r3, r3, #4
 800503e:	2b00      	cmp	r3, #0
 8005040:	d037      	beq.n	80050b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	2b80      	cmp	r3, #128	@ 0x80
 8005046:	d034      	beq.n	80050b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	2b40      	cmp	r3, #64	@ 0x40
 800504c:	d031      	beq.n	80050b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	69db      	ldr	r3, [r3, #28]
 8005054:	f003 0308 	and.w	r3, r3, #8
 8005058:	2b08      	cmp	r3, #8
 800505a:	d110      	bne.n	800507e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2208      	movs	r2, #8
 8005062:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f000 f920 	bl	80052aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2208      	movs	r2, #8
 800506e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e029      	b.n	80050d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	69db      	ldr	r3, [r3, #28]
 8005084:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005088:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800508c:	d111      	bne.n	80050b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005096:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f000 f906 	bl	80052aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2220      	movs	r2, #32
 80050a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e00f      	b.n	80050d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	69da      	ldr	r2, [r3, #28]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	4013      	ands	r3, r2
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	429a      	cmp	r2, r3
 80050c0:	bf0c      	ite	eq
 80050c2:	2301      	moveq	r3, #1
 80050c4:	2300      	movne	r3, #0
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	461a      	mov	r2, r3
 80050ca:	79fb      	ldrb	r3, [r7, #7]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d0a0      	beq.n	8005012 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
	...

080050dc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b096      	sub	sp, #88	@ 0x58
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	4613      	mov	r3, r2
 80050e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	88fa      	ldrh	r2, [r7, #6]
 80050f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2222      	movs	r2, #34	@ 0x22
 8005104:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800510e:	2b00      	cmp	r3, #0
 8005110:	d02d      	beq.n	800516e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005118:	4a40      	ldr	r2, [pc, #256]	@ (800521c <UART_Start_Receive_DMA+0x140>)
 800511a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005122:	4a3f      	ldr	r2, [pc, #252]	@ (8005220 <UART_Start_Receive_DMA+0x144>)
 8005124:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800512c:	4a3d      	ldr	r2, [pc, #244]	@ (8005224 <UART_Start_Receive_DMA+0x148>)
 800512e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005136:	2200      	movs	r2, #0
 8005138:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	3324      	adds	r3, #36	@ 0x24
 8005146:	4619      	mov	r1, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800514c:	461a      	mov	r2, r3
 800514e:	88fb      	ldrh	r3, [r7, #6]
 8005150:	f7fc f9c0 	bl	80014d4 <HAL_DMA_Start_IT>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d009      	beq.n	800516e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2210      	movs	r2, #16
 800515e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2220      	movs	r2, #32
 8005166:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e051      	b.n	8005212 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d018      	beq.n	80051a8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800517e:	e853 3f00 	ldrex	r3, [r3]
 8005182:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005186:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800518a:	657b      	str	r3, [r7, #84]	@ 0x54
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	461a      	mov	r2, r3
 8005192:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005194:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005196:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005198:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800519a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800519c:	e841 2300 	strex	r3, r2, [r1]
 80051a0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80051a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1e6      	bne.n	8005176 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	3308      	adds	r3, #8
 80051ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051b2:	e853 3f00 	ldrex	r3, [r3]
 80051b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80051b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ba:	f043 0301 	orr.w	r3, r3, #1
 80051be:	653b      	str	r3, [r7, #80]	@ 0x50
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	3308      	adds	r3, #8
 80051c6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80051c8:	637a      	str	r2, [r7, #52]	@ 0x34
 80051ca:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80051ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051d0:	e841 2300 	strex	r3, r2, [r1]
 80051d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80051d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1e5      	bne.n	80051a8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	3308      	adds	r3, #8
 80051e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	e853 3f00 	ldrex	r3, [r3]
 80051ea:	613b      	str	r3, [r7, #16]
   return(result);
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	3308      	adds	r3, #8
 80051fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80051fc:	623a      	str	r2, [r7, #32]
 80051fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005200:	69f9      	ldr	r1, [r7, #28]
 8005202:	6a3a      	ldr	r2, [r7, #32]
 8005204:	e841 2300 	strex	r3, r2, [r1]
 8005208:	61bb      	str	r3, [r7, #24]
   return(result);
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1e5      	bne.n	80051dc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3758      	adds	r7, #88	@ 0x58
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	0800542d 	.word	0x0800542d
 8005220:	08005559 	.word	0x08005559
 8005224:	08005597 	.word	0x08005597

08005228 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005228:	b480      	push	{r7}
 800522a:	b08f      	sub	sp, #60	@ 0x3c
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005236:	6a3b      	ldr	r3, [r7, #32]
 8005238:	e853 3f00 	ldrex	r3, [r3]
 800523c:	61fb      	str	r3, [r7, #28]
   return(result);
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005244:	637b      	str	r3, [r7, #52]	@ 0x34
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	461a      	mov	r2, r3
 800524c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800524e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005250:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005252:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005254:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005256:	e841 2300 	strex	r3, r2, [r1]
 800525a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800525c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1e6      	bne.n	8005230 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	3308      	adds	r3, #8
 8005268:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	e853 3f00 	ldrex	r3, [r3]
 8005270:	60bb      	str	r3, [r7, #8]
   return(result);
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005278:	633b      	str	r3, [r7, #48]	@ 0x30
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	3308      	adds	r3, #8
 8005280:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005282:	61ba      	str	r2, [r7, #24]
 8005284:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005286:	6979      	ldr	r1, [r7, #20]
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	e841 2300 	strex	r3, r2, [r1]
 800528e:	613b      	str	r3, [r7, #16]
   return(result);
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1e5      	bne.n	8005262 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2220      	movs	r2, #32
 800529a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800529e:	bf00      	nop
 80052a0:	373c      	adds	r7, #60	@ 0x3c
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b095      	sub	sp, #84	@ 0x54
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052ba:	e853 3f00 	ldrex	r3, [r3]
 80052be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	461a      	mov	r2, r3
 80052ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80052d2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052d8:	e841 2300 	strex	r3, r2, [r1]
 80052dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1e6      	bne.n	80052b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	3308      	adds	r3, #8
 80052ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	e853 3f00 	ldrex	r3, [r3]
 80052f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052fa:	f023 0301 	bic.w	r3, r3, #1
 80052fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	3308      	adds	r3, #8
 8005306:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005308:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800530a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800530e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005310:	e841 2300 	strex	r3, r2, [r1]
 8005314:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1e3      	bne.n	80052e4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005320:	2b01      	cmp	r3, #1
 8005322:	d118      	bne.n	8005356 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	e853 3f00 	ldrex	r3, [r3]
 8005330:	60bb      	str	r3, [r7, #8]
   return(result);
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	f023 0310 	bic.w	r3, r3, #16
 8005338:	647b      	str	r3, [r7, #68]	@ 0x44
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	461a      	mov	r2, r3
 8005340:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005342:	61bb      	str	r3, [r7, #24]
 8005344:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005346:	6979      	ldr	r1, [r7, #20]
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	e841 2300 	strex	r3, r2, [r1]
 800534e:	613b      	str	r3, [r7, #16]
   return(result);
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1e6      	bne.n	8005324 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2220      	movs	r2, #32
 800535a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800536a:	bf00      	nop
 800536c:	3754      	adds	r7, #84	@ 0x54
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b090      	sub	sp, #64	@ 0x40
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005382:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0320 	and.w	r3, r3, #32
 800538e:	2b00      	cmp	r3, #0
 8005390:	d137      	bne.n	8005402 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8005392:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005394:	2200      	movs	r2, #0
 8005396:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800539a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	3308      	adds	r3, #8
 80053a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a4:	e853 3f00 	ldrex	r3, [r3]
 80053a8:	623b      	str	r3, [r7, #32]
   return(result);
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	3308      	adds	r3, #8
 80053b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80053ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80053bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053c2:	e841 2300 	strex	r3, r2, [r1]
 80053c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1e5      	bne.n	800539a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	e853 3f00 	ldrex	r3, [r3]
 80053da:	60fb      	str	r3, [r7, #12]
   return(result);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80053e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	461a      	mov	r2, r3
 80053ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053ec:	61fb      	str	r3, [r7, #28]
 80053ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f0:	69b9      	ldr	r1, [r7, #24]
 80053f2:	69fa      	ldr	r2, [r7, #28]
 80053f4:	e841 2300 	strex	r3, r2, [r1]
 80053f8:	617b      	str	r3, [r7, #20]
   return(result);
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1e6      	bne.n	80053ce <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005400:	e002      	b.n	8005408 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005402:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005404:	f7fb faca 	bl	800099c <HAL_UART_TxCpltCallback>
}
 8005408:	bf00      	nop
 800540a:	3740      	adds	r7, #64	@ 0x40
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800541c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f7ff f9ac 	bl	800477c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005424:	bf00      	nop
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b09c      	sub	sp, #112	@ 0x70
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005438:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0320 	and.w	r3, r3, #32
 8005444:	2b00      	cmp	r3, #0
 8005446:	d171      	bne.n	800552c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005448:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800544a:	2200      	movs	r2, #0
 800544c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005450:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005456:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005458:	e853 3f00 	ldrex	r3, [r3]
 800545c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800545e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005460:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005464:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005466:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	461a      	mov	r2, r3
 800546c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800546e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005470:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005472:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005474:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005476:	e841 2300 	strex	r3, r2, [r1]
 800547a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800547c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1e6      	bne.n	8005450 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005482:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	3308      	adds	r3, #8
 8005488:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800548c:	e853 3f00 	ldrex	r3, [r3]
 8005490:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005494:	f023 0301 	bic.w	r3, r3, #1
 8005498:	667b      	str	r3, [r7, #100]	@ 0x64
 800549a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	3308      	adds	r3, #8
 80054a0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80054a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80054a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054aa:	e841 2300 	strex	r3, r2, [r1]
 80054ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1e5      	bne.n	8005482 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	3308      	adds	r3, #8
 80054bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c0:	e853 3f00 	ldrex	r3, [r3]
 80054c4:	623b      	str	r3, [r7, #32]
   return(result);
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80054ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	3308      	adds	r3, #8
 80054d4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80054d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80054d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054de:	e841 2300 	strex	r3, r2, [r1]
 80054e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1e5      	bne.n	80054b6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80054ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054ec:	2220      	movs	r2, #32
 80054ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d118      	bne.n	800552c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	e853 3f00 	ldrex	r3, [r3]
 8005506:	60fb      	str	r3, [r7, #12]
   return(result);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f023 0310 	bic.w	r3, r3, #16
 800550e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005510:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	461a      	mov	r2, r3
 8005516:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005518:	61fb      	str	r3, [r7, #28]
 800551a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551c:	69b9      	ldr	r1, [r7, #24]
 800551e:	69fa      	ldr	r2, [r7, #28]
 8005520:	e841 2300 	strex	r3, r2, [r1]
 8005524:	617b      	str	r3, [r7, #20]
   return(result);
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1e6      	bne.n	80054fa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800552c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800552e:	2200      	movs	r2, #0
 8005530:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005532:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005534:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005536:	2b01      	cmp	r3, #1
 8005538:	d107      	bne.n	800554a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800553a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800553c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005540:	4619      	mov	r1, r3
 8005542:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005544:	f7ff f938 	bl	80047b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005548:	e002      	b.n	8005550 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800554a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800554c:	f7fb fa0e 	bl	800096c <HAL_UART_RxCpltCallback>
}
 8005550:	bf00      	nop
 8005552:	3770      	adds	r7, #112	@ 0x70
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005564:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2201      	movs	r2, #1
 800556a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005570:	2b01      	cmp	r3, #1
 8005572:	d109      	bne.n	8005588 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800557a:	085b      	lsrs	r3, r3, #1
 800557c:	b29b      	uxth	r3, r3
 800557e:	4619      	mov	r1, r3
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f7ff f919 	bl	80047b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005586:	e002      	b.n	800558e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f7ff f901 	bl	8004790 <HAL_UART_RxHalfCpltCallback>
}
 800558e:	bf00      	nop
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b086      	sub	sp, #24
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055aa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055be:	2b80      	cmp	r3, #128	@ 0x80
 80055c0:	d109      	bne.n	80055d6 <UART_DMAError+0x40>
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	2b21      	cmp	r3, #33	@ 0x21
 80055c6:	d106      	bne.n	80055d6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80055d0:	6978      	ldr	r0, [r7, #20]
 80055d2:	f7ff fe29 	bl	8005228 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055e0:	2b40      	cmp	r3, #64	@ 0x40
 80055e2:	d109      	bne.n	80055f8 <UART_DMAError+0x62>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2b22      	cmp	r3, #34	@ 0x22
 80055e8:	d106      	bne.n	80055f8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80055f2:	6978      	ldr	r0, [r7, #20]
 80055f4:	f7ff fe59 	bl	80052aa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055fe:	f043 0210 	orr.w	r2, r3, #16
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005608:	6978      	ldr	r0, [r7, #20]
 800560a:	f7ff f8cb 	bl	80047a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800560e:	bf00      	nop
 8005610:	3718      	adds	r7, #24
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b084      	sub	sp, #16
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005622:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f7ff f8b5 	bl	80047a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800563a:	bf00      	nop
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005642:	b580      	push	{r7, lr}
 8005644:	b088      	sub	sp, #32
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	e853 3f00 	ldrex	r3, [r3]
 8005656:	60bb      	str	r3, [r7, #8]
   return(result);
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800565e:	61fb      	str	r3, [r7, #28]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	461a      	mov	r2, r3
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	61bb      	str	r3, [r7, #24]
 800566a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566c:	6979      	ldr	r1, [r7, #20]
 800566e:	69ba      	ldr	r2, [r7, #24]
 8005670:	e841 2300 	strex	r3, r2, [r1]
 8005674:	613b      	str	r3, [r7, #16]
   return(result);
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1e6      	bne.n	800564a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2220      	movs	r2, #32
 8005680:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7fb f986 	bl	800099c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005690:	bf00      	nop
 8005692:	3720      	adds	r7, #32
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d101      	bne.n	80056ea <HAL_UARTEx_DisableFifoMode+0x16>
 80056e6:	2302      	movs	r3, #2
 80056e8:	e027      	b.n	800573a <HAL_UARTEx_DisableFifoMode+0x66>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2224      	movs	r2, #36	@ 0x24
 80056f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 0201 	bic.w	r2, r2, #1
 8005710:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005718:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2220      	movs	r2, #32
 800572c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b084      	sub	sp, #16
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
 800574e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005756:	2b01      	cmp	r3, #1
 8005758:	d101      	bne.n	800575e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800575a:	2302      	movs	r3, #2
 800575c:	e02d      	b.n	80057ba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2224      	movs	r2, #36	@ 0x24
 800576a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f022 0201 	bic.w	r2, r2, #1
 8005784:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	430a      	orrs	r2, r1
 8005798:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f850 	bl	8005840 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2220      	movs	r2, #32
 80057ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b084      	sub	sp, #16
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
 80057ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d101      	bne.n	80057da <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80057d6:	2302      	movs	r3, #2
 80057d8:	e02d      	b.n	8005836 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2224      	movs	r2, #36	@ 0x24
 80057e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f022 0201 	bic.w	r2, r2, #1
 8005800:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	430a      	orrs	r2, r1
 8005814:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f812 	bl	8005840 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2220      	movs	r2, #32
 8005828:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
	...

08005840 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800584c:	2b00      	cmp	r3, #0
 800584e:	d108      	bne.n	8005862 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005860:	e031      	b.n	80058c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005862:	2308      	movs	r3, #8
 8005864:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005866:	2308      	movs	r3, #8
 8005868:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	0e5b      	lsrs	r3, r3, #25
 8005872:	b2db      	uxtb	r3, r3
 8005874:	f003 0307 	and.w	r3, r3, #7
 8005878:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	0f5b      	lsrs	r3, r3, #29
 8005882:	b2db      	uxtb	r3, r3
 8005884:	f003 0307 	and.w	r3, r3, #7
 8005888:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800588a:	7bbb      	ldrb	r3, [r7, #14]
 800588c:	7b3a      	ldrb	r2, [r7, #12]
 800588e:	4911      	ldr	r1, [pc, #68]	@ (80058d4 <UARTEx_SetNbDataToProcess+0x94>)
 8005890:	5c8a      	ldrb	r2, [r1, r2]
 8005892:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005896:	7b3a      	ldrb	r2, [r7, #12]
 8005898:	490f      	ldr	r1, [pc, #60]	@ (80058d8 <UARTEx_SetNbDataToProcess+0x98>)
 800589a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800589c:	fb93 f3f2 	sdiv	r3, r3, r2
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
 80058aa:	7b7a      	ldrb	r2, [r7, #13]
 80058ac:	4909      	ldr	r1, [pc, #36]	@ (80058d4 <UARTEx_SetNbDataToProcess+0x94>)
 80058ae:	5c8a      	ldrb	r2, [r1, r2]
 80058b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80058b4:	7b7a      	ldrb	r2, [r7, #13]
 80058b6:	4908      	ldr	r1, [pc, #32]	@ (80058d8 <UARTEx_SetNbDataToProcess+0x98>)
 80058b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80058be:	b29a      	uxth	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80058c6:	bf00      	nop
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	08006874 	.word	0x08006874
 80058d8:	0800687c 	.word	0x0800687c

080058dc <std>:
 80058dc:	2300      	movs	r3, #0
 80058de:	b510      	push	{r4, lr}
 80058e0:	4604      	mov	r4, r0
 80058e2:	e9c0 3300 	strd	r3, r3, [r0]
 80058e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058ea:	6083      	str	r3, [r0, #8]
 80058ec:	8181      	strh	r1, [r0, #12]
 80058ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80058f0:	81c2      	strh	r2, [r0, #14]
 80058f2:	6183      	str	r3, [r0, #24]
 80058f4:	4619      	mov	r1, r3
 80058f6:	2208      	movs	r2, #8
 80058f8:	305c      	adds	r0, #92	@ 0x5c
 80058fa:	f000 f921 	bl	8005b40 <memset>
 80058fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005934 <std+0x58>)
 8005900:	6263      	str	r3, [r4, #36]	@ 0x24
 8005902:	4b0d      	ldr	r3, [pc, #52]	@ (8005938 <std+0x5c>)
 8005904:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005906:	4b0d      	ldr	r3, [pc, #52]	@ (800593c <std+0x60>)
 8005908:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800590a:	4b0d      	ldr	r3, [pc, #52]	@ (8005940 <std+0x64>)
 800590c:	6323      	str	r3, [r4, #48]	@ 0x30
 800590e:	4b0d      	ldr	r3, [pc, #52]	@ (8005944 <std+0x68>)
 8005910:	6224      	str	r4, [r4, #32]
 8005912:	429c      	cmp	r4, r3
 8005914:	d006      	beq.n	8005924 <std+0x48>
 8005916:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800591a:	4294      	cmp	r4, r2
 800591c:	d002      	beq.n	8005924 <std+0x48>
 800591e:	33d0      	adds	r3, #208	@ 0xd0
 8005920:	429c      	cmp	r4, r3
 8005922:	d105      	bne.n	8005930 <std+0x54>
 8005924:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800592c:	f000 b93a 	b.w	8005ba4 <__retarget_lock_init_recursive>
 8005930:	bd10      	pop	{r4, pc}
 8005932:	bf00      	nop
 8005934:	080063fd 	.word	0x080063fd
 8005938:	0800641f 	.word	0x0800641f
 800593c:	08006457 	.word	0x08006457
 8005940:	0800647b 	.word	0x0800647b
 8005944:	2000032c 	.word	0x2000032c

08005948 <stdio_exit_handler>:
 8005948:	4a02      	ldr	r2, [pc, #8]	@ (8005954 <stdio_exit_handler+0xc>)
 800594a:	4903      	ldr	r1, [pc, #12]	@ (8005958 <stdio_exit_handler+0x10>)
 800594c:	4803      	ldr	r0, [pc, #12]	@ (800595c <stdio_exit_handler+0x14>)
 800594e:	f000 b869 	b.w	8005a24 <_fwalk_sglue>
 8005952:	bf00      	nop
 8005954:	2000000c 	.word	0x2000000c
 8005958:	08006395 	.word	0x08006395
 800595c:	2000001c 	.word	0x2000001c

08005960 <cleanup_stdio>:
 8005960:	6841      	ldr	r1, [r0, #4]
 8005962:	4b0c      	ldr	r3, [pc, #48]	@ (8005994 <cleanup_stdio+0x34>)
 8005964:	4299      	cmp	r1, r3
 8005966:	b510      	push	{r4, lr}
 8005968:	4604      	mov	r4, r0
 800596a:	d001      	beq.n	8005970 <cleanup_stdio+0x10>
 800596c:	f000 fd12 	bl	8006394 <_fflush_r>
 8005970:	68a1      	ldr	r1, [r4, #8]
 8005972:	4b09      	ldr	r3, [pc, #36]	@ (8005998 <cleanup_stdio+0x38>)
 8005974:	4299      	cmp	r1, r3
 8005976:	d002      	beq.n	800597e <cleanup_stdio+0x1e>
 8005978:	4620      	mov	r0, r4
 800597a:	f000 fd0b 	bl	8006394 <_fflush_r>
 800597e:	68e1      	ldr	r1, [r4, #12]
 8005980:	4b06      	ldr	r3, [pc, #24]	@ (800599c <cleanup_stdio+0x3c>)
 8005982:	4299      	cmp	r1, r3
 8005984:	d004      	beq.n	8005990 <cleanup_stdio+0x30>
 8005986:	4620      	mov	r0, r4
 8005988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800598c:	f000 bd02 	b.w	8006394 <_fflush_r>
 8005990:	bd10      	pop	{r4, pc}
 8005992:	bf00      	nop
 8005994:	2000032c 	.word	0x2000032c
 8005998:	20000394 	.word	0x20000394
 800599c:	200003fc 	.word	0x200003fc

080059a0 <global_stdio_init.part.0>:
 80059a0:	b510      	push	{r4, lr}
 80059a2:	4b0b      	ldr	r3, [pc, #44]	@ (80059d0 <global_stdio_init.part.0+0x30>)
 80059a4:	4c0b      	ldr	r4, [pc, #44]	@ (80059d4 <global_stdio_init.part.0+0x34>)
 80059a6:	4a0c      	ldr	r2, [pc, #48]	@ (80059d8 <global_stdio_init.part.0+0x38>)
 80059a8:	601a      	str	r2, [r3, #0]
 80059aa:	4620      	mov	r0, r4
 80059ac:	2200      	movs	r2, #0
 80059ae:	2104      	movs	r1, #4
 80059b0:	f7ff ff94 	bl	80058dc <std>
 80059b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80059b8:	2201      	movs	r2, #1
 80059ba:	2109      	movs	r1, #9
 80059bc:	f7ff ff8e 	bl	80058dc <std>
 80059c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80059c4:	2202      	movs	r2, #2
 80059c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059ca:	2112      	movs	r1, #18
 80059cc:	f7ff bf86 	b.w	80058dc <std>
 80059d0:	20000464 	.word	0x20000464
 80059d4:	2000032c 	.word	0x2000032c
 80059d8:	08005949 	.word	0x08005949

080059dc <__sfp_lock_acquire>:
 80059dc:	4801      	ldr	r0, [pc, #4]	@ (80059e4 <__sfp_lock_acquire+0x8>)
 80059de:	f000 b8e2 	b.w	8005ba6 <__retarget_lock_acquire_recursive>
 80059e2:	bf00      	nop
 80059e4:	20000469 	.word	0x20000469

080059e8 <__sfp_lock_release>:
 80059e8:	4801      	ldr	r0, [pc, #4]	@ (80059f0 <__sfp_lock_release+0x8>)
 80059ea:	f000 b8dd 	b.w	8005ba8 <__retarget_lock_release_recursive>
 80059ee:	bf00      	nop
 80059f0:	20000469 	.word	0x20000469

080059f4 <__sinit>:
 80059f4:	b510      	push	{r4, lr}
 80059f6:	4604      	mov	r4, r0
 80059f8:	f7ff fff0 	bl	80059dc <__sfp_lock_acquire>
 80059fc:	6a23      	ldr	r3, [r4, #32]
 80059fe:	b11b      	cbz	r3, 8005a08 <__sinit+0x14>
 8005a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a04:	f7ff bff0 	b.w	80059e8 <__sfp_lock_release>
 8005a08:	4b04      	ldr	r3, [pc, #16]	@ (8005a1c <__sinit+0x28>)
 8005a0a:	6223      	str	r3, [r4, #32]
 8005a0c:	4b04      	ldr	r3, [pc, #16]	@ (8005a20 <__sinit+0x2c>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1f5      	bne.n	8005a00 <__sinit+0xc>
 8005a14:	f7ff ffc4 	bl	80059a0 <global_stdio_init.part.0>
 8005a18:	e7f2      	b.n	8005a00 <__sinit+0xc>
 8005a1a:	bf00      	nop
 8005a1c:	08005961 	.word	0x08005961
 8005a20:	20000464 	.word	0x20000464

08005a24 <_fwalk_sglue>:
 8005a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a28:	4607      	mov	r7, r0
 8005a2a:	4688      	mov	r8, r1
 8005a2c:	4614      	mov	r4, r2
 8005a2e:	2600      	movs	r6, #0
 8005a30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a34:	f1b9 0901 	subs.w	r9, r9, #1
 8005a38:	d505      	bpl.n	8005a46 <_fwalk_sglue+0x22>
 8005a3a:	6824      	ldr	r4, [r4, #0]
 8005a3c:	2c00      	cmp	r4, #0
 8005a3e:	d1f7      	bne.n	8005a30 <_fwalk_sglue+0xc>
 8005a40:	4630      	mov	r0, r6
 8005a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a46:	89ab      	ldrh	r3, [r5, #12]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d907      	bls.n	8005a5c <_fwalk_sglue+0x38>
 8005a4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a50:	3301      	adds	r3, #1
 8005a52:	d003      	beq.n	8005a5c <_fwalk_sglue+0x38>
 8005a54:	4629      	mov	r1, r5
 8005a56:	4638      	mov	r0, r7
 8005a58:	47c0      	blx	r8
 8005a5a:	4306      	orrs	r6, r0
 8005a5c:	3568      	adds	r5, #104	@ 0x68
 8005a5e:	e7e9      	b.n	8005a34 <_fwalk_sglue+0x10>

08005a60 <iprintf>:
 8005a60:	b40f      	push	{r0, r1, r2, r3}
 8005a62:	b507      	push	{r0, r1, r2, lr}
 8005a64:	4906      	ldr	r1, [pc, #24]	@ (8005a80 <iprintf+0x20>)
 8005a66:	ab04      	add	r3, sp, #16
 8005a68:	6808      	ldr	r0, [r1, #0]
 8005a6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a6e:	6881      	ldr	r1, [r0, #8]
 8005a70:	9301      	str	r3, [sp, #4]
 8005a72:	f000 f8c3 	bl	8005bfc <_vfiprintf_r>
 8005a76:	b003      	add	sp, #12
 8005a78:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a7c:	b004      	add	sp, #16
 8005a7e:	4770      	bx	lr
 8005a80:	20000018 	.word	0x20000018

08005a84 <_puts_r>:
 8005a84:	6a03      	ldr	r3, [r0, #32]
 8005a86:	b570      	push	{r4, r5, r6, lr}
 8005a88:	6884      	ldr	r4, [r0, #8]
 8005a8a:	4605      	mov	r5, r0
 8005a8c:	460e      	mov	r6, r1
 8005a8e:	b90b      	cbnz	r3, 8005a94 <_puts_r+0x10>
 8005a90:	f7ff ffb0 	bl	80059f4 <__sinit>
 8005a94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a96:	07db      	lsls	r3, r3, #31
 8005a98:	d405      	bmi.n	8005aa6 <_puts_r+0x22>
 8005a9a:	89a3      	ldrh	r3, [r4, #12]
 8005a9c:	0598      	lsls	r0, r3, #22
 8005a9e:	d402      	bmi.n	8005aa6 <_puts_r+0x22>
 8005aa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005aa2:	f000 f880 	bl	8005ba6 <__retarget_lock_acquire_recursive>
 8005aa6:	89a3      	ldrh	r3, [r4, #12]
 8005aa8:	0719      	lsls	r1, r3, #28
 8005aaa:	d502      	bpl.n	8005ab2 <_puts_r+0x2e>
 8005aac:	6923      	ldr	r3, [r4, #16]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d135      	bne.n	8005b1e <_puts_r+0x9a>
 8005ab2:	4621      	mov	r1, r4
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	f000 fd23 	bl	8006500 <__swsetup_r>
 8005aba:	b380      	cbz	r0, 8005b1e <_puts_r+0x9a>
 8005abc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005ac0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ac2:	07da      	lsls	r2, r3, #31
 8005ac4:	d405      	bmi.n	8005ad2 <_puts_r+0x4e>
 8005ac6:	89a3      	ldrh	r3, [r4, #12]
 8005ac8:	059b      	lsls	r3, r3, #22
 8005aca:	d402      	bmi.n	8005ad2 <_puts_r+0x4e>
 8005acc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ace:	f000 f86b 	bl	8005ba8 <__retarget_lock_release_recursive>
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	bd70      	pop	{r4, r5, r6, pc}
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	da04      	bge.n	8005ae4 <_puts_r+0x60>
 8005ada:	69a2      	ldr	r2, [r4, #24]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	dc17      	bgt.n	8005b10 <_puts_r+0x8c>
 8005ae0:	290a      	cmp	r1, #10
 8005ae2:	d015      	beq.n	8005b10 <_puts_r+0x8c>
 8005ae4:	6823      	ldr	r3, [r4, #0]
 8005ae6:	1c5a      	adds	r2, r3, #1
 8005ae8:	6022      	str	r2, [r4, #0]
 8005aea:	7019      	strb	r1, [r3, #0]
 8005aec:	68a3      	ldr	r3, [r4, #8]
 8005aee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005af2:	3b01      	subs	r3, #1
 8005af4:	60a3      	str	r3, [r4, #8]
 8005af6:	2900      	cmp	r1, #0
 8005af8:	d1ed      	bne.n	8005ad6 <_puts_r+0x52>
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	da11      	bge.n	8005b22 <_puts_r+0x9e>
 8005afe:	4622      	mov	r2, r4
 8005b00:	210a      	movs	r1, #10
 8005b02:	4628      	mov	r0, r5
 8005b04:	f000 fcbd 	bl	8006482 <__swbuf_r>
 8005b08:	3001      	adds	r0, #1
 8005b0a:	d0d7      	beq.n	8005abc <_puts_r+0x38>
 8005b0c:	250a      	movs	r5, #10
 8005b0e:	e7d7      	b.n	8005ac0 <_puts_r+0x3c>
 8005b10:	4622      	mov	r2, r4
 8005b12:	4628      	mov	r0, r5
 8005b14:	f000 fcb5 	bl	8006482 <__swbuf_r>
 8005b18:	3001      	adds	r0, #1
 8005b1a:	d1e7      	bne.n	8005aec <_puts_r+0x68>
 8005b1c:	e7ce      	b.n	8005abc <_puts_r+0x38>
 8005b1e:	3e01      	subs	r6, #1
 8005b20:	e7e4      	b.n	8005aec <_puts_r+0x68>
 8005b22:	6823      	ldr	r3, [r4, #0]
 8005b24:	1c5a      	adds	r2, r3, #1
 8005b26:	6022      	str	r2, [r4, #0]
 8005b28:	220a      	movs	r2, #10
 8005b2a:	701a      	strb	r2, [r3, #0]
 8005b2c:	e7ee      	b.n	8005b0c <_puts_r+0x88>
	...

08005b30 <puts>:
 8005b30:	4b02      	ldr	r3, [pc, #8]	@ (8005b3c <puts+0xc>)
 8005b32:	4601      	mov	r1, r0
 8005b34:	6818      	ldr	r0, [r3, #0]
 8005b36:	f7ff bfa5 	b.w	8005a84 <_puts_r>
 8005b3a:	bf00      	nop
 8005b3c:	20000018 	.word	0x20000018

08005b40 <memset>:
 8005b40:	4402      	add	r2, r0
 8005b42:	4603      	mov	r3, r0
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d100      	bne.n	8005b4a <memset+0xa>
 8005b48:	4770      	bx	lr
 8005b4a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b4e:	e7f9      	b.n	8005b44 <memset+0x4>

08005b50 <__errno>:
 8005b50:	4b01      	ldr	r3, [pc, #4]	@ (8005b58 <__errno+0x8>)
 8005b52:	6818      	ldr	r0, [r3, #0]
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	20000018 	.word	0x20000018

08005b5c <__libc_init_array>:
 8005b5c:	b570      	push	{r4, r5, r6, lr}
 8005b5e:	4d0d      	ldr	r5, [pc, #52]	@ (8005b94 <__libc_init_array+0x38>)
 8005b60:	4c0d      	ldr	r4, [pc, #52]	@ (8005b98 <__libc_init_array+0x3c>)
 8005b62:	1b64      	subs	r4, r4, r5
 8005b64:	10a4      	asrs	r4, r4, #2
 8005b66:	2600      	movs	r6, #0
 8005b68:	42a6      	cmp	r6, r4
 8005b6a:	d109      	bne.n	8005b80 <__libc_init_array+0x24>
 8005b6c:	4d0b      	ldr	r5, [pc, #44]	@ (8005b9c <__libc_init_array+0x40>)
 8005b6e:	4c0c      	ldr	r4, [pc, #48]	@ (8005ba0 <__libc_init_array+0x44>)
 8005b70:	f000 fe40 	bl	80067f4 <_init>
 8005b74:	1b64      	subs	r4, r4, r5
 8005b76:	10a4      	asrs	r4, r4, #2
 8005b78:	2600      	movs	r6, #0
 8005b7a:	42a6      	cmp	r6, r4
 8005b7c:	d105      	bne.n	8005b8a <__libc_init_array+0x2e>
 8005b7e:	bd70      	pop	{r4, r5, r6, pc}
 8005b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b84:	4798      	blx	r3
 8005b86:	3601      	adds	r6, #1
 8005b88:	e7ee      	b.n	8005b68 <__libc_init_array+0xc>
 8005b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b8e:	4798      	blx	r3
 8005b90:	3601      	adds	r6, #1
 8005b92:	e7f2      	b.n	8005b7a <__libc_init_array+0x1e>
 8005b94:	080068c0 	.word	0x080068c0
 8005b98:	080068c0 	.word	0x080068c0
 8005b9c:	080068c0 	.word	0x080068c0
 8005ba0:	080068c4 	.word	0x080068c4

08005ba4 <__retarget_lock_init_recursive>:
 8005ba4:	4770      	bx	lr

08005ba6 <__retarget_lock_acquire_recursive>:
 8005ba6:	4770      	bx	lr

08005ba8 <__retarget_lock_release_recursive>:
 8005ba8:	4770      	bx	lr

08005baa <__sfputc_r>:
 8005baa:	6893      	ldr	r3, [r2, #8]
 8005bac:	3b01      	subs	r3, #1
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	b410      	push	{r4}
 8005bb2:	6093      	str	r3, [r2, #8]
 8005bb4:	da08      	bge.n	8005bc8 <__sfputc_r+0x1e>
 8005bb6:	6994      	ldr	r4, [r2, #24]
 8005bb8:	42a3      	cmp	r3, r4
 8005bba:	db01      	blt.n	8005bc0 <__sfputc_r+0x16>
 8005bbc:	290a      	cmp	r1, #10
 8005bbe:	d103      	bne.n	8005bc8 <__sfputc_r+0x1e>
 8005bc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bc4:	f000 bc5d 	b.w	8006482 <__swbuf_r>
 8005bc8:	6813      	ldr	r3, [r2, #0]
 8005bca:	1c58      	adds	r0, r3, #1
 8005bcc:	6010      	str	r0, [r2, #0]
 8005bce:	7019      	strb	r1, [r3, #0]
 8005bd0:	4608      	mov	r0, r1
 8005bd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <__sfputs_r>:
 8005bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bda:	4606      	mov	r6, r0
 8005bdc:	460f      	mov	r7, r1
 8005bde:	4614      	mov	r4, r2
 8005be0:	18d5      	adds	r5, r2, r3
 8005be2:	42ac      	cmp	r4, r5
 8005be4:	d101      	bne.n	8005bea <__sfputs_r+0x12>
 8005be6:	2000      	movs	r0, #0
 8005be8:	e007      	b.n	8005bfa <__sfputs_r+0x22>
 8005bea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bee:	463a      	mov	r2, r7
 8005bf0:	4630      	mov	r0, r6
 8005bf2:	f7ff ffda 	bl	8005baa <__sfputc_r>
 8005bf6:	1c43      	adds	r3, r0, #1
 8005bf8:	d1f3      	bne.n	8005be2 <__sfputs_r+0xa>
 8005bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005bfc <_vfiprintf_r>:
 8005bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c00:	460d      	mov	r5, r1
 8005c02:	b09d      	sub	sp, #116	@ 0x74
 8005c04:	4614      	mov	r4, r2
 8005c06:	4698      	mov	r8, r3
 8005c08:	4606      	mov	r6, r0
 8005c0a:	b118      	cbz	r0, 8005c14 <_vfiprintf_r+0x18>
 8005c0c:	6a03      	ldr	r3, [r0, #32]
 8005c0e:	b90b      	cbnz	r3, 8005c14 <_vfiprintf_r+0x18>
 8005c10:	f7ff fef0 	bl	80059f4 <__sinit>
 8005c14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c16:	07d9      	lsls	r1, r3, #31
 8005c18:	d405      	bmi.n	8005c26 <_vfiprintf_r+0x2a>
 8005c1a:	89ab      	ldrh	r3, [r5, #12]
 8005c1c:	059a      	lsls	r2, r3, #22
 8005c1e:	d402      	bmi.n	8005c26 <_vfiprintf_r+0x2a>
 8005c20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c22:	f7ff ffc0 	bl	8005ba6 <__retarget_lock_acquire_recursive>
 8005c26:	89ab      	ldrh	r3, [r5, #12]
 8005c28:	071b      	lsls	r3, r3, #28
 8005c2a:	d501      	bpl.n	8005c30 <_vfiprintf_r+0x34>
 8005c2c:	692b      	ldr	r3, [r5, #16]
 8005c2e:	b99b      	cbnz	r3, 8005c58 <_vfiprintf_r+0x5c>
 8005c30:	4629      	mov	r1, r5
 8005c32:	4630      	mov	r0, r6
 8005c34:	f000 fc64 	bl	8006500 <__swsetup_r>
 8005c38:	b170      	cbz	r0, 8005c58 <_vfiprintf_r+0x5c>
 8005c3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c3c:	07dc      	lsls	r4, r3, #31
 8005c3e:	d504      	bpl.n	8005c4a <_vfiprintf_r+0x4e>
 8005c40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c44:	b01d      	add	sp, #116	@ 0x74
 8005c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c4a:	89ab      	ldrh	r3, [r5, #12]
 8005c4c:	0598      	lsls	r0, r3, #22
 8005c4e:	d4f7      	bmi.n	8005c40 <_vfiprintf_r+0x44>
 8005c50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c52:	f7ff ffa9 	bl	8005ba8 <__retarget_lock_release_recursive>
 8005c56:	e7f3      	b.n	8005c40 <_vfiprintf_r+0x44>
 8005c58:	2300      	movs	r3, #0
 8005c5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c5c:	2320      	movs	r3, #32
 8005c5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005c62:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c66:	2330      	movs	r3, #48	@ 0x30
 8005c68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005e18 <_vfiprintf_r+0x21c>
 8005c6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005c70:	f04f 0901 	mov.w	r9, #1
 8005c74:	4623      	mov	r3, r4
 8005c76:	469a      	mov	sl, r3
 8005c78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c7c:	b10a      	cbz	r2, 8005c82 <_vfiprintf_r+0x86>
 8005c7e:	2a25      	cmp	r2, #37	@ 0x25
 8005c80:	d1f9      	bne.n	8005c76 <_vfiprintf_r+0x7a>
 8005c82:	ebba 0b04 	subs.w	fp, sl, r4
 8005c86:	d00b      	beq.n	8005ca0 <_vfiprintf_r+0xa4>
 8005c88:	465b      	mov	r3, fp
 8005c8a:	4622      	mov	r2, r4
 8005c8c:	4629      	mov	r1, r5
 8005c8e:	4630      	mov	r0, r6
 8005c90:	f7ff ffa2 	bl	8005bd8 <__sfputs_r>
 8005c94:	3001      	adds	r0, #1
 8005c96:	f000 80a7 	beq.w	8005de8 <_vfiprintf_r+0x1ec>
 8005c9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c9c:	445a      	add	r2, fp
 8005c9e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ca0:	f89a 3000 	ldrb.w	r3, [sl]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f000 809f 	beq.w	8005de8 <_vfiprintf_r+0x1ec>
 8005caa:	2300      	movs	r3, #0
 8005cac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005cb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cb4:	f10a 0a01 	add.w	sl, sl, #1
 8005cb8:	9304      	str	r3, [sp, #16]
 8005cba:	9307      	str	r3, [sp, #28]
 8005cbc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005cc0:	931a      	str	r3, [sp, #104]	@ 0x68
 8005cc2:	4654      	mov	r4, sl
 8005cc4:	2205      	movs	r2, #5
 8005cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cca:	4853      	ldr	r0, [pc, #332]	@ (8005e18 <_vfiprintf_r+0x21c>)
 8005ccc:	f7fa faa8 	bl	8000220 <memchr>
 8005cd0:	9a04      	ldr	r2, [sp, #16]
 8005cd2:	b9d8      	cbnz	r0, 8005d0c <_vfiprintf_r+0x110>
 8005cd4:	06d1      	lsls	r1, r2, #27
 8005cd6:	bf44      	itt	mi
 8005cd8:	2320      	movmi	r3, #32
 8005cda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005cde:	0713      	lsls	r3, r2, #28
 8005ce0:	bf44      	itt	mi
 8005ce2:	232b      	movmi	r3, #43	@ 0x2b
 8005ce4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ce8:	f89a 3000 	ldrb.w	r3, [sl]
 8005cec:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cee:	d015      	beq.n	8005d1c <_vfiprintf_r+0x120>
 8005cf0:	9a07      	ldr	r2, [sp, #28]
 8005cf2:	4654      	mov	r4, sl
 8005cf4:	2000      	movs	r0, #0
 8005cf6:	f04f 0c0a 	mov.w	ip, #10
 8005cfa:	4621      	mov	r1, r4
 8005cfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d00:	3b30      	subs	r3, #48	@ 0x30
 8005d02:	2b09      	cmp	r3, #9
 8005d04:	d94b      	bls.n	8005d9e <_vfiprintf_r+0x1a2>
 8005d06:	b1b0      	cbz	r0, 8005d36 <_vfiprintf_r+0x13a>
 8005d08:	9207      	str	r2, [sp, #28]
 8005d0a:	e014      	b.n	8005d36 <_vfiprintf_r+0x13a>
 8005d0c:	eba0 0308 	sub.w	r3, r0, r8
 8005d10:	fa09 f303 	lsl.w	r3, r9, r3
 8005d14:	4313      	orrs	r3, r2
 8005d16:	9304      	str	r3, [sp, #16]
 8005d18:	46a2      	mov	sl, r4
 8005d1a:	e7d2      	b.n	8005cc2 <_vfiprintf_r+0xc6>
 8005d1c:	9b03      	ldr	r3, [sp, #12]
 8005d1e:	1d19      	adds	r1, r3, #4
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	9103      	str	r1, [sp, #12]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	bfbb      	ittet	lt
 8005d28:	425b      	neglt	r3, r3
 8005d2a:	f042 0202 	orrlt.w	r2, r2, #2
 8005d2e:	9307      	strge	r3, [sp, #28]
 8005d30:	9307      	strlt	r3, [sp, #28]
 8005d32:	bfb8      	it	lt
 8005d34:	9204      	strlt	r2, [sp, #16]
 8005d36:	7823      	ldrb	r3, [r4, #0]
 8005d38:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d3a:	d10a      	bne.n	8005d52 <_vfiprintf_r+0x156>
 8005d3c:	7863      	ldrb	r3, [r4, #1]
 8005d3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d40:	d132      	bne.n	8005da8 <_vfiprintf_r+0x1ac>
 8005d42:	9b03      	ldr	r3, [sp, #12]
 8005d44:	1d1a      	adds	r2, r3, #4
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	9203      	str	r2, [sp, #12]
 8005d4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d4e:	3402      	adds	r4, #2
 8005d50:	9305      	str	r3, [sp, #20]
 8005d52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005e28 <_vfiprintf_r+0x22c>
 8005d56:	7821      	ldrb	r1, [r4, #0]
 8005d58:	2203      	movs	r2, #3
 8005d5a:	4650      	mov	r0, sl
 8005d5c:	f7fa fa60 	bl	8000220 <memchr>
 8005d60:	b138      	cbz	r0, 8005d72 <_vfiprintf_r+0x176>
 8005d62:	9b04      	ldr	r3, [sp, #16]
 8005d64:	eba0 000a 	sub.w	r0, r0, sl
 8005d68:	2240      	movs	r2, #64	@ 0x40
 8005d6a:	4082      	lsls	r2, r0
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	3401      	adds	r4, #1
 8005d70:	9304      	str	r3, [sp, #16]
 8005d72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d76:	4829      	ldr	r0, [pc, #164]	@ (8005e1c <_vfiprintf_r+0x220>)
 8005d78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005d7c:	2206      	movs	r2, #6
 8005d7e:	f7fa fa4f 	bl	8000220 <memchr>
 8005d82:	2800      	cmp	r0, #0
 8005d84:	d03f      	beq.n	8005e06 <_vfiprintf_r+0x20a>
 8005d86:	4b26      	ldr	r3, [pc, #152]	@ (8005e20 <_vfiprintf_r+0x224>)
 8005d88:	bb1b      	cbnz	r3, 8005dd2 <_vfiprintf_r+0x1d6>
 8005d8a:	9b03      	ldr	r3, [sp, #12]
 8005d8c:	3307      	adds	r3, #7
 8005d8e:	f023 0307 	bic.w	r3, r3, #7
 8005d92:	3308      	adds	r3, #8
 8005d94:	9303      	str	r3, [sp, #12]
 8005d96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d98:	443b      	add	r3, r7
 8005d9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d9c:	e76a      	b.n	8005c74 <_vfiprintf_r+0x78>
 8005d9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005da2:	460c      	mov	r4, r1
 8005da4:	2001      	movs	r0, #1
 8005da6:	e7a8      	b.n	8005cfa <_vfiprintf_r+0xfe>
 8005da8:	2300      	movs	r3, #0
 8005daa:	3401      	adds	r4, #1
 8005dac:	9305      	str	r3, [sp, #20]
 8005dae:	4619      	mov	r1, r3
 8005db0:	f04f 0c0a 	mov.w	ip, #10
 8005db4:	4620      	mov	r0, r4
 8005db6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005dba:	3a30      	subs	r2, #48	@ 0x30
 8005dbc:	2a09      	cmp	r2, #9
 8005dbe:	d903      	bls.n	8005dc8 <_vfiprintf_r+0x1cc>
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d0c6      	beq.n	8005d52 <_vfiprintf_r+0x156>
 8005dc4:	9105      	str	r1, [sp, #20]
 8005dc6:	e7c4      	b.n	8005d52 <_vfiprintf_r+0x156>
 8005dc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005dcc:	4604      	mov	r4, r0
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e7f0      	b.n	8005db4 <_vfiprintf_r+0x1b8>
 8005dd2:	ab03      	add	r3, sp, #12
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	462a      	mov	r2, r5
 8005dd8:	4b12      	ldr	r3, [pc, #72]	@ (8005e24 <_vfiprintf_r+0x228>)
 8005dda:	a904      	add	r1, sp, #16
 8005ddc:	4630      	mov	r0, r6
 8005dde:	f3af 8000 	nop.w
 8005de2:	4607      	mov	r7, r0
 8005de4:	1c78      	adds	r0, r7, #1
 8005de6:	d1d6      	bne.n	8005d96 <_vfiprintf_r+0x19a>
 8005de8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005dea:	07d9      	lsls	r1, r3, #31
 8005dec:	d405      	bmi.n	8005dfa <_vfiprintf_r+0x1fe>
 8005dee:	89ab      	ldrh	r3, [r5, #12]
 8005df0:	059a      	lsls	r2, r3, #22
 8005df2:	d402      	bmi.n	8005dfa <_vfiprintf_r+0x1fe>
 8005df4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005df6:	f7ff fed7 	bl	8005ba8 <__retarget_lock_release_recursive>
 8005dfa:	89ab      	ldrh	r3, [r5, #12]
 8005dfc:	065b      	lsls	r3, r3, #25
 8005dfe:	f53f af1f 	bmi.w	8005c40 <_vfiprintf_r+0x44>
 8005e02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e04:	e71e      	b.n	8005c44 <_vfiprintf_r+0x48>
 8005e06:	ab03      	add	r3, sp, #12
 8005e08:	9300      	str	r3, [sp, #0]
 8005e0a:	462a      	mov	r2, r5
 8005e0c:	4b05      	ldr	r3, [pc, #20]	@ (8005e24 <_vfiprintf_r+0x228>)
 8005e0e:	a904      	add	r1, sp, #16
 8005e10:	4630      	mov	r0, r6
 8005e12:	f000 f91b 	bl	800604c <_printf_i>
 8005e16:	e7e4      	b.n	8005de2 <_vfiprintf_r+0x1e6>
 8005e18:	08006884 	.word	0x08006884
 8005e1c:	0800688e 	.word	0x0800688e
 8005e20:	00000000 	.word	0x00000000
 8005e24:	08005bd9 	.word	0x08005bd9
 8005e28:	0800688a 	.word	0x0800688a

08005e2c <sbrk_aligned>:
 8005e2c:	b570      	push	{r4, r5, r6, lr}
 8005e2e:	4e0f      	ldr	r6, [pc, #60]	@ (8005e6c <sbrk_aligned+0x40>)
 8005e30:	460c      	mov	r4, r1
 8005e32:	6831      	ldr	r1, [r6, #0]
 8005e34:	4605      	mov	r5, r0
 8005e36:	b911      	cbnz	r1, 8005e3e <sbrk_aligned+0x12>
 8005e38:	f000 fc70 	bl	800671c <_sbrk_r>
 8005e3c:	6030      	str	r0, [r6, #0]
 8005e3e:	4621      	mov	r1, r4
 8005e40:	4628      	mov	r0, r5
 8005e42:	f000 fc6b 	bl	800671c <_sbrk_r>
 8005e46:	1c43      	adds	r3, r0, #1
 8005e48:	d103      	bne.n	8005e52 <sbrk_aligned+0x26>
 8005e4a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005e4e:	4620      	mov	r0, r4
 8005e50:	bd70      	pop	{r4, r5, r6, pc}
 8005e52:	1cc4      	adds	r4, r0, #3
 8005e54:	f024 0403 	bic.w	r4, r4, #3
 8005e58:	42a0      	cmp	r0, r4
 8005e5a:	d0f8      	beq.n	8005e4e <sbrk_aligned+0x22>
 8005e5c:	1a21      	subs	r1, r4, r0
 8005e5e:	4628      	mov	r0, r5
 8005e60:	f000 fc5c 	bl	800671c <_sbrk_r>
 8005e64:	3001      	adds	r0, #1
 8005e66:	d1f2      	bne.n	8005e4e <sbrk_aligned+0x22>
 8005e68:	e7ef      	b.n	8005e4a <sbrk_aligned+0x1e>
 8005e6a:	bf00      	nop
 8005e6c:	2000046c 	.word	0x2000046c

08005e70 <_malloc_r>:
 8005e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e74:	1ccd      	adds	r5, r1, #3
 8005e76:	f025 0503 	bic.w	r5, r5, #3
 8005e7a:	3508      	adds	r5, #8
 8005e7c:	2d0c      	cmp	r5, #12
 8005e7e:	bf38      	it	cc
 8005e80:	250c      	movcc	r5, #12
 8005e82:	2d00      	cmp	r5, #0
 8005e84:	4606      	mov	r6, r0
 8005e86:	db01      	blt.n	8005e8c <_malloc_r+0x1c>
 8005e88:	42a9      	cmp	r1, r5
 8005e8a:	d904      	bls.n	8005e96 <_malloc_r+0x26>
 8005e8c:	230c      	movs	r3, #12
 8005e8e:	6033      	str	r3, [r6, #0]
 8005e90:	2000      	movs	r0, #0
 8005e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005f6c <_malloc_r+0xfc>
 8005e9a:	f000 faa3 	bl	80063e4 <__malloc_lock>
 8005e9e:	f8d8 3000 	ldr.w	r3, [r8]
 8005ea2:	461c      	mov	r4, r3
 8005ea4:	bb44      	cbnz	r4, 8005ef8 <_malloc_r+0x88>
 8005ea6:	4629      	mov	r1, r5
 8005ea8:	4630      	mov	r0, r6
 8005eaa:	f7ff ffbf 	bl	8005e2c <sbrk_aligned>
 8005eae:	1c43      	adds	r3, r0, #1
 8005eb0:	4604      	mov	r4, r0
 8005eb2:	d158      	bne.n	8005f66 <_malloc_r+0xf6>
 8005eb4:	f8d8 4000 	ldr.w	r4, [r8]
 8005eb8:	4627      	mov	r7, r4
 8005eba:	2f00      	cmp	r7, #0
 8005ebc:	d143      	bne.n	8005f46 <_malloc_r+0xd6>
 8005ebe:	2c00      	cmp	r4, #0
 8005ec0:	d04b      	beq.n	8005f5a <_malloc_r+0xea>
 8005ec2:	6823      	ldr	r3, [r4, #0]
 8005ec4:	4639      	mov	r1, r7
 8005ec6:	4630      	mov	r0, r6
 8005ec8:	eb04 0903 	add.w	r9, r4, r3
 8005ecc:	f000 fc26 	bl	800671c <_sbrk_r>
 8005ed0:	4581      	cmp	r9, r0
 8005ed2:	d142      	bne.n	8005f5a <_malloc_r+0xea>
 8005ed4:	6821      	ldr	r1, [r4, #0]
 8005ed6:	1a6d      	subs	r5, r5, r1
 8005ed8:	4629      	mov	r1, r5
 8005eda:	4630      	mov	r0, r6
 8005edc:	f7ff ffa6 	bl	8005e2c <sbrk_aligned>
 8005ee0:	3001      	adds	r0, #1
 8005ee2:	d03a      	beq.n	8005f5a <_malloc_r+0xea>
 8005ee4:	6823      	ldr	r3, [r4, #0]
 8005ee6:	442b      	add	r3, r5
 8005ee8:	6023      	str	r3, [r4, #0]
 8005eea:	f8d8 3000 	ldr.w	r3, [r8]
 8005eee:	685a      	ldr	r2, [r3, #4]
 8005ef0:	bb62      	cbnz	r2, 8005f4c <_malloc_r+0xdc>
 8005ef2:	f8c8 7000 	str.w	r7, [r8]
 8005ef6:	e00f      	b.n	8005f18 <_malloc_r+0xa8>
 8005ef8:	6822      	ldr	r2, [r4, #0]
 8005efa:	1b52      	subs	r2, r2, r5
 8005efc:	d420      	bmi.n	8005f40 <_malloc_r+0xd0>
 8005efe:	2a0b      	cmp	r2, #11
 8005f00:	d917      	bls.n	8005f32 <_malloc_r+0xc2>
 8005f02:	1961      	adds	r1, r4, r5
 8005f04:	42a3      	cmp	r3, r4
 8005f06:	6025      	str	r5, [r4, #0]
 8005f08:	bf18      	it	ne
 8005f0a:	6059      	strne	r1, [r3, #4]
 8005f0c:	6863      	ldr	r3, [r4, #4]
 8005f0e:	bf08      	it	eq
 8005f10:	f8c8 1000 	streq.w	r1, [r8]
 8005f14:	5162      	str	r2, [r4, r5]
 8005f16:	604b      	str	r3, [r1, #4]
 8005f18:	4630      	mov	r0, r6
 8005f1a:	f000 fa69 	bl	80063f0 <__malloc_unlock>
 8005f1e:	f104 000b 	add.w	r0, r4, #11
 8005f22:	1d23      	adds	r3, r4, #4
 8005f24:	f020 0007 	bic.w	r0, r0, #7
 8005f28:	1ac2      	subs	r2, r0, r3
 8005f2a:	bf1c      	itt	ne
 8005f2c:	1a1b      	subne	r3, r3, r0
 8005f2e:	50a3      	strne	r3, [r4, r2]
 8005f30:	e7af      	b.n	8005e92 <_malloc_r+0x22>
 8005f32:	6862      	ldr	r2, [r4, #4]
 8005f34:	42a3      	cmp	r3, r4
 8005f36:	bf0c      	ite	eq
 8005f38:	f8c8 2000 	streq.w	r2, [r8]
 8005f3c:	605a      	strne	r2, [r3, #4]
 8005f3e:	e7eb      	b.n	8005f18 <_malloc_r+0xa8>
 8005f40:	4623      	mov	r3, r4
 8005f42:	6864      	ldr	r4, [r4, #4]
 8005f44:	e7ae      	b.n	8005ea4 <_malloc_r+0x34>
 8005f46:	463c      	mov	r4, r7
 8005f48:	687f      	ldr	r7, [r7, #4]
 8005f4a:	e7b6      	b.n	8005eba <_malloc_r+0x4a>
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	42a3      	cmp	r3, r4
 8005f52:	d1fb      	bne.n	8005f4c <_malloc_r+0xdc>
 8005f54:	2300      	movs	r3, #0
 8005f56:	6053      	str	r3, [r2, #4]
 8005f58:	e7de      	b.n	8005f18 <_malloc_r+0xa8>
 8005f5a:	230c      	movs	r3, #12
 8005f5c:	6033      	str	r3, [r6, #0]
 8005f5e:	4630      	mov	r0, r6
 8005f60:	f000 fa46 	bl	80063f0 <__malloc_unlock>
 8005f64:	e794      	b.n	8005e90 <_malloc_r+0x20>
 8005f66:	6005      	str	r5, [r0, #0]
 8005f68:	e7d6      	b.n	8005f18 <_malloc_r+0xa8>
 8005f6a:	bf00      	nop
 8005f6c:	20000470 	.word	0x20000470

08005f70 <_printf_common>:
 8005f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f74:	4616      	mov	r6, r2
 8005f76:	4698      	mov	r8, r3
 8005f78:	688a      	ldr	r2, [r1, #8]
 8005f7a:	690b      	ldr	r3, [r1, #16]
 8005f7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f80:	4293      	cmp	r3, r2
 8005f82:	bfb8      	it	lt
 8005f84:	4613      	movlt	r3, r2
 8005f86:	6033      	str	r3, [r6, #0]
 8005f88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f8c:	4607      	mov	r7, r0
 8005f8e:	460c      	mov	r4, r1
 8005f90:	b10a      	cbz	r2, 8005f96 <_printf_common+0x26>
 8005f92:	3301      	adds	r3, #1
 8005f94:	6033      	str	r3, [r6, #0]
 8005f96:	6823      	ldr	r3, [r4, #0]
 8005f98:	0699      	lsls	r1, r3, #26
 8005f9a:	bf42      	ittt	mi
 8005f9c:	6833      	ldrmi	r3, [r6, #0]
 8005f9e:	3302      	addmi	r3, #2
 8005fa0:	6033      	strmi	r3, [r6, #0]
 8005fa2:	6825      	ldr	r5, [r4, #0]
 8005fa4:	f015 0506 	ands.w	r5, r5, #6
 8005fa8:	d106      	bne.n	8005fb8 <_printf_common+0x48>
 8005faa:	f104 0a19 	add.w	sl, r4, #25
 8005fae:	68e3      	ldr	r3, [r4, #12]
 8005fb0:	6832      	ldr	r2, [r6, #0]
 8005fb2:	1a9b      	subs	r3, r3, r2
 8005fb4:	42ab      	cmp	r3, r5
 8005fb6:	dc26      	bgt.n	8006006 <_printf_common+0x96>
 8005fb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005fbc:	6822      	ldr	r2, [r4, #0]
 8005fbe:	3b00      	subs	r3, #0
 8005fc0:	bf18      	it	ne
 8005fc2:	2301      	movne	r3, #1
 8005fc4:	0692      	lsls	r2, r2, #26
 8005fc6:	d42b      	bmi.n	8006020 <_printf_common+0xb0>
 8005fc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005fcc:	4641      	mov	r1, r8
 8005fce:	4638      	mov	r0, r7
 8005fd0:	47c8      	blx	r9
 8005fd2:	3001      	adds	r0, #1
 8005fd4:	d01e      	beq.n	8006014 <_printf_common+0xa4>
 8005fd6:	6823      	ldr	r3, [r4, #0]
 8005fd8:	6922      	ldr	r2, [r4, #16]
 8005fda:	f003 0306 	and.w	r3, r3, #6
 8005fde:	2b04      	cmp	r3, #4
 8005fe0:	bf02      	ittt	eq
 8005fe2:	68e5      	ldreq	r5, [r4, #12]
 8005fe4:	6833      	ldreq	r3, [r6, #0]
 8005fe6:	1aed      	subeq	r5, r5, r3
 8005fe8:	68a3      	ldr	r3, [r4, #8]
 8005fea:	bf0c      	ite	eq
 8005fec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ff0:	2500      	movne	r5, #0
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	bfc4      	itt	gt
 8005ff6:	1a9b      	subgt	r3, r3, r2
 8005ff8:	18ed      	addgt	r5, r5, r3
 8005ffa:	2600      	movs	r6, #0
 8005ffc:	341a      	adds	r4, #26
 8005ffe:	42b5      	cmp	r5, r6
 8006000:	d11a      	bne.n	8006038 <_printf_common+0xc8>
 8006002:	2000      	movs	r0, #0
 8006004:	e008      	b.n	8006018 <_printf_common+0xa8>
 8006006:	2301      	movs	r3, #1
 8006008:	4652      	mov	r2, sl
 800600a:	4641      	mov	r1, r8
 800600c:	4638      	mov	r0, r7
 800600e:	47c8      	blx	r9
 8006010:	3001      	adds	r0, #1
 8006012:	d103      	bne.n	800601c <_printf_common+0xac>
 8006014:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800601c:	3501      	adds	r5, #1
 800601e:	e7c6      	b.n	8005fae <_printf_common+0x3e>
 8006020:	18e1      	adds	r1, r4, r3
 8006022:	1c5a      	adds	r2, r3, #1
 8006024:	2030      	movs	r0, #48	@ 0x30
 8006026:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800602a:	4422      	add	r2, r4
 800602c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006030:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006034:	3302      	adds	r3, #2
 8006036:	e7c7      	b.n	8005fc8 <_printf_common+0x58>
 8006038:	2301      	movs	r3, #1
 800603a:	4622      	mov	r2, r4
 800603c:	4641      	mov	r1, r8
 800603e:	4638      	mov	r0, r7
 8006040:	47c8      	blx	r9
 8006042:	3001      	adds	r0, #1
 8006044:	d0e6      	beq.n	8006014 <_printf_common+0xa4>
 8006046:	3601      	adds	r6, #1
 8006048:	e7d9      	b.n	8005ffe <_printf_common+0x8e>
	...

0800604c <_printf_i>:
 800604c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006050:	7e0f      	ldrb	r7, [r1, #24]
 8006052:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006054:	2f78      	cmp	r7, #120	@ 0x78
 8006056:	4691      	mov	r9, r2
 8006058:	4680      	mov	r8, r0
 800605a:	460c      	mov	r4, r1
 800605c:	469a      	mov	sl, r3
 800605e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006062:	d807      	bhi.n	8006074 <_printf_i+0x28>
 8006064:	2f62      	cmp	r7, #98	@ 0x62
 8006066:	d80a      	bhi.n	800607e <_printf_i+0x32>
 8006068:	2f00      	cmp	r7, #0
 800606a:	f000 80d2 	beq.w	8006212 <_printf_i+0x1c6>
 800606e:	2f58      	cmp	r7, #88	@ 0x58
 8006070:	f000 80b9 	beq.w	80061e6 <_printf_i+0x19a>
 8006074:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006078:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800607c:	e03a      	b.n	80060f4 <_printf_i+0xa8>
 800607e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006082:	2b15      	cmp	r3, #21
 8006084:	d8f6      	bhi.n	8006074 <_printf_i+0x28>
 8006086:	a101      	add	r1, pc, #4	@ (adr r1, 800608c <_printf_i+0x40>)
 8006088:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800608c:	080060e5 	.word	0x080060e5
 8006090:	080060f9 	.word	0x080060f9
 8006094:	08006075 	.word	0x08006075
 8006098:	08006075 	.word	0x08006075
 800609c:	08006075 	.word	0x08006075
 80060a0:	08006075 	.word	0x08006075
 80060a4:	080060f9 	.word	0x080060f9
 80060a8:	08006075 	.word	0x08006075
 80060ac:	08006075 	.word	0x08006075
 80060b0:	08006075 	.word	0x08006075
 80060b4:	08006075 	.word	0x08006075
 80060b8:	080061f9 	.word	0x080061f9
 80060bc:	08006123 	.word	0x08006123
 80060c0:	080061b3 	.word	0x080061b3
 80060c4:	08006075 	.word	0x08006075
 80060c8:	08006075 	.word	0x08006075
 80060cc:	0800621b 	.word	0x0800621b
 80060d0:	08006075 	.word	0x08006075
 80060d4:	08006123 	.word	0x08006123
 80060d8:	08006075 	.word	0x08006075
 80060dc:	08006075 	.word	0x08006075
 80060e0:	080061bb 	.word	0x080061bb
 80060e4:	6833      	ldr	r3, [r6, #0]
 80060e6:	1d1a      	adds	r2, r3, #4
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6032      	str	r2, [r6, #0]
 80060ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80060f4:	2301      	movs	r3, #1
 80060f6:	e09d      	b.n	8006234 <_printf_i+0x1e8>
 80060f8:	6833      	ldr	r3, [r6, #0]
 80060fa:	6820      	ldr	r0, [r4, #0]
 80060fc:	1d19      	adds	r1, r3, #4
 80060fe:	6031      	str	r1, [r6, #0]
 8006100:	0606      	lsls	r6, r0, #24
 8006102:	d501      	bpl.n	8006108 <_printf_i+0xbc>
 8006104:	681d      	ldr	r5, [r3, #0]
 8006106:	e003      	b.n	8006110 <_printf_i+0xc4>
 8006108:	0645      	lsls	r5, r0, #25
 800610a:	d5fb      	bpl.n	8006104 <_printf_i+0xb8>
 800610c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006110:	2d00      	cmp	r5, #0
 8006112:	da03      	bge.n	800611c <_printf_i+0xd0>
 8006114:	232d      	movs	r3, #45	@ 0x2d
 8006116:	426d      	negs	r5, r5
 8006118:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800611c:	4859      	ldr	r0, [pc, #356]	@ (8006284 <_printf_i+0x238>)
 800611e:	230a      	movs	r3, #10
 8006120:	e011      	b.n	8006146 <_printf_i+0xfa>
 8006122:	6821      	ldr	r1, [r4, #0]
 8006124:	6833      	ldr	r3, [r6, #0]
 8006126:	0608      	lsls	r0, r1, #24
 8006128:	f853 5b04 	ldr.w	r5, [r3], #4
 800612c:	d402      	bmi.n	8006134 <_printf_i+0xe8>
 800612e:	0649      	lsls	r1, r1, #25
 8006130:	bf48      	it	mi
 8006132:	b2ad      	uxthmi	r5, r5
 8006134:	2f6f      	cmp	r7, #111	@ 0x6f
 8006136:	4853      	ldr	r0, [pc, #332]	@ (8006284 <_printf_i+0x238>)
 8006138:	6033      	str	r3, [r6, #0]
 800613a:	bf14      	ite	ne
 800613c:	230a      	movne	r3, #10
 800613e:	2308      	moveq	r3, #8
 8006140:	2100      	movs	r1, #0
 8006142:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006146:	6866      	ldr	r6, [r4, #4]
 8006148:	60a6      	str	r6, [r4, #8]
 800614a:	2e00      	cmp	r6, #0
 800614c:	bfa2      	ittt	ge
 800614e:	6821      	ldrge	r1, [r4, #0]
 8006150:	f021 0104 	bicge.w	r1, r1, #4
 8006154:	6021      	strge	r1, [r4, #0]
 8006156:	b90d      	cbnz	r5, 800615c <_printf_i+0x110>
 8006158:	2e00      	cmp	r6, #0
 800615a:	d04b      	beq.n	80061f4 <_printf_i+0x1a8>
 800615c:	4616      	mov	r6, r2
 800615e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006162:	fb03 5711 	mls	r7, r3, r1, r5
 8006166:	5dc7      	ldrb	r7, [r0, r7]
 8006168:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800616c:	462f      	mov	r7, r5
 800616e:	42bb      	cmp	r3, r7
 8006170:	460d      	mov	r5, r1
 8006172:	d9f4      	bls.n	800615e <_printf_i+0x112>
 8006174:	2b08      	cmp	r3, #8
 8006176:	d10b      	bne.n	8006190 <_printf_i+0x144>
 8006178:	6823      	ldr	r3, [r4, #0]
 800617a:	07df      	lsls	r7, r3, #31
 800617c:	d508      	bpl.n	8006190 <_printf_i+0x144>
 800617e:	6923      	ldr	r3, [r4, #16]
 8006180:	6861      	ldr	r1, [r4, #4]
 8006182:	4299      	cmp	r1, r3
 8006184:	bfde      	ittt	le
 8006186:	2330      	movle	r3, #48	@ 0x30
 8006188:	f806 3c01 	strble.w	r3, [r6, #-1]
 800618c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006190:	1b92      	subs	r2, r2, r6
 8006192:	6122      	str	r2, [r4, #16]
 8006194:	f8cd a000 	str.w	sl, [sp]
 8006198:	464b      	mov	r3, r9
 800619a:	aa03      	add	r2, sp, #12
 800619c:	4621      	mov	r1, r4
 800619e:	4640      	mov	r0, r8
 80061a0:	f7ff fee6 	bl	8005f70 <_printf_common>
 80061a4:	3001      	adds	r0, #1
 80061a6:	d14a      	bne.n	800623e <_printf_i+0x1f2>
 80061a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80061ac:	b004      	add	sp, #16
 80061ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061b2:	6823      	ldr	r3, [r4, #0]
 80061b4:	f043 0320 	orr.w	r3, r3, #32
 80061b8:	6023      	str	r3, [r4, #0]
 80061ba:	4833      	ldr	r0, [pc, #204]	@ (8006288 <_printf_i+0x23c>)
 80061bc:	2778      	movs	r7, #120	@ 0x78
 80061be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80061c2:	6823      	ldr	r3, [r4, #0]
 80061c4:	6831      	ldr	r1, [r6, #0]
 80061c6:	061f      	lsls	r7, r3, #24
 80061c8:	f851 5b04 	ldr.w	r5, [r1], #4
 80061cc:	d402      	bmi.n	80061d4 <_printf_i+0x188>
 80061ce:	065f      	lsls	r7, r3, #25
 80061d0:	bf48      	it	mi
 80061d2:	b2ad      	uxthmi	r5, r5
 80061d4:	6031      	str	r1, [r6, #0]
 80061d6:	07d9      	lsls	r1, r3, #31
 80061d8:	bf44      	itt	mi
 80061da:	f043 0320 	orrmi.w	r3, r3, #32
 80061de:	6023      	strmi	r3, [r4, #0]
 80061e0:	b11d      	cbz	r5, 80061ea <_printf_i+0x19e>
 80061e2:	2310      	movs	r3, #16
 80061e4:	e7ac      	b.n	8006140 <_printf_i+0xf4>
 80061e6:	4827      	ldr	r0, [pc, #156]	@ (8006284 <_printf_i+0x238>)
 80061e8:	e7e9      	b.n	80061be <_printf_i+0x172>
 80061ea:	6823      	ldr	r3, [r4, #0]
 80061ec:	f023 0320 	bic.w	r3, r3, #32
 80061f0:	6023      	str	r3, [r4, #0]
 80061f2:	e7f6      	b.n	80061e2 <_printf_i+0x196>
 80061f4:	4616      	mov	r6, r2
 80061f6:	e7bd      	b.n	8006174 <_printf_i+0x128>
 80061f8:	6833      	ldr	r3, [r6, #0]
 80061fa:	6825      	ldr	r5, [r4, #0]
 80061fc:	6961      	ldr	r1, [r4, #20]
 80061fe:	1d18      	adds	r0, r3, #4
 8006200:	6030      	str	r0, [r6, #0]
 8006202:	062e      	lsls	r6, r5, #24
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	d501      	bpl.n	800620c <_printf_i+0x1c0>
 8006208:	6019      	str	r1, [r3, #0]
 800620a:	e002      	b.n	8006212 <_printf_i+0x1c6>
 800620c:	0668      	lsls	r0, r5, #25
 800620e:	d5fb      	bpl.n	8006208 <_printf_i+0x1bc>
 8006210:	8019      	strh	r1, [r3, #0]
 8006212:	2300      	movs	r3, #0
 8006214:	6123      	str	r3, [r4, #16]
 8006216:	4616      	mov	r6, r2
 8006218:	e7bc      	b.n	8006194 <_printf_i+0x148>
 800621a:	6833      	ldr	r3, [r6, #0]
 800621c:	1d1a      	adds	r2, r3, #4
 800621e:	6032      	str	r2, [r6, #0]
 8006220:	681e      	ldr	r6, [r3, #0]
 8006222:	6862      	ldr	r2, [r4, #4]
 8006224:	2100      	movs	r1, #0
 8006226:	4630      	mov	r0, r6
 8006228:	f7f9 fffa 	bl	8000220 <memchr>
 800622c:	b108      	cbz	r0, 8006232 <_printf_i+0x1e6>
 800622e:	1b80      	subs	r0, r0, r6
 8006230:	6060      	str	r0, [r4, #4]
 8006232:	6863      	ldr	r3, [r4, #4]
 8006234:	6123      	str	r3, [r4, #16]
 8006236:	2300      	movs	r3, #0
 8006238:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800623c:	e7aa      	b.n	8006194 <_printf_i+0x148>
 800623e:	6923      	ldr	r3, [r4, #16]
 8006240:	4632      	mov	r2, r6
 8006242:	4649      	mov	r1, r9
 8006244:	4640      	mov	r0, r8
 8006246:	47d0      	blx	sl
 8006248:	3001      	adds	r0, #1
 800624a:	d0ad      	beq.n	80061a8 <_printf_i+0x15c>
 800624c:	6823      	ldr	r3, [r4, #0]
 800624e:	079b      	lsls	r3, r3, #30
 8006250:	d413      	bmi.n	800627a <_printf_i+0x22e>
 8006252:	68e0      	ldr	r0, [r4, #12]
 8006254:	9b03      	ldr	r3, [sp, #12]
 8006256:	4298      	cmp	r0, r3
 8006258:	bfb8      	it	lt
 800625a:	4618      	movlt	r0, r3
 800625c:	e7a6      	b.n	80061ac <_printf_i+0x160>
 800625e:	2301      	movs	r3, #1
 8006260:	4632      	mov	r2, r6
 8006262:	4649      	mov	r1, r9
 8006264:	4640      	mov	r0, r8
 8006266:	47d0      	blx	sl
 8006268:	3001      	adds	r0, #1
 800626a:	d09d      	beq.n	80061a8 <_printf_i+0x15c>
 800626c:	3501      	adds	r5, #1
 800626e:	68e3      	ldr	r3, [r4, #12]
 8006270:	9903      	ldr	r1, [sp, #12]
 8006272:	1a5b      	subs	r3, r3, r1
 8006274:	42ab      	cmp	r3, r5
 8006276:	dcf2      	bgt.n	800625e <_printf_i+0x212>
 8006278:	e7eb      	b.n	8006252 <_printf_i+0x206>
 800627a:	2500      	movs	r5, #0
 800627c:	f104 0619 	add.w	r6, r4, #25
 8006280:	e7f5      	b.n	800626e <_printf_i+0x222>
 8006282:	bf00      	nop
 8006284:	08006895 	.word	0x08006895
 8006288:	080068a6 	.word	0x080068a6

0800628c <__sflush_r>:
 800628c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006294:	0716      	lsls	r6, r2, #28
 8006296:	4605      	mov	r5, r0
 8006298:	460c      	mov	r4, r1
 800629a:	d454      	bmi.n	8006346 <__sflush_r+0xba>
 800629c:	684b      	ldr	r3, [r1, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	dc02      	bgt.n	80062a8 <__sflush_r+0x1c>
 80062a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	dd48      	ble.n	800633a <__sflush_r+0xae>
 80062a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80062aa:	2e00      	cmp	r6, #0
 80062ac:	d045      	beq.n	800633a <__sflush_r+0xae>
 80062ae:	2300      	movs	r3, #0
 80062b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80062b4:	682f      	ldr	r7, [r5, #0]
 80062b6:	6a21      	ldr	r1, [r4, #32]
 80062b8:	602b      	str	r3, [r5, #0]
 80062ba:	d030      	beq.n	800631e <__sflush_r+0x92>
 80062bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80062be:	89a3      	ldrh	r3, [r4, #12]
 80062c0:	0759      	lsls	r1, r3, #29
 80062c2:	d505      	bpl.n	80062d0 <__sflush_r+0x44>
 80062c4:	6863      	ldr	r3, [r4, #4]
 80062c6:	1ad2      	subs	r2, r2, r3
 80062c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80062ca:	b10b      	cbz	r3, 80062d0 <__sflush_r+0x44>
 80062cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80062ce:	1ad2      	subs	r2, r2, r3
 80062d0:	2300      	movs	r3, #0
 80062d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80062d4:	6a21      	ldr	r1, [r4, #32]
 80062d6:	4628      	mov	r0, r5
 80062d8:	47b0      	blx	r6
 80062da:	1c43      	adds	r3, r0, #1
 80062dc:	89a3      	ldrh	r3, [r4, #12]
 80062de:	d106      	bne.n	80062ee <__sflush_r+0x62>
 80062e0:	6829      	ldr	r1, [r5, #0]
 80062e2:	291d      	cmp	r1, #29
 80062e4:	d82b      	bhi.n	800633e <__sflush_r+0xb2>
 80062e6:	4a2a      	ldr	r2, [pc, #168]	@ (8006390 <__sflush_r+0x104>)
 80062e8:	410a      	asrs	r2, r1
 80062ea:	07d6      	lsls	r6, r2, #31
 80062ec:	d427      	bmi.n	800633e <__sflush_r+0xb2>
 80062ee:	2200      	movs	r2, #0
 80062f0:	6062      	str	r2, [r4, #4]
 80062f2:	04d9      	lsls	r1, r3, #19
 80062f4:	6922      	ldr	r2, [r4, #16]
 80062f6:	6022      	str	r2, [r4, #0]
 80062f8:	d504      	bpl.n	8006304 <__sflush_r+0x78>
 80062fa:	1c42      	adds	r2, r0, #1
 80062fc:	d101      	bne.n	8006302 <__sflush_r+0x76>
 80062fe:	682b      	ldr	r3, [r5, #0]
 8006300:	b903      	cbnz	r3, 8006304 <__sflush_r+0x78>
 8006302:	6560      	str	r0, [r4, #84]	@ 0x54
 8006304:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006306:	602f      	str	r7, [r5, #0]
 8006308:	b1b9      	cbz	r1, 800633a <__sflush_r+0xae>
 800630a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800630e:	4299      	cmp	r1, r3
 8006310:	d002      	beq.n	8006318 <__sflush_r+0x8c>
 8006312:	4628      	mov	r0, r5
 8006314:	f000 fa24 	bl	8006760 <_free_r>
 8006318:	2300      	movs	r3, #0
 800631a:	6363      	str	r3, [r4, #52]	@ 0x34
 800631c:	e00d      	b.n	800633a <__sflush_r+0xae>
 800631e:	2301      	movs	r3, #1
 8006320:	4628      	mov	r0, r5
 8006322:	47b0      	blx	r6
 8006324:	4602      	mov	r2, r0
 8006326:	1c50      	adds	r0, r2, #1
 8006328:	d1c9      	bne.n	80062be <__sflush_r+0x32>
 800632a:	682b      	ldr	r3, [r5, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d0c6      	beq.n	80062be <__sflush_r+0x32>
 8006330:	2b1d      	cmp	r3, #29
 8006332:	d001      	beq.n	8006338 <__sflush_r+0xac>
 8006334:	2b16      	cmp	r3, #22
 8006336:	d11e      	bne.n	8006376 <__sflush_r+0xea>
 8006338:	602f      	str	r7, [r5, #0]
 800633a:	2000      	movs	r0, #0
 800633c:	e022      	b.n	8006384 <__sflush_r+0xf8>
 800633e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006342:	b21b      	sxth	r3, r3
 8006344:	e01b      	b.n	800637e <__sflush_r+0xf2>
 8006346:	690f      	ldr	r7, [r1, #16]
 8006348:	2f00      	cmp	r7, #0
 800634a:	d0f6      	beq.n	800633a <__sflush_r+0xae>
 800634c:	0793      	lsls	r3, r2, #30
 800634e:	680e      	ldr	r6, [r1, #0]
 8006350:	bf08      	it	eq
 8006352:	694b      	ldreq	r3, [r1, #20]
 8006354:	600f      	str	r7, [r1, #0]
 8006356:	bf18      	it	ne
 8006358:	2300      	movne	r3, #0
 800635a:	eba6 0807 	sub.w	r8, r6, r7
 800635e:	608b      	str	r3, [r1, #8]
 8006360:	f1b8 0f00 	cmp.w	r8, #0
 8006364:	dde9      	ble.n	800633a <__sflush_r+0xae>
 8006366:	6a21      	ldr	r1, [r4, #32]
 8006368:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800636a:	4643      	mov	r3, r8
 800636c:	463a      	mov	r2, r7
 800636e:	4628      	mov	r0, r5
 8006370:	47b0      	blx	r6
 8006372:	2800      	cmp	r0, #0
 8006374:	dc08      	bgt.n	8006388 <__sflush_r+0xfc>
 8006376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800637a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800637e:	81a3      	strh	r3, [r4, #12]
 8006380:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006388:	4407      	add	r7, r0
 800638a:	eba8 0800 	sub.w	r8, r8, r0
 800638e:	e7e7      	b.n	8006360 <__sflush_r+0xd4>
 8006390:	dfbffffe 	.word	0xdfbffffe

08006394 <_fflush_r>:
 8006394:	b538      	push	{r3, r4, r5, lr}
 8006396:	690b      	ldr	r3, [r1, #16]
 8006398:	4605      	mov	r5, r0
 800639a:	460c      	mov	r4, r1
 800639c:	b913      	cbnz	r3, 80063a4 <_fflush_r+0x10>
 800639e:	2500      	movs	r5, #0
 80063a0:	4628      	mov	r0, r5
 80063a2:	bd38      	pop	{r3, r4, r5, pc}
 80063a4:	b118      	cbz	r0, 80063ae <_fflush_r+0x1a>
 80063a6:	6a03      	ldr	r3, [r0, #32]
 80063a8:	b90b      	cbnz	r3, 80063ae <_fflush_r+0x1a>
 80063aa:	f7ff fb23 	bl	80059f4 <__sinit>
 80063ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d0f3      	beq.n	800639e <_fflush_r+0xa>
 80063b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80063b8:	07d0      	lsls	r0, r2, #31
 80063ba:	d404      	bmi.n	80063c6 <_fflush_r+0x32>
 80063bc:	0599      	lsls	r1, r3, #22
 80063be:	d402      	bmi.n	80063c6 <_fflush_r+0x32>
 80063c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063c2:	f7ff fbf0 	bl	8005ba6 <__retarget_lock_acquire_recursive>
 80063c6:	4628      	mov	r0, r5
 80063c8:	4621      	mov	r1, r4
 80063ca:	f7ff ff5f 	bl	800628c <__sflush_r>
 80063ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063d0:	07da      	lsls	r2, r3, #31
 80063d2:	4605      	mov	r5, r0
 80063d4:	d4e4      	bmi.n	80063a0 <_fflush_r+0xc>
 80063d6:	89a3      	ldrh	r3, [r4, #12]
 80063d8:	059b      	lsls	r3, r3, #22
 80063da:	d4e1      	bmi.n	80063a0 <_fflush_r+0xc>
 80063dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063de:	f7ff fbe3 	bl	8005ba8 <__retarget_lock_release_recursive>
 80063e2:	e7dd      	b.n	80063a0 <_fflush_r+0xc>

080063e4 <__malloc_lock>:
 80063e4:	4801      	ldr	r0, [pc, #4]	@ (80063ec <__malloc_lock+0x8>)
 80063e6:	f7ff bbde 	b.w	8005ba6 <__retarget_lock_acquire_recursive>
 80063ea:	bf00      	nop
 80063ec:	20000468 	.word	0x20000468

080063f0 <__malloc_unlock>:
 80063f0:	4801      	ldr	r0, [pc, #4]	@ (80063f8 <__malloc_unlock+0x8>)
 80063f2:	f7ff bbd9 	b.w	8005ba8 <__retarget_lock_release_recursive>
 80063f6:	bf00      	nop
 80063f8:	20000468 	.word	0x20000468

080063fc <__sread>:
 80063fc:	b510      	push	{r4, lr}
 80063fe:	460c      	mov	r4, r1
 8006400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006404:	f000 f978 	bl	80066f8 <_read_r>
 8006408:	2800      	cmp	r0, #0
 800640a:	bfab      	itete	ge
 800640c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800640e:	89a3      	ldrhlt	r3, [r4, #12]
 8006410:	181b      	addge	r3, r3, r0
 8006412:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006416:	bfac      	ite	ge
 8006418:	6563      	strge	r3, [r4, #84]	@ 0x54
 800641a:	81a3      	strhlt	r3, [r4, #12]
 800641c:	bd10      	pop	{r4, pc}

0800641e <__swrite>:
 800641e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006422:	461f      	mov	r7, r3
 8006424:	898b      	ldrh	r3, [r1, #12]
 8006426:	05db      	lsls	r3, r3, #23
 8006428:	4605      	mov	r5, r0
 800642a:	460c      	mov	r4, r1
 800642c:	4616      	mov	r6, r2
 800642e:	d505      	bpl.n	800643c <__swrite+0x1e>
 8006430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006434:	2302      	movs	r3, #2
 8006436:	2200      	movs	r2, #0
 8006438:	f000 f94c 	bl	80066d4 <_lseek_r>
 800643c:	89a3      	ldrh	r3, [r4, #12]
 800643e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006442:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006446:	81a3      	strh	r3, [r4, #12]
 8006448:	4632      	mov	r2, r6
 800644a:	463b      	mov	r3, r7
 800644c:	4628      	mov	r0, r5
 800644e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006452:	f000 b973 	b.w	800673c <_write_r>

08006456 <__sseek>:
 8006456:	b510      	push	{r4, lr}
 8006458:	460c      	mov	r4, r1
 800645a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800645e:	f000 f939 	bl	80066d4 <_lseek_r>
 8006462:	1c43      	adds	r3, r0, #1
 8006464:	89a3      	ldrh	r3, [r4, #12]
 8006466:	bf15      	itete	ne
 8006468:	6560      	strne	r0, [r4, #84]	@ 0x54
 800646a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800646e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006472:	81a3      	strheq	r3, [r4, #12]
 8006474:	bf18      	it	ne
 8006476:	81a3      	strhne	r3, [r4, #12]
 8006478:	bd10      	pop	{r4, pc}

0800647a <__sclose>:
 800647a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800647e:	f000 b8f7 	b.w	8006670 <_close_r>

08006482 <__swbuf_r>:
 8006482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006484:	460e      	mov	r6, r1
 8006486:	4614      	mov	r4, r2
 8006488:	4605      	mov	r5, r0
 800648a:	b118      	cbz	r0, 8006494 <__swbuf_r+0x12>
 800648c:	6a03      	ldr	r3, [r0, #32]
 800648e:	b90b      	cbnz	r3, 8006494 <__swbuf_r+0x12>
 8006490:	f7ff fab0 	bl	80059f4 <__sinit>
 8006494:	69a3      	ldr	r3, [r4, #24]
 8006496:	60a3      	str	r3, [r4, #8]
 8006498:	89a3      	ldrh	r3, [r4, #12]
 800649a:	071a      	lsls	r2, r3, #28
 800649c:	d501      	bpl.n	80064a2 <__swbuf_r+0x20>
 800649e:	6923      	ldr	r3, [r4, #16]
 80064a0:	b943      	cbnz	r3, 80064b4 <__swbuf_r+0x32>
 80064a2:	4621      	mov	r1, r4
 80064a4:	4628      	mov	r0, r5
 80064a6:	f000 f82b 	bl	8006500 <__swsetup_r>
 80064aa:	b118      	cbz	r0, 80064b4 <__swbuf_r+0x32>
 80064ac:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80064b0:	4638      	mov	r0, r7
 80064b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064b4:	6823      	ldr	r3, [r4, #0]
 80064b6:	6922      	ldr	r2, [r4, #16]
 80064b8:	1a98      	subs	r0, r3, r2
 80064ba:	6963      	ldr	r3, [r4, #20]
 80064bc:	b2f6      	uxtb	r6, r6
 80064be:	4283      	cmp	r3, r0
 80064c0:	4637      	mov	r7, r6
 80064c2:	dc05      	bgt.n	80064d0 <__swbuf_r+0x4e>
 80064c4:	4621      	mov	r1, r4
 80064c6:	4628      	mov	r0, r5
 80064c8:	f7ff ff64 	bl	8006394 <_fflush_r>
 80064cc:	2800      	cmp	r0, #0
 80064ce:	d1ed      	bne.n	80064ac <__swbuf_r+0x2a>
 80064d0:	68a3      	ldr	r3, [r4, #8]
 80064d2:	3b01      	subs	r3, #1
 80064d4:	60a3      	str	r3, [r4, #8]
 80064d6:	6823      	ldr	r3, [r4, #0]
 80064d8:	1c5a      	adds	r2, r3, #1
 80064da:	6022      	str	r2, [r4, #0]
 80064dc:	701e      	strb	r6, [r3, #0]
 80064de:	6962      	ldr	r2, [r4, #20]
 80064e0:	1c43      	adds	r3, r0, #1
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d004      	beq.n	80064f0 <__swbuf_r+0x6e>
 80064e6:	89a3      	ldrh	r3, [r4, #12]
 80064e8:	07db      	lsls	r3, r3, #31
 80064ea:	d5e1      	bpl.n	80064b0 <__swbuf_r+0x2e>
 80064ec:	2e0a      	cmp	r6, #10
 80064ee:	d1df      	bne.n	80064b0 <__swbuf_r+0x2e>
 80064f0:	4621      	mov	r1, r4
 80064f2:	4628      	mov	r0, r5
 80064f4:	f7ff ff4e 	bl	8006394 <_fflush_r>
 80064f8:	2800      	cmp	r0, #0
 80064fa:	d0d9      	beq.n	80064b0 <__swbuf_r+0x2e>
 80064fc:	e7d6      	b.n	80064ac <__swbuf_r+0x2a>
	...

08006500 <__swsetup_r>:
 8006500:	b538      	push	{r3, r4, r5, lr}
 8006502:	4b29      	ldr	r3, [pc, #164]	@ (80065a8 <__swsetup_r+0xa8>)
 8006504:	4605      	mov	r5, r0
 8006506:	6818      	ldr	r0, [r3, #0]
 8006508:	460c      	mov	r4, r1
 800650a:	b118      	cbz	r0, 8006514 <__swsetup_r+0x14>
 800650c:	6a03      	ldr	r3, [r0, #32]
 800650e:	b90b      	cbnz	r3, 8006514 <__swsetup_r+0x14>
 8006510:	f7ff fa70 	bl	80059f4 <__sinit>
 8006514:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006518:	0719      	lsls	r1, r3, #28
 800651a:	d422      	bmi.n	8006562 <__swsetup_r+0x62>
 800651c:	06da      	lsls	r2, r3, #27
 800651e:	d407      	bmi.n	8006530 <__swsetup_r+0x30>
 8006520:	2209      	movs	r2, #9
 8006522:	602a      	str	r2, [r5, #0]
 8006524:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006528:	81a3      	strh	r3, [r4, #12]
 800652a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800652e:	e033      	b.n	8006598 <__swsetup_r+0x98>
 8006530:	0758      	lsls	r0, r3, #29
 8006532:	d512      	bpl.n	800655a <__swsetup_r+0x5a>
 8006534:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006536:	b141      	cbz	r1, 800654a <__swsetup_r+0x4a>
 8006538:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800653c:	4299      	cmp	r1, r3
 800653e:	d002      	beq.n	8006546 <__swsetup_r+0x46>
 8006540:	4628      	mov	r0, r5
 8006542:	f000 f90d 	bl	8006760 <_free_r>
 8006546:	2300      	movs	r3, #0
 8006548:	6363      	str	r3, [r4, #52]	@ 0x34
 800654a:	89a3      	ldrh	r3, [r4, #12]
 800654c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006550:	81a3      	strh	r3, [r4, #12]
 8006552:	2300      	movs	r3, #0
 8006554:	6063      	str	r3, [r4, #4]
 8006556:	6923      	ldr	r3, [r4, #16]
 8006558:	6023      	str	r3, [r4, #0]
 800655a:	89a3      	ldrh	r3, [r4, #12]
 800655c:	f043 0308 	orr.w	r3, r3, #8
 8006560:	81a3      	strh	r3, [r4, #12]
 8006562:	6923      	ldr	r3, [r4, #16]
 8006564:	b94b      	cbnz	r3, 800657a <__swsetup_r+0x7a>
 8006566:	89a3      	ldrh	r3, [r4, #12]
 8006568:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800656c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006570:	d003      	beq.n	800657a <__swsetup_r+0x7a>
 8006572:	4621      	mov	r1, r4
 8006574:	4628      	mov	r0, r5
 8006576:	f000 f83f 	bl	80065f8 <__smakebuf_r>
 800657a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800657e:	f013 0201 	ands.w	r2, r3, #1
 8006582:	d00a      	beq.n	800659a <__swsetup_r+0x9a>
 8006584:	2200      	movs	r2, #0
 8006586:	60a2      	str	r2, [r4, #8]
 8006588:	6962      	ldr	r2, [r4, #20]
 800658a:	4252      	negs	r2, r2
 800658c:	61a2      	str	r2, [r4, #24]
 800658e:	6922      	ldr	r2, [r4, #16]
 8006590:	b942      	cbnz	r2, 80065a4 <__swsetup_r+0xa4>
 8006592:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006596:	d1c5      	bne.n	8006524 <__swsetup_r+0x24>
 8006598:	bd38      	pop	{r3, r4, r5, pc}
 800659a:	0799      	lsls	r1, r3, #30
 800659c:	bf58      	it	pl
 800659e:	6962      	ldrpl	r2, [r4, #20]
 80065a0:	60a2      	str	r2, [r4, #8]
 80065a2:	e7f4      	b.n	800658e <__swsetup_r+0x8e>
 80065a4:	2000      	movs	r0, #0
 80065a6:	e7f7      	b.n	8006598 <__swsetup_r+0x98>
 80065a8:	20000018 	.word	0x20000018

080065ac <__swhatbuf_r>:
 80065ac:	b570      	push	{r4, r5, r6, lr}
 80065ae:	460c      	mov	r4, r1
 80065b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065b4:	2900      	cmp	r1, #0
 80065b6:	b096      	sub	sp, #88	@ 0x58
 80065b8:	4615      	mov	r5, r2
 80065ba:	461e      	mov	r6, r3
 80065bc:	da0d      	bge.n	80065da <__swhatbuf_r+0x2e>
 80065be:	89a3      	ldrh	r3, [r4, #12]
 80065c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80065c4:	f04f 0100 	mov.w	r1, #0
 80065c8:	bf14      	ite	ne
 80065ca:	2340      	movne	r3, #64	@ 0x40
 80065cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80065d0:	2000      	movs	r0, #0
 80065d2:	6031      	str	r1, [r6, #0]
 80065d4:	602b      	str	r3, [r5, #0]
 80065d6:	b016      	add	sp, #88	@ 0x58
 80065d8:	bd70      	pop	{r4, r5, r6, pc}
 80065da:	466a      	mov	r2, sp
 80065dc:	f000 f858 	bl	8006690 <_fstat_r>
 80065e0:	2800      	cmp	r0, #0
 80065e2:	dbec      	blt.n	80065be <__swhatbuf_r+0x12>
 80065e4:	9901      	ldr	r1, [sp, #4]
 80065e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80065ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80065ee:	4259      	negs	r1, r3
 80065f0:	4159      	adcs	r1, r3
 80065f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065f6:	e7eb      	b.n	80065d0 <__swhatbuf_r+0x24>

080065f8 <__smakebuf_r>:
 80065f8:	898b      	ldrh	r3, [r1, #12]
 80065fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065fc:	079d      	lsls	r5, r3, #30
 80065fe:	4606      	mov	r6, r0
 8006600:	460c      	mov	r4, r1
 8006602:	d507      	bpl.n	8006614 <__smakebuf_r+0x1c>
 8006604:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006608:	6023      	str	r3, [r4, #0]
 800660a:	6123      	str	r3, [r4, #16]
 800660c:	2301      	movs	r3, #1
 800660e:	6163      	str	r3, [r4, #20]
 8006610:	b003      	add	sp, #12
 8006612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006614:	ab01      	add	r3, sp, #4
 8006616:	466a      	mov	r2, sp
 8006618:	f7ff ffc8 	bl	80065ac <__swhatbuf_r>
 800661c:	9f00      	ldr	r7, [sp, #0]
 800661e:	4605      	mov	r5, r0
 8006620:	4639      	mov	r1, r7
 8006622:	4630      	mov	r0, r6
 8006624:	f7ff fc24 	bl	8005e70 <_malloc_r>
 8006628:	b948      	cbnz	r0, 800663e <__smakebuf_r+0x46>
 800662a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800662e:	059a      	lsls	r2, r3, #22
 8006630:	d4ee      	bmi.n	8006610 <__smakebuf_r+0x18>
 8006632:	f023 0303 	bic.w	r3, r3, #3
 8006636:	f043 0302 	orr.w	r3, r3, #2
 800663a:	81a3      	strh	r3, [r4, #12]
 800663c:	e7e2      	b.n	8006604 <__smakebuf_r+0xc>
 800663e:	89a3      	ldrh	r3, [r4, #12]
 8006640:	6020      	str	r0, [r4, #0]
 8006642:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006646:	81a3      	strh	r3, [r4, #12]
 8006648:	9b01      	ldr	r3, [sp, #4]
 800664a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800664e:	b15b      	cbz	r3, 8006668 <__smakebuf_r+0x70>
 8006650:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006654:	4630      	mov	r0, r6
 8006656:	f000 f82d 	bl	80066b4 <_isatty_r>
 800665a:	b128      	cbz	r0, 8006668 <__smakebuf_r+0x70>
 800665c:	89a3      	ldrh	r3, [r4, #12]
 800665e:	f023 0303 	bic.w	r3, r3, #3
 8006662:	f043 0301 	orr.w	r3, r3, #1
 8006666:	81a3      	strh	r3, [r4, #12]
 8006668:	89a3      	ldrh	r3, [r4, #12]
 800666a:	431d      	orrs	r5, r3
 800666c:	81a5      	strh	r5, [r4, #12]
 800666e:	e7cf      	b.n	8006610 <__smakebuf_r+0x18>

08006670 <_close_r>:
 8006670:	b538      	push	{r3, r4, r5, lr}
 8006672:	4d06      	ldr	r5, [pc, #24]	@ (800668c <_close_r+0x1c>)
 8006674:	2300      	movs	r3, #0
 8006676:	4604      	mov	r4, r0
 8006678:	4608      	mov	r0, r1
 800667a:	602b      	str	r3, [r5, #0]
 800667c:	f7fa f9c9 	bl	8000a12 <_close>
 8006680:	1c43      	adds	r3, r0, #1
 8006682:	d102      	bne.n	800668a <_close_r+0x1a>
 8006684:	682b      	ldr	r3, [r5, #0]
 8006686:	b103      	cbz	r3, 800668a <_close_r+0x1a>
 8006688:	6023      	str	r3, [r4, #0]
 800668a:	bd38      	pop	{r3, r4, r5, pc}
 800668c:	20000474 	.word	0x20000474

08006690 <_fstat_r>:
 8006690:	b538      	push	{r3, r4, r5, lr}
 8006692:	4d07      	ldr	r5, [pc, #28]	@ (80066b0 <_fstat_r+0x20>)
 8006694:	2300      	movs	r3, #0
 8006696:	4604      	mov	r4, r0
 8006698:	4608      	mov	r0, r1
 800669a:	4611      	mov	r1, r2
 800669c:	602b      	str	r3, [r5, #0]
 800669e:	f7fa f9c4 	bl	8000a2a <_fstat>
 80066a2:	1c43      	adds	r3, r0, #1
 80066a4:	d102      	bne.n	80066ac <_fstat_r+0x1c>
 80066a6:	682b      	ldr	r3, [r5, #0]
 80066a8:	b103      	cbz	r3, 80066ac <_fstat_r+0x1c>
 80066aa:	6023      	str	r3, [r4, #0]
 80066ac:	bd38      	pop	{r3, r4, r5, pc}
 80066ae:	bf00      	nop
 80066b0:	20000474 	.word	0x20000474

080066b4 <_isatty_r>:
 80066b4:	b538      	push	{r3, r4, r5, lr}
 80066b6:	4d06      	ldr	r5, [pc, #24]	@ (80066d0 <_isatty_r+0x1c>)
 80066b8:	2300      	movs	r3, #0
 80066ba:	4604      	mov	r4, r0
 80066bc:	4608      	mov	r0, r1
 80066be:	602b      	str	r3, [r5, #0]
 80066c0:	f7fa f9c3 	bl	8000a4a <_isatty>
 80066c4:	1c43      	adds	r3, r0, #1
 80066c6:	d102      	bne.n	80066ce <_isatty_r+0x1a>
 80066c8:	682b      	ldr	r3, [r5, #0]
 80066ca:	b103      	cbz	r3, 80066ce <_isatty_r+0x1a>
 80066cc:	6023      	str	r3, [r4, #0]
 80066ce:	bd38      	pop	{r3, r4, r5, pc}
 80066d0:	20000474 	.word	0x20000474

080066d4 <_lseek_r>:
 80066d4:	b538      	push	{r3, r4, r5, lr}
 80066d6:	4d07      	ldr	r5, [pc, #28]	@ (80066f4 <_lseek_r+0x20>)
 80066d8:	4604      	mov	r4, r0
 80066da:	4608      	mov	r0, r1
 80066dc:	4611      	mov	r1, r2
 80066de:	2200      	movs	r2, #0
 80066e0:	602a      	str	r2, [r5, #0]
 80066e2:	461a      	mov	r2, r3
 80066e4:	f7fa f9bc 	bl	8000a60 <_lseek>
 80066e8:	1c43      	adds	r3, r0, #1
 80066ea:	d102      	bne.n	80066f2 <_lseek_r+0x1e>
 80066ec:	682b      	ldr	r3, [r5, #0]
 80066ee:	b103      	cbz	r3, 80066f2 <_lseek_r+0x1e>
 80066f0:	6023      	str	r3, [r4, #0]
 80066f2:	bd38      	pop	{r3, r4, r5, pc}
 80066f4:	20000474 	.word	0x20000474

080066f8 <_read_r>:
 80066f8:	b538      	push	{r3, r4, r5, lr}
 80066fa:	4d07      	ldr	r5, [pc, #28]	@ (8006718 <_read_r+0x20>)
 80066fc:	4604      	mov	r4, r0
 80066fe:	4608      	mov	r0, r1
 8006700:	4611      	mov	r1, r2
 8006702:	2200      	movs	r2, #0
 8006704:	602a      	str	r2, [r5, #0]
 8006706:	461a      	mov	r2, r3
 8006708:	f7fa f966 	bl	80009d8 <_read>
 800670c:	1c43      	adds	r3, r0, #1
 800670e:	d102      	bne.n	8006716 <_read_r+0x1e>
 8006710:	682b      	ldr	r3, [r5, #0]
 8006712:	b103      	cbz	r3, 8006716 <_read_r+0x1e>
 8006714:	6023      	str	r3, [r4, #0]
 8006716:	bd38      	pop	{r3, r4, r5, pc}
 8006718:	20000474 	.word	0x20000474

0800671c <_sbrk_r>:
 800671c:	b538      	push	{r3, r4, r5, lr}
 800671e:	4d06      	ldr	r5, [pc, #24]	@ (8006738 <_sbrk_r+0x1c>)
 8006720:	2300      	movs	r3, #0
 8006722:	4604      	mov	r4, r0
 8006724:	4608      	mov	r0, r1
 8006726:	602b      	str	r3, [r5, #0]
 8006728:	f7fa f9a8 	bl	8000a7c <_sbrk>
 800672c:	1c43      	adds	r3, r0, #1
 800672e:	d102      	bne.n	8006736 <_sbrk_r+0x1a>
 8006730:	682b      	ldr	r3, [r5, #0]
 8006732:	b103      	cbz	r3, 8006736 <_sbrk_r+0x1a>
 8006734:	6023      	str	r3, [r4, #0]
 8006736:	bd38      	pop	{r3, r4, r5, pc}
 8006738:	20000474 	.word	0x20000474

0800673c <_write_r>:
 800673c:	b538      	push	{r3, r4, r5, lr}
 800673e:	4d07      	ldr	r5, [pc, #28]	@ (800675c <_write_r+0x20>)
 8006740:	4604      	mov	r4, r0
 8006742:	4608      	mov	r0, r1
 8006744:	4611      	mov	r1, r2
 8006746:	2200      	movs	r2, #0
 8006748:	602a      	str	r2, [r5, #0]
 800674a:	461a      	mov	r2, r3
 800674c:	f7f9 ffe6 	bl	800071c <_write>
 8006750:	1c43      	adds	r3, r0, #1
 8006752:	d102      	bne.n	800675a <_write_r+0x1e>
 8006754:	682b      	ldr	r3, [r5, #0]
 8006756:	b103      	cbz	r3, 800675a <_write_r+0x1e>
 8006758:	6023      	str	r3, [r4, #0]
 800675a:	bd38      	pop	{r3, r4, r5, pc}
 800675c:	20000474 	.word	0x20000474

08006760 <_free_r>:
 8006760:	b538      	push	{r3, r4, r5, lr}
 8006762:	4605      	mov	r5, r0
 8006764:	2900      	cmp	r1, #0
 8006766:	d041      	beq.n	80067ec <_free_r+0x8c>
 8006768:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800676c:	1f0c      	subs	r4, r1, #4
 800676e:	2b00      	cmp	r3, #0
 8006770:	bfb8      	it	lt
 8006772:	18e4      	addlt	r4, r4, r3
 8006774:	f7ff fe36 	bl	80063e4 <__malloc_lock>
 8006778:	4a1d      	ldr	r2, [pc, #116]	@ (80067f0 <_free_r+0x90>)
 800677a:	6813      	ldr	r3, [r2, #0]
 800677c:	b933      	cbnz	r3, 800678c <_free_r+0x2c>
 800677e:	6063      	str	r3, [r4, #4]
 8006780:	6014      	str	r4, [r2, #0]
 8006782:	4628      	mov	r0, r5
 8006784:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006788:	f7ff be32 	b.w	80063f0 <__malloc_unlock>
 800678c:	42a3      	cmp	r3, r4
 800678e:	d908      	bls.n	80067a2 <_free_r+0x42>
 8006790:	6820      	ldr	r0, [r4, #0]
 8006792:	1821      	adds	r1, r4, r0
 8006794:	428b      	cmp	r3, r1
 8006796:	bf01      	itttt	eq
 8006798:	6819      	ldreq	r1, [r3, #0]
 800679a:	685b      	ldreq	r3, [r3, #4]
 800679c:	1809      	addeq	r1, r1, r0
 800679e:	6021      	streq	r1, [r4, #0]
 80067a0:	e7ed      	b.n	800677e <_free_r+0x1e>
 80067a2:	461a      	mov	r2, r3
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	b10b      	cbz	r3, 80067ac <_free_r+0x4c>
 80067a8:	42a3      	cmp	r3, r4
 80067aa:	d9fa      	bls.n	80067a2 <_free_r+0x42>
 80067ac:	6811      	ldr	r1, [r2, #0]
 80067ae:	1850      	adds	r0, r2, r1
 80067b0:	42a0      	cmp	r0, r4
 80067b2:	d10b      	bne.n	80067cc <_free_r+0x6c>
 80067b4:	6820      	ldr	r0, [r4, #0]
 80067b6:	4401      	add	r1, r0
 80067b8:	1850      	adds	r0, r2, r1
 80067ba:	4283      	cmp	r3, r0
 80067bc:	6011      	str	r1, [r2, #0]
 80067be:	d1e0      	bne.n	8006782 <_free_r+0x22>
 80067c0:	6818      	ldr	r0, [r3, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	6053      	str	r3, [r2, #4]
 80067c6:	4408      	add	r0, r1
 80067c8:	6010      	str	r0, [r2, #0]
 80067ca:	e7da      	b.n	8006782 <_free_r+0x22>
 80067cc:	d902      	bls.n	80067d4 <_free_r+0x74>
 80067ce:	230c      	movs	r3, #12
 80067d0:	602b      	str	r3, [r5, #0]
 80067d2:	e7d6      	b.n	8006782 <_free_r+0x22>
 80067d4:	6820      	ldr	r0, [r4, #0]
 80067d6:	1821      	adds	r1, r4, r0
 80067d8:	428b      	cmp	r3, r1
 80067da:	bf04      	itt	eq
 80067dc:	6819      	ldreq	r1, [r3, #0]
 80067de:	685b      	ldreq	r3, [r3, #4]
 80067e0:	6063      	str	r3, [r4, #4]
 80067e2:	bf04      	itt	eq
 80067e4:	1809      	addeq	r1, r1, r0
 80067e6:	6021      	streq	r1, [r4, #0]
 80067e8:	6054      	str	r4, [r2, #4]
 80067ea:	e7ca      	b.n	8006782 <_free_r+0x22>
 80067ec:	bd38      	pop	{r3, r4, r5, pc}
 80067ee:	bf00      	nop
 80067f0:	20000470 	.word	0x20000470

080067f4 <_init>:
 80067f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067f6:	bf00      	nop
 80067f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067fa:	bc08      	pop	{r3}
 80067fc:	469e      	mov	lr, r3
 80067fe:	4770      	bx	lr

08006800 <_fini>:
 8006800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006802:	bf00      	nop
 8006804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006806:	bc08      	pop	{r3}
 8006808:	469e      	mov	lr, r3
 800680a:	4770      	bx	lr
